
packages/banana/32/0002/ac97.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(Device*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(Device*)-0xa>	1000000d: R_386_PC32	start(Device*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(Device*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	57                   	push   edi
1000001b:	56                   	push   esi
1000001c:	53                   	push   ebx
1000001d:	83 ec 2c             	sub    esp,0x2c
10000020:	83 ec 0c             	sub    esp,0xc
10000023:	68 08 0d 00 10       	push   0x10000d08	10000024: R_386_32	.text
10000028:	e8 fc ff ff ff       	call   10000029 <start(Device*)+0x12>	10000029: R_386_PC32	KeSetBootMessage(char const*)
1000002d:	83 c4 10             	add    esp,0x10
10000030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000033:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000003c:	e8 fc ff ff ff       	call   1000003d <start(Device*)+0x26>	1000003d: R_386_PC32	Device::getParent()
10000041:	83 c4 10             	add    esp,0x10
10000044:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000047:	c7 45 d8 14 02 00 00 	mov    DWORD PTR [ebp-0x28],0x214
1000004e:	83 ec 0c             	sub    esp,0xc
10000051:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000054:	e8 fc ff ff ff       	call   10000055 <start(Device*)+0x3e>	10000055: R_386_PC32	malloc
10000059:	83 c4 10             	add    esp,0x10
1000005c:	89 c3                	mov    ebx,eax
1000005e:	83 ec 0c             	sub    esp,0xc
10000061:	53                   	push   ebx
10000062:	e8 fc ff ff ff       	call   10000063 <start(Device*)+0x4c>	10000063: R_386_PC32	AC97::AC97()
10000067:	83 c4 10             	add    esp,0x10
1000006a:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
1000006d:	83 ec 08             	sub    esp,0x8
10000070:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000073:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000076:	e8 fc ff ff ff       	call   10000077 <start(Device*)+0x60>	10000077: R_386_PC32	Device::addChild(Device*)
1000007b:	83 c4 10             	add    esp,0x10
1000007e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000081:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000084:	83 ec 08             	sub    esp,0x8
10000087:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000008a:	83 ec 24             	sub    esp,0x24
1000008d:	89 e2                	mov    edx,esp
1000008f:	8d 98 18 01 00 00    	lea    ebx,[eax+0x118]
10000095:	b8 09 00 00 00       	mov    eax,0x9
1000009a:	89 d7                	mov    edi,edx
1000009c:	89 de                	mov    esi,ebx
1000009e:	89 c1                	mov    ecx,eax
100000a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100000a2:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100000a5:	e8 fc ff ff ff       	call   100000a6 <start(Device*)+0x8f>	100000a6: R_386_PC32	Device::preOpenPCI(PCIDeviceInfo)
100000aa:	83 c4 30             	add    esp,0x30
100000ad:	6a 00                	push   0x0
100000af:	6a 00                	push   0x0
100000b1:	6a 00                	push   0x0
100000b3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000b6:	e8 fc ff ff ff       	call   100000b7 <start(Device*)+0xa0>	100000b7: R_386_PC32	AC97::_open(int, int, void*)
100000bb:	83 c4 10             	add    esp,0x10
100000be:	a1 00 00 00 00       	mov    eax,ds:0x0	100000bf: R_386_32	kernelProcess
100000c3:	6a 1e                	push   0x1e
100000c5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000c8:	68 00 00 00 00       	push   0x0	100000c9: R_386_32	playThread(void*)
100000cd:	50                   	push   eax
100000ce:	e8 fc ff ff ff       	call   100000cf <start(Device*)+0xb8>	100000cf: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100000d3:	83 c4 10             	add    esp,0x10
100000d6:	90                   	nop
100000d7:	8d 65 f4             	lea    esp,[ebp-0xc]
100000da:	5b                   	pop    ebx
100000db:	5e                   	pop    esi
100000dc:	5f                   	pop    edi
100000dd:	5d                   	pop    ebp
100000de:	c3                   	ret    

100000df <playThread(void*)>:
100000df:	55                   	push   ebp
100000e0:	89 e5                	mov    ebp,esp
100000e2:	53                   	push   ebx
100000e3:	83 ec 24             	sub    esp,0x24
100000e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100000e7: R_386_32	irqDisableCounter
100000eb:	48                   	dec    eax
100000ec:	a3 00 00 00 00       	mov    ds:0x0,eax	100000ed: R_386_32	irqDisableCounter
100000f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100000f2: R_386_32	irqDisableCounter
100000f6:	85 c0                	test   eax,eax
100000f8:	75 01                	jne    100000fb <playThread(void*)+0x1c>
100000fa:	fb                   	sti    
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000101:	c7 45 dc 1c 00 00 00 	mov    DWORD PTR [ebp-0x24],0x1c
10000108:	83 ec 0c             	sub    esp,0xc
1000010b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000010e:	e8 fc ff ff ff       	call   1000010f <playThread(void*)+0x30>	1000010f: R_386_PC32	malloc
10000113:	83 c4 10             	add    esp,0x10
10000116:	89 c3                	mov    ebx,eax
10000118:	83 ec 0c             	sub    esp,0xc
1000011b:	68 00 00 06 00       	push   0x60000
10000120:	6a 02                	push   0x2
10000122:	6a 10                	push   0x10
10000124:	68 80 3e 00 00       	push   0x3e80
10000129:	53                   	push   ebx
1000012a:	e8 fc ff ff ff       	call   1000012b <playThread(void*)+0x4c>	1000012b: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
1000012f:	83 c4 20             	add    esp,0x20
10000132:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
10000135:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10000139:	c7 45 e0 14 01 00 00 	mov    DWORD PTR [ebp-0x20],0x114
10000140:	83 ec 0c             	sub    esp,0xc
10000143:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000146:	e8 fc ff ff ff       	call   10000147 <playThread(void*)+0x68>	10000147: R_386_PC32	malloc
1000014b:	83 c4 10             	add    esp,0x10
1000014e:	89 c3                	mov    ebx,eax
10000150:	a1 00 00 00 00       	mov    eax,ds:0x0	10000151: R_386_32	kernelProcess
10000155:	83 ec 04             	sub    esp,0x4
10000158:	50                   	push   eax
10000159:	68 20 0d 00 10       	push   0x10000d20	1000015a: R_386_32	.text
1000015e:	53                   	push   ebx
1000015f:	e8 fc ff ff ff       	call   10000160 <playThread(void*)+0x81>	10000160: R_386_PC32	File::File(char const*, Process*)
10000164:	83 c4 10             	add    esp,0x10
10000167:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
1000016a:	83 ec 08             	sub    esp,0x8
1000016d:	6a 01                	push   0x1
1000016f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000172:	e8 fc ff ff ff       	call   10000173 <playThread(void*)+0x94>	10000173: R_386_PC32	File::open(FileOpenMode)
10000177:	83 c4 10             	add    esp,0x10
1000017a:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10000181:	83 ec 0c             	sub    esp,0xc
10000184:	68 2f 0d 00 10       	push   0x10000d2f	10000185: R_386_32	.text
10000189:	e8 fc ff ff ff       	call   1000018a <playThread(void*)+0xab>	1000018a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000018e:	83 c4 10             	add    esp,0x10
10000191:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000194:	8b 00                	mov    eax,DWORD PTR [eax]
10000196:	83 c0 0c             	add    eax,0xc
10000199:	8b 00                	mov    eax,DWORD PTR [eax]
1000019b:	83 ec 0c             	sub    esp,0xc
1000019e:	8d 55 d8             	lea    edx,[ebp-0x28]
100001a1:	52                   	push   edx
100001a2:	68 00 00 00 00       	push   0x0	100001a3: R_386_32	buf
100001a7:	6a 00                	push   0x0
100001a9:	68 00 40 00 00       	push   0x4000
100001ae:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100001b1:	ff d0                	call   eax
100001b3:	83 c4 20             	add    esp,0x20
100001b6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100001b9:	83 ec 0c             	sub    esp,0xc
100001bc:	68 3f 0d 00 10       	push   0x10000d3f	100001bd: R_386_32	.text
100001c1:	e8 fc ff ff ff       	call   100001c2 <playThread(void*)+0xe3>	100001c2: R_386_PC32	Dbg::kprintf(char const*, ...)
100001c6:	83 c4 10             	add    esp,0x10
100001c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100001cc:	85 c0                	test   eax,eax
100001ce:	74 06                	je     100001d6 <playThread(void*)+0xf7>
100001d0:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
100001d4:	74 22                	je     100001f8 <playThread(void*)+0x119>
100001d6:	83 ec 0c             	sub    esp,0xc
100001d9:	68 4e 0d 00 10       	push   0x10000d4e	100001da: R_386_32	.text
100001de:	e8 fc ff ff ff       	call   100001df <playThread(void*)+0x100>	100001df: R_386_PC32	Dbg::kprintf(char const*, ...)
100001e3:	83 c4 10             	add    esp,0x10
100001e6:	83 ec 0c             	sub    esp,0xc
100001e9:	6a 00                	push   0x0
100001eb:	e8 fc ff ff ff       	call   100001ec <playThread(void*)+0x10d>	100001ec: R_386_PC32	terminateTask(int)
100001f0:	83 c4 10             	add    esp,0x10
100001f3:	e9 f5 00 00 00       	jmp    100002ed <playThread(void*)+0x20e>
100001f8:	83 ec 0c             	sub    esp,0xc
100001fb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100001fe:	e8 fc ff ff ff       	call   100001ff <playThread(void*)+0x120>	100001ff: R_386_PC32	SoundPort::getBufferUsed()
10000203:	83 c4 10             	add    esp,0x10
10000206:	83 ec 08             	sub    esp,0x8
10000209:	50                   	push   eax
1000020a:	68 64 0d 00 10       	push   0x10000d64	1000020b: R_386_32	.text
1000020f:	e8 fc ff ff ff       	call   10000210 <playThread(void*)+0x131>	10000210: R_386_PC32	Dbg::kprintf(char const*, ...)
10000214:	83 c4 10             	add    esp,0x10
10000217:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000021a:	83 f0 01             	xor    eax,0x1
1000021d:	84 c0                	test   al,al
1000021f:	74 4c                	je     1000026d <playThread(void*)+0x18e>
10000221:	6a 02                	push   0x2
10000223:	6a 10                	push   0x10
10000225:	68 80 3e 00 00       	push   0x3e80
1000022a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000022d:	e8 fc ff ff ff       	call   1000022e <playThread(void*)+0x14f>	1000022e: R_386_PC32	SoundCard::configureRates(int, int, int)
10000232:	83 c4 10             	add    esp,0x10
10000235:	83 ec 08             	sub    esp,0x8
10000238:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000023b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000023e:	e8 fc ff ff ff       	call   1000023f <playThread(void*)+0x160>	1000023f: R_386_PC32	SoundCard::addChannel(SoundPort*)
10000243:	83 c4 10             	add    esp,0x10
10000246:	83 ec 0c             	sub    esp,0xc
10000249:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000024c:	e8 fc ff ff ff       	call   1000024d <playThread(void*)+0x16e>	1000024d: R_386_PC32	SoundPort::unpause()
10000251:	83 c4 10             	add    esp,0x10
10000254:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000257:	8b 00                	mov    eax,DWORD PTR [eax]
10000259:	83 c0 24             	add    eax,0x24
1000025c:	8b 00                	mov    eax,DWORD PTR [eax]
1000025e:	83 ec 0c             	sub    esp,0xc
10000261:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000264:	ff d0                	call   eax
10000266:	83 c4 10             	add    esp,0x10
10000269:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
1000026d:	83 ec 0c             	sub    esp,0xc
10000270:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000273:	e8 fc ff ff ff       	call   10000274 <playThread(void*)+0x195>	10000274: R_386_PC32	SoundPort::getBufferUsed()
10000278:	83 c4 10             	add    esp,0x10
1000027b:	89 c2                	mov    edx,eax
1000027d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000280:	89 c1                	mov    ecx,eax
10000282:	01 c9                	add    ecx,ecx
10000284:	01 c8                	add    eax,ecx
10000286:	8d 1c 02             	lea    ebx,[edx+eax*1]
10000289:	83 ec 0c             	sub    esp,0xc
1000028c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000028f:	e8 fc ff ff ff       	call   10000290 <playThread(void*)+0x1b1>	10000290: R_386_PC32	SoundPort::getBufferSize()
10000294:	83 c4 10             	add    esp,0x10
10000297:	39 c3                	cmp    ebx,eax
10000299:	0f 9d c0             	setge  al
1000029c:	84 c0                	test   al,al
1000029e:	74 28                	je     100002c8 <playThread(void*)+0x1e9>
100002a0:	fa                   	cli    
100002a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100002a2: R_386_32	irqDisableCounter
100002a6:	40                   	inc    eax
100002a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100002a8: R_386_32	irqDisableCounter
100002ac:	e8 fc ff ff ff       	call   100002ad <playThread(void*)+0x1ce>	100002ad: R_386_PC32	schedule()
100002b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100002b2: R_386_32	irqDisableCounter
100002b6:	48                   	dec    eax
100002b7:	a3 00 00 00 00       	mov    ds:0x0,eax	100002b8: R_386_32	irqDisableCounter
100002bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100002bd: R_386_32	irqDisableCounter
100002c1:	85 c0                	test   eax,eax
100002c3:	75 a8                	jne    1000026d <playThread(void*)+0x18e>
100002c5:	fb                   	sti    
100002c6:	eb a5                	jmp    1000026d <playThread(void*)+0x18e>
100002c8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100002cb:	89 c2                	mov    edx,eax
100002cd:	c1 ea 1f             	shr    edx,0x1f
100002d0:	01 d0                	add    eax,edx
100002d2:	d1 f8                	sar    eax,1
100002d4:	83 ec 04             	sub    esp,0x4
100002d7:	50                   	push   eax
100002d8:	68 00 00 00 00       	push   0x0	100002d9: R_386_32	buf
100002dd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100002e0:	e8 fc ff ff ff       	call   100002e1 <playThread(void*)+0x202>	100002e1: R_386_PC32	SoundPort::buffer16(short*, int)
100002e5:	83 c4 10             	add    esp,0x10
100002e8:	e9 8d fe ff ff       	jmp    1000017a <playThread(void*)+0x9b>
100002ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100002f0:	c9                   	leave  
100002f1:	c3                   	ret    

100002f2 <AC97::AC97()>:
100002f2:	55                   	push   ebp
100002f3:	89 e5                	mov    ebp,esp
100002f5:	83 ec 08             	sub    esp,0x8
100002f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fb:	83 ec 08             	sub    esp,0x8
100002fe:	68 82 0d 00 10       	push   0x10000d82	100002ff: R_386_32	.text
10000303:	50                   	push   eax
10000304:	e8 fc ff ff ff       	call   10000305 <AC97::AC97()+0x13>	10000305: R_386_PC32	SoundCard::SoundCard(char const*)
10000309:	83 c4 10             	add    esp,0x10
1000030c:	ba 08 00 00 00       	mov    edx,0x8	1000030d: R_386_32	vtable for AC97
10000311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000314:	89 10                	mov    DWORD PTR [eax],edx
10000316:	90                   	nop
10000317:	c9                   	leave  
10000318:	c3                   	ret    
10000319:	90                   	nop

1000031a <AC97::~AC97()>:
1000031a:	55                   	push   ebp
1000031b:	89 e5                	mov    ebp,esp
1000031d:	83 ec 08             	sub    esp,0x8
10000320:	ba 08 00 00 00       	mov    edx,0x8	10000321: R_386_32	vtable for AC97
10000325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000328:	89 10                	mov    DWORD PTR [eax],edx
1000032a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000032d:	83 ec 0c             	sub    esp,0xc
10000330:	50                   	push   eax
10000331:	e8 fc ff ff ff       	call   10000332 <AC97::~AC97()+0x18>	10000332: R_386_PC32	SoundCard::~SoundCard()
10000336:	83 c4 10             	add    esp,0x10
10000339:	90                   	nop
1000033a:	c9                   	leave  
1000033b:	c3                   	ret    

1000033c <AC97::~AC97()>:
1000033c:	55                   	push   ebp
1000033d:	89 e5                	mov    ebp,esp
1000033f:	83 ec 08             	sub    esp,0x8
10000342:	83 ec 0c             	sub    esp,0xc
10000345:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000348:	e8 fc ff ff ff       	call   10000349 <AC97::~AC97()+0xd>	10000349: R_386_PC32	AC97::~AC97()
1000034d:	83 c4 10             	add    esp,0x10
10000350:	83 ec 08             	sub    esp,0x8
10000353:	68 14 02 00 00       	push   0x214
10000358:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000035b:	e8 fc ff ff ff       	call   1000035c <AC97::~AC97()+0x20>	1000035c: R_386_PC32	operator delete(void*, unsigned long)
10000360:	83 c4 10             	add    esp,0x10
10000363:	c9                   	leave  
10000364:	c3                   	ret    
10000365:	90                   	nop

10000366 <AC97::setVolume(int, int)>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 18             	sub    esp,0x18
1000036c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000036f:	89 d0                	mov    eax,edx
10000371:	c1 e0 02             	shl    eax,0x2
10000374:	01 d0                	add    eax,edx
10000376:	01 c0                	add    eax,eax
10000378:	85 c0                	test   eax,eax
1000037a:	79 03                	jns    1000037f <AC97::setVolume(int, int)+0x19>
1000037c:	83 c0 1f             	add    eax,0x1f
1000037f:	c1 f8 05             	sar    eax,0x5
10000382:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000385:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000388:	89 d0                	mov    eax,edx
1000038a:	c1 e0 02             	shl    eax,0x2
1000038d:	01 d0                	add    eax,edx
1000038f:	01 c0                	add    eax,eax
10000391:	85 c0                	test   eax,eax
10000393:	79 03                	jns    10000398 <AC97::setVolume(int, int)+0x32>
10000395:	83 c0 1f             	add    eax,0x1f
10000398:	c1 f8 05             	sar    eax,0x5
1000039b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000039e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003a1:	c1 e0 08             	shl    eax,0x8
100003a4:	89 c2                	mov    edx,eax
100003a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100003a9:	09 d0                	or     eax,edx
100003ab:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
100003af:	a1 00 00 00 00       	mov    eax,ds:0x0	100003b0: R_386_32	thePCI
100003b4:	0f b7 4d ee          	movzx  ecx,WORD PTR [ebp-0x12]
100003b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003bb:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100003c1:	6a 02                	push   0x2
100003c3:	51                   	push   ecx
100003c4:	52                   	push   edx
100003c5:	50                   	push   eax
100003c6:	e8 fc ff ff ff       	call   100003c7 <AC97::setVolume(int, int)+0x61>	100003c7: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003cb:	83 c4 10             	add    esp,0x10
100003ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100003cf: R_386_32	thePCI
100003d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003d6:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100003dc:	6a 18                	push   0x18
100003de:	6a 00                	push   0x0
100003e0:	52                   	push   edx
100003e1:	50                   	push   eax
100003e2:	e8 fc ff ff ff       	call   100003e3 <AC97::setVolume(int, int)+0x7d>	100003e3: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003e7:	83 c4 10             	add    esp,0x10
100003ea:	90                   	nop
100003eb:	c9                   	leave  
100003ec:	c3                   	ret    
100003ed:	90                   	nop

100003ee <AC97::open(int, int, void*)>:
100003ee:	b8 00 00 00 00       	mov    eax,0x0
100003f3:	c3                   	ret    

100003f4 <ac97IRQHandler(regs*, void*)>:
100003f4:	55                   	push   ebp
100003f5:	89 e5                	mov    ebp,esp
100003f7:	83 ec 18             	sub    esp,0x18
100003fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003fd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000400:	83 ec 0c             	sub    esp,0xc
10000403:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000406:	e8 fc ff ff ff       	call   10000407 <ac97IRQHandler(regs*, void*)+0x13>	10000407: R_386_PC32	AC97::handleIRQ()
1000040b:	83 c4 10             	add    esp,0x10
1000040e:	90                   	nop
1000040f:	c9                   	leave  
10000410:	c3                   	ret    
10000411:	90                   	nop

10000412 <AC97::handleIRQ()>:
10000412:	55                   	push   ebp
10000413:	89 e5                	mov    ebp,esp
10000415:	83 ec 18             	sub    esp,0x18
10000418:	83 ec 0c             	sub    esp,0xc
1000041b:	68 9b 0d 00 10       	push   0x10000d9b	1000041c: R_386_32	.text
10000420:	e8 fc ff ff ff       	call   10000421 <AC97::handleIRQ()+0xf>	10000421: R_386_PC32	Dbg::kprintf(char const*, ...)
10000425:	83 c4 10             	add    esp,0x10
10000428:	a1 00 00 00 00       	mov    eax,ds:0x0	10000429: R_386_32	thePCI
1000042d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000430:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000436:	83 ec 04             	sub    esp,0x4
10000439:	6a 14                	push   0x14
1000043b:	52                   	push   edx
1000043c:	50                   	push   eax
1000043d:	e8 fc ff ff ff       	call   1000043e <AC97::handleIRQ()+0x2c>	1000043e: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000442:	83 c4 10             	add    esp,0x10
10000445:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000448:	a1 00 00 00 00       	mov    eax,ds:0x0	10000449: R_386_32	thePCI
1000044d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000450:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000456:	83 ec 04             	sub    esp,0x4
10000459:	6a 15                	push   0x15
1000045b:	52                   	push   edx
1000045c:	50                   	push   eax
1000045d:	e8 fc ff ff ff       	call   1000045e <AC97::handleIRQ()+0x4c>	1000045e: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000462:	83 c4 10             	add    esp,0x10
10000465:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000468:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000046c:	40                   	inc    eax
1000046d:	b9 03 00 00 00       	mov    ecx,0x3
10000472:	99                   	cdq    
10000473:	f7 f9                	idiv   ecx
10000475:	89 d1                	mov    ecx,edx
10000477:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000047b:	8d 50 ff             	lea    edx,[eax-0x1]
1000047e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000482:	51                   	push   ecx
10000483:	52                   	push   edx
10000484:	50                   	push   eax
10000485:	68 a8 0d 00 10       	push   0x10000da8	10000486: R_386_32	.text
1000048a:	e8 fc ff ff ff       	call   1000048b <AC97::handleIRQ()+0x79>	1000048b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000048f:	83 c4 10             	add    esp,0x10
10000492:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
10000496:	83 ec 08             	sub    esp,0x8
10000499:	50                   	push   eax
1000049a:	68 d7 0d 00 10       	push   0x10000dd7	1000049b: R_386_32	.text
1000049f:	e8 fc ff ff ff       	call   100004a0 <AC97::handleIRQ()+0x8e>	100004a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100004a4:	83 c4 10             	add    esp,0x10
100004a7:	a1 00 00 00 00       	mov    eax,ds:0x0	100004a8: R_386_32	thePCI
100004ac:	0f b6 4d f6          	movzx  ecx,BYTE PTR [ebp-0xa]
100004b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100004b3:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100004b9:	6a 15                	push   0x15
100004bb:	51                   	push   ecx
100004bc:	52                   	push   edx
100004bd:	50                   	push   eax
100004be:	e8 fc ff ff ff       	call   100004bf <AC97::handleIRQ()+0xad>	100004bf: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100004c3:	83 c4 10             	add    esp,0x10
100004c6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100004ca:	83 c0 02             	add    eax,0x2
100004cd:	b9 03 00 00 00       	mov    ecx,0x3
100004d2:	99                   	cdq    
100004d3:	f7 f9                	idiv   ecx
100004d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d8:	83 c2 7c             	add    edx,0x7c
100004db:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100004df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e5:	83 ec 04             	sub    esp,0x4
100004e8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004eb:	68 01 80 00 00       	push   0x8001
100004f0:	50                   	push   eax
100004f1:	e8 fc ff ff ff       	call   100004f2 <AC97::handleIRQ()+0xe0>	100004f2: R_386_PC32	SoundCard::getSamples16(int, short*)
100004f6:	83 c4 10             	add    esp,0x10
100004f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004fc:	83 ec 04             	sub    esp,0x4
100004ff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000502:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000505:	68 e2 0d 00 10       	push   0x10000de2	10000506: R_386_32	.text
1000050a:	e8 fc ff ff ff       	call   1000050b <AC97::handleIRQ()+0xf9>	1000050b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000050f:	83 c4 10             	add    esp,0x10
10000512:	a1 00 00 00 00       	mov    eax,ds:0x0	10000513: R_386_32	thePCI
10000517:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000051a:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000520:	6a 16                	push   0x16
10000522:	6a 1c                	push   0x1c
10000524:	52                   	push   edx
10000525:	50                   	push   eax
10000526:	e8 fc ff ff ff       	call   10000527 <AC97::handleIRQ()+0x115>	10000527: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
1000052b:	83 c4 10             	add    esp,0x10
1000052e:	90                   	nop
1000052f:	c9                   	leave  
10000530:	c3                   	ret    
10000531:	90                   	nop

10000532 <AC97::setSampleRate(int)>:
10000532:	55                   	push   ebp
10000533:	89 e5                	mov    ebp,esp
10000535:	53                   	push   ebx
10000536:	83 ec 04             	sub    esp,0x4
10000539:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	1000053b: R_386_32	thePCI
1000053f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000540: R_386_32	thePCI
10000544:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000547:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
1000054d:	83 ec 04             	sub    esp,0x4
10000550:	6a 2a                	push   0x2a
10000552:	52                   	push   edx
10000553:	50                   	push   eax
10000554:	e8 fc ff ff ff       	call   10000555 <AC97::setSampleRate(int)+0x23>	10000555: R_386_PC32	PCI::readBAR16(unsigned int, int)
10000559:	83 c4 10             	add    esp,0x10
1000055c:	83 c8 01             	or     eax,0x1
1000055f:	0f b7 d0             	movzx  edx,ax
10000562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000565:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000056b:	6a 2a                	push   0x2a
1000056d:	52                   	push   edx
1000056e:	50                   	push   eax
1000056f:	53                   	push   ebx
10000570:	e8 fc ff ff ff       	call   10000571 <AC97::setSampleRate(int)+0x3f>	10000571: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000575:	83 c4 10             	add    esp,0x10
10000578:	83 ec 0c             	sub    esp,0xc
1000057b:	6a 64                	push   0x64
1000057d:	e8 fc ff ff ff       	call   1000057e <AC97::setSampleRate(int)+0x4c>	1000057e: R_386_PC32	milliTenthSleep(unsigned int)
10000582:	83 c4 10             	add    esp,0x10
10000585:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000587: R_386_32	thePCI
1000058b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000058e:	0f b7 c8             	movzx  ecx,ax
10000591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000594:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000059a:	6a 2c                	push   0x2c
1000059c:	51                   	push   ecx
1000059d:	50                   	push   eax
1000059e:	52                   	push   edx
1000059f:	e8 fc ff ff ff       	call   100005a0 <AC97::setSampleRate(int)+0x6e>	100005a0: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100005a4:	83 c4 10             	add    esp,0x10
100005a7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100005a9: R_386_32	thePCI
100005ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005b0:	0f b7 c8             	movzx  ecx,ax
100005b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b6:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005bc:	6a 32                	push   0x32
100005be:	51                   	push   ecx
100005bf:	50                   	push   eax
100005c0:	52                   	push   edx
100005c1:	e8 fc ff ff ff       	call   100005c2 <AC97::setSampleRate(int)+0x90>	100005c2: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100005c6:	83 c4 10             	add    esp,0x10
100005c9:	83 ec 0c             	sub    esp,0xc
100005cc:	6a 64                	push   0x64
100005ce:	e8 fc ff ff ff       	call   100005cf <AC97::setSampleRate(int)+0x9d>	100005cf: R_386_PC32	milliTenthSleep(unsigned int)
100005d3:	83 c4 10             	add    esp,0x10
100005d6:	90                   	nop
100005d7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100005da:	c9                   	leave  
100005db:	c3                   	ret    

100005dc <AC97::_open(int, int, void*)>:
100005dc:	55                   	push   ebp
100005dd:	89 e5                	mov    ebp,esp
100005df:	56                   	push   esi
100005e0:	53                   	push   ebx
100005e1:	83 ec 30             	sub    esp,0x30
100005e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e7:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
100005ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f0:	89 90 e8 01 00 00    	mov    DWORD PTR [eax+0x1e8],edx
100005f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f9:	8b 90 24 01 00 00    	mov    edx,DWORD PTR [eax+0x124]
100005ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000602:	89 90 ec 01 00 00    	mov    DWORD PTR [eax+0x1ec],edx
10000608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060b:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000611:	83 e0 01             	and    eax,0x1
10000614:	85 c0                	test   eax,eax
10000616:	74 5a                	je     10000672 <AC97::_open(int, int, void*)+0x96>
10000618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061b:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000621:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000624:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
1000062a:	0f b6 ca             	movzx  ecx,dl
1000062d:	83 e0 fc             	and    eax,0xfffffffc
10000630:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000633:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000641:	0f b6 d0             	movzx  edx,al
10000644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000647:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
1000064c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000064f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000655:	8d 50 01             	lea    edx,[eax+0x1]
10000658:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000065b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000661:	0f b6 d0             	movzx  edx,al
10000664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000667:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000066b:	83 e1 3f             	and    ecx,0x3f
1000066e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000675:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
1000067b:	83 e0 01             	and    eax,0x1
1000067e:	85 c0                	test   eax,eax
10000680:	74 5a                	je     100006dc <AC97::_open(int, int, void*)+0x100>
10000682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000685:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
1000068b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000068e:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000694:	0f b6 ca             	movzx  ecx,dl
10000697:	83 e0 fc             	and    eax,0xfffffffc
1000069a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000069d:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100006a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006ab:	0f b6 d0             	movzx  edx,al
100006ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b1:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
100006b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006bf:	8d 50 01             	lea    edx,[eax+0x1]
100006c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006cb:	0f b6 d0             	movzx  edx,al
100006ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006d5:	83 e1 3f             	and    ecx,0x3f
100006d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100006dd: R_386_32	thePCI
100006e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006e4:	8a 92 1e 01 00 00    	mov    dl,BYTE PTR [edx+0x11e]
100006ea:	0f b6 da             	movzx  ebx,dl
100006ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006f0:	8a 92 1d 01 00 00    	mov    dl,BYTE PTR [edx+0x11d]
100006f6:	0f b6 ca             	movzx  ecx,dl
100006f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006fc:	8a 92 1c 01 00 00    	mov    dl,BYTE PTR [edx+0x11c]
10000702:	0f b6 d2             	movzx  edx,dl
10000705:	83 ec 0c             	sub    esp,0xc
10000708:	6a 04                	push   0x4
1000070a:	53                   	push   ebx
1000070b:	51                   	push   ecx
1000070c:	52                   	push   edx
1000070d:	50                   	push   eax
1000070e:	e8 fc ff ff ff       	call   1000070f <AC97::_open(int, int, void*)+0x133>	1000070f: R_386_PC32	PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)
10000713:	83 c4 20             	add    esp,0x20
10000716:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
1000071a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000071c: R_386_32	thePCI
10000720:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000724:	83 c8 05             	or     eax,0x5
10000727:	0f b7 f0             	movzx  esi,ax
1000072a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000072d:	8a 80 1e 01 00 00    	mov    al,BYTE PTR [eax+0x11e]
10000733:	0f b6 d8             	movzx  ebx,al
10000736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000739:	8a 80 1d 01 00 00    	mov    al,BYTE PTR [eax+0x11d]
1000073f:	0f b6 c8             	movzx  ecx,al
10000742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000745:	8a 80 1c 01 00 00    	mov    al,BYTE PTR [eax+0x11c]
1000074b:	0f b6 c0             	movzx  eax,al
1000074e:	83 ec 08             	sub    esp,0x8
10000751:	56                   	push   esi
10000752:	6a 04                	push   0x4
10000754:	53                   	push   ebx
10000755:	51                   	push   ecx
10000756:	50                   	push   eax
10000757:	52                   	push   edx
10000758:	e8 fc ff ff ff       	call   10000759 <AC97::_open(int, int, void*)+0x17d>	10000759: R_386_PC32	PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
1000075d:	83 c4 20             	add    esp,0x20
10000760:	a1 00 00 00 00       	mov    eax,ds:0x0	10000761: R_386_32	thePCI
10000765:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000768:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000076e:	6a 2c                	push   0x2c
10000770:	6a 03                	push   0x3
10000772:	52                   	push   edx
10000773:	50                   	push   eax
10000774:	e8 fc ff ff ff       	call   10000775 <AC97::_open(int, int, void*)+0x199>	10000775: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000779:	83 c4 10             	add    esp,0x10
1000077c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000077d: R_386_32	thePCI
10000781:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000784:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
1000078a:	6a 00                	push   0x0
1000078c:	68 aa 55 00 00       	push   0x55aa
10000791:	52                   	push   edx
10000792:	50                   	push   eax
10000793:	e8 fc ff ff ff       	call   10000794 <AC97::_open(int, int, void*)+0x1b8>	10000794: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000798:	83 c4 10             	add    esp,0x10
1000079b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000079c: R_386_32	thePCI
100007a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007a3:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100007a9:	83 ec 04             	sub    esp,0x4
100007ac:	6a 30                	push   0x30
100007ae:	52                   	push   edx
100007af:	50                   	push   eax
100007b0:	e8 fc ff ff ff       	call   100007b1 <AC97::_open(int, int, void*)+0x1d5>	100007b1: R_386_PC32	PCI::readBAR32(unsigned int, int)
100007b5:	83 c4 10             	add    esp,0x10
100007b8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007bb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100007be:	c1 e8 14             	shr    eax,0x14
100007c1:	83 e0 03             	and    eax,0x3
100007c4:	40                   	inc    eax
100007c5:	01 c0                	add    eax,eax
100007c7:	83 ec 08             	sub    esp,0x8
100007ca:	50                   	push   eax
100007cb:	68 fd 0d 00 10       	push   0x10000dfd	100007cc: R_386_32	.text
100007d0:	e8 fc ff ff ff       	call   100007d1 <AC97::_open(int, int, void*)+0x1f5>	100007d1: R_386_PC32	Dbg::kprintf(char const*, ...)
100007d5:	83 c4 10             	add    esp,0x10
100007d8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100007db:	c1 e8 16             	shr    eax,0x16
100007de:	83 e0 03             	and    eax,0x3
100007e1:	83 f8 01             	cmp    eax,0x1
100007e4:	75 10                	jne    100007f6 <AC97::_open(int, int, void*)+0x21a>
100007e6:	83 ec 0c             	sub    esp,0xc
100007e9:	68 10 0e 00 10       	push   0x10000e10	100007ea: R_386_32	.text
100007ee:	e8 fc ff ff ff       	call   100007ef <AC97::_open(int, int, void*)+0x213>	100007ef: R_386_PC32	Dbg::kprintf(char const*, ...)
100007f3:	83 c4 10             	add    esp,0x10
100007f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100007f7: R_386_32	thePCI
100007fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007fe:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000804:	83 ec 04             	sub    esp,0x4
10000807:	6a 1b                	push   0x1b
10000809:	52                   	push   edx
1000080a:	50                   	push   eax
1000080b:	e8 fc ff ff ff       	call   1000080c <AC97::_open(int, int, void*)+0x230>	1000080c: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000810:	83 c4 10             	add    esp,0x10
10000813:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10000816:	a1 00 00 00 00       	mov    eax,ds:0x0	10000817: R_386_32	thePCI
1000081b:	8a 55 df             	mov    dl,BYTE PTR [ebp-0x21]
1000081e:	83 ca 02             	or     edx,0x2
10000821:	0f b6 ca             	movzx  ecx,dl
10000824:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000827:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000082d:	6a 1b                	push   0x1b
1000082f:	51                   	push   ecx
10000830:	52                   	push   edx
10000831:	50                   	push   eax
10000832:	e8 fc ff ff ff       	call   10000833 <AC97::_open(int, int, void*)+0x257>	10000833: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000837:	83 c4 10             	add    esp,0x10
1000083a:	83 ec 0c             	sub    esp,0xc
1000083d:	68 c4 09 00 00       	push   0x9c4
10000842:	e8 fc ff ff ff       	call   10000843 <AC97::_open(int, int, void*)+0x267>	10000843: R_386_PC32	milliTenthSleep(unsigned int)
10000847:	83 c4 10             	add    esp,0x10
1000084a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000084b: R_386_32	thePCI
1000084f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000852:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000858:	83 ec 04             	sub    esp,0x4
1000085b:	6a 1b                	push   0x1b
1000085d:	52                   	push   edx
1000085e:	50                   	push   eax
1000085f:	e8 fc ff ff ff       	call   10000860 <AC97::_open(int, int, void*)+0x284>	10000860: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000864:	83 c4 10             	add    esp,0x10
10000867:	0f b6 c0             	movzx  eax,al
1000086a:	83 e0 02             	and    eax,0x2
1000086d:	85 c0                	test   eax,eax
1000086f:	0f 95 c0             	setne  al
10000872:	84 c0                	test   al,al
10000874:	74 10                	je     10000886 <AC97::_open(int, int, void*)+0x2aa>
10000876:	83 ec 0c             	sub    esp,0xc
10000879:	68 29 0e 00 10       	push   0x10000e29	1000087a: R_386_32	.text
1000087e:	e8 fc ff ff ff       	call   1000087f <AC97::_open(int, int, void*)+0x2a3>	1000087f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000883:	83 c4 10             	add    esp,0x10
10000886:	83 ec 04             	sub    esp,0x4
10000889:	6a 32                	push   0x32
1000088b:	6a 0f                	push   0xf
1000088d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000890:	e8 fc ff ff ff       	call   10000891 <AC97::_open(int, int, void*)+0x2b5>	10000891: R_386_PC32	AC97::setVolume(int, int)
10000895:	83 c4 10             	add    esp,0x10
10000898:	83 ec 0c             	sub    esp,0xc
1000089b:	6a 01                	push   0x1
1000089d:	e8 fc ff ff ff       	call   1000089e <AC97::_open(int, int, void*)+0x2c2>	1000089e: R_386_PC32	Phys::allocateContiguousPages(int)
100008a2:	83 c4 10             	add    esp,0x10
100008a5:	89 c2                	mov    edx,eax
100008a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008aa:	89 90 f4 01 00 00    	mov    DWORD PTR [eax+0x1f4],edx
100008b0:	83 ec 0c             	sub    esp,0xc
100008b3:	6a 01                	push   0x1
100008b5:	e8 fc ff ff ff       	call   100008b6 <AC97::_open(int, int, void*)+0x2da>	100008b6: R_386_PC32	Virt::allocateKernelVirtualPages(int)
100008ba:	83 c4 10             	add    esp,0x10
100008bd:	89 c2                	mov    edx,eax
100008bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c2:	89 90 f0 01 00 00    	mov    DWORD PTR [eax+0x1f0],edx
100008c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008cb:	8b 90 f0 01 00 00    	mov    edx,DWORD PTR [eax+0x1f0]
100008d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d4:	8b 80 f4 01 00 00    	mov    eax,DWORD PTR [eax+0x1f4]
100008da:	83 ec 04             	sub    esp,0x4
100008dd:	52                   	push   edx
100008de:	50                   	push   eax
100008df:	68 44 0e 00 10       	push   0x10000e44	100008e0: R_386_32	.text
100008e4:	e8 fc ff ff ff       	call   100008e5 <AC97::_open(int, int, void*)+0x309>	100008e5: R_386_PC32	Dbg::kprintf(char const*, ...)
100008e9:	83 c4 10             	add    esp,0x10
100008ec:	a1 00 00 00 00       	mov    eax,ds:0x0	100008ed: R_386_32	firstVAS
100008f1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008f4:	8b 8a f0 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f0]
100008fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008fd:	8b 92 f4 01 00 00    	mov    edx,DWORD PTR [edx+0x1f4]
10000903:	83 ec 0c             	sub    esp,0xc
10000906:	6a 03                	push   0x3
10000908:	6a 01                	push   0x1
1000090a:	51                   	push   ecx
1000090b:	52                   	push   edx
1000090c:	50                   	push   eax
1000090d:	e8 fc ff ff ff       	call   1000090e <AC97::_open(int, int, void*)+0x332>	1000090e: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
10000912:	83 c4 20             	add    esp,0x20
10000915:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000091c:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10000920:	0f 8f cb 00 00 00    	jg     100009f1 <AC97::_open(int, int, void*)+0x415>
10000926:	c7 45 d8 14 00 00 00 	mov    DWORD PTR [ebp-0x28],0x14
1000092d:	83 ec 0c             	sub    esp,0xc
10000930:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000933:	e8 fc ff ff ff       	call   10000934 <AC97::_open(int, int, void*)+0x358>	10000934: R_386_PC32	Phys::allocateContiguousPages(int)
10000938:	83 c4 10             	add    esp,0x10
1000093b:	89 c2                	mov    edx,eax
1000093d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000940:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000943:	83 e9 80             	sub    ecx,0xffffff80
10000946:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
1000094a:	83 ec 0c             	sub    esp,0xc
1000094d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000950:	e8 fc ff ff ff       	call   10000951 <AC97::_open(int, int, void*)+0x375>	10000951: R_386_PC32	Virt::allocateKernelVirtualPages(int)
10000955:	83 c4 10             	add    esp,0x10
10000958:	89 c2                	mov    edx,eax
1000095a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000960:	83 c1 7c             	add    ecx,0x7c
10000963:	89 54 88 0c          	mov    DWORD PTR [eax+ecx*4+0xc],edx
10000967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000096d:	83 c2 7c             	add    edx,0x7c
10000970:	8b 54 90 0c          	mov    edx,DWORD PTR [eax+edx*4+0xc]
10000974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000977:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
1000097a:	83 e9 80             	sub    ecx,0xffffff80
1000097d:	8b 44 88 08          	mov    eax,DWORD PTR [eax+ecx*4+0x8]
10000981:	83 ec 04             	sub    esp,0x4
10000984:	52                   	push   edx
10000985:	50                   	push   eax
10000986:	68 64 0e 00 10       	push   0x10000e64	10000987: R_386_32	.text
1000098b:	e8 fc ff ff ff       	call   1000098c <AC97::_open(int, int, void*)+0x3b0>	1000098c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000990:	83 c4 10             	add    esp,0x10
10000993:	a1 00 00 00 00       	mov    eax,ds:0x0	10000994: R_386_32	firstVAS
10000998:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000099b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
1000099e:	83 c1 7c             	add    ecx,0x7c
100009a1:	8b 4c 8a 0c          	mov    ecx,DWORD PTR [edx+ecx*4+0xc]
100009a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009a8:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
100009ab:	83 eb 80             	sub    ebx,0xffffff80
100009ae:	8b 54 9a 08          	mov    edx,DWORD PTR [edx+ebx*4+0x8]
100009b2:	83 ec 0c             	sub    esp,0xc
100009b5:	6a 03                	push   0x3
100009b7:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100009ba:	51                   	push   ecx
100009bb:	52                   	push   edx
100009bc:	50                   	push   eax
100009bd:	e8 fc ff ff ff       	call   100009be <AC97::_open(int, int, void*)+0x3e2>	100009be: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
100009c2:	83 c4 20             	add    esp,0x20
100009c5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100009c8:	c1 e0 0c             	shl    eax,0xc
100009cb:	89 c2                	mov    edx,eax
100009cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009d0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
100009d3:	83 c1 7c             	add    ecx,0x7c
100009d6:	8b 44 88 0c          	mov    eax,DWORD PTR [eax+ecx*4+0xc]
100009da:	83 ec 04             	sub    esp,0x4
100009dd:	52                   	push   edx
100009de:	6a 00                	push   0x0
100009e0:	50                   	push   eax
100009e1:	e8 fc ff ff ff       	call   100009e2 <AC97::_open(int, int, void*)+0x406>	100009e2: R_386_PC32	memset
100009e6:	83 c4 10             	add    esp,0x10
100009e9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100009ec:	e9 2b ff ff ff       	jmp    1000091c <AC97::_open(int, int, void*)+0x340>
100009f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009f4:	8b 80 f0 01 00 00    	mov    eax,DWORD PTR [eax+0x1f0]
100009fa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100009fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a00:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
10000a06:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a09:	89 10                	mov    DWORD PTR [eax],edx
10000a0b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a0e:	83 c0 04             	add    eax,0x4
10000a11:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a17:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a1a:	8d 50 08             	lea    edx,[eax+0x8]
10000a1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a20:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
10000a26:	89 02                	mov    DWORD PTR [edx],eax
10000a28:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a2b:	83 c0 0c             	add    eax,0xc
10000a2e:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a34:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a37:	8d 50 10             	lea    edx,[eax+0x10]
10000a3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a3d:	8b 80 10 02 00 00    	mov    eax,DWORD PTR [eax+0x210]
10000a43:	89 02                	mov    DWORD PTR [edx],eax
10000a45:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a48:	83 c0 14             	add    eax,0x14
10000a4b:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a51:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000a58:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10000a5c:	7f 38                	jg     10000a96 <AC97::_open(int, int, void*)+0x4ba>
10000a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a61:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000a64:	83 c2 7c             	add    edx,0x7c
10000a67:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000a6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000a6e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000a75:	81 7d e8 fe ff 00 00 	cmp    DWORD PTR [ebp-0x18],0xfffe
10000a7c:	7f 13                	jg     10000a91 <AC97::_open(int, int, void*)+0x4b5>
10000a7e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000a81:	8d 50 02             	lea    edx,[eax+0x2]
10000a84:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10000a87:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
10000a8c:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10000a8f:	eb e4                	jmp    10000a75 <AC97::_open(int, int, void*)+0x499>
10000a91:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000a94:	eb c2                	jmp    10000a58 <AC97::_open(int, int, void*)+0x47c>
10000a96:	a1 00 00 00 00       	mov    eax,ds:0x0	10000a97: R_386_32	thePCI
10000a9b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a9e:	8b 8a f4 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f4]
10000aa4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000aa7:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000aad:	6a 10                	push   0x10
10000aaf:	51                   	push   ecx
10000ab0:	52                   	push   edx
10000ab1:	50                   	push   eax
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <AC97::_open(int, int, void*)+0x4d7>	10000ab3: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	a1 00 00 00 00       	mov    eax,ds:0x0	10000abb: R_386_32	thePCI
10000abf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000ac2:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000ac8:	6a 15                	push   0x15
10000aca:	6a 03                	push   0x3
10000acc:	52                   	push   edx
10000acd:	50                   	push   eax
10000ace:	e8 fc ff ff ff       	call   10000acf <AC97::_open(int, int, void*)+0x4f3>	10000acf: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000ad3:	83 c4 10             	add    esp,0x10
10000ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ad9:	8a 80 38 01 00 00    	mov    al,BYTE PTR [eax+0x138]
10000adf:	0f b6 c0             	movzx  eax,al
10000ae2:	83 ec 08             	sub    esp,0x8
10000ae5:	50                   	push   eax
10000ae6:	68 87 0e 00 10       	push   0x10000e87	10000ae7: R_386_32	.text
10000aeb:	e8 fc ff ff ff       	call   10000aec <AC97::_open(int, int, void*)+0x510>	10000aec: R_386_PC32	Dbg::kprintf(char const*, ...)
10000af0:	83 c4 10             	add    esp,0x10
10000af3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000af9:	8a 92 38 01 00 00    	mov    dl,BYTE PTR [edx+0x138]
10000aff:	0f b6 d2             	movzx  edx,dl
10000b02:	83 ec 0c             	sub    esp,0xc
10000b05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b08:	6a 01                	push   0x1
10000b0a:	68 00 00 00 00       	push   0x0	10000b0b: R_386_32	ac97IRQHandler(regs*, void*)
10000b0f:	52                   	push   edx
10000b10:	50                   	push   eax
10000b11:	e8 fc ff ff ff       	call   10000b12 <AC97::_open(int, int, void*)+0x536>	10000b12: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000b16:	83 c4 20             	add    esp,0x20
10000b19:	89 c2                	mov    edx,eax
10000b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b1e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000b24:	b8 00 00 00 00       	mov    eax,0x0
10000b29:	8d 65 f8             	lea    esp,[ebp-0x8]
10000b2c:	5b                   	pop    ebx
10000b2d:	5e                   	pop    esi
10000b2e:	5d                   	pop    ebp
10000b2f:	c3                   	ret    

10000b30 <AC97::close(int, int, void*)>:
10000b30:	b8 00 00 00 00       	mov    eax,0x0
10000b35:	c3                   	ret    

10000b36 <AC97::beginPlayback()>:
10000b36:	55                   	push   ebp
10000b37:	89 e5                	mov    ebp,esp
10000b39:	83 ec 18             	sub    esp,0x18
10000b3c:	83 ec 0c             	sub    esp,0xc
10000b3f:	68 97 0e 00 10       	push   0x10000e97	10000b40: R_386_32	.text
10000b44:	e8 fc ff ff ff       	call   10000b45 <AC97::beginPlayback()+0xf>	10000b45: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b49:	83 c4 10             	add    esp,0x10
10000b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b4f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
10000b55:	83 ec 08             	sub    esp,0x8
10000b58:	50                   	push   eax
10000b59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b5c:	e8 fc ff ff ff       	call   10000b5d <AC97::beginPlayback()+0x27>	10000b5d: R_386_PC32	AC97::setSampleRate(int)
10000b61:	83 c4 10             	add    esp,0x10
10000b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b67:	8b 80 dc 01 00 00    	mov    eax,DWORD PTR [eax+0x1dc]
10000b6d:	83 f8 10             	cmp    eax,0x10
10000b70:	74 10                	je     10000b82 <AC97::beginPlayback()+0x4c>
10000b72:	83 ec 0c             	sub    esp,0xc
10000b75:	68 b0 0e 00 10       	push   0x10000eb0	10000b76: R_386_32	.text
10000b7a:	e8 fc ff ff ff       	call   10000b7b <AC97::beginPlayback()+0x45>	10000b7b: R_386_PC32	KePanic(char const*)
10000b7f:	83 c4 10             	add    esp,0x10
10000b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b85:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10000b8b:	83 f8 02             	cmp    eax,0x2
10000b8e:	74 10                	je     10000ba0 <AC97::beginPlayback()+0x6a>
10000b90:	83 ec 0c             	sub    esp,0xc
10000b93:	68 e0 0e 00 10       	push   0x10000ee0	10000b94: R_386_32	.text
10000b98:	e8 fc ff ff ff       	call   10000b99 <AC97::beginPlayback()+0x63>	10000b99: R_386_PC32	KePanic(char const*)
10000b9d:	83 c4 10             	add    esp,0x10
10000ba0:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ba1: R_386_32	thePCI
10000ba5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000ba8:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000bae:	83 ec 04             	sub    esp,0x4
10000bb1:	6a 1b                	push   0x1b
10000bb3:	52                   	push   edx
10000bb4:	50                   	push   eax
10000bb5:	e8 fc ff ff ff       	call   10000bb6 <AC97::beginPlayback()+0x80>	10000bb6: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000bba:	83 c4 10             	add    esp,0x10
10000bbd:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bc0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000bc3:	83 e0 e0             	and    eax,0xffffffe0
10000bc6:	83 c8 1d             	or     eax,0x1d
10000bc9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bcc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000bd0:	83 ec 08             	sub    esp,0x8
10000bd3:	50                   	push   eax
10000bd4:	68 11 0f 00 10       	push   0x10000f11	10000bd5: R_386_32	.text
10000bd9:	e8 fc ff ff ff       	call   10000bda <AC97::beginPlayback()+0xa4>	10000bda: R_386_PC32	Dbg::kprintf(char const*, ...)
10000bde:	83 c4 10             	add    esp,0x10
10000be1:	a1 00 00 00 00       	mov    eax,ds:0x0	10000be2: R_386_32	thePCI
10000be6:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
10000bea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bed:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000bf3:	6a 1b                	push   0x1b
10000bf5:	51                   	push   ecx
10000bf6:	52                   	push   edx
10000bf7:	50                   	push   eax
10000bf8:	e8 fc ff ff ff       	call   10000bf9 <AC97::beginPlayback()+0xc3>	10000bf9: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000bfd:	83 c4 10             	add    esp,0x10
10000c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c03:	c6 80 d8 01 00 00 01 	mov    BYTE PTR [eax+0x1d8],0x1
10000c0a:	90                   	nop
10000c0b:	c9                   	leave  
10000c0c:	c3                   	ret    
10000c0d:	90                   	nop

10000c0e <AC97::stopPlayback()>:
10000c0e:	55                   	push   ebp
10000c0f:	89 e5                	mov    ebp,esp
10000c11:	83 ec 18             	sub    esp,0x18
10000c14:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c15: R_386_32	thePCI
10000c19:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c1c:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c22:	83 ec 04             	sub    esp,0x4
10000c25:	6a 1b                	push   0x1b
10000c27:	52                   	push   edx
10000c28:	50                   	push   eax
10000c29:	e8 fc ff ff ff       	call   10000c2a <AC97::stopPlayback()+0x1c>	10000c2a: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000c2e:	83 c4 10             	add    esp,0x10
10000c31:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c34:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c35: R_386_32	thePCI
10000c39:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000c3d:	89 d1                	mov    ecx,edx
10000c3f:	81 e1 e0 00 00 00    	and    ecx,0xe0
10000c45:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c48:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c4e:	6a 1b                	push   0x1b
10000c50:	51                   	push   ecx
10000c51:	52                   	push   edx
10000c52:	50                   	push   eax
10000c53:	e8 fc ff ff ff       	call   10000c54 <AC97::stopPlayback()+0x46>	10000c54: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000c58:	83 c4 10             	add    esp,0x10
10000c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c5e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
10000c65:	90                   	nop
10000c66:	c9                   	leave  
10000c67:	c3                   	ret    
10000c68:	13 05 00 00 24 05    	adc    eax,DWORD PTR ds:0x5240000
10000c6e:	00 00                	add    BYTE PTR [eax],al
10000c70:	00 06                	add    BYTE PTR [esi],al
10000c72:	00 00                	add    BYTE PTR [eax],al
10000c74:	00 00                	add    BYTE PTR [eax],al
10000c76:	01 00                	add    DWORD PTR [eax],eax
10000c78:	00 00                	add    BYTE PTR [eax],al
10000c7a:	02 00                	add    al,BYTE PTR [eax]
10000c7c:	00 00                	add    BYTE PTR [eax],al
10000c7e:	04 00                	add    al,0x0
10000c80:	00 00                	add    BYTE PTR [eax],al
10000c82:	06                   	push   es
10000c83:	00 00                	add    BYTE PTR [eax],al
10000c85:	00 10                	add    BYTE PTR [eax],dl
10000c87:	00 00                	add    BYTE PTR [eax],al
10000c89:	10 00                	adc    BYTE PTR [eax],al
10000c8b:	00 00                	add    BYTE PTR [eax],al
10000c8d:	00 00                	add    BYTE PTR [eax],al
10000c8f:	c0 00 00             	rol    BYTE PTR [eax],0x0
10000c92:	00 c2                	add    dl,al
10000c94:	00 00                	add    BYTE PTR [eax],al
10000c96:	40                   	inc    eax
10000c97:	c2 00 00             	ret    0x0
10000c9a:	80 c2 00             	add    dl,0x0
10000c9d:	00 c0                	add    al,al
10000c9f:	c2 00 00             	ret    0x0
10000ca2:	01 c2                	add    edx,eax
10000ca4:	00 00                	add    BYTE PTR [eax],al
10000ca6:	01 00                	add    DWORD PTR [eax],eax
10000ca8:	00 00                	add    BYTE PTR [eax],al
10000caa:	06                   	push   es
10000cab:	c2 00 00             	ret    0x0
10000cae:	02 00                	add    al,BYTE PTR [eax]
10000cb0:	00 10                	add    BYTE PTR [eax],dl
10000cb2:	00 c2                	add    dl,al
10000cb4:	00 00                	add    BYTE PTR [eax],al
10000cb6:	02 c2                	add    al,dl
10000cb8:	00 00                	add    BYTE PTR [eax],al
10000cba:	02 00                	add    al,BYTE PTR [eax]
10000cbc:	00 00                	add    BYTE PTR [eax],al
10000cbe:	04 c2                	add    al,0xc2
10000cc0:	00 80 00 00 00 06    	add    BYTE PTR [eax+0x6000000],al
10000cc6:	00 c2                	add    dl,al
10000cc8:	13 05 00 c2 24 05    	adc    eax,DWORD PTR ds:0x524c200
10000cce:	00 c2                	add    dl,al
10000cd0:	00 00                	add    BYTE PTR [eax],al
10000cd2:	18 00                	sbb    BYTE PTR [eax],al
10000cd4:	00 00                	add    BYTE PTR [eax],al
10000cd6:	08 00                	or     BYTE PTR [eax],al
10000cd8:	00 00                	add    BYTE PTR [eax],al
10000cda:	20 00                	and    BYTE PTR [eax],al
10000cdc:	00 00                	add    BYTE PTR [eax],al
10000cde:	00 10                	add    BYTE PTR [eax],dl
10000ce0:	00 00                	add    BYTE PTR [eax],al
10000ce2:	00 02                	add    BYTE PTR [edx],al
10000ce4:	00 00                	add    BYTE PTR [eax],al
10000ce6:	e8 01 00 00 00       	call   10000cec <AC97::stopPlayback()+0xde>
10000ceb:	c8 ff ff ff          	enter  0xffff,0xff
10000cef:	ef                   	out    dx,eax
10000cf0:	00 00                	add    BYTE PTR [eax],al
10000cf2:	00 f0                	add    al,dh
10000cf4:	00 00                	add    BYTE PTR [eax],al
10000cf6:	c0 ff 00             	sar    bh,0x0
10000cf9:	00 10                	add    BYTE PTR [eax],dl
10000cfb:	c2 00 40             	ret    0x4000
10000cfe:	48                   	dec    eax
10000cff:	c2 80 00             	ret    0x80
10000d02:	00 00                	add    BYTE PTR [eax],al
10000d04:	80 00 00             	add    BYTE PTR [eax],0x0
10000d07:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
10000d0a:	61                   	popa   
10000d0b:	72 74                	jb     10000d81 <AC97::stopPlayback()+0x173>
10000d0d:	69 6e 67 20 41 43 39 	imul   ebp,DWORD PTR [esi+0x67],0x39434120
10000d14:	37                   	aaa    
10000d15:	20 64 72 69          	and    BYTE PTR [edx+esi*2+0x69],ah
10000d19:	76 65                	jbe    10000d80 <AC97::stopPlayback()+0x172>
10000d1b:	72 2e                	jb     10000d4b <AC97::stopPlayback()+0x13d>
10000d1d:	2e 2e 00 43 3a       	cs add BYTE PTR cs:[ebx+0x3a],al
10000d22:	2f                   	das    
10000d23:	67 75 6d             	addr16 jne 10000d93 <AC97::stopPlayback()+0x185>
10000d26:	62 61 6c             	bound  esp,QWORD PTR [ecx+0x6c]
10000d29:	6c                   	ins    BYTE PTR es:[edi],dx
10000d2a:	2e 77 61             	cs ja  10000d8e <AC97::stopPlayback()+0x180>
10000d2d:	76 00                	jbe    10000d2f <AC97::stopPlayback()+0x121>
10000d2f:	61                   	popa   
10000d30:	62 6f 75             	bound  ebp,QWORD PTR [edi+0x75]
10000d33:	74 20                	je     10000d55 <AC97::stopPlayback()+0x147>
10000d35:	74 6f                	je     10000da6 <AC97::stopPlayback()+0x198>
10000d37:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d3a:	61                   	popa   
10000d3b:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d3f:	77 65                	ja     10000da6 <AC97::stopPlayback()+0x198>
10000d41:	20 6a 75             	and    BYTE PTR [edx+0x75],ch
10000d44:	73 74                	jae    10000dba <AC97::stopPlayback()+0x1ac>
10000d46:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d49:	61                   	popa   
10000d4a:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d4e:	53                   	push   ebx
10000d4f:	4f                   	dec    edi
10000d50:	4e                   	dec    esi
10000d51:	47                   	inc    edi
10000d52:	20 53 48             	and    BYTE PTR [ebx+0x48],dl
10000d55:	4f                   	dec    edi
10000d56:	55                   	push   ebp
10000d57:	4c                   	dec    esp
10000d58:	44                   	inc    esp
10000d59:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000d5c:	20 44 4f 4e          	and    BYTE PTR [edi+ecx*2+0x4e],al
10000d60:	45                   	inc    ebp
10000d61:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d64:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000d67:	66 65 72 20          	data16 gs jb 10000d8b <AC97::stopPlayback()+0x17d>
10000d6b:	68 61 73 20 25       	push   0x25207361
10000d70:	64 20 73 61          	and    BYTE PTR fs:[ebx+0x61],dh
10000d74:	6d                   	ins    DWORD PTR es:[edi],dx
10000d75:	70 6c                	jo     10000de3 <AC97::stopPlayback()+0x1d5>
10000d77:	65 73 20             	gs jae 10000d9a <AC97::stopPlayback()+0x18c>
10000d7a:	69 6e 20 69 74 2e 0a 	imul   ebp,DWORD PTR [esi+0x20],0xa2e7469
10000d81:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10000d84:	74 65                	je     10000deb <AC97::stopPlayback()+0x1dd>
10000d86:	6c                   	ins    BYTE PTR es:[edi],dx
10000d87:	20 41 43             	and    BYTE PTR [ecx+0x43],al
10000d8a:	27                   	daa    
10000d8b:	39 37                	cmp    DWORD PTR [edi],esi
10000d8d:	20 41 75             	and    BYTE PTR [ecx+0x75],al
10000d90:	64 69 6f 20 44 65 76 69 	imul   ebp,DWORD PTR fs:[edi+0x20],0x69766544
10000d98:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
10000d9b:	41                   	inc    ecx
10000d9c:	43                   	inc    ebx
10000d9d:	39 37                	cmp    DWORD PTR [edi],esi
10000d9f:	20 49 52             	and    BYTE PTR [ecx+0x52],cl
10000da2:	51                   	push   ecx
10000da3:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000da6:	00 00                	add    BYTE PTR [eax],al
10000da8:	63 75 72             	arpl   WORD PTR [ebp+0x72],si
10000dab:	72 65                	jb     10000e12 <AC97::stopPlayback()+0x204>
10000dad:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000dae:	74 6c                	je     10000e1c <AC97::stopPlayback()+0x20e>
10000db0:	79 20                	jns    10000dd2 <AC97::stopPlayback()+0x1c4>
10000db2:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000db3:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000db4:	20 27                	and    BYTE PTR [edi],ah
10000db6:	25 64 27 2e 20       	and    eax,0x202e2764
10000dbb:	63 69 76             	arpl   WORD PTR [ecx+0x76],bp
10000dbe:	20 2d 20 31 20 3d    	and    BYTE PTR ds:0x3d203120,ch
10000dc4:	20 25 64 2c 20 63    	and    BYTE PTR ds:0x63202c64,ah
10000dca:	69 76 20 2b 20 31 20 	imul   esi,DWORD PTR [esi+0x20],0x2031202b
10000dd1:	3d 20 25 64 0a       	cmp    eax,0xa642520
10000dd6:	00 6c 76 69          	add    BYTE PTR [esi+esi*2+0x69],ch
10000dda:	20 3d 20 20 25 64    	and    BYTE PTR ds:0x64252020,bh
10000de0:	0a 00                	or     al,BYTE PTR [eax]
10000de2:	77 65                	ja     10000e49 <AC97::stopPlayback()+0x23b>
10000de4:	20 67 6f             	and    BYTE PTR [edi+0x6f],ah
10000de7:	74 20                	je     10000e09 <AC97::stopPlayback()+0x1fb>
10000de9:	25 64 20 73 61       	and    eax,0x61732064
10000dee:	6d                   	ins    DWORD PTR es:[edi],dx
10000def:	70 6c                	jo     10000e5d <AC97::stopPlayback()+0x24f>
10000df1:	65 73 20             	gs jae 10000e14 <AC97::stopPlayback()+0x206>
10000df4:	74 6f                	je     10000e65 <AC97::stopPlayback()+0x257>
10000df6:	20 30                	and    BYTE PTR [eax],dh
10000df8:	78 25                	js     10000e1f <AC97::stopPlayback()+0x211>
10000dfa:	58                   	pop    eax
10000dfb:	0a 00                	or     al,BYTE PTR [eax]
10000dfd:	41                   	inc    ecx
10000dfe:	43                   	inc    ebx
10000dff:	39 37                	cmp    DWORD PTR [edi],esi
10000e01:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10000e04:	61                   	popa   
10000e05:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e06:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e07:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000e09:	73 3a                	jae    10000e45 <AC97::stopPlayback()+0x237>
10000e0b:	20 25 64 0a 00 32    	and    BYTE PTR ds:0x32000a64,ah
10000e11:	30 20                	xor    BYTE PTR [eax],ah
10000e13:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000e16:	20 73 6f             	and    BYTE PTR [ebx+0x6f],dh
10000e19:	75 6e                	jne    10000e89 <AC97::stopPlayback()+0x27b>
10000e1b:	64 20 73 75          	and    BYTE PTR fs:[ebx+0x75],dh
10000e1f:	70 70                	jo     10000e91 <AC97::stopPlayback()+0x283>
10000e21:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e22:	72 74                	jb     10000e98 <AC97::stopPlayback()+0x28a>
10000e24:	65 64 2e 0a 00       	gs fs or al,BYTE PTR cs:[eax]
10000e29:	42                   	inc    edx
10000e2a:	69 74 20 63 6f 75 6c 64 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x646c756f
10000e32:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000e35:	74 20                	je     10000e57 <AC97::stopPlayback()+0x249>
10000e37:	62 65 20             	bound  esp,QWORD PTR [ebp+0x20]
10000e3a:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
10000e3e:	72 65                	jb     10000ea5 <AC97::stopPlayback()+0x297>
10000e40:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000e44:	62 64 6c 20          	bound  esp,QWORD PTR [esp+ebp*2+0x20]
10000e48:	61                   	popa   
10000e49:	74 20                	je     10000e6b <AC97::stopPlayback()+0x25d>
10000e4b:	70 68                	jo     10000eb5 <AC97::stopPlayback()+0x2a7>
10000e4d:	79 73                	jns    10000ec2 <AC97::stopPlayback()+0x2b4>
10000e4f:	20 30                	and    BYTE PTR [eax],dh
10000e51:	78 25                	js     10000e78 <AC97::stopPlayback()+0x26a>
10000e53:	58                   	pop    eax
10000e54:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e57:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e5b:	72 74                	jb     10000ed1 <AC97::stopPlayback()+0x2c3>
10000e5d:	20 30                	and    BYTE PTR [eax],dh
10000e5f:	78 25                	js     10000e86 <AC97::stopPlayback()+0x278>
10000e61:	58                   	pop    eax
10000e62:	0a 00                	or     al,BYTE PTR [eax]
10000e64:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000e67:	66 65 72 20          	data16 gs jb 10000e8b <AC97::stopPlayback()+0x27d>
10000e6b:	61                   	popa   
10000e6c:	74 20                	je     10000e8e <AC97::stopPlayback()+0x280>
10000e6e:	70 68                	jo     10000ed8 <AC97::stopPlayback()+0x2ca>
10000e70:	79 73                	jns    10000ee5 <AC97::stopPlayback()+0x2d7>
10000e72:	20 30                	and    BYTE PTR [eax],dh
10000e74:	78 25                	js     10000e9b <AC97::stopPlayback()+0x28d>
10000e76:	58                   	pop    eax
10000e77:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e7a:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e7e:	72 74                	jb     10000ef4 <AC97::stopPlayback()+0x2e6>
10000e80:	20 30                	and    BYTE PTR [eax],dh
10000e82:	78 25                	js     10000ea9 <AC97::stopPlayback()+0x29b>
10000e84:	58                   	pop    eax
10000e85:	0a 00                	or     al,BYTE PTR [eax]
10000e87:	69 6e 74 65 72 72 75 	imul   ebp,DWORD PTR [esi+0x74],0x75727265
10000e8e:	70 74                	jo     10000f04 <AC97::stopPlayback()+0x2f6>
10000e90:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000e96:	00 62 65             	add    BYTE PTR [edx+0x65],ah
10000e99:	67 69 6e 6e 69 6e 67 20 	imul   ebp,DWORD PTR [bp+0x6e],0x20676e69
10000ea1:	70 6c                	jo     10000f0f <AC97::stopPlayback()+0x301>
10000ea3:	61                   	popa   
10000ea4:	79 62                	jns    10000f08 <AC97::stopPlayback()+0x2fa>
10000ea6:	61                   	popa   
10000ea7:	63 6b 2e             	arpl   WORD PTR [ebx+0x2e],bp
10000eaa:	2e 2e 0a 00          	cs or  al,BYTE PTR cs:[eax]
10000eae:	00 00                	add    BYTE PTR [eax],al
10000eb0:	41                   	inc    ecx
10000eb1:	43                   	inc    ebx
10000eb2:	39 37                	cmp    DWORD PTR [edi],esi
10000eb4:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000eb6:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000eb9:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000ec0:	61                   	popa   
10000ec1:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000ec4:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000ec7:	73 20                	jae    10000ee9 <AC97::stopPlayback()+0x2db>
10000ec9:	21 3d 20 31 36 20    	and    DWORD PTR ds:0x20363120,edi
10000ecf:	4e                   	dec    esi
10000ed0:	4f                   	dec    edi
10000ed1:	54                   	push   esp
10000ed2:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000ed5:	50                   	push   eax
10000ed6:	50                   	push   eax
10000ed7:	4f                   	dec    edi
10000ed8:	52                   	push   edx
10000ed9:	54                   	push   esp
10000eda:	45                   	inc    ebp
10000edb:	44                   	inc    esp
10000edc:	21 00                	and    DWORD PTR [eax],eax
10000ede:	00 00                	add    BYTE PTR [eax],al
10000ee0:	41                   	inc    ecx
10000ee1:	43                   	inc    ebx
10000ee2:	39 37                	cmp    DWORD PTR [edi],esi
10000ee4:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000ee6:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000ee9:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000ef0:	61                   	popa   
10000ef1:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000ef4:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
10000ef7:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000ef8:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000ef9:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000efb:	73 20                	jae    10000f1d <AC97::stopPlayback()+0x30f>
10000efd:	21 3d 20 32 20 4e    	and    DWORD PTR ds:0x4e203220,edi
10000f03:	4f                   	dec    edi
10000f04:	54                   	push   esp
10000f05:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000f08:	50                   	push   eax
10000f09:	50                   	push   eax
10000f0a:	4f                   	dec    edi
10000f0b:	52                   	push   edx
10000f0c:	54                   	push   esp
10000f0d:	45                   	inc    ebp
10000f0e:	44                   	inc    esp
10000f0f:	21 00                	and    DWORD PTR [eax],eax
10000f11:	56                   	push   esi
10000f12:	41                   	inc    ecx
10000f13:	4c                   	dec    esp
10000f14:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10000f1a:	58                   	pop    eax
10000f1b:	0a 00                	or     al,BYTE PTR [eax]
10000f1d:	66 90                	xchg   ax,ax
10000f1f:	90                   	nop

10000f20 <vtable for AC97>:
	...
	10000f28: R_386_32	AC97::~AC97()
	10000f2c: R_386_32	AC97::~AC97()
	10000f30: R_386_32	AC97::open(int, int, void*)
	10000f34: R_386_32	AC97::close(int, int, void*)
	10000f38: R_386_32	Device::hibernate()
	10000f3c: R_386_32	Device::wake()
	10000f40: R_386_32	Device::detect()
	10000f44: R_386_32	Device::disableLegacy()
	10000f48: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000f4c: R_386_32	AC97::beginPlayback()
	10000f50: R_386_32	AC97::stopPlayback()
