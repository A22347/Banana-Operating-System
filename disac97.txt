
packages/banana/32/0002/ac97.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(Device*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(Device*)-0xa>	1000000d: R_386_PC32	start(Device*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(Device*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	57                   	push   edi
1000001b:	56                   	push   esi
1000001c:	53                   	push   ebx
1000001d:	83 ec 2c             	sub    esp,0x2c
10000020:	83 ec 0c             	sub    esp,0xc
10000023:	68 f0 0c 00 10       	push   0x10000cf0	10000024: R_386_32	.text
10000028:	e8 fc ff ff ff       	call   10000029 <start(Device*)+0x12>	10000029: R_386_PC32	KeSetBootMessage(char const*)
1000002d:	83 c4 10             	add    esp,0x10
10000030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000033:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000003c:	e8 fc ff ff ff       	call   1000003d <start(Device*)+0x26>	1000003d: R_386_PC32	Device::getParent()
10000041:	83 c4 10             	add    esp,0x10
10000044:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000047:	c7 45 d8 14 02 00 00 	mov    DWORD PTR [ebp-0x28],0x214
1000004e:	83 ec 0c             	sub    esp,0xc
10000051:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000054:	e8 fc ff ff ff       	call   10000055 <start(Device*)+0x3e>	10000055: R_386_PC32	malloc
10000059:	83 c4 10             	add    esp,0x10
1000005c:	89 c3                	mov    ebx,eax
1000005e:	83 ec 0c             	sub    esp,0xc
10000061:	53                   	push   ebx
10000062:	e8 fc ff ff ff       	call   10000063 <start(Device*)+0x4c>	10000063: R_386_PC32	AC97::AC97()
10000067:	83 c4 10             	add    esp,0x10
1000006a:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
1000006d:	83 ec 08             	sub    esp,0x8
10000070:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000073:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000076:	e8 fc ff ff ff       	call   10000077 <start(Device*)+0x60>	10000077: R_386_PC32	Device::addChild(Device*)
1000007b:	83 c4 10             	add    esp,0x10
1000007e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000081:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000084:	83 ec 08             	sub    esp,0x8
10000087:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000008a:	83 ec 24             	sub    esp,0x24
1000008d:	89 e2                	mov    edx,esp
1000008f:	8d 98 18 01 00 00    	lea    ebx,[eax+0x118]
10000095:	b8 09 00 00 00       	mov    eax,0x9
1000009a:	89 d7                	mov    edi,edx
1000009c:	89 de                	mov    esi,ebx
1000009e:	89 c1                	mov    ecx,eax
100000a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100000a2:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100000a5:	e8 fc ff ff ff       	call   100000a6 <start(Device*)+0x8f>	100000a6: R_386_PC32	Device::preOpenPCI(PCIDeviceInfo)
100000aa:	83 c4 30             	add    esp,0x30
100000ad:	6a 00                	push   0x0
100000af:	6a 00                	push   0x0
100000b1:	6a 00                	push   0x0
100000b3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000b6:	e8 fc ff ff ff       	call   100000b7 <start(Device*)+0xa0>	100000b7: R_386_PC32	AC97::_open(int, int, void*)
100000bb:	83 c4 10             	add    esp,0x10
100000be:	90                   	nop
100000bf:	8d 65 f4             	lea    esp,[ebp-0xc]
100000c2:	5b                   	pop    ebx
100000c3:	5e                   	pop    esi
100000c4:	5f                   	pop    edi
100000c5:	5d                   	pop    ebp
100000c6:	c3                   	ret    
100000c7:	55                   	push   ebp
100000c8:	89 e5                	mov    ebp,esp
100000ca:	53                   	push   ebx
100000cb:	83 ec 24             	sub    esp,0x24
100000ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100000cf: R_386_32	irqDisableCounter
100000d3:	48                   	dec    eax
100000d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100000d5: R_386_32	irqDisableCounter
100000d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100000da: R_386_32	irqDisableCounter
100000de:	85 c0                	test   eax,eax
100000e0:	75 01                	jne    100000e3 <start(Device*)+0xcc>
100000e2:	fb                   	sti    
100000e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100000e9:	c7 45 dc 1c 00 00 00 	mov    DWORD PTR [ebp-0x24],0x1c
100000f0:	83 ec 0c             	sub    esp,0xc
100000f3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000f6:	e8 fc ff ff ff       	call   100000f7 <start(Device*)+0xe0>	100000f7: R_386_PC32	malloc
100000fb:	83 c4 10             	add    esp,0x10
100000fe:	89 c3                	mov    ebx,eax
10000100:	83 ec 0c             	sub    esp,0xc
10000103:	68 00 00 06 00       	push   0x60000
10000108:	6a 02                	push   0x2
1000010a:	6a 10                	push   0x10
1000010c:	68 80 3e 00 00       	push   0x3e80
10000111:	53                   	push   ebx
10000112:	e8 fc ff ff ff       	call   10000113 <start(Device*)+0xfc>	10000113: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
10000117:	83 c4 20             	add    esp,0x20
1000011a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
1000011d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10000121:	c7 45 e0 14 01 00 00 	mov    DWORD PTR [ebp-0x20],0x114
10000128:	83 ec 0c             	sub    esp,0xc
1000012b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000012e:	e8 fc ff ff ff       	call   1000012f <start(Device*)+0x118>	1000012f: R_386_PC32	malloc
10000133:	83 c4 10             	add    esp,0x10
10000136:	89 c3                	mov    ebx,eax
10000138:	a1 00 00 00 00       	mov    eax,ds:0x0	10000139: R_386_32	kernelProcess
1000013d:	83 ec 04             	sub    esp,0x4
10000140:	50                   	push   eax
10000141:	68 08 0d 00 10       	push   0x10000d08	10000142: R_386_32	.text
10000146:	53                   	push   ebx
10000147:	e8 fc ff ff ff       	call   10000148 <start(Device*)+0x131>	10000148: R_386_PC32	File::File(char const*, Process*)
1000014c:	83 c4 10             	add    esp,0x10
1000014f:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
10000152:	83 ec 08             	sub    esp,0x8
10000155:	6a 01                	push   0x1
10000157:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
1000015a:	e8 fc ff ff ff       	call   1000015b <start(Device*)+0x144>	1000015b: R_386_PC32	File::open(FileOpenMode)
1000015f:	83 c4 10             	add    esp,0x10
10000162:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10000169:	83 ec 0c             	sub    esp,0xc
1000016c:	68 17 0d 00 10       	push   0x10000d17	1000016d: R_386_32	.text
10000171:	e8 fc ff ff ff       	call   10000172 <start(Device*)+0x15b>	10000172: R_386_PC32	Dbg::kprintf(char const*, ...)
10000176:	83 c4 10             	add    esp,0x10
10000179:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000017c:	8b 00                	mov    eax,DWORD PTR [eax]
1000017e:	83 c0 0c             	add    eax,0xc
10000181:	8b 00                	mov    eax,DWORD PTR [eax]
10000183:	83 ec 0c             	sub    esp,0xc
10000186:	8d 55 d8             	lea    edx,[ebp-0x28]
10000189:	52                   	push   edx
1000018a:	68 00 00 00 00       	push   0x0	1000018b: R_386_32	buf
1000018f:	6a 00                	push   0x0
10000191:	68 00 40 00 00       	push   0x4000
10000196:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000199:	ff d0                	call   eax
1000019b:	83 c4 20             	add    esp,0x20
1000019e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100001a1:	83 ec 0c             	sub    esp,0xc
100001a4:	68 27 0d 00 10       	push   0x10000d27	100001a5: R_386_32	.text
100001a9:	e8 fc ff ff ff       	call   100001aa <start(Device*)+0x193>	100001aa: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ae:	83 c4 10             	add    esp,0x10
100001b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100001b4:	85 c0                	test   eax,eax
100001b6:	74 06                	je     100001be <start(Device*)+0x1a7>
100001b8:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
100001bc:	74 22                	je     100001e0 <start(Device*)+0x1c9>
100001be:	83 ec 0c             	sub    esp,0xc
100001c1:	68 36 0d 00 10       	push   0x10000d36	100001c2: R_386_32	.text
100001c6:	e8 fc ff ff ff       	call   100001c7 <start(Device*)+0x1b0>	100001c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100001cb:	83 c4 10             	add    esp,0x10
100001ce:	83 ec 0c             	sub    esp,0xc
100001d1:	6a 00                	push   0x0
100001d3:	e8 fc ff ff ff       	call   100001d4 <start(Device*)+0x1bd>	100001d4: R_386_PC32	terminateTask(int)
100001d8:	83 c4 10             	add    esp,0x10
100001db:	e9 f5 00 00 00       	jmp    100002d5 <start(Device*)+0x2be>
100001e0:	83 ec 0c             	sub    esp,0xc
100001e3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100001e6:	e8 fc ff ff ff       	call   100001e7 <start(Device*)+0x1d0>	100001e7: R_386_PC32	SoundPort::getBufferUsed()
100001eb:	83 c4 10             	add    esp,0x10
100001ee:	83 ec 08             	sub    esp,0x8
100001f1:	50                   	push   eax
100001f2:	68 4c 0d 00 10       	push   0x10000d4c	100001f3: R_386_32	.text
100001f7:	e8 fc ff ff ff       	call   100001f8 <start(Device*)+0x1e1>	100001f8: R_386_PC32	Dbg::kprintf(char const*, ...)
100001fc:	83 c4 10             	add    esp,0x10
100001ff:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000202:	83 f0 01             	xor    eax,0x1
10000205:	84 c0                	test   al,al
10000207:	74 4c                	je     10000255 <start(Device*)+0x23e>
10000209:	6a 02                	push   0x2
1000020b:	6a 10                	push   0x10
1000020d:	68 80 3e 00 00       	push   0x3e80
10000212:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000215:	e8 fc ff ff ff       	call   10000216 <start(Device*)+0x1ff>	10000216: R_386_PC32	SoundCard::configureRates(int, int, int)
1000021a:	83 c4 10             	add    esp,0x10
1000021d:	83 ec 08             	sub    esp,0x8
10000220:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000223:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000226:	e8 fc ff ff ff       	call   10000227 <start(Device*)+0x210>	10000227: R_386_PC32	SoundCard::addChannel(SoundPort*)
1000022b:	83 c4 10             	add    esp,0x10
1000022e:	83 ec 0c             	sub    esp,0xc
10000231:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000234:	e8 fc ff ff ff       	call   10000235 <start(Device*)+0x21e>	10000235: R_386_PC32	SoundPort::unpause()
10000239:	83 c4 10             	add    esp,0x10
1000023c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000023f:	8b 00                	mov    eax,DWORD PTR [eax]
10000241:	83 c0 24             	add    eax,0x24
10000244:	8b 00                	mov    eax,DWORD PTR [eax]
10000246:	83 ec 0c             	sub    esp,0xc
10000249:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000024c:	ff d0                	call   eax
1000024e:	83 c4 10             	add    esp,0x10
10000251:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
10000255:	83 ec 0c             	sub    esp,0xc
10000258:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000025b:	e8 fc ff ff ff       	call   1000025c <start(Device*)+0x245>	1000025c: R_386_PC32	SoundPort::getBufferUsed()
10000260:	83 c4 10             	add    esp,0x10
10000263:	89 c2                	mov    edx,eax
10000265:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000268:	89 c1                	mov    ecx,eax
1000026a:	01 c9                	add    ecx,ecx
1000026c:	01 c8                	add    eax,ecx
1000026e:	8d 1c 02             	lea    ebx,[edx+eax*1]
10000271:	83 ec 0c             	sub    esp,0xc
10000274:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000277:	e8 fc ff ff ff       	call   10000278 <start(Device*)+0x261>	10000278: R_386_PC32	SoundPort::getBufferSize()
1000027c:	83 c4 10             	add    esp,0x10
1000027f:	39 c3                	cmp    ebx,eax
10000281:	0f 9d c0             	setge  al
10000284:	84 c0                	test   al,al
10000286:	74 28                	je     100002b0 <start(Device*)+0x299>
10000288:	fa                   	cli    
10000289:	a1 00 00 00 00       	mov    eax,ds:0x0	1000028a: R_386_32	irqDisableCounter
1000028e:	40                   	inc    eax
1000028f:	a3 00 00 00 00       	mov    ds:0x0,eax	10000290: R_386_32	irqDisableCounter
10000294:	e8 fc ff ff ff       	call   10000295 <start(Device*)+0x27e>	10000295: R_386_PC32	schedule()
10000299:	a1 00 00 00 00       	mov    eax,ds:0x0	1000029a: R_386_32	irqDisableCounter
1000029e:	48                   	dec    eax
1000029f:	a3 00 00 00 00       	mov    ds:0x0,eax	100002a0: R_386_32	irqDisableCounter
100002a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100002a5: R_386_32	irqDisableCounter
100002a9:	85 c0                	test   eax,eax
100002ab:	75 a8                	jne    10000255 <start(Device*)+0x23e>
100002ad:	fb                   	sti    
100002ae:	eb a5                	jmp    10000255 <start(Device*)+0x23e>
100002b0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100002b3:	89 c2                	mov    edx,eax
100002b5:	c1 ea 1f             	shr    edx,0x1f
100002b8:	01 d0                	add    eax,edx
100002ba:	d1 f8                	sar    eax,1
100002bc:	83 ec 04             	sub    esp,0x4
100002bf:	50                   	push   eax
100002c0:	68 00 00 00 00       	push   0x0	100002c1: R_386_32	buf
100002c5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100002c8:	e8 fc ff ff ff       	call   100002c9 <start(Device*)+0x2b2>	100002c9: R_386_PC32	SoundPort::buffer16(short*, int)
100002cd:	83 c4 10             	add    esp,0x10
100002d0:	e9 8d fe ff ff       	jmp    10000162 <start(Device*)+0x14b>
100002d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100002d8:	c9                   	leave  
100002d9:	c3                   	ret    

100002da <AC97::AC97()>:
100002da:	55                   	push   ebp
100002db:	89 e5                	mov    ebp,esp
100002dd:	83 ec 08             	sub    esp,0x8
100002e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e3:	83 ec 08             	sub    esp,0x8
100002e6:	68 6a 0d 00 10       	push   0x10000d6a	100002e7: R_386_32	.text
100002eb:	50                   	push   eax
100002ec:	e8 fc ff ff ff       	call   100002ed <AC97::AC97()+0x13>	100002ed: R_386_PC32	SoundCard::SoundCard(char const*)
100002f1:	83 c4 10             	add    esp,0x10
100002f4:	ba 08 00 00 00       	mov    edx,0x8	100002f5: R_386_32	vtable for AC97
100002f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fc:	89 10                	mov    DWORD PTR [eax],edx
100002fe:	90                   	nop
100002ff:	c9                   	leave  
10000300:	c3                   	ret    
10000301:	90                   	nop

10000302 <AC97::~AC97()>:
10000302:	55                   	push   ebp
10000303:	89 e5                	mov    ebp,esp
10000305:	83 ec 08             	sub    esp,0x8
10000308:	ba 08 00 00 00       	mov    edx,0x8	10000309: R_386_32	vtable for AC97
1000030d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000310:	89 10                	mov    DWORD PTR [eax],edx
10000312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000315:	83 ec 0c             	sub    esp,0xc
10000318:	50                   	push   eax
10000319:	e8 fc ff ff ff       	call   1000031a <AC97::~AC97()+0x18>	1000031a: R_386_PC32	SoundCard::~SoundCard()
1000031e:	83 c4 10             	add    esp,0x10
10000321:	90                   	nop
10000322:	c9                   	leave  
10000323:	c3                   	ret    

10000324 <AC97::~AC97()>:
10000324:	55                   	push   ebp
10000325:	89 e5                	mov    ebp,esp
10000327:	83 ec 08             	sub    esp,0x8
1000032a:	83 ec 0c             	sub    esp,0xc
1000032d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000330:	e8 fc ff ff ff       	call   10000331 <AC97::~AC97()+0xd>	10000331: R_386_PC32	AC97::~AC97()
10000335:	83 c4 10             	add    esp,0x10
10000338:	83 ec 08             	sub    esp,0x8
1000033b:	68 14 02 00 00       	push   0x214
10000340:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000343:	e8 fc ff ff ff       	call   10000344 <AC97::~AC97()+0x20>	10000344: R_386_PC32	operator delete(void*, unsigned long)
10000348:	83 c4 10             	add    esp,0x10
1000034b:	c9                   	leave  
1000034c:	c3                   	ret    
1000034d:	90                   	nop

1000034e <AC97::setVolume(int, int)>:
1000034e:	55                   	push   ebp
1000034f:	89 e5                	mov    ebp,esp
10000351:	83 ec 18             	sub    esp,0x18
10000354:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000357:	89 d0                	mov    eax,edx
10000359:	c1 e0 02             	shl    eax,0x2
1000035c:	01 d0                	add    eax,edx
1000035e:	01 c0                	add    eax,eax
10000360:	85 c0                	test   eax,eax
10000362:	79 03                	jns    10000367 <AC97::setVolume(int, int)+0x19>
10000364:	83 c0 1f             	add    eax,0x1f
10000367:	c1 f8 05             	sar    eax,0x5
1000036a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000036d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000370:	89 d0                	mov    eax,edx
10000372:	c1 e0 02             	shl    eax,0x2
10000375:	01 d0                	add    eax,edx
10000377:	01 c0                	add    eax,eax
10000379:	85 c0                	test   eax,eax
1000037b:	79 03                	jns    10000380 <AC97::setVolume(int, int)+0x32>
1000037d:	83 c0 1f             	add    eax,0x1f
10000380:	c1 f8 05             	sar    eax,0x5
10000383:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000386:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000389:	c1 e0 08             	shl    eax,0x8
1000038c:	89 c2                	mov    edx,eax
1000038e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000391:	09 d0                	or     eax,edx
10000393:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
10000397:	a1 00 00 00 00       	mov    eax,ds:0x0	10000398: R_386_32	thePCI
1000039c:	0f b7 4d ee          	movzx  ecx,WORD PTR [ebp-0x12]
100003a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003a3:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100003a9:	6a 02                	push   0x2
100003ab:	51                   	push   ecx
100003ac:	52                   	push   edx
100003ad:	50                   	push   eax
100003ae:	e8 fc ff ff ff       	call   100003af <AC97::setVolume(int, int)+0x61>	100003af: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003b3:	83 c4 10             	add    esp,0x10
100003b6:	a1 00 00 00 00       	mov    eax,ds:0x0	100003b7: R_386_32	thePCI
100003bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003be:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100003c4:	6a 18                	push   0x18
100003c6:	6a 00                	push   0x0
100003c8:	52                   	push   edx
100003c9:	50                   	push   eax
100003ca:	e8 fc ff ff ff       	call   100003cb <AC97::setVolume(int, int)+0x7d>	100003cb: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003cf:	83 c4 10             	add    esp,0x10
100003d2:	90                   	nop
100003d3:	c9                   	leave  
100003d4:	c3                   	ret    
100003d5:	90                   	nop

100003d6 <AC97::open(int, int, void*)>:
100003d6:	b8 00 00 00 00       	mov    eax,0x0
100003db:	c3                   	ret    

100003dc <ac97IRQHandler(regs*, void*)>:
100003dc:	55                   	push   ebp
100003dd:	89 e5                	mov    ebp,esp
100003df:	83 ec 18             	sub    esp,0x18
100003e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003e5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100003e8:	83 ec 0c             	sub    esp,0xc
100003eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100003ee:	e8 fc ff ff ff       	call   100003ef <ac97IRQHandler(regs*, void*)+0x13>	100003ef: R_386_PC32	AC97::handleIRQ()
100003f3:	83 c4 10             	add    esp,0x10
100003f6:	90                   	nop
100003f7:	c9                   	leave  
100003f8:	c3                   	ret    
100003f9:	90                   	nop

100003fa <AC97::handleIRQ()>:
100003fa:	55                   	push   ebp
100003fb:	89 e5                	mov    ebp,esp
100003fd:	83 ec 18             	sub    esp,0x18
10000400:	83 ec 0c             	sub    esp,0xc
10000403:	68 83 0d 00 10       	push   0x10000d83	10000404: R_386_32	.text
10000408:	e8 fc ff ff ff       	call   10000409 <AC97::handleIRQ()+0xf>	10000409: R_386_PC32	Dbg::kprintf(char const*, ...)
1000040d:	83 c4 10             	add    esp,0x10
10000410:	a1 00 00 00 00       	mov    eax,ds:0x0	10000411: R_386_32	thePCI
10000415:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000418:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000041e:	83 ec 04             	sub    esp,0x4
10000421:	6a 14                	push   0x14
10000423:	52                   	push   edx
10000424:	50                   	push   eax
10000425:	e8 fc ff ff ff       	call   10000426 <AC97::handleIRQ()+0x2c>	10000426: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000042a:	83 c4 10             	add    esp,0x10
1000042d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000430:	a1 00 00 00 00       	mov    eax,ds:0x0	10000431: R_386_32	thePCI
10000435:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000438:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000043e:	83 ec 04             	sub    esp,0x4
10000441:	6a 15                	push   0x15
10000443:	52                   	push   edx
10000444:	50                   	push   eax
10000445:	e8 fc ff ff ff       	call   10000446 <AC97::handleIRQ()+0x4c>	10000446: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000044a:	83 c4 10             	add    esp,0x10
1000044d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000450:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000454:	40                   	inc    eax
10000455:	b9 03 00 00 00       	mov    ecx,0x3
1000045a:	99                   	cdq    
1000045b:	f7 f9                	idiv   ecx
1000045d:	89 d1                	mov    ecx,edx
1000045f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000463:	8d 50 ff             	lea    edx,[eax-0x1]
10000466:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000046a:	51                   	push   ecx
1000046b:	52                   	push   edx
1000046c:	50                   	push   eax
1000046d:	68 90 0d 00 10       	push   0x10000d90	1000046e: R_386_32	.text
10000472:	e8 fc ff ff ff       	call   10000473 <AC97::handleIRQ()+0x79>	10000473: R_386_PC32	Dbg::kprintf(char const*, ...)
10000477:	83 c4 10             	add    esp,0x10
1000047a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
1000047e:	83 ec 08             	sub    esp,0x8
10000481:	50                   	push   eax
10000482:	68 bf 0d 00 10       	push   0x10000dbf	10000483: R_386_32	.text
10000487:	e8 fc ff ff ff       	call   10000488 <AC97::handleIRQ()+0x8e>	10000488: R_386_PC32	Dbg::kprintf(char const*, ...)
1000048c:	83 c4 10             	add    esp,0x10
1000048f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000490: R_386_32	thePCI
10000494:	0f b6 4d f6          	movzx  ecx,BYTE PTR [ebp-0xa]
10000498:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000049b:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100004a1:	6a 15                	push   0x15
100004a3:	51                   	push   ecx
100004a4:	52                   	push   edx
100004a5:	50                   	push   eax
100004a6:	e8 fc ff ff ff       	call   100004a7 <AC97::handleIRQ()+0xad>	100004a7: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100004ab:	83 c4 10             	add    esp,0x10
100004ae:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100004b2:	83 c0 02             	add    eax,0x2
100004b5:	b9 03 00 00 00       	mov    ecx,0x3
100004ba:	99                   	cdq    
100004bb:	f7 f9                	idiv   ecx
100004bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004c0:	83 c2 7c             	add    edx,0x7c
100004c3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100004c7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004cd:	83 ec 04             	sub    esp,0x4
100004d0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004d3:	68 01 80 00 00       	push   0x8001
100004d8:	50                   	push   eax
100004d9:	e8 fc ff ff ff       	call   100004da <AC97::handleIRQ()+0xe0>	100004da: R_386_PC32	SoundCard::getSamples16(int, short*)
100004de:	83 c4 10             	add    esp,0x10
100004e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004e4:	83 ec 04             	sub    esp,0x4
100004e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004ea:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100004ed:	68 ca 0d 00 10       	push   0x10000dca	100004ee: R_386_32	.text
100004f2:	e8 fc ff ff ff       	call   100004f3 <AC97::handleIRQ()+0xf9>	100004f3: R_386_PC32	Dbg::kprintf(char const*, ...)
100004f7:	83 c4 10             	add    esp,0x10
100004fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100004fb: R_386_32	thePCI
100004ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000502:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000508:	6a 16                	push   0x16
1000050a:	6a 1c                	push   0x1c
1000050c:	52                   	push   edx
1000050d:	50                   	push   eax
1000050e:	e8 fc ff ff ff       	call   1000050f <AC97::handleIRQ()+0x115>	1000050f: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000513:	83 c4 10             	add    esp,0x10
10000516:	90                   	nop
10000517:	c9                   	leave  
10000518:	c3                   	ret    
10000519:	90                   	nop

1000051a <AC97::setSampleRate(int)>:
1000051a:	55                   	push   ebp
1000051b:	89 e5                	mov    ebp,esp
1000051d:	53                   	push   ebx
1000051e:	83 ec 04             	sub    esp,0x4
10000521:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10000523: R_386_32	thePCI
10000527:	a1 00 00 00 00       	mov    eax,ds:0x0	10000528: R_386_32	thePCI
1000052c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000052f:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
10000535:	83 ec 04             	sub    esp,0x4
10000538:	6a 2a                	push   0x2a
1000053a:	52                   	push   edx
1000053b:	50                   	push   eax
1000053c:	e8 fc ff ff ff       	call   1000053d <AC97::setSampleRate(int)+0x23>	1000053d: R_386_PC32	PCI::readBAR16(unsigned int, int)
10000541:	83 c4 10             	add    esp,0x10
10000544:	83 c8 01             	or     eax,0x1
10000547:	0f b7 d0             	movzx  edx,ax
1000054a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000054d:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000553:	6a 2a                	push   0x2a
10000555:	52                   	push   edx
10000556:	50                   	push   eax
10000557:	53                   	push   ebx
10000558:	e8 fc ff ff ff       	call   10000559 <AC97::setSampleRate(int)+0x3f>	10000559: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
1000055d:	83 c4 10             	add    esp,0x10
10000560:	83 ec 0c             	sub    esp,0xc
10000563:	6a 64                	push   0x64
10000565:	e8 fc ff ff ff       	call   10000566 <AC97::setSampleRate(int)+0x4c>	10000566: R_386_PC32	milliTenthSleep(unsigned int)
1000056a:	83 c4 10             	add    esp,0x10
1000056d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000056f: R_386_32	thePCI
10000573:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000576:	0f b7 c8             	movzx  ecx,ax
10000579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000057c:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000582:	6a 2c                	push   0x2c
10000584:	51                   	push   ecx
10000585:	50                   	push   eax
10000586:	52                   	push   edx
10000587:	e8 fc ff ff ff       	call   10000588 <AC97::setSampleRate(int)+0x6e>	10000588: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
1000058c:	83 c4 10             	add    esp,0x10
1000058f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000591: R_386_32	thePCI
10000595:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000598:	0f b7 c8             	movzx  ecx,ax
1000059b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000059e:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005a4:	6a 32                	push   0x32
100005a6:	51                   	push   ecx
100005a7:	50                   	push   eax
100005a8:	52                   	push   edx
100005a9:	e8 fc ff ff ff       	call   100005aa <AC97::setSampleRate(int)+0x90>	100005aa: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100005ae:	83 c4 10             	add    esp,0x10
100005b1:	83 ec 0c             	sub    esp,0xc
100005b4:	6a 64                	push   0x64
100005b6:	e8 fc ff ff ff       	call   100005b7 <AC97::setSampleRate(int)+0x9d>	100005b7: R_386_PC32	milliTenthSleep(unsigned int)
100005bb:	83 c4 10             	add    esp,0x10
100005be:	90                   	nop
100005bf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100005c2:	c9                   	leave  
100005c3:	c3                   	ret    

100005c4 <AC97::_open(int, int, void*)>:
100005c4:	55                   	push   ebp
100005c5:	89 e5                	mov    ebp,esp
100005c7:	56                   	push   esi
100005c8:	53                   	push   ebx
100005c9:	83 ec 30             	sub    esp,0x30
100005cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005cf:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
100005d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d8:	89 90 e8 01 00 00    	mov    DWORD PTR [eax+0x1e8],edx
100005de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e1:	8b 90 24 01 00 00    	mov    edx,DWORD PTR [eax+0x124]
100005e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ea:	89 90 ec 01 00 00    	mov    DWORD PTR [eax+0x1ec],edx
100005f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f3:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005f9:	83 e0 01             	and    eax,0x1
100005fc:	85 c0                	test   eax,eax
100005fe:	74 5a                	je     1000065a <AC97::_open(int, int, void*)+0x96>
10000600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000603:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000609:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000060c:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000612:	0f b6 ca             	movzx  ecx,dl
10000615:	83 e0 fc             	and    eax,0xfffffffc
10000618:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000061b:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000623:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000629:	0f b6 d0             	movzx  edx,al
1000062c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000062f:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
10000634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000637:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000063d:	8d 50 01             	lea    edx,[eax+0x1]
10000640:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000643:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000649:	0f b6 d0             	movzx  edx,al
1000064c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000064f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000653:	83 e1 3f             	and    ecx,0x3f
10000656:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000065a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000065d:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
10000663:	83 e0 01             	and    eax,0x1
10000666:	85 c0                	test   eax,eax
10000668:	74 5a                	je     100006c4 <AC97::_open(int, int, void*)+0x100>
1000066a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000066d:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
10000673:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000676:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
1000067c:	0f b6 ca             	movzx  ecx,dl
1000067f:	83 e0 fc             	and    eax,0xfffffffc
10000682:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000685:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
1000068a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000068d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000693:	0f b6 d0             	movzx  edx,al
10000696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000699:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
1000069e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006a7:	8d 50 01             	lea    edx,[eax+0x1]
100006aa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006ad:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006b3:	0f b6 d0             	movzx  edx,al
100006b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006bd:	83 e1 3f             	and    ecx,0x3f
100006c0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100006c5: R_386_32	thePCI
100006c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006cc:	8a 92 1e 01 00 00    	mov    dl,BYTE PTR [edx+0x11e]
100006d2:	0f b6 da             	movzx  ebx,dl
100006d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006d8:	8a 92 1d 01 00 00    	mov    dl,BYTE PTR [edx+0x11d]
100006de:	0f b6 ca             	movzx  ecx,dl
100006e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006e4:	8a 92 1c 01 00 00    	mov    dl,BYTE PTR [edx+0x11c]
100006ea:	0f b6 d2             	movzx  edx,dl
100006ed:	83 ec 0c             	sub    esp,0xc
100006f0:	6a 04                	push   0x4
100006f2:	53                   	push   ebx
100006f3:	51                   	push   ecx
100006f4:	52                   	push   edx
100006f5:	50                   	push   eax
100006f6:	e8 fc ff ff ff       	call   100006f7 <AC97::_open(int, int, void*)+0x133>	100006f7: R_386_PC32	PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)
100006fb:	83 c4 20             	add    esp,0x20
100006fe:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000702:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000704: R_386_32	thePCI
10000708:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
1000070c:	83 c8 05             	or     eax,0x5
1000070f:	0f b7 f0             	movzx  esi,ax
10000712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000715:	8a 80 1e 01 00 00    	mov    al,BYTE PTR [eax+0x11e]
1000071b:	0f b6 d8             	movzx  ebx,al
1000071e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000721:	8a 80 1d 01 00 00    	mov    al,BYTE PTR [eax+0x11d]
10000727:	0f b6 c8             	movzx  ecx,al
1000072a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000072d:	8a 80 1c 01 00 00    	mov    al,BYTE PTR [eax+0x11c]
10000733:	0f b6 c0             	movzx  eax,al
10000736:	83 ec 08             	sub    esp,0x8
10000739:	56                   	push   esi
1000073a:	6a 04                	push   0x4
1000073c:	53                   	push   ebx
1000073d:	51                   	push   ecx
1000073e:	50                   	push   eax
1000073f:	52                   	push   edx
10000740:	e8 fc ff ff ff       	call   10000741 <AC97::_open(int, int, void*)+0x17d>	10000741: R_386_PC32	PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
10000745:	83 c4 20             	add    esp,0x20
10000748:	a1 00 00 00 00       	mov    eax,ds:0x0	10000749: R_386_32	thePCI
1000074d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000750:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000756:	6a 2c                	push   0x2c
10000758:	6a 03                	push   0x3
1000075a:	52                   	push   edx
1000075b:	50                   	push   eax
1000075c:	e8 fc ff ff ff       	call   1000075d <AC97::_open(int, int, void*)+0x199>	1000075d: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000761:	83 c4 10             	add    esp,0x10
10000764:	a1 00 00 00 00       	mov    eax,ds:0x0	10000765: R_386_32	thePCI
10000769:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000076c:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
10000772:	6a 00                	push   0x0
10000774:	68 aa 55 00 00       	push   0x55aa
10000779:	52                   	push   edx
1000077a:	50                   	push   eax
1000077b:	e8 fc ff ff ff       	call   1000077c <AC97::_open(int, int, void*)+0x1b8>	1000077c: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000780:	83 c4 10             	add    esp,0x10
10000783:	a1 00 00 00 00       	mov    eax,ds:0x0	10000784: R_386_32	thePCI
10000788:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000078b:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000791:	83 ec 04             	sub    esp,0x4
10000794:	6a 30                	push   0x30
10000796:	52                   	push   edx
10000797:	50                   	push   eax
10000798:	e8 fc ff ff ff       	call   10000799 <AC97::_open(int, int, void*)+0x1d5>	10000799: R_386_PC32	PCI::readBAR32(unsigned int, int)
1000079d:	83 c4 10             	add    esp,0x10
100007a0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007a3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100007a6:	c1 e8 14             	shr    eax,0x14
100007a9:	83 e0 03             	and    eax,0x3
100007ac:	40                   	inc    eax
100007ad:	01 c0                	add    eax,eax
100007af:	83 ec 08             	sub    esp,0x8
100007b2:	50                   	push   eax
100007b3:	68 e5 0d 00 10       	push   0x10000de5	100007b4: R_386_32	.text
100007b8:	e8 fc ff ff ff       	call   100007b9 <AC97::_open(int, int, void*)+0x1f5>	100007b9: R_386_PC32	Dbg::kprintf(char const*, ...)
100007bd:	83 c4 10             	add    esp,0x10
100007c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100007c3:	c1 e8 16             	shr    eax,0x16
100007c6:	83 e0 03             	and    eax,0x3
100007c9:	83 f8 01             	cmp    eax,0x1
100007cc:	75 10                	jne    100007de <AC97::_open(int, int, void*)+0x21a>
100007ce:	83 ec 0c             	sub    esp,0xc
100007d1:	68 f8 0d 00 10       	push   0x10000df8	100007d2: R_386_32	.text
100007d6:	e8 fc ff ff ff       	call   100007d7 <AC97::_open(int, int, void*)+0x213>	100007d7: R_386_PC32	Dbg::kprintf(char const*, ...)
100007db:	83 c4 10             	add    esp,0x10
100007de:	a1 00 00 00 00       	mov    eax,ds:0x0	100007df: R_386_32	thePCI
100007e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007e6:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100007ec:	83 ec 04             	sub    esp,0x4
100007ef:	6a 1b                	push   0x1b
100007f1:	52                   	push   edx
100007f2:	50                   	push   eax
100007f3:	e8 fc ff ff ff       	call   100007f4 <AC97::_open(int, int, void*)+0x230>	100007f4: R_386_PC32	PCI::readBAR8(unsigned int, int)
100007f8:	83 c4 10             	add    esp,0x10
100007fb:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
100007fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100007ff: R_386_32	thePCI
10000803:	8a 55 df             	mov    dl,BYTE PTR [ebp-0x21]
10000806:	83 ca 02             	or     edx,0x2
10000809:	0f b6 ca             	movzx  ecx,dl
1000080c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000080f:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000815:	6a 1b                	push   0x1b
10000817:	51                   	push   ecx
10000818:	52                   	push   edx
10000819:	50                   	push   eax
1000081a:	e8 fc ff ff ff       	call   1000081b <AC97::_open(int, int, void*)+0x257>	1000081b: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
1000081f:	83 c4 10             	add    esp,0x10
10000822:	83 ec 0c             	sub    esp,0xc
10000825:	68 c4 09 00 00       	push   0x9c4
1000082a:	e8 fc ff ff ff       	call   1000082b <AC97::_open(int, int, void*)+0x267>	1000082b: R_386_PC32	milliTenthSleep(unsigned int)
1000082f:	83 c4 10             	add    esp,0x10
10000832:	a1 00 00 00 00       	mov    eax,ds:0x0	10000833: R_386_32	thePCI
10000837:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000083a:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000840:	83 ec 04             	sub    esp,0x4
10000843:	6a 1b                	push   0x1b
10000845:	52                   	push   edx
10000846:	50                   	push   eax
10000847:	e8 fc ff ff ff       	call   10000848 <AC97::_open(int, int, void*)+0x284>	10000848: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000084c:	83 c4 10             	add    esp,0x10
1000084f:	0f b6 c0             	movzx  eax,al
10000852:	83 e0 02             	and    eax,0x2
10000855:	85 c0                	test   eax,eax
10000857:	0f 95 c0             	setne  al
1000085a:	84 c0                	test   al,al
1000085c:	74 10                	je     1000086e <AC97::_open(int, int, void*)+0x2aa>
1000085e:	83 ec 0c             	sub    esp,0xc
10000861:	68 11 0e 00 10       	push   0x10000e11	10000862: R_386_32	.text
10000866:	e8 fc ff ff ff       	call   10000867 <AC97::_open(int, int, void*)+0x2a3>	10000867: R_386_PC32	Dbg::kprintf(char const*, ...)
1000086b:	83 c4 10             	add    esp,0x10
1000086e:	83 ec 04             	sub    esp,0x4
10000871:	6a 32                	push   0x32
10000873:	6a 0f                	push   0xf
10000875:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000878:	e8 fc ff ff ff       	call   10000879 <AC97::_open(int, int, void*)+0x2b5>	10000879: R_386_PC32	AC97::setVolume(int, int)
1000087d:	83 c4 10             	add    esp,0x10
10000880:	83 ec 0c             	sub    esp,0xc
10000883:	6a 01                	push   0x1
10000885:	e8 fc ff ff ff       	call   10000886 <AC97::_open(int, int, void*)+0x2c2>	10000886: R_386_PC32	Phys::allocateContiguousPages(int)
1000088a:	83 c4 10             	add    esp,0x10
1000088d:	89 c2                	mov    edx,eax
1000088f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000892:	89 90 f4 01 00 00    	mov    DWORD PTR [eax+0x1f4],edx
10000898:	83 ec 0c             	sub    esp,0xc
1000089b:	6a 01                	push   0x1
1000089d:	e8 fc ff ff ff       	call   1000089e <AC97::_open(int, int, void*)+0x2da>	1000089e: R_386_PC32	Virt::allocateKernelVirtualPages(int)
100008a2:	83 c4 10             	add    esp,0x10
100008a5:	89 c2                	mov    edx,eax
100008a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008aa:	89 90 f0 01 00 00    	mov    DWORD PTR [eax+0x1f0],edx
100008b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b3:	8b 90 f0 01 00 00    	mov    edx,DWORD PTR [eax+0x1f0]
100008b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008bc:	8b 80 f4 01 00 00    	mov    eax,DWORD PTR [eax+0x1f4]
100008c2:	83 ec 04             	sub    esp,0x4
100008c5:	52                   	push   edx
100008c6:	50                   	push   eax
100008c7:	68 2c 0e 00 10       	push   0x10000e2c	100008c8: R_386_32	.text
100008cc:	e8 fc ff ff ff       	call   100008cd <AC97::_open(int, int, void*)+0x309>	100008cd: R_386_PC32	Dbg::kprintf(char const*, ...)
100008d1:	83 c4 10             	add    esp,0x10
100008d4:	a1 00 00 00 00       	mov    eax,ds:0x0	100008d5: R_386_32	firstVAS
100008d9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008dc:	8b 8a f0 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f0]
100008e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008e5:	8b 92 f4 01 00 00    	mov    edx,DWORD PTR [edx+0x1f4]
100008eb:	83 ec 0c             	sub    esp,0xc
100008ee:	6a 03                	push   0x3
100008f0:	6a 01                	push   0x1
100008f2:	51                   	push   ecx
100008f3:	52                   	push   edx
100008f4:	50                   	push   eax
100008f5:	e8 fc ff ff ff       	call   100008f6 <AC97::_open(int, int, void*)+0x332>	100008f6: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
100008fa:	83 c4 20             	add    esp,0x20
100008fd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000904:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10000908:	0f 8f cb 00 00 00    	jg     100009d9 <AC97::_open(int, int, void*)+0x415>
1000090e:	c7 45 d8 14 00 00 00 	mov    DWORD PTR [ebp-0x28],0x14
10000915:	83 ec 0c             	sub    esp,0xc
10000918:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000091b:	e8 fc ff ff ff       	call   1000091c <AC97::_open(int, int, void*)+0x358>	1000091c: R_386_PC32	Phys::allocateContiguousPages(int)
10000920:	83 c4 10             	add    esp,0x10
10000923:	89 c2                	mov    edx,eax
10000925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000928:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
1000092b:	83 e9 80             	sub    ecx,0xffffff80
1000092e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
10000932:	83 ec 0c             	sub    esp,0xc
10000935:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000938:	e8 fc ff ff ff       	call   10000939 <AC97::_open(int, int, void*)+0x375>	10000939: R_386_PC32	Virt::allocateKernelVirtualPages(int)
1000093d:	83 c4 10             	add    esp,0x10
10000940:	89 c2                	mov    edx,eax
10000942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000945:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000948:	83 c1 7c             	add    ecx,0x7c
1000094b:	89 54 88 0c          	mov    DWORD PTR [eax+ecx*4+0xc],edx
1000094f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000952:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000955:	83 c2 7c             	add    edx,0x7c
10000958:	8b 54 90 0c          	mov    edx,DWORD PTR [eax+edx*4+0xc]
1000095c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000962:	83 e9 80             	sub    ecx,0xffffff80
10000965:	8b 44 88 08          	mov    eax,DWORD PTR [eax+ecx*4+0x8]
10000969:	83 ec 04             	sub    esp,0x4
1000096c:	52                   	push   edx
1000096d:	50                   	push   eax
1000096e:	68 4c 0e 00 10       	push   0x10000e4c	1000096f: R_386_32	.text
10000973:	e8 fc ff ff ff       	call   10000974 <AC97::_open(int, int, void*)+0x3b0>	10000974: R_386_PC32	Dbg::kprintf(char const*, ...)
10000978:	83 c4 10             	add    esp,0x10
1000097b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000097c: R_386_32	firstVAS
10000980:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000983:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000986:	83 c1 7c             	add    ecx,0x7c
10000989:	8b 4c 8a 0c          	mov    ecx,DWORD PTR [edx+ecx*4+0xc]
1000098d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000990:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
10000993:	83 eb 80             	sub    ebx,0xffffff80
10000996:	8b 54 9a 08          	mov    edx,DWORD PTR [edx+ebx*4+0x8]
1000099a:	83 ec 0c             	sub    esp,0xc
1000099d:	6a 03                	push   0x3
1000099f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100009a2:	51                   	push   ecx
100009a3:	52                   	push   edx
100009a4:	50                   	push   eax
100009a5:	e8 fc ff ff ff       	call   100009a6 <AC97::_open(int, int, void*)+0x3e2>	100009a6: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
100009aa:	83 c4 20             	add    esp,0x20
100009ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100009b0:	c1 e0 0c             	shl    eax,0xc
100009b3:	89 c2                	mov    edx,eax
100009b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b8:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
100009bb:	83 c1 7c             	add    ecx,0x7c
100009be:	8b 44 88 0c          	mov    eax,DWORD PTR [eax+ecx*4+0xc]
100009c2:	83 ec 04             	sub    esp,0x4
100009c5:	52                   	push   edx
100009c6:	6a 00                	push   0x0
100009c8:	50                   	push   eax
100009c9:	e8 fc ff ff ff       	call   100009ca <AC97::_open(int, int, void*)+0x406>	100009ca: R_386_PC32	memset
100009ce:	83 c4 10             	add    esp,0x10
100009d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100009d4:	e9 2b ff ff ff       	jmp    10000904 <AC97::_open(int, int, void*)+0x340>
100009d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009dc:	8b 80 f0 01 00 00    	mov    eax,DWORD PTR [eax+0x1f0]
100009e2:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100009e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009e8:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
100009ee:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100009f1:	89 10                	mov    DWORD PTR [eax],edx
100009f3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100009f6:	83 c0 04             	add    eax,0x4
100009f9:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
100009ff:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a02:	8d 50 08             	lea    edx,[eax+0x8]
10000a05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a08:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
10000a0e:	89 02                	mov    DWORD PTR [edx],eax
10000a10:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a13:	83 c0 0c             	add    eax,0xc
10000a16:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a1c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a1f:	8d 50 10             	lea    edx,[eax+0x10]
10000a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a25:	8b 80 10 02 00 00    	mov    eax,DWORD PTR [eax+0x210]
10000a2b:	89 02                	mov    DWORD PTR [edx],eax
10000a2d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a30:	83 c0 14             	add    eax,0x14
10000a33:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a39:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000a40:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10000a44:	7f 38                	jg     10000a7e <AC97::_open(int, int, void*)+0x4ba>
10000a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a49:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000a4c:	83 c2 7c             	add    edx,0x7c
10000a4f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000a53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000a56:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000a5d:	81 7d e8 fe ff 00 00 	cmp    DWORD PTR [ebp-0x18],0xfffe
10000a64:	7f 13                	jg     10000a79 <AC97::_open(int, int, void*)+0x4b5>
10000a66:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000a69:	8d 50 02             	lea    edx,[eax+0x2]
10000a6c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10000a6f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
10000a74:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10000a77:	eb e4                	jmp    10000a5d <AC97::_open(int, int, void*)+0x499>
10000a79:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000a7c:	eb c2                	jmp    10000a40 <AC97::_open(int, int, void*)+0x47c>
10000a7e:	a1 00 00 00 00       	mov    eax,ds:0x0	10000a7f: R_386_32	thePCI
10000a83:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a86:	8b 8a f4 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f4]
10000a8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a8f:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000a95:	6a 10                	push   0x10
10000a97:	51                   	push   ecx
10000a98:	52                   	push   edx
10000a99:	50                   	push   eax
10000a9a:	e8 fc ff ff ff       	call   10000a9b <AC97::_open(int, int, void*)+0x4d7>	10000a9b: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000a9f:	83 c4 10             	add    esp,0x10
10000aa2:	a1 00 00 00 00       	mov    eax,ds:0x0	10000aa3: R_386_32	thePCI
10000aa7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000aaa:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000ab0:	6a 15                	push   0x15
10000ab2:	6a 03                	push   0x3
10000ab4:	52                   	push   edx
10000ab5:	50                   	push   eax
10000ab6:	e8 fc ff ff ff       	call   10000ab7 <AC97::_open(int, int, void*)+0x4f3>	10000ab7: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000abb:	83 c4 10             	add    esp,0x10
10000abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac1:	8a 80 38 01 00 00    	mov    al,BYTE PTR [eax+0x138]
10000ac7:	0f b6 c0             	movzx  eax,al
10000aca:	83 ec 08             	sub    esp,0x8
10000acd:	50                   	push   eax
10000ace:	68 6f 0e 00 10       	push   0x10000e6f	10000acf: R_386_32	.text
10000ad3:	e8 fc ff ff ff       	call   10000ad4 <AC97::_open(int, int, void*)+0x510>	10000ad4: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ad8:	83 c4 10             	add    esp,0x10
10000adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ade:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000ae1:	8a 92 38 01 00 00    	mov    dl,BYTE PTR [edx+0x138]
10000ae7:	0f b6 d2             	movzx  edx,dl
10000aea:	83 ec 0c             	sub    esp,0xc
10000aed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000af0:	6a 01                	push   0x1
10000af2:	68 00 00 00 00       	push   0x0	10000af3: R_386_32	ac97IRQHandler(regs*, void*)
10000af7:	52                   	push   edx
10000af8:	50                   	push   eax
10000af9:	e8 fc ff ff ff       	call   10000afa <AC97::_open(int, int, void*)+0x536>	10000afa: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000afe:	83 c4 20             	add    esp,0x20
10000b01:	89 c2                	mov    edx,eax
10000b03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b06:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000b0c:	b8 00 00 00 00       	mov    eax,0x0
10000b11:	8d 65 f8             	lea    esp,[ebp-0x8]
10000b14:	5b                   	pop    ebx
10000b15:	5e                   	pop    esi
10000b16:	5d                   	pop    ebp
10000b17:	c3                   	ret    

10000b18 <AC97::close(int, int, void*)>:
10000b18:	b8 00 00 00 00       	mov    eax,0x0
10000b1d:	c3                   	ret    

10000b1e <AC97::beginPlayback()>:
10000b1e:	55                   	push   ebp
10000b1f:	89 e5                	mov    ebp,esp
10000b21:	83 ec 18             	sub    esp,0x18
10000b24:	83 ec 0c             	sub    esp,0xc
10000b27:	68 7f 0e 00 10       	push   0x10000e7f	10000b28: R_386_32	.text
10000b2c:	e8 fc ff ff ff       	call   10000b2d <AC97::beginPlayback()+0xf>	10000b2d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b31:	83 c4 10             	add    esp,0x10
10000b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b37:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
10000b3d:	83 ec 08             	sub    esp,0x8
10000b40:	50                   	push   eax
10000b41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b44:	e8 fc ff ff ff       	call   10000b45 <AC97::beginPlayback()+0x27>	10000b45: R_386_PC32	AC97::setSampleRate(int)
10000b49:	83 c4 10             	add    esp,0x10
10000b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b4f:	8b 80 dc 01 00 00    	mov    eax,DWORD PTR [eax+0x1dc]
10000b55:	83 f8 10             	cmp    eax,0x10
10000b58:	74 10                	je     10000b6a <AC97::beginPlayback()+0x4c>
10000b5a:	83 ec 0c             	sub    esp,0xc
10000b5d:	68 98 0e 00 10       	push   0x10000e98	10000b5e: R_386_32	.text
10000b62:	e8 fc ff ff ff       	call   10000b63 <AC97::beginPlayback()+0x45>	10000b63: R_386_PC32	KePanic(char const*)
10000b67:	83 c4 10             	add    esp,0x10
10000b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b6d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10000b73:	83 f8 02             	cmp    eax,0x2
10000b76:	74 10                	je     10000b88 <AC97::beginPlayback()+0x6a>
10000b78:	83 ec 0c             	sub    esp,0xc
10000b7b:	68 c8 0e 00 10       	push   0x10000ec8	10000b7c: R_386_32	.text
10000b80:	e8 fc ff ff ff       	call   10000b81 <AC97::beginPlayback()+0x63>	10000b81: R_386_PC32	KePanic(char const*)
10000b85:	83 c4 10             	add    esp,0x10
10000b88:	a1 00 00 00 00       	mov    eax,ds:0x0	10000b89: R_386_32	thePCI
10000b8d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b90:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000b96:	83 ec 04             	sub    esp,0x4
10000b99:	6a 1b                	push   0x1b
10000b9b:	52                   	push   edx
10000b9c:	50                   	push   eax
10000b9d:	e8 fc ff ff ff       	call   10000b9e <AC97::beginPlayback()+0x80>	10000b9e: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000ba2:	83 c4 10             	add    esp,0x10
10000ba5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000ba8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000bab:	83 e0 e0             	and    eax,0xffffffe0
10000bae:	83 c8 1d             	or     eax,0x1d
10000bb1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bb4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000bb8:	83 ec 08             	sub    esp,0x8
10000bbb:	50                   	push   eax
10000bbc:	68 f9 0e 00 10       	push   0x10000ef9	10000bbd: R_386_32	.text
10000bc1:	e8 fc ff ff ff       	call   10000bc2 <AC97::beginPlayback()+0xa4>	10000bc2: R_386_PC32	Dbg::kprintf(char const*, ...)
10000bc6:	83 c4 10             	add    esp,0x10
10000bc9:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bca: R_386_32	thePCI
10000bce:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
10000bd2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bd5:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000bdb:	6a 1b                	push   0x1b
10000bdd:	51                   	push   ecx
10000bde:	52                   	push   edx
10000bdf:	50                   	push   eax
10000be0:	e8 fc ff ff ff       	call   10000be1 <AC97::beginPlayback()+0xc3>	10000be1: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000be5:	83 c4 10             	add    esp,0x10
10000be8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000beb:	c6 80 d8 01 00 00 01 	mov    BYTE PTR [eax+0x1d8],0x1
10000bf2:	90                   	nop
10000bf3:	c9                   	leave  
10000bf4:	c3                   	ret    
10000bf5:	90                   	nop

10000bf6 <AC97::stopPlayback()>:
10000bf6:	55                   	push   ebp
10000bf7:	89 e5                	mov    ebp,esp
10000bf9:	83 ec 18             	sub    esp,0x18
10000bfc:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bfd: R_386_32	thePCI
10000c01:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c04:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c0a:	83 ec 04             	sub    esp,0x4
10000c0d:	6a 1b                	push   0x1b
10000c0f:	52                   	push   edx
10000c10:	50                   	push   eax
10000c11:	e8 fc ff ff ff       	call   10000c12 <AC97::stopPlayback()+0x1c>	10000c12: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000c16:	83 c4 10             	add    esp,0x10
10000c19:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c1c:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c1d: R_386_32	thePCI
10000c21:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000c25:	89 d1                	mov    ecx,edx
10000c27:	81 e1 e0 00 00 00    	and    ecx,0xe0
10000c2d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c30:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c36:	6a 1b                	push   0x1b
10000c38:	51                   	push   ecx
10000c39:	52                   	push   edx
10000c3a:	50                   	push   eax
10000c3b:	e8 fc ff ff ff       	call   10000c3c <AC97::stopPlayback()+0x46>	10000c3c: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000c40:	83 c4 10             	add    esp,0x10
10000c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c46:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
10000c4d:	90                   	nop
10000c4e:	c9                   	leave  
10000c4f:	c3                   	ret    
10000c50:	13 05 00 00 24 05    	adc    eax,DWORD PTR ds:0x5240000
10000c56:	00 00                	add    BYTE PTR [eax],al
10000c58:	00 06                	add    BYTE PTR [esi],al
10000c5a:	00 00                	add    BYTE PTR [eax],al
10000c5c:	00 00                	add    BYTE PTR [eax],al
10000c5e:	01 00                	add    DWORD PTR [eax],eax
10000c60:	00 00                	add    BYTE PTR [eax],al
10000c62:	02 00                	add    al,BYTE PTR [eax]
10000c64:	00 00                	add    BYTE PTR [eax],al
10000c66:	04 00                	add    al,0x0
10000c68:	00 00                	add    BYTE PTR [eax],al
10000c6a:	06                   	push   es
10000c6b:	00 00                	add    BYTE PTR [eax],al
10000c6d:	00 10                	add    BYTE PTR [eax],dl
10000c6f:	00 00                	add    BYTE PTR [eax],al
10000c71:	10 00                	adc    BYTE PTR [eax],al
10000c73:	00 00                	add    BYTE PTR [eax],al
10000c75:	00 00                	add    BYTE PTR [eax],al
10000c77:	c0 00 00             	rol    BYTE PTR [eax],0x0
10000c7a:	00 c2                	add    dl,al
10000c7c:	00 00                	add    BYTE PTR [eax],al
10000c7e:	40                   	inc    eax
10000c7f:	c2 00 00             	ret    0x0
10000c82:	80 c2 00             	add    dl,0x0
10000c85:	00 c0                	add    al,al
10000c87:	c2 00 00             	ret    0x0
10000c8a:	01 c2                	add    edx,eax
10000c8c:	00 00                	add    BYTE PTR [eax],al
10000c8e:	01 00                	add    DWORD PTR [eax],eax
10000c90:	00 00                	add    BYTE PTR [eax],al
10000c92:	06                   	push   es
10000c93:	c2 00 00             	ret    0x0
10000c96:	02 00                	add    al,BYTE PTR [eax]
10000c98:	00 10                	add    BYTE PTR [eax],dl
10000c9a:	00 c2                	add    dl,al
10000c9c:	00 00                	add    BYTE PTR [eax],al
10000c9e:	02 c2                	add    al,dl
10000ca0:	00 00                	add    BYTE PTR [eax],al
10000ca2:	02 00                	add    al,BYTE PTR [eax]
10000ca4:	00 00                	add    BYTE PTR [eax],al
10000ca6:	04 c2                	add    al,0xc2
10000ca8:	00 80 00 00 00 06    	add    BYTE PTR [eax+0x6000000],al
10000cae:	00 c2                	add    dl,al
10000cb0:	13 05 00 c2 24 05    	adc    eax,DWORD PTR ds:0x524c200
10000cb6:	00 c2                	add    dl,al
10000cb8:	00 00                	add    BYTE PTR [eax],al
10000cba:	18 00                	sbb    BYTE PTR [eax],al
10000cbc:	00 00                	add    BYTE PTR [eax],al
10000cbe:	08 00                	or     BYTE PTR [eax],al
10000cc0:	00 00                	add    BYTE PTR [eax],al
10000cc2:	20 00                	and    BYTE PTR [eax],al
10000cc4:	00 00                	add    BYTE PTR [eax],al
10000cc6:	00 10                	add    BYTE PTR [eax],dl
10000cc8:	00 00                	add    BYTE PTR [eax],al
10000cca:	00 02                	add    BYTE PTR [edx],al
10000ccc:	00 00                	add    BYTE PTR [eax],al
10000cce:	e8 01 00 00 00       	call   10000cd4 <AC97::stopPlayback()+0xde>
10000cd3:	c8 ff ff ff          	enter  0xffff,0xff
10000cd7:	ef                   	out    dx,eax
10000cd8:	00 00                	add    BYTE PTR [eax],al
10000cda:	00 f0                	add    al,dh
10000cdc:	00 00                	add    BYTE PTR [eax],al
10000cde:	c0 ff 00             	sar    bh,0x0
10000ce1:	00 10                	add    BYTE PTR [eax],dl
10000ce3:	c2 00 40             	ret    0x4000
10000ce6:	48                   	dec    eax
10000ce7:	c2 80 00             	ret    0x80
10000cea:	00 00                	add    BYTE PTR [eax],al
10000cec:	80 00 00             	add    BYTE PTR [eax],0x0
10000cef:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
10000cf2:	61                   	popa   
10000cf3:	72 74                	jb     10000d69 <AC97::stopPlayback()+0x173>
10000cf5:	69 6e 67 20 41 43 39 	imul   ebp,DWORD PTR [esi+0x67],0x39434120
10000cfc:	37                   	aaa    
10000cfd:	20 64 72 69          	and    BYTE PTR [edx+esi*2+0x69],ah
10000d01:	76 65                	jbe    10000d68 <AC97::stopPlayback()+0x172>
10000d03:	72 2e                	jb     10000d33 <AC97::stopPlayback()+0x13d>
10000d05:	2e 2e 00 43 3a       	cs add BYTE PTR cs:[ebx+0x3a],al
10000d0a:	2f                   	das    
10000d0b:	67 75 6d             	addr16 jne 10000d7b <AC97::stopPlayback()+0x185>
10000d0e:	62 61 6c             	bound  esp,QWORD PTR [ecx+0x6c]
10000d11:	6c                   	ins    BYTE PTR es:[edi],dx
10000d12:	2e 77 61             	cs ja  10000d76 <AC97::stopPlayback()+0x180>
10000d15:	76 00                	jbe    10000d17 <AC97::stopPlayback()+0x121>
10000d17:	61                   	popa   
10000d18:	62 6f 75             	bound  ebp,QWORD PTR [edi+0x75]
10000d1b:	74 20                	je     10000d3d <AC97::stopPlayback()+0x147>
10000d1d:	74 6f                	je     10000d8e <AC97::stopPlayback()+0x198>
10000d1f:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d22:	61                   	popa   
10000d23:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d27:	77 65                	ja     10000d8e <AC97::stopPlayback()+0x198>
10000d29:	20 6a 75             	and    BYTE PTR [edx+0x75],ch
10000d2c:	73 74                	jae    10000da2 <AC97::stopPlayback()+0x1ac>
10000d2e:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d31:	61                   	popa   
10000d32:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d36:	53                   	push   ebx
10000d37:	4f                   	dec    edi
10000d38:	4e                   	dec    esi
10000d39:	47                   	inc    edi
10000d3a:	20 53 48             	and    BYTE PTR [ebx+0x48],dl
10000d3d:	4f                   	dec    edi
10000d3e:	55                   	push   ebp
10000d3f:	4c                   	dec    esp
10000d40:	44                   	inc    esp
10000d41:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000d44:	20 44 4f 4e          	and    BYTE PTR [edi+ecx*2+0x4e],al
10000d48:	45                   	inc    ebp
10000d49:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d4c:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000d4f:	66 65 72 20          	data16 gs jb 10000d73 <AC97::stopPlayback()+0x17d>
10000d53:	68 61 73 20 25       	push   0x25207361
10000d58:	64 20 73 61          	and    BYTE PTR fs:[ebx+0x61],dh
10000d5c:	6d                   	ins    DWORD PTR es:[edi],dx
10000d5d:	70 6c                	jo     10000dcb <AC97::stopPlayback()+0x1d5>
10000d5f:	65 73 20             	gs jae 10000d82 <AC97::stopPlayback()+0x18c>
10000d62:	69 6e 20 69 74 2e 0a 	imul   ebp,DWORD PTR [esi+0x20],0xa2e7469
10000d69:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10000d6c:	74 65                	je     10000dd3 <AC97::stopPlayback()+0x1dd>
10000d6e:	6c                   	ins    BYTE PTR es:[edi],dx
10000d6f:	20 41 43             	and    BYTE PTR [ecx+0x43],al
10000d72:	27                   	daa    
10000d73:	39 37                	cmp    DWORD PTR [edi],esi
10000d75:	20 41 75             	and    BYTE PTR [ecx+0x75],al
10000d78:	64 69 6f 20 44 65 76 69 	imul   ebp,DWORD PTR fs:[edi+0x20],0x69766544
10000d80:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
10000d83:	41                   	inc    ecx
10000d84:	43                   	inc    ebx
10000d85:	39 37                	cmp    DWORD PTR [edi],esi
10000d87:	20 49 52             	and    BYTE PTR [ecx+0x52],cl
10000d8a:	51                   	push   ecx
10000d8b:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d8e:	00 00                	add    BYTE PTR [eax],al
10000d90:	63 75 72             	arpl   WORD PTR [ebp+0x72],si
10000d93:	72 65                	jb     10000dfa <AC97::stopPlayback()+0x204>
10000d95:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d96:	74 6c                	je     10000e04 <AC97::stopPlayback()+0x20e>
10000d98:	79 20                	jns    10000dba <AC97::stopPlayback()+0x1c4>
10000d9a:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d9c:	20 27                	and    BYTE PTR [edi],ah
10000d9e:	25 64 27 2e 20       	and    eax,0x202e2764
10000da3:	63 69 76             	arpl   WORD PTR [ecx+0x76],bp
10000da6:	20 2d 20 31 20 3d    	and    BYTE PTR ds:0x3d203120,ch
10000dac:	20 25 64 2c 20 63    	and    BYTE PTR ds:0x63202c64,ah
10000db2:	69 76 20 2b 20 31 20 	imul   esi,DWORD PTR [esi+0x20],0x2031202b
10000db9:	3d 20 25 64 0a       	cmp    eax,0xa642520
10000dbe:	00 6c 76 69          	add    BYTE PTR [esi+esi*2+0x69],ch
10000dc2:	20 3d 20 20 25 64    	and    BYTE PTR ds:0x64252020,bh
10000dc8:	0a 00                	or     al,BYTE PTR [eax]
10000dca:	77 65                	ja     10000e31 <AC97::stopPlayback()+0x23b>
10000dcc:	20 67 6f             	and    BYTE PTR [edi+0x6f],ah
10000dcf:	74 20                	je     10000df1 <AC97::stopPlayback()+0x1fb>
10000dd1:	25 64 20 73 61       	and    eax,0x61732064
10000dd6:	6d                   	ins    DWORD PTR es:[edi],dx
10000dd7:	70 6c                	jo     10000e45 <AC97::stopPlayback()+0x24f>
10000dd9:	65 73 20             	gs jae 10000dfc <AC97::stopPlayback()+0x206>
10000ddc:	74 6f                	je     10000e4d <AC97::stopPlayback()+0x257>
10000dde:	20 30                	and    BYTE PTR [eax],dh
10000de0:	78 25                	js     10000e07 <AC97::stopPlayback()+0x211>
10000de2:	58                   	pop    eax
10000de3:	0a 00                	or     al,BYTE PTR [eax]
10000de5:	41                   	inc    ecx
10000de6:	43                   	inc    ebx
10000de7:	39 37                	cmp    DWORD PTR [edi],esi
10000de9:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10000dec:	61                   	popa   
10000ded:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000dee:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000def:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000df1:	73 3a                	jae    10000e2d <AC97::stopPlayback()+0x237>
10000df3:	20 25 64 0a 00 32    	and    BYTE PTR ds:0x32000a64,ah
10000df9:	30 20                	xor    BYTE PTR [eax],ah
10000dfb:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000dfe:	20 73 6f             	and    BYTE PTR [ebx+0x6f],dh
10000e01:	75 6e                	jne    10000e71 <AC97::stopPlayback()+0x27b>
10000e03:	64 20 73 75          	and    BYTE PTR fs:[ebx+0x75],dh
10000e07:	70 70                	jo     10000e79 <AC97::stopPlayback()+0x283>
10000e09:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e0a:	72 74                	jb     10000e80 <AC97::stopPlayback()+0x28a>
10000e0c:	65 64 2e 0a 00       	gs fs or al,BYTE PTR cs:[eax]
10000e11:	42                   	inc    edx
10000e12:	69 74 20 63 6f 75 6c 64 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x646c756f
10000e1a:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000e1d:	74 20                	je     10000e3f <AC97::stopPlayback()+0x249>
10000e1f:	62 65 20             	bound  esp,QWORD PTR [ebp+0x20]
10000e22:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
10000e26:	72 65                	jb     10000e8d <AC97::stopPlayback()+0x297>
10000e28:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000e2c:	62 64 6c 20          	bound  esp,QWORD PTR [esp+ebp*2+0x20]
10000e30:	61                   	popa   
10000e31:	74 20                	je     10000e53 <AC97::stopPlayback()+0x25d>
10000e33:	70 68                	jo     10000e9d <AC97::stopPlayback()+0x2a7>
10000e35:	79 73                	jns    10000eaa <AC97::stopPlayback()+0x2b4>
10000e37:	20 30                	and    BYTE PTR [eax],dh
10000e39:	78 25                	js     10000e60 <AC97::stopPlayback()+0x26a>
10000e3b:	58                   	pop    eax
10000e3c:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e3f:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e43:	72 74                	jb     10000eb9 <AC97::stopPlayback()+0x2c3>
10000e45:	20 30                	and    BYTE PTR [eax],dh
10000e47:	78 25                	js     10000e6e <AC97::stopPlayback()+0x278>
10000e49:	58                   	pop    eax
10000e4a:	0a 00                	or     al,BYTE PTR [eax]
10000e4c:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000e4f:	66 65 72 20          	data16 gs jb 10000e73 <AC97::stopPlayback()+0x27d>
10000e53:	61                   	popa   
10000e54:	74 20                	je     10000e76 <AC97::stopPlayback()+0x280>
10000e56:	70 68                	jo     10000ec0 <AC97::stopPlayback()+0x2ca>
10000e58:	79 73                	jns    10000ecd <AC97::stopPlayback()+0x2d7>
10000e5a:	20 30                	and    BYTE PTR [eax],dh
10000e5c:	78 25                	js     10000e83 <AC97::stopPlayback()+0x28d>
10000e5e:	58                   	pop    eax
10000e5f:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e62:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e66:	72 74                	jb     10000edc <AC97::stopPlayback()+0x2e6>
10000e68:	20 30                	and    BYTE PTR [eax],dh
10000e6a:	78 25                	js     10000e91 <AC97::stopPlayback()+0x29b>
10000e6c:	58                   	pop    eax
10000e6d:	0a 00                	or     al,BYTE PTR [eax]
10000e6f:	69 6e 74 65 72 72 75 	imul   ebp,DWORD PTR [esi+0x74],0x75727265
10000e76:	70 74                	jo     10000eec <AC97::stopPlayback()+0x2f6>
10000e78:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000e7e:	00 62 65             	add    BYTE PTR [edx+0x65],ah
10000e81:	67 69 6e 6e 69 6e 67 20 	imul   ebp,DWORD PTR [bp+0x6e],0x20676e69
10000e89:	70 6c                	jo     10000ef7 <AC97::stopPlayback()+0x301>
10000e8b:	61                   	popa   
10000e8c:	79 62                	jns    10000ef0 <AC97::stopPlayback()+0x2fa>
10000e8e:	61                   	popa   
10000e8f:	63 6b 2e             	arpl   WORD PTR [ebx+0x2e],bp
10000e92:	2e 2e 0a 00          	cs or  al,BYTE PTR cs:[eax]
10000e96:	00 00                	add    BYTE PTR [eax],al
10000e98:	41                   	inc    ecx
10000e99:	43                   	inc    ebx
10000e9a:	39 37                	cmp    DWORD PTR [edi],esi
10000e9c:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000e9e:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000ea1:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000ea8:	61                   	popa   
10000ea9:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000eac:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000eaf:	73 20                	jae    10000ed1 <AC97::stopPlayback()+0x2db>
10000eb1:	21 3d 20 31 36 20    	and    DWORD PTR ds:0x20363120,edi
10000eb7:	4e                   	dec    esi
10000eb8:	4f                   	dec    edi
10000eb9:	54                   	push   esp
10000eba:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000ebd:	50                   	push   eax
10000ebe:	50                   	push   eax
10000ebf:	4f                   	dec    edi
10000ec0:	52                   	push   edx
10000ec1:	54                   	push   esp
10000ec2:	45                   	inc    ebp
10000ec3:	44                   	inc    esp
10000ec4:	21 00                	and    DWORD PTR [eax],eax
10000ec6:	00 00                	add    BYTE PTR [eax],al
10000ec8:	41                   	inc    ecx
10000ec9:	43                   	inc    ebx
10000eca:	39 37                	cmp    DWORD PTR [edi],esi
10000ecc:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000ece:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000ed1:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000ed8:	61                   	popa   
10000ed9:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000edc:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
10000edf:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000ee0:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000ee1:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000ee3:	73 20                	jae    10000f05 <AC97::stopPlayback()+0x30f>
10000ee5:	21 3d 20 32 20 4e    	and    DWORD PTR ds:0x4e203220,edi
10000eeb:	4f                   	dec    edi
10000eec:	54                   	push   esp
10000eed:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000ef0:	50                   	push   eax
10000ef1:	50                   	push   eax
10000ef2:	4f                   	dec    edi
10000ef3:	52                   	push   edx
10000ef4:	54                   	push   esp
10000ef5:	45                   	inc    ebp
10000ef6:	44                   	inc    esp
10000ef7:	21 00                	and    DWORD PTR [eax],eax
10000ef9:	56                   	push   esi
10000efa:	41                   	inc    ecx
10000efb:	4c                   	dec    esp
10000efc:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10000f02:	58                   	pop    eax
10000f03:	0a 00                	or     al,BYTE PTR [eax]
10000f05:	66 90                	xchg   ax,ax
10000f07:	90                   	nop

10000f08 <vtable for AC97>:
	...
	10000f10: R_386_32	AC97::~AC97()
	10000f14: R_386_32	AC97::~AC97()
	10000f18: R_386_32	AC97::open(int, int, void*)
	10000f1c: R_386_32	AC97::close(int, int, void*)
	10000f20: R_386_32	Device::hibernate()
	10000f24: R_386_32	Device::wake()
	10000f28: R_386_32	Device::detect()
	10000f2c: R_386_32	Device::disableLegacy()
	10000f30: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000f34: R_386_32	AC97::beginPlayback()
	10000f38: R_386_32	AC97::stopPlayback()
