
packages/banana/32/0002/ac97.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(Device*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(Device*)-0xa>	1000000d: R_386_PC32	start(Device*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(Device*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	57                   	push   edi
1000001b:	56                   	push   esi
1000001c:	53                   	push   ebx
1000001d:	83 ec 2c             	sub    esp,0x2c
10000020:	83 ec 0c             	sub    esp,0xc
10000023:	68 24 0d 00 10       	push   0x10000d24	10000024: R_386_32	.text
10000028:	e8 fc ff ff ff       	call   10000029 <start(Device*)+0x12>	10000029: R_386_PC32	Krnl::setBootMessage(char const*)
1000002d:	83 c4 10             	add    esp,0x10
10000030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000033:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000003c:	e8 fc ff ff ff       	call   1000003d <start(Device*)+0x26>	1000003d: R_386_PC32	Device::getParent()
10000041:	83 c4 10             	add    esp,0x10
10000044:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000047:	c7 45 d8 14 02 00 00 	mov    DWORD PTR [ebp-0x28],0x214
1000004e:	83 ec 0c             	sub    esp,0xc
10000051:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000054:	e8 fc ff ff ff       	call   10000055 <start(Device*)+0x3e>	10000055: R_386_PC32	malloc
10000059:	83 c4 10             	add    esp,0x10
1000005c:	89 c3                	mov    ebx,eax
1000005e:	83 ec 0c             	sub    esp,0xc
10000061:	53                   	push   ebx
10000062:	e8 fc ff ff ff       	call   10000063 <start(Device*)+0x4c>	10000063: R_386_PC32	AC97::AC97()
10000067:	83 c4 10             	add    esp,0x10
1000006a:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
1000006d:	83 ec 08             	sub    esp,0x8
10000070:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000073:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000076:	e8 fc ff ff ff       	call   10000077 <start(Device*)+0x60>	10000077: R_386_PC32	Device::addChild(Device*)
1000007b:	83 c4 10             	add    esp,0x10
1000007e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000081:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000084:	83 ec 08             	sub    esp,0x8
10000087:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000008a:	83 ec 24             	sub    esp,0x24
1000008d:	89 e2                	mov    edx,esp
1000008f:	8d 98 18 01 00 00    	lea    ebx,[eax+0x118]
10000095:	b8 09 00 00 00       	mov    eax,0x9
1000009a:	89 d7                	mov    edi,edx
1000009c:	89 de                	mov    esi,ebx
1000009e:	89 c1                	mov    ecx,eax
100000a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100000a2:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100000a5:	e8 fc ff ff ff       	call   100000a6 <start(Device*)+0x8f>	100000a6: R_386_PC32	Device::preOpenPCI(PCIDeviceInfo)
100000aa:	83 c4 30             	add    esp,0x30
100000ad:	6a 00                	push   0x0
100000af:	6a 00                	push   0x0
100000b1:	6a 00                	push   0x0
100000b3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000b6:	e8 fc ff ff ff       	call   100000b7 <start(Device*)+0xa0>	100000b7: R_386_PC32	AC97::_open(int, int, void*)
100000bb:	83 c4 10             	add    esp,0x10
100000be:	a1 00 00 00 00       	mov    eax,ds:0x0	100000bf: R_386_32	kernelProcess
100000c3:	6a 1e                	push   0x1e
100000c5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000c8:	68 00 00 00 00       	push   0x0	100000c9: R_386_32	playThread(void*)
100000cd:	50                   	push   eax
100000ce:	e8 fc ff ff ff       	call   100000cf <start(Device*)+0xb8>	100000cf: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100000d3:	83 c4 10             	add    esp,0x10
100000d6:	90                   	nop
100000d7:	8d 65 f4             	lea    esp,[ebp-0xc]
100000da:	5b                   	pop    ebx
100000db:	5e                   	pop    esi
100000dc:	5f                   	pop    edi
100000dd:	5d                   	pop    ebp
100000de:	c3                   	ret    

100000df <playThread(void*)>:
100000df:	55                   	push   ebp
100000e0:	89 e5                	mov    ebp,esp
100000e2:	53                   	push   ebx
100000e3:	83 ec 24             	sub    esp,0x24
100000e6:	a1 00 00 00 00       	mov    eax,ds:0x0	100000e7: R_386_32	irqDisableCounter
100000eb:	48                   	dec    eax
100000ec:	a3 00 00 00 00       	mov    ds:0x0,eax	100000ed: R_386_32	irqDisableCounter
100000f1:	a1 00 00 00 00       	mov    eax,ds:0x0	100000f2: R_386_32	irqDisableCounter
100000f6:	85 c0                	test   eax,eax
100000f8:	75 01                	jne    100000fb <playThread(void*)+0x1c>
100000fa:	fb                   	sti    
100000fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000101:	c7 45 dc 1c 00 00 00 	mov    DWORD PTR [ebp-0x24],0x1c
10000108:	83 ec 0c             	sub    esp,0xc
1000010b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000010e:	e8 fc ff ff ff       	call   1000010f <playThread(void*)+0x30>	1000010f: R_386_PC32	malloc
10000113:	83 c4 10             	add    esp,0x10
10000116:	89 c3                	mov    ebx,eax
10000118:	83 ec 0c             	sub    esp,0xc
1000011b:	68 00 00 06 00       	push   0x60000
10000120:	6a 02                	push   0x2
10000122:	6a 10                	push   0x10
10000124:	68 40 1f 00 00       	push   0x1f40
10000129:	53                   	push   ebx
1000012a:	e8 fc ff ff ff       	call   1000012b <playThread(void*)+0x4c>	1000012b: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
1000012f:	83 c4 20             	add    esp,0x20
10000132:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
10000135:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10000139:	c7 45 e0 14 01 00 00 	mov    DWORD PTR [ebp-0x20],0x114
10000140:	83 ec 0c             	sub    esp,0xc
10000143:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000146:	e8 fc ff ff ff       	call   10000147 <playThread(void*)+0x68>	10000147: R_386_PC32	malloc
1000014b:	83 c4 10             	add    esp,0x10
1000014e:	89 c3                	mov    ebx,eax
10000150:	a1 00 00 00 00       	mov    eax,ds:0x0	10000151: R_386_32	kernelProcess
10000155:	83 ec 04             	sub    esp,0x4
10000158:	50                   	push   eax
10000159:	68 3c 0d 00 10       	push   0x10000d3c	1000015a: R_386_32	.text
1000015e:	53                   	push   ebx
1000015f:	e8 fc ff ff ff       	call   10000160 <playThread(void*)+0x81>	10000160: R_386_PC32	File::File(char const*, Process*)
10000164:	83 c4 10             	add    esp,0x10
10000167:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
1000016a:	83 ec 08             	sub    esp,0x8
1000016d:	6a 01                	push   0x1
1000016f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10000172:	e8 fc ff ff ff       	call   10000173 <playThread(void*)+0x94>	10000173: R_386_PC32	File::open(FileOpenMode)
10000177:	83 c4 10             	add    esp,0x10
1000017a:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
10000181:	83 ec 0c             	sub    esp,0xc
10000184:	68 59 0d 00 10       	push   0x10000d59	10000185: R_386_32	.text
10000189:	e8 fc ff ff ff       	call   1000018a <playThread(void*)+0xab>	1000018a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000018e:	83 c4 10             	add    esp,0x10
10000191:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000194:	8b 00                	mov    eax,DWORD PTR [eax]
10000196:	83 c0 0c             	add    eax,0xc
10000199:	8b 00                	mov    eax,DWORD PTR [eax]
1000019b:	83 ec 0c             	sub    esp,0xc
1000019e:	8d 55 d8             	lea    edx,[ebp-0x28]
100001a1:	52                   	push   edx
100001a2:	68 00 00 00 00       	push   0x0	100001a3: R_386_32	buf
100001a7:	6a 00                	push   0x0
100001a9:	68 00 20 00 00       	push   0x2000
100001ae:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100001b1:	ff d0                	call   eax
100001b3:	83 c4 20             	add    esp,0x20
100001b6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100001b9:	83 ec 0c             	sub    esp,0xc
100001bc:	68 69 0d 00 10       	push   0x10000d69	100001bd: R_386_32	.text
100001c1:	e8 fc ff ff ff       	call   100001c2 <playThread(void*)+0xe3>	100001c2: R_386_PC32	Dbg::kprintf(char const*, ...)
100001c6:	83 c4 10             	add    esp,0x10
100001c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100001cc:	85 c0                	test   eax,eax
100001ce:	74 06                	je     100001d6 <playThread(void*)+0xf7>
100001d0:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
100001d4:	74 22                	je     100001f8 <playThread(void*)+0x119>
100001d6:	83 ec 0c             	sub    esp,0xc
100001d9:	68 78 0d 00 10       	push   0x10000d78	100001da: R_386_32	.text
100001de:	e8 fc ff ff ff       	call   100001df <playThread(void*)+0x100>	100001df: R_386_PC32	Dbg::kprintf(char const*, ...)
100001e3:	83 c4 10             	add    esp,0x10
100001e6:	83 ec 0c             	sub    esp,0xc
100001e9:	6a 00                	push   0x0
100001eb:	e8 fc ff ff ff       	call   100001ec <playThread(void*)+0x10d>	100001ec: R_386_PC32	terminateTask(int)
100001f0:	83 c4 10             	add    esp,0x10
100001f3:	e9 f5 00 00 00       	jmp    100002ed <playThread(void*)+0x20e>
100001f8:	83 ec 0c             	sub    esp,0xc
100001fb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100001fe:	e8 fc ff ff ff       	call   100001ff <playThread(void*)+0x120>	100001ff: R_386_PC32	SoundPort::getBufferUsed()
10000203:	83 c4 10             	add    esp,0x10
10000206:	83 ec 08             	sub    esp,0x8
10000209:	50                   	push   eax
1000020a:	68 8e 0d 00 10       	push   0x10000d8e	1000020b: R_386_32	.text
1000020f:	e8 fc ff ff ff       	call   10000210 <playThread(void*)+0x131>	10000210: R_386_PC32	Dbg::kprintf(char const*, ...)
10000214:	83 c4 10             	add    esp,0x10
10000217:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000021a:	83 f0 01             	xor    eax,0x1
1000021d:	84 c0                	test   al,al
1000021f:	74 4c                	je     1000026d <playThread(void*)+0x18e>
10000221:	6a 02                	push   0x2
10000223:	6a 10                	push   0x10
10000225:	68 40 1f 00 00       	push   0x1f40
1000022a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000022d:	e8 fc ff ff ff       	call   1000022e <playThread(void*)+0x14f>	1000022e: R_386_PC32	SoundCard::configureRates(int, int, int)
10000232:	83 c4 10             	add    esp,0x10
10000235:	83 ec 08             	sub    esp,0x8
10000238:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000023b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000023e:	e8 fc ff ff ff       	call   1000023f <playThread(void*)+0x160>	1000023f: R_386_PC32	SoundCard::addChannel(SoundPort*)
10000243:	83 c4 10             	add    esp,0x10
10000246:	83 ec 0c             	sub    esp,0xc
10000249:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000024c:	e8 fc ff ff ff       	call   1000024d <playThread(void*)+0x16e>	1000024d: R_386_PC32	SoundPort::unpause()
10000251:	83 c4 10             	add    esp,0x10
10000254:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000257:	8b 00                	mov    eax,DWORD PTR [eax]
10000259:	83 c0 24             	add    eax,0x24
1000025c:	8b 00                	mov    eax,DWORD PTR [eax]
1000025e:	83 ec 0c             	sub    esp,0xc
10000261:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000264:	ff d0                	call   eax
10000266:	83 c4 10             	add    esp,0x10
10000269:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
1000026d:	83 ec 0c             	sub    esp,0xc
10000270:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000273:	e8 fc ff ff ff       	call   10000274 <playThread(void*)+0x195>	10000274: R_386_PC32	SoundPort::getBufferUsed()
10000278:	83 c4 10             	add    esp,0x10
1000027b:	89 c2                	mov    edx,eax
1000027d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000280:	89 c1                	mov    ecx,eax
10000282:	01 c9                	add    ecx,ecx
10000284:	01 c8                	add    eax,ecx
10000286:	8d 1c 02             	lea    ebx,[edx+eax*1]
10000289:	83 ec 0c             	sub    esp,0xc
1000028c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000028f:	e8 fc ff ff ff       	call   10000290 <playThread(void*)+0x1b1>	10000290: R_386_PC32	SoundPort::getBufferSize()
10000294:	83 c4 10             	add    esp,0x10
10000297:	39 c3                	cmp    ebx,eax
10000299:	0f 9d c0             	setge  al
1000029c:	84 c0                	test   al,al
1000029e:	74 28                	je     100002c8 <playThread(void*)+0x1e9>
100002a0:	fa                   	cli    
100002a1:	a1 00 00 00 00       	mov    eax,ds:0x0	100002a2: R_386_32	irqDisableCounter
100002a6:	40                   	inc    eax
100002a7:	a3 00 00 00 00       	mov    ds:0x0,eax	100002a8: R_386_32	irqDisableCounter
100002ac:	e8 fc ff ff ff       	call   100002ad <playThread(void*)+0x1ce>	100002ad: R_386_PC32	schedule()
100002b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100002b2: R_386_32	irqDisableCounter
100002b6:	48                   	dec    eax
100002b7:	a3 00 00 00 00       	mov    ds:0x0,eax	100002b8: R_386_32	irqDisableCounter
100002bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100002bd: R_386_32	irqDisableCounter
100002c1:	85 c0                	test   eax,eax
100002c3:	75 a8                	jne    1000026d <playThread(void*)+0x18e>
100002c5:	fb                   	sti    
100002c6:	eb a5                	jmp    1000026d <playThread(void*)+0x18e>
100002c8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100002cb:	89 c2                	mov    edx,eax
100002cd:	c1 ea 1f             	shr    edx,0x1f
100002d0:	01 d0                	add    eax,edx
100002d2:	d1 f8                	sar    eax,1
100002d4:	83 ec 04             	sub    esp,0x4
100002d7:	50                   	push   eax
100002d8:	68 00 00 00 00       	push   0x0	100002d9: R_386_32	buf
100002dd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100002e0:	e8 fc ff ff ff       	call   100002e1 <playThread(void*)+0x202>	100002e1: R_386_PC32	SoundPort::buffer16(short*, int)
100002e5:	83 c4 10             	add    esp,0x10
100002e8:	e9 8d fe ff ff       	jmp    1000017a <playThread(void*)+0x9b>
100002ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100002f0:	c9                   	leave  
100002f1:	c3                   	ret    

100002f2 <AC97::AC97()>:
100002f2:	55                   	push   ebp
100002f3:	89 e5                	mov    ebp,esp
100002f5:	83 ec 08             	sub    esp,0x8
100002f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fb:	83 ec 08             	sub    esp,0x8
100002fe:	68 ac 0d 00 10       	push   0x10000dac	100002ff: R_386_32	.text
10000303:	50                   	push   eax
10000304:	e8 fc ff ff ff       	call   10000305 <AC97::AC97()+0x13>	10000305: R_386_PC32	SoundCard::SoundCard(char const*)
10000309:	83 c4 10             	add    esp,0x10
1000030c:	ba 08 00 00 00       	mov    edx,0x8	1000030d: R_386_32	vtable for AC97
10000311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000314:	89 10                	mov    DWORD PTR [eax],edx
10000316:	90                   	nop
10000317:	c9                   	leave  
10000318:	c3                   	ret    
10000319:	90                   	nop

1000031a <AC97::~AC97()>:
1000031a:	55                   	push   ebp
1000031b:	89 e5                	mov    ebp,esp
1000031d:	83 ec 08             	sub    esp,0x8
10000320:	ba 08 00 00 00       	mov    edx,0x8	10000321: R_386_32	vtable for AC97
10000325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000328:	89 10                	mov    DWORD PTR [eax],edx
1000032a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000032d:	83 ec 0c             	sub    esp,0xc
10000330:	50                   	push   eax
10000331:	e8 fc ff ff ff       	call   10000332 <AC97::~AC97()+0x18>	10000332: R_386_PC32	SoundCard::~SoundCard()
10000336:	83 c4 10             	add    esp,0x10
10000339:	90                   	nop
1000033a:	c9                   	leave  
1000033b:	c3                   	ret    

1000033c <AC97::~AC97()>:
1000033c:	55                   	push   ebp
1000033d:	89 e5                	mov    ebp,esp
1000033f:	83 ec 08             	sub    esp,0x8
10000342:	83 ec 0c             	sub    esp,0xc
10000345:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000348:	e8 fc ff ff ff       	call   10000349 <AC97::~AC97()+0xd>	10000349: R_386_PC32	AC97::~AC97()
1000034d:	83 c4 10             	add    esp,0x10
10000350:	83 ec 08             	sub    esp,0x8
10000353:	68 14 02 00 00       	push   0x214
10000358:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000035b:	e8 fc ff ff ff       	call   1000035c <AC97::~AC97()+0x20>	1000035c: R_386_PC32	operator delete(void*, unsigned long)
10000360:	83 c4 10             	add    esp,0x10
10000363:	c9                   	leave  
10000364:	c3                   	ret    
10000365:	90                   	nop

10000366 <AC97::setVolume(int, int)>:
10000366:	55                   	push   ebp
10000367:	89 e5                	mov    ebp,esp
10000369:	83 ec 18             	sub    esp,0x18
1000036c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000036f:	89 d0                	mov    eax,edx
10000371:	c1 e0 02             	shl    eax,0x2
10000374:	01 d0                	add    eax,edx
10000376:	01 c0                	add    eax,eax
10000378:	85 c0                	test   eax,eax
1000037a:	79 03                	jns    1000037f <AC97::setVolume(int, int)+0x19>
1000037c:	83 c0 1f             	add    eax,0x1f
1000037f:	c1 f8 05             	sar    eax,0x5
10000382:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000385:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000388:	89 d0                	mov    eax,edx
1000038a:	c1 e0 02             	shl    eax,0x2
1000038d:	01 d0                	add    eax,edx
1000038f:	01 c0                	add    eax,eax
10000391:	85 c0                	test   eax,eax
10000393:	79 03                	jns    10000398 <AC97::setVolume(int, int)+0x32>
10000395:	83 c0 1f             	add    eax,0x1f
10000398:	c1 f8 05             	sar    eax,0x5
1000039b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000039e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003a1:	c1 e0 08             	shl    eax,0x8
100003a4:	89 c2                	mov    edx,eax
100003a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100003a9:	09 d0                	or     eax,edx
100003ab:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
100003af:	a1 00 00 00 00       	mov    eax,ds:0x0	100003b0: R_386_32	thePCI
100003b4:	0f b7 4d ee          	movzx  ecx,WORD PTR [ebp-0x12]
100003b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003bb:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100003c1:	6a 02                	push   0x2
100003c3:	51                   	push   ecx
100003c4:	52                   	push   edx
100003c5:	50                   	push   eax
100003c6:	e8 fc ff ff ff       	call   100003c7 <AC97::setVolume(int, int)+0x61>	100003c7: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003cb:	83 c4 10             	add    esp,0x10
100003ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100003cf: R_386_32	thePCI
100003d3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003d6:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100003dc:	6a 18                	push   0x18
100003de:	6a 00                	push   0x0
100003e0:	52                   	push   edx
100003e1:	50                   	push   eax
100003e2:	e8 fc ff ff ff       	call   100003e3 <AC97::setVolume(int, int)+0x7d>	100003e3: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003e7:	83 c4 10             	add    esp,0x10
100003ea:	90                   	nop
100003eb:	c9                   	leave  
100003ec:	c3                   	ret    
100003ed:	90                   	nop

100003ee <AC97::open(int, int, void*)>:
100003ee:	b8 00 00 00 00       	mov    eax,0x0
100003f3:	c3                   	ret    

100003f4 <ac97IRQHandler(regs*, void*)>:
100003f4:	55                   	push   ebp
100003f5:	89 e5                	mov    ebp,esp
100003f7:	83 ec 18             	sub    esp,0x18
100003fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003fd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000400:	83 ec 0c             	sub    esp,0xc
10000403:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000406:	e8 fc ff ff ff       	call   10000407 <ac97IRQHandler(regs*, void*)+0x13>	10000407: R_386_PC32	AC97::handleIRQ()
1000040b:	83 c4 10             	add    esp,0x10
1000040e:	90                   	nop
1000040f:	c9                   	leave  
10000410:	c3                   	ret    
10000411:	90                   	nop

10000412 <AC97::handleIRQ()>:
10000412:	55                   	push   ebp
10000413:	89 e5                	mov    ebp,esp
10000415:	83 ec 18             	sub    esp,0x18
10000418:	83 ec 0c             	sub    esp,0xc
1000041b:	68 c5 0d 00 10       	push   0x10000dc5	1000041c: R_386_32	.text
10000420:	e8 fc ff ff ff       	call   10000421 <AC97::handleIRQ()+0xf>	10000421: R_386_PC32	Dbg::kprintf(char const*, ...)
10000425:	83 c4 10             	add    esp,0x10
10000428:	a1 00 00 00 00       	mov    eax,ds:0x0	10000429: R_386_32	thePCI
1000042d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000430:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000436:	83 ec 04             	sub    esp,0x4
10000439:	6a 14                	push   0x14
1000043b:	52                   	push   edx
1000043c:	50                   	push   eax
1000043d:	e8 fc ff ff ff       	call   1000043e <AC97::handleIRQ()+0x2c>	1000043e: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000442:	83 c4 10             	add    esp,0x10
10000445:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000448:	a1 00 00 00 00       	mov    eax,ds:0x0	10000449: R_386_32	thePCI
1000044d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000450:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000456:	83 ec 04             	sub    esp,0x4
10000459:	6a 15                	push   0x15
1000045b:	52                   	push   edx
1000045c:	50                   	push   eax
1000045d:	e8 fc ff ff ff       	call   1000045e <AC97::handleIRQ()+0x4c>	1000045e: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000462:	83 c4 10             	add    esp,0x10
10000465:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000468:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000046c:	40                   	inc    eax
1000046d:	b9 03 00 00 00       	mov    ecx,0x3
10000472:	99                   	cdq    
10000473:	f7 f9                	idiv   ecx
10000475:	89 d1                	mov    ecx,edx
10000477:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000047b:	8d 50 ff             	lea    edx,[eax-0x1]
1000047e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000482:	51                   	push   ecx
10000483:	52                   	push   edx
10000484:	50                   	push   eax
10000485:	68 d0 0d 00 10       	push   0x10000dd0	10000486: R_386_32	.text
1000048a:	e8 fc ff ff ff       	call   1000048b <AC97::handleIRQ()+0x79>	1000048b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000048f:	83 c4 10             	add    esp,0x10
10000492:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
10000496:	83 ec 08             	sub    esp,0x8
10000499:	50                   	push   eax
1000049a:	68 ff 0d 00 10       	push   0x10000dff	1000049b: R_386_32	.text
1000049f:	e8 fc ff ff ff       	call   100004a0 <AC97::handleIRQ()+0x8e>	100004a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100004a4:	83 c4 10             	add    esp,0x10
100004a7:	a1 00 00 00 00       	mov    eax,ds:0x0	100004a8: R_386_32	thePCI
100004ac:	0f b6 4d f6          	movzx  ecx,BYTE PTR [ebp-0xa]
100004b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100004b3:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100004b9:	6a 15                	push   0x15
100004bb:	51                   	push   ecx
100004bc:	52                   	push   edx
100004bd:	50                   	push   eax
100004be:	e8 fc ff ff ff       	call   100004bf <AC97::handleIRQ()+0xad>	100004bf: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100004c3:	83 c4 10             	add    esp,0x10
100004c6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100004ca:	83 c0 02             	add    eax,0x2
100004cd:	b9 03 00 00 00       	mov    ecx,0x3
100004d2:	99                   	cdq    
100004d3:	f7 f9                	idiv   ecx
100004d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d8:	83 c2 7c             	add    edx,0x7c
100004db:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100004df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e5:	83 ec 04             	sub    esp,0x4
100004e8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004eb:	68 01 80 00 00       	push   0x8001
100004f0:	50                   	push   eax
100004f1:	e8 fc ff ff ff       	call   100004f2 <AC97::handleIRQ()+0xe0>	100004f2: R_386_PC32	SoundCard::getSamples16(int, short*)
100004f6:	83 c4 10             	add    esp,0x10
100004f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004fc:	83 ec 04             	sub    esp,0x4
100004ff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000502:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000505:	68 0a 0e 00 10       	push   0x10000e0a	10000506: R_386_32	.text
1000050a:	e8 fc ff ff ff       	call   1000050b <AC97::handleIRQ()+0xf9>	1000050b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000050f:	83 c4 10             	add    esp,0x10
10000512:	a1 00 00 00 00       	mov    eax,ds:0x0	10000513: R_386_32	thePCI
10000517:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000051a:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000520:	6a 16                	push   0x16
10000522:	6a 1c                	push   0x1c
10000524:	52                   	push   edx
10000525:	50                   	push   eax
10000526:	e8 fc ff ff ff       	call   10000527 <AC97::handleIRQ()+0x115>	10000527: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
1000052b:	83 c4 10             	add    esp,0x10
1000052e:	83 ec 0c             	sub    esp,0xc
10000531:	68 25 0e 00 10       	push   0x10000e25	10000532: R_386_32	.text
10000536:	e8 fc ff ff ff       	call   10000537 <AC97::handleIRQ()+0x125>	10000537: R_386_PC32	Dbg::kprintf(char const*, ...)
1000053b:	83 c4 10             	add    esp,0x10
1000053e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000053f: R_386_32	handles
10000543:	40                   	inc    eax
10000544:	a3 00 00 00 00       	mov    ds:0x0,eax	10000545: R_386_32	handles
10000549:	90                   	nop
1000054a:	c9                   	leave  
1000054b:	c3                   	ret    

1000054c <AC97::setSampleRate(int)>:
1000054c:	55                   	push   ebp
1000054d:	89 e5                	mov    ebp,esp
1000054f:	53                   	push   ebx
10000550:	83 ec 04             	sub    esp,0x4
10000553:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10000555: R_386_32	thePCI
10000559:	a1 00 00 00 00       	mov    eax,ds:0x0	1000055a: R_386_32	thePCI
1000055e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000561:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
10000567:	83 ec 04             	sub    esp,0x4
1000056a:	6a 2a                	push   0x2a
1000056c:	52                   	push   edx
1000056d:	50                   	push   eax
1000056e:	e8 fc ff ff ff       	call   1000056f <AC97::setSampleRate(int)+0x23>	1000056f: R_386_PC32	PCI::readBAR16(unsigned int, int)
10000573:	83 c4 10             	add    esp,0x10
10000576:	83 c8 01             	or     eax,0x1
10000579:	0f b7 d0             	movzx  edx,ax
1000057c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000057f:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000585:	6a 2a                	push   0x2a
10000587:	52                   	push   edx
10000588:	50                   	push   eax
10000589:	53                   	push   ebx
1000058a:	e8 fc ff ff ff       	call   1000058b <AC97::setSampleRate(int)+0x3f>	1000058b: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
1000058f:	83 c4 10             	add    esp,0x10
10000592:	83 ec 0c             	sub    esp,0xc
10000595:	6a 64                	push   0x64
10000597:	e8 fc ff ff ff       	call   10000598 <AC97::setSampleRate(int)+0x4c>	10000598: R_386_PC32	milliTenthSleep(unsigned int)
1000059c:	83 c4 10             	add    esp,0x10
1000059f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100005a1: R_386_32	thePCI
100005a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005a8:	0f b7 c8             	movzx  ecx,ax
100005ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ae:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005b4:	6a 2c                	push   0x2c
100005b6:	51                   	push   ecx
100005b7:	50                   	push   eax
100005b8:	52                   	push   edx
100005b9:	e8 fc ff ff ff       	call   100005ba <AC97::setSampleRate(int)+0x6e>	100005ba: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100005be:	83 c4 10             	add    esp,0x10
100005c1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100005c3: R_386_32	thePCI
100005c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005ca:	0f b7 c8             	movzx  ecx,ax
100005cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d0:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005d6:	6a 32                	push   0x32
100005d8:	51                   	push   ecx
100005d9:	50                   	push   eax
100005da:	52                   	push   edx
100005db:	e8 fc ff ff ff       	call   100005dc <AC97::setSampleRate(int)+0x90>	100005dc: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100005e0:	83 c4 10             	add    esp,0x10
100005e3:	83 ec 0c             	sub    esp,0xc
100005e6:	6a 64                	push   0x64
100005e8:	e8 fc ff ff ff       	call   100005e9 <AC97::setSampleRate(int)+0x9d>	100005e9: R_386_PC32	milliTenthSleep(unsigned int)
100005ed:	83 c4 10             	add    esp,0x10
100005f0:	90                   	nop
100005f1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100005f4:	c9                   	leave  
100005f5:	c3                   	ret    

100005f6 <AC97::_open(int, int, void*)>:
100005f6:	55                   	push   ebp
100005f7:	89 e5                	mov    ebp,esp
100005f9:	56                   	push   esi
100005fa:	53                   	push   ebx
100005fb:	83 ec 30             	sub    esp,0x30
100005fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000601:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
10000607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060a:	89 90 e8 01 00 00    	mov    DWORD PTR [eax+0x1e8],edx
10000610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000613:	8b 90 24 01 00 00    	mov    edx,DWORD PTR [eax+0x124]
10000619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061c:	89 90 ec 01 00 00    	mov    DWORD PTR [eax+0x1ec],edx
10000622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000625:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000062b:	83 e0 01             	and    eax,0x1
1000062e:	85 c0                	test   eax,eax
10000630:	74 5a                	je     1000068c <AC97::_open(int, int, void*)+0x96>
10000632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000635:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000063b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000063e:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000644:	0f b6 ca             	movzx  ecx,dl
10000647:	83 e0 fc             	and    eax,0xfffffffc
1000064a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000064d:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000655:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000065b:	0f b6 d0             	movzx  edx,al
1000065e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000661:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
10000666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000669:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000066f:	8d 50 01             	lea    edx,[eax+0x1]
10000672:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000675:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000067b:	0f b6 d0             	movzx  edx,al
1000067e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000681:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000685:	83 e1 3f             	and    ecx,0x3f
10000688:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000068c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000068f:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
10000695:	83 e0 01             	and    eax,0x1
10000698:	85 c0                	test   eax,eax
1000069a:	74 5a                	je     100006f6 <AC97::_open(int, int, void*)+0x100>
1000069c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000069f:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
100006a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006a8:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100006ae:	0f b6 ca             	movzx  ecx,dl
100006b1:	83 e0 fc             	and    eax,0xfffffffc
100006b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006b7:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100006bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006c5:	0f b6 d0             	movzx  edx,al
100006c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006cb:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
100006d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006d9:	8d 50 01             	lea    edx,[eax+0x1]
100006dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006df:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006e5:	0f b6 d0             	movzx  edx,al
100006e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006ef:	83 e1 3f             	and    ecx,0x3f
100006f2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006f6:	a1 00 00 00 00       	mov    eax,ds:0x0	100006f7: R_386_32	thePCI
100006fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006fe:	8a 92 1e 01 00 00    	mov    dl,BYTE PTR [edx+0x11e]
10000704:	0f b6 da             	movzx  ebx,dl
10000707:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000070a:	8a 92 1d 01 00 00    	mov    dl,BYTE PTR [edx+0x11d]
10000710:	0f b6 ca             	movzx  ecx,dl
10000713:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000716:	8a 92 1c 01 00 00    	mov    dl,BYTE PTR [edx+0x11c]
1000071c:	0f b6 d2             	movzx  edx,dl
1000071f:	83 ec 0c             	sub    esp,0xc
10000722:	6a 04                	push   0x4
10000724:	53                   	push   ebx
10000725:	51                   	push   ecx
10000726:	52                   	push   edx
10000727:	50                   	push   eax
10000728:	e8 fc ff ff ff       	call   10000729 <AC97::_open(int, int, void*)+0x133>	10000729: R_386_PC32	PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)
1000072d:	83 c4 20             	add    esp,0x20
10000730:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000734:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000736: R_386_32	thePCI
1000073a:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
1000073e:	83 c8 05             	or     eax,0x5
10000741:	0f b7 f0             	movzx  esi,ax
10000744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000747:	8a 80 1e 01 00 00    	mov    al,BYTE PTR [eax+0x11e]
1000074d:	0f b6 d8             	movzx  ebx,al
10000750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000753:	8a 80 1d 01 00 00    	mov    al,BYTE PTR [eax+0x11d]
10000759:	0f b6 c8             	movzx  ecx,al
1000075c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000075f:	8a 80 1c 01 00 00    	mov    al,BYTE PTR [eax+0x11c]
10000765:	0f b6 c0             	movzx  eax,al
10000768:	83 ec 08             	sub    esp,0x8
1000076b:	56                   	push   esi
1000076c:	6a 04                	push   0x4
1000076e:	53                   	push   ebx
1000076f:	51                   	push   ecx
10000770:	50                   	push   eax
10000771:	52                   	push   edx
10000772:	e8 fc ff ff ff       	call   10000773 <AC97::_open(int, int, void*)+0x17d>	10000773: R_386_PC32	PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
10000777:	83 c4 20             	add    esp,0x20
1000077a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000077b: R_386_32	thePCI
1000077f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000782:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000788:	6a 2c                	push   0x2c
1000078a:	6a 03                	push   0x3
1000078c:	52                   	push   edx
1000078d:	50                   	push   eax
1000078e:	e8 fc ff ff ff       	call   1000078f <AC97::_open(int, int, void*)+0x199>	1000078f: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000793:	83 c4 10             	add    esp,0x10
10000796:	a1 00 00 00 00       	mov    eax,ds:0x0	10000797: R_386_32	thePCI
1000079b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000079e:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100007a4:	6a 00                	push   0x0
100007a6:	68 aa 55 00 00       	push   0x55aa
100007ab:	52                   	push   edx
100007ac:	50                   	push   eax
100007ad:	e8 fc ff ff ff       	call   100007ae <AC97::_open(int, int, void*)+0x1b8>	100007ae: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100007b2:	83 c4 10             	add    esp,0x10
100007b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100007b6: R_386_32	thePCI
100007ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007bd:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100007c3:	83 ec 04             	sub    esp,0x4
100007c6:	6a 30                	push   0x30
100007c8:	52                   	push   edx
100007c9:	50                   	push   eax
100007ca:	e8 fc ff ff ff       	call   100007cb <AC97::_open(int, int, void*)+0x1d5>	100007cb: R_386_PC32	PCI::readBAR32(unsigned int, int)
100007cf:	83 c4 10             	add    esp,0x10
100007d2:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007d5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100007d8:	c1 e8 14             	shr    eax,0x14
100007db:	83 e0 03             	and    eax,0x3
100007de:	40                   	inc    eax
100007df:	01 c0                	add    eax,eax
100007e1:	83 ec 08             	sub    esp,0x8
100007e4:	50                   	push   eax
100007e5:	68 2c 0e 00 10       	push   0x10000e2c	100007e6: R_386_32	.text
100007ea:	e8 fc ff ff ff       	call   100007eb <AC97::_open(int, int, void*)+0x1f5>	100007eb: R_386_PC32	Dbg::kprintf(char const*, ...)
100007ef:	83 c4 10             	add    esp,0x10
100007f2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100007f5:	c1 e8 16             	shr    eax,0x16
100007f8:	83 e0 03             	and    eax,0x3
100007fb:	83 f8 01             	cmp    eax,0x1
100007fe:	75 10                	jne    10000810 <AC97::_open(int, int, void*)+0x21a>
10000800:	83 ec 0c             	sub    esp,0xc
10000803:	68 3f 0e 00 10       	push   0x10000e3f	10000804: R_386_32	.text
10000808:	e8 fc ff ff ff       	call   10000809 <AC97::_open(int, int, void*)+0x213>	10000809: R_386_PC32	Dbg::kprintf(char const*, ...)
1000080d:	83 c4 10             	add    esp,0x10
10000810:	a1 00 00 00 00       	mov    eax,ds:0x0	10000811: R_386_32	thePCI
10000815:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000818:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000081e:	83 ec 04             	sub    esp,0x4
10000821:	6a 1b                	push   0x1b
10000823:	52                   	push   edx
10000824:	50                   	push   eax
10000825:	e8 fc ff ff ff       	call   10000826 <AC97::_open(int, int, void*)+0x230>	10000826: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000082a:	83 c4 10             	add    esp,0x10
1000082d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10000830:	a1 00 00 00 00       	mov    eax,ds:0x0	10000831: R_386_32	thePCI
10000835:	8a 55 df             	mov    dl,BYTE PTR [ebp-0x21]
10000838:	83 ca 02             	or     edx,0x2
1000083b:	0f b6 ca             	movzx  ecx,dl
1000083e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000841:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000847:	6a 1b                	push   0x1b
10000849:	51                   	push   ecx
1000084a:	52                   	push   edx
1000084b:	50                   	push   eax
1000084c:	e8 fc ff ff ff       	call   1000084d <AC97::_open(int, int, void*)+0x257>	1000084d: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000851:	83 c4 10             	add    esp,0x10
10000854:	83 ec 0c             	sub    esp,0xc
10000857:	68 c4 09 00 00       	push   0x9c4
1000085c:	e8 fc ff ff ff       	call   1000085d <AC97::_open(int, int, void*)+0x267>	1000085d: R_386_PC32	milliTenthSleep(unsigned int)
10000861:	83 c4 10             	add    esp,0x10
10000864:	a1 00 00 00 00       	mov    eax,ds:0x0	10000865: R_386_32	thePCI
10000869:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000086c:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000872:	83 ec 04             	sub    esp,0x4
10000875:	6a 1b                	push   0x1b
10000877:	52                   	push   edx
10000878:	50                   	push   eax
10000879:	e8 fc ff ff ff       	call   1000087a <AC97::_open(int, int, void*)+0x284>	1000087a: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000087e:	83 c4 10             	add    esp,0x10
10000881:	0f b6 c0             	movzx  eax,al
10000884:	83 e0 02             	and    eax,0x2
10000887:	85 c0                	test   eax,eax
10000889:	0f 95 c0             	setne  al
1000088c:	84 c0                	test   al,al
1000088e:	74 10                	je     100008a0 <AC97::_open(int, int, void*)+0x2aa>
10000890:	83 ec 0c             	sub    esp,0xc
10000893:	68 58 0e 00 10       	push   0x10000e58	10000894: R_386_32	.text
10000898:	e8 fc ff ff ff       	call   10000899 <AC97::_open(int, int, void*)+0x2a3>	10000899: R_386_PC32	Dbg::kprintf(char const*, ...)
1000089d:	83 c4 10             	add    esp,0x10
100008a0:	83 ec 04             	sub    esp,0x4
100008a3:	6a 32                	push   0x32
100008a5:	6a 0f                	push   0xf
100008a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008aa:	e8 fc ff ff ff       	call   100008ab <AC97::_open(int, int, void*)+0x2b5>	100008ab: R_386_PC32	AC97::setVolume(int, int)
100008af:	83 c4 10             	add    esp,0x10
100008b2:	83 ec 0c             	sub    esp,0xc
100008b5:	6a 01                	push   0x1
100008b7:	e8 fc ff ff ff       	call   100008b8 <AC97::_open(int, int, void*)+0x2c2>	100008b8: R_386_PC32	Phys::allocateContiguousPages(int)
100008bc:	83 c4 10             	add    esp,0x10
100008bf:	89 c2                	mov    edx,eax
100008c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c4:	89 90 f4 01 00 00    	mov    DWORD PTR [eax+0x1f4],edx
100008ca:	83 ec 0c             	sub    esp,0xc
100008cd:	6a 01                	push   0x1
100008cf:	e8 fc ff ff ff       	call   100008d0 <AC97::_open(int, int, void*)+0x2da>	100008d0: R_386_PC32	Virt::allocateKernelVirtualPages(int)
100008d4:	83 c4 10             	add    esp,0x10
100008d7:	89 c2                	mov    edx,eax
100008d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008dc:	89 90 f0 01 00 00    	mov    DWORD PTR [eax+0x1f0],edx
100008e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e5:	8b 90 f0 01 00 00    	mov    edx,DWORD PTR [eax+0x1f0]
100008eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ee:	8b 80 f4 01 00 00    	mov    eax,DWORD PTR [eax+0x1f4]
100008f4:	83 ec 04             	sub    esp,0x4
100008f7:	52                   	push   edx
100008f8:	50                   	push   eax
100008f9:	68 74 0e 00 10       	push   0x10000e74	100008fa: R_386_32	.text
100008fe:	e8 fc ff ff ff       	call   100008ff <AC97::_open(int, int, void*)+0x309>	100008ff: R_386_PC32	Dbg::kprintf(char const*, ...)
10000903:	83 c4 10             	add    esp,0x10
10000906:	a1 00 00 00 00       	mov    eax,ds:0x0	10000907: R_386_32	firstVAS
1000090b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000090e:	8b 8a f0 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f0]
10000914:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000917:	8b 92 f4 01 00 00    	mov    edx,DWORD PTR [edx+0x1f4]
1000091d:	83 ec 0c             	sub    esp,0xc
10000920:	6a 03                	push   0x3
10000922:	6a 01                	push   0x1
10000924:	51                   	push   ecx
10000925:	52                   	push   edx
10000926:	50                   	push   eax
10000927:	e8 fc ff ff ff       	call   10000928 <AC97::_open(int, int, void*)+0x332>	10000928: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
1000092c:	83 c4 20             	add    esp,0x20
1000092f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000936:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
1000093a:	0f 8f cb 00 00 00    	jg     10000a0b <AC97::_open(int, int, void*)+0x415>
10000940:	c7 45 d8 14 00 00 00 	mov    DWORD PTR [ebp-0x28],0x14
10000947:	83 ec 0c             	sub    esp,0xc
1000094a:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000094d:	e8 fc ff ff ff       	call   1000094e <AC97::_open(int, int, void*)+0x358>	1000094e: R_386_PC32	Phys::allocateContiguousPages(int)
10000952:	83 c4 10             	add    esp,0x10
10000955:	89 c2                	mov    edx,eax
10000957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
1000095d:	83 e9 80             	sub    ecx,0xffffff80
10000960:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
10000964:	83 ec 0c             	sub    esp,0xc
10000967:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000096a:	e8 fc ff ff ff       	call   1000096b <AC97::_open(int, int, void*)+0x375>	1000096b: R_386_PC32	Virt::allocateKernelVirtualPages(int)
1000096f:	83 c4 10             	add    esp,0x10
10000972:	89 c2                	mov    edx,eax
10000974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000977:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
1000097a:	83 c1 7c             	add    ecx,0x7c
1000097d:	89 54 88 0c          	mov    DWORD PTR [eax+ecx*4+0xc],edx
10000981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000984:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000987:	83 c2 7c             	add    edx,0x7c
1000098a:	8b 54 90 0c          	mov    edx,DWORD PTR [eax+edx*4+0xc]
1000098e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000991:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000994:	83 e9 80             	sub    ecx,0xffffff80
10000997:	8b 44 88 08          	mov    eax,DWORD PTR [eax+ecx*4+0x8]
1000099b:	83 ec 04             	sub    esp,0x4
1000099e:	52                   	push   edx
1000099f:	50                   	push   eax
100009a0:	68 94 0e 00 10       	push   0x10000e94	100009a1: R_386_32	.text
100009a5:	e8 fc ff ff ff       	call   100009a6 <AC97::_open(int, int, void*)+0x3b0>	100009a6: R_386_PC32	Dbg::kprintf(char const*, ...)
100009aa:	83 c4 10             	add    esp,0x10
100009ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100009ae: R_386_32	firstVAS
100009b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009b5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
100009b8:	83 c1 7c             	add    ecx,0x7c
100009bb:	8b 4c 8a 0c          	mov    ecx,DWORD PTR [edx+ecx*4+0xc]
100009bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009c2:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
100009c5:	83 eb 80             	sub    ebx,0xffffff80
100009c8:	8b 54 9a 08          	mov    edx,DWORD PTR [edx+ebx*4+0x8]
100009cc:	83 ec 0c             	sub    esp,0xc
100009cf:	6a 03                	push   0x3
100009d1:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100009d4:	51                   	push   ecx
100009d5:	52                   	push   edx
100009d6:	50                   	push   eax
100009d7:	e8 fc ff ff ff       	call   100009d8 <AC97::_open(int, int, void*)+0x3e2>	100009d8: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
100009dc:	83 c4 20             	add    esp,0x20
100009df:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100009e2:	c1 e0 0c             	shl    eax,0xc
100009e5:	89 c2                	mov    edx,eax
100009e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ea:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
100009ed:	83 c1 7c             	add    ecx,0x7c
100009f0:	8b 44 88 0c          	mov    eax,DWORD PTR [eax+ecx*4+0xc]
100009f4:	83 ec 04             	sub    esp,0x4
100009f7:	52                   	push   edx
100009f8:	6a 00                	push   0x0
100009fa:	50                   	push   eax
100009fb:	e8 fc ff ff ff       	call   100009fc <AC97::_open(int, int, void*)+0x406>	100009fc: R_386_PC32	memset
10000a00:	83 c4 10             	add    esp,0x10
10000a03:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000a06:	e9 2b ff ff ff       	jmp    10000936 <AC97::_open(int, int, void*)+0x340>
10000a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a0e:	8b 80 f0 01 00 00    	mov    eax,DWORD PTR [eax+0x1f0]
10000a14:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a1a:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
10000a20:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a23:	89 10                	mov    DWORD PTR [eax],edx
10000a25:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a28:	83 c0 04             	add    eax,0x4
10000a2b:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a31:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a34:	8d 50 08             	lea    edx,[eax+0x8]
10000a37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a3a:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
10000a40:	89 02                	mov    DWORD PTR [edx],eax
10000a42:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a45:	83 c0 0c             	add    eax,0xc
10000a48:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a4e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a51:	8d 50 10             	lea    edx,[eax+0x10]
10000a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a57:	8b 80 10 02 00 00    	mov    eax,DWORD PTR [eax+0x210]
10000a5d:	89 02                	mov    DWORD PTR [edx],eax
10000a5f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a62:	83 c0 14             	add    eax,0x14
10000a65:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a6b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000a72:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10000a76:	7f 38                	jg     10000ab0 <AC97::_open(int, int, void*)+0x4ba>
10000a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a7b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000a7e:	83 c2 7c             	add    edx,0x7c
10000a81:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000a85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000a88:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000a8f:	81 7d e8 fe ff 00 00 	cmp    DWORD PTR [ebp-0x18],0xfffe
10000a96:	7f 13                	jg     10000aab <AC97::_open(int, int, void*)+0x4b5>
10000a98:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000a9b:	8d 50 02             	lea    edx,[eax+0x2]
10000a9e:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10000aa1:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
10000aa6:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10000aa9:	eb e4                	jmp    10000a8f <AC97::_open(int, int, void*)+0x499>
10000aab:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000aae:	eb c2                	jmp    10000a72 <AC97::_open(int, int, void*)+0x47c>
10000ab0:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ab1: R_386_32	thePCI
10000ab5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000ab8:	8b 8a f4 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f4]
10000abe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000ac1:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000ac7:	6a 10                	push   0x10
10000ac9:	51                   	push   ecx
10000aca:	52                   	push   edx
10000acb:	50                   	push   eax
10000acc:	e8 fc ff ff ff       	call   10000acd <AC97::_open(int, int, void*)+0x4d7>	10000acd: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000ad1:	83 c4 10             	add    esp,0x10
10000ad4:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ad5: R_386_32	thePCI
10000ad9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000adc:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000ae2:	6a 15                	push   0x15
10000ae4:	6a 03                	push   0x3
10000ae6:	52                   	push   edx
10000ae7:	50                   	push   eax
10000ae8:	e8 fc ff ff ff       	call   10000ae9 <AC97::_open(int, int, void*)+0x4f3>	10000ae9: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000aed:	83 c4 10             	add    esp,0x10
10000af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af3:	8a 80 38 01 00 00    	mov    al,BYTE PTR [eax+0x138]
10000af9:	0f b6 c0             	movzx  eax,al
10000afc:	83 ec 08             	sub    esp,0x8
10000aff:	50                   	push   eax
10000b00:	68 b7 0e 00 10       	push   0x10000eb7	10000b01: R_386_32	.text
10000b05:	e8 fc ff ff ff       	call   10000b06 <AC97::_open(int, int, void*)+0x510>	10000b06: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b0a:	83 c4 10             	add    esp,0x10
10000b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b10:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b13:	8a 92 38 01 00 00    	mov    dl,BYTE PTR [edx+0x138]
10000b19:	0f b6 d2             	movzx  edx,dl
10000b1c:	83 ec 0c             	sub    esp,0xc
10000b1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b22:	6a 01                	push   0x1
10000b24:	68 00 00 00 00       	push   0x0	10000b25: R_386_32	ac97IRQHandler(regs*, void*)
10000b29:	52                   	push   edx
10000b2a:	50                   	push   eax
10000b2b:	e8 fc ff ff ff       	call   10000b2c <AC97::_open(int, int, void*)+0x536>	10000b2c: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000b30:	83 c4 20             	add    esp,0x20
10000b33:	89 c2                	mov    edx,eax
10000b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b38:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000b3e:	b8 00 00 00 00       	mov    eax,0x0
10000b43:	8d 65 f8             	lea    esp,[ebp-0x8]
10000b46:	5b                   	pop    ebx
10000b47:	5e                   	pop    esi
10000b48:	5d                   	pop    ebp
10000b49:	c3                   	ret    

10000b4a <AC97::close(int, int, void*)>:
10000b4a:	b8 00 00 00 00       	mov    eax,0x0
10000b4f:	c3                   	ret    

10000b50 <AC97::beginPlayback()>:
10000b50:	55                   	push   ebp
10000b51:	89 e5                	mov    ebp,esp
10000b53:	83 ec 18             	sub    esp,0x18
10000b56:	83 ec 0c             	sub    esp,0xc
10000b59:	68 c7 0e 00 10       	push   0x10000ec7	10000b5a: R_386_32	.text
10000b5e:	e8 fc ff ff ff       	call   10000b5f <AC97::beginPlayback()+0xf>	10000b5f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b63:	83 c4 10             	add    esp,0x10
10000b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b69:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
10000b6f:	83 ec 08             	sub    esp,0x8
10000b72:	50                   	push   eax
10000b73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b76:	e8 fc ff ff ff       	call   10000b77 <AC97::beginPlayback()+0x27>	10000b77: R_386_PC32	AC97::setSampleRate(int)
10000b7b:	83 c4 10             	add    esp,0x10
10000b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b81:	8b 80 dc 01 00 00    	mov    eax,DWORD PTR [eax+0x1dc]
10000b87:	83 f8 10             	cmp    eax,0x10
10000b8a:	74 10                	je     10000b9c <AC97::beginPlayback()+0x4c>
10000b8c:	83 ec 0c             	sub    esp,0xc
10000b8f:	68 e0 0e 00 10       	push   0x10000ee0	10000b90: R_386_32	.text
10000b94:	e8 fc ff ff ff       	call   10000b95 <AC97::beginPlayback()+0x45>	10000b95: R_386_PC32	Krnl::panic(char const*)
10000b99:	83 c4 10             	add    esp,0x10
10000b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b9f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10000ba5:	83 f8 02             	cmp    eax,0x2
10000ba8:	74 10                	je     10000bba <AC97::beginPlayback()+0x6a>
10000baa:	83 ec 0c             	sub    esp,0xc
10000bad:	68 10 0f 00 10       	push   0x10000f10	10000bae: R_386_32	.text
10000bb2:	e8 fc ff ff ff       	call   10000bb3 <AC97::beginPlayback()+0x63>	10000bb3: R_386_PC32	Krnl::panic(char const*)
10000bb7:	83 c4 10             	add    esp,0x10
10000bba:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bbb: R_386_32	thePCI
10000bbf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bc2:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000bc8:	83 ec 04             	sub    esp,0x4
10000bcb:	6a 1b                	push   0x1b
10000bcd:	52                   	push   edx
10000bce:	50                   	push   eax
10000bcf:	e8 fc ff ff ff       	call   10000bd0 <AC97::beginPlayback()+0x80>	10000bd0: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000bd4:	83 c4 10             	add    esp,0x10
10000bd7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bda:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000bdd:	83 e0 e0             	and    eax,0xffffffe0
10000be0:	83 c8 1d             	or     eax,0x1d
10000be3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000be6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000bea:	83 ec 08             	sub    esp,0x8
10000bed:	50                   	push   eax
10000bee:	68 41 0f 00 10       	push   0x10000f41	10000bef: R_386_32	.text
10000bf3:	e8 fc ff ff ff       	call   10000bf4 <AC97::beginPlayback()+0xa4>	10000bf4: R_386_PC32	Dbg::kprintf(char const*, ...)
10000bf8:	83 c4 10             	add    esp,0x10
10000bfb:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bfc: R_386_32	thePCI
10000c00:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
10000c04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c07:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c0d:	6a 1b                	push   0x1b
10000c0f:	51                   	push   ecx
10000c10:	52                   	push   edx
10000c11:	50                   	push   eax
10000c12:	e8 fc ff ff ff       	call   10000c13 <AC97::beginPlayback()+0xc3>	10000c13: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000c17:	83 c4 10             	add    esp,0x10
10000c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c1d:	c6 80 d8 01 00 00 01 	mov    BYTE PTR [eax+0x1d8],0x1
10000c24:	90                   	nop
10000c25:	c9                   	leave  
10000c26:	c3                   	ret    
10000c27:	90                   	nop

10000c28 <AC97::stopPlayback()>:
10000c28:	55                   	push   ebp
10000c29:	89 e5                	mov    ebp,esp
10000c2b:	83 ec 18             	sub    esp,0x18
10000c2e:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c2f: R_386_32	thePCI
10000c33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c36:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c3c:	83 ec 04             	sub    esp,0x4
10000c3f:	6a 1b                	push   0x1b
10000c41:	52                   	push   edx
10000c42:	50                   	push   eax
10000c43:	e8 fc ff ff ff       	call   10000c44 <AC97::stopPlayback()+0x1c>	10000c44: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000c48:	83 c4 10             	add    esp,0x10
10000c4b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c4e:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c4f: R_386_32	thePCI
10000c53:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000c57:	89 d1                	mov    ecx,edx
10000c59:	81 e1 e0 00 00 00    	and    ecx,0xe0
10000c5f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c62:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c68:	6a 1b                	push   0x1b
10000c6a:	51                   	push   ecx
10000c6b:	52                   	push   edx
10000c6c:	50                   	push   eax
10000c6d:	e8 fc ff ff ff       	call   10000c6e <AC97::stopPlayback()+0x46>	10000c6e: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000c72:	83 c4 10             	add    esp,0x10
10000c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c78:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
10000c7f:	90                   	nop
10000c80:	c9                   	leave  
10000c81:	c3                   	ret    
10000c82:	66 90                	xchg   ax,ax
10000c84:	13 05 00 00 24 05    	adc    eax,DWORD PTR ds:0x5240000
10000c8a:	00 00                	add    BYTE PTR [eax],al
10000c8c:	00 06                	add    BYTE PTR [esi],al
10000c8e:	00 00                	add    BYTE PTR [eax],al
10000c90:	00 00                	add    BYTE PTR [eax],al
10000c92:	01 00                	add    DWORD PTR [eax],eax
10000c94:	00 00                	add    BYTE PTR [eax],al
10000c96:	02 00                	add    al,BYTE PTR [eax]
10000c98:	00 00                	add    BYTE PTR [eax],al
10000c9a:	04 00                	add    al,0x0
10000c9c:	00 00                	add    BYTE PTR [eax],al
10000c9e:	06                   	push   es
10000c9f:	00 00                	add    BYTE PTR [eax],al
10000ca1:	00 10                	add    BYTE PTR [eax],dl
10000ca3:	00 00                	add    BYTE PTR [eax],al
10000ca5:	10 00                	adc    BYTE PTR [eax],al
10000ca7:	00 00                	add    BYTE PTR [eax],al
10000ca9:	00 00                	add    BYTE PTR [eax],al
10000cab:	c0 00 00             	rol    BYTE PTR [eax],0x0
10000cae:	00 c2                	add    dl,al
10000cb0:	00 00                	add    BYTE PTR [eax],al
10000cb2:	40                   	inc    eax
10000cb3:	c2 00 00             	ret    0x0
10000cb6:	80 c2 00             	add    dl,0x0
10000cb9:	00 c0                	add    al,al
10000cbb:	c2 00 00             	ret    0x0
10000cbe:	01 c2                	add    edx,eax
10000cc0:	00 00                	add    BYTE PTR [eax],al
10000cc2:	01 00                	add    DWORD PTR [eax],eax
10000cc4:	00 00                	add    BYTE PTR [eax],al
10000cc6:	06                   	push   es
10000cc7:	c2 00 00             	ret    0x0
10000cca:	02 00                	add    al,BYTE PTR [eax]
10000ccc:	00 10                	add    BYTE PTR [eax],dl
10000cce:	00 c2                	add    dl,al
10000cd0:	00 00                	add    BYTE PTR [eax],al
10000cd2:	02 c2                	add    al,dl
10000cd4:	00 00                	add    BYTE PTR [eax],al
10000cd6:	02 00                	add    al,BYTE PTR [eax]
10000cd8:	00 00                	add    BYTE PTR [eax],al
10000cda:	04 c2                	add    al,0xc2
10000cdc:	00 80 00 00 00 06    	add    BYTE PTR [eax+0x6000000],al
10000ce2:	00 c2                	add    dl,al
10000ce4:	13 05 00 c2 24 05    	adc    eax,DWORD PTR ds:0x524c200
10000cea:	00 c2                	add    dl,al
10000cec:	00 00                	add    BYTE PTR [eax],al
10000cee:	18 00                	sbb    BYTE PTR [eax],al
10000cf0:	00 00                	add    BYTE PTR [eax],al
10000cf2:	08 00                	or     BYTE PTR [eax],al
10000cf4:	00 00                	add    BYTE PTR [eax],al
10000cf6:	20 00                	and    BYTE PTR [eax],al
10000cf8:	00 00                	add    BYTE PTR [eax],al
10000cfa:	00 10                	add    BYTE PTR [eax],dl
10000cfc:	00 00                	add    BYTE PTR [eax],al
10000cfe:	00 02                	add    BYTE PTR [edx],al
10000d00:	00 00                	add    BYTE PTR [eax],al
10000d02:	e8 01 00 00 00       	call   10000d08 <AC97::stopPlayback()+0xe0>
10000d07:	c8 ff ff ff          	enter  0xffff,0xff
10000d0b:	ef                   	out    dx,eax
10000d0c:	00 00                	add    BYTE PTR [eax],al
10000d0e:	00 f0                	add    al,dh
10000d10:	00 00                	add    BYTE PTR [eax],al
10000d12:	c0 ff 00             	sar    bh,0x0
10000d15:	00 10                	add    BYTE PTR [eax],dl
10000d17:	c2 00 40             	ret    0x4000
10000d1a:	48                   	dec    eax
10000d1b:	c2 30 00             	ret    0x30
10000d1e:	00 00                	add    BYTE PTR [eax],al
10000d20:	80 00 00             	add    BYTE PTR [eax],0x0
10000d23:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
10000d26:	61                   	popa   
10000d27:	72 74                	jb     10000d9d <AC97::stopPlayback()+0x175>
10000d29:	69 6e 67 20 41 43 39 	imul   ebp,DWORD PTR [esi+0x67],0x39434120
10000d30:	37                   	aaa    
10000d31:	20 64 72 69          	and    BYTE PTR [edx+esi*2+0x69],ah
10000d35:	76 65                	jbe    10000d9c <AC97::stopPlayback()+0x174>
10000d37:	72 2e                	jb     10000d67 <AC97::stopPlayback()+0x13f>
10000d39:	2e 2e 00 43 3a       	cs add BYTE PTR cs:[ebx+0x3a],al
10000d3e:	2f                   	das    
10000d3f:	42                   	inc    edx
10000d40:	61                   	popa   
10000d41:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d42:	61                   	popa   
10000d43:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d44:	61                   	popa   
10000d45:	2f                   	das    
10000d46:	41                   	inc    ecx
10000d47:	75 64                	jne    10000dad <AC97::stopPlayback()+0x185>
10000d49:	69 6f 2f 77 69 6e 39 	imul   ebp,DWORD PTR [edi+0x2f],0x396e6977
10000d50:	35 73 6e 64 2e       	xor    eax,0x2e646e73
10000d55:	77 61                	ja     10000db8 <AC97::stopPlayback()+0x190>
10000d57:	76 00                	jbe    10000d59 <AC97::stopPlayback()+0x131>
10000d59:	61                   	popa   
10000d5a:	62 6f 75             	bound  ebp,QWORD PTR [edi+0x75]
10000d5d:	74 20                	je     10000d7f <AC97::stopPlayback()+0x157>
10000d5f:	74 6f                	je     10000dd0 <AC97::stopPlayback()+0x1a8>
10000d61:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d64:	61                   	popa   
10000d65:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d69:	77 65                	ja     10000dd0 <AC97::stopPlayback()+0x1a8>
10000d6b:	20 6a 75             	and    BYTE PTR [edx+0x75],ch
10000d6e:	73 74                	jae    10000de4 <AC97::stopPlayback()+0x1bc>
10000d70:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d73:	61                   	popa   
10000d74:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d78:	53                   	push   ebx
10000d79:	4f                   	dec    edi
10000d7a:	4e                   	dec    esi
10000d7b:	47                   	inc    edi
10000d7c:	20 53 48             	and    BYTE PTR [ebx+0x48],dl
10000d7f:	4f                   	dec    edi
10000d80:	55                   	push   ebp
10000d81:	4c                   	dec    esp
10000d82:	44                   	inc    esp
10000d83:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000d86:	20 44 4f 4e          	and    BYTE PTR [edi+ecx*2+0x4e],al
10000d8a:	45                   	inc    ebp
10000d8b:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d8e:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000d91:	66 65 72 20          	data16 gs jb 10000db5 <AC97::stopPlayback()+0x18d>
10000d95:	68 61 73 20 25       	push   0x25207361
10000d9a:	64 20 73 61          	and    BYTE PTR fs:[ebx+0x61],dh
10000d9e:	6d                   	ins    DWORD PTR es:[edi],dx
10000d9f:	70 6c                	jo     10000e0d <AC97::stopPlayback()+0x1e5>
10000da1:	65 73 20             	gs jae 10000dc4 <AC97::stopPlayback()+0x19c>
10000da4:	69 6e 20 69 74 2e 0a 	imul   ebp,DWORD PTR [esi+0x20],0xa2e7469
10000dab:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10000dae:	74 65                	je     10000e15 <AC97::stopPlayback()+0x1ed>
10000db0:	6c                   	ins    BYTE PTR es:[edi],dx
10000db1:	20 41 43             	and    BYTE PTR [ecx+0x43],al
10000db4:	27                   	daa    
10000db5:	39 37                	cmp    DWORD PTR [edi],esi
10000db7:	20 41 75             	and    BYTE PTR [ecx+0x75],al
10000dba:	64 69 6f 20 44 65 76 69 	imul   ebp,DWORD PTR fs:[edi+0x20],0x69766544
10000dc2:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
10000dc5:	41                   	inc    ecx
10000dc6:	43                   	inc    ebx
10000dc7:	39 37                	cmp    DWORD PTR [edi],esi
10000dc9:	20 49 52             	and    BYTE PTR [ecx+0x52],cl
10000dcc:	51                   	push   ecx
10000dcd:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000dd0:	63 75 72             	arpl   WORD PTR [ebp+0x72],si
10000dd3:	72 65                	jb     10000e3a <AC97::stopPlayback()+0x212>
10000dd5:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000dd6:	74 6c                	je     10000e44 <AC97::stopPlayback()+0x21c>
10000dd8:	79 20                	jns    10000dfa <AC97::stopPlayback()+0x1d2>
10000dda:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000ddb:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000ddc:	20 27                	and    BYTE PTR [edi],ah
10000dde:	25 64 27 2e 20       	and    eax,0x202e2764
10000de3:	63 69 76             	arpl   WORD PTR [ecx+0x76],bp
10000de6:	20 2d 20 31 20 3d    	and    BYTE PTR ds:0x3d203120,ch
10000dec:	20 25 64 2c 20 63    	and    BYTE PTR ds:0x63202c64,ah
10000df2:	69 76 20 2b 20 31 20 	imul   esi,DWORD PTR [esi+0x20],0x2031202b
10000df9:	3d 20 25 64 0a       	cmp    eax,0xa642520
10000dfe:	00 6c 76 69          	add    BYTE PTR [esi+esi*2+0x69],ch
10000e02:	20 3d 20 20 25 64    	and    BYTE PTR ds:0x64252020,bh
10000e08:	0a 00                	or     al,BYTE PTR [eax]
10000e0a:	77 65                	ja     10000e71 <AC97::stopPlayback()+0x249>
10000e0c:	20 67 6f             	and    BYTE PTR [edi+0x6f],ah
10000e0f:	74 20                	je     10000e31 <AC97::stopPlayback()+0x209>
10000e11:	25 64 20 73 61       	and    eax,0x61732064
10000e16:	6d                   	ins    DWORD PTR es:[edi],dx
10000e17:	70 6c                	jo     10000e85 <AC97::stopPlayback()+0x25d>
10000e19:	65 73 20             	gs jae 10000e3c <AC97::stopPlayback()+0x214>
10000e1c:	74 6f                	je     10000e8d <AC97::stopPlayback()+0x265>
10000e1e:	20 30                	and    BYTE PTR [eax],dh
10000e20:	78 25                	js     10000e47 <AC97::stopPlayback()+0x21f>
10000e22:	58                   	pop    eax
10000e23:	0a 00                	or     al,BYTE PTR [eax]
10000e25:	64 6f                	outs   dx,DWORD PTR fs:[esi]
10000e27:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e28:	65 2e 0a 00          	gs or  al,BYTE PTR cs:[eax]
10000e2c:	41                   	inc    ecx
10000e2d:	43                   	inc    ebx
10000e2e:	39 37                	cmp    DWORD PTR [edi],esi
10000e30:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10000e33:	61                   	popa   
10000e34:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e35:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e36:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000e38:	73 3a                	jae    10000e74 <AC97::stopPlayback()+0x24c>
10000e3a:	20 25 64 0a 00 32    	and    BYTE PTR ds:0x32000a64,ah
10000e40:	30 20                	xor    BYTE PTR [eax],ah
10000e42:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000e45:	20 73 6f             	and    BYTE PTR [ebx+0x6f],dh
10000e48:	75 6e                	jne    10000eb8 <AC97::stopPlayback()+0x290>
10000e4a:	64 20 73 75          	and    BYTE PTR fs:[ebx+0x75],dh
10000e4e:	70 70                	jo     10000ec0 <AC97::stopPlayback()+0x298>
10000e50:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e51:	72 74                	jb     10000ec7 <AC97::stopPlayback()+0x29f>
10000e53:	65 64 2e 0a 00       	gs fs or al,BYTE PTR cs:[eax]
10000e58:	42                   	inc    edx
10000e59:	69 74 20 63 6f 75 6c 64 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x646c756f
10000e61:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000e64:	74 20                	je     10000e86 <AC97::stopPlayback()+0x25e>
10000e66:	62 65 20             	bound  esp,QWORD PTR [ebp+0x20]
10000e69:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
10000e6d:	72 65                	jb     10000ed4 <AC97::stopPlayback()+0x2ac>
10000e6f:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000e73:	00 62 64             	add    BYTE PTR [edx+0x64],ah
10000e76:	6c                   	ins    BYTE PTR es:[edi],dx
10000e77:	20 61 74             	and    BYTE PTR [ecx+0x74],ah
10000e7a:	20 70 68             	and    BYTE PTR [eax+0x68],dh
10000e7d:	79 73                	jns    10000ef2 <AC97::stopPlayback()+0x2ca>
10000e7f:	20 30                	and    BYTE PTR [eax],dh
10000e81:	78 25                	js     10000ea8 <AC97::stopPlayback()+0x280>
10000e83:	58                   	pop    eax
10000e84:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e87:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e8b:	72 74                	jb     10000f01 <AC97::stopPlayback()+0x2d9>
10000e8d:	20 30                	and    BYTE PTR [eax],dh
10000e8f:	78 25                	js     10000eb6 <AC97::stopPlayback()+0x28e>
10000e91:	58                   	pop    eax
10000e92:	0a 00                	or     al,BYTE PTR [eax]
10000e94:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000e97:	66 65 72 20          	data16 gs jb 10000ebb <AC97::stopPlayback()+0x293>
10000e9b:	61                   	popa   
10000e9c:	74 20                	je     10000ebe <AC97::stopPlayback()+0x296>
10000e9e:	70 68                	jo     10000f08 <AC97::stopPlayback()+0x2e0>
10000ea0:	79 73                	jns    10000f15 <AC97::stopPlayback()+0x2ed>
10000ea2:	20 30                	and    BYTE PTR [eax],dh
10000ea4:	78 25                	js     10000ecb <AC97::stopPlayback()+0x2a3>
10000ea6:	58                   	pop    eax
10000ea7:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000eaa:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000eae:	72 74                	jb     10000f24 <AC97::stopPlayback()+0x2fc>
10000eb0:	20 30                	and    BYTE PTR [eax],dh
10000eb2:	78 25                	js     10000ed9 <AC97::stopPlayback()+0x2b1>
10000eb4:	58                   	pop    eax
10000eb5:	0a 00                	or     al,BYTE PTR [eax]
10000eb7:	69 6e 74 65 72 72 75 	imul   ebp,DWORD PTR [esi+0x74],0x75727265
10000ebe:	70 74                	jo     10000f34 <AC97::stopPlayback()+0x30c>
10000ec0:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000ec6:	00 62 65             	add    BYTE PTR [edx+0x65],ah
10000ec9:	67 69 6e 6e 69 6e 67 20 	imul   ebp,DWORD PTR [bp+0x6e],0x20676e69
10000ed1:	70 6c                	jo     10000f3f <AC97::stopPlayback()+0x317>
10000ed3:	61                   	popa   
10000ed4:	79 62                	jns    10000f38 <AC97::stopPlayback()+0x310>
10000ed6:	61                   	popa   
10000ed7:	63 6b 2e             	arpl   WORD PTR [ebx+0x2e],bp
10000eda:	2e 2e 0a 00          	cs or  al,BYTE PTR cs:[eax]
10000ede:	00 00                	add    BYTE PTR [eax],al
10000ee0:	41                   	inc    ecx
10000ee1:	43                   	inc    ebx
10000ee2:	39 37                	cmp    DWORD PTR [edi],esi
10000ee4:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000ee6:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000ee9:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000ef0:	61                   	popa   
10000ef1:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000ef4:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000ef7:	73 20                	jae    10000f19 <AC97::stopPlayback()+0x2f1>
10000ef9:	21 3d 20 31 36 20    	and    DWORD PTR ds:0x20363120,edi
10000eff:	4e                   	dec    esi
10000f00:	4f                   	dec    edi
10000f01:	54                   	push   esp
10000f02:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000f05:	50                   	push   eax
10000f06:	50                   	push   eax
10000f07:	4f                   	dec    edi
10000f08:	52                   	push   edx
10000f09:	54                   	push   esp
10000f0a:	45                   	inc    ebp
10000f0b:	44                   	inc    esp
10000f0c:	21 00                	and    DWORD PTR [eax],eax
10000f0e:	00 00                	add    BYTE PTR [eax],al
10000f10:	41                   	inc    ecx
10000f11:	43                   	inc    ebx
10000f12:	39 37                	cmp    DWORD PTR [edi],esi
10000f14:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000f16:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000f19:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000f20:	61                   	popa   
10000f21:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000f24:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
10000f27:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000f28:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000f29:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000f2b:	73 20                	jae    10000f4d <AC97::stopPlayback()+0x325>
10000f2d:	21 3d 20 32 20 4e    	and    DWORD PTR ds:0x4e203220,edi
10000f33:	4f                   	dec    edi
10000f34:	54                   	push   esp
10000f35:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000f38:	50                   	push   eax
10000f39:	50                   	push   eax
10000f3a:	4f                   	dec    edi
10000f3b:	52                   	push   edx
10000f3c:	54                   	push   esp
10000f3d:	45                   	inc    ebp
10000f3e:	44                   	inc    esp
10000f3f:	21 00                	and    DWORD PTR [eax],eax
10000f41:	56                   	push   esi
10000f42:	41                   	inc    ecx
10000f43:	4c                   	dec    esp
10000f44:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10000f4a:	58                   	pop    eax
10000f4b:	0a 00                	or     al,BYTE PTR [eax]
10000f4d:	66 90                	xchg   ax,ax
10000f4f:	90                   	nop

10000f50 <vtable for AC97>:
	...
	10000f58: R_386_32	AC97::~AC97()
	10000f5c: R_386_32	AC97::~AC97()
	10000f60: R_386_32	AC97::open(int, int, void*)
	10000f64: R_386_32	AC97::close(int, int, void*)
	10000f68: R_386_32	Device::hibernate()
	10000f6c: R_386_32	Device::wake()
	10000f70: R_386_32	Device::detect()
	10000f74: R_386_32	Device::disableLegacy()
	10000f78: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000f7c: R_386_32	AC97::beginPlayback()
	10000f80: R_386_32	AC97::stopPlayback()
