
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 55 7b 00 00       	call   c0007b75 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 08 21 02 c0       	mov    eax,0xc0022108
c0000025:	3d 08 21 02 c0       	cmp    eax,0xc0022108
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 08 21 02 c0       	push   0xc0022108
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 08 21 02 c0       	mov    eax,0xc0022108
c0000051:	2d 08 21 02 c0       	sub    eax,0xc0022108
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 08 21 02 c0       	push   0xc0022108
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 6c f0 01 c0       	mov    ebx,0xc001f06c
c0000097:	81 eb 68 f0 01 c0    	sub    ebx,0xc001f068
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 68 f0 01 c0       	mov    esi,0xc001f068
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 08 21 02 c0       	push   0xc0022108
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 08 21 02 c0       	push   0xc0022108
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cb 46 01 00       	call   c0014978 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 17 a5 00 00       	call   c000a7dc <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 a9 46 01 00       	call   c0014978 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 b2 4b 01 00       	call   c0014ea0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 09 52 01 00       	call   c0015500 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 91 04 01 00       	jmp    c0010810 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1e                	je     c00003b0 <memcmp+0x30>
c0000392:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c0000395:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000398:	38 cb                	cmp    bl,cl
c000039a:	75 24                	jne    c00003c0 <memcmp+0x40>
c000039c:	01 c6                	add    esi,eax
c000039e:	eb 0a                	jmp    c00003aa <memcmp+0x2a>
c00003a0:	0f b6 08             	movzx  ecx,BYTE PTR [eax]
c00003a3:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a6:	38 d9                	cmp    cl,bl
c00003a8:	75 16                	jne    c00003c0 <memcmp+0x40>
c00003aa:	40                   	inc    eax
c00003ab:	42                   	inc    edx
c00003ac:	39 f0                	cmp    eax,esi
c00003ae:	75 f0                	jne    c00003a0 <memcmp+0x20>
c00003b0:	5b                   	pop    ebx
c00003b1:	31 c0                	xor    eax,eax
c00003b3:	5e                   	pop    esi
c00003b4:	c3                   	ret    
c00003b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	83 ec 2c             	sub    esp,0x2c
c00003d3:	89 6c 24 28          	mov    DWORD PTR [esp+0x28],ebp
c00003d7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00003db:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00003df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00003e3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00003e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00003eb:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00003ef:	39 cd                	cmp    ebp,ecx
c00003f1:	0f 83 49 01 00 00    	jae    c0000540 <memmove+0x170>
c00003f7:	85 d2                	test   edx,edx
c00003f9:	0f 84 23 01 00 00    	je     c0000522 <memmove+0x152>
c00003ff:	8d 5d 10             	lea    ebx,[ebp+0x10]
c0000402:	39 d9                	cmp    ecx,ebx
c0000404:	0f 93 44 24 0f       	setae  BYTE PTR [esp+0xf]
c0000409:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000040e:	8d 59 10             	lea    ebx,[ecx+0x10]
c0000411:	39 dd                	cmp    ebp,ebx
c0000413:	0f 93 c3             	setae  bl
c0000416:	08 d8                	or     al,bl
c0000418:	0f 84 42 01 00 00    	je     c0000560 <memmove+0x190>
c000041e:	8d 5a ff             	lea    ebx,[edx-0x1]
c0000421:	83 fb 0e             	cmp    ebx,0xe
c0000424:	0f 86 36 01 00 00    	jbe    c0000560 <memmove+0x190>
c000042a:	89 d7                	mov    edi,edx
c000042c:	89 cb                	mov    ebx,ecx
c000042e:	83 e7 f0             	and    edi,0xfffffff0
c0000431:	89 ee                	mov    esi,ebp
c0000433:	01 cf                	add    edi,ecx
c0000435:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000439:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000440:	f3 0f 6f 03          	movdqu xmm0,XMMWORD PTR [ebx]
c0000444:	83 c3 10             	add    ebx,0x10
c0000447:	f3 0f 7f 06          	movdqu XMMWORD PTR [esi],xmm0
c000044b:	83 c6 10             	add    esi,0x10
c000044e:	39 fb                	cmp    ebx,edi
c0000450:	75 ee                	jne    c0000440 <memmove+0x70>
c0000452:	89 d7                	mov    edi,edx
c0000454:	89 d6                	mov    esi,edx
c0000456:	83 e7 f0             	and    edi,0xfffffff0
c0000459:	29 fe                	sub    esi,edi
c000045b:	01 f9                	add    ecx,edi
c000045d:	8d 5c 3d 00          	lea    ebx,[ebp+edi*1+0x0]
c0000461:	39 fa                	cmp    edx,edi
c0000463:	0f 84 b9 00 00 00    	je     c0000522 <memmove+0x152>
c0000469:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c000046c:	83 fe 01             	cmp    esi,0x1
c000046f:	88 03                	mov    BYTE PTR [ebx],al
c0000471:	0f 84 ab 00 00 00    	je     c0000522 <memmove+0x152>
c0000477:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000047b:	83 fe 02             	cmp    esi,0x2
c000047e:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0000481:	0f 84 9b 00 00 00    	je     c0000522 <memmove+0x152>
c0000487:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c000048b:	83 fe 03             	cmp    esi,0x3
c000048e:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0000491:	0f 84 8b 00 00 00    	je     c0000522 <memmove+0x152>
c0000497:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c000049b:	83 fe 04             	cmp    esi,0x4
c000049e:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c00004a1:	74 7f                	je     c0000522 <memmove+0x152>
c00004a3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00004a7:	83 fe 05             	cmp    esi,0x5
c00004aa:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00004ad:	74 73                	je     c0000522 <memmove+0x152>
c00004af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00004b3:	83 fe 06             	cmp    esi,0x6
c00004b6:	88 43 05             	mov    BYTE PTR [ebx+0x5],al
c00004b9:	74 67                	je     c0000522 <memmove+0x152>
c00004bb:	0f b6 41 06          	movzx  eax,BYTE PTR [ecx+0x6]
c00004bf:	83 fe 07             	cmp    esi,0x7
c00004c2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00004c5:	74 5b                	je     c0000522 <memmove+0x152>
c00004c7:	0f b6 41 07          	movzx  eax,BYTE PTR [ecx+0x7]
c00004cb:	83 fe 08             	cmp    esi,0x8
c00004ce:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00004d1:	74 4f                	je     c0000522 <memmove+0x152>
c00004d3:	0f b6 41 08          	movzx  eax,BYTE PTR [ecx+0x8]
c00004d7:	83 fe 09             	cmp    esi,0x9
c00004da:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00004dd:	74 43                	je     c0000522 <memmove+0x152>
c00004df:	0f b6 41 09          	movzx  eax,BYTE PTR [ecx+0x9]
c00004e3:	83 fe 0a             	cmp    esi,0xa
c00004e6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00004e9:	74 37                	je     c0000522 <memmove+0x152>
c00004eb:	0f b6 41 0a          	movzx  eax,BYTE PTR [ecx+0xa]
c00004ef:	83 fe 0b             	cmp    esi,0xb
c00004f2:	88 43 0a             	mov    BYTE PTR [ebx+0xa],al
c00004f5:	74 2b                	je     c0000522 <memmove+0x152>
c00004f7:	0f b6 41 0b          	movzx  eax,BYTE PTR [ecx+0xb]
c00004fb:	83 fe 0c             	cmp    esi,0xc
c00004fe:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0000501:	74 1f                	je     c0000522 <memmove+0x152>
c0000503:	0f b6 41 0c          	movzx  eax,BYTE PTR [ecx+0xc]
c0000507:	83 fe 0d             	cmp    esi,0xd
c000050a:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c000050d:	74 13                	je     c0000522 <memmove+0x152>
c000050f:	0f b6 41 0d          	movzx  eax,BYTE PTR [ecx+0xd]
c0000513:	83 fe 0e             	cmp    esi,0xe
c0000516:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0000519:	74 07                	je     c0000522 <memmove+0x152>
c000051b:	0f b6 41 0e          	movzx  eax,BYTE PTR [ecx+0xe]
c000051f:	88 43 0e             	mov    BYTE PTR [ebx+0xe],al
c0000522:	89 e8                	mov    eax,ebp
c0000524:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0000528:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000052c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0000530:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0000534:	83 c4 2c             	add    esp,0x2c
c0000537:	c3                   	ret    
c0000538:	90                   	nop
c0000539:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000540:	76 e0                	jbe    c0000522 <memmove+0x152>
c0000542:	85 d2                	test   edx,edx
c0000544:	74 dc                	je     c0000522 <memmove+0x152>
c0000546:	8d 59 ff             	lea    ebx,[ecx-0x1]
c0000549:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0000554:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000557:	4a                   	dec    edx
c0000558:	75 f6                	jne    c0000550 <memmove+0x180>
c000055a:	eb c6                	jmp    c0000522 <memmove+0x152>
c000055c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000560:	01 ca                	add    edx,ecx
c0000562:	89 eb                	mov    ebx,ebp
c0000564:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000056a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000570:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000573:	41                   	inc    ecx
c0000574:	43                   	inc    ebx
c0000575:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0000578:	39 d1                	cmp    ecx,edx
c000057a:	75 f4                	jne    c0000570 <memmove+0x1a0>
c000057c:	eb a4                	jmp    c0000522 <memmove+0x152>
c000057e:	66 90                	xchg   ax,ax

c0000580 <memset>:
c0000580:	83 ec 0c             	sub    esp,0xc
c0000583:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0000587:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000058b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000058e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000592:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000596:	85 d2                	test   edx,edx
c0000598:	74 1b                	je     c00005b5 <memset+0x35>
c000059a:	83 fa 08             	cmp    edx,0x8
c000059d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00005a2:	89 f7                	mov    edi,esi
c00005a4:	73 2a                	jae    c00005d0 <memset+0x50>
c00005a6:	83 e2 07             	and    edx,0x7
c00005a9:	74 0a                	je     c00005b5 <memset+0x35>
c00005ab:	31 c0                	xor    eax,eax
c00005ad:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c00005b0:	40                   	inc    eax
c00005b1:	39 d0                	cmp    eax,edx
c00005b3:	72 f8                	jb     c00005ad <memset+0x2d>
c00005b5:	89 f0                	mov    eax,esi
c00005b7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00005ba:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00005be:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00005c2:	83 c4 0c             	add    esp,0xc
c00005c5:	c3                   	ret    
c00005c6:	8d 76 00             	lea    esi,[esi+0x0]
c00005c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00005d0:	0f b6 c3             	movzx  eax,bl
c00005d3:	69 c0 01 01 01 01    	imul   eax,eax,0x1010101
c00005d9:	f7 c6 01 00 00 00    	test   esi,0x1
c00005df:	75 1d                	jne    c00005fe <memset+0x7e>
c00005e1:	f7 c7 02 00 00 00    	test   edi,0x2
c00005e7:	75 1d                	jne    c0000606 <memset+0x86>
c00005e9:	f7 c7 04 00 00 00    	test   edi,0x4
c00005ef:	75 20                	jne    c0000611 <memset+0x91>
c00005f1:	89 d1                	mov    ecx,edx
c00005f3:	c1 e9 02             	shr    ecx,0x2
c00005f6:	fc                   	cld    
c00005f7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00005f9:	83 e2 03             	and    edx,0x3
c00005fc:	eb a8                	jmp    c00005a6 <memset+0x26>
c00005fe:	88 06                	mov    BYTE PTR [esi],al
c0000600:	8d 7e 01             	lea    edi,[esi+0x1]
c0000603:	4a                   	dec    edx
c0000604:	eb db                	jmp    c00005e1 <memset+0x61>
c0000606:	66 89 07             	mov    WORD PTR [edi],ax
c0000609:	83 ea 02             	sub    edx,0x2
c000060c:	83 c7 02             	add    edi,0x2
c000060f:	eb d8                	jmp    c00005e9 <memset+0x69>
c0000611:	89 07                	mov    DWORD PTR [edi],eax
c0000613:	83 ea 04             	sub    edx,0x4
c0000616:	83 c7 04             	add    edi,0x4
c0000619:	eb d6                	jmp    c00005f1 <memset+0x71>
c000061b:	90                   	nop
c000061c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000620 <strlen>:
c0000620:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000624:	31 c0                	xor    eax,eax
c0000626:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000629:	74 15                	je     c0000640 <strlen+0x20>
c000062b:	90                   	nop
c000062c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000630:	40                   	inc    eax
c0000631:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000635:	75 f9                	jne    c0000630 <strlen+0x10>
c0000637:	c3                   	ret    
c0000638:	90                   	nop
c0000639:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000640:	c3                   	ret    
c0000641:	eb 0d                	jmp    c0000650 <strpbrk>
c0000643:	90                   	nop
c0000644:	90                   	nop
c0000645:	90                   	nop
c0000646:	90                   	nop
c0000647:	90                   	nop
c0000648:	90                   	nop
c0000649:	90                   	nop
c000064a:	90                   	nop
c000064b:	90                   	nop
c000064c:	90                   	nop
c000064d:	90                   	nop
c000064e:	90                   	nop
c000064f:	90                   	nop

c0000650 <strpbrk>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000657:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000065b:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c000065e:	84 db                	test   bl,bl
c0000660:	74 32                	je     c0000694 <strpbrk+0x44>
c0000662:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c0000665:	84 c0                	test   al,al
c0000667:	74 23                	je     c000068c <strpbrk+0x3c>
c0000669:	38 d8                	cmp    al,bl
c000066b:	74 29                	je     c0000696 <strpbrk+0x46>
c000066d:	89 fa                	mov    edx,edi
c000066f:	90                   	nop
c0000670:	eb 12                	jmp    c0000684 <strpbrk+0x34>
c0000672:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	38 d9                	cmp    cl,bl
c0000682:	74 12                	je     c0000696 <strpbrk+0x46>
c0000684:	42                   	inc    edx
c0000685:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0000688:	84 c9                	test   cl,cl
c000068a:	75 f4                	jne    c0000680 <strpbrk+0x30>
c000068c:	46                   	inc    esi
c000068d:	0f b6 1e             	movzx  ebx,BYTE PTR [esi]
c0000690:	84 db                	test   bl,bl
c0000692:	75 d1                	jne    c0000665 <strpbrk+0x15>
c0000694:	31 f6                	xor    esi,esi
c0000696:	5b                   	pop    ebx
c0000697:	89 f0                	mov    eax,esi
c0000699:	5e                   	pop    esi
c000069a:	5f                   	pop    edi
c000069b:	c3                   	ret    
c000069c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c00006a0 <strtok>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	83 ec 08             	sub    esp,0x8
c00006a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00006ad:	85 db                	test   ebx,ebx
c00006af:	75 13                	jne    c00006c4 <strtok+0x24>
c00006b1:	eb 4d                	jmp    c0000700 <strtok+0x60>
c00006b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006c0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c3:	43                   	inc    ebx
c00006c4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00006c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00006cb:	e8 80 ff ff ff       	call   c0000650 <strpbrk>
c00006d0:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c00006d5:	39 d8                	cmp    eax,ebx
c00006d7:	74 e7                	je     c00006c0 <strtok+0x20>
c00006d9:	85 c0                	test   eax,eax
c00006db:	74 2d                	je     c000070a <strtok+0x6a>
c00006dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00006e0:	8d 50 01             	lea    edx,[eax+0x1]
c00006e3:	89 d8                	mov    eax,ebx
c00006e5:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c00006eb:	83 c4 08             	add    esp,0x8
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	c3                   	ret    
c00006f1:	eb 0d                	jmp    c0000700 <strtok+0x60>
c00006f3:	90                   	nop
c00006f4:	90                   	nop
c00006f5:	90                   	nop
c00006f6:	90                   	nop
c00006f7:	90                   	nop
c00006f8:	90                   	nop
c00006f9:	90                   	nop
c00006fa:	90                   	nop
c00006fb:	90                   	nop
c00006fc:	90                   	nop
c00006fd:	90                   	nop
c00006fe:	90                   	nop
c00006ff:	90                   	nop
c0000700:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000706:	85 db                	test   ebx,ebx
c0000708:	75 ba                	jne    c00006c4 <strtok+0x24>
c000070a:	83 c4 08             	add    esp,0x8
c000070d:	31 c0                	xor    eax,eax
c000070f:	5b                   	pop    ebx
c0000710:	5e                   	pop    esi
c0000711:	c3                   	ret    
c0000712:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strcpy>:
c0000720:	53                   	push   ebx
c0000721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000725:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000729:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000072c:	89 c3                	mov    ebx,eax
c000072e:	84 d2                	test   dl,dl
c0000730:	74 19                	je     c000074b <strcpy+0x2b>
c0000732:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000739:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000740:	88 13                	mov    BYTE PTR [ebx],dl
c0000742:	41                   	inc    ecx
c0000743:	43                   	inc    ebx
c0000744:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strcpy+0x20>
c000074b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000074e:	5b                   	pop    ebx
c000074f:	c3                   	ret    

c0000750 <strncpy>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000757:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000075b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075f:	85 db                	test   ebx,ebx
c0000761:	74 3f                	je     c00007a2 <strncpy+0x52>
c0000763:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0000766:	8d 43 ff             	lea    eax,[ebx-0x1]
c0000769:	8d 7a 01             	lea    edi,[edx+0x1]
c000076c:	88 0a                	mov    BYTE PTR [edx],cl
c000076e:	84 c9                	test   cl,cl
c0000770:	74 3e                	je     c00007b0 <strncpy+0x60>
c0000772:	85 c0                	test   eax,eax
c0000774:	74 2c                	je     c00007a2 <strncpy+0x52>
c0000776:	0f b6 4e 01          	movzx  ecx,BYTE PTR [esi+0x1]
c000077a:	8d 43 fe             	lea    eax,[ebx-0x2]
c000077d:	8d 7a 02             	lea    edi,[edx+0x2]
c0000780:	8d 5e 02             	lea    ebx,[esi+0x2]
c0000783:	88 4a 01             	mov    BYTE PTR [edx+0x1],cl
c0000786:	84 c9                	test   cl,cl
c0000788:	75 14                	jne    c000079e <strncpy+0x4e>
c000078a:	eb 24                	jmp    c00007b0 <strncpy+0x60>
c000078c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000790:	43                   	inc    ebx
c0000791:	0f b6 4b ff          	movzx  ecx,BYTE PTR [ebx-0x1]
c0000795:	47                   	inc    edi
c0000796:	48                   	dec    eax
c0000797:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c000079a:	84 c9                	test   cl,cl
c000079c:	74 12                	je     c00007b0 <strncpy+0x60>
c000079e:	85 c0                	test   eax,eax
c00007a0:	75 ee                	jne    c0000790 <strncpy+0x40>
c00007a2:	5b                   	pop    ebx
c00007a3:	89 d0                	mov    eax,edx
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	85 c0                	test   eax,eax
c00007b2:	74 ee                	je     c00007a2 <strncpy+0x52>
c00007b4:	83 f8 08             	cmp    eax,0x8
c00007b7:	89 c3                	mov    ebx,eax
c00007b9:	73 35                	jae    c00007f0 <strncpy+0xa0>
c00007bb:	f6 c3 04             	test   bl,0x4
c00007be:	74 09                	je     c00007c9 <strncpy+0x79>
c00007c0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00007c6:	83 c7 04             	add    edi,0x4
c00007c9:	f6 c3 02             	test   bl,0x2
c00007cc:	74 08                	je     c00007d6 <strncpy+0x86>
c00007ce:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00007d3:	83 c7 02             	add    edi,0x2
c00007d6:	f6 c3 01             	test   bl,0x1
c00007d9:	74 c7                	je     c00007a2 <strncpy+0x52>
c00007db:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00007de:	89 d0                	mov    eax,edx
c00007e0:	5b                   	pop    ebx
c00007e1:	5e                   	pop    esi
c00007e2:	5f                   	pop    edi
c00007e3:	c3                   	ret    
c00007e4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007ea:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00007f0:	f7 c7 01 00 00 00    	test   edi,0x1
c00007f6:	75 1f                	jne    c0000817 <strncpy+0xc7>
c00007f8:	f7 c7 02 00 00 00    	test   edi,0x2
c00007fe:	75 2c                	jne    c000082c <strncpy+0xdc>
c0000800:	f7 c7 04 00 00 00    	test   edi,0x4
c0000806:	75 16                	jne    c000081e <strncpy+0xce>
c0000808:	89 d9                	mov    ecx,ebx
c000080a:	c1 e9 02             	shr    ecx,0x2
c000080d:	fc                   	cld    
c000080e:	31 c0                	xor    eax,eax
c0000810:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000812:	83 e3 03             	and    ebx,0x3
c0000815:	eb a4                	jmp    c00007bb <strncpy+0x6b>
c0000817:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000081a:	4b                   	dec    ebx
c000081b:	47                   	inc    edi
c000081c:	eb da                	jmp    c00007f8 <strncpy+0xa8>
c000081e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000824:	83 eb 04             	sub    ebx,0x4
c0000827:	83 c7 04             	add    edi,0x4
c000082a:	eb dc                	jmp    c0000808 <strncpy+0xb8>
c000082c:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000831:	83 eb 02             	sub    ebx,0x2
c0000834:	83 c7 02             	add    edi,0x2
c0000837:	eb c7                	jmp    c0000800 <strncpy+0xb0>
c0000839:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000840 <strcmp>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000846:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000084a:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c000084d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000850:	38 d1                	cmp    cl,dl
c0000852:	75 1d                	jne    c0000871 <strcmp+0x31>
c0000854:	84 c9                	test   cl,cl
c0000856:	74 28                	je     c0000880 <strcmp+0x40>
c0000858:	b8 01 00 00 00       	mov    eax,0x1
c000085d:	eb 06                	jmp    c0000865 <strcmp+0x25>
c000085f:	90                   	nop
c0000860:	40                   	inc    eax
c0000861:	84 d2                	test   dl,dl
c0000863:	74 1b                	je     c0000880 <strcmp+0x40>
c0000865:	0f b6 14 06          	movzx  edx,BYTE PTR [esi+eax*1]
c0000869:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	74 ef                	je     c0000860 <strcmp+0x20>
c0000871:	5b                   	pop    ebx
c0000872:	0f b6 c2             	movzx  eax,dl
c0000875:	29 c8                	sub    eax,ecx
c0000877:	5e                   	pop    esi
c0000878:	c3                   	ret    
c0000879:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000880:	5b                   	pop    ebx
c0000881:	31 c0                	xor    eax,eax
c0000883:	5e                   	pop    esi
c0000884:	c3                   	ret    
c0000885:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000889:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000890 <strchr>:
c0000890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000894:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000897:	84 d2                	test   dl,dl
c0000899:	74 21                	je     c00008bc <strchr+0x2c>
c000089b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00008a0:	38 ca                	cmp    dl,cl
c00008a2:	75 10                	jne    c00008b4 <strchr+0x24>
c00008a4:	eb 19                	jmp    c00008bf <strchr+0x2f>
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008b0:	38 ca                	cmp    dl,cl
c00008b2:	74 0a                	je     c00008be <strchr+0x2e>
c00008b4:	40                   	inc    eax
c00008b5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00008b8:	84 d2                	test   dl,dl
c00008ba:	75 f4                	jne    c00008b0 <strchr+0x20>
c00008bc:	31 c0                	xor    eax,eax
c00008be:	c3                   	ret    
c00008bf:	90                   	nop
c00008c0:	c3                   	ret    
c00008c1:	eb 0d                	jmp    c00008d0 <strncmp>
c00008c3:	90                   	nop
c00008c4:	90                   	nop
c00008c5:	90                   	nop
c00008c6:	90                   	nop
c00008c7:	90                   	nop
c00008c8:	90                   	nop
c00008c9:	90                   	nop
c00008ca:	90                   	nop
c00008cb:	90                   	nop
c00008cc:	90                   	nop
c00008cd:	90                   	nop
c00008ce:	90                   	nop
c00008cf:	90                   	nop

c00008d0 <strncmp>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00008d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00008db:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00008df:	85 ff                	test   edi,edi
c00008e1:	74 31                	je     c0000914 <strncmp+0x44>
c00008e3:	0f b6 16             	movzx  edx,BYTE PTR [esi]
c00008e6:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008e9:	38 d1                	cmp    cl,dl
c00008eb:	75 33                	jne    c0000920 <strncmp+0x50>
c00008ed:	8d 46 01             	lea    eax,[esi+0x1]
c00008f0:	84 c9                	test   cl,cl
c00008f2:	74 20                	je     c0000914 <strncmp+0x44>
c00008f4:	01 fe                	add    esi,edi
c00008f6:	eb 17                	jmp    c000090f <strncmp+0x3f>
c00008f8:	90                   	nop
c00008f9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000900:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0000903:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000906:	38 ca                	cmp    dl,cl
c0000908:	75 16                	jne    c0000920 <strncmp+0x50>
c000090a:	40                   	inc    eax
c000090b:	84 d2                	test   dl,dl
c000090d:	74 05                	je     c0000914 <strncmp+0x44>
c000090f:	43                   	inc    ebx
c0000910:	39 c6                	cmp    esi,eax
c0000912:	75 ec                	jne    c0000900 <strncmp+0x30>
c0000914:	5b                   	pop    ebx
c0000915:	31 c0                	xor    eax,eax
c0000917:	5e                   	pop    esi
c0000918:	5f                   	pop    edi
c0000919:	c3                   	ret    
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	5b                   	pop    ebx
c0000921:	0f b6 c2             	movzx  eax,dl
c0000924:	29 c8                	sub    eax,ecx
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000930 <strcat>:
c0000930:	56                   	push   esi
c0000931:	53                   	push   ebx
c0000932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000936:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000093a:	89 c3                	mov    ebx,eax
c000093c:	eb 04                	jmp    c0000942 <strcat+0x12>
c000093e:	66 90                	xchg   ax,ax
c0000940:	89 d3                	mov    ebx,edx
c0000942:	8d 53 01             	lea    edx,[ebx+0x1]
c0000945:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000949:	75 f5                	jne    c0000940 <strcat+0x10>
c000094b:	31 d2                	xor    edx,edx
c000094d:	8d 76 00             	lea    esi,[esi+0x0]
c0000950:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
c0000954:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000957:	42                   	inc    edx
c0000958:	84 c9                	test   cl,cl
c000095a:	75 f4                	jne    c0000950 <strcat+0x20>
c000095c:	5b                   	pop    ebx
c000095d:	5e                   	pop    esi
c000095e:	c3                   	ret    
c000095f:	90                   	nop

c0000960 <strncat>:
c0000960:	56                   	push   esi
c0000961:	53                   	push   ebx
c0000962:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000096e:	85 f6                	test   esi,esi
c0000970:	74 2f                	je     c00009a1 <strncat+0x41>
c0000972:	89 c2                	mov    edx,eax
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000980:	42                   	inc    edx
c0000981:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000985:	75 f9                	jne    c0000980 <strncat+0x20>
c0000987:	01 ce                	add    esi,ecx
c0000989:	eb 0a                	jmp    c0000995 <strncat+0x35>
c000098b:	90                   	nop
c000098c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000990:	39 f1                	cmp    ecx,esi
c0000992:	74 1c                	je     c00009b0 <strncat+0x50>
c0000994:	42                   	inc    edx
c0000995:	41                   	inc    ecx
c0000996:	0f b6 59 ff          	movzx  ebx,BYTE PTR [ecx-0x1]
c000099a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000099d:	84 db                	test   bl,bl
c000099f:	75 ef                	jne    c0000990 <strncat+0x30>
c00009a1:	5b                   	pop    ebx
c00009a2:	5e                   	pop    esi
c00009a3:	c3                   	ret    
c00009a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	8d 76 00             	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00009c0 <strstr>:
c00009c0:	57                   	push   edi
c00009c1:	56                   	push   esi
c00009c2:	53                   	push   ebx
c00009c3:	83 ec 0c             	sub    esp,0xc
c00009c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00009ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00009d1:	e8 4a fc ff ff       	call   c0000620 <strlen>
c00009d6:	85 c0                	test   eax,eax
c00009d8:	89 c6                	mov    esi,eax
c00009da:	75 19                	jne    c00009f5 <strstr+0x35>
c00009dc:	eb 32                	jmp    c0000a10 <strstr+0x50>
c00009de:	66 90                	xchg   ax,ax
c00009e0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00009e4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00009e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00009eb:	e8 90 f9 ff ff       	call   c0000380 <memcmp>
c00009f0:	85 c0                	test   eax,eax
c00009f2:	74 1c                	je     c0000a10 <strstr+0x50>
c00009f4:	43                   	inc    ebx
c00009f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00009f8:	e8 23 fc ff ff       	call   c0000620 <strlen>
c00009fd:	39 f0                	cmp    eax,esi
c00009ff:	73 df                	jae    c00009e0 <strstr+0x20>
c0000a01:	83 c4 0c             	add    esp,0xc
c0000a04:	31 c0                	xor    eax,eax
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	c3                   	ret    
c0000a0a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a10:	83 c4 0c             	add    esp,0xc
c0000a13:	89 d8                	mov    eax,ebx
c0000a15:	5b                   	pop    ebx
c0000a16:	5e                   	pop    esi
c0000a17:	5f                   	pop    edi
c0000a18:	c3                   	ret    
c0000a19:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c0000a20 <toupper>:
c0000a20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a24:	0f b6 d0             	movzx  edx,al
c0000a27:	f6 82 80 f0 01 c0 02 	test   BYTE PTR [edx-0x3ffe0f80],0x2
c0000a2e:	74 03                	je     c0000a33 <toupper+0x13>
c0000a30:	83 e8 20             	sub    eax,0x20
c0000a33:	c3                   	ret    
c0000a34:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a3a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000a40 <tolower>:
c0000a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a44:	0f b6 d0             	movzx  edx,al
c0000a47:	f6 82 80 f0 01 c0 01 	test   BYTE PTR [edx-0x3ffe0f80],0x1
c0000a4e:	74 03                	je     c0000a53 <tolower+0x13>
c0000a50:	83 c0 20             	add    eax,0x20
c0000a53:	c3                   	ret    
c0000a54:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000a5a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000a60 <simple_strtoul>:
c0000a60:	55                   	push   ebp
c0000a61:	57                   	push   edi
c0000a62:	56                   	push   esi
c0000a63:	53                   	push   ebx
c0000a64:	83 ec 0c             	sub    esp,0xc
c0000a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a6b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0000a6f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0000a73:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0000a76:	89 c2                	mov    edx,eax
c0000a78:	0f b6 80 80 f0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0f80]
c0000a7f:	c0 e8 03             	shr    al,0x3
c0000a82:	24 01                	and    al,0x1
c0000a84:	74 1e                	je     c0000aa4 <simple_strtoul+0x44>
c0000a86:	8d 76 00             	lea    esi,[esi+0x0]
c0000a89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	0f b6 01             	movzx  eax,BYTE PTR [ecx]
c0000a94:	89 c2                	mov    edx,eax
c0000a96:	0f b6 80 80 f0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0f80]
c0000a9d:	c0 e8 03             	shr    al,0x3
c0000aa0:	24 01                	and    al,0x1
c0000aa2:	75 ec                	jne    c0000a90 <simple_strtoul+0x30>
c0000aa4:	80 fa 09             	cmp    dl,0x9
c0000aa7:	74 e7                	je     c0000a90 <simple_strtoul+0x30>
c0000aa9:	80 fa 2d             	cmp    dl,0x2d
c0000aac:	0f 84 3e 01 00 00    	je     c0000bf0 <simple_strtoul+0x190>
c0000ab2:	31 c0                	xor    eax,eax
c0000ab4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ab8:	31 c0                	xor    eax,eax
c0000aba:	80 fa 2b             	cmp    dl,0x2b
c0000abd:	0f 94 c0             	sete   al
c0000ac0:	01 c1                	add    ecx,eax
c0000ac2:	85 ff                	test   edi,edi
c0000ac4:	0f 85 c6 00 00 00    	jne    c0000b90 <simple_strtoul+0x130>
c0000aca:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000acd:	bf 0a 00 00 00       	mov    edi,0xa
c0000ad2:	80 fb 30             	cmp    bl,0x30
c0000ad5:	0f 84 70 01 00 00    	je     c0000c4b <simple_strtoul+0x1eb>
c0000adb:	84 db                	test   bl,bl
c0000add:	0f 84 3d 01 00 00    	je     c0000c20 <simple_strtoul+0x1c0>
c0000ae3:	31 c0                	xor    eax,eax
c0000ae5:	31 ed                	xor    ebp,ebp
c0000ae7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000aeb:	31 f6                	xor    esi,esi
c0000aed:	eb 2e                	jmp    c0000b1d <simple_strtoul+0xbd>
c0000aef:	90                   	nop
c0000af0:	8d 58 d0             	lea    ebx,[eax-0x30]
c0000af3:	39 fb                	cmp    ebx,edi
c0000af5:	73 59                	jae    c0000b50 <simple_strtoul+0xf0>
c0000af7:	89 d8                	mov    eax,ebx
c0000af9:	31 d2                	xor    edx,edx
c0000afb:	f7 d0                	not    eax
c0000afd:	f7 f7                	div    edi
c0000aff:	39 f0                	cmp    eax,esi
c0000b01:	0f 82 d9 00 00 00    	jb     c0000be0 <simple_strtoul+0x180>
c0000b07:	0f af f7             	imul   esi,edi
c0000b0a:	01 de                	add    esi,ebx
c0000b0c:	bb 01 00 00 00       	mov    ebx,0x1
c0000b11:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0000b15:	41                   	inc    ecx
c0000b16:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000b19:	84 db                	test   bl,bl
c0000b1b:	74 33                	je     c0000b50 <simple_strtoul+0xf0>
c0000b1d:	0f b6 c3             	movzx  eax,bl
c0000b20:	f6 80 80 f0 01 c0 04 	test   BYTE PTR [eax-0x3ffe0f80],0x4
c0000b27:	75 c7                	jne    c0000af0 <simple_strtoul+0x90>
c0000b29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b2c:	e8 ef fe ff ff       	call   c0000a20 <toupper>
c0000b31:	0f b6 d0             	movzx  edx,al
c0000b34:	f6 82 80 f0 01 c0 01 	test   BYTE PTR [edx-0x3ffe0f80],0x1
c0000b3b:	74 13                	je     c0000b50 <simple_strtoul+0xf0>
c0000b3d:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b40:	39 fb                	cmp    ebx,edi
c0000b42:	72 b3                	jb     c0000af7 <simple_strtoul+0x97>
c0000b44:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000b4a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000b50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0000b54:	85 d2                	test   edx,edx
c0000b56:	74 12                	je     c0000b6a <simple_strtoul+0x10a>
c0000b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000b5c:	09 f0                	or     eax,esi
c0000b5e:	0f 84 9c 00 00 00    	je     c0000c00 <simple_strtoul+0x1a0>
c0000b64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000b68:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6a:	4d                   	dec    ebp
c0000b6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000b70:	0f 44 f0             	cmove  esi,eax
c0000b73:	83 7c 24 08 01       	cmp    DWORD PTR [esp+0x8],0x1
c0000b78:	75 02                	jne    c0000b7c <simple_strtoul+0x11c>
c0000b7a:	f7 de                	neg    esi
c0000b7c:	83 c4 0c             	add    esp,0xc
c0000b7f:	89 f0                	mov    eax,esi
c0000b81:	5b                   	pop    ebx
c0000b82:	5e                   	pop    esi
c0000b83:	5f                   	pop    edi
c0000b84:	5d                   	pop    ebp
c0000b85:	c3                   	ret    
c0000b86:	8d 76 00             	lea    esi,[esi+0x0]
c0000b89:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b90:	8d 47 fe             	lea    eax,[edi-0x2]
c0000b93:	83 f8 22             	cmp    eax,0x22
c0000b96:	0f 87 84 00 00 00    	ja     c0000c20 <simple_strtoul+0x1c0>
c0000b9c:	83 ff 08             	cmp    edi,0x8
c0000b9f:	0f be 19             	movsx  ebx,BYTE PTR [ecx]
c0000ba2:	0f 84 c6 00 00 00    	je     c0000c6e <simple_strtoul+0x20e>
c0000ba8:	83 ff 10             	cmp    edi,0x10
c0000bab:	0f 85 2a ff ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000bb1:	80 fb 30             	cmp    bl,0x30
c0000bb4:	bf 10 00 00 00       	mov    edi,0x10
c0000bb9:	0f 85 1c ff ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000bbf:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0000bc6:	89 c3                	mov    ebx,eax
c0000bc8:	e8 73 fe ff ff       	call   c0000a40 <tolower>
c0000bcd:	83 f8 78             	cmp    eax,0x78
c0000bd0:	0f 84 c1 00 00 00    	je     c0000c97 <simple_strtoul+0x237>
c0000bd6:	41                   	inc    ecx
c0000bd7:	e9 ff fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>
c0000bdc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000be0:	bd 01 00 00 00       	mov    ebp,0x1
c0000be5:	31 f6                	xor    esi,esi
c0000be7:	e9 29 ff ff ff       	jmp    c0000b15 <simple_strtoul+0xb5>
c0000bec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000bf0:	b8 01 00 00 00       	mov    eax,0x1
c0000bf5:	41                   	inc    ecx
c0000bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000bfa:	e9 c3 fe ff ff       	jmp    c0000ac2 <simple_strtoul+0x62>
c0000bff:	90                   	nop
c0000c00:	85 c9                	test   ecx,ecx
c0000c02:	74 39                	je     c0000c3d <simple_strtoul+0x1dd>
c0000c04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c08:	31 f6                	xor    esi,esi
c0000c0a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000c0e:	89 38                	mov    DWORD PTR [eax],edi
c0000c10:	e9 55 ff ff ff       	jmp    c0000b6a <simple_strtoul+0x10a>
c0000c15:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000c19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000c20:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c24:	85 c0                	test   eax,eax
c0000c26:	74 1c                	je     c0000c44 <simple_strtoul+0x1e4>
c0000c28:	85 c9                	test   ecx,ecx
c0000c2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c2e:	74 5a                	je     c0000c8a <simple_strtoul+0x22a>
c0000c30:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000c34:	31 f6                	xor    esi,esi
c0000c36:	89 38                	mov    DWORD PTR [eax],edi
c0000c38:	e9 36 ff ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c3d:	31 f6                	xor    esi,esi
c0000c3f:	e9 20 ff ff ff       	jmp    c0000b64 <simple_strtoul+0x104>
c0000c44:	31 f6                	xor    esi,esi
c0000c46:	e9 28 ff ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c4b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000c4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0000c52:	89 c3                	mov    ebx,eax
c0000c54:	e8 e7 fd ff ff       	call   c0000a40 <tolower>
c0000c59:	83 f8 78             	cmp    eax,0x78
c0000c5c:	74 20                	je     c0000c7e <simple_strtoul+0x21e>
c0000c5e:	41                   	inc    ecx
c0000c5f:	80 fb 30             	cmp    bl,0x30
c0000c62:	74 13                	je     c0000c77 <simple_strtoul+0x217>
c0000c64:	bf 08 00 00 00       	mov    edi,0x8
c0000c69:	e9 6d fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>
c0000c6e:	80 fb 30             	cmp    bl,0x30
c0000c71:	0f 85 64 fe ff ff    	jne    c0000adb <simple_strtoul+0x7b>
c0000c77:	0f be 59 01          	movsx  ebx,BYTE PTR [ecx+0x1]
c0000c7b:	41                   	inc    ecx
c0000c7c:	eb e6                	jmp    c0000c64 <simple_strtoul+0x204>
c0000c7e:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c82:	83 c1 02             	add    ecx,0x2
c0000c85:	e9 27 ff ff ff       	jmp    c0000bb1 <simple_strtoul+0x151>
c0000c8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c90:	31 f6                	xor    esi,esi
c0000c92:	e9 dc fe ff ff       	jmp    c0000b73 <simple_strtoul+0x113>
c0000c97:	0f be 59 02          	movsx  ebx,BYTE PTR [ecx+0x2]
c0000c9b:	83 c1 02             	add    ecx,0x2
c0000c9e:	e9 38 fe ff ff       	jmp    c0000adb <simple_strtoul+0x7b>

c0000ca3 <largebin_index>:
c0000ca3:	89 c2                	mov    edx,eax
c0000ca5:	c1 ea 08             	shr    edx,0x8
c0000ca8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000cae:	77 10                	ja     c0000cc0 <largebin_index+0x1d>
c0000cb0:	0f bd d2             	bsr    edx,edx
c0000cb3:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cb6:	d3 e8                	shr    eax,cl
c0000cb8:	83 e0 03             	and    eax,0x3
c0000cbb:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cbf:	c3                   	ret    
c0000cc0:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cc5:	c3                   	ret    

c0000cc6 <malloc_init_state>:
c0000cc6:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc9:	53                   	push   ebx
c0000cca:	89 d1                	mov    ecx,edx
c0000ccc:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cd2:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000cd5:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd8:	83 c2 08             	add    edx,0x8
c0000cdb:	39 da                	cmp    edx,ebx
c0000cdd:	75 f3                	jne    c0000cd2 <malloc_init_state+0xc>
c0000cdf:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ceb:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cff:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d09:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d10:	83 e2 03             	and    edx,0x3
c0000d13:	5b                   	pop    ebx
c0000d14:	83 ca 48             	or     edx,0x48
c0000d17:	89 10                	mov    DWORD PTR [eax],edx
c0000d19:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d1c:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d26:	c3                   	ret    

c0000d27 <malloc_consolidate>:
c0000d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d29:	85 d2                	test   edx,edx
c0000d2b:	0f 84 d8 00 00 00    	je     c0000e09 <malloc_consolidate+0xe2>
c0000d31:	55                   	push   ebp
c0000d32:	83 e2 fd             	and    edx,0xfffffffd
c0000d35:	57                   	push   edi
c0000d36:	89 c5                	mov    ebp,eax
c0000d38:	56                   	push   esi
c0000d39:	53                   	push   ebx
c0000d3a:	8d 78 34             	lea    edi,[eax+0x34]
c0000d3d:	83 ec 10             	sub    esp,0x10
c0000d40:	89 10                	mov    DWORD PTR [eax],edx
c0000d42:	c1 ea 03             	shr    edx,0x3
c0000d45:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d49:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d4d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d51:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d54:	85 d2                	test   edx,edx
c0000d56:	0f 84 98 00 00 00    	je     c0000df4 <malloc_consolidate+0xcd>
c0000d5c:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d63:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d66:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d6d:	89 f9                	mov    ecx,edi
c0000d6f:	83 e1 fe             	and    ecx,0xfffffffe
c0000d72:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d75:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d78:	83 e3 fc             	and    ebx,0xfffffffc
c0000d7b:	83 e7 01             	and    edi,0x1
c0000d7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d81:	75 14                	jne    c0000d97 <malloc_consolidate+0x70>
c0000d83:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d85:	29 fa                	sub    edx,edi
c0000d87:	01 f9                	add    ecx,edi
c0000d89:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d8c:	89 fb                	mov    ebx,edi
c0000d8e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d91:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d94:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d97:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d9a:	74 40                	je     c0000ddc <malloc_consolidate+0xb5>
c0000d9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d9f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000da2:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000da6:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da9:	83 e7 01             	and    edi,0x1
c0000dac:	75 0e                	jne    c0000dbc <malloc_consolidate+0x95>
c0000dae:	01 d9                	add    ecx,ebx
c0000db0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000db3:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000db6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db9:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000dbc:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000dbf:	89 ce                	mov    esi,ecx
c0000dc1:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dc4:	83 ce 01             	or     esi,0x1
c0000dc7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dca:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dcd:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dd1:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dd4:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dd7:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dda:	eb 0c                	jmp    c0000de8 <malloc_consolidate+0xc1>
c0000ddc:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ddf:	83 c9 01             	or     ecx,0x1
c0000de2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000de5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000dec:	85 d2                	test   edx,edx
c0000dee:	0f 85 6f ff ff ff    	jne    c0000d63 <malloc_consolidate+0x3c>
c0000df4:	83 c5 04             	add    ebp,0x4
c0000df7:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000dfb:	0f 85 50 ff ff ff    	jne    c0000d51 <malloc_consolidate+0x2a>
c0000e01:	83 c4 10             	add    esp,0x10
c0000e04:	5b                   	pop    ebx
c0000e05:	5e                   	pop    esi
c0000e06:	5f                   	pop    edi
c0000e07:	5d                   	pop    ebp
c0000e08:	c3                   	ret    
c0000e09:	e9 b8 fe ff ff       	jmp    c0000cc6 <malloc_init_state>

c0000e0e <dlfree>:
c0000e0e:	57                   	push   edi
c0000e0f:	56                   	push   esi
c0000e10:	53                   	push   ebx
c0000e11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e15:	85 db                	test   ebx,ebx
c0000e17:	0f 84 e2 00 00 00    	je     c0000eff <dlfree+0xf1>
c0000e1d:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000e29:	89 f0                	mov    eax,esi
c0000e2b:	83 e0 fc             	and    eax,0xfffffffc
c0000e2e:	39 c1                	cmp    ecx,eax
c0000e30:	72 24                	jb     c0000e56 <dlfree+0x48>
c0000e32:	c1 e8 03             	shr    eax,0x3
c0000e35:	83 c9 03             	or     ecx,0x3
c0000e38:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000e3e:	83 e8 02             	sub    eax,0x2
c0000e41:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000e48:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e4a:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000e51:	e9 a9 00 00 00       	jmp    c0000eff <dlfree+0xf1>
c0000e56:	83 e6 02             	and    esi,0x2
c0000e59:	0f 85 a0 00 00 00    	jne    c0000eff <dlfree+0xf1>
c0000e5f:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e62:	83 c9 01             	or     ecx,0x1
c0000e65:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000e6b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e6e:	83 e1 fc             	and    ecx,0xfffffffc
c0000e71:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e75:	75 13                	jne    c0000e8a <dlfree+0x7c>
c0000e77:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e7a:	29 da                	sub    edx,ebx
c0000e7c:	01 d8                	add    eax,ebx
c0000e7e:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e81:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e84:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e87:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e8a:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000e90:	74 40                	je     c0000ed2 <dlfree+0xc4>
c0000e92:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e96:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e99:	f6 c3 01             	test   bl,0x1
c0000e9c:	75 0e                	jne    c0000eac <dlfree+0x9e>
c0000e9e:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000ea1:	01 c8                	add    eax,ecx
c0000ea3:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000ea6:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea9:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000eac:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000eb2:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000eb9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000ebc:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000ec2:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ec5:	89 c1                	mov    ecx,eax
c0000ec7:	83 c9 01             	or     ecx,0x1
c0000eca:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ecd:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ed0:	eb 10                	jmp    c0000ee2 <dlfree+0xd4>
c0000ed2:	01 c8                	add    eax,ecx
c0000ed4:	89 c1                	mov    ecx,eax
c0000ed6:	83 c9 01             	or     ecx,0x1
c0000ed9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edc:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000ee2:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000ee7:	76 16                	jbe    c0000eff <dlfree+0xf1>
c0000ee9:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000ef0:	74 0d                	je     c0000eff <dlfree+0xf1>
c0000ef2:	5b                   	pop    ebx
c0000ef3:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	e9 28 fe ff ff       	jmp    c0000d27 <malloc_consolidate>
c0000eff:	5b                   	pop    ebx
c0000f00:	5e                   	pop    esi
c0000f01:	5f                   	pop    edi
c0000f02:	c3                   	ret    

c0000f03 <sYSMALLOc>:
c0000f03:	55                   	push   ebp
c0000f04:	57                   	push   edi
c0000f05:	56                   	push   esi
c0000f06:	53                   	push   ebx
c0000f07:	89 d3                	mov    ebx,edx
c0000f09:	83 ec 2c             	sub    esp,0x2c
c0000f0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f10:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000f16:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000f19:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f20:	74 1f                	je     c0000f41 <sYSMALLOc+0x3e>
c0000f22:	89 d0                	mov    eax,edx
c0000f24:	e8 fe fd ff ff       	call   c0000d27 <malloc_consolidate>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000f30:	83 e8 07             	sub    eax,0x7
c0000f33:	50                   	push   eax
c0000f34:	e8 33 02 00 00       	call   c000116c <dlmalloc>
c0000f39:	83 c4 10             	add    esp,0x10
c0000f3c:	e9 23 02 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c0000f41:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f48:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000f4e:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000f51:	83 c0 10             	add    eax,0x10
c0000f54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f58:	01 c2                	add    edx,eax
c0000f5a:	83 e5 fc             	and    ebp,0xfffffffc
c0000f5d:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f64:	74 02                	je     c0000f68 <sYSMALLOc+0x65>
c0000f66:	29 ea                	sub    edx,ebp
c0000f68:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000f6c:	f7 d9                	neg    ecx
c0000f6e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000f72:	21 ca                	and    edx,ecx
c0000f74:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000f78:	7f 07                	jg     c0000f81 <sYSMALLOc+0x7e>
c0000f7a:	31 c0                	xor    eax,eax
c0000f7c:	e9 e3 01 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c0000f81:	83 ec 0c             	sub    esp,0xc
c0000f84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f88:	e8 25 6a 00 00       	call   c00079b2 <sbrk>
c0000f8d:	83 c4 10             	add    esp,0x10
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	89 c6                	mov    esi,eax
c0000f95:	74 e3                	je     c0000f7a <sYSMALLOc+0x77>
c0000f97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f9b:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f9e:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000fa4:	39 c2                	cmp    edx,eax
c0000fa6:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000fac:	75 11                	jne    c0000fbf <sYSMALLOc+0xbc>
c0000fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb2:	01 e8                	add    eax,ebp
c0000fb4:	83 c8 01             	or     eax,0x1
c0000fb7:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fba:	e9 93 00 00 00       	jmp    c0001052 <sYSMALLOc+0x14f>
c0000fbf:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000fc5:	a8 01                	test   al,0x1
c0000fc7:	0f 84 73 01 00 00    	je     c0001140 <sYSMALLOc+0x23d>
c0000fcd:	85 ed                	test   ebp,ebp
c0000fcf:	74 12                	je     c0000fe3 <sYSMALLOc+0xe0>
c0000fd1:	39 f2                	cmp    edx,esi
c0000fd3:	76 0e                	jbe    c0000fe3 <sYSMALLOc+0xe0>
c0000fd5:	83 e0 fe             	and    eax,0xfffffffe
c0000fd8:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000fde:	e9 5d 01 00 00       	jmp    c0001140 <sYSMALLOc+0x23d>
c0000fe3:	85 ed                	test   ebp,ebp
c0000fe5:	74 0c                	je     c0000ff3 <sYSMALLOc+0xf0>
c0000fe7:	89 f0                	mov    eax,esi
c0000fe9:	29 d0                	sub    eax,edx
c0000feb:	01 c1                	add    ecx,eax
c0000fed:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000ff3:	89 f2                	mov    edx,esi
c0000ff5:	83 e2 07             	and    edx,0x7
c0000ff8:	0f 84 b1 00 00 00    	je     c00010af <sYSMALLOc+0x1ac>
c0000ffe:	b8 08 00 00 00       	mov    eax,0x8
c0001003:	29 d0                	sub    eax,edx
c0001005:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001008:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000100c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001010:	01 e8                	add    eax,ebp
c0001012:	83 ec 0c             	sub    esp,0xc
c0001015:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001018:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000101c:	01 f2                	add    edx,esi
c000101e:	29 d0                	sub    eax,edx
c0001020:	01 d1                	add    ecx,edx
c0001022:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0001026:	01 c1                	add    ecx,eax
c0001028:	51                   	push   ecx
c0001029:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000102d:	e8 80 69 00 00       	call   c00079b2 <sbrk>
c0001032:	83 c4 10             	add    esp,0x10
c0001035:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0001039:	83 f8 ff             	cmp    eax,0xffffffff
c000103c:	75 7c                	jne    c00010ba <sYSMALLOc+0x1b7>
c000103e:	83 ec 0c             	sub    esp,0xc
c0001041:	6a 00                	push   0x0
c0001043:	e8 6a 69 00 00       	call   c00079b2 <sbrk>
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	31 c9                	xor    ecx,ecx
c000104d:	83 f8 ff             	cmp    eax,0xffffffff
c0001050:	75 7e                	jne    c00010d0 <sYSMALLOc+0x1cd>
c0001052:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001058:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000105e:	73 06                	jae    c0001066 <sYSMALLOc+0x163>
c0001060:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001066:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106c:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001072:	73 06                	jae    c000107a <sYSMALLOc+0x177>
c0001074:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000107d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001080:	83 e2 fc             	and    edx,0xfffffffc
c0001083:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0001087:	0f 87 ed fe ff ff    	ja     c0000f7a <sYSMALLOc+0x77>
c000108d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001091:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001094:	29 fa                	sub    edx,edi
c0001096:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001099:	89 fb                	mov    ebx,edi
c000109b:	83 ca 01             	or     edx,0x1
c000109e:	83 cb 01             	or     ebx,0x1
c00010a1:	83 c0 08             	add    eax,0x8
c00010a4:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010aa:	e9 b5 00 00 00       	jmp    c0001164 <sYSMALLOc+0x261>
c00010af:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010b3:	31 c0                	xor    eax,eax
c00010b5:	e9 52 ff ff ff       	jmp    c000100c <sYSMALLOc+0x109>
c00010ba:	39 c6                	cmp    esi,eax
c00010bc:	76 12                	jbe    c00010d0 <sYSMALLOc+0x1cd>
c00010be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010c2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00010c9:	01 f0                	add    eax,esi
c00010cb:	e9 7b ff ff ff       	jmp    c000104b <sYSMALLOc+0x148>
c00010d0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00010d4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00010d7:	29 f0                	sub    eax,esi
c00010d9:	01 c8                	add    eax,ecx
c00010db:	83 c8 01             	or     eax,0x1
c00010de:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c00010e1:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c00010e7:	85 ed                	test   ebp,ebp
c00010e9:	0f 84 63 ff ff ff    	je     c0001052 <sYSMALLOc+0x14f>
c00010ef:	8d 45 f4             	lea    eax,[ebp-0xc]
c00010f2:	83 e0 f8             	and    eax,0xfffffff8
c00010f5:	89 c2                	mov    edx,eax
c00010f7:	83 ca 01             	or     edx,0x1
c00010fa:	83 f8 0f             	cmp    eax,0xf
c00010fd:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001100:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001108:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001110:	0f 86 3c ff ff ff    	jbe    c0001052 <sYSMALLOc+0x14f>
c0001116:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000111c:	83 ec 0c             	sub    esp,0xc
c000111f:	83 c7 08             	add    edi,0x8
c0001122:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000112c:	57                   	push   edi
c000112d:	e8 dc fc ff ff       	call   c0000e0e <dlfree>
c0001132:	83 c4 10             	add    esp,0x10
c0001135:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000113b:	e9 12 ff ff ff       	jmp    c0001052 <sYSMALLOc+0x14f>
c0001140:	83 ec 0c             	sub    esp,0xc
c0001143:	6a 00                	push   0x0
c0001145:	e8 68 68 00 00       	call   c00079b2 <sbrk>
c000114a:	89 c2                	mov    edx,eax
c000114c:	29 f2                	sub    edx,esi
c000114e:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001152:	83 c4 10             	add    esp,0x10
c0001155:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000115b:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000115f:	e9 e7 fe ff ff       	jmp    c000104b <sYSMALLOc+0x148>
c0001164:	83 c4 2c             	add    esp,0x2c
c0001167:	5b                   	pop    ebx
c0001168:	5e                   	pop    esi
c0001169:	5f                   	pop    edi
c000116a:	5d                   	pop    ebp
c000116b:	c3                   	ret    

c000116c <dlmalloc>:
c000116c:	55                   	push   ebp
c000116d:	57                   	push   edi
c000116e:	56                   	push   esi
c000116f:	53                   	push   ebx
c0001170:	83 ec 1c             	sub    esp,0x1c
c0001173:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001177:	83 f8 df             	cmp    eax,0xffffffdf
c000117a:	0f 87 70 03 00 00    	ja     c00014f0 <dlmalloc+0x384>
c0001180:	83 c0 0b             	add    eax,0xb
c0001183:	be 10 00 00 00       	mov    esi,0x10
c0001188:	83 f8 0f             	cmp    eax,0xf
c000118b:	76 05                	jbe    c0001192 <dlmalloc+0x26>
c000118d:	83 e0 f8             	and    eax,0xfffffff8
c0001190:	89 c6                	mov    esi,eax
c0001192:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c0001198:	f7 c7 01 00 00 00    	test   edi,0x1
c000119e:	75 17                	jne    c00011b7 <dlmalloc+0x4b>
c00011a0:	85 ff                	test   edi,edi
c00011a2:	0f 85 05 03 00 00    	jne    c00014ad <dlmalloc+0x341>
c00011a8:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00011ad:	e8 75 fb ff ff       	call   c0000d27 <malloc_consolidate>
c00011b2:	e9 f6 02 00 00       	jmp    c00014ad <dlmalloc+0x341>
c00011b7:	39 f7                	cmp    edi,esi
c00011b9:	72 1f                	jb     c00011da <dlmalloc+0x6e>
c00011bb:	89 f2                	mov    edx,esi
c00011bd:	c1 ea 03             	shr    edx,0x3
c00011c0:	83 ea 02             	sub    edx,0x2
c00011c3:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c00011ca:	85 c0                	test   eax,eax
c00011cc:	74 0c                	je     c00011da <dlmalloc+0x6e>
c00011ce:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011d1:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c00011d8:	eb 30                	jmp    c000120a <dlmalloc+0x9e>
c00011da:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e0:	89 f0                	mov    eax,esi
c00011e2:	77 2e                	ja     c0001212 <dlmalloc+0xa6>
c00011e4:	c1 e8 03             	shr    eax,0x3
c00011e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011eb:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c00011f2:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011f5:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011f8:	39 c3                	cmp    ebx,eax
c00011fa:	74 2e                	je     c000122a <dlmalloc+0xbe>
c00011fc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011ff:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001204:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001207:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000120a:	83 c0 08             	add    eax,0x8
c000120d:	e9 e0 02 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c0001212:	e8 8c fa ff ff       	call   c0000ca3 <largebin_index>
c0001217:	83 e7 02             	and    edi,0x2
c000121a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000121e:	74 0a                	je     c000122a <dlmalloc+0xbe>
c0001220:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001225:	e8 fd fa ff ff       	call   c0000d27 <malloc_consolidate>
c000122a:	8d 46 10             	lea    eax,[esi+0x10]
c000122d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001231:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001237:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000123d:	0f 84 13 01 00 00    	je     c0001356 <dlmalloc+0x1ea>
c0001243:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001246:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001249:	83 e7 fc             	and    edi,0xfffffffc
c000124c:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001252:	77 4c                	ja     c00012a0 <dlmalloc+0x134>
c0001254:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001259:	75 45                	jne    c00012a0 <dlmalloc+0x134>
c000125b:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c0001261:	75 3d                	jne    c00012a0 <dlmalloc+0x134>
c0001263:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001267:	73 37                	jae    c00012a0 <dlmalloc+0x134>
c0001269:	8d 04 33             	lea    eax,[ebx+esi*1]
c000126c:	89 fa                	mov    edx,edi
c000126e:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c0001273:	29 f2                	sub    edx,esi
c0001275:	83 ce 01             	or     esi,0x1
c0001278:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c000127d:	89 d1                	mov    ecx,edx
c000127f:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c0001284:	83 c9 01             	or     ecx,0x1
c0001287:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c000128e:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c0001295:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001298:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000129b:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000129e:	eb 15                	jmp    c00012b5 <dlmalloc+0x149>
c00012a0:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00012a5:	39 fe                	cmp    esi,edi
c00012a7:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00012ae:	75 0d                	jne    c00012bd <dlmalloc+0x151>
c00012b0:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00012b8:	e9 35 02 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00012bd:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012c3:	89 f8                	mov    eax,edi
c00012c5:	77 19                	ja     c00012e0 <dlmalloc+0x174>
c00012c7:	c1 e8 03             	shr    eax,0x3
c00012ca:	8d 14 00             	lea    edx,[eax+eax*1]
c00012cd:	83 c2 0d             	add    edx,0xd
c00012d0:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c00012d7:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00012de:	eb 46                	jmp    c0001326 <dlmalloc+0x1ba>
c00012e0:	e8 be f9 ff ff       	call   c0000ca3 <largebin_index>
c00012e5:	8d 14 00             	lea    edx,[eax+eax*1]
c00012e8:	83 c2 0d             	add    edx,0xd
c00012eb:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c00012f2:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c00012f9:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012fc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001300:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001304:	89 d5                	mov    ebp,edx
c0001306:	74 1e                	je     c0001326 <dlmalloc+0x1ba>
c0001308:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000130b:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000130e:	77 12                	ja     c0001322 <dlmalloc+0x1b6>
c0001310:	83 cf 01             	or     edi,0x1
c0001313:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001316:	76 05                	jbe    c000131d <dlmalloc+0x1b1>
c0001318:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000131b:	eb f6                	jmp    c0001313 <dlmalloc+0x1a7>
c000131d:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001320:	eb 04                	jmp    c0001326 <dlmalloc+0x1ba>
c0001322:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001326:	89 c7                	mov    edi,eax
c0001328:	88 c1                	mov    cl,al
c000132a:	c1 ff 05             	sar    edi,0x5
c000132d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001331:	bf 01 00 00 00       	mov    edi,0x1
c0001336:	d3 e7                	shl    edi,cl
c0001338:	89 f8                	mov    eax,edi
c000133a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000133e:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001345:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001348:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000134b:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000134e:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001351:	e9 db fe ff ff       	jmp    c0001231 <dlmalloc+0xc5>
c0001356:	81 fe ff 00 00 00    	cmp    esi,0xff
c000135c:	76 78                	jbe    c00013d6 <dlmalloc+0x26a>
c000135e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001362:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c0001369:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000136f:	39 ca                	cmp    edx,ecx
c0001371:	74 63                	je     c00013d6 <dlmalloc+0x26a>
c0001373:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001376:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001379:	83 e3 fc             	and    ebx,0xfffffffc
c000137c:	39 de                	cmp    esi,ebx
c000137e:	77 52                	ja     c00013d2 <dlmalloc+0x266>
c0001380:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001383:	89 df                	mov    edi,ebx
c0001385:	01 d3                	add    ebx,edx
c0001387:	29 f7                	sub    edi,esi
c0001389:	83 ff 0f             	cmp    edi,0xf
c000138c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000138f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001392:	8d 42 08             	lea    eax,[edx+0x8]
c0001395:	77 09                	ja     c00013a0 <dlmalloc+0x234>
c0001397:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000139b:	e9 52 01 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00013a0:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00013a3:	83 ce 01             	or     esi,0x1
c00013a6:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00013ac:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00013b2:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00013b9:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00013c0:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013c3:	89 fa                	mov    edx,edi
c00013c5:	83 ca 01             	or     edx,0x1
c00013c8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013cb:	89 3b                	mov    DWORD PTR [ebx],edi
c00013cd:	e9 20 01 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c00013d2:	89 c2                	mov    edx,eax
c00013d4:	eb 99                	jmp    c000136f <dlmalloc+0x203>
c00013d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013da:	b8 01 00 00 00       	mov    eax,0x1
c00013df:	41                   	inc    ecx
c00013e0:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c00013e7:	89 cb                	mov    ebx,ecx
c00013e9:	c1 eb 05             	shr    ebx,0x5
c00013ec:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c00013f3:	d3 e0                	shl    eax,cl
c00013f5:	39 f8                	cmp    eax,edi
c00013f7:	77 04                	ja     c00013fd <dlmalloc+0x291>
c00013f9:	85 c0                	test   eax,eax
c00013fb:	75 26                	jne    c0001423 <dlmalloc+0x2b7>
c00013fd:	43                   	inc    ebx
c00013fe:	83 fb 02             	cmp    ebx,0x2
c0001401:	0f 87 a6 00 00 00    	ja     c00014ad <dlmalloc+0x341>
c0001407:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000140e:	85 ff                	test   edi,edi
c0001410:	74 eb                	je     c00013fd <dlmalloc+0x291>
c0001412:	89 d8                	mov    eax,ebx
c0001414:	c1 e0 06             	shl    eax,0x6
c0001417:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000141e:	b8 01 00 00 00       	mov    eax,0x1
c0001423:	85 f8                	test   eax,edi
c0001425:	75 07                	jne    c000142e <dlmalloc+0x2c2>
c0001427:	83 c2 08             	add    edx,0x8
c000142a:	01 c0                	add    eax,eax
c000142c:	eb f5                	jmp    c0001423 <dlmalloc+0x2b7>
c000142e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001431:	39 ca                	cmp    edx,ecx
c0001433:	75 14                	jne    c0001449 <dlmalloc+0x2dd>
c0001435:	89 c1                	mov    ecx,eax
c0001437:	83 c2 08             	add    edx,0x8
c000143a:	f7 d1                	not    ecx
c000143c:	01 c0                	add    eax,eax
c000143e:	21 cf                	and    edi,ecx
c0001440:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001447:	eb ac                	jmp    c00013f5 <dlmalloc+0x289>
c0001449:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000144c:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000144f:	83 e0 fc             	and    eax,0xfffffffc
c0001452:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001455:	89 c3                	mov    ebx,eax
c0001457:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000145a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000145d:	29 f3                	sub    ebx,esi
c000145f:	8d 41 08             	lea    eax,[ecx+0x8]
c0001462:	83 fb 0f             	cmp    ebx,0xf
c0001465:	77 09                	ja     c0001470 <dlmalloc+0x304>
c0001467:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000146b:	e9 82 00 00 00       	jmp    c00014f2 <dlmalloc+0x386>
c0001470:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001473:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001479:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c000147f:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c0001485:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c000148c:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c0001493:	77 06                	ja     c000149b <dlmalloc+0x32f>
c0001495:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c000149b:	83 ce 01             	or     esi,0x1
c000149e:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00014a1:	89 d9                	mov    ecx,ebx
c00014a3:	83 c9 01             	or     ecx,0x1
c00014a6:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00014a9:	89 1a                	mov    DWORD PTR [edx],ebx
c00014ab:	eb 45                	jmp    c00014f2 <dlmalloc+0x386>
c00014ad:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00014b2:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014b5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014b8:	83 e2 fc             	and    edx,0xfffffffc
c00014bb:	39 d1                	cmp    ecx,edx
c00014bd:	77 1e                	ja     c00014dd <dlmalloc+0x371>
c00014bf:	89 f3                	mov    ebx,esi
c00014c1:	29 f2                	sub    edx,esi
c00014c3:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014c6:	83 cb 01             	or     ebx,0x1
c00014c9:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c00014cf:	83 ca 01             	or     edx,0x1
c00014d2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014d8:	e9 2d fd ff ff       	jmp    c000120a <dlmalloc+0x9e>
c00014dd:	83 c4 1c             	add    esp,0x1c
c00014e0:	89 f0                	mov    eax,esi
c00014e2:	5b                   	pop    ebx
c00014e3:	ba 00 41 02 c0       	mov    edx,0xc0024100
c00014e8:	5e                   	pop    esi
c00014e9:	5f                   	pop    edi
c00014ea:	5d                   	pop    ebp
c00014eb:	e9 13 fa ff ff       	jmp    c0000f03 <sYSMALLOc>
c00014f0:	31 c0                	xor    eax,eax
c00014f2:	83 c4 1c             	add    esp,0x1c
c00014f5:	5b                   	pop    ebx
c00014f6:	5e                   	pop    esi
c00014f7:	5f                   	pop    edi
c00014f8:	5d                   	pop    ebp
c00014f9:	c3                   	ret    

c00014fa <iALLOc>:
c00014fa:	55                   	push   ebp
c00014fb:	89 c5                	mov    ebp,eax
c00014fd:	57                   	push   edi
c00014fe:	56                   	push   esi
c00014ff:	53                   	push   ebx
c0001500:	83 ec 2c             	sub    esp,0x2c
c0001503:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001507:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000150b:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001516:	75 12                	jne    c000152a <iALLOc+0x30>
c0001518:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000151c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001521:	e8 01 f8 ff ff       	call   c0000d27 <malloc_consolidate>
c0001526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000152a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000152f:	74 12                	je     c0001543 <iALLOc+0x49>
c0001531:	85 ed                	test   ebp,ebp
c0001533:	0f 84 64 01 00 00    	je     c000169d <iALLOc+0x1a3>
c0001539:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001541:	eb 33                	jmp    c0001576 <iALLOc+0x7c>
c0001543:	85 ed                	test   ebp,ebp
c0001545:	75 14                	jne    c000155b <iALLOc+0x61>
c0001547:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000154f:	83 c4 2c             	add    esp,0x2c
c0001552:	5b                   	pop    ebx
c0001553:	5e                   	pop    esi
c0001554:	5f                   	pop    edi
c0001555:	5d                   	pop    ebp
c0001556:	e9 11 fc ff ff       	jmp    c000116c <dlmalloc>
c000155b:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001563:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000156a:	83 f8 0f             	cmp    eax,0xf
c000156d:	76 07                	jbe    c0001576 <iALLOc+0x7c>
c000156f:	83 e0 f8             	and    eax,0xfffffff8
c0001572:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001576:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000157b:	75 09                	jne    c0001586 <iALLOc+0x8c>
c000157d:	89 d0                	mov    eax,edx
c000157f:	31 f6                	xor    esi,esi
c0001581:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001584:	eb 3b                	jmp    c00015c1 <iALLOc+0xc7>
c0001586:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000158e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001590:	83 c0 0b             	add    eax,0xb
c0001593:	83 f8 0f             	cmp    eax,0xf
c0001596:	76 07                	jbe    c000159f <iALLOc+0xa5>
c0001598:	83 e0 f8             	and    eax,0xfffffff8
c000159b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000159f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00015a3:	0f af f5             	imul   esi,ebp
c00015a6:	eb 25                	jmp    c00015cd <iALLOc+0xd3>
c00015a8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00015aa:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015ad:	bb 10 00 00 00       	mov    ebx,0x10
c00015b2:	83 f9 0f             	cmp    ecx,0xf
c00015b5:	76 05                	jbe    c00015bc <iALLOc+0xc2>
c00015b7:	83 e1 f8             	and    ecx,0xfffffff8
c00015ba:	89 cb                	mov    ebx,ecx
c00015bc:	01 de                	add    esi,ebx
c00015be:	83 c0 04             	add    eax,0x4
c00015c1:	39 c7                	cmp    edi,eax
c00015c3:	75 e3                	jne    c00015a8 <iALLOc+0xae>
c00015c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015d1:	83 ec 0c             	sub    esp,0xc
c00015d4:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c00015da:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c00015e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015e8:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015ec:	50                   	push   eax
c00015ed:	e8 7a fb ff ff       	call   c000116c <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c00015fb:	85 c0                	test   eax,eax
c00015fd:	0f 84 92 00 00 00    	je     c0001695 <iALLOc+0x19b>
c0001603:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001606:	8d 78 f8             	lea    edi,[eax-0x8]
c0001609:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000160d:	83 e3 fc             	and    ebx,0xfffffffc
c0001610:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001615:	74 1e                	je     c0001635 <iALLOc+0x13b>
c0001617:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000161b:	89 d9                	mov    ecx,ebx
c000161d:	52                   	push   edx
c000161e:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001622:	83 e9 04             	sub    ecx,0x4
c0001625:	51                   	push   ecx
c0001626:	6a 00                	push   0x0
c0001628:	50                   	push   eax
c0001629:	e8 52 ef ff ff       	call   c0000580 <memset>
c000162e:	83 c4 10             	add    esp,0x10
c0001631:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001635:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000163a:	75 14                	jne    c0001650 <iALLOc+0x156>
c000163c:	8d 04 37             	lea    eax,[edi+esi*1]
c000163f:	29 f3                	sub    ebx,esi
c0001641:	8d 48 08             	lea    ecx,[eax+0x8]
c0001644:	83 cb 01             	or     ebx,0x1
c0001647:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000164a:	89 f3                	mov    ebx,esi
c000164c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001650:	31 c0                	xor    eax,eax
c0001652:	4d                   	dec    ebp
c0001653:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001657:	8d 4f 08             	lea    ecx,[edi+0x8]
c000165a:	39 c5                	cmp    ebp,eax
c000165c:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000165f:	74 2c                	je     c000168d <iALLOc+0x193>
c0001661:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001665:	85 c9                	test   ecx,ecx
c0001667:	75 15                	jne    c000167e <iALLOc+0x184>
c0001669:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000166c:	8d 71 0b             	lea    esi,[ecx+0xb]
c000166f:	b9 10 00 00 00       	mov    ecx,0x10
c0001674:	83 fe 0f             	cmp    esi,0xf
c0001677:	76 05                	jbe    c000167e <iALLOc+0x184>
c0001679:	83 e6 f8             	and    esi,0xfffffff8
c000167c:	89 f1                	mov    ecx,esi
c000167e:	89 ce                	mov    esi,ecx
c0001680:	29 cb                	sub    ebx,ecx
c0001682:	83 ce 01             	or     esi,0x1
c0001685:	40                   	inc    eax
c0001686:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001689:	01 cf                	add    edi,ecx
c000168b:	eb c6                	jmp    c0001653 <iALLOc+0x159>
c000168d:	83 cb 01             	or     ebx,0x1
c0001690:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001693:	eb 08                	jmp    c000169d <iALLOc+0x1a3>
c0001695:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000169d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a1:	83 c4 2c             	add    esp,0x2c
c00016a4:	5b                   	pop    ebx
c00016a5:	5e                   	pop    esi
c00016a6:	5f                   	pop    edi
c00016a7:	5d                   	pop    ebp
c00016a8:	c3                   	ret    

c00016a9 <dlrealloc>:
c00016a9:	55                   	push   ebp
c00016aa:	57                   	push   edi
c00016ab:	56                   	push   esi
c00016ac:	53                   	push   ebx
c00016ad:	83 ec 1c             	sub    esp,0x1c
c00016b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016b8:	85 db                	test   ebx,ebx
c00016ba:	75 10                	jne    c00016cc <dlrealloc+0x23>
c00016bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016c0:	83 c4 1c             	add    esp,0x1c
c00016c3:	5b                   	pop    ebx
c00016c4:	5e                   	pop    esi
c00016c5:	5f                   	pop    edi
c00016c6:	5d                   	pop    ebp
c00016c7:	e9 a0 fa ff ff       	jmp    c000116c <dlmalloc>
c00016cc:	83 f8 df             	cmp    eax,0xffffffdf
c00016cf:	76 07                	jbe    c00016d8 <dlrealloc+0x2f>
c00016d1:	31 db                	xor    ebx,ebx
c00016d3:	e9 6b 01 00 00       	jmp    c0001843 <dlrealloc+0x19a>
c00016d8:	83 c0 0b             	add    eax,0xb
c00016db:	bd 10 00 00 00       	mov    ebp,0x10
c00016e0:	83 f8 0f             	cmp    eax,0xf
c00016e3:	76 05                	jbe    c00016ea <dlrealloc+0x41>
c00016e5:	83 e0 f8             	and    eax,0xfffffff8
c00016e8:	89 c5                	mov    ebp,eax
c00016ea:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016ed:	8d 7b f8             	lea    edi,[ebx-0x8]
c00016f0:	89 ce                	mov    esi,ecx
c00016f2:	83 e6 fc             	and    esi,0xfffffffc
c00016f5:	f6 c1 02             	test   cl,0x2
c00016f8:	75 d7                	jne    c00016d1 <dlrealloc+0x28>
c00016fa:	39 f5                	cmp    ebp,esi
c00016fc:	0f 86 04 01 00 00    	jbe    c0001806 <dlrealloc+0x15d>
c0001702:	8d 14 37             	lea    edx,[edi+esi*1]
c0001705:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000170b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000170e:	75 33                	jne    c0001743 <dlrealloc+0x9a>
c0001710:	83 e0 fc             	and    eax,0xfffffffc
c0001713:	01 f0                	add    eax,esi
c0001715:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001719:	8d 45 10             	lea    eax,[ebp+0x10]
c000171c:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001720:	77 49                	ja     c000176b <dlrealloc+0xc2>
c0001722:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001726:	83 e1 01             	and    ecx,0x1
c0001729:	01 ef                	add    edi,ebp
c000172b:	09 e9                	or     ecx,ebp
c000172d:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c0001730:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001736:	29 e8                	sub    eax,ebp
c0001738:	83 c8 01             	or     eax,0x1
c000173b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000173e:	e9 00 01 00 00       	jmp    c0001843 <dlrealloc+0x19a>
c0001743:	89 c1                	mov    ecx,eax
c0001745:	83 e1 fe             	and    ecx,0xfffffffe
c0001748:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000174d:	75 1c                	jne    c000176b <dlrealloc+0xc2>
c000174f:	83 e0 fc             	and    eax,0xfffffffc
c0001752:	01 f0                	add    eax,esi
c0001754:	39 c5                	cmp    ebp,eax
c0001756:	77 13                	ja     c000176b <dlrealloc+0xc2>
c0001758:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000175b:	89 c6                	mov    esi,eax
c000175d:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0001760:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001763:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001766:	e9 9b 00 00 00       	jmp    c0001806 <dlrealloc+0x15d>
c000176b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000176f:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	50                   	push   eax
c0001776:	e8 f1 f9 ff ff       	call   c000116c <dlmalloc>
c000177b:	83 c4 10             	add    esp,0x10
c000177e:	85 c0                	test   eax,eax
c0001780:	0f 84 4b ff ff ff    	je     c00016d1 <dlrealloc+0x28>
c0001786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000178a:	8d 48 f8             	lea    ecx,[eax-0x8]
c000178d:	39 ca                	cmp    edx,ecx
c000178f:	75 0a                	jne    c000179b <dlrealloc+0xf2>
c0001791:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001794:	83 e0 fc             	and    eax,0xfffffffc
c0001797:	01 c6                	add    esi,eax
c0001799:	eb 6b                	jmp    c0001806 <dlrealloc+0x15d>
c000179b:	8d 4e fc             	lea    ecx,[esi-0x4]
c000179e:	83 f9 27             	cmp    ecx,0x27
c00017a1:	76 08                	jbe    c00017ab <dlrealloc+0x102>
c00017a3:	89 de                	mov    esi,ebx
c00017a5:	89 c7                	mov    edi,eax
c00017a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00017a9:	eb 43                	jmp    c00017ee <dlrealloc+0x145>
c00017ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00017ad:	83 f9 13             	cmp    ecx,0x13
c00017b0:	89 10                	mov    DWORD PTR [eax],edx
c00017b2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00017b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00017b8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00017bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00017be:	76 2e                	jbe    c00017ee <dlrealloc+0x145>
c00017c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00017c3:	83 f9 1b             	cmp    ecx,0x1b
c00017c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00017c9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00017cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00017cf:	76 1d                	jbe    c00017ee <dlrealloc+0x145>
c00017d1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00017d4:	83 f9 23             	cmp    ecx,0x23
c00017d7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00017da:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00017dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00017e0:	76 0c                	jbe    c00017ee <dlrealloc+0x145>
c00017e2:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00017e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00017e8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00017eb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00017ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f2:	83 ec 0c             	sub    esp,0xc
c00017f5:	53                   	push   ebx
c00017f6:	e8 13 f6 ff ff       	call   c0000e0e <dlfree>
c00017fb:	83 c4 10             	add    esp,0x10
c00017fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001802:	89 c3                	mov    ebx,eax
c0001804:	eb 3d                	jmp    c0001843 <dlrealloc+0x19a>
c0001806:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001809:	8d 04 37             	lea    eax,[edi+esi*1]
c000180c:	89 f2                	mov    edx,esi
c000180e:	29 ea                	sub    edx,ebp
c0001810:	83 e1 01             	and    ecx,0x1
c0001813:	83 fa 0f             	cmp    edx,0xf
c0001816:	77 0b                	ja     c0001823 <dlrealloc+0x17a>
c0001818:	09 ce                	or     esi,ecx
c000181a:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000181d:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001821:	eb 20                	jmp    c0001843 <dlrealloc+0x19a>
c0001823:	01 ef                	add    edi,ebp
c0001825:	83 ca 01             	or     edx,0x1
c0001828:	09 cd                	or     ebp,ecx
c000182a:	83 ec 0c             	sub    esp,0xc
c000182d:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001830:	83 c7 08             	add    edi,0x8
c0001833:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001836:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000183a:	57                   	push   edi
c000183b:	e8 ce f5 ff ff       	call   c0000e0e <dlfree>
c0001840:	83 c4 10             	add    esp,0x10
c0001843:	83 c4 1c             	add    esp,0x1c
c0001846:	89 d8                	mov    eax,ebx
c0001848:	5b                   	pop    ebx
c0001849:	5e                   	pop    esi
c000184a:	5f                   	pop    edi
c000184b:	5d                   	pop    ebp
c000184c:	c3                   	ret    

c000184d <dlmemalign>:
c000184d:	55                   	push   ebp
c000184e:	57                   	push   edi
c000184f:	56                   	push   esi
c0001850:	53                   	push   ebx
c0001851:	83 ec 0c             	sub    esp,0xc
c0001854:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001858:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000185c:	83 fa 08             	cmp    edx,0x8
c000185f:	77 10                	ja     c0001871 <dlmemalign+0x24>
c0001861:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001865:	83 c4 0c             	add    esp,0xc
c0001868:	5b                   	pop    ebx
c0001869:	5e                   	pop    esi
c000186a:	5f                   	pop    edi
c000186b:	5d                   	pop    ebp
c000186c:	e9 fb f8 ff ff       	jmp    c000116c <dlmalloc>
c0001871:	83 fa 0f             	cmp    edx,0xf
c0001874:	bf 10 00 00 00       	mov    edi,0x10
c0001879:	76 13                	jbe    c000188e <dlmemalign+0x41>
c000187b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000187e:	85 d1                	test   ecx,edx
c0001880:	75 04                	jne    c0001886 <dlmemalign+0x39>
c0001882:	89 d7                	mov    edi,edx
c0001884:	eb 08                	jmp    c000188e <dlmemalign+0x41>
c0001886:	39 d7                	cmp    edi,edx
c0001888:	73 04                	jae    c000188e <dlmemalign+0x41>
c000188a:	01 ff                	add    edi,edi
c000188c:	eb f8                	jmp    c0001886 <dlmemalign+0x39>
c000188e:	83 f8 df             	cmp    eax,0xffffffdf
c0001891:	76 07                	jbe    c000189a <dlmemalign+0x4d>
c0001893:	31 c0                	xor    eax,eax
c0001895:	e9 ce 00 00 00       	jmp    c0001968 <dlmemalign+0x11b>
c000189a:	83 c0 0b             	add    eax,0xb
c000189d:	bd 10 00 00 00       	mov    ebp,0x10
c00018a2:	83 f8 0f             	cmp    eax,0xf
c00018a5:	76 05                	jbe    c00018ac <dlmemalign+0x5f>
c00018a7:	83 e0 f8             	and    eax,0xfffffff8
c00018aa:	89 c5                	mov    ebp,eax
c00018ac:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b0:	83 ec 0c             	sub    esp,0xc
c00018b3:	50                   	push   eax
c00018b4:	e8 b3 f8 ff ff       	call   c000116c <dlmalloc>
c00018b9:	83 c4 10             	add    esp,0x10
c00018bc:	85 c0                	test   eax,eax
c00018be:	89 c1                	mov    ecx,eax
c00018c0:	74 d1                	je     c0001893 <dlmemalign+0x46>
c00018c2:	8d 70 f8             	lea    esi,[eax-0x8]
c00018c5:	31 d2                	xor    edx,edx
c00018c7:	f7 f7                	div    edi
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 62                	je     c000192f <dlmemalign+0xe2>
c00018cd:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d1:	89 f8                	mov    eax,edi
c00018d3:	f7 d8                	neg    eax
c00018d5:	21 c3                	and    ebx,eax
c00018d7:	83 eb 08             	sub    ebx,0x8
c00018da:	89 d8                	mov    eax,ebx
c00018dc:	29 f0                	sub    eax,esi
c00018de:	83 f8 0f             	cmp    eax,0xf
c00018e1:	77 02                	ja     c00018e5 <dlmemalign+0x98>
c00018e3:	01 fb                	add    ebx,edi
c00018e5:	89 d8                	mov    eax,ebx
c00018e7:	29 f0                	sub    eax,esi
c00018e9:	89 c6                	mov    esi,eax
c00018eb:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ee:	89 c2                	mov    edx,eax
c00018f0:	83 e2 fc             	and    edx,0xfffffffc
c00018f3:	29 f2                	sub    edx,esi
c00018f5:	a8 02                	test   al,0x2
c00018f7:	74 10                	je     c0001909 <dlmemalign+0xbc>
c00018f9:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018fc:	83 ca 02             	or     edx,0x2
c00018ff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001902:	8d 43 08             	lea    eax,[ebx+0x8]
c0001905:	89 33                	mov    DWORD PTR [ebx],esi
c0001907:	eb 5f                	jmp    c0001968 <dlmemalign+0x11b>
c0001909:	89 d0                	mov    eax,edx
c000190b:	83 ec 0c             	sub    esp,0xc
c000190e:	83 c8 01             	or     eax,0x1
c0001911:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001914:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001919:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000191c:	83 e0 01             	and    eax,0x1
c000191f:	09 f0                	or     eax,esi
c0001921:	89 de                	mov    esi,ebx
c0001923:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001926:	51                   	push   ecx
c0001927:	e8 e2 f4 ff ff       	call   c0000e0e <dlfree>
c000192c:	83 c4 10             	add    esp,0x10
c000192f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001932:	a8 02                	test   al,0x2
c0001934:	75 2f                	jne    c0001965 <dlmemalign+0x118>
c0001936:	8d 55 10             	lea    edx,[ebp+0x10]
c0001939:	83 e0 fc             	and    eax,0xfffffffc
c000193c:	39 c2                	cmp    edx,eax
c000193e:	73 25                	jae    c0001965 <dlmemalign+0x118>
c0001940:	29 e8                	sub    eax,ebp
c0001942:	83 ec 0c             	sub    esp,0xc
c0001945:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001948:	83 c8 01             	or     eax,0x1
c000194b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001954:	83 e0 01             	and    eax,0x1
c0001957:	09 c5                	or     ebp,eax
c0001959:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000195c:	52                   	push   edx
c000195d:	e8 ac f4 ff ff       	call   c0000e0e <dlfree>
c0001962:	83 c4 10             	add    esp,0x10
c0001965:	8d 46 08             	lea    eax,[esi+0x8]
c0001968:	83 c4 0c             	add    esp,0xc
c000196b:	5b                   	pop    ebx
c000196c:	5e                   	pop    esi
c000196d:	5f                   	pop    edi
c000196e:	5d                   	pop    ebp
c000196f:	c3                   	ret    

c0001970 <dlcalloc>:
c0001970:	53                   	push   ebx
c0001971:	83 ec 14             	sub    esp,0x14
c0001974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001978:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000197d:	50                   	push   eax
c000197e:	e8 e9 f7 ff ff       	call   c000116c <dlmalloc>
c0001983:	83 c4 10             	add    esp,0x10
c0001986:	85 c0                	test   eax,eax
c0001988:	89 c3                	mov    ebx,eax
c000198a:	74 77                	je     c0001a03 <dlcalloc+0x93>
c000198c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000198f:	89 d0                	mov    eax,edx
c0001991:	83 e0 fc             	and    eax,0xfffffffc
c0001994:	f6 c2 02             	test   dl,0x2
c0001997:	75 5a                	jne    c00019f3 <dlcalloc+0x83>
c0001999:	83 e8 04             	sub    eax,0x4
c000199c:	83 f8 27             	cmp    eax,0x27
c000199f:	76 03                	jbe    c00019a4 <dlcalloc+0x34>
c00019a1:	51                   	push   ecx
c00019a2:	eb 53                	jmp    c00019f7 <dlcalloc+0x87>
c00019a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019aa:	83 f8 13             	cmp    eax,0x13
c00019ad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b4:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019bb:	76 46                	jbe    c0001a03 <dlcalloc+0x93>
c00019bd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019c4:	83 f8 1b             	cmp    eax,0x1b
c00019c7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019ce:	76 33                	jbe    c0001a03 <dlcalloc+0x93>
c00019d0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019d7:	83 f8 23             	cmp    eax,0x23
c00019da:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e1:	76 20                	jbe    c0001a03 <dlcalloc+0x93>
c00019e3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ea:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f1:	eb 10                	jmp    c0001a03 <dlcalloc+0x93>
c00019f3:	52                   	push   edx
c00019f4:	83 e8 08             	sub    eax,0x8
c00019f7:	50                   	push   eax
c00019f8:	6a 00                	push   0x0
c00019fa:	53                   	push   ebx
c00019fb:	e8 80 eb ff ff       	call   c0000580 <memset>
c0001a00:	83 c4 10             	add    esp,0x10
c0001a03:	83 c4 08             	add    esp,0x8
c0001a06:	89 d8                	mov    eax,ebx
c0001a08:	5b                   	pop    ebx
c0001a09:	c3                   	ret    

c0001a0a <dlcfree>:
c0001a0a:	e9 ff f3 ff ff       	jmp    c0000e0e <dlfree>

c0001a0f <dlindependent_calloc>:
c0001a0f:	83 ec 28             	sub    esp,0x28
c0001a12:	b9 03 00 00 00       	mov    ecx,0x3
c0001a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a27:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2b:	e8 ca fa ff ff       	call   c00014fa <iALLOc>
c0001a30:	83 c4 2c             	add    esp,0x2c
c0001a33:	c3                   	ret    

c0001a34 <dlindependent_comalloc>:
c0001a34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a38:	31 c9                	xor    ecx,ecx
c0001a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a3e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a46:	e9 af fa ff ff       	jmp    c00014fa <iALLOc>

c0001a4b <dlvalloc>:
c0001a4b:	83 ec 0c             	sub    esp,0xc
c0001a4e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001a55:	75 0a                	jne    c0001a61 <dlvalloc+0x16>
c0001a57:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a5c:	e8 c6 f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001a61:	50                   	push   eax
c0001a62:	50                   	push   eax
c0001a63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a67:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c0001a6d:	e8 db fd ff ff       	call   c000184d <dlmemalign>
c0001a72:	83 c4 1c             	add    esp,0x1c
c0001a75:	c3                   	ret    

c0001a76 <dlpvalloc>:
c0001a76:	83 ec 0c             	sub    esp,0xc
c0001a79:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001a80:	75 0a                	jne    c0001a8c <dlpvalloc+0x16>
c0001a82:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a87:	e8 9b f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001a8c:	52                   	push   edx
c0001a8d:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c0001a92:	52                   	push   edx
c0001a93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	f7 d9                	neg    ecx
c0001a9b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a9f:	21 ca                	and    edx,ecx
c0001aa1:	52                   	push   edx
c0001aa2:	50                   	push   eax
c0001aa3:	e8 a5 fd ff ff       	call   c000184d <dlmemalign>
c0001aa8:	83 c4 1c             	add    esp,0x1c
c0001aab:	c3                   	ret    

c0001aac <dlmalloc_trim>:
c0001aac:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001ab1:	e8 71 f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001ab6:	31 c0                	xor    eax,eax
c0001ab8:	c3                   	ret    

c0001ab9 <dlmalloc_usable_size>:
c0001ab9:	53                   	push   ebx
c0001aba:	31 c0                	xor    eax,eax
c0001abc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac0:	85 c9                	test   ecx,ecx
c0001ac2:	74 24                	je     c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ac4:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ac7:	f6 c2 02             	test   dl,0x2
c0001aca:	74 08                	je     c0001ad4 <dlmalloc_usable_size+0x1b>
c0001acc:	83 e2 fc             	and    edx,0xfffffffc
c0001acf:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad2:	eb 14                	jmp    c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ad4:	89 d3                	mov    ebx,edx
c0001ad6:	31 c0                	xor    eax,eax
c0001ad8:	83 e3 fe             	and    ebx,0xfffffffe
c0001adb:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae0:	74 06                	je     c0001ae8 <dlmalloc_usable_size+0x2f>
c0001ae2:	83 e2 fc             	and    edx,0xfffffffc
c0001ae5:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ae8:	5b                   	pop    ebx
c0001ae9:	c3                   	ret    

c0001aea <dlmallinfo>:
c0001aea:	55                   	push   ebp
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	53                   	push   ebx
c0001aee:	83 ec 08             	sub    esp,0x8
c0001af1:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001af8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afc:	75 0a                	jne    c0001b08 <dlmallinfo+0x1e>
c0001afe:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b03:	e8 1f f2 ff ff       	call   c0000d27 <malloc_consolidate>
c0001b08:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001b0d:	31 ed                	xor    ebp,ebp
c0001b0f:	31 c9                	xor    ecx,ecx
c0001b11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b14:	83 e0 fc             	and    eax,0xfffffffc
c0001b17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b1b:	31 c0                	xor    eax,eax
c0001b1d:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001b24:	85 d2                	test   edx,edx
c0001b26:	74 0e                	je     c0001b36 <dlmallinfo+0x4c>
c0001b28:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b2b:	45                   	inc    ebp
c0001b2c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b2f:	83 e6 fc             	and    esi,0xfffffffc
c0001b32:	01 f1                	add    ecx,esi
c0001b34:	eb ee                	jmp    c0001b24 <dlmallinfo+0x3a>
c0001b36:	40                   	inc    eax
c0001b37:	83 f8 0a             	cmp    eax,0xa
c0001b3a:	75 e1                	jne    c0001b1d <dlmallinfo+0x33>
c0001b3c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b47:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b4a:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001b4f:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b52:	39 f0                	cmp    eax,esi
c0001b54:	74 10                	je     c0001b66 <dlmallinfo+0x7c>
c0001b56:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b59:	ff 04 24             	inc    DWORD PTR [esp]
c0001b5c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b5f:	83 e7 fc             	and    edi,0xfffffffc
c0001b62:	01 fa                	add    edx,edi
c0001b64:	eb ec                	jmp    c0001b52 <dlmallinfo+0x68>
c0001b66:	83 c0 08             	add    eax,0x8
c0001b69:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001b6e:	75 df                	jne    c0001b4f <dlmallinfo+0x65>
c0001b70:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001b7e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b81:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b84:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b87:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b8a:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001b90:	89 03                	mov    DWORD PTR [ebx],eax
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b9b:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b9e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba1:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	89 d8                	mov    eax,ebx
c0001bac:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001baf:	83 c4 08             	add    esp,0x8
c0001bb2:	5b                   	pop    ebx
c0001bb3:	5e                   	pop    esi
c0001bb4:	5f                   	pop    edi
c0001bb5:	5d                   	pop    ebp
c0001bb6:	c2 04 00             	ret    0x4

c0001bb9 <dlmalloc_stats>:
c0001bb9:	83 ec 30             	sub    esp,0x30
c0001bbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc0:	50                   	push   eax
c0001bc1:	e8 24 ff ff ff       	call   c0001aea <dlmallinfo>
c0001bc6:	83 c4 30             	add    esp,0x30
c0001bc9:	c3                   	ret    

c0001bca <dlmallopt>:
c0001bca:	56                   	push   esi
c0001bcb:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001bd0:	53                   	push   ebx
c0001bd1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bd9:	e8 49 f1 ff ff       	call   c0000d27 <malloc_consolidate>
c0001bde:	8d 46 04             	lea    eax,[esi+0x4]
c0001be1:	83 f8 05             	cmp    eax,0x5
c0001be4:	77 67                	ja     c0001c4d <dlmallopt+0x83>
c0001be6:	ff 24 85 84 f1 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0e7c]
c0001bed:	83 fb 50             	cmp    ebx,0x50
c0001bf0:	77 5b                	ja     c0001c4d <dlmallopt+0x83>
c0001bf2:	85 db                	test   ebx,ebx
c0001bf4:	ba 08 00 00 00       	mov    edx,0x8
c0001bf9:	74 12                	je     c0001c0d <dlmallopt+0x43>
c0001bfb:	83 c3 0b             	add    ebx,0xb
c0001bfe:	ba 10 00 00 00       	mov    edx,0x10
c0001c03:	83 fb 0f             	cmp    ebx,0xf
c0001c06:	76 05                	jbe    c0001c0d <dlmallopt+0x43>
c0001c08:	89 da                	mov    edx,ebx
c0001c0a:	83 e2 f8             	and    edx,0xfffffff8
c0001c0d:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001c12:	83 e0 03             	and    eax,0x3
c0001c15:	09 d0                	or     eax,edx
c0001c17:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001c1c:	eb 31                	jmp    c0001c4f <dlmallopt+0x85>
c0001c1e:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001c24:	eb 06                	jmp    c0001c2c <dlmallopt+0x62>
c0001c26:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001c2c:	be 01 00 00 00       	mov    esi,0x1
c0001c31:	eb 1c                	jmp    c0001c4f <dlmallopt+0x85>
c0001c33:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001c39:	eb f1                	jmp    c0001c2c <dlmallopt+0x62>
c0001c3b:	31 f6                	xor    esi,esi
c0001c3d:	85 db                	test   ebx,ebx
c0001c3f:	75 0e                	jne    c0001c4f <dlmallopt+0x85>
c0001c41:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001c4b:	eb df                	jmp    c0001c2c <dlmallopt+0x62>
c0001c4d:	31 f6                	xor    esi,esi
c0001c4f:	5b                   	pop    ebx
c0001c50:	89 f0                	mov    eax,esi
c0001c52:	5e                   	pop    esi
c0001c53:	c3                   	ret    

c0001c54 <isblank>:
c0001c54:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c59:	74 09                	je     c0001c64 <isblank+0x10>
c0001c5b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c60:	75 0a                	jne    c0001c6c <isblank+0x18>
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 01 00 00 00       	mov    eax,0x1
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax
c0001c6c:	b8 00 00 00 00       	mov    eax,0x0
c0001c71:	c3                   	ret    
c0001c72:	66 90                	xchg   ax,ax

c0001c74 <iscntrl>:
c0001c74:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001c79:	7e 09                	jle    c0001c84 <iscntrl+0x10>
c0001c7b:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001c80:	75 0a                	jne    c0001c8c <iscntrl+0x18>
c0001c82:	66 90                	xchg   ax,ax
c0001c84:	b8 01 00 00 00       	mov    eax,0x1
c0001c89:	c3                   	ret    
c0001c8a:	66 90                	xchg   ax,ax
c0001c8c:	b8 00 00 00 00       	mov    eax,0x0
c0001c91:	c3                   	ret    
c0001c92:	66 90                	xchg   ax,ax

c0001c94 <isdigit>:
c0001c94:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c99:	7e 0d                	jle    c0001ca8 <isdigit+0x14>
c0001c9b:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001ca0:	7f 06                	jg     c0001ca8 <isdigit+0x14>
c0001ca2:	b8 01 00 00 00       	mov    eax,0x1
c0001ca7:	c3                   	ret    
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <islower>:
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 0d                	jle    c0001cc4 <islower+0x14>
c0001cb7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001cbc:	7f 06                	jg     c0001cc4 <islower+0x14>
c0001cbe:	b8 01 00 00 00       	mov    eax,0x1
c0001cc3:	c3                   	ret    
c0001cc4:	b8 00 00 00 00       	mov    eax,0x0
c0001cc9:	c3                   	ret    
c0001cca:	66 90                	xchg   ax,ax

c0001ccc <isspace>:
c0001ccc:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001cd1:	7c 19                	jl     c0001cec <isspace+0x20>
c0001cd3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001cd8:	7e 0a                	jle    c0001ce4 <isspace+0x18>
c0001cda:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001cdf:	75 0b                	jne    c0001cec <isspace+0x20>
c0001ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0001ce4:	b8 01 00 00 00       	mov    eax,0x1
c0001ce9:	c3                   	ret    
c0001cea:	66 90                	xchg   ax,ax
c0001cec:	b8 00 00 00 00       	mov    eax,0x0
c0001cf1:	c3                   	ret    
c0001cf2:	66 90                	xchg   ax,ax

c0001cf4 <isupper>:
c0001cf4:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cf9:	7e 0d                	jle    c0001d08 <isupper+0x14>
c0001cfb:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d00:	7f 06                	jg     c0001d08 <isupper+0x14>
c0001d02:	b8 01 00 00 00       	mov    eax,0x1
c0001d07:	c3                   	ret    
c0001d08:	b8 00 00 00 00       	mov    eax,0x0
c0001d0d:	c3                   	ret    
c0001d0e:	66 90                	xchg   ax,ax

c0001d10 <isalpha>:
c0001d10:	83 ec 04             	sub    esp,0x4
c0001d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	e8 d5 ff ff ff       	call   c0001cf4 <isupper>
c0001d1f:	85 c0                	test   eax,eax
c0001d21:	75 11                	jne    c0001d34 <isalpha+0x24>
c0001d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d27:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d2a:	e8 81 ff ff ff       	call   c0001cb0 <islower>
c0001d2f:	85 c0                	test   eax,eax
c0001d31:	74 09                	je     c0001d3c <isalpha+0x2c>
c0001d33:	90                   	nop
c0001d34:	b8 01 00 00 00       	mov    eax,0x1
c0001d39:	eb 09                	jmp    c0001d44 <isalpha+0x34>
c0001d3b:	90                   	nop
c0001d3c:	b8 00 00 00 00       	mov    eax,0x0
c0001d41:	8d 76 00             	lea    esi,[esi+0x0]
c0001d44:	83 c4 04             	add    esp,0x4
c0001d47:	c3                   	ret    

c0001d48 <isalnum>:
c0001d48:	83 ec 04             	sub    esp,0x4
c0001d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d4f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d52:	e8 b9 ff ff ff       	call   c0001d10 <isalpha>
c0001d57:	85 c0                	test   eax,eax
c0001d59:	75 11                	jne    c0001d6c <isalnum+0x24>
c0001d5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d62:	e8 2d ff ff ff       	call   c0001c94 <isdigit>
c0001d67:	85 c0                	test   eax,eax
c0001d69:	74 09                	je     c0001d74 <isalnum+0x2c>
c0001d6b:	90                   	nop
c0001d6c:	b8 01 00 00 00       	mov    eax,0x1
c0001d71:	eb 09                	jmp    c0001d7c <isalnum+0x34>
c0001d73:	90                   	nop
c0001d74:	b8 00 00 00 00       	mov    eax,0x0
c0001d79:	8d 76 00             	lea    esi,[esi+0x0]
c0001d7c:	83 c4 04             	add    esp,0x4
c0001d7f:	c3                   	ret    

c0001d80 <ispunct>:
c0001d80:	83 ec 04             	sub    esp,0x4
c0001d83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d8a:	e8 b9 ff ff ff       	call   c0001d48 <isalnum>
c0001d8f:	85 c0                	test   eax,eax
c0001d91:	75 29                	jne    c0001dbc <ispunct+0x3c>
c0001d93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001d97:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9a:	e8 2d ff ff ff       	call   c0001ccc <isspace>
c0001d9f:	85 c0                	test   eax,eax
c0001da1:	75 19                	jne    c0001dbc <ispunct+0x3c>
c0001da3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001da7:	89 04 24             	mov    DWORD PTR [esp],eax
c0001daa:	e8 c5 fe ff ff       	call   c0001c74 <iscntrl>
c0001daf:	85 c0                	test   eax,eax
c0001db1:	75 09                	jne    c0001dbc <ispunct+0x3c>
c0001db3:	b8 01 00 00 00       	mov    eax,0x1
c0001db8:	eb 0a                	jmp    c0001dc4 <ispunct+0x44>
c0001dba:	66 90                	xchg   ax,ax
c0001dbc:	b8 00 00 00 00       	mov    eax,0x0
c0001dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0001dc4:	83 c4 04             	add    esp,0x4
c0001dc7:	c3                   	ret    

c0001dc8 <isgraph>:
c0001dc8:	83 ec 04             	sub    esp,0x4
c0001dcb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001dcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd2:	e8 71 ff ff ff       	call   c0001d48 <isalnum>
c0001dd7:	85 c0                	test   eax,eax
c0001dd9:	75 11                	jne    c0001dec <isgraph+0x24>
c0001ddb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0001de2:	e8 99 ff ff ff       	call   c0001d80 <ispunct>
c0001de7:	85 c0                	test   eax,eax
c0001de9:	74 09                	je     c0001df4 <isgraph+0x2c>
c0001deb:	90                   	nop
c0001dec:	b8 01 00 00 00       	mov    eax,0x1
c0001df1:	eb 09                	jmp    c0001dfc <isgraph+0x34>
c0001df3:	90                   	nop
c0001df4:	b8 00 00 00 00       	mov    eax,0x0
c0001df9:	8d 76 00             	lea    esi,[esi+0x0]
c0001dfc:	83 c4 04             	add    esp,0x4
c0001dff:	c3                   	ret    

c0001e00 <isprint>:
c0001e00:	83 ec 04             	sub    esp,0x4
c0001e03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001e07:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e0a:	e8 b9 ff ff ff       	call   c0001dc8 <isgraph>
c0001e0f:	85 c0                	test   eax,eax
c0001e11:	75 09                	jne    c0001e1c <isprint+0x1c>
c0001e13:	83 7c 24 08 20       	cmp    DWORD PTR [esp+0x8],0x20
c0001e18:	75 0a                	jne    c0001e24 <isprint+0x24>
c0001e1a:	66 90                	xchg   ax,ax
c0001e1c:	b8 01 00 00 00       	mov    eax,0x1
c0001e21:	eb 09                	jmp    c0001e2c <isprint+0x2c>
c0001e23:	90                   	nop
c0001e24:	b8 00 00 00 00       	mov    eax,0x0
c0001e29:	8d 76 00             	lea    esi,[esi+0x0]
c0001e2c:	83 c4 04             	add    esp,0x4
c0001e2f:	c3                   	ret    

c0001e30 <isxdigit>:
c0001e30:	83 ec 04             	sub    esp,0x4
c0001e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001e37:	89 04 24             	mov    DWORD PTR [esp],eax
c0001e3a:	e8 55 fe ff ff       	call   c0001c94 <isdigit>
c0001e3f:	85 c0                	test   eax,eax
c0001e41:	75 21                	jne    c0001e64 <isxdigit+0x34>
c0001e43:	83 7c 24 08 40       	cmp    DWORD PTR [esp+0x8],0x40
c0001e48:	7e 0a                	jle    c0001e54 <isxdigit+0x24>
c0001e4a:	83 7c 24 08 46       	cmp    DWORD PTR [esp+0x8],0x46
c0001e4f:	7e 13                	jle    c0001e64 <isxdigit+0x34>
c0001e51:	8d 76 00             	lea    esi,[esi+0x0]
c0001e54:	83 7c 24 08 60       	cmp    DWORD PTR [esp+0x8],0x60
c0001e59:	7e 11                	jle    c0001e6c <isxdigit+0x3c>
c0001e5b:	83 7c 24 08 66       	cmp    DWORD PTR [esp+0x8],0x66
c0001e60:	7f 0a                	jg     c0001e6c <isxdigit+0x3c>
c0001e62:	66 90                	xchg   ax,ax
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	eb 09                	jmp    c0001e74 <isxdigit+0x44>
c0001e6b:	90                   	nop
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	8d 76 00             	lea    esi,[esi+0x0]
c0001e74:	83 c4 04             	add    esp,0x4
c0001e77:	c3                   	ret    

c0001e78 <disk_status>:
c0001e78:	31 c0                	xor    eax,eax
c0001e7a:	c3                   	ret    

c0001e7b <disk_initialize>:
c0001e7b:	31 c0                	xor    eax,eax
c0001e7d:	c3                   	ret    

c0001e7e <disk_read>:
c0001e7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e83:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001e8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e8f:	e9 40 6a 01 00       	jmp    c00188d4 <fatWrapperReadDisk>

c0001e94 <disk_write>:
c0001e94:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e99:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001ea1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ea5:	e9 6a 6a 01 00       	jmp    c0018914 <fatWrapperWriteDisk>

c0001eaa <disk_ioctl>:
c0001eaa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001eaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001eb3:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001eb8:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001ec0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ec4:	e9 8b 6a 01 00       	jmp    c0018954 <fatWrapperIoctl>

c0001ec9 <ld_word>:
c0001ec9:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ecd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed0:	c1 e2 08             	shl    edx,0x8
c0001ed3:	09 d0                	or     eax,edx
c0001ed5:	c3                   	ret    

c0001ed6 <ld_dword>:
c0001ed6:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001eda:	89 d1                	mov    ecx,edx
c0001edc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ee0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ee3:	c1 e1 08             	shl    ecx,0x8
c0001ee6:	09 ca                	or     edx,ecx
c0001ee8:	c1 e2 08             	shl    edx,0x8
c0001eeb:	09 d0                	or     eax,edx
c0001eed:	c3                   	ret    

c0001eee <st_word>:
c0001eee:	66 89 10             	mov    WORD PTR [eax],dx
c0001ef1:	c3                   	ret    

c0001ef2 <st_dword>:
c0001ef2:	89 10                	mov    DWORD PTR [eax],edx
c0001ef4:	c3                   	ret    

c0001ef5 <mem_cpy>:
c0001ef5:	85 c9                	test   ecx,ecx
c0001ef7:	74 10                	je     c0001f09 <mem_cpy+0x14>
c0001ef9:	57                   	push   edi
c0001efa:	01 c1                	add    ecx,eax
c0001efc:	56                   	push   esi
c0001efd:	89 c7                	mov    edi,eax
c0001eff:	89 d6                	mov    esi,edx
c0001f01:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001f02:	39 f9                	cmp    ecx,edi
c0001f04:	75 fb                	jne    c0001f01 <mem_cpy+0xc>
c0001f06:	5e                   	pop    esi
c0001f07:	5f                   	pop    edi
c0001f08:	c3                   	ret    
c0001f09:	c3                   	ret    

c0001f0a <mem_set>:
c0001f0a:	01 c1                	add    ecx,eax
c0001f0c:	88 10                	mov    BYTE PTR [eax],dl
c0001f0e:	40                   	inc    eax
c0001f0f:	39 c8                	cmp    eax,ecx
c0001f11:	75 f9                	jne    c0001f0c <mem_set+0x2>
c0001f13:	c3                   	ret    

c0001f14 <mem_cmp>:
c0001f14:	57                   	push   edi
c0001f15:	56                   	push   esi
c0001f16:	89 c6                	mov    esi,eax
c0001f18:	53                   	push   ebx
c0001f19:	46                   	inc    esi
c0001f1a:	42                   	inc    edx
c0001f1b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f1f:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f23:	29 fb                	sub    ebx,edi
c0001f25:	89 cf                	mov    edi,ecx
c0001f27:	29 f7                	sub    edi,esi
c0001f29:	01 c7                	add    edi,eax
c0001f2b:	74 04                	je     c0001f31 <mem_cmp+0x1d>
c0001f2d:	85 db                	test   ebx,ebx
c0001f2f:	74 e8                	je     c0001f19 <mem_cmp+0x5>
c0001f31:	89 d8                	mov    eax,ebx
c0001f33:	5b                   	pop    ebx
c0001f34:	5e                   	pop    esi
c0001f35:	5f                   	pop    edi
c0001f36:	c3                   	ret    

c0001f37 <chk_chr>:
c0001f37:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f3a:	84 c9                	test   cl,cl
c0001f3c:	74 07                	je     c0001f45 <chk_chr+0xe>
c0001f3e:	39 d1                	cmp    ecx,edx
c0001f40:	74 03                	je     c0001f45 <chk_chr+0xe>
c0001f42:	40                   	inc    eax
c0001f43:	eb f2                	jmp    c0001f37 <chk_chr>
c0001f45:	89 c8                	mov    eax,ecx
c0001f47:	c3                   	ret    

c0001f48 <dbc_1st>:
c0001f48:	31 c0                	xor    eax,eax
c0001f4a:	c3                   	ret    

c0001f4b <dbc_2nd>:
c0001f4b:	31 c0                	xor    eax,eax
c0001f4d:	c3                   	ret    

c0001f4e <tchar2uni>:
c0001f4e:	57                   	push   edi
c0001f4f:	56                   	push   esi
c0001f50:	89 c6                	mov    esi,eax
c0001f52:	53                   	push   ebx
c0001f53:	51                   	push   ecx
c0001f54:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f56:	8a 13                	mov    dl,BYTE PTR [ebx]
c0001f58:	8d 4b 01             	lea    ecx,[ebx+0x1]
c0001f5b:	84 d2                	test   dl,dl
c0001f5d:	78 0a                	js     c0001f69 <tchar2uni+0x1b>
c0001f5f:	0f b6 c2             	movzx  eax,dl
c0001f62:	89 cf                	mov    edi,ecx
c0001f64:	e9 a3 00 00 00       	jmp    c000200c <tchar2uni+0xbe>
c0001f69:	88 d0                	mov    al,dl
c0001f6b:	24 e0                	and    al,0xe0
c0001f6d:	3c c0                	cmp    al,0xc0
c0001f6f:	75 0d                	jne    c0001f7e <tchar2uni+0x30>
c0001f71:	80 e2 1f             	and    dl,0x1f
c0001f74:	0f b6 c2             	movzx  eax,dl
c0001f77:	ba 01 00 00 00       	mov    edx,0x1
c0001f7c:	eb 32                	jmp    c0001fb0 <tchar2uni+0x62>
c0001f7e:	88 d0                	mov    al,dl
c0001f80:	24 f0                	and    al,0xf0
c0001f82:	3c e0                	cmp    al,0xe0
c0001f84:	75 0d                	jne    c0001f93 <tchar2uni+0x45>
c0001f86:	80 e2 0f             	and    dl,0xf
c0001f89:	0f b6 c2             	movzx  eax,dl
c0001f8c:	ba 02 00 00 00       	mov    edx,0x2
c0001f91:	eb 1d                	jmp    c0001fb0 <tchar2uni+0x62>
c0001f93:	88 d0                	mov    al,dl
c0001f95:	24 f8                	and    al,0xf8
c0001f97:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0001f9b:	83 c8 ff             	or     eax,0xffffffff
c0001f9e:	80 7c 24 03 f0       	cmp    BYTE PTR [esp+0x3],0xf0
c0001fa3:	75 6e                	jne    c0002013 <tchar2uni+0xc5>
c0001fa5:	80 e2 07             	and    dl,0x7
c0001fa8:	0f b6 c2             	movzx  eax,dl
c0001fab:	ba 03 00 00 00       	mov    edx,0x3
c0001fb0:	8d 7c 13 01          	lea    edi,[ebx+edx*1+0x1]
c0001fb4:	41                   	inc    ecx
c0001fb5:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0001fb8:	88 da                	mov    dl,bl
c0001fba:	80 e2 c0             	and    dl,0xc0
c0001fbd:	80 fa 80             	cmp    dl,0x80
c0001fc0:	75 4e                	jne    c0002010 <tchar2uni+0xc2>
c0001fc2:	c1 e0 06             	shl    eax,0x6
c0001fc5:	80 e3 3f             	and    bl,0x3f
c0001fc8:	0f b6 db             	movzx  ebx,bl
c0001fcb:	09 d8                	or     eax,ebx
c0001fcd:	39 f9                	cmp    ecx,edi
c0001fcf:	75 e3                	jne    c0001fb4 <tchar2uni+0x66>
c0001fd1:	8d 90 00 28 ff ff    	lea    edx,[eax-0xd800]
c0001fd7:	81 fa ff 07 00 00    	cmp    edx,0x7ff
c0001fdd:	76 31                	jbe    c0002010 <tchar2uni+0xc2>
c0001fdf:	8d 50 80             	lea    edx,[eax-0x80]
c0001fe2:	81 fa 7f ff 10 00    	cmp    edx,0x10ff7f
c0001fe8:	77 26                	ja     c0002010 <tchar2uni+0xc2>
c0001fea:	3d ff ff 00 00       	cmp    eax,0xffff
c0001fef:	76 1b                	jbe    c000200c <tchar2uni+0xbe>
c0001ff1:	8d 88 00 00 ff ff    	lea    ecx,[eax-0x10000]
c0001ff7:	25 ff 03 00 00       	and    eax,0x3ff
c0001ffc:	c1 e1 06             	shl    ecx,0x6
c0001fff:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002005:	09 c8                	or     eax,ecx
c0002007:	0d 00 dc 00 d8       	or     eax,0xd800dc00
c000200c:	89 3e                	mov    DWORD PTR [esi],edi
c000200e:	eb 03                	jmp    c0002013 <tchar2uni+0xc5>
c0002010:	83 c8 ff             	or     eax,0xffffffff
c0002013:	5a                   	pop    edx
c0002014:	5b                   	pop    ebx
c0002015:	5e                   	pop    esi
c0002016:	5f                   	pop    edi
c0002017:	c3                   	ret    

c0002018 <put_utf>:
c0002018:	53                   	push   ebx
c0002019:	89 d3                	mov    ebx,edx
c000201b:	31 d2                	xor    edx,edx
c000201d:	83 f8 7f             	cmp    eax,0x7f
c0002020:	77 11                	ja     c0002033 <put_utf+0x1b>
c0002022:	85 c9                	test   ecx,ecx
c0002024:	0f 84 da 00 00 00    	je     c0002104 <put_utf+0xec>
c000202a:	88 03                	mov    BYTE PTR [ebx],al
c000202c:	b2 01                	mov    dl,0x1
c000202e:	e9 d1 00 00 00       	jmp    c0002104 <put_utf+0xec>
c0002033:	3d ff 07 00 00       	cmp    eax,0x7ff
c0002038:	77 21                	ja     c000205b <put_utf+0x43>
c000203a:	83 f9 01             	cmp    ecx,0x1
c000203d:	0f 86 c1 00 00 00    	jbe    c0002104 <put_utf+0xec>
c0002043:	89 c2                	mov    edx,eax
c0002045:	24 3f                	and    al,0x3f
c0002047:	c1 ea 06             	shr    edx,0x6
c000204a:	0c 80                	or     al,0x80
c000204c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000204f:	80 ca c0             	or     dl,0xc0
c0002052:	88 13                	mov    BYTE PTR [ebx],dl
c0002054:	b2 02                	mov    dl,0x2
c0002056:	e9 a9 00 00 00       	jmp    c0002104 <put_utf+0xec>
c000205b:	3d ff ff 00 00       	cmp    eax,0xffff
c0002060:	77 3e                	ja     c00020a0 <put_utf+0x88>
c0002062:	83 f9 02             	cmp    ecx,0x2
c0002065:	0f 86 99 00 00 00    	jbe    c0002104 <put_utf+0xec>
c000206b:	8d 88 00 28 ff ff    	lea    ecx,[eax-0xd800]
c0002071:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002077:	0f 86 87 00 00 00    	jbe    c0002104 <put_utf+0xec>
c000207d:	89 c2                	mov    edx,eax
c000207f:	c1 ea 0c             	shr    edx,0xc
c0002082:	80 ca e0             	or     dl,0xe0
c0002085:	88 13                	mov    BYTE PTR [ebx],dl
c0002087:	89 c2                	mov    edx,eax
c0002089:	24 3f                	and    al,0x3f
c000208b:	c1 ea 06             	shr    edx,0x6
c000208e:	0c 80                	or     al,0x80
c0002090:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0002093:	80 e2 3f             	and    dl,0x3f
c0002096:	80 ca 80             	or     dl,0x80
c0002099:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c000209c:	b2 03                	mov    dl,0x3
c000209e:	eb 64                	jmp    c0002104 <put_utf+0xec>
c00020a0:	83 f9 03             	cmp    ecx,0x3
c00020a3:	76 5f                	jbe    c0002104 <put_utf+0xec>
c00020a5:	89 c2                	mov    edx,eax
c00020a7:	0f b7 c0             	movzx  eax,ax
c00020aa:	66 31 d2             	xor    dx,dx
c00020ad:	2d 00 dc 00 00       	sub    eax,0xdc00
c00020b2:	81 c2 00 00 00 28    	add    edx,0x28000000
c00020b8:	c1 ea 06             	shr    edx,0x6
c00020bb:	81 fa ff ff 0f 00    	cmp    edx,0xfffff
c00020c1:	77 3f                	ja     c0002102 <put_utf+0xea>
c00020c3:	3d ff 03 00 00       	cmp    eax,0x3ff
c00020c8:	77 38                	ja     c0002102 <put_utf+0xea>
c00020ca:	09 d0                	or     eax,edx
c00020cc:	05 00 00 01 00       	add    eax,0x10000
c00020d1:	89 c2                	mov    edx,eax
c00020d3:	c1 ea 12             	shr    edx,0x12
c00020d6:	80 ca f0             	or     dl,0xf0
c00020d9:	88 13                	mov    BYTE PTR [ebx],dl
c00020db:	89 c2                	mov    edx,eax
c00020dd:	c1 ea 0c             	shr    edx,0xc
c00020e0:	80 e2 3f             	and    dl,0x3f
c00020e3:	80 ca 80             	or     dl,0x80
c00020e6:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
c00020e9:	89 c2                	mov    edx,eax
c00020eb:	24 3f                	and    al,0x3f
c00020ed:	c1 ea 06             	shr    edx,0x6
c00020f0:	0c 80                	or     al,0x80
c00020f2:	88 43 03             	mov    BYTE PTR [ebx+0x3],al
c00020f5:	80 e2 3f             	and    dl,0x3f
c00020f8:	80 ca 80             	or     dl,0x80
c00020fb:	88 53 02             	mov    BYTE PTR [ebx+0x2],dl
c00020fe:	b2 04                	mov    dl,0x4
c0002100:	eb 02                	jmp    c0002104 <put_utf+0xec>
c0002102:	31 d2                	xor    edx,edx
c0002104:	5b                   	pop    ebx
c0002105:	88 d0                	mov    al,dl
c0002107:	c3                   	ret    

c0002108 <clst2sect>:
c0002108:	8d 4a fe             	lea    ecx,[edx-0x2]
c000210b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000210e:	83 ea 02             	sub    edx,0x2
c0002111:	39 ca                	cmp    edx,ecx
c0002113:	76 0d                	jbe    c0002122 <clst2sect+0x1a>
c0002115:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002119:	0f af d1             	imul   edx,ecx
c000211c:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000211f:	89 d0                	mov    eax,edx
c0002121:	c3                   	ret    
c0002122:	31 c0                	xor    eax,eax
c0002124:	c3                   	ret    

c0002125 <pick_lfn>:
c0002125:	55                   	push   ebp
c0002126:	57                   	push   edi
c0002127:	89 d7                	mov    edi,edx
c0002129:	56                   	push   esi
c000212a:	53                   	push   ebx
c000212b:	89 c3                	mov    ebx,eax
c000212d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002130:	e8 94 fd ff ff       	call   c0001ec9 <ld_word>
c0002135:	66 85 c0             	test   ax,ax
c0002138:	74 04                	je     c000213e <pick_lfn+0x19>
c000213a:	31 c0                	xor    eax,eax
c000213c:	eb 65                	jmp    c00021a3 <pick_lfn+0x7e>
c000213e:	0f b6 0f             	movzx  ecx,BYTE PTR [edi]
c0002141:	be 01 00 00 00       	mov    esi,0x1
c0002146:	31 ed                	xor    ebp,ebp
c0002148:	83 e1 bf             	and    ecx,0xffffffbf
c000214b:	49                   	dec    ecx
c000214c:	6b c9 0d             	imul   ecx,ecx,0xd
c000214f:	0f b6 85 e0 f2 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0d20]
c0002156:	01 f8                	add    eax,edi
c0002158:	e8 6c fd ff ff       	call   c0001ec9 <ld_word>
c000215d:	85 f6                	test   esi,esi
c000215f:	0f b7 d0             	movzx  edx,ax
c0002162:	74 11                	je     c0002175 <pick_lfn+0x50>
c0002164:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000216a:	77 ce                	ja     c000213a <pick_lfn+0x15>
c000216c:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0002170:	89 d6                	mov    esi,edx
c0002172:	41                   	inc    ecx
c0002173:	eb 08                	jmp    c000217d <pick_lfn+0x58>
c0002175:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000217b:	75 bd                	jne    c000213a <pick_lfn+0x15>
c000217d:	45                   	inc    ebp
c000217e:	83 fd 0d             	cmp    ebp,0xd
c0002181:	75 cc                	jne    c000214f <pick_lfn+0x2a>
c0002183:	8a 07                	mov    al,BYTE PTR [edi]
c0002185:	c0 e8 06             	shr    al,0x6
c0002188:	24 01                	and    al,0x1
c000218a:	74 12                	je     c000219e <pick_lfn+0x79>
c000218c:	85 f6                	test   esi,esi
c000218e:	74 0e                	je     c000219e <pick_lfn+0x79>
c0002190:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002196:	77 a2                	ja     c000213a <pick_lfn+0x15>
c0002198:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000219e:	b8 01 00 00 00       	mov    eax,0x1
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	5f                   	pop    edi
c00021a6:	5d                   	pop    ebp
c00021a7:	c3                   	ret    

c00021a8 <put_lfn>:
c00021a8:	55                   	push   ebp
c00021a9:	31 ed                	xor    ebp,ebp
c00021ab:	57                   	push   edi
c00021ac:	89 d7                	mov    edi,edx
c00021ae:	56                   	push   esi
c00021af:	31 f6                	xor    esi,esi
c00021b1:	53                   	push   ebx
c00021b2:	53                   	push   ebx
c00021b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00021b6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00021ba:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00021c0:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00021c3:	8d 42 1a             	lea    eax,[edx+0x1a]
c00021c6:	31 d2                	xor    edx,edx
c00021c8:	e8 21 fd ff ff       	call   c0001eee <st_word>
c00021cd:	0f b6 d9             	movzx  ebx,cl
c00021d0:	4b                   	dec    ebx
c00021d1:	6b db 0d             	imul   ebx,ebx,0xd
c00021d4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00021da:	74 08                	je     c00021e4 <put_lfn+0x3c>
c00021dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00021df:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00021e3:	43                   	inc    ebx
c00021e4:	0f b6 85 e0 f2 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0d20]
c00021eb:	89 f2                	mov    edx,esi
c00021ed:	01 f8                	add    eax,edi
c00021ef:	e8 fa fc ff ff       	call   c0001eee <st_word>
c00021f4:	85 f6                	test   esi,esi
c00021f6:	75 05                	jne    c00021fd <put_lfn+0x55>
c00021f8:	be ff ff 00 00       	mov    esi,0xffff
c00021fd:	45                   	inc    ebp
c00021fe:	83 fd 0d             	cmp    ebp,0xd
c0002201:	75 d1                	jne    c00021d4 <put_lfn+0x2c>
c0002203:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002209:	74 0a                	je     c0002215 <put_lfn+0x6d>
c000220b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000220e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002213:	75 03                	jne    c0002218 <put_lfn+0x70>
c0002215:	80 c9 40             	or     cl,0x40
c0002218:	88 0f                	mov    BYTE PTR [edi],cl
c000221a:	58                   	pop    eax
c000221b:	5b                   	pop    ebx
c000221c:	5e                   	pop    esi
c000221d:	5f                   	pop    edi
c000221e:	5d                   	pop    ebp
c000221f:	c3                   	ret    

c0002220 <gen_numname>:
c0002220:	57                   	push   edi
c0002221:	89 cf                	mov    edi,ecx
c0002223:	56                   	push   esi
c0002224:	b9 0b 00 00 00       	mov    ecx,0xb
c0002229:	53                   	push   ebx
c000222a:	89 c6                	mov    esi,eax
c000222c:	83 ec 10             	sub    esp,0x10
c000222f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002233:	e8 bd fc ff ff       	call   c0001ef5 <mem_cpy>
c0002238:	83 fb 05             	cmp    ebx,0x5
c000223b:	76 2b                	jbe    c0002268 <gen_numname+0x48>
c000223d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c0002240:	85 c0                	test   eax,eax
c0002242:	74 24                	je     c0002268 <gen_numname+0x48>
c0002244:	83 c7 02             	add    edi,0x2
c0002247:	ba 10 00 00 00       	mov    edx,0x10
c000224c:	89 c1                	mov    ecx,eax
c000224e:	01 db                	add    ebx,ebx
c0002250:	d1 e8                	shr    eax,1
c0002252:	83 e1 01             	and    ecx,0x1
c0002255:	01 cb                	add    ebx,ecx
c0002257:	0f ba e3 10          	bt     ebx,0x10
c000225b:	73 06                	jae    c0002263 <gen_numname+0x43>
c000225d:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002263:	4a                   	dec    edx
c0002264:	75 e6                	jne    c000224c <gen_numname+0x2c>
c0002266:	eb d5                	jmp    c000223d <gen_numname+0x1d>
c0002268:	bf 07 00 00 00       	mov    edi,0x7
c000226d:	88 da                	mov    dl,bl
c000226f:	80 e2 0f             	and    dl,0xf
c0002272:	88 d0                	mov    al,dl
c0002274:	04 30                	add    al,0x30
c0002276:	3c 39                	cmp    al,0x39
c0002278:	76 04                	jbe    c000227e <gen_numname+0x5e>
c000227a:	88 d0                	mov    al,dl
c000227c:	04 37                	add    al,0x37
c000227e:	8d 4f ff             	lea    ecx,[edi-0x1]
c0002281:	88 44 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],al
c0002285:	89 d8                	mov    eax,ebx
c0002287:	c1 e8 04             	shr    eax,0x4
c000228a:	83 fb 0f             	cmp    ebx,0xf
c000228d:	76 06                	jbe    c0002295 <gen_numname+0x75>
c000228f:	89 cf                	mov    edi,ecx
c0002291:	89 c3                	mov    ebx,eax
c0002293:	eb d8                	jmp    c000226d <gen_numname+0x4d>
c0002295:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000229a:	31 d2                	xor    edx,edx
c000229c:	83 ef 02             	sub    edi,0x2
c000229f:	8d 04 16             	lea    eax,[esi+edx*1]
c00022a2:	39 ca                	cmp    edx,ecx
c00022a4:	73 18                	jae    c00022be <gen_numname+0x9e>
c00022a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00022a9:	3c 20                	cmp    al,0x20
c00022ab:	74 11                	je     c00022be <gen_numname+0x9e>
c00022ad:	e8 96 fc ff ff       	call   c0001f48 <dbc_1st>
c00022b2:	85 c0                	test   eax,eax
c00022b4:	74 05                	je     c00022bb <gen_numname+0x9b>
c00022b6:	39 d7                	cmp    edi,edx
c00022b8:	74 04                	je     c00022be <gen_numname+0x9e>
c00022ba:	42                   	inc    edx
c00022bb:	42                   	inc    edx
c00022bc:	eb e1                	jmp    c000229f <gen_numname+0x7f>
c00022be:	83 f9 07             	cmp    ecx,0x7
c00022c1:	b0 20                	mov    al,0x20
c00022c3:	77 05                	ja     c00022ca <gen_numname+0xaa>
c00022c5:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00022c9:	41                   	inc    ecx
c00022ca:	42                   	inc    edx
c00022cb:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00022cf:	83 fa 07             	cmp    edx,0x7
c00022d2:	76 ea                	jbe    c00022be <gen_numname+0x9e>
c00022d4:	83 c4 10             	add    esp,0x10
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	5f                   	pop    edi
c00022da:	c3                   	ret    

c00022db <sum_sfn>:
c00022db:	31 c9                	xor    ecx,ecx
c00022dd:	31 d2                	xor    edx,edx
c00022df:	d0 ca                	ror    dl,1
c00022e1:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00022e4:	41                   	inc    ecx
c00022e5:	83 f9 0b             	cmp    ecx,0xb
c00022e8:	75 f5                	jne    c00022df <sum_sfn+0x4>
c00022ea:	88 d0                	mov    al,dl
c00022ec:	c3                   	ret    

c00022ed <get_ldnumber>:
c00022ed:	57                   	push   edi
c00022ee:	56                   	push   esi
c00022ef:	83 ce ff             	or     esi,0xffffffff
c00022f2:	53                   	push   ebx
c00022f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00022f5:	85 d2                	test   edx,edx
c00022f7:	74 33                	je     c000232c <get_ldnumber+0x3f>
c00022f9:	89 c7                	mov    edi,eax
c00022fb:	89 d1                	mov    ecx,edx
c00022fd:	41                   	inc    ecx
c00022fe:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0002301:	80 fb 1f             	cmp    bl,0x1f
c0002304:	76 05                	jbe    c000230b <get_ldnumber+0x1e>
c0002306:	80 fb 3a             	cmp    bl,0x3a
c0002309:	75 f2                	jne    c00022fd <get_ldnumber+0x10>
c000230b:	31 f6                	xor    esi,esi
c000230d:	80 fb 3a             	cmp    bl,0x3a
c0002310:	75 1a                	jne    c000232c <get_ldnumber+0x3f>
c0002312:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0002315:	83 ce ff             	or     esi,0xffffffff
c0002318:	88 d8                	mov    al,bl
c000231a:	2c 30                	sub    al,0x30
c000231c:	3c 09                	cmp    al,0x9
c000231e:	77 0c                	ja     c000232c <get_ldnumber+0x3f>
c0002320:	83 c2 02             	add    edx,0x2
c0002323:	39 d1                	cmp    ecx,edx
c0002325:	75 05                	jne    c000232c <get_ldnumber+0x3f>
c0002327:	89 0f                	mov    DWORD PTR [edi],ecx
c0002329:	8d 73 d0             	lea    esi,[ebx-0x30]
c000232c:	5b                   	pop    ebx
c000232d:	89 f0                	mov    eax,esi
c000232f:	5e                   	pop    esi
c0002330:	5f                   	pop    edi
c0002331:	c3                   	ret    

c0002332 <validate>:
c0002332:	56                   	push   esi
c0002333:	85 c0                	test   eax,eax
c0002335:	53                   	push   ebx
c0002336:	89 d6                	mov    esi,edx
c0002338:	51                   	push   ecx
c0002339:	75 09                	jne    c0002344 <validate+0x12>
c000233b:	b8 09 00 00 00       	mov    eax,0x9
c0002340:	31 d2                	xor    edx,edx
c0002342:	eb 30                	jmp    c0002374 <validate+0x42>
c0002344:	89 c3                	mov    ebx,eax
c0002346:	8b 00                	mov    eax,DWORD PTR [eax]
c0002348:	85 c0                	test   eax,eax
c000234a:	74 ef                	je     c000233b <validate+0x9>
c000234c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000234f:	74 ea                	je     c000233b <validate+0x9>
c0002351:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0002354:	66 39 48 06          	cmp    WORD PTR [eax+0x6],cx
c0002358:	75 e1                	jne    c000233b <validate+0x9>
c000235a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235e:	83 ec 0c             	sub    esp,0xc
c0002361:	50                   	push   eax
c0002362:	e8 11 fb ff ff       	call   c0001e78 <disk_status>
c0002367:	83 c4 10             	add    esp,0x10
c000236a:	24 01                	and    al,0x1
c000236c:	84 c0                	test   al,al
c000236e:	75 cb                	jne    c000233b <validate+0x9>
c0002370:	8b 13                	mov    edx,DWORD PTR [ebx]
c0002372:	31 c0                	xor    eax,eax
c0002374:	89 16                	mov    DWORD PTR [esi],edx
c0002376:	5a                   	pop    edx
c0002377:	5b                   	pop    ebx
c0002378:	5e                   	pop    esi
c0002379:	c3                   	ret    

c000237a <sync_window>:
c000237a:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000237e:	74 58                	je     c00023d8 <sync_window+0x5e>
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	51                   	push   ecx
c0002385:	6a 01                	push   0x1
c0002387:	ff 70 30             	push   DWORD PTR [eax+0x30]
c000238a:	8d 70 34             	lea    esi,[eax+0x34]
c000238d:	56                   	push   esi
c000238e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002392:	50                   	push   eax
c0002393:	e8 fc fa ff ff       	call   c0001e94 <disk_write>
c0002398:	83 c4 10             	add    esp,0x10
c000239b:	ba 01 00 00 00       	mov    edx,0x1
c00023a0:	85 c0                	test   eax,eax
c00023a2:	75 2e                	jne    c00023d2 <sync_window+0x58>
c00023a4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023a8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00023ab:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00023ae:	89 c1                	mov    ecx,eax
c00023b0:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00023b3:	39 d1                	cmp    ecx,edx
c00023b5:	73 19                	jae    c00023d0 <sync_window+0x56>
c00023b7:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023bb:	75 13                	jne    c00023d0 <sync_window+0x56>
c00023bd:	6a 01                	push   0x1
c00023bf:	01 d0                	add    eax,edx
c00023c1:	50                   	push   eax
c00023c2:	56                   	push   esi
c00023c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023c7:	50                   	push   eax
c00023c8:	e8 c7 fa ff ff       	call   c0001e94 <disk_write>
c00023cd:	83 c4 10             	add    esp,0x10
c00023d0:	31 d2                	xor    edx,edx
c00023d2:	89 d0                	mov    eax,edx
c00023d4:	5a                   	pop    edx
c00023d5:	5b                   	pop    ebx
c00023d6:	5e                   	pop    esi
c00023d7:	c3                   	ret    
c00023d8:	31 d2                	xor    edx,edx
c00023da:	89 d0                	mov    eax,edx
c00023dc:	c3                   	ret    

c00023dd <move_window>:
c00023dd:	57                   	push   edi
c00023de:	56                   	push   esi
c00023df:	53                   	push   ebx
c00023e0:	31 db                	xor    ebx,ebx
c00023e2:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c00023e5:	74 38                	je     c000241f <move_window+0x42>
c00023e7:	89 c6                	mov    esi,eax
c00023e9:	89 d7                	mov    edi,edx
c00023eb:	e8 8a ff ff ff       	call   c000237a <sync_window>
c00023f0:	85 c0                	test   eax,eax
c00023f2:	89 c3                	mov    ebx,eax
c00023f4:	75 29                	jne    c000241f <move_window+0x42>
c00023f6:	6a 01                	push   0x1
c00023f8:	57                   	push   edi
c00023f9:	8d 46 34             	lea    eax,[esi+0x34]
c00023fc:	50                   	push   eax
c00023fd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002401:	50                   	push   eax
c0002402:	e8 77 fa ff ff       	call   c0001e7e <disk_read>
c0002407:	83 c4 10             	add    esp,0x10
c000240a:	ba 01 00 00 00       	mov    edx,0x1
c000240f:	85 c0                	test   eax,eax
c0002411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0002416:	0f 45 f8             	cmovne edi,eax
c0002419:	0f 45 da             	cmovne ebx,edx
c000241c:	89 7e 30             	mov    DWORD PTR [esi+0x30],edi
c000241f:	89 d8                	mov    eax,ebx
c0002421:	5b                   	pop    ebx
c0002422:	5e                   	pop    esi
c0002423:	5f                   	pop    edi
c0002424:	c3                   	ret    

c0002425 <check_fs>:
c0002425:	53                   	push   ebx
c0002426:	89 c3                	mov    ebx,eax
c0002428:	83 ec 08             	sub    esp,0x8
c000242b:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000242f:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002436:	e8 a2 ff ff ff       	call   c00023dd <move_window>
c000243b:	ba 04 00 00 00       	mov    edx,0x4
c0002440:	85 c0                	test   eax,eax
c0002442:	75 6a                	jne    c00024ae <check_fs+0x89>
c0002444:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000244a:	e8 7a fa ff ff       	call   c0001ec9 <ld_word>
c000244f:	ba 03 00 00 00       	mov    edx,0x3
c0002454:	66 3d 55 aa          	cmp    ax,0xaa55
c0002458:	75 54                	jne    c00024ae <check_fs+0x89>
c000245a:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c000245d:	88 c2                	mov    dl,al
c000245f:	80 c2 18             	add    dl,0x18
c0002462:	80 fa 01             	cmp    dl,0x1
c0002465:	76 09                	jbe    c0002470 <check_fs+0x4b>
c0002467:	3c eb                	cmp    al,0xeb
c0002469:	ba 02 00 00 00       	mov    edx,0x2
c000246e:	75 3e                	jne    c00024ae <check_fs+0x89>
c0002470:	ba f4 13 02 c0       	mov    edx,0xc00213f4
c0002475:	b9 03 00 00 00       	mov    ecx,0x3
c000247a:	8d 43 6a             	lea    eax,[ebx+0x6a]
c000247d:	e8 92 fa ff ff       	call   c0001f14 <mem_cmp>
c0002482:	31 d2                	xor    edx,edx
c0002484:	85 c0                	test   eax,eax
c0002486:	74 26                	je     c00024ae <check_fs+0x89>
c0002488:	ba 9c f1 01 c0       	mov    edx,0xc001f19c
c000248d:	b9 05 00 00 00       	mov    ecx,0x5
c0002492:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002498:	e8 77 fa ff ff       	call   c0001f14 <mem_cmp>
c000249d:	31 d2                	xor    edx,edx
c000249f:	85 c0                	test   eax,eax
c00024a1:	74 0b                	je     c00024ae <check_fs+0x89>
c00024a3:	31 d2                	xor    edx,edx
c00024a5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00024a9:	0f 95 c2             	setne  dl
c00024ac:	01 d2                	add    edx,edx
c00024ae:	83 c4 08             	add    esp,0x8
c00024b1:	89 d0                	mov    eax,edx
c00024b3:	5b                   	pop    ebx
c00024b4:	c3                   	ret    

c00024b5 <find_volume>:
c00024b5:	55                   	push   ebp
c00024b6:	57                   	push   edi
c00024b7:	89 c7                	mov    edi,eax
c00024b9:	56                   	push   esi
c00024ba:	89 d6                	mov    esi,edx
c00024bc:	53                   	push   ebx
c00024bd:	31 d2                	xor    edx,edx
c00024bf:	83 ec 2c             	sub    esp,0x2c
c00024c2:	e8 5e ff ff ff       	call   c0002425 <check_fs>
c00024c7:	85 f6                	test   esi,esi
c00024c9:	0f 94 c3             	sete   bl
c00024cc:	83 f8 02             	cmp    eax,0x2
c00024cf:	74 06                	je     c00024d7 <find_volume+0x22>
c00024d1:	77 5f                	ja     c0002532 <find_volume+0x7d>
c00024d3:	84 db                	test   bl,bl
c00024d5:	75 5b                	jne    c0002532 <find_volume+0x7d>
c00024d7:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c00024dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024e1:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c00024e7:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c00024eb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024ef:	89 e8                	mov    eax,ebp
c00024f1:	83 c5 10             	add    ebp,0x10
c00024f4:	e8 dd f9 ff ff       	call   c0001ed6 <ld_dword>
c00024f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024fd:	83 c1 04             	add    ecx,0x4
c0002500:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002503:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002507:	75 e2                	jne    c00024eb <find_volume+0x36>
c0002509:	83 fe 01             	cmp    esi,0x1
c000250c:	83 d6 ff             	adc    esi,0xffffffff
c000250f:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002513:	b8 03 00 00 00       	mov    eax,0x3
c0002518:	85 d2                	test   edx,edx
c000251a:	74 07                	je     c0002523 <find_volume+0x6e>
c000251c:	89 f8                	mov    eax,edi
c000251e:	e8 02 ff ff ff       	call   c0002425 <check_fs>
c0002523:	83 f8 01             	cmp    eax,0x1
c0002526:	76 0a                	jbe    c0002532 <find_volume+0x7d>
c0002528:	84 db                	test   bl,bl
c000252a:	74 06                	je     c0002532 <find_volume+0x7d>
c000252c:	46                   	inc    esi
c000252d:	83 fe 03             	cmp    esi,0x3
c0002530:	76 dd                	jbe    c000250f <find_volume+0x5a>
c0002532:	83 c4 2c             	add    esp,0x2c
c0002535:	5b                   	pop    ebx
c0002536:	5e                   	pop    esi
c0002537:	5f                   	pop    edi
c0002538:	5d                   	pop    ebp
c0002539:	c3                   	ret    

c000253a <mount_volume>:
c000253a:	55                   	push   ebp
c000253b:	89 d5                	mov    ebp,edx
c000253d:	57                   	push   edi
c000253e:	bf 0b 00 00 00       	mov    edi,0xb
c0002543:	56                   	push   esi
c0002544:	53                   	push   ebx
c0002545:	88 cb                	mov    bl,cl
c0002547:	83 ec 2c             	sub    esp,0x2c
c000254a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002550:	e8 98 fd ff ff       	call   c00022ed <get_ldnumber>
c0002555:	85 c0                	test   eax,eax
c0002557:	0f 88 d0 02 00 00    	js     c000282d <mount_volume+0x2f3>
c000255d:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c0002564:	89 c1                	mov    ecx,eax
c0002566:	bf 0c 00 00 00       	mov    edi,0xc
c000256b:	85 f6                	test   esi,esi
c000256d:	0f 84 ba 02 00 00    	je     c000282d <mount_volume+0x2f3>
c0002573:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002576:	80 e3 fe             	and    bl,0xfe
c0002579:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000257c:	74 3d                	je     c00025bb <mount_volume+0x81>
c000257e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002582:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002586:	83 ec 0c             	sub    esp,0xc
c0002589:	50                   	push   eax
c000258a:	e8 e9 f8 ff ff       	call   c0001e78 <disk_status>
c000258f:	83 c4 10             	add    esp,0x10
c0002592:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002596:	88 c2                	mov    dl,al
c0002598:	24 01                	and    al,0x1
c000259a:	84 c0                	test   al,al
c000259c:	75 1d                	jne    c00025bb <mount_volume+0x81>
c000259e:	31 ff                	xor    edi,edi
c00025a0:	84 db                	test   bl,bl
c00025a2:	0f 84 85 02 00 00    	je     c000282d <mount_volume+0x2f3>
c00025a8:	80 e2 04             	and    dl,0x4
c00025ab:	0f 84 7c 02 00 00    	je     c000282d <mount_volume+0x2f3>
c00025b1:	bf 0a 00 00 00       	mov    edi,0xa
c00025b6:	e9 72 02 00 00       	jmp    c000282d <mount_volume+0x2f3>
c00025bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00025be:	83 ec 0c             	sub    esp,0xc
c00025c1:	0f b6 c9             	movzx  ecx,cl
c00025c4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00025c7:	bf 03 00 00 00       	mov    edi,0x3
c00025cc:	51                   	push   ecx
c00025cd:	e8 a9 f8 ff ff       	call   c0001e7b <disk_initialize>
c00025d2:	83 c4 10             	add    esp,0x10
c00025d5:	88 c1                	mov    cl,al
c00025d7:	80 e1 01             	and    cl,0x1
c00025da:	84 c9                	test   cl,cl
c00025dc:	0f 85 4b 02 00 00    	jne    c000282d <mount_volume+0x2f3>
c00025e2:	84 db                	test   bl,bl
c00025e4:	74 04                	je     c00025ea <mount_volume+0xb0>
c00025e6:	24 04                	and    al,0x4
c00025e8:	75 c7                	jne    c00025b1 <mount_volume+0x77>
c00025ea:	31 d2                	xor    edx,edx
c00025ec:	89 f0                	mov    eax,esi
c00025ee:	e8 c2 fe ff ff       	call   c00024b5 <find_volume>
c00025f3:	bf 01 00 00 00       	mov    edi,0x1
c00025f8:	83 f8 04             	cmp    eax,0x4
c00025fb:	0f 84 2c 02 00 00    	je     c000282d <mount_volume+0x2f3>
c0002601:	83 f8 01             	cmp    eax,0x1
c0002604:	76 0a                	jbe    c0002610 <mount_volume+0xd6>
c0002606:	bf 0d 00 00 00       	mov    edi,0xd
c000260b:	e9 1d 02 00 00       	jmp    c000282d <mount_volume+0x2f3>
c0002610:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002613:	e8 b1 f8 ff ff       	call   c0001ec9 <ld_word>
c0002618:	66 3d 00 02          	cmp    ax,0x200
c000261c:	75 e8                	jne    c0002606 <mount_volume+0xcc>
c000261e:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002621:	e8 a3 f8 ff ff       	call   c0001ec9 <ld_word>
c0002626:	0f b7 e8             	movzx  ebp,ax
c0002629:	85 ed                	test   ebp,ebp
c000262b:	75 0a                	jne    c0002637 <mount_volume+0xfd>
c000262d:	8d 46 58             	lea    eax,[esi+0x58]
c0002630:	e8 a1 f8 ff ff       	call   c0001ed6 <ld_dword>
c0002635:	89 c5                	mov    ebp,eax
c0002637:	89 6e 1c             	mov    DWORD PTR [esi+0x1c],ebp
c000263a:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000263d:	0f b6 5e 44          	movzx  ebx,BYTE PTR [esi+0x44]
c0002641:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002645:	88 5e 02             	mov    BYTE PTR [esi+0x2],bl
c0002648:	88 d8                	mov    al,bl
c000264a:	fe c8                	dec    al
c000264c:	3c 01                	cmp    al,0x1
c000264e:	77 b6                	ja     c0002606 <mount_volume+0xcc>
c0002650:	0f b6 56 41          	movzx  edx,BYTE PTR [esi+0x41]
c0002654:	66 89 56 0a          	mov    WORD PTR [esi+0xa],dx
c0002658:	66 85 d2             	test   dx,dx
c000265b:	74 a9                	je     c0002606 <mount_volume+0xcc>
c000265d:	0f b6 fa             	movzx  edi,dl
c0002660:	8d 47 ff             	lea    eax,[edi-0x1]
c0002663:	85 f8                	test   eax,edi
c0002665:	75 9f                	jne    c0002606 <mount_volume+0xcc>
c0002667:	8d 46 45             	lea    eax,[esi+0x45]
c000266a:	e8 5a f8 ff ff       	call   c0001ec9 <ld_word>
c000266f:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002673:	0f b7 d0             	movzx  edx,ax
c0002676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000267a:	f6 c2 0f             	test   dl,0xf
c000267d:	75 87                	jne    c0002606 <mount_volume+0xcc>
c000267f:	8d 46 47             	lea    eax,[esi+0x47]
c0002682:	e8 42 f8 ff ff       	call   c0001ec9 <ld_word>
c0002687:	0f b7 d0             	movzx  edx,ax
c000268a:	85 d2                	test   edx,edx
c000268c:	75 0a                	jne    c0002698 <mount_volume+0x15e>
c000268e:	8d 46 54             	lea    eax,[esi+0x54]
c0002691:	e8 40 f8 ff ff       	call   c0001ed6 <ld_dword>
c0002696:	89 c2                	mov    edx,eax
c0002698:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000269c:	8d 46 42             	lea    eax,[esi+0x42]
c000269f:	e8 25 f8 ff ff       	call   c0001ec9 <ld_word>
c00026a4:	0f b7 c0             	movzx  eax,ax
c00026a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00026ab:	85 c0                	test   eax,eax
c00026ad:	0f 84 53 ff ff ff    	je     c0002606 <mount_volume+0xcc>
c00026b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026b7:	0f af dd             	imul   ebx,ebp
c00026ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00026be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00026c2:	c1 e9 04             	shr    ecx,0x4
c00026c5:	01 d9                	add    ecx,ebx
c00026c7:	01 c1                	add    ecx,eax
c00026c9:	39 ca                	cmp    edx,ecx
c00026cb:	0f 82 35 ff ff ff    	jb     c0002606 <mount_volume+0xcc>
c00026d1:	89 d3                	mov    ebx,edx
c00026d3:	31 d2                	xor    edx,edx
c00026d5:	29 cb                	sub    ebx,ecx
c00026d7:	89 d8                	mov    eax,ebx
c00026d9:	f7 f7                	div    edi
c00026db:	39 fb                	cmp    ebx,edi
c00026dd:	0f 82 23 ff ff ff    	jb     c0002606 <mount_volume+0xcc>
c00026e3:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026e8:	0f 87 18 ff ff ff    	ja     c0002606 <mount_volume+0xcc>
c00026ee:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026f3:	0f 86 25 01 00 00    	jbe    c000281e <mount_volume+0x2e4>
c00026f9:	bb 03 00 00 00       	mov    ebx,0x3
c00026fe:	8d 78 02             	lea    edi,[eax+0x2]
c0002701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002705:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0002709:	89 7e 18             	mov    DWORD PTR [esi+0x18],edi
c000270c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000270f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002713:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002717:	83 fb 03             	cmp    ebx,0x3
c000271a:	89 4e 2c             	mov    DWORD PTR [esi+0x2c],ecx
c000271d:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002720:	75 27                	jne    c0002749 <mount_volume+0x20f>
c0002722:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002725:	e8 9f f7 ff ff       	call   c0001ec9 <ld_word>
c000272a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000272e:	0f b7 c0             	movzx  eax,ax
c0002731:	09 c1                	or     ecx,eax
c0002733:	0f 85 cd fe ff ff    	jne    c0002606 <mount_volume+0xcc>
c0002739:	8d 46 60             	lea    eax,[esi+0x60]
c000273c:	e8 95 f7 ff ff       	call   c0001ed6 <ld_dword>
c0002741:	c1 e7 02             	shl    edi,0x2
c0002744:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002747:	eb 25                	jmp    c000276e <mount_volume+0x234>
c0002749:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000274e:	0f 84 b2 fe ff ff    	je     c0002606 <mount_volume+0xcc>
c0002754:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002758:	8d 14 7f             	lea    edx,[edi+edi*2]
c000275b:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000275e:	83 e7 01             	and    edi,0x1
c0002761:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002764:	d1 ea                	shr    edx,1
c0002766:	01 d7                	add    edi,edx
c0002768:	83 fb 02             	cmp    ebx,0x2
c000276b:	0f 44 f9             	cmove  edi,ecx
c000276e:	81 c7 ff 01 00 00    	add    edi,0x1ff
c0002774:	c1 ef 09             	shr    edi,0x9
c0002777:	39 ef                	cmp    edi,ebp
c0002779:	0f 87 87 fe ff ff    	ja     c0002606 <mount_volume+0xcc>
c000277f:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002786:	83 fb 03             	cmp    ebx,0x3
c0002789:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002790:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002794:	75 6e                	jne    c0002804 <mount_volume+0x2ca>
c0002796:	8d 46 64             	lea    eax,[esi+0x64]
c0002799:	e8 2b f7 ff ff       	call   c0001ec9 <ld_word>
c000279e:	66 48                	dec    ax
c00027a0:	75 62                	jne    c0002804 <mount_volume+0x2ca>
c00027a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00027a6:	89 f0                	mov    eax,esi
c00027a8:	42                   	inc    edx
c00027a9:	e8 2f fc ff ff       	call   c00023dd <move_window>
c00027ae:	85 c0                	test   eax,eax
c00027b0:	75 52                	jne    c0002804 <mount_volume+0x2ca>
c00027b2:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00027b6:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00027bc:	e8 08 f7 ff ff       	call   c0001ec9 <ld_word>
c00027c1:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c5:	75 3d                	jne    c0002804 <mount_volume+0x2ca>
c00027c7:	8d 46 34             	lea    eax,[esi+0x34]
c00027ca:	e8 07 f7 ff ff       	call   c0001ed6 <ld_dword>
c00027cf:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d4:	75 2e                	jne    c0002804 <mount_volume+0x2ca>
c00027d6:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c00027dc:	e8 f5 f6 ff ff       	call   c0001ed6 <ld_dword>
c00027e1:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e6:	75 1c                	jne    c0002804 <mount_volume+0x2ca>
c00027e8:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c00027ee:	e8 e3 f6 ff ff       	call   c0001ed6 <ld_dword>
c00027f3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00027f6:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c00027fc:	e8 d5 f6 ff ff       	call   c0001ed6 <ld_dword>
c0002801:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002804:	88 1e                	mov    BYTE PTR [esi],bl
c0002806:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c000280c:	31 ff                	xor    edi,edi
c000280e:	40                   	inc    eax
c000280f:	0f b7 c0             	movzx  eax,ax
c0002812:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002818:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000281c:	eb 0f                	jmp    c000282d <mount_volume+0x2f3>
c000281e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002823:	19 db                	sbb    ebx,ebx
c0002825:	83 c3 02             	add    ebx,0x2
c0002828:	e9 d1 fe ff ff       	jmp    c00026fe <mount_volume+0x1c4>
c000282d:	83 c4 2c             	add    esp,0x2c
c0002830:	89 f8                	mov    eax,edi
c0002832:	5b                   	pop    ebx
c0002833:	5e                   	pop    esi
c0002834:	5f                   	pop    edi
c0002835:	5d                   	pop    ebp
c0002836:	c3                   	ret    

c0002837 <put_fat>:
c0002837:	55                   	push   ebp
c0002838:	bd 02 00 00 00       	mov    ebp,0x2
c000283d:	57                   	push   edi
c000283e:	56                   	push   esi
c000283f:	53                   	push   ebx
c0002840:	83 ec 1c             	sub    esp,0x1c
c0002843:	83 fa 01             	cmp    edx,0x1
c0002846:	0f 86 35 01 00 00    	jbe    c0002981 <put_fat+0x14a>
c000284c:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000284f:	0f 86 2c 01 00 00    	jbe    c0002981 <put_fat+0x14a>
c0002855:	89 c7                	mov    edi,eax
c0002857:	8a 00                	mov    al,BYTE PTR [eax]
c0002859:	89 cb                	mov    ebx,ecx
c000285b:	89 d6                	mov    esi,edx
c000285d:	3c 02                	cmp    al,0x2
c000285f:	0f 84 b0 00 00 00    	je     c0002915 <put_fat+0xde>
c0002865:	3c 03                	cmp    al,0x3
c0002867:	0f 84 d5 00 00 00    	je     c0002942 <put_fat+0x10b>
c000286d:	fe c8                	dec    al
c000286f:	0f 85 0c 01 00 00    	jne    c0002981 <put_fat+0x14a>
c0002875:	89 d1                	mov    ecx,edx
c0002877:	89 f8                	mov    eax,edi
c0002879:	d1 e9                	shr    ecx,1
c000287b:	01 d1                	add    ecx,edx
c000287d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002881:	89 ca                	mov    edx,ecx
c0002883:	c1 ea 09             	shr    edx,0x9
c0002886:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0002889:	e8 4f fb ff ff       	call   c00023dd <move_window>
c000288e:	85 c0                	test   eax,eax
c0002890:	89 c5                	mov    ebp,eax
c0002892:	0f 85 e9 00 00 00    	jne    c0002981 <put_fat+0x14a>
c0002898:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000289c:	8d 47 34             	lea    eax,[edi+0x34]
c000289f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00028a3:	8d 41 01             	lea    eax,[ecx+0x1]
c00028a6:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00028ac:	03 4c 24 04          	add    ecx,DWORD PTR [esp+0x4]
c00028b0:	83 e6 01             	and    esi,0x1
c00028b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00028b7:	88 d8                	mov    al,bl
c00028b9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00028bd:	74 0b                	je     c00028ca <put_fat+0x93>
c00028bf:	8a 01                	mov    al,BYTE PTR [ecx]
c00028c1:	89 da                	mov    edx,ebx
c00028c3:	c1 e2 04             	shl    edx,0x4
c00028c6:	24 0f                	and    al,0xf
c00028c8:	08 d0                	or     al,dl
c00028ca:	88 01                	mov    BYTE PTR [ecx],al
c00028cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028d0:	89 f8                	mov    eax,edi
c00028d2:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c00028d6:	c1 ea 09             	shr    edx,0x9
c00028d9:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00028dc:	e8 fc fa ff ff       	call   c00023dd <move_window>
c00028e1:	85 c0                	test   eax,eax
c00028e3:	89 c5                	mov    ebp,eax
c00028e5:	0f 85 96 00 00 00    	jne    c0002981 <put_fat+0x14a>
c00028eb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028ef:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00028f5:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c00028f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00028fe:	74 05                	je     c0002905 <put_fat+0xce>
c0002900:	c1 eb 04             	shr    ebx,0x4
c0002903:	eb 0c                	jmp    c0002911 <put_fat+0xda>
c0002905:	8a 06                	mov    al,BYTE PTR [esi]
c0002907:	c1 eb 08             	shr    ebx,0x8
c000290a:	80 e3 0f             	and    bl,0xf
c000290d:	24 f0                	and    al,0xf0
c000290f:	08 c3                	or     bl,al
c0002911:	88 1e                	mov    BYTE PTR [esi],bl
c0002913:	eb 27                	jmp    c000293c <put_fat+0x105>
c0002915:	c1 ea 08             	shr    edx,0x8
c0002918:	89 f8                	mov    eax,edi
c000291a:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000291d:	e8 bb fa ff ff       	call   c00023dd <move_window>
c0002922:	85 c0                	test   eax,eax
c0002924:	89 c5                	mov    ebp,eax
c0002926:	75 59                	jne    c0002981 <put_fat+0x14a>
c0002928:	01 f6                	add    esi,esi
c000292a:	0f b7 d3             	movzx  edx,bx
c000292d:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002933:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0002937:	e8 b2 f5 ff ff       	call   c0001eee <st_word>
c000293c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002940:	eb 3f                	jmp    c0002981 <put_fat+0x14a>
c0002942:	c1 ea 07             	shr    edx,0x7
c0002945:	89 f8                	mov    eax,edi
c0002947:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000294a:	e8 8e fa ff ff       	call   c00023dd <move_window>
c000294f:	85 c0                	test   eax,eax
c0002951:	89 c5                	mov    ebp,eax
c0002953:	75 2c                	jne    c0002981 <put_fat+0x14a>
c0002955:	c1 e6 02             	shl    esi,0x2
c0002958:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000295e:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002964:	8d 74 37 34          	lea    esi,[edi+esi*1+0x34]
c0002968:	89 f0                	mov    eax,esi
c000296a:	e8 67 f5 ff ff       	call   c0001ed6 <ld_dword>
c000296f:	25 00 00 00 f0       	and    eax,0xf0000000
c0002974:	09 d8                	or     eax,ebx
c0002976:	89 c2                	mov    edx,eax
c0002978:	89 f0                	mov    eax,esi
c000297a:	e8 73 f5 ff ff       	call   c0001ef2 <st_dword>
c000297f:	eb bb                	jmp    c000293c <put_fat+0x105>
c0002981:	83 c4 1c             	add    esp,0x1c
c0002984:	89 e8                	mov    eax,ebp
c0002986:	5b                   	pop    ebx
c0002987:	5e                   	pop    esi
c0002988:	5f                   	pop    edi
c0002989:	5d                   	pop    ebp
c000298a:	c3                   	ret    

c000298b <dir_clear>:
c000298b:	55                   	push   ebp
c000298c:	57                   	push   edi
c000298d:	56                   	push   esi
c000298e:	89 c6                	mov    esi,eax
c0002990:	53                   	push   ebx
c0002991:	83 ec 1c             	sub    esp,0x1c
c0002994:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002998:	e8 dd f9 ff ff       	call   c000237a <sync_window>
c000299d:	85 c0                	test   eax,eax
c000299f:	0f 85 c1 00 00 00    	jne    c0002a66 <dir_clear+0xdb>
c00029a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029a9:	89 f0                	mov    eax,esi
c00029ab:	e8 58 f7 ff ff       	call   c0002108 <clst2sect>
c00029b0:	31 d2                	xor    edx,edx
c00029b2:	b9 00 02 00 00       	mov    ecx,0x200
c00029b7:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c00029ba:	89 c5                	mov    ebp,eax
c00029bc:	8d 46 34             	lea    eax,[esi+0x34]
c00029bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029c3:	e8 42 f5 ff ff       	call   c0001f0a <mem_set>
c00029c8:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00029cc:	b8 00 80 00 00       	mov    eax,0x8000
c00029d1:	c1 e3 09             	shl    ebx,0x9
c00029d4:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00029da:	0f 47 d8             	cmova  ebx,eax
c00029dd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00029e3:	76 16                	jbe    c00029fb <dir_clear+0x70>
c00029e5:	83 ec 0c             	sub    esp,0xc
c00029e8:	53                   	push   ebx
c00029e9:	e8 12 32 00 00       	call   c0005c00 <ff_memalloc>
c00029ee:	83 c4 10             	add    esp,0x10
c00029f1:	85 c0                	test   eax,eax
c00029f3:	89 c7                	mov    edi,eax
c00029f5:	75 76                	jne    c0002a6d <dir_clear+0xe2>
c00029f7:	d1 eb                	shr    ebx,1
c00029f9:	eb e2                	jmp    c00029dd <dir_clear+0x52>
c00029fb:	31 db                	xor    ebx,ebx
c00029fd:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a01:	39 d8                	cmp    eax,ebx
c0002a03:	76 53                	jbe    c0002a58 <dir_clear+0xcd>
c0002a05:	6a 01                	push   0x1
c0002a07:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a0a:	50                   	push   eax
c0002a0b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002a13:	50                   	push   eax
c0002a14:	e8 7b f4 ff ff       	call   c0001e94 <disk_write>
c0002a19:	83 c4 10             	add    esp,0x10
c0002a1c:	85 c0                	test   eax,eax
c0002a1e:	75 38                	jne    c0002a58 <dir_clear+0xcd>
c0002a20:	43                   	inc    ebx
c0002a21:	eb da                	jmp    c00029fd <dir_clear+0x72>
c0002a23:	52                   	push   edx
c0002a24:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a27:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002a2b:	50                   	push   eax
c0002a2c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a30:	57                   	push   edi
c0002a31:	50                   	push   eax
c0002a32:	e8 5d f4 ff ff       	call   c0001e94 <disk_write>
c0002a37:	83 c4 10             	add    esp,0x10
c0002a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a3e:	85 c0                	test   eax,eax
c0002a40:	75 0a                	jne    c0002a4c <dir_clear+0xc1>
c0002a42:	01 d3                	add    ebx,edx
c0002a44:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a48:	39 d8                	cmp    eax,ebx
c0002a4a:	77 d7                	ja     c0002a23 <dir_clear+0x98>
c0002a4c:	83 ec 0c             	sub    esp,0xc
c0002a4f:	57                   	push   edi
c0002a50:	e8 bf 31 00 00       	call   c0005c14 <ff_memfree>
c0002a55:	83 c4 10             	add    esp,0x10
c0002a58:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a5c:	39 d8                	cmp    eax,ebx
c0002a5e:	0f 95 c0             	setne  al
c0002a61:	0f b6 c0             	movzx  eax,al
c0002a64:	eb 19                	jmp    c0002a7f <dir_clear+0xf4>
c0002a66:	b8 01 00 00 00       	mov    eax,0x1
c0002a6b:	eb 12                	jmp    c0002a7f <dir_clear+0xf4>
c0002a6d:	89 d9                	mov    ecx,ebx
c0002a6f:	31 d2                	xor    edx,edx
c0002a71:	e8 94 f4 ff ff       	call   c0001f0a <mem_set>
c0002a76:	89 da                	mov    edx,ebx
c0002a78:	31 db                	xor    ebx,ebx
c0002a7a:	c1 ea 09             	shr    edx,0x9
c0002a7d:	eb c5                	jmp    c0002a44 <dir_clear+0xb9>
c0002a7f:	83 c4 1c             	add    esp,0x1c
c0002a82:	5b                   	pop    ebx
c0002a83:	5e                   	pop    esi
c0002a84:	5f                   	pop    edi
c0002a85:	5d                   	pop    ebp
c0002a86:	c3                   	ret    

c0002a87 <create_name>:
c0002a87:	55                   	push   ebp
c0002a88:	89 d1                	mov    ecx,edx
c0002a8a:	57                   	push   edi
c0002a8b:	89 c7                	mov    edi,eax
c0002a8d:	56                   	push   esi
c0002a8e:	31 f6                	xor    esi,esi
c0002a90:	53                   	push   ebx
c0002a91:	83 ec 3c             	sub    esp,0x3c
c0002a94:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a9a:	8b 07                	mov    eax,DWORD PTR [edi]
c0002a9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002aa3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002aa7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002aab:	e8 9e f4 ff ff       	call   c0001f4e <tchar2uni>
c0002ab0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0002ab7:	75 0a                	jne    c0002ac3 <create_name+0x3c>
c0002ab9:	b8 06 00 00 00       	mov    eax,0x6
c0002abe:	e9 8c 02 00 00       	jmp    c0002d4f <create_name+0x2c8>
c0002ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0002ac8:	76 0e                	jbe    c0002ad8 <create_name+0x51>
c0002aca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0002ace:	89 c2                	mov    edx,eax
c0002ad0:	c1 ea 10             	shr    edx,0x10
c0002ad3:	66 89 14 73          	mov    WORD PTR [ebx+esi*2],dx
c0002ad7:	46                   	inc    esi
c0002ad8:	0f b7 e8             	movzx  ebp,ax
c0002adb:	83 fd 1f             	cmp    ebp,0x1f
c0002ade:	76 3a                	jbe    c0002b1a <create_name+0x93>
c0002ae0:	83 fd 2f             	cmp    ebp,0x2f
c0002ae3:	74 35                	je     c0002b1a <create_name+0x93>
c0002ae5:	83 fd 5c             	cmp    ebp,0x5c
c0002ae8:	74 3e                	je     c0002b28 <create_name+0xa1>
c0002aea:	83 fd 7f             	cmp    ebp,0x7f
c0002aed:	77 18                	ja     c0002b07 <create_name+0x80>
c0002aef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002af3:	89 ea                	mov    edx,ebp
c0002af5:	b8 a2 f1 01 c0       	mov    eax,0xc001f1a2
c0002afa:	e8 38 f4 ff ff       	call   c0001f37 <chk_chr>
c0002aff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b03:	85 c0                	test   eax,eax
c0002b05:	75 b2                	jne    c0002ab9 <create_name+0x32>
c0002b07:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002b0d:	77 aa                	ja     c0002ab9 <create_name+0x32>
c0002b0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b13:	66 89 2c 70          	mov    WORD PTR [eax+esi*2],bp
c0002b17:	46                   	inc    esi
c0002b18:	eb 89                	jmp    c0002aa3 <create_name+0x1c>
c0002b1a:	83 fd 1f             	cmp    ebp,0x1f
c0002b1d:	b3 04                	mov    bl,0x4
c0002b1f:	76 19                	jbe    c0002b3a <create_name+0xb3>
c0002b21:	eb 05                	jmp    c0002b28 <create_name+0xa1>
c0002b23:	40                   	inc    eax
c0002b24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0002b2e:	80 fa 2f             	cmp    dl,0x2f
c0002b31:	74 f0                	je     c0002b23 <create_name+0x9c>
c0002b33:	80 fa 5c             	cmp    dl,0x5c
c0002b36:	74 eb                	je     c0002b23 <create_name+0x9c>
c0002b38:	31 db                	xor    ebx,ebx
c0002b3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b3e:	89 01                	mov    DWORD PTR [ecx],eax
c0002b40:	85 f6                	test   esi,esi
c0002b42:	74 16                	je     c0002b5a <create_name+0xd3>
c0002b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b48:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002b4d:	83 f8 20             	cmp    eax,0x20
c0002b50:	74 05                	je     c0002b57 <create_name+0xd0>
c0002b52:	83 f8 2e             	cmp    eax,0x2e
c0002b55:	75 03                	jne    c0002b5a <create_name+0xd3>
c0002b57:	4e                   	dec    esi
c0002b58:	eb e6                	jmp    c0002b40 <create_name+0xb9>
c0002b5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b5e:	85 f6                	test   esi,esi
c0002b60:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002b66:	0f 84 4d ff ff ff    	je     c0002ab9 <create_name+0x32>
c0002b6c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002b74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002b7c:	0f b7 04 50          	movzx  eax,WORD PTR [eax+edx*2]
c0002b80:	42                   	inc    edx
c0002b81:	83 f8 20             	cmp    eax,0x20
c0002b84:	75 06                	jne    c0002b8c <create_name+0x105>
c0002b86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b8a:	eb e8                	jmp    c0002b74 <create_name+0xed>
c0002b8c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0002b91:	75 05                	jne    c0002b98 <create_name+0x111>
c0002b93:	83 f8 2e             	cmp    eax,0x2e
c0002b96:	75 08                	jne    c0002ba0 <create_name+0x119>
c0002b98:	80 cb 03             	or     bl,0x3
c0002b9b:	eb 03                	jmp    c0002ba0 <create_name+0x119>
c0002b9d:	4e                   	dec    esi
c0002b9e:	74 0c                	je     c0002bac <create_name+0x125>
c0002ba0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ba4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002baa:	75 f1                	jne    c0002b9d <create_name+0x116>
c0002bac:	8d 47 20             	lea    eax,[edi+0x20]
c0002baf:	b9 0b 00 00 00       	mov    ecx,0xb
c0002bb4:	ba 20 00 00 00       	mov    edx,0x20
c0002bb9:	31 ed                	xor    ebp,ebp
c0002bbb:	e8 4a f3 ff ff       	call   c0001f0a <mem_set>
c0002bc0:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c0002bc8:	c6 44 24 0c 00       	mov    BYTE PTR [esp+0xc],0x0
c0002bcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002bd5:	40                   	inc    eax
c0002bd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002bde:	0f b7 0c 50          	movzx  ecx,WORD PTR [eax+edx*2]
c0002be2:	85 c9                	test   ecx,ecx
c0002be4:	0f 84 15 01 00 00    	je     c0002cff <create_name+0x278>
c0002bea:	83 f9 20             	cmp    ecx,0x20
c0002bed:	74 0b                	je     c0002bfa <create_name+0x173>
c0002bef:	83 f9 2e             	cmp    ecx,0x2e
c0002bf2:	75 13                	jne    c0002c07 <create_name+0x180>
c0002bf4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002bf8:	74 0d                	je     c0002c07 <create_name+0x180>
c0002bfa:	80 cb 03             	or     bl,0x3
c0002bfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002c05:	eb c6                	jmp    c0002bcd <create_name+0x146>
c0002c07:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c0002c0b:	73 06                	jae    c0002c13 <create_name+0x18c>
c0002c0d:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c11:	75 3a                	jne    c0002c4d <create_name+0x1c6>
c0002c13:	83 7c 24 1c 0b       	cmp    DWORD PTR [esp+0x1c],0xb
c0002c18:	75 08                	jne    c0002c22 <create_name+0x19b>
c0002c1a:	80 cb 03             	or     bl,0x3
c0002c1d:	e9 dd 00 00 00       	jmp    c0002cff <create_name+0x278>
c0002c22:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c26:	74 0d                	je     c0002c35 <create_name+0x1ae>
c0002c28:	80 cb 03             	or     bl,0x3
c0002c2b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0002c2f:	0f 87 ca 00 00 00    	ja     c0002cff <create_name+0x278>
c0002c35:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002c3a:	bd 08 00 00 00       	mov    ebp,0x8
c0002c3f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0002c43:	c7 44 24 1c 0b 00 00 00 	mov    DWORD PTR [esp+0x1c],0xb
c0002c4b:	eb b0                	jmp    c0002bfd <create_name+0x176>
c0002c4d:	83 f9 7f             	cmp    ecx,0x7f
c0002c50:	76 5d                	jbe    c0002caf <create_name+0x228>
c0002c52:	88 da                	mov    dl,bl
c0002c54:	80 ca 02             	or     dl,0x2
c0002c57:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c0002c5b:	50                   	push   eax
c0002c5c:	50                   	push   eax
c0002c5d:	68 b5 01 00 00       	push   0x1b5
c0002c62:	51                   	push   ecx
c0002c63:	e8 c0 2f 00 00       	call   c0005c28 <ff_uni2oem>
c0002c68:	83 c4 10             	add    esp,0x10
c0002c6b:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0002c6f:	0f b7 c8             	movzx  ecx,ax
c0002c72:	f6 c1 80             	test   cl,0x80
c0002c75:	74 0c                	je     c0002c83 <create_name+0x1fc>
c0002c77:	83 e1 7f             	and    ecx,0x7f
c0002c7a:	0f b6 89 60 f2 01 c0 	movzx  ecx,BYTE PTR [ecx-0x3ffe0da0]
c0002c81:	eb 26                	jmp    c0002ca9 <create_name+0x222>
c0002c83:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002c89:	76 1e                	jbe    c0002ca9 <create_name+0x222>
c0002c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002c8f:	48                   	dec    eax
c0002c90:	39 e8                	cmp    eax,ebp
c0002c92:	77 0c                	ja     c0002ca0 <create_name+0x219>
c0002c94:	80 cb 03             	or     bl,0x3
c0002c97:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0002c9b:	e9 5d ff ff ff       	jmp    c0002bfd <create_name+0x176>
c0002ca0:	88 6c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],ch
c0002ca4:	88 d3                	mov    bl,dl
c0002ca6:	45                   	inc    ebp
c0002ca7:	eb 4c                	jmp    c0002cf5 <create_name+0x26e>
c0002ca9:	85 c9                	test   ecx,ecx
c0002cab:	88 d3                	mov    bl,dl
c0002cad:	74 18                	je     c0002cc7 <create_name+0x240>
c0002caf:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002cb3:	89 ca                	mov    edx,ecx
c0002cb5:	b8 ab f1 01 c0       	mov    eax,0xc001f1ab
c0002cba:	e8 78 f2 ff ff       	call   c0001f37 <chk_chr>
c0002cbf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002cc3:	85 c0                	test   eax,eax
c0002cc5:	74 0a                	je     c0002cd1 <create_name+0x24a>
c0002cc7:	80 cb 03             	or     bl,0x3
c0002cca:	b9 5f 00 00 00       	mov    ecx,0x5f
c0002ccf:	eb 24                	jmp    c0002cf5 <create_name+0x26e>
c0002cd1:	8d 41 bf             	lea    eax,[ecx-0x41]
c0002cd4:	66 83 f8 19          	cmp    ax,0x19
c0002cd8:	77 07                	ja     c0002ce1 <create_name+0x25a>
c0002cda:	80 4c 24 0c 02       	or     BYTE PTR [esp+0xc],0x2
c0002cdf:	eb 14                	jmp    c0002cf5 <create_name+0x26e>
c0002ce1:	8d 41 9f             	lea    eax,[ecx-0x61]
c0002ce4:	66 83 f8 19          	cmp    ax,0x19
c0002ce8:	77 0b                	ja     c0002cf5 <create_name+0x26e>
c0002cea:	80 4c 24 0c 01       	or     BYTE PTR [esp+0xc],0x1
c0002cef:	83 e9 20             	sub    ecx,0x20
c0002cf2:	0f b7 c9             	movzx  ecx,cx
c0002cf5:	88 4c 2f 20          	mov    BYTE PTR [edi+ebp*1+0x20],cl
c0002cf9:	45                   	inc    ebp
c0002cfa:	e9 fe fe ff ff       	jmp    c0002bfd <create_name+0x176>
c0002cff:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002d03:	75 04                	jne    c0002d09 <create_name+0x282>
c0002d05:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002d09:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0002d0e:	75 05                	jne    c0002d15 <create_name+0x28e>
c0002d10:	c0 64 24 0c 02       	shl    BYTE PTR [esp+0xc],0x2
c0002d15:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d19:	24 0c                	and    al,0xc
c0002d1b:	3c 0c                	cmp    al,0xc
c0002d1d:	74 0a                	je     c0002d29 <create_name+0x2a2>
c0002d1f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d23:	24 03                	and    al,0x3
c0002d25:	3c 03                	cmp    al,0x3
c0002d27:	75 05                	jne    c0002d2e <create_name+0x2a7>
c0002d29:	80 cb 02             	or     bl,0x2
c0002d2c:	eb 1c                	jmp    c0002d4a <create_name+0x2c3>
c0002d2e:	88 d8                	mov    al,bl
c0002d30:	24 02                	and    al,0x2
c0002d32:	75 16                	jne    c0002d4a <create_name+0x2c3>
c0002d34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d38:	24 01                	and    al,0x1
c0002d3a:	74 03                	je     c0002d3f <create_name+0x2b8>
c0002d3c:	80 cb 10             	or     bl,0x10
c0002d3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0002d43:	24 04                	and    al,0x4
c0002d45:	74 03                	je     c0002d4a <create_name+0x2c3>
c0002d47:	80 cb 08             	or     bl,0x8
c0002d4a:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 3c             	add    esp,0x3c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <cmp_lfn>:
c0002d57:	55                   	push   ebp
c0002d58:	57                   	push   edi
c0002d59:	89 d7                	mov    edi,edx
c0002d5b:	56                   	push   esi
c0002d5c:	53                   	push   ebx
c0002d5d:	83 ec 1c             	sub    esp,0x1c
c0002d60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d64:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002d67:	e8 5d f1 ff ff       	call   c0001ec9 <ld_word>
c0002d6c:	66 85 c0             	test   ax,ax
c0002d6f:	74 07                	je     c0002d78 <cmp_lfn+0x21>
c0002d71:	31 c0                	xor    eax,eax
c0002d73:	e9 a0 00 00 00       	jmp    c0002e18 <cmp_lfn+0xc1>
c0002d78:	0f b6 1f             	movzx  ebx,BYTE PTR [edi]
c0002d7b:	bd 01 00 00 00       	mov    ebp,0x1
c0002d80:	31 c9                	xor    ecx,ecx
c0002d82:	83 e3 3f             	and    ebx,0x3f
c0002d85:	4b                   	dec    ebx
c0002d86:	6b db 0d             	imul   ebx,ebx,0xd
c0002d89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d8d:	0f b6 81 e0 f2 01 c0 	movzx  eax,BYTE PTR [ecx-0x3ffe0d20]
c0002d94:	01 f8                	add    eax,edi
c0002d96:	e8 2e f1 ff ff       	call   c0001ec9 <ld_word>
c0002d9b:	85 ed                	test   ebp,ebp
c0002d9d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002da1:	0f b7 f0             	movzx  esi,ax
c0002da4:	74 41                	je     c0002de7 <cmp_lfn+0x90>
c0002da6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002daa:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002db0:	77 bf                	ja     c0002d71 <cmp_lfn+0x1a>
c0002db2:	83 ec 0c             	sub    esp,0xc
c0002db5:	56                   	push   esi
c0002db6:	e8 81 2f 00 00       	call   c0005d3c <ff_wtoupper>
c0002dbb:	89 c5                	mov    ebp,eax
c0002dbd:	8d 43 01             	lea    eax,[ebx+0x1]
c0002dc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002dc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002dc8:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002dcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0002dcf:	e8 68 2f 00 00       	call   c0005d3c <ff_wtoupper>
c0002dd4:	83 c4 10             	add    esp,0x10
c0002dd7:	39 c5                	cmp    ebp,eax
c0002dd9:	75 96                	jne    c0002d71 <cmp_lfn+0x1a>
c0002ddb:	89 f5                	mov    ebp,esi
c0002ddd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002de1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002de5:	eb 08                	jmp    c0002def <cmp_lfn+0x98>
c0002de7:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002ded:	75 82                	jne    c0002d71 <cmp_lfn+0x1a>
c0002def:	41                   	inc    ecx
c0002df0:	83 f9 0d             	cmp    ecx,0xd
c0002df3:	75 94                	jne    c0002d89 <cmp_lfn+0x32>
c0002df5:	8a 07                	mov    al,BYTE PTR [edi]
c0002df7:	c0 e8 06             	shr    al,0x6
c0002dfa:	24 01                	and    al,0x1
c0002dfc:	74 15                	je     c0002e13 <cmp_lfn+0xbc>
c0002dfe:	85 ed                	test   ebp,ebp
c0002e00:	74 11                	je     c0002e13 <cmp_lfn+0xbc>
c0002e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e06:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e0b:	0f 94 c0             	sete   al
c0002e0e:	0f b6 c0             	movzx  eax,al
c0002e11:	eb 05                	jmp    c0002e18 <cmp_lfn+0xc1>
c0002e13:	b8 01 00 00 00       	mov    eax,0x1
c0002e18:	83 c4 1c             	add    esp,0x1c
c0002e1b:	5b                   	pop    ebx
c0002e1c:	5e                   	pop    esi
c0002e1d:	5f                   	pop    edi
c0002e1e:	5d                   	pop    ebp
c0002e1f:	c3                   	ret    

c0002e20 <sync_fs>:
c0002e20:	56                   	push   esi
c0002e21:	53                   	push   ebx
c0002e22:	53                   	push   ebx
c0002e23:	89 c3                	mov    ebx,eax
c0002e25:	e8 50 f5 ff ff       	call   c000237a <sync_window>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	0f 85 9a 00 00 00    	jne    c0002ecc <sync_fs+0xac>
c0002e32:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002e35:	75 7b                	jne    c0002eb2 <sync_fs+0x92>
c0002e37:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002e3b:	75 75                	jne    c0002eb2 <sync_fs+0x92>
c0002e3d:	8d 73 34             	lea    esi,[ebx+0x34]
c0002e40:	b9 00 02 00 00       	mov    ecx,0x200
c0002e45:	31 d2                	xor    edx,edx
c0002e47:	89 f0                	mov    eax,esi
c0002e49:	e8 bc f0 ff ff       	call   c0001f0a <mem_set>
c0002e4e:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002e54:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002e59:	e8 90 f0 ff ff       	call   c0001eee <st_word>
c0002e5e:	ba 52 52 61 41       	mov    edx,0x41615252
c0002e63:	89 f0                	mov    eax,esi
c0002e65:	e8 88 f0 ff ff       	call   c0001ef2 <st_dword>
c0002e6a:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002e70:	ba 72 72 41 61       	mov    edx,0x61417272
c0002e75:	e8 78 f0 ff ff       	call   c0001ef2 <st_dword>
c0002e7a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e7d:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e83:	e8 6a f0 ff ff       	call   c0001ef2 <st_dword>
c0002e88:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e8b:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e91:	e8 5c f0 ff ff       	call   c0001ef2 <st_dword>
c0002e96:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e99:	6a 01                	push   0x1
c0002e9b:	40                   	inc    eax
c0002e9c:	50                   	push   eax
c0002e9d:	56                   	push   esi
c0002e9e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ea1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ea5:	50                   	push   eax
c0002ea6:	e8 e9 ef ff ff       	call   c0001e94 <disk_write>
c0002eab:	83 c4 10             	add    esp,0x10
c0002eae:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002eb2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002eb6:	51                   	push   ecx
c0002eb7:	6a 00                	push   0x0
c0002eb9:	6a 00                	push   0x0
c0002ebb:	50                   	push   eax
c0002ebc:	e8 e9 ef ff ff       	call   c0001eaa <disk_ioctl>
c0002ec1:	83 c4 10             	add    esp,0x10
c0002ec4:	85 c0                	test   eax,eax
c0002ec6:	0f 95 c0             	setne  al
c0002ec9:	0f b6 c0             	movzx  eax,al
c0002ecc:	5a                   	pop    edx
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	c3                   	ret    

c0002ed0 <create_partition>:
c0002ed0:	55                   	push   ebp
c0002ed1:	0f b6 c0             	movzx  eax,al
c0002ed4:	57                   	push   edi
c0002ed5:	56                   	push   esi
c0002ed6:	53                   	push   ebx
c0002ed7:	83 ec 40             	sub    esp,0x40
c0002eda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002ede:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002ee2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ee6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002eea:	50                   	push   eax
c0002eeb:	6a 01                	push   0x1
c0002eed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002ef1:	e8 b4 ef ff ff       	call   c0001eaa <disk_ioctl>
c0002ef6:	83 c4 10             	add    esp,0x10
c0002ef9:	85 c0                	test   eax,eax
c0002efb:	0f 85 66 01 00 00    	jne    c0003067 <create_partition+0x197>
c0002f01:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002f05:	b9 05 00 00 00       	mov    ecx,0x5
c0002f0a:	b3 08                	mov    bl,0x8
c0002f0c:	31 d2                	xor    edx,edx
c0002f0e:	0f b6 f3             	movzx  esi,bl
c0002f11:	89 e8                	mov    eax,ebp
c0002f13:	f7 f6                	div    esi
c0002f15:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002f1a:	76 07                	jbe    c0002f23 <create_partition+0x53>
c0002f1c:	00 db                	add    bl,bl
c0002f1e:	49                   	dec    ecx
c0002f1f:	75 eb                	jne    c0002f0c <create_partition+0x3c>
c0002f21:	b3 ff                	mov    bl,0xff
c0002f23:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f27:	b9 00 02 00 00       	mov    ecx,0x200
c0002f2c:	31 d2                	xor    edx,edx
c0002f2e:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f33:	e8 d2 ef ff ff       	call   c0001f0a <mem_set>
c0002f38:	b9 64 00 00 00       	mov    ecx,0x64
c0002f3d:	89 e8                	mov    eax,ebp
c0002f3f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002f47:	31 d2                	xor    edx,edx
c0002f49:	f7 f1                	div    ecx
c0002f4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f4f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f53:	8d b0 c6 01 00 00    	lea    esi,[eax+0x1c6]
c0002f59:	0f b6 c3             	movzx  eax,bl
c0002f5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f60:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0002f65:	0f 96 c2             	setbe  dl
c0002f68:	85 ff                	test   edi,edi
c0002f6a:	0f 95 c0             	setne  al
c0002f6d:	84 c2                	test   dl,al
c0002f6f:	0f 84 c1 00 00 00    	je     c0003036 <create_partition+0x166>
c0002f75:	39 ef                	cmp    edi,ebp
c0002f77:	0f 83 b9 00 00 00    	jae    c0003036 <create_partition+0x166>
c0002f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002f81:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0002f85:	8b 0c 98             	mov    ecx,DWORD PTR [eax+ebx*4]
c0002f88:	83 f9 64             	cmp    ecx,0x64
c0002f8b:	77 0b                	ja     c0002f98 <create_partition+0xc8>
c0002f8d:	74 07                	je     c0002f96 <create_partition+0xc6>
c0002f8f:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
c0002f94:	eb 02                	jmp    c0002f98 <create_partition+0xc8>
c0002f96:	89 e9                	mov    ecx,ebp
c0002f98:	89 fa                	mov    edx,edi
c0002f9a:	31 c0                	xor    eax,eax
c0002f9c:	01 ca                	add    edx,ecx
c0002f9e:	73 05                	jae    c0002fa5 <create_partition+0xd5>
c0002fa0:	b8 01 00 00 00       	mov    eax,0x1
c0002fa5:	39 ea                	cmp    edx,ebp
c0002fa7:	77 04                	ja     c0002fad <create_partition+0xdd>
c0002fa9:	85 c0                	test   eax,eax
c0002fab:	74 06                	je     c0002fb3 <create_partition+0xe3>
c0002fad:	89 e9                	mov    ecx,ebp
c0002faf:	29 f9                	sub    ecx,edi
c0002fb1:	eb 04                	jmp    c0002fb7 <create_partition+0xe7>
c0002fb3:	85 c9                	test   ecx,ecx
c0002fb5:	74 7f                	je     c0003036 <create_partition+0x166>
c0002fb7:	89 fa                	mov    edx,edi
c0002fb9:	89 f0                	mov    eax,esi
c0002fbb:	e8 32 ef ff ff       	call   c0001ef2 <st_dword>
c0002fc0:	8d 46 04             	lea    eax,[esi+0x4]
c0002fc3:	bb 3f 00 00 00       	mov    ebx,0x3f
c0002fc8:	83 c6 10             	add    esi,0x10
c0002fcb:	89 ca                	mov    edx,ecx
c0002fcd:	e8 20 ef ff ff       	call   c0001ef2 <st_dword>
c0002fd2:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0002fd6:	31 d2                	xor    edx,edx
c0002fd8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002fdc:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0002fdf:	89 f8                	mov    eax,edi
c0002fe1:	f7 f3                	div    ebx
c0002fe3:	01 cf                	add    edi,ecx
c0002fe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002fe9:	31 d2                	xor    edx,edx
c0002feb:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0002fef:	8a 5c 24 1c          	mov    bl,BYTE PTR [esp+0x1c]
c0002ff3:	fe c3                	inc    bl
c0002ff5:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0002ff8:	89 c2                	mov    edx,eax
c0002ffa:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0002ffd:	c1 ea 02             	shr    edx,0x2
c0003000:	8d 47 ff             	lea    eax,[edi-0x1]
c0003003:	80 e2 c0             	and    dl,0xc0
c0003006:	08 da                	or     dl,bl
c0003008:	bb 3f 00 00 00       	mov    ebx,0x3f
c000300d:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0003010:	31 d2                	xor    edx,edx
c0003012:	f7 f3                	div    ebx
c0003014:	89 d1                	mov    ecx,edx
c0003016:	31 d2                	xor    edx,edx
c0003018:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c000301c:	fe c1                	inc    cl
c000301e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0003021:	89 c3                	mov    ebx,eax
c0003023:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0003026:	c1 eb 02             	shr    ebx,0x2
c0003029:	80 e3 c0             	and    bl,0xc0
c000302c:	08 d9                	or     cl,bl
c000302e:	88 4e ee             	mov    BYTE PTR [esi-0x12],cl
c0003031:	e9 2a ff ff ff       	jmp    c0002f60 <create_partition+0x90>
c0003036:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000303a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000303f:	05 fe 01 00 00       	add    eax,0x1fe
c0003044:	e8 a5 ee ff ff       	call   c0001eee <st_word>
c0003049:	6a 01                	push   0x1
c000304b:	6a 00                	push   0x0
c000304d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003051:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003055:	e8 3a ee ff ff       	call   c0001e94 <disk_write>
c000305a:	83 c4 10             	add    esp,0x10
c000305d:	85 c0                	test   eax,eax
c000305f:	0f 95 c0             	setne  al
c0003062:	0f b6 c0             	movzx  eax,al
c0003065:	eb 05                	jmp    c000306c <create_partition+0x19c>
c0003067:	b8 01 00 00 00       	mov    eax,0x1
c000306c:	83 c4 3c             	add    esp,0x3c
c000306f:	5b                   	pop    ebx
c0003070:	5e                   	pop    esi
c0003071:	5f                   	pop    edi
c0003072:	5d                   	pop    ebp
c0003073:	c3                   	ret    

c0003074 <get_fileinfo>:
c0003074:	55                   	push   ebp
c0003075:	57                   	push   edi
c0003076:	56                   	push   esi
c0003077:	53                   	push   ebx
c0003078:	83 ec 1c             	sub    esp,0x1c
c000307b:	8b 30                	mov    esi,DWORD PTR [eax]
c000307d:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003081:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003085:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003089:	0f 84 bc 01 00 00    	je     c000324b <get_fileinfo+0x1d7>
c000308f:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003093:	89 d3                	mov    ebx,edx
c0003095:	89 c6                	mov    esi,eax
c0003097:	74 6c                	je     c0003105 <get_fileinfo+0x91>
c0003099:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030a1:	31 ed                	xor    ebp,ebp
c00030a3:	31 ff                	xor    edi,edi
c00030a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00030a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00030ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00030b0:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00030b4:	85 c0                	test   eax,eax
c00030b6:	74 3e                	je     c00030f6 <get_fileinfo+0x82>
c00030b8:	85 ed                	test   ebp,ebp
c00030ba:	75 0d                	jne    c00030c9 <get_fileinfo+0x55>
c00030bc:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00030c2:	66 81 fa ff 07       	cmp    dx,0x7ff
c00030c7:	76 22                	jbe    c00030eb <get_fileinfo+0x77>
c00030c9:	89 ea                	mov    edx,ebp
c00030cb:	b9 ff 00 00 00       	mov    ecx,0xff
c00030d0:	c1 e2 10             	shl    edx,0x10
c00030d3:	29 f9                	sub    ecx,edi
c00030d5:	09 d0                	or     eax,edx
c00030d7:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c00030db:	e8 38 ef ff ff       	call   c0002018 <put_utf>
c00030e0:	84 c0                	test   al,al
c00030e2:	74 10                	je     c00030f4 <get_fileinfo+0x80>
c00030e4:	0f b6 c0             	movzx  eax,al
c00030e7:	01 c7                	add    edi,eax
c00030e9:	31 c0                	xor    eax,eax
c00030eb:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c00030f0:	89 c5                	mov    ebp,eax
c00030f2:	eb b1                	jmp    c00030a5 <get_fileinfo+0x31>
c00030f4:	31 ff                	xor    edi,edi
c00030f6:	85 ed                	test   ebp,ebp
c00030f8:	b8 00 00 00 00       	mov    eax,0x0
c00030fd:	0f 45 f8             	cmovne edi,eax
c0003100:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003105:	31 ff                	xor    edi,edi
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	83 f9 0a             	cmp    ecx,0xa
c000310c:	0f 87 a1 00 00 00    	ja     c00031b3 <get_fileinfo+0x13f>
c0003112:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003115:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003118:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c000311c:	83 fa 20             	cmp    edx,0x20
c000311f:	0f 84 87 00 00 00    	je     c00031ac <get_fileinfo+0x138>
c0003125:	83 fa 05             	cmp    edx,0x5
c0003128:	75 05                	jne    c000312f <get_fileinfo+0xbb>
c000312a:	ba e5 00 00 00       	mov    edx,0xe5
c000312f:	83 fd 09             	cmp    ebp,0x9
c0003132:	75 0b                	jne    c000313f <get_fileinfo+0xcb>
c0003134:	83 ff 0b             	cmp    edi,0xb
c0003137:	77 06                	ja     c000313f <get_fileinfo+0xcb>
c0003139:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000313e:	47                   	inc    edi
c000313f:	89 d0                	mov    eax,edx
c0003141:	e8 02 ee ff ff       	call   c0001f48 <dbc_1st>
c0003146:	85 c0                	test   eax,eax
c0003148:	74 2e                	je     c0003178 <get_fileinfo+0x104>
c000314a:	83 fd 08             	cmp    ebp,0x8
c000314d:	74 29                	je     c0003178 <get_fileinfo+0x104>
c000314f:	83 fd 0b             	cmp    ebp,0xb
c0003152:	74 24                	je     c0003178 <get_fileinfo+0x104>
c0003154:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003157:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000315b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000315f:	e8 e7 ed ff ff       	call   c0001f4b <dbc_2nd>
c0003164:	85 c0                	test   eax,eax
c0003166:	74 10                	je     c0003178 <get_fileinfo+0x104>
c0003168:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000316d:	c1 e2 08             	shl    edx,0x8
c0003170:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003173:	09 d0                	or     eax,edx
c0003175:	0f b7 d0             	movzx  edx,ax
c0003178:	50                   	push   eax
c0003179:	50                   	push   eax
c000317a:	68 b5 01 00 00       	push   0x1b5
c000317f:	52                   	push   edx
c0003180:	e8 3f 2b 00 00       	call   c0005cc4 <ff_oem2uni>
c0003185:	83 c4 10             	add    esp,0x10
c0003188:	0f b7 c0             	movzx  eax,ax
c000318b:	85 c0                	test   eax,eax
c000318d:	75 04                	jne    c0003193 <get_fileinfo+0x11f>
c000318f:	31 ff                	xor    edi,edi
c0003191:	eb 20                	jmp    c00031b3 <get_fileinfo+0x13f>
c0003193:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003197:	b9 0c 00 00 00       	mov    ecx,0xc
c000319c:	29 f9                	sub    ecx,edi
c000319e:	e8 75 ee ff ff       	call   c0002018 <put_utf>
c00031a3:	84 c0                	test   al,al
c00031a5:	74 e8                	je     c000318f <get_fileinfo+0x11b>
c00031a7:	0f b6 c0             	movzx  eax,al
c00031aa:	01 c7                	add    edi,eax
c00031ac:	89 e9                	mov    ecx,ebp
c00031ae:	e9 56 ff ff ff       	jmp    c0003109 <get_fileinfo+0x95>
c00031b3:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c00031b8:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c00031bc:	75 59                	jne    c0003217 <get_fileinfo+0x1a3>
c00031be:	85 ff                	test   edi,edi
c00031c0:	75 0b                	jne    c00031cd <get_fileinfo+0x159>
c00031c2:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c00031c6:	b9 01 00 00 00       	mov    ecx,0x1
c00031cb:	eb 38                	jmp    c0003205 <get_fileinfo+0x191>
c00031cd:	b2 08                	mov    dl,0x8
c00031cf:	31 c9                	xor    ecx,ecx
c00031d1:	66 0f be 44 0b 09    	movsx  ax,BYTE PTR [ebx+ecx*1+0x9]
c00031d7:	84 c0                	test   al,al
c00031d9:	74 2a                	je     c0003205 <get_fileinfo+0x191>
c00031db:	0f b7 c0             	movzx  eax,ax
c00031de:	83 f8 2e             	cmp    eax,0x2e
c00031e1:	74 19                	je     c00031fc <get_fileinfo+0x188>
c00031e3:	8d 78 bf             	lea    edi,[eax-0x41]
c00031e6:	66 83 ff 19          	cmp    di,0x19
c00031ea:	77 12                	ja     c00031fe <get_fileinfo+0x18a>
c00031ec:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c00031ef:	84 57 0c             	test   BYTE PTR [edi+0xc],dl
c00031f2:	74 0a                	je     c00031fe <get_fileinfo+0x18a>
c00031f4:	83 c0 20             	add    eax,0x20
c00031f7:	0f b7 c0             	movzx  eax,ax
c00031fa:	eb 02                	jmp    c00031fe <get_fileinfo+0x18a>
c00031fc:	b2 10                	mov    dl,0x10
c00031fe:	88 44 0b 16          	mov    BYTE PTR [ebx+ecx*1+0x16],al
c0003202:	41                   	inc    ecx
c0003203:	eb cc                	jmp    c00031d1 <get_fileinfo+0x15d>
c0003205:	c6 44 0b 16 00       	mov    BYTE PTR [ebx+ecx*1+0x16],0x0
c000320a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000320d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003211:	75 04                	jne    c0003217 <get_fileinfo+0x1a3>
c0003213:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003217:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000321a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000321d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003220:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003223:	83 c0 1c             	add    eax,0x1c
c0003226:	e8 ab ec ff ff       	call   c0001ed6 <ld_dword>
c000322b:	89 03                	mov    DWORD PTR [ebx],eax
c000322d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003230:	83 c0 16             	add    eax,0x16
c0003233:	e8 91 ec ff ff       	call   c0001ec9 <ld_word>
c0003238:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000323c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000323f:	83 c0 18             	add    eax,0x18
c0003242:	e8 82 ec ff ff       	call   c0001ec9 <ld_word>
c0003247:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000324b:	83 c4 1c             	add    esp,0x1c
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	5f                   	pop    edi
c0003251:	5d                   	pop    ebp
c0003252:	c3                   	ret    

c0003253 <ld_clust.isra.0>:
c0003253:	56                   	push   esi
c0003254:	88 c1                	mov    cl,al
c0003256:	53                   	push   ebx
c0003257:	89 d6                	mov    esi,edx
c0003259:	8d 42 1a             	lea    eax,[edx+0x1a]
c000325c:	e8 68 ec ff ff       	call   c0001ec9 <ld_word>
c0003261:	80 f9 03             	cmp    cl,0x3
c0003264:	0f b7 d8             	movzx  ebx,ax
c0003267:	75 0d                	jne    c0003276 <ld_clust.isra.0+0x23>
c0003269:	8d 46 14             	lea    eax,[esi+0x14]
c000326c:	e8 58 ec ff ff       	call   c0001ec9 <ld_word>
c0003271:	c1 e0 10             	shl    eax,0x10
c0003274:	09 c3                	or     ebx,eax
c0003276:	89 d8                	mov    eax,ebx
c0003278:	5b                   	pop    ebx
c0003279:	5e                   	pop    esi
c000327a:	c3                   	ret    

c000327b <st_clust.isra.1>:
c000327b:	56                   	push   esi
c000327c:	89 c6                	mov    esi,eax
c000327e:	53                   	push   ebx
c000327f:	89 d3                	mov    ebx,edx
c0003281:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003284:	0f b7 d1             	movzx  edx,cx
c0003287:	e8 62 ec ff ff       	call   c0001eee <st_word>
c000328c:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000328f:	75 0f                	jne    c00032a0 <st_clust.isra.1+0x25>
c0003291:	8d 43 14             	lea    eax,[ebx+0x14]
c0003294:	5b                   	pop    ebx
c0003295:	c1 e9 10             	shr    ecx,0x10
c0003298:	89 ca                	mov    edx,ecx
c000329a:	5e                   	pop    esi
c000329b:	e9 4e ec ff ff       	jmp    c0001eee <st_word>
c00032a0:	5b                   	pop    ebx
c00032a1:	5e                   	pop    esi
c00032a2:	c3                   	ret    

c00032a3 <get_fat.isra.2>:
c00032a3:	83 fa 01             	cmp    edx,0x1
c00032a6:	b9 01 00 00 00       	mov    ecx,0x1
c00032ab:	0f 86 f1 00 00 00    	jbe    c00033a2 <get_fat.isra.2+0xff>
c00032b1:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c00032b4:	0f 83 e8 00 00 00    	jae    c00033a2 <get_fat.isra.2+0xff>
c00032ba:	55                   	push   ebp
c00032bb:	57                   	push   edi
c00032bc:	89 c7                	mov    edi,eax
c00032be:	56                   	push   esi
c00032bf:	89 d6                	mov    esi,edx
c00032c1:	53                   	push   ebx
c00032c2:	83 ec 0c             	sub    esp,0xc
c00032c5:	8a 00                	mov    al,BYTE PTR [eax]
c00032c7:	3c 02                	cmp    al,0x2
c00032c9:	74 78                	je     c0003343 <get_fat.isra.2+0xa0>
c00032cb:	3c 03                	cmp    al,0x3
c00032cd:	0f 84 97 00 00 00    	je     c000336a <get_fat.isra.2+0xc7>
c00032d3:	fe c8                	dec    al
c00032d5:	0f 85 bd 00 00 00    	jne    c0003398 <get_fat.isra.2+0xf5>
c00032db:	89 d3                	mov    ebx,edx
c00032dd:	89 f8                	mov    eax,edi
c00032df:	d1 eb                	shr    ebx,1
c00032e1:	01 d3                	add    ebx,edx
c00032e3:	89 da                	mov    edx,ebx
c00032e5:	c1 ea 09             	shr    edx,0x9
c00032e8:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032eb:	e8 ed f0 ff ff       	call   c00023dd <move_window>
c00032f0:	85 c0                	test   eax,eax
c00032f2:	74 08                	je     c00032fc <get_fat.isra.2+0x59>
c00032f4:	83 c9 ff             	or     ecx,0xffffffff
c00032f7:	e9 9c 00 00 00       	jmp    c0003398 <get_fat.isra.2+0xf5>
c00032fc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00032ff:	89 f8                	mov    eax,edi
c0003301:	89 ea                	mov    edx,ebp
c0003303:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003309:	c1 ea 09             	shr    edx,0x9
c000330c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003310:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003313:	e8 c5 f0 ff ff       	call   c00023dd <move_window>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 d8                	jne    c00032f4 <get_fat.isra.2+0x51>
c000331c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003322:	0f b6 c3             	movzx  eax,bl
c0003325:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000332a:	c1 e3 08             	shl    ebx,0x8
c000332d:	09 c3                	or     ebx,eax
c000332f:	89 d9                	mov    ecx,ebx
c0003331:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003337:	83 e6 01             	and    esi,0x1
c000333a:	74 5c                	je     c0003398 <get_fat.isra.2+0xf5>
c000333c:	89 d9                	mov    ecx,ebx
c000333e:	c1 e9 04             	shr    ecx,0x4
c0003341:	eb 55                	jmp    c0003398 <get_fat.isra.2+0xf5>
c0003343:	c1 ea 08             	shr    edx,0x8
c0003346:	89 f8                	mov    eax,edi
c0003348:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000334b:	e8 8d f0 ff ff       	call   c00023dd <move_window>
c0003350:	85 c0                	test   eax,eax
c0003352:	75 a0                	jne    c00032f4 <get_fat.isra.2+0x51>
c0003354:	01 f6                	add    esi,esi
c0003356:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000335c:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c0003360:	e8 64 eb ff ff       	call   c0001ec9 <ld_word>
c0003365:	0f b7 c8             	movzx  ecx,ax
c0003368:	eb 2e                	jmp    c0003398 <get_fat.isra.2+0xf5>
c000336a:	c1 ea 07             	shr    edx,0x7
c000336d:	89 f8                	mov    eax,edi
c000336f:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003372:	e8 66 f0 ff ff       	call   c00023dd <move_window>
c0003377:	85 c0                	test   eax,eax
c0003379:	0f 85 75 ff ff ff    	jne    c00032f4 <get_fat.isra.2+0x51>
c000337f:	c1 e6 02             	shl    esi,0x2
c0003382:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003388:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000338c:	e8 45 eb ff ff       	call   c0001ed6 <ld_dword>
c0003391:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003396:	89 c1                	mov    ecx,eax
c0003398:	83 c4 0c             	add    esp,0xc
c000339b:	89 c8                	mov    eax,ecx
c000339d:	5b                   	pop    ebx
c000339e:	5e                   	pop    esi
c000339f:	5f                   	pop    edi
c00033a0:	5d                   	pop    ebp
c00033a1:	c3                   	ret    
c00033a2:	89 c8                	mov    eax,ecx
c00033a4:	c3                   	ret    

c00033a5 <dir_sdi>:
c00033a5:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c00033ab:	0f 87 b6 00 00 00    	ja     c0003467 <dir_sdi+0xc2>
c00033b1:	55                   	push   ebp
c00033b2:	57                   	push   edi
c00033b3:	56                   	push   esi
c00033b4:	53                   	push   ebx
c00033b5:	89 d3                	mov    ebx,edx
c00033b7:	83 ec 1c             	sub    esp,0x1c
c00033ba:	f6 c2 1f             	test   dl,0x1f
c00033bd:	74 0a                	je     c00033c9 <dir_sdi+0x24>
c00033bf:	b8 02 00 00 00       	mov    eax,0x2
c00033c4:	e9 96 00 00 00       	jmp    c000345f <dir_sdi+0xba>
c00033c9:	89 c6                	mov    esi,eax
c00033cb:	8b 28                	mov    ebp,DWORD PTR [eax]
c00033cd:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c00033d0:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c00033d3:	85 ff                	test   edi,edi
c00033d5:	75 21                	jne    c00033f8 <dir_sdi+0x53>
c00033d7:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c00033db:	76 07                	jbe    c00033e4 <dir_sdi+0x3f>
c00033dd:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033e0:	85 c0                	test   eax,eax
c00033e2:	75 12                	jne    c00033f6 <dir_sdi+0x51>
c00033e4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00033e8:	89 da                	mov    edx,ebx
c00033ea:	c1 ea 05             	shr    edx,0x5
c00033ed:	39 c2                	cmp    edx,eax
c00033ef:	73 ce                	jae    c00033bf <dir_sdi+0x1a>
c00033f1:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033f4:	eb 3c                	jmp    c0003432 <dir_sdi+0x8d>
c00033f6:	89 c7                	mov    edi,eax
c00033f8:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033fc:	c1 e1 09             	shl    ecx,0x9
c00033ff:	39 cb                	cmp    ebx,ecx
c0003401:	72 26                	jb     c0003429 <dir_sdi+0x84>
c0003403:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003407:	8b 06                	mov    eax,DWORD PTR [esi]
c0003409:	89 fa                	mov    edx,edi
c000340b:	e8 93 fe ff ff       	call   c00032a3 <get_fat.isra.2>
c0003410:	83 f8 ff             	cmp    eax,0xffffffff
c0003413:	89 c7                	mov    edi,eax
c0003415:	74 43                	je     c000345a <dir_sdi+0xb5>
c0003417:	83 f8 01             	cmp    eax,0x1
c000341a:	76 a3                	jbe    c00033bf <dir_sdi+0x1a>
c000341c:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000341f:	76 9e                	jbe    c00033bf <dir_sdi+0x1a>
c0003421:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003425:	29 cb                	sub    ebx,ecx
c0003427:	eb d6                	jmp    c00033ff <dir_sdi+0x5a>
c0003429:	89 fa                	mov    edx,edi
c000342b:	89 e8                	mov    eax,ebp
c000342d:	e8 d6 ec ff ff       	call   c0002108 <clst2sect>
c0003432:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003435:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c0003438:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c000343b:	85 d2                	test   edx,edx
c000343d:	74 80                	je     c00033bf <dir_sdi+0x1a>
c000343f:	89 d8                	mov    eax,ebx
c0003441:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003447:	c1 e8 09             	shr    eax,0x9
c000344a:	01 d0                	add    eax,edx
c000344c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344f:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003453:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003456:	31 c0                	xor    eax,eax
c0003458:	eb 05                	jmp    c000345f <dir_sdi+0xba>
c000345a:	b8 01 00 00 00       	mov    eax,0x1
c000345f:	83 c4 1c             	add    esp,0x1c
c0003462:	5b                   	pop    ebx
c0003463:	5e                   	pop    esi
c0003464:	5f                   	pop    edi
c0003465:	5d                   	pop    ebp
c0003466:	c3                   	ret    
c0003467:	b8 02 00 00 00       	mov    eax,0x2
c000346c:	c3                   	ret    

c000346d <create_chain>:
c000346d:	55                   	push   ebp
c000346e:	89 c5                	mov    ebp,eax
c0003470:	57                   	push   edi
c0003471:	89 d7                	mov    edi,edx
c0003473:	56                   	push   esi
c0003474:	53                   	push   ebx
c0003475:	83 ec 1c             	sub    esp,0x1c
c0003478:	85 d2                	test   edx,edx
c000347a:	8b 18                	mov    ebx,DWORD PTR [eax]
c000347c:	75 0e                	jne    c000348c <create_chain+0x1f>
c000347e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003481:	85 c9                	test   ecx,ecx
c0003483:	74 32                	je     c00034b7 <create_chain+0x4a>
c0003485:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003488:	77 32                	ja     c00034bc <create_chain+0x4f>
c000348a:	eb 2b                	jmp    c00034b7 <create_chain+0x4a>
c000348c:	89 d8                	mov    eax,ebx
c000348e:	e8 10 fe ff ff       	call   c00032a3 <get_fat.isra.2>
c0003493:	83 f8 01             	cmp    eax,0x1
c0003496:	77 0a                	ja     c00034a2 <create_chain+0x35>
c0003498:	b8 01 00 00 00       	mov    eax,0x1
c000349d:	e9 f8 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 ec 00 00 00    	je     c0003597 <create_chain+0x12a>
c00034ab:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034ae:	89 f9                	mov    ecx,edi
c00034b0:	76 0a                	jbe    c00034bc <create_chain+0x4f>
c00034b2:	e9 e3 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034b7:	b9 01 00 00 00       	mov    ecx,0x1
c00034bc:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00034c0:	75 07                	jne    c00034c9 <create_chain+0x5c>
c00034c2:	31 c0                	xor    eax,eax
c00034c4:	e9 d1 00 00 00       	jmp    c000359a <create_chain+0x12d>
c00034c9:	39 f9                	cmp    ecx,edi
c00034cb:	75 49                	jne    c0003516 <create_chain+0xa9>
c00034cd:	8d 71 01             	lea    esi,[ecx+0x1]
c00034d0:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034d3:	77 05                	ja     c00034da <create_chain+0x6d>
c00034d5:	be 02 00 00 00       	mov    esi,0x2
c00034da:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e1:	89 f2                	mov    edx,esi
c00034e3:	e8 bb fd ff ff       	call   c00032a3 <get_fat.isra.2>
c00034e8:	83 f8 01             	cmp    eax,0x1
c00034eb:	0f 84 a9 00 00 00    	je     c000359a <create_chain+0x12d>
c00034f1:	83 f8 ff             	cmp    eax,0xffffffff
c00034f4:	0f 84 a0 00 00 00    	je     c000359a <create_chain+0x12d>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003500:	74 10                	je     c0003512 <create_chain+0xa5>
c0003502:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003505:	83 f8 01             	cmp    eax,0x1
c0003508:	76 0c                	jbe    c0003516 <create_chain+0xa9>
c000350a:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000350d:	0f 47 c8             	cmova  ecx,eax
c0003510:	eb 04                	jmp    c0003516 <create_chain+0xa9>
c0003512:	85 f6                	test   esi,esi
c0003514:	75 3b                	jne    c0003551 <create_chain+0xe4>
c0003516:	89 ce                	mov    esi,ecx
c0003518:	46                   	inc    esi
c0003519:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000351c:	77 0a                	ja     c0003528 <create_chain+0xbb>
c000351e:	83 f9 01             	cmp    ecx,0x1
c0003521:	76 9f                	jbe    c00034c2 <create_chain+0x55>
c0003523:	be 02 00 00 00       	mov    esi,0x2
c0003528:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000352c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000352f:	89 f2                	mov    edx,esi
c0003531:	e8 6d fd ff ff       	call   c00032a3 <get_fat.isra.2>
c0003536:	85 c0                	test   eax,eax
c0003538:	74 17                	je     c0003551 <create_chain+0xe4>
c000353a:	83 f8 01             	cmp    eax,0x1
c000353d:	74 5b                	je     c000359a <create_chain+0x12d>
c000353f:	83 f8 ff             	cmp    eax,0xffffffff
c0003542:	74 56                	je     c000359a <create_chain+0x12d>
c0003544:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003548:	39 ce                	cmp    esi,ecx
c000354a:	75 cc                	jne    c0003518 <create_chain+0xab>
c000354c:	e9 71 ff ff ff       	jmp    c00034c2 <create_chain+0x55>
c0003551:	83 c9 ff             	or     ecx,0xffffffff
c0003554:	89 f2                	mov    edx,esi
c0003556:	89 d8                	mov    eax,ebx
c0003558:	e8 da f2 ff ff       	call   c0002837 <put_fat>
c000355d:	85 c0                	test   eax,eax
c000355f:	75 0f                	jne    c0003570 <create_chain+0x103>
c0003561:	85 ff                	test   edi,edi
c0003563:	74 0b                	je     c0003570 <create_chain+0x103>
c0003565:	89 f1                	mov    ecx,esi
c0003567:	89 fa                	mov    edx,edi
c0003569:	89 d8                	mov    eax,ebx
c000356b:	e8 c7 f2 ff ff       	call   c0002837 <put_fat>
c0003570:	85 c0                	test   eax,eax
c0003572:	75 1c                	jne    c0003590 <create_chain+0x123>
c0003574:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003577:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000357a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357d:	8d 57 fe             	lea    edx,[edi-0x2]
c0003580:	39 d0                	cmp    eax,edx
c0003582:	77 04                	ja     c0003588 <create_chain+0x11b>
c0003584:	48                   	dec    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000358c:	89 f0                	mov    eax,esi
c000358e:	eb 0a                	jmp    c000359a <create_chain+0x12d>
c0003590:	48                   	dec    eax
c0003591:	0f 85 01 ff ff ff    	jne    c0003498 <create_chain+0x2b>
c0003597:	83 c8 ff             	or     eax,0xffffffff
c000359a:	83 c4 1c             	add    esp,0x1c
c000359d:	5b                   	pop    ebx
c000359e:	5e                   	pop    esi
c000359f:	5f                   	pop    edi
c00035a0:	5d                   	pop    ebp
c00035a1:	c3                   	ret    

c00035a2 <remove_chain>:
c00035a2:	55                   	push   ebp
c00035a3:	57                   	push   edi
c00035a4:	56                   	push   esi
c00035a5:	89 d6                	mov    esi,edx
c00035a7:	53                   	push   ebx
c00035a8:	83 ec 0c             	sub    esp,0xc
c00035ab:	83 fa 01             	cmp    edx,0x1
c00035ae:	8b 18                	mov    ebx,DWORD PTR [eax]
c00035b0:	76 65                	jbe    c0003617 <remove_chain+0x75>
c00035b2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c00035b5:	76 60                	jbe    c0003617 <remove_chain+0x75>
c00035b7:	85 c9                	test   ecx,ecx
c00035b9:	89 c5                	mov    ebp,eax
c00035bb:	89 ca                	mov    edx,ecx
c00035bd:	74 0e                	je     c00035cd <remove_chain+0x2b>
c00035bf:	83 c9 ff             	or     ecx,0xffffffff
c00035c2:	89 d8                	mov    eax,ebx
c00035c4:	e8 6e f2 ff ff       	call   c0002837 <put_fat>
c00035c9:	85 c0                	test   eax,eax
c00035cb:	75 56                	jne    c0003623 <remove_chain+0x81>
c00035cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	e8 cc fc ff ff       	call   c00032a3 <get_fat.isra.2>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	89 c7                	mov    edi,eax
c00035db:	75 04                	jne    c00035e1 <remove_chain+0x3f>
c00035dd:	31 c0                	xor    eax,eax
c00035df:	eb 42                	jmp    c0003623 <remove_chain+0x81>
c00035e1:	83 f8 01             	cmp    eax,0x1
c00035e4:	74 31                	je     c0003617 <remove_chain+0x75>
c00035e6:	83 f8 ff             	cmp    eax,0xffffffff
c00035e9:	74 33                	je     c000361e <remove_chain+0x7c>
c00035eb:	31 c9                	xor    ecx,ecx
c00035ed:	89 f2                	mov    edx,esi
c00035ef:	89 d8                	mov    eax,ebx
c00035f1:	e8 41 f2 ff ff       	call   c0002837 <put_fat>
c00035f6:	85 c0                	test   eax,eax
c00035f8:	75 29                	jne    c0003623 <remove_chain+0x81>
c00035fa:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035fd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003600:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003603:	39 c8                	cmp    eax,ecx
c0003605:	73 08                	jae    c000360f <remove_chain+0x6d>
c0003607:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000360b:	40                   	inc    eax
c000360c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000360f:	39 fa                	cmp    edx,edi
c0003611:	89 fe                	mov    esi,edi
c0003613:	77 b8                	ja     c00035cd <remove_chain+0x2b>
c0003615:	eb c6                	jmp    c00035dd <remove_chain+0x3b>
c0003617:	b8 02 00 00 00       	mov    eax,0x2
c000361c:	eb 05                	jmp    c0003623 <remove_chain+0x81>
c000361e:	b8 01 00 00 00       	mov    eax,0x1
c0003623:	83 c4 0c             	add    esp,0xc
c0003626:	5b                   	pop    ebx
c0003627:	5e                   	pop    esi
c0003628:	5f                   	pop    edi
c0003629:	5d                   	pop    ebp
c000362a:	c3                   	ret    

c000362b <dir_next>:
c000362b:	55                   	push   ebp
c000362c:	57                   	push   edi
c000362d:	56                   	push   esi
c000362e:	53                   	push   ebx
c000362f:	83 ec 1c             	sub    esp,0x1c
c0003632:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003635:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003637:	83 c7 20             	add    edi,0x20
c000363a:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003640:	76 07                	jbe    c0003649 <dir_next+0x1e>
c0003642:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003649:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	85 f6                	test   esi,esi
c0003653:	0f 84 cd 00 00 00    	je     c0003726 <dir_next+0xfb>
c0003659:	89 c3                	mov    ebx,eax
c000365b:	89 f8                	mov    eax,edi
c000365d:	25 ff 01 00 00       	and    eax,0x1ff
c0003662:	89 d1                	mov    ecx,edx
c0003664:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003668:	0f 85 a8 00 00 00    	jne    c0003716 <dir_next+0xeb>
c000366e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003671:	46                   	inc    esi
c0003672:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003675:	85 d2                	test   edx,edx
c0003677:	75 22                	jne    c000369b <dir_next+0x70>
c0003679:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000367d:	89 fa                	mov    edx,edi
c000367f:	c1 ea 05             	shr    edx,0x5
c0003682:	39 c2                	cmp    edx,eax
c0003684:	0f 82 8c 00 00 00    	jb     c0003716 <dir_next+0xeb>
c000368a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003691:	b9 04 00 00 00       	mov    ecx,0x4
c0003696:	e9 8b 00 00 00       	jmp    c0003726 <dir_next+0xfb>
c000369b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000369f:	89 fe                	mov    esi,edi
c00036a1:	c1 ee 09             	shr    esi,0x9
c00036a4:	48                   	dec    eax
c00036a5:	85 f0                	test   eax,esi
c00036a7:	75 6d                	jne    c0003716 <dir_next+0xeb>
c00036a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036ad:	89 e8                	mov    eax,ebp
c00036af:	e8 ef fb ff ff       	call   c00032a3 <get_fat.isra.2>
c00036b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036b8:	83 f8 01             	cmp    eax,0x1
c00036bb:	89 c6                	mov    esi,eax
c00036bd:	77 07                	ja     c00036c6 <dir_next+0x9b>
c00036bf:	b9 02 00 00 00       	mov    ecx,0x2
c00036c4:	eb 60                	jmp    c0003726 <dir_next+0xfb>
c00036c6:	83 f8 ff             	cmp    eax,0xffffffff
c00036c9:	75 07                	jne    c00036d2 <dir_next+0xa7>
c00036cb:	b9 01 00 00 00       	mov    ecx,0x1
c00036d0:	eb 54                	jmp    c0003726 <dir_next+0xfb>
c00036d2:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00036d5:	77 30                	ja     c0003707 <dir_next+0xdc>
c00036d7:	85 c9                	test   ecx,ecx
c00036d9:	74 af                	je     c000368a <dir_next+0x5f>
c00036db:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00036de:	89 d8                	mov    eax,ebx
c00036e0:	e8 88 fd ff ff       	call   c000346d <create_chain>
c00036e5:	b9 07 00 00 00       	mov    ecx,0x7
c00036ea:	85 c0                	test   eax,eax
c00036ec:	89 c6                	mov    esi,eax
c00036ee:	74 36                	je     c0003726 <dir_next+0xfb>
c00036f0:	83 f8 01             	cmp    eax,0x1
c00036f3:	74 ca                	je     c00036bf <dir_next+0x94>
c00036f5:	83 f8 ff             	cmp    eax,0xffffffff
c00036f8:	74 d1                	je     c00036cb <dir_next+0xa0>
c00036fa:	89 c2                	mov    edx,eax
c00036fc:	89 e8                	mov    eax,ebp
c00036fe:	e8 88 f2 ff ff       	call   c000298b <dir_clear>
c0003703:	85 c0                	test   eax,eax
c0003705:	75 c4                	jne    c00036cb <dir_next+0xa0>
c0003707:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000370a:	89 f2                	mov    edx,esi
c000370c:	89 e8                	mov    eax,ebp
c000370e:	e8 f5 e9 ff ff       	call   c0002108 <clst2sect>
c0003713:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003716:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003719:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000371d:	31 c9                	xor    ecx,ecx
c000371f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003723:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 c8                	mov    eax,ecx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <dir_alloc>:
c0003730:	55                   	push   ebp
c0003731:	89 c5                	mov    ebp,eax
c0003733:	57                   	push   edi
c0003734:	89 d7                	mov    edi,edx
c0003736:	56                   	push   esi
c0003737:	31 d2                	xor    edx,edx
c0003739:	53                   	push   ebx
c000373a:	83 ec 0c             	sub    esp,0xc
c000373d:	8b 30                	mov    esi,DWORD PTR [eax]
c000373f:	e8 61 fc ff ff       	call   c00033a5 <dir_sdi>
c0003744:	85 c0                	test   eax,eax
c0003746:	75 37                	jne    c000377f <dir_alloc+0x4f>
c0003748:	31 db                	xor    ebx,ebx
c000374a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000374d:	89 f0                	mov    eax,esi
c000374f:	e8 89 ec ff ff       	call   c00023dd <move_window>
c0003754:	85 c0                	test   eax,eax
c0003756:	75 27                	jne    c000377f <dir_alloc+0x4f>
c0003758:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c000375b:	8a 12                	mov    dl,BYTE PTR [edx]
c000375d:	80 fa e5             	cmp    dl,0xe5
c0003760:	74 04                	je     c0003766 <dir_alloc+0x36>
c0003762:	84 d2                	test   dl,dl
c0003764:	75 07                	jne    c000376d <dir_alloc+0x3d>
c0003766:	43                   	inc    ebx
c0003767:	39 fb                	cmp    ebx,edi
c0003769:	75 04                	jne    c000376f <dir_alloc+0x3f>
c000376b:	eb 1c                	jmp    c0003789 <dir_alloc+0x59>
c000376d:	31 db                	xor    ebx,ebx
c000376f:	ba 01 00 00 00       	mov    edx,0x1
c0003774:	89 e8                	mov    eax,ebp
c0003776:	e8 b0 fe ff ff       	call   c000362b <dir_next>
c000377b:	85 c0                	test   eax,eax
c000377d:	74 cb                	je     c000374a <dir_alloc+0x1a>
c000377f:	83 f8 04             	cmp    eax,0x4
c0003782:	75 05                	jne    c0003789 <dir_alloc+0x59>
c0003784:	b8 07 00 00 00       	mov    eax,0x7
c0003789:	83 c4 0c             	add    esp,0xc
c000378c:	5b                   	pop    ebx
c000378d:	5e                   	pop    esi
c000378e:	5f                   	pop    edi
c000378f:	5d                   	pop    ebp
c0003790:	c3                   	ret    

c0003791 <dir_read>:
c0003791:	55                   	push   ebp
c0003792:	57                   	push   edi
c0003793:	56                   	push   esi
c0003794:	be 04 00 00 00       	mov    esi,0x4
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00037a3:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a5:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037aa:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00037af:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037b2:	85 d2                	test   edx,edx
c00037b4:	0f 84 d8 00 00 00    	je     c0003892 <dir_read+0x101>
c00037ba:	89 e8                	mov    eax,ebp
c00037bc:	e8 1c ec ff ff       	call   c00023dd <move_window>
c00037c1:	85 c0                	test   eax,eax
c00037c3:	89 c6                	mov    esi,eax
c00037c5:	0f 85 d2 00 00 00    	jne    c000389d <dir_read+0x10c>
c00037cb:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00037ce:	8a 0f                	mov    cl,BYTE PTR [edi]
c00037d0:	84 c9                	test   cl,cl
c00037d2:	0f 84 c0 00 00 00    	je     c0003898 <dir_read+0x107>
c00037d8:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c00037db:	24 3f                	and    al,0x3f
c00037dd:	80 f9 e5             	cmp    cl,0xe5
c00037e0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037e3:	0f 84 8f 00 00 00    	je     c0003878 <dir_read+0xe7>
c00037e9:	80 f9 2e             	cmp    cl,0x2e
c00037ec:	0f 84 86 00 00 00    	je     c0003878 <dir_read+0xe7>
c00037f2:	0f b6 d0             	movzx  edx,al
c00037f5:	83 e2 df             	and    edx,0xffffffdf
c00037f8:	83 fa 08             	cmp    edx,0x8
c00037fb:	0f 94 c2             	sete   dl
c00037fe:	0f b6 d2             	movzx  edx,dl
c0003801:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0003805:	75 71                	jne    c0003878 <dir_read+0xe7>
c0003807:	3c 0f                	cmp    al,0xf
c0003809:	75 4c                	jne    c0003857 <dir_read+0xc6>
c000380b:	88 c8                	mov    al,cl
c000380d:	24 40                	and    al,0x40
c000380f:	74 12                	je     c0003823 <dir_read+0x92>
c0003811:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003814:	80 e1 bf             	and    cl,0xbf
c0003817:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000381b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000381e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003821:	eb 06                	jmp    c0003829 <dir_read+0x98>
c0003823:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c0003827:	75 4f                	jne    c0003878 <dir_read+0xe7>
c0003829:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000382e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0003832:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c0003835:	75 46                	jne    c000387d <dir_read+0xec>
c0003837:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000383b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000383e:	89 fa                	mov    edx,edi
c0003840:	e8 e0 e8 ff ff       	call   c0002125 <pick_lfn>
c0003845:	85 c0                	test   eax,eax
c0003847:	74 34                	je     c000387d <dir_read+0xec>
c0003849:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000384d:	88 c8                	mov    al,cl
c000384f:	fe c8                	dec    al
c0003851:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0003855:	eb 26                	jmp    c000387d <dir_read+0xec>
c0003857:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c000385c:	75 11                	jne    c000386f <dir_read+0xde>
c000385e:	89 f8                	mov    eax,edi
c0003860:	e8 76 ea ff ff       	call   c00022db <sum_sfn>
c0003865:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003869:	75 04                	jne    c000386f <dir_read+0xde>
c000386b:	31 f6                	xor    esi,esi
c000386d:	eb 35                	jmp    c00038a4 <dir_read+0x113>
c000386f:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003876:	eb 2c                	jmp    c00038a4 <dir_read+0x113>
c0003878:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000387d:	31 d2                	xor    edx,edx
c000387f:	89 d8                	mov    eax,ebx
c0003881:	e8 a5 fd ff ff       	call   c000362b <dir_next>
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	0f 84 1f ff ff ff    	je     c00037af <dir_read+0x1e>
c0003890:	eb 0b                	jmp    c000389d <dir_read+0x10c>
c0003892:	85 f6                	test   esi,esi
c0003894:	74 d5                	je     c000386b <dir_read+0xda>
c0003896:	eb 05                	jmp    c000389d <dir_read+0x10c>
c0003898:	be 04 00 00 00       	mov    esi,0x4
c000389d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a4:	83 c4 1c             	add    esp,0x1c
c00038a7:	89 f0                	mov    eax,esi
c00038a9:	5b                   	pop    ebx
c00038aa:	5e                   	pop    esi
c00038ab:	5f                   	pop    edi
c00038ac:	5d                   	pop    ebp
c00038ad:	c3                   	ret    

c00038ae <dir_remove>:
c00038ae:	57                   	push   edi
c00038af:	56                   	push   esi
c00038b0:	53                   	push   ebx
c00038b1:	89 c3                	mov    ebx,eax
c00038b3:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00038b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00038b8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038bb:	83 fa ff             	cmp    edx,0xffffffff
c00038be:	74 09                	je     c00038c9 <dir_remove+0x1b>
c00038c0:	e8 e0 fa ff ff       	call   c00033a5 <dir_sdi>
c00038c5:	85 c0                	test   eax,eax
c00038c7:	75 34                	jne    c00038fd <dir_remove+0x4f>
c00038c9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038cc:	89 f0                	mov    eax,esi
c00038ce:	e8 0a eb ff ff       	call   c00023dd <move_window>
c00038d3:	85 c0                	test   eax,eax
c00038d5:	75 1c                	jne    c00038f3 <dir_remove+0x45>
c00038d7:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038da:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038dd:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038e1:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038e4:	73 17                	jae    c00038fd <dir_remove+0x4f>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 d8                	mov    eax,ebx
c00038ea:	e8 3c fd ff ff       	call   c000362b <dir_next>
c00038ef:	85 c0                	test   eax,eax
c00038f1:	74 d6                	je     c00038c9 <dir_remove+0x1b>
c00038f3:	83 f8 04             	cmp    eax,0x4
c00038f6:	75 05                	jne    c00038fd <dir_remove+0x4f>
c00038f8:	b8 02 00 00 00       	mov    eax,0x2
c00038fd:	5b                   	pop    ebx
c00038fe:	5e                   	pop    esi
c00038ff:	5f                   	pop    edi
c0003900:	c3                   	ret    

c0003901 <dir_find>:
c0003901:	55                   	push   ebp
c0003902:	31 d2                	xor    edx,edx
c0003904:	57                   	push   edi
c0003905:	56                   	push   esi
c0003906:	53                   	push   ebx
c0003907:	89 c3                	mov    ebx,eax
c0003909:	83 ec 1c             	sub    esp,0x1c
c000390c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000390e:	e8 92 fa ff ff       	call   c00033a5 <dir_sdi>
c0003913:	85 c0                	test   eax,eax
c0003915:	89 c6                	mov    esi,eax
c0003917:	0f 85 03 01 00 00    	jne    c0003a20 <dir_find+0x11f>
c000391d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003924:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003929:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c000392e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003931:	89 e8                	mov    eax,ebp
c0003933:	e8 a5 ea ff ff       	call   c00023dd <move_window>
c0003938:	85 c0                	test   eax,eax
c000393a:	89 c6                	mov    esi,eax
c000393c:	0f 85 de 00 00 00    	jne    c0003a20 <dir_find+0x11f>
c0003942:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003945:	8a 0f                	mov    cl,BYTE PTR [edi]
c0003947:	84 c9                	test   cl,cl
c0003949:	0f 84 cc 00 00 00    	je     c0003a1b <dir_find+0x11a>
c000394f:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003952:	88 c2                	mov    dl,al
c0003954:	80 e2 3f             	and    dl,0x3f
c0003957:	80 f9 e5             	cmp    cl,0xe5
c000395a:	88 53 06             	mov    BYTE PTR [ebx+0x6],dl
c000395d:	0f 84 97 00 00 00    	je     c00039fa <dir_find+0xf9>
c0003963:	24 08                	and    al,0x8
c0003965:	74 0b                	je     c0003972 <dir_find+0x71>
c0003967:	80 fa 0f             	cmp    dl,0xf
c000396a:	0f 85 8a 00 00 00    	jne    c00039fa <dir_find+0xf9>
c0003970:	eb 05                	jmp    c0003977 <dir_find+0x76>
c0003972:	80 fa 0f             	cmp    dl,0xf
c0003975:	75 56                	jne    c00039cd <dir_find+0xcc>
c0003977:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000397b:	0f 85 85 00 00 00    	jne    c0003a06 <dir_find+0x105>
c0003981:	88 c8                	mov    al,cl
c0003983:	24 40                	and    al,0x40
c0003985:	74 12                	je     c0003999 <dir_find+0x98>
c0003987:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000398a:	80 e1 bf             	and    cl,0xbf
c000398d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0003991:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003994:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003997:	eb 06                	jmp    c000399f <dir_find+0x9e>
c0003999:	38 4c 24 0d          	cmp    BYTE PTR [esp+0xd],cl
c000399d:	75 62                	jne    c0003a01 <dir_find+0x100>
c000399f:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00039a4:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00039a8:	38 47 0d             	cmp    BYTE PTR [edi+0xd],al
c00039ab:	75 59                	jne    c0003a06 <dir_find+0x105>
c00039ad:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00039b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039b4:	89 fa                	mov    edx,edi
c00039b6:	e8 9c f3 ff ff       	call   c0002d57 <cmp_lfn>
c00039bb:	85 c0                	test   eax,eax
c00039bd:	74 47                	je     c0003a06 <dir_find+0x105>
c00039bf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00039c3:	88 c8                	mov    al,cl
c00039c5:	fe c8                	dec    al
c00039c7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00039cb:	eb 39                	jmp    c0003a06 <dir_find+0x105>
c00039cd:	80 7c 24 0d 00       	cmp    BYTE PTR [esp+0xd],0x0
c00039d2:	75 0d                	jne    c00039e1 <dir_find+0xe0>
c00039d4:	89 f8                	mov    eax,edi
c00039d6:	e8 00 e9 ff ff       	call   c00022db <sum_sfn>
c00039db:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c00039df:	74 3f                	je     c0003a20 <dir_find+0x11f>
c00039e1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039e5:	75 13                	jne    c00039fa <dir_find+0xf9>
c00039e7:	8d 53 20             	lea    edx,[ebx+0x20]
c00039ea:	b9 0b 00 00 00       	mov    ecx,0xb
c00039ef:	89 f8                	mov    eax,edi
c00039f1:	e8 1e e5 ff ff       	call   c0001f14 <mem_cmp>
c00039f6:	85 c0                	test   eax,eax
c00039f8:	74 26                	je     c0003a20 <dir_find+0x11f>
c00039fa:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a01:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0003a06:	31 d2                	xor    edx,edx
c0003a08:	89 d8                	mov    eax,ebx
c0003a0a:	e8 1c fc ff ff       	call   c000362b <dir_next>
c0003a0f:	85 c0                	test   eax,eax
c0003a11:	89 c6                	mov    esi,eax
c0003a13:	0f 84 15 ff ff ff    	je     c000392e <dir_find+0x2d>
c0003a19:	eb 05                	jmp    c0003a20 <dir_find+0x11f>
c0003a1b:	be 04 00 00 00       	mov    esi,0x4
c0003a20:	83 c4 1c             	add    esp,0x1c
c0003a23:	89 f0                	mov    eax,esi
c0003a25:	5b                   	pop    ebx
c0003a26:	5e                   	pop    esi
c0003a27:	5f                   	pop    edi
c0003a28:	5d                   	pop    ebp
c0003a29:	c3                   	ret    

c0003a2a <follow_path>:
c0003a2a:	56                   	push   esi
c0003a2b:	53                   	push   ebx
c0003a2c:	89 c3                	mov    ebx,eax
c0003a2e:	83 ec 14             	sub    esp,0x14
c0003a31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a3b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a3d:	80 fa 2f             	cmp    dl,0x2f
c0003a40:	75 07                	jne    c0003a49 <follow_path+0x1f>
c0003a42:	40                   	inc    eax
c0003a43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a47:	eb ee                	jmp    c0003a37 <follow_path+0xd>
c0003a49:	80 fa 5c             	cmp    dl,0x5c
c0003a4c:	74 f4                	je     c0003a42 <follow_path+0x18>
c0003a4e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a55:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a58:	77 3e                	ja     c0003a98 <follow_path+0x6e>
c0003a5a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a5e:	31 d2                	xor    edx,edx
c0003a60:	89 d8                	mov    eax,ebx
c0003a62:	e8 3e f9 ff ff       	call   c00033a5 <dir_sdi>
c0003a67:	eb 57                	jmp    c0003ac0 <follow_path+0x96>
c0003a69:	89 d8                	mov    eax,ebx
c0003a6b:	e8 91 fe ff ff       	call   c0003901 <dir_find>
c0003a70:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a73:	85 c0                	test   eax,eax
c0003a75:	75 32                	jne    c0003aa9 <follow_path+0x7f>
c0003a77:	80 e2 04             	and    dl,0x4
c0003a7a:	75 44                	jne    c0003ac0 <follow_path+0x96>
c0003a7c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a80:	74 39                	je     c0003abb <follow_path+0x91>
c0003a82:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a85:	25 ff 01 00 00       	and    eax,0x1ff
c0003a8a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a8e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a90:	e8 be f7 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003a95:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a98:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 e4 ef ff ff       	call   c0002a87 <create_name>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 c2                	je     c0003a69 <follow_path+0x3f>
c0003aa7:	eb 17                	jmp    c0003ac0 <follow_path+0x96>
c0003aa9:	83 f8 04             	cmp    eax,0x4
c0003aac:	75 12                	jne    c0003ac0 <follow_path+0x96>
c0003aae:	80 e2 04             	and    dl,0x4
c0003ab1:	ba 05 00 00 00       	mov    edx,0x5
c0003ab6:	0f 44 c2             	cmove  eax,edx
c0003ab9:	eb 05                	jmp    c0003ac0 <follow_path+0x96>
c0003abb:	b8 05 00 00 00       	mov    eax,0x5
c0003ac0:	83 c4 14             	add    esp,0x14
c0003ac3:	5b                   	pop    ebx
c0003ac4:	5e                   	pop    esi
c0003ac5:	c3                   	ret    

c0003ac6 <dir_register>:
c0003ac6:	55                   	push   ebp
c0003ac7:	57                   	push   edi
c0003ac8:	56                   	push   esi
c0003ac9:	be 06 00 00 00       	mov    esi,0x6
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 2c             	sub    esp,0x2c
c0003ad2:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003ad6:	0f 85 65 01 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003adc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ae4:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ae6:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003ae9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003aed:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003af2:	74 06                	je     c0003afa <dir_register+0x34>
c0003af4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003af8:	eb ef                	jmp    c0003ae9 <dir_register+0x23>
c0003afa:	89 c3                	mov    ebx,eax
c0003afc:	b9 0c 00 00 00       	mov    ecx,0xc
c0003b01:	8d 40 20             	lea    eax,[eax+0x20]
c0003b04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003b08:	89 c2                	mov    edx,eax
c0003b0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b0e:	e8 e2 e3 ff ff       	call   c0001ef5 <mem_cpy>
c0003b13:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b18:	74 48                	je     c0003b62 <dir_register+0x9c>
c0003b1a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b1e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b23:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b26:	55                   	push   ebp
c0003b27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b2b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b2f:	e8 ec e6 ff ff       	call   c0002220 <gen_numname>
c0003b34:	58                   	pop    eax
c0003b35:	89 d8                	mov    eax,ebx
c0003b37:	e8 c5 fd ff ff       	call   c0003901 <dir_find>
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	89 c6                	mov    esi,eax
c0003b40:	75 10                	jne    c0003b52 <dir_register+0x8c>
c0003b42:	45                   	inc    ebp
c0003b43:	83 fd 64             	cmp    ebp,0x64
c0003b46:	75 db                	jne    c0003b23 <dir_register+0x5d>
c0003b48:	be 07 00 00 00       	mov    esi,0x7
c0003b4d:	e9 ef 00 00 00       	jmp    c0003c41 <dir_register+0x17b>
c0003b52:	83 f8 04             	cmp    eax,0x4
c0003b55:	0f 85 e6 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003b5b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b5f:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b62:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b67:	bd 01 00 00 00       	mov    ebp,0x1
c0003b6c:	74 13                	je     c0003b81 <dir_register+0xbb>
c0003b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b72:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b77:	31 d2                	xor    edx,edx
c0003b79:	83 c0 0c             	add    eax,0xc
c0003b7c:	f7 f1                	div    ecx
c0003b7e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b81:	89 ea                	mov    edx,ebp
c0003b83:	89 d8                	mov    eax,ebx
c0003b85:	e8 a6 fb ff ff       	call   c0003730 <dir_alloc>
c0003b8a:	85 c0                	test   eax,eax
c0003b8c:	89 c6                	mov    esi,eax
c0003b8e:	0f 85 ad 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003b94:	4d                   	dec    ebp
c0003b95:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b99:	74 67                	je     c0003c02 <dir_register+0x13c>
c0003b9b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	c1 e0 05             	shl    eax,0x5
c0003ba3:	29 c2                	sub    edx,eax
c0003ba5:	89 d8                	mov    eax,ebx
c0003ba7:	e8 f9 f7 ff ff       	call   c00033a5 <dir_sdi>
c0003bac:	85 c0                	test   eax,eax
c0003bae:	89 c6                	mov    esi,eax
c0003bb0:	0f 85 8b 00 00 00    	jne    c0003c41 <dir_register+0x17b>
c0003bb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bba:	e8 1c e7 ff ff       	call   c00022db <sum_sfn>
c0003bbf:	0f b6 e8             	movzx  ebp,al
c0003bc2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bc5:	89 f8                	mov    eax,edi
c0003bc7:	e8 11 e8 ff ff       	call   c00023dd <move_window>
c0003bcc:	85 c0                	test   eax,eax
c0003bce:	89 c6                	mov    esi,eax
c0003bd0:	75 6f                	jne    c0003c41 <dir_register+0x17b>
c0003bd2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003bd7:	83 ec 0c             	sub    esp,0xc
c0003bda:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bdd:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003be0:	55                   	push   ebp
c0003be1:	e8 c2 e5 ff ff       	call   c00021a8 <put_lfn>
c0003be6:	31 d2                	xor    edx,edx
c0003be8:	89 d8                	mov    eax,ebx
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	e8 38 fa ff ff       	call   c000362b <dir_next>
c0003bf3:	83 c4 10             	add    esp,0x10
c0003bf6:	85 c0                	test   eax,eax
c0003bf8:	89 c6                	mov    esi,eax
c0003bfa:	75 45                	jne    c0003c41 <dir_register+0x17b>
c0003bfc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003c00:	75 c0                	jne    c0003bc2 <dir_register+0xfc>
c0003c02:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c05:	89 f8                	mov    eax,edi
c0003c07:	e8 d1 e7 ff ff       	call   c00023dd <move_window>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	89 c6                	mov    esi,eax
c0003c10:	75 2f                	jne    c0003c41 <dir_register+0x17b>
c0003c12:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c15:	b9 20 00 00 00       	mov    ecx,0x20
c0003c1a:	31 d2                	xor    edx,edx
c0003c1c:	e8 e9 e2 ff ff       	call   c0001f0a <mem_set>
c0003c21:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c24:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c2d:	e8 c3 e2 ff ff       	call   c0001ef5 <mem_cpy>
c0003c32:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c35:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c38:	24 18                	and    al,0x18
c0003c3a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c3d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c41:	83 c4 2c             	add    esp,0x2c
c0003c44:	89 f0                	mov    eax,esi
c0003c46:	5b                   	pop    ebx
c0003c47:	5e                   	pop    esi
c0003c48:	5f                   	pop    edi
c0003c49:	5d                   	pop    ebp
c0003c4a:	c3                   	ret    

c0003c4b <f_mount>:
c0003c4b:	53                   	push   ebx
c0003c4c:	83 ec 18             	sub    esp,0x18
c0003c4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c53:	8a 5c 24 28          	mov    bl,BYTE PTR [esp+0x28]
c0003c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c5f:	e8 89 e6 ff ff       	call   c00022ed <get_ldnumber>
c0003c64:	89 c2                	mov    edx,eax
c0003c66:	b8 0b 00 00 00       	mov    eax,0xb
c0003c6b:	85 d2                	test   edx,edx
c0003c6d:	78 39                	js     c0003ca8 <f_mount+0x5d>
c0003c6f:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	74 03                	je     c0003c7d <f_mount+0x32>
c0003c7a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c81:	85 c0                	test   eax,eax
c0003c83:	74 03                	je     c0003c88 <f_mount+0x3d>
c0003c85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c8c:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c93:	31 c0                	xor    eax,eax
c0003c95:	84 db                	test   bl,bl
c0003c97:	74 0f                	je     c0003ca8 <f_mount+0x5d>
c0003c99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c9d:	31 c9                	xor    ecx,ecx
c0003c9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003ca3:	e8 92 e8 ff ff       	call   c000253a <mount_volume>
c0003ca8:	83 c4 18             	add    esp,0x18
c0003cab:	5b                   	pop    ebx
c0003cac:	c3                   	ret    

c0003cad <f_open>:
c0003cad:	55                   	push   ebp
c0003cae:	b8 09 00 00 00       	mov    eax,0x9
c0003cb3:	57                   	push   edi
c0003cb4:	56                   	push   esi
c0003cb5:	53                   	push   ebx
c0003cb6:	83 ec 5c             	sub    esp,0x5c
c0003cb9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0003cbd:	8a 5c 24 78          	mov    bl,BYTE PTR [esp+0x78]
c0003cc1:	85 f6                	test   esi,esi
c0003cc3:	0f 84 a6 02 00 00    	je     c0003f6f <f_open+0x2c2>
c0003cc9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ccd:	88 d8                	mov    al,bl
c0003ccf:	24 3f                	and    al,0x3f
c0003cd1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003cd5:	0f b6 c8             	movzx  ecx,al
c0003cd8:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cdc:	e8 59 e8 ff ff       	call   c000253a <mount_volume>
c0003ce1:	85 c0                	test   eax,eax
c0003ce3:	0f 85 80 02 00 00    	jne    c0003f69 <f_open+0x2bc>
c0003ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ced:	83 ec 0c             	sub    esp,0xc
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	68 00 02 00 00       	push   0x200
c0003cf9:	e8 02 1f 00 00       	call   c0005c00 <ff_memalloc>
c0003cfe:	83 c4 10             	add    esp,0x10
c0003d01:	89 c7                	mov    edi,eax
c0003d03:	b8 11 00 00 00       	mov    eax,0x11
c0003d08:	85 ff                	test   edi,edi
c0003d0a:	0f 84 5f 02 00 00    	je     c0003f6f <f_open+0x2c2>
c0003d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d14:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d18:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0003d1b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1f:	e8 06 fd ff ff       	call   c0003a2a <follow_path>
c0003d24:	85 c0                	test   eax,eax
c0003d26:	75 0d                	jne    c0003d35 <f_open+0x88>
c0003d28:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003d2d:	ba 06 00 00 00       	mov    edx,0x6
c0003d32:	0f 48 c2             	cmovs  eax,edx
c0003d35:	f6 c3 1c             	test   bl,0x1c
c0003d38:	0f 84 d2 00 00 00    	je     c0003e10 <f_open+0x163>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xb6>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 06 02 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 72 fd ff ff       	call   c0003ac6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 f5 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d5c:	80 4c 24 0c 08       	or     BYTE PTR [esp+0xc],0x8
c0003d61:	eb 29                	jmp    c0003d8c <f_open+0xdf>
c0003d63:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003d68:	b8 07 00 00 00       	mov    eax,0x7
c0003d6d:	0f 85 de 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d73:	88 da                	mov    dl,bl
c0003d75:	b8 08 00 00 00       	mov    eax,0x8
c0003d7a:	80 e2 04             	and    dl,0x4
c0003d7d:	0f 85 ce 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003d83:	80 e3 08             	and    bl,0x8
c0003d86:	0f 84 b3 00 00 00    	je     c0003e3f <f_open+0x192>
c0003d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d90:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d94:	8a 00                	mov    al,BYTE PTR [eax]
c0003d96:	89 ea                	mov    edx,ebp
c0003d98:	e8 b6 f4 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003d9d:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da2:	89 c3                	mov    ebx,eax
c0003da4:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003da7:	e8 46 e1 ff ff       	call   c0001ef2 <st_dword>
c0003dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db0:	31 c9                	xor    ecx,ecx
c0003db2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dbe:	e8 b8 f4 ff ff       	call   c000327b <st_clust.isra.1>
c0003dc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dc7:	31 d2                	xor    edx,edx
c0003dc9:	83 c0 1c             	add    eax,0x1c
c0003dcc:	e8 21 e1 ff ff       	call   c0001ef2 <st_dword>
c0003dd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd5:	85 db                	test   ebx,ebx
c0003dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003ddb:	74 62                	je     c0003e3f <f_open+0x192>
c0003ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de1:	31 c9                	xor    ecx,ecx
c0003de3:	89 da                	mov    edx,ebx
c0003de5:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003de8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003dec:	e8 b1 f7 ff ff       	call   c00035a2 <remove_chain>
c0003df1:	85 c0                	test   eax,eax
c0003df3:	0f 85 58 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003df9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dfd:	89 ea                	mov    edx,ebp
c0003dff:	4b                   	dec    ebx
c0003e00:	e8 d8 e5 ff ff       	call   c00023dd <move_window>
c0003e05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e09:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	eb 29                	jmp    c0003e39 <f_open+0x18c>
c0003e10:	85 c0                	test   eax,eax
c0003e12:	0f 85 39 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e18:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1c:	b8 04 00 00 00       	mov    eax,0x4
c0003e21:	88 d1                	mov    cl,dl
c0003e23:	80 e1 10             	and    cl,0x10
c0003e26:	0f 85 25 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e2c:	80 e3 02             	and    bl,0x2
c0003e2f:	74 0e                	je     c0003e3f <f_open+0x192>
c0003e31:	80 e2 01             	and    dl,0x1
c0003e34:	b8 07 00 00 00       	mov    eax,0x7
c0003e39:	0f 85 12 01 00 00    	jne    c0003f51 <f_open+0x2a4>
c0003e3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e43:	24 08                	and    al,0x8
c0003e45:	74 05                	je     c0003e4c <f_open+0x19f>
c0003e47:	80 4c 24 0c 40       	or     BYTE PTR [esp+0xc],0x40
c0003e4c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e50:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0003e54:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e57:	89 5e 24             	mov    DWORD PTR [esi+0x24],ebx
c0003e5a:	89 da                	mov    edx,ebx
c0003e5c:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0003e5f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e62:	e8 ec f3 ff ff       	call   c0003253 <ld_clust.isra.0>
c0003e67:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0003e6a:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0003e6d:	e8 64 e0 ff ff       	call   c0001ed6 <ld_dword>
c0003e72:	8d 5e 28             	lea    ebx,[esi+0x28]
c0003e75:	31 d2                	xor    edx,edx
c0003e77:	89 2e                	mov    DWORD PTR [esi],ebp
c0003e79:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7e:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0003e81:	0f b7 45 06          	movzx  eax,WORD PTR [ebp+0x6]
c0003e85:	c6 46 11 00          	mov    BYTE PTR [esi+0x11],0x0
c0003e89:	c7 46 1c 00 00 00 00 	mov    DWORD PTR [esi+0x1c],0x0
c0003e90:	c7 46 14 00 00 00 00 	mov    DWORD PTR [esi+0x14],0x0
c0003e97:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0003e9b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003e9f:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c0003ea2:	89 d8                	mov    eax,ebx
c0003ea4:	e8 61 e0 ff ff       	call   c0001f0a <mem_set>
c0003ea9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0003ead:	24 20                	and    al,0x20
c0003eaf:	75 07                	jne    c0003eb8 <f_open+0x20b>
c0003eb1:	31 c0                	xor    eax,eax
c0003eb3:	e9 99 00 00 00       	jmp    c0003f51 <f_open+0x2a4>
c0003eb8:	8b 6e 0c             	mov    ebp,DWORD PTR [esi+0xc]
c0003ebb:	85 ed                	test   ebp,ebp
c0003ebd:	74 f2                	je     c0003eb1 <f_open+0x204>
c0003ebf:	89 6e 14             	mov    DWORD PTR [esi+0x14],ebp
c0003ec2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec6:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0003ec9:	0f b7 48 0a          	movzx  ecx,WORD PTR [eax+0xa]
c0003ecd:	31 c0                	xor    eax,eax
c0003ecf:	c1 e1 09             	shl    ecx,0x9
c0003ed2:	85 c0                	test   eax,eax
c0003ed4:	75 2b                	jne    c0003f01 <f_open+0x254>
c0003ed6:	39 cd                	cmp    ebp,ecx
c0003ed8:	76 27                	jbe    c0003f01 <f_open+0x254>
c0003eda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ede:	8b 06                	mov    eax,DWORD PTR [esi]
c0003ee0:	e8 be f3 ff ff       	call   c00032a3 <get_fat.isra.2>
c0003ee5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ee9:	89 c2                	mov    edx,eax
c0003eeb:	b8 02 00 00 00       	mov    eax,0x2
c0003ef0:	83 fa 01             	cmp    edx,0x1
c0003ef3:	76 08                	jbe    c0003efd <f_open+0x250>
c0003ef5:	31 c0                	xor    eax,eax
c0003ef7:	83 fa ff             	cmp    edx,0xffffffff
c0003efa:	0f 94 c0             	sete   al
c0003efd:	29 cd                	sub    ebp,ecx
c0003eff:	eb d1                	jmp    c0003ed2 <f_open+0x225>
c0003f01:	89 56 18             	mov    DWORD PTR [esi+0x18],edx
c0003f04:	85 c0                	test   eax,eax
c0003f06:	75 49                	jne    c0003f51 <f_open+0x2a4>
c0003f08:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003f0e:	74 a1                	je     c0003eb1 <f_open+0x204>
c0003f10:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003f14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f18:	89 c8                	mov    eax,ecx
c0003f1a:	e8 e9 e1 ff ff       	call   c0002108 <clst2sect>
c0003f1f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f23:	89 c2                	mov    edx,eax
c0003f25:	b8 02 00 00 00       	mov    eax,0x2
c0003f2a:	85 d2                	test   edx,edx
c0003f2c:	74 23                	je     c0003f51 <f_open+0x2a4>
c0003f2e:	c1 ed 09             	shr    ebp,0x9
c0003f31:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003f35:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003f38:	6a 01                	push   0x1
c0003f3a:	50                   	push   eax
c0003f3b:	53                   	push   ebx
c0003f3c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f40:	50                   	push   eax
c0003f41:	e8 38 df ff ff       	call   c0001e7e <disk_read>
c0003f46:	83 c4 10             	add    esp,0x10
c0003f49:	85 c0                	test   eax,eax
c0003f4b:	0f 95 c0             	setne  al
c0003f4e:	0f b6 c0             	movzx  eax,al
c0003f51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f55:	83 ec 0c             	sub    esp,0xc
c0003f58:	57                   	push   edi
c0003f59:	e8 b6 1c 00 00       	call   c0005c14 <ff_memfree>
c0003f5e:	83 c4 10             	add    esp,0x10
c0003f61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f65:	85 c0                	test   eax,eax
c0003f67:	74 06                	je     c0003f6f <f_open+0x2c2>
c0003f69:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0003f6f:	83 c4 5c             	add    esp,0x5c
c0003f72:	5b                   	pop    ebx
c0003f73:	5e                   	pop    esi
c0003f74:	5f                   	pop    edi
c0003f75:	5d                   	pop    ebp
c0003f76:	c3                   	ret    

c0003f77 <f_read>:
c0003f77:	55                   	push   ebp
c0003f78:	57                   	push   edi
c0003f79:	56                   	push   esi
c0003f7a:	53                   	push   ebx
c0003f7b:	83 ec 2c             	sub    esp,0x2c
c0003f7e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f86:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f8a:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f94:	89 d8                	mov    eax,ebx
c0003f96:	e8 97 e3 ff ff       	call   c0002332 <validate>
c0003f9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9f:	85 c0                	test   eax,eax
c0003fa1:	0f 85 a0 01 00 00    	jne    c0004147 <f_read+0x1d0>
c0003fa7:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003fab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003faf:	85 c0                	test   eax,eax
c0003fb1:	0f 85 90 01 00 00    	jne    c0004147 <f_read+0x1d0>
c0003fb7:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fbb:	0f 84 7e 01 00 00    	je     c000413f <f_read+0x1c8>
c0003fc1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fc4:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fc7:	39 f8                	cmp    eax,edi
c0003fc9:	0f 46 f8             	cmovbe edi,eax
c0003fcc:	85 ff                	test   edi,edi
c0003fce:	0f 84 73 01 00 00    	je     c0004147 <f_read+0x1d0>
c0003fd4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd7:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fdc:	0f 85 26 01 00 00    	jne    c0004108 <f_read+0x191>
c0003fe2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fe6:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fea:	89 c2                	mov    edx,eax
c0003fec:	c1 ea 09             	shr    edx,0x9
c0003fef:	4d                   	dec    ebp
c0003ff0:	21 d5                	and    ebp,edx
c0003ff2:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003ff6:	75 42                	jne    c000403a <f_read+0xc3>
c0003ff8:	85 c0                	test   eax,eax
c0003ffa:	75 05                	jne    c0004001 <f_read+0x8a>
c0003ffc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003fff:	eb 0a                	jmp    c000400b <f_read+0x94>
c0004001:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004004:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004006:	e8 98 f2 ff ff       	call   c00032a3 <get_fat.isra.2>
c000400b:	83 f8 01             	cmp    eax,0x1
c000400e:	77 11                	ja     c0004021 <f_read+0xaa>
c0004010:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004014:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000401c:	e9 26 01 00 00       	jmp    c0004147 <f_read+0x1d0>
c0004021:	83 f8 ff             	cmp    eax,0xffffffff
c0004024:	75 11                	jne    c0004037 <f_read+0xc0>
c0004026:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000402a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0004032:	e9 10 01 00 00       	jmp    c0004147 <f_read+0x1d0>
c0004037:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000403a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000403e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004041:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004045:	89 c8                	mov    eax,ecx
c0004047:	e8 bc e0 ff ff       	call   c0002108 <clst2sect>
c000404c:	85 c0                	test   eax,eax
c000404e:	74 c0                	je     c0004010 <f_read+0x99>
c0004050:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004054:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000405a:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000405d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004061:	76 58                	jbe    c00040bb <f_read+0x144>
c0004063:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004067:	89 fe                	mov    esi,edi
c0004069:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000406d:	c1 ee 09             	shr    esi,0x9
c0004070:	01 f2                	add    edx,esi
c0004072:	39 c2                	cmp    edx,eax
c0004074:	76 06                	jbe    c000407c <f_read+0x105>
c0004076:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000407a:	89 c6                	mov    esi,eax
c000407c:	56                   	push   esi
c000407d:	55                   	push   ebp
c000407e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004082:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004086:	50                   	push   eax
c0004087:	e8 f2 dd ff ff       	call   c0001e7e <disk_read>
c000408c:	83 c4 10             	add    esp,0x10
c000408f:	85 c0                	test   eax,eax
c0004091:	75 93                	jne    c0004026 <f_read+0xaf>
c0004093:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004097:	79 1d                	jns    c00040b6 <f_read+0x13f>
c0004099:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000409c:	29 e8                	sub    eax,ebp
c000409e:	39 f0                	cmp    eax,esi
c00040a0:	73 14                	jae    c00040b6 <f_read+0x13f>
c00040a2:	c1 e0 09             	shl    eax,0x9
c00040a5:	b9 00 02 00 00       	mov    ecx,0x200
c00040aa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00040ae:	8d 53 28             	lea    edx,[ebx+0x28]
c00040b1:	e8 3f de ff ff       	call   c0001ef5 <mem_cpy>
c00040b6:	c1 e6 09             	shl    esi,0x9
c00040b9:	eb 70                	jmp    c000412b <f_read+0x1b4>
c00040bb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040be:	39 e8                	cmp    eax,ebp
c00040c0:	74 43                	je     c0004105 <f_read+0x18e>
c00040c2:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00040c6:	8d 73 28             	lea    esi,[ebx+0x28]
c00040c9:	79 1d                	jns    c00040e8 <f_read+0x171>
c00040cb:	6a 01                	push   0x1
c00040cd:	50                   	push   eax
c00040ce:	56                   	push   esi
c00040cf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040d3:	50                   	push   eax
c00040d4:	e8 bb dd ff ff       	call   c0001e94 <disk_write>
c00040d9:	83 c4 10             	add    esp,0x10
c00040dc:	85 c0                	test   eax,eax
c00040de:	0f 85 42 ff ff ff    	jne    c0004026 <f_read+0xaf>
c00040e4:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040e8:	6a 01                	push   0x1
c00040ea:	55                   	push   ebp
c00040eb:	56                   	push   esi
c00040ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040f4:	50                   	push   eax
c00040f5:	e8 84 dd ff ff       	call   c0001e7e <disk_read>
c00040fa:	83 c4 10             	add    esp,0x10
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 21 ff ff ff    	jne    c0004026 <f_read+0xaf>
c0004105:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004108:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000410b:	be 00 02 00 00       	mov    esi,0x200
c0004110:	25 ff 01 00 00       	and    eax,0x1ff
c0004115:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004119:	29 c6                	sub    esi,eax
c000411b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000411f:	39 f7                	cmp    edi,esi
c0004121:	0f 46 f7             	cmovbe esi,edi
c0004124:	89 f1                	mov    ecx,esi
c0004126:	e8 ca dd ff ff       	call   c0001ef5 <mem_cpy>
c000412b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000412f:	29 f7                	sub    edi,esi
c0004131:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004135:	01 30                	add    DWORD PTR [eax],esi
c0004137:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000413a:	e9 8d fe ff ff       	jmp    c0003fcc <f_read+0x55>
c000413f:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000414b:	83 c4 2c             	add    esp,0x2c
c000414e:	5b                   	pop    ebx
c000414f:	5e                   	pop    esi
c0004150:	5f                   	pop    edi
c0004151:	5d                   	pop    ebp
c0004152:	c3                   	ret    

c0004153 <f_write>:
c0004153:	55                   	push   ebp
c0004154:	57                   	push   edi
c0004155:	56                   	push   esi
c0004156:	53                   	push   ebx
c0004157:	83 ec 2c             	sub    esp,0x2c
c000415a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000415e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004162:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004166:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000416c:	89 d8                	mov    eax,ebx
c000416e:	e8 bf e1 ff ff       	call   c0002332 <validate>
c0004173:	85 c0                	test   eax,eax
c0004175:	89 c7                	mov    edi,eax
c0004177:	0f 85 ff 01 00 00    	jne    c000437c <f_write+0x229>
c000417d:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004181:	85 ff                	test   edi,edi
c0004183:	0f 85 f3 01 00 00    	jne    c000437c <f_write+0x229>
c0004189:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000418d:	0f 84 e4 01 00 00    	je     c0004377 <f_write+0x224>
c0004193:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004196:	89 c1                	mov    ecx,eax
c0004198:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000419c:	0f 83 e8 00 00 00    	jae    c000428a <f_write+0x137>
c00041a2:	f7 d0                	not    eax
c00041a4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00041a8:	e9 dd 00 00 00       	jmp    c000428a <f_write+0x137>
c00041ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041b0:	a9 ff 01 00 00       	test   eax,0x1ff
c00041b5:	0f 85 8c 01 00 00    	jne    c0004347 <f_write+0x1f4>
c00041bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041bf:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041c3:	89 c2                	mov    edx,eax
c00041c5:	c1 ea 09             	shr    edx,0x9
c00041c8:	4d                   	dec    ebp
c00041c9:	21 d5                	and    ebp,edx
c00041cb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041cf:	0f 84 c2 00 00 00    	je     c0004297 <f_write+0x144>
c00041d5:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00041d9:	0f 88 19 01 00 00    	js     c00042f8 <f_write+0x1a5>
c00041df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041e3:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041ea:	89 c8                	mov    eax,ecx
c00041ec:	e8 17 df ff ff       	call   c0002108 <clst2sect>
c00041f1:	85 c0                	test   eax,eax
c00041f3:	0f 84 c9 00 00 00    	je     c00042c2 <f_write+0x16f>
c00041f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041fd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004205:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004208:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000420c:	0f 86 0d 01 00 00    	jbe    c000431f <f_write+0x1cc>
c0004212:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004216:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000421a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000421e:	c1 ee 09             	shr    esi,0x9
c0004221:	01 f2                	add    edx,esi
c0004223:	39 c2                	cmp    edx,eax
c0004225:	76 06                	jbe    c000422d <f_write+0xda>
c0004227:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000422b:	89 c6                	mov    esi,eax
c000422d:	56                   	push   esi
c000422e:	55                   	push   ebp
c000422f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004233:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004237:	50                   	push   eax
c0004238:	e8 57 dc ff ff       	call   c0001e94 <disk_write>
c000423d:	83 c4 10             	add    esp,0x10
c0004240:	85 c0                	test   eax,eax
c0004242:	0f 85 8d 00 00 00    	jne    c00042d5 <f_write+0x182>
c0004248:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000424b:	29 ea                	sub    edx,ebp
c000424d:	39 f2                	cmp    edx,esi
c000424f:	73 18                	jae    c0004269 <f_write+0x116>
c0004251:	c1 e2 09             	shl    edx,0x9
c0004254:	b9 00 02 00 00       	mov    ecx,0x200
c0004259:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000425d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004260:	e8 90 dc ff ff       	call   c0001ef5 <mem_cpy>
c0004265:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004269:	c1 e6 09             	shl    esi,0x9
c000426c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004270:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004274:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004278:	01 30                	add    DWORD PTR [eax],esi
c000427a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000427d:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004280:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004283:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004287:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000428a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000428f:	0f 85 18 ff ff ff    	jne    c00041ad <f_write+0x5a>
c0004295:	eb 1d                	jmp    c00042b4 <f_write+0x161>
c0004297:	85 c0                	test   eax,eax
c0004299:	75 0b                	jne    c00042a6 <f_write+0x153>
c000429b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 19                	jne    c00042bd <f_write+0x16a>
c00042a4:	eb 03                	jmp    c00042a9 <f_write+0x156>
c00042a6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042a9:	89 d8                	mov    eax,ebx
c00042ab:	e8 bd f1 ff ff       	call   c000346d <create_chain>
c00042b0:	85 c0                	test   eax,eax
c00042b2:	75 09                	jne    c00042bd <f_write+0x16a>
c00042b4:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00042b8:	e9 bf 00 00 00       	jmp    c000437c <f_write+0x229>
c00042bd:	83 f8 01             	cmp    eax,0x1
c00042c0:	75 0e                	jne    c00042d0 <f_write+0x17d>
c00042c2:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c6:	bf 02 00 00 00       	mov    edi,0x2
c00042cb:	e9 ac 00 00 00       	jmp    c000437c <f_write+0x229>
c00042d0:	83 f8 ff             	cmp    eax,0xffffffff
c00042d3:	75 0e                	jne    c00042e3 <f_write+0x190>
c00042d5:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d9:	bf 01 00 00 00       	mov    edi,0x1
c00042de:	e9 99 00 00 00       	jmp    c000437c <f_write+0x229>
c00042e3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042ea:	0f 85 e5 fe ff ff    	jne    c00041d5 <f_write+0x82>
c00042f0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042f3:	e9 dd fe ff ff       	jmp    c00041d5 <f_write+0x82>
c00042f8:	6a 01                	push   0x1
c00042fa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042fd:	8d 43 28             	lea    eax,[ebx+0x28]
c0004300:	50                   	push   eax
c0004301:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004305:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004309:	50                   	push   eax
c000430a:	e8 85 db ff ff       	call   c0001e94 <disk_write>
c000430f:	83 c4 10             	add    esp,0x10
c0004312:	85 c0                	test   eax,eax
c0004314:	75 bf                	jne    c00042d5 <f_write+0x182>
c0004316:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000431a:	e9 c0 fe ff ff       	jmp    c00041df <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x1f1>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x1f1>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 41 db ff ff       	call   c0001e7e <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 91                	jne    c00042d5 <f_write+0x182>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 87 db ff ff       	call   c0001ef5 <mem_cpy>
c000436e:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004372:	e9 f5 fe ff ff       	jmp    c000426c <f_write+0x119>
c0004377:	bf 07 00 00 00       	mov    edi,0x7
c000437c:	83 c4 2c             	add    esp,0x2c
c000437f:	89 f8                	mov    eax,edi
c0004381:	5b                   	pop    ebx
c0004382:	5e                   	pop    esi
c0004383:	5f                   	pop    edi
c0004384:	5d                   	pop    ebp
c0004385:	c3                   	ret    

c0004386 <f_sync>:
c0004386:	56                   	push   esi
c0004387:	53                   	push   ebx
c0004388:	83 ec 14             	sub    esp,0x14
c000438b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000438f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 98 df ff ff       	call   c0002332 <validate>
c000439a:	85 c0                	test   eax,eax
c000439c:	0f 85 95 00 00 00    	jne    c0004437 <f_sync+0xb1>
c00043a2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043a5:	88 d1                	mov    cl,dl
c00043a7:	80 e1 40             	and    cl,0x40
c00043aa:	0f 84 87 00 00 00    	je     c0004437 <f_sync+0xb1>
c00043b0:	84 d2                	test   dl,dl
c00043b2:	79 29                	jns    c00043dd <f_sync+0x57>
c00043b4:	6a 01                	push   0x1
c00043b6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043b9:	8d 43 28             	lea    eax,[ebx+0x28]
c00043bc:	50                   	push   eax
c00043bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c5:	50                   	push   eax
c00043c6:	e8 c9 da ff ff       	call   c0001e94 <disk_write>
c00043cb:	83 c4 10             	add    esp,0x10
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	b8 01 00 00 00       	mov    eax,0x1
c00043d5:	85 d2                	test   edx,edx
c00043d7:	75 5e                	jne    c0004437 <f_sync+0xb1>
c00043d9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00043dd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043e4:	e8 f4 df ff ff       	call   c00023dd <move_window>
c00043e9:	85 c0                	test   eax,eax
c00043eb:	75 4a                	jne    c0004437 <f_sync+0xb1>
c00043ed:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00043f4:	89 f2                	mov    edx,esi
c00043f6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043fb:	e8 7b ee ff ff       	call   c000327b <st_clust.isra.1>
c0004400:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004403:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004406:	e8 e7 da ff ff       	call   c0001ef2 <st_dword>
c000440b:	8d 46 16             	lea    eax,[esi+0x16]
c000440e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004413:	e8 da da ff ff       	call   c0001ef2 <st_dword>
c0004418:	8d 46 12             	lea    eax,[esi+0x12]
c000441b:	31 d2                	xor    edx,edx
c000441d:	e8 cc da ff ff       	call   c0001eee <st_word>
c0004422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004426:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000442a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000442e:	e8 ed e9 ff ff       	call   c0002e20 <sync_fs>
c0004433:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c0004437:	83 c4 14             	add    esp,0x14
c000443a:	5b                   	pop    ebx
c000443b:	5e                   	pop    esi
c000443c:	c3                   	ret    

c000443d <f_close>:
c000443d:	53                   	push   ebx
c000443e:	83 ec 24             	sub    esp,0x24
c0004441:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004445:	53                   	push   ebx
c0004446:	e8 3b ff ff ff       	call   c0004386 <f_sync>
c000444b:	83 c4 10             	add    esp,0x10
c000444e:	85 c0                	test   eax,eax
c0004450:	75 15                	jne    c0004467 <f_close+0x2a>
c0004452:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004456:	89 d8                	mov    eax,ebx
c0004458:	e8 d5 de ff ff       	call   c0002332 <validate>
c000445d:	85 c0                	test   eax,eax
c000445f:	75 06                	jne    c0004467 <f_close+0x2a>
c0004461:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004467:	83 c4 18             	add    esp,0x18
c000446a:	5b                   	pop    ebx
c000446b:	c3                   	ret    

c000446c <f_lseek>:
c000446c:	55                   	push   ebp
c000446d:	57                   	push   edi
c000446e:	56                   	push   esi
c000446f:	53                   	push   ebx
c0004470:	83 ec 2c             	sub    esp,0x2c
c0004473:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004477:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000447b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 ac de ff ff       	call   c0002332 <validate>
c0004486:	85 c0                	test   eax,eax
c0004488:	89 c5                	mov    ebp,eax
c000448a:	0f 85 78 01 00 00    	jne    c0004608 <f_lseek+0x19c>
c0004490:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004494:	85 ed                	test   ebp,ebp
c0004496:	0f 85 6c 01 00 00    	jne    c0004608 <f_lseek+0x19c>
c000449c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000449f:	39 f0                	cmp    eax,esi
c00044a1:	73 07                	jae    c00044aa <f_lseek+0x3e>
c00044a3:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044a7:	0f 44 f0             	cmove  esi,eax
c00044aa:	85 f6                	test   esi,esi
c00044ac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044af:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044b6:	75 07                	jne    c00044bf <f_lseek+0x53>
c00044b8:	31 f6                	xor    esi,esi
c00044ba:	e9 e2 00 00 00       	jmp    c00045a1 <f_lseek+0x135>
c00044bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c3:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044c7:	c1 e7 09             	shl    edi,0x9
c00044ca:	85 c9                	test   ecx,ecx
c00044cc:	74 28                	je     c00044f6 <f_lseek+0x8a>
c00044ce:	31 d2                	xor    edx,edx
c00044d0:	49                   	dec    ecx
c00044d1:	8d 46 ff             	lea    eax,[esi-0x1]
c00044d4:	f7 f7                	div    edi
c00044d6:	31 d2                	xor    edx,edx
c00044d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044dc:	89 c8                	mov    eax,ecx
c00044de:	f7 f7                	div    edi
c00044e0:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044e4:	72 10                	jb     c00044f6 <f_lseek+0x8a>
c00044e6:	89 f8                	mov    eax,edi
c00044e8:	f7 d8                	neg    eax
c00044ea:	21 c1                	and    ecx,eax
c00044ec:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044ef:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044f2:	29 ce                	sub    esi,ecx
c00044f4:	eb 3c                	jmp    c0004532 <f_lseek+0xc6>
c00044f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044f9:	85 c0                	test   eax,eax
c00044fb:	75 32                	jne    c000452f <f_lseek+0xc3>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 67 ef ff ff       	call   c000346d <create_chain>
c0004506:	83 f8 01             	cmp    eax,0x1
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xad>
c000450b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000450f:	bd 02 00 00 00       	mov    ebp,0x2
c0004514:	e9 ef 00 00 00       	jmp    c0004608 <f_lseek+0x19c>
c0004519:	83 f8 ff             	cmp    eax,0xffffffff
c000451c:	75 0e                	jne    c000452c <f_lseek+0xc0>
c000451e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004522:	bd 01 00 00 00       	mov    ebp,0x1
c0004527:	e9 dc 00 00 00       	jmp    c0004608 <f_lseek+0x19c>
c000452c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004532:	85 c0                	test   eax,eax
c0004534:	74 82                	je     c00044b8 <f_lseek+0x4c>
c0004536:	39 fe                	cmp    esi,edi
c0004538:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000453b:	76 3d                	jbe    c000457a <f_lseek+0x10e>
c000453d:	01 fa                	add    edx,edi
c000453f:	29 fe                	sub    esi,edi
c0004541:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004545:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004548:	89 c2                	mov    edx,eax
c000454a:	74 0d                	je     c0004559 <f_lseek+0xed>
c000454c:	89 d8                	mov    eax,ebx
c000454e:	e8 1a ef ff ff       	call   c000346d <create_chain>
c0004553:	85 c0                	test   eax,eax
c0004555:	75 09                	jne    c0004560 <f_lseek+0xf4>
c0004557:	eb 1f                	jmp    c0004578 <f_lseek+0x10c>
c0004559:	8b 03                	mov    eax,DWORD PTR [ebx]
c000455b:	e8 43 ed ff ff       	call   c00032a3 <get_fat.isra.2>
c0004560:	83 f8 ff             	cmp    eax,0xffffffff
c0004563:	74 b9                	je     c000451e <f_lseek+0xb2>
c0004565:	83 f8 01             	cmp    eax,0x1
c0004568:	76 a1                	jbe    c000450b <f_lseek+0x9f>
c000456a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000456e:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004571:	76 98                	jbe    c000450b <f_lseek+0x9f>
c0004573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004576:	eb be                	jmp    c0004536 <f_lseek+0xca>
c0004578:	31 f6                	xor    esi,esi
c000457a:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000457d:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004583:	0f 84 2f ff ff ff    	je     c00044b8 <f_lseek+0x4c>
c0004589:	89 c2                	mov    edx,eax
c000458b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000458f:	e8 74 db ff ff       	call   c0002108 <clst2sect>
c0004594:	85 c0                	test   eax,eax
c0004596:	0f 84 6f ff ff ff    	je     c000450b <f_lseek+0x9f>
c000459c:	c1 ee 09             	shr    esi,0x9
c000459f:	01 c6                	add    esi,eax
c00045a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045a4:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045a7:	76 07                	jbe    c00045b0 <f_lseek+0x144>
c00045a9:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00045ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045b0:	a9 ff 01 00 00       	test   eax,0x1ff
c00045b5:	74 51                	je     c0004608 <f_lseek+0x19c>
c00045b7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ba:	39 f0                	cmp    eax,esi
c00045bc:	74 4a                	je     c0004608 <f_lseek+0x19c>
c00045be:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c00045c2:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045c5:	79 21                	jns    c00045e8 <f_lseek+0x17c>
c00045c7:	6a 01                	push   0x1
c00045c9:	50                   	push   eax
c00045ca:	57                   	push   edi
c00045cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045cf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045d3:	50                   	push   eax
c00045d4:	e8 bb d8 ff ff       	call   c0001e94 <disk_write>
c00045d9:	83 c4 10             	add    esp,0x10
c00045dc:	85 c0                	test   eax,eax
c00045de:	0f 85 3a ff ff ff    	jne    c000451e <f_lseek+0xb2>
c00045e4:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00045e8:	6a 01                	push   0x1
c00045ea:	56                   	push   esi
c00045eb:	57                   	push   edi
c00045ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045f4:	50                   	push   eax
c00045f5:	e8 84 d8 ff ff       	call   c0001e7e <disk_read>
c00045fa:	83 c4 10             	add    esp,0x10
c00045fd:	85 c0                	test   eax,eax
c00045ff:	0f 85 19 ff ff ff    	jne    c000451e <f_lseek+0xb2>
c0004605:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004608:	83 c4 2c             	add    esp,0x2c
c000460b:	89 e8                	mov    eax,ebp
c000460d:	5b                   	pop    ebx
c000460e:	5e                   	pop    esi
c000460f:	5f                   	pop    edi
c0004610:	5d                   	pop    ebp
c0004611:	c3                   	ret    

c0004612 <f_opendir>:
c0004612:	56                   	push   esi
c0004613:	b8 09 00 00 00       	mov    eax,0x9
c0004618:	53                   	push   ebx
c0004619:	83 ec 24             	sub    esp,0x24
c000461c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004620:	85 db                	test   ebx,ebx
c0004622:	0f 84 af 00 00 00    	je     c00046d7 <f_opendir+0xc5>
c0004628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000462c:	31 c9                	xor    ecx,ecx
c000462e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004632:	e8 03 df ff ff       	call   c000253a <mount_volume>
c0004637:	85 c0                	test   eax,eax
c0004639:	0f 85 92 00 00 00    	jne    c00046d1 <f_opendir+0xbf>
c000463f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004643:	83 ec 0c             	sub    esp,0xc
c0004646:	89 03                	mov    DWORD PTR [ebx],eax
c0004648:	68 00 02 00 00       	push   0x200
c000464d:	e8 ae 15 00 00       	call   c0005c00 <ff_memalloc>
c0004652:	83 c4 10             	add    esp,0x10
c0004655:	89 c6                	mov    esi,eax
c0004657:	b8 11 00 00 00       	mov    eax,0x11
c000465c:	85 f6                	test   esi,esi
c000465e:	74 77                	je     c00046d7 <f_opendir+0xc5>
c0004660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004664:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004668:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000466b:	89 d8                	mov    eax,ebx
c000466d:	e8 b8 f3 ff ff       	call   c0003a2a <follow_path>
c0004672:	85 c0                	test   eax,eax
c0004674:	75 37                	jne    c00046ad <f_opendir+0x9b>
c0004676:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000467a:	78 1c                	js     c0004698 <f_opendir+0x86>
c000467c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004680:	b8 05 00 00 00       	mov    eax,0x5
c0004685:	74 26                	je     c00046ad <f_opendir+0x9b>
c0004687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000468b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000468e:	8a 00                	mov    al,BYTE PTR [eax]
c0004690:	e8 be eb ff ff       	call   c0003253 <ld_clust.isra.0>
c0004695:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000469c:	31 d2                	xor    edx,edx
c000469e:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
c00046a2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046a6:	89 d8                	mov    eax,ebx
c00046a8:	e8 f8 ec ff ff       	call   c00033a5 <dir_sdi>
c00046ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b1:	83 ec 0c             	sub    esp,0xc
c00046b4:	56                   	push   esi
c00046b5:	e8 5a 15 00 00       	call   c0005c14 <ff_memfree>
c00046ba:	83 c4 10             	add    esp,0x10
c00046bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046c1:	83 f8 04             	cmp    eax,0x4
c00046c4:	74 06                	je     c00046cc <f_opendir+0xba>
c00046c6:	85 c0                	test   eax,eax
c00046c8:	74 0d                	je     c00046d7 <f_opendir+0xc5>
c00046ca:	eb 05                	jmp    c00046d1 <f_opendir+0xbf>
c00046cc:	b8 05 00 00 00       	mov    eax,0x5
c00046d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046d7:	83 c4 24             	add    esp,0x24
c00046da:	5b                   	pop    ebx
c00046db:	5e                   	pop    esi
c00046dc:	c3                   	ret    

c00046dd <f_closedir>:
c00046dd:	53                   	push   ebx
c00046de:	83 ec 18             	sub    esp,0x18
c00046e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e9:	89 d8                	mov    eax,ebx
c00046eb:	e8 42 dc ff ff       	call   c0002332 <validate>
c00046f0:	85 c0                	test   eax,eax
c00046f2:	75 06                	jne    c00046fa <f_closedir+0x1d>
c00046f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046fa:	83 c4 18             	add    esp,0x18
c00046fd:	5b                   	pop    ebx
c00046fe:	c3                   	ret    

c00046ff <f_readdir>:
c00046ff:	57                   	push   edi
c0004700:	56                   	push   esi
c0004701:	53                   	push   ebx
c0004702:	83 ec 20             	sub    esp,0x20
c0004705:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004709:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000470d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004711:	89 d8                	mov    eax,ebx
c0004713:	e8 1a dc ff ff       	call   c0002332 <validate>
c0004718:	85 c0                	test   eax,eax
c000471a:	75 6e                	jne    c000478a <f_readdir+0x8b>
c000471c:	85 ff                	test   edi,edi
c000471e:	75 0b                	jne    c000472b <f_readdir+0x2c>
c0004720:	31 d2                	xor    edx,edx
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 7c ec ff ff       	call   c00033a5 <dir_sdi>
c0004729:	eb 5f                	jmp    c000478a <f_readdir+0x8b>
c000472b:	83 ec 0c             	sub    esp,0xc
c000472e:	68 00 02 00 00       	push   0x200
c0004733:	e8 c8 14 00 00       	call   c0005c00 <ff_memalloc>
c0004738:	83 c4 10             	add    esp,0x10
c000473b:	89 c6                	mov    esi,eax
c000473d:	b8 11 00 00 00       	mov    eax,0x11
c0004742:	85 f6                	test   esi,esi
c0004744:	74 44                	je     c000478a <f_readdir+0x8b>
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	31 d2                	xor    edx,edx
c000474c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000474f:	89 d8                	mov    eax,ebx
c0004751:	e8 3b f0 ff ff       	call   c0003791 <dir_read>
c0004756:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000475b:	75 19                	jne    c0004776 <f_readdir+0x77>
c000475d:	89 fa                	mov    edx,edi
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 0e e9 ff ff       	call   c0003074 <get_fileinfo>
c0004766:	31 d2                	xor    edx,edx
c0004768:	89 d8                	mov    eax,ebx
c000476a:	e8 bc ee ff ff       	call   c000362b <dir_next>
c000476f:	83 f8 04             	cmp    eax,0x4
c0004772:	75 02                	jne    c0004776 <f_readdir+0x77>
c0004774:	31 c0                	xor    eax,eax
c0004776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000477a:	83 ec 0c             	sub    esp,0xc
c000477d:	56                   	push   esi
c000477e:	e8 91 14 00 00       	call   c0005c14 <ff_memfree>
c0004783:	83 c4 10             	add    esp,0x10
c0004786:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	5b                   	pop    ebx
c000478e:	5e                   	pop    esi
c000478f:	5f                   	pop    edi
c0004790:	c3                   	ret    

c0004791 <f_stat>:
c0004791:	57                   	push   edi
c0004792:	31 c9                	xor    ecx,ecx
c0004794:	56                   	push   esi
c0004795:	53                   	push   ebx
c0004796:	83 ec 30             	sub    esp,0x30
c0004799:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479d:	89 e2                	mov    edx,esp
c000479f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047a3:	e8 92 dd ff ff       	call   c000253a <mount_volume>
c00047a8:	85 c0                	test   eax,eax
c00047aa:	89 c3                	mov    ebx,eax
c00047ac:	75 59                	jne    c0004807 <f_stat+0x76>
c00047ae:	83 ec 0c             	sub    esp,0xc
c00047b1:	bb 11 00 00 00       	mov    ebx,0x11
c00047b6:	68 00 02 00 00       	push   0x200
c00047bb:	e8 40 14 00 00       	call   c0005c00 <ff_memalloc>
c00047c0:	83 c4 10             	add    esp,0x10
c00047c3:	85 c0                	test   eax,eax
c00047c5:	89 c6                	mov    esi,eax
c00047c7:	74 3e                	je     c0004807 <f_stat+0x76>
c00047c9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047d3:	89 e0                	mov    eax,esp
c00047d5:	e8 50 f2 ff ff       	call   c0003a2a <follow_path>
c00047da:	85 c0                	test   eax,eax
c00047dc:	89 c3                	mov    ebx,eax
c00047de:	75 1b                	jne    c00047fb <f_stat+0x6a>
c00047e0:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c00047e5:	78 0f                	js     c00047f6 <f_stat+0x65>
c00047e7:	85 ff                	test   edi,edi
c00047e9:	74 10                	je     c00047fb <f_stat+0x6a>
c00047eb:	89 fa                	mov    edx,edi
c00047ed:	89 e0                	mov    eax,esp
c00047ef:	e8 80 e8 ff ff       	call   c0003074 <get_fileinfo>
c00047f4:	eb 05                	jmp    c00047fb <f_stat+0x6a>
c00047f6:	bb 06 00 00 00       	mov    ebx,0x6
c00047fb:	83 ec 0c             	sub    esp,0xc
c00047fe:	56                   	push   esi
c00047ff:	e8 10 14 00 00       	call   c0005c14 <ff_memfree>
c0004804:	83 c4 10             	add    esp,0x10
c0004807:	83 c4 30             	add    esp,0x30
c000480a:	89 d8                	mov    eax,ebx
c000480c:	5b                   	pop    ebx
c000480d:	5e                   	pop    esi
c000480e:	5f                   	pop    edi
c000480f:	c3                   	ret    

c0004810 <f_getfree>:
c0004810:	55                   	push   ebp
c0004811:	31 c9                	xor    ecx,ecx
c0004813:	57                   	push   edi
c0004814:	56                   	push   esi
c0004815:	53                   	push   ebx
c0004816:	83 ec 2c             	sub    esp,0x2c
c0004819:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000481d:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004821:	e8 14 dd ff ff       	call   c000253a <mount_volume>
c0004826:	85 c0                	test   eax,eax
c0004828:	89 c6                	mov    esi,eax
c000482a:	0f 85 da 00 00 00    	jne    c000490a <f_getfree+0xfa>
c0004830:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004834:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004838:	89 18                	mov    DWORD PTR [eax],ebx
c000483a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000483d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004840:	8d 57 fe             	lea    edx,[edi-0x2]
c0004843:	39 d0                	cmp    eax,edx
c0004845:	77 0b                	ja     c0004852 <f_getfree+0x42>
c0004847:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000484b:	89 01                	mov    DWORD PTR [ecx],eax
c000484d:	e9 b8 00 00 00       	jmp    c000490a <f_getfree+0xfa>
c0004852:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004855:	75 29                	jne    c0004880 <f_getfree+0x70>
c0004857:	bf 02 00 00 00       	mov    edi,0x2
c000485c:	31 ed                	xor    ebp,ebp
c000485e:	89 fa                	mov    edx,edi
c0004860:	89 d8                	mov    eax,ebx
c0004862:	e8 3c ea ff ff       	call   c00032a3 <get_fat.isra.2>
c0004867:	83 f8 ff             	cmp    eax,0xffffffff
c000486a:	74 7d                	je     c00048e9 <f_getfree+0xd9>
c000486c:	83 f8 01             	cmp    eax,0x1
c000486f:	74 7f                	je     c00048f0 <f_getfree+0xe0>
c0004871:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004875:	83 d5 00             	adc    ebp,0x0
c0004878:	47                   	inc    edi
c0004879:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c000487c:	77 e0                	ja     c000485e <f_getfree+0x4e>
c000487e:	eb 79                	jmp    c00048f9 <f_getfree+0xe9>
c0004880:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004883:	31 ed                	xor    ebp,ebp
c0004885:	31 db                	xor    ebx,ebx
c0004887:	85 db                	test   ebx,ebx
c0004889:	75 18                	jne    c00048a3 <f_getfree+0x93>
c000488b:	8d 42 01             	lea    eax,[edx+0x1]
c000488e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004892:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004896:	e8 42 db ff ff       	call   c00023dd <move_window>
c000489b:	85 c0                	test   eax,eax
c000489d:	75 58                	jne    c00048f7 <f_getfree+0xe7>
c000489f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048ab:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048ae:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048b2:	75 13                	jne    c00048c7 <f_getfree+0xb7>
c00048b4:	e8 10 d6 ff ff       	call   c0001ec9 <ld_word>
c00048b9:	0f b7 c0             	movzx  eax,ax
c00048bc:	83 f8 01             	cmp    eax,0x1
c00048bf:	83 d5 00             	adc    ebp,0x0
c00048c2:	83 c3 02             	add    ebx,0x2
c00048c5:	eb 13                	jmp    c00048da <f_getfree+0xca>
c00048c7:	e8 0a d6 ff ff       	call   c0001ed6 <ld_dword>
c00048cc:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048d1:	83 f8 01             	cmp    eax,0x1
c00048d4:	83 d5 00             	adc    ebp,0x0
c00048d7:	83 c3 04             	add    ebx,0x4
c00048da:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048e0:	4f                   	dec    edi
c00048e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048e5:	75 a0                	jne    c0004887 <f_getfree+0x77>
c00048e7:	eb 10                	jmp    c00048f9 <f_getfree+0xe9>
c00048e9:	be 01 00 00 00       	mov    esi,0x1
c00048ee:	eb 09                	jmp    c00048f9 <f_getfree+0xe9>
c00048f0:	be 02 00 00 00       	mov    esi,0x2
c00048f5:	eb 02                	jmp    c00048f9 <f_getfree+0xe9>
c00048f7:	89 c6                	mov    esi,eax
c00048f9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048fd:	89 28                	mov    DWORD PTR [eax],ebp
c00048ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004903:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004907:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c000490a:	83 c4 2c             	add    esp,0x2c
c000490d:	89 f0                	mov    eax,esi
c000490f:	5b                   	pop    ebx
c0004910:	5e                   	pop    esi
c0004911:	5f                   	pop    edi
c0004912:	5d                   	pop    ebp
c0004913:	c3                   	ret    

c0004914 <f_truncate>:
c0004914:	56                   	push   esi
c0004915:	53                   	push   ebx
c0004916:	83 ec 14             	sub    esp,0x14
c0004919:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000491d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004921:	89 d8                	mov    eax,ebx
c0004923:	e8 0a da ff ff       	call   c0002332 <validate>
c0004928:	85 c0                	test   eax,eax
c000492a:	89 c6                	mov    esi,eax
c000492c:	0f 85 be 00 00 00    	jne    c00049f0 <f_truncate+0xdc>
c0004932:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004936:	85 f6                	test   esi,esi
c0004938:	0f 85 b2 00 00 00    	jne    c00049f0 <f_truncate+0xdc>
c000493e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004942:	0f 84 a3 00 00 00    	je     c00049eb <f_truncate+0xd7>
c0004948:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000494b:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494e:	0f 83 9c 00 00 00    	jae    c00049f0 <f_truncate+0xdc>
c0004954:	85 c0                	test   eax,eax
c0004956:	75 15                	jne    c000496d <f_truncate+0x59>
c0004958:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000495b:	31 c9                	xor    ecx,ecx
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 3e ec ff ff       	call   c00035a2 <remove_chain>
c0004964:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000496b:	eb 35                	jmp    c00049a2 <f_truncate+0x8e>
c000496d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004970:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004972:	e8 2c e9 ff ff       	call   c00032a3 <get_fat.isra.2>
c0004977:	89 c2                	mov    edx,eax
c0004979:	b8 01 00 00 00       	mov    eax,0x1
c000497e:	83 fa ff             	cmp    edx,0xffffffff
c0004981:	74 1f                	je     c00049a2 <f_truncate+0x8e>
c0004983:	83 fa 01             	cmp    edx,0x1
c0004986:	b8 02 00 00 00       	mov    eax,0x2
c000498b:	74 15                	je     c00049a2 <f_truncate+0x8e>
c000498d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004991:	31 c0                	xor    eax,eax
c0004993:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004996:	76 0a                	jbe    c00049a2 <f_truncate+0x8e>
c0004998:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000499b:	89 d8                	mov    eax,ebx
c000499d:	e8 00 ec ff ff       	call   c00035a2 <remove_chain>
c00049a2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a8:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049ab:	80 ca 40             	or     dl,0x40
c00049ae:	85 c0                	test   eax,eax
c00049b0:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049b3:	75 2f                	jne    c00049e4 <f_truncate+0xd0>
c00049b5:	84 d2                	test   dl,dl
c00049b7:	79 37                	jns    c00049f0 <f_truncate+0xdc>
c00049b9:	6a 01                	push   0x1
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	8d 43 28             	lea    eax,[ebx+0x28]
c00049c1:	50                   	push   eax
c00049c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ca:	50                   	push   eax
c00049cb:	e8 c4 d4 ff ff       	call   c0001e94 <disk_write>
c00049d0:	83 c4 10             	add    esp,0x10
c00049d3:	85 c0                	test   eax,eax
c00049d5:	75 08                	jne    c00049df <f_truncate+0xcb>
c00049d7:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00049db:	31 f6                	xor    esi,esi
c00049dd:	eb 11                	jmp    c00049f0 <f_truncate+0xdc>
c00049df:	b8 01 00 00 00       	mov    eax,0x1
c00049e4:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e7:	89 c6                	mov    esi,eax
c00049e9:	eb 05                	jmp    c00049f0 <f_truncate+0xdc>
c00049eb:	be 07 00 00 00       	mov    esi,0x7
c00049f0:	83 c4 14             	add    esp,0x14
c00049f3:	89 f0                	mov    eax,esi
c00049f5:	5b                   	pop    ebx
c00049f6:	5e                   	pop    esi
c00049f7:	c3                   	ret    

c00049f8 <f_unlink>:
c00049f8:	55                   	push   ebp
c00049f9:	b9 02 00 00 00       	mov    ecx,0x2
c00049fe:	57                   	push   edi
c00049ff:	56                   	push   esi
c0004a00:	53                   	push   ebx
c0004a01:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a07:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0b:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a12:	e8 23 db ff ff       	call   c000253a <mount_volume>
c0004a17:	85 c0                	test   eax,eax
c0004a19:	0f 85 ec 00 00 00    	jne    c0004b0b <f_unlink+0x113>
c0004a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a23:	83 ec 0c             	sub    esp,0xc
c0004a26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2a:	68 00 02 00 00       	push   0x200
c0004a2f:	e8 cc 11 00 00       	call   c0005c00 <ff_memalloc>
c0004a34:	83 c4 10             	add    esp,0x10
c0004a37:	89 c6                	mov    esi,eax
c0004a39:	b8 11 00 00 00       	mov    eax,0x11
c0004a3e:	85 f6                	test   esi,esi
c0004a40:	0f 84 c5 00 00 00    	je     c0004b0b <f_unlink+0x113>
c0004a46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4a:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a51:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004a54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a58:	e8 cd ef ff ff       	call   c0003a2a <follow_path>
c0004a5d:	85 c0                	test   eax,eax
c0004a5f:	0f 85 92 00 00 00    	jne    c0004af7 <f_unlink+0xff>
c0004a65:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004a6a:	b8 06 00 00 00       	mov    eax,0x6
c0004a6f:	0f 88 82 00 00 00    	js     c0004af7 <f_unlink+0xff>
c0004a75:	8a 5c 24 26          	mov    bl,BYTE PTR [esp+0x26]
c0004a79:	88 d8                	mov    al,bl
c0004a7b:	24 01                	and    al,0x1
c0004a7d:	74 07                	je     c0004a86 <f_unlink+0x8e>
c0004a7f:	b8 07 00 00 00       	mov    eax,0x7
c0004a84:	eb 71                	jmp    c0004af7 <f_unlink+0xff>
c0004a86:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004a8a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a8e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004a91:	e8 bd e7 ff ff       	call   c0003253 <ld_clust.isra.0>
c0004a96:	80 e3 10             	and    bl,0x10
c0004a99:	89 c7                	mov    edi,eax
c0004a9b:	75 20                	jne    c0004abd <f_unlink+0xc5>
c0004a9d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa1:	e8 08 ee ff ff       	call   c00038ae <dir_remove>
c0004aa6:	85 c0                	test   eax,eax
c0004aa8:	75 40                	jne    c0004aea <f_unlink+0xf2>
c0004aaa:	85 ff                	test   edi,edi
c0004aac:	74 3c                	je     c0004aea <f_unlink+0xf2>
c0004aae:	31 c9                	xor    ecx,ecx
c0004ab0:	89 fa                	mov    edx,edi
c0004ab2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ab6:	e8 e7 ea ff ff       	call   c00035a2 <remove_chain>
c0004abb:	eb 2d                	jmp    c0004aea <f_unlink+0xf2>
c0004abd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ac1:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ac5:	31 d2                	xor    edx,edx
c0004ac7:	89 6c 24 50          	mov    DWORD PTR [esp+0x50],ebp
c0004acb:	e8 d5 e8 ff ff       	call   c00033a5 <dir_sdi>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 23                	jne    c0004af7 <f_unlink+0xff>
c0004ad4:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ad8:	31 d2                	xor    edx,edx
c0004ada:	e8 b2 ec ff ff       	call   c0003791 <dir_read>
c0004adf:	85 c0                	test   eax,eax
c0004ae1:	74 9c                	je     c0004a7f <f_unlink+0x87>
c0004ae3:	83 f8 04             	cmp    eax,0x4
c0004ae6:	75 0f                	jne    c0004af7 <f_unlink+0xff>
c0004ae8:	eb b3                	jmp    c0004a9d <f_unlink+0xa5>
c0004aea:	85 c0                	test   eax,eax
c0004aec:	75 09                	jne    c0004af7 <f_unlink+0xff>
c0004aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004af2:	e8 29 e3 ff ff       	call   c0002e20 <sync_fs>
c0004af7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004afb:	83 ec 0c             	sub    esp,0xc
c0004afe:	56                   	push   esi
c0004aff:	e8 10 11 00 00       	call   c0005c14 <ff_memfree>
c0004b04:	83 c4 10             	add    esp,0x10
c0004b07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b0b:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b11:	5b                   	pop    ebx
c0004b12:	5e                   	pop    esi
c0004b13:	5f                   	pop    edi
c0004b14:	5d                   	pop    ebp
c0004b15:	c3                   	ret    

c0004b16 <f_mkdir>:
c0004b16:	57                   	push   edi
c0004b17:	b9 02 00 00 00       	mov    ecx,0x2
c0004b1c:	56                   	push   esi
c0004b1d:	53                   	push   ebx
c0004b1e:	83 ec 50             	sub    esp,0x50
c0004b21:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b25:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b29:	e8 0c da ff ff       	call   c000253a <mount_volume>
c0004b2e:	85 c0                	test   eax,eax
c0004b30:	89 c3                	mov    ebx,eax
c0004b32:	0f 85 70 01 00 00    	jne    c0004ca8 <f_mkdir+0x192>
c0004b38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b3c:	83 ec 0c             	sub    esp,0xc
c0004b3f:	bb 11 00 00 00       	mov    ebx,0x11
c0004b44:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b48:	68 00 02 00 00       	push   0x200
c0004b4d:	e8 ae 10 00 00       	call   c0005c00 <ff_memalloc>
c0004b52:	83 c4 10             	add    esp,0x10
c0004b55:	85 c0                	test   eax,eax
c0004b57:	89 c7                	mov    edi,eax
c0004b59:	0f 84 49 01 00 00    	je     c0004ca8 <f_mkdir+0x192>
c0004b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b63:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b67:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b6a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b6e:	e8 b7 ee ff ff       	call   c0003a2a <follow_path>
c0004b73:	85 c0                	test   eax,eax
c0004b75:	89 c3                	mov    ebx,eax
c0004b77:	74 3e                	je     c0004bb7 <f_mkdir+0xa1>
c0004b79:	83 f8 04             	cmp    eax,0x4
c0004b7c:	75 3e                	jne    c0004bbc <f_mkdir+0xa6>
c0004b7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b88:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b8c:	e8 dc e8 ff ff       	call   c000346d <create_chain>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	89 c6                	mov    esi,eax
c0004b95:	74 0c                	je     c0004ba3 <f_mkdir+0x8d>
c0004b97:	83 f8 01             	cmp    eax,0x1
c0004b9a:	bb 02 00 00 00       	mov    ebx,0x2
c0004b9f:	74 07                	je     c0004ba8 <f_mkdir+0x92>
c0004ba1:	eb 2a                	jmp    c0004bcd <f_mkdir+0xb7>
c0004ba3:	bb 07 00 00 00       	mov    ebx,0x7
c0004ba8:	31 c9                	xor    ecx,ecx
c0004baa:	89 f2                	mov    edx,esi
c0004bac:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb0:	e8 ed e9 ff ff       	call   c00035a2 <remove_chain>
c0004bb5:	eb 05                	jmp    c0004bbc <f_mkdir+0xa6>
c0004bb7:	bb 08 00 00 00       	mov    ebx,0x8
c0004bbc:	83 ec 0c             	sub    esp,0xc
c0004bbf:	57                   	push   edi
c0004bc0:	e8 4f 10 00 00       	call   c0005c14 <ff_memfree>
c0004bc5:	83 c4 10             	add    esp,0x10
c0004bc8:	e9 db 00 00 00       	jmp    c0004ca8 <f_mkdir+0x192>
c0004bcd:	83 f8 ff             	cmp    eax,0xffffffff
c0004bd0:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd5:	74 d1                	je     c0004ba8 <f_mkdir+0x92>
c0004bd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bdb:	89 f2                	mov    edx,esi
c0004bdd:	e8 a9 dd ff ff       	call   c000298b <dir_clear>
c0004be2:	85 c0                	test   eax,eax
c0004be4:	89 c3                	mov    ebx,eax
c0004be6:	75 c0                	jne    c0004ba8 <f_mkdir+0x92>
c0004be8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bec:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf1:	ba 20 00 00 00       	mov    edx,0x20
c0004bf6:	83 c0 34             	add    eax,0x34
c0004bf9:	e8 0c d3 ff ff       	call   c0001f0a <mem_set>
c0004bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c07:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c0b:	83 c0 4a             	add    eax,0x4a
c0004c0e:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c12:	e8 db d2 ff ff       	call   c0001ef2 <st_dword>
c0004c17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c1b:	89 f1                	mov    ecx,esi
c0004c1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004c20:	e8 56 e6 ff ff       	call   c000327b <st_clust.isra.1>
c0004c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c29:	b9 20 00 00 00       	mov    ecx,0x20
c0004c2e:	8d 50 34             	lea    edx,[eax+0x34]
c0004c31:	83 c0 54             	add    eax,0x54
c0004c34:	e8 bc d2 ff ff       	call   c0001ef5 <mem_cpy>
c0004c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c41:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c45:	8d 50 54             	lea    edx,[eax+0x54]
c0004c48:	e8 2e e6 ff ff       	call   c000327b <st_clust.isra.1>
c0004c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c51:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c55:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c59:	e8 68 ee ff ff       	call   c0003ac6 <dir_register>
c0004c5e:	85 c0                	test   eax,eax
c0004c60:	89 c3                	mov    ebx,eax
c0004c62:	0f 85 40 ff ff ff    	jne    c0004ba8 <f_mkdir+0x92>
c0004c68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c6c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c71:	83 c0 16             	add    eax,0x16
c0004c74:	e8 79 d2 ff ff       	call   c0001ef2 <st_dword>
c0004c79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7d:	89 f1                	mov    ecx,esi
c0004c7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c83:	e8 f3 e5 ff ff       	call   c000327b <st_clust.isra.1>
c0004c88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c8c:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c94:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9c:	e8 7f e1 ff ff       	call   c0002e20 <sync_fs>
c0004ca1:	89 c3                	mov    ebx,eax
c0004ca3:	e9 14 ff ff ff       	jmp    c0004bbc <f_mkdir+0xa6>
c0004ca8:	83 c4 50             	add    esp,0x50
c0004cab:	89 d8                	mov    eax,ebx
c0004cad:	5b                   	pop    ebx
c0004cae:	5e                   	pop    esi
c0004caf:	5f                   	pop    edi
c0004cb0:	c3                   	ret    

c0004cb1 <f_rename>:
c0004cb1:	57                   	push   edi
c0004cb2:	56                   	push   esi
c0004cb3:	53                   	push   ebx
c0004cb4:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cba:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc1:	e8 27 d6 ff ff       	call   c00022ed <get_ldnumber>
c0004cc6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cca:	b9 02 00 00 00       	mov    ecx,0x2
c0004ccf:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cd6:	e8 5f d8 ff ff       	call   c000253a <mount_volume>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	0f 85 7c 01 00 00    	jne    c0004e5f <f_rename+0x1ae>
c0004ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce7:	83 ec 0c             	sub    esp,0xc
c0004cea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cee:	68 00 02 00 00       	push   0x200
c0004cf3:	e8 08 0f 00 00       	call   c0005c00 <ff_memalloc>
c0004cf8:	83 c4 10             	add    esp,0x10
c0004cfb:	89 c6                	mov    esi,eax
c0004cfd:	b8 11 00 00 00       	mov    eax,0x11
c0004d02:	85 f6                	test   esi,esi
c0004d04:	0f 84 55 01 00 00    	je     c0004e5f <f_rename+0x1ae>
c0004d0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d0e:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d15:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d18:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d1c:	e8 09 ed ff ff       	call   c0003a2a <follow_path>
c0004d21:	85 c0                	test   eax,eax
c0004d23:	0f 85 22 01 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d29:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004d2e:	b8 06 00 00 00       	mov    eax,0x6
c0004d33:	0f 85 12 01 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d39:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d3d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	e8 aa d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004d4b:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d4f:	b9 30 00 00 00       	mov    ecx,0x30
c0004d54:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d58:	e8 98 d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004d5d:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d64:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d68:	e8 bd ec ff ff       	call   c0003a2a <follow_path>
c0004d6d:	85 c0                	test   eax,eax
c0004d6f:	75 20                	jne    c0004d91 <f_rename+0xe0>
c0004d71:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d75:	b8 08 00 00 00       	mov    eax,0x8
c0004d7a:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d7e:	0f 85 c7 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d84:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d88:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d8f:	eb 03                	jmp    c0004d94 <f_rename+0xe3>
c0004d91:	83 f8 04             	cmp    eax,0x4
c0004d94:	0f 85 b1 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004d9a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d9e:	e8 23 ed ff ff       	call   c0003ac6 <dir_register>
c0004da3:	85 c0                	test   eax,eax
c0004da5:	0f 85 a0 00 00 00    	jne    c0004e4b <f_rename+0x19a>
c0004dab:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004db2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004db6:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbb:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dbe:	e8 32 d1 ff ff       	call   c0001ef5 <mem_cpy>
c0004dc3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dc7:	88 c2                	mov    dl,al
c0004dc9:	80 e2 10             	and    dl,0x10
c0004dcc:	75 02                	jne    c0004dd0 <f_rename+0x11f>
c0004dce:	0c 20                	or     al,0x20
c0004dd0:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ddb:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004ddf:	74 54                	je     c0004e35 <f_rename+0x184>
c0004de1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004de5:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004de9:	74 4a                	je     c0004e35 <f_rename+0x184>
c0004deb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004def:	89 da                	mov    edx,ebx
c0004df1:	8a 07                	mov    al,BYTE PTR [edi]
c0004df3:	e8 5b e4 ff ff       	call   c0003253 <ld_clust.isra.0>
c0004df8:	89 c2                	mov    edx,eax
c0004dfa:	89 f8                	mov    eax,edi
c0004dfc:	e8 07 d3 ff ff       	call   c0002108 <clst2sect>
c0004e01:	89 c2                	mov    edx,eax
c0004e03:	b8 02 00 00 00       	mov    eax,0x2
c0004e08:	85 d2                	test   edx,edx
c0004e0a:	74 3f                	je     c0004e4b <f_rename+0x19a>
c0004e0c:	89 f8                	mov    eax,edi
c0004e0e:	e8 ca d5 ff ff       	call   c00023dd <move_window>
c0004e13:	85 c0                	test   eax,eax
c0004e15:	75 34                	jne    c0004e4b <f_rename+0x19a>
c0004e17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1b:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e1f:	75 14                	jne    c0004e35 <f_rename+0x184>
c0004e21:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e25:	8d 50 54             	lea    edx,[eax+0x54]
c0004e28:	e8 4e e4 ff ff       	call   c000327b <st_clust.isra.1>
c0004e2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e31:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e35:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e39:	e8 70 ea ff ff       	call   c00038ae <dir_remove>
c0004e3e:	85 c0                	test   eax,eax
c0004e40:	75 09                	jne    c0004e4b <f_rename+0x19a>
c0004e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e46:	e8 d5 df ff ff       	call   c0002e20 <sync_fs>
c0004e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4f:	83 ec 0c             	sub    esp,0xc
c0004e52:	56                   	push   esi
c0004e53:	e8 bc 0d 00 00       	call   c0005c14 <ff_memfree>
c0004e58:	83 c4 10             	add    esp,0x10
c0004e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e65:	5b                   	pop    ebx
c0004e66:	5e                   	pop    esi
c0004e67:	5f                   	pop    edi
c0004e68:	c3                   	ret    

c0004e69 <f_chmod>:
c0004e69:	56                   	push   esi
c0004e6a:	b9 02 00 00 00       	mov    ecx,0x2
c0004e6f:	53                   	push   ebx
c0004e70:	83 ec 54             	sub    esp,0x54
c0004e73:	8a 44 24 68          	mov    al,BYTE PTR [esp+0x68]
c0004e77:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e7b:	8a 5c 24 64          	mov    bl,BYTE PTR [esp+0x64]
c0004e7f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0004e83:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e87:	e8 ae d6 ff ff       	call   c000253a <mount_volume>
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 81 00 00 00    	jne    c0004f15 <f_chmod+0xac>
c0004e94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e98:	83 ec 0c             	sub    esp,0xc
c0004e9b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004e9f:	68 00 02 00 00       	push   0x200
c0004ea4:	e8 57 0d 00 00       	call   c0005c00 <ff_memalloc>
c0004ea9:	83 c4 10             	add    esp,0x10
c0004eac:	89 c6                	mov    esi,eax
c0004eae:	b8 11 00 00 00       	mov    eax,0x11
c0004eb3:	85 f6                	test   esi,esi
c0004eb5:	74 5e                	je     c0004f15 <f_chmod+0xac>
c0004eb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ebf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec6:	e8 5f eb ff ff       	call   c0003a2a <follow_path>
c0004ecb:	85 c0                	test   eax,eax
c0004ecd:	75 32                	jne    c0004f01 <f_chmod+0x98>
c0004ecf:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004ed4:	b8 06 00 00 00       	mov    eax,0x6
c0004ed9:	75 26                	jne    c0004f01 <f_chmod+0x98>
c0004edb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004edf:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0004ee2:	30 c3                	xor    bl,al
c0004ee4:	22 5c 24 0c          	and    bl,BYTE PTR [esp+0xc]
c0004ee8:	80 e3 27             	and    bl,0x27
c0004eeb:	30 c3                	xor    bl,al
c0004eed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef1:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0004ef4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ef8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efc:	e8 1f df ff ff       	call   c0002e20 <sync_fs>
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	83 ec 0c             	sub    esp,0xc
c0004f08:	56                   	push   esi
c0004f09:	e8 06 0d 00 00       	call   c0005c14 <ff_memfree>
c0004f0e:	83 c4 10             	add    esp,0x10
c0004f11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f15:	83 c4 54             	add    esp,0x54
c0004f18:	5b                   	pop    ebx
c0004f19:	5e                   	pop    esi
c0004f1a:	c3                   	ret    

c0004f1b <f_utime>:
c0004f1b:	56                   	push   esi
c0004f1c:	b9 02 00 00 00       	mov    ecx,0x2
c0004f21:	53                   	push   ebx
c0004f22:	83 ec 54             	sub    esp,0x54
c0004f25:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f31:	e8 04 d6 ff ff       	call   c000253a <mount_volume>
c0004f36:	85 c0                	test   eax,eax
c0004f38:	0f 85 85 00 00 00    	jne    c0004fc3 <f_utime+0xa8>
c0004f3e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f42:	83 ec 0c             	sub    esp,0xc
c0004f45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f49:	68 00 02 00 00       	push   0x200
c0004f4e:	e8 ad 0c 00 00       	call   c0005c00 <ff_memalloc>
c0004f53:	83 c4 10             	add    esp,0x10
c0004f56:	89 c3                	mov    ebx,eax
c0004f58:	b8 11 00 00 00       	mov    eax,0x11
c0004f5d:	85 db                	test   ebx,ebx
c0004f5f:	74 62                	je     c0004fc3 <f_utime+0xa8>
c0004f61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f65:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f69:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f70:	e8 b5 ea ff ff       	call   c0003a2a <follow_path>
c0004f75:	85 c0                	test   eax,eax
c0004f77:	75 36                	jne    c0004faf <f_utime+0x94>
c0004f79:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004f7e:	b8 06 00 00 00       	mov    eax,0x6
c0004f83:	75 2a                	jne    c0004faf <f_utime+0x94>
c0004f85:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f89:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8d:	c1 e2 10             	shl    edx,0x10
c0004f90:	09 c2                	or     edx,eax
c0004f92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f96:	83 c0 16             	add    eax,0x16
c0004f99:	e8 54 cf ff ff       	call   c0001ef2 <st_dword>
c0004f9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fa6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004faa:	e8 71 de ff ff       	call   c0002e20 <sync_fs>
c0004faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb3:	83 ec 0c             	sub    esp,0xc
c0004fb6:	53                   	push   ebx
c0004fb7:	e8 58 0c 00 00       	call   c0005c14 <ff_memfree>
c0004fbc:	83 c4 10             	add    esp,0x10
c0004fbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc3:	83 c4 54             	add    esp,0x54
c0004fc6:	5b                   	pop    ebx
c0004fc7:	5e                   	pop    esi
c0004fc8:	c3                   	ret    

c0004fc9 <f_getlabel>:
c0004fc9:	55                   	push   ebp
c0004fca:	31 c9                	xor    ecx,ecx
c0004fcc:	57                   	push   edi
c0004fcd:	56                   	push   esi
c0004fce:	53                   	push   ebx
c0004fcf:	83 ec 5c             	sub    esp,0x5c
c0004fd2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fd6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fda:	e8 5b d5 ff ff       	call   c000253a <mount_volume>
c0004fdf:	85 c0                	test   eax,eax
c0004fe1:	89 c3                	mov    ebx,eax
c0004fe3:	0f 85 de 00 00 00    	jne    c00050c7 <f_getlabel+0xfe>
c0004fe9:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004fee:	0f 84 d3 00 00 00    	je     c00050c7 <f_getlabel+0xfe>
c0004ff4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005000:	31 d2                	xor    edx,edx
c0005002:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005006:	8d 44 24 20          	lea    eax,[esp+0x20]
c000500a:	e8 96 e3 ff ff       	call   c00033a5 <dir_sdi>
c000500f:	85 c0                	test   eax,eax
c0005011:	89 c3                	mov    ebx,eax
c0005013:	0f 85 a0 00 00 00    	jne    c00050b9 <f_getlabel+0xf0>
c0005019:	8d 44 24 20          	lea    eax,[esp+0x20]
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	e8 6a e7 ff ff       	call   c0003791 <dir_read>
c0005027:	85 c0                	test   eax,eax
c0005029:	89 c3                	mov    ebx,eax
c000502b:	0f 85 88 00 00 00    	jne    c00050b9 <f_getlabel+0xf0>
c0005031:	31 f6                	xor    esi,esi
c0005033:	31 c9                	xor    ecx,ecx
c0005035:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005039:	8d 79 01             	lea    edi,[ecx+0x1]
c000503c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005045:	89 c2                	mov    edx,eax
c0005047:	e8 fc ce ff ff       	call   c0001f48 <dbc_1st>
c000504c:	85 c0                	test   eax,eax
c000504e:	74 16                	je     c0005066 <f_getlabel+0x9d>
c0005050:	83 ff 0b             	cmp    edi,0xb
c0005053:	74 11                	je     c0005066 <f_getlabel+0x9d>
c0005055:	0f b6 44 3d 00       	movzx  eax,BYTE PTR [ebp+edi*1+0x0]
c000505a:	c1 e2 08             	shl    edx,0x8
c000505d:	8d 79 02             	lea    edi,[ecx+0x2]
c0005060:	09 d0                	or     eax,edx
c0005062:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005066:	50                   	push   eax
c0005067:	50                   	push   eax
c0005068:	68 b5 01 00 00       	push   0x1b5
c000506d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005071:	e8 4e 0c 00 00       	call   c0005cc4 <ff_oem2uni>
c0005076:	83 c4 10             	add    esp,0x10
c0005079:	0f b7 c0             	movzx  eax,ax
c000507c:	85 c0                	test   eax,eax
c000507e:	74 22                	je     c00050a2 <f_getlabel+0xd9>
c0005080:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005084:	b9 04 00 00 00       	mov    ecx,0x4
c0005089:	01 f2                	add    edx,esi
c000508b:	e8 88 cf ff ff       	call   c0002018 <put_utf>
c0005090:	84 c0                	test   al,al
c0005092:	74 0e                	je     c00050a2 <f_getlabel+0xd9>
c0005094:	0f b6 c0             	movzx  eax,al
c0005097:	01 c6                	add    esi,eax
c0005099:	83 ff 0b             	cmp    edi,0xb
c000509c:	74 06                	je     c00050a4 <f_getlabel+0xdb>
c000509e:	89 f9                	mov    ecx,edi
c00050a0:	eb 93                	jmp    c0005035 <f_getlabel+0x6c>
c00050a2:	31 f6                	xor    esi,esi
c00050a4:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c00050a8:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c00050ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050af:	74 16                	je     c00050c7 <f_getlabel+0xfe>
c00050b1:	4e                   	dec    esi
c00050b2:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050b5:	74 f1                	je     c00050a8 <f_getlabel+0xdf>
c00050b7:	eb 0e                	jmp    c00050c7 <f_getlabel+0xfe>
c00050b9:	83 fb 04             	cmp    ebx,0x4
c00050bc:	75 09                	jne    c00050c7 <f_getlabel+0xfe>
c00050be:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c2:	31 db                	xor    ebx,ebx
c00050c4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050c7:	85 db                	test   ebx,ebx
c00050c9:	75 48                	jne    c0005113 <f_getlabel+0x14a>
c00050cb:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050d0:	74 41                	je     c0005113 <f_getlabel+0x14a>
c00050d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d9:	e8 ff d2 ff ff       	call   c00023dd <move_window>
c00050de:	85 c0                	test   eax,eax
c00050e0:	89 c3                	mov    ebx,eax
c00050e2:	75 2f                	jne    c0005113 <f_getlabel+0x14a>
c00050e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e8:	b8 43 00 00 00       	mov    eax,0x43
c00050ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00050ef:	80 f9 03             	cmp    cl,0x3
c00050f2:	74 10                	je     c0005104 <f_getlabel+0x13b>
c00050f4:	80 f9 04             	cmp    cl,0x4
c00050f7:	b8 64 00 00 00       	mov    eax,0x64
c00050fc:	b9 27 00 00 00       	mov    ecx,0x27
c0005101:	0f 45 c1             	cmovne eax,ecx
c0005104:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005108:	e8 c9 cd ff ff       	call   c0001ed6 <ld_dword>
c000510d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005111:	89 07                	mov    DWORD PTR [edi],eax
c0005113:	83 c4 5c             	add    esp,0x5c
c0005116:	89 d8                	mov    eax,ebx
c0005118:	5b                   	pop    ebx
c0005119:	5e                   	pop    esi
c000511a:	5f                   	pop    edi
c000511b:	5d                   	pop    ebp
c000511c:	c3                   	ret    

c000511d <f_setlabel>:
c000511d:	56                   	push   esi
c000511e:	b9 02 00 00 00       	mov    ecx,0x2
c0005123:	53                   	push   ebx
c0005124:	83 ec 64             	sub    esp,0x64
c0005127:	8d 54 24 14          	lea    edx,[esp+0x14]
c000512b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000512f:	e8 06 d4 ff ff       	call   c000253a <mount_volume>
c0005134:	85 c0                	test   eax,eax
c0005136:	89 c6                	mov    esi,eax
c0005138:	0f 85 67 01 00 00    	jne    c00052a5 <f_setlabel+0x188>
c000513e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005143:	ba 20 00 00 00       	mov    edx,0x20
c0005148:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c000514c:	31 db                	xor    ebx,ebx
c000514e:	e8 b7 cd ff ff       	call   c0001f0a <mem_set>
c0005153:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0005157:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515a:	76 63                	jbe    c00051bf <f_setlabel+0xa2>
c000515c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005160:	e8 e9 cd ff ff       	call   c0001f4e <tchar2uni>
c0005165:	3d ff ff 00 00       	cmp    eax,0xffff
c000516a:	76 0a                	jbe    c0005176 <f_setlabel+0x59>
c000516c:	be 06 00 00 00       	mov    esi,0x6
c0005171:	e9 2f 01 00 00       	jmp    c00052a5 <f_setlabel+0x188>
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	50                   	push   eax
c000517a:	e8 bd 0b 00 00       	call   c0005d3c <ff_wtoupper>
c000517f:	5a                   	pop    edx
c0005180:	59                   	pop    ecx
c0005181:	68 b5 01 00 00       	push   0x1b5
c0005186:	50                   	push   eax
c0005187:	e8 9c 0a 00 00       	call   c0005c28 <ff_uni2oem>
c000518c:	83 c4 10             	add    esp,0x10
c000518f:	0f b7 c8             	movzx  ecx,ax
c0005192:	85 c9                	test   ecx,ecx
c0005194:	74 d6                	je     c000516c <f_setlabel+0x4f>
c0005196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000519a:	89 ca                	mov    edx,ecx
c000519c:	b8 30 f2 01 c0       	mov    eax,0xc001f230
c00051a1:	e8 91 cd ff ff       	call   c0001f37 <chk_chr>
c00051a6:	85 c0                	test   eax,eax
c00051a8:	75 c2                	jne    c000516c <f_setlabel+0x4f>
c00051aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051ae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00051b4:	0f 87 c9 00 00 00    	ja     c0005283 <f_setlabel+0x166>
c00051ba:	e9 dc 00 00 00       	jmp    c000529b <f_setlabel+0x17e>
c00051bf:	80 7c 24 1a e5       	cmp    BYTE PTR [esp+0x1a],0xe5
c00051c4:	74 a6                	je     c000516c <f_setlabel+0x4f>
c00051c6:	85 db                	test   ebx,ebx
c00051c8:	74 0e                	je     c00051d8 <f_setlabel+0xbb>
c00051ca:	80 7c 1c 19 20       	cmp    BYTE PTR [esp+ebx*1+0x19],0x20
c00051cf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051d2:	75 04                	jne    c00051d8 <f_setlabel+0xbb>
c00051d4:	89 c3                	mov    ebx,eax
c00051d6:	eb ee                	jmp    c00051c6 <f_setlabel+0xa9>
c00051d8:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00051e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00051e4:	31 d2                	xor    edx,edx
c00051e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00051ea:	8d 44 24 30          	lea    eax,[esp+0x30]
c00051ee:	e8 b2 e1 ff ff       	call   c00033a5 <dir_sdi>
c00051f3:	85 c0                	test   eax,eax
c00051f5:	89 c6                	mov    esi,eax
c00051f7:	0f 85 a8 00 00 00    	jne    c00052a5 <f_setlabel+0x188>
c00051fd:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005201:	ba 01 00 00 00       	mov    edx,0x1
c0005206:	e8 86 e5 ff ff       	call   c0003791 <dir_read>
c000520b:	85 c0                	test   eax,eax
c000520d:	75 18                	jne    c0005227 <f_setlabel+0x10a>
c000520f:	85 db                	test   ebx,ebx
c0005211:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005215:	74 0b                	je     c0005222 <f_setlabel+0x105>
c0005217:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c000521b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005220:	eb 47                	jmp    c0005269 <f_setlabel+0x14c>
c0005222:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005225:	eb 47                	jmp    c000526e <f_setlabel+0x151>
c0005227:	83 f8 04             	cmp    eax,0x4
c000522a:	75 53                	jne    c000527f <f_setlabel+0x162>
c000522c:	85 db                	test   ebx,ebx
c000522e:	74 75                	je     c00052a5 <f_setlabel+0x188>
c0005230:	8d 44 24 30          	lea    eax,[esp+0x30]
c0005234:	ba 01 00 00 00       	mov    edx,0x1
c0005239:	e8 f2 e4 ff ff       	call   c0003730 <dir_alloc>
c000523e:	85 c0                	test   eax,eax
c0005240:	89 c6                	mov    esi,eax
c0005242:	75 61                	jne    c00052a5 <f_setlabel+0x188>
c0005244:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005248:	b9 20 00 00 00       	mov    ecx,0x20
c000524d:	31 d2                	xor    edx,edx
c000524f:	e8 b6 cc ff ff       	call   c0001f0a <mem_set>
c0005254:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005258:	b9 0b 00 00 00       	mov    ecx,0xb
c000525d:	8d 54 24 1a          	lea    edx,[esp+0x1a]
c0005261:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005265:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005269:	e8 87 cc ff ff       	call   c0001ef5 <mem_cpy>
c000526e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005272:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000527a:	e8 a1 db ff ff       	call   c0002e20 <sync_fs>
c000527f:	89 c6                	mov    esi,eax
c0005281:	eb 22                	jmp    c00052a5 <f_setlabel+0x188>
c0005283:	83 fb 09             	cmp    ebx,0x9
c0005286:	0f 87 e0 fe ff ff    	ja     c000516c <f_setlabel+0x4f>
c000528c:	88 6c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],ch
c0005290:	43                   	inc    ebx
c0005291:	88 4c 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],cl
c0005295:	43                   	inc    ebx
c0005296:	e9 b8 fe ff ff       	jmp    c0005153 <f_setlabel+0x36>
c000529b:	83 fb 0a             	cmp    ebx,0xa
c000529e:	76 f1                	jbe    c0005291 <f_setlabel+0x174>
c00052a0:	e9 c7 fe ff ff       	jmp    c000516c <f_setlabel+0x4f>
c00052a5:	83 c4 64             	add    esp,0x64
c00052a8:	89 f0                	mov    eax,esi
c00052aa:	5b                   	pop    ebx
c00052ab:	5e                   	pop    esi
c00052ac:	c3                   	ret    

c00052ad <f_expand>:
c00052ad:	55                   	push   ebp
c00052ae:	57                   	push   edi
c00052af:	56                   	push   esi
c00052b0:	53                   	push   ebx
c00052b1:	83 ec 2c             	sub    esp,0x2c
c00052b4:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00052b8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052bc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052c0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00052c4:	89 d8                	mov    eax,ebx
c00052c6:	e8 67 d0 ff ff       	call   c0002332 <validate>
c00052cb:	85 c0                	test   eax,eax
c00052cd:	89 c6                	mov    esi,eax
c00052cf:	0f 85 2c 01 00 00    	jne    c0005401 <f_expand+0x154>
c00052d5:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052d9:	85 f6                	test   esi,esi
c00052db:	0f 85 20 01 00 00    	jne    c0005401 <f_expand+0x154>
c00052e1:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e6:	75 0a                	jne    c00052f2 <f_expand+0x45>
c00052e8:	be 07 00 00 00       	mov    esi,0x7
c00052ed:	e9 0f 01 00 00       	jmp    c0005401 <f_expand+0x154>
c00052f2:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f6:	75 f0                	jne    c00052e8 <f_expand+0x3b>
c00052f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052fc:	74 ea                	je     c00052e8 <f_expand+0x3b>
c00052fe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005302:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005306:	c1 e7 09             	shl    edi,0x9
c0005309:	8d 47 ff             	lea    eax,[edi-0x1]
c000530c:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005310:	0f 95 c0             	setne  al
c0005313:	31 d2                	xor    edx,edx
c0005315:	0f b6 e8             	movzx  ebp,al
c0005318:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000531c:	f7 f7                	div    edi
c000531e:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005321:	01 e8                	add    eax,ebp
c0005323:	83 ff 01             	cmp    edi,0x1
c0005326:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532a:	76 05                	jbe    c0005331 <f_expand+0x84>
c000532c:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000532f:	77 05                	ja     c0005336 <f_expand+0x89>
c0005331:	bf 02 00 00 00       	mov    edi,0x2
c0005336:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005339:	89 fd                	mov    ebp,edi
c000533b:	31 c9                	xor    ecx,ecx
c000533d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005341:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005343:	89 ea                	mov    edx,ebp
c0005345:	45                   	inc    ebp
c0005346:	e8 58 df ff ff       	call   c00032a3 <get_fat.isra.2>
c000534b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000534f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005353:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005356:	77 05                	ja     c000535d <f_expand+0xb0>
c0005358:	bd 02 00 00 00       	mov    ebp,0x2
c000535d:	83 f8 01             	cmp    eax,0x1
c0005360:	74 20                	je     c0005382 <f_expand+0xd5>
c0005362:	83 f8 ff             	cmp    eax,0xffffffff
c0005365:	74 22                	je     c0005389 <f_expand+0xdc>
c0005367:	85 c0                	test   eax,eax
c0005369:	75 09                	jne    c0005374 <f_expand+0xc7>
c000536b:	41                   	inc    ecx
c000536c:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005370:	75 07                	jne    c0005379 <f_expand+0xcc>
c0005372:	eb 1c                	jmp    c0005390 <f_expand+0xe3>
c0005374:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005377:	31 c9                	xor    ecx,ecx
c0005379:	39 fd                	cmp    ebp,edi
c000537b:	75 c0                	jne    c000533d <f_expand+0x90>
c000537d:	e9 66 ff ff ff       	jmp    c00052e8 <f_expand+0x3b>
c0005382:	be 02 00 00 00       	mov    esi,0x2
c0005387:	eb 78                	jmp    c0005401 <f_expand+0x154>
c0005389:	be 01 00 00 00       	mov    esi,0x1
c000538e:	eb 71                	jmp    c0005401 <f_expand+0x154>
c0005390:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0005395:	74 2b                	je     c00053c2 <f_expand+0x115>
c0005397:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000539a:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000539e:	85 ed                	test   ebp,ebp
c00053a0:	74 24                	je     c00053c6 <f_expand+0x119>
c00053a2:	83 c9 ff             	or     ecx,0xffffffff
c00053a5:	83 fd 01             	cmp    ebp,0x1
c00053a8:	74 03                	je     c00053ad <f_expand+0x100>
c00053aa:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053b1:	89 fa                	mov    edx,edi
c00053b3:	e8 7f d4 ff ff       	call   c0002837 <put_fat>
c00053b8:	85 c0                	test   eax,eax
c00053ba:	75 43                	jne    c00053ff <f_expand+0x152>
c00053bc:	89 f8                	mov    eax,edi
c00053be:	4d                   	dec    ebp
c00053bf:	47                   	inc    edi
c00053c0:	eb dc                	jmp    c000539e <f_expand+0xf1>
c00053c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053c5:	48                   	dec    eax
c00053c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053ca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00053cf:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053d2:	74 2d                	je     c0005401 <f_expand+0x154>
c00053d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053d7:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c00053db:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053de:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053eb:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053ee:	39 c8                	cmp    eax,ecx
c00053f0:	77 0f                	ja     c0005401 <f_expand+0x154>
c00053f2:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00053f6:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00053fa:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00053fd:	eb 02                	jmp    c0005401 <f_expand+0x154>
c00053ff:	89 c6                	mov    esi,eax
c0005401:	83 c4 2c             	add    esp,0x2c
c0005404:	89 f0                	mov    eax,esi
c0005406:	5b                   	pop    ebx
c0005407:	5e                   	pop    esi
c0005408:	5f                   	pop    edi
c0005409:	5d                   	pop    ebp
c000540a:	c3                   	ret    

c000540b <f_mkfs>:
c000540b:	55                   	push   ebp
c000540c:	57                   	push   edi
c000540d:	56                   	push   esi
c000540e:	53                   	push   ebx
c000540f:	bb 0b 00 00 00       	mov    ebx,0xb
c0005414:	83 ec 4c             	sub    esp,0x4c
c0005417:	8d 44 24 60          	lea    eax,[esp+0x60]
c000541b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000541f:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005423:	e8 c5 ce ff ff       	call   c00022ed <get_ldnumber>
c0005428:	85 c0                	test   eax,eax
c000542a:	0f 88 c6 07 00 00    	js     c0005bf6 <f_mkfs+0x7eb>
c0005430:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005437:	85 d2                	test   edx,edx
c0005439:	74 03                	je     c000543e <f_mkfs+0x33>
c000543b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000543e:	85 f6                	test   esi,esi
c0005440:	75 05                	jne    c0005447 <f_mkfs+0x3c>
c0005442:	be 20 f2 01 c0       	mov    esi,0xc001f220
c0005447:	0f b6 c0             	movzx  eax,al
c000544a:	83 ec 0c             	sub    esp,0xc
c000544d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005451:	bb 03 00 00 00       	mov    ebx,0x3
c0005456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000545a:	e8 1c ca ff ff       	call   c0001e7b <disk_initialize>
c000545f:	83 c4 10             	add    esp,0x10
c0005462:	88 c2                	mov    dl,al
c0005464:	80 e2 01             	and    dl,0x1
c0005467:	84 d2                	test   dl,dl
c0005469:	0f 85 87 07 00 00    	jne    c0005bf6 <f_mkfs+0x7eb>
c000546f:	24 04                	and    al,0x4
c0005471:	bb 0a 00 00 00       	mov    ebx,0xa
c0005476:	0f 85 7a 07 00 00    	jne    c0005bf6 <f_mkfs+0x7eb>
c000547c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000547f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005483:	85 c0                	test   eax,eax
c0005485:	75 20                	jne    c00054a7 <f_mkfs+0x9c>
c0005487:	51                   	push   ecx
c0005488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000548c:	50                   	push   eax
c000548d:	6a 03                	push   0x3
c000548f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005493:	e8 12 ca ff ff       	call   c0001eaa <disk_ioctl>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	85 c0                	test   eax,eax
c000549d:	74 08                	je     c00054a7 <f_mkfs+0x9c>
c000549f:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00054a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00054ab:	8d 42 ff             	lea    eax,[edx-0x1]
c00054ae:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054b3:	77 04                	ja     c00054b9 <f_mkfs+0xae>
c00054b5:	85 c2                	test   edx,eax
c00054b7:	74 08                	je     c00054c1 <f_mkfs+0xb6>
c00054b9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c00054c1:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00054c4:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00054c8:	fe c8                	dec    al
c00054ca:	3c 01                	cmp    al,0x1
c00054cc:	76 05                	jbe    c00054d3 <f_mkfs+0xc8>
c00054ce:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c00054d3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00054d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054da:	48                   	dec    eax
c00054db:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e0:	77 15                	ja     c00054f7 <f_mkfs+0xec>
c00054e2:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c00054e7:	b8 00 02 00 00       	mov    eax,0x200
c00054ec:	0f 44 44 24 0c       	cmove  eax,DWORD PTR [esp+0xc]
c00054f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054f5:	eb 08                	jmp    c00054ff <f_mkfs+0xf4>
c00054f7:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c00054ff:	8b 7e 0c             	mov    edi,DWORD PTR [esi+0xc]
c0005502:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005508:	77 0f                	ja     c0005519 <f_mkfs+0x10e>
c000550a:	8d 47 ff             	lea    eax,[edi-0x1]
c000550d:	85 f8                	test   eax,edi
c000550f:	b8 00 00 00 00       	mov    eax,0x0
c0005514:	0f 45 f8             	cmovne edi,eax
c0005517:	eb 02                	jmp    c000551b <f_mkfs+0x110>
c0005519:	31 ff                	xor    edi,edi
c000551b:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005523:	77 0a                	ja     c000552f <f_mkfs+0x124>
c0005525:	bb 11 00 00 00       	mov    ebx,0x11
c000552a:	e9 c7 06 00 00       	jmp    c0005bf6 <f_mkfs+0x7eb>
c000552f:	85 ed                	test   ebp,ebp
c0005531:	8a 1e                	mov    bl,BYTE PTR [esi]
c0005533:	89 ee                	mov    esi,ebp
c0005535:	75 1b                	jne    c0005552 <f_mkfs+0x147>
c0005537:	83 ec 0c             	sub    esp,0xc
c000553a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000553e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005543:	50                   	push   eax
c0005544:	e8 b7 06 00 00       	call   c0005c00 <ff_memalloc>
c0005549:	83 c4 10             	add    esp,0x10
c000554c:	85 c0                	test   eax,eax
c000554e:	89 c6                	mov    esi,eax
c0005550:	74 d3                	je     c0005525 <f_mkfs+0x11a>
c0005552:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c000555a:	52                   	push   edx
c000555b:	8d 44 24 38          	lea    eax,[esp+0x38]
c000555f:	50                   	push   eax
c0005560:	6a 01                	push   0x1
c0005562:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005566:	e8 3f c9 ff ff       	call   c0001eaa <disk_ioctl>
c000556b:	83 c4 10             	add    esp,0x10
c000556e:	85 c0                	test   eax,eax
c0005570:	0f 85 27 06 00 00    	jne    c0005b9d <f_mkfs+0x792>
c0005576:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557e:	88 d8                	mov    al,bl
c0005580:	24 08                	and    al,0x8
c0005582:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005586:	75 18                	jne    c00055a0 <f_mkfs+0x195>
c0005588:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000558c:	83 f8 3f             	cmp    eax,0x3f
c000558f:	76 0f                	jbe    c00055a0 <f_mkfs+0x195>
c0005591:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005599:	83 e8 3f             	sub    eax,0x3f
c000559c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00055a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00055a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00055a8:	83 f8 7f             	cmp    eax,0x7f
c00055ab:	0f 86 61 02 00 00    	jbe    c0005812 <f_mkfs+0x407>
c00055b1:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055b7:	b9 80 00 00 00       	mov    ecx,0x80
c00055bc:	77 05                	ja     c00055c3 <f_mkfs+0x1b8>
c00055be:	c1 ef 09             	shr    edi,0x9
c00055c1:	89 f9                	mov    ecx,edi
c00055c3:	88 d8                	mov    al,bl
c00055c5:	24 01                	and    al,0x1
c00055c7:	80 e3 02             	and    bl,0x2
c00055ca:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c00055ce:	74 0a                	je     c00055da <f_mkfs+0x1cf>
c00055d0:	84 c0                	test   al,al
c00055d2:	0f 84 58 01 00 00    	je     c0005730 <f_mkfs+0x325>
c00055d8:	eb 3b                	jmp    c0005615 <f_mkfs+0x20a>
c00055da:	84 c0                	test   al,al
c00055dc:	bb 13 00 00 00       	mov    ebx,0x13
c00055e1:	75 32                	jne    c0005615 <f_mkfs+0x20a>
c00055e3:	e9 cc 05 00 00       	jmp    c0005bb4 <f_mkfs+0x7a9>
c00055e8:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00055ed:	0f 85 18 02 00 00    	jne    c000580b <f_mkfs+0x400>
c00055f3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00055f8:	0f 86 ee 01 00 00    	jbe    c00057ec <f_mkfs+0x3e1>
c00055fe:	85 c9                	test   ecx,ecx
c0005600:	0f 85 c0 05 00 00    	jne    c0005bc6 <f_mkfs+0x7bb>
c0005606:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000560a:	01 c9                	add    ecx,ecx
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 c1 05 00 00    	ja     c0005bd6 <f_mkfs+0x7cb>
c0005615:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005619:	85 c9                	test   ecx,ecx
c000561b:	75 1f                	jne    c000563c <f_mkfs+0x231>
c000561d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0005625:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0005629:	b8 00 f2 01 c0       	mov    eax,0xc001f200
c000562e:	c1 eb 0c             	shr    ebx,0xc
c0005631:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005634:	85 d2                	test   edx,edx
c0005636:	0f 85 62 01 00 00    	jne    c000579e <f_mkfs+0x393>
c000563c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005640:	31 d2                	xor    edx,edx
c0005642:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c0005646:	3d f5 0f 00 00       	cmp    eax,0xff5
c000564b:	0f 86 65 01 00 00    	jbe    c00057b6 <f_mkfs+0x3ab>
c0005651:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c0005656:	83 c0 02             	add    eax,0x2
c0005659:	01 c0                	add    eax,eax
c000565b:	05 ff 01 00 00       	add    eax,0x1ff
c0005660:	bf 01 00 00 00       	mov    edi,0x1
c0005665:	c1 e8 09             	shr    eax,0x9
c0005668:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000566c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005670:	c1 e0 05             	shl    eax,0x5
c0005673:	c1 e8 09             	shr    eax,0x9
c0005676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000567a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000567f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005687:	01 f8                	add    eax,edi
c0005689:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000568d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005691:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005696:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c000569a:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000569e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00056a6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00056aa:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c00056ae:	f7 d8                	neg    eax
c00056b0:	21 c3                	and    ebx,eax
c00056b2:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c00056b6:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056bb:	0f 85 08 01 00 00    	jne    c00057c9 <f_mkfs+0x3be>
c00056c1:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c00056c5:	01 df                	add    edi,ebx
c00056c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00056cb:	c1 e0 04             	shl    eax,0x4
c00056ce:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d2:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00056d6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00056da:	0f 82 32 01 00 00    	jb     c0005812 <f_mkfs+0x407>
c00056e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056e4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056e8:	29 f8                	sub    eax,edi
c00056ea:	89 c2                	mov    edx,eax
c00056ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056f0:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00056f5:	29 c2                	sub    edx,eax
c00056f7:	89 d0                	mov    eax,edx
c00056f9:	31 d2                	xor    edx,edx
c00056fb:	f7 74 24 04          	div    DWORD PTR [esp+0x4]
c00056ff:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005704:	89 c3                	mov    ebx,eax
c0005706:	0f 85 dc fe ff ff    	jne    c00055e8 <f_mkfs+0x1dd>
c000570c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005711:	0f 87 0a 01 00 00    	ja     c0005821 <f_mkfs+0x416>
c0005717:	85 c9                	test   ecx,ecx
c0005719:	0f 85 f3 00 00 00    	jne    c0005812 <f_mkfs+0x407>
c000571f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0005724:	0f 86 e8 00 00 00    	jbe    c0005812 <f_mkfs+0x407>
c000572a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000572e:	d1 e9                	shr    ecx,1
c0005730:	85 c9                	test   ecx,ecx
c0005732:	89 cb                	mov    ebx,ecx
c0005734:	75 25                	jne    c000575b <f_mkfs+0x350>
c0005736:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000573a:	b8 10 f2 01 c0       	mov    eax,0xc001f210
c000573f:	b9 01 00 00 00       	mov    ecx,0x1
c0005744:	c1 eb 11             	shr    ebx,0x11
c0005747:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000574a:	85 d2                	test   edx,edx
c000574c:	74 0b                	je     c0005759 <f_mkfs+0x34e>
c000574e:	83 c0 02             	add    eax,0x2
c0005751:	39 da                	cmp    edx,ebx
c0005753:	77 04                	ja     c0005759 <f_mkfs+0x34e>
c0005755:	01 c9                	add    ecx,ecx
c0005757:	eb ee                	jmp    c0005747 <f_mkfs+0x33c>
c0005759:	31 db                	xor    ebx,ebx
c000575b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000575f:	31 d2                	xor    edx,edx
c0005761:	f7 f1                	div    ecx
c0005763:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000576a:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576f:	c1 ea 09             	shr    edx,0x9
c0005772:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005777:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000577b:	0f 87 91 00 00 00    	ja     c0005812 <f_mkfs+0x407>
c0005781:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005785:	bf 20 00 00 00       	mov    edi,0x20
c000578a:	89 d9                	mov    ecx,ebx
c000578c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005794:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c0005799:	e9 dc fe ff ff       	jmp    c000567a <f_mkfs+0x26f>
c000579e:	83 c0 02             	add    eax,0x2
c00057a1:	39 da                	cmp    edx,ebx
c00057a3:	0f 87 93 fe ff ff    	ja     c000563c <f_mkfs+0x231>
c00057a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00057ad:	01 54 24 04          	add    DWORD PTR [esp+0x4],edx
c00057b1:	e9 7b fe ff ff       	jmp    c0005631 <f_mkfs+0x226>
c00057b6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00057bb:	8d 04 40             	lea    eax,[eax+eax*2]
c00057be:	40                   	inc    eax
c00057bf:	d1 e8                	shr    eax,1
c00057c1:	83 c0 03             	add    eax,0x3
c00057c4:	e9 92 fe ff ff       	jmp    c000565b <f_mkfs+0x250>
c00057c9:	31 d2                	xor    edx,edx
c00057cb:	89 d8                	mov    eax,ebx
c00057cd:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00057d1:	85 d2                	test   edx,edx
c00057d3:	74 06                	je     c00057db <f_mkfs+0x3d0>
c00057d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00057d9:	4b                   	dec    ebx
c00057da:	47                   	inc    edi
c00057db:	89 d8                	mov    eax,ebx
c00057dd:	31 d2                	xor    edx,edx
c00057df:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00057e3:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00057e7:	e9 db fe ff ff       	jmp    c00056c7 <f_mkfs+0x2bc>
c00057ec:	3d f5 0f 00 00       	cmp    eax,0xff5
c00057f1:	77 2e                	ja     c0005821 <f_mkfs+0x416>
c00057f3:	85 c9                	test   ecx,ecx
c00057f5:	75 1b                	jne    c0005812 <f_mkfs+0x407>
c00057f7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00057fb:	01 c9                	add    ecx,ecx
c00057fd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005803:	0f 86 0c fe ff ff    	jbe    c0005615 <f_mkfs+0x20a>
c0005809:	eb 07                	jmp    c0005812 <f_mkfs+0x407>
c000580b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005810:	76 0a                	jbe    c000581c <f_mkfs+0x411>
c0005812:	bb 0e 00 00 00       	mov    ebx,0xe
c0005817:	e9 98 03 00 00       	jmp    c0005bb4 <f_mkfs+0x7a9>
c000581c:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005821:	31 d2                	xor    edx,edx
c0005823:	b9 00 02 00 00       	mov    ecx,0x200
c0005828:	89 f0                	mov    eax,esi
c000582a:	e8 db c6 ff ff       	call   c0001f0a <mem_set>
c000582f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005834:	ba b2 f1 01 c0       	mov    edx,0xc001f1b2
c0005839:	89 f0                	mov    eax,esi
c000583b:	e8 b5 c6 ff ff       	call   c0001ef5 <mem_cpy>
c0005840:	8d 46 0b             	lea    eax,[esi+0xb]
c0005843:	ba 00 02 00 00       	mov    edx,0x200
c0005848:	e8 a1 c6 ff ff       	call   c0001eee <st_word>
c000584d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0005851:	0f b7 d7             	movzx  edx,di
c0005854:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c0005857:	8d 46 0e             	lea    eax,[esi+0xe]
c000585a:	e8 8f c6 ff ff       	call   c0001eee <st_word>
c000585f:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0005863:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005868:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c000586b:	b8 00 00 00 00       	mov    eax,0x0
c0005870:	0f 45 44 24 0c       	cmovne eax,DWORD PTR [esp+0xc]
c0005875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005879:	8d 46 11             	lea    eax,[esi+0x11]
c000587c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005880:	e8 69 c6 ff ff       	call   c0001eee <st_word>
c0005885:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005889:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000588f:	77 0a                	ja     c000589b <f_mkfs+0x490>
c0005891:	8d 46 13             	lea    eax,[esi+0x13]
c0005894:	e8 55 c6 ff ff       	call   c0001eee <st_word>
c0005899:	eb 08                	jmp    c00058a3 <f_mkfs+0x498>
c000589b:	8d 46 20             	lea    eax,[esi+0x20]
c000589e:	e8 4f c6 ff ff       	call   c0001ef2 <st_dword>
c00058a3:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00058a7:	8d 46 18             	lea    eax,[esi+0x18]
c00058aa:	ba 3f 00 00 00       	mov    edx,0x3f
c00058af:	e8 3a c6 ff ff       	call   c0001eee <st_word>
c00058b4:	8d 46 1a             	lea    eax,[esi+0x1a]
c00058b7:	ba ff 00 00 00       	mov    edx,0xff
c00058bc:	e8 2d c6 ff ff       	call   c0001eee <st_word>
c00058c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058c5:	8d 46 1c             	lea    eax,[esi+0x1c]
c00058c8:	e8 25 c6 ff ff       	call   c0001ef2 <st_dword>
c00058cd:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058d2:	75 57                	jne    c000592b <f_mkfs+0x520>
c00058d4:	8d 46 43             	lea    eax,[esi+0x43]
c00058d7:	ba 00 00 21 50       	mov    edx,0x50210000
c00058dc:	e8 11 c6 ff ff       	call   c0001ef2 <st_dword>
c00058e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00058e5:	8d 46 24             	lea    eax,[esi+0x24]
c00058e8:	e8 05 c6 ff ff       	call   c0001ef2 <st_dword>
c00058ed:	8d 46 2c             	lea    eax,[esi+0x2c]
c00058f0:	ba 02 00 00 00       	mov    edx,0x2
c00058f5:	e8 f8 c5 ff ff       	call   c0001ef2 <st_dword>
c00058fa:	8d 46 30             	lea    eax,[esi+0x30]
c00058fd:	ba 01 00 00 00       	mov    edx,0x1
c0005902:	e8 e7 c5 ff ff       	call   c0001eee <st_word>
c0005907:	8d 46 32             	lea    eax,[esi+0x32]
c000590a:	ba 06 00 00 00       	mov    edx,0x6
c000590f:	e8 da c5 ff ff       	call   c0001eee <st_word>
c0005914:	8d 46 47             	lea    eax,[esi+0x47]
c0005917:	b9 13 00 00 00       	mov    ecx,0x13
c000591c:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005920:	ba be f1 01 c0       	mov    edx,0xc001f1be
c0005925:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005929:	eb 2f                	jmp    c000595a <f_mkfs+0x54f>
c000592b:	8d 46 27             	lea    eax,[esi+0x27]
c000592e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005933:	e8 ba c5 ff ff       	call   c0001ef2 <st_dword>
c0005938:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000593d:	8d 46 16             	lea    eax,[esi+0x16]
c0005940:	e8 a9 c5 ff ff       	call   c0001eee <st_word>
c0005945:	8d 46 2b             	lea    eax,[esi+0x2b]
c0005948:	b9 13 00 00 00       	mov    ecx,0x13
c000594d:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005951:	ba d2 f1 01 c0       	mov    edx,0xc001f1d2
c0005956:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c000595a:	e8 96 c5 ff ff       	call   c0001ef5 <mem_cpy>
c000595f:	8d be fe 01 00 00    	lea    edi,[esi+0x1fe]
c0005965:	ba 55 aa 00 00       	mov    edx,0xaa55
c000596a:	89 f8                	mov    eax,edi
c000596c:	e8 7d c5 ff ff       	call   c0001eee <st_word>
c0005971:	6a 01                	push   0x1
c0005973:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005977:	56                   	push   esi
c0005978:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000597c:	e8 13 c5 ff ff       	call   c0001e94 <disk_write>
c0005981:	83 c4 10             	add    esp,0x10
c0005984:	85 c0                	test   eax,eax
c0005986:	0f 85 11 02 00 00    	jne    c0005b9d <f_mkfs+0x792>
c000598c:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005991:	0f 85 94 00 00 00    	jne    c0005a2b <f_mkfs+0x620>
c0005997:	6a 01                	push   0x1
c0005999:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599d:	83 c0 06             	add    eax,0x6
c00059a0:	50                   	push   eax
c00059a1:	56                   	push   esi
c00059a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00059a6:	e8 e9 c4 ff ff       	call   c0001e94 <disk_write>
c00059ab:	b9 00 02 00 00       	mov    ecx,0x200
c00059b0:	31 d2                	xor    edx,edx
c00059b2:	89 f0                	mov    eax,esi
c00059b4:	e8 51 c5 ff ff       	call   c0001f0a <mem_set>
c00059b9:	ba 52 52 61 41       	mov    edx,0x41615252
c00059be:	89 f0                	mov    eax,esi
c00059c0:	e8 2d c5 ff ff       	call   c0001ef2 <st_dword>
c00059c5:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c00059cb:	ba 72 72 41 61       	mov    edx,0x61417272
c00059d0:	e8 1d c5 ff ff       	call   c0001ef2 <st_dword>
c00059d5:	8d 53 ff             	lea    edx,[ebx-0x1]
c00059d8:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c00059de:	e8 0f c5 ff ff       	call   c0001ef2 <st_dword>
c00059e3:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c00059e9:	ba 02 00 00 00       	mov    edx,0x2
c00059ee:	e8 ff c4 ff ff       	call   c0001ef2 <st_dword>
c00059f3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f8:	89 f8                	mov    eax,edi
c00059fa:	e8 ef c4 ff ff       	call   c0001eee <st_word>
c00059ff:	6a 01                	push   0x1
c0005a01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a05:	83 c0 07             	add    eax,0x7
c0005a08:	50                   	push   eax
c0005a09:	56                   	push   esi
c0005a0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005a0e:	e8 81 c4 ff ff       	call   c0001e94 <disk_write>
c0005a13:	83 c4 20             	add    esp,0x20
c0005a16:	6a 01                	push   0x1
c0005a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1c:	40                   	inc    eax
c0005a1d:	50                   	push   eax
c0005a1e:	56                   	push   esi
c0005a1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a23:	e8 6c c4 ff ff       	call   c0001e94 <disk_write>
c0005a28:	83 c4 10             	add    esp,0x10
c0005a2b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005a2f:	31 d2                	xor    edx,edx
c0005a31:	89 f0                	mov    eax,esi
c0005a33:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0005a37:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3d:	e8 c8 c4 ff ff       	call   c0001f0a <mem_set>
c0005a42:	c1 ef 09             	shr    edi,0x9
c0005a45:	ba f8 ff ff 00       	mov    edx,0xfffff8
c0005a4a:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c0005a4f:	b8 f8 ff ff ff       	mov    eax,0xfffffff8
c0005a54:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005a5c:	0f 44 c2             	cmove  eax,edx
c0005a5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a63:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005a68:	75 21                	jne    c0005a8b <f_mkfs+0x680>
c0005a6a:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a6f:	89 f0                	mov    eax,esi
c0005a71:	e8 7c c4 ff ff       	call   c0001ef2 <st_dword>
c0005a76:	8d 46 04             	lea    eax,[esi+0x4]
c0005a79:	83 ca ff             	or     edx,0xffffffff
c0005a7c:	e8 71 c4 ff ff       	call   c0001ef2 <st_dword>
c0005a81:	8d 46 08             	lea    eax,[esi+0x8]
c0005a84:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005a89:	eb 06                	jmp    c0005a91 <f_mkfs+0x686>
c0005a8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a8f:	89 f0                	mov    eax,esi
c0005a91:	e8 5c c4 ff ff       	call   c0001ef2 <st_dword>
c0005a96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005a9a:	39 fb                	cmp    ebx,edi
c0005a9c:	89 f8                	mov    eax,edi
c0005a9e:	0f 46 c3             	cmovbe eax,ebx
c0005aa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005aa5:	50                   	push   eax
c0005aa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005aaa:	56                   	push   esi
c0005aab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005aaf:	e8 e0 c3 ff ff       	call   c0001e94 <disk_write>
c0005ab4:	83 c4 10             	add    esp,0x10
c0005ab7:	85 c0                	test   eax,eax
c0005ab9:	0f 85 de 00 00 00    	jne    c0005b9d <f_mkfs+0x792>
c0005abf:	b9 00 02 00 00       	mov    ecx,0x200
c0005ac4:	31 d2                	xor    edx,edx
c0005ac6:	89 f0                	mov    eax,esi
c0005ac8:	e8 3d c4 ff ff       	call   c0001f0a <mem_set>
c0005acd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ad1:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0005ad5:	29 cb                	sub    ebx,ecx
c0005ad7:	75 c1                	jne    c0005a9a <f_mkfs+0x68f>
c0005ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005add:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0005ae5:	40                   	inc    eax
c0005ae6:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005aea:	0f 87 73 ff ff ff    	ja     c0005a63 <f_mkfs+0x658>
c0005af0:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005af5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005af9:	0f 44 44 24 04       	cmove  eax,DWORD PTR [esp+0x4]
c0005afe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b02:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0005b06:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005b0a:	0f 47 df             	cmova  ebx,edi
c0005b0d:	53                   	push   ebx
c0005b0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005b12:	56                   	push   esi
c0005b13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b17:	e8 78 c3 ff ff       	call   c0001e94 <disk_write>
c0005b1c:	83 c4 10             	add    esp,0x10
c0005b1f:	85 c0                	test   eax,eax
c0005b21:	75 7a                	jne    c0005b9d <f_mkfs+0x792>
c0005b23:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005b27:	29 5c 24 04          	sub    DWORD PTR [esp+0x4],ebx
c0005b2b:	75 d5                	jne    c0005b02 <f_mkfs+0x6f7>
c0005b2d:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005b32:	b1 0c                	mov    cl,0xc
c0005b34:	74 1c                	je     c0005b52 <f_mkfs+0x747>
c0005b36:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c0005b3e:	b1 06                	mov    cl,0x6
c0005b40:	77 10                	ja     c0005b52 <f_mkfs+0x747>
c0005b42:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c0005b47:	0f 94 c1             	sete   cl
c0005b4a:	fe c9                	dec    cl
c0005b4c:	80 e1 fd             	and    cl,0xfd
c0005b4f:	80 c1 04             	add    cl,0x4
c0005b52:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c0005b57:	75 2d                	jne    c0005b86 <f_mkfs+0x77b>
c0005b59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005b5d:	83 ec 0c             	sub    esp,0xc
c0005b60:	0f b6 c9             	movzx  ecx,cl
c0005b63:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0005b6b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005b6f:	56                   	push   esi
c0005b70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b74:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005b78:	e8 53 d3 ff ff       	call   c0002ed0 <create_partition>
c0005b7d:	83 c4 10             	add    esp,0x10
c0005b80:	85 c0                	test   eax,eax
c0005b82:	89 c3                	mov    ebx,eax
c0005b84:	75 2e                	jne    c0005bb4 <f_mkfs+0x7a9>
c0005b86:	50                   	push   eax
c0005b87:	31 db                	xor    ebx,ebx
c0005b89:	6a 00                	push   0x0
c0005b8b:	6a 00                	push   0x0
c0005b8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b91:	e8 14 c3 ff ff       	call   c0001eaa <disk_ioctl>
c0005b96:	83 c4 10             	add    esp,0x10
c0005b99:	85 c0                	test   eax,eax
c0005b9b:	74 17                	je     c0005bb4 <f_mkfs+0x7a9>
c0005b9d:	85 ed                	test   ebp,ebp
c0005b9f:	75 0c                	jne    c0005bad <f_mkfs+0x7a2>
c0005ba1:	83 ec 0c             	sub    esp,0xc
c0005ba4:	56                   	push   esi
c0005ba5:	e8 6a 00 00 00       	call   c0005c14 <ff_memfree>
c0005baa:	83 c4 10             	add    esp,0x10
c0005bad:	bb 01 00 00 00       	mov    ebx,0x1
c0005bb2:	eb 42                	jmp    c0005bf6 <f_mkfs+0x7eb>
c0005bb4:	85 ed                	test   ebp,ebp
c0005bb6:	75 3e                	jne    c0005bf6 <f_mkfs+0x7eb>
c0005bb8:	83 ec 0c             	sub    esp,0xc
c0005bbb:	56                   	push   esi
c0005bbc:	e8 53 00 00 00       	call   c0005c14 <ff_memfree>
c0005bc1:	83 c4 10             	add    esp,0x10
c0005bc4:	eb 30                	jmp    c0005bf6 <f_mkfs+0x7eb>
c0005bc6:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005bcb:	0f 85 5f fb ff ff    	jne    c0005730 <f_mkfs+0x325>
c0005bd1:	e9 3c fc ff ff       	jmp    c0005812 <f_mkfs+0x407>
c0005bd6:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005bdb:	0f 85 55 fb ff ff    	jne    c0005736 <f_mkfs+0x32b>
c0005be1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0005be5:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005beb:	0f 86 4b fa ff ff    	jbe    c000563c <f_mkfs+0x231>
c0005bf1:	e9 1c fc ff ff       	jmp    c0005812 <f_mkfs+0x407>
c0005bf6:	83 c4 4c             	add    esp,0x4c
c0005bf9:	89 d8                	mov    eax,ebx
c0005bfb:	5b                   	pop    ebx
c0005bfc:	5e                   	pop    esi
c0005bfd:	5f                   	pop    edi
c0005bfe:	5d                   	pop    ebp
c0005bff:	c3                   	ret    

c0005c00 <ff_memalloc>:
c0005c00:	83 ec 1c             	sub    esp,0x1c
c0005c03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c0a:	e8 ed 1e 00 00       	call   c0007afc <malloc>
c0005c0f:	83 c4 1c             	add    esp,0x1c
c0005c12:	c3                   	ret    
c0005c13:	90                   	nop

c0005c14 <ff_memfree>:
c0005c14:	83 ec 1c             	sub    esp,0x1c
c0005c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0005c1e:	e8 ec 1e 00 00       	call   c0007b0f <free>
c0005c23:	90                   	nop
c0005c24:	83 c4 1c             	add    esp,0x1c
c0005c27:	c3                   	ret    

c0005c28 <ff_uni2oem>:
c0005c28:	83 ec 14             	sub    esp,0x14
c0005c2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c2f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c33:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c3a:	c7 44 24 0c 00 f6 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f600
c0005c42:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c47:	77 0b                	ja     c0005c54 <ff_uni2oem+0x2c>
c0005c49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c4d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c52:	eb 64                	jmp    c0005cb8 <ff_uni2oem+0x90>
c0005c54:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c5c:	77 5a                	ja     c0005cb8 <ff_uni2oem+0x90>
c0005c5e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c62:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c67:	75 4f                	jne    c0005cb8 <ff_uni2oem+0x90>
c0005c69:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c70:	eb 0e                	jmp    c0005c80 <ff_uni2oem+0x58>
c0005c72:	66 90                	xchg   ax,ax
c0005c74:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c79:	40                   	inc    eax
c0005c7a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7f:	90                   	nop
c0005c80:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c85:	83 f8 7f             	cmp    eax,0x7f
c0005c88:	77 1a                	ja     c0005ca4 <ff_uni2oem+0x7c>
c0005c8a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005c8f:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c96:	01 d0                	add    eax,edx
c0005c98:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005c9b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005c9f:	75 d3                	jne    c0005c74 <ff_uni2oem+0x4c>
c0005ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ca9:	83 e8 80             	sub    eax,0xffffff80
c0005cac:	0f b7 c0             	movzx  eax,ax
c0005caf:	0f b6 c0             	movzx  eax,al
c0005cb2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cb7:	90                   	nop
c0005cb8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbd:	83 c4 14             	add    esp,0x14
c0005cc0:	c3                   	ret    
c0005cc1:	8d 76 00             	lea    esi,[esi+0x0]

c0005cc4 <ff_oem2uni>:
c0005cc4:	83 ec 18             	sub    esp,0x18
c0005cc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ccf:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005cd4:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005cd8:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005cdf:	c7 44 24 10 00 f6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f600
c0005ce7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005cec:	83 f8 7f             	cmp    eax,0x7f
c0005cef:	77 0b                	ja     c0005cfc <ff_oem2uni+0x38>
c0005cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005cf5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005cfa:	eb 34                	jmp    c0005d30 <ff_oem2uni+0x6c>
c0005cfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d00:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d05:	75 29                	jne    c0005d30 <ff_oem2uni+0x6c>
c0005d07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d0c:	3d ff 00 00 00       	cmp    eax,0xff
c0005d11:	77 1d                	ja     c0005d30 <ff_oem2uni+0x6c>
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d1d:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d24:	01 d0                	add    eax,edx
c0005d26:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d29:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d2e:	66 90                	xchg   ax,ax
c0005d30:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0005d35:	83 c4 18             	add    esp,0x18
c0005d38:	c3                   	ret    
c0005d39:	8d 76 00             	lea    esi,[esi+0x0]

c0005d3c <ff_wtoupper>:
c0005d3c:	83 ec 10             	sub    esp,0x10
c0005d3f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d47:	0f 87 af 01 00 00    	ja     c0005efc <ff_wtoupper+0x1c0>
c0005d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d51:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d56:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d5b:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d60:	77 0a                	ja     c0005d6c <ff_wtoupper+0x30>
c0005d62:	b8 00 f4 01 c0       	mov    eax,0xc001f400
c0005d67:	eb 0b                	jmp    c0005d74 <ff_wtoupper+0x38>
c0005d69:	8d 76 00             	lea    esi,[esi+0x0]
c0005d6c:	b8 40 f3 01 c0       	mov    eax,0xc001f340
c0005d71:	8d 76 00             	lea    esi,[esi+0x0]
c0005d74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d7c:	8d 50 02             	lea    edx,[eax+0x2]
c0005d7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d83:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005d86:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005d8b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005d90:	85 c0                	test   eax,eax
c0005d92:	0f 84 58 01 00 00    	je     c0005ef0 <ff_wtoupper+0x1b4>
c0005d98:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005d9d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005da2:	39 c2                	cmp    edx,eax
c0005da4:	0f 82 46 01 00 00    	jb     c0005ef0 <ff_wtoupper+0x1b4>
c0005daa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dae:	8d 50 02             	lea    edx,[eax+0x2]
c0005db1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005db5:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005db8:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005dbd:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dc2:	c1 e8 08             	shr    eax,0x8
c0005dc5:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005dca:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dcf:	0f b6 c0             	movzx  eax,al
c0005dd2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005dd7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ddc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005de1:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005de6:	01 ca                	add    edx,ecx
c0005de8:	39 d0                	cmp    eax,edx
c0005dea:	0f 8d dc 00 00 00    	jge    c0005ecc <ff_wtoupper+0x190>
c0005df0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005df5:	83 f8 08             	cmp    eax,0x8
c0005df8:	0f 87 ee 00 00 00    	ja     c0005eec <ff_wtoupper+0x1b0>
c0005dfe:	8b 04 85 00 f3 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0d00]
c0005e05:	ff e0                	jmp    eax
c0005e07:	90                   	nop
c0005e08:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e0d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e12:	29 c2                	sub    edx,eax
c0005e14:	89 d0                	mov    eax,edx
c0005e16:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e1d:	01 d0                	add    eax,edx
c0005e1f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0005e22:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e27:	e9 9c 00 00 00       	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e2c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e35:	89 d1                	mov    ecx,edx
c0005e37:	29 c1                	sub    ecx,eax
c0005e39:	89 c8                	mov    eax,ecx
c0005e3b:	0f b7 c0             	movzx  eax,ax
c0005e3e:	83 e0 01             	and    eax,0x1
c0005e41:	0f b7 c0             	movzx  eax,ax
c0005e44:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e49:	89 d1                	mov    ecx,edx
c0005e4b:	29 c1                	sub    ecx,eax
c0005e4d:	89 c8                	mov    eax,ecx
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	eb 72                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e56:	66 90                	xchg   ax,ax
c0005e58:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e5d:	83 e8 10             	sub    eax,0x10
c0005e60:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e65:	eb 61                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e67:	90                   	nop
c0005e68:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e6d:	83 e8 20             	sub    eax,0x20
c0005e70:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e75:	eb 51                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e77:	90                   	nop
c0005e78:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e7d:	83 e8 30             	sub    eax,0x30
c0005e80:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e85:	eb 41                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e87:	90                   	nop
c0005e88:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e8d:	83 e8 1a             	sub    eax,0x1a
c0005e90:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e95:	eb 31                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005e97:	90                   	nop
c0005e98:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e9d:	83 c0 08             	add    eax,0x8
c0005ea0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea5:	eb 21                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005ea7:	90                   	nop
c0005ea8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ead:	83 e8 50             	sub    eax,0x50
c0005eb0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb5:	eb 11                	jmp    c0005ec8 <ff_wtoupper+0x18c>
c0005eb7:	90                   	nop
c0005eb8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ebd:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005ec2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec7:	90                   	nop
c0005ec8:	eb 22                	jmp    c0005eec <ff_wtoupper+0x1b0>
c0005eca:	66 90                	xchg   ax,ax
c0005ecc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ed1:	85 c0                	test   eax,eax
c0005ed3:	0f 85 9f fe ff ff    	jne    c0005d78 <ff_wtoupper+0x3c>
c0005ed9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ede:	01 c0                	add    eax,eax
c0005ee0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005ee4:	e9 8f fe ff ff       	jmp    c0005d78 <ff_wtoupper+0x3c>
c0005ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0005eec:	90                   	nop
c0005eed:	8d 76 00             	lea    esi,[esi+0x0]
c0005ef0:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ef5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0005efc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f00:	83 c4 10             	add    esp,0x10
c0005f03:	c3                   	ret    

c0005f04 <utf2ucs>:
c0005f04:	56                   	push   esi
c0005f05:	31 c9                	xor    ecx,ecx
c0005f07:	53                   	push   ebx
c0005f08:	89 c6                	mov    esi,eax
c0005f0a:	0f be 1c 0a          	movsx  ebx,BYTE PTR [edx+ecx*1]
c0005f0e:	88 5c 4e 01          	mov    BYTE PTR [esi+ecx*2+0x1],bl
c0005f12:	89 d8                	mov    eax,ebx
c0005f14:	c1 f8 08             	sar    eax,0x8
c0005f17:	88 04 4e             	mov    BYTE PTR [esi+ecx*2],al
c0005f1a:	41                   	inc    ecx
c0005f1b:	85 db                	test   ebx,ebx
c0005f1d:	75 eb                	jne    c0005f0a <utf2ucs+0x6>
c0005f1f:	5b                   	pop    ebx
c0005f20:	5e                   	pop    esi
c0005f21:	c3                   	ret    

c0005f22 <ucs2utfn>:
c0005f22:	57                   	push   edi
c0005f23:	83 e1 fe             	and    ecx,0xfffffffe
c0005f26:	56                   	push   esi
c0005f27:	89 d6                	mov    esi,edx
c0005f29:	53                   	push   ebx
c0005f2a:	8d 3c 0a             	lea    edi,[edx+ecx*1]
c0005f2d:	39 f7                	cmp    edi,esi
c0005f2f:	74 5a                	je     c0005f8b <ucs2utfn+0x69>
c0005f31:	0f be 1e             	movsx  ebx,BYTE PTR [esi]
c0005f34:	83 c6 02             	add    esi,0x2
c0005f37:	0f be 56 ff          	movsx  edx,BYTE PTR [esi-0x1]
c0005f3b:	c1 e3 08             	shl    ebx,0x8
c0005f3e:	09 d3                	or     ebx,edx
c0005f40:	83 fb 3b             	cmp    ebx,0x3b
c0005f43:	74 46                	je     c0005f8b <ucs2utfn+0x69>
c0005f45:	83 fb 7f             	cmp    ebx,0x7f
c0005f48:	88 da                	mov    dl,bl
c0005f4a:	7f 05                	jg     c0005f51 <ucs2utfn+0x2f>
c0005f4c:	88 18                	mov    BYTE PTR [eax],bl
c0005f4e:	40                   	inc    eax
c0005f4f:	eb dc                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f51:	80 e2 3f             	and    dl,0x3f
c0005f54:	89 d9                	mov    ecx,ebx
c0005f56:	c1 f9 06             	sar    ecx,0x6
c0005f59:	80 ca 80             	or     dl,0x80
c0005f5c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f62:	7f 0e                	jg     c0005f72 <ucs2utfn+0x50>
c0005f64:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0005f67:	80 c9 c0             	or     cl,0xc0
c0005f6a:	83 c0 02             	add    eax,0x2
c0005f6d:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005f70:	eb bb                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f72:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
c0005f75:	c1 fb 0c             	sar    ebx,0xc
c0005f78:	80 e1 3f             	and    cl,0x3f
c0005f7b:	80 cb e0             	or     bl,0xe0
c0005f7e:	80 c9 80             	or     cl,0x80
c0005f81:	88 18                	mov    BYTE PTR [eax],bl
c0005f83:	83 c0 03             	add    eax,0x3
c0005f86:	88 48 fe             	mov    BYTE PTR [eax-0x2],cl
c0005f89:	eb a2                	jmp    c0005f2d <ucs2utfn+0xb>
c0005f8b:	5b                   	pop    ebx
c0005f8c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f8f:	5e                   	pop    esi
c0005f90:	5f                   	pop    edi
c0005f91:	c3                   	ret    

c0005f92 <isjoliet>:
c0005f92:	31 d2                	xor    edx,edx
c0005f94:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005f97:	75 22                	jne    c0005fbb <isjoliet+0x29>
c0005f99:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005f9d:	75 1c                	jne    c0005fbb <isjoliet+0x29>
c0005f9f:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005fa2:	ba 02 00 00 00       	mov    edx,0x2
c0005fa7:	3c 43                	cmp    al,0x43
c0005fa9:	74 10                	je     c0005fbb <isjoliet+0x29>
c0005fab:	3c 45                	cmp    al,0x45
c0005fad:	ba 03 00 00 00       	mov    edx,0x3
c0005fb2:	74 07                	je     c0005fbb <isjoliet+0x29>
c0005fb4:	31 d2                	xor    edx,edx
c0005fb6:	3c 40                	cmp    al,0x40
c0005fb8:	0f 94 c2             	sete   dl
c0005fbb:	89 d0                	mov    eax,edx
c0005fbd:	c3                   	ret    

c0005fbe <htohl_32>:
c0005fbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0005fc0:	c3                   	ret    

c0005fc1 <iso_733>:
c0005fc1:	eb fb                	jmp    c0005fbe <htohl_32>

c0005fc3 <bgrad_cache>:
c0005fc3:	83 fa 0e             	cmp    edx,0xe
c0005fc6:	77 16                	ja     c0005fde <bgrad_cache+0x1b>
c0005fc8:	53                   	push   ebx
c0005fc9:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005fcc:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005fd0:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005fd3:	42                   	inc    edx
c0005fd4:	83 fa 0f             	cmp    edx,0xf
c0005fd7:	75 f3                	jne    c0005fcc <bgrad_cache+0x9>
c0005fd9:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005fdc:	5b                   	pop    ebx
c0005fdd:	c3                   	ret    
c0005fde:	c3                   	ret    

c0005fdf <ucscompare>:
c0005fdf:	55                   	push   ebp
c0005fe0:	57                   	push   edi
c0005fe1:	89 c7                	mov    edi,eax
c0005fe3:	56                   	push   esi
c0005fe4:	89 d6                	mov    esi,edx
c0005fe6:	53                   	push   ebx
c0005fe7:	31 d2                	xor    edx,edx
c0005fe9:	83 ec 1c             	sub    esp,0x1c
c0005fec:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005ff0:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005ff5:	c1 e3 08             	shl    ebx,0x8
c0005ff8:	09 c3                	or     ebx,eax
c0005ffa:	39 ca                	cmp    edx,ecx
c0005ffc:	7d 42                	jge    c0006040 <ucscompare+0x61>
c0005ffe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006002:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006006:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000600a:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000600f:	c1 e0 08             	shl    eax,0x8
c0006012:	09 e8                	or     eax,ebp
c0006014:	83 f8 3b             	cmp    eax,0x3b
c0006017:	74 27                	je     c0006040 <ucscompare+0x61>
c0006019:	83 ec 0c             	sub    esp,0xc
c000601c:	50                   	push   eax
c000601d:	e8 1e aa ff ff       	call   c0000a40 <tolower>
c0006022:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006025:	89 c5                	mov    ebp,eax
c0006027:	e8 14 aa ff ff       	call   c0000a40 <tolower>
c000602c:	83 c4 10             	add    esp,0x10
c000602f:	39 c5                	cmp    ebp,eax
c0006031:	75 21                	jne    c0006054 <ucscompare+0x75>
c0006033:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006037:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000603b:	83 c2 02             	add    edx,0x2
c000603e:	eb ac                	jmp    c0005fec <ucscompare+0xd>
c0006040:	83 fb 2f             	cmp    ebx,0x2f
c0006043:	0f 95 c0             	setne  al
c0006046:	85 db                	test   ebx,ebx
c0006048:	0f 95 c2             	setne  dl
c000604b:	20 d0                	and    al,dl
c000604d:	0f b6 c0             	movzx  eax,al
c0006050:	f7 d8                	neg    eax
c0006052:	eb 03                	jmp    c0006057 <ucscompare+0x78>
c0006054:	83 c8 ff             	or     eax,0xffffffff
c0006057:	83 c4 1c             	add    esp,0x1c
c000605a:	5b                   	pop    ebx
c000605b:	5e                   	pop    esi
c000605c:	5f                   	pop    edi
c000605d:	5d                   	pop    ebp
c000605e:	c3                   	ret    

c000605f <fncompare>:
c000605f:	55                   	push   ebp
c0006060:	31 ed                	xor    ebp,ebp
c0006062:	57                   	push   edi
c0006063:	89 c7                	mov    edi,eax
c0006065:	56                   	push   esi
c0006066:	89 d6                	mov    esi,edx
c0006068:	53                   	push   ebx
c0006069:	89 cb                	mov    ebx,ecx
c000606b:	83 ec 1c             	sub    esp,0x1c
c000606e:	39 f5                	cmp    ebp,esi
c0006070:	7d 3f                	jge    c00060b1 <fncompare+0x52>
c0006072:	0f be 04 2f          	movsx  eax,BYTE PTR [edi+ebp*1]
c0006076:	3c 3b                	cmp    al,0x3b
c0006078:	74 37                	je     c00060b1 <fncompare+0x52>
c000607a:	3c 2e                	cmp    al,0x2e
c000607c:	75 0e                	jne    c000608c <fncompare+0x2d>
c000607e:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006081:	39 e9                	cmp    ecx,ebp
c0006083:	74 2c                	je     c00060b1 <fncompare+0x52>
c0006085:	80 7c 2f 01 3b       	cmp    BYTE PTR [edi+ebp*1+0x1],0x3b
c000608a:	74 25                	je     c00060b1 <fncompare+0x52>
c000608c:	83 ec 0c             	sub    esp,0xc
c000608f:	50                   	push   eax
c0006090:	e8 ab a9 ff ff       	call   c0000a40 <tolower>
c0006095:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0006099:	0f be 04 2b          	movsx  eax,BYTE PTR [ebx+ebp*1]
c000609d:	89 04 24             	mov    DWORD PTR [esp],eax
c00060a0:	e8 9b a9 ff ff       	call   c0000a40 <tolower>
c00060a5:	83 c4 10             	add    esp,0x10
c00060a8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00060ac:	75 1a                	jne    c00060c8 <fncompare+0x69>
c00060ae:	45                   	inc    ebp
c00060af:	eb bd                	jmp    c000606e <fncompare+0xf>
c00060b1:	8a 14 2b             	mov    dl,BYTE PTR [ebx+ebp*1]
c00060b4:	80 fa 2f             	cmp    dl,0x2f
c00060b7:	0f 95 c0             	setne  al
c00060ba:	84 d2                	test   dl,dl
c00060bc:	0f 95 c2             	setne  dl
c00060bf:	20 d0                	and    al,dl
c00060c1:	0f b6 c0             	movzx  eax,al
c00060c4:	f7 d8                	neg    eax
c00060c6:	eb 03                	jmp    c00060cb <fncompare+0x6c>
c00060c8:	83 c8 ff             	or     eax,0xffffffff
c00060cb:	83 c4 1c             	add    esp,0x1c
c00060ce:	5b                   	pop    ebx
c00060cf:	5e                   	pop    esi
c00060d0:	5f                   	pop    edi
c00060d1:	5d                   	pop    ebp
c00060d2:	c3                   	ret    

c00060d3 <bclear_cache>:
c00060d3:	83 ec 18             	sub    esp,0x18
c00060d6:	68 00 f7 01 c0       	push   0xc001f700
c00060db:	e8 f0 30 01 00       	call   c00191d0 <iso_kprintf>
c00060e0:	83 c4 10             	add    esp,0x10
c00060e3:	31 c0                	xor    eax,eax
c00060e5:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c00060ec:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c00060f2:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c00060f9:	40                   	inc    eax
c00060fa:	83 f8 10             	cmp    eax,0x10
c00060fd:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006103:	75 e0                	jne    c00060e5 <bclear_cache+0x12>
c0006105:	83 c4 0c             	add    esp,0xc
c0006108:	c3                   	ret    

c0006109 <bclear>:
c0006109:	eb c8                	jmp    c00060d3 <bclear_cache>

c000610b <iso_break_all>:
c000610b:	83 ec 18             	sub    esp,0x18
c000610e:	68 0e f7 01 c0       	push   0xc001f70e
c0006113:	e8 b8 30 01 00       	call   c00191d0 <iso_kprintf>
c0006118:	83 c4 10             	add    esp,0x10
c000611b:	31 c0                	xor    eax,eax
c000611d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006127:	05 94 00 00 00       	add    eax,0x94
c000612c:	3d 40 09 00 00       	cmp    eax,0x940
c0006131:	75 ea                	jne    c000611d <iso_break_all+0x12>
c0006133:	83 c4 0c             	add    esp,0xc
c0006136:	c3                   	ret    

c0006137 <isoReadDiscSector>:
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006141:	50                   	push   eax
c0006142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000614a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000614e:	e8 1d 30 01 00       	call   c0019170 <isoReadDiscSectorHelper>
c0006153:	83 c4 1c             	add    esp,0x1c
c0006156:	c3                   	ret    

c0006157 <bread_cache>:
c0006157:	55                   	push   ebp
c0006158:	57                   	push   edi
c0006159:	89 d7                	mov    edi,edx
c000615b:	56                   	push   esi
c000615c:	ba 0f 00 00 00       	mov    edx,0xf
c0006161:	53                   	push   ebx
c0006162:	89 c6                	mov    esi,eax
c0006164:	83 ec 0c             	sub    esp,0xc
c0006167:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000616a:	39 38                	cmp    DWORD PTR [eax],edi
c000616c:	74 3c                	je     c00061aa <bread_cache+0x53>
c000616e:	4a                   	dec    edx
c000616f:	83 fa ff             	cmp    edx,0xffffffff
c0006172:	75 f3                	jne    c0006167 <bread_cache+0x10>
c0006174:	31 db                	xor    ebx,ebx
c0006176:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0006179:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c000617c:	74 08                	je     c0006186 <bread_cache+0x2f>
c000617e:	43                   	inc    ebx
c000617f:	83 fb 10             	cmp    ebx,0x10
c0006182:	75 f2                	jne    c0006176 <bread_cache+0x1f>
c0006184:	31 db                	xor    ebx,ebx
c0006186:	50                   	push   eax
c0006187:	6a 01                	push   0x1
c0006189:	57                   	push   edi
c000618a:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c000618d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006190:	83 c0 04             	add    eax,0x4
c0006193:	50                   	push   eax
c0006194:	e8 9e ff ff ff       	call   c0006137 <isoReadDiscSector>
c0006199:	83 c4 10             	add    esp,0x10
c000619c:	83 c9 ff             	or     ecx,0xffffffff
c000619f:	85 c0                	test   eax,eax
c00061a1:	78 13                	js     c00061b6 <bread_cache+0x5f>
c00061a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061a6:	89 da                	mov    edx,ebx
c00061a8:	89 38                	mov    DWORD PTR [eax],edi
c00061aa:	89 f0                	mov    eax,esi
c00061ac:	e8 12 fe ff ff       	call   c0005fc3 <bgrad_cache>
c00061b1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061b6:	83 c4 0c             	add    esp,0xc
c00061b9:	89 c8                	mov    eax,ecx
c00061bb:	5b                   	pop    ebx
c00061bc:	5e                   	pop    esi
c00061bd:	5f                   	pop    edi
c00061be:	5d                   	pop    ebp
c00061bf:	c3                   	ret    

c00061c0 <biread>:
c00061c0:	89 c2                	mov    edx,eax
c00061c2:	b8 80 40 02 c0       	mov    eax,0xc0024080
c00061c7:	eb 8e                	jmp    c0006157 <bread_cache>

c00061c9 <bdread>:
c00061c9:	89 c2                	mov    edx,eax
c00061cb:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00061d0:	eb 85                	jmp    c0006157 <bread_cache>

c00061d2 <strnicmp>:
c00061d2:	55                   	push   ebp
c00061d3:	57                   	push   edi
c00061d4:	56                   	push   esi
c00061d5:	31 f6                	xor    esi,esi
c00061d7:	53                   	push   ebx
c00061d8:	83 ec 0c             	sub    esp,0xc
c00061db:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00061df:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c00061e3:	74 42                	je     c0006227 <strnicmp+0x55>
c00061e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00061e9:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c00061ed:	84 c0                	test   al,al
c00061ef:	74 36                	je     c0006227 <strnicmp+0x55>
c00061f1:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c00061f4:	84 d2                	test   dl,dl
c00061f6:	74 2f                	je     c0006227 <strnicmp+0x55>
c00061f8:	8d 6e 01             	lea    ebp,[esi+0x1]
c00061fb:	38 d0                	cmp    al,dl
c00061fd:	75 04                	jne    c0006203 <strnicmp+0x31>
c00061ff:	89 ee                	mov    esi,ebp
c0006201:	eb dc                	jmp    c00061df <strnicmp+0xd>
c0006203:	83 ec 0c             	sub    esp,0xc
c0006206:	50                   	push   eax
c0006207:	e8 34 a8 ff ff       	call   c0000a40 <tolower>
c000620c:	89 c7                	mov    edi,eax
c000620e:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006212:	89 ee                	mov    esi,ebp
c0006214:	89 04 24             	mov    DWORD PTR [esp],eax
c0006217:	e8 24 a8 ff ff       	call   c0000a40 <tolower>
c000621c:	83 c4 10             	add    esp,0x10
c000621f:	29 c7                	sub    edi,eax
c0006221:	89 f8                	mov    eax,edi
c0006223:	74 ba                	je     c00061df <strnicmp+0xd>
c0006225:	eb 02                	jmp    c0006229 <strnicmp+0x57>
c0006227:	31 c0                	xor    eax,eax
c0006229:	83 c4 0c             	add    esp,0xc
c000622c:	5b                   	pop    ebx
c000622d:	5e                   	pop    esi
c000622e:	5f                   	pop    edi
c000622f:	5d                   	pop    ebp
c0006230:	c3                   	ret    

c0006231 <find_object>:
c0006231:	55                   	push   ebp
c0006232:	89 c5                	mov    ebp,eax
c0006234:	57                   	push   edi
c0006235:	56                   	push   esi
c0006236:	53                   	push   ebx
c0006237:	89 d3                	mov    ebx,edx
c0006239:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000623f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006243:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000624a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006255:	74 0b                	je     c0006262 <find_object+0x31>
c0006257:	8d 44 24 20          	lea    eax,[esp+0x20]
c000625b:	89 ea                	mov    edx,ebp
c000625d:	e8 a2 fc ff ff       	call   c0005f04 <utf2ucs>
c0006262:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006265:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000626e:	7e 11                	jle    c0006281 <find_object+0x50>
c0006270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006274:	e8 47 ff ff ff       	call   c00061c0 <biread>
c0006279:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000627d:	85 c0                	test   eax,eax
c000627f:	79 07                	jns    c0006288 <find_object+0x57>
c0006281:	31 db                	xor    ebx,ebx
c0006283:	e9 4c 01 00 00       	jmp    c00063d4 <find_object+0x1a3>
c0006288:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006294:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006298:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c000629f:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062a3:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00062a5:	84 c9                	test   cl,cl
c00062a7:	75 0e                	jne    c00062b7 <find_object+0x86>
c00062a9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ad:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062b5:	eb b2                	jmp    c0006269 <find_object+0x38>
c00062b7:	8b 15 b4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb4
c00062bd:	0f b6 7b 20          	movzx  edi,BYTE PTR [ebx+0x20]
c00062c1:	85 d2                	test   edx,edx
c00062c3:	89 f8                	mov    eax,edi
c00062c5:	74 33                	je     c00062fa <find_object+0xc9>
c00062c7:	8d 43 21             	lea    eax,[ebx+0x21]
c00062ca:	89 f9                	mov    ecx,edi
c00062cc:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062d0:	e8 0a fd ff ff       	call   c0005fdf <ucscompare>
c00062d5:	85 c0                	test   eax,eax
c00062d7:	0f 84 c9 00 00 00    	je     c00063a6 <find_object+0x175>
c00062dd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00062e0:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c00062e4:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c00062ec:	7f bb                	jg     c00062a9 <find_object+0x78>
c00062ee:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00062f2:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00062f6:	7f 98                	jg     c0006290 <find_object+0x5f>
c00062f8:	eb af                	jmp    c00062a9 <find_object+0x78>
c00062fa:	0f b6 f1             	movzx  esi,cl
c00062fd:	29 fe                	sub    esi,edi
c00062ff:	24 01                	and    al,0x1
c0006301:	8d 7c 3b 21          	lea    edi,[ebx+edi*1+0x21]
c0006305:	74 05                	je     c000630c <find_object+0xdb>
c0006307:	83 ee 21             	sub    esi,0x21
c000630a:	eb 5b                	jmp    c0006367 <find_object+0x136>
c000630c:	47                   	inc    edi
c000630d:	83 ee 22             	sub    esi,0x22
c0006310:	eb 55                	jmp    c0006367 <find_object+0x136>
c0006312:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006315:	fe c8                	dec    al
c0006317:	3c 01                	cmp    al,0x1
c0006319:	77 51                	ja     c000636c <find_object+0x13b>
c000631b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000631f:	50                   	push   eax
c0006320:	6a 02                	push   0x2
c0006322:	68 1d f7 01 c0       	push   0xc001f71d
c0006327:	57                   	push   edi
c0006328:	e8 a3 a5 ff ff       	call   c00008d0 <strncmp>
c000632d:	83 c4 10             	add    esp,0x10
c0006330:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006334:	85 c0                	test   eax,eax
c0006336:	75 27                	jne    c000635f <find_object+0x12e>
c0006338:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000633c:	50                   	push   eax
c000633d:	8d 47 05             	lea    eax,[edi+0x5]
c0006340:	83 ea 05             	sub    edx,0x5
c0006343:	52                   	push   edx
c0006344:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006348:	50                   	push   eax
c0006349:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000634d:	50                   	push   eax
c000634e:	e8 fd a3 ff ff       	call   c0000750 <strncpy>
c0006353:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0006357:	c6 44 14 30 00       	mov    BYTE PTR [esp+edx*1+0x30],0x0
c000635c:	83 c4 10             	add    esp,0x10
c000635f:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006363:	29 c6                	sub    esi,eax
c0006365:	01 c7                	add    edi,eax
c0006367:	83 fe 03             	cmp    esi,0x3
c000636a:	7f a6                	jg     c0006312 <find_object+0xe1>
c000636c:	85 d2                	test   edx,edx
c000636e:	7e 40                	jle    c00063b0 <find_object+0x17f>
c0006370:	51                   	push   ecx
c0006371:	51                   	push   ecx
c0006372:	6a 2f                	push   0x2f
c0006374:	55                   	push   ebp
c0006375:	e8 16 a5 ff ff       	call   c0000890 <strchr>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	85 c0                	test   eax,eax
c000637f:	74 04                	je     c0006385 <find_object+0x154>
c0006381:	29 e8                	sub    eax,ebp
c0006383:	eb 0c                	jmp    c0006391 <find_object+0x160>
c0006385:	83 ec 0c             	sub    esp,0xc
c0006388:	55                   	push   ebp
c0006389:	e8 92 a2 ff ff       	call   c0000620 <strlen>
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	52                   	push   edx
c0006392:	50                   	push   eax
c0006393:	55                   	push   ebp
c0006394:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006398:	50                   	push   eax
c0006399:	e8 34 fe ff ff       	call   c00061d2 <strnicmp>
c000639e:	83 c4 10             	add    esp,0x10
c00063a1:	e9 2f ff ff ff       	jmp    c00062d5 <find_object+0xa4>
c00063a6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063aa:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063ae:	eb 1e                	jmp    c00063ce <find_object+0x19d>
c00063b0:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063b4:	8d 43 21             	lea    eax,[ebx+0x21]
c00063b7:	89 e9                	mov    ecx,ebp
c00063b9:	e8 a1 fc ff ff       	call   c000605f <fncompare>
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 17 ff ff ff    	jne    c00062dd <find_object+0xac>
c00063c6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063ca:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00063ce:	0f 85 09 ff ff ff    	jne    c00062dd <find_object+0xac>
c00063d4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00063da:	89 d8                	mov    eax,ebx
c00063dc:	5b                   	pop    ebx
c00063dd:	5e                   	pop    esi
c00063de:	5f                   	pop    edi
c00063df:	5d                   	pop    ebp
c00063e0:	c3                   	ret    

c00063e1 <find_object_path>:
c00063e1:	55                   	push   ebp
c00063e2:	57                   	push   edi
c00063e3:	89 d7                	mov    edi,edx
c00063e5:	56                   	push   esi
c00063e6:	89 c6                	mov    esi,eax
c00063e8:	53                   	push   ebx
c00063e9:	89 cb                	mov    ebx,ecx
c00063eb:	83 ec 0c             	sub    esp,0xc
c00063ee:	50                   	push   eax
c00063ef:	50                   	push   eax
c00063f0:	6a 2f                	push   0x2f
c00063f2:	56                   	push   esi
c00063f3:	e8 98 a4 ff ff       	call   c0000890 <strchr>
c00063f8:	83 c4 10             	add    esp,0x10
c00063fb:	85 c0                	test   eax,eax
c00063fd:	89 c5                	mov    ebp,eax
c00063ff:	74 3a                	je     c000643b <find_object_path+0x5a>
c0006401:	39 ee                	cmp    esi,ebp
c0006403:	74 31                	je     c0006436 <find_object_path+0x55>
c0006405:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006408:	e8 b4 fb ff ff       	call   c0005fc1 <iso_733>
c000640d:	89 c2                	mov    edx,eax
c000640f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006412:	e8 aa fb ff ff       	call   c0005fc1 <iso_733>
c0006417:	83 ec 0c             	sub    esp,0xc
c000641a:	52                   	push   edx
c000641b:	89 c1                	mov    ecx,eax
c000641d:	ba 01 00 00 00       	mov    edx,0x1
c0006422:	89 f0                	mov    eax,esi
c0006424:	e8 08 fe ff ff       	call   c0006231 <find_object>
c0006429:	83 c4 10             	add    esp,0x10
c000642c:	85 c0                	test   eax,eax
c000642e:	89 c3                	mov    ebx,eax
c0006430:	75 04                	jne    c0006436 <find_object_path+0x55>
c0006432:	31 db                	xor    ebx,ebx
c0006434:	eb 36                	jmp    c000646c <find_object_path+0x8b>
c0006436:	8d 75 01             	lea    esi,[ebp+0x1]
c0006439:	eb b3                	jmp    c00063ee <find_object_path+0xd>
c000643b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000643e:	74 28                	je     c0006468 <find_object_path+0x87>
c0006440:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006443:	e8 79 fb ff ff       	call   c0005fc1 <iso_733>
c0006448:	89 c2                	mov    edx,eax
c000644a:	8d 43 02             	lea    eax,[ebx+0x2]
c000644d:	e8 6f fb ff ff       	call   c0005fc1 <iso_733>
c0006452:	83 ec 0c             	sub    esp,0xc
c0006455:	52                   	push   edx
c0006456:	89 c1                	mov    ecx,eax
c0006458:	89 fa                	mov    edx,edi
c000645a:	89 f0                	mov    eax,esi
c000645c:	e8 d0 fd ff ff       	call   c0006231 <find_object>
c0006461:	83 c4 10             	add    esp,0x10
c0006464:	89 c3                	mov    ebx,eax
c0006466:	eb 04                	jmp    c000646c <find_object_path+0x8b>
c0006468:	85 ff                	test   edi,edi
c000646a:	74 c6                	je     c0006432 <find_object_path+0x51>
c000646c:	83 c4 0c             	add    esp,0xc
c000646f:	89 d8                	mov    eax,ebx
c0006471:	5b                   	pop    ebx
c0006472:	5e                   	pop    esi
c0006473:	5f                   	pop    edi
c0006474:	5d                   	pop    ebp
c0006475:	c3                   	ret    

c0006476 <stricmp>:
c0006476:	57                   	push   edi
c0006477:	56                   	push   esi
c0006478:	31 f6                	xor    esi,esi
c000647a:	53                   	push   ebx
c000647b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c0006486:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000648a:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c000648e:	46                   	inc    esi
c000648f:	50                   	push   eax
c0006490:	e8 8b a5 ff ff       	call   c0000a20 <toupper>
c0006495:	89 04 24             	mov    DWORD PTR [esp],eax
c0006498:	e8 a3 a5 ff ff       	call   c0000a40 <tolower>
c000649d:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064a0:	89 c3                	mov    ebx,eax
c00064a2:	e8 79 a5 ff ff       	call   c0000a20 <toupper>
c00064a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00064aa:	e8 91 a5 ff ff       	call   c0000a40 <tolower>
c00064af:	83 c4 10             	add    esp,0x10
c00064b2:	39 c3                	cmp    ebx,eax
c00064b4:	75 04                	jne    c00064ba <stricmp+0x44>
c00064b6:	85 db                	test   ebx,ebx
c00064b8:	75 c1                	jne    c000647b <stricmp+0x5>
c00064ba:	29 c3                	sub    ebx,eax
c00064bc:	89 d8                	mov    eax,ebx
c00064be:	5b                   	pop    ebx
c00064bf:	5e                   	pop    esi
c00064c0:	5f                   	pop    edi
c00064c1:	c3                   	ret    

c00064c2 <iso_open>:
c00064c2:	57                   	push   edi
c00064c3:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c00064c8:	56                   	push   esi
c00064c9:	53                   	push   ebx
c00064ca:	31 db                	xor    ebx,ebx
c00064cc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00064d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064d5:	0f 95 c3             	setne  bl
c00064d8:	89 da                	mov    edx,ebx
c00064da:	e8 02 ff ff ff       	call   c00063e1 <find_object_path>
c00064df:	83 ca ff             	or     edx,0xffffffff
c00064e2:	85 c0                	test   eax,eax
c00064e4:	74 5e                	je     c0006544 <iso_open+0x82>
c00064e6:	89 c1                	mov    ecx,eax
c00064e8:	31 d2                	xor    edx,edx
c00064ea:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c00064f0:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c00064f7:	75 42                	jne    c000653b <iso_open+0x79>
c00064f9:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006503:	8d 41 02             	lea    eax,[ecx+0x2]
c0006506:	e8 b6 fa ff ff       	call   c0005fc1 <iso_733>
c000650b:	89 9f 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],ebx
c0006511:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000651b:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006521:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006524:	e8 98 fa ff ff       	call   c0005fc1 <iso_733>
c0006529:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006533:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006539:	eb 09                	jmp    c0006544 <iso_open+0x82>
c000653b:	42                   	inc    edx
c000653c:	83 fa 10             	cmp    edx,0x10
c000653f:	75 a9                	jne    c00064ea <iso_open+0x28>
c0006541:	83 ca ff             	or     edx,0xffffffff
c0006544:	5b                   	pop    ebx
c0006545:	89 d0                	mov    eax,edx
c0006547:	5e                   	pop    esi
c0006548:	5f                   	pop    edi
c0006549:	c3                   	ret    

c000654a <iso_close>:
c000654a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000654e:	83 f8 0f             	cmp    eax,0xf
c0006551:	7f 10                	jg     c0006563 <iso_close+0x19>
c0006553:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006559:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c0006563:	e9 6b fb ff ff       	jmp    c00060d3 <bclear_cache>

c0006568 <iso_read>:
c0006568:	55                   	push   ebp
c0006569:	57                   	push   edi
c000656a:	56                   	push   esi
c000656b:	53                   	push   ebx
c000656c:	83 ec 1c             	sub    esp,0x1c
c000656f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006573:	83 fd 0f             	cmp    ebp,0xf
c0006576:	7e 0a                	jle    c0006582 <iso_read+0x1a>
c0006578:	83 c8 ff             	or     eax,0xffffffff
c000657b:	89 c2                	mov    edx,eax
c000657d:	e9 f4 00 00 00       	jmp    c0006676 <iso_read+0x10e>
c0006582:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c0006588:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c000658f:	74 e7                	je     c0006578 <iso_read+0x10>
c0006591:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c0006597:	85 d2                	test   edx,edx
c0006599:	75 dd                	jne    c0006578 <iso_read+0x10>
c000659b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065a0:	0f 84 cd 00 00 00    	je     c0006673 <iso_read+0x10b>
c00065a6:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065ac:	8b 9d 4c 45 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdbab4]
c00065b2:	29 c3                	sub    ebx,eax
c00065b4:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00065b8:	89 d9                	mov    ecx,ebx
c00065ba:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c00065bf:	85 c9                	test   ecx,ecx
c00065c1:	0f 84 ac 00 00 00    	je     c0006673 <iso_read+0x10b>
c00065c7:	89 c6                	mov    esi,eax
c00065c9:	bb 00 08 00 00       	mov    ebx,0x800
c00065ce:	c1 e8 0b             	shr    eax,0xb
c00065d1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00065d7:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c00065dd:	29 f3                	sub    ebx,esi
c00065df:	81 fb 00 08 00 00    	cmp    ebx,0x800
c00065e5:	75 3f                	jne    c0006626 <iso_read+0xbe>
c00065e7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00065ed:	7e 37                	jle    c0006626 <iso_read+0xbe>
c00065ef:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c00065f5:	be 20 00 00 00       	mov    esi,0x20
c00065fa:	7f 05                	jg     c0006601 <iso_read+0x99>
c00065fc:	89 ce                	mov    esi,ecx
c00065fe:	c1 fe 0b             	sar    esi,0xb
c0006601:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006605:	89 f3                	mov    ebx,esi
c0006607:	52                   	push   edx
c0006608:	56                   	push   esi
c0006609:	50                   	push   eax
c000660a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000660e:	c1 e3 0b             	shl    ebx,0xb
c0006611:	e8 21 fb ff ff       	call   c0006137 <isoReadDiscSector>
c0006616:	83 c4 10             	add    esp,0x10
c0006619:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000661d:	85 c0                	test   eax,eax
c000661f:	7f 3d                	jg     c000665e <iso_read+0xf6>
c0006621:	e9 52 ff ff ff       	jmp    c0006578 <iso_read+0x10>
c0006626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000662a:	39 d9                	cmp    ecx,ebx
c000662c:	0f 4e d9             	cmovle ebx,ecx
c000662f:	e8 95 fb ff ff       	call   c00061c9 <bdread>
c0006634:	85 c0                	test   eax,eax
c0006636:	0f 88 3c ff ff ff    	js     c0006578 <iso_read+0x10>
c000663c:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006643:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c0006649:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000664d:	25 ff 07 00 00       	and    eax,0x7ff
c0006652:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006656:	89 d9                	mov    ecx,ebx
c0006658:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000665a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000665e:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006662:	01 da                	add    edx,ebx
c0006664:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c000666a:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c000666e:	e9 28 ff ff ff       	jmp    c000659b <iso_read+0x33>
c0006673:	89 d0                	mov    eax,edx
c0006675:	99                   	cdq    
c0006676:	83 c4 1c             	add    esp,0x1c
c0006679:	5b                   	pop    ebx
c000667a:	5e                   	pop    esi
c000667b:	5f                   	pop    edi
c000667c:	5d                   	pop    ebp
c000667d:	c3                   	ret    

c000667e <iso_seek>:
c000667e:	55                   	push   ebp
c000667f:	83 c8 ff             	or     eax,0xffffffff
c0006682:	57                   	push   edi
c0006683:	89 c2                	mov    edx,eax
c0006685:	56                   	push   esi
c0006686:	53                   	push   ebx
c0006687:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000668b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000668f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006693:	83 fe 0f             	cmp    esi,0xf
c0006696:	7f 65                	jg     c00066fd <iso_seek+0x7f>
c0006698:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c000669e:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066a5:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066ab:	74 50                	je     c00066fd <iso_seek+0x7f>
c00066ad:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00066b4:	75 47                	jne    c00066fd <iso_seek+0x7f>
c00066b6:	83 fb 01             	cmp    ebx,0x1
c00066b9:	74 0e                	je     c00066c9 <iso_seek+0x4b>
c00066bb:	83 fb 02             	cmp    ebx,0x2
c00066be:	74 0e                	je     c00066ce <iso_seek+0x50>
c00066c0:	85 db                	test   ebx,ebx
c00066c2:	75 39                	jne    c00066fd <iso_seek+0x7f>
c00066c4:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00066c7:	eb 0d                	jmp    c00066d6 <iso_seek+0x58>
c00066c9:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00066cc:	eb 08                	jmp    c00066d6 <iso_seek+0x58>
c00066ce:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00066d1:	01 f8                	add    eax,edi
c00066d3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00066d6:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00066dc:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c00066e2:	05 40 45 02 c0       	add    eax,0xc0024540
c00066e7:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c00066ea:	76 03                	jbe    c00066ef <iso_seek+0x71>
c00066ec:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00066ef:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c00066f5:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c00066fb:	31 d2                	xor    edx,edx
c00066fd:	5b                   	pop    ebx
c00066fe:	5e                   	pop    esi
c00066ff:	5f                   	pop    edi
c0006700:	5d                   	pop    ebp
c0006701:	c3                   	ret    

c0006702 <iso_tell>:
c0006702:	53                   	push   ebx
c0006703:	83 c8 ff             	or     eax,0xffffffff
c0006706:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000670a:	89 c2                	mov    edx,eax
c000670c:	83 f9 0f             	cmp    ecx,0xf
c000670f:	7f 20                	jg     c0006731 <iso_tell+0x2f>
c0006711:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006717:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000671e:	74 11                	je     c0006731 <iso_tell+0x2f>
c0006720:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006727:	75 08                	jne    c0006731 <iso_tell+0x2f>
c0006729:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000672f:	31 d2                	xor    edx,edx
c0006731:	5b                   	pop    ebx
c0006732:	c3                   	ret    

c0006733 <iso_total>:
c0006733:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006737:	83 c8 ff             	or     eax,0xffffffff
c000673a:	83 fa 0f             	cmp    edx,0xf
c000673d:	7f 1e                	jg     c000675d <iso_total+0x2a>
c000673f:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006745:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c000674c:	74 0f                	je     c000675d <iso_total+0x2a>
c000674e:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c0006755:	75 06                	jne    c000675d <iso_total+0x2a>
c0006757:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c000675d:	c3                   	ret    

c000675e <fn_postprocess>:
c000675e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006762:	89 d0                	mov    eax,edx
c0006764:	8a 08                	mov    cl,BYTE PTR [eax]
c0006766:	84 c9                	test   cl,cl
c0006768:	74 08                	je     c0006772 <fn_postprocess+0x14>
c000676a:	80 f9 3b             	cmp    cl,0x3b
c000676d:	74 03                	je     c0006772 <fn_postprocess+0x14>
c000676f:	40                   	inc    eax
c0006770:	eb f2                	jmp    c0006764 <fn_postprocess+0x6>
c0006772:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006775:	39 d0                	cmp    eax,edx
c0006777:	76 0a                	jbe    c0006783 <fn_postprocess+0x25>
c0006779:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c000677d:	75 04                	jne    c0006783 <fn_postprocess+0x25>
c000677f:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c0006783:	c3                   	ret    

c0006784 <iso_readdir>:
c0006784:	55                   	push   ebp
c0006785:	57                   	push   edi
c0006786:	56                   	push   esi
c0006787:	53                   	push   ebx
c0006788:	83 ec 1c             	sub    esp,0x1c
c000678b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000678f:	83 fb 0f             	cmp    ebx,0xf
c0006792:	7f 28                	jg     c00067bc <iso_readdir+0x38>
c0006794:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000679a:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067a1:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067a7:	74 13                	je     c00067bc <iso_readdir+0x38>
c00067a9:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067ad:	74 0d                	je     c00067bc <iso_readdir+0x38>
c00067af:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00067b6:	0f 84 b1 00 00 00    	je     c000686d <iso_readdir+0xe9>
c00067bc:	83 ec 0c             	sub    esp,0xc
c00067bf:	68 20 f7 01 c0       	push   0xc001f720
c00067c4:	e8 07 2a 01 00       	call   c00191d0 <iso_kprintf>
c00067c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00067cc:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00067d2:	e8 15 2a 01 00       	call   c00191ec <iso_kprintfd>
c00067d7:	c7 04 24 25 f7 01 c0 	mov    DWORD PTR [esp],0xc001f725
c00067de:	e8 ed 29 01 00       	call   c00191d0 <iso_kprintf>
c00067e3:	58                   	pop    eax
c00067e4:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c00067ea:	e8 fd 29 01 00       	call   c00191ec <iso_kprintfd>
c00067ef:	c7 04 24 2b f7 01 c0 	mov    DWORD PTR [esp],0xc001f72b
c00067f6:	e8 d5 29 01 00       	call   c00191d0 <iso_kprintf>
c00067fb:	58                   	pop    eax
c00067fc:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006802:	e8 e5 29 01 00       	call   c00191ec <iso_kprintfd>
c0006807:	c7 04 24 31 f7 01 c0 	mov    DWORD PTR [esp],0xc001f731
c000680e:	e8 bd 29 01 00       	call   c00191d0 <iso_kprintf>
c0006813:	58                   	pop    eax
c0006814:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c000681a:	e8 cd 29 01 00       	call   c00191ec <iso_kprintfd>
c000681f:	83 c4 10             	add    esp,0x10
c0006822:	eb 42                	jmp    c0006866 <iso_readdir+0xe2>
c0006824:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006827:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000682e:	89 d1                	mov    ecx,edx
c0006830:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006836:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000683a:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000683d:	75 35                	jne    c0006874 <iso_readdir+0xf0>
c000683f:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006845:	81 c2 00 08 00 00    	add    edx,0x800
c000684b:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000684e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006851:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006854:	73 1e                	jae    c0006874 <iso_readdir+0xf0>
c0006856:	8b 07                	mov    eax,DWORD PTR [edi]
c0006858:	c1 ea 0b             	shr    edx,0xb
c000685b:	01 d0                	add    eax,edx
c000685d:	e8 5e f9 ff ff       	call   c00061c0 <biread>
c0006862:	85 c0                	test   eax,eax
c0006864:	79 be                	jns    c0006824 <iso_readdir+0xa0>
c0006866:	31 c0                	xor    eax,eax
c0006868:	e9 6d 01 00 00       	jmp    c00069da <iso_readdir+0x256>
c000686d:	31 f6                	xor    esi,esi
c000686f:	83 c8 ff             	or     eax,0xffffffff
c0006872:	eb da                	jmp    c000684e <iso_readdir+0xca>
c0006874:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c000687a:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c0006880:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c0006886:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006889:	73 db                	jae    c0006866 <iso_readdir+0xe2>
c000688b:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c000688f:	75 34                	jne    c00068c5 <iso_readdir+0x141>
c0006891:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006895:	75 2e                	jne    c00068c5 <iso_readdir+0x141>
c0006897:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c000689a:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068a1:	01 f9                	add    ecx,edi
c00068a3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068a6:	89 c8                	mov    eax,ecx
c00068a8:	25 ff 07 00 00       	and    eax,0x7ff
c00068ad:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00068b2:	01 c8                	add    eax,ecx
c00068b4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00068b7:	25 ff 07 00 00       	and    eax,0x7ff
c00068bc:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c00068c0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068c3:	74 a1                	je     c0006866 <iso_readdir+0xe2>
c00068c5:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c00068cb:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c00068cf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c00068d6:	8d 56 21             	lea    edx,[esi+0x21]
c00068d9:	8d af 58 45 02 c0    	lea    ebp,[edi-0x3ffdbaa8]
c00068df:	74 0c                	je     c00068ed <iso_readdir+0x169>
c00068e1:	89 e8                	mov    eax,ebp
c00068e3:	e8 3a f6 ff ff       	call   c0005f22 <ucs2utfn>
c00068e8:	e9 b4 00 00 00       	jmp    c00069a1 <iso_readdir+0x21d>
c00068ed:	50                   	push   eax
c00068ee:	51                   	push   ecx
c00068ef:	52                   	push   edx
c00068f0:	55                   	push   ebp
c00068f1:	e8 5a 9e ff ff       	call   c0000750 <strncpy>
c00068f6:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c00068fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00068fd:	c6 84 07 58 45 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdbaa8],0x0
c0006905:	e8 54 fe ff ff       	call   c000675e <fn_postprocess>
c000690a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000690e:	83 c4 10             	add    esp,0x10
c0006911:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006914:	89 d1                	mov    ecx,edx
c0006916:	80 e1 01             	and    cl,0x1
c0006919:	29 d0                	sub    eax,edx
c000691b:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000691f:	84 c9                	test   cl,cl
c0006921:	74 05                	je     c0006928 <iso_readdir+0x1a4>
c0006923:	83 e8 21             	sub    eax,0x21
c0006926:	eb 04                	jmp    c000692c <iso_readdir+0x1a8>
c0006928:	42                   	inc    edx
c0006929:	83 e8 22             	sub    eax,0x22
c000692c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006930:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000693a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000693f:	7e 60                	jle    c00069a1 <iso_readdir+0x21d>
c0006941:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006944:	fe c8                	dec    al
c0006946:	3c 01                	cmp    al,0x1
c0006948:	77 57                	ja     c00069a1 <iso_readdir+0x21d>
c000694a:	51                   	push   ecx
c000694b:	6a 02                	push   0x2
c000694d:	68 1d f7 01 c0       	push   0xc001f71d
c0006952:	52                   	push   edx
c0006953:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006957:	e8 74 9f ff ff       	call   c00008d0 <strncmp>
c000695c:	83 c4 10             	add    esp,0x10
c000695f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006963:	85 c0                	test   eax,eax
c0006965:	75 2e                	jne    c0006995 <iso_readdir+0x211>
c0006967:	50                   	push   eax
c0006968:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000696c:	83 e8 05             	sub    eax,0x5
c000696f:	50                   	push   eax
c0006970:	8d 42 05             	lea    eax,[edx+0x5]
c0006973:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006977:	50                   	push   eax
c0006978:	55                   	push   ebp
c0006979:	e8 d2 9d ff ff       	call   c0000750 <strncpy>
c000697e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006982:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006986:	83 c4 10             	add    esp,0x10
c0006989:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000698d:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c0006995:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006999:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c000699d:	01 c2                	add    edx,eax
c000699f:	eb 99                	jmp    c000693a <iso_readdir+0x1b6>
c00069a1:	83 c8 ff             	or     eax,0xffffffff
c00069a4:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069a8:	89 c2                	mov    edx,eax
c00069aa:	75 0a                	jne    c00069b6 <iso_readdir+0x232>
c00069ac:	8d 46 0a             	lea    eax,[esi+0xa]
c00069af:	e8 0d f6 ff ff       	call   c0005fc1 <iso_733>
c00069b4:	31 d2                	xor    edx,edx
c00069b6:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069bc:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c00069c2:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c00069c8:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c00069ce:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c00069d1:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c00069d4:	8d 87 50 45 02 c0    	lea    eax,[edi-0x3ffdbab0]
c00069da:	83 c4 1c             	add    esp,0x1c
c00069dd:	5b                   	pop    ebx
c00069de:	5e                   	pop    esi
c00069df:	5f                   	pop    edi
c00069e0:	5d                   	pop    ebp
c00069e1:	c3                   	ret    

c00069e2 <iso_reset>:
c00069e2:	83 ec 18             	sub    esp,0x18
c00069e5:	68 3a f7 01 c0       	push   0xc001f73a
c00069ea:	e8 e1 27 01 00       	call   c00191d0 <iso_kprintf>
c00069ef:	e8 17 f7 ff ff       	call   c000610b <iso_break_all>
c00069f4:	e8 10 f7 ff ff       	call   c0006109 <bclear>
c00069f9:	31 c0                	xor    eax,eax
c00069fb:	83 c4 1c             	add    esp,0x1c
c00069fe:	c3                   	ret    

c00069ff <init_percd>:
c00069ff:	57                   	push   edi
c0006a00:	56                   	push   esi
c0006a01:	53                   	push   ebx
c0006a02:	bb 01 00 00 00       	mov    ebx,0x1
c0006a07:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a0b:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a10:	e8 cd ff ff ff       	call   c00069e2 <iso_reset>
c0006a15:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a1f:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a24:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a28:	e8 93 f7 ff ff       	call   c00061c0 <biread>
c0006a2d:	85 c0                	test   eax,eax
c0006a2f:	89 c6                	mov    esi,eax
c0006a31:	0f 88 ba 00 00 00    	js     c0006af1 <init_percd+0xf2>
c0006a37:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a3e:	52                   	push   edx
c0006a3f:	6a 06                	push   0x6
c0006a41:	68 45 f7 01 c0       	push   0xc001f745
c0006a46:	83 c0 04             	add    eax,0x4
c0006a49:	50                   	push   eax
c0006a4a:	e8 31 99 ff ff       	call   c0000380 <memcmp>
c0006a4f:	83 c4 10             	add    esp,0x10
c0006a52:	85 c0                	test   eax,eax
c0006a54:	74 08                	je     c0006a5e <init_percd+0x5f>
c0006a56:	43                   	inc    ebx
c0006a57:	83 fb 04             	cmp    ebx,0x4
c0006a5a:	75 c3                	jne    c0006a1f <init_percd+0x20>
c0006a5c:	eb 1a                	jmp    c0006a78 <init_percd+0x79>
c0006a5e:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a65:	83 c0 5c             	add    eax,0x5c
c0006a68:	e8 25 f5 ff ff       	call   c0005f92 <isjoliet>
c0006a6d:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006a72:	85 c0                	test   eax,eax
c0006a74:	74 e0                	je     c0006a56 <init_percd+0x57>
c0006a76:	eb 3e                	jmp    c0006ab6 <init_percd+0xb7>
c0006a78:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006a7f:	75 35                	jne    c0006ab6 <init_percd+0xb7>
c0006a81:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a86:	83 c0 10             	add    eax,0x10
c0006a89:	e8 32 f7 ff ff       	call   c00061c0 <biread>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	89 c6                	mov    esi,eax
c0006a92:	78 5f                	js     c0006af3 <init_percd+0xf4>
c0006a94:	50                   	push   eax
c0006a95:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006a9c:	83 cb ff             	or     ebx,0xffffffff
c0006a9f:	6a 06                	push   0x6
c0006aa1:	68 4c f7 01 c0       	push   0xc001f74c
c0006aa6:	83 c0 04             	add    eax,0x4
c0006aa9:	50                   	push   eax
c0006aaa:	e8 d1 98 ff ff       	call   c0000380 <memcmp>
c0006aaf:	83 c4 10             	add    esp,0x10
c0006ab2:	85 c0                	test   eax,eax
c0006ab4:	75 3d                	jne    c0006af3 <init_percd+0xf4>
c0006ab6:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006abd:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006ac2:	b9 22 00 00 00       	mov    ecx,0x22
c0006ac7:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006acd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006acf:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006ad4:	31 db                	xor    ebx,ebx
c0006ad6:	e8 e6 f4 ff ff       	call   c0005fc1 <iso_733>
c0006adb:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006ae0:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006ae5:	e8 d7 f4 ff ff       	call   c0005fc1 <iso_733>
c0006aea:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006aef:	eb 02                	jmp    c0006af3 <init_percd+0xf4>
c0006af1:	89 c3                	mov    ebx,eax
c0006af3:	89 d8                	mov    eax,ebx
c0006af5:	5b                   	pop    ebx
c0006af6:	5e                   	pop    esi
c0006af7:	5f                   	pop    edi
c0006af8:	c3                   	ret    

c0006af9 <iso_ioctl>:
c0006af9:	83 ec 18             	sub    esp,0x18
c0006afc:	68 53 f7 01 c0       	push   0xc001f753
c0006b01:	e8 ca 26 01 00       	call   c00191d0 <iso_kprintf>
c0006b06:	e8 d7 fe ff ff       	call   c00069e2 <iso_reset>
c0006b0b:	31 c0                	xor    eax,eax
c0006b0d:	83 c4 1c             	add    esp,0x1c
c0006b10:	c3                   	ret    

c0006b11 <fs_iso9660_init>:
c0006b11:	53                   	push   ebx
c0006b12:	31 db                	xor    ebx,ebx
c0006b14:	83 ec 14             	sub    esp,0x14
c0006b17:	68 5e f7 01 c0       	push   0xc001f75e
c0006b1c:	e8 af 26 01 00       	call   c00191d0 <iso_kprintf>
c0006b21:	83 c4 0c             	add    esp,0xc
c0006b24:	68 40 09 00 00       	push   0x940
c0006b29:	6a 00                	push   0x0
c0006b2b:	68 40 45 02 c0       	push   0xc0024540
c0006b30:	e8 4b 9a ff ff       	call   c0000580 <memset>
c0006b35:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b3f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b46:	e8 b1 0f 00 00       	call   c0007afc <malloc>
c0006b4b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b52:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b57:	e8 a0 0f 00 00       	call   c0007afc <malloc>
c0006b5c:	83 c4 10             	add    esp,0x10
c0006b5f:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006b64:	83 ec 0c             	sub    esp,0xc
c0006b67:	68 04 08 00 00       	push   0x804
c0006b6c:	e8 8b 0f 00 00       	call   c0007afc <malloc>
c0006b71:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006b78:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b7e:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006b85:	e8 72 0f 00 00       	call   c0007afc <malloc>
c0006b8a:	83 c4 10             	add    esp,0x10
c0006b8d:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006b94:	43                   	inc    ebx
c0006b95:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006b9b:	83 fb 10             	cmp    ebx,0x10
c0006b9e:	75 c4                	jne    c0006b64 <fs_iso9660_init+0x53>
c0006ba0:	83 c4 08             	add    esp,0x8
c0006ba3:	31 c0                	xor    eax,eax
c0006ba5:	5b                   	pop    ebx
c0006ba6:	c3                   	ret    

c0006ba7 <fs_iso9660_shutdown>:
c0006ba7:	53                   	push   ebx
c0006ba8:	31 db                	xor    ebx,ebx
c0006baa:	83 ec 08             	sub    esp,0x8
c0006bad:	83 ec 0c             	sub    esp,0xc
c0006bb0:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bb7:	e8 53 0f 00 00       	call   c0007b0f <free>
c0006bbc:	58                   	pop    eax
c0006bbd:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006bc4:	43                   	inc    ebx
c0006bc5:	e8 45 0f 00 00       	call   c0007b0f <free>
c0006bca:	83 c4 10             	add    esp,0x10
c0006bcd:	83 fb 10             	cmp    ebx,0x10
c0006bd0:	75 db                	jne    c0006bad <fs_iso9660_shutdown+0x6>
c0006bd2:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006bd7:	85 c0                	test   eax,eax
c0006bd9:	74 0c                	je     c0006be7 <fs_iso9660_shutdown+0x40>
c0006bdb:	83 ec 0c             	sub    esp,0xc
c0006bde:	50                   	push   eax
c0006bdf:	e8 2b 0f 00 00       	call   c0007b0f <free>
c0006be4:	83 c4 10             	add    esp,0x10
c0006be7:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006bec:	85 c0                	test   eax,eax
c0006bee:	74 0c                	je     c0006bfc <fs_iso9660_shutdown+0x55>
c0006bf0:	83 ec 0c             	sub    esp,0xc
c0006bf3:	50                   	push   eax
c0006bf4:	e8 16 0f 00 00       	call   c0007b0f <free>
c0006bf9:	83 c4 10             	add    esp,0x10
c0006bfc:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c06:	31 c0                	xor    eax,eax
c0006c08:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c12:	83 c4 08             	add    esp,0x8
c0006c15:	5b                   	pop    ebx
c0006c16:	c3                   	ret    
c0006c17:	90                   	nop

c0006c18 <Computer::close(int, int, void*)>:
c0006c18:	83 ec 1c             	sub    esp,0x1c
c0006c1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0006c1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006c23:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006c2b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0006c2f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0006c33:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c39:	89 04 24             	mov    DWORD PTR [esp],eax
c0006c3c:	e8 bd 53 00 00       	call   c000bffe <Device::closeAll()>
c0006c41:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c47:	b9 0f 27 00 00       	mov    ecx,0x270f
c0006c4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c50:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c52:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0006c56:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006c5a:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0006c5e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c62:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0006c66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c6a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c6d:	83 c4 1c             	add    esp,0x1c
c0006c70:	ff e0                	jmp    eax

c0006c72 <Krnl::firstTask()>:
c0006c72:	53                   	push   ebx
c0006c73:	83 ec 28             	sub    esp,0x28
c0006c76:	fb                   	sti    
c0006c77:	c7 04 24 6f f7 01 c0 	mov    DWORD PTR [esp],0xc001f76f
c0006c7e:	e8 2e 95 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c0006c83:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006c8a:	e8 6d 0e 00 00       	call   c0007afc <malloc>
c0006c8f:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006c95:	b9 01 00 00 00       	mov    ecx,0x1
c0006c9a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006c9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006ca2:	ba 88 f7 01 c0       	mov    edx,0xc001f788
c0006ca7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006cab:	89 c3                	mov    ebx,eax
c0006cad:	31 c0                	xor    eax,eax
c0006caf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006cb6:	e8 25 e0 00 00       	call   c0014ce0 <Process::Process(bool, char const*, Process*, char**)>
c0006cbb:	b8 ff 00 00 00       	mov    eax,0xff
c0006cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006cc4:	31 c0                	xor    eax,eax
c0006cc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006cca:	b8 31 75 00 c0       	mov    eax,0xc0007531
c0006ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006cd2:	31 db                	xor    ebx,ebx
c0006cd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cd8:	e8 1b e2 00 00       	call   c0014ef8 <Process::createThread(void (*)(void*), void*, int)>
c0006cdd:	b8 7a 00 00 00       	mov    eax,0x7a
c0006ce2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce6:	31 c0                	xor    eax,eax
c0006ce8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006cec:	b8 24 59 01 c0       	mov    eax,0xc0015924
c0006cf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006cf5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006cfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0006cfd:	e8 f6 e1 00 00       	call   c0014ef8 <Process::createThread(void (*)(void*), void*, int)>
c0006d02:	b2 01                	mov    dl,0x1
c0006d04:	88 15 bd 4e 02 c0    	mov    BYTE PTR ds:0xc0024ebd,dl
c0006d0a:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0f:	e8 cb 9c 00 00       	call   c00109df <KeInitRand()>
c0006d14:	c7 04 24 84 f8 01 c0 	mov    DWORD PTR [esp],0xc001f884
c0006d1b:	e8 91 94 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c0006d20:	e8 bc ef 00 00       	call   c0015ce1 <Vm::initialise8086()>
c0006d25:	e8 fd 40 00 00       	call   c000ae27 <Fs::initVFS()>
c0006d2a:	c7 04 24 95 f7 01 c0 	mov    DWORD PTR [esp],0xc001f795
c0006d31:	e8 7b 94 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c0006d36:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d3b:	31 c9                	xor    ecx,ecx
c0006d3d:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d43:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006d49:	31 c9                	xor    ecx,ecx
c0006d4b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006d4f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d53:	bb 3a 00 00 00       	mov    ebx,0x3a
c0006d58:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d5b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d5e:	c7 04 24 84 f8 01 c0 	mov    DWORD PTR [esp],0xc001f884
c0006d65:	e8 47 94 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c0006d6a:	e8 19 99 00 00       	call   c0010688 <Krnl::loadSystemEnv()>
c0006d6f:	e8 76 9b 00 00       	call   c00108ea <Krnl::setupPowerManager()>
c0006d74:	b8 af f7 01 c0       	mov    eax,0xc001f7af
c0006d79:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0006d7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006d81:	c7 04 24 b8 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7b8
c0006d88:	e8 33 c2 00 00       	call   c0012fc0 <Reg::readIntWithDefault(char*, char*, int)>
c0006d8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d90:	e8 8f 4b 00 00       	call   c000b924 <User::loadClockSettings(int)>
c0006d95:	c7 04 24 a8 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8a8
c0006d9c:	e8 10 94 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c0006da1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006da6:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006dac:	89 04 24             	mov    DWORD PTR [esp],eax
c0006daf:	e8 48 52 00 00       	call   c000bffc <Device::loadDriversForAll()>
c0006db4:	c7 04 24 c0 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7c0
c0006dbb:	e8 f1 93 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c0006dc0:	b8 01 00 00 00       	mov    eax,0x1
c0006dc5:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006dcf:	c7 04 24 d1 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7d1
c0006dd6:	e8 f3 d8 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c0006ddb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0006ddf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006de2:	e8 23 db 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c0006de7:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0006dee:	e8 39 e5 00 00       	call   c001532c <blockTask(TaskState)>
c0006df3:	eb f2                	jmp    c0006de7 <Krnl::firstTask()+0x175>
c0006df5:	90                   	nop

c0006df6 <Computer::Computer()>:
c0006df6:	83 ec 1c             	sub    esp,0x1c
c0006df9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dfd:	c7 44 24 04 ed f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f7ed
c0006e05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006e08:	e8 6b 52 00 00       	call   c000c078 <Device::Device(char const*)>
c0006e0d:	ba f4 f8 01 c0       	mov    edx,0xc001f8f4
c0006e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e16:	89 10                	mov    DWORD PTR [eax],edx
c0006e18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e1c:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e2a:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e38:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c0006e3f:	80 ca 04             	or     dl,0x4
c0006e42:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e4c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e53:	0f b6 d0             	movzx  edx,al
c0006e56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e5a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e65:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e6c:	0f b6 d0             	movzx  edx,al
c0006e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e73:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e7c:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0006e83:	88 c1                	mov    cl,al
c0006e85:	fe c1                	inc    cl
c0006e87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e8b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e91:	0f b6 d0             	movzx  edx,al
c0006e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e98:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0006e9d:	80 e1 3f             	and    cl,0x3f
c0006ea0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006ea4:	90                   	nop
c0006ea5:	83 c4 1c             	add    esp,0x1c
c0006ea8:	c3                   	ret    
c0006ea9:	90                   	nop

c0006eaa <Computer::setBootMessage(char const*)>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::detectFeatures()>:
c0006eac:	55                   	push   ebp
c0006ead:	57                   	push   edi
c0006eae:	56                   	push   esi
c0006eaf:	53                   	push   ebx
c0006eb0:	83 ec 3c             	sub    esp,0x3c
c0006eb3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0006eb7:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ec1:	e8 33 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ec6:	85 c0                	test   eax,eax
c0006ec8:	0f 95 c0             	setne  al
c0006ecb:	00 c0                	add    al,al
c0006ecd:	88 c2                	mov    dl,al
c0006ecf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006ed6:	24 fd                	and    al,0xfd
c0006ed8:	08 d0                	or     al,dl
c0006eda:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee0:	24 02                	and    al,0x2
c0006ee2:	75 48                	jne    c0006f2c <Computer::detectFeatures()+0x80>
c0006ee4:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006eeb:	74 07                	je     c0006ef4 <Computer::detectFeatures()+0x48>
c0006eed:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006ef4:	e8 0d 72 01 00       	call   c001e106 <x87Detect>
c0006ef9:	24 01                	and    al,0x1
c0006efb:	c0 e0 04             	shl    al,0x4
c0006efe:	88 c2                	mov    dl,al
c0006f00:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f07:	24 ef                	and    al,0xef
c0006f09:	08 d0                	or     al,dl
c0006f0b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f11:	88 c2                	mov    dl,al
c0006f13:	80 e2 10             	and    dl,0x10
c0006f16:	0f 85 34 01 00 00    	jne    c0007050 <Computer::detectFeatures()+0x1a4>
c0006f1c:	84 c0                	test   al,al
c0006f1e:	0f 88 4f 01 00 00    	js     c0007073 <Computer::detectFeatures()+0x1c7>
c0006f24:	83 c4 3c             	add    esp,0x3c
c0006f27:	5b                   	pop    ebx
c0006f28:	5e                   	pop    esi
c0006f29:	5f                   	pop    edi
c0006f2a:	5d                   	pop    ebp
c0006f2b:	c3                   	ret    
c0006f2c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0006f33:	e8 c6 87 00 00       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c0006f38:	24 01                	and    al,0x1
c0006f3a:	c0 e0 03             	shl    al,0x3
c0006f3d:	88 c2                	mov    dl,al
c0006f3f:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006f46:	24 f7                	and    al,0xf7
c0006f48:	08 d0                	or     al,dl
c0006f4a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f50:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f57:	e8 a2 87 00 00       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c0006f5c:	24 01                	and    al,0x1
c0006f5e:	88 c2                	mov    dl,al
c0006f60:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006f67:	24 fe                	and    al,0xfe
c0006f69:	08 d0                	or     al,dl
c0006f6b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f71:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f78:	e8 81 87 00 00       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c0006f7d:	c0 e0 07             	shl    al,0x7
c0006f80:	88 c2                	mov    dl,al
c0006f82:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0006f89:	24 7f                	and    al,0x7f
c0006f8b:	08 d0                	or     al,dl
c0006f8d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f93:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f9a:	e8 5f 87 00 00       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c0006f9f:	24 01                	and    al,0x1
c0006fa1:	c0 e0 05             	shl    al,0x5
c0006fa4:	88 c2                	mov    dl,al
c0006fa6:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fad:	24 df                	and    al,0xdf
c0006faf:	08 d0                	or     al,dl
c0006fb1:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fbb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc1:	0f 84 d1 00 00 00    	je     c0007098 <Computer::detectFeatures()+0x1ec>
c0006fc7:	24 fe                	and    al,0xfe
c0006fc9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcf:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c0006fd6:	88 c2                	mov    dl,al
c0006fd8:	80 e2 09             	and    dl,0x9
c0006fdb:	fe ca                	dec    dl
c0006fdd:	75 08                	jne    c0006fe7 <Computer::detectFeatures()+0x13b>
c0006fdf:	24 fe                	and    al,0xfe
c0006fe1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006feb:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0006fef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ff3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0006ff7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0006ffb:	8d 74 24 20          	lea    esi,[esp+0x20]
c0006fff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007003:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007007:	c7 04 24 00 00 00 80 	mov    DWORD PTR [esp],0x80000000
c000700e:	e8 67 86 00 00       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007013:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0007017:	81 7c 24 20 00 00 00 80 	cmp    DWORD PTR [esp+0x20],0x80000000
c000701f:	0f 86 bf fe ff ff    	jbe    c0006ee4 <Computer::detectFeatures()+0x38>
c0007025:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007029:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000702d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007031:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007035:	c7 04 24 01 00 00 80 	mov    DWORD PTR [esp],0x80000001
c000703c:	e8 39 86 00 00       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007041:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c000704b:	e9 94 fe ff ff       	jmp    c0006ee4 <Computer::detectFeatures()+0x38>
c0007050:	e8 6b 70 01 00       	call   c001e0c0 <absolutelyNoChanceInHell>
c0007055:	88 c2                	mov    dl,al
c0007057:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c000705e:	c0 e2 07             	shl    dl,0x7
c0007061:	24 7f                	and    al,0x7f
c0007063:	08 d0                	or     al,dl
c0007065:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000706b:	84 c0                	test   al,al
c000706d:	0f 89 b1 fe ff ff    	jns    c0006f24 <Computer::detectFeatures()+0x78>
c0007073:	e8 b8 6c 01 00       	call   c001dd30 <avxDetect>
c0007078:	24 01                	and    al,0x1
c000707a:	c0 e0 05             	shl    al,0x5
c000707d:	88 c2                	mov    dl,al
c000707f:	0f b6 83 6d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16d]
c0007086:	24 df                	and    al,0xdf
c0007088:	08 d0                	or     al,dl
c000708a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007090:	83 c4 3c             	add    esp,0x3c
c0007093:	5b                   	pop    ebx
c0007094:	5e                   	pop    esi
c0007095:	5f                   	pop    edi
c0007096:	5d                   	pop    ebp
c0007097:	c3                   	ret    
c0007098:	c7 04 24 00 02 00 00 	mov    DWORD PTR [esp],0x200
c000709f:	e8 5a 86 00 00       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c00070a4:	24 01                	and    al,0x1
c00070a6:	88 c2                	mov    dl,al
c00070a8:	0f b6 83 6c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x16c]
c00070af:	24 fe                	and    al,0xfe
c00070b1:	08 d0                	or     al,dl
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 11 ff ff ff       	jmp    c0006fcf <Computer::detectFeatures()+0x123>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 1c             	sub    esp,0x1c
c00070c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 1c             	add    esp,0x1c
c00070d9:	c3                   	ret    
c00070da:	c7 04 24 f6 f7 01 c0 	mov    DWORD PTR [esp],0xc001f7f6
c00070e1:	e8 3f 97 00 00       	call   c0010825 <KePanic(char const*)>
c00070e6:	eb e8                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e8:	83 ec 1c             	sub    esp,0x1c
c00070eb:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00070ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00070f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00070f7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00070fb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00070ff:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007106:	74 16                	je     c000711e <Computer::wrmsr(unsigned int, unsigned long long)+0x36>
c0007108:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000710c:	89 f0                	mov    eax,esi
c000710e:	89 fa                	mov    edx,edi
c0007110:	0f 30                	wrmsr  
c0007112:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007116:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000711a:	83 c4 1c             	add    esp,0x1c
c000711d:	c3                   	ret    
c000711e:	c7 04 24 fc f7 01 c0 	mov    DWORD PTR [esp],0xc001f7fc
c0007125:	e8 fb 96 00 00       	call   c0010825 <KePanic(char const*)>
c000712a:	eb dc                	jmp    c0007108 <Computer::wrmsr(unsigned int, unsigned long long)+0x20>

c000712c <Computer::shutdown()>:
c000712c:	83 ec 1c             	sub    esp,0x1c
c000712f:	31 c9                	xor    ecx,ecx
c0007131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007135:	8b 10                	mov    edx,DWORD PTR [eax]
c0007137:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000713b:	31 c9                	xor    ecx,ecx
c000713d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007141:	31 c9                	xor    ecx,ecx
c0007143:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007147:	89 04 24             	mov    DWORD PTR [esp],eax
c000714a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714d:	83 c4 1c             	add    esp,0x1c
c0007150:	c3                   	ret    
c0007151:	90                   	nop

c0007152 <Computer::restart()>:
c0007152:	83 ec 1c             	sub    esp,0x1c
c0007155:	31 c9                	xor    ecx,ecx
c0007157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000715b:	8b 10                	mov    edx,DWORD PTR [eax]
c000715d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007161:	31 c9                	xor    ecx,ecx
c0007163:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007167:	b9 01 00 00 00       	mov    ecx,0x1
c000716c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007170:	89 04 24             	mov    DWORD PTR [esp],eax
c0007173:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007176:	83 c4 1c             	add    esp,0x1c
c0007179:	c3                   	ret    

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 17 80 00 00       	jmp    c000f1a4 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
c0007199:	c3                   	ret    

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00071a3:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00071aa:	19 c0                	sbb    eax,eax
c00071ac:	24 80                	and    al,0x80
c00071ae:	08 d0                	or     al,dl
c00071b0:	e6 70                	out    0x70,al
c00071b2:	e4 71                	in     al,0x71
c00071b4:	c3                   	ret    
c00071b5:	90                   	nop

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071ba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00071bf:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c5:	b8 10 00 00 00       	mov    eax,0x10
c00071ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00071ce:	eb ca                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071d0 <Computer::open(int, int, void*)>:
c00071d0:	56                   	push   esi
c00071d1:	53                   	push   ebx
c00071d2:	83 ec 14             	sub    esp,0x14
c00071d5:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071dc:	c7 04 24 02 f8 01 c0 	mov    DWORD PTR [esp],0xc001f802
c00071e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00071e7:	0f 94 05 40 1c 02 c0 	sete   BYTE PTR ds:0xc0021c40
c00071ee:	e8 be 8f 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c00071f3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071fa:	e8 fd 08 00 00       	call   c0007afc <malloc>
c00071ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0007202:	89 c6                	mov    esi,eax
c0007204:	e8 3f 7b 00 00       	call   c000ed48 <ACPI::ACPI()>
c0007209:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007213:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007216:	e8 c5 4c 00 00       	call   c000bee0 <Device::addChild(Device*)>
c000721b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000721e:	e8 89 fc ff ff       	call   c0006eac <Computer::detectFeatures()>
c0007223:	b8 01 00 00 00       	mov    eax,0x1
c0007228:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000722c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000722f:	e8 82 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007234:	c7 04 24 1a f8 01 c0 	mov    DWORD PTR [esp],0xc001f81a
c000723b:	e8 71 8f 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c0007240:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007247:	e8 b0 08 00 00       	call   c0007afc <malloc>
c000724c:	89 04 24             	mov    DWORD PTR [esp],eax
c000724f:	89 c6                	mov    esi,eax
c0007251:	e8 60 85 00 00       	call   c000f7b6 <CPU::CPU()>
c0007256:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000725c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007260:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007263:	e8 78 4c 00 00       	call   c000bee0 <Device::addChild(Device*)>
c0007268:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000726e:	31 db                	xor    ebx,ebx
c0007270:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007274:	8b 10                	mov    edx,DWORD PTR [eax]
c0007276:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000727a:	31 c9                	xor    ecx,ecx
c000727c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007280:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0007284:	89 04 24             	mov    DWORD PTR [esp],eax
c0007287:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000728a:	c7 04 24 c8 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8c8
c0007291:	e8 1b 8f 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c0007296:	e8 6c fb 00 00       	call   c0016e07 <HalInitialiseCoprocessor()>
c000729b:	c7 04 24 34 f8 01 c0 	mov    DWORD PTR [esp],0xc001f834
c00072a2:	e8 0a 8f 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c00072a7:	c7 04 24 72 6c 00 c0 	mov    DWORD PTR [esp],0xc0006c72
c00072ae:	e8 75 dd 00 00       	call   c0015028 <setupMultitasking(void (*)())>
c00072b3:	83 c4 14             	add    esp,0x14
c00072b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00072bb:	5b                   	pop    ebx
c00072bc:	5e                   	pop    esi
c00072bd:	c3                   	ret    

c00072be <Computer::disableNMI()>:
c00072be:	83 ec 08             	sub    esp,0x8
c00072c1:	31 c0                	xor    eax,eax
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00072ce:	e8 e3 fe ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072d3:	83 c4 08             	add    esp,0x8
c00072d6:	c3                   	ret    
c00072d7:	90                   	nop

c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072dc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00072e1:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00072e8:	19 c0                	sbb    eax,eax
c00072ea:	24 80                	and    al,0x80
c00072ec:	08 d0                	or     al,dl
c00072ee:	e6 70                	out    0x70,al
c00072f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072f4:	e6 71                	out    0x71,al
c00072f6:	c3                   	ret    
c00072f7:	90                   	nop

c00072f8 <Computer::handleNMI()>:
c00072f8:	83 ec 2c             	sub    esp,0x2c
c00072fb:	e4 92                	in     al,0x92
c00072fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0007301:	e4 61                	in     al,0x61
c0007303:	c7 04 24 4f f8 01 c0 	mov    DWORD PTR [esp],0xc001f84f
c000730a:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000730e:	e8 63 37 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007313:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0007318:	24 10                	and    al,0x10
c000731a:	75 14                	jne    c0007330 <Computer::handleNMI()+0x38>
c000731c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007321:	24 40                	and    al,0x40
c0007323:	75 20                	jne    c0007345 <Computer::handleNMI()+0x4d>
c0007325:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000732a:	78 2c                	js     c0007358 <Computer::handleNMI()+0x60>
c000732c:	83 c4 2c             	add    esp,0x2c
c000732f:	c3                   	ret    
c0007330:	c7 04 24 60 f8 01 c0 	mov    DWORD PTR [esp],0xc001f860
c0007337:	e8 e9 94 00 00       	call   c0010825 <KePanic(char const*)>
c000733c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0007341:	24 40                	and    al,0x40
c0007343:	74 e0                	je     c0007325 <Computer::handleNMI()+0x2d>
c0007345:	c7 04 24 6d f8 01 c0 	mov    DWORD PTR [esp],0xc001f86d
c000734c:	e8 d4 94 00 00       	call   c0010825 <KePanic(char const*)>
c0007351:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0007356:	79 d4                	jns    c000732c <Computer::handleNMI()+0x34>
c0007358:	b8 77 f8 01 c0       	mov    eax,0xc001f877
c000735d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007361:	83 c4 2c             	add    esp,0x2c
c0007364:	e9 bc 94 00 00       	jmp    c0010825 <KePanic(char const*)>
c0007369:	90                   	nop

c000736a <GDTEntry::setBase(unsigned int)>:
c000736a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007372:	89 c1                	mov    ecx,eax
c0007374:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007378:	c1 e9 10             	shr    ecx,0x10
c000737b:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000737e:	c1 e8 18             	shr    eax,0x18
c0007381:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007384:	c3                   	ret    
c0007385:	90                   	nop

c0007386 <GDTEntry::setLimit(unsigned int)>:
c0007386:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000738a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000738e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007391:	66 89 01             	mov    WORD PTR [ecx],ax
c0007394:	c1 e8 10             	shr    eax,0x10
c0007397:	24 0f                	and    al,0xf
c0007399:	80 e2 f0             	and    dl,0xf0
c000739c:	08 d0                	or     al,dl
c000739e:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00073a1:	c3                   	ret    

c00073a2 <GDT::GDT()>:
c00073a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00073b6:	90                   	nop
c00073b7:	c3                   	ret    

c00073b8 <GDT::addEntry(GDTEntry)>:
c00073b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073bc:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c00073c2:	8b 02                	mov    eax,DWORD PTR [edx]
c00073c4:	8d 48 01             	lea    ecx,[eax+0x1]
c00073c7:	66 0f d6 44 c2 04    	movq   QWORD PTR [edx+eax*8+0x4],xmm0
c00073cd:	89 0a                	mov    DWORD PTR [edx],ecx
c00073cf:	c1 e0 03             	shl    eax,0x3
c00073d2:	c3                   	ret    
c00073d3:	90                   	nop

c00073d4 <GDT::getNumberOfEntries()>:
c00073d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073da:	c3                   	ret    
c00073db:	90                   	nop

c00073dc <GDT::flush()>:
c00073dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073e2:	83 c0 04             	add    eax,0x4
c00073e5:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c00073ea:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073f1:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c00073f8:	e9 5d 8f ff ff       	jmp    c000035a <loadGDT>
c00073fd:	90                   	nop

c00073fe <GDT::setup()>:
c00073fe:	57                   	push   edi
c00073ff:	56                   	push   esi
c0007400:	53                   	push   ebx
c0007401:	83 ec 30             	sub    esp,0x30
c0007404:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007408:	6a 00                	push   0x0
c000740a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000740e:	56                   	push   esi
c000740f:	e8 56 ff ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c0007414:	6a 00                	push   0x0
c0007416:	56                   	push   esi
c0007417:	e8 6a ff ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c000741c:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007424:	6a 00                	push   0x0
c0007426:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000742a:	56                   	push   esi
c000742b:	e8 3a ff ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c0007430:	68 ff ff ff 00       	push   0xffffff
c0007435:	56                   	push   esi
c0007436:	e8 4b ff ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c000743b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000743f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007443:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007448:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000744c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007451:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007455:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007459:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000745d:	89 f8                	mov    eax,edi
c000745f:	89 fa                	mov    edx,edi
c0007461:	80 e4 f7             	and    ah,0xf7
c0007464:	80 ce 60             	or     dh,0x60
c0007467:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000746b:	89 c7                	mov    edi,eax
c000746d:	80 cc 60             	or     ah,0x60
c0007470:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007474:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007478:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007480:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007484:	83 c4 20             	add    esp,0x20
c0007487:	6a 00                	push   0x0
c0007489:	8d 44 24 24          	lea    eax,[esp+0x24]
c000748d:	50                   	push   eax
c000748e:	e8 d7 fe ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c0007493:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007497:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000749b:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c00074a0:	6a 00                	push   0x0
c00074a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00074a6:	50                   	push   eax
c00074a7:	e8 be fe ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c00074ac:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c00074b1:	83 c4 0c             	add    esp,0xc
c00074b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074bc:	53                   	push   ebx
c00074bd:	e8 f6 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074c2:	83 c4 0c             	add    esp,0xc
c00074c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074cd:	53                   	push   ebx
c00074ce:	e8 e5 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074d3:	83 c4 0c             	add    esp,0xc
c00074d6:	57                   	push   edi
c00074d7:	56                   	push   esi
c00074d8:	53                   	push   ebx
c00074d9:	e8 da fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074de:	83 c4 0c             	add    esp,0xc
c00074e1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074e5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074e9:	53                   	push   ebx
c00074ea:	e8 c9 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c00074ef:	83 c4 0c             	add    esp,0xc
c00074f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074fa:	53                   	push   ebx
c00074fb:	e8 b8 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007500:	83 c4 0c             	add    esp,0xc
c0007503:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007507:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000750b:	53                   	push   ebx
c000750c:	e8 a7 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007511:	83 c4 0c             	add    esp,0xc
c0007514:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007518:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000751c:	53                   	push   ebx
c000751d:	e8 96 fe ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0007522:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007525:	e8 b2 fe ff ff       	call   c00073dc <GDT::flush()>
c000752a:	83 c4 40             	add    esp,0x40
c000752d:	5b                   	pop    ebx
c000752e:	5e                   	pop    esi
c000752f:	5f                   	pop    edi
c0007530:	c3                   	ret    

c0007531 <idleFunction(void*)>:
c0007531:	83 ec 0c             	sub    esp,0xc
c0007534:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007539:	48                   	dec    eax
c000753a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000753f:	75 01                	jne    c0007542 <idleFunction(void*)+0x11>
c0007541:	fb                   	sti    
c0007542:	e8 b4 f5 00 00       	call   c0016afb <HalSystemIdle()>
c0007547:	e8 6f 71 01 00       	call   c001e6bb <idleCommon()>
c000754c:	eb f4                	jmp    c0007542 <idleFunction(void*)+0x11>
c000754e:	66 90                	xchg   ax,ax

c0007550 <IDTEntry::IDTEntry(bool)>:
c0007550:	83 ec 04             	sub    esp,0x4
c0007553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007557:	88 04 24             	mov    BYTE PTR [esp],al
c000755a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000755e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007568:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000756c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007570:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007574:	80 e2 f0             	and    dl,0xf0
c0007577:	80 ca 0e             	or     dl,0xe
c000757a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000757d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007581:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0007585:	80 e2 ef             	and    dl,0xef
c0007588:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000758b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000758f:	74 07                	je     c0007598 <IDTEntry::IDTEntry(bool)+0x48>
c0007591:	b2 03                	mov    dl,0x3
c0007593:	eb 07                	jmp    c000759c <IDTEntry::IDTEntry(bool)+0x4c>
c0007595:	8d 76 00             	lea    esi,[esi+0x0]
c0007598:	b2 00                	mov    dl,0x0
c000759a:	66 90                	xchg   ax,ax
c000759c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075a0:	80 e2 03             	and    dl,0x3
c00075a3:	88 d1                	mov    cl,dl
c00075a5:	c0 e1 05             	shl    cl,0x5
c00075a8:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00075ac:	80 e2 9f             	and    dl,0x9f
c00075af:	08 ca                	or     dl,cl
c00075b1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075b8:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00075bc:	80 ca 80             	or     dl,0x80
c00075bf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075c2:	90                   	nop
c00075c3:	83 c4 04             	add    esp,0x4
c00075c6:	c3                   	ret    
c00075c7:	90                   	nop

c00075c8 <IDTEntry::setOffset(unsigned int)>:
c00075c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075d0:	66 89 02             	mov    WORD PTR [edx],ax
c00075d3:	c1 e8 10             	shr    eax,0x10
c00075d6:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075da:	c3                   	ret    
c00075db:	90                   	nop

c00075dc <IDT::IDT()>:
c00075dc:	90                   	nop
c00075dd:	c3                   	ret    

c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075e2:	83 c0 30             	add    eax,0x30
c00075e5:	c3                   	ret    

c00075e6 <IDT::addEntry(IDTEntry, int)>:
c00075e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075ea:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c00075f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00075f4:	66 0f d6 04 d0       	movq   QWORD PTR [eax+edx*8],xmm0
c00075f9:	c3                   	ret    

c00075fa <IDT::addEntry(int, void (*)(), bool)>:
c00075fa:	53                   	push   ebx
c00075fb:	83 ec 10             	sub    esp,0x10
c00075fe:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007603:	50                   	push   eax
c0007604:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007608:	53                   	push   ebx
c0007609:	e8 42 ff ff ff       	call   c0007550 <IDTEntry::IDTEntry(bool)>
c000760e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007612:	53                   	push   ebx
c0007613:	e8 b0 ff ff ff       	call   c00075c8 <IDTEntry::setOffset(unsigned int)>
c0007618:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000761c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007620:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007624:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007628:	e8 b9 ff ff ff       	call   c00075e6 <IDT::addEntry(IDTEntry, int)>
c000762d:	83 c4 30             	add    esp,0x30
c0007630:	5b                   	pop    ebx
c0007631:	c3                   	ret    

c0007632 <IDT::flush()>:
c0007632:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c000763b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000763f:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c0007644:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c000764b:	c3                   	ret    

c000764c <IDT::setup()>:
c000764c:	57                   	push   edi
c000764d:	56                   	push   esi
c000764e:	53                   	push   ebx
c000764f:	83 ec 10             	sub    esp,0x10
c0007652:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007656:	6a 00                	push   0x0
c0007658:	68 c0 dd 01 c0       	push   0xc001ddc0
c000765d:	6a 00                	push   0x0
c000765f:	53                   	push   ebx
c0007660:	e8 95 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007665:	6a 00                	push   0x0
c0007667:	68 d0 dd 01 c0       	push   0xc001ddd0
c000766c:	6a 01                	push   0x1
c000766e:	53                   	push   ebx
c000766f:	e8 86 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007674:	83 c4 20             	add    esp,0x20
c0007677:	6a 00                	push   0x0
c0007679:	68 da dd 01 c0       	push   0xc001ddda
c000767e:	6a 02                	push   0x2
c0007680:	53                   	push   ebx
c0007681:	e8 74 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007686:	6a 00                	push   0x0
c0007688:	68 e4 dd 01 c0       	push   0xc001dde4
c000768d:	6a 03                	push   0x3
c000768f:	53                   	push   ebx
c0007690:	e8 65 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007695:	83 c4 20             	add    esp,0x20
c0007698:	6a 00                	push   0x0
c000769a:	68 ee dd 01 c0       	push   0xc001ddee
c000769f:	6a 04                	push   0x4
c00076a1:	53                   	push   ebx
c00076a2:	e8 53 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076a7:	6a 00                	push   0x0
c00076a9:	68 f8 dd 01 c0       	push   0xc001ddf8
c00076ae:	6a 05                	push   0x5
c00076b0:	53                   	push   ebx
c00076b1:	e8 44 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076b6:	83 c4 20             	add    esp,0x20
c00076b9:	6a 00                	push   0x0
c00076bb:	68 02 de 01 c0       	push   0xc001de02
c00076c0:	6a 06                	push   0x6
c00076c2:	53                   	push   ebx
c00076c3:	e8 32 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076c8:	6a 00                	push   0x0
c00076ca:	68 0c de 01 c0       	push   0xc001de0c
c00076cf:	6a 07                	push   0x7
c00076d1:	53                   	push   ebx
c00076d2:	e8 23 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076d7:	83 c4 20             	add    esp,0x20
c00076da:	6a 00                	push   0x0
c00076dc:	68 16 de 01 c0       	push   0xc001de16
c00076e1:	6a 08                	push   0x8
c00076e3:	53                   	push   ebx
c00076e4:	e8 11 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076e9:	6a 00                	push   0x0
c00076eb:	68 1e de 01 c0       	push   0xc001de1e
c00076f0:	6a 09                	push   0x9
c00076f2:	53                   	push   ebx
c00076f3:	e8 02 ff ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00076f8:	83 c4 20             	add    esp,0x20
c00076fb:	6a 00                	push   0x0
c00076fd:	68 28 de 01 c0       	push   0xc001de28
c0007702:	6a 0a                	push   0xa
c0007704:	53                   	push   ebx
c0007705:	e8 f0 fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000770a:	6a 00                	push   0x0
c000770c:	68 30 de 01 c0       	push   0xc001de30
c0007711:	6a 0b                	push   0xb
c0007713:	53                   	push   ebx
c0007714:	e8 e1 fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007719:	83 c4 20             	add    esp,0x20
c000771c:	6a 00                	push   0x0
c000771e:	68 38 de 01 c0       	push   0xc001de38
c0007723:	6a 0c                	push   0xc
c0007725:	53                   	push   ebx
c0007726:	e8 cf fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000772b:	6a 00                	push   0x0
c000772d:	68 40 de 01 c0       	push   0xc001de40
c0007732:	6a 0d                	push   0xd
c0007734:	53                   	push   ebx
c0007735:	e8 c0 fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000773a:	83 c4 20             	add    esp,0x20
c000773d:	6a 00                	push   0x0
c000773f:	68 5a de 01 c0       	push   0xc001de5a
c0007744:	6a 0e                	push   0xe
c0007746:	53                   	push   ebx
c0007747:	e8 ae fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000774c:	6a 00                	push   0x0
c000774e:	68 62 de 01 c0       	push   0xc001de62
c0007753:	6a 0f                	push   0xf
c0007755:	53                   	push   ebx
c0007756:	e8 9f fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000775b:	83 c4 20             	add    esp,0x20
c000775e:	6a 00                	push   0x0
c0007760:	68 6c de 01 c0       	push   0xc001de6c
c0007765:	6a 10                	push   0x10
c0007767:	53                   	push   ebx
c0007768:	e8 8d fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000776d:	6a 00                	push   0x0
c000776f:	68 76 de 01 c0       	push   0xc001de76
c0007774:	6a 11                	push   0x11
c0007776:	53                   	push   ebx
c0007777:	e8 7e fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000777c:	83 c4 20             	add    esp,0x20
c000777f:	6a 00                	push   0x0
c0007781:	68 80 de 01 c0       	push   0xc001de80
c0007786:	6a 12                	push   0x12
c0007788:	53                   	push   ebx
c0007789:	e8 6c fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000778e:	6a 01                	push   0x1
c0007790:	68 1a df 01 c0       	push   0xc001df1a
c0007795:	6a 60                	push   0x60
c0007797:	53                   	push   ebx
c0007798:	e8 5d fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000779d:	83 c4 20             	add    esp,0x20
c00077a0:	6a 00                	push   0x0
c00077a2:	68 21 df 01 c0       	push   0xc001df21
c00077a7:	6a 20                	push   0x20
c00077a9:	53                   	push   ebx
c00077aa:	e8 4b fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077af:	6a 00                	push   0x0
c00077b1:	68 0c df 01 c0       	push   0xc001df0c
c00077b6:	6a 21                	push   0x21
c00077b8:	53                   	push   ebx
c00077b9:	e8 3c fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077be:	83 c4 20             	add    esp,0x20
c00077c1:	6a 00                	push   0x0
c00077c3:	68 13 df 01 c0       	push   0xc001df13
c00077c8:	6a 22                	push   0x22
c00077ca:	53                   	push   ebx
c00077cb:	e8 2a fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077d0:	6a 00                	push   0x0
c00077d2:	68 8a de 01 c0       	push   0xc001de8a
c00077d7:	6a 23                	push   0x23
c00077d9:	53                   	push   ebx
c00077da:	e8 1b fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077df:	83 c4 20             	add    esp,0x20
c00077e2:	6a 00                	push   0x0
c00077e4:	68 94 de 01 c0       	push   0xc001de94
c00077e9:	6a 24                	push   0x24
c00077eb:	53                   	push   ebx
c00077ec:	e8 09 fe ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00077f1:	6a 00                	push   0x0
c00077f3:	68 9e de 01 c0       	push   0xc001de9e
c00077f8:	6a 25                	push   0x25
c00077fa:	53                   	push   ebx
c00077fb:	e8 fa fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007800:	83 c4 20             	add    esp,0x20
c0007803:	6a 00                	push   0x0
c0007805:	68 a8 de 01 c0       	push   0xc001dea8
c000780a:	6a 26                	push   0x26
c000780c:	53                   	push   ebx
c000780d:	e8 e8 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007812:	6a 00                	push   0x0
c0007814:	68 b2 de 01 c0       	push   0xc001deb2
c0007819:	6a 27                	push   0x27
c000781b:	53                   	push   ebx
c000781c:	e8 d9 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007821:	83 c4 20             	add    esp,0x20
c0007824:	6a 00                	push   0x0
c0007826:	68 bc de 01 c0       	push   0xc001debc
c000782b:	6a 28                	push   0x28
c000782d:	53                   	push   ebx
c000782e:	e8 c7 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007833:	6a 00                	push   0x0
c0007835:	68 c6 de 01 c0       	push   0xc001dec6
c000783a:	6a 29                	push   0x29
c000783c:	53                   	push   ebx
c000783d:	e8 b8 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007842:	83 c4 20             	add    esp,0x20
c0007845:	6a 00                	push   0x0
c0007847:	68 d0 de 01 c0       	push   0xc001ded0
c000784c:	6a 2a                	push   0x2a
c000784e:	53                   	push   ebx
c000784f:	e8 a6 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007854:	6a 00                	push   0x0
c0007856:	68 da de 01 c0       	push   0xc001deda
c000785b:	6a 2b                	push   0x2b
c000785d:	53                   	push   ebx
c000785e:	e8 97 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007863:	83 c4 20             	add    esp,0x20
c0007866:	6a 00                	push   0x0
c0007868:	68 e4 de 01 c0       	push   0xc001dee4
c000786d:	6a 2c                	push   0x2c
c000786f:	53                   	push   ebx
c0007870:	e8 85 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007875:	6a 00                	push   0x0
c0007877:	68 ee de 01 c0       	push   0xc001deee
c000787c:	6a 2d                	push   0x2d
c000787e:	53                   	push   ebx
c000787f:	e8 76 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007884:	83 c4 20             	add    esp,0x20
c0007887:	6a 00                	push   0x0
c0007889:	68 f8 de 01 c0       	push   0xc001def8
c000788e:	6a 2e                	push   0x2e
c0007890:	53                   	push   ebx
c0007891:	e8 64 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007896:	6a 00                	push   0x0
c0007898:	68 02 df 01 c0       	push   0xc001df02
c000789d:	6a 2f                	push   0x2f
c000789f:	53                   	push   ebx
c00078a0:	e8 55 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078a5:	83 c4 20             	add    esp,0x20
c00078a8:	6a 00                	push   0x0
c00078aa:	68 5c e0 01 c0       	push   0xc001e05c
c00078af:	6a 30                	push   0x30
c00078b1:	53                   	push   ebx
c00078b2:	e8 43 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078b7:	6a 00                	push   0x0
c00078b9:	68 66 e0 01 c0       	push   0xc001e066
c00078be:	6a 31                	push   0x31
c00078c0:	53                   	push   ebx
c00078c1:	e8 34 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078c6:	83 c4 20             	add    esp,0x20
c00078c9:	6a 00                	push   0x0
c00078cb:	68 70 e0 01 c0       	push   0xc001e070
c00078d0:	6a 32                	push   0x32
c00078d2:	53                   	push   ebx
c00078d3:	e8 22 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078d8:	6a 00                	push   0x0
c00078da:	68 7a e0 01 c0       	push   0xc001e07a
c00078df:	6a 33                	push   0x33
c00078e1:	53                   	push   ebx
c00078e2:	e8 13 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078e7:	83 c4 20             	add    esp,0x20
c00078ea:	6a 00                	push   0x0
c00078ec:	68 84 e0 01 c0       	push   0xc001e084
c00078f1:	6a 34                	push   0x34
c00078f3:	53                   	push   ebx
c00078f4:	e8 01 fd ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c00078f9:	6a 00                	push   0x0
c00078fb:	68 8e e0 01 c0       	push   0xc001e08e
c0007900:	6a 35                	push   0x35
c0007902:	53                   	push   ebx
c0007903:	e8 f2 fc ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007908:	83 c4 20             	add    esp,0x20
c000790b:	6a 00                	push   0x0
c000790d:	68 98 e0 01 c0       	push   0xc001e098
c0007912:	6a 36                	push   0x36
c0007914:	53                   	push   ebx
c0007915:	e8 e0 fc ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c000791a:	6a 00                	push   0x0
c000791c:	68 a2 e0 01 c0       	push   0xc001e0a2
c0007921:	6a 37                	push   0x37
c0007923:	53                   	push   ebx
c0007924:	e8 d1 fc ff ff       	call   c00075fa <IDT::addEntry(int, void (*)(), bool)>
c0007929:	83 c4 1c             	add    esp,0x1c
c000792c:	6a 03                	push   0x3
c000792e:	6a 02                	push   0x2
c0007930:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007936:	e8 3b 25 00 00       	call   c0009e76 <VAS::allocatePages(int, int)>
c000793b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007942:	89 c6                	mov    esi,eax
c0007944:	e8 b3 01 00 00       	call   c0007afc <malloc>
c0007949:	81 c6 00 20 00 00    	add    esi,0x2000
c000794f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007952:	89 c7                	mov    edi,eax
c0007954:	e8 1f 16 00 00       	call   c0008f78 <TSS::TSS()>
c0007959:	83 c4 0c             	add    esp,0xc
c000795c:	68 16 de 01 c0       	push   0xc001de16
c0007961:	56                   	push   esi
c0007962:	57                   	push   edi
c0007963:	e8 58 16 00 00       	call   c0008fc0 <TSS::setup(unsigned long, unsigned long)>
c0007968:	89 c6                	mov    esi,eax
c000796a:	58                   	pop    eax
c000796b:	5a                   	pop    edx
c000796c:	6a 00                	push   0x0
c000796e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007972:	50                   	push   eax
c0007973:	e8 d8 fb ff ff       	call   c0007550 <IDTEntry::IDTEntry(bool)>
c0007978:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000797c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007981:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007988:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000798c:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007992:	80 ce 05             	or     dh,0x5
c0007995:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007999:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000799c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079a0:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00079a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00079a6:	e8 87 fc ff ff       	call   c0007632 <IDT::flush()>
c00079ab:	83 c4 20             	add    esp,0x20
c00079ae:	5b                   	pop    ebx
c00079af:	5e                   	pop    esi
c00079b0:	5f                   	pop    edi
c00079b1:	c3                   	ret    

c00079b2 <sbrk>:
c00079b2:	55                   	push   ebp
c00079b3:	57                   	push   edi
c00079b4:	56                   	push   esi
c00079b5:	53                   	push   ebx
c00079b6:	83 ec 2c             	sub    esp,0x2c
c00079b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00079bd:	85 c0                	test   eax,eax
c00079bf:	74 6c                	je     c0007a2d <sbrk+0x7b>
c00079c1:	78 71                	js     c0007a34 <sbrk+0x82>
c00079c3:	8b 15 1c 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021c1c
c00079c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cd:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079d3:	05 ff 0f 00 00       	add    eax,0xfff
c00079d8:	0f 49 e8             	cmovns ebp,eax
c00079db:	c1 fd 0c             	sar    ebp,0xc
c00079de:	bb 00 00 00 00       	mov    ebx,0x0
c00079e3:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c00079e9:	8b 3d 1c 1c 02 c0    	mov    edi,DWORD PTR ds:0xc0021c1c
c00079ef:	e8 18 04 00 00       	call   c0007e0c <Phys::allocatePage()>
c00079f4:	c7 44 24 0c 01 04 00 00 	mov    DWORD PTR [esp+0xc],0x401
c00079fc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007a00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a04:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a07:	e8 36 23 00 00       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007a0c:	81 05 1c 1c 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021c1c,0x1000
c0007a16:	43                   	inc    ebx
c0007a17:	39 dd                	cmp    ebp,ebx
c0007a19:	75 c8                	jne    c00079e3 <sbrk+0x31>
c0007a1b:	0f 20 d8             	mov    eax,cr3
c0007a1e:	0f 22 d8             	mov    cr3,eax
c0007a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007a25:	83 c4 2c             	add    esp,0x2c
c0007a28:	5b                   	pop    ebx
c0007a29:	5e                   	pop    esi
c0007a2a:	5f                   	pop    edi
c0007a2b:	5d                   	pop    ebp
c0007a2c:	c3                   	ret    
c0007a2d:	a1 1c 1c 02 c0       	mov    eax,ds:0xc0021c1c
c0007a32:	eb f1                	jmp    c0007a25 <sbrk+0x73>
c0007a34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007a38:	c7 04 24 18 f9 01 c0 	mov    DWORD PTR [esp],0xc001f918
c0007a3f:	e8 32 30 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007a44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a49:	eb da                	jmp    c0007a25 <sbrk+0x73>

c0007a4b <mmap>:
c0007a4b:	83 ec 1c             	sub    esp,0x1c
c0007a4e:	c7 04 24 48 f9 01 c0 	mov    DWORD PTR [esp],0xc001f948
c0007a55:	e8 cb 8d 00 00       	call   c0010825 <KePanic(char const*)>
c0007a5a:	b8 00 00 00 00       	mov    eax,0x0
c0007a5f:	83 c4 1c             	add    esp,0x1c
c0007a62:	c3                   	ret    

c0007a63 <munmap>:
c0007a63:	83 ec 1c             	sub    esp,0x1c
c0007a66:	c7 04 24 4d f9 01 c0 	mov    DWORD PTR [esp],0xc001f94d
c0007a6d:	e8 b3 8d 00 00       	call   c0010825 <KePanic(char const*)>
c0007a72:	b8 00 00 00 00       	mov    eax,0x0
c0007a77:	83 c4 1c             	add    esp,0x1c
c0007a7a:	c3                   	ret    

c0007a7b <liballoc_lock()>:
c0007a7b:	fa                   	cli    
c0007a7c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007a82:	b8 00 00 00 00       	mov    eax,0x0
c0007a87:	c3                   	ret    

c0007a88 <liballoc_unlock()>:
c0007a88:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a8d:	48                   	dec    eax
c0007a8e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a93:	75 01                	jne    c0007a96 <liballoc_unlock()+0xe>
c0007a95:	fb                   	sti    
c0007a96:	b8 00 00 00 00       	mov    eax,0x0
c0007a9b:	c3                   	ret    

c0007a9c <liballoc_alloc(int)>:
c0007a9c:	83 ec 1c             	sub    esp,0x1c
c0007a9f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007aa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007aab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007aaf:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007ab4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ab7:	e8 ba 23 00 00       	call   c0009e76 <VAS::allocatePages(int, int)>
c0007abc:	83 c4 1c             	add    esp,0x1c
c0007abf:	c3                   	ret    

c0007ac0 <liballoc_free(void*, int)>:
c0007ac0:	83 ec 1c             	sub    esp,0x1c
c0007ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ac7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007acb:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0007ad0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ad3:	e8 76 1f 00 00       	call   c0009a4e <VAS::freeAllocatedPages(unsigned long)>
c0007ad8:	b8 00 00 00 00       	mov    eax,0x0
c0007add:	83 c4 1c             	add    esp,0x1c
c0007ae0:	c3                   	ret    

c0007ae1 <realloc>:
c0007ae1:	83 ec 1c             	sub    esp,0x1c
c0007ae4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007ae8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007aec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007af0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007af3:	e8 b1 9b ff ff       	call   c00016a9 <dlrealloc>
c0007af8:	83 c4 1c             	add    esp,0x1c
c0007afb:	c3                   	ret    

c0007afc <malloc>:
c0007afc:	83 ec 1c             	sub    esp,0x1c
c0007aff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b06:	e8 61 96 ff ff       	call   c000116c <dlmalloc>
c0007b0b:	83 c4 1c             	add    esp,0x1c
c0007b0e:	c3                   	ret    

c0007b0f <free>:
c0007b0f:	83 ec 1c             	sub    esp,0x1c
c0007b12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b16:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b19:	e8 f0 92 ff ff       	call   c0000e0e <dlfree>
c0007b1e:	83 c4 1c             	add    esp,0x1c
c0007b21:	c3                   	ret    

c0007b22 <rfree>:
c0007b22:	83 ec 1c             	sub    esp,0x1c
c0007b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b2c:	e8 dd 92 ff ff       	call   c0000e0e <dlfree>
c0007b31:	83 c4 1c             	add    esp,0x1c
c0007b34:	c3                   	ret    

c0007b35 <calloc>:
c0007b35:	83 ec 1c             	sub    esp,0x1c
c0007b38:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0007b3c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0007b40:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0007b44:	0f af 5c 24 20       	imul   ebx,DWORD PTR [esp+0x20]
c0007b49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4c:	e8 ab ff ff ff       	call   c0007afc <malloc>
c0007b51:	89 c6                	mov    esi,eax
c0007b53:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007b57:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0007b5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b62:	e8 19 8a ff ff       	call   c0000580 <memset>
c0007b67:	89 f0                	mov    eax,esi
c0007b69:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0007b6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007b71:	83 c4 1c             	add    esp,0x1c
c0007b74:	c3                   	ret    

c0007b75 <KeEntryPoint>:
c0007b75:	56                   	push   esi
c0007b76:	be f9 03 00 00       	mov    esi,0x3f9
c0007b7b:	53                   	push   ebx
c0007b7c:	89 f2                	mov    edx,esi
c0007b7e:	83 ec 34             	sub    esp,0x34
c0007b81:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b86:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b8b:	31 c0                	xor    eax,eax
c0007b8d:	ee                   	out    dx,al
c0007b8e:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b93:	b0 80                	mov    al,0x80
c0007b95:	89 da                	mov    edx,ebx
c0007b97:	ee                   	out    dx,al
c0007b98:	b1 03                	mov    cl,0x3
c0007b9a:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b9f:	88 c8                	mov    al,cl
c0007ba1:	ee                   	out    dx,al
c0007ba2:	31 c0                	xor    eax,eax
c0007ba4:	89 f2                	mov    edx,esi
c0007ba6:	ee                   	out    dx,al
c0007ba7:	88 c8                	mov    al,cl
c0007ba9:	89 da                	mov    edx,ebx
c0007bab:	ee                   	out    dx,al
c0007bac:	b0 c7                	mov    al,0xc7
c0007bae:	ba fa 03 00 00       	mov    edx,0x3fa
c0007bb3:	ee                   	out    dx,al
c0007bb4:	b0 0b                	mov    al,0xb
c0007bb6:	ba fc 03 00 00       	mov    edx,0x3fc
c0007bbb:	ee                   	out    dx,al
c0007bbc:	c7 04 24 54 f9 01 c0 	mov    DWORD PTR [esp],0xc001f954
c0007bc3:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0007bc7:	e8 aa 2e 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007bcc:	e8 72 85 00 00       	call   c0010143 <KeDisplaySplashScreen()>
c0007bd1:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007bd6:	05 ff 0f 00 00       	add    eax,0xfff
c0007bdb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007be0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be3:	e8 82 03 00 00       	call   c0007f6a <Phys::physicalMemorySetup(unsigned int)>
c0007be8:	e8 fb 1b 00 00       	call   c00097e8 <Virt::virtualMemorySetup()>
c0007bed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bf0:	e8 ed 1e 00 00       	call   c0009ae2 <VAS::VAS()>
c0007bf5:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007bfb:	e8 5a 6a 01 00       	call   c001e65a <_init>
c0007c00:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007c07:	e8 f0 fe ff ff       	call   c0007afc <malloc>
c0007c0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c0f:	89 c6                	mov    esi,eax
c0007c11:	e8 e0 f1 ff ff       	call   c0006df6 <Computer::Computer()>
c0007c16:	31 d2                	xor    edx,edx
c0007c18:	31 c9                	xor    ecx,ecx
c0007c1a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0007c1e:	31 c0                	xor    eax,eax
c0007c20:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007c24:	89 34 24             	mov    DWORD PTR [esp],esi
c0007c27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c2b:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007c31:	e8 9a f5 ff ff       	call   c00071d0 <Computer::open(int, int, void*)>
c0007c36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007c39:	e8 9a 1f 00 00       	call   c0009bd8 <VAS::~VAS()>
c0007c3e:	83 c4 34             	add    esp,0x34
c0007c41:	5b                   	pop    ebx
c0007c42:	5e                   	pop    esi
c0007c43:	c3                   	ret    
c0007c44:	66 90                	xchg   ax,ax
c0007c46:	66 90                	xchg   ax,ax
c0007c48:	66 90                	xchg   ax,ax
c0007c4a:	66 90                	xchg   ax,ax
c0007c4c:	66 90                	xchg   ax,ax
c0007c4e:	66 90                	xchg   ax,ax

c0007c50 <Phys::allocateDMA(unsigned long)>:
c0007c50:	55                   	push   ebp
c0007c51:	31 ed                	xor    ebp,ebp
c0007c53:	57                   	push   edi
c0007c54:	56                   	push   esi
c0007c55:	31 f6                	xor    esi,esi
c0007c57:	53                   	push   ebx
c0007c58:	31 db                	xor    ebx,ebx
c0007c5a:	83 ec 2c             	sub    esp,0x2c
c0007c5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c61:	05 ff 0f 00 00       	add    eax,0xfff
c0007c66:	c1 e8 0c             	shr    eax,0xc
c0007c69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c6d:	31 c0                	xor    eax,eax
c0007c6f:	eb 19                	jmp    c0007c8a <Phys::allocateDMA(unsigned long)+0x3a>
c0007c71:	8d 78 01             	lea    edi,[eax+0x1]
c0007c74:	85 c0                	test   eax,eax
c0007c76:	0f 44 eb             	cmove  ebp,ebx
c0007c79:	0f 44 f3             	cmove  esi,ebx
c0007c7c:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0007c80:	74 2f                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0x61>
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	43                   	inc    ebx
c0007c85:	83 fb 0f             	cmp    ebx,0xf
c0007c88:	7f 11                	jg     c0007c9b <Phys::allocateDMA(unsigned long)+0x4b>
c0007c8a:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007c91:	74 de                	je     c0007c71 <Phys::allocateDMA(unsigned long)+0x21>
c0007c93:	31 c0                	xor    eax,eax
c0007c95:	43                   	inc    ebx
c0007c96:	83 fb 0f             	cmp    ebx,0xf
c0007c99:	7e ef                	jle    c0007c8a <Phys::allocateDMA(unsigned long)+0x3a>
c0007c9b:	c7 04 24 6c f9 01 c0 	mov    DWORD PTR [esp],0xc001f96c
c0007ca2:	e8 7e 8b 00 00       	call   c0010825 <KePanic(char const*)>
c0007ca7:	31 c0                	xor    eax,eax
c0007ca9:	83 c4 2c             	add    esp,0x2c
c0007cac:	5b                   	pop    ebx
c0007cad:	5e                   	pop    esi
c0007cae:	5f                   	pop    edi
c0007caf:	5d                   	pop    ebp
c0007cb0:	c3                   	ret    
c0007cb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007cb5:	89 f2                	mov    edx,esi
c0007cb7:	c1 fa 04             	sar    edx,0x4
c0007cba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007cbe:	01 f1                	add    ecx,esi
c0007cc0:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007cc3:	49                   	dec    ecx
c0007cc4:	0f 48 ca             	cmovs  ecx,edx
c0007cc7:	c1 f9 04             	sar    ecx,0x4
c0007cca:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0007cce:	74 06                	je     c0007cd6 <Phys::allocateDMA(unsigned long)+0x86>
c0007cd0:	89 eb                	mov    ebx,ebp
c0007cd2:	31 c0                	xor    eax,eax
c0007cd4:	eb bf                	jmp    c0007c95 <Phys::allocateDMA(unsigned long)+0x45>
c0007cd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007cda:	85 d2                	test   edx,edx
c0007cdc:	74 15                	je     c0007cf3 <Phys::allocateDMA(unsigned long)+0xa3>
c0007cde:	8d 96 ec 4e 02 c0    	lea    edx,[esi-0x3ffdb114]
c0007ce4:	8d 84 06 ed 4e 02 c0 	lea    eax,[esi+eax*1-0x3ffdb113]
c0007ceb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007cee:	42                   	inc    edx
c0007cef:	39 d0                	cmp    eax,edx
c0007cf1:	75 f8                	jne    c0007ceb <Phys::allocateDMA(unsigned long)+0x9b>
c0007cf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007cf7:	01 05 e4 4e 02 c0    	add    DWORD PTR ds:0xc0024ee4,eax
c0007cfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d01:	85 c0                	test   eax,eax
c0007d03:	74 13                	je     c0007d18 <Phys::allocateDMA(unsigned long)+0xc8>
c0007d05:	c7 04 24 6c f9 01 c0 	mov    DWORD PTR [esp],0xc001f96c
c0007d0c:	e8 14 8b 00 00       	call   c0010825 <KePanic(char const*)>
c0007d11:	89 f8                	mov    eax,edi
c0007d13:	e9 6c ff ff ff       	jmp    c0007c84 <Phys::allocateDMA(unsigned long)+0x34>
c0007d18:	c1 e6 0c             	shl    esi,0xc
c0007d1b:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007d21:	eb 86                	jmp    c0007ca9 <Phys::allocateDMA(unsigned long)+0x59>

c0007d23 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007d23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d27:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007d2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d31:	c1 ea 0c             	shr    edx,0xc
c0007d34:	29 15 e4 4e 02 c0    	sub    DWORD PTR ds:0xc0024ee4,edx
c0007d3a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d3f:	c1 e8 0c             	shr    eax,0xc
c0007d42:	85 d2                	test   edx,edx
c0007d44:	74 0f                	je     c0007d55 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007d46:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007d4b:	01 c2                	add    edx,eax
c0007d4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d50:	40                   	inc    eax
c0007d51:	39 d0                	cmp    eax,edx
c0007d53:	75 f8                	jne    c0007d4d <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007d55:	c3                   	ret    

c0007d56 <Phys::setPageState(unsigned long, bool)>:
c0007d56:	53                   	push   ebx
c0007d57:	8b 1d 20 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021c20
c0007d5d:	ba 01 00 00 00       	mov    edx,0x1
c0007d62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007d66:	89 c8                	mov    eax,ecx
c0007d68:	83 e1 07             	and    ecx,0x7
c0007d6b:	c1 e8 03             	shr    eax,0x3
c0007d6e:	d3 e2                	shl    edx,cl
c0007d70:	01 c3                	add    ebx,eax
c0007d72:	f6 d2                	not    dl
c0007d74:	20 13                	and    BYTE PTR [ebx],dl
c0007d76:	8b 15 20 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021c20
c0007d7c:	01 d0                	add    eax,edx
c0007d7e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0007d83:	d3 e2                	shl    edx,cl
c0007d85:	08 10                	or     BYTE PTR [eax],dl
c0007d87:	5b                   	pop    ebx
c0007d88:	c3                   	ret    

c0007d89 <Phys::getPageState(unsigned long)>:
c0007d89:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d8d:	8b 15 20 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021c20
c0007d93:	89 c8                	mov    eax,ecx
c0007d95:	83 e1 07             	and    ecx,0x7
c0007d98:	c1 e8 03             	shr    eax,0x3
c0007d9b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d9f:	d3 f8                	sar    eax,cl
c0007da1:	24 01                	and    al,0x1
c0007da3:	c3                   	ret    

c0007da4 <Phys::freePage(unsigned long)>:
c0007da4:	53                   	push   ebx
c0007da5:	83 ec 18             	sub    esp,0x18
c0007da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007dac:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007db2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007db8:	76 3c                	jbe    c0007df6 <Phys::freePage(unsigned long)+0x52>
c0007dba:	c1 e8 0c             	shr    eax,0xc
c0007dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dc0:	89 c3                	mov    ebx,eax
c0007dc2:	e8 c2 ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007dc7:	84 c0                	test   al,al
c0007dc9:	74 19                	je     c0007de4 <Phys::freePage(unsigned long)+0x40>
c0007dcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007dce:	31 c0                	xor    eax,eax
c0007dd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007dd4:	ff 0d e4 4e 02 c0    	dec    DWORD PTR ds:0xc0024ee4
c0007dda:	e8 77 ff ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007ddf:	83 c4 18             	add    esp,0x18
c0007de2:	5b                   	pop    ebx
c0007de3:	c3                   	ret    
c0007de4:	ba 11 fa 01 c0       	mov    edx,0xc001fa11
c0007de9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007ded:	83 c4 18             	add    esp,0x18
c0007df0:	5b                   	pop    ebx
c0007df1:	e9 2f 8a 00 00       	jmp    c0010825 <KePanic(char const*)>
c0007df6:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df9:	b9 00 10 00 00       	mov    ecx,0x1000
c0007dfe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007e02:	e8 1c ff ff ff       	call   c0007d23 <Phys::freeDMA(unsigned long, unsigned long)>
c0007e07:	83 c4 18             	add    esp,0x18
c0007e0a:	5b                   	pop    ebx
c0007e0b:	c3                   	ret    

c0007e0c <Phys::allocatePage()>:
c0007e0c:	56                   	push   esi
c0007e0d:	53                   	push   ebx
c0007e0e:	83 ec 24             	sub    esp,0x24
c0007e11:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007e17:	89 f3                	mov    ebx,esi
c0007e19:	eb 0a                	jmp    c0007e25 <Phys::allocatePage()+0x19>
c0007e1b:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007e21:	39 de                	cmp    esi,ebx
c0007e23:	74 23                	je     c0007e48 <Phys::allocatePage()+0x3c>
c0007e25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e28:	e8 5c ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007e2d:	84 c0                	test   al,al
c0007e2f:	74 56                	je     c0007e87 <Phys::allocatePage()+0x7b>
c0007e31:	43                   	inc    ebx
c0007e32:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e38:	75 e1                	jne    c0007e1b <Phys::allocatePage()+0xf>
c0007e3a:	31 db                	xor    ebx,ebx
c0007e3c:	31 c9                	xor    ecx,ecx
c0007e3e:	89 0d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ecx
c0007e44:	39 de                	cmp    esi,ebx
c0007e46:	75 dd                	jne    c0007e25 <Phys::allocatePage()+0x19>
c0007e48:	80 35 fc 4e 02 c0 01 	xor    BYTE PTR ds:0xc0024efc,0x1
c0007e4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e54:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e57:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e60:	e8 8f 28 00 00       	call   c000a6f4 <VAS::scanForEviction()>
c0007e65:	85 c0                	test   eax,eax
c0007e67:	75 43                	jne    c0007eac <Phys::allocatePage()+0xa0>
c0007e69:	c7 04 24 94 f9 01 c0 	mov    DWORD PTR [esp],0xc001f994
c0007e70:	e8 b0 89 00 00       	call   c0010825 <KePanic(char const*)>
c0007e75:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e7e:	e8 06 ff ff ff       	call   c0007d89 <Phys::getPageState(unsigned long)>
c0007e83:	84 c0                	test   al,al
c0007e85:	75 aa                	jne    c0007e31 <Phys::allocatePage()+0x25>
c0007e87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007e8a:	be 01 00 00 00       	mov    esi,0x1
c0007e8f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0007e93:	e8 be fe ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007e98:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e9d:	ff 05 e4 4e 02 c0    	inc    DWORD PTR ds:0xc0024ee4
c0007ea3:	c1 e0 0c             	shl    eax,0xc
c0007ea6:	83 c4 24             	add    esp,0x24
c0007ea9:	5b                   	pop    ebx
c0007eaa:	5e                   	pop    esi
c0007eab:	c3                   	ret    
c0007eac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007eb0:	ba 01 00 00 00       	mov    edx,0x1
c0007eb5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007eb9:	89 c2                	mov    edx,eax
c0007ebb:	c1 ea 0c             	shr    edx,0xc
c0007ebe:	89 14 24             	mov    DWORD PTR [esp],edx
c0007ec1:	e8 90 fe ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007ec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007eca:	eb da                	jmp    c0007ea6 <Phys::allocatePage()+0x9a>

c0007ecc <Phys::allocateContiguousPages(int)>:
c0007ecc:	57                   	push   edi
c0007ecd:	56                   	push   esi
c0007ece:	53                   	push   ebx
c0007ecf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ed3:	fa                   	cli    
c0007ed4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0007eda:	31 db                	xor    ebx,ebx
c0007edc:	85 db                	test   ebx,ebx
c0007ede:	75 11                	jne    c0007ef1 <Phys::allocateContiguousPages(int)+0x25>
c0007ee0:	e8 27 ff ff ff       	call   c0007e0c <Phys::allocatePage()>
c0007ee5:	83 fe 01             	cmp    esi,0x1
c0007ee8:	89 c7                	mov    edi,eax
c0007eea:	74 21                	je     c0007f0d <Phys::allocateContiguousPages(int)+0x41>
c0007eec:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef1:	e8 16 ff ff ff       	call   c0007e0c <Phys::allocatePage()>
c0007ef6:	89 da                	mov    edx,ebx
c0007ef8:	c1 e2 0c             	shl    edx,0xc
c0007efb:	01 fa                	add    edx,edi
c0007efd:	39 c2                	cmp    edx,eax
c0007eff:	74 20                	je     c0007f21 <Phys::allocateContiguousPages(int)+0x55>
c0007f01:	83 fe 01             	cmp    esi,0x1
c0007f04:	bb 01 00 00 00       	mov    ebx,0x1
c0007f09:	89 c7                	mov    edi,eax
c0007f0b:	75 e4                	jne    c0007ef1 <Phys::allocateContiguousPages(int)+0x25>
c0007f0d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007f12:	48                   	dec    eax
c0007f13:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007f18:	75 01                	jne    c0007f1b <Phys::allocateContiguousPages(int)+0x4f>
c0007f1a:	fb                   	sti    
c0007f1b:	5b                   	pop    ebx
c0007f1c:	89 f8                	mov    eax,edi
c0007f1e:	5e                   	pop    esi
c0007f1f:	5f                   	pop    edi
c0007f20:	c3                   	ret    
c0007f21:	43                   	inc    ebx
c0007f22:	39 f3                	cmp    ebx,esi
c0007f24:	75 b6                	jne    c0007edc <Phys::allocateContiguousPages(int)+0x10>
c0007f26:	eb e5                	jmp    c0007f0d <Phys::allocateContiguousPages(int)+0x41>

c0007f28 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f28:	56                   	push   esi
c0007f29:	53                   	push   ebx
c0007f2a:	83 ec 08             	sub    esp,0x8
c0007f2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0007f31:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007f37:	73 06                	jae    c0007f3f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x17>
c0007f39:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007f3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f43:	c1 eb 0c             	shr    ebx,0xc
c0007f46:	c1 e8 0c             	shr    eax,0xc
c0007f49:	39 d8                	cmp    eax,ebx
c0007f4b:	73 17                	jae    c0007f64 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x3c>
c0007f4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f50:	8d 70 01             	lea    esi,[eax+0x1]
c0007f53:	31 d2                	xor    edx,edx
c0007f55:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f59:	e8 f8 fd ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007f5e:	39 f3                	cmp    ebx,esi
c0007f60:	89 f0                	mov    eax,esi
c0007f62:	75 e9                	jne    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x25>
c0007f64:	83 c4 08             	add    esp,0x8
c0007f67:	5b                   	pop    ebx
c0007f68:	5e                   	pop    esi
c0007f69:	c3                   	ret    

c0007f6a <Phys::physicalMemorySetup(unsigned int)>:
c0007f6a:	55                   	push   ebp
c0007f6b:	b8 10 00 00 00       	mov    eax,0x10
c0007f70:	57                   	push   edi
c0007f71:	56                   	push   esi
c0007f72:	53                   	push   ebx
c0007f73:	31 db                	xor    ebx,ebx
c0007f75:	83 ec 4c             	sub    esp,0x4c
c0007f78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f7c:	31 c0                	xor    eax,eax
c0007f7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007f82:	c7 04 24 ec 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eec
c0007f89:	e8 f2 85 ff ff       	call   c0000580 <memset>
c0007f8e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f92:	c7 04 24 27 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa27
c0007f99:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f9e:	05 00 10 00 00       	add    eax,0x1000
c0007fa3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007fa7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007fab:	e8 c6 2a 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0007fb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007fb3:	b8 01 00 00 00       	mov    eax,0x1
c0007fb8:	43                   	inc    ebx
c0007fb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007fbd:	e8 94 fd ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0007fc2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fc8:	75 e6                	jne    c0007fb0 <Phys::physicalMemorySetup(unsigned int)+0x46>
c0007fca:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007fd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007fd5:	85 c0                	test   eax,eax
c0007fd7:	0f 84 41 01 00 00    	je     c000811e <Phys::physicalMemorySetup(unsigned int)+0x1b4>
c0007fdd:	31 c0                	xor    eax,eax
c0007fdf:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fe4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007fe8:	eb 68                	jmp    c0008052 <Phys::physicalMemorySetup(unsigned int)+0xe8>
c0007fea:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007fee:	89 c1                	mov    ecx,eax
c0007ff0:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0007ff4:	0f 83 c9 00 00 00    	jae    c00080c3 <Phys::physicalMemorySetup(unsigned int)+0x159>
c0007ffa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0007ffe:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008003:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008007:	39 f2                	cmp    edx,esi
c0008009:	19 f8                	sbb    eax,edi
c000800b:	73 07                	jae    c0008014 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000800d:	be 00 00 0a 00       	mov    esi,0xa0000
c0008012:	31 ff                	xor    edi,edi
c0008014:	89 f2                	mov    edx,esi
c0008016:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000801b:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0008021:	89 f9                	mov    ecx,edi
c0008023:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0008027:	83 d1 ff             	adc    ecx,0xffffffff
c000802a:	39 d0                	cmp    eax,edx
c000802c:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0008030:	b8 00 00 00 00       	mov    eax,0x0
c0008035:	19 c8                	sbb    eax,ecx
c0008037:	0f 82 a7 01 00 00    	jb     c00081e4 <Phys::physicalMemorySetup(unsigned int)+0x27a>
c000803d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0008041:	83 c3 18             	add    ebx,0x18
c0008044:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008048:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c000804c:	0f 84 d8 00 00 00    	je     c000812a <Phys::physicalMemorySetup(unsigned int)+0x1c0>
c0008052:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008054:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008057:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000805a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0008061:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008064:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008068:	01 f0                	add    eax,esi
c000806a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000806e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008072:	11 fa                	adc    edx,edi
c0008074:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0008078:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000807c:	c7 04 24 c4 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9c4
c0008083:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000808b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000808f:	e8 e2 29 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0008094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008098:	09 fa                	or     edx,edi
c000809a:	89 d0                	mov    eax,edx
c000809c:	31 d2                	xor    edx,edx
c000809e:	09 d0                	or     eax,edx
c00080a0:	0f 85 84 00 00 00    	jne    c000812a <Phys::physicalMemorySetup(unsigned int)+0x1c0>
c00080a6:	83 fd 01             	cmp    ebp,0x1
c00080a9:	75 11                	jne    c00080bc <Phys::physicalMemorySetup(unsigned int)+0x152>
c00080ab:	ba 00 00 08 00       	mov    edx,0x80000
c00080b0:	89 c1                	mov    ecx,eax
c00080b2:	39 f2                	cmp    edx,esi
c00080b4:	19 f9                	sbb    ecx,edi
c00080b6:	0f 83 2e ff ff ff    	jae    c0007fea <Phys::physicalMemorySetup(unsigned int)+0x80>
c00080bc:	4d                   	dec    ebp
c00080bd:	0f 85 7a ff ff ff    	jne    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080c3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00080c7:	31 d2                	xor    edx,edx
c00080c9:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c00080cd:	89 c8                	mov    eax,ecx
c00080cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00080d3:	19 d1                	sbb    ecx,edx
c00080d5:	0f 82 62 ff ff ff    	jb     c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080db:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080e0:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
c00080e4:	b9 00 00 00 00       	mov    ecx,0x0
c00080e9:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ed:	0f 83 4a ff ff ff    	jae    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>
c00080f3:	39 c6                	cmp    esi,eax
c00080f5:	19 d7                	sbb    edi,edx
c00080f7:	0f 83 f4 00 00 00    	jae    c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x287>
c00080fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008101:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0008105:	29 c7                	sub    edi,eax
c0008107:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000810b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000810f:	19 d5                	sbb    ebp,edx
c0008111:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c0008115:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008119:	e9 d3 00 00 00       	jmp    c00081f1 <Phys::physicalMemorySetup(unsigned int)+0x287>
c000811e:	c7 04 24 3f fa 01 c0 	mov    DWORD PTR [esp],0xc001fa3f
c0008125:	e8 fb 86 00 00       	call   c0010825 <KePanic(char const*)>
c000812a:	c7 04 24 06 00 00 00 	mov    DWORD PTR [esp],0x6
c0008131:	31 db                	xor    ebx,ebx
c0008133:	31 f6                	xor    esi,esi
c0008135:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0008139:	bb 60 00 00 00       	mov    ebx,0x60
c000813e:	e8 13 fc ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008143:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008147:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c000814e:	e8 03 fc ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008153:	83 05 e8 4e 02 c0 02 	add    DWORD PTR ds:0xc0024ee8,0x2
c000815a:	31 c9                	xor    ecx,ecx
c000815c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000815f:	43                   	inc    ebx
c0008160:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0008164:	e8 ed fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008169:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000816f:	75 e9                	jne    c000815a <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008171:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008176:	bb 40 01 00 00       	mov    ebx,0x140
c000817b:	83 c0 20             	add    eax,0x20
c000817e:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008183:	eb 22                	jmp    c00081a7 <Phys::physicalMemorySetup(unsigned int)+0x23d>
c0008185:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008188:	31 d2                	xor    edx,edx
c000818a:	43                   	inc    ebx
c000818b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000818f:	e8 c2 fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c0008194:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008199:	40                   	inc    eax
c000819a:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081a0:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081a5:	74 07                	je     c00081ae <Phys::physicalMemorySetup(unsigned int)+0x244>
c00081a7:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ac:	7e d7                	jle    c0008185 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00081ae:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081b3:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081b8:	7f 22                	jg     c00081dc <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00081bd:	31 c0                	xor    eax,eax
c00081bf:	43                   	inc    ebx
c00081c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00081c4:	e8 8d fb ff ff       	call   c0007d56 <Phys::setPageState(unsigned long, bool)>
c00081c9:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081ce:	40                   	inc    eax
c00081cf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081d5:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081da:	75 d7                	jne    c00081b3 <Phys::physicalMemorySetup(unsigned int)+0x249>
c00081dc:	83 c4 4c             	add    esp,0x4c
c00081df:	5b                   	pop    ebx
c00081e0:	5e                   	pop    esi
c00081e1:	5f                   	pop    edi
c00081e2:	5d                   	pop    ebp
c00081e3:	c3                   	ret    
c00081e4:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c00081e8:	b8 00 00 08 00       	mov    eax,0x80000
c00081ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00081f1:	c7 04 24 e8 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9e8
c00081f8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00081fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008200:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008204:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008208:	e8 69 28 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000820d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0008211:	89 34 24             	mov    DWORD PTR [esp],esi
c0008214:	e8 0f fd ff ff       	call   c0007f28 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008219:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000821d:	c7 04 24 4d fa 01 c0 	mov    DWORD PTR [esp],0xc001fa4d
c0008224:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008228:	8b 2d e8 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024ee8
c000822e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008232:	01 e8                	add    eax,ebp
c0008234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008238:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000823f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008243:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008248:	e8 29 28 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000824d:	e9 eb fd ff ff       	jmp    c000803d <Phys::physicalMemorySetup(unsigned int)+0xd3>

c0008252 <Pipe::isAtty()>:
c0008252:	31 c0                	xor    eax,eax
c0008254:	c3                   	ret    
c0008255:	90                   	nop

c0008256 <Pipe::~Pipe()>:
c0008256:	83 ec 1c             	sub    esp,0x1c
c0008259:	ba ac fa 01 c0       	mov    edx,0xc001faac
c000825e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008262:	89 10                	mov    DWORD PTR [eax],edx
c0008264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008268:	89 04 24             	mov    DWORD PTR [esp],eax
c000826b:	e8 54 11 00 00       	call   c00093c4 <UnixFile::~UnixFile()>
c0008270:	90                   	nop
c0008271:	83 c4 1c             	add    esp,0x1c
c0008274:	c3                   	ret    
c0008275:	90                   	nop

c0008276 <Pipe::~Pipe()>:
c0008276:	83 ec 1c             	sub    esp,0x1c
c0008279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000827d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008280:	e8 d1 ff ff ff       	call   c0008256 <Pipe::~Pipe()>
c0008285:	c7 44 24 04 20 00 00 00 	mov    DWORD PTR [esp+0x4],0x20
c000828d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008291:	89 04 24             	mov    DWORD PTR [esp],eax
c0008294:	e8 c3 26 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c0008299:	83 c4 1c             	add    esp,0x1c
c000829c:	c3                   	ret    
c000829d:	90                   	nop

c000829e <Pipe::write(unsigned long long, void*, int*)>:
c000829e:	55                   	push   ebp
c000829f:	57                   	push   edi
c00082a0:	56                   	push   esi
c00082a1:	53                   	push   ebx
c00082a2:	83 ec 1c             	sub    esp,0x1c
c00082a5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00082a9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00082ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00082b1:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00082b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082b8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00082be:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082c2:	89 d8                	mov    eax,ebx
c00082c4:	89 d6                	mov    esi,edx
c00082c6:	89 d7                	mov    edi,edx
c00082c8:	c1 ff 1f             	sar    edi,0x1f
c00082cb:	03 34 24             	add    esi,DWORD PTR [esp]
c00082ce:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082d2:	c1 f8 1f             	sar    eax,0x1f
c00082d5:	39 f3                	cmp    ebx,esi
c00082d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082df:	19 f8                	sbb    eax,edi
c00082e1:	b8 01 00 00 00       	mov    eax,0x1
c00082e6:	72 72                	jb     c000835a <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082ef:	01 d0                	add    eax,edx
c00082f1:	99                   	cdq    
c00082f2:	f7 fb                	idiv   ebx
c00082f4:	89 d8                	mov    eax,ebx
c00082f6:	29 d0                	sub    eax,edx
c00082f8:	89 d6                	mov    esi,edx
c00082fa:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082fd:	89 c3                	mov    ebx,eax
c00082ff:	c1 fb 1f             	sar    ebx,0x1f
c0008302:	39 c2                	cmp    edx,eax
c0008304:	19 df                	sbb    edi,ebx
c0008306:	bb 00 00 00 00       	mov    ebx,0x0
c000830b:	72 04                	jb     c0008311 <Pipe::write(unsigned long long, void*, int*)+0x73>
c000830d:	89 d3                	mov    ebx,edx
c000830f:	29 c3                	sub    ebx,eax
c0008311:	89 d0                	mov    eax,edx
c0008313:	29 d8                	sub    eax,ebx
c0008315:	74 0d                	je     c0008324 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008317:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831a:	89 c1                	mov    ecx,eax
c000831c:	01 f7                	add    edi,esi
c000831e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008322:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008324:	85 db                	test   ebx,ebx
c0008326:	74 0d                	je     c0008335 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008328:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000832c:	89 d9                	mov    ecx,ebx
c000832e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008331:	89 c6                	mov    esi,eax
c0008333:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008335:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008338:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000833d:	75 10                	jne    c000834f <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000833f:	83 ec 0c             	sub    esp,0xc
c0008342:	68 69 fa 01 c0       	push   0xc001fa69
c0008347:	e8 d9 84 00 00       	call   c0010825 <KePanic(char const*)>
c000834c:	83 c4 10             	add    esp,0x10
c000834f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008353:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008356:	89 08                	mov    DWORD PTR [eax],ecx
c0008358:	31 c0                	xor    eax,eax
c000835a:	83 c4 1c             	add    esp,0x1c
c000835d:	5b                   	pop    ebx
c000835e:	5e                   	pop    esi
c000835f:	5f                   	pop    edi
c0008360:	5d                   	pop    ebp
c0008361:	c3                   	ret    

c0008362 <Pipe::read(unsigned long long, void*, int*)>:
c0008362:	55                   	push   ebp
c0008363:	57                   	push   edi
c0008364:	56                   	push   esi
c0008365:	53                   	push   ebx
c0008366:	83 ec 1c             	sub    esp,0x1c
c0008369:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000836d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008371:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008375:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008378:	89 c8                	mov    eax,ecx
c000837a:	99                   	cdq    
c000837b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000837f:	74 24                	je     c00083a5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008381:	39 f9                	cmp    ecx,edi
c0008383:	89 d1                	mov    ecx,edx
c0008385:	19 f1                	sbb    ecx,esi
c0008387:	73 1c                	jae    c00083a5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008389:	fa                   	cli    
c000838a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008390:	e8 bb cd 00 00       	call   c0015150 <schedule()>
c0008395:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000839a:	48                   	dec    eax
c000839b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00083a0:	75 d3                	jne    c0008375 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083a2:	fb                   	sti    
c00083a3:	eb d0                	jmp    c0008375 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00083a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00083a9:	39 f8                	cmp    eax,edi
c00083ab:	89 d1                	mov    ecx,edx
c00083ad:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00083b1:	19 f1                	sbb    ecx,esi
c00083b3:	73 08                	jae    c00083bd <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00083b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083c3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083c7:	29 f7                	sub    edi,esi
c00083c9:	89 f8                	mov    eax,edi
c00083cb:	99                   	cdq    
c00083cc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083d0:	89 d0                	mov    eax,edx
c00083d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083d6:	19 c2                	sbb    edx,eax
c00083d8:	89 f8                	mov    eax,edi
c00083da:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083df:	89 ea                	mov    edx,ebp
c00083e1:	29 c2                	sub    edx,eax
c00083e3:	85 c0                	test   eax,eax
c00083e5:	74 0b                	je     c00083f2 <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083e7:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083ea:	89 c1                	mov    ecx,eax
c00083ec:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083f2:	85 d2                	test   edx,edx
c00083f4:	74 0d                	je     c0008403 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083f6:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083fa:	89 d1                	mov    ecx,edx
c00083fc:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ff:	89 c7                	mov    edi,eax
c0008401:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008403:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008406:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008409:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000840c:	99                   	cdq    
c000840d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0008411:	89 f7                	mov    edi,esi
c0008413:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008417:	c1 ff 1f             	sar    edi,0x1f
c000841a:	57                   	push   edi
c000841b:	56                   	push   esi
c000841c:	52                   	push   edx
c000841d:	50                   	push   eax
c000841e:	e8 1d 61 01 00       	call   c001e540 <__umoddi3>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000842b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000842e:	75 10                	jne    c0008440 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0008430:	83 ec 0c             	sub    esp,0xc
c0008433:	68 86 fa 01 c0       	push   0xc001fa86
c0008438:	e8 e8 83 00 00       	call   c0010825 <KePanic(char const*)>
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008444:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008448:	89 10                	mov    DWORD PTR [eax],edx
c000844a:	83 c4 1c             	add    esp,0x1c
c000844d:	31 c0                	xor    eax,eax
c000844f:	5b                   	pop    ebx
c0008450:	5e                   	pop    esi
c0008451:	5f                   	pop    edi
c0008452:	5d                   	pop    ebp
c0008453:	c3                   	ret    

c0008454 <Pipe::Pipe(int)>:
c0008454:	83 ec 1c             	sub    esp,0x1c
c0008457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000845b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008463:	89 04 24             	mov    DWORD PTR [esp],eax
c0008466:	e8 93 0d 00 00       	call   c00091fe <UnixFile::UnixFile(int)>
c000846b:	ba ac fa 01 c0       	mov    edx,0xc001faac
c0008470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008474:	89 10                	mov    DWORD PTR [eax],edx
c0008476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000847a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000847e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008485:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000848c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008490:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008497:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000849b:	89 04 24             	mov    DWORD PTR [esp],eax
c000849e:	e8 59 f6 ff ff       	call   c0007afc <malloc>
c00084a3:	89 c2                	mov    edx,eax
c00084a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00084ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084b0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084b4:	90                   	nop
c00084b5:	83 c4 1c             	add    esp,0x1c
c00084b8:	c3                   	ret    
c00084b9:	90                   	nop

c00084ba <VgaText::isAtty()>:
c00084ba:	b0 01                	mov    al,0x1
c00084bc:	c3                   	ret    
c00084bd:	90                   	nop

c00084be <VgaText::~VgaText()>:
c00084be:	83 ec 1c             	sub    esp,0x1c
c00084c1:	ba f4 fa 01 c0       	mov    edx,0xc001faf4
c00084c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084ca:	89 10                	mov    DWORD PTR [eax],edx
c00084cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00084d3:	e8 ec 0e 00 00       	call   c00093c4 <UnixFile::~UnixFile()>
c00084d8:	90                   	nop
c00084d9:	83 c4 1c             	add    esp,0x1c
c00084dc:	c3                   	ret    
c00084dd:	90                   	nop

c00084de <VgaText::~VgaText()>:
c00084de:	83 ec 1c             	sub    esp,0x1c
c00084e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e8:	e8 d1 ff ff ff       	call   c00084be <VgaText::~VgaText()>
c00084ed:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00084f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00084fc:	e8 5b 24 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c0008501:	83 c4 1c             	add    esp,0x1c
c0008504:	c3                   	ret    
c0008505:	90                   	nop

c0008506 <VgaText::read(unsigned long long, void*, int*)>:
c0008506:	83 ec 10             	sub    esp,0x10
c0008509:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000850d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008515:	e8 ef 47 00 00       	call   c000cd09 <readKeyboard(VgaText*, char*, unsigned long)>
c000851a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000851e:	89 02                	mov    DWORD PTR [edx],eax
c0008520:	31 c0                	xor    eax,eax
c0008522:	83 c4 1c             	add    esp,0x1c
c0008525:	c3                   	ret    

c0008526 <setTerminalScrollLock(bool)>:
c0008526:	c3                   	ret    

c0008527 <doTerminalCycle()>:
c0008527:	c3                   	ret    

c0008528 <addToTerminalCycle(VgaText*)>:
c0008528:	c3                   	ret    

c0008529 <scrollTerminalScrollLock(int)>:
c0008529:	c3                   	ret    

c000852a <VgaText::updateTitle()>:
c000852a:	c3                   	ret    
c000852b:	90                   	nop

c000852c <VgaText::load()>:
c000852c:	c3                   	ret    
c000852d:	90                   	nop

c000852e <VgaText::updateCursor()>:
c000852e:	83 ec 14             	sub    esp,0x14
c0008531:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008535:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008538:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000853b:	e8 b0 f7 00 00       	call   c0017cf0 <HalConsoleCursorUpdate(int, int)>
c0008540:	83 c4 1c             	add    esp,0x1c
c0008543:	c3                   	ret    

c0008544 <VgaText::doANSI_SGR(int)>:
c0008544:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000854c:	85 d2                	test   edx,edx
c000854e:	75 0b                	jne    c000855b <VgaText::doANSI_SGR(int)+0x17>
c0008550:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008553:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008556:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008559:	eb 59                	jmp    c00085b4 <VgaText::doANSI_SGR(int)+0x70>
c000855b:	83 fa 07             	cmp    edx,0x7
c000855e:	75 0b                	jne    c000856b <VgaText::doANSI_SGR(int)+0x27>
c0008560:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008563:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008566:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008569:	eb 49                	jmp    c00085b4 <VgaText::doANSI_SGR(int)+0x70>
c000856b:	83 fa 1b             	cmp    edx,0x1b
c000856e:	74 e0                	je     c0008550 <VgaText::doANSI_SGR(int)+0xc>
c0008570:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008573:	83 f9 07             	cmp    ecx,0x7
c0008576:	77 09                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x3d>
c0008578:	8b 14 8d 60 1c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde3a0]
c000857f:	eb 20                	jmp    c00085a1 <VgaText::doANSI_SGR(int)+0x5d>
c0008581:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 09                	ja     c0008592 <VgaText::doANSI_SGR(int)+0x4e>
c0008589:	8b 14 8d 60 1c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde3a0]
c0008590:	eb 22                	jmp    c00085b4 <VgaText::doANSI_SGR(int)+0x70>
c0008592:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008595:	83 f9 07             	cmp    ecx,0x7
c0008598:	77 0b                	ja     c00085a5 <VgaText::doANSI_SGR(int)+0x61>
c000859a:	8b 14 95 18 1b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde4e8]
c00085a1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085a4:	c3                   	ret    
c00085a5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00085a8:	83 f9 07             	cmp    ecx,0x7
c00085ab:	77 0a                	ja     c00085b7 <VgaText::doANSI_SGR(int)+0x73>
c00085ad:	8b 14 95 f0 1a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde510]
c00085b4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b7:	c3                   	ret    

c00085b8 <VgaText::setDefaultBgColour(VgaColour)>:
c00085b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085c3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085c6:	c3                   	ret    
c00085c7:	90                   	nop

c00085c8 <VgaText::setDefaultFgColour(VgaColour)>:
c00085c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085d0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085d3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085d6:	c3                   	ret    
c00085d7:	90                   	nop

c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085d8:	53                   	push   ebx
c00085d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085e5:	51                   	push   ecx
c00085e6:	e8 cd ff ff ff       	call   c00085b8 <VgaText::setDefaultBgColour(VgaColour)>
c00085eb:	58                   	pop    eax
c00085ec:	5a                   	pop    edx
c00085ed:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085f5:	5b                   	pop    ebx
c00085f6:	eb d0                	jmp    c00085c8 <VgaText::setDefaultFgColour(VgaColour)>

c00085f8 <VgaText::setTitleTextColour(VgaColour)>:
c00085f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008600:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008603:	c3                   	ret    

c0008604 <VgaText::setTitleColour(VgaColour)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000860c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000860f:	c3                   	ret    

c0008610 <VgaText::setTitle(char*)>:
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008612:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008616:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000861b:	24 0f                	and    al,0xf
c000861d:	c1 e2 04             	shl    edx,0x4
c0008620:	08 d0                	or     al,dl
c0008622:	c3                   	ret    
c0008623:	90                   	nop

c0008624 <VgaText::scrollScreen()>:
c0008624:	55                   	push   ebp
c0008625:	57                   	push   edi
c0008626:	56                   	push   esi
c0008627:	be 01 00 00 00       	mov    esi,0x1
c000862c:	53                   	push   ebx
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008634:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008637:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000863d:	31 ff                	xor    edi,edi
c000863f:	01 e9                	add    ecx,ebp
c0008641:	8a 01                	mov    al,BYTE PTR [ecx]
c0008643:	83 fe 18             	cmp    esi,0x18
c0008646:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000864c:	75 20                	jne    c000866e <VgaText::scrollScreen()+0x4a>
c000864e:	f7 c7 01 00 00 00    	test   edi,0x1
c0008654:	74 15                	je     c000866b <VgaText::scrollScreen()+0x47>
c0008656:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000865a:	50                   	push   eax
c000865b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000865f:	50                   	push   eax
c0008660:	e8 ad ff ff ff       	call   c0008612 <VgaText::combineColours(unsigned char, unsigned char)>
c0008665:	5a                   	pop    edx
c0008666:	5a                   	pop    edx
c0008667:	88 01                	mov    BYTE PTR [ecx],al
c0008669:	eb 03                	jmp    c000866e <VgaText::scrollScreen()+0x4a>
c000866b:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000866e:	47                   	inc    edi
c000866f:	41                   	inc    ecx
c0008670:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008676:	75 c9                	jne    c0008641 <VgaText::scrollScreen()+0x1d>
c0008678:	46                   	inc    esi
c0008679:	83 fe 19             	cmp    esi,0x19
c000867c:	75 b9                	jne    c0008637 <VgaText::scrollScreen()+0x13>
c000867e:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008684:	75 1f                	jne    c00086a5 <VgaText::scrollScreen()+0x81>
c0008686:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000868a:	74 05                	je     c0008691 <VgaText::scrollScreen()+0x6d>
c000868c:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000868f:	eb 14                	jmp    c00086a5 <VgaText::scrollScreen()+0x81>
c0008691:	50                   	push   eax
c0008692:	50                   	push   eax
c0008693:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008697:	50                   	push   eax
c0008698:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000869c:	50                   	push   eax
c000869d:	e8 da f4 00 00       	call   c0017b7c <HalConsoleScroll(int, int)>
c00086a2:	83 c4 10             	add    esp,0x10
c00086a5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00086a9:	83 c4 0c             	add    esp,0xc
c00086ac:	5b                   	pop    ebx
c00086ad:	5e                   	pop    esi
c00086ae:	5f                   	pop    edi
c00086af:	5d                   	pop    ebp
c00086b0:	e9 79 fe ff ff       	jmp    c000852e <VgaText::updateCursor()>
c00086b5:	90                   	nop

c00086b6 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086b6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086c0:	c1 e0 08             	shl    eax,0x8
c00086c3:	09 d0                	or     eax,edx
c00086c5:	c3                   	ret    

c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086c6:	55                   	push   ebp
c00086c7:	57                   	push   edi
c00086c8:	56                   	push   esi
c00086c9:	53                   	push   ebx
c00086ca:	83 ec 1c             	sub    esp,0x1c
c00086cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086d1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086d9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086e5:	0f b6 c3             	movzx  eax,bl
c00086e8:	50                   	push   eax
c00086e9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ee:	50                   	push   eax
c00086ef:	e8 1e ff ff ff       	call   c0008612 <VgaText::combineColours(unsigned char, unsigned char)>
c00086f4:	5a                   	pop    edx
c00086f5:	59                   	pop    ecx
c00086f6:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086fb:	0f b6 c0             	movzx  eax,al
c00086fe:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008702:	50                   	push   eax
c0008703:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008707:	e8 aa ff ff ff       	call   c00086b6 <VgaText::combineCharAndColour(char, unsigned char)>
c000870c:	5a                   	pop    edx
c000870d:	6b d7 50             	imul   edx,edi,0x50
c0008710:	59                   	pop    ecx
c0008711:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008714:	01 f2                	add    edx,esi
c0008716:	0f b7 d2             	movzx  edx,dx
c0008719:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000871d:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c0008723:	75 28                	jne    c000874d <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008725:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008729:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000872d:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008731:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008735:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000873d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008741:	83 c4 1c             	add    esp,0x1c
c0008744:	5b                   	pop    ebx
c0008745:	5e                   	pop    esi
c0008746:	5f                   	pop    edi
c0008747:	5d                   	pop    ebp
c0008748:	e9 37 f5 00 00       	jmp    c0017c84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000874d:	83 c4 1c             	add    esp,0x1c
c0008750:	5b                   	pop    ebx
c0008751:	5e                   	pop    esi
c0008752:	5f                   	pop    edi
c0008753:	5d                   	pop    ebp
c0008754:	c3                   	ret    
c0008755:	90                   	nop

c0008756 <VgaText::getCursorX()>:
c0008756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000875d:	c3                   	ret    

c000875e <VgaText::getCursorY()>:
c000875e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008762:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008765:	c3                   	ret    

c0008766 <VgaText::setCursor(int, int)>:
c0008766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000876a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000876e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008771:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008775:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008778:	e9 b1 fd ff ff       	jmp    c000852e <VgaText::updateCursor()>

c000877d <setActiveTerminal(VgaText*)>:
c000877d:	53                   	push   ebx
c000877e:	83 ec 08             	sub    esp,0x8
c0008781:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008785:	85 db                	test   ebx,ebx
c0008787:	75 11                	jne    c000879a <setActiveTerminal(VgaText*)+0x1d>
c0008789:	c7 44 24 10 c0 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fac0
c0008791:	83 c4 08             	add    esp,0x8
c0008794:	5b                   	pop    ebx
c0008795:	e9 8b 80 00 00       	jmp    c0010825 <KePanic(char const*)>
c000879a:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000879f:	85 c0                	test   eax,eax
c00087a1:	74 0c                	je     c00087af <setActiveTerminal(VgaText*)+0x32>
c00087a3:	83 ec 0c             	sub    esp,0xc
c00087a6:	50                   	push   eax
c00087a7:	e8 82 fd ff ff       	call   c000852e <VgaText::updateCursor()>
c00087ac:	83 c4 10             	add    esp,0x10
c00087af:	50                   	push   eax
c00087b0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087b3:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c00087b9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087bc:	53                   	push   ebx
c00087bd:	e8 a4 ff ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c00087c2:	83 c4 18             	add    esp,0x18
c00087c5:	5b                   	pop    ebx
c00087c6:	c3                   	ret    
c00087c7:	90                   	nop

c00087c8 <VgaText::clearScreen()>:
c00087c8:	57                   	push   edi
c00087c9:	56                   	push   esi
c00087ca:	31 f6                	xor    esi,esi
c00087cc:	53                   	push   ebx
c00087cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087d1:	52                   	push   edx
c00087d2:	6a 00                	push   0x0
c00087d4:	6a 00                	push   0x0
c00087d6:	53                   	push   ebx
c00087d7:	e8 8a ff ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c00087dc:	83 c4 10             	add    esp,0x10
c00087df:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087e6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087e9:	7e 20                	jle    c000880b <VgaText::clearScreen()+0x43>
c00087eb:	31 ff                	xor    edi,edi
c00087ed:	50                   	push   eax
c00087ee:	50                   	push   eax
c00087ef:	56                   	push   esi
c00087f0:	57                   	push   edi
c00087f1:	47                   	inc    edi
c00087f2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087f5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087f8:	6a 20                	push   0x20
c00087fa:	53                   	push   ebx
c00087fb:	e8 c6 fe ff ff       	call   c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008800:	83 c4 20             	add    esp,0x20
c0008803:	83 ff 50             	cmp    edi,0x50
c0008806:	75 e5                	jne    c00087ed <VgaText::clearScreen()+0x25>
c0008808:	46                   	inc    esi
c0008809:	eb db                	jmp    c00087e6 <VgaText::clearScreen()+0x1e>
c000880b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008812:	5b                   	pop    ebx
c0008813:	5e                   	pop    esi
c0008814:	5f                   	pop    edi
c0008815:	c3                   	ret    

c0008816 <VgaText::setCursorX(int)>:
c0008816:	83 ec 10             	sub    esp,0x10
c0008819:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000881d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008824:	50                   	push   eax
c0008825:	e8 3c ff ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c000882a:	83 c4 1c             	add    esp,0x1c
c000882d:	c3                   	ret    

c000882e <VgaText::setCursorY(int)>:
c000882e:	83 ec 10             	sub    esp,0x10
c0008831:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008835:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008839:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000883c:	50                   	push   eax
c000883d:	e8 24 ff ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c0008842:	83 c4 1c             	add    esp,0x1c
c0008845:	c3                   	ret    

c0008846 <VgaText::incrementCursor(bool)>:
c0008846:	53                   	push   ebx
c0008847:	83 ec 18             	sub    esp,0x18
c000884a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000884e:	8a 54 24 24          	mov    dl,BYTE PTR [esp+0x24]
c0008852:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008855:	40                   	inc    eax
c0008856:	83 f8 50             	cmp    eax,0x50
c0008859:	74 05                	je     c0008860 <VgaText::incrementCursor(bool)+0x1a>
c000885b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000885e:	eb 2c                	jmp    c000888c <VgaText::incrementCursor(bool)+0x46>
c0008860:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008867:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000886a:	8d 48 01             	lea    ecx,[eax+0x1]
c000886d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008870:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008873:	75 17                	jne    c000888c <VgaText::incrementCursor(bool)+0x46>
c0008875:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0008879:	83 ec 0c             	sub    esp,0xc
c000887c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000887f:	53                   	push   ebx
c0008880:	e8 9f fd ff ff       	call   c0008624 <VgaText::scrollScreen()>
c0008885:	83 c4 10             	add    esp,0x10
c0008888:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000888c:	84 d2                	test   dl,dl
c000888e:	74 0d                	je     c000889d <VgaText::incrementCursor(bool)+0x57>
c0008890:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008894:	83 c4 18             	add    esp,0x18
c0008897:	5b                   	pop    ebx
c0008898:	e9 91 fc ff ff       	jmp    c000852e <VgaText::updateCursor()>
c000889d:	83 c4 18             	add    esp,0x18
c00088a0:	5b                   	pop    ebx
c00088a1:	c3                   	ret    

c00088a2 <VgaText::decrementCursor(bool)>:
c00088a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088a6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00088aa:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088ad:	85 c0                	test   eax,eax
c00088af:	74 04                	je     c00088b5 <VgaText::decrementCursor(bool)+0x13>
c00088b1:	48                   	dec    eax
c00088b2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00088b5:	84 c9                	test   cl,cl
c00088b7:	74 09                	je     c00088c2 <VgaText::decrementCursor(bool)+0x20>
c00088b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088bd:	e9 6c fc ff ff       	jmp    c000852e <VgaText::updateCursor()>
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088c4:	53                   	push   ebx
c00088c5:	83 ec 08             	sub    esp,0x8
c00088c8:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088d1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088d9:	3c 07                	cmp    al,0x7
c00088db:	75 21                	jne    c00088fe <VgaText::putchar(char, VgaColour, VgaColour)+0x3a>
c00088dd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088e5:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088ed:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088f5:	83 c4 08             	add    esp,0x8
c00088f8:	5b                   	pop    ebx
c00088f9:	e9 ca 2f 00 00       	jmp    c000b8c8 <Krnl::beep(int, int, bool)>
c00088fe:	3c 0d                	cmp    al,0xd
c0008900:	75 09                	jne    c000890b <VgaText::putchar(char, VgaColour, VgaColour)+0x47>
c0008902:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008909:	eb 2c                	jmp    c0008937 <VgaText::putchar(char, VgaColour, VgaColour)+0x73>
c000890b:	3c 0a                	cmp    al,0xa
c000890d:	75 31                	jne    c0008940 <VgaText::putchar(char, VgaColour, VgaColour)+0x7c>
c000890f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008916:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008919:	8d 50 01             	lea    edx,[eax+0x1]
c000891c:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000891f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008922:	75 0f                	jne    c0008933 <VgaText::putchar(char, VgaColour, VgaColour)+0x6f>
c0008924:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008927:	83 ec 0c             	sub    esp,0xc
c000892a:	53                   	push   ebx
c000892b:	e8 f4 fc ff ff       	call   c0008624 <VgaText::scrollScreen()>
c0008930:	83 c4 10             	add    esp,0x10
c0008933:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008937:	83 c4 08             	add    esp,0x8
c000893a:	5b                   	pop    ebx
c000893b:	e9 ee fb ff ff       	jmp    c000852e <VgaText::updateCursor()>
c0008940:	3c 08                	cmp    al,0x8
c0008942:	75 25                	jne    c0008969 <VgaText::putchar(char, VgaColour, VgaColour)+0xa5>
c0008944:	50                   	push   eax
c0008945:	50                   	push   eax
c0008946:	6a 01                	push   0x1
c0008948:	53                   	push   ebx
c0008949:	e8 54 ff ff ff       	call   c00088a2 <VgaText::decrementCursor(bool)>
c000894e:	5a                   	pop    edx
c000894f:	59                   	pop    ecx
c0008950:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008953:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008956:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008959:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000895c:	6a 20                	push   0x20
c000895e:	53                   	push   ebx
c000895f:	e8 62 fd ff ff       	call   c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008964:	83 c4 28             	add    esp,0x28
c0008967:	5b                   	pop    ebx
c0008968:	c3                   	ret    
c0008969:	83 ec 08             	sub    esp,0x8
c000896c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000896f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008972:	51                   	push   ecx
c0008973:	52                   	push   edx
c0008974:	50                   	push   eax
c0008975:	53                   	push   ebx
c0008976:	e8 4b fd ff ff       	call   c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000897b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000897f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008987:	83 c4 28             	add    esp,0x28
c000898a:	5b                   	pop    ebx
c000898b:	e9 b6 fe ff ff       	jmp    c0008846 <VgaText::incrementCursor(bool)>

c0008990 <VgaText::putchar(char)>:
c0008990:	56                   	push   esi
c0008991:	53                   	push   ebx
c0008992:	83 ec 14             	sub    esp,0x14
c0008995:	0f be 44 24 24       	movsx  eax,BYTE PTR [esp+0x24]
c000899a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000899e:	3c 5b                	cmp    al,0x5b
c00089a0:	75 18                	jne    c00089ba <VgaText::putchar(char)+0x2a>
c00089a2:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00089a6:	74 1f                	je     c00089c7 <VgaText::putchar(char)+0x37>
c00089a8:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00089ae:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089b5:	e9 bc 00 00 00       	jmp    c0008a76 <VgaText::putchar(char)+0xe6>
c00089ba:	3c 1b                	cmp    al,0x1b
c00089bc:	75 09                	jne    c00089c7 <VgaText::putchar(char)+0x37>
c00089be:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089c2:	e9 af 00 00 00       	jmp    c0008a76 <VgaText::putchar(char)+0xe6>
c00089c7:	8a 53 41             	mov    dl,BYTE PTR [ebx+0x41]
c00089ca:	84 d2                	test   dl,dl
c00089cc:	0f 84 94 00 00 00    	je     c0008a66 <VgaText::putchar(char)+0xd6>
c00089d2:	88 c1                	mov    cl,al
c00089d4:	80 e9 40             	sub    cl,0x40
c00089d7:	80 f9 3e             	cmp    cl,0x3e
c00089da:	77 76                	ja     c0008a52 <VgaText::putchar(char)+0xc2>
c00089dc:	3c 6d                	cmp    al,0x6d
c00089de:	75 47                	jne    c0008a27 <VgaText::putchar(char)+0x97>
c00089e0:	31 f6                	xor    esi,esi
c00089e2:	31 c9                	xor    ecx,ecx
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089e9:	7e 2d                	jle    c0008a18 <VgaText::putchar(char)+0x88>
c00089eb:	0f be 4c 33 42       	movsx  ecx,BYTE PTR [ebx+esi*1+0x42]
c00089f0:	80 f9 3b             	cmp    cl,0x3b
c00089f3:	75 17                	jne    c0008a0c <VgaText::putchar(char)+0x7c>
c00089f5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00089f9:	50                   	push   eax
c00089fa:	53                   	push   ebx
c00089fb:	e8 44 fb ff ff       	call   c0008544 <VgaText::doANSI_SGR(int)>
c0008a00:	59                   	pop    ecx
c0008a01:	31 c9                	xor    ecx,ecx
c0008a03:	58                   	pop    eax
c0008a04:	31 c0                	xor    eax,eax
c0008a06:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0008a0a:	eb 09                	jmp    c0008a15 <VgaText::putchar(char)+0x85>
c0008a0c:	6b c0 0a             	imul   eax,eax,0xa
c0008a0f:	8d 44 08 d0          	lea    eax,[eax+ecx*1-0x30]
c0008a13:	88 d1                	mov    cl,dl
c0008a15:	46                   	inc    esi
c0008a16:	eb ce                	jmp    c00089e6 <VgaText::putchar(char)+0x56>
c0008a18:	84 c9                	test   cl,cl
c0008a1a:	74 2e                	je     c0008a4a <VgaText::putchar(char)+0xba>
c0008a1c:	50                   	push   eax
c0008a1d:	53                   	push   ebx
c0008a1e:	e8 21 fb ff ff       	call   c0008544 <VgaText::doANSI_SGR(int)>
c0008a23:	58                   	pop    eax
c0008a24:	5a                   	pop    edx
c0008a25:	eb 23                	jmp    c0008a4a <VgaText::putchar(char)+0xba>
c0008a27:	3c 4a                	cmp    al,0x4a
c0008a29:	75 1f                	jne    c0008a4a <VgaText::putchar(char)+0xba>
c0008a2b:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a2f:	75 19                	jne    c0008a4a <VgaText::putchar(char)+0xba>
c0008a31:	83 ec 0c             	sub    esp,0xc
c0008a34:	53                   	push   ebx
c0008a35:	e8 8e fd ff ff       	call   c00087c8 <VgaText::clearScreen()>
c0008a3a:	83 c4 0c             	add    esp,0xc
c0008a3d:	6a 00                	push   0x0
c0008a3f:	6a 00                	push   0x0
c0008a41:	53                   	push   ebx
c0008a42:	e8 1f fd ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c0008a47:	83 c4 10             	add    esp,0x10
c0008a4a:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a50:	eb 24                	jmp    c0008a76 <VgaText::putchar(char)+0xe6>
c0008a52:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008a55:	83 fa 0e             	cmp    edx,0xe
c0008a58:	7f 1c                	jg     c0008a76 <VgaText::putchar(char)+0xe6>
c0008a5a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008a5d:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a60:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008a64:	eb 10                	jmp    c0008a76 <VgaText::putchar(char)+0xe6>
c0008a66:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a69:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a6c:	50                   	push   eax
c0008a6d:	53                   	push   ebx
c0008a6e:	e8 51 fe ff ff       	call   c00088c4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a73:	83 c4 10             	add    esp,0x10
c0008a76:	83 c4 14             	add    esp,0x14
c0008a79:	5b                   	pop    ebx
c0008a7a:	5e                   	pop    esi
c0008a7b:	c3                   	ret    

c0008a7c <VgaText::putx(unsigned int)>:
c0008a7c:	57                   	push   edi
c0008a7d:	b9 11 00 00 00       	mov    ecx,0x11
c0008a82:	56                   	push   esi
c0008a83:	be ce fa 01 c0       	mov    esi,0xc001face
c0008a88:	53                   	push   ebx
c0008a89:	83 ec 20             	sub    esp,0x20
c0008a8c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a90:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a94:	fc                   	cld    
c0008a95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a97:	be 08 00 00 00       	mov    esi,0x8
c0008a9c:	50                   	push   eax
c0008a9d:	50                   	push   eax
c0008a9e:	89 d8                	mov    eax,ebx
c0008aa0:	c1 e8 1c             	shr    eax,0x1c
c0008aa3:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008aa8:	c1 e3 04             	shl    ebx,0x4
c0008aab:	50                   	push   eax
c0008aac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008ab0:	e8 db fe ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	4e                   	dec    esi
c0008ab9:	75 e1                	jne    c0008a9c <VgaText::putx(unsigned int)+0x20>
c0008abb:	83 c4 20             	add    esp,0x20
c0008abe:	5b                   	pop    ebx
c0008abf:	5e                   	pop    esi
c0008ac0:	5f                   	pop    edi
c0008ac1:	c3                   	ret    

c0008ac2 <VgaText::puts(char const*)>:
c0008ac2:	53                   	push   ebx
c0008ac3:	83 ec 08             	sub    esp,0x8
c0008ac6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008acd:	84 c0                	test   al,al
c0008acf:	74 12                	je     c0008ae3 <VgaText::puts(char const*)+0x21>
c0008ad1:	51                   	push   ecx
c0008ad2:	43                   	inc    ebx
c0008ad3:	51                   	push   ecx
c0008ad4:	50                   	push   eax
c0008ad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad9:	e8 b2 fe ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	eb e7                	jmp    c0008aca <VgaText::puts(char const*)+0x8>
c0008ae3:	83 c4 08             	add    esp,0x8
c0008ae6:	5b                   	pop    ebx
c0008ae7:	c3                   	ret    

c0008ae8 <VgaText::write(unsigned long long, void*, int*)>:
c0008ae8:	55                   	push   ebp
c0008ae9:	57                   	push   edi
c0008aea:	56                   	push   esi
c0008aeb:	53                   	push   ebx
c0008aec:	83 ec 0c             	sub    esp,0xc
c0008aef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008af3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008af7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008afb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008b02:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008b05:	39 eb                	cmp    ebx,ebp
c0008b07:	74 13                	je     c0008b1c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008b09:	50                   	push   eax
c0008b0a:	43                   	inc    ebx
c0008b0b:	50                   	push   eax
c0008b0c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008b10:	50                   	push   eax
c0008b11:	56                   	push   esi
c0008b12:	e8 79 fe ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008b17:	83 c4 10             	add    esp,0x10
c0008b1a:	eb e9                	jmp    c0008b05 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b1c:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b27:	89 38                	mov    DWORD PTR [eax],edi
c0008b29:	83 c4 0c             	add    esp,0xc
c0008b2c:	31 c0                	xor    eax,eax
c0008b2e:	5b                   	pop    ebx
c0008b2f:	5e                   	pop    esi
c0008b30:	5f                   	pop    edi
c0008b31:	5d                   	pop    ebp
c0008b32:	c3                   	ret    
c0008b33:	90                   	nop

c0008b34 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b34:	55                   	push   ebp
c0008b35:	57                   	push   edi
c0008b36:	56                   	push   esi
c0008b37:	53                   	push   ebx
c0008b38:	83 ec 0c             	sub    esp,0xc
c0008b3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b44:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b4b:	50                   	push   eax
c0008b4c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b51:	50                   	push   eax
c0008b52:	e8 bb fa ff ff       	call   c0008612 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b57:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b5b:	5a                   	pop    edx
c0008b5c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b5f:	59                   	pop    ecx
c0008b60:	0f b6 e8             	movzx  ebp,al
c0008b63:	0f b7 f6             	movzx  esi,si
c0008b66:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b6a:	01 f6                	add    esi,esi
c0008b6c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b6f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b72:	84 c0                	test   al,al
c0008b74:	0f 84 ec 00 00 00    	je     c0008c66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x132>
c0008b7a:	3c 0d                	cmp    al,0xd
c0008b7c:	75 0c                	jne    c0008b8a <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008b7e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b85:	e9 d6 00 00 00       	jmp    c0008c60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008b8a:	3c 0a                	cmp    al,0xa
c0008b8c:	75 44                	jne    c0008bd2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c0008b8e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b95:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b98:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b9b:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b9e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008ba1:	75 0f                	jne    c0008bb2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008ba3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008ba6:	83 ec 0c             	sub    esp,0xc
c0008ba9:	53                   	push   ebx
c0008baa:	e8 75 fa ff ff       	call   c0008624 <VgaText::scrollScreen()>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	83 ec 0c             	sub    esp,0xc
c0008bb5:	53                   	push   ebx
c0008bb6:	e8 73 f9 ff ff       	call   c000852e <VgaText::updateCursor()>
c0008bbb:	83 c4 10             	add    esp,0x10
c0008bbe:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bc2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bc5:	0f b7 f6             	movzx  esi,si
c0008bc8:	01 f6                	add    esi,esi
c0008bca:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bcd:	e9 8e 00 00 00       	jmp    c0008c60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008bd2:	3c 08                	cmp    al,0x8
c0008bd4:	75 34                	jne    c0008c0a <VgaText::puts(char const*, VgaColour, VgaColour)+0xd6>
c0008bd6:	51                   	push   ecx
c0008bd7:	51                   	push   ecx
c0008bd8:	6a 01                	push   0x1
c0008bda:	53                   	push   ebx
c0008bdb:	e8 c2 fc ff ff       	call   c00088a2 <VgaText::decrementCursor(bool)>
c0008be0:	5e                   	pop    esi
c0008be1:	58                   	pop    eax
c0008be2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008be5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008be8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008beb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bee:	6a 20                	push   0x20
c0008bf0:	53                   	push   ebx
c0008bf1:	e8 d0 fa ff ff       	call   c00086c6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bf6:	83 c4 20             	add    esp,0x20
c0008bf9:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bfd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008c00:	0f b7 f6             	movzx  esi,si
c0008c03:	01 f6                	add    esi,esi
c0008c05:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c08:	eb 56                	jmp    c0008c60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008c0a:	52                   	push   edx
c0008c0b:	52                   	push   edx
c0008c0c:	55                   	push   ebp
c0008c0d:	50                   	push   eax
c0008c0e:	e8 a3 fa ff ff       	call   c00086b6 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c13:	83 c4 10             	add    esp,0x10
c0008c16:	66 89 06             	mov    WORD PTR [esi],ax
c0008c19:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008c1f:	75 1d                	jne    c0008c3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x10a>
c0008c21:	83 ec 0c             	sub    esp,0xc
c0008c24:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c27:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c2a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c2e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c32:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c35:	50                   	push   eax
c0008c36:	e8 49 f0 00 00       	call   c0017c84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c3b:	83 c4 20             	add    esp,0x20
c0008c3e:	50                   	push   eax
c0008c3f:	83 c6 02             	add    esi,0x2
c0008c42:	50                   	push   eax
c0008c43:	6a 00                	push   0x0
c0008c45:	53                   	push   ebx
c0008c46:	e8 fb fb ff ff       	call   c0008846 <VgaText::incrementCursor(bool)>
c0008c4b:	83 c4 10             	add    esp,0x10
c0008c4e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c52:	75 0c                	jne    c0008c60 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12c>
c0008c54:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c58:	0f b7 f6             	movzx  esi,si
c0008c5b:	01 f6                	add    esi,esi
c0008c5d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c60:	47                   	inc    edi
c0008c61:	e9 09 ff ff ff       	jmp    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c66:	83 ec 0c             	sub    esp,0xc
c0008c69:	53                   	push   ebx
c0008c6a:	e8 bf f8 ff ff       	call   c000852e <VgaText::updateCursor()>
c0008c6f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c76:	83 c4 1c             	add    esp,0x1c
c0008c79:	5b                   	pop    ebx
c0008c7a:	5e                   	pop    esi
c0008c7b:	5f                   	pop    edi
c0008c7c:	5d                   	pop    ebp
c0008c7d:	c3                   	ret    

c0008c7e <VgaText::VgaText(char const*)>:
c0008c7e:	56                   	push   esi
c0008c7f:	53                   	push   ebx
c0008c80:	83 ec 14             	sub    esp,0x14
c0008c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c87:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008c8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c92:	e8 67 05 00 00       	call   c00091fe <UnixFile::UnixFile(int)>
c0008c97:	ba f4 fa 01 c0       	mov    edx,0xc001faf4
c0008c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ca0:	89 10                	mov    DWORD PTR [eax],edx
c0008ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ca6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008cad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cb1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cbc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cc4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ccc:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ce2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ced:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cf8:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cff:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008d06:	e8 15 09 00 00       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0008d0b:	89 c2                	mov    edx,eax
c0008d0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d11:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d14:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d21:	89 c6                	mov    esi,eax
c0008d23:	e8 e4 f0 ff ff       	call   c0007e0c <Phys::allocatePage()>
c0008d28:	c7 44 24 0c 05 0c 00 00 	mov    DWORD PTR [esp+0xc],0xc05
c0008d30:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0008d34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d3b:	e8 02 10 00 00       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d47:	c7 44 24 08 a0 0f 00 00 	mov    DWORD PTR [esp+0x8],0xfa0
c0008d4f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d57:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d5a:	e8 21 78 ff ff       	call   c0000580 <memset>
c0008d5f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d67:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0008d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d73:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d76:	e8 5d f8 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d7b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0008d83:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d92:	e8 cf f9 ff ff       	call   c0008766 <VgaText::setCursor(int, int)>
c0008d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008d9e:	e8 25 fa ff ff       	call   c00087c8 <VgaText::clearScreen()>
c0008da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da7:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008dab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008daf:	05 82 00 00 00       	add    eax,0x82
c0008db4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008dbc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008dc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0008dc7:	e8 b4 77 ff ff       	call   c0000580 <memset>
c0008dcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dd0:	05 02 01 00 00       	add    eax,0x102
c0008dd5:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0008ddd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008de5:	89 04 24             	mov    DWORD PTR [esp],eax
c0008de8:	e8 93 77 ff ff       	call   c0000580 <memset>
c0008ded:	90                   	nop
c0008dee:	83 c4 14             	add    esp,0x14
c0008df1:	5b                   	pop    ebx
c0008df2:	5e                   	pop    esi
c0008df3:	c3                   	ret    

c0008df4 <VgaText::receiveKey(unsigned char)>:
c0008df4:	55                   	push   ebp
c0008df5:	57                   	push   edi
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 1c             	sub    esp,0x1c
c0008dfb:	8a 5c 24 34          	mov    bl,BYTE PTR [esp+0x34]
c0008dff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008e03:	84 db                	test   bl,bl
c0008e05:	0f 84 3f 01 00 00    	je     c0008f4a <VgaText::receiveKey(unsigned char)+0x156>
c0008e0b:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008e11:	80 fb 08             	cmp    bl,0x8
c0008e14:	75 68                	jne    c0008e7e <VgaText::receiveKey(unsigned char)+0x8a>
c0008e16:	83 ec 0c             	sub    esp,0xc
c0008e19:	57                   	push   edi
c0008e1a:	e8 01 78 ff ff       	call   c0000620 <strlen>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	85 c0                	test   eax,eax
c0008e24:	0f 84 e6 00 00 00    	je     c0008f10 <VgaText::receiveKey(unsigned char)+0x11c>
c0008e2a:	50                   	push   eax
c0008e2b:	50                   	push   eax
c0008e2c:	6a 08                	push   0x8
c0008e2e:	56                   	push   esi
c0008e2f:	e8 5c fb ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008e34:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008e37:	e8 e4 77 ff ff       	call   c0000620 <strlen>
c0008e3c:	83 c4 10             	add    esp,0x10
c0008e3f:	8a 84 06 81 00 00 00 	mov    al,BYTE PTR [esi+eax*1+0x81]
c0008e46:	3c 1f                	cmp    al,0x1f
c0008e48:	7f 1e                	jg     c0008e68 <VgaText::receiveKey(unsigned char)+0x74>
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	80 ea 08             	sub    dl,0x8
c0008e4f:	80 fa 02             	cmp    dl,0x2
c0008e52:	76 14                	jbe    c0008e68 <VgaText::receiveKey(unsigned char)+0x74>
c0008e54:	3c 0d                	cmp    al,0xd
c0008e56:	74 10                	je     c0008e68 <VgaText::receiveKey(unsigned char)+0x74>
c0008e58:	55                   	push   ebp
c0008e59:	55                   	push   ebp
c0008e5a:	68 df fa 01 c0       	push   0xc001fadf
c0008e5f:	56                   	push   esi
c0008e60:	e8 5d fc ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0008e65:	83 c4 10             	add    esp,0x10
c0008e68:	83 ec 0c             	sub    esp,0xc
c0008e6b:	57                   	push   edi
c0008e6c:	e8 af 77 ff ff       	call   c0000620 <strlen>
c0008e71:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008e79:	e9 8f 00 00 00       	jmp    c0008f0d <VgaText::receiveKey(unsigned char)+0x119>
c0008e7e:	8d 86 02 01 00 00    	lea    eax,[esi+0x102]
c0008e84:	83 ec 0c             	sub    esp,0xc
c0008e87:	50                   	push   eax
c0008e88:	e8 93 77 ff ff       	call   c0000620 <strlen>
c0008e8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008e90:	89 c5                	mov    ebp,eax
c0008e92:	e8 89 77 ff ff       	call   c0000620 <strlen>
c0008e97:	83 c4 10             	add    esp,0x10
c0008e9a:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008e9e:	3d 80 00 00 00       	cmp    eax,0x80
c0008ea3:	0f 87 a1 00 00 00    	ja     c0008f4a <VgaText::receiveKey(unsigned char)+0x156>
c0008ea9:	88 d8                	mov    al,bl
c0008eab:	fe c8                	dec    al
c0008ead:	3c 1e                	cmp    al,0x1e
c0008eaf:	77 37                	ja     c0008ee8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008eb1:	88 d8                	mov    al,bl
c0008eb3:	2c 09                	sub    al,0x9
c0008eb5:	3c 01                	cmp    al,0x1
c0008eb7:	76 2f                	jbe    c0008ee8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008eb9:	80 fb 0d             	cmp    bl,0xd
c0008ebc:	74 2a                	je     c0008ee8 <VgaText::receiveKey(unsigned char)+0xf4>
c0008ebe:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008ec1:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008ec4:	68 e5 fa 01 c0       	push   0xc001fae5
c0008ec9:	56                   	push   esi
c0008eca:	e8 65 fc ff ff       	call   c0008b34 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ecf:	88 d8                	mov    al,bl
c0008ed1:	ff 76 34             	push   DWORD PTR [esi+0x34]
c0008ed4:	04 40                	add    al,0x40
c0008ed6:	0f b6 c0             	movzx  eax,al
c0008ed9:	ff 76 30             	push   DWORD PTR [esi+0x30]
c0008edc:	50                   	push   eax
c0008edd:	56                   	push   esi
c0008ede:	e8 e1 f9 ff ff       	call   c00088c4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ee3:	83 c4 20             	add    esp,0x20
c0008ee6:	eb 0f                	jmp    c0008ef7 <VgaText::receiveKey(unsigned char)+0x103>
c0008ee8:	51                   	push   ecx
c0008ee9:	0f be c3             	movsx  eax,bl
c0008eec:	51                   	push   ecx
c0008eed:	50                   	push   eax
c0008eee:	56                   	push   esi
c0008eef:	e8 9c fa ff ff       	call   c0008990 <VgaText::putchar(char)>
c0008ef4:	83 c4 10             	add    esp,0x10
c0008ef7:	88 5c 24 0e          	mov    BYTE PTR [esp+0xe],bl
c0008efb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008f00:	52                   	push   edx
c0008f01:	52                   	push   edx
c0008f02:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008f06:	50                   	push   eax
c0008f07:	57                   	push   edi
c0008f08:	e8 23 7a ff ff       	call   c0000930 <strcat>
c0008f0d:	83 c4 10             	add    esp,0x10
c0008f10:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008f17:	75 0f                	jne    c0008f28 <VgaText::receiveKey(unsigned char)+0x134>
c0008f19:	80 fb 1c             	cmp    bl,0x1c
c0008f1c:	77 2c                	ja     c0008f4a <VgaText::receiveKey(unsigned char)+0x156>
c0008f1e:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f23:	0f a3 d8             	bt     eax,ebx
c0008f26:	73 22                	jae    c0008f4a <VgaText::receiveKey(unsigned char)+0x156>
c0008f28:	50                   	push   eax
c0008f29:	81 c6 02 01 00 00    	add    esi,0x102
c0008f2f:	50                   	push   eax
c0008f30:	57                   	push   edi
c0008f31:	56                   	push   esi
c0008f32:	e8 f9 79 ff ff       	call   c0000930 <strcat>
c0008f37:	83 c4 0c             	add    esp,0xc
c0008f3a:	68 80 00 00 00       	push   0x80
c0008f3f:	6a 00                	push   0x0
c0008f41:	57                   	push   edi
c0008f42:	e8 39 76 ff ff       	call   c0000580 <memset>
c0008f47:	83 c4 10             	add    esp,0x10
c0008f4a:	83 c4 1c             	add    esp,0x1c
c0008f4d:	5b                   	pop    ebx
c0008f4e:	5e                   	pop    esi
c0008f4f:	5f                   	pop    edi
c0008f50:	5d                   	pop    ebp
c0008f51:	c3                   	ret    

c0008f52 <VgaText::doUpdate()>:
c0008f52:	c3                   	ret    

c0008f53 <newTerminal(char*)>:
c0008f53:	83 ec 28             	sub    esp,0x28
c0008f56:	68 84 01 00 00       	push   0x184
c0008f5b:	e8 9c eb ff ff       	call   c0007afc <malloc>
c0008f60:	5a                   	pop    edx
c0008f61:	59                   	pop    ecx
c0008f62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f66:	50                   	push   eax
c0008f67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f6b:	e8 0e fd ff ff       	call   c0008c7e <VgaText::VgaText(char const*)>
c0008f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f74:	83 c4 2c             	add    esp,0x2c
c0008f77:	c3                   	ret    

c0008f78 <TSS::TSS()>:
c0008f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f83:	90                   	nop
c0008f84:	c3                   	ret    
c0008f85:	90                   	nop
c0008f86:	66 90                	xchg   ax,ax

c0008f88 <TSS::setESP(unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f97:	90                   	nop
c0008f98:	5d                   	pop    ebp
c0008f99:	c3                   	ret    
c0008f9a:	66 90                	xchg   ax,ax

c0008f9c <TSS::flush()>:
c0008f9c:	55                   	push   ebp
c0008f9d:	89 e5                	mov    ebp,esp
c0008f9f:	83 ec 10             	sub    esp,0x10
c0008fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fa7:	98                   	cwde   
c0008fa8:	83 c8 03             	or     eax,0x3
c0008fab:	98                   	cwde   
c0008fac:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008fb0:	0f b7 55 fe          	movzx  edx,WORD PTR [ebp-0x2]
c0008fb4:	66 89 d0             	mov    ax,dx
c0008fb7:	0f 00 d8             	ltr    ax
c0008fba:	90                   	nop
c0008fbb:	c9                   	leave  
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop
c0008fbe:	66 90                	xchg   ax,ax

c0008fc0 <TSS::setup(unsigned long, unsigned long)>:
c0008fc0:	55                   	push   ebp
c0008fc1:	89 e5                	mov    ebp,esp
c0008fc3:	83 ec 28             	sub    esp,0x28
c0008fc6:	c7 04 24 68 00 00 00 	mov    DWORD PTR [esp],0x68
c0008fcd:	e8 2a eb ff ff       	call   c0007afc <malloc>
c0008fd2:	89 c2                	mov    edx,eax
c0008fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fdd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe0:	c7 44 24 08 68 00 00 00 	mov    DWORD PTR [esp+0x8],0x68
c0008fe8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008ff0:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ff3:	e8 88 75 ff ff       	call   c0000580 <memset>
c0008ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ffb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffe:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0009004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009007:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0009010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009013:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009016:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009019:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009022:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0009028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000902b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0009034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009037:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009043:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009046:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000904c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009052:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009067:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000906a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000906d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009073:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009076:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009079:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000907c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000907f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009082:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000908c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000908f:	0f 20 da             	mov    edx,cr3
c0009092:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009095:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009098:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000909b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000909e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090a5:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00090ab:	e8 ba e2 ff ff       	call   c000736a <GDTEntry::setBase(unsigned int)>
c00090b0:	c7 44 24 04 68 00 00 00 	mov    DWORD PTR [esp+0x4],0x68
c00090b8:	8d 45 ec             	lea    eax,[ebp-0x14]
c00090bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00090be:	e8 c3 e2 ff ff       	call   c0007386 <GDTEntry::setLimit(unsigned int)>
c00090c3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00090c7:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c00090cb:	24 0f                	and    al,0xf
c00090cd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090d0:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
c00090d4:	0c 40                	or     al,0x40
c00090d6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00090d9:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090e4:	8d 88 78 01 00 00    	lea    ecx,[eax+0x178]
c00090ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00090ed:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00090f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00090f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090f8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00090fb:	e8 b8 e2 ff ff       	call   c00073b8 <GDT::addEntry(GDTEntry)>
c0009100:	89 c2                	mov    edx,eax
c0009102:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009105:	89 10                	mov    DWORD PTR [eax],edx
c0009107:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000910c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009112:	05 78 01 00 00       	add    eax,0x178
c0009117:	89 04 24             	mov    DWORD PTR [esp],eax
c000911a:	e8 bd e2 ff ff       	call   c00073dc <GDT::flush()>
c000911f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009122:	8b 00                	mov    eax,DWORD PTR [eax]
c0009124:	c9                   	leave  
c0009125:	c3                   	ret    

c0009126 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0009126:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000912a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000912e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009131:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009136:	75 08                	jne    c0009140 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0009138:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000913e:	eb 38                	jmp    c0009178 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009140:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009145:	75 17                	jne    c000915e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000914c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000914f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009155:	8b 10                	mov    edx,DWORD PTR [eax]
c0009157:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000915b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000915e:	89 c1                	mov    ecx,eax
c0009160:	83 e1 fd             	and    ecx,0xfffffffd
c0009163:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009169:	74 cd                	je     c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000916b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009170:	83 e0 ef             	and    eax,0xffffffef
c0009173:	83 f8 08             	cmp    eax,0x8
c0009176:	76 c0                	jbe    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009178:	31 c0                	xor    eax,eax
c000917a:	c3                   	ret    
c000917b:	90                   	nop

c000917c <ReservedFilename::isAtty()>:
c000917c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009180:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009183:	31 c0                	xor    eax,eax
c0009185:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000918b:	74 09                	je     c0009196 <ReservedFilename::isAtty()+0x1a>
c000918d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009193:	0f 94 c0             	sete   al
c0009196:	c3                   	ret    
c0009197:	90                   	nop

c0009198 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000919c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00091a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00091a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00091ac:	75 08                	jne    c00091b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00091ae:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00091b4:	eb 3d                	jmp    c00091f3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091b6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00091bb:	75 17                	jne    c00091d4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00091bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00091c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00091c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00091cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00091cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00091d1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00091d4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00091d9:	75 04                	jne    c00091df <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00091db:	89 0a                	mov    DWORD PTR [edx],ecx
c00091dd:	eb 14                	jmp    c00091f3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00091df:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091e4:	74 c8                	je     c00091ae <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091e6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091eb:	83 e0 ef             	and    eax,0xffffffef
c00091ee:	83 f8 08             	cmp    eax,0x8
c00091f1:	76 bb                	jbe    c00091ae <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091f3:	31 c0                	xor    eax,eax
c00091f5:	c3                   	ret    

c00091f6 <UnixFile::getFileDescriptor()>:
c00091f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091fd:	c3                   	ret    

c00091fe <UnixFile::UnixFile(int)>:
c00091fe:	53                   	push   ebx
c00091ff:	83 ec 38             	sub    esp,0x38
c0009202:	ba bc fb 01 c0       	mov    edx,0xc001fbbc
c0009207:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000920b:	89 10                	mov    DWORD PTR [eax],edx
c000920d:	81 7c 24 44 ff fe ff 0f 	cmp    DWORD PTR [esp+0x44],0xffffeff
c0009215:	0f 8f 70 01 00 00    	jg     c000938b <UnixFile::UnixFile(int)+0x18d>
c000921b:	a1 a0 1c 02 c0       	mov    eax,ds:0xc0021ca0
c0009220:	8d 50 01             	lea    edx,[eax+0x1]
c0009223:	89 15 a0 1c 02 c0    	mov    DWORD PTR ds:0xc0021ca0,edx
c0009229:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000922d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009230:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009238:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000923f:	e8 dc 54 01 00       	call   c001e720 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009244:	0f b6 05 94 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024f94
c000924b:	34 01                	xor    al,0x1
c000924d:	0f 84 39 01 00 00    	je     c000938c <UnixFile::UnixFile(int)+0x18e>
c0009253:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000925a:	c7 44 24 1c 0c 00 00 00 	mov    DWORD PTR [esp+0x1c],0xc
c0009262:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009266:	89 04 24             	mov    DWORD PTR [esp],eax
c0009269:	e8 8e e8 ff ff       	call   c0007afc <malloc>
c000926e:	89 c3                	mov    ebx,eax
c0009270:	c7 44 24 04 03 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff03
c0009278:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000927b:	e8 12 01 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009280:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c0009286:	c7 44 24 20 0c 00 00 00 	mov    DWORD PTR [esp+0x20],0xc
c000928e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009292:	89 04 24             	mov    DWORD PTR [esp],eax
c0009295:	e8 62 e8 ff ff       	call   c0007afc <malloc>
c000929a:	89 c3                	mov    ebx,eax
c000929c:	c7 44 24 04 01 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff01
c00092a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092a7:	e8 e6 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c00092ac:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c00092b2:	c7 44 24 24 0c 00 00 00 	mov    DWORD PTR [esp+0x24],0xc
c00092ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00092be:	89 04 24             	mov    DWORD PTR [esp],eax
c00092c1:	e8 36 e8 ff ff       	call   c0007afc <malloc>
c00092c6:	89 c3                	mov    ebx,eax
c00092c8:	c7 44 24 04 00 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff00
c00092d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092d3:	e8 ba 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c00092d8:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092de:	c7 44 24 28 0c 00 00 00 	mov    DWORD PTR [esp+0x28],0xc
c00092e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00092ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ed:	e8 0a e8 ff ff       	call   c0007afc <malloc>
c00092f2:	89 c3                	mov    ebx,eax
c00092f4:	c7 44 24 04 02 ff ff 0f 	mov    DWORD PTR [esp+0x4],0xfffff02
c00092fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00092ff:	e8 8e 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009304:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c000930a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009312:	83 7c 24 2c 08       	cmp    DWORD PTR [esp+0x2c],0x8
c0009317:	7f 73                	jg     c000938c <UnixFile::UnixFile(int)+0x18e>
c0009319:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009321:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009325:	89 04 24             	mov    DWORD PTR [esp],eax
c0009328:	e8 cf e7 ff ff       	call   c0007afc <malloc>
c000932d:	89 c3                	mov    ebx,eax
c000932f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009333:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009338:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000933c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000933f:	e8 4e 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c0009344:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009348:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c000934f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009357:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000935b:	89 04 24             	mov    DWORD PTR [esp],eax
c000935e:	e8 99 e7 ff ff       	call   c0007afc <malloc>
c0009363:	89 c3                	mov    ebx,eax
c0009365:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009369:	05 20 ff ff 0f       	add    eax,0xfffff20
c000936e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009372:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009375:	e8 18 00 00 00       	call   c0009392 <ReservedFilename::ReservedFilename(int)>
c000937a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000937e:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c0009385:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009389:	eb 87                	jmp    c0009312 <UnixFile::UnixFile(int)+0x114>
c000938b:	90                   	nop
c000938c:	83 c4 38             	add    esp,0x38
c000938f:	5b                   	pop    ebx
c0009390:	c3                   	ret    
c0009391:	90                   	nop

c0009392 <ReservedFilename::ReservedFilename(int)>:
c0009392:	83 ec 1c             	sub    esp,0x1c
c0009395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009399:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000939d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093a4:	e8 55 fe ff ff       	call   c00091fe <UnixFile::UnixFile(int)>
c00093a9:	ba d8 fb 01 c0       	mov    edx,0xc001fbd8
c00093ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b2:	89 10                	mov    DWORD PTR [eax],edx
c00093b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00093bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00093bf:	90                   	nop
c00093c0:	83 c4 1c             	add    esp,0x1c
c00093c3:	c3                   	ret    

c00093c4 <UnixFile::~UnixFile()>:
c00093c4:	83 ec 2c             	sub    esp,0x2c
c00093c7:	ba bc fb 01 c0       	mov    edx,0xc001fbbc
c00093cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093d0:	89 10                	mov    DWORD PTR [eax],edx
c00093d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00093d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093d9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093de:	7f 67                	jg     c0009447 <UnixFile::~UnixFile()+0x83>
c00093e0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00093e8:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00093ef:	e8 f4 53 01 00       	call   c001e7e8 <LinkedList<UnixFile>::getFirstElement()>
c00093f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093f8:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c00093ff:	e8 ec 53 01 00       	call   c001e7f0 <LinkedList<UnixFile>::removeFirst()>
c0009404:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009408:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c000940c:	74 3c                	je     c000944a <UnixFile::~UnixFile()+0x86>
c000940e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009412:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009416:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000941d:	e8 fe 52 01 00       	call   c001e720 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009422:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009426:	8d 50 01             	lea    edx,[eax+0x1]
c0009429:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000942d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009432:	0f 94 c0             	sete   al
c0009435:	84 c0                	test   al,al
c0009437:	74 af                	je     c00093e8 <UnixFile::~UnixFile()+0x24>
c0009439:	c7 04 24 94 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb94
c0009440:	e8 e0 73 00 00       	call   c0010825 <KePanic(char const*)>
c0009445:	eb a1                	jmp    c00093e8 <UnixFile::~UnixFile()+0x24>
c0009447:	90                   	nop
c0009448:	eb 01                	jmp    c000944b <UnixFile::~UnixFile()+0x87>
c000944a:	90                   	nop
c000944b:	90                   	nop
c000944c:	83 c4 2c             	add    esp,0x2c
c000944f:	c3                   	ret    

c0009450 <UnixFile::~UnixFile()>:
c0009450:	83 ec 1c             	sub    esp,0x1c
c0009453:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009457:	89 04 24             	mov    DWORD PTR [esp],eax
c000945a:	e8 65 ff ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000945f:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000946b:	89 04 24             	mov    DWORD PTR [esp],eax
c000946e:	e8 e9 14 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c0009473:	83 c4 1c             	add    esp,0x1c
c0009476:	c3                   	ret    
c0009477:	90                   	nop

c0009478 <ReservedFilename::~ReservedFilename()>:
c0009478:	83 ec 1c             	sub    esp,0x1c
c000947b:	ba d8 fb 01 c0       	mov    edx,0xc001fbd8
c0009480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009484:	89 10                	mov    DWORD PTR [eax],edx
c0009486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000948a:	89 04 24             	mov    DWORD PTR [esp],eax
c000948d:	e8 32 ff ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c0009492:	90                   	nop
c0009493:	83 c4 1c             	add    esp,0x1c
c0009496:	c3                   	ret    
c0009497:	90                   	nop

c0009498 <ReservedFilename::~ReservedFilename()>:
c0009498:	83 ec 1c             	sub    esp,0x1c
c000949b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000949f:	89 04 24             	mov    DWORD PTR [esp],eax
c00094a2:	e8 d1 ff ff ff       	call   c0009478 <ReservedFilename::~ReservedFilename()>
c00094a7:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00094af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00094b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00094b6:	e8 a1 14 00 00       	call   c000a95c <operator delete(void*, unsigned long)>
c00094bb:	83 c4 1c             	add    esp,0x1c
c00094be:	c3                   	ret    

c00094bf <getFromFileDescriptor(int)>:
c00094bf:	53                   	push   ebx
c00094c0:	83 ec 08             	sub    esp,0x8
c00094c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094c7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094cd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094d3:	7f 2c                	jg     c0009501 <getFromFileDescriptor(int)+0x42>
c00094d5:	83 ec 0c             	sub    esp,0xc
c00094d8:	68 98 4f 02 c0       	push   0xc0024f98
c00094dd:	e8 06 53 01 00       	call   c001e7e8 <LinkedList<UnixFile>::getFirstElement()>
c00094e2:	83 c4 10             	add    esp,0x10
c00094e5:	85 c0                	test   eax,eax
c00094e7:	75 04                	jne    c00094ed <getFromFileDescriptor(int)+0x2e>
c00094e9:	31 c0                	xor    eax,eax
c00094eb:	eb 6e                	jmp    c000955b <getFromFileDescriptor(int)+0x9c>
c00094ed:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094f0:	74 69                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c00094f2:	52                   	push   edx
c00094f3:	52                   	push   edx
c00094f4:	50                   	push   eax
c00094f5:	68 98 4f 02 c0       	push   0xc0024f98
c00094fa:	e8 87 53 01 00       	call   c001e886 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094ff:	eb e1                	jmp    c00094e2 <getFromFileDescriptor(int)+0x23>
c0009501:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009507:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c000950c:	74 4d                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c000950e:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009514:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009519:	74 40                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c000951b:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009521:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009526:	74 33                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c0009528:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000952e:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c0009533:	74 26                	je     c000955b <getFromFileDescriptor(int)+0x9c>
c0009535:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000953b:	83 f8 08             	cmp    eax,0x8
c000953e:	77 09                	ja     c0009549 <getFromFileDescriptor(int)+0x8a>
c0009540:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009547:	eb 12                	jmp    c000955b <getFromFileDescriptor(int)+0x9c>
c0009549:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000954f:	83 fb 08             	cmp    ebx,0x8
c0009552:	77 95                	ja     c00094e9 <getFromFileDescriptor(int)+0x2a>
c0009554:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000955b:	83 c4 08             	add    esp,0x8
c000955e:	5b                   	pop    ebx
c000955f:	c3                   	ret    

c0009560 <__static_initialization_and_destruction_0(int, int)>:
c0009560:	83 ec 1c             	sub    esp,0x1c
c0009563:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0009568:	75 32                	jne    c000959c <__static_initialization_and_destruction_0(int, int)+0x3c>
c000956a:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c0009572:	75 28                	jne    c000959c <__static_initialization_and_destruction_0(int, int)+0x3c>
c0009574:	c7 04 24 98 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f98
c000957b:	e8 5e 51 01 00       	call   c001e6de <LinkedList<UnixFile>::LinkedList()>
c0009580:	c7 44 24 08 18 1c 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021c18
c0009588:	c7 44 24 04 98 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f98
c0009590:	c7 04 24 dc e6 01 c0 	mov    DWORD PTR [esp],0xc001e6dc
c0009597:	e8 70 13 00 00       	call   c000a90c <__cxa_atexit>
c000959c:	90                   	nop
c000959d:	83 c4 1c             	add    esp,0x1c
c00095a0:	c3                   	ret    

c00095a1 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00095a1:	83 ec 1c             	sub    esp,0x1c
c00095a4:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c00095ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00095b3:	e8 a8 ff ff ff       	call   c0009560 <__static_initialization_and_destruction_0(int, int)>
c00095b8:	83 c4 1c             	add    esp,0x1c
c00095bb:	c3                   	ret    
c00095bc:	66 90                	xchg   ax,ax
c00095be:	66 90                	xchg   ax,ax

c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095c0:	53                   	push   ebx
c00095c1:	8b 15 a8 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021ca8
c00095c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00095d0:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095d6:	89 d8                	mov    eax,ebx
c00095d8:	d1 e8                	shr    eax,1
c00095da:	01 d0                	add    eax,edx
c00095dc:	f6 c3 01             	test   bl,0x1
c00095df:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00095e2:	75 09                	jne    c00095ed <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2d>
c00095e4:	80 e2 f0             	and    dl,0xf0
c00095e7:	08 d1                	or     cl,dl
c00095e9:	88 08                	mov    BYTE PTR [eax],cl
c00095eb:	5b                   	pop    ebx
c00095ec:	c3                   	ret    
c00095ed:	c0 e1 04             	shl    cl,0x4
c00095f0:	80 e2 0f             	and    dl,0xf
c00095f3:	08 ca                	or     dl,cl
c00095f5:	88 10                	mov    BYTE PTR [eax],dl
c00095f7:	5b                   	pop    ebx
c00095f8:	c3                   	ret    

c00095f9 <Virt::getPageState(unsigned long)>:
c00095f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095fd:	8b 0d a8 1c 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ca8
c0009603:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009609:	89 d0                	mov    eax,edx
c000960b:	d1 e8                	shr    eax,1
c000960d:	0f b6 0c 01          	movzx  ecx,BYTE PTR [ecx+eax*1]
c0009611:	88 c8                	mov    al,cl
c0009613:	c0 e8 04             	shr    al,0x4
c0009616:	f6 c2 01             	test   dl,0x1
c0009619:	75 04                	jne    c000961f <Virt::getPageState(unsigned long)+0x26>
c000961b:	88 c8                	mov    al,cl
c000961d:	24 0f                	and    al,0xf
c000961f:	c3                   	ret    

c0009620 <Virt::allocateKernelVirtualPages(int)>:
c0009620:	55                   	push   ebp
c0009621:	57                   	push   edi
c0009622:	31 ff                	xor    edi,edi
c0009624:	56                   	push   esi
c0009625:	31 f6                	xor    esi,esi
c0009627:	53                   	push   ebx
c0009628:	31 db                	xor    ebx,ebx
c000962a:	83 ec 1c             	sub    esp,0x1c
c000962d:	8b 2d a4 1c 02 c0    	mov    ebp,DWORD PTR ds:0xc0021ca4
c0009633:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009636:	e8 be ff ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c000963b:	84 c0                	test   al,al
c000963d:	75 36                	jne    c0009675 <Virt::allocateKernelVirtualPages(int)+0x55>
c000963f:	85 f6                	test   esi,esi
c0009641:	0f 44 fd             	cmove  edi,ebp
c0009644:	46                   	inc    esi
c0009645:	3b 74 24 30          	cmp    esi,DWORD PTR [esp+0x30]
c0009649:	74 51                	je     c000969c <Virt::allocateKernelVirtualPages(int)+0x7c>
c000964b:	45                   	inc    ebp
c000964c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009652:	76 2c                	jbe    c0009680 <Virt::allocateKernelVirtualPages(int)+0x60>
c0009654:	b8 00 80 0c 00       	mov    eax,0xc8000
c0009659:	84 db                	test   bl,bl
c000965b:	a3 a4 1c 02 c0       	mov    ds:0xc0021ca4,eax
c0009660:	75 26                	jne    c0009688 <Virt::allocateKernelVirtualPages(int)+0x68>
c0009662:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0009667:	b3 01                	mov    bl,0x1
c0009669:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000966c:	e8 88 ff ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c0009671:	84 c0                	test   al,al
c0009673:	74 ca                	je     c000963f <Virt::allocateKernelVirtualPages(int)+0x1f>
c0009675:	45                   	inc    ebp
c0009676:	31 f6                	xor    esi,esi
c0009678:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000967e:	77 d4                	ja     c0009654 <Virt::allocateKernelVirtualPages(int)+0x34>
c0009680:	89 2d a4 1c 02 c0    	mov    DWORD PTR ds:0xc0021ca4,ebp
c0009686:	eb ab                	jmp    c0009633 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009688:	c7 04 24 ec fb 01 c0 	mov    DWORD PTR [esp],0xc001fbec
c000968f:	e8 91 71 00 00       	call   c0010825 <KePanic(char const*)>
c0009694:	8b 2d a4 1c 02 c0    	mov    ebp,DWORD PTR ds:0xc0021ca4
c000969a:	eb 97                	jmp    c0009633 <Virt::allocateKernelVirtualPages(int)+0x13>
c000969c:	89 3d a4 1c 02 c0    	mov    DWORD PTR ds:0xc0021ca4,edi
c00096a2:	4e                   	dec    esi
c00096a3:	74 74                	je     c0009719 <Virt::allocateKernelVirtualPages(int)+0xf9>
c00096a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00096a9:	85 d2                	test   edx,edx
c00096ab:	74 4b                	je     c00096f8 <Virt::allocateKernelVirtualPages(int)+0xd8>
c00096ad:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096b1:	89 f8                	mov    eax,edi
c00096b3:	31 db                	xor    ebx,ebx
c00096b5:	8d 71 ff             	lea    esi,[ecx-0x1]
c00096b8:	eb 19                	jmp    c00096d3 <Virt::allocateKernelVirtualPages(int)+0xb3>
c00096ba:	c6 44 24 04 01       	mov    BYTE PTR [esp+0x4],0x1
c00096bf:	43                   	inc    ebx
c00096c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00096c3:	e8 f8 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c8:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c00096cc:	74 2a                	je     c00096f8 <Virt::allocateKernelVirtualPages(int)+0xd8>
c00096ce:	a1 a4 1c 02 c0       	mov    eax,ds:0xc0021ca4
c00096d3:	8d 50 01             	lea    edx,[eax+0x1]
c00096d6:	85 db                	test   ebx,ebx
c00096d8:	89 15 a4 1c 02 c0    	mov    DWORD PTR ds:0xc0021ca4,edx
c00096de:	74 25                	je     c0009705 <Virt::allocateKernelVirtualPages(int)+0xe5>
c00096e0:	39 de                	cmp    esi,ebx
c00096e2:	75 d6                	jne    c00096ba <Virt::allocateKernelVirtualPages(int)+0x9a>
c00096e4:	c6 44 24 04 03       	mov    BYTE PTR [esp+0x4],0x3
c00096e9:	43                   	inc    ebx
c00096ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00096ed:	e8 ce fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096f2:	3b 5c 24 30          	cmp    ebx,DWORD PTR [esp+0x30]
c00096f6:	75 d6                	jne    c00096ce <Virt::allocateKernelVirtualPages(int)+0xae>
c00096f8:	83 c4 1c             	add    esp,0x1c
c00096fb:	89 f8                	mov    eax,edi
c00096fd:	5b                   	pop    ebx
c00096fe:	c1 e0 0c             	shl    eax,0xc
c0009701:	5e                   	pop    esi
c0009702:	5f                   	pop    edi
c0009703:	5d                   	pop    ebp
c0009704:	c3                   	ret    
c0009705:	c6 44 24 04 02       	mov    BYTE PTR [esp+0x4],0x2
c000970a:	bb 01 00 00 00       	mov    ebx,0x1
c000970f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009712:	e8 a9 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009717:	eb b5                	jmp    c00096ce <Virt::allocateKernelVirtualPages(int)+0xae>
c0009719:	89 3c 24             	mov    DWORD PTR [esp],edi
c000971c:	8d 47 01             	lea    eax,[edi+0x1]
c000971f:	c6 44 24 04 04       	mov    BYTE PTR [esp+0x4],0x4
c0009724:	a3 a4 1c 02 c0       	mov    ds:0xc0021ca4,eax
c0009729:	e8 92 fe ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000972e:	83 c4 1c             	add    esp,0x1c
c0009731:	89 f8                	mov    eax,edi
c0009733:	5b                   	pop    ebx
c0009734:	c1 e0 0c             	shl    eax,0xc
c0009737:	5e                   	pop    esi
c0009738:	5f                   	pop    edi
c0009739:	5d                   	pop    ebp
c000973a:	c3                   	ret    

c000973b <Virt::freeSwapfilePage(unsigned long)>:
c000973b:	53                   	push   ebx
c000973c:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009742:	b8 01 00 00 00       	mov    eax,0x1
c0009747:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000974b:	d3 e0                	shl    eax,cl
c000974d:	89 cb                	mov    ebx,ecx
c000974f:	c1 eb 05             	shr    ebx,0x5
c0009752:	f7 d0                	not    eax
c0009754:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009757:	5b                   	pop    ebx
c0009758:	c3                   	ret    

c0009759 <Virt::swapIDToSector(unsigned long)>:
c0009759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975d:	8b 15 ac 1c 02 c0    	mov    edx,DWORD PTR ds:0xc0021cac
c0009763:	8b 0d b4 1c 02 c0    	mov    ecx,DWORD PTR ds:0xc0021cb4
c0009769:	0f af c2             	imul   eax,edx
c000976c:	01 c8                	add    eax,ecx
c000976e:	c3                   	ret    

c000976f <Virt::allocateSwapfilePage()>:
c000976f:	55                   	push   ebp
c0009770:	31 d2                	xor    edx,edx
c0009772:	57                   	push   edi
c0009773:	56                   	push   esi
c0009774:	53                   	push   ebx
c0009775:	83 ec 1c             	sub    esp,0x1c
c0009778:	8b 1d b0 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021cb0
c000977e:	8b 0d ac 1c 02 c0    	mov    ecx,DWORD PTR ds:0xc0021cac
c0009784:	89 d8                	mov    eax,ebx
c0009786:	f7 f1                	div    ecx
c0009788:	39 cb                	cmp    ebx,ecx
c000978a:	72 2d                	jb     c00097b9 <Virt::allocateSwapfilePage()+0x4a>
c000978c:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c0009792:	8b 16                	mov    edx,DWORD PTR [esi]
c0009794:	f6 c2 01             	test   dl,0x1
c0009797:	74 38                	je     c00097d1 <Virt::allocateSwapfilePage()+0x62>
c0009799:	31 c9                	xor    ecx,ecx
c000979b:	bf 01 00 00 00       	mov    edi,0x1
c00097a0:	eb 12                	jmp    c00097b4 <Virt::allocateSwapfilePage()+0x45>
c00097a2:	89 ca                	mov    edx,ecx
c00097a4:	89 fd                	mov    ebp,edi
c00097a6:	c1 ea 05             	shr    edx,0x5
c00097a9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ae:	d3 e5                	shl    ebp,cl
c00097b0:	85 ea                	test   edx,ebp
c00097b2:	74 26                	je     c00097da <Virt::allocateSwapfilePage()+0x6b>
c00097b4:	41                   	inc    ecx
c00097b5:	39 c8                	cmp    eax,ecx
c00097b7:	77 e9                	ja     c00097a2 <Virt::allocateSwapfilePage()+0x33>
c00097b9:	c7 04 24 53 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd53
c00097c0:	e8 60 70 00 00       	call   c0010825 <KePanic(char const*)>
c00097c5:	83 c4 1c             	add    esp,0x1c
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	5b                   	pop    ebx
c00097cb:	89 c8                	mov    eax,ecx
c00097cd:	5e                   	pop    esi
c00097ce:	5f                   	pop    edi
c00097cf:	5d                   	pop    ebp
c00097d0:	c3                   	ret    
c00097d1:	89 f3                	mov    ebx,esi
c00097d3:	bd 01 00 00 00       	mov    ebp,0x1
c00097d8:	31 c9                	xor    ecx,ecx
c00097da:	09 ea                	or     edx,ebp
c00097dc:	89 c8                	mov    eax,ecx
c00097de:	89 13                	mov    DWORD PTR [ebx],edx
c00097e0:	83 c4 1c             	add    esp,0x1c
c00097e3:	5b                   	pop    ebx
c00097e4:	5e                   	pop    esi
c00097e5:	5f                   	pop    edi
c00097e6:	5d                   	pop    ebp
c00097e7:	c3                   	ret    

c00097e8 <Virt::virtualMemorySetup()>:
c00097e8:	53                   	push   ebx
c00097e9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ee:	83 ec 08             	sub    esp,0x8
c00097f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00097f4:	43                   	inc    ebx
c00097f5:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c00097fa:	e8 c1 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097ff:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009805:	75 ea                	jne    c00097f1 <Virt::virtualMemorySetup()+0x9>
c0009807:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000980f:	43                   	inc    ebx
c0009810:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009815:	e8 a6 fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000981a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009820:	75 ea                	jne    c000980c <Virt::virtualMemorySetup()+0x24>
c0009822:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009827:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000982a:	43                   	inc    ebx
c000982b:	c6 44 24 04 0f       	mov    BYTE PTR [esp+0x4],0xf
c0009830:	e8 8b fd ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009835:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000983b:	75 ea                	jne    c0009827 <Virt::virtualMemorySetup()+0x3f>
c000983d:	83 c4 08             	add    esp,0x8
c0009840:	5b                   	pop    ebx
c0009841:	c3                   	ret    

c0009842 <Virt::setupPageSwapping(int)>:
c0009842:	53                   	push   ebx
c0009843:	b9 6a fd 01 c0       	mov    ecx,0xc001fd6a
c0009848:	83 ec 18             	sub    esp,0x18
c000984b:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009850:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009854:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000985a:	8b 10                	mov    edx,DWORD PTR [eax]
c000985c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009860:	c1 e3 0b             	shl    ebx,0xb
c0009863:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0009867:	89 04 24             	mov    DWORD PTR [esp],eax
c000986a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000986d:	b2 43                	mov    dl,0x43
c000986f:	b9 08 00 00 00       	mov    ecx,0x8
c0009874:	89 1d b0 1c 02 c0    	mov    DWORD PTR ds:0xc0021cb0,ebx
c000987a:	c1 eb 08             	shr    ebx,0x8
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	31 db                	xor    ebx,ebx
c0009882:	88 15 b8 1c 02 c0    	mov    BYTE PTR ds:0xc0021cb8,dl
c0009888:	89 0d ac 1c 02 c0    	mov    DWORD PTR ds:0xc0021cac,ecx
c000988e:	a3 b4 1c 02 c0       	mov    ds:0xc0021cb4,eax
c0009893:	e8 64 e2 ff ff       	call   c0007afc <malloc>
c0009898:	31 d2                	xor    edx,edx
c000989a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000989e:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c00098a3:	89 c1                	mov    ecx,eax
c00098a5:	a1 b0 1c 02 c0       	mov    eax,ds:0xc0021cb0
c00098aa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098ad:	f7 35 ac 1c 02 c0    	div    DWORD PTR ds:0xc0021cac
c00098b3:	c1 e8 05             	shr    eax,0x5
c00098b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098ba:	e8 c1 6c ff ff       	call   c0000580 <memset>
c00098bf:	83 c4 18             	add    esp,0x18
c00098c2:	5b                   	pop    ebx
c00098c3:	c3                   	ret    

c00098c4 <VAS::VAS(VAS*)>:
c00098c4:	83 ec 1c             	sub    esp,0x1c
c00098c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00098d6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098dd:	c7 04 24 0c fc 01 c0 	mov    DWORD PTR [esp],0xc001fc0c
c00098e4:	e8 3c 6f 00 00       	call   c0010825 <KePanic(char const*)>
c00098e9:	90                   	nop
c00098ea:	83 c4 1c             	add    esp,0x1c
c00098ed:	c3                   	ret    

c00098ee <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f2:	89 c2                	mov    edx,eax
c00098f4:	c1 ea 16             	shr    edx,0x16
c00098f7:	c1 e8 0a             	shr    eax,0xa
c00098fa:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00098ff:	19 c9                	sbb    ecx,ecx
c0009901:	25 fc 0f 00 00       	and    eax,0xffc
c0009906:	c1 e2 0c             	shl    edx,0xc
c0009909:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000990f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009916:	01 d0                	add    eax,edx
c0009918:	c3                   	ret    
c0009919:	90                   	nop

c000991a <VAS::getPageTableEntry(unsigned long)>:
c000991a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000991e:	89 ca                	mov    edx,ecx
c0009920:	c1 ea 16             	shr    edx,0x16
c0009923:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009929:	c1 e9 0a             	shr    ecx,0xa
c000992c:	c1 e0 0c             	shl    eax,0xc
c000992f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009935:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009938:	c3                   	ret    

c0009939 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009939:	57                   	push   edi
c000993a:	56                   	push   esi
c000993b:	53                   	push   ebx
c000993c:	b3 01                	mov    bl,0x1
c000993e:	83 ec 20             	sub    esp,0x20
c0009941:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009945:	c1 ee 0c             	shr    esi,0xc
c0009948:	eb 3f                	jmp    c0009989 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000994a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000994e:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009953:	89 04 24             	mov    DWORD PTR [esp],eax
c0009956:	e8 bf ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000995b:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c0009960:	8b 00                	mov    eax,DWORD PTR [eax]
c0009962:	f6 c4 04             	test   ah,0x4
c0009965:	75 60                	jne    c00099c7 <Virt::freeKernelVirtualPages(unsigned long)+0x8e>
c0009967:	80 fa 04             	cmp    dl,0x4
c000996a:	74 76                	je     c00099e2 <Virt::freeKernelVirtualPages(unsigned long)+0xa9>
c000996c:	80 fa 02             	cmp    dl,0x2
c000996f:	0f 84 85 00 00 00    	je     c00099fa <Virt::freeKernelVirtualPages(unsigned long)+0xc1>
c0009975:	80 fa 03             	cmp    dl,0x3
c0009978:	0f 84 a3 00 00 00    	je     c0009a21 <Virt::freeKernelVirtualPages(unsigned long)+0xe8>
c000997e:	fe ca                	dec    dl
c0009980:	0f 84 89 00 00 00    	je     c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c0009986:	46                   	inc    esi
c0009987:	31 db                	xor    ebx,ebx
c0009989:	89 34 24             	mov    DWORD PTR [esp],esi
c000998c:	89 f7                	mov    edi,esi
c000998e:	e8 66 fc ff ff       	call   c00095f9 <Virt::getPageState(unsigned long)>
c0009993:	c1 e7 0c             	shl    edi,0xc
c0009996:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000999a:	84 c0                	test   al,al
c000999c:	75 ac                	jne    c000994a <Virt::freeKernelVirtualPages(unsigned long)+0x11>
c000999e:	c7 04 24 81 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd81
c00099a5:	e8 7b 6e 00 00       	call   c0010825 <KePanic(char const*)>
c00099aa:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c00099af:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00099b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00099b6:	e8 5f ff ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00099bb:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00099c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00099c2:	f6 c4 04             	test   ah,0x4
c00099c5:	74 bf                	je     c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c00099c7:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
c00099cb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00099d3:	e8 cc e3 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c00099d8:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c00099dd:	80 fa 04             	cmp    dl,0x4
c00099e0:	75 8a                	jne    c000996c <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099e2:	84 db                	test   bl,bl
c00099e4:	75 3f                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xec>
c00099e6:	ba 30 fc 01 c0       	mov    edx,0xc001fc30
c00099eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00099ef:	83 c4 20             	add    esp,0x20
c00099f2:	5b                   	pop    ebx
c00099f3:	5e                   	pop    esi
c00099f4:	5f                   	pop    edi
c00099f5:	e9 2b 6e 00 00       	jmp    c0010825 <KePanic(char const*)>
c00099fa:	84 db                	test   bl,bl
c00099fc:	75 11                	jne    c0009a0f <Virt::freeKernelVirtualPages(unsigned long)+0xd6>
c00099fe:	c7 04 24 9d fd 01 c0 	mov    DWORD PTR [esp],0xc001fd9d
c0009a05:	e8 1b 6e 00 00       	call   c0010825 <KePanic(char const*)>
c0009a0a:	e9 77 ff ff ff       	jmp    c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009a0f:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009a14:	89 34 24             	mov    DWORD PTR [esp],esi
c0009a17:	e8 a4 fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a1c:	e9 65 ff ff ff       	jmp    c0009986 <Virt::freeKernelVirtualPages(unsigned long)+0x4d>
c0009a21:	84 db                	test   bl,bl
c0009a23:	75 14                	jne    c0009a39 <Virt::freeKernelVirtualPages(unsigned long)+0x100>
c0009a25:	89 34 24             	mov    DWORD PTR [esp],esi
c0009a28:	c6 44 24 04 00       	mov    BYTE PTR [esp+0x4],0x0
c0009a2d:	e8 8e fb ff ff       	call   c00095c0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a32:	83 c4 20             	add    esp,0x20
c0009a35:	5b                   	pop    ebx
c0009a36:	5e                   	pop    esi
c0009a37:	5f                   	pop    edi
c0009a38:	c3                   	ret    
c0009a39:	b8 b9 fd 01 c0       	mov    eax,0xc001fdb9
c0009a3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a42:	83 c4 20             	add    esp,0x20
c0009a45:	5b                   	pop    ebx
c0009a46:	5e                   	pop    esi
c0009a47:	5f                   	pop    edi
c0009a48:	e9 d8 6d 00 00       	jmp    c0010825 <KePanic(char const*)>
c0009a4d:	90                   	nop

c0009a4e <VAS::freeAllocatedPages(unsigned long)>:
c0009a4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a56:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a5a:	74 09                	je     c0009a65 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a60:	e9 d4 fe ff ff       	jmp    c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a65:	b8 54 fc 01 c0       	mov    eax,0xc001fc54
c0009a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a6e:	e9 03 10 00 00       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c0009a73:	90                   	nop

c0009a74 <VAS::virtualToPhysical(unsigned long)>:
c0009a74:	83 ec 08             	sub    esp,0x8
c0009a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a83:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a86:	e8 8f fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a8d:	83 c4 08             	add    esp,0x8
c0009a90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a95:	c3                   	ret    

c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a96:	55                   	push   ebp
c0009a97:	57                   	push   edi
c0009a98:	56                   	push   esi
c0009a99:	53                   	push   ebx
c0009a9a:	83 ec 08             	sub    esp,0x8
c0009a9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009aa1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009aa5:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0009aa9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0009aad:	89 c3                	mov    ebx,eax
c0009aaf:	c1 e3 0c             	shl    ebx,0xc
c0009ab2:	01 f3                	add    ebx,esi
c0009ab4:	85 c0                	test   eax,eax
c0009ab6:	7e 22                	jle    c0009ada <VAS::reflagRange(unsigned long, int, int, int)+0x44>
c0009ab8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0009abc:	81 c6 00 10 00 00    	add    esi,0x1000
c0009ac2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009ac5:	e8 50 fe ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c0009aca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009ace:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad0:	21 f9                	and    ecx,edi
c0009ad2:	09 d1                	or     ecx,edx
c0009ad4:	39 f3                	cmp    ebx,esi
c0009ad6:	89 08                	mov    DWORD PTR [eax],ecx
c0009ad8:	75 de                	jne    c0009ab8 <VAS::reflagRange(unsigned long, int, int, int)+0x22>
c0009ada:	83 c4 08             	add    esp,0x8
c0009add:	5b                   	pop    ebx
c0009ade:	5e                   	pop    esi
c0009adf:	5f                   	pop    edi
c0009ae0:	5d                   	pop    ebp
c0009ae1:	c3                   	ret    

c0009ae2 <VAS::VAS()>:
c0009ae2:	83 ec 14             	sub    esp,0x14
c0009ae5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ae9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009af4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009aff:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009b04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b08:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b10:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b17:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b1e:	ba 8d 30 02 c0       	mov    edx,0xc002308d
c0009b23:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b28:	29 c2                	sub    edx,eax
c0009b2a:	89 d0                	mov    eax,edx
c0009b2c:	05 ff 0f 00 00       	add    eax,0xfff
c0009b31:	c1 e8 0c             	shr    eax,0xc
c0009b34:	89 c2                	mov    edx,eax
c0009b36:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b3b:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
c0009b43:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0009b4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b57:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b5a:	e8 37 ff ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b5f:	90                   	nop
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b64:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b6f:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b76:	75 01                	jne    c0009b79 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b78:	c3                   	ret    
c0009b79:	83 ec 14             	sub    esp,0x14
c0009b7c:	b8 80 00 00 00       	mov    eax,0x80
c0009b81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b89:	ba ff ff ff ff       	mov    edx,0xffffffff
c0009b8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009b92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009b96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b9a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ba2:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ba5:	e8 ec fe ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c0009baa:	83 c4 14             	add    esp,0x14
c0009bad:	c3                   	ret    

c0009bae <VAS::mapOtherVASIn(bool, VAS*)>:
c0009bae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bb2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009bb7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009bbe:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009bc1:	19 c0                	sbb    eax,eax
c0009bc3:	83 ca 03             	or     edx,0x3
c0009bc6:	83 e0 fc             	and    eax,0xfffffffc
c0009bc9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bd0:	0f 20 d8             	mov    eax,cr3
c0009bd3:	0f 22 d8             	mov    cr3,eax
c0009bd6:	c3                   	ret    
c0009bd7:	90                   	nop

c0009bd8 <VAS::~VAS()>:
c0009bd8:	83 ec 3c             	sub    esp,0x3c
c0009bdb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009be3:	fa                   	cli    
c0009be4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009be9:	40                   	inc    eax
c0009bea:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009bef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bf9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009c03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009c07:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009c0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c12:	e8 97 ff ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c0009c17:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009c1f:	81 7c 24 28 ff 02 00 00 	cmp    DWORD PTR [esp+0x28],0x2ff
c0009c27:	0f 8f d8 00 00 00    	jg     c0009d05 <VAS::~VAS()+0x12d>
c0009c2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009c38:	c1 e2 02             	shl    edx,0x2
c0009c3b:	01 d0                	add    eax,edx
c0009c3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009c43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c47:	83 e0 01             	and    eax,0x1
c0009c4a:	0f 84 ac 00 00 00    	je     c0009cfc <VAS::~VAS()+0x124>
c0009c50:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009c58:	81 7c 24 24 ff 03 00 00 	cmp    DWORD PTR [esp+0x24],0x3ff
c0009c60:	7f 7a                	jg     c0009cdc <VAS::~VAS()+0x104>
c0009c62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009c66:	c1 e0 0a             	shl    eax,0xa
c0009c69:	89 c2                	mov    edx,eax
c0009c6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009c6f:	01 d0                	add    eax,edx
c0009c71:	c1 e0 0c             	shl    eax,0xc
c0009c74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c78:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c82:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c8c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009c90:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0009c98:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c9b:	e8 4e fc ff ff       	call   c00098ee <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009ca0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ca4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0009caa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009cae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009cb2:	25 01 04 00 00       	and    eax,0x401
c0009cb7:	3d 01 04 00 00       	cmp    eax,0x401
c0009cbc:	75 15                	jne    c0009cd3 <VAS::~VAS()+0xfb>
c0009cbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009cc2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cca:	e8 d5 e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009ccf:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009cd3:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0009cd7:	e9 7c ff ff ff       	jmp    c0009c58 <VAS::~VAS()+0x80>
c0009cdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ce0:	25 00 04 00 00       	and    eax,0x400
c0009ce5:	74 15                	je     c0009cfc <VAS::~VAS()+0x124>
c0009ce7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ceb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cf0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009cf3:	e8 ac e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009cf8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009cfc:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0009d00:	e9 1a ff ff ff       	jmp    c0009c1f <VAS::~VAS()+0x47>
c0009d05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009d0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d0f:	e8 25 fc ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d18:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d1e:	e8 81 e0 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c0009d23:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009d27:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d2c:	48                   	dec    eax
c0009d2d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009d32:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009d37:	85 c0                	test   eax,eax
c0009d39:	75 01                	jne    c0009d3c <VAS::~VAS()+0x164>
c0009d3b:	fb                   	sti    
c0009d3c:	90                   	nop
c0009d3d:	83 c4 3c             	add    esp,0x3c
c0009d40:	c3                   	ret    
c0009d41:	90                   	nop

c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d42:	83 ec 4c             	sub    esp,0x4c
c0009d45:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0009d49:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0009d4d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c0009d51:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009d55:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c0009d59:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009d5d:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0009d61:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d67:	77 0b                	ja     c0009d74 <VAS::mapPage(unsigned long, unsigned long, int)+0x32>
c0009d69:	0f 20 d8             	mov    eax,cr3
c0009d6c:	0f 20 d8             	mov    eax,cr3
c0009d6f:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d72:	75 4f                	jne    c0009dc3 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d74:	89 d8                	mov    eax,ebx
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	75 5b                	jne    c0009dda <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009d7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d82:	89 de                	mov    esi,ebx
c0009d84:	c1 ee 16             	shr    esi,0x16
c0009d87:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d8e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d92:	74 54                	je     c0009de8 <VAS::mapPage(unsigned long, unsigned long, int)+0xa6>
c0009d94:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0009d98:	c1 eb 0a             	shr    ebx,0xa
c0009d9b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009da1:	c1 e6 0c             	shl    esi,0xc
c0009da4:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009daa:	09 c7                	or     edi,eax
c0009dac:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009daf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009db3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009db7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0009dbb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009dbf:	83 c4 4c             	add    esp,0x4c
c0009dc2:	c3                   	ret    
c0009dc3:	c7 04 24 78 fc 01 c0 	mov    DWORD PTR [esp],0xc001fc78
c0009dca:	e8 a7 0c 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0009dcf:	89 d8                	mov    eax,ebx
c0009dd1:	09 f8                	or     eax,edi
c0009dd3:	a9 ff 0f 00 00       	test   eax,0xfff
c0009dd8:	74 a5                	je     c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009dda:	c7 04 24 e0 fc 01 c0 	mov    DWORD PTR [esp],0xc001fce0
c0009de1:	e8 3f 6a 00 00       	call   c0010825 <KePanic(char const*)>
c0009de6:	eb 97                	jmp    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x3d>
c0009de8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009dec:	e8 1b e0 ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009df1:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009df7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0009dfe:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	e8 15 f8 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0009e0b:	b9 01 00 00 00       	mov    ecx,0x1
c0009e10:	ba 03 00 00 00       	mov    edx,0x3
c0009e15:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009e19:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009e1d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009e21:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009e2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e30:	e8 4d 02 00 00       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e35:	89 c1                	mov    ecx,eax
c0009e37:	b8 00 10 00 00       	mov    eax,0x1000
c0009e3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e40:	31 c0                	xor    eax,eax
c0009e42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e49:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009e4d:	e8 2e 67 ff ff       	call   c0000580 <memset>
c0009e52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009e56:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e59:	e8 db fa ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009e62:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009e65:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009e69:	0d 07 04 00 00       	or     eax,0x407
c0009e6e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e71:	e9 1e ff ff ff       	jmp    c0009d94 <VAS::mapPage(unsigned long, unsigned long, int)+0x52>

c0009e76 <VAS::allocatePages(int, int)>:
c0009e76:	55                   	push   ebp
c0009e77:	57                   	push   edi
c0009e78:	56                   	push   esi
c0009e79:	53                   	push   ebx
c0009e7a:	83 ec 2c             	sub    esp,0x2c
c0009e7d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e82:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0009e86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e8c:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c0009e93:	24 01                	and    al,0x1
c0009e95:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009e99:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0009e9d:	0f 85 ce 00 00 00    	jne    c0009f71 <VAS::allocatePages(int, int)+0xfb>
c0009ea3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ea6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eaa:	85 c0                	test   eax,eax
c0009eac:	0f 84 a7 00 00 00    	je     c0009f59 <VAS::allocatePages(int, int)+0xe3>
c0009eb2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0009eb6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009eba:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0009ebe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009ec2:	c1 e6 0c             	shl    esi,0xc
c0009ec5:	01 de                	add    esi,ebx
c0009ec7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009eca:	81 cd 00 04 00 00    	or     ebp,0x400
c0009ed0:	85 c0                	test   eax,eax
c0009ed2:	7e 2d                	jle    c0009f01 <VAS::allocatePages(int, int)+0x8b>
c0009ed4:	e8 33 df ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009ed9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009edd:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ee1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009ee4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ee8:	e8 55 fe ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eed:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009ef2:	74 03                	je     c0009ef7 <VAS::allocatePages(int, int)+0x81>
c0009ef4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ef7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009efd:	39 de                	cmp    esi,ebx
c0009eff:	75 d3                	jne    c0009ed4 <VAS::allocatePages(int, int)+0x5e>
c0009f01:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009f06:	75 12                	jne    c0009f1a <VAS::allocatePages(int, int)+0xa4>
c0009f08:	0f 20 d8             	mov    eax,cr3
c0009f0b:	0f 22 d8             	mov    cr3,eax
c0009f0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f12:	83 c4 2c             	add    esp,0x2c
c0009f15:	5b                   	pop    ebx
c0009f16:	5e                   	pop    esi
c0009f17:	5f                   	pop    edi
c0009f18:	5d                   	pop    ebp
c0009f19:	c3                   	ret    
c0009f1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009f1e:	c1 ee 0a             	shr    esi,0xa
c0009f21:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009f27:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009f2d:	c1 eb 0a             	shr    ebx,0xa
c0009f30:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f36:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f3c:	39 c3                	cmp    ebx,eax
c0009f3e:	77 ce                	ja     c0009f0e <VAS::allocatePages(int, int)+0x98>
c0009f40:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f43:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f49:	39 d8                	cmp    eax,ebx
c0009f4b:	73 f3                	jae    c0009f40 <VAS::allocatePages(int, int)+0xca>
c0009f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f51:	83 c4 2c             	add    esp,0x2c
c0009f54:	5b                   	pop    ebx
c0009f55:	5e                   	pop    esi
c0009f56:	5f                   	pop    edi
c0009f57:	5d                   	pop    ebp
c0009f58:	c3                   	ret    
c0009f59:	c7 04 24 04 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd04
c0009f60:	e8 c0 68 00 00       	call   c0010825 <KePanic(char const*)>
c0009f65:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009f68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f6c:	e9 41 ff ff ff       	jmp    c0009eb2 <VAS::allocatePages(int, int)+0x3c>
c0009f71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009f75:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f78:	e8 a3 f6 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c0009f7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009f81:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f86:	0f 87 a3 00 00 00    	ja     c000a02f <VAS::allocatePages(int, int)+0x1b9>
c0009f8c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009f90:	85 d2                	test   edx,edx
c0009f92:	7e 44                	jle    c0009fd8 <VAS::allocatePages(int, int)+0x162>
c0009f94:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0009f98:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0009f9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009fa0:	c1 e5 0c             	shl    ebp,0xc
c0009fa3:	81 ce 00 04 00 00    	or     esi,0x400
c0009fa9:	01 dd                	add    ebp,ebx
c0009fab:	e8 5c de ff ff       	call   c0007e0c <Phys::allocatePage()>
c0009fb0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0009fb4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009fb8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009fbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009fbf:	e8 7e fd ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fc4:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009fc9:	74 03                	je     c0009fce <VAS::allocatePages(int, int)+0x158>
c0009fcb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fce:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fd4:	39 dd                	cmp    ebp,ebx
c0009fd6:	75 d3                	jne    c0009fab <VAS::allocatePages(int, int)+0x135>
c0009fd8:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c0009fdd:	0f 84 25 ff ff ff    	je     c0009f08 <VAS::allocatePages(int, int)+0x92>
c0009fe3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009fe7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009feb:	c1 e0 0c             	shl    eax,0xc
c0009fee:	01 d0                	add    eax,edx
c0009ff0:	89 d3                	mov    ebx,edx
c0009ff2:	c1 eb 0a             	shr    ebx,0xa
c0009ff5:	c1 e8 0a             	shr    eax,0xa
c0009ff8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ffe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a003:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a009:	2d 00 00 40 00       	sub    eax,0x400000
c000a00e:	39 c3                	cmp    ebx,eax
c000a010:	0f 87 f8 fe ff ff    	ja     c0009f0e <VAS::allocatePages(int, int)+0x98>
c000a016:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a019:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a01f:	39 d8                	cmp    eax,ebx
c000a021:	73 f3                	jae    c000a016 <VAS::allocatePages(int, int)+0x1a0>
c000a023:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a027:	83 c4 2c             	add    esp,0x2c
c000a02a:	5b                   	pop    ebx
c000a02b:	5e                   	pop    esi
c000a02c:	5f                   	pop    edi
c000a02d:	5d                   	pop    ebp
c000a02e:	c3                   	ret    
c000a02f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a034:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a03a:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000a041:	0f 84 45 ff ff ff    	je     c0009f8c <VAS::allocatePages(int, int)+0x116>
c000a047:	81 4c 24 48 00 01 00 00 	or     DWORD PTR [esp+0x48],0x100
c000a04f:	e9 38 ff ff ff       	jmp    c0009f8c <VAS::allocatePages(int, int)+0x116>

c000a054 <VAS::setCPUSpecific(unsigned long)>:
c000a054:	83 ec 1c             	sub    esp,0x1c
c000a057:	b8 05 00 00 00       	mov    eax,0x5
c000a05c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a060:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a064:	ba 00 00 40 c2       	mov    edx,0xc2400000
c000a069:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a06d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a075:	89 04 24             	mov    DWORD PTR [esp],eax
c000a078:	e8 c5 fc ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a07d:	83 c4 1c             	add    esp,0x1c
c000a080:	c3                   	ret    
c000a081:	90                   	nop

c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a082:	55                   	push   ebp
c000a083:	57                   	push   edi
c000a084:	56                   	push   esi
c000a085:	53                   	push   ebx
c000a086:	83 ec 2c             	sub    esp,0x2c
c000a089:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a08e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000a092:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000a096:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000a09a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0a0:	0f b6 80 8d 11 00 00 	movzx  eax,BYTE PTR [eax+0x118d]
c000a0a7:	24 01                	and    al,0x1
c000a0a9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000a0ad:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a0b1:	85 c0                	test   eax,eax
c000a0b3:	7e 41                	jle    c000a0f6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x74>
c000a0b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a0b9:	89 f3                	mov    ebx,esi
c000a0bb:	c1 e0 0c             	shl    eax,0xc
c000a0be:	01 f0                	add    eax,esi
c000a0c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a0c4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000a0c8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000a0cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a0d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a0d3:	29 f0                	sub    eax,esi
c000a0d5:	01 d8                	add    eax,ebx
c000a0d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a0db:	e8 62 fc ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a0e0:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a0e5:	74 03                	je     c000a0ea <VAS::mapRange(unsigned long, unsigned long, int, int)+0x68>
c000a0e7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0ea:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0f0:	39 5c 24 1c          	cmp    DWORD PTR [esp+0x1c],ebx
c000a0f4:	75 ce                	jne    c000a0c4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000a0f6:	80 7c 24 1b 00       	cmp    BYTE PTR [esp+0x1b],0x0
c000a0fb:	75 10                	jne    c000a10d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8b>
c000a0fd:	0f 20 d8             	mov    eax,cr3
c000a100:	0f 22 d8             	mov    cr3,eax
c000a103:	83 c4 2c             	add    esp,0x2c
c000a106:	89 f0                	mov    eax,esi
c000a108:	5b                   	pop    ebx
c000a109:	5e                   	pop    esi
c000a10a:	5f                   	pop    edi
c000a10b:	5d                   	pop    ebp
c000a10c:	c3                   	ret    
c000a10d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000a111:	89 f3                	mov    ebx,esi
c000a113:	c1 eb 0a             	shr    ebx,0xa
c000a116:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a11c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a122:	c1 e0 0c             	shl    eax,0xc
c000a125:	01 f0                	add    eax,esi
c000a127:	c1 e8 0a             	shr    eax,0xa
c000a12a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a12f:	2d 00 00 40 00       	sub    eax,0x400000
c000a134:	39 c3                	cmp    ebx,eax
c000a136:	77 cb                	ja     c000a103 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x81>
c000a138:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a13b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a141:	39 d8                	cmp    eax,ebx
c000a143:	73 f3                	jae    c000a138 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xb6>
c000a145:	83 c4 2c             	add    esp,0x2c
c000a148:	89 f0                	mov    eax,esi
c000a14a:	5b                   	pop    ebx
c000a14b:	5e                   	pop    esi
c000a14c:	5f                   	pop    edi
c000a14d:	5d                   	pop    ebp
c000a14e:	c3                   	ret    
c000a14f:	90                   	nop

c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a150:	83 ec 4c             	sub    esp,0x4c
c000a153:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a157:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000a15b:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a15f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a163:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a167:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000a16b:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a16f:	0f b6 54 24 54       	movzx  edx,BYTE PTR [esp+0x54]
c000a174:	09 d8                	or     eax,ebx
c000a176:	a9 ff 0f 00 00       	test   eax,0xfff
c000a17b:	75 52                	jne    c000a1cf <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x7f>
c000a17d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a180:	89 de                	mov    esi,ebx
c000a182:	c1 ee 16             	shr    esi,0x16
c000a185:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c000a18c:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a190:	74 54                	je     c000a1e6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x96>
c000a192:	c1 eb 0a             	shr    ebx,0xa
c000a195:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000a199:	80 fa 01             	cmp    dl,0x1
c000a19c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000a1a0:	19 c0                	sbb    eax,eax
c000a1a2:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000a1a8:	c1 e6 0c             	shl    esi,0xc
c000a1ab:	25 00 00 c0 ff       	and    eax,0xffc00000
c000a1b0:	01 f3                	add    ebx,esi
c000a1b2:	09 ca                	or     edx,ecx
c000a1b4:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c000a1bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a1bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a1c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a1c7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a1cb:	83 c4 4c             	add    esp,0x4c
c000a1ce:	c3                   	ret    
c000a1cf:	c7 04 24 30 fd 01 c0 	mov    DWORD PTR [esp],0xc001fd30
c000a1d6:	88 54 24 24          	mov    BYTE PTR [esp+0x24],dl
c000a1da:	e8 46 66 00 00       	call   c0010825 <KePanic(char const*)>
c000a1df:	0f b6 54 24 24       	movzx  edx,BYTE PTR [esp+0x24]
c000a1e4:	eb 97                	jmp    c000a17d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x2d>
c000a1e6:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a1ea:	e8 1d dc ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a1ef:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a1f5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a1fc:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a200:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a204:	e8 17 f4 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000a209:	b9 01 00 00 00       	mov    ecx,0x1
c000a20e:	ba 03 00 00 00       	mov    edx,0x3
c000a213:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a217:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a21b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a21f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a222:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a226:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a22a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a22e:	e8 4f fe ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a233:	89 c1                	mov    ecx,eax
c000a235:	b8 00 10 00 00       	mov    eax,0x1000
c000a23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a23e:	31 c0                	xor    eax,eax
c000a240:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a243:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a247:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000a24b:	e8 30 63 ff ff       	call   c0000580 <memset>
c000a250:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a254:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a257:	e8 dd f6 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000a25c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a260:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a263:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c000a268:	81 c9 07 04 00 00    	or     ecx,0x407
c000a26e:	89 0c 38             	mov    DWORD PTR [eax+edi*1],ecx
c000a271:	e9 1c ff ff ff       	jmp    c000a192 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x42>

c000a276 <VAS::VAS(bool)>:
c000a276:	53                   	push   ebx
c000a277:	83 ec 48             	sub    esp,0x48
c000a27a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000a27e:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c000a282:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a286:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a28d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a291:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a298:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a29c:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c000a2a1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a2a4:	e8 63 db ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a2a9:	89 c2                	mov    edx,eax
c000a2ab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2af:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a2b2:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a2b8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000a2bf:	e8 5c f3 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000a2c4:	89 c2                	mov    edx,eax
c000a2c6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2cd:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c000a2d5:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000a2dd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a2e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a2e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a2e8:	e8 95 fd ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2ed:	89 c2                	mov    edx,eax
c000a2ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a2f3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a2f6:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000a2fe:	81 7c 24 3c ff 03 00 00 	cmp    DWORD PTR [esp+0x3c],0x3ff
c000a306:	7f 1c                	jg     c000a324 <VAS::VAS(bool)+0xae>
c000a308:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a30c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a30f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a313:	c1 e2 02             	shl    edx,0x2
c000a316:	01 d0                	add    eax,edx
c000a318:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a31e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000a322:	eb da                	jmp    c000a2fe <VAS::VAS(bool)+0x88>
c000a324:	c7 44 24 38 00 03 00 00 	mov    DWORD PTR [esp+0x38],0x300
c000a32c:	81 7c 24 38 ff 03 00 00 	cmp    DWORD PTR [esp+0x38],0x3ff
c000a334:	7f 75                	jg     c000a3ab <VAS::VAS(bool)+0x135>
c000a336:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a33a:	2d 00 02 00 00       	sub    eax,0x200
c000a33f:	c1 e0 0c             	shl    eax,0xc
c000a342:	83 c8 05             	or     eax,0x5
c000a345:	89 c2                	mov    edx,eax
c000a347:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a34c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a352:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a359:	24 10                	and    al,0x10
c000a35b:	74 07                	je     c000a364 <VAS::VAS(bool)+0xee>
c000a35d:	b8 00 01 00 00       	mov    eax,0x100
c000a362:	eb 05                	jmp    c000a369 <VAS::VAS(bool)+0xf3>
c000a364:	b8 00 00 00 00       	mov    eax,0x0
c000a369:	09 d0                	or     eax,edx
c000a36b:	89 c1                	mov    ecx,eax
c000a36d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a371:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a374:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a378:	c1 e2 02             	shl    edx,0x2
c000a37b:	01 d0                	add    eax,edx
c000a37d:	89 ca                	mov    edx,ecx
c000a37f:	89 10                	mov    DWORD PTR [eax],edx
c000a381:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a385:	2d 40 03 00 00       	sub    eax,0x340
c000a38a:	83 f8 7f             	cmp    eax,0x7f
c000a38d:	77 16                	ja     c000a3a5 <VAS::VAS(bool)+0x12f>
c000a38f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a393:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a396:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a39a:	c1 e2 02             	shl    edx,0x2
c000a39d:	01 d0                	add    eax,edx
c000a39f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a3a5:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000a3a9:	eb 81                	jmp    c000a32c <VAS::VAS(bool)+0xb6>
c000a3ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3b0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3b6:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a3bd:	24 10                	and    al,0x10
c000a3bf:	74 07                	je     c000a3c8 <VAS::VAS(bool)+0x152>
c000a3c1:	b8 03 41 00 00       	mov    eax,0x4103
c000a3c6:	eb 05                	jmp    c000a3cd <VAS::VAS(bool)+0x157>
c000a3c8:	b8 03 40 00 00       	mov    eax,0x4003
c000a3cd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000a3d1:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a3d4:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a3da:	89 02                	mov    DWORD PTR [edx],eax
c000a3dc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a3ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a3f1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a3f5:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3f8:	e8 57 fc ff ff       	call   c000a054 <VAS::setCPUSpecific(unsigned long)>
c000a3fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a401:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a404:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a409:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a40f:	0f b6 80 8c 11 00 00 	movzx  eax,BYTE PTR [eax+0x118c]
c000a416:	24 10                	and    al,0x10
c000a418:	74 07                	je     c000a421 <VAS::VAS(bool)+0x1ab>
c000a41a:	b8 00 01 00 00       	mov    eax,0x100
c000a41f:	eb 05                	jmp    c000a426 <VAS::VAS(bool)+0x1b0>
c000a421:	b8 00 00 00 00       	mov    eax,0x0
c000a426:	09 c2                	or     edx,eax
c000a428:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a42c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a42f:	05 fc 0f 00 00       	add    eax,0xffc
c000a434:	83 ca 03             	or     edx,0x3
c000a437:	89 10                	mov    DWORD PTR [eax],edx
c000a439:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a43e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a444:	89 04 24             	mov    DWORD PTR [esp],eax
c000a447:	e8 26 1d 00 00       	call   c000c172 <Device::getName()>
c000a44c:	c7 44 24 04 d3 fd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fdd3
c000a454:	89 04 24             	mov    DWORD PTR [esp],eax
c000a457:	e8 e4 63 ff ff       	call   c0000840 <strcmp>
c000a45c:	85 c0                	test   eax,eax
c000a45e:	0f 94 c0             	sete   al
c000a461:	84 c0                	test   al,al
c000a463:	0f 84 8b 00 00 00    	je     c000a4f4 <VAS::VAS(bool)+0x27e>
c000a469:	fa                   	cli    
c000a46a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a46f:	40                   	inc    eax
c000a470:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a475:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a47a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a480:	05 7c 09 00 00       	add    eax,0x97c
c000a485:	89 04 24             	mov    DWORD PTR [esp],eax
c000a488:	e8 51 d1 ff ff       	call   c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a48d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a492:	89 c3                	mov    ebx,eax
c000a494:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a499:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a49f:	05 7c 09 00 00       	add    eax,0x97c
c000a4a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4a7:	e8 32 d1 ff ff       	call   c00075de <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a4ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4b0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4b7:	e8 5e f4 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a4bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a4be:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a4c3:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c000a4cb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a4cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a4d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a4d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a4da:	e8 63 f8 ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a4df:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4e4:	48                   	dec    eax
c000a4e5:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a4ea:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a4ef:	85 c0                	test   eax,eax
c000a4f1:	75 01                	jne    c000a4f4 <VAS::VAS(bool)+0x27e>
c000a4f3:	fb                   	sti    
c000a4f4:	90                   	nop
c000a4f5:	83 c4 48             	add    esp,0x48
c000a4f8:	5b                   	pop    ebx
c000a4f9:	c3                   	ret    

c000a4fa <VAS::evict(unsigned long)>:
c000a4fa:	55                   	push   ebp
c000a4fb:	57                   	push   edi
c000a4fc:	56                   	push   esi
c000a4fd:	53                   	push   ebx
c000a4fe:	83 ec 3c             	sub    esp,0x3c
c000a501:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a505:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c000a509:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a50d:	e8 5d f2 ff ff       	call   c000976f <Virt::allocateSwapfilePage()>
c000a512:	8b 1d ac 1c 02 c0    	mov    ebx,DWORD PTR ds:0xc0021cac
c000a518:	85 db                	test   ebx,ebx
c000a51a:	89 c7                	mov    edi,eax
c000a51c:	7e 4a                	jle    c000a568 <VAS::evict(unsigned long)+0x6e>
c000a51e:	89 ee                	mov    esi,ebp
c000a520:	31 db                	xor    ebx,ebx
c000a522:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a525:	e8 2f f2 ff ff       	call   c0009759 <Virt::swapIDToSector(unsigned long)>
c000a52a:	31 c9                	xor    ecx,ecx
c000a52c:	ba 01 00 00 00       	mov    edx,0x1
c000a531:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a535:	81 c6 00 02 00 00    	add    esi,0x200
c000a53b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a53f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a543:	01 d8                	add    eax,ebx
c000a545:	43                   	inc    ebx
c000a546:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a54a:	0f be 05 b8 1c 02 c0 	movsx  eax,BYTE PTR ds:0xc0021cb8
c000a551:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a558:	89 04 24             	mov    DWORD PTR [esp],eax
c000a55b:	e8 22 2d 00 00       	call   c000d282 <LogicalDisk::write(unsigned long long, int, void*)>
c000a560:	39 1d ac 1c 02 c0    	cmp    DWORD PTR ds:0xc0021cac,ebx
c000a566:	7f ba                	jg     c000a522 <VAS::evict(unsigned long)+0x28>
c000a568:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a56c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a570:	c1 e7 0b             	shl    edi,0xb
c000a573:	89 04 24             	mov    DWORD PTR [esp],eax
c000a576:	e8 9f f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a57b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a57d:	89 d1                	mov    ecx,edx
c000a57f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a585:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a58b:	09 cf                	or     edi,ecx
c000a58d:	89 38                	mov    DWORD PTR [eax],edi
c000a58f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a592:	ff 05 a8 4f 02 c0    	inc    DWORD PTR ds:0xc0024fa8
c000a598:	e8 07 d8 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c000a59d:	0f 20 d8             	mov    eax,cr3
c000a5a0:	0f 22 d8             	mov    cr3,eax
c000a5a3:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a5a8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a5ac:	8d 50 01             	lea    edx,[eax+0x1]
c000a5af:	b8 e1 fd 01 c0       	mov    eax,0xc001fde1
c000a5b4:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a5ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5be:	83 c4 3c             	add    esp,0x3c
c000a5c1:	5b                   	pop    ebx
c000a5c2:	5e                   	pop    esi
c000a5c3:	5f                   	pop    edi
c000a5c4:	5d                   	pop    ebp
c000a5c5:	e9 ac 04 00 00       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>

c000a5ca <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a5ca:	83 ec 4c             	sub    esp,0x4c
c000a5cd:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c000a5d1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000a5d5:	c7 04 24 f2 fd 01 c0 	mov    DWORD PTR [esp],0xc001fdf2
c000a5dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000a5e0:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000a5e4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a5e8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a5ee:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000a5f2:	e8 7f 04 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a5f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000a5fb:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a5ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000a602:	e8 13 f3 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a607:	85 c0                	test   eax,eax
c000a609:	89 c6                	mov    esi,eax
c000a60b:	0f 95 c2             	setne  dl
c000a60e:	85 db                	test   ebx,ebx
c000a610:	0f 95 c0             	setne  al
c000a613:	20 c2                	and    dl,al
c000a615:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000a619:	75 19                	jne    c000a634 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c000a61b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000a620:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a624:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000a628:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000a62c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c000a630:	83 c4 4c             	add    esp,0x4c
c000a633:	c3                   	ret    
c000a634:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000a636:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a63c:	74 07                	je     c000a645 <VAS::tryLoadBackOffDisk(unsigned long)+0x7b>
c000a63e:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000a643:	eb d6                	jmp    c000a61b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a645:	e8 c2 d7 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a64a:	8b 16                	mov    edx,DWORD PTR [esi]
c000a64c:	c1 ed 0b             	shr    ebp,0xb
c000a64f:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a655:	09 c2                	or     edx,eax
c000a657:	81 ca 01 08 00 00    	or     edx,0x801
c000a65d:	89 16                	mov    DWORD PTR [esi],edx
c000a65f:	8b 35 ac 1c 02 c0    	mov    esi,DWORD PTR ds:0xc0021cac
c000a665:	85 f6                	test   esi,esi
c000a667:	7e 4a                	jle    c000a6b3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c000a669:	89 df                	mov    edi,ebx
c000a66b:	31 f6                	xor    esi,esi
c000a66d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a670:	e8 e4 f0 ff ff       	call   c0009759 <Virt::swapIDToSector(unsigned long)>
c000a675:	31 c9                	xor    ecx,ecx
c000a677:	ba 01 00 00 00       	mov    edx,0x1
c000a67c:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c000a680:	81 c7 00 02 00 00    	add    edi,0x200
c000a686:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a68a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a68e:	01 f0                	add    eax,esi
c000a690:	46                   	inc    esi
c000a691:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a695:	0f be 05 b8 1c 02 c0 	movsx  eax,BYTE PTR ds:0xc0021cb8
c000a69c:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a6a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6a6:	e8 6b 2b 00 00       	call   c000d216 <LogicalDisk::read(unsigned long long, int, void*)>
c000a6ab:	39 35 ac 1c 02 c0    	cmp    DWORD PTR ds:0xc0021cac,esi
c000a6b1:	7f ba                	jg     c000a66d <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c000a6b3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a6b7:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a6bc:	c7 04 24 05 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe05
c000a6c3:	48                   	dec    eax
c000a6c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6c8:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a6cd:	e8 a4 03 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a6d2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a6d5:	e8 61 f0 ff ff       	call   c000973b <Virt::freeSwapfilePage(unsigned long)>
c000a6da:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a6df:	48                   	dec    eax
c000a6e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a6e5:	75 01                	jne    c000a6e8 <VAS::tryLoadBackOffDisk(unsigned long)+0x11e>
c000a6e7:	fb                   	sti    
c000a6e8:	0f 20 d8             	mov    eax,cr3
c000a6eb:	0f 22 d8             	mov    cr3,eax
c000a6ee:	e9 28 ff ff ff       	jmp    c000a61b <VAS::tryLoadBackOffDisk(unsigned long)+0x51>
c000a6f3:	90                   	nop

c000a6f4 <VAS::scanForEviction()>:
c000a6f4:	57                   	push   edi
c000a6f5:	31 ff                	xor    edi,edi
c000a6f7:	56                   	push   esi
c000a6f8:	53                   	push   ebx
c000a6f9:	83 ec 20             	sub    esp,0x20
c000a6fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a700:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a703:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a709:	75 0e                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a70b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a70e:	89 da                	mov    edx,ebx
c000a710:	c1 ea 16             	shr    edx,0x16
c000a713:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a717:	74 51                	je     c000a76a <VAS::scanForEviction()+0x76>
c000a719:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a71d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a720:	e8 f5 f1 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c000a725:	8b 10                	mov    edx,DWORD PTR [eax]
c000a727:	89 d1                	mov    ecx,edx
c000a729:	81 e1 01 08 00 00    	and    ecx,0x801
c000a72f:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a735:	74 3e                	je     c000a775 <VAS::scanForEviction()+0x81>
c000a737:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a73d:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a743:	76 2b                	jbe    c000a770 <VAS::scanForEviction()+0x7c>
c000a745:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a74c:	47                   	inc    edi
c000a74d:	83 ff 03             	cmp    edi,0x3
c000a750:	74 32                	je     c000a784 <VAS::scanForEviction()+0x90>
c000a752:	31 db                	xor    ebx,ebx
c000a754:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a75a:	75 bd                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a75c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a75f:	89 da                	mov    edx,ebx
c000a761:	c1 ea 16             	shr    edx,0x16
c000a764:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a768:	75 af                	jne    c000a719 <VAS::scanForEviction()+0x25>
c000a76a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a770:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a773:	eb 8e                	jmp    c000a703 <VAS::scanForEviction()+0xf>
c000a775:	f6 c2 20             	test   dl,0x20
c000a778:	74 13                	je     c000a78d <VAS::scanForEviction()+0x99>
c000a77a:	83 e2 df             	and    edx,0xffffffdf
c000a77d:	89 10                	mov    DWORD PTR [eax],edx
c000a77f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a782:	eb b3                	jmp    c000a737 <VAS::scanForEviction()+0x43>
c000a784:	83 c4 20             	add    esp,0x20
c000a787:	31 c0                	xor    eax,eax
c000a789:	5b                   	pop    ebx
c000a78a:	5e                   	pop    esi
c000a78b:	5f                   	pop    edi
c000a78c:	c3                   	ret    
c000a78d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000a791:	89 d0                	mov    eax,edx
c000a793:	c7 04 24 1a fe 01 c0 	mov    DWORD PTR [esp],0xc001fe1a
c000a79a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a79f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7a3:	e8 ce 02 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a7a8:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a7ab:	89 34 24             	mov    DWORD PTR [esp],esi
c000a7ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7b2:	e8 43 fd ff ff       	call   c000a4fa <VAS::evict(unsigned long)>
c000a7b7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000a7ba:	c7 04 24 2e fe 01 c0 	mov    DWORD PTR [esp],0xc001fe2e
c000a7c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7c5:	e8 ac 02 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a7ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7ce:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a7d5:	83 c4 20             	add    esp,0x20
c000a7d8:	5b                   	pop    ebx
c000a7d9:	5e                   	pop    esi
c000a7da:	5f                   	pop    edi
c000a7db:	c3                   	ret    

c000a7dc <mapVASFirstTime>:
c000a7dc:	55                   	push   ebp
c000a7dd:	57                   	push   edi
c000a7de:	56                   	push   esi
c000a7df:	53                   	push   ebx
c000a7e0:	83 ec 2c             	sub    esp,0x2c
c000a7e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a7e8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a7eb:	4a                   	dec    edx
c000a7ec:	0f 84 06 01 00 00    	je     c000a8f8 <mapVASFirstTime+0x11c>
c000a7f2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a7f5:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a7fa:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a7ff:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a802:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a808:	c1 e5 15             	shl    ebp,0x15
c000a80b:	29 eb                	sub    ebx,ebp
c000a80d:	29 ef                	sub    edi,ebp
c000a80f:	e8 f8 d5 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a814:	b9 03 04 00 00       	mov    ecx,0x403
c000a819:	ba 01 00 00 00       	mov    edx,0x1
c000a81e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a822:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a828:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000a82c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a830:	89 34 24             	mov    DWORD PTR [esp],esi
c000a833:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a837:	e8 46 f8 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a83c:	39 fb                	cmp    ebx,edi
c000a83e:	75 cf                	jne    c000a80f <mapVASFirstTime+0x33>
c000a840:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a845:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a84a:	29 eb                	sub    ebx,ebp
c000a84c:	29 ef                	sub    edi,ebp
c000a84e:	e8 b9 d5 ff ff       	call   c0007e0c <Phys::allocatePage()>
c000a853:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a857:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a85b:	89 34 24             	mov    DWORD PTR [esp],esi
c000a85e:	19 d2                	sbb    edx,edx
c000a860:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a866:	83 e2 04             	and    edx,0x4
c000a869:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a86d:	81 c2 03 04 00 00    	add    edx,0x403
c000a873:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a877:	ba 01 00 00 00       	mov    edx,0x1
c000a87c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a880:	e8 fd f7 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a885:	39 df                	cmp    edi,ebx
c000a887:	75 c5                	jne    c000a84e <mapVASFirstTime+0x72>
c000a889:	bb 8c 40 02 c0       	mov    ebx,0xc002408c
c000a88e:	ba ff ff ff ff       	mov    edx,0xffffffff
c000a893:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a899:	b9 00 30 02 c0       	mov    ecx,0xc0023000
c000a89e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8a2:	c1 eb 0c             	shr    ebx,0xc
c000a8a5:	b8 04 00 00 00       	mov    eax,0x4
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	bf ff ff ff ff       	mov    edi,0xffffffff
c000a8b3:	bd 00 30 02 c0       	mov    ebp,0xc0023000
c000a8b8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a8bc:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8bf:	be 04 00 00 00       	mov    esi,0x4
c000a8c4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a8c8:	e8 c9 f1 ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c000a8cd:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a8d2:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000a8d6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a8da:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a8de:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000a8e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8e5:	e8 ac f1 ff ff       	call   c0009a96 <VAS::reflagRange(unsigned long, int, int, int)>
c000a8ea:	0f 20 d8             	mov    eax,cr3
c000a8ed:	0f 22 d8             	mov    cr3,eax
c000a8f0:	83 c4 2c             	add    esp,0x2c
c000a8f3:	5b                   	pop    ebx
c000a8f4:	5e                   	pop    esi
c000a8f5:	5f                   	pop    edi
c000a8f6:	5d                   	pop    ebp
c000a8f7:	c3                   	ret    
c000a8f8:	c7 04 24 41 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe41
c000a8ff:	e8 72 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a904:	83 c4 2c             	add    esp,0x2c
c000a907:	5b                   	pop    ebx
c000a908:	5e                   	pop    esi
c000a909:	5f                   	pop    edi
c000a90a:	5d                   	pop    ebp
c000a90b:	c3                   	ret    

c000a90c <__cxa_atexit>:
c000a90c:	31 c0                	xor    eax,eax
c000a90e:	c3                   	ret    

c000a90f <__cxa_finalize>:
c000a90f:	c3                   	ret    

c000a910 <__stack_chk_fail>:
c000a910:	55                   	push   ebp
c000a911:	89 e5                	mov    ebp,esp
c000a913:	83 ec 10             	sub    esp,0x10
c000a916:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a919:	68 5a fe 01 c0       	push   0xc001fe5a
c000a91e:	e8 53 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a923:	58                   	pop    eax
c000a924:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a927:	5a                   	pop    edx
c000a928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a92b:	68 5a fe 01 c0       	push   0xc001fe5a
c000a930:	e8 41 01 00 00       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000a935:	c7 04 24 62 fe 01 c0 	mov    DWORD PTR [esp],0xc001fe62
c000a93c:	e8 e4 5e 00 00       	call   c0010825 <KePanic(char const*)>
c000a941:	83 c4 10             	add    esp,0x10
c000a944:	c9                   	leave  
c000a945:	c3                   	ret    

c000a946 <__cxa_pure_virtual>:
c000a946:	83 ec 18             	sub    esp,0x18
c000a949:	68 7a fe 01 c0       	push   0xc001fe7a
c000a94e:	e8 d2 5e 00 00       	call   c0010825 <KePanic(char const*)>
c000a953:	83 c4 1c             	add    esp,0x1c
c000a956:	c3                   	ret    

c000a957 <operator new[](unsigned long)>:
c000a957:	e9 a0 d1 ff ff       	jmp    c0007afc <malloc>

c000a95c <operator delete(void*, unsigned long)>:
c000a95c:	e9 c1 d1 ff ff       	jmp    c0007b22 <rfree>

c000a961 <operator delete[](void*)>:
c000a961:	e9 bc d1 ff ff       	jmp    c0007b22 <rfree>

c000a966 <operator delete[](void*, unsigned long)>:
c000a966:	e9 b7 d1 ff ff       	jmp    c0007b22 <rfree>

c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a96b:	55                   	push   ebp
c000a96c:	b8 30 31 32 33       	mov    eax,0x33323130
c000a971:	57                   	push   edi
c000a972:	ba 34 35 36 37       	mov    edx,0x37363534
c000a977:	56                   	push   esi
c000a978:	bf 43 44 45 46       	mov    edi,0x46454443
c000a97d:	53                   	push   ebx
c000a97e:	bb 38 39 41 42       	mov    ebx,0x42413938
c000a983:	83 ec 20             	sub    esp,0x20
c000a986:	89 5c 24 17          	mov    DWORD PTR [esp+0x17],ebx
c000a98a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a98e:	89 7c 24 1b          	mov    DWORD PTR [esp+0x1b],edi
c000a992:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a996:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a99a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a99e:	89 54 24 13          	mov    DWORD PTR [esp+0x13],edx
c000a9a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a9a7:	89 f7                	mov    edi,esi
c000a9a9:	89 eb                	mov    ebx,ebp
c000a9ab:	eb 02                	jmp    c000a9af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x44>
c000a9ad:	89 c7                	mov    edi,eax
c000a9af:	31 d2                	xor    edx,edx
c000a9b1:	89 f8                	mov    eax,edi
c000a9b3:	f7 f1                	div    ecx
c000a9b5:	43                   	inc    ebx
c000a9b6:	39 cf                	cmp    edi,ecx
c000a9b8:	73 f3                	jae    c000a9ad <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000a9ba:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a9bd:	eb 02                	jmp    c000a9c1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x56>
c000a9bf:	89 c6                	mov    esi,eax
c000a9c1:	31 d2                	xor    edx,edx
c000a9c3:	89 f0                	mov    eax,esi
c000a9c5:	f7 f1                	div    ecx
c000a9c7:	4b                   	dec    ebx
c000a9c8:	39 ce                	cmp    esi,ecx
c000a9ca:	0f b6 54 14 0f       	movzx  edx,BYTE PTR [esp+edx*1+0xf]
c000a9cf:	88 13                	mov    BYTE PTR [ebx],dl
c000a9d1:	73 ec                	jae    c000a9bf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a9d3:	83 c4 20             	add    esp,0x20
c000a9d6:	89 e8                	mov    eax,ebp
c000a9d8:	5b                   	pop    ebx
c000a9d9:	5e                   	pop    esi
c000a9da:	5f                   	pop    edi
c000a9db:	5d                   	pop    ebp
c000a9dc:	c3                   	ret    

c000a9dd <Dbg::logc(char)>:
c000a9dd:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a9e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e8:	75 12                	jne    c000a9fc <Dbg::logc(char)+0x1f>
c000a9ea:	ba fd 03 00 00       	mov    edx,0x3fd
c000a9ef:	ec                   	in     al,dx
c000a9f0:	24 20                	and    al,0x20
c000a9f2:	74 fb                	je     c000a9ef <Dbg::logc(char)+0x12>
c000a9f4:	ba f8 03 00 00       	mov    edx,0x3f8
c000a9f9:	88 c8                	mov    al,cl
c000a9fb:	ee                   	out    dx,al
c000a9fc:	c3                   	ret    

c000a9fd <Dbg::logs(char*)>:
c000a9fd:	53                   	push   ebx
c000a9fe:	83 ec 04             	sub    esp,0x4
c000aa01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aa05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa08:	84 c0                	test   al,al
c000aa0a:	74 10                	je     c000aa1c <Dbg::logs(char*)+0x1f>
c000aa0c:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa0f:	43                   	inc    ebx
c000aa10:	e8 c8 ff ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aa15:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000aa18:	84 c0                	test   al,al
c000aa1a:	75 f0                	jne    c000aa0c <Dbg::logs(char*)+0xf>
c000aa1c:	58                   	pop    eax
c000aa1d:	5b                   	pop    ebx
c000aa1e:	c3                   	ret    

c000aa1f <Dbg::logWriteInt(unsigned int)>:
c000aa1f:	83 ec 1c             	sub    esp,0x1c
c000aa22:	b8 0a 00 00 00       	mov    eax,0xa
c000aa27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa2b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aa2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa37:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3a:	e8 2c ff ff ff       	call   c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aa3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa42:	e8 b6 ff ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000aa47:	83 c4 1c             	add    esp,0x1c
c000aa4a:	c3                   	ret    

c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>:
c000aa4b:	83 ec 1c             	sub    esp,0x1c
c000aa4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa56:	8d 44 24 10          	lea    eax,[esp+0x10]
c000aa5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa62:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa65:	e8 01 ff ff ff       	call   c000a96b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000aa6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa6d:	e8 8b ff ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000aa72:	83 c4 1c             	add    esp,0x1c
c000aa75:	c3                   	ret    

c000aa76 <Dbg::kprintf(char const*, ...)>:
c000aa76:	55                   	push   ebp
c000aa77:	57                   	push   edi
c000aa78:	56                   	push   esi
c000aa79:	53                   	push   ebx
c000aa7a:	83 ec 14             	sub    esp,0x14
c000aa7d:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000aa84:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000aa88:	74 08                	je     c000aa92 <Dbg::kprintf(char const*, ...)+0x1c>
c000aa8a:	83 c4 14             	add    esp,0x14
c000aa8d:	5b                   	pop    ebx
c000aa8e:	5e                   	pop    esi
c000aa8f:	5f                   	pop    edi
c000aa90:	5d                   	pop    ebp
c000aa91:	c3                   	ret    
c000aa92:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000aa96:	31 db                	xor    ebx,ebx
c000aa98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000aa9f:	84 c0                	test   al,al
c000aaa1:	74 e7                	je     c000aa8a <Dbg::kprintf(char const*, ...)+0x14>
c000aaa3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aaa6:	3c 25                	cmp    al,0x25
c000aaa8:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aaab:	75 46                	jne    c000aaf3 <Dbg::kprintf(char const*, ...)+0x7d>
c000aaad:	0f b6 07             	movzx  eax,BYTE PTR [edi]
c000aab0:	83 c3 02             	add    ebx,0x2
c000aab3:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000aab6:	2c 25                	sub    al,0x25
c000aab8:	3c 53                	cmp    al,0x53
c000aaba:	0f 87 e8 00 00 00    	ja     c000aba8 <Dbg::kprintf(char const*, ...)+0x132>
c000aac0:	0f b6 c0             	movzx  eax,al
c000aac3:	ff 24 85 90 fe 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0170]
c000aaca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000aace:	89 c8                	mov    eax,ecx
c000aad0:	83 c1 04             	add    ecx,0x4
c000aad3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000aad7:	8b 00                	mov    eax,DWORD PTR [eax]
c000aad9:	89 04 24             	mov    DWORD PTR [esp],eax
c000aadc:	e8 3e ff ff ff       	call   c000aa1f <Dbg::logWriteInt(unsigned int)>
c000aae1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aae5:	84 c0                	test   al,al
c000aae7:	74 a1                	je     c000aa8a <Dbg::kprintf(char const*, ...)+0x14>
c000aae9:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000aaec:	3c 25                	cmp    al,0x25
c000aaee:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000aaf1:	74 ba                	je     c000aaad <Dbg::kprintf(char const*, ...)+0x37>
c000aaf3:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf6:	89 eb                	mov    ebx,ebp
c000aaf8:	89 fd                	mov    ebp,edi
c000aafa:	e8 de fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aaff:	eb e0                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ab05:	89 c8                	mov    eax,ecx
c000ab07:	83 c1 04             	add    ecx,0x4
c000ab0a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ab0e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab10:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab13:	e8 e5 fe ff ff       	call   c000a9fd <Dbg::logs(char*)>
c000ab18:	eb c7                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab1e:	89 d0                	mov    eax,edx
c000ab20:	83 c2 04             	add    edx,0x4
c000ab23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab27:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab29:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2c:	e8 ee fe ff ff       	call   c000aa1f <Dbg::logWriteInt(unsigned int)>
c000ab31:	eb ae                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab37:	89 d0                	mov    eax,edx
c000ab39:	83 c2 04             	add    edx,0x4
c000ab3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab40:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000ab43:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab46:	e8 92 fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000ab4b:	eb 94                	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ab51:	89 c8                	mov    eax,ecx
c000ab53:	83 c1 04             	add    ecx,0x4
c000ab56:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ab5a:	b9 10 00 00 00       	mov    ecx,0x10
c000ab5f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ab63:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab65:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab68:	e8 de fe ff ff       	call   c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>
c000ab6d:	e9 6f ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab76:	89 d0                	mov    eax,edx
c000ab78:	83 c2 08             	add    edx,0x8
c000ab7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab7f:	ba 10 00 00 00       	mov    edx,0x10
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ab8a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab8d:	e8 b9 fe ff ff       	call   c000aa4b <Dbg::logWriteIntBase(unsigned int, int)>
c000ab92:	e9 4a ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000ab97:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000ab9e:	e8 3a fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000aba3:	e9 39 ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>
c000aba8:	c7 04 24 25 00 00 00 	mov    DWORD PTR [esp],0x25
c000abaf:	e8 29 fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000abb4:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000abb7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abba:	e8 1e fe ff ff       	call   c000a9dd <Dbg::logc(char)>
c000abbf:	e9 1d ff ff ff       	jmp    c000aae1 <Dbg::kprintf(char const*, ...)+0x6b>

c000abc4 <File::read(unsigned long long, void*, int*)>:
c000abc4:	53                   	push   ebx
c000abc5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abc9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000abcd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000abd4:	3c 19                	cmp    al,0x19
c000abd6:	77 35                	ja     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abd8:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000abdf:	85 c0                	test   eax,eax
c000abe1:	74 2a                	je     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abe3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000abe9:	85 c0                	test   eax,eax
c000abeb:	74 20                	je     c000ac0d <File::read(unsigned long long, void*, int*)+0x49>
c000abed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000abf1:	74 21                	je     c000ac14 <File::read(unsigned long long, void*, int*)+0x50>
c000abf3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000abf5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abf9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000abff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac07:	5b                   	pop    ebx
c000ac08:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ac0b:	ff e0                	jmp    eax
c000ac0d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac12:	eb 05                	jmp    c000ac19 <File::read(unsigned long long, void*, int*)+0x55>
c000ac14:	b8 05 00 00 00       	mov    eax,0x5
c000ac19:	5b                   	pop    ebx
c000ac1a:	c3                   	ret    
c000ac1b:	90                   	nop

c000ac1c <File::write(unsigned long long, void*, int*)>:
c000ac1c:	53                   	push   ebx
c000ac1d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac25:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac2c:	3c 19                	cmp    al,0x19
c000ac2e:	77 35                	ja     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac30:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	74 2a                	je     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac3b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac41:	85 c0                	test   eax,eax
c000ac43:	74 20                	je     c000ac65 <File::write(unsigned long long, void*, int*)+0x49>
c000ac45:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac49:	74 21                	je     c000ac6c <File::write(unsigned long long, void*, int*)+0x50>
c000ac4b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ac4d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac51:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ac57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac5f:	5b                   	pop    ebx
c000ac60:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ac63:	ff e0                	jmp    eax
c000ac65:	b8 0b 00 00 00       	mov    eax,0xb
c000ac6a:	eb 05                	jmp    c000ac71 <File::write(unsigned long long, void*, int*)+0x55>
c000ac6c:	b8 05 00 00 00       	mov    eax,0x5
c000ac71:	5b                   	pop    ebx
c000ac72:	c3                   	ret    
c000ac73:	90                   	nop

c000ac74 <Directory::read(unsigned long long, void*, int*)>:
c000ac74:	53                   	push   ebx
c000ac75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac7d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ac84:	3c 19                	cmp    al,0x19
c000ac86:	77 35                	ja     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac88:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ac8f:	85 c0                	test   eax,eax
c000ac91:	74 2a                	je     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac93:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac99:	85 c0                	test   eax,eax
c000ac9b:	74 20                	je     c000acbd <Directory::read(unsigned long long, void*, int*)+0x49>
c000ac9d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aca1:	74 21                	je     c000acc4 <Directory::read(unsigned long long, void*, int*)+0x50>
c000aca3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aca5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000acaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acb7:	5b                   	pop    ebx
c000acb8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000acbb:	ff e0                	jmp    eax
c000acbd:	b8 0b 00 00 00       	mov    eax,0xb
c000acc2:	eb 05                	jmp    c000acc9 <Directory::read(unsigned long long, void*, int*)+0x55>
c000acc4:	b8 05 00 00 00       	mov    eax,0x5
c000acc9:	5b                   	pop    ebx
c000acca:	c3                   	ret    
c000accb:	90                   	nop

c000accc <Directory::write(unsigned long long, void*, int*)>:
c000accc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd0:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000acd7:	b8 0b 00 00 00       	mov    eax,0xb
c000acdc:	80 fa 19             	cmp    dl,0x19
c000acdf:	77 18                	ja     c000acf9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000ace1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000ace8:	85 d2                	test   edx,edx
c000acea:	74 0d                	je     c000acf9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000acec:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000acf3:	19 c0                	sbb    eax,eax
c000acf5:	83 e0 0a             	and    eax,0xa
c000acf8:	40                   	inc    eax
c000acf9:	c3                   	ret    

c000acfa <File::isAtty()>:
c000acfa:	31 c0                	xor    eax,eax
c000acfc:	c3                   	ret    
c000acfd:	90                   	nop

c000acfe <Directory::isAtty()>:
c000acfe:	31 c0                	xor    eax,eax
c000ad00:	c3                   	ret    
c000ad01:	90                   	nop

c000ad02 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000ad02:	b8 0a 00 00 00       	mov    eax,0xa
c000ad07:	c3                   	ret    

c000ad08 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000ad08:	b8 0a 00 00 00       	mov    eax,0xa
c000ad0d:	c3                   	ret    

c000ad0e <Filesystem::allocateSwapfile(char const*, int)>:
c000ad0e:	31 c0                	xor    eax,eax
c000ad10:	31 d2                	xor    edx,edx
c000ad12:	c3                   	ret    
c000ad13:	90                   	nop

c000ad14 <File::~File()>:
c000ad14:	83 ec 1c             	sub    esp,0x1c
c000ad17:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000ad1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad20:	89 10                	mov    DWORD PTR [eax],edx
c000ad22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad26:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad29:	e8 96 e6 ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000ad2e:	90                   	nop
c000ad2f:	83 c4 1c             	add    esp,0x1c
c000ad32:	c3                   	ret    
c000ad33:	90                   	nop

c000ad34 <File::~File()>:
c000ad34:	83 ec 1c             	sub    esp,0x1c
c000ad37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad3b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad3e:	e8 d1 ff ff ff       	call   c000ad14 <File::~File()>
c000ad43:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad52:	e8 05 fc ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ad57:	83 c4 1c             	add    esp,0x1c
c000ad5a:	c3                   	ret    
c000ad5b:	90                   	nop

c000ad5c <Directory::~Directory()>:
c000ad5c:	83 ec 1c             	sub    esp,0x1c
c000ad5f:	ba 6c 00 02 c0       	mov    edx,0xc002006c
c000ad64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad68:	89 10                	mov    DWORD PTR [eax],edx
c000ad6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad6e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad71:	e8 4e e6 ff ff       	call   c00093c4 <UnixFile::~UnixFile()>
c000ad76:	90                   	nop
c000ad77:	83 c4 1c             	add    esp,0x1c
c000ad7a:	c3                   	ret    
c000ad7b:	90                   	nop

c000ad7c <Directory::~Directory()>:
c000ad7c:	83 ec 1c             	sub    esp,0x1c
c000ad7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad83:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad86:	e8 d1 ff ff ff       	call   c000ad5c <Directory::~Directory()>
c000ad8b:	c7 44 24 04 14 01 00 00 	mov    DWORD PTR [esp+0x4],0x114
c000ad93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ad97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9a:	e8 bd fb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000ad9f:	83 c4 1c             	add    esp,0x1c
c000ada2:	c3                   	ret    
c000ada3:	90                   	nop

c000ada4 <Filesystem::Filesystem()>:
c000ada4:	ba e8 ff 01 c0       	mov    edx,0xc001ffe8
c000ada9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adad:	89 10                	mov    DWORD PTR [eax],edx
c000adaf:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000adb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adb9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000adbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000adc0:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000adc5:	90                   	nop
c000adc6:	c3                   	ret    
c000adc7:	90                   	nop

c000adc8 <Filesystem::~Filesystem()>:
c000adc8:	ba e8 ff 01 c0       	mov    edx,0xc001ffe8
c000adcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000add1:	89 10                	mov    DWORD PTR [eax],edx
c000add3:	90                   	nop
c000add4:	c3                   	ret    
c000add5:	90                   	nop

c000add6 <Filesystem::~Filesystem()>:
c000add6:	83 ec 1c             	sub    esp,0x1c
c000add9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000addd:	89 04 24             	mov    DWORD PTR [esp],eax
c000ade0:	e8 e3 ff ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c000ade5:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c000aded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000adf1:	89 04 24             	mov    DWORD PTR [esp],eax
c000adf4:	e8 63 fb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000adf9:	83 c4 1c             	add    esp,0x1c
c000adfc:	c3                   	ret    

c000adfd <Fs::getcwd(Process*, char*, int)>:
c000adfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae01:	31 c0                	xor    eax,eax
c000ae03:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ae07:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ae0a:	7d 15                	jge    c000ae21 <Fs::getcwd(Process*, char*, int)+0x24>
c000ae0c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ae10:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ae17:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ae1a:	84 c9                	test   cl,cl
c000ae1c:	74 06                	je     c000ae24 <Fs::getcwd(Process*, char*, int)+0x27>
c000ae1e:	40                   	inc    eax
c000ae1f:	eb e2                	jmp    c000ae03 <Fs::getcwd(Process*, char*, int)+0x6>
c000ae21:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ae24:	31 c0                	xor    eax,eax
c000ae26:	c3                   	ret    

c000ae27 <Fs::initVFS()>:
c000ae27:	83 ec 18             	sub    esp,0x18
c000ae2a:	6a 08                	push   0x8
c000ae2c:	e8 cb cc ff ff       	call   c0007afc <malloc>
c000ae31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae34:	e8 37 dc 00 00       	call   c0018a70 <FAT::FAT()>
c000ae39:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ae40:	e8 b7 cc ff ff       	call   c0007afc <malloc>
c000ae45:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae48:	e8 87 ea 00 00       	call   c00198d4 <ISO9660::ISO9660()>
c000ae4d:	83 c4 1c             	add    esp,0x1c
c000ae50:	c3                   	ret    

c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ae51:	55                   	push   ebp
c000ae52:	57                   	push   edi
c000ae53:	56                   	push   esi
c000ae54:	53                   	push   ebx
c000ae55:	81 ec 10 04 00 00    	sub    esp,0x410
c000ae5b:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ae62:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ae69:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ae70:	68 00 04 00 00       	push   0x400
c000ae75:	6a 00                	push   0x0
c000ae77:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ae7b:	56                   	push   esi
c000ae7c:	e8 ff 56 ff ff       	call   c0000580 <memset>
c000ae81:	83 c4 10             	add    esp,0x10
c000ae84:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ae88:	75 0b                	jne    c000ae95 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ae8a:	50                   	push   eax
c000ae8b:	50                   	push   eax
c000ae8c:	57                   	push   edi
c000ae8d:	56                   	push   esi
c000ae8e:	e8 8d 58 ff ff       	call   c0000720 <strcpy>
c000ae93:	eb 40                	jmp    c000aed5 <Fs::standardiseFiles(char*, char const*, char const*)+0x84>
c000ae95:	8a 07                	mov    al,BYTE PTR [edi]
c000ae97:	3c 2f                	cmp    al,0x2f
c000ae99:	74 04                	je     c000ae9f <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ae9b:	3c 5c                	cmp    al,0x5c
c000ae9d:	75 17                	jne    c000aeb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x65>
c000ae9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aea2:	3c 60                	cmp    al,0x60
c000aea4:	7e 02                	jle    c000aea8 <Fs::standardiseFiles(char*, char const*, char const*)+0x57>
c000aea6:	2c 20                	sub    al,0x20
c000aea8:	88 04 24             	mov    BYTE PTR [esp],al
c000aeab:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aeb2:	50                   	push   eax
c000aeb3:	50                   	push   eax
c000aeb4:	eb 18                	jmp    c000aece <Fs::standardiseFiles(char*, char const*, char const*)+0x7d>
c000aeb6:	50                   	push   eax
c000aeb7:	50                   	push   eax
c000aeb8:	55                   	push   ebp
c000aeb9:	56                   	push   esi
c000aeba:	e8 61 58 ff ff       	call   c0000720 <strcpy>
c000aebf:	5a                   	pop    edx
c000aec0:	59                   	pop    ecx
c000aec1:	68 4b 0f 02 c0       	push   0xc0020f4b
c000aec6:	56                   	push   esi
c000aec7:	e8 64 5a ff ff       	call   c0000930 <strcat>
c000aecc:	5d                   	pop    ebp
c000aecd:	58                   	pop    eax
c000aece:	57                   	push   edi
c000aecf:	56                   	push   esi
c000aed0:	e8 5b 5a ff ff       	call   c0000930 <strcat>
c000aed5:	83 c4 10             	add    esp,0x10
c000aed8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aedb:	3c 60                	cmp    al,0x60
c000aedd:	7e 02                	jle    c000aee1 <Fs::standardiseFiles(char*, char const*, char const*)+0x90>
c000aedf:	2c 20                	sub    al,0x20
c000aee1:	88 04 24             	mov    BYTE PTR [esp],al
c000aee4:	bf 03 00 00 00       	mov    edi,0x3
c000aee9:	88 03                	mov    BYTE PTR [ebx],al
c000aeeb:	b8 03 00 00 00       	mov    eax,0x3
c000aef0:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aef7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aefd:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000af01:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000af04:	84 d2                	test   dl,dl
c000af06:	0f 84 91 00 00 00    	je     c000af9d <Fs::standardiseFiles(char*, char const*, char const*)+0x14c>
c000af0c:	8d 4f 01             	lea    ecx,[edi+0x1]
c000af0f:	80 fa 2f             	cmp    dl,0x2f
c000af12:	74 05                	je     c000af19 <Fs::standardiseFiles(char*, char const*, char const*)+0xc8>
c000af14:	80 fa 5c             	cmp    dl,0x5c
c000af17:	75 12                	jne    c000af2b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000af19:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000af1e:	89 c5                	mov    ebp,eax
c000af20:	74 09                	je     c000af2b <Fs::standardiseFiles(char*, char const*, char const*)+0xda>
c000af22:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000af26:	40                   	inc    eax
c000af27:	89 cf                	mov    edi,ecx
c000af29:	eb d6                	jmp    c000af01 <Fs::standardiseFiles(char*, char const*, char const*)+0xb0>
c000af2b:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000af30:	75 5b                	jne    c000af8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000af32:	80 fa 2e             	cmp    dl,0x2e
c000af35:	75 56                	jne    c000af8d <Fs::standardiseFiles(char*, char const*, char const*)+0x13c>
c000af37:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000af3b:	74 19                	je     c000af56 <Fs::standardiseFiles(char*, char const*, char const*)+0x105>
c000af3d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000af42:	74 53                	je     c000af97 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000af44:	89 f9                	mov    ecx,edi
c000af46:	41                   	inc    ecx
c000af47:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000af4a:	80 fa 2f             	cmp    dl,0x2f
c000af4d:	74 f7                	je     c000af46 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000af4f:	80 fa 5c             	cmp    dl,0x5c
c000af52:	74 f2                	je     c000af46 <Fs::standardiseFiles(char*, char const*, char const*)+0xf5>
c000af54:	eb d1                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af56:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000af5b:	74 3a                	je     c000af97 <Fs::standardiseFiles(char*, char const*, char const*)+0x146>
c000af5d:	83 f8 03             	cmp    eax,0x3
c000af60:	74 c5                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af62:	41                   	inc    ecx
c000af63:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000af66:	80 fa 2f             	cmp    dl,0x2f
c000af69:	74 f7                	je     c000af62 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000af6b:	80 fa 5c             	cmp    dl,0x5c
c000af6e:	74 f2                	je     c000af62 <Fs::standardiseFiles(char*, char const*, char const*)+0x111>
c000af70:	48                   	dec    eax
c000af71:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af75:	75 06                	jne    c000af7d <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000af77:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af7b:	eb f3                	jmp    c000af70 <Fs::standardiseFiles(char*, char const*, char const*)+0x11f>
c000af7d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000af81:	74 07                	je     c000af8a <Fs::standardiseFiles(char*, char const*, char const*)+0x139>
c000af83:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000af87:	48                   	dec    eax
c000af88:	eb f3                	jmp    c000af7d <Fs::standardiseFiles(char*, char const*, char const*)+0x12c>
c000af8a:	40                   	inc    eax
c000af8b:	eb 9a                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af8d:	80 fa 2f             	cmp    dl,0x2f
c000af90:	74 95                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af92:	80 fa 5c             	cmp    dl,0x5c
c000af95:	74 90                	je     c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af97:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000af9a:	40                   	inc    eax
c000af9b:	eb 8a                	jmp    c000af27 <Fs::standardiseFiles(char*, char const*, char const*)+0xd6>
c000af9d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000afa1:	83 ec 0c             	sub    esp,0xc
c000afa4:	53                   	push   ebx
c000afa5:	e8 76 56 ff ff       	call   c0000620 <strlen>
c000afaa:	83 c4 10             	add    esp,0x10
c000afad:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000afb2:	75 26                	jne    c000afda <Fs::standardiseFiles(char*, char const*, char const*)+0x189>
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	53                   	push   ebx
c000afb8:	e8 63 56 ff ff       	call   c0000620 <strlen>
c000afbd:	83 c4 10             	add    esp,0x10
c000afc0:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000afc5:	74 26                	je     c000afed <Fs::standardiseFiles(char*, char const*, char const*)+0x19c>
c000afc7:	83 ec 0c             	sub    esp,0xc
c000afca:	53                   	push   ebx
c000afcb:	e8 50 56 ff ff       	call   c0000620 <strlen>
c000afd0:	83 c4 10             	add    esp,0x10
c000afd3:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000afd8:	eb c7                	jmp    c000afa1 <Fs::standardiseFiles(char*, char const*, char const*)+0x150>
c000afda:	83 ec 0c             	sub    esp,0xc
c000afdd:	53                   	push   ebx
c000afde:	e8 3d 56 ff ff       	call   c0000620 <strlen>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000afeb:	74 c7                	je     c000afb4 <Fs::standardiseFiles(char*, char const*, char const*)+0x163>
c000afed:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aff3:	5b                   	pop    ebx
c000aff4:	5e                   	pop    esi
c000aff5:	5f                   	pop    edi
c000aff6:	5d                   	pop    ebp
c000aff7:	c3                   	ret    

c000aff8 <File::File(char const*, Process*)>:
c000aff8:	83 ec 1c             	sub    esp,0x1c
c000affb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000afff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b007:	89 04 24             	mov    DWORD PTR [esp],eax
c000b00a:	e8 ef e1 ff ff       	call   c00091fe <UnixFile::UnixFile(int)>
c000b00f:	ba 50 00 02 c0       	mov    edx,0xc0020050
c000b014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b018:	89 10                	mov    DWORD PTR [eax],edx
c000b01a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b01e:	05 0c 01 00 00       	add    eax,0x10c
c000b023:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b027:	83 c2 0d             	add    edx,0xd
c000b02a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b02e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b032:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b036:	89 14 24             	mov    DWORD PTR [esp],edx
c000b039:	e8 13 fe ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b03e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b042:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b046:	2c 41                	sub    al,0x41
c000b048:	88 c2                	mov    dl,al
c000b04a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b04e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b058:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b05c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b060:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b067:	0f b6 c0             	movzx  eax,al
c000b06a:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b071:	85 c0                	test   eax,eax
c000b073:	74 3c                	je     c000b0b1 <File::File(char const*, Process*)+0xb9>
c000b075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b079:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b080:	0f b6 c0             	movzx  eax,al
c000b083:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b08a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b090:	85 c0                	test   eax,eax
c000b092:	75 1d                	jne    c000b0b1 <File::File(char const*, Process*)+0xb9>
c000b094:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b098:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b09f:	0f b6 c0             	movzx  eax,al
c000b0a2:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b0a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0ac:	e8 95 20 00 00       	call   c000d146 <LogicalDisk::mount()>
c000b0b1:	90                   	nop
c000b0b2:	83 c4 1c             	add    esp,0x1c
c000b0b5:	c3                   	ret    

c000b0b6 <File::open(FileOpenMode)>:
c000b0b6:	53                   	push   ebx
c000b0b7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0bc:	83 ec 08             	sub    esp,0x8
c000b0bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0c3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0ca:	80 fa 19             	cmp    dl,0x19
c000b0cd:	77 40                	ja     c000b10f <File::open(FileOpenMode)+0x59>
c000b0cf:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0d6:	85 d2                	test   edx,edx
c000b0d8:	74 35                	je     c000b10f <File::open(FileOpenMode)+0x59>
c000b0da:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0e0:	85 d2                	test   edx,edx
c000b0e2:	74 2b                	je     c000b10f <File::open(FileOpenMode)+0x59>
c000b0e4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0e8:	b8 06 00 00 00       	mov    eax,0x6
c000b0ed:	75 20                	jne    c000b10f <File::open(FileOpenMode)+0x59>
c000b0ef:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0f1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fb:	51                   	push   ecx
c000b0fc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0ff:	51                   	push   ecx
c000b100:	52                   	push   edx
c000b101:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	85 c0                	test   eax,eax
c000b109:	75 04                	jne    c000b10f <File::open(FileOpenMode)+0x59>
c000b10b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b10f:	83 c4 08             	add    esp,0x8
c000b112:	5b                   	pop    ebx
c000b113:	c3                   	ret    

c000b114 <File::close()>:
c000b114:	53                   	push   ebx
c000b115:	b8 0b 00 00 00       	mov    eax,0xb
c000b11a:	83 ec 08             	sub    esp,0x8
c000b11d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b121:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b128:	80 fa 19             	cmp    dl,0x19
c000b12b:	77 41                	ja     c000b16e <File::close()+0x5a>
c000b12d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b134:	85 db                	test   ebx,ebx
c000b136:	74 36                	je     c000b16e <File::close()+0x5a>
c000b138:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b13f:	74 2d                	je     c000b16e <File::close()+0x5a>
c000b141:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b145:	b8 05 00 00 00       	mov    eax,0x5
c000b14a:	74 22                	je     c000b16e <File::close()+0x5a>
c000b14c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b150:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b157:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b15d:	53                   	push   ebx
c000b15e:	53                   	push   ebx
c000b15f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b161:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b167:	50                   	push   eax
c000b168:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	83 c4 08             	add    esp,0x8
c000b171:	5b                   	pop    ebx
c000b172:	c3                   	ret    
c000b173:	90                   	nop

c000b174 <File::seek(unsigned long long)>:
c000b174:	56                   	push   esi
c000b175:	b8 0b 00 00 00       	mov    eax,0xb
c000b17a:	53                   	push   ebx
c000b17b:	51                   	push   ecx
c000b17c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b180:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b184:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b188:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b18f:	80 fa 19             	cmp    dl,0x19
c000b192:	77 31                	ja     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b194:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b19b:	85 d2                	test   edx,edx
c000b19d:	74 26                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b19f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1a5:	85 d2                	test   edx,edx
c000b1a7:	74 1c                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b1a9:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b1ad:	b8 05 00 00 00       	mov    eax,0x5
c000b1b2:	74 11                	je     c000b1c5 <File::seek(unsigned long long)+0x51>
c000b1b4:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1b6:	53                   	push   ebx
c000b1b7:	51                   	push   ecx
c000b1b8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b1be:	52                   	push   edx
c000b1bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	5a                   	pop    edx
c000b1c6:	5b                   	pop    ebx
c000b1c7:	5e                   	pop    esi
c000b1c8:	c3                   	ret    
c000b1c9:	90                   	nop

c000b1ca <File::tell(unsigned long long*)>:
c000b1ca:	83 ec 0c             	sub    esp,0xc
c000b1cd:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1d6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1dd:	80 fa 19             	cmp    dl,0x19
c000b1e0:	77 34                	ja     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1e2:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b1e9:	85 d2                	test   edx,edx
c000b1eb:	74 29                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1ed:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1f3:	85 d2                	test   edx,edx
c000b1f5:	74 1f                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b1f7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1fb:	b8 05 00 00 00       	mov    eax,0x5
c000b200:	74 14                	je     c000b216 <File::tell(unsigned long long*)+0x4c>
c000b202:	50                   	push   eax
c000b203:	8b 02                	mov    eax,DWORD PTR [edx]
c000b205:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b209:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b20f:	52                   	push   edx
c000b210:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b213:	83 c4 10             	add    esp,0x10
c000b216:	83 c4 0c             	add    esp,0xc
c000b219:	c3                   	ret    

c000b21a <File::rewind()>:
c000b21a:	83 ec 10             	sub    esp,0x10
c000b21d:	6a 00                	push   0x0
c000b21f:	6a 00                	push   0x0
c000b221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b225:	e8 4a ff ff ff       	call   c000b174 <File::seek(unsigned long long)>
c000b22a:	83 c4 1c             	add    esp,0x1c
c000b22d:	c3                   	ret    

c000b22e <File::unlink()>:
c000b22e:	83 ec 0c             	sub    esp,0xc
c000b231:	b8 0b 00 00 00       	mov    eax,0xb
c000b236:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b23a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b241:	80 f9 19             	cmp    cl,0x19
c000b244:	77 2f                	ja     c000b275 <File::unlink()+0x47>
c000b246:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b24d:	85 c9                	test   ecx,ecx
c000b24f:	74 24                	je     c000b275 <File::unlink()+0x47>
c000b251:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b257:	85 c9                	test   ecx,ecx
c000b259:	74 1a                	je     c000b275 <File::unlink()+0x47>
c000b25b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b25f:	b8 06 00 00 00       	mov    eax,0x6
c000b264:	75 0f                	jne    c000b275 <File::unlink()+0x47>
c000b266:	50                   	push   eax
c000b267:	83 c2 0d             	add    edx,0xd
c000b26a:	50                   	push   eax
c000b26b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b26d:	52                   	push   edx
c000b26e:	51                   	push   ecx
c000b26f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b272:	83 c4 10             	add    esp,0x10
c000b275:	83 c4 0c             	add    esp,0xc
c000b278:	c3                   	ret    
c000b279:	90                   	nop

c000b27a <File::rename(char const*)>:
c000b27a:	83 ec 0c             	sub    esp,0xc
c000b27d:	b8 0b 00 00 00       	mov    eax,0xb
c000b282:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b286:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b28d:	80 f9 19             	cmp    cl,0x19
c000b290:	77 32                	ja     c000b2c4 <File::rename(char const*)+0x4a>
c000b292:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b299:	85 c9                	test   ecx,ecx
c000b29b:	74 27                	je     c000b2c4 <File::rename(char const*)+0x4a>
c000b29d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2a3:	85 c9                	test   ecx,ecx
c000b2a5:	74 1d                	je     c000b2c4 <File::rename(char const*)+0x4a>
c000b2a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ab:	b8 06 00 00 00       	mov    eax,0x6
c000b2b0:	75 12                	jne    c000b2c4 <File::rename(char const*)+0x4a>
c000b2b2:	50                   	push   eax
c000b2b3:	83 c2 0d             	add    edx,0xd
c000b2b6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2bc:	52                   	push   edx
c000b2bd:	51                   	push   ecx
c000b2be:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	83 c4 0c             	add    esp,0xc
c000b2c7:	c3                   	ret    

c000b2c8 <File::chfatattr(unsigned char, unsigned char)>:
c000b2c8:	56                   	push   esi
c000b2c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b2ce:	53                   	push   ebx
c000b2cf:	51                   	push   ecx
c000b2d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b2d4:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000b2d9:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000b2de:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b2e5:	80 fa 19             	cmp    dl,0x19
c000b2e8:	77 2f                	ja     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2ea:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b2f1:	85 d2                	test   edx,edx
c000b2f3:	74 24                	je     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2f5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b2fb:	85 d2                	test   edx,edx
c000b2fd:	74 1a                	je     c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b2ff:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b303:	b8 06 00 00 00       	mov    eax,0x6
c000b308:	75 0f                	jne    c000b319 <File::chfatattr(unsigned char, unsigned char)+0x51>
c000b30a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b30c:	83 c6 0d             	add    esi,0xd
c000b30f:	53                   	push   ebx
c000b310:	51                   	push   ecx
c000b311:	56                   	push   esi
c000b312:	52                   	push   edx
c000b313:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000b316:	83 c4 10             	add    esp,0x10
c000b319:	5a                   	pop    edx
c000b31a:	5b                   	pop    ebx
c000b31b:	5e                   	pop    esi
c000b31c:	c3                   	ret    
c000b31d:	90                   	nop

c000b31e <File::exists()>:
c000b31e:	83 ec 0c             	sub    esp,0xc
c000b321:	31 c0                	xor    eax,eax
c000b323:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b327:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b32e:	80 f9 19             	cmp    cl,0x19
c000b331:	77 24                	ja     c000b357 <File::exists()+0x39>
c000b333:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b33a:	85 c9                	test   ecx,ecx
c000b33c:	74 19                	je     c000b357 <File::exists()+0x39>
c000b33e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b344:	85 c9                	test   ecx,ecx
c000b346:	74 0f                	je     c000b357 <File::exists()+0x39>
c000b348:	50                   	push   eax
c000b349:	83 c2 0d             	add    edx,0xd
c000b34c:	50                   	push   eax
c000b34d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b34f:	52                   	push   edx
c000b350:	51                   	push   ecx
c000b351:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b354:	83 c4 10             	add    esp,0x10
c000b357:	83 c4 0c             	add    esp,0xc
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <File::stat(unsigned long long*, bool*)>:
c000b35c:	56                   	push   esi
c000b35d:	53                   	push   ebx
c000b35e:	50                   	push   eax
c000b35f:	b8 0b 00 00 00       	mov    eax,0xb
c000b364:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b368:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b36c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b370:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b377:	80 f9 19             	cmp    cl,0x19
c000b37a:	77 3d                	ja     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b37c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b383:	85 c9                	test   ecx,ecx
c000b385:	74 32                	je     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b387:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b38d:	85 c9                	test   ecx,ecx
c000b38f:	74 28                	je     c000b3b9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b391:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b395:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b397:	74 13                	je     c000b3ac <File::stat(unsigned long long*, bool*)+0x50>
c000b399:	83 ec 04             	sub    esp,0x4
c000b39c:	56                   	push   esi
c000b39d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b3a3:	51                   	push   ecx
c000b3a4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b3a7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b3aa:	eb 0a                	jmp    c000b3b6 <File::stat(unsigned long long*, bool*)+0x5a>
c000b3ac:	53                   	push   ebx
c000b3ad:	83 c2 0d             	add    edx,0xd
c000b3b0:	56                   	push   esi
c000b3b1:	52                   	push   edx
c000b3b2:	51                   	push   ecx
c000b3b3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	5a                   	pop    edx
c000b3ba:	5b                   	pop    ebx
c000b3bb:	5e                   	pop    esi
c000b3bc:	c3                   	ret    

c000b3bd <Fs::setcwd(Process*, char*)>:
c000b3bd:	55                   	push   ebp
c000b3be:	57                   	push   edi
c000b3bf:	56                   	push   esi
c000b3c0:	53                   	push   ebx
c000b3c1:	81 ec 20 02 00 00    	sub    esp,0x220
c000b3c7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b3ce:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b3d4:	57                   	push   edi
c000b3d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b3dc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b3e0:	56                   	push   esi
c000b3e1:	e8 6b fa ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b3e6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b3e9:	e8 32 52 ff ff       	call   c0000620 <strlen>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	83 f8 02             	cmp    eax,0x2
c000b3f4:	77 15                	ja     c000b40b <Fs::setcwd(Process*, char*)+0x4e>
c000b3f6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b3fb:	83 eb 41             	sub    ebx,0x41
c000b3fe:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b405:	85 c0                	test   eax,eax
c000b407:	75 1c                	jne    c000b425 <Fs::setcwd(Process*, char*)+0x68>
c000b409:	eb 2f                	jmp    c000b43a <Fs::setcwd(Process*, char*)+0x7d>
c000b40b:	83 ec 0c             	sub    esp,0xc
c000b40e:	56                   	push   esi
c000b40f:	e8 0c 52 ff ff       	call   c0000620 <strlen>
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	83 f8 03             	cmp    eax,0x3
c000b41a:	75 57                	jne    c000b473 <Fs::setcwd(Process*, char*)+0xb6>
c000b41c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b421:	75 50                	jne    c000b473 <Fs::setcwd(Process*, char*)+0xb6>
c000b423:	eb d1                	jmp    c000b3f6 <Fs::setcwd(Process*, char*)+0x39>
c000b425:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b42c:	75 0c                	jne    c000b43a <Fs::setcwd(Process*, char*)+0x7d>
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	50                   	push   eax
c000b432:	e8 0f 1d 00 00       	call   c000d146 <LogicalDisk::mount()>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	83 fb 19             	cmp    ebx,0x19
c000b43d:	b8 03 00 00 00       	mov    eax,0x3
c000b442:	0f 87 c6 00 00 00    	ja     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b448:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b44f:	b8 05 00 00 00       	mov    eax,0x5
c000b454:	85 d2                	test   edx,edx
c000b456:	0f 84 b2 00 00 00    	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b45c:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b463:	b8 06 00 00 00       	mov    eax,0x6
c000b468:	0f 85 92 00 00 00    	jne    c000b500 <Fs::setcwd(Process*, char*)+0x143>
c000b46e:	e9 9b 00 00 00       	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b473:	83 ec 0c             	sub    esp,0xc
c000b476:	68 14 01 00 00       	push   0x114
c000b47b:	e8 7c c6 ff ff       	call   c0007afc <malloc>
c000b480:	83 c4 0c             	add    esp,0xc
c000b483:	55                   	push   ebp
c000b484:	56                   	push   esi
c000b485:	50                   	push   eax
c000b486:	89 c3                	mov    ebx,eax
c000b488:	e8 6b fb ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000b48d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b492:	83 c4 0c             	add    esp,0xc
c000b495:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b499:	50                   	push   eax
c000b49a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b49e:	50                   	push   eax
c000b49f:	53                   	push   ebx
c000b4a0:	e8 b7 fe ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c000b4a5:	83 c4 10             	add    esp,0x10
c000b4a8:	83 f8 02             	cmp    eax,0x2
c000b4ab:	74 27                	je     c000b4d4 <Fs::setcwd(Process*, char*)+0x117>
c000b4ad:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4b2:	75 1c                	jne    c000b4d0 <Fs::setcwd(Process*, char*)+0x113>
c000b4b4:	85 db                	test   ebx,ebx
c000b4b6:	b8 02 00 00 00       	mov    eax,0x2
c000b4bb:	74 51                	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4bf:	83 ec 0c             	sub    esp,0xc
c000b4c2:	53                   	push   ebx
c000b4c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	b8 02 00 00 00       	mov    eax,0x2
c000b4ce:	eb 3e                	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4d0:	85 c0                	test   eax,eax
c000b4d2:	74 1c                	je     c000b4f0 <Fs::setcwd(Process*, char*)+0x133>
c000b4d4:	85 db                	test   ebx,ebx
c000b4d6:	b8 01 00 00 00       	mov    eax,0x1
c000b4db:	74 31                	je     c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4df:	83 ec 0c             	sub    esp,0xc
c000b4e2:	53                   	push   ebx
c000b4e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	b8 01 00 00 00       	mov    eax,0x1
c000b4ee:	eb 1e                	jmp    c000b50e <Fs::setcwd(Process*, char*)+0x151>
c000b4f0:	85 db                	test   ebx,ebx
c000b4f2:	74 0c                	je     c000b500 <Fs::setcwd(Process*, char*)+0x143>
c000b4f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4f6:	83 ec 0c             	sub    esp,0xc
c000b4f9:	53                   	push   ebx
c000b4fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	50                   	push   eax
c000b501:	50                   	push   eax
c000b502:	56                   	push   esi
c000b503:	57                   	push   edi
c000b504:	e8 17 52 ff ff       	call   c0000720 <strcpy>
c000b509:	83 c4 10             	add    esp,0x10
c000b50c:	31 c0                	xor    eax,eax
c000b50e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b514:	5b                   	pop    ebx
c000b515:	5e                   	pop    esi
c000b516:	5f                   	pop    edi
c000b517:	5d                   	pop    ebp
c000b518:	c3                   	ret    
c000b519:	90                   	nop

c000b51a <Directory::Directory(char const*, Process*)>:
c000b51a:	83 ec 1c             	sub    esp,0x1c
c000b51d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b521:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b529:	89 04 24             	mov    DWORD PTR [esp],eax
c000b52c:	e8 cd dc ff ff       	call   c00091fe <UnixFile::UnixFile(int)>
c000b531:	ba 6c 00 02 c0       	mov    edx,0xc002006c
c000b536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b53a:	89 10                	mov    DWORD PTR [eax],edx
c000b53c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b540:	05 0c 01 00 00       	add    eax,0x10c
c000b545:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b549:	83 c2 0d             	add    edx,0xd
c000b54c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b550:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b554:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b558:	89 14 24             	mov    DWORD PTR [esp],edx
c000b55b:	e8 f1 f8 ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b564:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
c000b568:	2c 41                	sub    al,0x41
c000b56a:	88 c2                	mov    dl,al
c000b56c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b570:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b57a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b582:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b589:	0f b6 c0             	movzx  eax,al
c000b58c:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b593:	85 c0                	test   eax,eax
c000b595:	74 3c                	je     c000b5d3 <Directory::Directory(char const*, Process*)+0xb9>
c000b597:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b59b:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b5a2:	0f b6 c0             	movzx  eax,al
c000b5a5:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b5ac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b5b2:	85 c0                	test   eax,eax
c000b5b4:	75 1d                	jne    c000b5d3 <Directory::Directory(char const*, Process*)+0xb9>
c000b5b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b5ba:	0f b6 80 0d 01 00 00 	movzx  eax,BYTE PTR [eax+0x10d]
c000b5c1:	0f b6 c0             	movzx  eax,al
c000b5c4:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b5cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5ce:	e8 73 1b 00 00       	call   c000d146 <LogicalDisk::mount()>
c000b5d3:	90                   	nop
c000b5d4:	83 c4 1c             	add    esp,0x1c
c000b5d7:	c3                   	ret    

c000b5d8 <Directory::open()>:
c000b5d8:	53                   	push   ebx
c000b5d9:	b8 0b 00 00 00       	mov    eax,0xb
c000b5de:	83 ec 08             	sub    esp,0x8
c000b5e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b5e5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b5ec:	80 fa 19             	cmp    dl,0x19
c000b5ef:	77 3d                	ja     c000b62e <Directory::open()+0x56>
c000b5f1:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b5f8:	85 d2                	test   edx,edx
c000b5fa:	74 32                	je     c000b62e <Directory::open()+0x56>
c000b5fc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b602:	85 d2                	test   edx,edx
c000b604:	74 28                	je     c000b62e <Directory::open()+0x56>
c000b606:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b60a:	b8 06 00 00 00       	mov    eax,0x6
c000b60f:	75 1d                	jne    c000b62e <Directory::open()+0x56>
c000b611:	50                   	push   eax
c000b612:	8b 02                	mov    eax,DWORD PTR [edx]
c000b614:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b61a:	51                   	push   ecx
c000b61b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b61e:	51                   	push   ecx
c000b61f:	52                   	push   edx
c000b620:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b623:	83 c4 10             	add    esp,0x10
c000b626:	85 c0                	test   eax,eax
c000b628:	75 04                	jne    c000b62e <Directory::open()+0x56>
c000b62a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b62e:	83 c4 08             	add    esp,0x8
c000b631:	5b                   	pop    ebx
c000b632:	c3                   	ret    
c000b633:	90                   	nop

c000b634 <Directory::close()>:
c000b634:	53                   	push   ebx
c000b635:	b8 0b 00 00 00       	mov    eax,0xb
c000b63a:	83 ec 08             	sub    esp,0x8
c000b63d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b641:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b648:	80 fa 19             	cmp    dl,0x19
c000b64b:	77 41                	ja     c000b68e <Directory::close()+0x5a>
c000b64d:	8b 1c 95 20 74 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd8be0]
c000b654:	85 db                	test   ebx,ebx
c000b656:	74 36                	je     c000b68e <Directory::close()+0x5a>
c000b658:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b65f:	74 2d                	je     c000b68e <Directory::close()+0x5a>
c000b661:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b665:	b8 05 00 00 00       	mov    eax,0x5
c000b66a:	74 22                	je     c000b68e <Directory::close()+0x5a>
c000b66c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b670:	8b 04 95 20 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8be0]
c000b677:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b67d:	53                   	push   ebx
c000b67e:	53                   	push   ebx
c000b67f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b681:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b687:	50                   	push   eax
c000b688:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b68b:	83 c4 10             	add    esp,0x10
c000b68e:	83 c4 08             	add    esp,0x8
c000b691:	5b                   	pop    ebx
c000b692:	c3                   	ret    
c000b693:	90                   	nop

c000b694 <Directory::unlink()>:
c000b694:	83 ec 0c             	sub    esp,0xc
c000b697:	b8 0b 00 00 00       	mov    eax,0xb
c000b69c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6a7:	80 f9 19             	cmp    cl,0x19
c000b6aa:	77 2f                	ja     c000b6db <Directory::unlink()+0x47>
c000b6ac:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6b3:	85 c9                	test   ecx,ecx
c000b6b5:	74 24                	je     c000b6db <Directory::unlink()+0x47>
c000b6b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6bd:	85 c9                	test   ecx,ecx
c000b6bf:	74 1a                	je     c000b6db <Directory::unlink()+0x47>
c000b6c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6c5:	b8 06 00 00 00       	mov    eax,0x6
c000b6ca:	75 0f                	jne    c000b6db <Directory::unlink()+0x47>
c000b6cc:	50                   	push   eax
c000b6cd:	83 c2 0d             	add    edx,0xd
c000b6d0:	50                   	push   eax
c000b6d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b6d3:	52                   	push   edx
c000b6d4:	51                   	push   ecx
c000b6d5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b6d8:	83 c4 10             	add    esp,0x10
c000b6db:	83 c4 0c             	add    esp,0xc
c000b6de:	c3                   	ret    
c000b6df:	90                   	nop

c000b6e0 <Directory::rename(char const*)>:
c000b6e0:	83 ec 0c             	sub    esp,0xc
c000b6e3:	b8 0b 00 00 00       	mov    eax,0xb
c000b6e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6f3:	80 f9 19             	cmp    cl,0x19
c000b6f6:	77 32                	ja     c000b72a <Directory::rename(char const*)+0x4a>
c000b6f8:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6ff:	85 c9                	test   ecx,ecx
c000b701:	74 27                	je     c000b72a <Directory::rename(char const*)+0x4a>
c000b703:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b709:	85 c9                	test   ecx,ecx
c000b70b:	74 1d                	je     c000b72a <Directory::rename(char const*)+0x4a>
c000b70d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b711:	b8 06 00 00 00       	mov    eax,0x6
c000b716:	75 12                	jne    c000b72a <Directory::rename(char const*)+0x4a>
c000b718:	50                   	push   eax
c000b719:	83 c2 0d             	add    edx,0xd
c000b71c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b71e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b722:	52                   	push   edx
c000b723:	51                   	push   ecx
c000b724:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b727:	83 c4 10             	add    esp,0x10
c000b72a:	83 c4 0c             	add    esp,0xc
c000b72d:	c3                   	ret    

c000b72e <Directory::exists()>:
c000b72e:	83 ec 0c             	sub    esp,0xc
c000b731:	31 c0                	xor    eax,eax
c000b733:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b737:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b73e:	80 f9 19             	cmp    cl,0x19
c000b741:	77 24                	ja     c000b767 <Directory::exists()+0x39>
c000b743:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b74a:	85 c9                	test   ecx,ecx
c000b74c:	74 19                	je     c000b767 <Directory::exists()+0x39>
c000b74e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b754:	85 c9                	test   ecx,ecx
c000b756:	74 0f                	je     c000b767 <Directory::exists()+0x39>
c000b758:	50                   	push   eax
c000b759:	83 c2 0d             	add    edx,0xd
c000b75c:	50                   	push   eax
c000b75d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b75f:	52                   	push   edx
c000b760:	51                   	push   ecx
c000b761:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	83 c4 0c             	add    esp,0xc
c000b76a:	c3                   	ret    
c000b76b:	90                   	nop

c000b76c <Directory::read(dirent*)>:
c000b76c:	83 ec 1c             	sub    esp,0x1c
c000b76f:	b8 0b 00 00 00       	mov    eax,0xb
c000b774:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b778:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b77f:	80 fa 19             	cmp    dl,0x19
c000b782:	77 30                	ja     c000b7b4 <Directory::read(dirent*)+0x48>
c000b784:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b78b:	85 d2                	test   edx,edx
c000b78d:	74 25                	je     c000b7b4 <Directory::read(dirent*)+0x48>
c000b78f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b796:	74 1c                	je     c000b7b4 <Directory::read(dirent*)+0x48>
c000b798:	83 ec 0c             	sub    esp,0xc
c000b79b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b79d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b7a1:	52                   	push   edx
c000b7a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b7a6:	6a 00                	push   0x0
c000b7a8:	68 10 01 00 00       	push   0x110
c000b7ad:	51                   	push   ecx
c000b7ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b7b1:	83 c4 20             	add    esp,0x20
c000b7b4:	83 c4 1c             	add    esp,0x1c
c000b7b7:	c3                   	ret    

c000b7b8 <Directory::create()>:
c000b7b8:	83 ec 0c             	sub    esp,0xc
c000b7bb:	b8 0b 00 00 00       	mov    eax,0xb
c000b7c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b7cb:	80 f9 19             	cmp    cl,0x19
c000b7ce:	77 2f                	ja     c000b7ff <Directory::create()+0x47>
c000b7d0:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b7d7:	85 c9                	test   ecx,ecx
c000b7d9:	74 24                	je     c000b7ff <Directory::create()+0x47>
c000b7db:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b7e1:	85 c9                	test   ecx,ecx
c000b7e3:	74 1a                	je     c000b7ff <Directory::create()+0x47>
c000b7e5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b7e9:	b8 06 00 00 00       	mov    eax,0x6
c000b7ee:	75 0f                	jne    c000b7ff <Directory::create()+0x47>
c000b7f0:	50                   	push   eax
c000b7f1:	83 c2 0d             	add    edx,0xd
c000b7f4:	50                   	push   eax
c000b7f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b7f7:	52                   	push   edx
c000b7f8:	51                   	push   ecx
c000b7f9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b7fc:	83 c4 10             	add    esp,0x10
c000b7ff:	83 c4 0c             	add    esp,0xc
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b804:	b8 0a 00 00 00       	mov    eax,0xa
c000b809:	c3                   	ret    
c000b80a:	66 90                	xchg   ax,ax

c000b80c <Bus::Bus(char const*)>:
c000b80c:	83 ec 1c             	sub    esp,0x1c
c000b80f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b813:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b817:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b81b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b81e:	e8 55 08 00 00       	call   c000c078 <Device::Device(char const*)>
c000b823:	ba 88 00 02 c0       	mov    edx,0xc0020088
c000b828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b82c:	89 10                	mov    DWORD PTR [eax],edx
c000b82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b832:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b83c:	90                   	nop
c000b83d:	83 c4 1c             	add    esp,0x1c
c000b840:	c3                   	ret    
c000b841:	90                   	nop
c000b842:	66 90                	xchg   ax,ax

c000b844 <Bus::~Bus()>:
c000b844:	83 ec 1c             	sub    esp,0x1c
c000b847:	ba 88 00 02 c0       	mov    edx,0xc0020088
c000b84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b850:	89 10                	mov    DWORD PTR [eax],edx
c000b852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b856:	89 04 24             	mov    DWORD PTR [esp],eax
c000b859:	e8 86 05 00 00       	call   c000bde4 <Device::~Device()>
c000b85e:	90                   	nop
c000b85f:	83 c4 1c             	add    esp,0x1c
c000b862:	c3                   	ret    
c000b863:	90                   	nop

c000b864 <Bus::~Bus()>:
c000b864:	83 ec 1c             	sub    esp,0x1c
c000b867:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b86b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b86e:	e8 d1 ff ff ff       	call   c000b844 <Bus::~Bus()>
c000b873:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b87b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b87f:	89 04 24             	mov    DWORD PTR [esp],eax
c000b882:	e8 d5 f0 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000b887:	83 c4 1c             	add    esp,0x1c
c000b88a:	c3                   	ret    

c000b88b <beepThread(void*)>:
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b893:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b897:	48                   	dec    eax
c000b898:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b89d:	75 01                	jne    c000b8a0 <beepThread(void*)+0x15>
c000b89f:	fb                   	sti    
c000b8a0:	6b c2 0a             	imul   eax,edx,0xa
c000b8a3:	83 ec 0c             	sub    esp,0xc
c000b8a6:	50                   	push   eax
c000b8a7:	e8 80 9b 00 00       	call   c001542c <milliTenthSleep(unsigned int)>
c000b8ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b8b3:	e8 cf b8 00 00       	call   c0017187 <HalMakeBeep(int)>
c000b8b8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b8c0:	83 c4 1c             	add    esp,0x1c
c000b8c3:	e9 64 9a 00 00       	jmp    c001532c <blockTask(TaskState)>

c000b8c8 <Krnl::beep(int, int, bool)>:
c000b8c8:	53                   	push   ebx
c000b8c9:	83 ec 24             	sub    esp,0x24
c000b8cc:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c000b8d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8d4:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000b8d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b8dc:	e8 a6 b8 00 00       	call   c0017187 <HalMakeBeep(int)>
c000b8e1:	83 c4 10             	add    esp,0x10
c000b8e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b8e8:	84 c0                	test   al,al
c000b8ea:	74 1d                	je     c000b909 <Krnl::beep(int, int, bool)+0x41>
c000b8ec:	6b db 0a             	imul   ebx,ebx,0xa
c000b8ef:	83 ec 0c             	sub    esp,0xc
c000b8f2:	53                   	push   ebx
c000b8f3:	e8 34 9b 00 00       	call   c001542c <milliTenthSleep(unsigned int)>
c000b8f8:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000b900:	83 c4 28             	add    esp,0x28
c000b903:	5b                   	pop    ebx
c000b904:	e9 7e b8 00 00       	jmp    c0017187 <HalMakeBeep(int)>
c000b909:	68 e6 00 00 00       	push   0xe6
c000b90e:	53                   	push   ebx
c000b90f:	68 8b b8 00 c0       	push   0xc000b88b
c000b914:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b91a:	e8 d9 95 00 00       	call   c0014ef8 <Process::createThread(void (*)(void*), void*, int)>
c000b91f:	83 c4 28             	add    esp,0x28
c000b922:	5b                   	pop    ebx
c000b923:	c3                   	ret    

c000b924 <User::loadClockSettings(int)>:
c000b924:	53                   	push   ebx
c000b925:	83 ec 14             	sub    esp,0x14
c000b928:	68 14 01 00 00       	push   0x114
c000b92d:	e8 ca c1 ff ff       	call   c0007afc <malloc>
c000b932:	83 c4 0c             	add    esp,0xc
c000b935:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b93b:	68 ac 00 02 c0       	push   0xc00200ac
c000b940:	50                   	push   eax
c000b941:	89 c3                	mov    ebx,eax
c000b943:	e8 b0 f6 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000b948:	58                   	pop    eax
c000b949:	5a                   	pop    edx
c000b94a:	6a 01                	push   0x1
c000b94c:	53                   	push   ebx
c000b94d:	e8 64 f7 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c000b952:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b955:	e8 ba f7 ff ff       	call   c000b114 <File::close()>
c000b95a:	83 c4 10             	add    esp,0x10
c000b95d:	85 db                	test   ebx,ebx
c000b95f:	74 0f                	je     c000b970 <User::loadClockSettings(int)+0x4c>
c000b961:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b963:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b967:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b96a:	83 c4 08             	add    esp,0x8
c000b96d:	5b                   	pop    ebx
c000b96e:	ff e0                	jmp    eax
c000b970:	83 c4 08             	add    esp,0x8
c000b973:	5b                   	pop    ebx
c000b974:	c3                   	ret    
c000b975:	90                   	nop

c000b976 <Clock::Clock(char const*)>:
c000b976:	83 ec 1c             	sub    esp,0x1c
c000b979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b97d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b981:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b985:	89 04 24             	mov    DWORD PTR [esp],eax
c000b988:	e8 eb 06 00 00       	call   c000c078 <Device::Device(char const*)>
c000b98d:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c000b992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b996:	89 10                	mov    DWORD PTR [eax],edx
c000b998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b99c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b9a6:	90                   	nop
c000b9a7:	83 c4 1c             	add    esp,0x1c
c000b9aa:	c3                   	ret    
c000b9ab:	90                   	nop

c000b9ac <Clock::~Clock()>:
c000b9ac:	83 ec 1c             	sub    esp,0x1c
c000b9af:	ba d4 00 02 c0       	mov    edx,0xc00200d4
c000b9b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9b8:	89 10                	mov    DWORD PTR [eax],edx
c000b9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9be:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9c1:	e8 1e 04 00 00       	call   c000bde4 <Device::~Device()>
c000b9c6:	90                   	nop
c000b9c7:	83 c4 1c             	add    esp,0x1c
c000b9ca:	c3                   	ret    
c000b9cb:	90                   	nop

c000b9cc <Clock::~Clock()>:
c000b9cc:	83 ec 1c             	sub    esp,0x1c
c000b9cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9d6:	e8 d1 ff ff ff       	call   c000b9ac <Clock::~Clock()>
c000b9db:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000b9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9ea:	e8 6d ef ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000b9ef:	83 c4 1c             	add    esp,0x1c
c000b9f2:	c3                   	ret    
c000b9f3:	90                   	nop

c000b9f4 <Clock::timeInSecondsLocal()>:
c000b9f4:	83 ec 18             	sub    esp,0x18
c000b9f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9fb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9fd:	50                   	push   eax
c000b9fe:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ba01:	83 c4 10             	add    esp,0x10
c000ba04:	66 0f 6e c8          	movd   xmm1,eax
c000ba08:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000ba0f:	66 0f 6e c2          	movd   xmm0,edx
c000ba13:	66 0f 62 c8          	punpckldq xmm1,xmm0
c000ba17:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000ba1d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ba23:	99                   	cdq    
c000ba24:	66 0f 6e c0          	movd   xmm0,eax
c000ba28:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba2f:	66 0f 6e d2          	movd   xmm2,edx
c000ba33:	66 0f 62 c2          	punpckldq xmm0,xmm2
c000ba37:	66 0f d4 c1          	paddq  xmm0,xmm1
c000ba3b:	0f 28 0d 50 01 02 c0 	movaps xmm1,XMMWORD PTR ds:0xc0020150
c000ba42:	75 03                	jne    c000ba47 <Clock::timeInSecondsLocal()+0x53>
c000ba44:	0f 57 c9             	xorps  xmm1,xmm1
c000ba47:	66 0f d4 c1          	paddq  xmm0,xmm1
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	66 0f 7e c0          	movd   eax,xmm0
c000ba52:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000ba57:	66 0f 7e c2          	movd   edx,xmm0
c000ba5b:	c3                   	ret    

c000ba5c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ba5c:	53                   	push   ebx
c000ba5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba61:	f3 0f 7e 44 24 0c    	movq   xmm0,QWORD PTR [esp+0xc]
c000ba67:	0f 28 d8             	movaps xmm3,xmm0
c000ba6a:	0f 28 05 50 01 02 c0 	movaps xmm0,XMMWORD PTR ds:0xc0020150
c000ba71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba73:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ba76:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000ba7d:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000ba83:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ba89:	99                   	cdq    
c000ba8a:	66 0f 6e c8          	movd   xmm1,eax
c000ba8e:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000ba95:	66 0f 6e d2          	movd   xmm2,edx
c000ba99:	66 0f 62 ca          	punpckldq xmm1,xmm2
c000ba9d:	66 0f fb d9          	psubq  xmm3,xmm1
c000baa1:	0f 28 cb             	movaps xmm1,xmm3
c000baa4:	75 03                	jne    c000baa9 <Clock::setTimeInSecondsLocal(unsigned long long)+0x4d>
c000baa6:	0f 57 c0             	xorps  xmm0,xmm0
c000baa9:	0f 28 e1             	movaps xmm4,xmm1
c000baac:	89 d8                	mov    eax,ebx
c000baae:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000bab2:	66 0f fb e0          	psubq  xmm4,xmm0
c000bab6:	66 0f d6 64 24 0c    	movq   QWORD PTR [esp+0xc],xmm4
c000babc:	5b                   	pop    ebx
c000babd:	ff e0                	jmp    eax

c000babf <datetimeToSeconds(datetime_t)>:
c000babf:	55                   	push   ebp
c000bac0:	57                   	push   edi
c000bac1:	56                   	push   esi
c000bac2:	53                   	push   ebx
c000bac3:	83 ec 0c             	sub    esp,0xc
c000bac6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000baca:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000bace:	0f b6 c6             	movzx  eax,dh
c000bad1:	0f b6 c0             	movzx  eax,al
c000bad4:	0f b6 dd             	movzx  ebx,ch
c000bad7:	6b f8 3c             	imul   edi,eax,0x3c
c000bada:	89 d0                	mov    eax,edx
c000badc:	0f b6 d2             	movzx  edx,dl
c000badf:	fe cb                	dec    bl
c000bae1:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
c000bae7:	89 ce                	mov    esi,ecx
c000bae9:	c1 e8 10             	shr    eax,0x10
c000baec:	0f b6 c9             	movzx  ecx,cl
c000baef:	c1 ee 10             	shr    esi,0x10
c000baf2:	0f b6 c0             	movzx  eax,al
c000baf5:	01 f8                	add    eax,edi
c000baf7:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000bafd:	01 c2                	add    edx,eax
c000baff:	0f b6 c3             	movzx  eax,bl
c000bb02:	89 14 24             	mov    DWORD PTR [esp],edx
c000bb05:	8b 04 85 20 01 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfee0]
c000bb0c:	c1 fa 1f             	sar    edx,0x1f
c000bb0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb13:	80 fb 01             	cmp    bl,0x1
c000bb16:	0f b7 f6             	movzx  esi,si
c000bb19:	8d 4c 01 ff          	lea    ecx,[ecx+eax*1-0x1]
c000bb1d:	76 2a                	jbe    c000bb49 <datetimeToSeconds(datetime_t)+0x8a>
c000bb1f:	f7 c6 03 00 00 00    	test   esi,0x3
c000bb25:	75 22                	jne    c000bb49 <datetimeToSeconds(datetime_t)+0x8a>
c000bb27:	31 d2                	xor    edx,edx
c000bb29:	bb 64 00 00 00       	mov    ebx,0x64
c000bb2e:	89 f0                	mov    eax,esi
c000bb30:	f7 f3                	div    ebx
c000bb32:	85 d2                	test   edx,edx
c000bb34:	75 12                	jne    c000bb48 <datetimeToSeconds(datetime_t)+0x89>
c000bb36:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000bb3c:	bb 90 01 00 00       	mov    ebx,0x190
c000bb41:	99                   	cdq    
c000bb42:	f7 fb                	idiv   ebx
c000bb44:	85 d2                	test   edx,edx
c000bb46:	75 01                	jne    c000bb49 <datetimeToSeconds(datetime_t)+0x8a>
c000bb48:	41                   	inc    ecx
c000bb49:	83 fe 46             	cmp    esi,0x46
c000bb4c:	76 45                	jbe    c000bb93 <datetimeToSeconds(datetime_t)+0xd4>
c000bb4e:	bb 46 00 00 00       	mov    ebx,0x46
c000bb53:	bd 64 00 00 00       	mov    ebp,0x64
c000bb58:	bf 90 01 00 00       	mov    edi,0x190
c000bb5d:	f6 c3 03             	test   bl,0x3
c000bb60:	b8 6d 01 00 00       	mov    eax,0x16d
c000bb65:	75 23                	jne    c000bb8a <datetimeToSeconds(datetime_t)+0xcb>
c000bb67:	89 d8                	mov    eax,ebx
c000bb69:	99                   	cdq    
c000bb6a:	f7 fd                	idiv   ebp
c000bb6c:	b8 6e 01 00 00       	mov    eax,0x16e
c000bb71:	85 d2                	test   edx,edx
c000bb73:	75 15                	jne    c000bb8a <datetimeToSeconds(datetime_t)+0xcb>
c000bb75:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000bb7b:	99                   	cdq    
c000bb7c:	f7 ff                	idiv   edi
c000bb7e:	83 fa 01             	cmp    edx,0x1
c000bb81:	19 c0                	sbb    eax,eax
c000bb83:	f7 d0                	not    eax
c000bb85:	05 6e 01 00 00       	add    eax,0x16e
c000bb8a:	43                   	inc    ebx
c000bb8b:	01 c1                	add    ecx,eax
c000bb8d:	39 f3                	cmp    ebx,esi
c000bb8f:	7c cc                	jl     c000bb5d <datetimeToSeconds(datetime_t)+0x9e>
c000bb91:	eb 34                	jmp    c000bbc7 <datetimeToSeconds(datetime_t)+0x108>
c000bb93:	74 32                	je     c000bbc7 <datetimeToSeconds(datetime_t)+0x108>
c000bb95:	b8 45 00 00 00       	mov    eax,0x45
c000bb9a:	89 c2                	mov    edx,eax
c000bb9c:	83 e2 03             	and    edx,0x3
c000bb9f:	39 f0                	cmp    eax,esi
c000bba1:	7e 0f                	jle    c000bbb2 <datetimeToSeconds(datetime_t)+0xf3>
c000bba3:	83 fa 01             	cmp    edx,0x1
c000bba6:	19 d2                	sbb    edx,edx
c000bba8:	48                   	dec    eax
c000bba9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000bbb0:	eb e8                	jmp    c000bb9a <datetimeToSeconds(datetime_t)+0xdb>
c000bbb2:	85 d2                	test   edx,edx
c000bbb4:	b8 6d 01 00 00       	mov    eax,0x16d
c000bbb9:	75 0a                	jne    c000bbc5 <datetimeToSeconds(datetime_t)+0x106>
c000bbbb:	83 fe 01             	cmp    esi,0x1
c000bbbe:	19 c0                	sbb    eax,eax
c000bbc0:	05 6e 01 00 00       	add    eax,0x16e
c000bbc5:	29 c1                	sub    ecx,eax
c000bbc7:	b8 80 51 01 00       	mov    eax,0x15180
c000bbcc:	f7 e9                	imul   ecx
c000bbce:	03 04 24             	add    eax,DWORD PTR [esp]
c000bbd1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bbd5:	83 c4 0c             	add    esp,0xc
c000bbd8:	5b                   	pop    ebx
c000bbd9:	5e                   	pop    esi
c000bbda:	5f                   	pop    edi
c000bbdb:	5d                   	pop    ebp
c000bbdc:	c3                   	ret    
c000bbdd:	90                   	nop

c000bbde <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000bbde:	56                   	push   esi
c000bbdf:	53                   	push   ebx
c000bbe0:	51                   	push   ecx
c000bbe1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbe7:	8b 70 2c             	mov    esi,DWORD PTR [eax+0x2c]
c000bbea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbf2:	e8 c8 fe ff ff       	call   c000babf <datetimeToSeconds(datetime_t)>
c000bbf7:	59                   	pop    ecx
c000bbf8:	59                   	pop    ecx
c000bbf9:	66 0f 6e c0          	movd   xmm0,eax
c000bbfd:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000bc04:	66 0f 6e ca          	movd   xmm1,edx
c000bc08:	66 0f 62 c1          	punpckldq xmm0,xmm1
c000bc0c:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000bc12:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000bc18:	99                   	cdq    
c000bc19:	66 0f 6e c8          	movd   xmm1,eax
c000bc1d:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bc24:	66 0f 6e d2          	movd   xmm2,edx
c000bc28:	66 0f 62 ca          	punpckldq xmm1,xmm2
c000bc2c:	66 0f fb c1          	psubq  xmm0,xmm1
c000bc30:	0f 28 0d 50 01 02 c0 	movaps xmm1,XMMWORD PTR ds:0xc0020150
c000bc37:	75 03                	jne    c000bc3c <Clock::setTimeInDatetimeLocal(datetime_t)+0x5e>
c000bc39:	0f 57 c9             	xorps  xmm1,xmm1
c000bc3c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000bc40:	66 0f fb c1          	psubq  xmm0,xmm1
c000bc44:	89 f0                	mov    eax,esi
c000bc46:	66 0f d6 44 24 14    	movq   QWORD PTR [esp+0x14],xmm0
c000bc4c:	5a                   	pop    edx
c000bc4d:	5b                   	pop    ebx
c000bc4e:	5e                   	pop    esi
c000bc4f:	ff e0                	jmp    eax

c000bc51 <secondsToDatetime(unsigned long long)>:
c000bc51:	55                   	push   ebp
c000bc52:	57                   	push   edi
c000bc53:	56                   	push   esi
c000bc54:	53                   	push   ebx
c000bc55:	83 ec 1c             	sub    esp,0x1c
c000bc58:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bc5c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bc60:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bc64:	6a 00                	push   0x0
c000bc66:	68 80 51 01 00       	push   0x15180
c000bc6b:	55                   	push   ebp
c000bc6c:	57                   	push   edi
c000bc6d:	e8 ce 27 01 00       	call   c001e440 <__udivdi3>
c000bc72:	83 c4 10             	add    esp,0x10
c000bc75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc79:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bc7f:	6a 00                	push   0x0
c000bc81:	68 80 51 01 00       	push   0x15180
c000bc86:	55                   	push   ebp
c000bc87:	57                   	push   edi
c000bc88:	bf 10 0e 00 00       	mov    edi,0xe10
c000bc8d:	e8 ae 28 01 00       	call   c001e540 <__umoddi3>
c000bc92:	83 c4 10             	add    esp,0x10
c000bc95:	99                   	cdq    
c000bc96:	f7 ff                	idiv   edi
c000bc98:	bf 3c 00 00 00       	mov    edi,0x3c
c000bc9d:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bca0:	89 d0                	mov    eax,edx
c000bca2:	99                   	cdq    
c000bca3:	f7 ff                	idiv   edi
c000bca5:	85 db                	test   ebx,ebx
c000bca7:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bcaa:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bcad:	79 11                	jns    c000bcc0 <secondsToDatetime(unsigned long long)+0x6f>
c000bcaf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bcb3:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bcb9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bcbe:	eb 07                	jmp    c000bcc7 <secondsToDatetime(unsigned long long)+0x76>
c000bcc0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bcc5:	89 d8                	mov    eax,ebx
c000bcc7:	99                   	cdq    
c000bcc8:	bf b4 05 00 00       	mov    edi,0x5b4
c000bccd:	f7 f9                	idiv   ecx
c000bccf:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bcd4:	31 d2                	xor    edx,edx
c000bcd6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bcdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcdf:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bce7:	01 c3                	add    ebx,eax
c000bce9:	89 d8                	mov    eax,ebx
c000bceb:	f7 f1                	div    ecx
c000bced:	31 d2                	xor    edx,edx
c000bcef:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bcf2:	89 d8                	mov    eax,ebx
c000bcf4:	f7 f7                	div    edi
c000bcf6:	31 d2                	xor    edx,edx
c000bcf8:	29 c1                	sub    ecx,eax
c000bcfa:	89 d8                	mov    eax,ebx
c000bcfc:	f7 f5                	div    ebp
c000bcfe:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bd03:	31 d2                	xor    edx,edx
c000bd05:	29 c1                	sub    ecx,eax
c000bd07:	89 c8                	mov    eax,ecx
c000bd09:	f7 f5                	div    ebp
c000bd0b:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bd10:	31 d2                	xor    edx,edx
c000bd12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd16:	89 c8                	mov    eax,ecx
c000bd18:	f7 f5                	div    ebp
c000bd1a:	31 d2                	xor    edx,edx
c000bd1c:	01 c3                	add    ebx,eax
c000bd1e:	89 c8                	mov    eax,ecx
c000bd20:	f7 f7                	div    edi
c000bd22:	bf 99 00 00 00       	mov    edi,0x99
c000bd27:	31 d2                	xor    edx,edx
c000bd29:	29 c3                	sub    ebx,eax
c000bd2b:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bd33:	29 c3                	sub    ebx,eax
c000bd35:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bd38:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bd3b:	83 c1 02             	add    ecx,0x2
c000bd3e:	89 c8                	mov    eax,ecx
c000bd40:	bb 05 00 00 00       	mov    ebx,0x5
c000bd45:	f7 f7                	div    edi
c000bd47:	31 d2                	xor    edx,edx
c000bd49:	89 c7                	mov    edi,eax
c000bd4b:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bd51:	83 c0 02             	add    eax,0x2
c000bd54:	f7 f3                	div    ebx
c000bd56:	89 eb                	mov    ebx,ebp
c000bd58:	29 c3                	sub    ebx,eax
c000bd5a:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bd60:	88 1e                	mov    BYTE PTR [esi],bl
c000bd62:	19 c0                	sbb    eax,eax
c000bd64:	31 d2                	xor    edx,edx
c000bd66:	83 e0 0c             	and    eax,0xc
c000bd69:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bd6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd71:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bd79:	01 c7                	add    edi,eax
c000bd7b:	83 f9 01             	cmp    ecx,0x1
c000bd7e:	0f 96 c2             	setbe  dl
c000bd81:	fe c1                	inc    cl
c000bd83:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bd86:	8d 04 17             	lea    eax,[edi+edx*1]
c000bd89:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bd8d:	83 c4 1c             	add    esp,0x1c
c000bd90:	89 f0                	mov    eax,esi
c000bd92:	5b                   	pop    ebx
c000bd93:	5e                   	pop    esi
c000bd94:	5f                   	pop    edi
c000bd95:	5d                   	pop    ebp
c000bd96:	c2 04 00             	ret    0x4
c000bd99:	90                   	nop

c000bd9a <Clock::timeInDatetimeLocal()>:
c000bd9a:	53                   	push   ebx
c000bd9b:	83 ec 14             	sub    esp,0x14
c000bd9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bda2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bda6:	e8 49 fc ff ff       	call   c000b9f4 <Clock::timeInSecondsLocal()>
c000bdab:	83 c4 0c             	add    esp,0xc
c000bdae:	52                   	push   edx
c000bdaf:	50                   	push   eax
c000bdb0:	53                   	push   ebx
c000bdb1:	e8 9b fe ff ff       	call   c000bc51 <secondsToDatetime(unsigned long long)>
c000bdb6:	89 d8                	mov    eax,ebx
c000bdb8:	83 c4 14             	add    esp,0x14
c000bdbb:	5b                   	pop    ebx
c000bdbc:	c2 04 00             	ret    0x4
c000bdbf:	90                   	nop

c000bdc0 <Device::hibernate()>:
c000bdc0:	c3                   	ret    
c000bdc1:	90                   	nop

c000bdc2 <Device::wake()>:
c000bdc2:	c3                   	ret    
c000bdc3:	90                   	nop

c000bdc4 <Device::detect()>:
c000bdc4:	c3                   	ret    
c000bdc5:	90                   	nop

c000bdc6 <Device::disableLegacy()>:
c000bdc6:	c3                   	ret    
c000bdc7:	90                   	nop

c000bdc8 <Device::powerSaving(PowerSavingLevel)>:
c000bdc8:	c3                   	ret    
c000bdc9:	90                   	nop

c000bdca <DriverlessDevice::close(int, int, void*)>:
c000bdca:	31 c0                	xor    eax,eax
c000bdcc:	c3                   	ret    
c000bdcd:	90                   	nop

c000bdce <DriverlessDevice::detect()>:
c000bdce:	c3                   	ret    
c000bdcf:	90                   	nop

c000bdd0 <DriverlessDevice::open(int, int, void*)>:
c000bdd0:	83 ec 18             	sub    esp,0x18
c000bdd3:	68 60 01 02 c0       	push   0xc0020160
c000bdd8:	e8 48 4a 00 00       	call   c0010825 <KePanic(char const*)>
c000bddd:	83 c8 ff             	or     eax,0xffffffff
c000bde0:	83 c4 1c             	add    esp,0x1c
c000bde3:	c3                   	ret    

c000bde4 <Device::~Device()>:
c000bde4:	ba c0 01 02 c0       	mov    edx,0xc00201c0
c000bde9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bded:	89 10                	mov    DWORD PTR [eax],edx
c000bdef:	90                   	nop
c000bdf0:	c3                   	ret    
c000bdf1:	90                   	nop

c000bdf2 <Device::~Device()>:
c000bdf2:	83 ec 1c             	sub    esp,0x1c
c000bdf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdf9:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdfc:	e8 e3 ff ff ff       	call   c000bde4 <Device::~Device()>
c000be01:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000be09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000be10:	e8 47 eb ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000be15:	83 c4 1c             	add    esp,0x1c
c000be18:	c3                   	ret    
c000be19:	90                   	nop

c000be1a <Device::findAndLoadDriver()>:
c000be1a:	c7 44 24 04 7e 01 02 c0 	mov    DWORD PTR [esp+0x4],0xc002017e
c000be22:	e9 4f ec ff ff       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c000be27:	90                   	nop

c000be28 <Device::preOpenPCI(PCIDeviceInfo)>:
c000be28:	57                   	push   edi
c000be29:	b9 09 00 00 00       	mov    ecx,0x9
c000be2e:	56                   	push   esi
c000be2f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be33:	8d 74 24 10          	lea    esi,[esp+0x10]
c000be37:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000be41:	81 c7 18 01 00 00    	add    edi,0x118
c000be47:	fc                   	cld    
c000be48:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000be4a:	5e                   	pop    esi
c000be4b:	5f                   	pop    edi
c000be4c:	c3                   	ret    
c000be4d:	90                   	nop

c000be4e <Device::preOpenACPI(void*, char*, char*)>:
c000be4e:	57                   	push   edi
c000be4f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000be54:	56                   	push   esi
c000be55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be61:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000be6b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000be71:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000be77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000be79:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000be7f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be83:	b9 0e 00 00 00       	mov    ecx,0xe
c000be88:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000be8a:	5e                   	pop    esi
c000be8b:	5f                   	pop    edi
c000be8c:	c3                   	ret    
c000be8d:	90                   	nop

c000be8e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be8e:	53                   	push   ebx
c000be8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be93:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be97:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000be9c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bea4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bea8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beac:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000beb0:	5b                   	pop    ebx
c000beb1:	e9 8e 05 00 00       	jmp    c000c444 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000beb6 <Device::getParent()>:
c000beb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000beba:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bec0:	c3                   	ret    
c000bec1:	90                   	nop

c000bec2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bec6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000beca:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000becf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bed3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bed7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bedb:	e9 d8 06 00 00       	jmp    c000c5b8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bee0 <Device::addChild(Device*)>:
c000bee0:	53                   	push   ebx
c000bee1:	83 ec 08             	sub    esp,0x8
c000bee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bee8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000beec:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bef2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bef8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000befa:	85 d2                	test   edx,edx
c000befc:	74 04                	je     c000bf02 <Device::addChild(Device*)+0x22>
c000befe:	89 d3                	mov    ebx,edx
c000bf00:	eb f6                	jmp    c000bef8 <Device::addChild(Device*)+0x18>
c000bf02:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bf05:	83 ec 0c             	sub    esp,0xc
c000bf08:	6a 08                	push   0x8
c000bf0a:	e8 ed bb ff ff       	call   c0007afc <malloc>
c000bf0f:	89 03                	mov    DWORD PTR [ebx],eax
c000bf11:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf1e:	83 c4 18             	add    esp,0x18
c000bf21:	5b                   	pop    ebx
c000bf22:	c3                   	ret    
c000bf23:	90                   	nop

c000bf24 <Device::removeAllChildren()>:
c000bf24:	56                   	push   esi
c000bf25:	53                   	push   ebx
c000bf26:	52                   	push   edx
c000bf27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf2b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bf31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf34:	74 17                	je     c000bf4d <Device::removeAllChildren()+0x29>
c000bf36:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf39:	85 c0                	test   eax,eax
c000bf3b:	74 0c                	je     c000bf49 <Device::removeAllChildren()+0x25>
c000bf3d:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf3f:	83 ec 0c             	sub    esp,0xc
c000bf42:	50                   	push   eax
c000bf43:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bf46:	83 c4 10             	add    esp,0x10
c000bf49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf4b:	eb e4                	jmp    c000bf31 <Device::removeAllChildren()+0xd>
c000bf4d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bf53:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bf59:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bf5f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bf66:	58                   	pop    eax
c000bf67:	5b                   	pop    ebx
c000bf68:	5e                   	pop    esi
c000bf69:	c3                   	ret    

c000bf6a <Device::hibernateAll()>:
c000bf6a:	53                   	push   ebx
c000bf6b:	83 ec 14             	sub    esp,0x14
c000bf6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bf72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf74:	53                   	push   ebx
c000bf75:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bf78:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf7e:	83 c4 10             	add    esp,0x10
c000bf81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf84:	74 0f                	je     c000bf95 <Device::hibernateAll()+0x2b>
c000bf86:	83 ec 0c             	sub    esp,0xc
c000bf89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf8c:	e8 d9 ff ff ff       	call   c000bf6a <Device::hibernateAll()>
c000bf91:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf93:	eb e9                	jmp    c000bf7e <Device::hibernateAll()+0x14>
c000bf95:	83 c4 08             	add    esp,0x8
c000bf98:	5b                   	pop    ebx
c000bf99:	c3                   	ret    

c000bf9a <Device::wakeAll()>:
c000bf9a:	53                   	push   ebx
c000bf9b:	83 ec 14             	sub    esp,0x14
c000bf9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bfa2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfa4:	53                   	push   ebx
c000bfa5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bfa8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bfae:	83 c4 10             	add    esp,0x10
c000bfb1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfb4:	74 0f                	je     c000bfc5 <Device::wakeAll()+0x2b>
c000bfb6:	83 ec 0c             	sub    esp,0xc
c000bfb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfbc:	e8 d9 ff ff ff       	call   c000bf9a <Device::wakeAll()>
c000bfc1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bfc3:	eb e9                	jmp    c000bfae <Device::wakeAll()+0x14>
c000bfc5:	83 c4 08             	add    esp,0x8
c000bfc8:	5b                   	pop    ebx
c000bfc9:	c3                   	ret    

c000bfca <Device::detectAll()>:
c000bfca:	53                   	push   ebx
c000bfcb:	83 ec 14             	sub    esp,0x14
c000bfce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bfd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfd4:	53                   	push   ebx
c000bfd5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bfd8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bfde:	83 c4 10             	add    esp,0x10
c000bfe1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bfe4:	74 0f                	je     c000bff5 <Device::detectAll()+0x2b>
c000bfe6:	83 ec 0c             	sub    esp,0xc
c000bfe9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfec:	e8 d9 ff ff ff       	call   c000bfca <Device::detectAll()>
c000bff1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bff3:	eb e9                	jmp    c000bfde <Device::detectAll()+0x14>
c000bff5:	83 c4 08             	add    esp,0x8
c000bff8:	5b                   	pop    ebx
c000bff9:	c3                   	ret    

c000bffa <Device::disableLegacyAll()>:
c000bffa:	c3                   	ret    
c000bffb:	90                   	nop

c000bffc <Device::loadDriversForAll()>:
c000bffc:	c3                   	ret    
c000bffd:	90                   	nop

c000bffe <Device::closeAll()>:
c000bffe:	53                   	push   ebx
c000bfff:	83 ec 08             	sub    esp,0x8
c000c002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c006:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c008:	6a 00                	push   0x0
c000c00a:	6a 00                	push   0x0
c000c00c:	6a 00                	push   0x0
c000c00e:	53                   	push   ebx
c000c00f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c012:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c018:	83 c4 10             	add    esp,0x10
c000c01b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c01e:	74 0f                	je     c000c02f <Device::closeAll()+0x31>
c000c020:	83 ec 0c             	sub    esp,0xc
c000c023:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c026:	e8 d3 ff ff ff       	call   c000bffe <Device::closeAll()>
c000c02b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c02d:	eb e9                	jmp    c000c018 <Device::closeAll()+0x1a>
c000c02f:	83 c4 08             	add    esp,0x8
c000c032:	5b                   	pop    ebx
c000c033:	c3                   	ret    

c000c034 <Device::powerSavingAll(PowerSavingLevel)>:
c000c034:	56                   	push   esi
c000c035:	53                   	push   ebx
c000c036:	83 ec 0c             	sub    esp,0xc
c000c039:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c03d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c041:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c043:	56                   	push   esi
c000c044:	53                   	push   ebx
c000c045:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c048:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c04e:	83 c4 10             	add    esp,0x10
c000c051:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c054:	74 0f                	je     c000c065 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c056:	52                   	push   edx
c000c057:	52                   	push   edx
c000c058:	56                   	push   esi
c000c059:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c05c:	e8 d3 ff ff ff       	call   c000c034 <Device::powerSavingAll(PowerSavingLevel)>
c000c061:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c063:	eb e9                	jmp    c000c04e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c065:	58                   	pop    eax
c000c066:	5b                   	pop    ebx
c000c067:	5e                   	pop    esi
c000c068:	c3                   	ret    
c000c069:	90                   	nop

c000c06a <Device::setName(char const*)>:
c000c06a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c072:	e9 a9 46 ff ff       	jmp    c0000720 <strcpy>
c000c077:	90                   	nop

c000c078 <Device::Device(char const*)>:
c000c078:	83 ec 2c             	sub    esp,0x2c
c000c07b:	ba c0 01 02 c0       	mov    edx,0xc00201c0
c000c080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c084:	89 10                	mov    DWORD PTR [eax],edx
c000c086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c08a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c094:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c098:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0a6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c0b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0b4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c0be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000c0cd:	e8 98 ff ff ff       	call   c000c06a <Device::setName(char const*)>
c000c0d2:	c7 44 24 1c 08 00 00 00 	mov    DWORD PTR [esp+0x1c],0x8
c000c0da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0de:	89 04 24             	mov    DWORD PTR [esp],eax
c000c0e1:	e8 16 ba ff ff       	call   c0007afc <malloc>
c000c0e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c0ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c0f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c0f7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c0fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c101:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c107:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c10d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c111:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c117:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c11e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c122:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c129:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c12d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c138:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c146:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c150:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c154:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c15e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c162:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c16c:	90                   	nop
c000c16d:	83 c4 2c             	add    esp,0x2c
c000c170:	c3                   	ret    
c000c171:	90                   	nop

c000c172 <Device::getName()>:
c000c172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c176:	05 d0 00 00 00       	add    eax,0xd0
c000c17b:	c3                   	ret    

c000c17c <DriverlessDevice::DriverlessDevice(char const*)>:
c000c17c:	83 ec 1c             	sub    esp,0x1c
c000c17f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c183:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c187:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c18b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c18e:	e8 e5 fe ff ff       	call   c000c078 <Device::Device(char const*)>
c000c193:	ba ec 01 02 c0       	mov    edx,0xc00201ec
c000c198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c19c:	89 10                	mov    DWORD PTR [eax],edx
c000c19e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1a2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c1ac:	90                   	nop
c000c1ad:	83 c4 1c             	add    esp,0x1c
c000c1b0:	c3                   	ret    
c000c1b1:	90                   	nop

c000c1b2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c1b2:	57                   	push   edi
c000c1b3:	56                   	push   esi
c000c1b4:	53                   	push   ebx
c000c1b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c1b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1c1:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c1c7:	75 0c                	jne    c000c1d5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c1c9:	52                   	push   edx
c000c1ca:	52                   	push   edx
c000c1cb:	53                   	push   ebx
c000c1cc:	56                   	push   esi
c000c1cd:	e8 04 27 01 00       	call   c001e8d6 <LinkedList<Device>::addElement(Device*)>
c000c1d2:	83 c4 10             	add    esp,0x10
c000c1d5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c1db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c1de:	74 12                	je     c000c1f2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c1e0:	50                   	push   eax
c000c1e1:	57                   	push   edi
c000c1e2:	56                   	push   esi
c000c1e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c1e6:	e8 c7 ff ff ff       	call   c000c1b2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c1eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c1ed:	83 c4 10             	add    esp,0x10
c000c1f0:	eb e9                	jmp    c000c1db <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c1f2:	5b                   	pop    ebx
c000c1f3:	5e                   	pop    esi
c000c1f4:	5f                   	pop    edi
c000c1f5:	c3                   	ret    

c000c1f6 <getDevicesOfType(DeviceType)>:
c000c1f6:	53                   	push   ebx
c000c1f7:	83 ec 14             	sub    esp,0x14
c000c1fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1fe:	53                   	push   ebx
c000c1ff:	e8 a2 27 01 00       	call   c001e9a6 <LinkedList<Device>::LinkedList()>
c000c204:	83 c4 0c             	add    esp,0xc
c000c207:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c20b:	53                   	push   ebx
c000c20c:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c212:	e8 9b ff ff ff       	call   c000c1b2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c217:	83 c4 18             	add    esp,0x18
c000c21a:	89 d8                	mov    eax,ebx
c000c21c:	5b                   	pop    ebx
c000c21d:	c2 04 00             	ret    0x4

c000c220 <HardDiskController::HardDiskController(char const*)>:
c000c220:	83 ec 1c             	sub    esp,0x1c
c000c223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c227:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c22b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c22f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c232:	e8 41 fe ff ff       	call   c000c078 <Device::Device(char const*)>
c000c237:	ba 18 02 02 c0       	mov    edx,0xc0020218
c000c23c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c240:	89 10                	mov    DWORD PTR [eax],edx
c000c242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c246:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c250:	90                   	nop
c000c251:	83 c4 1c             	add    esp,0x1c
c000c254:	c3                   	ret    
c000c255:	90                   	nop
c000c256:	66 90                	xchg   ax,ax

c000c258 <HardDiskController::~HardDiskController()>:
c000c258:	83 ec 1c             	sub    esp,0x1c
c000c25b:	ba 18 02 02 c0       	mov    edx,0xc0020218
c000c260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c264:	89 10                	mov    DWORD PTR [eax],edx
c000c266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c26a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c26d:	e8 72 fb ff ff       	call   c000bde4 <Device::~Device()>
c000c272:	90                   	nop
c000c273:	83 c4 1c             	add    esp,0x1c
c000c276:	c3                   	ret    
c000c277:	90                   	nop

c000c278 <HardDiskController::~HardDiskController()>:
c000c278:	83 ec 1c             	sub    esp,0x1c
c000c27b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c27f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c282:	e8 d1 ff ff ff       	call   c000c258 <HardDiskController::~HardDiskController()>
c000c287:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000c28f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c293:	89 04 24             	mov    DWORD PTR [esp],eax
c000c296:	e8 c1 e6 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000c29b:	83 c4 1c             	add    esp,0x1c
c000c29e:	c3                   	ret    
c000c29f:	90                   	nop

c000c2a0 <PhysicalDisk::eject()>:
c000c2a0:	83 c8 ff             	or     eax,0xffffffff
c000c2a3:	c3                   	ret    

c000c2a4 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c2a4:	83 ec 1c             	sub    esp,0x1c
c000c2a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c2af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c2b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c2b6:	e8 bd fd ff ff       	call   c000c078 <Device::Device(char const*)>
c000c2bb:	ba 44 02 02 c0       	mov    edx,0xc0020244
c000c2c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2c4:	89 10                	mov    DWORD PTR [eax],edx
c000c2c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ca:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c2d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2d5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c2dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2e0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c2ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c2f2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c2f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c2fc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c306:	90                   	nop
c000c307:	83 c4 1c             	add    esp,0x1c
c000c30a:	c3                   	ret    
c000c30b:	90                   	nop

c000c30c <PhysicalDisk::startCache()>:
c000c30c:	56                   	push   esi
c000c30d:	53                   	push   ebx
c000c30e:	83 ec 10             	sub    esp,0x10
c000c311:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c315:	6a 44                	push   0x44
c000c317:	e8 e0 b7 ff ff       	call   c0007afc <malloc>
c000c31c:	89 c6                	mov    esi,eax
c000c31e:	58                   	pop    eax
c000c31f:	5a                   	pop    edx
c000c320:	53                   	push   ebx
c000c321:	56                   	push   esi
c000c322:	e8 c9 16 00 00       	call   c000d9f0 <VCache::VCache(PhysicalDisk*)>
c000c327:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c32d:	83 c4 14             	add    esp,0x14
c000c330:	5b                   	pop    ebx
c000c331:	5e                   	pop    esi
c000c332:	c3                   	ret    
c000c333:	90                   	nop

c000c334 <PhysicalDisk::~PhysicalDisk()>:
c000c334:	83 ec 1c             	sub    esp,0x1c
c000c337:	ba 44 02 02 c0       	mov    edx,0xc0020244
c000c33c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c340:	89 10                	mov    DWORD PTR [eax],edx
c000c342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c346:	89 04 24             	mov    DWORD PTR [esp],eax
c000c349:	e8 96 fa ff ff       	call   c000bde4 <Device::~Device()>
c000c34e:	90                   	nop
c000c34f:	83 c4 1c             	add    esp,0x1c
c000c352:	c3                   	ret    
c000c353:	90                   	nop

c000c354 <PhysicalDisk::~PhysicalDisk()>:
c000c354:	83 ec 1c             	sub    esp,0x1c
c000c357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c35b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c35e:	e8 d1 ff ff ff       	call   c000c334 <PhysicalDisk::~PhysicalDisk()>
c000c363:	c7 44 24 04 6c 01 00 00 	mov    DWORD PTR [esp+0x4],0x16c
c000c36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c36f:	89 04 24             	mov    DWORD PTR [esp],eax
c000c372:	e8 e5 e5 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000c377:	83 c4 1c             	add    esp,0x1c
c000c37a:	c3                   	ret    
c000c37b:	66 90                	xchg   ax,ax
c000c37d:	66 90                	xchg   ax,ax
c000c37f:	90                   	nop

c000c380 <int_handler>:
c000c380:	55                   	push   ebp
c000c381:	57                   	push   edi
c000c382:	56                   	push   esi
c000c383:	53                   	push   ebx
c000c384:	83 ec 1c             	sub    esp,0x1c
c000c387:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c38e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c392:	74 0b                	je     c000c39f <int_handler+0x1f>
c000c394:	fa                   	cli    
c000c395:	f4                   	hlt    
c000c396:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c39d:	75 f5                	jne    c000c394 <int_handler+0x14>
c000c39f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c3a2:	8d 46 e0             	lea    eax,[esi-0x20]
c000c3a5:	83 f8 17             	cmp    eax,0x17
c000c3a8:	76 3d                	jbe    c000c3e7 <int_handler+0x67>
c000c3aa:	c1 e6 04             	shl    esi,0x4
c000c3ad:	31 db                	xor    ebx,ebx
c000c3af:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c3b5:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c3bb:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c3bf:	85 c0                	test   eax,eax
c000c3c1:	74 12                	je     c000c3d5 <int_handler+0x55>
c000c3c3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c3c6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c3ca:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c3cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c3d1:	74 1e                	je     c000c3f1 <int_handler+0x71>
c000c3d3:	ff d0                	call   eax
c000c3d5:	43                   	inc    ebx
c000c3d6:	83 fb 04             	cmp    ebx,0x4
c000c3d9:	75 e0                	jne    c000c3bb <int_handler+0x3b>
c000c3db:	83 c4 1c             	add    esp,0x1c
c000c3de:	31 c0                	xor    eax,eax
c000c3e0:	5b                   	pop    ebx
c000c3e1:	31 d2                	xor    edx,edx
c000c3e3:	5e                   	pop    esi
c000c3e4:	5f                   	pop    edi
c000c3e5:	5d                   	pop    ebp
c000c3e6:	c3                   	ret    
c000c3e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3ea:	e8 d4 ad 00 00       	call   c00171c3 <HalEndOfInterrupt(int)>
c000c3ef:	eb b9                	jmp    c000c3aa <int_handler+0x2a>
c000c3f1:	ff d0                	call   eax
c000c3f3:	83 c4 1c             	add    esp,0x1c
c000c3f6:	5b                   	pop    ebx
c000c3f7:	5e                   	pop    esi
c000c3f8:	5f                   	pop    edi
c000c3f9:	5d                   	pop    ebp
c000c3fa:	c3                   	ret    

c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c3fb:	56                   	push   esi
c000c3fc:	31 c0                	xor    eax,eax
c000c3fe:	53                   	push   ebx
c000c3ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c40b:	89 ca                	mov    edx,ecx
c000c40d:	c1 e2 04             	shl    edx,0x4
c000c410:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c418:	74 16                	je     c000c430 <installISRHandler(int, void (*)(regs*, void*), void*)+0x35>
c000c41a:	40                   	inc    eax
c000c41b:	83 f8 04             	cmp    eax,0x4
c000c41e:	75 f0                	jne    c000c410 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c420:	b8 74 02 02 c0       	mov    eax,0xc0020274
c000c425:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c429:	5b                   	pop    ebx
c000c42a:	5e                   	pop    esi
c000c42b:	e9 f5 43 00 00       	jmp    c0010825 <KePanic(char const*)>
c000c430:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c433:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c43a:	5b                   	pop    ebx
c000c43b:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c442:	5e                   	pop    esi
c000c443:	c3                   	ret    

c000c444 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c444:	56                   	push   esi
c000c445:	53                   	push   ebx
c000c446:	83 ec 34             	sub    esp,0x34
c000c449:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c000c44e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c452:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c456:	88 c1                	mov    cl,al
c000c458:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c45d:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c464:	74 50                	je     c000c4b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c466:	84 c9                	test   cl,cl
c000c468:	74 20                	je     c000c48a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c46a:	83 fb 0f             	cmp    ebx,0xf
c000c46d:	0f 8f da 00 00 00    	jg     c000c54d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000c473:	0f b6 9b c0 1c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde340]
c000c47a:	0f b7 84 1b 60 77 02 c0 	movzx  eax,WORD PTR [ebx+ebx*1-0x3ffd88a0]
c000c482:	d1 e8                	shr    eax,1
c000c484:	24 01                	and    al,0x1
c000c486:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000c48a:	c7 04 24 81 02 02 c0 	mov    DWORD PTR [esp],0xc0020281
c000c491:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c496:	31 f6                	xor    esi,esi
c000c498:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c49c:	e8 d5 e5 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000c4a1:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c4a6:	85 c0                	test   eax,eax
c000c4a8:	7f 4b                	jg     c000c4f5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb1>
c000c4aa:	c7 04 24 98 02 02 c0 	mov    DWORD PTR [esp],0xc0020298
c000c4b1:	e8 6f 43 00 00       	call   c0010825 <KePanic(char const*)>
c000c4b6:	8d 4b 20             	lea    ecx,[ebx+0x20]
c000c4b9:	31 c0                	xor    eax,eax
c000c4bb:	89 ca                	mov    edx,ecx
c000c4bd:	c1 e2 04             	shl    edx,0x4
c000c4c0:	8b b4 82 c0 5f 02 c0 	mov    esi,DWORD PTR [edx+eax*4-0x3ffda040]
c000c4c7:	85 f6                	test   esi,esi
c000c4c9:	0f 84 94 00 00 00    	je     c000c563 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11f>
c000c4cf:	40                   	inc    eax
c000c4d0:	83 f8 04             	cmp    eax,0x4
c000c4d3:	75 eb                	jne    c000c4c0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7c>
c000c4d5:	c7 04 24 ec 02 02 c0 	mov    DWORD PTR [esp],0xc00202ec
c000c4dc:	e8 44 43 00 00       	call   c0010825 <KePanic(char const*)>
c000c4e1:	83 c4 34             	add    esp,0x34
c000c4e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c4e9:	5b                   	pop    ebx
c000c4ea:	5e                   	pop    esi
c000c4eb:	c3                   	ret    
c000c4ec:	46                   	inc    esi
c000c4ed:	39 35 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,esi
c000c4f3:	7e b5                	jle    c000c4aa <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000c4f5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c4f9:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c500:	89 04 24             	mov    DWORD PTR [esp],eax
c000c503:	e8 ee 12 01 00       	call   c001d7f6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c508:	84 c0                	test   al,al
c000c50a:	74 e0                	je     c000c4ec <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c50c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000c511:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c515:	31 c0                	xor    eax,eax
c000c517:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c51b:	88 d8                	mov    al,bl
c000c51d:	04 20                	add    al,0x20
c000c51f:	0f b6 c0             	movzx  eax,al
c000c522:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c526:	31 c0                	xor    eax,eax
c000c528:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c52c:	31 c0                	xor    eax,eax
c000c52e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c532:	0f b6 c3             	movzx  eax,bl
c000c535:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c539:	8b 04 b5 80 8b 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7480]
c000c540:	89 04 24             	mov    DWORD PTR [esp],eax
c000c543:	e8 14 14 01 00       	call   c001d95c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c548:	e9 69 ff ff ff       	jmp    c000c4b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c000c54d:	c7 04 24 b4 02 02 c0 	mov    DWORD PTR [esp],0xc00202b4
c000c554:	e8 cc 42 00 00       	call   c0010825 <KePanic(char const*)>
c000c559:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000c55e:	e9 27 ff ff ff       	jmp    c000c48a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x46>
c000c563:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c567:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c56a:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c571:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000c575:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c57c:	83 c4 34             	add    esp,0x34
c000c57f:	89 d8                	mov    eax,ebx
c000c581:	5b                   	pop    ebx
c000c582:	5e                   	pop    esi
c000c583:	c3                   	ret    

c000c584 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c584:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c588:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c58c:	c1 e0 04             	shl    eax,0x4
c000c58f:	8d 50 10             	lea    edx,[eax+0x10]
c000c592:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c598:	74 08                	je     c000c5a2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c59a:	83 c0 04             	add    eax,0x4
c000c59d:	39 d0                	cmp    eax,edx
c000c59f:	75 f1                	jne    c000c592 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c5a1:	c3                   	ret    
c000c5a2:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c5ac:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c5b6:	eb e2                	jmp    c000c59a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c5b8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5b8:	56                   	push   esi
c000c5b9:	53                   	push   ebx
c000c5ba:	83 ec 14             	sub    esp,0x14
c000c5bd:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
c000c5c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c5c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c5ca:	74 0e                	je     c000c5da <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c5cc:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c5d1:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c5d8:	75 30                	jne    c000c60a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x52>
c000c5da:	8d 43 20             	lea    eax,[ebx+0x20]
c000c5dd:	c1 e0 04             	shl    eax,0x4
c000c5e0:	8d 50 10             	lea    edx,[eax+0x10]
c000c5e3:	39 b0 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],esi
c000c5e9:	74 0d                	je     c000c5f8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000c5eb:	83 c0 04             	add    eax,0x4
c000c5ee:	39 d0                	cmp    eax,edx
c000c5f0:	75 f1                	jne    c000c5e3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000c5f2:	83 c4 14             	add    esp,0x14
c000c5f5:	5b                   	pop    ebx
c000c5f6:	5e                   	pop    esi
c000c5f7:	c3                   	ret    
c000c5f8:	31 c9                	xor    ecx,ecx
c000c5fa:	31 db                	xor    ebx,ebx
c000c5fc:	89 88 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],ecx
c000c602:	89 98 c0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb040],ebx
c000c608:	eb e1                	jmp    c000c5eb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000c60a:	83 fb 0f             	cmp    ebx,0xf
c000c60d:	7f 09                	jg     c000c618 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x60>
c000c60f:	0f b6 9b c0 1c 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffde340]
c000c616:	eb c2                	jmp    c000c5da <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000c618:	c7 04 24 a5 02 02 c0 	mov    DWORD PTR [esp],0xc00202a5
c000c61f:	e8 01 42 00 00       	call   c0010825 <KePanic(char const*)>
c000c624:	eb b4                	jmp    c000c5da <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000c626 <setupINTS()>:
c000c626:	31 c0                	xor    eax,eax
c000c628:	31 d2                	xor    edx,edx
c000c62a:	31 c9                	xor    ecx,ecx
c000c62c:	89 90 c0 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda040],edx
c000c632:	31 d2                	xor    edx,edx
c000c634:	83 c0 10             	add    eax,0x10
c000c637:	89 88 b0 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb050],ecx
c000c63d:	31 c9                	xor    ecx,ecx
c000c63f:	89 90 b4 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda04c],edx
c000c645:	31 d2                	xor    edx,edx
c000c647:	89 88 b4 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb04c],ecx
c000c64d:	31 c9                	xor    ecx,ecx
c000c64f:	89 90 b8 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda048],edx
c000c655:	31 d2                	xor    edx,edx
c000c657:	89 88 b8 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb048],ecx
c000c65d:	31 c9                	xor    ecx,ecx
c000c65f:	89 90 bc 5f 02 c0    	mov    DWORD PTR [eax-0x3ffda044],edx
c000c665:	89 88 bc 4f 02 c0    	mov    DWORD PTR [eax-0x3ffdb044],ecx
c000c66b:	3d 00 10 00 00       	cmp    eax,0x1000
c000c670:	75 b6                	jne    c000c628 <setupINTS()+0x2>
c000c672:	c3                   	ret    

c000c673 <convertLegacyIRQNumber(int)>:
c000c673:	83 ec 1c             	sub    esp,0x1c
c000c676:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c680:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c687:	74 0c                	je     c000c695 <convertLegacyIRQNumber(int)+0x22>
c000c689:	83 f8 0f             	cmp    eax,0xf
c000c68c:	7f 0b                	jg     c000c699 <convertLegacyIRQNumber(int)+0x26>
c000c68e:	0f b6 80 c0 1c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde340]
c000c695:	83 c4 1c             	add    esp,0x1c
c000c698:	c3                   	ret    
c000c699:	c7 04 24 b4 02 02 c0 	mov    DWORD PTR [esp],0xc00202b4
c000c6a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6a4:	e8 7c 41 00 00       	call   c0010825 <KePanic(char const*)>
c000c6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c6ad:	83 c4 1c             	add    esp,0x1c
c000c6b0:	c3                   	ret    
c000c6b1:	90                   	nop

c000c6b2 <startGUI(void*)>:
c000c6b2:	55                   	push   ebp
c000c6b3:	89 e5                	mov    ebp,esp
c000c6b5:	53                   	push   ebx
c000c6b6:	83 ec 14             	sub    esp,0x14
c000c6b9:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6be:	48                   	dec    eax
c000c6bf:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6c4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6c9:	85 c0                	test   eax,eax
c000c6cb:	75 01                	jne    c000c6ce <startGUI(void*)+0x1c>
c000c6cd:	fb                   	sti    
c000c6ce:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6d4:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c6dc:	c7 04 24 11 03 02 c0 	mov    DWORD PTR [esp],0xc0020311
c000c6e3:	e8 e6 7f 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c000c6e8:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000c6ef:	e8 16 82 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c000c6f4:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c6fa:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c702:	c7 04 24 2b 03 02 c0 	mov    DWORD PTR [esp],0xc002032b
c000c709:	e8 c0 7f 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c000c70e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c712:	89 04 24             	mov    DWORD PTR [esp],eax
c000c715:	e8 f0 81 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c000c71a:	90                   	nop
c000c71b:	83 c4 14             	add    esp,0x14
c000c71e:	5b                   	pop    ebx
c000c71f:	5d                   	pop    ebp
c000c720:	c3                   	ret    

c000c721 <startGUIVESA(void*)>:
c000c721:	55                   	push   ebp
c000c722:	89 e5                	mov    ebp,esp
c000c724:	53                   	push   ebx
c000c725:	83 ec 14             	sub    esp,0x14
c000c728:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c72d:	48                   	dec    eax
c000c72e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c733:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c738:	85 c0                	test   eax,eax
c000c73a:	75 01                	jne    c000c73d <startGUIVESA(void*)+0x1c>
c000c73c:	fb                   	sti    
c000c73d:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c743:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c74b:	c7 04 24 49 03 02 c0 	mov    DWORD PTR [esp],0xc0020349
c000c752:	e8 77 7f 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c000c757:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c75b:	89 04 24             	mov    DWORD PTR [esp],eax
c000c75e:	e8 a7 81 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c000c763:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c769:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000c771:	c7 04 24 2b 03 02 c0 	mov    DWORD PTR [esp],0xc002032b
c000c778:	e8 51 7f 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c000c77d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c781:	89 04 24             	mov    DWORD PTR [esp],eax
c000c784:	e8 81 81 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c000c789:	90                   	nop
c000c78a:	83 c4 14             	add    esp,0x14
c000c78d:	5b                   	pop    ebx
c000c78e:	5d                   	pop    ebp
c000c78f:	c3                   	ret    

c000c790 <sendKeyToTerminal(unsigned char)>:
c000c790:	55                   	push   ebp
c000c791:	89 e5                	mov    ebp,esp
c000c793:	83 ec 38             	sub    esp,0x38
c000c796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c799:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c79c:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c7a1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c7a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c7ac:	e8 43 c6 ff ff       	call   c0008df4 <VgaText::receiveKey(unsigned char)>
c000c7b1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c7b5:	74 10                	je     c000c7c7 <sendKeyToTerminal(unsigned char)+0x37>
c000c7b7:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c7bb:	74 0a                	je     c000c7c7 <sendKeyToTerminal(unsigned char)+0x37>
c000c7bd:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c7c1:	0f 85 8c 00 00 00    	jne    c000c853 <sendKeyToTerminal(unsigned char)+0xc3>
c000c7c7:	fa                   	cli    
c000c7c8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c7cd:	40                   	inc    eax
c000c7ce:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c7d3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c7d8:	40                   	inc    eax
c000c7d9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c7de:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c7e3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c7e6:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c7f0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c7f4:	74 1c                	je     c000c812 <sendKeyToTerminal(unsigned char)+0x82>
c000c7f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c7f9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c7fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7ff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c802:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c805:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c808:	89 04 24             	mov    DWORD PTR [esp],eax
c000c80b:	e8 c8 8d 00 00       	call   c00155d8 <unblockTask(ThreadControlBlock*)>
c000c810:	eb de                	jmp    c000c7f0 <sendKeyToTerminal(unsigned char)+0x60>
c000c812:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c817:	48                   	dec    eax
c000c818:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c81d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c822:	85 c0                	test   eax,eax
c000c824:	75 18                	jne    c000c83e <sendKeyToTerminal(unsigned char)+0xae>
c000c826:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c82b:	85 c0                	test   eax,eax
c000c82d:	74 0f                	je     c000c83e <sendKeyToTerminal(unsigned char)+0xae>
c000c82f:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c839:	e8 12 89 00 00       	call   c0015150 <schedule()>
c000c83e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c843:	48                   	dec    eax
c000c844:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c849:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c84e:	85 c0                	test   eax,eax
c000c850:	75 01                	jne    c000c853 <sendKeyToTerminal(unsigned char)+0xc3>
c000c852:	fb                   	sti    
c000c853:	90                   	nop
c000c854:	c9                   	leave  
c000c855:	c3                   	ret    

c000c856 <sendKeyboardToken(KeyboardToken)>:
c000c856:	55                   	push   ebp
c000c857:	89 e5                	mov    ebp,esp
c000c859:	83 ec 28             	sub    esp,0x28
c000c85c:	e8 14 40 00 00       	call   c0010875 <Krnl::userIOReceived()>
c000c861:	0f b6 55 0a          	movzx  edx,BYTE PTR [ebp+0xa]
c000c865:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c869:	80 f2 01             	xor    dl,0x1
c000c86c:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c872:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c877:	85 c0                	test   eax,eax
c000c879:	74 1d                	je     c000c898 <sendKeyboardToken(KeyboardToken)+0x42>
c000c87b:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c880:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000c888:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c88b:	89 14 24             	mov    DWORD PTR [esp],edx
c000c88e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c891:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000c896:	ff d0                	call   eax
c000c898:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c89c:	0f b6 55 0c          	movzx  edx,BYTE PTR [ebp+0xc]
c000c8a0:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c8a7:	38 c2                	cmp    dl,al
c000c8a9:	74 1b                	je     c000c8c6 <sendKeyboardToken(KeyboardToken)+0x70>
c000c8ab:	0f b6 45 0c          	movzx  eax,BYTE PTR [ebp+0xc]
c000c8af:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c8b4:	0f b6 05 e8 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e8
c000c8bb:	0f b6 c0             	movzx  eax,al
c000c8be:	89 04 24             	mov    DWORD PTR [esp],eax
c000c8c1:	e8 60 bc ff ff       	call   c0008526 <setTerminalScrollLock(bool)>
c000c8c6:	0f b6 45 0b          	movzx  eax,BYTE PTR [ebp+0xb]
c000c8ca:	84 c0                	test   al,al
c000c8cc:	0f 84 c4 00 00 00    	je     c000c996 <sendKeyboardToken(KeyboardToken)+0x140>
c000c8d2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8d6:	3d 18 03 00 00       	cmp    eax,0x318
c000c8db:	75 06                	jne    c000c8e3 <sendKeyboardToken(KeyboardToken)+0x8d>
c000c8dd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c8e3:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8e7:	3d 19 03 00 00       	cmp    eax,0x319
c000c8ec:	75 06                	jne    c000c8f4 <sendKeyboardToken(KeyboardToken)+0x9e>
c000c8ee:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c8f4:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c8f8:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c8fd:	75 06                	jne    c000c905 <sendKeyboardToken(KeyboardToken)+0xaf>
c000c8ff:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c905:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c909:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c90e:	75 06                	jne    c000c916 <sendKeyboardToken(KeyboardToken)+0xc0>
c000c910:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c916:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c91a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c91f:	75 06                	jne    c000c927 <sendKeyboardToken(KeyboardToken)+0xd1>
c000c921:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c927:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c92b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c930:	75 06                	jne    c000c938 <sendKeyboardToken(KeyboardToken)+0xe2>
c000c932:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c938:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c93c:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c941:	75 06                	jne    c000c949 <sendKeyboardToken(KeyboardToken)+0xf3>
c000c943:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c949:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c94d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c952:	75 06                	jne    c000c95a <sendKeyboardToken(KeyboardToken)+0x104>
c000c954:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c95a:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c95e:	3d 20 03 00 00       	cmp    eax,0x320
c000c963:	75 06                	jne    c000c96b <sendKeyboardToken(KeyboardToken)+0x115>
c000c965:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c96b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c96f:	3d 21 03 00 00       	cmp    eax,0x321
c000c974:	75 06                	jne    c000c97c <sendKeyboardToken(KeyboardToken)+0x126>
c000c976:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c97c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c980:	3d 22 03 00 00       	cmp    eax,0x322
c000c985:	0f 85 dd 00 00 00    	jne    c000ca68 <sendKeyboardToken(KeyboardToken)+0x212>
c000c98b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c991:	e9 d2 00 00 00       	jmp    c000ca68 <sendKeyboardToken(KeyboardToken)+0x212>
c000c996:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c99a:	3d 18 03 00 00       	cmp    eax,0x318
c000c99f:	75 0a                	jne    c000c9ab <sendKeyboardToken(KeyboardToken)+0x155>
c000c9a1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c9a7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9ab:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9af:	3d 19 03 00 00       	cmp    eax,0x319
c000c9b4:	75 0a                	jne    c000c9c0 <sendKeyboardToken(KeyboardToken)+0x16a>
c000c9b6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c9bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9c0:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9c4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c9c9:	75 0a                	jne    c000c9d5 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c9cb:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c9d1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9d5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9d9:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c9de:	75 0a                	jne    c000c9ea <sendKeyboardToken(KeyboardToken)+0x194>
c000c9e0:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c9e6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9ea:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000c9ee:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c9f3:	75 0a                	jne    c000c9ff <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c9f5:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c9fb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9ff:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca03:	3d 1d 03 00 00       	cmp    eax,0x31d
c000ca08:	75 0a                	jne    c000ca14 <sendKeyboardToken(KeyboardToken)+0x1be>
c000ca0a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ca10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca14:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca18:	3d 1e 03 00 00       	cmp    eax,0x31e
c000ca1d:	75 0a                	jne    c000ca29 <sendKeyboardToken(KeyboardToken)+0x1d3>
c000ca1f:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000ca25:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca29:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca2d:	3d 1f 03 00 00       	cmp    eax,0x31f
c000ca32:	75 0a                	jne    c000ca3e <sendKeyboardToken(KeyboardToken)+0x1e8>
c000ca34:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000ca3a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca3e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca42:	3d 20 03 00 00       	cmp    eax,0x320
c000ca47:	75 0a                	jne    c000ca53 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000ca49:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000ca4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca53:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca57:	3d 21 03 00 00       	cmp    eax,0x321
c000ca5c:	75 0a                	jne    c000ca68 <sendKeyboardToken(KeyboardToken)+0x212>
c000ca5e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000ca64:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ca68:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ca6c:	3d 00 02 00 00       	cmp    eax,0x200
c000ca71:	75 3b                	jne    c000caae <sendKeyboardToken(KeyboardToken)+0x258>
c000ca73:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000ca7a:	34 01                	xor    al,0x1
c000ca7c:	84 c0                	test   al,al
c000ca7e:	74 2e                	je     c000caae <sendKeyboardToken(KeyboardToken)+0x258>
c000ca80:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca85:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000ca8d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ca95:	c7 44 24 04 b2 c6 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c6b2
c000ca9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000caa0:	e8 53 84 00 00       	call   c0014ef8 <Process::createThread(void (*)(void*), void*, int)>
c000caa5:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000caac:	eb 44                	jmp    c000caf2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000caae:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cab2:	3d 01 02 00 00       	cmp    eax,0x201
c000cab7:	75 39                	jne    c000caf2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000cab9:	0f b6 05 e0 73 02 c0 	movzx  eax,BYTE PTR ds:0xc00273e0
c000cac0:	34 01                	xor    al,0x1
c000cac2:	84 c0                	test   al,al
c000cac4:	74 2c                	je     c000caf2 <sendKeyboardToken(KeyboardToken)+0x29c>
c000cac6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000cacb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000cad3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000cadb:	c7 44 24 04 21 c7 00 c0 	mov    DWORD PTR [esp+0x4],0xc000c721
c000cae3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cae6:	e8 0d 84 00 00       	call   c0014ef8 <Process::createThread(void (*)(void*), void*, int)>
c000caeb:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000caf2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000caf6:	3d 25 03 00 00       	cmp    eax,0x325
c000cafb:	75 06                	jne    c000cb03 <sendKeyboardToken(KeyboardToken)+0x2ad>
c000cafd:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000cb03:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb07:	3d 24 03 00 00       	cmp    eax,0x324
c000cb0c:	75 06                	jne    c000cb14 <sendKeyboardToken(KeyboardToken)+0x2be>
c000cb0e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000cb14:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb18:	3d 23 03 00 00       	cmp    eax,0x323
c000cb1d:	75 06                	jne    c000cb25 <sendKeyboardToken(KeyboardToken)+0x2cf>
c000cb1f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000cb25:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb29:	3d 26 03 00 00       	cmp    eax,0x326
c000cb2e:	75 06                	jne    c000cb36 <sendKeyboardToken(KeyboardToken)+0x2e0>
c000cb30:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000cb36:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb3a:	3d 27 03 00 00       	cmp    eax,0x327
c000cb3f:	75 06                	jne    c000cb47 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000cb41:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000cb47:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb4b:	3d 22 03 00 00       	cmp    eax,0x322
c000cb50:	75 06                	jne    c000cb58 <sendKeyboardToken(KeyboardToken)+0x302>
c000cb52:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000cb58:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000cb5c:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cb60:	34 01                	xor    al,0x1
c000cb62:	84 c0                	test   al,al
c000cb64:	74 73                	je     c000cbd9 <sendKeyboardToken(KeyboardToken)+0x383>
c000cb66:	0f b6 05 e1 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e1
c000cb6d:	84 c0                	test   al,al
c000cb6f:	74 3f                	je     c000cbb0 <sendKeyboardToken(KeyboardToken)+0x35a>
c000cb71:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb75:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000cb79:	74 29                	je     c000cba4 <sendKeyboardToken(KeyboardToken)+0x34e>
c000cb7b:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cb81:	89 d0                	mov    eax,edx
c000cb83:	c1 e0 02             	shl    eax,0x2
c000cb86:	01 d0                	add    eax,edx
c000cb88:	01 c0                	add    eax,eax
c000cb8a:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cb8f:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cb93:	8d 50 d0             	lea    edx,[eax-0x30]
c000cb96:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb9b:	01 d0                	add    eax,edx
c000cb9d:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cba2:	eb 67                	jmp    c000cc0b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cba4:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbae:	eb 5b                	jmp    c000cc0b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cbb0:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbb5:	85 c0                	test   eax,eax
c000cbb7:	74 14                	je     c000cbcd <sendKeyboardToken(KeyboardToken)+0x377>
c000cbb9:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbbe:	0f b6 c0             	movzx  eax,al
c000cbc1:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbc4:	e8 c7 fb ff ff       	call   c000c790 <sendKeyToTerminal(unsigned char)>
c000cbc9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cbcd:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cbd7:	eb 32                	jmp    c000cc0b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cbd9:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cbdd:	3d 01 01 00 00       	cmp    eax,0x101
c000cbe2:	75 27                	jne    c000cc0b <sendKeyboardToken(KeyboardToken)+0x3b5>
c000cbe4:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbe9:	85 c0                	test   eax,eax
c000cbeb:	74 14                	je     c000cc01 <sendKeyboardToken(KeyboardToken)+0x3ab>
c000cbed:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cbf2:	0f b6 c0             	movzx  eax,al
c000cbf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbf8:	e8 93 fb ff ff       	call   c000c790 <sendKeyToTerminal(unsigned char)>
c000cbfd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cc01:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cc0b:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc0f:	34 01                	xor    al,0x1
c000cc11:	84 c0                	test   al,al
c000cc13:	74 4a                	je     c000cc5f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc15:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cc19:	34 01                	xor    al,0x1
c000cc1b:	84 c0                	test   al,al
c000cc1d:	74 40                	je     c000cc5f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc1f:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cc26:	34 01                	xor    al,0x1
c000cc28:	84 c0                	test   al,al
c000cc2a:	74 33                	je     c000cc5f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc2c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc30:	83 f8 1f             	cmp    eax,0x1f
c000cc33:	76 09                	jbe    c000cc3e <sendKeyboardToken(KeyboardToken)+0x3e8>
c000cc35:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc39:	83 f8 7e             	cmp    eax,0x7e
c000cc3c:	76 12                	jbe    c000cc50 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cc3e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc42:	83 f8 0a             	cmp    eax,0xa
c000cc45:	74 09                	je     c000cc50 <sendKeyboardToken(KeyboardToken)+0x3fa>
c000cc47:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc4b:	83 f8 08             	cmp    eax,0x8
c000cc4e:	75 0f                	jne    c000cc5f <sendKeyboardToken(KeyboardToken)+0x409>
c000cc50:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc54:	0f b6 c0             	movzx  eax,al
c000cc57:	89 04 24             	mov    DWORD PTR [esp],eax
c000cc5a:	e8 31 fb ff ff       	call   c000c790 <sendKeyToTerminal(unsigned char)>
c000cc5f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc63:	34 01                	xor    al,0x1
c000cc65:	84 c0                	test   al,al
c000cc67:	74 4d                	je     c000ccb6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc69:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000cc6d:	34 01                	xor    al,0x1
c000cc6f:	84 c0                	test   al,al
c000cc71:	74 43                	je     c000ccb6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc73:	0f b6 05 e0 70 02 c0 	movzx  eax,BYTE PTR ds:0xc00270e0
c000cc7a:	84 c0                	test   al,al
c000cc7c:	74 38                	je     c000ccb6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc7e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc82:	83 f8 3f             	cmp    eax,0x3f
c000cc85:	76 2f                	jbe    c000ccb6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc87:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc8b:	83 f8 7f             	cmp    eax,0x7f
c000cc8e:	77 26                	ja     c000ccb6 <sendKeyboardToken(KeyboardToken)+0x460>
c000cc90:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc94:	88 c2                	mov    dl,al
c000cc96:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000cc9a:	83 f8 5f             	cmp    eax,0x5f
c000cc9d:	76 04                	jbe    c000cca3 <sendKeyboardToken(KeyboardToken)+0x44d>
c000cc9f:	b0 20                	mov    al,0x20
c000cca1:	eb 02                	jmp    c000cca5 <sendKeyboardToken(KeyboardToken)+0x44f>
c000cca3:	b0 00                	mov    al,0x0
c000cca5:	28 c2                	sub    dl,al
c000cca7:	88 d0                	mov    al,dl
c000cca9:	2c 40                	sub    al,0x40
c000ccab:	0f b6 c0             	movzx  eax,al
c000ccae:	89 04 24             	mov    DWORD PTR [esp],eax
c000ccb1:	e8 da fa ff ff       	call   c000c790 <sendKeyToTerminal(unsigned char)>
c000ccb6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000ccba:	3d 00 03 00 00       	cmp    eax,0x300
c000ccbf:	75 0f                	jne    c000ccd0 <sendKeyboardToken(KeyboardToken)+0x47a>
c000ccc1:	0f b6 45 0a          	movzx  eax,BYTE PTR [ebp+0xa]
c000ccc5:	34 01                	xor    al,0x1
c000ccc7:	84 c0                	test   al,al
c000ccc9:	74 05                	je     c000ccd0 <sendKeyboardToken(KeyboardToken)+0x47a>
c000cccb:	e8 57 b8 ff ff       	call   c0008527 <doTerminalCycle()>
c000ccd0:	90                   	nop
c000ccd1:	c9                   	leave  
c000ccd2:	c3                   	ret    

c000ccd3 <clearInternalKeybuffer(VgaText*)>:
c000ccd3:	55                   	push   ebp
c000ccd4:	89 e5                	mov    ebp,esp
c000ccd6:	83 ec 18             	sub    esp,0x18
c000ccd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccdc:	05 02 01 00 00       	add    eax,0x102
c000cce1:	89 04 24             	mov    DWORD PTR [esp],eax
c000cce4:	e8 37 39 ff ff       	call   c0000620 <strlen>
c000cce9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ccec:	81 c2 02 01 00 00    	add    edx,0x102
c000ccf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccf6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ccfe:	89 14 24             	mov    DWORD PTR [esp],edx
c000cd01:	e8 7a 38 ff ff       	call   c0000580 <memset>
c000cd06:	90                   	nop
c000cd07:	c9                   	leave  
c000cd08:	c3                   	ret    

c000cd09 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cd09:	55                   	push   ebp
c000cd0a:	89 e5                	mov    ebp,esp
c000cd0c:	83 ec 28             	sub    esp,0x28
c000cd0f:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cd14:	85 c0                	test   eax,eax
c000cd16:	74 23                	je     c000cd3b <readKeyboard(VgaText*, char*, unsigned long)+0x32>
c000cd18:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cd1e:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cd23:	c7 44 24 08 e0 6f 02 c0 	mov    DWORD PTR [esp+0x8],0xc0026fe0
c000cd2b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000cd2e:	89 14 24             	mov    DWORD PTR [esp],edx
c000cd31:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000cd34:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000cd39:	ff d0                	call   eax
c000cd3b:	fb                   	sti    
c000cd3c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000cd43:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000cd47:	0f 84 fa 00 00 00    	je     c000ce47 <readKeyboard(VgaText*, char*, unsigned long)+0x13e>
c000cd4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd50:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000cd57:	84 c0                	test   al,al
c000cd59:	75 28                	jne    c000cd83 <readKeyboard(VgaText*, char*, unsigned long)+0x7a>
c000cd5b:	fa                   	cli    
c000cd5c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd61:	40                   	inc    eax
c000cd62:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd67:	e8 e4 83 00 00       	call   c0015150 <schedule()>
c000cd6c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd71:	48                   	dec    eax
c000cd72:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd77:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd7c:	85 c0                	test   eax,eax
c000cd7e:	75 cd                	jne    c000cd4d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000cd80:	fb                   	sti    
c000cd81:	eb ca                	jmp    c000cd4d <readKeyboard(VgaText*, char*, unsigned long)+0x44>
c000cd83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd86:	8d 50 01             	lea    edx,[eax+0x1]
c000cd89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd8f:	0f b6 92 02 01 00 00 	movzx  edx,BYTE PTR [edx+0x102]
c000cd96:	88 10                	mov    BYTE PTR [eax],dl
c000cd98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd9b:	0f b6 80 02 01 00 00 	movzx  eax,BYTE PTR [eax+0x102]
c000cda2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cda5:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000cda9:	75 20                	jne    c000cdcb <readKeyboard(VgaText*, char*, unsigned long)+0xc2>
c000cdab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdb2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cdb5:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cdbb:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c000cdc3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdc6:	e8 cc 3e 00 00       	call   c0010c97 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdcb:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000cdcf:	75 20                	jne    c000cdf1 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000cdd1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cdd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cdd8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cddb:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cde1:	c7 44 24 04 09 00 00 00 	mov    DWORD PTR [esp+0x4],0x9
c000cde9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdec:	e8 a6 3e 00 00       	call   c0010c97 <KeRaiseSignal(SigHandlerBlock*, int)>
c000cdf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cdf4:	05 02 01 00 00       	add    eax,0x102
c000cdf9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdfc:	e8 1f 38 ff ff       	call   c0000620 <strlen>
c000ce01:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce04:	81 c2 02 01 00 00    	add    edx,0x102
c000ce0a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ce0d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ce10:	81 c2 02 01 00 00    	add    edx,0x102
c000ce16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce1a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000ce1e:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce21:	e8 aa 35 ff ff       	call   c00003d0 <memmove>
c000ce26:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ce29:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ce2c:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ce30:	74 10                	je     c000ce42 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000ce32:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000ce36:	74 0a                	je     c000ce42 <readKeyboard(VgaText*, char*, unsigned long)+0x139>
c000ce38:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000ce3c:	0f 85 01 ff ff ff    	jne    c000cd43 <readKeyboard(VgaText*, char*, unsigned long)+0x3a>
c000ce42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce45:	eb 03                	jmp    c000ce4a <readKeyboard(VgaText*, char*, unsigned long)+0x141>
c000ce47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ce4a:	c9                   	leave  
c000ce4b:	c3                   	ret    

c000ce4c <Keyboard::Keyboard(char const*)>:
c000ce4c:	83 ec 1c             	sub    esp,0x1c
c000ce4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ce57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ce5b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce5e:	e8 15 f2 ff ff       	call   c000c078 <Device::Device(char const*)>
c000ce63:	ba 6c 03 02 c0       	mov    edx,0xc002036c
c000ce68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce6c:	89 10                	mov    DWORD PTR [eax],edx
c000ce6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce72:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce7c:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce83:	90                   	nop
c000ce84:	83 c4 1c             	add    esp,0x1c
c000ce87:	c3                   	ret    

c000ce88 <Keyboard::~Keyboard()>:
c000ce88:	83 ec 1c             	sub    esp,0x1c
c000ce8b:	ba 6c 03 02 c0       	mov    edx,0xc002036c
c000ce90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce94:	89 10                	mov    DWORD PTR [eax],edx
c000ce96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ce9a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce9d:	e8 42 ef ff ff       	call   c000bde4 <Device::~Device()>
c000cea2:	90                   	nop
c000cea3:	83 c4 1c             	add    esp,0x1c
c000cea6:	c3                   	ret    
c000cea7:	90                   	nop

c000cea8 <Keyboard::~Keyboard()>:
c000cea8:	83 ec 1c             	sub    esp,0x1c
c000ceab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ceaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ceb2:	e8 d1 ff ff ff       	call   c000ce88 <Keyboard::~Keyboard()>
c000ceb7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cec3:	89 04 24             	mov    DWORD PTR [esp],eax
c000cec6:	e8 91 da ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000cecb:	83 c4 1c             	add    esp,0x1c
c000cece:	c3                   	ret    
c000cecf:	90                   	nop

c000ced0 <LogicalDisk::close(int, int, void*)>:
c000ced0:	83 c8 ff             	or     eax,0xffffffff
c000ced3:	c3                   	ret    

c000ced4 <LogicalDisk::~LogicalDisk()>:
c000ced4:	83 ec 1c             	sub    esp,0x1c
c000ced7:	ba e4 03 02 c0       	mov    edx,0xc00203e4
c000cedc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cee0:	89 10                	mov    DWORD PTR [eax],edx
c000cee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cee6:	89 04 24             	mov    DWORD PTR [esp],eax
c000cee9:	e8 f6 ee ff ff       	call   c000bde4 <Device::~Device()>
c000ceee:	90                   	nop
c000ceef:	83 c4 1c             	add    esp,0x1c
c000cef2:	c3                   	ret    
c000cef3:	90                   	nop

c000cef4 <LogicalDisk::~LogicalDisk()>:
c000cef4:	83 ec 1c             	sub    esp,0x1c
c000cef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cefb:	89 04 24             	mov    DWORD PTR [esp],eax
c000cefe:	e8 d1 ff ff ff       	call   c000ced4 <LogicalDisk::~LogicalDisk()>
c000cf03:	c7 44 24 04 78 01 00 00 	mov    DWORD PTR [esp+0x4],0x178
c000cf0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf12:	e8 45 da ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000cf17:	83 c4 1c             	add    esp,0x1c
c000cf1a:	c3                   	ret    
c000cf1b:	90                   	nop

c000cf1c <LogicalDisk::open(int, int, void*)>:
c000cf1c:	83 ec 18             	sub    esp,0x18
c000cf1f:	68 98 03 02 c0       	push   0xc0020398
c000cf24:	e8 fc 38 00 00       	call   c0010825 <KePanic(char const*)>
c000cf29:	83 c8 ff             	or     eax,0xffffffff
c000cf2c:	83 c4 1c             	add    esp,0x1c
c000cf2f:	c3                   	ret    

c000cf30 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cf30:	53                   	push   ebx
c000cf31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cf35:	f3 0f 7e 44 24 0c    	movq   xmm0,QWORD PTR [esp+0xc]
c000cf3b:	f3 0f 7e 89 58 01 00 00 	movq   xmm1,QWORD PTR [ecx+0x158]
c000cf43:	66 0f fb c1          	psubq  xmm0,xmm1
c000cf47:	66 0f 7e c0          	movd   eax,xmm0
c000cf4b:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000cf50:	66 0f 7e c2          	movd   edx,xmm0
c000cf54:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cf5a:	77 12                	ja     c000cf6e <LogicalDisk::absoluteToRelative(unsigned long long)+0x3e>
c000cf5c:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf62:	66 0f 7e c3          	movd   ebx,xmm0
c000cf66:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf6c:	72 11                	jb     c000cf7f <LogicalDisk::absoluteToRelative(unsigned long long)+0x4f>
c000cf6e:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c000cf72:	66 0f 7e c0          	movd   eax,xmm0
c000cf76:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000cf7b:	66 0f 7e c2          	movd   edx,xmm0
c000cf7f:	5b                   	pop    ebx
c000cf80:	c3                   	ret    
c000cf81:	90                   	nop

c000cf82 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf82:	56                   	push   esi
c000cf83:	83 c8 ff             	or     eax,0xffffffff
c000cf86:	53                   	push   ebx
c000cf87:	89 c2                	mov    edx,eax
c000cf89:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf95:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf9b:	77 27                	ja     c000cfc4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf9d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cfa3:	89 d8                	mov    eax,ebx
c000cfa5:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cfab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cfb0:	89 c2                	mov    edx,eax
c000cfb2:	73 10                	jae    c000cfc4 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cfb4:	89 c8                	mov    eax,ecx
c000cfb6:	89 da                	mov    edx,ebx
c000cfb8:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cfbe:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cfc4:	5b                   	pop    ebx
c000cfc5:	5e                   	pop    esi
c000cfc6:	c3                   	ret    
c000cfc7:	90                   	nop

c000cfc8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cfc8:	83 ec 2c             	sub    esp,0x2c
c000cfcb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000cfcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cfdb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000cfdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cfe3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000cfe7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000cff3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cff7:	89 04 24             	mov    DWORD PTR [esp],eax
c000cffa:	e8 79 f0 ff ff       	call   c000c078 <Device::Device(char const*)>
c000cfff:	ba e4 03 02 c0       	mov    edx,0xc00203e4
c000d004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d008:	89 10                	mov    DWORD PTR [eax],edx
c000d00a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d00e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d019:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d024:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d02b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d02f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d039:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d03d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d041:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d045:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d04b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d051:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000d055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d059:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d05d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d063:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d06d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000d071:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d07b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d085:	90                   	nop
c000d086:	83 c4 2c             	add    esp,0x2c
c000d089:	c3                   	ret    

c000d08a <LogicalDisk::assignDriveLetter()>:
c000d08a:	55                   	push   ebp
c000d08b:	57                   	push   edi
c000d08c:	56                   	push   esi
c000d08d:	53                   	push   ebx
c000d08e:	83 ec 24             	sub    esp,0x24
c000d091:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d095:	8b 1d 00 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027400
c000d09b:	8b 35 04 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027404
c000d0a1:	8b 95 6c 01 00 00    	mov    edx,DWORD PTR [ebp+0x16c]
c000d0a7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000d0ab:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000d0af:	8a 82 69 01 00 00    	mov    al,BYTE PTR [edx+0x169]
c000d0b5:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d0b9:	3c 01                	cmp    al,0x1
c000d0bb:	19 c0                	sbb    eax,eax
c000d0bd:	24 02                	and    al,0x2
c000d0bf:	04 41                	add    al,0x41
c000d0c1:	0f be d8             	movsx  ebx,al
c000d0c4:	3c 43                	cmp    al,0x43
c000d0c6:	75 10                	jne    c000d0d8 <LogicalDisk::assignDriveLetter()+0x4e>
c000d0c8:	80 ba 68 01 00 00 00 	cmp    BYTE PTR [edx+0x168],0x0
c000d0cf:	75 63                	jne    c000d134 <LogicalDisk::assignDriveLetter()+0xaa>
c000d0d1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d0d6:	75 5c                	jne    c000d134 <LogicalDisk::assignDriveLetter()+0xaa>
c000d0d8:	8d 4b bf             	lea    ecx,[ebx-0x41]
c000d0db:	bf 01 00 00 00       	mov    edi,0x1
c000d0e0:	d3 e7                	shl    edi,cl
c000d0e2:	89 fe                	mov    esi,edi
c000d0e4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000d0e8:	c1 ff 1f             	sar    edi,0x1f
c000d0eb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000d0ef:	23 7c 24 0c          	and    edi,DWORD PTR [esp+0xc]
c000d0f3:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000d0f7:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000d0fb:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000d0ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d103:	0b 7c 24 18          	or     edi,DWORD PTR [esp+0x18]
c000d107:	75 2b                	jne    c000d134 <LogicalDisk::assignDriveLetter()+0xaa>
c000d109:	88 85 68 01 00 00    	mov    BYTE PTR [ebp+0x168],al
c000d10f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d113:	89 2c 8d 20 74 02 c0 	mov    DWORD PTR [ecx*4-0x3ffd8be0],ebp
c000d11a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000d11e:	0b 74 24 10          	or     esi,DWORD PTR [esp+0x10]
c000d122:	0b 7c 24 14          	or     edi,DWORD PTR [esp+0x14]
c000d126:	89 35 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,esi
c000d12c:	89 3d 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edi
c000d132:	eb 09                	jmp    c000d13d <LogicalDisk::assignDriveLetter()+0xb3>
c000d134:	fe c0                	inc    al
c000d136:	43                   	inc    ebx
c000d137:	3c 5b                	cmp    al,0x5b
c000d139:	75 89                	jne    c000d0c4 <LogicalDisk::assignDriveLetter()+0x3a>
c000d13b:	31 c0                	xor    eax,eax
c000d13d:	83 c4 24             	add    esp,0x24
c000d140:	5b                   	pop    ebx
c000d141:	5e                   	pop    esi
c000d142:	5f                   	pop    edi
c000d143:	5d                   	pop    ebp
c000d144:	c3                   	ret    
c000d145:	90                   	nop

c000d146 <LogicalDisk::mount()>:
c000d146:	56                   	push   esi
c000d147:	53                   	push   ebx
c000d148:	53                   	push   ebx
c000d149:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d14d:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d153:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d15d:	85 db                	test   ebx,ebx
c000d15f:	74 27                	je     c000d188 <LogicalDisk::mount()+0x42>
c000d161:	51                   	push   ecx
c000d162:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d169:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d16b:	83 e8 41             	sub    eax,0x41
c000d16e:	50                   	push   eax
c000d16f:	56                   	push   esi
c000d170:	53                   	push   ebx
c000d171:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	84 c0                	test   al,al
c000d179:	74 08                	je     c000d183 <LogicalDisk::mount()+0x3d>
c000d17b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d181:	eb 07                	jmp    c000d18a <LogicalDisk::mount()+0x44>
c000d183:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d186:	eb d5                	jmp    c000d15d <LogicalDisk::mount()+0x17>
c000d188:	31 c0                	xor    eax,eax
c000d18a:	5a                   	pop    edx
c000d18b:	5b                   	pop    ebx
c000d18c:	5e                   	pop    esi
c000d18d:	c3                   	ret    

c000d18e <LogicalDisk::unmount()>:
c000d18e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d192:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d19c:	c3                   	ret    
c000d19d:	90                   	nop

c000d19e <LogicalDisk::eject()>:
c000d19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d1a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d1aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d1ae:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d1b1:	90                   	nop

c000d1b2 <LogicalDisk::unassignDriveLetter()>:
c000d1b2:	53                   	push   ebx
c000d1b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d1b7:	0f be 8b 68 01 00 00 	movsx  ecx,BYTE PTR [ebx+0x168]
c000d1be:	84 c9                	test   cl,cl
c000d1c0:	75 0e                	jne    c000d1d0 <LogicalDisk::unassignDriveLetter()+0x1e>
c000d1c2:	c7 44 24 08 bc 03 02 c0 	mov    DWORD PTR [esp+0x8],0xc00203bc
c000d1ca:	5b                   	pop    ebx
c000d1cb:	e9 55 36 00 00       	jmp    c0010825 <KePanic(char const*)>
c000d1d0:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c000d1d7:	83 e9 41             	sub    ecx,0x41
c000d1da:	b8 01 00 00 00       	mov    eax,0x1
c000d1df:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d1ea:	d3 e0                	shl    eax,cl
c000d1ec:	66 0f 6e c0          	movd   xmm0,eax
c000d1f0:	5b                   	pop    ebx
c000d1f1:	99                   	cdq    
c000d1f2:	66 0f 6e ca          	movd   xmm1,edx
c000d1f6:	66 0f 62 c1          	punpckldq xmm0,xmm1
c000d1fa:	66 0f 76 c9          	pcmpeqd xmm1,xmm1
c000d1fe:	0f 57 c1             	xorps  xmm0,xmm1
c000d201:	f3 0f 7e 0d 00 74 02 c0 	movq   xmm1,QWORD PTR ds:0xc0027400
c000d209:	0f 54 c1             	andps  xmm0,xmm1
c000d20c:	66 0f d6 05 00 74 02 c0 	movq   QWORD PTR ds:0xc0027400,xmm0
c000d214:	c3                   	ret    
c000d215:	90                   	nop

c000d216 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d216:	57                   	push   edi
c000d217:	56                   	push   esi
c000d218:	53                   	push   ebx
c000d219:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d21d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d221:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d225:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d229:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d22f:	77 41                	ja     c000d272 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d231:	99                   	cdq    
c000d232:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d238:	01 c8                	add    eax,ecx
c000d23a:	11 da                	adc    edx,ebx
c000d23c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d242:	19 d7                	sbb    edi,edx
c000d244:	72 33                	jb     c000d279 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d246:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d24c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d252:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d256:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d25a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d260:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d266:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d26a:	5b                   	pop    ebx
c000d26b:	5e                   	pop    esi
c000d26c:	5f                   	pop    edi
c000d26d:	e9 98 0a 00 00       	jmp    c000dd0a <VCache::read(unsigned long long, int, void*)>
c000d272:	b8 05 00 00 00       	mov    eax,0x5
c000d277:	eb 05                	jmp    c000d27e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d279:	b8 07 00 00 00       	mov    eax,0x7
c000d27e:	5b                   	pop    ebx
c000d27f:	5e                   	pop    esi
c000d280:	5f                   	pop    edi
c000d281:	c3                   	ret    

c000d282 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d282:	57                   	push   edi
c000d283:	56                   	push   esi
c000d284:	53                   	push   ebx
c000d285:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d289:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d28d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d291:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d295:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d29b:	77 41                	ja     c000d2de <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d29d:	99                   	cdq    
c000d29e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d2a4:	01 c8                	add    eax,ecx
c000d2a6:	11 da                	adc    edx,ebx
c000d2a8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d2ae:	19 d7                	sbb    edi,edx
c000d2b0:	72 33                	jb     c000d2e5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d2b2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d2b8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d2be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d2c2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d2c6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d2cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2d6:	5b                   	pop    ebx
c000d2d7:	5e                   	pop    esi
c000d2d8:	5f                   	pop    edi
c000d2d9:	e9 42 09 00 00       	jmp    c000dc20 <VCache::write(unsigned long long, int, void*)>
c000d2de:	b8 05 00 00 00       	mov    eax,0x5
c000d2e3:	eb 05                	jmp    c000d2ea <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d2e5:	b8 07 00 00 00       	mov    eax,0x7
c000d2ea:	5b                   	pop    ebx
c000d2eb:	5e                   	pop    esi
c000d2ec:	5f                   	pop    edi
c000d2ed:	c3                   	ret    
c000d2ee:	66 90                	xchg   ax,ax

c000d2f0 <Mouse::Mouse(char const*)>:
c000d2f0:	83 ec 1c             	sub    esp,0x1c
c000d2f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d2fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d2ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000d302:	e8 71 ed ff ff       	call   c000c078 <Device::Device(char const*)>
c000d307:	ba 10 04 02 c0       	mov    edx,0xc0020410
c000d30c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d310:	89 10                	mov    DWORD PTR [eax],edx
c000d312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d316:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d320:	90                   	nop
c000d321:	83 c4 1c             	add    esp,0x1c
c000d324:	c3                   	ret    
c000d325:	90                   	nop
c000d326:	66 90                	xchg   ax,ax

c000d328 <Mouse::~Mouse()>:
c000d328:	83 ec 1c             	sub    esp,0x1c
c000d32b:	ba 10 04 02 c0       	mov    edx,0xc0020410
c000d330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d334:	89 10                	mov    DWORD PTR [eax],edx
c000d336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d33a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d33d:	e8 a2 ea ff ff       	call   c000bde4 <Device::~Device()>
c000d342:	90                   	nop
c000d343:	83 c4 1c             	add    esp,0x1c
c000d346:	c3                   	ret    
c000d347:	90                   	nop

c000d348 <Mouse::~Mouse()>:
c000d348:	83 ec 1c             	sub    esp,0x1c
c000d34b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d352:	e8 d1 ff ff ff       	call   c000d328 <Mouse::~Mouse()>
c000d357:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d35f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d363:	89 04 24             	mov    DWORD PTR [esp],eax
c000d366:	e8 f1 d5 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d36b:	83 c4 1c             	add    esp,0x1c
c000d36e:	c3                   	ret    
c000d36f:	90                   	nop

c000d370 <NIC::getMAC()>:
c000d370:	31 c0                	xor    eax,eax
c000d372:	31 d2                	xor    edx,edx
c000d374:	c3                   	ret    
c000d375:	90                   	nop

c000d376 <NIC::write(int, unsigned char*, int*)>:
c000d376:	b8 01 00 00 00       	mov    eax,0x1
c000d37b:	c3                   	ret    

c000d37c <NIC::NIC(char const*)>:
c000d37c:	83 ec 1c             	sub    esp,0x1c
c000d37f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d383:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d387:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d38b:	89 04 24             	mov    DWORD PTR [esp],eax
c000d38e:	e8 e5 ec ff ff       	call   c000c078 <Device::Device(char const*)>
c000d393:	ba 3c 04 02 c0       	mov    edx,0xc002043c
c000d398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39c:	89 10                	mov    DWORD PTR [eax],edx
c000d39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d3ac:	90                   	nop
c000d3ad:	83 c4 1c             	add    esp,0x1c
c000d3b0:	c3                   	ret    
c000d3b1:	90                   	nop

c000d3b2 <NIC::~NIC()>:
c000d3b2:	83 ec 1c             	sub    esp,0x1c
c000d3b5:	ba 3c 04 02 c0       	mov    edx,0xc002043c
c000d3ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3be:	89 10                	mov    DWORD PTR [eax],edx
c000d3c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3c7:	e8 18 ea ff ff       	call   c000bde4 <Device::~Device()>
c000d3cc:	90                   	nop
c000d3cd:	83 c4 1c             	add    esp,0x1c
c000d3d0:	c3                   	ret    
c000d3d1:	90                   	nop

c000d3d2 <NIC::~NIC()>:
c000d3d2:	83 ec 1c             	sub    esp,0x1c
c000d3d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d9:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3dc:	e8 d1 ff ff ff       	call   c000d3b2 <NIC::~NIC()>
c000d3e1:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d3e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3f0:	e8 67 d5 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d3f5:	83 c4 1c             	add    esp,0x1c
c000d3f8:	c3                   	ret    

c000d3f9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d3f9:	55                   	push   ebp
c000d3fa:	57                   	push   edi
c000d3fb:	56                   	push   esi
c000d3fc:	53                   	push   ebx
c000d3fd:	81 ec 28 01 00 00    	sub    esp,0x128
c000d403:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000d40a:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000d411:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000d418:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000d41f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d423:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d427:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d42e:	e8 3f ed ff ff       	call   c000c172 <Device::getName()>
c000d433:	5a                   	pop    edx
c000d434:	59                   	pop    ecx
c000d435:	50                   	push   eax
c000d436:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d43a:	55                   	push   ebp
c000d43b:	e8 e0 32 ff ff       	call   c0000720 <strcpy>
c000d440:	5b                   	pop    ebx
c000d441:	58                   	pop    eax
c000d442:	68 68 04 02 c0       	push   0xc0020468
c000d447:	55                   	push   ebp
c000d448:	e8 e3 34 ff ff       	call   c0000930 <strcat>
c000d44d:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d454:	e8 a3 a6 ff ff       	call   c0007afc <malloc>
c000d459:	83 c4 0c             	add    esp,0xc
c000d45c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d460:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d464:	89 c3                	mov    ebx,eax
c000d466:	57                   	push   edi
c000d467:	56                   	push   esi
c000d468:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d46f:	55                   	push   ebp
c000d470:	50                   	push   eax
c000d471:	e8 52 fb ff ff       	call   c000cfc8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d476:	83 c4 14             	add    esp,0x14
c000d479:	53                   	push   ebx
c000d47a:	e8 0b fc ff ff       	call   c000d08a <LogicalDisk::assignDriveLetter()>
c000d47f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d482:	e8 bf fc ff ff       	call   c000d146 <LogicalDisk::mount()>
c000d487:	58                   	pop    eax
c000d488:	5a                   	pop    edx
c000d489:	53                   	push   ebx
c000d48a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d491:	e8 4a ea ff ff       	call   c000bee0 <Device::addChild(Device*)>
c000d496:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d49c:	5b                   	pop    ebx
c000d49d:	5e                   	pop    esi
c000d49e:	5f                   	pop    edi
c000d49f:	5d                   	pop    ebp
c000d4a0:	c3                   	ret    

c000d4a1 <createPartitionsForDisk(PhysicalDisk*)>:
c000d4a1:	55                   	push   ebp
c000d4a2:	57                   	push   edi
c000d4a3:	56                   	push   esi
c000d4a4:	53                   	push   ebx
c000d4a5:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d4ab:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d4b2:	8b 8b 5c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x15c]
c000d4b8:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000d4be:	74 30                	je     c000d4f0 <createPartitionsForDisk(PhysicalDisk*)+0x4f>
c000d4c0:	89 cf                	mov    edi,ecx
c000d4c2:	83 ec 10             	sub    esp,0x10
c000d4c5:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000d4cd:	c1 ff 1f             	sar    edi,0x1f
c000d4d0:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000d4d5:	57                   	push   edi
c000d4d6:	66 0f 7e c0          	movd   eax,xmm0
c000d4da:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d4df:	51                   	push   ecx
c000d4e0:	66 0f 7e c2          	movd   edx,xmm0
c000d4e4:	52                   	push   edx
c000d4e5:	50                   	push   eax
c000d4e6:	e8 55 0f 01 00       	call   c001e440 <__udivdi3>
c000d4eb:	e9 bf 00 00 00       	jmp    c000d5af <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000d4f0:	83 ec 0c             	sub    esp,0xc
c000d4f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4f5:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
c000d4f9:	55                   	push   ebp
c000d4fa:	6a 01                	push   0x1
c000d4fc:	6a 00                	push   0x0
c000d4fe:	6a 00                	push   0x0
c000d500:	53                   	push   ebx
c000d501:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d504:	83 c4 20             	add    esp,0x20
c000d507:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d50f:	75 0a                	jne    c000d51b <createPartitionsForDisk(PhysicalDisk*)+0x7a>
c000d511:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d519:	74 2f                	je     c000d54a <createPartitionsForDisk(PhysicalDisk*)+0xa9>
c000d51b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d521:	83 ec 10             	sub    esp,0x10
c000d524:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000d52c:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000d531:	66 0f 7e c6          	movd   esi,xmm0
c000d535:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d53a:	66 0f 7e c7          	movd   edi,xmm0
c000d53e:	99                   	cdq    
c000d53f:	52                   	push   edx
c000d540:	50                   	push   eax
c000d541:	57                   	push   edi
c000d542:	56                   	push   esi
c000d543:	e8 f8 0e 01 00       	call   c001e440 <__udivdi3>
c000d548:	eb 65                	jmp    c000d5af <createPartitionsForDisk(PhysicalDisk*)+0x10e>
c000d54a:	8a 84 24 0e 02 00 00 	mov    al,BYTE PTR [esp+0x20e]
c000d551:	8a 8c 24 1e 02 00 00 	mov    cl,BYTE PTR [esp+0x21e]
c000d558:	24 7f                	and    al,0x7f
c000d55a:	80 e1 7f             	and    cl,0x7f
c000d55d:	00 c8                	add    al,cl
c000d55f:	8a 8c 24 2e 02 00 00 	mov    cl,BYTE PTR [esp+0x22e]
c000d566:	80 e1 7f             	and    cl,0x7f
c000d569:	00 c1                	add    cl,al
c000d56b:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d572:	24 7f                	and    al,0x7f
c000d574:	00 c1                	add    cl,al
c000d576:	74 4e                	je     c000d5c6 <createPartitionsForDisk(PhysicalDisk*)+0x125>
c000d578:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d57e:	83 ec 10             	sub    esp,0x10
c000d581:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000d589:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000d58e:	66 0f 7e 44 24 10    	movd   DWORD PTR [esp+0x10],xmm0
c000d594:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d599:	66 0f 7e 44 24 14    	movd   DWORD PTR [esp+0x14],xmm0
c000d59f:	99                   	cdq    
c000d5a0:	52                   	push   edx
c000d5a1:	50                   	push   eax
c000d5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5aa:	e8 91 0e 01 00       	call   c001e440 <__udivdi3>
c000d5af:	83 c4 14             	add    esp,0x14
c000d5b2:	52                   	push   edx
c000d5b3:	50                   	push   eax
c000d5b4:	6a 00                	push   0x0
c000d5b6:	6a 00                	push   0x0
c000d5b8:	53                   	push   ebx
c000d5b9:	e8 3b fe ff ff       	call   c000d3f9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d5be:	83 c4 20             	add    esp,0x20
c000d5c1:	e9 72 01 00 00       	jmp    c000d738 <createPartitionsForDisk(PhysicalDisk*)+0x297>
c000d5c6:	31 c0                	xor    eax,eax
c000d5c8:	80 bd be 01 00 00 80 	cmp    BYTE PTR [ebp+0x1be],0x80
c000d5cf:	75 02                	jne    c000d5d3 <createPartitionsForDisk(PhysicalDisk*)+0x132>
c000d5d1:	88 c1                	mov    cl,al
c000d5d3:	c7 44 c4 14 00 00 00 00 	mov    DWORD PTR [esp+eax*8+0x14],0x0
c000d5db:	0f b6 95 c7 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1c7]
c000d5e2:	83 c5 10             	add    ebp,0x10
c000d5e5:	c7 44 c4 34 00 00 00 00 	mov    DWORD PTR [esp+eax*8+0x34],0x0
c000d5ed:	c1 e2 08             	shl    edx,0x8
c000d5f0:	89 d6                	mov    esi,edx
c000d5f2:	0f b6 95 b8 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1b8]
c000d5f9:	c1 e2 10             	shl    edx,0x10
c000d5fc:	09 f2                	or     edx,esi
c000d5fe:	0f b6 b5 b6 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1b6]
c000d605:	09 f2                	or     edx,esi
c000d607:	0f b6 b5 b9 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1b9]
c000d60e:	c1 e6 18             	shl    esi,0x18
c000d611:	09 f2                	or     edx,esi
c000d613:	89 54 c4 10          	mov    DWORD PTR [esp+eax*8+0x10],edx
c000d617:	0f b6 95 bb 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1bb]
c000d61e:	c1 e2 08             	shl    edx,0x8
c000d621:	89 d6                	mov    esi,edx
c000d623:	0f b6 95 bc 01 00 00 	movzx  edx,BYTE PTR [ebp+0x1bc]
c000d62a:	c1 e2 10             	shl    edx,0x10
c000d62d:	09 f2                	or     edx,esi
c000d62f:	0f b6 b5 ba 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1ba]
c000d636:	09 f2                	or     edx,esi
c000d638:	0f b6 b5 bd 01 00 00 	movzx  esi,BYTE PTR [ebp+0x1bd]
c000d63f:	c1 e6 18             	shl    esi,0x18
c000d642:	09 f2                	or     edx,esi
c000d644:	89 54 c4 30          	mov    DWORD PTR [esp+eax*8+0x30],edx
c000d648:	40                   	inc    eax
c000d649:	83 f8 04             	cmp    eax,0x4
c000d64c:	0f 85 76 ff ff ff    	jne    c000d5c8 <createPartitionsForDisk(PhysicalDisk*)+0x127>
c000d652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d656:	83 f0 01             	xor    eax,0x1
c000d659:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d65d:	75 62                	jne    c000d6c1 <createPartitionsForDisk(PhysicalDisk*)+0x220>
c000d65f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d663:	83 f0 01             	xor    eax,0x1
c000d666:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d66a:	75 55                	jne    c000d6c1 <createPartitionsForDisk(PhysicalDisk*)+0x220>
c000d66c:	f3 0f 7e 83 60 01 00 00 	movq   xmm0,QWORD PTR [ebx+0x160]
c000d674:	88 0c 24             	mov    BYTE PTR [esp],cl
c000d677:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d67d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d685:	66 0f 73 f0 0a       	psllq  xmm0,0xa
c000d68a:	66 0f 7e 44 24 08    	movd   DWORD PTR [esp+0x8],xmm0
c000d690:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d698:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c000d69d:	66 0f 7e 44 24 0c    	movd   DWORD PTR [esp+0xc],xmm0
c000d6a3:	99                   	cdq    
c000d6a4:	52                   	push   edx
c000d6a5:	50                   	push   eax
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ae:	e8 8d 0d 01 00       	call   c001e440 <__udivdi3>
c000d6b3:	83 c4 10             	add    esp,0x10
c000d6b6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d6b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6c1:	84 c9                	test   cl,cl
c000d6c3:	74 3f                	je     c000d704 <createPartitionsForDisk(PhysicalDisk*)+0x263>
c000d6c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6c9:	0f b6 c9             	movzx  ecx,cl
c000d6cc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d6d0:	f3 0f 7e 4c cc 10    	movq   xmm1,QWORD PTR [esp+ecx*8+0x10]
c000d6d6:	66 0f d6 4c 24 10    	movq   QWORD PTR [esp+0x10],xmm1
c000d6dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d6e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d6e4:	89 74 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],esi
c000d6e8:	8b 74 cc 30          	mov    esi,DWORD PTR [esp+ecx*8+0x30]
c000d6ec:	89 7c cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edi
c000d6f0:	8b 7c cc 34          	mov    edi,DWORD PTR [esp+ecx*8+0x34]
c000d6f4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d6f8:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d6fc:	89 44 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],eax
c000d700:	89 54 cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edx
c000d704:	31 ed                	xor    ebp,ebp
c000d706:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d70a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d70e:	89 f8                	mov    eax,edi
c000d710:	09 f0                	or     eax,esi
c000d712:	74 1e                	je     c000d732 <createPartitionsForDisk(PhysicalDisk*)+0x291>
c000d714:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d718:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d71c:	89 d1                	mov    ecx,edx
c000d71e:	09 c1                	or     ecx,eax
c000d720:	74 10                	je     c000d732 <createPartitionsForDisk(PhysicalDisk*)+0x291>
c000d722:	83 ec 0c             	sub    esp,0xc
c000d725:	57                   	push   edi
c000d726:	56                   	push   esi
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	53                   	push   ebx
c000d72a:	e8 ca fc ff ff       	call   c000d3f9 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d72f:	83 c4 20             	add    esp,0x20
c000d732:	45                   	inc    ebp
c000d733:	83 fd 04             	cmp    ebp,0x4
c000d736:	75 ce                	jne    c000d706 <createPartitionsForDisk(PhysicalDisk*)+0x265>
c000d738:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d73e:	5b                   	pop    ebx
c000d73f:	5e                   	pop    esi
c000d740:	5f                   	pop    edi
c000d741:	5d                   	pop    ebp
c000d742:	c3                   	ret    
c000d743:	90                   	nop

c000d744 <Serial::Serial(char const*)>:
c000d744:	83 ec 1c             	sub    esp,0x1c
c000d747:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d74f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d753:	89 04 24             	mov    DWORD PTR [esp],eax
c000d756:	e8 1d e9 ff ff       	call   c000c078 <Device::Device(char const*)>
c000d75b:	ba 7c 04 02 c0       	mov    edx,0xc002047c
c000d760:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d764:	89 10                	mov    DWORD PTR [eax],edx
c000d766:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d76a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d774:	90                   	nop
c000d775:	83 c4 1c             	add    esp,0x1c
c000d778:	c3                   	ret    
c000d779:	90                   	nop
c000d77a:	66 90                	xchg   ax,ax

c000d77c <Serial::~Serial()>:
c000d77c:	83 ec 1c             	sub    esp,0x1c
c000d77f:	ba 7c 04 02 c0       	mov    edx,0xc002047c
c000d784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d788:	89 10                	mov    DWORD PTR [eax],edx
c000d78a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78e:	89 04 24             	mov    DWORD PTR [esp],eax
c000d791:	e8 4e e6 ff ff       	call   c000bde4 <Device::~Device()>
c000d796:	90                   	nop
c000d797:	83 c4 1c             	add    esp,0x1c
c000d79a:	c3                   	ret    
c000d79b:	90                   	nop

c000d79c <Serial::~Serial()>:
c000d79c:	83 ec 1c             	sub    esp,0x1c
c000d79f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7a6:	e8 d1 ff ff ff       	call   c000d77c <Serial::~Serial()>
c000d7ab:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c000d7b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7ba:	e8 9d d1 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d7bf:	83 c4 1c             	add    esp,0x1c
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <Timer::Timer(char const*)>:
c000d7c4:	83 ec 1c             	sub    esp,0x1c
c000d7c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d7cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d7d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7d6:	e8 9d e8 ff ff       	call   c000c078 <Device::Device(char const*)>
c000d7db:	ba c0 04 02 c0       	mov    edx,0xc00204c0
c000d7e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e4:	89 10                	mov    DWORD PTR [eax],edx
c000d7e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ea:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d7f4:	90                   	nop
c000d7f5:	83 c4 1c             	add    esp,0x1c
c000d7f8:	c3                   	ret    
c000d7f9:	90                   	nop
c000d7fa:	66 90                	xchg   ax,ax

c000d7fc <Timer::~Timer()>:
c000d7fc:	83 ec 1c             	sub    esp,0x1c
c000d7ff:	ba c0 04 02 c0       	mov    edx,0xc00204c0
c000d804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d808:	89 10                	mov    DWORD PTR [eax],edx
c000d80a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d80e:	89 04 24             	mov    DWORD PTR [esp],eax
c000d811:	e8 ce e5 ff ff       	call   c000bde4 <Device::~Device()>
c000d816:	90                   	nop
c000d817:	83 c4 1c             	add    esp,0x1c
c000d81a:	c3                   	ret    
c000d81b:	90                   	nop

c000d81c <Timer::~Timer()>:
c000d81c:	83 ec 1c             	sub    esp,0x1c
c000d81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d823:	89 04 24             	mov    DWORD PTR [esp],eax
c000d826:	e8 d1 ff ff ff       	call   c000d7fc <Timer::~Timer()>
c000d82b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000d833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d837:	89 04 24             	mov    DWORD PTR [esp],eax
c000d83a:	e8 1d d1 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000d83f:	83 c4 1c             	add    esp,0x1c
c000d842:	c3                   	ret    
c000d843:	90                   	nop

c000d844 <Timer::read()>:
c000d844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d848:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d84e:	c3                   	ret    

c000d84f <setupTimer(int)>:
c000d84f:	53                   	push   ebx
c000d850:	83 ec 14             	sub    esp,0x14
c000d853:	68 5c 01 00 00       	push   0x15c
c000d858:	e8 9f a2 ff ff       	call   c0007afc <malloc>
c000d85d:	89 04 24             	mov    DWORD PTR [esp],eax
c000d860:	89 c3                	mov    ebx,eax
c000d862:	e8 39 04 01 00       	call   c001dca0 <PIT::PIT()>
c000d867:	58                   	pop    eax
c000d868:	5a                   	pop    edx
c000d869:	53                   	push   ebx
c000d86a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d870:	e8 6b e6 ff ff       	call   c000bee0 <Device::addChild(Device*)>
c000d875:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d877:	6a 00                	push   0x0
c000d879:	6a 00                	push   0x0
c000d87b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d87f:	53                   	push   ebx
c000d880:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d883:	83 c4 28             	add    esp,0x28
c000d886:	89 d8                	mov    eax,ebx
c000d888:	5b                   	pop    ebx
c000d889:	c3                   	ret    

c000d88a <timerHandler(unsigned int)>:
c000d88a:	56                   	push   esi
c000d88b:	53                   	push   ebx
c000d88c:	51                   	push   ecx
c000d88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d891:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d897:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d89e:	0f 84 48 01 00 00    	je     c000d9ec <timerHandler(unsigned int)+0x162>
c000d8a4:	fa                   	cli    
c000d8a5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d8ab:	83 ec 0c             	sub    esp,0xc
c000d8ae:	68 78 81 02 c0       	push   0xc0028178
c000d8b3:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d8b9:	e8 2a 11 01 00       	call   c001e9e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8be:	83 c4 10             	add    esp,0x10
c000d8c1:	84 c0                	test   al,al
c000d8c3:	0f 85 9f 00 00 00    	jne    c000d968 <timerHandler(unsigned int)+0xde>
c000d8c9:	83 ec 0c             	sub    esp,0xc
c000d8cc:	68 78 81 02 c0       	push   0xc0028178
c000d8d1:	e8 2e 11 01 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 c6                	mov    esi,eax
c000d8db:	90                   	nop
c000d8dc:	83 ec 0c             	sub    esp,0xc
c000d8df:	68 78 81 02 c0       	push   0xc0028178
c000d8e4:	e8 1b 11 01 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8e9:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d8f0:	89 c3                	mov    ebx,eax
c000d8f2:	e8 15 11 01 00       	call   c001ea0c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d8f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d903:	77 23                	ja     c000d928 <timerHandler(unsigned int)+0x9e>
c000d905:	83 ec 0c             	sub    esp,0xc
c000d908:	53                   	push   ebx
c000d909:	e8 ca 7c 00 00       	call   c00155d8 <unblockTask(ThreadControlBlock*)>
c000d90e:	83 c4 10             	add    esp,0x10
c000d911:	39 de                	cmp    esi,ebx
c000d913:	75 27                	jne    c000d93c <timerHandler(unsigned int)+0xb2>
c000d915:	83 ec 0c             	sub    esp,0xc
c000d918:	68 78 81 02 c0       	push   0xc0028178
c000d91d:	e8 e2 10 01 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d922:	89 c6                	mov    esi,eax
c000d924:	eb 12                	jmp    c000d938 <timerHandler(unsigned int)+0xae>
c000d926:	66 90                	xchg   ax,ax
c000d928:	52                   	push   edx
c000d929:	52                   	push   edx
c000d92a:	53                   	push   ebx
c000d92b:	68 78 81 02 c0       	push   0xc0028178
c000d930:	e8 83 11 01 00       	call   c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d935:	8d 76 00             	lea    esi,[esi+0x0]
c000d938:	83 c4 10             	add    esp,0x10
c000d93b:	90                   	nop
c000d93c:	83 ec 0c             	sub    esp,0xc
c000d93f:	68 78 81 02 c0       	push   0xc0028178
c000d944:	e8 9f 10 01 00       	call   c001e9e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d949:	83 c4 10             	add    esp,0x10
c000d94c:	84 c0                	test   al,al
c000d94e:	75 18                	jne    c000d968 <timerHandler(unsigned int)+0xde>
c000d950:	83 ec 0c             	sub    esp,0xc
c000d953:	68 78 81 02 c0       	push   0xc0028178
c000d958:	e8 a7 10 01 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d95d:	83 c4 10             	add    esp,0x10
c000d960:	39 f0                	cmp    eax,esi
c000d962:	0f 85 74 ff ff ff    	jne    c000d8dc <timerHandler(unsigned int)+0x52>
c000d968:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d96d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d971:	74 41                	je     c000d9b4 <timerHandler(unsigned int)+0x12a>
c000d973:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d97a:	74 38                	je     c000d9b4 <timerHandler(unsigned int)+0x12a>
c000d97c:	fa                   	cli    
c000d97d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d983:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d988:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d98e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d991:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d997:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d99a:	72 08                	jb     c000d9a4 <timerHandler(unsigned int)+0x11a>
c000d99c:	e8 af 77 00 00       	call   c0015150 <schedule()>
c000d9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000d9a4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9a9:	48                   	dec    eax
c000d9aa:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9af:	75 03                	jne    c000d9b4 <timerHandler(unsigned int)+0x12a>
c000d9b1:	fb                   	sti    
c000d9b2:	66 90                	xchg   ax,ax
c000d9b4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d9b9:	48                   	dec    eax
c000d9ba:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d9bf:	75 1b                	jne    c000d9dc <timerHandler(unsigned int)+0x152>
c000d9c1:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d9c8:	74 12                	je     c000d9dc <timerHandler(unsigned int)+0x152>
c000d9ca:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d9d4:	e8 77 77 00 00       	call   c0015150 <schedule()>
c000d9d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d9dc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d9e1:	48                   	dec    eax
c000d9e2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d9e7:	75 03                	jne    c000d9ec <timerHandler(unsigned int)+0x162>
c000d9e9:	fb                   	sti    
c000d9ea:	66 90                	xchg   ax,ax
c000d9ec:	58                   	pop    eax
c000d9ed:	5b                   	pop    ebx
c000d9ee:	5e                   	pop    esi
c000d9ef:	c3                   	ret    

c000d9f0 <VCache::VCache(PhysicalDisk*)>:
c000d9f0:	53                   	push   ebx
c000d9f1:	83 ec 28             	sub    esp,0x28
c000d9f4:	ba f0 04 02 c0       	mov    edx,0xc00204f0
c000d9f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d9fd:	89 10                	mov    DWORD PTR [eax],edx
c000d9ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da03:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000da0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da0e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da19:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000da20:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000da27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da2b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000da32:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000da39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da3d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000da44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da48:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000da4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da50:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000da57:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000da5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da62:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da6a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000da6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da72:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000da7a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da81:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c000da89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da8d:	89 04 24             	mov    DWORD PTR [esp],eax
c000da90:	e8 67 a0 ff ff       	call   c0007afc <malloc>
c000da95:	89 c3                	mov    ebx,eax
c000da97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da9a:	e8 3d 74 00 00       	call   c0014edc <Mutex::Mutex()>
c000da9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000daa3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000daa6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000daaa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000daae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dab1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dab5:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000dabc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dac0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000dac6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000daca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dacd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dad1:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000dad7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dadd:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000dae1:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000dae4:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000dae7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000daeb:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000daef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000daf3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000daf9:	05 00 02 00 00       	add    eax,0x200
c000dafe:	c1 e0 03             	shl    eax,0x3
c000db01:	89 04 24             	mov    DWORD PTR [esp],eax
c000db04:	e8 f3 9f ff ff       	call   c0007afc <malloc>
c000db09:	89 c2                	mov    edx,eax
c000db0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db0f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000db12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db16:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000db1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db21:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000db25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db29:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000db2f:	89 d0                	mov    eax,edx
c000db31:	c1 e0 02             	shl    eax,0x2
c000db34:	01 d0                	add    eax,edx
c000db36:	c1 e0 04             	shl    eax,0x4
c000db39:	89 04 24             	mov    DWORD PTR [esp],eax
c000db3c:	e8 bb 9f ff ff       	call   c0007afc <malloc>
c000db41:	89 c2                	mov    edx,eax
c000db43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db47:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000db4a:	90                   	nop
c000db4b:	83 c4 28             	add    esp,0x28
c000db4e:	5b                   	pop    ebx
c000db4f:	c3                   	ret    

c000db50 <VCache::invalidateReadBuffer()>:
c000db50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db54:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000db5a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000db5e:	c3                   	ret    
c000db5f:	90                   	nop

c000db60 <VCache::writeWriteBuffer()>:
c000db60:	53                   	push   ebx
c000db61:	83 ec 08             	sub    esp,0x8
c000db64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db68:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db6c:	74 1e                	je     c000db8c <VCache::writeWriteBuffer()+0x2c>
c000db6e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db71:	83 ec 0c             	sub    esp,0xc
c000db74:	8b 10                	mov    edx,DWORD PTR [eax]
c000db76:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db79:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db7c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db7f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db82:	50                   	push   eax
c000db83:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db86:	83 c4 20             	add    esp,0x20
c000db89:	8d 76 00             	lea    esi,[esi+0x0]
c000db8c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db93:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db9a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db9e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000dba5:	83 c4 08             	add    esp,0x8
c000dba8:	5b                   	pop    ebx
c000dba9:	c3                   	ret    
c000dbaa:	66 90                	xchg   ax,ax

c000dbac <VCache::~VCache()>:
c000dbac:	83 ec 1c             	sub    esp,0x1c
c000dbaf:	ba f0 04 02 c0       	mov    edx,0xc00204f0
c000dbb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb8:	89 10                	mov    DWORD PTR [eax],edx
c000dbba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbe:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
c000dbc2:	84 c0                	test   al,al
c000dbc4:	74 0e                	je     c000dbd4 <VCache::~VCache()+0x28>
c000dbc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbca:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbcd:	e8 8e ff ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c000dbd2:	66 90                	xchg   ax,ax
c000dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dbdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbde:	e8 2c 9f ff ff       	call   c0007b0f <free>
c000dbe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000dbea:	89 04 24             	mov    DWORD PTR [esp],eax
c000dbed:	e8 1d 9f ff ff       	call   c0007b0f <free>
c000dbf2:	90                   	nop
c000dbf3:	83 c4 1c             	add    esp,0x1c
c000dbf6:	c3                   	ret    
c000dbf7:	90                   	nop

c000dbf8 <VCache::~VCache()>:
c000dbf8:	83 ec 1c             	sub    esp,0x1c
c000dbfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbff:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc02:	e8 a5 ff ff ff       	call   c000dbac <VCache::~VCache()>
c000dc07:	c7 44 24 04 44 00 00 00 	mov    DWORD PTR [esp+0x4],0x44
c000dc0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc13:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc16:	e8 41 cd ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000dc1b:	83 c4 1c             	add    esp,0x1c
c000dc1e:	c3                   	ret    
c000dc1f:	90                   	nop

c000dc20 <VCache::write(unsigned long long, int, void*)>:
c000dc20:	55                   	push   ebp
c000dc21:	57                   	push   edi
c000dc22:	56                   	push   esi
c000dc23:	53                   	push   ebx
c000dc24:	83 ec 1c             	sub    esp,0x1c
c000dc27:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc2f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000dc33:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dc37:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dc3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc3f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc47:	74 07                	je     c000dc50 <VCache::write(unsigned long long, int, void*)+0x30>
c000dc49:	53                   	push   ebx
c000dc4a:	e8 01 ff ff ff       	call   c000db50 <VCache::invalidateReadBuffer()>
c000dc4f:	58                   	pop    eax
c000dc50:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dc54:	74 5a                	je     c000dcb0 <VCache::write(unsigned long long, int, void*)+0x90>
c000dc56:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000dc59:	89 e8                	mov    eax,ebp
c000dc5b:	99                   	cdq    
c000dc5c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc5f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc62:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c000dc66:	33 54 24 0c          	xor    edx,DWORD PTR [esp+0xc]
c000dc6a:	89 c1                	mov    ecx,eax
c000dc6c:	09 d1                	or     ecx,edx
c000dc6e:	75 34                	jne    c000dca4 <VCache::write(unsigned long long, int, void*)+0x84>
c000dc70:	83 ff 01             	cmp    edi,0x1
c000dc73:	75 2f                	jne    c000dca4 <VCache::write(unsigned long long, int, void*)+0x84>
c000dc75:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc78:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc7b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc81:	0f af e9             	imul   ebp,ecx
c000dc84:	01 ef                	add    edi,ebp
c000dc86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc88:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc8b:	40                   	inc    eax
c000dc8c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc8f:	83 f8 50             	cmp    eax,0x50
c000dc92:	75 6c                	jne    c000dd00 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dc94:	83 ec 0c             	sub    esp,0xc
c000dc97:	53                   	push   ebx
c000dc98:	e8 c3 fe ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c000dc9d:	83 c4 10             	add    esp,0x10
c000dca0:	eb 5e                	jmp    c000dd00 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dca2:	66 90                	xchg   ax,ax
c000dca4:	83 ec 0c             	sub    esp,0xc
c000dca7:	53                   	push   ebx
c000dca8:	e8 b3 fe ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c000dcad:	83 c4 10             	add    esp,0x10
c000dcb0:	83 ff 4f             	cmp    edi,0x4f
c000dcb3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dcb6:	7f 20                	jg     c000dcd8 <VCache::write(unsigned long long, int, void*)+0xb8>
c000dcb8:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dcbb:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [esp+0x8]
c000dcc1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dcc4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dcc8:	66 0f d6 43 1c       	movq   QWORD PTR [ebx+0x1c],xmm0
c000dccd:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dcd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcd5:	eb 29                	jmp    c000dd00 <VCache::write(unsigned long long, int, void*)+0xe0>
c000dcd7:	90                   	nop
c000dcd8:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcda:	f3 0f 7e 4c 24 08    	movq   xmm1,QWORD PTR [esp+0x8]
c000dce0:	66 0f d6 4c 24 34    	movq   QWORD PTR [esp+0x34],xmm1
c000dce6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dcea:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dcee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcf2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dcf5:	83 c4 1c             	add    esp,0x1c
c000dcf8:	5b                   	pop    ebx
c000dcf9:	5e                   	pop    esi
c000dcfa:	5f                   	pop    edi
c000dcfb:	5d                   	pop    ebp
c000dcfc:	ff e0                	jmp    eax
c000dcfe:	66 90                	xchg   ax,ax
c000dd00:	83 c4 1c             	add    esp,0x1c
c000dd03:	31 c0                	xor    eax,eax
c000dd05:	5b                   	pop    ebx
c000dd06:	5e                   	pop    esi
c000dd07:	5f                   	pop    edi
c000dd08:	5d                   	pop    ebp
c000dd09:	c3                   	ret    

c000dd0a <VCache::read(unsigned long long, int, void*)>:
c000dd0a:	55                   	push   ebp
c000dd0b:	57                   	push   edi
c000dd0c:	56                   	push   esi
c000dd0d:	53                   	push   ebx
c000dd0e:	83 ec 1c             	sub    esp,0x1c
c000dd11:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd19:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dd1d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dd21:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dd25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd29:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dd2d:	74 0d                	je     c000dd3c <VCache::read(unsigned long long, int, void*)+0x32>
c000dd2f:	83 ec 0c             	sub    esp,0xc
c000dd32:	53                   	push   ebx
c000dd33:	e8 28 fe ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c000dd38:	83 c4 10             	add    esp,0x10
c000dd3b:	90                   	nop
c000dd3c:	83 fe 01             	cmp    esi,0x1
c000dd3f:	75 77                	jne    c000ddb8 <VCache::read(unsigned long long, int, void*)+0xae>
c000dd41:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000dd44:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000dd4b:	75 6b                	jne    c000ddb8 <VCache::read(unsigned long long, int, void*)+0xae>
c000dd4d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000dd50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd54:	f7 d8                	neg    eax
c000dd56:	99                   	cdq    
c000dd57:	21 f8                	and    eax,edi
c000dd59:	21 ea                	and    edx,ebp
c000dd5b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dd5f:	74 2f                	je     c000dd90 <VCache::read(unsigned long long, int, void*)+0x86>
c000dd61:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000dd64:	75 2a                	jne    c000dd90 <VCache::read(unsigned long long, int, void*)+0x86>
c000dd66:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000dd69:	75 25                	jne    c000dd90 <VCache::read(unsigned long long, int, void*)+0x86>
c000dd6b:	90                   	nop
c000dd6c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dd6f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd75:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000dd78:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd7b:	21 fe                	and    esi,edi
c000dd7d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000dd81:	0f af f1             	imul   esi,ecx
c000dd84:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000dd87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd89:	31 c0                	xor    eax,eax
c000dd8b:	eb 5f                	jmp    c000ddec <VCache::read(unsigned long long, int, void*)+0xe2>
c000dd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd90:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000dd94:	83 ec 0c             	sub    esp,0xc
c000dd97:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000dd9a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dd9d:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dd9f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000dda2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dda6:	52                   	push   edx
c000dda7:	50                   	push   eax
c000dda8:	51                   	push   ecx
c000dda9:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000ddac:	83 c4 20             	add    esp,0x20
c000ddaf:	85 c0                	test   eax,eax
c000ddb1:	75 39                	jne    c000ddec <VCache::read(unsigned long long, int, void*)+0xe2>
c000ddb3:	eb b7                	jmp    c000dd6c <VCache::read(unsigned long long, int, void*)+0x62>
c000ddb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb8:	83 ec 0c             	sub    esp,0xc
c000ddbb:	53                   	push   ebx
c000ddbc:	e8 8f fd ff ff       	call   c000db50 <VCache::invalidateReadBuffer()>
c000ddc1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ddc4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ddc8:	8b 10                	mov    edx,DWORD PTR [eax]
c000ddca:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000ddce:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000ddd2:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000ddd6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddda:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddde:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000dde1:	83 c4 2c             	add    esp,0x2c
c000dde4:	5b                   	pop    ebx
c000dde5:	5e                   	pop    esi
c000dde6:	5f                   	pop    edi
c000dde7:	5d                   	pop    ebp
c000dde8:	ff e0                	jmp    eax
c000ddea:	66 90                	xchg   ax,ax
c000ddec:	83 c4 1c             	add    esp,0x1c
c000ddef:	5b                   	pop    ebx
c000ddf0:	5e                   	pop    esi
c000ddf1:	5f                   	pop    edi
c000ddf2:	5d                   	pop    ebp
c000ddf3:	c3                   	ret    

c000ddf4 <Video::putrect(int, int, int, int, unsigned int)>:
c000ddf4:	55                   	push   ebp
c000ddf5:	57                   	push   edi
c000ddf6:	56                   	push   esi
c000ddf7:	53                   	push   ebx
c000ddf8:	83 ec 1c             	sub    esp,0x1c
c000ddfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de03:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000de07:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000de0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de13:	01 df                	add    edi,ebx
c000de15:	39 fb                	cmp    ebx,edi
c000de17:	7d 1f                	jge    c000de38 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000de19:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de1d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000de21:	7d 12                	jge    c000de35 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000de23:	8b 16                	mov    edx,DWORD PTR [esi]
c000de25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000de29:	53                   	push   ebx
c000de2a:	55                   	push   ebp
c000de2b:	45                   	inc    ebp
c000de2c:	56                   	push   esi
c000de2d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de30:	83 c4 10             	add    esp,0x10
c000de33:	eb e8                	jmp    c000de1d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de35:	43                   	inc    ebx
c000de36:	eb dd                	jmp    c000de15 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de38:	83 c4 1c             	add    esp,0x1c
c000de3b:	5b                   	pop    ebx
c000de3c:	5e                   	pop    esi
c000de3d:	5f                   	pop    edi
c000de3e:	5d                   	pop    ebp
c000de3f:	c3                   	ret    

c000de40 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de40:	55                   	push   ebp
c000de41:	57                   	push   edi
c000de42:	31 ff                	xor    edi,edi
c000de44:	56                   	push   esi
c000de45:	53                   	push   ebx
c000de46:	83 ec 1c             	sub    esp,0x1c
c000de49:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de4d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de51:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de58:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de61:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de65:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de69:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de6c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de70:	01 f9                	add    ecx,edi
c000de72:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de76:	7d 2f                	jge    c000dea7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de78:	31 f6                	xor    esi,esi
c000de7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de7e:	01 f2                	add    edx,esi
c000de80:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de84:	7d 1a                	jge    c000dea0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de86:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de89:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de8c:	46                   	inc    esi
c000de8d:	51                   	push   ecx
c000de8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de92:	52                   	push   edx
c000de93:	55                   	push   ebp
c000de94:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de97:	83 c4 10             	add    esp,0x10
c000de9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de9e:	eb da                	jmp    c000de7a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000dea0:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000dea4:	47                   	inc    edi
c000dea5:	eb c5                	jmp    c000de6c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000dea7:	83 c4 1c             	add    esp,0x1c
c000deaa:	5b                   	pop    ebx
c000deab:	5e                   	pop    esi
c000deac:	5f                   	pop    edi
c000dead:	5d                   	pop    ebp
c000deae:	c3                   	ret    
c000deaf:	90                   	nop

c000deb0 <Video::blit(unsigned int*, int, int, int, int)>:
c000deb0:	55                   	push   ebp
c000deb1:	ba 00 00 00 00       	mov    edx,0x0
c000deb6:	57                   	push   edi
c000deb7:	56                   	push   esi
c000deb8:	53                   	push   ebx
c000deb9:	83 ec 1c             	sub    esp,0x1c
c000debc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dec0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dec4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dec8:	85 c0                	test   eax,eax
c000deca:	0f 49 d0             	cmovns edx,eax
c000decd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ded4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ded8:	89 eb                	mov    ebx,ebp
c000deda:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000dede:	01 ea                	add    edx,ebp
c000dee0:	39 da                	cmp    edx,ebx
c000dee2:	7e 54                	jle    c000df38 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000dee4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000deea:	7c 4c                	jl     c000df38 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000deec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000def0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000def4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000def8:	01 c1                	add    ecx,eax
c000defa:	39 f9                	cmp    ecx,edi
c000defc:	7e 2f                	jle    c000df2d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000defe:	83 c2 04             	add    edx,0x4
c000df01:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df07:	7c 21                	jl     c000df2a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000df09:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df0d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000df0f:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000df12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000df16:	55                   	push   ebp
c000df17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000df1b:	56                   	push   esi
c000df1c:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df2a:	47                   	inc    edi
c000df2b:	eb c7                	jmp    c000def4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000df2d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000df31:	43                   	inc    ebx
c000df32:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000df36:	eb a2                	jmp    c000deda <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000df38:	83 c4 1c             	add    esp,0x1c
c000df3b:	5b                   	pop    ebx
c000df3c:	5e                   	pop    esi
c000df3d:	5f                   	pop    edi
c000df3e:	5d                   	pop    ebp
c000df3f:	c3                   	ret    

c000df40 <Video::clearScreen(unsigned int)>:
c000df40:	57                   	push   edi
c000df41:	56                   	push   esi
c000df42:	53                   	push   ebx
c000df43:	31 db                	xor    ebx,ebx
c000df45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df49:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df4f:	7e 1f                	jle    c000df70 <Video::clearScreen(unsigned int)+0x30>
c000df51:	31 ff                	xor    edi,edi
c000df53:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df59:	7e 12                	jle    c000df6d <Video::clearScreen(unsigned int)+0x2d>
c000df5b:	8b 06                	mov    eax,DWORD PTR [esi]
c000df5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df61:	53                   	push   ebx
c000df62:	57                   	push   edi
c000df63:	47                   	inc    edi
c000df64:	56                   	push   esi
c000df65:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df68:	83 c4 10             	add    esp,0x10
c000df6b:	eb e6                	jmp    c000df53 <Video::clearScreen(unsigned int)+0x13>
c000df6d:	43                   	inc    ebx
c000df6e:	eb d9                	jmp    c000df49 <Video::clearScreen(unsigned int)+0x9>
c000df70:	5b                   	pop    ebx
c000df71:	5e                   	pop    esi
c000df72:	5f                   	pop    edi
c000df73:	c3                   	ret    

c000df74 <Video::putpixel(int, int, unsigned int)>:
c000df74:	c7 44 24 04 f8 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc00204f8
c000df7c:	e9 a4 28 00 00       	jmp    c0010825 <KePanic(char const*)>
c000df81:	90                   	nop

c000df82 <Video::readPixelApprox(int, int)>:
c000df82:	83 ec 18             	sub    esp,0x18
c000df85:	68 19 05 02 c0       	push   0xc0020519
c000df8a:	e8 96 28 00 00       	call   c0010825 <KePanic(char const*)>
c000df8f:	31 c0                	xor    eax,eax
c000df91:	83 c4 1c             	add    esp,0x1c
c000df94:	c3                   	ret    
c000df95:	90                   	nop

c000df96 <Video::Video(char const*)>:
c000df96:	83 ec 1c             	sub    esp,0x1c
c000df99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df9d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000dfa1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfa5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfa8:	e8 cb e0 ff ff       	call   c000c078 <Device::Device(char const*)>
c000dfad:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000dfb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfb6:	89 10                	mov    DWORD PTR [eax],edx
c000dfb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfbc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000dfc6:	90                   	nop
c000dfc7:	83 c4 1c             	add    esp,0x1c
c000dfca:	c3                   	ret    
c000dfcb:	90                   	nop

c000dfcc <Video::~Video()>:
c000dfcc:	83 ec 1c             	sub    esp,0x1c
c000dfcf:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000dfd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfd8:	89 10                	mov    DWORD PTR [eax],edx
c000dfda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfde:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe1:	e8 fe dd ff ff       	call   c000bde4 <Device::~Device()>
c000dfe6:	90                   	nop
c000dfe7:	83 c4 1c             	add    esp,0x1c
c000dfea:	c3                   	ret    
c000dfeb:	90                   	nop

c000dfec <Video::~Video()>:
c000dfec:	83 ec 1c             	sub    esp,0x1c
c000dfef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dff3:	89 04 24             	mov    DWORD PTR [esp],eax
c000dff6:	e8 d1 ff ff ff       	call   c000dfcc <Video::~Video()>
c000dffb:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c000e003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e007:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00a:	e8 4d c9 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c000e00f:	83 c4 1c             	add    esp,0x1c
c000e012:	c3                   	ret    
c000e013:	90                   	nop

c000e014 <Video::isMonochrome()>:
c000e014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e018:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e01e:	c3                   	ret    
c000e01f:	90                   	nop

c000e020 <Video::getWidth()>:
c000e020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e024:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e02a:	c3                   	ret    
c000e02b:	90                   	nop

c000e02c <Video::getHeight()>:
c000e02c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e030:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e036:	c3                   	ret    
c000e037:	90                   	nop

c000e038 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e038:	55                   	push   ebp
c000e039:	57                   	push   edi
c000e03a:	56                   	push   esi
c000e03b:	53                   	push   ebx
c000e03c:	83 ec 2c             	sub    esp,0x2c
c000e03f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e043:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e047:	83 f8 01             	cmp    eax,0x1
c000e04a:	19 c9                	sbb    ecx,ecx
c000e04c:	31 db                	xor    ebx,ebx
c000e04e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e052:	89 ce                	mov    esi,ecx
c000e054:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e05c:	f7 d6                	not    esi
c000e05e:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e064:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e068:	01 d8                	add    eax,ebx
c000e06a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e06e:	57                   	push   edi
c000e06f:	e8 b8 ff ff ff       	call   c000e02c <Video::getHeight()>
c000e074:	59                   	pop    ecx
c000e075:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e079:	7e 70                	jle    c000e0eb <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e07b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e07f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e083:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e086:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e08a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e08e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e095:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e099:	89 e8                	mov    eax,ebp
c000e09b:	83 c0 20             	add    eax,0x20
c000e09e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0a2:	57                   	push   edi
c000e0a3:	e8 78 ff ff ff       	call   c000e020 <Video::getWidth()>
c000e0a8:	5a                   	pop    edx
c000e0a9:	39 c5                	cmp    ebp,eax
c000e0ab:	7d 34                	jge    c000e0e1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e0ad:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e0b2:	74 05                	je     c000e0b9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e0b4:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0b6:	56                   	push   esi
c000e0b7:	eb 0d                	jmp    c000e0c6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e0b9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e0be:	74 12                	je     c000e0d2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e0c0:	8b 07                	mov    eax,DWORD PTR [edi]
c000e0c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e0c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e0ca:	55                   	push   ebp
c000e0cb:	57                   	push   edi
c000e0cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e0cf:	83 c4 10             	add    esp,0x10
c000e0d2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e0d6:	45                   	inc    ebp
c000e0d7:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e0db:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e0df:	75 c1                	jne    c000e0a2 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0e1:	43                   	inc    ebx
c000e0e2:	83 fb 20             	cmp    ebx,0x20
c000e0e5:	0f 85 79 ff ff ff    	jne    c000e064 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0eb:	83 c4 2c             	add    esp,0x2c
c000e0ee:	5b                   	pop    ebx
c000e0ef:	5e                   	pop    esi
c000e0f0:	5f                   	pop    edi
c000e0f1:	5d                   	pop    ebp
c000e0f2:	c3                   	ret    
c000e0f3:	90                   	nop

c000e0f4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0f4:	55                   	push   ebp
c000e0f5:	57                   	push   edi
c000e0f6:	56                   	push   esi
c000e0f7:	53                   	push   ebx
c000e0f8:	83 ec 28             	sub    esp,0x28
c000e0fb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0ff:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e103:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e107:	0f b6 6b 0f          	movzx  ebp,BYTE PTR [ebx+0xf]
c000e10b:	c1 e6 08             	shl    esi,0x8
c000e10e:	01 c6                	add    esi,eax
c000e110:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e114:	c1 e5 08             	shl    ebp,0x8
c000e117:	01 c5                	add    ebp,eax
c000e119:	89 f0                	mov    eax,esi
c000e11b:	0f af c5             	imul   eax,ebp
c000e11e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e125:	50                   	push   eax
c000e126:	e8 d1 99 ff ff       	call   c0007afc <malloc>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	85 c0                	test   eax,eax
c000e130:	89 c7                	mov    edi,eax
c000e132:	75 10                	jne    c000e144 <Video::tgaParse(unsigned char*, int, int*, int*)+0x50>
c000e134:	83 ec 0c             	sub    esp,0xc
c000e137:	68 44 05 02 c0       	push   0xc0020544
c000e13c:	e8 e4 26 00 00       	call   c0010825 <KePanic(char const*)>
c000e141:	83 c4 10             	add    esp,0x10
c000e144:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000e147:	ba 12 00 00 00       	mov    edx,0x12
c000e14c:	84 c0                	test   al,al
c000e14e:	74 11                	je     c000e161 <Video::tgaParse(unsigned char*, int, int*, int*)+0x6d>
c000e150:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e154:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e158:	c1 fa 03             	sar    edx,0x3
c000e15b:	0f af d1             	imul   edx,ecx
c000e15e:	83 c2 12             	add    edx,0x12
c000e161:	85 f6                	test   esi,esi
c000e163:	74 04                	je     c000e169 <Video::tgaParse(unsigned char*, int, int*, int*)+0x75>
c000e165:	85 ed                	test   ebp,ebp
c000e167:	75 12                	jne    c000e17b <Video::tgaParse(unsigned char*, int, int*, int*)+0x87>
c000e169:	83 ec 0c             	sub    esp,0xc
c000e16c:	68 54 05 02 c0       	push   0xc0020554
c000e171:	e8 00 c9 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000e176:	e9 c1 00 00 00       	jmp    c000e23c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e17b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e17f:	80 f9 02             	cmp    cl,0x2
c000e182:	0f 85 9f 00 00 00    	jne    c000e227 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e188:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e18d:	75 0f                	jne    c000e19e <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e18f:	84 c0                	test   al,al
c000e191:	75 0b                	jne    c000e19e <Video::tgaParse(unsigned char*, int, int*, int*)+0xaa>
c000e193:	8a 4b 10             	mov    cl,BYTE PTR [ebx+0x10]
c000e196:	80 e9 18             	sub    cl,0x18
c000e199:	f6 c1 f7             	test   cl,0xf7
c000e19c:	74 0d                	je     c000e1ab <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000e19e:	83 ec 0c             	sub    esp,0xc
c000e1a1:	68 69 05 02 c0       	push   0xc0020569
c000e1a6:	e9 84 00 00 00       	jmp    c000e22f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e1ab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e1b3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e1bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1c2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e1c6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1ce:	75 0c                	jne    c000e1dc <Video::tgaParse(unsigned char*, int, int*, int*)+0xe8>
c000e1d0:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e1d5:	c1 e0 18             	shl    eax,0x18
c000e1d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1dc:	0f b6 44 13 02       	movzx  eax,BYTE PTR [ebx+edx*1+0x2]
c000e1e1:	ff 04 24             	inc    DWORD PTR [esp]
c000e1e4:	c1 e0 10             	shl    eax,0x10
c000e1e7:	89 c1                	mov    ecx,eax
c000e1e9:	0f b6 44 13 01       	movzx  eax,BYTE PTR [ebx+edx*1+0x1]
c000e1ee:	c1 e0 08             	shl    eax,0x8
c000e1f1:	09 c8                	or     eax,ecx
c000e1f3:	0f b6 0c 13          	movzx  ecx,BYTE PTR [ebx+edx*1]
c000e1f7:	09 c8                	or     eax,ecx
c000e1f9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000e1fc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e200:	89 44 8f fc          	mov    DWORD PTR [edi+ecx*4-0x4],eax
c000e204:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e208:	c1 f8 03             	sar    eax,0x3
c000e20b:	01 c2                	add    edx,eax
c000e20d:	89 c8                	mov    eax,ecx
c000e20f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e213:	39 c6                	cmp    esi,eax
c000e215:	7f ab                	jg     c000e1c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xce>
c000e217:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e21b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e21f:	7e 22                	jle    c000e243 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e221:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e225:	eb 94                	jmp    c000e1bb <Video::tgaParse(unsigned char*, int, int*, int*)+0xc7>
c000e227:	50                   	push   eax
c000e228:	50                   	push   eax
c000e229:	51                   	push   ecx
c000e22a:	68 77 05 02 c0       	push   0xc0020577
c000e22f:	e8 42 c8 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000e234:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e237:	e8 d3 98 ff ff       	call   c0007b0f <free>
c000e23c:	83 c4 10             	add    esp,0x10
c000e23f:	31 ff                	xor    edi,edi
c000e241:	eb 0c                	jmp    c000e24f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15b>
c000e243:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e247:	89 30                	mov    DWORD PTR [eax],esi
c000e249:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e24d:	89 28                	mov    DWORD PTR [eax],ebp
c000e24f:	83 c4 1c             	add    esp,0x1c
c000e252:	89 f8                	mov    eax,edi
c000e254:	5b                   	pop    ebx
c000e255:	5e                   	pop    esi
c000e256:	5f                   	pop    edi
c000e257:	5d                   	pop    ebp
c000e258:	c3                   	ret    
c000e259:	90                   	nop

c000e25a <Video::putTGA(int, int, unsigned char*, int)>:
c000e25a:	55                   	push   ebp
c000e25b:	57                   	push   edi
c000e25c:	56                   	push   esi
c000e25d:	53                   	push   ebx
c000e25e:	83 ec 28             	sub    esp,0x28
c000e261:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e265:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e269:	50                   	push   eax
c000e26a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e26e:	50                   	push   eax
c000e26f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e273:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e277:	57                   	push   edi
c000e278:	e8 77 fe ff ff       	call   c000e0f4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e27d:	83 c4 20             	add    esp,0x20
c000e280:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e284:	85 c0                	test   eax,eax
c000e286:	74 35                	je     c000e2bd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e288:	89 c6                	mov    esi,eax
c000e28a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e28e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e292:	39 d8                	cmp    eax,ebx
c000e294:	7e 27                	jle    c000e2bd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e296:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e29a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e29e:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000e2a2:	39 e9                	cmp    ecx,ebp
c000e2a4:	7e 14                	jle    c000e2ba <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e2a6:	83 c6 04             	add    esi,0x4
c000e2a9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e2ab:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000e2ae:	53                   	push   ebx
c000e2af:	55                   	push   ebp
c000e2b0:	45                   	inc    ebp
c000e2b1:	57                   	push   edi
c000e2b2:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e2b5:	83 c4 10             	add    esp,0x10
c000e2b8:	eb e0                	jmp    c000e29a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e2ba:	43                   	inc    ebx
c000e2bb:	eb cd                	jmp    c000e28a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e2bd:	83 c4 1c             	add    esp,0x1c
c000e2c0:	5b                   	pop    ebx
c000e2c1:	5e                   	pop    esi
c000e2c2:	5f                   	pop    edi
c000e2c3:	5d                   	pop    ebp
c000e2c4:	c3                   	ret    
c000e2c5:	66 90                	xchg   ax,ax
c000e2c7:	90                   	nop

c000e2c8 <ACPI::close(int, int, void*)>:
c000e2c8:	83 ec 2c             	sub    esp,0x2c
c000e2cb:	81 7c 24 38 0f 27 00 00 	cmp    DWORD PTR [esp+0x38],0x270f
c000e2d3:	74 0b                	je     c000e2e0 <ACPI::close(int, int, void*)+0x18>
c000e2d5:	b8 00 00 00 00       	mov    eax,0x0
c000e2da:	e9 95 00 00 00       	jmp    c000e374 <ACPI::close(int, int, void*)+0xac>
c000e2df:	90                   	nop
c000e2e0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000e2e5:	75 25                	jne    c000e30c <ACPI::close(int, int, void*)+0x44>
c000e2e7:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2ec:	85 c0                	test   eax,eax
c000e2ee:	74 08                	je     c000e2f8 <ACPI::close(int, int, void*)+0x30>
c000e2f0:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2f5:	ff d0                	call   eax
c000e2f7:	90                   	nop
c000e2f8:	c7 04 24 d8 05 02 c0 	mov    DWORD PTR [esp],0xc00205d8
c000e2ff:	e8 21 25 00 00       	call   c0010825 <KePanic(char const*)>
c000e304:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e309:	eb 69                	jmp    c000e374 <ACPI::close(int, int, void*)+0xac>
c000e30b:	90                   	nop
c000e30c:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000e311:	75 59                	jne    c000e36c <ACPI::close(int, int, void*)+0xa4>
c000e313:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e318:	85 c0                	test   eax,eax
c000e31a:	74 08                	je     c000e324 <ACPI::close(int, int, void*)+0x5c>
c000e31c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e321:	ff d0                	call   eax
c000e323:	90                   	nop
c000e324:	c6 44 24 1f 02       	mov    BYTE PTR [esp+0x1f],0x2
c000e329:	8d 76 00             	lea    esi,[esi+0x0]
c000e32c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000e331:	83 e0 02             	and    eax,0x2
c000e334:	74 1e                	je     c000e354 <ACPI::close(int, int, void*)+0x8c>
c000e336:	66 c7 44 24 1c 64 00 	mov    WORD PTR [esp+0x1c],0x64
c000e33d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e341:	89 c2                	mov    edx,eax
c000e343:	ec                   	in     al,dx
c000e344:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000e348:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000e34d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000e351:	eb d9                	jmp    c000e32c <ACPI::close(int, int, void*)+0x64>
c000e353:	90                   	nop
c000e354:	66 c7 44 24 18 64 00 	mov    WORD PTR [esp+0x18],0x64
c000e35b:	c6 44 24 17 fe       	mov    BYTE PTR [esp+0x17],0xfe
c000e360:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000e365:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e369:	ee                   	out    dx,al
c000e36a:	66 90                	xchg   ax,ax
c000e36c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e371:	8d 76 00             	lea    esi,[esi+0x0]
c000e374:	83 c4 2c             	add    esp,0x2c
c000e377:	c3                   	ret    

c000e378 <findRSDP()>:
c000e378:	83 ec 2c             	sub    esp,0x2c
c000e37b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e380:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e387:	24 04                	and    al,0x4
c000e389:	75 09                	jne    c000e394 <findRSDP()+0x1c>
c000e38b:	b8 00 00 00 00       	mov    eax,0x0
c000e390:	eb 7a                	jmp    c000e40c <findRSDP()+0x94>
c000e392:	66 90                	xchg   ax,ax
c000e394:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e399:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e39e:	7f 1c                	jg     c000e3bc <findRSDP()+0x44>
c000e3a0:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3a5:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e3ac:	80 e2 fb             	and    dl,0xfb
c000e3af:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3b5:	b8 00 00 00 00       	mov    eax,0x0
c000e3ba:	eb 50                	jmp    c000e40c <findRSDP()+0x94>
c000e3bc:	c7 44 24 1c 00 00 00 c2 	mov    DWORD PTR [esp+0x1c],0xc2000000
c000e3c4:	81 7c 24 1c fe ff 0f c2 	cmp    DWORD PTR [esp+0x1c],0xc20ffffe
c000e3cc:	77 36                	ja     c000e404 <findRSDP()+0x8c>
c000e3ce:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000e3d6:	c7 44 24 04 73 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020673
c000e3de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e3e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3e5:	e8 96 1f ff ff       	call   c0000380 <memcmp>
c000e3ea:	85 c0                	test   eax,eax
c000e3ec:	0f 94 c0             	sete   al
c000e3ef:	84 c0                	test   al,al
c000e3f1:	74 09                	je     c000e3fc <findRSDP()+0x84>
c000e3f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e3f7:	eb 13                	jmp    c000e40c <findRSDP()+0x94>
c000e3f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3fc:	83 44 24 1c 10       	add    DWORD PTR [esp+0x1c],0x10
c000e401:	eb c1                	jmp    c000e3c4 <findRSDP()+0x4c>
c000e403:	90                   	nop
c000e404:	b8 00 00 00 00       	mov    eax,0x0
c000e409:	8d 76 00             	lea    esi,[esi+0x0]
c000e40c:	83 c4 2c             	add    esp,0x2c
c000e40f:	c3                   	ret    

c000e410 <loadACPITables(unsigned char*)>:
c000e410:	57                   	push   edi
c000e411:	56                   	push   esi
c000e412:	53                   	push   ebx
c000e413:	83 c4 80             	add    esp,0xffffff80
c000e416:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e41b:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e422:	24 04                	and    al,0x4
c000e424:	0f 84 5e 02 00 00    	je     c000e688 <loadACPITables(unsigned char*)+0x278>
c000e42a:	0f b6 05 c0 76 02 c0 	movzx  eax,BYTE PTR ds:0xc00276c0
c000e431:	84 c0                	test   al,al
c000e433:	74 7f                	je     c000e4b4 <loadACPITables(unsigned char*)+0xa4>
c000e435:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e43c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000e440:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e444:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e447:	83 e8 24             	sub    eax,0x24
c000e44a:	c1 e8 03             	shr    eax,0x3
c000e44d:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e451:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000e459:	8d 76 00             	lea    esi,[esi+0x0]
c000e45c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e460:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
c000e464:	0f 8d be 00 00 00    	jge    c000e528 <loadACPITables(unsigned char*)+0x118>
c000e46a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e471:	83 c0 24             	add    eax,0x24
c000e474:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000e478:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000e47c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e480:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000e484:	c1 e0 03             	shl    eax,0x3
c000e487:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c000e48b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e48f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e492:	8b 00                	mov    eax,DWORD PTR [eax]
c000e494:	89 c1                	mov    ecx,eax
c000e496:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e49b:	8d 50 01             	lea    edx,[eax+0x1]
c000e49e:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4a4:	89 ca                	mov    edx,ecx
c000e4a6:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4ad:	ff 44 24 7c          	inc    DWORD PTR [esp+0x7c]
c000e4b1:	eb a9                	jmp    c000e45c <loadACPITables(unsigned char*)+0x4c>
c000e4b3:	90                   	nop
c000e4b4:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e4bb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e4bf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e4c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4c6:	83 e8 24             	sub    eax,0x24
c000e4c9:	c1 e8 02             	shr    eax,0x2
c000e4cc:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e4d0:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000e4d8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e4dc:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
c000e4e0:	7d 46                	jge    c000e528 <loadACPITables(unsigned char*)+0x118>
c000e4e2:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c000e4e9:	83 c0 24             	add    eax,0x24
c000e4ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e4f0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4f4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000e4f8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000e4fc:	c1 e0 02             	shl    eax,0x2
c000e4ff:	01 44 24 54          	add    DWORD PTR [esp+0x54],eax
c000e503:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e507:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e509:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e50e:	8d 50 01             	lea    edx,[eax+0x1]
c000e511:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e517:	89 ca                	mov    edx,ecx
c000e519:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e520:	ff 44 24 78          	inc    DWORD PTR [esp+0x78]
c000e524:	eb b2                	jmp    c000e4d8 <loadACPITables(unsigned char*)+0xc8>
c000e526:	66 90                	xchg   ax,ax
c000e528:	c7 44 24 74 00 00 00 00 	mov    DWORD PTR [esp+0x74],0x0
c000e530:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e535:	39 44 24 74          	cmp    DWORD PTR [esp+0x74],eax
c000e539:	0f 8d 4d 01 00 00    	jge    c000e68c <loadACPITables(unsigned char*)+0x27c>
c000e53f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e543:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e54a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e54e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e552:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e556:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e55a:	25 ff 0f 00 00       	and    eax,0xfff
c000e55f:	89 c6                	mov    esi,eax
c000e561:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e567:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e56e:	e8 ad b0 ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000e573:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e577:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e57d:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e585:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000e58d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e591:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e595:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e598:	e8 e5 ba ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e59d:	09 f0                	or     eax,esi
c000e59f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e5a3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e5a7:	c1 e0 03             	shl    eax,0x3
c000e5aa:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e5af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e5b3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e5b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e5bb:	c7 44 24 34 04 00 00 00 	mov    DWORD PTR [esp+0x34],0x4
c000e5c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e5cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e5d3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e5d7:	89 c6                	mov    esi,eax
c000e5d9:	89 d7                	mov    edi,edx
c000e5db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5dd:	89 c8                	mov    eax,ecx
c000e5df:	89 fa                	mov    edx,edi
c000e5e1:	89 f3                	mov    ebx,esi
c000e5e3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e5e7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e5eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e5f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5f6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e5fa:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e5fe:	05 00 10 00 00       	add    eax,0x1000
c000e603:	c1 e8 0c             	shr    eax,0xc
c000e606:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e60a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e60e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e612:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e616:	25 ff 0f 00 00       	and    eax,0xfff
c000e61b:	89 c6                	mov    esi,eax
c000e61d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e623:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e627:	89 04 24             	mov    DWORD PTR [esp],eax
c000e62a:	e8 f1 af ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000e62f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000e633:	89 d1                	mov    ecx,edx
c000e635:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
c000e63b:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e643:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e647:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e64b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e64f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000e653:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e656:	e8 27 ba ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e65b:	09 f0                	or     eax,esi
c000e65d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e661:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e665:	89 04 24             	mov    DWORD PTR [esp],eax
c000e668:	e8 cc b2 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c000e66d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000e671:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c000e675:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e67c:	ff 44 24 74          	inc    DWORD PTR [esp+0x74]
c000e680:	e9 ab fe ff ff       	jmp    c000e530 <loadACPITables(unsigned char*)+0x120>
c000e685:	8d 76 00             	lea    esi,[esi+0x0]
c000e688:	90                   	nop
c000e689:	8d 76 00             	lea    esi,[esi+0x0]
c000e68c:	83 ec 80             	sub    esp,0xffffff80
c000e68f:	5b                   	pop    ebx
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	c3                   	ret    
c000e693:	90                   	nop

c000e694 <findRSDT(unsigned char*)>:
c000e694:	57                   	push   edi
c000e695:	56                   	push   esi
c000e696:	53                   	push   ebx
c000e697:	83 ec 70             	sub    esp,0x70
c000e69a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e69f:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e6a6:	24 04                	and    al,0x4
c000e6a8:	75 0a                	jne    c000e6b4 <findRSDT(unsigned char*)+0x20>
c000e6aa:	b8 00 00 00 00       	mov    eax,0x0
c000e6af:	e9 44 01 00 00       	jmp    c000e7f8 <findRSDT(unsigned char*)+0x164>
c000e6b4:	8d 44 24 20          	lea    eax,[esp+0x20]
c000e6b8:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000e6bc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000e6c3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000e6c7:	c7 44 24 54 24 00 00 00 	mov    DWORD PTR [esp+0x54],0x24
c000e6cf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e6d3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e6d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e6db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000e6df:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
c000e6e3:	89 c6                	mov    esi,eax
c000e6e5:	89 d7                	mov    edi,edx
c000e6e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6e9:	89 c8                	mov    eax,ecx
c000e6eb:	89 fa                	mov    edx,edi
c000e6ed:	89 f3                	mov    ebx,esi
c000e6ef:	89 5c 24 4c          	mov    DWORD PTR [esp+0x4c],ebx
c000e6f3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000e6f7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6fb:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000e700:	88 44 24 6b          	mov    BYTE PTR [esp+0x6b],al
c000e704:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c000e70c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e710:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e714:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e71c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e720:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e724:	25 ff 0f 00 00       	and    eax,0xfff
c000e729:	89 c6                	mov    esi,eax
c000e72b:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e731:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e738:	e8 e3 ae ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000e73d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000e741:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e747:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e74f:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e75b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e75f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e762:	e8 1b b9 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e767:	09 f0                	or     eax,esi
c000e769:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000e76d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e771:	25 ff 0f 00 00       	and    eax,0xfff
c000e776:	89 c6                	mov    esi,eax
c000e778:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e77e:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c000e785:	e8 96 ae ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c000e78a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000e78e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e794:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c000e79c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000e7a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7a8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e7ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7af:	e8 ce b8 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e7b4:	09 f0                	or     eax,esi
c000e7b6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000e7ba:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000e7bf:	75 13                	jne    c000e7d4 <findRSDT(unsigned char*)+0x140>
c000e7c1:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e7c8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e7cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e7d0:	eb 22                	jmp    c000e7f4 <findRSDT(unsigned char*)+0x160>
c000e7d2:	66 90                	xchg   ax,ax
c000e7d4:	80 7c 24 6b 02       	cmp    BYTE PTR [esp+0x6b],0x2
c000e7d9:	75 11                	jne    c000e7ec <findRSDT(unsigned char*)+0x158>
c000e7db:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e7e2:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000e7e6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000e7ea:	eb 08                	jmp    c000e7f4 <findRSDT(unsigned char*)+0x160>
c000e7ec:	b8 00 00 00 00       	mov    eax,0x0
c000e7f1:	eb 05                	jmp    c000e7f8 <findRSDT(unsigned char*)+0x164>
c000e7f3:	90                   	nop
c000e7f4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000e7f8:	83 c4 70             	add    esp,0x70
c000e7fb:	5b                   	pop    ebx
c000e7fc:	5e                   	pop    esi
c000e7fd:	5f                   	pop    edi
c000e7fe:	c3                   	ret    
c000e7ff:	90                   	nop

c000e800 <findDataTable(unsigned char*, char*)>:
c000e800:	83 ec 2c             	sub    esp,0x2c
c000e803:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e808:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e80f:	24 04                	and    al,0x4
c000e811:	75 09                	jne    c000e81c <findDataTable(unsigned char*, char*)+0x1c>
c000e813:	b8 00 00 00 00       	mov    eax,0x0
c000e818:	eb 62                	jmp    c000e87c <findDataTable(unsigned char*, char*)+0x7c>
c000e81a:	66 90                	xchg   ax,ax
c000e81c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e824:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e829:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000e82d:	7d 45                	jge    c000e874 <findDataTable(unsigned char*, char*)+0x74>
c000e82f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e833:	c1 e0 03             	shl    eax,0x3
c000e836:	8d 90 c0 74 02 c0    	lea    edx,[eax-0x3ffd8b40]
c000e83c:	c7 44 24 08 04 00 00 00 	mov    DWORD PTR [esp+0x8],0x4
c000e844:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e848:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e84c:	89 14 24             	mov    DWORD PTR [esp],edx
c000e84f:	e8 2c 1b ff ff       	call   c0000380 <memcmp>
c000e854:	85 c0                	test   eax,eax
c000e856:	0f 94 c0             	sete   al
c000e859:	84 c0                	test   al,al
c000e85b:	74 0f                	je     c000e86c <findDataTable(unsigned char*, char*)+0x6c>
c000e85d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e861:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e868:	eb 12                	jmp    c000e87c <findDataTable(unsigned char*, char*)+0x7c>
c000e86a:	66 90                	xchg   ax,ax
c000e86c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e870:	eb b2                	jmp    c000e824 <findDataTable(unsigned char*, char*)+0x24>
c000e872:	66 90                	xchg   ax,ax
c000e874:	b8 00 00 00 00       	mov    eax,0x0
c000e879:	8d 76 00             	lea    esi,[esi+0x0]
c000e87c:	83 c4 2c             	add    esp,0x2c
c000e87f:	c3                   	ret    

c000e880 <scanMADT()>:
c000e880:	53                   	push   ebx
c000e881:	83 ec 48             	sub    esp,0x48
c000e884:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e889:	25 00 04 00 00       	and    eax,0x400
c000e88e:	74 18                	je     c000e8a8 <scanMADT()+0x28>
c000e890:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e895:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e89c:	80 e2 fb             	and    dl,0xfb
c000e89f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8a5:	8d 76 00             	lea    esi,[esi+0x0]
c000e8a8:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8ad:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000e8b4:	24 04                	and    al,0x4
c000e8b6:	0f 84 7c 04 00 00    	je     c000ed38 <scanMADT()+0x4b8>
c000e8bc:	e8 b7 fa ff ff       	call   c000e378 <findRSDP()>
c000e8c1:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e8c6:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8cb:	85 c0                	test   eax,eax
c000e8cd:	75 1d                	jne    c000e8ec <scanMADT()+0x6c>
c000e8cf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8d4:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e8db:	80 e2 fb             	and    dl,0xfb
c000e8de:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8e4:	e9 57 04 00 00       	jmp    c000ed40 <scanMADT()+0x4c0>
c000e8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e8ec:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e8f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8f4:	e8 9b fd ff ff       	call   c000e694 <findRSDT(unsigned char*)>
c000e8f9:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e8fe:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e903:	85 c0                	test   eax,eax
c000e905:	75 1d                	jne    c000e924 <scanMADT()+0xa4>
c000e907:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e90c:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e913:	80 e2 fb             	and    dl,0xfb
c000e916:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e91c:	e9 1f 04 00 00       	jmp    c000ed40 <scanMADT()+0x4c0>
c000e921:	8d 76 00             	lea    esi,[esi+0x0]
c000e924:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e929:	89 04 24             	mov    DWORD PTR [esp],eax
c000e92c:	e8 df fa ff ff       	call   c000e410 <loadACPITables(unsigned char*)>
c000e931:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e936:	c7 44 24 04 7c 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc002067c
c000e93e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e941:	e8 ba fe ff ff       	call   c000e800 <findDataTable(unsigned char*, char*)>
c000e946:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e94a:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000e94f:	75 1b                	jne    c000e96c <scanMADT()+0xec>
c000e951:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e956:	0f b6 90 6c 01 00 00 	movzx  edx,BYTE PTR [eax+0x16c]
c000e95d:	80 e2 fe             	and    dl,0xfe
c000e960:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e966:	e9 d5 03 00 00       	jmp    c000ed40 <scanMADT()+0x4c0>
c000e96b:	90                   	nop
c000e96c:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000e974:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e978:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e97b:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
c000e97f:	0f 87 bb 03 00 00    	ja     c000ed40 <scanMADT()+0x4c0>
c000e985:	81 7c 24 3c f3 01 00 00 	cmp    DWORD PTR [esp+0x3c],0x1f3
c000e98d:	0f 87 ad 03 00 00    	ja     c000ed40 <scanMADT()+0x4c0>
c000e993:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e997:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e99b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e99f:	8d 50 01             	lea    edx,[eax+0x1]
c000e9a2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e9a6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e9aa:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e9af:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c000e9b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e9be:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000e9c2:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000e9c7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c000e9cb:	80 7c 24 32 02       	cmp    BYTE PTR [esp+0x32],0x2
c000e9d0:	0f 86 66 03 00 00    	jbe    c000ed3c <scanMADT()+0x4bc>
c000e9d6:	80 7c 24 33 00       	cmp    BYTE PTR [esp+0x33],0x0
c000e9db:	75 5f                	jne    c000ea3c <scanMADT()+0x1bc>
c000e9dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9e1:	8d 50 01             	lea    edx,[eax+0x1]
c000e9e4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000e9e8:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000e9ef:	0f b6 d2             	movzx  edx,dl
c000e9f2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e9f6:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000e9fb:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000ea01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea05:	8d 50 01             	lea    edx,[eax+0x1]
c000ea08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ea0c:	0f b6 15 c0 78 02 c0 	movzx  edx,BYTE PTR ds:0xc00278c0
c000ea13:	88 d1                	mov    cl,dl
c000ea15:	fe c1                	inc    cl
c000ea17:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000ea1d:	0f b6 d2             	movzx  edx,dl
c000ea20:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea24:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000ea29:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000ea2f:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ea34:	e9 eb 02 00 00       	jmp    c000ed24 <scanMADT()+0x4a4>
c000ea39:	8d 76 00             	lea    esi,[esi+0x0]
c000ea3c:	80 7c 24 33 01       	cmp    BYTE PTR [esp+0x33],0x1
c000ea41:	0f 85 25 01 00 00    	jne    c000eb6c <scanMADT()+0x2ec>
c000ea47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea4b:	8d 50 01             	lea    edx,[eax+0x1]
c000ea4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ea52:	0f b6 15 80 77 02 c0 	movzx  edx,BYTE PTR ds:0xc0027780
c000ea59:	0f b6 d2             	movzx  edx,dl
c000ea5c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea60:	0f b6 44 01 2c       	movzx  eax,BYTE PTR [ecx+eax*1+0x2c]
c000ea65:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea6b:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c000ea6f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea77:	01 d0                	add    eax,edx
c000ea79:	83 c0 2c             	add    eax,0x2c
c000ea7c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ea7f:	0f b6 d0             	movzx  edx,al
c000ea82:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea86:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea8d:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ea92:	0f b6 c0             	movzx  eax,al
c000ea95:	c1 e0 08             	shl    eax,0x8
c000ea98:	89 d1                	mov    ecx,edx
c000ea9a:	09 c1                	or     ecx,eax
c000ea9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaa0:	8d 50 02             	lea    edx,[eax+0x2]
c000eaa3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eaa7:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eaac:	0f b6 c0             	movzx  eax,al
c000eaaf:	c1 e0 10             	shl    eax,0x10
c000eab2:	09 c1                	or     ecx,eax
c000eab4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eab8:	8d 50 03             	lea    edx,[eax+0x3]
c000eabb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eabf:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eac4:	0f b6 c0             	movzx  eax,al
c000eac7:	c1 e0 18             	shl    eax,0x18
c000eaca:	09 c1                	or     ecx,eax
c000eacc:	89 ca                	mov    edx,ecx
c000eace:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000ead5:	0f b6 c0             	movzx  eax,al
c000ead8:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000eadf:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000eae4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eae8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eaec:	01 d0                	add    eax,edx
c000eaee:	83 c0 2c             	add    eax,0x2c
c000eaf1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eaf4:	0f b6 d0             	movzx  edx,al
c000eaf7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eafb:	8d 48 01             	lea    ecx,[eax+0x1]
c000eafe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb02:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000eb07:	0f b6 c0             	movzx  eax,al
c000eb0a:	c1 e0 08             	shl    eax,0x8
c000eb0d:	89 d1                	mov    ecx,edx
c000eb0f:	09 c1                	or     ecx,eax
c000eb11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb15:	8d 50 02             	lea    edx,[eax+0x2]
c000eb18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb1c:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eb21:	0f b6 c0             	movzx  eax,al
c000eb24:	c1 e0 10             	shl    eax,0x10
c000eb27:	09 c1                	or     ecx,eax
c000eb29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb2d:	8d 50 03             	lea    edx,[eax+0x3]
c000eb30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb34:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000eb39:	0f b6 c0             	movzx  eax,al
c000eb3c:	c1 e0 18             	shl    eax,0x18
c000eb3f:	09 c1                	or     ecx,eax
c000eb41:	89 ca                	mov    edx,ecx
c000eb43:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000eb4a:	0f b6 c0             	movzx  eax,al
c000eb4d:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eb54:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000eb59:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c000eb60:	fe c0                	inc    al
c000eb62:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eb67:	e9 b8 01 00 00       	jmp    c000ed24 <scanMADT()+0x4a4>
c000eb6c:	80 7c 24 33 02       	cmp    BYTE PTR [esp+0x33],0x2
c000eb71:	0f 85 f9 00 00 00    	jne    c000ec70 <scanMADT()+0x3f0>
c000eb77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb7b:	8d 50 01             	lea    edx,[eax+0x1]
c000eb7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eb82:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb86:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eb8b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c000eb8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb93:	8d 50 01             	lea    edx,[eax+0x1]
c000eb96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000eb9a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000eb9e:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000eba3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c000eba7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ebab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebaf:	01 d0                	add    eax,edx
c000ebb1:	83 c0 2c             	add    eax,0x2c
c000ebb4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ebb7:	0f b6 d0             	movzx  edx,al
c000ebba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebbe:	8d 48 01             	lea    ecx,[eax+0x1]
c000ebc1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebc5:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ebca:	0f b6 c0             	movzx  eax,al
c000ebcd:	c1 e0 08             	shl    eax,0x8
c000ebd0:	89 d1                	mov    ecx,edx
c000ebd2:	09 c1                	or     ecx,eax
c000ebd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebd8:	8d 50 02             	lea    edx,[eax+0x2]
c000ebdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebdf:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ebe4:	0f b6 c0             	movzx  eax,al
c000ebe7:	c1 e0 10             	shl    eax,0x10
c000ebea:	09 c1                	or     ecx,eax
c000ebec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebf0:	8d 50 03             	lea    edx,[eax+0x3]
c000ebf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebf7:	0f b6 44 10 2c       	movzx  eax,BYTE PTR [eax+edx*1+0x2c]
c000ebfc:	0f b6 c0             	movzx  eax,al
c000ebff:	c1 e0 18             	shl    eax,0x18
c000ec02:	09 c8                	or     eax,ecx
c000ec04:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ec08:	83 44 24 3c 04       	add    DWORD PTR [esp+0x3c],0x4
c000ec0d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec11:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec15:	01 d0                	add    eax,edx
c000ec17:	83 c0 2c             	add    eax,0x2c
c000ec1a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000ec1d:	0f b6 c0             	movzx  eax,al
c000ec20:	0f bf d0             	movsx  edx,ax
c000ec23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec27:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec2e:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ec33:	0f b6 c0             	movzx  eax,al
c000ec36:	c1 e0 08             	shl    eax,0x8
c000ec39:	98                   	cwde   
c000ec3a:	09 d0                	or     eax,edx
c000ec3c:	98                   	cwde   
c000ec3d:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c000ec42:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000ec47:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000ec4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ec50:	88 90 c0 1c 02 c0    	mov    BYTE PTR [eax-0x3ffde340],dl
c000ec56:	0f b6 44 24 30       	movzx  eax,BYTE PTR [esp+0x30]
c000ec5b:	0f b7 54 24 2a       	movzx  edx,WORD PTR [esp+0x2a]
c000ec60:	66 89 94 00 60 77 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd88a0],dx
c000ec68:	e9 b7 00 00 00       	jmp    c000ed24 <scanMADT()+0x4a4>
c000ec6d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec70:	80 7c 24 33 04       	cmp    BYTE PTR [esp+0x33],0x4
c000ec75:	0f 85 9d 00 00 00    	jne    c000ed18 <scanMADT()+0x498>
c000ec7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec7f:	8d 50 01             	lea    edx,[eax+0x1]
c000ec82:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ec86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec8a:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ec8f:	0f b6 c0             	movzx  eax,al
c000ec92:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ec96:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ec9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec9e:	01 d0                	add    eax,edx
c000eca0:	83 c0 2c             	add    eax,0x2c
c000eca3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000eca6:	0f b6 d0             	movzx  edx,al
c000eca9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ecad:	8d 48 01             	lea    ecx,[eax+0x1]
c000ecb0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecb4:	0f b6 44 08 2c       	movzx  eax,BYTE PTR [eax+ecx*1+0x2c]
c000ecb9:	0f b6 c0             	movzx  eax,al
c000ecbc:	c1 e0 08             	shl    eax,0x8
c000ecbf:	09 d0                	or     eax,edx
c000ecc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ecc5:	83 44 24 3c 02       	add    DWORD PTR [esp+0x3c],0x2
c000ecca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ecce:	8d 50 01             	lea    edx,[eax+0x1]
c000ecd1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ecd5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ecd9:	0f b6 44 02 2c       	movzx  eax,BYTE PTR [edx+eax*1+0x2c]
c000ecde:	0f b6 c0             	movzx  eax,al
c000ece1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ece5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ece9:	c1 e0 08             	shl    eax,0x8
c000ecec:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000ecf0:	89 c1                	mov    ecx,eax
c000ecf2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ecf6:	c1 e0 18             	shl    eax,0x18
c000ecf9:	89 c3                	mov    ebx,eax
c000ecfb:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ed00:	8d 50 01             	lea    edx,[eax+0x1]
c000ed03:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ed09:	09 d9                	or     ecx,ebx
c000ed0b:	89 ca                	mov    edx,ecx
c000ed0d:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ed14:	eb 0e                	jmp    c000ed24 <scanMADT()+0x4a4>
c000ed16:	66 90                	xchg   ax,ax
c000ed18:	80 7c 24 33 05       	cmp    BYTE PTR [esp+0x33],0x5
c000ed1d:	75 05                	jne    c000ed24 <scanMADT()+0x4a4>
c000ed1f:	83 44 24 3c 0a       	add    DWORD PTR [esp+0x3c],0xa
c000ed24:	0f b6 54 24 32       	movzx  edx,BYTE PTR [esp+0x32]
c000ed29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed2d:	01 d0                	add    eax,edx
c000ed2f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed33:	e9 3c fc ff ff       	jmp    c000e974 <scanMADT()+0xf4>
c000ed38:	90                   	nop
c000ed39:	eb 05                	jmp    c000ed40 <scanMADT()+0x4c0>
c000ed3b:	90                   	nop
c000ed3c:	90                   	nop
c000ed3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed40:	83 c4 48             	add    esp,0x48
c000ed43:	5b                   	pop    ebx
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop
c000ed46:	66 90                	xchg   ax,ax

c000ed48 <ACPI::ACPI()>:
c000ed48:	83 ec 1c             	sub    esp,0x1c
c000ed4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed4f:	c7 44 24 04 81 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020681
c000ed57:	89 04 24             	mov    DWORD PTR [esp],eax
c000ed5a:	e8 19 d3 ff ff       	call   c000c078 <Device::Device(char const*)>
c000ed5f:	ba b8 07 02 c0       	mov    edx,0xc00207b8
c000ed64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed68:	89 10                	mov    DWORD PTR [eax],edx
c000ed6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed6e:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed79:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed87:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed91:	e8 ea fa ff ff       	call   c000e880 <scanMADT()>
c000ed96:	90                   	nop
c000ed97:	83 c4 1c             	add    esp,0x1c
c000ed9a:	c3                   	ret    
c000ed9b:	90                   	nop

c000ed9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed9c:	83 ec 3c             	sub    esp,0x3c
c000ed9f:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000eda3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000eda7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000edab:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000edaf:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000edb4:	88 c8                	mov    al,cl
c000edb6:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000edba:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000edbf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000edc7:	90                   	nop
c000edc8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edcc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000edd2:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000edd6:	0f 8d 98 00 00 00    	jge    c000ee74 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd8>
c000eddc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ede0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ede4:	83 c2 2a             	add    edx,0x2a
c000ede7:	0f b7 44 d0 0c       	movzx  eax,WORD PTR [eax+edx*8+0xc]
c000edec:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000edf1:	39 c2                	cmp    edx,eax
c000edf3:	75 73                	jne    c000ee68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000edf5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000edfd:	83 c2 2a             	add    edx,0x2a
c000ee00:	0f b6 44 d0 0e       	movzx  eax,BYTE PTR [eax+edx*8+0xe]
c000ee05:	38 44 24 14          	cmp    BYTE PTR [esp+0x14],al
c000ee09:	75 5d                	jne    c000ee68 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcc>
c000ee0b:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000ee10:	74 32                	je     c000ee44 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xa8>
c000ee12:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee1a:	83 c2 2a             	add    edx,0x2a
c000ee1d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000ee21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee25:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee28:	39 c2                	cmp    edx,eax
c000ee2a:	74 0c                	je     c000ee38 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000ee2c:	c7 04 24 fc 05 02 c0 	mov    DWORD PTR [esp],0xc00205fc
c000ee33:	e8 ed 19 00 00       	call   c0010825 <KePanic(char const*)>
c000ee38:	c7 04 24 86 06 02 c0 	mov    DWORD PTR [esp],0xc0020686
c000ee3f:	e8 e1 19 00 00       	call   c0010825 <KePanic(char const*)>
c000ee44:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000ee48:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee4c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ee50:	83 c2 2a             	add    edx,0x2a
c000ee53:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000ee57:	8b 02                	mov    eax,DWORD PTR [edx]
c000ee59:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee5c:	89 01                	mov    DWORD PTR [ecx],eax
c000ee5e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee61:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ee66:	66 90                	xchg   ax,ax
c000ee68:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ee6c:	e9 57 ff ff ff       	jmp    c000edc8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee71:	8d 76 00             	lea    esi,[esi+0x0]
c000ee74:	90                   	nop
c000ee75:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee79:	83 c4 3c             	add    esp,0x3c
c000ee7c:	c2 04 00             	ret    0x4
c000ee7f:	90                   	nop

c000ee80 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee80:	83 ec 2c             	sub    esp,0x2c
c000ee83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee87:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000ee8b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ee8f:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c000ee94:	88 c8                	mov    al,cl
c000ee96:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000ee9a:	88 d0                	mov    al,dl
c000ee9c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000eea0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eea4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eeaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeae:	83 c2 2a             	add    edx,0x2a
c000eeb1:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c000eeb6:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000eeba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eebe:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eec8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eecb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eecf:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000eed4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eede:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000eee3:	fe c0                	inc    al
c000eee5:	88 c1                	mov    cl,al
c000eee7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeeb:	83 c2 2a             	add    edx,0x2a
c000eeee:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000eef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eef6:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000eefc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef00:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ef03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ef07:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ef0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef0f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef15:	8d 50 01             	lea    edx,[eax+0x1]
c000ef18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef1c:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ef22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef26:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ef2c:	3d 00 02 00 00       	cmp    eax,0x200
c000ef31:	75 0d                	jne    c000ef40 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ef33:	c7 04 24 95 06 02 c0 	mov    DWORD PTR [esp],0xc0020695
c000ef3a:	e8 e6 18 00 00       	call   c0010825 <KePanic(char const*)>
c000ef3f:	90                   	nop
c000ef40:	90                   	nop
c000ef41:	83 c4 2c             	add    esp,0x2c
c000ef44:	c3                   	ret    
c000ef45:	90                   	nop
c000ef46:	66 90                	xchg   ax,ax

c000ef48 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ef48:	b8 00 00 00 00       	mov    eax,0x0
c000ef4d:	c3                   	ret    
c000ef4e:	66 90                	xchg   ax,ax

c000ef50 <ACPI::detectPCI()>:
c000ef50:	53                   	push   ebx
c000ef51:	83 ec 38             	sub    esp,0x38
c000ef54:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000ef59:	c6 44 24 2e 00       	mov    BYTE PTR [esp+0x2e],0x0
c000ef5e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef63:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000ef6a:	24 04                	and    al,0x4
c000ef6c:	74 2a                	je     c000ef98 <ACPI::detectPCI()+0x48>
c000ef6e:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef73:	c7 44 24 04 b2 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206b2
c000ef7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef7e:	e8 7d f8 ff ff       	call   c000e800 <findDataTable(unsigned char*, char*)>
c000ef83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ef87:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ef8c:	74 0a                	je     c000ef98 <ACPI::detectPCI()+0x48>
c000ef8e:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000ef93:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000ef98:	c7 44 24 24 5f 0c 00 00 	mov    DWORD PTR [esp+0x24],0xc5f
c000efa0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efa4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000efa7:	3c 01                	cmp    al,0x1
c000efa9:	75 0d                	jne    c000efb8 <ACPI::detectPCI()+0x68>
c000efab:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000efb0:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000efb5:	eb 25                	jmp    c000efdc <ACPI::detectPCI()+0x8c>
c000efb7:	90                   	nop
c000efb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efbc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000efbf:	3c 02                	cmp    al,0x2
c000efc1:	75 19                	jne    c000efdc <ACPI::detectPCI()+0x8c>
c000efc3:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000efc8:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000efcd:	74 0d                	je     c000efdc <ACPI::detectPCI()+0x8c>
c000efcf:	c7 04 24 2c 06 02 c0 	mov    DWORD PTR [esp],0xc002062c
c000efd6:	e8 4a 18 00 00       	call   c0010825 <KePanic(char const*)>
c000efdb:	90                   	nop
c000efdc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000efe1:	34 01                	xor    al,0x1
c000efe3:	74 3f                	je     c000f024 <ACPI::detectPCI()+0xd4>
c000efe5:	e8 46 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000efee:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c000eff3:	75 0f                	jne    c000f004 <ACPI::detectPCI()+0xb4>
c000eff5:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000effa:	c6 44 24 2e 01       	mov    BYTE PTR [esp+0x2e],0x1
c000efff:	eb 23                	jmp    c000f024 <ACPI::detectPCI()+0xd4>
c000f001:	8d 76 00             	lea    esi,[esi+0x0]
c000f004:	83 7c 24 20 02       	cmp    DWORD PTR [esp+0x20],0x2
c000f009:	75 19                	jne    c000f024 <ACPI::detectPCI()+0xd4>
c000f00b:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f010:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000f015:	74 0d                	je     c000f024 <ACPI::detectPCI()+0xd4>
c000f017:	c7 04 24 2c 06 02 c0 	mov    DWORD PTR [esp],0xc002062c
c000f01e:	e8 02 18 00 00       	call   c0010825 <KePanic(char const*)>
c000f023:	90                   	nop
c000f024:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c000f029:	0f 84 89 00 00 00    	je     c000f0b8 <ACPI::detectPCI()+0x168>
c000f02f:	c7 04 24 b7 06 02 c0 	mov    DWORD PTR [esp],0xc00206b7
c000f036:	e8 76 11 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c000f03b:	c7 44 24 14 5c 01 00 00 	mov    DWORD PTR [esp+0x14],0x15c
c000f043:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f047:	89 04 24             	mov    DWORD PTR [esp],eax
c000f04a:	e8 ad 8a ff ff       	call   c0007afc <malloc>
c000f04f:	89 c3                	mov    ebx,eax
c000f051:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f054:	e8 85 ae 00 00       	call   c0019ede <PCI::PCI()>
c000f059:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000f05d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f061:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f065:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f069:	89 04 24             	mov    DWORD PTR [esp],eax
c000f06c:	e8 6f ce ff ff       	call   c000bee0 <Device::addChild(Device*)>
c000f071:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f075:	8b 00                	mov    eax,DWORD PTR [eax]
c000f077:	83 c0 08             	add    eax,0x8
c000f07a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f07c:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c000f081:	74 09                	je     c000f08c <ACPI::detectPCI()+0x13c>
c000f083:	ba 01 00 00 00       	mov    edx,0x1
c000f088:	eb 0a                	jmp    c000f094 <ACPI::detectPCI()+0x144>
c000f08a:	66 90                	xchg   ax,ax
c000f08c:	ba 02 00 00 00       	mov    edx,0x2
c000f091:	8d 76 00             	lea    esi,[esi+0x0]
c000f094:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f09c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f0a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f0ac:	89 14 24             	mov    DWORD PTR [esp],edx
c000f0af:	ff d0                	call   eax
c000f0b1:	e9 9a 00 00 00       	jmp    c000f150 <ACPI::detectPCI()+0x200>
c000f0b6:	66 90                	xchg   ax,ax
c000f0b8:	c7 04 24 cf 06 02 c0 	mov    DWORD PTR [esp],0xc00206cf
c000f0bf:	e8 ed 10 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c000f0c4:	c7 44 24 10 70 02 00 00 	mov    DWORD PTR [esp+0x10],0x270
c000f0cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0d0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0d3:	e8 24 8a ff ff       	call   c0007afc <malloc>
c000f0d8:	89 c3                	mov    ebx,eax
c000f0da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0dd:	e8 5c b9 00 00       	call   c001aa3e <IDE::IDE()>
c000f0e2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f0e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f0ee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f0f2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f0f5:	e8 e6 cd ff ff       	call   c000bee0 <Device::addChild(Device*)>
c000f0fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f0fe:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f108:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f10c:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f115:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f119:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f122:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f126:	8b 00                	mov    eax,DWORD PTR [eax]
c000f128:	83 c0 08             	add    eax,0x8
c000f12b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f12d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f135:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f13d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000f145:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f149:	89 14 24             	mov    DWORD PTR [esp],edx
c000f14c:	ff d0                	call   eax
c000f14e:	66 90                	xchg   ax,ax
c000f150:	90                   	nop
c000f151:	83 c4 38             	add    esp,0x38
c000f154:	5b                   	pop    ebx
c000f155:	c3                   	ret    
c000f156:	66 90                	xchg   ax,ax

c000f158 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f158:	83 ec 2c             	sub    esp,0x2c
c000f15b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f15f:	0f b6 40 24          	movzx  eax,BYTE PTR [eax+0x24]
c000f163:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000f167:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f16c:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f171:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f175:	89 04 24             	mov    DWORD PTR [esp],eax
c000f178:	e8 1d 80 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000f17d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f181:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f186:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000f18b:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000f193:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f197:	89 04 24             	mov    DWORD PTR [esp],eax
c000f19a:	e8 39 81 ff ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f19f:	90                   	nop
c000f1a0:	83 c4 2c             	add    esp,0x2c
c000f1a3:	c3                   	ret    

c000f1a4 <ACPI::sleep()>:
c000f1a4:	83 ec 0c             	sub    esp,0xc
c000f1a7:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1ac:	85 c0                	test   eax,eax
c000f1ae:	74 08                	je     c000f1b8 <ACPI::sleep()+0x14>
c000f1b0:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f1b5:	ff d0                	call   eax
c000f1b7:	90                   	nop
c000f1b8:	90                   	nop
c000f1b9:	83 c4 0c             	add    esp,0xc
c000f1bc:	c3                   	ret    
c000f1bd:	90                   	nop
c000f1be:	66 90                	xchg   ax,ax

c000f1c0 <ACPI::open(int, int, void*)>:
c000f1c0:	53                   	push   ebx
c000f1c1:	81 ec a8 01 00 00    	sub    esp,0x1a8
c000f1c7:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f1ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000f1d1:	e8 7a fd ff ff       	call   c000ef50 <ACPI::detectPCI()>
c000f1d6:	c7 04 24 54 06 02 c0 	mov    DWORD PTR [esp],0xc0020654
c000f1dd:	e8 cf 0f 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c000f1e2:	c7 04 24 e4 06 02 c0 	mov    DWORD PTR [esp],0xc00206e4
c000f1e9:	e8 52 4a 00 00       	call   c0013c40 <Thr::loadKernelSymbolTable(char const*)>
c000f1ee:	c6 84 24 9f 01 00 00 00 	mov    BYTE PTR [esp+0x19f],0x0
c000f1f6:	c7 84 24 74 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x174],0x114
c000f201:	8b 84 24 74 01 00 00 	mov    eax,DWORD PTR [esp+0x174]
c000f208:	89 04 24             	mov    DWORD PTR [esp],eax
c000f20b:	e8 ec 88 ff ff       	call   c0007afc <malloc>
c000f210:	89 c3                	mov    ebx,eax
c000f212:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f217:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f21b:	c7 44 24 04 02 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020702
c000f223:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f226:	e8 cd bd ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000f22b:	89 9c 24 98 01 00 00 	mov    DWORD PTR [esp+0x198],ebx
c000f232:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f23a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f241:	89 04 24             	mov    DWORD PTR [esp],eax
c000f244:	e8 6d be ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c000f249:	89 84 24 94 01 00 00 	mov    DWORD PTR [esp+0x194],eax
c000f250:	83 bc 24 94 01 00 00 00 	cmp    DWORD PTR [esp+0x194],0x0
c000f258:	75 12                	jne    c000f26c <ACPI::open(int, int, void*)+0xac>
c000f25a:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f261:	89 04 24             	mov    DWORD PTR [esp],eax
c000f264:	e8 ab be ff ff       	call   c000b114 <File::close()>
c000f269:	eb 09                	jmp    c000f274 <ACPI::open(int, int, void*)+0xb4>
c000f26b:	90                   	nop
c000f26c:	c6 84 24 9f 01 00 00 01 	mov    BYTE PTR [esp+0x19f],0x1
c000f274:	83 bc 24 98 01 00 00 00 	cmp    DWORD PTR [esp+0x198],0x0
c000f27c:	74 1a                	je     c000f298 <ACPI::open(int, int, void*)+0xd8>
c000f27e:	8b 84 24 98 01 00 00 	mov    eax,DWORD PTR [esp+0x198]
c000f285:	8b 00                	mov    eax,DWORD PTR [eax]
c000f287:	83 c0 08             	add    eax,0x8
c000f28a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f28c:	8b 94 24 98 01 00 00 	mov    edx,DWORD PTR [esp+0x198]
c000f293:	89 14 24             	mov    DWORD PTR [esp],edx
c000f296:	ff d0                	call   eax
c000f298:	0f b6 84 24 9f 01 00 00 	movzx  eax,BYTE PTR [esp+0x19f]
c000f2a0:	34 01                	xor    al,0x1
c000f2a2:	74 40                	je     c000f2e4 <ACPI::open(int, int, void*)+0x124>
c000f2a4:	c7 04 24 20 07 02 c0 	mov    DWORD PTR [esp],0xc0020720
c000f2ab:	e8 01 0f 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c000f2b0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000f2b8:	c7 44 24 04 3b 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc002073b
c000f2c0:	c7 04 24 4c 07 02 c0 	mov    DWORD PTR [esp],0xc002074c
c000f2c7:	e8 f4 3c 00 00       	call   c0012fc0 <Reg::readIntWithDefault(char*, char*, int)>
c000f2cc:	89 84 24 90 01 00 00 	mov    DWORD PTR [esp+0x190],eax
c000f2d3:	8b 84 24 90 01 00 00 	mov    eax,DWORD PTR [esp+0x190]
c000f2da:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2dd:	e8 60 a5 ff ff       	call   c0009842 <Virt::setupPageSwapping(int)>
c000f2e2:	66 90                	xchg   ax,ax
c000f2e4:	c7 04 24 95 f7 01 c0 	mov    DWORD PTR [esp],0xc001f795
c000f2eb:	e8 c1 0e 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c000f2f0:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f2f7:	c7 44 24 04 13 00 00 00 	mov    DWORD PTR [esp+0x4],0x13
c000f2ff:	89 04 24             	mov    DWORD PTR [esp],eax
c000f302:	e8 ef ce ff ff       	call   c000c1f6 <getDevicesOfType(DeviceType)>
c000f307:	83 ec 04             	sub    esp,0x4
c000f30a:	66 90                	xchg   ax,ax
c000f30c:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f313:	89 04 24             	mov    DWORD PTR [esp],eax
c000f316:	e8 b9 f8 00 00       	call   c001ebd4 <LinkedList<Device>::isEmpty()>
c000f31b:	34 01                	xor    al,0x1
c000f31d:	0f 84 49 01 00 00    	je     c000f46c <ACPI::open(int, int, void*)+0x2ac>
c000f323:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f32a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f32d:	e8 be f8 00 00       	call   c001ebf0 <LinkedList<Device>::getFirstElement()>
c000f332:	89 84 24 8c 01 00 00 	mov    DWORD PTR [esp+0x18c],eax
c000f339:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f340:	89 04 24             	mov    DWORD PTR [esp],eax
c000f343:	e8 b0 f8 00 00       	call   c001ebf8 <LinkedList<Device>::removeFirst()>
c000f348:	8b 84 24 8c 01 00 00 	mov    eax,DWORD PTR [esp+0x18c]
c000f34f:	89 84 24 88 01 00 00 	mov    DWORD PTR [esp+0x188],eax
c000f356:	8b 8c 24 88 01 00 00 	mov    ecx,DWORD PTR [esp+0x188]
c000f35d:	b8 24 00 00 00       	mov    eax,0x24
c000f362:	83 e0 fc             	and    eax,0xfffffffc
c000f365:	89 c3                	mov    ebx,eax
c000f367:	b8 00 00 00 00       	mov    eax,0x0
c000f36c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000f373:	89 54 04 3c          	mov    DWORD PTR [esp+eax*1+0x3c],edx
c000f377:	83 c0 04             	add    eax,0x4
c000f37a:	39 d8                	cmp    eax,ebx
c000f37c:	72 ee                	jb     c000f36c <ACPI::open(int, int, void*)+0x1ac>
c000f37e:	8d 44 24 60          	lea    eax,[esp+0x60]
c000f382:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f386:	b8 24 00 00 00       	mov    eax,0x24
c000f38b:	83 e0 fc             	and    eax,0xfffffffc
c000f38e:	89 c1                	mov    ecx,eax
c000f390:	b8 00 00 00 00       	mov    eax,0x0
c000f395:	8d 76 00             	lea    esi,[esi+0x0]
c000f398:	8b 54 04 3c          	mov    edx,DWORD PTR [esp+eax*1+0x3c]
c000f39c:	89 14 04             	mov    DWORD PTR [esp+eax*1],edx
c000f39f:	83 c0 04             	add    eax,0x4
c000f3a2:	39 c8                	cmp    eax,ecx
c000f3a4:	72 f2                	jb     c000f398 <ACPI::open(int, int, void*)+0x1d8>
c000f3a6:	e8 11 b0 00 00       	call   c001a3bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f3ab:	89 84 24 84 01 00 00 	mov    DWORD PTR [esp+0x184],eax
c000f3b2:	83 bc 24 84 01 00 00 00 	cmp    DWORD PTR [esp+0x184],0x0
c000f3ba:	0f 84 4c ff ff ff    	je     c000f30c <ACPI::open(int, int, void*)+0x14c>
c000f3c0:	c7 84 24 70 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x170],0x114
c000f3cb:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c000f3d2:	89 04 24             	mov    DWORD PTR [esp],eax
c000f3d5:	e8 22 87 ff ff       	call   c0007afc <malloc>
c000f3da:	89 c3                	mov    ebx,eax
c000f3dc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3e5:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f3ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f3f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3f3:	e8 00 bc ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000f3f8:	89 9c 24 80 01 00 00 	mov    DWORD PTR [esp+0x180],ebx
c000f3ff:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f406:	89 04 24             	mov    DWORD PTR [esp],eax
c000f409:	e8 10 bf ff ff       	call   c000b31e <File::exists()>
c000f40e:	84 c0                	test   al,al
c000f410:	74 2a                	je     c000f43c <ACPI::open(int, int, void*)+0x27c>
c000f412:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f41a:	8b 84 24 84 01 00 00 	mov    eax,DWORD PTR [esp+0x184]
c000f421:	89 04 24             	mov    DWORD PTR [esp],eax
c000f424:	e8 a5 52 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c000f429:	8b 94 24 88 01 00 00 	mov    edx,DWORD PTR [esp+0x188]
c000f430:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f434:	89 04 24             	mov    DWORD PTR [esp],eax
c000f437:	e8 ce 54 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c000f43c:	83 bc 24 80 01 00 00 00 	cmp    DWORD PTR [esp+0x180],0x0
c000f444:	0f 84 c2 fe ff ff    	je     c000f30c <ACPI::open(int, int, void*)+0x14c>
c000f44a:	8b 84 24 80 01 00 00 	mov    eax,DWORD PTR [esp+0x180]
c000f451:	8b 00                	mov    eax,DWORD PTR [eax]
c000f453:	83 c0 08             	add    eax,0x8
c000f456:	8b 00                	mov    eax,DWORD PTR [eax]
c000f458:	8b 94 24 80 01 00 00 	mov    edx,DWORD PTR [esp+0x180]
c000f45f:	89 14 24             	mov    DWORD PTR [esp],edx
c000f462:	ff d0                	call   eax
c000f464:	e9 a3 fe ff ff       	jmp    c000f30c <ACPI::open(int, int, void*)+0x14c>
c000f469:	8d 76 00             	lea    esi,[esi+0x0]
c000f46c:	8d 84 24 60 01 00 00 	lea    eax,[esp+0x160]
c000f473:	89 04 24             	mov    DWORD PTR [esp],eax
c000f476:	e8 55 f7 00 00       	call   c001ebd0 <LinkedList<Device>::~LinkedList()>
c000f47b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f481:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f489:	c7 04 24 53 07 02 c0 	mov    DWORD PTR [esp],0xc0020753
c000f490:	e8 39 52 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c000f495:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000f499:	89 04 24             	mov    DWORD PTR [esp],eax
c000f49c:	e8 69 54 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c000f4a1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f4a6:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c000f4ad:	24 04                	and    al,0x4
c000f4af:	0f 84 0b 01 00 00    	je     c000f5c0 <ACPI::open(int, int, void*)+0x400>
c000f4b5:	c7 04 24 70 07 02 c0 	mov    DWORD PTR [esp],0xc0020770
c000f4bc:	e8 f0 0c 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c000f4c1:	c7 84 24 6c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x16c],0x114
c000f4cc:	8b 84 24 6c 01 00 00 	mov    eax,DWORD PTR [esp+0x16c]
c000f4d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4d6:	e8 21 86 ff ff       	call   c0007afc <malloc>
c000f4db:	89 c3                	mov    ebx,eax
c000f4dd:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4e6:	c7 44 24 04 8d 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc002078d
c000f4ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f4f1:	e8 02 bb ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c000f4f6:	89 9c 24 7c 01 00 00 	mov    DWORD PTR [esp+0x17c],ebx
c000f4fd:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f505:	74 19                	je     c000f520 <ACPI::open(int, int, void*)+0x360>
c000f507:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f50e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f511:	e8 08 be ff ff       	call   c000b31e <File::exists()>
c000f516:	84 c0                	test   al,al
c000f518:	74 06                	je     c000f520 <ACPI::open(int, int, void*)+0x360>
c000f51a:	b0 01                	mov    al,0x1
c000f51c:	eb 06                	jmp    c000f524 <ACPI::open(int, int, void*)+0x364>
c000f51e:	66 90                	xchg   ax,ax
c000f520:	b0 00                	mov    al,0x0
c000f522:	66 90                	xchg   ax,ax
c000f524:	84 c0                	test   al,al
c000f526:	74 28                	je     c000f550 <ACPI::open(int, int, void*)+0x390>
c000f528:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000f530:	c7 04 24 8d 07 02 c0 	mov    DWORD PTR [esp],0xc002078d
c000f537:	e8 92 51 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c000f53c:	8b 94 24 b0 01 00 00 	mov    edx,DWORD PTR [esp+0x1b0]
c000f543:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f547:	89 04 24             	mov    DWORD PTR [esp],eax
c000f54a:	e8 bb 53 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c000f54f:	90                   	nop
c000f550:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f558:	74 26                	je     c000f580 <ACPI::open(int, int, void*)+0x3c0>
c000f55a:	83 bc 24 7c 01 00 00 00 	cmp    DWORD PTR [esp+0x17c],0x0
c000f562:	74 1c                	je     c000f580 <ACPI::open(int, int, void*)+0x3c0>
c000f564:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
c000f56b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56d:	83 c0 08             	add    eax,0x8
c000f570:	8b 00                	mov    eax,DWORD PTR [eax]
c000f572:	8b 94 24 7c 01 00 00 	mov    edx,DWORD PTR [esp+0x17c]
c000f579:	89 14 24             	mov    DWORD PTR [esp],edx
c000f57c:	ff d0                	call   eax
c000f57e:	66 90                	xchg   ax,ax
c000f580:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f585:	c7 44 24 04 aa 07 02 c0 	mov    DWORD PTR [esp+0x4],0xc00207aa
c000f58d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f590:	e8 6b f2 ff ff       	call   c000e800 <findDataTable(unsigned char*, char*)>
c000f595:	89 84 24 78 01 00 00 	mov    DWORD PTR [esp+0x178],eax
c000f59c:	83 bc 24 78 01 00 00 00 	cmp    DWORD PTR [esp+0x178],0x0
c000f5a4:	74 1a                	je     c000f5c0 <ACPI::open(int, int, void*)+0x400>
c000f5a6:	8b 84 24 78 01 00 00 	mov    eax,DWORD PTR [esp+0x178]
c000f5ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f5b1:	8b 84 24 b0 01 00 00 	mov    eax,DWORD PTR [esp+0x1b0]
c000f5b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5bb:	e8 98 fb ff ff       	call   c000f158 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5c0:	b8 00 00 00 00       	mov    eax,0x0
c000f5c5:	81 c4 a8 01 00 00    	add    esp,0x1a8
c000f5cb:	5b                   	pop    ebx
c000f5cc:	c3                   	ret    
c000f5cd:	90                   	nop

c000f5ce <CPU::close(int, int, void*)>:
c000f5ce:	31 c0                	xor    eax,eax
c000f5d0:	c3                   	ret    
c000f5d1:	90                   	nop

c000f5d2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5d2:	60                   	pusha  
c000f5d3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5df:	9c                   	pushf  
c000f5e0:	fa                   	cli    
c000f5e1:	0f 09                	wbinvd 
c000f5e3:	0f 30                	wrmsr  
c000f5e5:	9d                   	popf   
c000f5e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5ea:	89 02                	mov    DWORD PTR [edx],eax
c000f5ec:	61                   	popa   
c000f5ed:	c3                   	ret    

c000f5ee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5ee:	60                   	pusha  
c000f5ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5f3:	9c                   	pushf  
c000f5f4:	fa                   	cli    
c000f5f5:	0f 09                	wbinvd 
c000f5f7:	31 c0                	xor    eax,eax
c000f5f9:	31 d2                	xor    edx,edx
c000f5fb:	0f 32                	rdmsr  
c000f5fd:	9d                   	popf   
c000f5fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f602:	89 02                	mov    DWORD PTR [edx],eax
c000f604:	61                   	popa   
c000f605:	c3                   	ret    

c000f606 <CPU::AMD_K6_writeback(int, int, int)>:
c000f606:	56                   	push   esi
c000f607:	53                   	push   ebx
c000f608:	83 ec 10             	sub    esp,0x10
c000f60b:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f614:	75 5d                	jne    c000f673 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f616:	83 f8 08             	cmp    eax,0x8
c000f619:	75 09                	jne    c000f624 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f61b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f620:	7e 13                	jle    c000f635 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f622:	eb 30                	jmp    c000f654 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f624:	83 f8 06             	cmp    eax,0x6
c000f627:	7c 4a                	jl     c000f673 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f629:	83 f8 07             	cmp    eax,0x7
c000f62c:	7e 07                	jle    c000f635 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f62e:	83 f8 09             	cmp    eax,0x9
c000f631:	74 21                	je     c000f654 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f633:	eb 3e                	jmp    c000f673 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f635:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f63b:	89 e6                	mov    esi,esp
c000f63d:	56                   	push   esi
c000f63e:	68 82 00 00 c0       	push   0xc0000082
c000f643:	e8 a6 ff ff ff       	call   c000f5ee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f648:	c1 eb 15             	shr    ebx,0x15
c000f64b:	56                   	push   esi
c000f64c:	83 e3 7e             	and    ebx,0x7e
c000f64f:	6a 00                	push   0x0
c000f651:	53                   	push   ebx
c000f652:	eb 12                	jmp    c000f666 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f654:	89 e3                	mov    ebx,esp
c000f656:	53                   	push   ebx
c000f657:	68 82 00 00 c0       	push   0xc0000082
c000f65c:	e8 8d ff ff ff       	call   c000f5ee <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f661:	53                   	push   ebx
c000f662:	6a 00                	push   0x0
c000f664:	6a 00                	push   0x0
c000f666:	68 82 00 00 c0       	push   0xc0000082
c000f66b:	e8 62 ff ff ff       	call   c000f5d2 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f670:	83 c4 18             	add    esp,0x18
c000f673:	83 c4 10             	add    esp,0x10
c000f676:	5b                   	pop    ebx
c000f677:	5e                   	pop    esi
c000f678:	c3                   	ret    
c000f679:	90                   	nop

c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f67a:	55                   	push   ebp
c000f67b:	57                   	push   edi
c000f67c:	56                   	push   esi
c000f67d:	53                   	push   ebx
c000f67e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f682:	39 05 d0 1c 02 c0    	cmp    DWORD PTR ds:0xc0021cd0,eax
c000f688:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f68c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f690:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f694:	75 23                	jne    c000f6b9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f696:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f69b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f69f:	89 06                	mov    DWORD PTR [esi],eax
c000f6a1:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f6a6:	89 07                	mov    DWORD PTR [edi],eax
c000f6a8:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f6ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6b0:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f6b5:	89 02                	mov    DWORD PTR [edx],eax
c000f6b7:	eb 3f                	jmp    c000f6f8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6b9:	31 c9                	xor    ecx,ecx
c000f6bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6bf:	0f a2                	cpuid  
c000f6c1:	89 06                	mov    DWORD PTR [esi],eax
c000f6c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6c7:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6c9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6cc:	89 10                	mov    DWORD PTR [eax],edx
c000f6ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6d2:	a3 d0 1c 02 c0       	mov    ds:0xc0021cd0,eax
c000f6d7:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6d9:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6de:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6e0:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6e8:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6f3:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6f8:	5b                   	pop    ebx
c000f6f9:	5e                   	pop    esi
c000f6fa:	5f                   	pop    edi
c000f6fb:	5d                   	pop    ebp
c000f6fc:	c3                   	ret    
c000f6fd:	90                   	nop

c000f6fe <CPU::cpuidCheckEDX(unsigned int)>:
c000f6fe:	83 ec 10             	sub    esp,0x10
c000f701:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f705:	50                   	push   eax
c000f706:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70a:	50                   	push   eax
c000f70b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70f:	50                   	push   eax
c000f710:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f714:	50                   	push   eax
c000f715:	6a 01                	push   0x1
c000f717:	e8 5e ff ff ff       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f71c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f720:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f724:	0f 95 c0             	setne  al
c000f727:	83 c4 24             	add    esp,0x24
c000f72a:	c3                   	ret    
c000f72b:	90                   	nop

c000f72c <CPU::cpuidCheckECX(unsigned int)>:
c000f72c:	83 ec 10             	sub    esp,0x10
c000f72f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f733:	50                   	push   eax
c000f734:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f738:	50                   	push   eax
c000f739:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73d:	50                   	push   eax
c000f73e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f742:	50                   	push   eax
c000f743:	6a 01                	push   0x1
c000f745:	e8 30 ff ff ff       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f752:	0f 95 c0             	setne  al
c000f755:	83 c4 24             	add    esp,0x24
c000f758:	c3                   	ret    
c000f759:	90                   	nop

c000f75a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f75a:	83 ec 10             	sub    esp,0x10
c000f75d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f761:	50                   	push   eax
c000f762:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f766:	50                   	push   eax
c000f767:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76b:	50                   	push   eax
c000f76c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f770:	50                   	push   eax
c000f771:	6a 07                	push   0x7
c000f773:	e8 02 ff ff ff       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f778:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f77c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f780:	0f 95 c0             	setne  al
c000f783:	83 c4 24             	add    esp,0x24
c000f786:	c3                   	ret    
c000f787:	90                   	nop

c000f788 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f788:	83 ec 10             	sub    esp,0x10
c000f78b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f78f:	50                   	push   eax
c000f790:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f794:	50                   	push   eax
c000f795:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f799:	50                   	push   eax
c000f79a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f79e:	50                   	push   eax
c000f79f:	6a 07                	push   0x7
c000f7a1:	e8 d4 fe ff ff       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7aa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7ae:	0f 95 c0             	setne  al
c000f7b1:	83 c4 24             	add    esp,0x24
c000f7b4:	c3                   	ret    
c000f7b5:	90                   	nop

c000f7b6 <CPU::CPU()>:
c000f7b6:	83 ec 1c             	sub    esp,0x1c
c000f7b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7bd:	c7 44 24 04 cd 08 02 c0 	mov    DWORD PTR [esp+0x4],0xc00208cd
c000f7c5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7c8:	e8 ab c8 ff ff       	call   c000c078 <Device::Device(char const*)>
c000f7cd:	ba 54 09 02 c0       	mov    edx,0xc0020954
c000f7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7d6:	89 10                	mov    DWORD PTR [eax],edx
c000f7d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7dc:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ea:	05 78 01 00 00       	add    eax,0x178
c000f7ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000f7f2:	e8 ab 7b ff ff       	call   c00073a2 <GDT::GDT()>
c000f7f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7fb:	05 7c 09 00 00       	add    eax,0x97c
c000f800:	89 04 24             	mov    DWORD PTR [esp],eax
c000f803:	e8 d4 7d ff ff       	call   c00075dc <IDT::IDT()>
c000f808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f80c:	05 7c 11 00 00       	add    eax,0x117c
c000f811:	89 04 24             	mov    DWORD PTR [esp],eax
c000f814:	e8 5f 97 ff ff       	call   c0008f78 <TSS::TSS()>
c000f819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f81d:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f828:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f832:	90                   	nop
c000f833:	83 c4 1c             	add    esp,0x1c
c000f836:	c3                   	ret    
c000f837:	90                   	nop

c000f838 <CPU::displayFeatures()>:
c000f838:	c3                   	ret    
c000f839:	90                   	nop

c000f83a <CPU::detectFeatures()>:
c000f83a:	55                   	push   ebp
c000f83b:	57                   	push   edi
c000f83c:	56                   	push   esi
c000f83d:	53                   	push   ebx
c000f83e:	83 ec 30             	sub    esp,0x30
c000f841:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f845:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f84f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f855:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f85c:	6a 0d                	push   0xd
c000f85e:	6a 00                	push   0x0
c000f860:	55                   	push   ebp
c000f861:	e8 1a 0d ff ff       	call   c0000580 <memset>
c000f866:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f86b:	83 c4 10             	add    esp,0x10
c000f86e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f875:	0f 84 ba 05 00 00    	je     c000fe35 <CPU::detectFeatures()+0x5fb>
c000f87b:	83 ec 0c             	sub    esp,0xc
c000f87e:	89 ef                	mov    edi,ebp
c000f880:	6a 10                	push   0x10
c000f882:	e8 77 fe ff ff       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c000f887:	24 01                	and    al,0x1
c000f889:	00 c0                	add    al,al
c000f88b:	88 c2                	mov    dl,al
c000f88d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f893:	24 fd                	and    al,0xfd
c000f895:	08 d0                	or     al,dl
c000f897:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f89d:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8a4:	e8 55 fe ff ff       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c000f8a9:	24 01                	and    al,0x1
c000f8ab:	c0 e0 02             	shl    al,0x2
c000f8ae:	88 c2                	mov    dl,al
c000f8b0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8b6:	24 fb                	and    al,0xfb
c000f8b8:	08 d0                	or     al,dl
c000f8ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8c0:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8c7:	e8 32 fe ff ff       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c000f8cc:	24 01                	and    al,0x1
c000f8ce:	c0 e0 03             	shl    al,0x3
c000f8d1:	88 c2                	mov    dl,al
c000f8d3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8d9:	24 f7                	and    al,0xf7
c000f8db:	08 d0                	or     al,dl
c000f8dd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8e3:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8ea:	e8 0f fe ff ff       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c000f8ef:	24 01                	and    al,0x1
c000f8f1:	c0 e0 04             	shl    al,0x4
c000f8f4:	88 c2                	mov    dl,al
c000f8f6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8fc:	24 ef                	and    al,0xef
c000f8fe:	08 d0                	or     al,dl
c000f900:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f906:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f90d:	e8 ec fd ff ff       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c000f912:	24 01                	and    al,0x1
c000f914:	c0 e0 05             	shl    al,0x5
c000f917:	88 c2                	mov    dl,al
c000f919:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f91f:	24 df                	and    al,0xdf
c000f921:	08 d0                	or     al,dl
c000f923:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f929:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f930:	e8 c9 fd ff ff       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c000f935:	24 01                	and    al,0x1
c000f937:	00 c0                	add    al,al
c000f939:	88 c2                	mov    dl,al
c000f93b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f941:	24 fd                	and    al,0xfd
c000f943:	08 d0                	or     al,dl
c000f945:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f94b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f952:	e8 a7 fd ff ff       	call   c000f6fe <CPU::cpuidCheckEDX(unsigned int)>
c000f957:	24 01                	and    al,0x1
c000f959:	c0 e0 06             	shl    al,0x6
c000f95c:	88 c2                	mov    dl,al
c000f95e:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f964:	24 bf                	and    al,0xbf
c000f966:	08 d0                	or     al,dl
c000f968:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f96e:	58                   	pop    eax
c000f96f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f973:	50                   	push   eax
c000f974:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f978:	50                   	push   eax
c000f979:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f97d:	56                   	push   esi
c000f97e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f982:	50                   	push   eax
c000f983:	6a 00                	push   0x0
c000f985:	e8 f0 fc ff ff       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f98a:	b8 04 00 00 00       	mov    eax,0x4
c000f98f:	89 c1                	mov    ecx,eax
c000f991:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f993:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f999:	89 c1                	mov    ecx,eax
c000f99b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f99f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9a1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9a7:	89 c1                	mov    ecx,eax
c000f9a9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9af:	83 c4 18             	add    esp,0x18
c000f9b2:	68 dc 07 02 c0       	push   0xc00207dc
c000f9b7:	55                   	push   ebp
c000f9b8:	e8 83 0e ff ff       	call   c0000840 <strcmp>
c000f9bd:	83 c4 10             	add    esp,0x10
c000f9c0:	85 c0                	test   eax,eax
c000f9c2:	75 0f                	jne    c000f9d3 <CPU::detectFeatures()+0x199>
c000f9c4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9ce:	e9 22 02 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000f9d3:	50                   	push   eax
c000f9d4:	50                   	push   eax
c000f9d5:	68 e9 07 02 c0       	push   0xc00207e9
c000f9da:	55                   	push   ebp
c000f9db:	e8 60 0e ff ff       	call   c0000840 <strcmp>
c000f9e0:	83 c4 10             	add    esp,0x10
c000f9e3:	85 c0                	test   eax,eax
c000f9e5:	74 dd                	je     c000f9c4 <CPU::detectFeatures()+0x18a>
c000f9e7:	50                   	push   eax
c000f9e8:	50                   	push   eax
c000f9e9:	68 f6 07 02 c0       	push   0xc00207f6
c000f9ee:	55                   	push   ebp
c000f9ef:	e8 4c 0e ff ff       	call   c0000840 <strcmp>
c000f9f4:	83 c4 10             	add    esp,0x10
c000f9f7:	85 c0                	test   eax,eax
c000f9f9:	74 2a                	je     c000fa25 <CPU::detectFeatures()+0x1eb>
c000f9fb:	50                   	push   eax
c000f9fc:	50                   	push   eax
c000f9fd:	68 03 08 02 c0       	push   0xc0020803
c000fa02:	55                   	push   ebp
c000fa03:	e8 38 0e ff ff       	call   c0000840 <strcmp>
c000fa08:	83 c4 10             	add    esp,0x10
c000fa0b:	85 c0                	test   eax,eax
c000fa0d:	74 16                	je     c000fa25 <CPU::detectFeatures()+0x1eb>
c000fa0f:	50                   	push   eax
c000fa10:	50                   	push   eax
c000fa11:	68 10 08 02 c0       	push   0xc0020810
c000fa16:	55                   	push   ebp
c000fa17:	e8 24 0e ff ff       	call   c0000840 <strcmp>
c000fa1c:	83 c4 10             	add    esp,0x10
c000fa1f:	85 c0                	test   eax,eax
c000fa21:	74 48                	je     c000fa6b <CPU::detectFeatures()+0x231>
c000fa23:	eb 0f                	jmp    c000fa34 <CPU::detectFeatures()+0x1fa>
c000fa25:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa2f:	e9 c1 01 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fa34:	50                   	push   eax
c000fa35:	50                   	push   eax
c000fa36:	68 1d 08 02 c0       	push   0xc002081d
c000fa3b:	55                   	push   ebp
c000fa3c:	e8 ff 0d ff ff       	call   c0000840 <strcmp>
c000fa41:	83 c4 10             	add    esp,0x10
c000fa44:	85 c0                	test   eax,eax
c000fa46:	74 23                	je     c000fa6b <CPU::detectFeatures()+0x231>
c000fa48:	57                   	push   edi
c000fa49:	57                   	push   edi
c000fa4a:	68 2a 08 02 c0       	push   0xc002082a
c000fa4f:	55                   	push   ebp
c000fa50:	e8 eb 0d ff ff       	call   c0000840 <strcmp>
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	85 c0                	test   eax,eax
c000fa5a:	75 1e                	jne    c000fa7a <CPU::detectFeatures()+0x240>
c000fa5c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa66:	e9 8a 01 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fa6b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa75:	e9 7b 01 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fa7a:	56                   	push   esi
c000fa7b:	56                   	push   esi
c000fa7c:	68 37 08 02 c0       	push   0xc0020837
c000fa81:	55                   	push   ebp
c000fa82:	e8 b9 0d ff ff       	call   c0000840 <strcmp>
c000fa87:	83 c4 10             	add    esp,0x10
c000fa8a:	85 c0                	test   eax,eax
c000fa8c:	75 0f                	jne    c000fa9d <CPU::detectFeatures()+0x263>
c000fa8e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000fa98:	e9 58 01 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fa9d:	51                   	push   ecx
c000fa9e:	51                   	push   ecx
c000fa9f:	68 f6 07 02 c0       	push   0xc00207f6
c000faa4:	55                   	push   ebp
c000faa5:	e8 96 0d ff ff       	call   c0000840 <strcmp>
c000faaa:	83 c4 10             	add    esp,0x10
c000faad:	85 c0                	test   eax,eax
c000faaf:	75 0f                	jne    c000fac0 <CPU::detectFeatures()+0x286>
c000fab1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fabb:	e9 35 01 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fac0:	52                   	push   edx
c000fac1:	52                   	push   edx
c000fac2:	68 44 08 02 c0       	push   0xc0020844
c000fac7:	55                   	push   ebp
c000fac8:	e8 73 0d ff ff       	call   c0000840 <strcmp>
c000facd:	83 c4 10             	add    esp,0x10
c000fad0:	85 c0                	test   eax,eax
c000fad2:	75 0f                	jne    c000fae3 <CPU::detectFeatures()+0x2a9>
c000fad4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000fade:	e9 12 01 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fae3:	50                   	push   eax
c000fae4:	50                   	push   eax
c000fae5:	68 51 08 02 c0       	push   0xc0020851
c000faea:	55                   	push   ebp
c000faeb:	e8 50 0d ff ff       	call   c0000840 <strcmp>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	85 c0                	test   eax,eax
c000faf5:	75 0f                	jne    c000fb06 <CPU::detectFeatures()+0x2cc>
c000faf7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb01:	e9 ef 00 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fb06:	50                   	push   eax
c000fb07:	50                   	push   eax
c000fb08:	68 5e 08 02 c0       	push   0xc002085e
c000fb0d:	55                   	push   ebp
c000fb0e:	e8 2d 0d ff ff       	call   c0000840 <strcmp>
c000fb13:	83 c4 10             	add    esp,0x10
c000fb16:	85 c0                	test   eax,eax
c000fb18:	75 0f                	jne    c000fb29 <CPU::detectFeatures()+0x2ef>
c000fb1a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb24:	e9 cc 00 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fb29:	50                   	push   eax
c000fb2a:	50                   	push   eax
c000fb2b:	68 6b 08 02 c0       	push   0xc002086b
c000fb30:	55                   	push   ebp
c000fb31:	e8 0a 0d ff ff       	call   c0000840 <strcmp>
c000fb36:	83 c4 10             	add    esp,0x10
c000fb39:	85 c0                	test   eax,eax
c000fb3b:	75 0f                	jne    c000fb4c <CPU::detectFeatures()+0x312>
c000fb3d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb47:	e9 a9 00 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fb4c:	50                   	push   eax
c000fb4d:	50                   	push   eax
c000fb4e:	68 78 08 02 c0       	push   0xc0020878
c000fb53:	55                   	push   ebp
c000fb54:	e8 e7 0c ff ff       	call   c0000840 <strcmp>
c000fb59:	83 c4 10             	add    esp,0x10
c000fb5c:	85 c0                	test   eax,eax
c000fb5e:	75 0f                	jne    c000fb6f <CPU::detectFeatures()+0x335>
c000fb60:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb6a:	e9 86 00 00 00       	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fb6f:	50                   	push   eax
c000fb70:	50                   	push   eax
c000fb71:	68 85 08 02 c0       	push   0xc0020885
c000fb76:	55                   	push   ebp
c000fb77:	e8 c4 0c ff ff       	call   c0000840 <strcmp>
c000fb7c:	83 c4 10             	add    esp,0x10
c000fb7f:	85 c0                	test   eax,eax
c000fb81:	75 0c                	jne    c000fb8f <CPU::detectFeatures()+0x355>
c000fb83:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fb8d:	eb 66                	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fb8f:	50                   	push   eax
c000fb90:	50                   	push   eax
c000fb91:	68 92 08 02 c0       	push   0xc0020892
c000fb96:	55                   	push   ebp
c000fb97:	e8 a4 0c ff ff       	call   c0000840 <strcmp>
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	85 c0                	test   eax,eax
c000fba1:	75 0c                	jne    c000fbaf <CPU::detectFeatures()+0x375>
c000fba3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbad:	eb 46                	jmp    c000fbf5 <CPU::detectFeatures()+0x3bb>
c000fbaf:	57                   	push   edi
c000fbb0:	57                   	push   edi
c000fbb1:	68 9f 08 02 c0       	push   0xc002089f
c000fbb6:	55                   	push   ebp
c000fbb7:	e8 84 0c ff ff       	call   c0000840 <strcmp>
c000fbbc:	83 c4 10             	add    esp,0x10
c000fbbf:	85 c0                	test   eax,eax
c000fbc1:	74 e0                	je     c000fba3 <CPU::detectFeatures()+0x369>
c000fbc3:	56                   	push   esi
c000fbc4:	56                   	push   esi
c000fbc5:	68 ac 08 02 c0       	push   0xc00208ac
c000fbca:	55                   	push   ebp
c000fbcb:	e8 70 0c ff ff       	call   c0000840 <strcmp>
c000fbd0:	83 c4 10             	add    esp,0x10
c000fbd3:	85 c0                	test   eax,eax
c000fbd5:	74 cc                	je     c000fba3 <CPU::detectFeatures()+0x369>
c000fbd7:	51                   	push   ecx
c000fbd8:	51                   	push   ecx
c000fbd9:	68 b9 08 02 c0       	push   0xc00208b9
c000fbde:	55                   	push   ebp
c000fbdf:	e8 5c 0c ff ff       	call   c0000840 <strcmp>
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	85 c0                	test   eax,eax
c000fbe9:	74 b8                	je     c000fba3 <CPU::detectFeatures()+0x369>
c000fbeb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fbf5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fbfa:	0f 86 ac 00 00 00    	jbe    c000fcac <CPU::detectFeatures()+0x472>
c000fc00:	83 ec 0c             	sub    esp,0xc
c000fc03:	68 80 00 00 00       	push   0x80
c000fc08:	e8 4d fb ff ff       	call   c000f75a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc0d:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fc13:	80 e2 bf             	and    dl,0xbf
c000fc16:	24 01                	and    al,0x1
c000fc18:	c0 e0 06             	shl    al,0x6
c000fc1b:	08 c2                	or     dl,al
c000fc1d:	88 93 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],dl
c000fc23:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc2a:	e8 2b fb ff ff       	call   c000f75a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc2f:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fc35:	80 e2 ef             	and    dl,0xef
c000fc38:	24 01                	and    al,0x1
c000fc3a:	c0 e0 04             	shl    al,0x4
c000fc3d:	08 c2                	or     dl,al
c000fc3f:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fc45:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc4c:	e8 09 fb ff ff       	call   c000f75a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc51:	8a 93 8c 11 00 00    	mov    dl,BYTE PTR [ebx+0x118c]
c000fc57:	80 e2 7f             	and    dl,0x7f
c000fc5a:	c0 e0 07             	shl    al,0x7
c000fc5d:	08 d0                	or     al,dl
c000fc5f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc65:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc6c:	e8 17 fb ff ff       	call   c000f788 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc71:	8a 93 8d 11 00 00    	mov    dl,BYTE PTR [ebx+0x118d]
c000fc77:	80 e2 f7             	and    dl,0xf7
c000fc7a:	24 01                	and    al,0x1
c000fc7c:	c0 e0 03             	shl    al,0x3
c000fc7f:	08 c2                	or     dl,al
c000fc81:	88 93 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],dl
c000fc87:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fc8e:	e8 f5 fa ff ff       	call   c000f788 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc93:	8a 93 8e 11 00 00    	mov    dl,BYTE PTR [ebx+0x118e]
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	80 e2 fb             	and    dl,0xfb
c000fc9f:	24 01                	and    al,0x1
c000fca1:	c0 e0 02             	shl    al,0x2
c000fca4:	08 c2                	or     dl,al
c000fca6:	88 93 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],dl
c000fcac:	83 ec 0c             	sub    esp,0xc
c000fcaf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcb3:	50                   	push   eax
c000fcb4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcb8:	50                   	push   eax
c000fcb9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcbd:	56                   	push   esi
c000fcbe:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcc2:	50                   	push   eax
c000fcc3:	6a 01                	push   0x1
c000fcc5:	e8 b0 f9 ff ff       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcce:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fcd4:	88 c1                	mov    cl,al
c000fcd6:	80 e1 0f             	and    cl,0xf
c000fcd9:	80 e2 f0             	and    dl,0xf0
c000fcdc:	08 ca                	or     dl,cl
c000fcde:	88 c1                	mov    cl,al
c000fce0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fce6:	c0 e9 04             	shr    cl,0x4
c000fce9:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c000fced:	0f b6 d1             	movzx  edx,cl
c000fcf0:	89 d1                	mov    ecx,edx
c000fcf2:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fcf8:	c1 e1 06             	shl    ecx,0x6
c000fcfb:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd01:	09 ca                	or     edx,ecx
c000fd03:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd0a:	89 c2                	mov    edx,eax
c000fd0c:	c1 ea 08             	shr    edx,0x8
c000fd0f:	88 d1                	mov    cl,dl
c000fd11:	c0 e2 06             	shl    dl,0x6
c000fd14:	80 e1 0f             	and    cl,0xf
c000fd17:	88 4c 24 2e          	mov    BYTE PTR [esp+0x2e],cl
c000fd1b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd21:	80 e1 3f             	and    cl,0x3f
c000fd24:	08 ca                	or     dl,cl
c000fd26:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fd2c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fd32:	8a 4c 24 2e          	mov    cl,BYTE PTR [esp+0x2e]
c000fd36:	83 c4 20             	add    esp,0x20
c000fd39:	80 e2 c0             	and    dl,0xc0
c000fd3c:	c0 e9 02             	shr    cl,0x2
c000fd3f:	08 ca                	or     dl,cl
c000fd41:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd47:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000fd4d:	89 c2                	mov    edx,eax
c000fd4f:	c1 ea 0c             	shr    edx,0xc
c000fd52:	80 e2 03             	and    dl,0x3
c000fd55:	c0 e2 04             	shl    dl,0x4
c000fd58:	80 e1 cf             	and    cl,0xcf
c000fd5b:	08 ca                	or     dl,cl
c000fd5d:	80 7c 24 0e 06       	cmp    BYTE PTR [esp+0xe],0x6
c000fd62:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd68:	74 07                	je     c000fd71 <CPU::detectFeatures()+0x537>
c000fd6a:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fd6f:	75 5f                	jne    c000fdd0 <CPU::detectFeatures()+0x596>
c000fd71:	89 c2                	mov    edx,eax
c000fd73:	c1 ea 10             	shr    edx,0x10
c000fd76:	c0 e2 04             	shl    dl,0x4
c000fd79:	0a 54 24 0f          	or     dl,BYTE PTR [esp+0xf]
c000fd7d:	0f b6 d2             	movzx  edx,dl
c000fd80:	89 d7                	mov    edi,edx
c000fd82:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd88:	c1 e7 06             	shl    edi,0x6
c000fd8b:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd91:	09 fa                	or     edx,edi
c000fd93:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd9a:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c000fd9f:	75 2f                	jne    c000fdd0 <CPU::detectFeatures()+0x596>
c000fda1:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fda7:	c1 e8 14             	shr    eax,0x14
c000fdaa:	04 0f                	add    al,0xf
c000fdac:	88 c1                	mov    cl,al
c000fdae:	c0 e1 06             	shl    cl,0x6
c000fdb1:	c0 e8 02             	shr    al,0x2
c000fdb4:	80 e2 3f             	and    dl,0x3f
c000fdb7:	08 ca                	or     dl,cl
c000fdb9:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fdbf:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fdc5:	80 e2 c0             	and    dl,0xc0
c000fdc8:	08 d0                	or     al,dl
c000fdca:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fdd0:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000fdd7:	83 ec 0c             	sub    esp,0xc
c000fdda:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fdde:	50                   	push   eax
c000fddf:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fde3:	55                   	push   ebp
c000fde4:	56                   	push   esi
c000fde5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fde9:	57                   	push   edi
c000fdea:	68 00 00 00 80       	push   0x80000000
c000fdef:	e8 86 f8 ff ff       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fdf4:	83 c4 20             	add    esp,0x20
c000fdf7:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fdff:	76 22                	jbe    c000fe23 <CPU::detectFeatures()+0x5e9>
c000fe01:	83 ec 0c             	sub    esp,0xc
c000fe04:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe08:	50                   	push   eax
c000fe09:	55                   	push   ebp
c000fe0a:	56                   	push   esi
c000fe0b:	57                   	push   edi
c000fe0c:	68 01 00 00 80       	push   0x80000001
c000fe11:	e8 64 f8 ff ff       	call   c000f67a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe16:	83 c4 20             	add    esp,0x20
c000fe19:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe23:	52                   	push   edx
c000fe24:	52                   	push   edx
c000fe25:	68 c5 08 02 c0       	push   0xc00208c5
c000fe2a:	53                   	push   ebx
c000fe2b:	e8 3a c2 ff ff       	call   c000c06a <Device::setName(char const*)>
c000fe30:	83 c4 10             	add    esp,0x10
c000fe33:	eb 64                	jmp    c000fe99 <CPU::detectFeatures()+0x65f>
c000fe35:	50                   	push   eax
c000fe36:	50                   	push   eax
c000fe37:	68 2a 08 02 c0       	push   0xc002082a
c000fe3c:	55                   	push   ebp
c000fe3d:	e8 de 08 ff ff       	call   c0000720 <strcpy>
c000fe42:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe4c:	e8 72 03 ff ff       	call   c00001c3 <is486>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	85 c0                	test   eax,eax
c000fe56:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe5c:	74 1c                	je     c000fe7a <CPU::detectFeatures()+0x640>
c000fe5e:	0c 07                	or     al,0x7
c000fe60:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe66:	0f 20 c0             	mov    eax,cr0
c000fe69:	83 e0 14             	and    eax,0x14
c000fe6c:	83 f8 04             	cmp    eax,0x4
c000fe6f:	75 0d                	jne    c000fe7e <CPU::detectFeatures()+0x644>
c000fe71:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fe78:	eb 1f                	jmp    c000fe99 <CPU::detectFeatures()+0x65f>
c000fe7a:	24 f8                	and    al,0xf8
c000fe7c:	eb e2                	jmp    c000fe60 <CPU::detectFeatures()+0x626>
c000fe7e:	e8 1b 03 ff ff       	call   c000019e <hasLegacyFPU>
c000fe83:	24 01                	and    al,0x1
c000fe85:	00 c0                	add    al,al
c000fe87:	88 c2                	mov    dl,al
c000fe89:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe8f:	24 fd                	and    al,0xfd
c000fe91:	08 d0                	or     al,dl
c000fe93:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fe99:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fea0:	74 0e                	je     c000feb0 <CPU::detectFeatures()+0x676>
c000fea2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000fea7:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000feae:	eb 1f                	jmp    c000fecf <CPU::detectFeatures()+0x695>
c000feb0:	e8 e9 02 ff ff       	call   c000019e <hasLegacyFPU>
c000feb5:	24 01                	and    al,0x1
c000feb7:	00 c0                	add    al,al
c000feb9:	88 c2                	mov    dl,al
c000febb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fec1:	24 fd                	and    al,0xfd
c000fec3:	08 d0                	or     al,dl
c000fec5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fecb:	24 02                	and    al,0x2
c000fecd:	75 d3                	jne    c000fea2 <CPU::detectFeatures()+0x668>
c000fecf:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fed6:	83 c4 2c             	add    esp,0x2c
c000fed9:	5b                   	pop    ebx
c000feda:	5e                   	pop    esi
c000fedb:	5f                   	pop    edi
c000fedc:	5d                   	pop    ebp
c000fedd:	c3                   	ret    

c000fede <CPU::setupSMEP()>:
c000fede:	0f 20 e0             	mov    eax,cr4
c000fee1:	0d 00 00 10 00       	or     eax,0x100000
c000fee6:	0f 22 e0             	mov    cr4,eax
c000fee9:	c3                   	ret    

c000feea <CPU::setupUMIP()>:
c000feea:	0f 20 e0             	mov    eax,cr4
c000feed:	80 cc 08             	or     ah,0x8
c000fef0:	0f 22 e0             	mov    cr4,eax
c000fef3:	c3                   	ret    

c000fef4 <CPU::setupTSC()>:
c000fef4:	0f 20 e0             	mov    eax,cr4
c000fef7:	83 c8 04             	or     eax,0x4
c000fefa:	0f 22 e0             	mov    cr4,eax
c000fefd:	c3                   	ret    

c000fefe <CPU::setupLargePages()>:
c000fefe:	0f 20 e0             	mov    eax,cr4
c000ff01:	83 c8 10             	or     eax,0x10
c000ff04:	0f 22 e0             	mov    cr4,eax
c000ff07:	c3                   	ret    

c000ff08 <CPU::setupPAT()>:
c000ff08:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff0d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff14:	74 39                	je     c000ff4f <CPU::setupPAT()+0x47>
c000ff16:	57                   	push   edi
c000ff17:	56                   	push   esi
c000ff18:	53                   	push   ebx
c000ff19:	31 db                	xor    ebx,ebx
c000ff1b:	52                   	push   edx
c000ff1c:	52                   	push   edx
c000ff1d:	68 77 02 00 00       	push   0x277
c000ff22:	50                   	push   eax
c000ff23:	e8 98 71 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c000ff28:	83 e2 f8             	and    edx,0xfffffff8
c000ff2b:	89 c1                	mov    ecx,eax
c000ff2d:	83 ca 01             	or     edx,0x1
c000ff30:	31 c0                	xor    eax,eax
c000ff32:	09 da                	or     edx,ebx
c000ff34:	09 c8                	or     eax,ecx
c000ff36:	52                   	push   edx
c000ff37:	50                   	push   eax
c000ff38:	68 77 02 00 00       	push   0x277
c000ff3d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff43:	e8 a0 71 ff ff       	call   c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff48:	83 c4 20             	add    esp,0x20
c000ff4b:	5b                   	pop    ebx
c000ff4c:	5e                   	pop    esi
c000ff4d:	5f                   	pop    edi
c000ff4e:	c3                   	ret    
c000ff4f:	c3                   	ret    

c000ff50 <CPU::setupMTRR()>:
c000ff50:	c3                   	ret    
c000ff51:	90                   	nop

c000ff52 <CPU::setupGlobalPages()>:
c000ff52:	0f 20 e0             	mov    eax,cr4
c000ff55:	0c 80                	or     al,0x80
c000ff57:	0f 22 e0             	mov    cr4,eax
c000ff5a:	c3                   	ret    
c000ff5b:	90                   	nop

c000ff5c <CPU::allowUsermodeDataAccess()>:
c000ff5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff60:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff67:	74 03                	je     c000ff6c <CPU::allowUsermodeDataAccess()+0x10>
c000ff69:	0f 01 cb             	stac   
c000ff6c:	c3                   	ret    
c000ff6d:	90                   	nop

c000ff6e <CPU::prohibitUsermodeDataAccess()>:
c000ff6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff72:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff79:	74 03                	je     c000ff7e <CPU::prohibitUsermodeDataAccess()+0x10>
c000ff7b:	0f 01 ca             	clac   
c000ff7e:	c3                   	ret    
c000ff7f:	90                   	nop

c000ff80 <CPU::setupSMAP()>:
c000ff80:	0f 20 e0             	mov    eax,cr4
c000ff83:	0d 00 00 20 00       	or     eax,0x200000
c000ff88:	0f 22 e0             	mov    cr4,eax
c000ff8b:	eb e1                	jmp    c000ff6e <CPU::prohibitUsermodeDataAccess()>
c000ff8d:	90                   	nop

c000ff8e <CPU::setupFeatures()>:
c000ff8e:	53                   	push   ebx
c000ff8f:	83 ec 08             	sub    esp,0x8
c000ff92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff96:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ff9d:	74 18                	je     c000ffb7 <CPU::setupFeatures()+0x29>
c000ff9f:	83 ec 0c             	sub    esp,0xc
c000ffa2:	68 d1 08 02 c0       	push   0xc00208d1
c000ffa7:	e8 ca aa ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000ffac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffaf:	e8 36 ff ff ff       	call   c000feea <CPU::setupUMIP()>
c000ffb4:	83 c4 10             	add    esp,0x10
c000ffb7:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffbe:	74 18                	je     c000ffd8 <CPU::setupFeatures()+0x4a>
c000ffc0:	83 ec 0c             	sub    esp,0xc
c000ffc3:	68 db 08 02 c0       	push   0xc00208db
c000ffc8:	e8 a9 aa ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000ffcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd0:	e8 1f ff ff ff       	call   c000fef4 <CPU::setupTSC()>
c000ffd5:	83 c4 10             	add    esp,0x10
c000ffd8:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000ffdf:	74 18                	je     c000fff9 <CPU::setupFeatures()+0x6b>
c000ffe1:	83 ec 0c             	sub    esp,0xc
c000ffe4:	68 e4 08 02 c0       	push   0xc00208e4
c000ffe9:	e8 88 aa ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c000ffee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fff1:	e8 08 ff ff ff       	call   c000fefe <CPU::setupLargePages()>
c000fff6:	83 c4 10             	add    esp,0x10
c000fff9:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010000:	74 18                	je     c001001a <CPU::setupFeatures()+0x8c>
c0010002:	83 ec 0c             	sub    esp,0xc
c0010005:	68 ed 08 02 c0       	push   0xc00208ed
c001000a:	e8 67 aa ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001000f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010012:	e8 3b ff ff ff       	call   c000ff52 <CPU::setupGlobalPages()>
c0010017:	83 c4 10             	add    esp,0x10
c001001a:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010021:	74 18                	je     c001003b <CPU::setupFeatures()+0xad>
c0010023:	83 ec 0c             	sub    esp,0xc
c0010026:	68 ff 08 02 c0       	push   0xc00208ff
c001002b:	e8 46 aa ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0010030:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010033:	e8 d0 fe ff ff       	call   c000ff08 <CPU::setupPAT()>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010042:	74 11                	je     c0010055 <CPU::setupFeatures()+0xc7>
c0010044:	c7 44 24 10 08 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020908
c001004c:	83 c4 08             	add    esp,0x8
c001004f:	5b                   	pop    ebx
c0010050:	e9 21 aa ff ff       	jmp    c000aa76 <Dbg::kprintf(char const*, ...)>
c0010055:	83 c4 08             	add    esp,0x8
c0010058:	5b                   	pop    ebx
c0010059:	c3                   	ret    

c001005a <CPU::open(int, int, void*)>:
c001005a:	57                   	push   edi
c001005b:	56                   	push   esi
c001005c:	53                   	push   ebx
c001005d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010061:	83 ec 0c             	sub    esp,0xc
c0010064:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010068:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001006e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0010074:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001007a:	50                   	push   eax
c001007b:	e8 7e 73 ff ff       	call   c00073fe <GDT::setup()>
c0010080:	83 c4 0c             	add    esp,0xc
c0010083:	6a 00                	push   0x0
c0010085:	68 ef be ad de       	push   0xdeadbeef
c001008a:	57                   	push   edi
c001008b:	e8 30 8f ff ff       	call   c0008fc0 <TSS::setup(unsigned long, unsigned long)>
c0010090:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010093:	e8 04 8f ff ff       	call   c0008f9c <TSS::flush()>
c0010098:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001009e:	89 04 24             	mov    DWORD PTR [esp],eax
c00100a1:	e8 a6 75 ff ff       	call   c000764c <IDT::setup()>
c00100a6:	b8 00 04 00 00       	mov    eax,0x400
c00100ab:	0f 23 f8             	mov    db7,eax
c00100ae:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100b8:	e8 4f 7d ff ff       	call   c0007e0c <Phys::allocatePage()>
c00100bd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100c3:	89 30                	mov    DWORD PTR [eax],esi
c00100c5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100cb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100ce:	58                   	pop    eax
c00100cf:	5a                   	pop    edx
c00100d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00100d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00100da:	e8 75 9f ff ff       	call   c000a054 <VAS::setCPUSpecific(unsigned long)>
c00100df:	c7 04 24 12 09 02 c0 	mov    DWORD PTR [esp],0xc0020912
c00100e6:	e8 c6 00 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c00100eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100ee:	e8 47 f7 ff ff       	call   c000f83a <CPU::detectFeatures()>
c00100f3:	c7 04 24 35 09 02 c0 	mov    DWORD PTR [esp],0xc0020935
c00100fa:	e8 b2 00 00 00       	call   c00101b1 <KeSetBootMessage(char const*)>
c00100ff:	e8 dd 6e 00 00       	call   c0016fe1 <HalInitialise()>
c0010104:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010109:	83 e0 10             	and    eax,0x10
c001010c:	83 f8 01             	cmp    eax,0x1
c001010f:	19 c0                	sbb    eax,eax
c0010111:	83 e0 46             	and    eax,0x46
c0010114:	83 c0 1e             	add    eax,0x1e
c0010117:	89 04 24             	mov    DWORD PTR [esp],eax
c001011a:	e8 30 d7 ff ff       	call   c000d84f <setupTimer(int)>
c001011f:	83 c4 10             	add    esp,0x10
c0010122:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010129:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001012f:	74 0c                	je     c001013d <CPU::open(int, int, void*)+0xe3>
c0010131:	83 ec 0c             	sub    esp,0xc
c0010134:	53                   	push   ebx
c0010135:	e8 54 fe ff ff       	call   c000ff8e <CPU::setupFeatures()>
c001013a:	83 c4 10             	add    esp,0x10
c001013d:	5b                   	pop    ebx
c001013e:	31 c0                	xor    eax,eax
c0010140:	5e                   	pop    esi
c0010141:	5f                   	pop    edi
c0010142:	c3                   	ret    

c0010143 <KeDisplaySplashScreen()>:
c0010143:	55                   	push   ebp
c0010144:	bd 05 00 00 00       	mov    ebp,0x5
c0010149:	57                   	push   edi
c001014a:	bf e0 1c 02 c0       	mov    edi,0xc0021ce0
c001014f:	56                   	push   esi
c0010150:	be 0a 00 00 00       	mov    esi,0xa
c0010155:	53                   	push   ebx
c0010156:	31 db                	xor    ebx,ebx
c0010158:	83 ec 0c             	sub    esp,0xc
c001015b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001015e:	84 c0                	test   al,al
c0010160:	74 47                	je     c00101a9 <KeDisplaySplashScreen()+0x66>
c0010162:	80 bb 16 1d 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde2ea],0xdb
c0010169:	75 13                	jne    c001017e <KeDisplaySplashScreen()+0x3b>
c001016b:	0f b6 93 15 1d 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde2eb]
c0010172:	83 e2 fe             	and    edx,0xfffffffe
c0010175:	81 fa ba 00 00 00    	cmp    edx,0xba
c001017b:	75 01                	jne    c001017e <KeDisplaySplashScreen()+0x3b>
c001017d:	46                   	inc    esi
c001017e:	3c 0d                	cmp    al,0xd
c0010180:	74 24                	je     c00101a6 <KeDisplaySplashScreen()+0x63>
c0010182:	3c 0a                	cmp    al,0xa
c0010184:	75 0a                	jne    c0010190 <KeDisplaySplashScreen()+0x4d>
c0010186:	45                   	inc    ebp
c0010187:	be 0a 00 00 00       	mov    esi,0xa
c001018c:	31 db                	xor    ebx,ebx
c001018e:	eb 16                	jmp    c00101a6 <KeDisplaySplashScreen()+0x63>
c0010190:	8d 14 33             	lea    edx,[ebx+esi*1]
c0010193:	83 ec 0c             	sub    esp,0xc
c0010196:	55                   	push   ebp
c0010197:	43                   	inc    ebx
c0010198:	52                   	push   edx
c0010199:	6a 00                	push   0x0
c001019b:	6a 0e                	push   0xe
c001019d:	50                   	push   eax
c001019e:	e8 e1 7a 00 00       	call   c0017c84 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101a3:	83 c4 20             	add    esp,0x20
c00101a6:	47                   	inc    edi
c00101a7:	eb b2                	jmp    c001015b <KeDisplaySplashScreen()+0x18>
c00101a9:	83 c4 0c             	add    esp,0xc
c00101ac:	5b                   	pop    ebx
c00101ad:	5e                   	pop    esi
c00101ae:	5f                   	pop    edi
c00101af:	5d                   	pop    ebp
c00101b0:	c3                   	ret    

c00101b1 <KeSetBootMessage(char const*)>:
c00101b1:	57                   	push   edi
c00101b2:	56                   	push   esi
c00101b3:	53                   	push   ebx
c00101b4:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101ba:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101c1:	68 9e 00 00 00       	push   0x9e
c00101c6:	6a 00                	push   0x0
c00101c8:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101cc:	56                   	push   esi
c00101cd:	e8 ae 03 ff ff       	call   c0000580 <memset>
c00101d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00101d5:	e8 46 04 ff ff       	call   c0000620 <strlen>
c00101da:	ba 50 00 00 00       	mov    edx,0x50
c00101df:	83 c4 10             	add    esp,0x10
c00101e2:	31 c9                	xor    ecx,ecx
c00101e4:	29 c2                	sub    edx,eax
c00101e6:	83 e2 fe             	and    edx,0xfffffffe
c00101e9:	01 f2                	add    edx,esi
c00101eb:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c00101f0:	84 c0                	test   al,al
c00101f2:	74 0a                	je     c00101fe <KeSetBootMessage(char const*)+0x4d>
c00101f4:	80 cc 0f             	or     ah,0xf
c00101f7:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c00101fb:	41                   	inc    ecx
c00101fc:	eb ed                	jmp    c00101eb <KeSetBootMessage(char const*)+0x3a>
c00101fe:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010203:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010208:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001020a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010210:	5b                   	pop    ebx
c0010211:	5e                   	pop    esi
c0010212:	5f                   	pop    edi
c0010213:	c3                   	ret    

c0010214 <EnvVarContainer::getEnv(char const*)>:
c0010214:	57                   	push   edi
c0010215:	56                   	push   esi
c0010216:	53                   	push   ebx
c0010217:	31 db                	xor    ebx,ebx
c0010219:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001021d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001021f:	7e 2b                	jle    c001024c <EnvVarContainer::getEnv(char const*)+0x38>
c0010221:	50                   	push   eax
c0010222:	50                   	push   eax
c0010223:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010226:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001022d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010230:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010234:	e8 07 06 ff ff       	call   c0000840 <strcmp>
c0010239:	83 c4 10             	add    esp,0x10
c001023c:	85 c0                	test   eax,eax
c001023e:	75 09                	jne    c0010249 <EnvVarContainer::getEnv(char const*)+0x35>
c0010240:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010243:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010247:	eb 05                	jmp    c001024e <EnvVarContainer::getEnv(char const*)+0x3a>
c0010249:	43                   	inc    ebx
c001024a:	eb d1                	jmp    c001021d <EnvVarContainer::getEnv(char const*)+0x9>
c001024c:	31 c0                	xor    eax,eax
c001024e:	5b                   	pop    ebx
c001024f:	5e                   	pop    esi
c0010250:	5f                   	pop    edi
c0010251:	c3                   	ret    

c0010252 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010252:	55                   	push   ebp
c0010253:	57                   	push   edi
c0010254:	56                   	push   esi
c0010255:	53                   	push   ebx
c0010256:	83 ec 28             	sub    esp,0x28
c0010259:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001025d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010261:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010265:	56                   	push   esi
c0010266:	e8 b5 03 ff ff       	call   c0000620 <strlen>
c001026b:	40                   	inc    eax
c001026c:	89 04 24             	mov    DWORD PTR [esp],eax
c001026f:	e8 88 78 ff ff       	call   c0007afc <malloc>
c0010274:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010277:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001027b:	e8 a0 03 ff ff       	call   c0000620 <strlen>
c0010280:	40                   	inc    eax
c0010281:	89 04 24             	mov    DWORD PTR [esp],eax
c0010284:	e8 73 78 ff ff       	call   c0007afc <malloc>
c0010289:	89 34 24             	mov    DWORD PTR [esp],esi
c001028c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010290:	e8 8b 03 ff ff       	call   c0000620 <strlen>
c0010295:	83 c4 0c             	add    esp,0xc
c0010298:	40                   	inc    eax
c0010299:	50                   	push   eax
c001029a:	6a 00                	push   0x0
c001029c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102a0:	e8 db 02 ff ff       	call   c0000580 <memset>
c00102a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00102a8:	e8 73 03 ff ff       	call   c0000620 <strlen>
c00102ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102b1:	8d 48 01             	lea    ecx,[eax+0x1]
c00102b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102b9:	89 de                	mov    esi,ebx
c00102bb:	e8 60 03 ff ff       	call   c0000620 <strlen>
c00102c0:	83 c4 0c             	add    esp,0xc
c00102c3:	40                   	inc    eax
c00102c4:	50                   	push   eax
c00102c5:	6a 00                	push   0x0
c00102c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102cb:	e8 b0 02 ff ff       	call   c0000580 <memset>
c00102d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102d3:	e8 48 03 ff ff       	call   c0000620 <strlen>
c00102d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102dc:	8d 48 01             	lea    ecx,[eax+0x1]
c00102df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00102e4:	40                   	inc    eax
c00102e5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00102e8:	c1 e0 03             	shl    eax,0x3
c00102eb:	5a                   	pop    edx
c00102ec:	59                   	pop    ecx
c00102ed:	50                   	push   eax
c00102ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00102f1:	e8 eb 77 ff ff       	call   c0007ae1 <realloc>
c00102f6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00102f9:	8d 74 24 18          	lea    esi,[esp+0x18]
c00102fd:	b9 08 00 00 00       	mov    ecx,0x8
c0010302:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010305:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010309:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001030b:	83 c4 2c             	add    esp,0x2c
c001030e:	5b                   	pop    ebx
c001030f:	5e                   	pop    esi
c0010310:	5f                   	pop    edi
c0010311:	5d                   	pop    ebp
c0010312:	c3                   	ret    
c0010313:	90                   	nop

c0010314 <EnvVarContainer::deleteEnv(char const*)>:
c0010314:	c3                   	ret    
c0010315:	90                   	nop

c0010316 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010316:	55                   	push   ebp
c0010317:	57                   	push   edi
c0010318:	56                   	push   esi
c0010319:	53                   	push   ebx
c001031a:	81 ec 38 01 00 00    	sub    esp,0x138
c0010320:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010327:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001032e:	68 14 01 00 00       	push   0x114
c0010333:	e8 c4 77 ff ff       	call   c0007afc <malloc>
c0010338:	83 c4 0c             	add    esp,0xc
c001033b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001033e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010345:	89 c3                	mov    ebx,eax
c0010347:	50                   	push   eax
c0010348:	e8 ab ac ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001034d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010350:	e8 c9 af ff ff       	call   c000b31e <File::exists()>
c0010355:	83 c4 10             	add    esp,0x10
c0010358:	84 c0                	test   al,al
c001035a:	75 31                	jne    c001038d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001035c:	50                   	push   eax
c001035d:	50                   	push   eax
c001035e:	6a 12                	push   0x12
c0010360:	53                   	push   ebx
c0010361:	e8 50 ad ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0010366:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010368:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001036b:	89 34 24             	mov    DWORD PTR [esp],esi
c001036e:	e8 ad 02 ff ff       	call   c0000620 <strlen>
c0010373:	5a                   	pop    edx
c0010374:	31 d2                	xor    edx,edx
c0010376:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001037a:	51                   	push   ecx
c001037b:	56                   	push   esi
c001037c:	52                   	push   edx
c001037d:	50                   	push   eax
c001037e:	53                   	push   ebx
c001037f:	ff d7                	call   edi
c0010381:	83 c4 14             	add    esp,0x14
c0010384:	53                   	push   ebx
c0010385:	e8 8a ad ff ff       	call   c000b114 <File::close()>
c001038a:	83 c4 10             	add    esp,0x10
c001038d:	56                   	push   esi
c001038e:	31 f6                	xor    esi,esi
c0010390:	68 00 01 00 00       	push   0x100
c0010395:	6a 00                	push   0x0
c0010397:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001039b:	50                   	push   eax
c001039c:	e8 df 01 ff ff       	call   c0000580 <memset>
c00103a1:	5f                   	pop    edi
c00103a2:	58                   	pop    eax
c00103a3:	6a 01                	push   0x1
c00103a5:	53                   	push   ebx
c00103a6:	e8 0b ad ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c00103ab:	83 c4 10             	add    esp,0x10
c00103ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103b6:	83 ec 0c             	sub    esp,0xc
c00103b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103bf:	51                   	push   ecx
c00103c0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103c4:	52                   	push   edx
c00103c5:	6a 00                	push   0x0
c00103c7:	6a 01                	push   0x1
c00103c9:	53                   	push   ebx
c00103ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103cd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00103d1:	83 c4 20             	add    esp,0x20
c00103d4:	3c 0d                	cmp    al,0xd
c00103d6:	0f 84 09 01 00 00    	je     c00104e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00103dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00103e1:	0f 84 ef 00 00 00    	je     c00104d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103e7:	3c 0a                	cmp    al,0xa
c00103e9:	74 13                	je     c00103fe <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00103eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00103f0:	74 0c                	je     c00103fe <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00103f2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00103f8:	0f 8e d8 00 00 00    	jle    c00104d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00103fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010402:	83 ec 0c             	sub    esp,0xc
c0010405:	8d 78 01             	lea    edi,[eax+0x1]
c0010408:	57                   	push   edi
c0010409:	e8 ee 76 ff ff       	call   c0007afc <malloc>
c001040e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010412:	8d 56 04             	lea    edx,[esi+0x4]
c0010415:	89 14 24             	mov    DWORD PTR [esp],edx
c0010418:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001041c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010420:	e8 d7 76 ff ff       	call   c0007afc <malloc>
c0010425:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010429:	83 c4 0c             	add    esp,0xc
c001042c:	57                   	push   edi
c001042d:	6a 00                	push   0x0
c001042f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010433:	e8 48 01 ff ff       	call   c0000580 <memset>
c0010438:	8d 74 24 30          	lea    esi,[esp+0x30]
c001043c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010440:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010444:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010446:	83 c4 0c             	add    esp,0xc
c0010449:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001044d:	52                   	push   edx
c001044e:	6a 00                	push   0x0
c0010450:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010454:	e8 27 01 ff ff       	call   c0000580 <memset>
c0010459:	8d 74 24 30          	lea    esi,[esp+0x30]
c001045d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010461:	89 34 24             	mov    DWORD PTR [esp],esi
c0010464:	e8 b7 01 ff ff       	call   c0000620 <strlen>
c0010469:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001046d:	89 c1                	mov    ecx,eax
c001046f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010471:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010474:	83 c4 10             	add    esp,0x10
c0010477:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001047a:	40                   	inc    eax
c001047b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001047e:	85 d2                	test   edx,edx
c0010480:	75 0c                	jne    c001048e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010482:	83 ec 0c             	sub    esp,0xc
c0010485:	6a 08                	push   0x8
c0010487:	e8 70 76 ff ff       	call   c0007afc <malloc>
c001048c:	eb 0c                	jmp    c001049a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001048e:	51                   	push   ecx
c001048f:	51                   	push   ecx
c0010490:	c1 e0 03             	shl    eax,0x3
c0010493:	50                   	push   eax
c0010494:	52                   	push   edx
c0010495:	e8 47 76 ff ff       	call   c0007ae1 <realloc>
c001049a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001049d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104a0:	83 c4 10             	add    esp,0x10
c00104a3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104a6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104aa:	b9 08 00 00 00       	mov    ecx,0x8
c00104af:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104b5:	50                   	push   eax
c00104b6:	31 f6                	xor    esi,esi
c00104b8:	68 00 01 00 00       	push   0x100
c00104bd:	6a 00                	push   0x0
c00104bf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104c3:	50                   	push   eax
c00104c4:	e8 b7 00 ff ff       	call   c0000580 <memset>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00104d4:	eb 0f                	jmp    c00104e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00104d6:	3c 3d                	cmp    al,0x3d
c00104d8:	74 07                	je     c00104e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00104da:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00104de:	46                   	inc    esi
c00104df:	eb 04                	jmp    c00104e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00104e1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00104e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00104ea:	0f 85 c6 fe ff ff    	jne    c00103b6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00104f0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00104f6:	5b                   	pop    ebx
c00104f7:	5e                   	pop    esi
c00104f8:	5f                   	pop    edi
c00104f9:	5d                   	pop    ebp
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <EnvVarContainer::__loadSystem()>:
c00104fc:	83 ec 10             	sub    esp,0x10
c00104ff:	68 40 1e 02 c0       	push   0xc0021e40
c0010504:	68 78 09 02 c0       	push   0xc0020978
c0010509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050d:	e8 04 fe ff ff       	call   c0010316 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010512:	83 c4 1c             	add    esp,0x1c
c0010515:	c3                   	ret    

c0010516 <EnvVarContainer::__loadUser()>:
c0010516:	c3                   	ret    
c0010517:	90                   	nop

c0010518 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001051c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010526:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001052a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001052d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010531:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010538:	90                   	nop
c0010539:	c3                   	ret    

c001053a <EnvVarContainer::~EnvVarContainer()>:
c001053a:	83 ec 1c             	sub    esp,0x1c
c001053d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010541:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010544:	85 c0                	test   eax,eax
c0010546:	74 19                	je     c0010561 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001054c:	8b 00                	mov    eax,DWORD PTR [eax]
c001054e:	85 c0                	test   eax,eax
c0010550:	74 0f                	je     c0010561 <EnvVarContainer::~EnvVarContainer()+0x27>
c0010552:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010559:	89 04 24             	mov    DWORD PTR [esp],eax
c001055c:	e8 ae 75 ff ff       	call   c0007b0f <free>
c0010561:	90                   	nop
c0010562:	83 c4 1c             	add    esp,0x1c
c0010565:	c3                   	ret    

c0010566 <Krnl::getEnv(Process*, char const*)>:
c0010566:	53                   	push   ebx
c0010567:	83 ec 08             	sub    esp,0x8
c001056a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001056e:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c0010574:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010578:	74 04                	je     c001057e <Krnl::getEnv(Process*, char const*)+0x18>
c001057a:	85 c0                	test   eax,eax
c001057c:	75 0b                	jne    c0010589 <Krnl::getEnv(Process*, char const*)+0x23>
c001057e:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010583:	85 c0                	test   eax,eax
c0010585:	75 19                	jne    c00105a0 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010587:	eb 27                	jmp    c00105b0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0010589:	52                   	push   edx
c001058a:	52                   	push   edx
c001058b:	53                   	push   ebx
c001058c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010592:	e8 7d fc ff ff       	call   c0010214 <EnvVarContainer::getEnv(char const*)>
c0010597:	83 c4 10             	add    esp,0x10
c001059a:	85 c0                	test   eax,eax
c001059c:	75 28                	jne    c00105c6 <Krnl::getEnv(Process*, char const*)+0x60>
c001059e:	eb de                	jmp    c001057e <Krnl::getEnv(Process*, char const*)+0x18>
c00105a0:	52                   	push   edx
c00105a1:	52                   	push   edx
c00105a2:	53                   	push   ebx
c00105a3:	50                   	push   eax
c00105a4:	e8 6b fc ff ff       	call   c0010214 <EnvVarContainer::getEnv(char const*)>
c00105a9:	83 c4 10             	add    esp,0x10
c00105ac:	85 c0                	test   eax,eax
c00105ae:	75 16                	jne    c00105c6 <Krnl::getEnv(Process*, char const*)+0x60>
c00105b0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105b4:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105bd:	83 c4 08             	add    esp,0x8
c00105c0:	5b                   	pop    ebx
c00105c1:	e9 4e fc ff ff       	jmp    c0010214 <EnvVarContainer::getEnv(char const*)>
c00105c6:	83 c4 08             	add    esp,0x8
c00105c9:	5b                   	pop    ebx
c00105ca:	c3                   	ret    

c00105cb <Krnl::setEnvSystem(char const*, char const*)>:
c00105cb:	83 ec 10             	sub    esp,0x10
c00105ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105d6:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c00105dc:	e8 71 fc ff ff       	call   c0010252 <EnvVarContainer::setEnv(char const*, char const*)>
c00105e1:	83 c4 1c             	add    esp,0x1c
c00105e4:	c3                   	ret    

c00105e5 <Krnl::setEnvUser(char const*, char const*)>:
c00105e5:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105ea:	85 c0                	test   eax,eax
c00105ec:	74 15                	je     c0010603 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00105ee:	83 ec 10             	sub    esp,0x10
c00105f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105f9:	50                   	push   eax
c00105fa:	e8 53 fc ff ff       	call   c0010252 <EnvVarContainer::setEnv(char const*, char const*)>
c00105ff:	83 c4 1c             	add    esp,0x1c
c0010602:	c3                   	ret    
c0010603:	c3                   	ret    

c0010604 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010608:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001060e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010612:	e9 3b fc ff ff       	jmp    c0010252 <EnvVarContainer::setEnv(char const*, char const*)>

c0010617 <Krnl::deleteEnvSystem(char const*)>:
c0010617:	c3                   	ret    

c0010618 <Krnl::deleteEnvUser(char const*)>:
c0010618:	c3                   	ret    

c0010619 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010619:	c3                   	ret    

c001061a <Krnl::newProcessEnv(Process*)>:
c001061a:	83 ec 28             	sub    esp,0x28
c001061d:	6a 0c                	push   0xc
c001061f:	e8 d8 74 ff ff       	call   c0007afc <malloc>
c0010624:	5a                   	pop    edx
c0010625:	59                   	pop    ecx
c0010626:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001062a:	50                   	push   eax
c001062b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001062f:	e8 e4 fe ff ff       	call   c0010518 <EnvVarContainer::EnvVarContainer(Process*)>
c0010634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010638:	83 c4 2c             	add    esp,0x2c
c001063b:	c3                   	ret    

c001063c <Krnl::copyProcessEnv(Process*, Process*)>:
c001063c:	57                   	push   edi
c001063d:	56                   	push   esi
c001063e:	53                   	push   ebx
c001063f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010643:	83 ec 0c             	sub    esp,0xc
c0010646:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001064c:	6a 0c                	push   0xc
c001064e:	e8 a9 74 ff ff       	call   c0007afc <malloc>
c0010653:	89 c3                	mov    ebx,eax
c0010655:	58                   	pop    eax
c0010656:	5a                   	pop    edx
c0010657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001065b:	53                   	push   ebx
c001065c:	e8 b7 fe ff ff       	call   c0010518 <EnvVarContainer::EnvVarContainer(Process*)>
c0010661:	8b 07                	mov    eax,DWORD PTR [edi]
c0010663:	89 03                	mov    DWORD PTR [ebx],eax
c0010665:	c1 e0 03             	shl    eax,0x3
c0010668:	89 04 24             	mov    DWORD PTR [esp],eax
c001066b:	e8 8c 74 ff ff       	call   c0007afc <malloc>
c0010670:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010673:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010675:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010678:	89 c7                	mov    edi,eax
c001067a:	c1 e1 03             	shl    ecx,0x3
c001067d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001067f:	83 c4 10             	add    esp,0x10
c0010682:	89 d8                	mov    eax,ebx
c0010684:	5b                   	pop    ebx
c0010685:	5e                   	pop    esi
c0010686:	5f                   	pop    edi
c0010687:	c3                   	ret    

c0010688 <Krnl::loadSystemEnv()>:
c0010688:	53                   	push   ebx
c0010689:	83 ec 14             	sub    esp,0x14
c001068c:	6a 0c                	push   0xc
c001068e:	e8 69 74 ff ff       	call   c0007afc <malloc>
c0010693:	89 c3                	mov    ebx,eax
c0010695:	58                   	pop    eax
c0010696:	5a                   	pop    edx
c0010697:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001069d:	53                   	push   ebx
c001069e:	e8 75 fe ff ff       	call   c0010518 <EnvVarContainer::EnvVarContainer(Process*)>
c00106a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106a6:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106ac:	e8 4b fe ff ff       	call   c00104fc <EnvVarContainer::__loadSystem()>
c00106b1:	83 c4 18             	add    esp,0x18
c00106b4:	5b                   	pop    ebx
c00106b5:	c3                   	ret    

c00106b6 <Krnl::loadUserEnv()>:
c00106b6:	53                   	push   ebx
c00106b7:	83 ec 14             	sub    esp,0x14
c00106ba:	6a 0c                	push   0xc
c00106bc:	e8 3b 74 ff ff       	call   c0007afc <malloc>
c00106c1:	89 c3                	mov    ebx,eax
c00106c3:	58                   	pop    eax
c00106c4:	5a                   	pop    edx
c00106c5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106cb:	53                   	push   ebx
c00106cc:	e8 47 fe ff ff       	call   c0010518 <EnvVarContainer::EnvVarContainer(Process*)>
c00106d1:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c00106d7:	83 c4 18             	add    esp,0x18
c00106da:	5b                   	pop    ebx
c00106db:	c3                   	ret    

c00106dc <Krnl::flushEnv()>:
c00106dc:	c3                   	ret    

c00106dd <Krnl::getProcessTotalEnvCount(Process*)>:
c00106dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e1:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c00106e7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00106ed:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00106f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00106f4:	03 01                	add    eax,DWORD PTR [ecx]
c00106f6:	85 d2                	test   edx,edx
c00106f8:	74 02                	je     c00106fc <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00106fa:	03 02                	add    eax,DWORD PTR [edx]
c00106fc:	c3                   	ret    

c00106fd <Krnl::getProcessEnvPair(Process*, int)>:
c00106fd:	57                   	push   edi
c00106fe:	56                   	push   esi
c00106ff:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c0010705:	53                   	push   ebx
c0010706:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001070a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001070e:	85 f6                	test   esi,esi
c0010710:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010714:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001071a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001071c:	75 16                	jne    c0010734 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001071e:	39 c2                	cmp    edx,eax
c0010720:	7c 16                	jl     c0010738 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010722:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010728:	8b 31                	mov    esi,DWORD PTR [ecx]
c001072a:	01 c6                	add    esi,eax
c001072c:	39 d6                	cmp    esi,edx
c001072e:	7e 3c                	jle    c001076c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010730:	29 c2                	sub    edx,eax
c0010732:	eb 04                	jmp    c0010738 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010734:	39 c2                	cmp    edx,eax
c0010736:	7d 05                	jge    c001073d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010738:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001073b:	eb 20                	jmp    c001075d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001073d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001073f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010742:	39 d1                	cmp    ecx,edx
c0010744:	7e 04                	jle    c001074a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010746:	29 c2                	sub    edx,eax
c0010748:	eb 10                	jmp    c001075a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001074a:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c0010750:	03 0e                	add    ecx,DWORD PTR [esi]
c0010752:	39 d1                	cmp    ecx,edx
c0010754:	7e 16                	jle    c001076c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010756:	29 c2                	sub    edx,eax
c0010758:	29 fa                	sub    edx,edi
c001075a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001075d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010760:	8b 02                	mov    eax,DWORD PTR [edx]
c0010762:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010765:	89 03                	mov    DWORD PTR [ebx],eax
c0010767:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001076a:	eb 1d                	jmp    c0010789 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001076c:	83 ec 0c             	sub    esp,0xc
c001076f:	68 9a 09 02 c0       	push   0xc002099a
c0010774:	e8 ac 00 00 00       	call   c0010825 <KePanic(char const*)>
c0010779:	83 c4 10             	add    esp,0x10
c001077c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010782:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010789:	89 d8                	mov    eax,ebx
c001078b:	5b                   	pop    ebx
c001078c:	5e                   	pop    esi
c001078d:	5f                   	pop    edi
c001078e:	c2 04 00             	ret    0x4

c0010791 <CPU::current()>:
c0010791:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0010796:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001079c:	c3                   	ret    

c001079d <operator new(unsigned long)>:
c001079d:	e9 5a 73 ff ff       	jmp    c0007afc <malloc>

c00107a2 <operator delete(void*)>:
c00107a2:	e9 7b 73 ff ff       	jmp    c0007b22 <rfree>

c00107a7 <disableIRQs()>:
c00107a7:	fa                   	cli    
c00107a8:	c3                   	ret    

c00107a9 <enableIRQs()>:
c00107a9:	fb                   	sti    
c00107aa:	c3                   	ret    

c00107ab <lockScheduler()>:
c00107ab:	fa                   	cli    
c00107ac:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107b2:	c3                   	ret    

c00107b3 <unlockScheduler()>:
c00107b3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107b8:	48                   	dec    eax
c00107b9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107be:	75 01                	jne    c00107c1 <unlockScheduler()+0xe>
c00107c0:	fb                   	sti    
c00107c1:	c3                   	ret    

c00107c2 <lockStuff()>:
c00107c2:	fa                   	cli    
c00107c3:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107c9:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00107cf:	c3                   	ret    

c00107d0 <unlockStuff()>:
c00107d0:	83 ec 0c             	sub    esp,0xc
c00107d3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00107d8:	48                   	dec    eax
c00107d9:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00107de:	75 18                	jne    c00107f8 <unlockStuff()+0x28>
c00107e0:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c00107e7:	74 0f                	je     c00107f8 <unlockStuff()+0x28>
c00107e9:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00107f3:	e8 58 49 00 00       	call   c0015150 <schedule()>
c00107f8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107fd:	48                   	dec    eax
c00107fe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010803:	75 01                	jne    c0010806 <unlockStuff()+0x36>
c0010805:	fb                   	sti    
c0010806:	83 c4 0c             	add    esp,0xc
c0010809:	c3                   	ret    

c001080a <Virt::getAKernelVAS()>:
c001080a:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001080f:	c3                   	ret    

c0010810 <__not_memcpy>:
c0010810:	57                   	push   edi
c0010811:	56                   	push   esi
c0010812:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010816:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001081a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001081e:	89 c7                	mov    edi,eax
c0010820:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010822:	5e                   	pop    esi
c0010823:	5f                   	pop    edi
c0010824:	c3                   	ret    

c0010825 <KePanic(char const*)>:
c0010825:	b0 01                	mov    al,0x1
c0010827:	a2 38 79 02 c0       	mov    ds:0xc0027938,al
c001082c:	e9 84 66 00 00       	jmp    c0016eb5 <HalPanic(char const*)>

c0010831 <Krnl::powerThread(void*)>:
c0010831:	83 ec 0c             	sub    esp,0xc
c0010834:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010839:	48                   	dec    eax
c001083a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001083f:	75 01                	jne    c0010842 <Krnl::powerThread(void*)+0x11>
c0010841:	fb                   	sti    
c0010842:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010849:	83 ec 0c             	sub    esp,0xc
c001084c:	6a 0a                	push   0xa
c001084e:	e8 e9 4b 00 00       	call   c001543c <sleep(unsigned int)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c001085d:	eb e3                	jmp    c0010842 <Krnl::powerThread(void*)+0x11>

c001085f <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c001085f:	57                   	push   edi
c0010860:	b9 09 00 00 00       	mov    ecx,0x9
c0010865:	56                   	push   esi
c0010866:	bf 60 79 02 c0       	mov    edi,0xc0027960
c001086b:	fc                   	cld    
c001086c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010870:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010872:	5e                   	pop    esi
c0010873:	5f                   	pop    edi
c0010874:	c3                   	ret    

c0010875 <Krnl::userIOReceived()>:
c0010875:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c001087f:	c3                   	ret    

c0010880 <Krnl::handlePowerButton()>:
c0010880:	83 ec 0c             	sub    esp,0xc
c0010883:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c0010888:	83 f8 02             	cmp    eax,0x2
c001088b:	75 10                	jne    c001089d <Krnl::handlePowerButton()+0x1d>
c001088d:	83 ec 0c             	sub    esp,0xc
c0010890:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010896:	e8 91 68 ff ff       	call   c000712c <Computer::shutdown()>
c001089b:	eb 11                	jmp    c00108ae <Krnl::handlePowerButton()+0x2e>
c001089d:	48                   	dec    eax
c001089e:	75 11                	jne    c00108b1 <Krnl::handlePowerButton()+0x31>
c00108a0:	83 ec 0c             	sub    esp,0xc
c00108a3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108a9:	e8 cc 68 ff ff       	call   c000717a <Computer::sleep()>
c00108ae:	83 c4 10             	add    esp,0x10
c00108b1:	83 c4 0c             	add    esp,0xc
c00108b4:	c3                   	ret    

c00108b5 <Krnl::handleSleepButton()>:
c00108b5:	83 ec 0c             	sub    esp,0xc
c00108b8:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108bd:	83 f8 02             	cmp    eax,0x2
c00108c0:	75 10                	jne    c00108d2 <Krnl::handleSleepButton()+0x1d>
c00108c2:	83 ec 0c             	sub    esp,0xc
c00108c5:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108cb:	e8 5c 68 ff ff       	call   c000712c <Computer::shutdown()>
c00108d0:	eb 11                	jmp    c00108e3 <Krnl::handleSleepButton()+0x2e>
c00108d2:	48                   	dec    eax
c00108d3:	75 11                	jne    c00108e6 <Krnl::handleSleepButton()+0x31>
c00108d5:	83 ec 0c             	sub    esp,0xc
c00108d8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108de:	e8 97 68 ff ff       	call   c000717a <Computer::sleep()>
c00108e3:	83 c4 10             	add    esp,0x10
c00108e6:	83 c4 0c             	add    esp,0xc
c00108e9:	c3                   	ret    

c00108ea <Krnl::setupPowerManager()>:
c00108ea:	83 ec 0c             	sub    esp,0xc
c00108ed:	68 f0 00 00 00       	push   0xf0
c00108f2:	6a 00                	push   0x0
c00108f4:	68 31 08 01 c0       	push   0xc0010831
c00108f9:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00108ff:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010909:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010910:	e8 e3 45 00 00       	call   c0014ef8 <Process::createThread(void (*)(void*), void*, int)>
c0010915:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c001091f:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010929:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c0010933:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c001093d:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010947:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c0010951:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c001095b:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c0010965:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c001096f:	83 c4 1c             	add    esp,0x1c
c0010972:	c3                   	ret    

c0010973 <KeRand()>:
c0010973:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c001097d:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c0010987:	53                   	push   ebx
c0010988:	5b                   	pop    ebx
c0010989:	01 c1                	add    ecx,eax
c001098b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010990:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c0010996:	01 ca                	add    edx,ecx
c0010998:	05 ef 04 b5 00       	add    eax,0xb504ef
c001099d:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109a2:	83 d2 00             	adc    edx,0x0
c00109a5:	81 e2 ff ff 00 00    	and    edx,0xffff
c00109ab:	89 15 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,edx
c00109b1:	0f ac d0 0e          	shrd   eax,edx,0xe
c00109b5:	c3                   	ret    

c00109b6 <KeSeedRand(unsigned int)>:
c00109b6:	53                   	push   ebx
c00109b7:	83 ec 08             	sub    esp,0x8
c00109ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109be:	e8 fd 67 00 00       	call   c00171c0 <HalGetRand()>
c00109c3:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c00109cd:	31 d8                	xor    eax,ebx
c00109cf:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109d4:	e8 9a ff ff ff       	call   c0010973 <KeRand()>
c00109d9:	83 c4 08             	add    esp,0x8
c00109dc:	5b                   	pop    ebx
c00109dd:	eb 94                	jmp    c0010973 <KeRand()>

c00109df <KeInitRand()>:
c00109df:	83 ec 0c             	sub    esp,0xc
c00109e2:	e8 c7 65 00 00       	call   c0016fae <HalQueryPerformanceCounter()>
c00109e7:	0f 20 da             	mov    edx,cr3
c00109ea:	0f 22 da             	mov    cr3,edx
c00109ed:	0f 20 da             	mov    edx,cr3
c00109f0:	0f 22 da             	mov    cr3,edx
c00109f3:	0f 20 da             	mov    edx,cr3
c00109f6:	0f 22 da             	mov    cr3,edx
c00109f9:	0f 20 da             	mov    edx,cr3
c00109fc:	0f 22 da             	mov    cr3,edx
c00109ff:	83 ec 0c             	sub    esp,0xc
c0010a02:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a07:	50                   	push   eax
c0010a08:	e8 a9 ff ff ff       	call   c00109b6 <KeSeedRand(unsigned int)>
c0010a0d:	83 c4 1c             	add    esp,0x1c
c0010a10:	c3                   	ret    
c0010a11:	66 90                	xchg   ax,ax
c0010a13:	90                   	nop

c0010a14 <KeResolveCompatibilitySymbol(char*)>:
c0010a14:	83 ec 1c             	sub    esp,0x1c
c0010a17:	c7 44 24 04 b4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209b4
c0010a1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a23:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a26:	e8 15 fe fe ff       	call   c0000840 <strcmp>
c0010a2b:	85 c0                	test   eax,eax
c0010a2d:	0f 94 c0             	sete   al
c0010a30:	84 c0                	test   al,al
c0010a32:	74 0c                	je     c0010a40 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010a34:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a39:	e9 62 01 00 00       	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a3e:	66 90                	xchg   ax,ax
c0010a40:	c7 44 24 04 bd 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209bd
c0010a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a4f:	e8 ec fd fe ff       	call   c0000840 <strcmp>
c0010a54:	85 c0                	test   eax,eax
c0010a56:	0f 94 c0             	sete   al
c0010a59:	84 c0                	test   al,al
c0010a5b:	74 0b                	je     c0010a68 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010a5d:	b8 40 e4 01 c0       	mov    eax,0xc001e440
c0010a62:	e9 39 01 00 00       	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a67:	90                   	nop
c0010a68:	c7 44 24 04 c7 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209c7
c0010a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a74:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a77:	e8 c4 fd fe ff       	call   c0000840 <strcmp>
c0010a7c:	85 c0                	test   eax,eax
c0010a7e:	0f 94 c0             	sete   al
c0010a81:	84 c0                	test   al,al
c0010a83:	74 0b                	je     c0010a90 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010a85:	b8 74 e1 01 c0       	mov    eax,0xc001e174
c0010a8a:	e9 11 01 00 00       	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010a8f:	90                   	nop
c0010a90:	c7 44 24 04 d0 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209d0
c0010a98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a9f:	e8 9c fd fe ff       	call   c0000840 <strcmp>
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	0f 94 c0             	sete   al
c0010aa9:	84 c0                	test   al,al
c0010aab:	74 0b                	je     c0010ab8 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010aad:	b8 25 08 01 c0       	mov    eax,0xc0010825
c0010ab2:	e9 e9 00 00 00       	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010ab7:	90                   	nop
c0010ab8:	c7 44 24 04 e3 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209e3
c0010ac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ac4:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ac7:	e8 74 fd fe ff       	call   c0000840 <strcmp>
c0010acc:	85 c0                	test   eax,eax
c0010ace:	0f 94 c0             	sete   al
c0010ad1:	84 c0                	test   al,al
c0010ad3:	74 0b                	je     c0010ae0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010ad5:	b8 b1 01 01 c0       	mov    eax,0xc00101b1
c0010ada:	e9 c1 00 00 00       	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010adf:	90                   	nop
c0010ae0:	c7 44 24 04 00 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a00
c0010ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aec:	89 04 24             	mov    DWORD PTR [esp],eax
c0010aef:	e8 4c fd fe ff       	call   c0000840 <strcmp>
c0010af4:	85 c0                	test   eax,eax
c0010af6:	0f 94 c0             	sete   al
c0010af9:	84 c0                	test   al,al
c0010afb:	74 0b                	je     c0010b08 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010afd:	b8 40 e5 01 c0       	mov    eax,0xc001e540
c0010b02:	e9 99 00 00 00       	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b07:	90                   	nop
c0010b08:	c7 44 24 04 0a 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a0a
c0010b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b14:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b17:	e8 24 fd fe ff       	call   c0000840 <strcmp>
c0010b1c:	85 c0                	test   eax,eax
c0010b1e:	0f 94 c0             	sete   al
c0010b21:	84 c0                	test   al,al
c0010b23:	74 07                	je     c0010b2c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010b25:	b8 c0 e2 01 c0       	mov    eax,0xc001e2c0
c0010b2a:	eb 74                	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b2c:	c7 44 24 04 13 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a13
c0010b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b38:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b3b:	e8 00 fd fe ff       	call   c0000840 <strcmp>
c0010b40:	85 c0                	test   eax,eax
c0010b42:	0f 94 c0             	sete   al
c0010b45:	84 c0                	test   al,al
c0010b47:	74 07                	je     c0010b50 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010b49:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b4e:	eb 50                	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b50:	c7 44 24 04 2b 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a2b
c0010b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b5f:	e8 dc fc fe ff       	call   c0000840 <strcmp>
c0010b64:	85 c0                	test   eax,eax
c0010b66:	0f 94 c0             	sete   al
c0010b69:	84 c0                	test   al,al
c0010b6b:	74 07                	je     c0010b74 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b6d:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010b72:	eb 2c                	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b74:	c7 44 24 04 38 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a38
c0010b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b80:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b83:	e8 b8 fc fe ff       	call   c0000840 <strcmp>
c0010b88:	85 c0                	test   eax,eax
c0010b8a:	0f 94 c0             	sete   al
c0010b8d:	84 c0                	test   al,al
c0010b8f:	74 07                	je     c0010b98 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010b91:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010b96:	eb 08                	jmp    c0010ba0 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010b98:	b8 00 00 00 00       	mov    eax,0x0
c0010b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010ba0:	83 c4 1c             	add    esp,0x1c
c0010ba3:	c3                   	ret    

c0010ba4 <KiSigKill(int)>:
c0010ba4:	83 ec 0c             	sub    esp,0xc
c0010ba7:	6a 00                	push   0x0
c0010ba9:	6a 00                	push   0x0
c0010bab:	6a ff                	push   0xffffffff
c0010bad:	6a 01                	push   0x1
c0010baf:	e8 9e 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bb4:	83 c4 1c             	add    esp,0x1c
c0010bb7:	c3                   	ret    

c0010bb8 <KiDefaultSignalHandlerIgnore(int)>:
c0010bb8:	c3                   	ret    

c0010bb9 <KiDefaultSignalHandlerPause(int)>:
c0010bb9:	57                   	push   edi
c0010bba:	b9 07 00 00 00       	mov    ecx,0x7
c0010bbf:	56                   	push   esi
c0010bc0:	be 81 0a 02 c0       	mov    esi,0xc0020a81
c0010bc5:	83 ec 24             	sub    esp,0x24
c0010bc8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010bcc:	fc                   	cld    
c0010bcd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bcf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010bd3:	50                   	push   eax
c0010bd4:	6a 00                	push   0x0
c0010bd6:	6a 00                	push   0x0
c0010bd8:	6a 27                	push   0x27
c0010bda:	e8 73 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bdf:	83 c4 34             	add    esp,0x34
c0010be2:	5e                   	pop    esi
c0010be3:	5f                   	pop    edi
c0010be4:	c3                   	ret    

c0010be5 <KiDefaultSignalHandlerResume(int)>:
c0010be5:	57                   	push   edi
c0010be6:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010beb:	56                   	push   esi
c0010bec:	be 9d 0a 02 c0       	mov    esi,0xc0020a9d
c0010bf1:	83 ec 24             	sub    esp,0x24
c0010bf4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010bf8:	fc                   	cld    
c0010bf9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bfb:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010bff:	50                   	push   eax
c0010c00:	6a 00                	push   0x0
c0010c02:	6a 00                	push   0x0
c0010c04:	6a 27                	push   0x27
c0010c06:	e8 47 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c0b:	83 c4 34             	add    esp,0x34
c0010c0e:	5e                   	pop    esi
c0010c0f:	5f                   	pop    edi
c0010c10:	c3                   	ret    

c0010c11 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c11:	e9 f9 6e ff ff       	jmp    c0007b0f <free>

c0010c16 <KeInitSignals()>:
c0010c16:	53                   	push   ebx
c0010c17:	83 ec 14             	sub    esp,0x14
c0010c1a:	68 c8 00 00 00       	push   0xc8
c0010c1f:	e8 d8 6e ff ff       	call   c0007afc <malloc>
c0010c24:	83 c4 0c             	add    esp,0xc
c0010c27:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c31:	89 c3                	mov    ebx,eax
c0010c33:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c3d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010c43:	6a 20                	push   0x20
c0010c45:	6a 00                	push   0x0
c0010c47:	50                   	push   eax
c0010c48:	e8 33 f9 fe ff       	call   c0000580 <memset>
c0010c4d:	83 c4 0c             	add    esp,0xc
c0010c50:	6a 44                	push   0x44
c0010c52:	6a 00                	push   0x0
c0010c54:	53                   	push   ebx
c0010c55:	e8 26 f9 fe ff       	call   c0000580 <memset>
c0010c5a:	83 c4 18             	add    esp,0x18
c0010c5d:	89 d8                	mov    eax,ebx
c0010c5f:	5b                   	pop    ebx
c0010c60:	c3                   	ret    

c0010c61 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010c61:	53                   	push   ebx
c0010c62:	b8 01 00 00 00       	mov    eax,0x1
c0010c67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c6f:	83 f9 10             	cmp    ecx,0x10
c0010c72:	7f 21                	jg     c0010c95 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c78:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010c7b:	89 03                	mov    DWORD PTR [ebx],eax
c0010c7d:	b8 01 00 00 00       	mov    eax,0x1
c0010c82:	d3 e0                	shl    eax,cl
c0010c84:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010c88:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010c8b:	31 c0                	xor    eax,eax
c0010c8d:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010c95:	5b                   	pop    ebx
c0010c96:	c3                   	ret    

c0010c97 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010c97:	55                   	push   ebp
c0010c98:	57                   	push   edi
c0010c99:	bf 08 00 00 00       	mov    edi,0x8
c0010c9e:	56                   	push   esi
c0010c9f:	53                   	push   ebx
c0010ca0:	83 ec 18             	sub    esp,0x18
c0010ca3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ca7:	68 ba 0a 02 c0       	push   0xc0020aba
c0010cac:	e8 c5 9d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0010cb1:	83 c4 10             	add    esp,0x10
c0010cb4:	31 c9                	xor    ecx,ecx
c0010cb6:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010cbd:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010cc3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010cc7:	99                   	cdq    
c0010cc8:	f7 ff                	idiv   edi
c0010cca:	8d 42 24             	lea    eax,[edx+0x24]
c0010ccd:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010cd1:	85 f6                	test   esi,esi
c0010cd3:	75 1a                	jne    c0010cef <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010cd5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010cd9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010cdd:	50                   	push   eax
c0010cde:	50                   	push   eax
c0010cdf:	52                   	push   edx
c0010ce0:	68 cb 0a 02 c0       	push   0xc0020acb
c0010ce5:	e8 8c 9d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0010cea:	83 c4 10             	add    esp,0x10
c0010ced:	eb 1b                	jmp    c0010d0a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010cef:	41                   	inc    ecx
c0010cf0:	83 f9 08             	cmp    ecx,0x8
c0010cf3:	75 ce                	jne    c0010cc3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010cf5:	83 ec 0c             	sub    esp,0xc
c0010cf8:	be 01 00 00 00       	mov    esi,0x1
c0010cfd:	68 ec 0a 02 c0       	push   0xc0020aec
c0010d02:	e8 6f 9d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0010d07:	83 c4 10             	add    esp,0x10
c0010d0a:	83 c4 0c             	add    esp,0xc
c0010d0d:	89 f0                	mov    eax,esi
c0010d0f:	5b                   	pop    ebx
c0010d10:	5e                   	pop    esi
c0010d11:	5f                   	pop    edi
c0010d12:	5d                   	pop    ebp
c0010d13:	c3                   	ret    

c0010d14 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d14:	55                   	push   ebp
c0010d15:	57                   	push   edi
c0010d16:	56                   	push   esi
c0010d17:	53                   	push   ebx
c0010d18:	51                   	push   ecx
c0010d19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d1d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d24:	0f 84 b1 00 00 00    	je     c0010ddb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010d2a:	31 c9                	xor    ecx,ecx
c0010d2c:	bf 08 00 00 00       	mov    edi,0x8
c0010d31:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d37:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d3a:	99                   	cdq    
c0010d3b:	f7 ff                	idiv   edi
c0010d3d:	89 d5                	mov    ebp,edx
c0010d3f:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010d46:	85 d2                	test   edx,edx
c0010d48:	0f 84 9e 00 00 00    	je     c0010dec <KeCheckSignal(SigHandlerBlock*, int*)+0xd8>
c0010d4e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010d54:	88 d1                	mov    cl,dl
c0010d56:	bf 01 00 00 00       	mov    edi,0x1
c0010d5b:	d3 e7                	shl    edi,cl
c0010d5d:	31 c9                	xor    ecx,ecx
c0010d5f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d62:	b8 01 00 00 00       	mov    eax,0x1
c0010d67:	d3 e0                	shl    eax,cl
c0010d69:	85 04 24             	test   DWORD PTR [esp],eax
c0010d6c:	74 06                	je     c0010d74 <KeCheckSignal(SigHandlerBlock*, int*)+0x60>
c0010d6e:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010d72:	75 67                	jne    c0010ddb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010d74:	41                   	inc    ecx
c0010d75:	83 f9 11             	cmp    ecx,0x11
c0010d78:	75 e8                	jne    c0010d62 <KeCheckSignal(SigHandlerBlock*, int*)+0x4e>
c0010d7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010d7d:	46                   	inc    esi
c0010d7e:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010d84:	c7 84 ab 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+ebp*4+0x9c],0x0
c0010d8f:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010d96:	09 f8                	or     eax,edi
c0010d98:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010d9e:	31 c0                	xor    eax,eax
c0010da0:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010da8:	74 09                	je     c0010db3 <KeCheckSignal(SigHandlerBlock*, int*)+0x9f>
c0010daa:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010db1:	eb 06                	jmp    c0010db9 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0010db3:	40                   	inc    eax
c0010db4:	83 f8 08             	cmp    eax,0x8
c0010db7:	75 e7                	jne    c0010da0 <KeCheckSignal(SigHandlerBlock*, int*)+0x8c>
c0010db9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010dbd:	83 fa 09             	cmp    edx,0x9
c0010dc0:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c0010dc3:	89 11                	mov    DWORD PTR [ecx],edx
c0010dc5:	75 07                	jne    c0010dce <KeCheckSignal(SigHandlerBlock*, int*)+0xba>
c0010dc7:	b8 a4 0b 01 c0       	mov    eax,0xc0010ba4
c0010dcc:	eb 31                	jmp    c0010dff <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010dce:	83 f8 01             	cmp    eax,0x1
c0010dd1:	75 0c                	jne    c0010ddf <KeCheckSignal(SigHandlerBlock*, int*)+0xcb>
c0010dd3:	f7 d7                	not    edi
c0010dd5:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010ddb:	31 c0                	xor    eax,eax
c0010ddd:	eb 20                	jmp    c0010dff <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010ddf:	85 c0                	test   eax,eax
c0010de1:	75 1c                	jne    c0010dff <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010de3:	8b 04 95 a0 1e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffde160]
c0010dea:	eb 13                	jmp    c0010dff <KeCheckSignal(SigHandlerBlock*, int*)+0xeb>
c0010dec:	41                   	inc    ecx
c0010ded:	46                   	inc    esi
c0010dee:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010df4:	83 f9 08             	cmp    ecx,0x8
c0010df7:	0f 85 34 ff ff ff    	jne    c0010d31 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010dfd:	eb dc                	jmp    c0010ddb <KeCheckSignal(SigHandlerBlock*, int*)+0xc7>
c0010dff:	5a                   	pop    edx
c0010e00:	5b                   	pop    ebx
c0010e01:	5e                   	pop    esi
c0010e02:	5f                   	pop    edi
c0010e03:	5d                   	pop    ebp
c0010e04:	c3                   	ret    

c0010e05 <KiCheckSignalZ>:
c0010e05:	83 ec 10             	sub    esp,0x10
c0010e08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e0c:	50                   	push   eax
c0010e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e15:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e1b:	e8 f4 fe ff ff       	call   c0010d14 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e20:	5a                   	pop    edx
c0010e21:	31 d2                	xor    edx,edx
c0010e23:	59                   	pop    ecx
c0010e24:	85 c0                	test   eax,eax
c0010e26:	74 19                	je     c0010e41 <KiCheckSignalZ+0x3c>
c0010e28:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e2e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e31:	89 02                	mov    DWORD PTR [edx],eax
c0010e33:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e3e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010e41:	89 d0                	mov    eax,edx
c0010e43:	83 c4 10             	add    esp,0x10
c0010e46:	c3                   	ret    

c0010e47 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010e47:	56                   	push   esi
c0010e48:	53                   	push   ebx
c0010e49:	bb 01 00 00 00       	mov    ebx,0x1
c0010e4e:	52                   	push   edx
c0010e4f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010e53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e57:	d3 e3                	shl    ebx,cl
c0010e59:	83 f9 10             	cmp    ecx,0x10
c0010e5c:	7f 08                	jg     c0010e66 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010e5e:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010e64:	75 10                	jne    c0010e76 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010e66:	83 ec 0c             	sub    esp,0xc
c0010e69:	68 fd 0a 02 c0       	push   0xc0020afd
c0010e6e:	e8 b2 f9 ff ff       	call   c0010825 <KePanic(char const*)>
c0010e73:	83 c4 10             	add    esp,0x10
c0010e76:	f7 d3                	not    ebx
c0010e78:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010e7e:	58                   	pop    eax
c0010e7f:	5b                   	pop    ebx
c0010e80:	5e                   	pop    esi
c0010e81:	c3                   	ret    

c0010e82 <KiFinishSignalZ>:
c0010e82:	53                   	push   ebx
c0010e83:	83 ec 10             	sub    esp,0x10
c0010e86:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e8a:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010e8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e95:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e9b:	e8 a7 ff ff ff       	call   c0010e47 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010ea0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010ea6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010ead:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010eb4:	83 c4 18             	add    esp,0x18
c0010eb7:	5b                   	pop    ebx
c0010eb8:	c3                   	ret    

c0010eb9 <SysSeekDir(regs*)>:
c0010eb9:	31 c0                	xor    eax,eax
c0010ebb:	31 d2                	xor    edx,edx
c0010ebd:	c3                   	ret    

c0010ebe <SysTellDir(regs*)>:
c0010ebe:	31 c0                	xor    eax,eax
c0010ec0:	31 d2                	xor    edx,edx
c0010ec2:	c3                   	ret    

c0010ec3 <SysVerify(regs*)>:
c0010ec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ec7:	31 d2                	xor    edx,edx
c0010ec9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ecc:	c3                   	ret    

c0010ecd <SysGetArgc(regs*)>:
c0010ecd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ed2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ed5:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010edb:	99                   	cdq    
c0010edc:	c3                   	ret    

c0010edd <SysTTYName(regs*)>:
c0010edd:	b8 01 00 00 00       	mov    eax,0x1
c0010ee2:	31 d2                	xor    edx,edx
c0010ee4:	c3                   	ret    

c0010ee5 <SysFormatDisk(regs*)>:
c0010ee5:	56                   	push   esi
c0010ee6:	53                   	push   ebx
c0010ee7:	83 ec 24             	sub    esp,0x24
c0010eea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010eee:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010ef4:	eb 32                	jmp    c0010f28 <SysFormatDisk(regs*)+0x43>
c0010ef6:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010ef9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010efc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010efe:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0010f02:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f09:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f13:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010f17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f1b:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f1e:	83 f8 08             	cmp    eax,0x8
c0010f21:	89 c1                	mov    ecx,eax
c0010f23:	75 14                	jne    c0010f39 <SysFormatDisk(regs*)+0x54>
c0010f25:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f28:	85 db                	test   ebx,ebx
c0010f2a:	75 ca                	jne    c0010ef6 <SysFormatDisk(regs*)+0x11>
c0010f2c:	b8 03 00 00 00       	mov    eax,0x3
c0010f31:	31 d2                	xor    edx,edx
c0010f33:	83 c4 24             	add    esp,0x24
c0010f36:	5b                   	pop    ebx
c0010f37:	5e                   	pop    esi
c0010f38:	c3                   	ret    
c0010f39:	85 c0                	test   eax,eax
c0010f3b:	74 13                	je     c0010f50 <SysFormatDisk(regs*)+0x6b>
c0010f3d:	31 d2                	xor    edx,edx
c0010f3f:	83 f9 09             	cmp    ecx,0x9
c0010f42:	b8 01 00 00 00       	mov    eax,0x1
c0010f47:	74 ea                	je     c0010f33 <SysFormatDisk(regs*)+0x4e>
c0010f49:	b8 02 00 00 00       	mov    eax,0x2
c0010f4e:	eb e1                	jmp    c0010f31 <SysFormatDisk(regs*)+0x4c>
c0010f50:	31 c0                	xor    eax,eax
c0010f52:	eb dd                	jmp    c0010f31 <SysFormatDisk(regs*)+0x4c>

c0010f54 <SysSetDiskVolumeLabel(regs*)>:
c0010f54:	83 ec 1c             	sub    esp,0x1c
c0010f57:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010f5f:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0010f63:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f66:	83 f8 19             	cmp    eax,0x19
c0010f69:	77 3d                	ja     c0010fa8 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f6b:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010f72:	85 c9                	test   ecx,ecx
c0010f74:	74 32                	je     c0010fa8 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f76:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010f79:	85 db                	test   ebx,ebx
c0010f7b:	74 2b                	je     c0010fa8 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f7d:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010f83:	85 d2                	test   edx,edx
c0010f85:	74 21                	je     c0010fa8 <SysSetDiskVolumeLabel(regs*)+0x54>
c0010f87:	8b 32                	mov    esi,DWORD PTR [edx]
c0010f89:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f8d:	89 14 24             	mov    DWORD PTR [esp],edx
c0010f90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f94:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0010f98:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010f9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f9f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010fa3:	83 c4 1c             	add    esp,0x1c
c0010fa6:	99                   	cdq    
c0010fa7:	c3                   	ret    
c0010fa8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010fad:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fb2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fb6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010fba:	83 c4 1c             	add    esp,0x1c
c0010fbd:	c3                   	ret    

c0010fbe <SysGetDiskVolumeLabel(regs*)>:
c0010fbe:	83 ec 2c             	sub    esp,0x2c
c0010fc1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010fc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010fc9:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010fcd:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0010fd1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010fd4:	83 fa 19             	cmp    edx,0x19
c0010fd7:	77 4c                	ja     c0011025 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010fd9:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c0010fe0:	85 c9                	test   ecx,ecx
c0010fe2:	74 41                	je     c0011025 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010fe4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010fe7:	85 db                	test   ebx,ebx
c0010fe9:	74 3a                	je     c0011025 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010feb:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010fee:	85 f6                	test   esi,esi
c0010ff0:	74 33                	je     c0011025 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ff2:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010ff8:	85 c0                	test   eax,eax
c0010ffa:	74 29                	je     c0011025 <SysGetDiskVolumeLabel(regs*)+0x67>
c0010ffc:	8b 38                	mov    edi,DWORD PTR [eax]
c0010ffe:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0011002:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011006:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001100a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001100e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011011:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011014:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011018:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001101c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011020:	83 c4 2c             	add    esp,0x2c
c0011023:	99                   	cdq    
c0011024:	c3                   	ret    
c0011025:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001102a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001102f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011033:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011037:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001103b:	83 c4 2c             	add    esp,0x2c
c001103e:	c3                   	ret    

c001103f <SysShutdown(regs*)>:
c001103f:	53                   	push   ebx
c0011040:	83 ec 28             	sub    esp,0x28
c0011043:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011047:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001104a:	85 c0                	test   eax,eax
c001104c:	74 26                	je     c0011074 <SysShutdown(regs*)+0x35>
c001104e:	83 f8 01             	cmp    eax,0x1
c0011051:	0f 84 87 00 00 00    	je     c00110de <SysShutdown(regs*)+0x9f>
c0011057:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c001105b:	83 f8 02             	cmp    eax,0x2
c001105e:	66 0f 7e c3          	movd   ebx,xmm0
c0011062:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011067:	66 0f 7e c2          	movd   edx,xmm0
c001106b:	74 3e                	je     c00110ab <SysShutdown(regs*)+0x6c>
c001106d:	83 c4 28             	add    esp,0x28
c0011070:	89 d8                	mov    eax,ebx
c0011072:	5b                   	pop    ebx
c0011073:	c3                   	ret    
c0011074:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0011079:	31 c9                	xor    ecx,ecx
c001107b:	31 db                	xor    ebx,ebx
c001107d:	8b 10                	mov    edx,DWORD PTR [eax]
c001107f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011083:	31 c9                	xor    ecx,ecx
c0011085:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0011089:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001108d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011090:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011093:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0011097:	66 0f 7e c3          	movd   ebx,xmm0
c001109b:	83 c4 28             	add    esp,0x28
c001109e:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00110a3:	89 d8                	mov    eax,ebx
c00110a5:	66 0f 7e c2          	movd   edx,xmm0
c00110a9:	5b                   	pop    ebx
c00110aa:	c3                   	ret    
c00110ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110b0:	31 d2                	xor    edx,edx
c00110b2:	66 0f 7e 44 24 1c    	movd   DWORD PTR [esp+0x1c],xmm0
c00110b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00110ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00110be:	31 d2                	xor    edx,edx
c00110c0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00110c4:	ba 01 00 00 00       	mov    edx,0x1
c00110c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00110cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00110d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00110d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00110d7:	83 c4 28             	add    esp,0x28
c00110da:	89 d8                	mov    eax,ebx
c00110dc:	5b                   	pop    ebx
c00110dd:	c3                   	ret    
c00110de:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110e3:	85 c0                	test   eax,eax
c00110e5:	74 02                	je     c00110e9 <SysShutdown(regs*)+0xaa>
c00110e7:	ff d0                	call   eax
c00110e9:	66 0f ef c0          	pxor   xmm0,xmm0
c00110ed:	eb a8                	jmp    c0011097 <SysShutdown(regs*)+0x58>

c00110ef <SysRealpath(regs*)>:
c00110ef:	53                   	push   ebx
c00110f0:	83 ec 18             	sub    esp,0x18
c00110f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00110f7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110fa:	85 c9                	test   ecx,ecx
c00110fc:	74 39                	je     c0011137 <SysRealpath(regs*)+0x48>
c00110fe:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011101:	31 d2                	xor    edx,edx
c0011103:	b8 01 00 00 00       	mov    eax,0x1
c0011108:	85 db                	test   ebx,ebx
c001110a:	75 05                	jne    c0011111 <SysRealpath(regs*)+0x22>
c001110c:	83 c4 18             	add    esp,0x18
c001110f:	5b                   	pop    ebx
c0011110:	c3                   	ret    
c0011111:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011116:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011119:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001111d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011120:	05 0c 01 00 00       	add    eax,0x10c
c0011125:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011129:	e8 23 9d ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c001112e:	31 c0                	xor    eax,eax
c0011130:	31 d2                	xor    edx,edx
c0011132:	83 c4 18             	add    esp,0x18
c0011135:	5b                   	pop    ebx
c0011136:	c3                   	ret    
c0011137:	b8 01 00 00 00       	mov    eax,0x1
c001113c:	31 d2                	xor    edx,edx
c001113e:	eb f2                	jmp    c0011132 <SysRealpath(regs*)+0x43>

c0011140 <SysReadDir(regs*)>:
c0011140:	53                   	push   ebx
c0011141:	83 ec 38             	sub    esp,0x38
c0011144:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011148:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001114b:	83 f8 02             	cmp    eax,0x2
c001114e:	76 53                	jbe    c00111a3 <SysReadDir(regs*)+0x63>
c0011150:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011157:	77 56                	ja     c00111af <SysReadDir(regs*)+0x6f>
c0011159:	89 04 24             	mov    DWORD PTR [esp],eax
c001115c:	e8 5e 83 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0011161:	85 c0                	test   eax,eax
c0011163:	74 4a                	je     c00111af <SysReadDir(regs*)+0x6f>
c0011165:	8d 4c 24 2c          	lea    ecx,[esp+0x2c]
c0011169:	31 d2                	xor    edx,edx
c001116b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001116f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011171:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0011175:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011178:	31 db                	xor    ebx,ebx
c001117a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001117e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011181:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011185:	b9 10 01 00 00       	mov    ecx,0x110
c001118a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001118e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011191:	85 c0                	test   eax,eax
c0011193:	89 c1                	mov    ecx,eax
c0011195:	74 27                	je     c00111be <SysReadDir(regs*)+0x7e>
c0011197:	31 d2                	xor    edx,edx
c0011199:	83 f9 07             	cmp    ecx,0x7
c001119c:	b8 02 00 00 00       	mov    eax,0x2
c00111a1:	75 16                	jne    c00111b9 <SysReadDir(regs*)+0x79>
c00111a3:	b8 01 00 00 00       	mov    eax,0x1
c00111a8:	31 d2                	xor    edx,edx
c00111aa:	83 c4 38             	add    esp,0x38
c00111ad:	5b                   	pop    ebx
c00111ae:	c3                   	ret    
c00111af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111b9:	83 c4 38             	add    esp,0x38
c00111bc:	5b                   	pop    ebx
c00111bd:	c3                   	ret    
c00111be:	31 c0                	xor    eax,eax
c00111c0:	31 d2                	xor    edx,edx
c00111c2:	eb e6                	jmp    c00111aa <SysReadDir(regs*)+0x6a>

c00111c4 <SysIsATTY(regs*)>:
c00111c4:	83 ec 1c             	sub    esp,0x1c
c00111c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00111ce:	83 f8 02             	cmp    eax,0x2
c00111d1:	76 07                	jbe    c00111da <SysIsATTY(regs*)+0x16>
c00111d3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111d8:	75 22                	jne    c00111fc <SysIsATTY(regs*)+0x38>
c00111da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111df:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111e8:	85 c0                	test   eax,eax
c00111ea:	74 1c                	je     c0011208 <SysIsATTY(regs*)+0x44>
c00111ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00111ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00111f1:	ff 12                	call   DWORD PTR [edx]
c00111f3:	31 d2                	xor    edx,edx
c00111f5:	83 c4 1c             	add    esp,0x1c
c00111f8:	0f b6 c0             	movzx  eax,al
c00111fb:	c3                   	ret    
c00111fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00111ff:	e8 bb 82 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0011204:	85 c0                	test   eax,eax
c0011206:	75 e4                	jne    c00111ec <SysIsATTY(regs*)+0x28>
c0011208:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001120d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011212:	83 c4 1c             	add    esp,0x1c
c0011215:	c3                   	ret    

c0011216 <SysSeek(regs*)>:
c0011216:	83 ec 1c             	sub    esp,0x1c
c0011219:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001121d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011221:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011225:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011228:	8d 71 fd             	lea    esi,[ecx-0x3]
c001122b:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011231:	77 3a                	ja     c001126d <SysSeek(regs*)+0x57>
c0011233:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011236:	e8 84 82 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c001123b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001123e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011242:	31 d2                	xor    edx,edx
c0011244:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011248:	89 04 24             	mov    DWORD PTR [esp],eax
c001124b:	e8 24 9f ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011250:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011254:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011258:	85 c0                	test   eax,eax
c001125a:	0f 95 c0             	setne  al
c001125d:	31 d2                	xor    edx,edx
c001125f:	0f b6 c0             	movzx  eax,al
c0011262:	f7 d8                	neg    eax
c0011264:	83 d2 00             	adc    edx,0x0
c0011267:	83 c4 1c             	add    esp,0x1c
c001126a:	f7 da                	neg    edx
c001126c:	c3                   	ret    
c001126d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011272:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011277:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001127b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001127f:	83 c4 1c             	add    esp,0x1c
c0011282:	c3                   	ret    

c0011283 <SysTell(regs*)>:
c0011283:	53                   	push   ebx
c0011284:	83 ec 18             	sub    esp,0x18
c0011287:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001128b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001128e:	83 f8 02             	cmp    eax,0x2
c0011291:	76 4d                	jbe    c00112e0 <SysTell(regs*)+0x5d>
c0011293:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011298:	76 19                	jbe    c00112b3 <SysTell(regs*)+0x30>
c001129a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001129d:	31 d2                	xor    edx,edx
c001129f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ac:	83 c4 18             	add    esp,0x18
c00112af:	31 c0                	xor    eax,eax
c00112b1:	5b                   	pop    ebx
c00112b2:	c3                   	ret    
c00112b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00112b6:	e8 04 82 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c00112bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00112c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00112c5:	e8 00 9f ff ff       	call   c000b1ca <File::tell(unsigned long long*)>
c00112ca:	85 c0                	test   eax,eax
c00112cc:	0f 95 c0             	setne  al
c00112cf:	31 d2                	xor    edx,edx
c00112d1:	0f b6 c0             	movzx  eax,al
c00112d4:	f7 d8                	neg    eax
c00112d6:	83 d2 00             	adc    edx,0x0
c00112d9:	83 c4 18             	add    esp,0x18
c00112dc:	5b                   	pop    ebx
c00112dd:	f7 da                	neg    edx
c00112df:	c3                   	ret    
c00112e0:	83 c4 18             	add    esp,0x18
c00112e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112e8:	5b                   	pop    ebx
c00112e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ee:	c3                   	ret    

c00112ef <SysSize(regs*)>:
c00112ef:	53                   	push   ebx
c00112f0:	83 ec 28             	sub    esp,0x28
c00112f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00112f7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112fa:	83 f8 02             	cmp    eax,0x2
c00112fd:	76 55                	jbe    c0011354 <SysSize(regs*)+0x65>
c00112ff:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011304:	76 19                	jbe    c001131f <SysSize(regs*)+0x30>
c0011306:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011309:	31 d2                	xor    edx,edx
c001130b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011311:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011318:	83 c4 28             	add    esp,0x28
c001131b:	31 c0                	xor    eax,eax
c001131d:	5b                   	pop    ebx
c001131e:	c3                   	ret    
c001131f:	89 04 24             	mov    DWORD PTR [esp],eax
c0011322:	e8 98 81 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0011327:	8d 54 24 1f          	lea    edx,[esp+0x1f]
c001132b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001132f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011332:	89 04 24             	mov    DWORD PTR [esp],eax
c0011335:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011339:	e8 1e a0 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c001133e:	85 c0                	test   eax,eax
c0011340:	0f 95 c0             	setne  al
c0011343:	31 d2                	xor    edx,edx
c0011345:	0f b6 c0             	movzx  eax,al
c0011348:	f7 d8                	neg    eax
c001134a:	83 d2 00             	adc    edx,0x0
c001134d:	83 c4 28             	add    esp,0x28
c0011350:	5b                   	pop    ebx
c0011351:	f7 da                	neg    edx
c0011353:	c3                   	ret    
c0011354:	83 c4 28             	add    esp,0x28
c0011357:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001135c:	5b                   	pop    ebx
c001135d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011362:	c3                   	ret    

c0011363 <SysSizeFromFilename(regs*)>:
c0011363:	83 ec 2c             	sub    esp,0x2c
c0011366:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001136a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001136e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011372:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0011376:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011379:	83 fb 02             	cmp    ebx,0x2
c001137c:	0f 86 97 00 00 00    	jbe    c0011419 <SysSizeFromFilename(regs*)+0xb6>
c0011382:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011388:	76 24                	jbe    c00113ae <SysSizeFromFilename(regs*)+0x4b>
c001138a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001138d:	31 d2                	xor    edx,edx
c001138f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011395:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001139c:	31 c0                	xor    eax,eax
c001139e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113a2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00113a6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00113aa:	83 c4 2c             	add    esp,0x2c
c00113ad:	c3                   	ret    
c00113ae:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00113b5:	e8 42 67 ff ff       	call   c0007afc <malloc>
c00113ba:	89 c7                	mov    edi,eax
c00113bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00113c4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00113c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113cf:	e8 24 9c ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c00113d4:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00113d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113dc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00113df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113e6:	e8 71 9f ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c00113eb:	85 ff                	test   edi,edi
c00113ed:	89 c3                	mov    ebx,eax
c00113ef:	74 08                	je     c00113f9 <SysSizeFromFilename(regs*)+0x96>
c00113f1:	8b 07                	mov    eax,DWORD PTR [edi]
c00113f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113f9:	31 c0                	xor    eax,eax
c00113fb:	85 db                	test   ebx,ebx
c00113fd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011401:	0f 95 c0             	setne  al
c0011404:	31 d2                	xor    edx,edx
c0011406:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001140a:	f7 d8                	neg    eax
c001140c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011410:	83 d2 00             	adc    edx,0x0
c0011413:	83 c4 2c             	add    esp,0x2c
c0011416:	f7 da                	neg    edx
c0011418:	c3                   	ret    
c0011419:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001141e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011423:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001142b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001142f:	83 c4 2c             	add    esp,0x2c
c0011432:	c3                   	ret    

c0011433 <SysClose(regs*)>:
c0011433:	53                   	push   ebx
c0011434:	83 ec 18             	sub    esp,0x18
c0011437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001143b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001143e:	83 f8 02             	cmp    eax,0x2
c0011441:	76 46                	jbe    c0011489 <SysClose(regs*)+0x56>
c0011443:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011449:	83 fa 01             	cmp    edx,0x1
c001144c:	76 25                	jbe    c0011473 <SysClose(regs*)+0x40>
c001144e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011453:	77 34                	ja     c0011489 <SysClose(regs*)+0x56>
c0011455:	89 04 24             	mov    DWORD PTR [esp],eax
c0011458:	e8 62 80 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c001145d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011460:	89 c3                	mov    ebx,eax
c0011462:	e8 ad 9c ff ff       	call   c000b114 <File::close()>
c0011467:	85 db                	test   ebx,ebx
c0011469:	74 08                	je     c0011473 <SysClose(regs*)+0x40>
c001146b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001146d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011470:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011473:	66 0f ef c0          	pxor   xmm0,xmm0
c0011477:	66 0f 7e c0          	movd   eax,xmm0
c001147b:	83 c4 18             	add    esp,0x18
c001147e:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011483:	66 0f 7e c2          	movd   edx,xmm0
c0011487:	5b                   	pop    ebx
c0011488:	c3                   	ret    
c0011489:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c001148d:	eb e8                	jmp    c0011477 <SysClose(regs*)+0x44>

c001148f <SysOpenDir(regs*)>:
c001148f:	56                   	push   esi
c0011490:	53                   	push   ebx
c0011491:	83 ec 14             	sub    esp,0x14
c0011494:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011498:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001149b:	85 c0                	test   eax,eax
c001149d:	74 52                	je     c00114f1 <SysOpenDir(regs*)+0x62>
c001149f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00114a6:	e8 51 66 ff ff       	call   c0007afc <malloc>
c00114ab:	89 c6                	mov    esi,eax
c00114ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00114b9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114bc:	89 34 24             	mov    DWORD PTR [esp],esi
c00114bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00114c3:	e8 52 a0 ff ff       	call   c000b51a <Directory::Directory(char const*, Process*)>
c00114c8:	85 f6                	test   esi,esi
c00114ca:	74 25                	je     c00114f1 <SysOpenDir(regs*)+0x62>
c00114cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00114cf:	e8 04 a1 ff ff       	call   c000b5d8 <Directory::open()>
c00114d4:	85 c0                	test   eax,eax
c00114d6:	75 19                	jne    c00114f1 <SysOpenDir(regs*)+0x62>
c00114d8:	89 34 24             	mov    DWORD PTR [esp],esi
c00114db:	e8 16 7d ff ff       	call   c00091f6 <UnixFile::getFileDescriptor()>
c00114e0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00114e3:	66 0f ef c0          	pxor   xmm0,xmm0
c00114e7:	89 02                	mov    DWORD PTR [edx],eax
c00114e9:	c1 f8 1f             	sar    eax,0x1f
c00114ec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114ef:	eb 04                	jmp    c00114f5 <SysOpenDir(regs*)+0x66>
c00114f1:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c00114f5:	83 c4 14             	add    esp,0x14
c00114f8:	66 0f 7e c0          	movd   eax,xmm0
c00114fc:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011501:	5b                   	pop    ebx
c0011502:	66 0f 7e c2          	movd   edx,xmm0
c0011506:	5e                   	pop    esi
c0011507:	c3                   	ret    

c0011508 <SysMakeDir(regs*)>:
c0011508:	56                   	push   esi
c0011509:	53                   	push   ebx
c001150a:	83 ec 14             	sub    esp,0x14
c001150d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011514:	e8 e3 65 ff ff       	call   c0007afc <malloc>
c0011519:	89 c3                	mov    ebx,eax
c001151b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011520:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001152b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001152e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011531:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011535:	e8 e0 9f ff ff       	call   c000b51a <Directory::Directory(char const*, Process*)>
c001153a:	85 db                	test   ebx,ebx
c001153c:	74 28                	je     c0011566 <SysMakeDir(regs*)+0x5e>
c001153e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011541:	e8 72 a2 ff ff       	call   c000b7b8 <Directory::create()>
c0011546:	89 c6                	mov    esi,eax
c0011548:	8b 03                	mov    eax,DWORD PTR [ebx]
c001154a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001154d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011550:	31 c0                	xor    eax,eax
c0011552:	85 f6                	test   esi,esi
c0011554:	0f 95 c0             	setne  al
c0011557:	31 d2                	xor    edx,edx
c0011559:	f7 d8                	neg    eax
c001155b:	83 d2 00             	adc    edx,0x0
c001155e:	83 c4 14             	add    esp,0x14
c0011561:	5b                   	pop    ebx
c0011562:	f7 da                	neg    edx
c0011564:	5e                   	pop    esi
c0011565:	c3                   	ret    
c0011566:	83 c4 14             	add    esp,0x14
c0011569:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001156e:	5b                   	pop    ebx
c001156f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011574:	5e                   	pop    esi
c0011575:	c3                   	ret    

c0011576 <SysCloseDir(regs*)>:
c0011576:	53                   	push   ebx
c0011577:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c001157b:	83 ec 18             	sub    esp,0x18
c001157e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011582:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011585:	66 0f 7e c0          	movd   eax,xmm0
c0011589:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c001158e:	66 0f 7e c2          	movd   edx,xmm0
c0011592:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011595:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c001159b:	77 2f                	ja     c00115cc <SysCloseDir(regs*)+0x56>
c001159d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00115a0:	e8 1a 7f ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c00115a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00115a8:	89 c3                	mov    ebx,eax
c00115aa:	e8 85 a0 ff ff       	call   c000b634 <Directory::close()>
c00115af:	85 db                	test   ebx,ebx
c00115b1:	74 08                	je     c00115bb <SysCloseDir(regs*)+0x45>
c00115b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115bb:	66 0f ef c0          	pxor   xmm0,xmm0
c00115bf:	66 0f 7e c0          	movd   eax,xmm0
c00115c3:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00115c8:	66 0f 7e c2          	movd   edx,xmm0
c00115cc:	83 c4 18             	add    esp,0x18
c00115cf:	5b                   	pop    ebx
c00115d0:	c3                   	ret    

c00115d1 <SysWait(regs*)>:
c00115d1:	83 ec 1c             	sub    esp,0x1c
c00115d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00115d8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00115db:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00115df:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00115e2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00115e6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00115e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00115ec:	e8 6b 3d 00 00       	call   c001535c <waitTask(int, int*, int)>
c00115f1:	83 c4 1c             	add    esp,0x1c
c00115f4:	99                   	cdq    
c00115f5:	c3                   	ret    

c00115f6 <SysNotImpl(regs*)>:
c00115f6:	83 ec 1c             	sub    esp,0x1c
c00115f9:	c7 04 24 0e 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b0e
c0011600:	e8 20 f2 ff ff       	call   c0010825 <KePanic(char const*)>
c0011605:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001160a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001160f:	83 c4 1c             	add    esp,0x1c
c0011612:	c3                   	ret    

c0011613 <SysPanic(regs*)>:
c0011613:	83 ec 1c             	sub    esp,0x1c
c0011616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001161a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001161d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011620:	e8 00 f2 ff ff       	call   c0010825 <KePanic(char const*)>
c0011625:	b8 01 00 00 00       	mov    eax,0x1
c001162a:	31 d2                	xor    edx,edx
c001162c:	83 c4 1c             	add    esp,0x1c
c001162f:	c3                   	ret    

c0011630 <SysRmdir(regs*)>:
c0011630:	56                   	push   esi
c0011631:	53                   	push   ebx
c0011632:	83 ec 14             	sub    esp,0x14
c0011635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011639:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001163c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011643:	e8 b4 64 ff ff       	call   c0007afc <malloc>
c0011648:	89 c3                	mov    ebx,eax
c001164a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011652:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011656:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011659:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001165d:	e8 96 99 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011662:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011665:	e8 c4 9b ff ff       	call   c000b22e <File::unlink()>
c001166a:	85 db                	test   ebx,ebx
c001166c:	89 c6                	mov    esi,eax
c001166e:	74 08                	je     c0011678 <SysRmdir(regs*)+0x48>
c0011670:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011672:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011675:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011678:	31 c0                	xor    eax,eax
c001167a:	85 f6                	test   esi,esi
c001167c:	0f 95 c0             	setne  al
c001167f:	31 d2                	xor    edx,edx
c0011681:	f7 d8                	neg    eax
c0011683:	83 d2 00             	adc    edx,0x0
c0011686:	83 c4 14             	add    esp,0x14
c0011689:	5b                   	pop    ebx
c001168a:	f7 da                	neg    edx
c001168c:	5e                   	pop    esi
c001168d:	c3                   	ret    

c001168e <SysUnlink(regs*)>:
c001168e:	56                   	push   esi
c001168f:	53                   	push   ebx
c0011690:	83 ec 14             	sub    esp,0x14
c0011693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011697:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001169a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00116a1:	e8 56 64 ff ff       	call   c0007afc <malloc>
c00116a6:	89 c3                	mov    ebx,eax
c00116a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00116b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116bb:	e8 38 99 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c00116c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116c3:	e8 66 9b ff ff       	call   c000b22e <File::unlink()>
c00116c8:	85 db                	test   ebx,ebx
c00116ca:	89 c6                	mov    esi,eax
c00116cc:	74 08                	je     c00116d6 <SysUnlink(regs*)+0x48>
c00116ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116d6:	31 c0                	xor    eax,eax
c00116d8:	85 f6                	test   esi,esi
c00116da:	0f 95 c0             	setne  al
c00116dd:	31 d2                	xor    edx,edx
c00116df:	f7 d8                	neg    eax
c00116e1:	83 d2 00             	adc    edx,0x0
c00116e4:	83 c4 14             	add    esp,0x14
c00116e7:	5b                   	pop    ebx
c00116e8:	f7 da                	neg    edx
c00116ea:	5e                   	pop    esi
c00116eb:	c3                   	ret    

c00116ec <SysGetArgv(regs*)>:
c00116ec:	83 ec 1c             	sub    esp,0x1c
c00116ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00116f3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00116f6:	85 c0                	test   eax,eax
c00116f8:	78 2b                	js     c0011725 <SysGetArgv(regs*)+0x39>
c00116fa:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011700:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011703:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011709:	7d 1a                	jge    c0011725 <SysGetArgv(regs*)+0x39>
c001170b:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011712:	85 c0                	test   eax,eax
c0011714:	74 17                	je     c001172d <SysGetArgv(regs*)+0x41>
c0011716:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001171a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001171d:	89 04 24             	mov    DWORD PTR [esp],eax
c0011720:	e8 fb ef fe ff       	call   c0000720 <strcpy>
c0011725:	31 c0                	xor    eax,eax
c0011727:	31 d2                	xor    edx,edx
c0011729:	83 c4 1c             	add    esp,0x1c
c001172c:	c3                   	ret    
c001172d:	b8 01 00 00 00       	mov    eax,0x1
c0011732:	31 d2                	xor    edx,edx
c0011734:	83 c4 1c             	add    esp,0x1c
c0011737:	c3                   	ret    

c0011738 <SysUSleep(regs*)>:
c0011738:	83 ec 1c             	sub    esp,0x1c
c001173b:	31 c0                	xor    eax,eax
c001173d:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011741:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011745:	be 64 00 00 00       	mov    esi,0x64
c001174a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001174e:	8b 59 28             	mov    ebx,DWORD PTR [ecx+0x28]
c0011751:	8b 49 20             	mov    ecx,DWORD PTR [ecx+0x20]
c0011754:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0011758:	89 da                	mov    edx,ebx
c001175a:	31 db                	xor    ebx,ebx
c001175c:	09 c8                	or     eax,ecx
c001175e:	09 da                	or     edx,ebx
c0011760:	89 04 24             	mov    DWORD PTR [esp],eax
c0011763:	31 c9                	xor    ecx,ecx
c0011765:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0011769:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001176d:	e8 ce cc 00 00       	call   c001e440 <__udivdi3>
c0011772:	89 04 24             	mov    DWORD PTR [esp],eax
c0011775:	e8 b2 3c 00 00       	call   c001542c <milliTenthSleep(unsigned int)>
c001177a:	31 c0                	xor    eax,eax
c001177c:	31 d2                	xor    edx,edx
c001177e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011782:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011786:	83 c4 1c             	add    esp,0x1c
c0011789:	c3                   	ret    

c001178a <SysSpawn(regs*)>:
c001178a:	83 ec 1c             	sub    esp,0x1c
c001178d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011791:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011795:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0011799:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001179c:	85 f6                	test   esi,esi
c001179e:	75 10                	jne    c00117b0 <SysSpawn(regs*)+0x26>
c00117a0:	31 c0                	xor    eax,eax
c00117a2:	31 d2                	xor    edx,edx
c00117a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00117a8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117ac:	83 c4 1c             	add    esp,0x1c
c00117af:	c3                   	ret    
c00117b0:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00117b7:	e8 40 63 ff ff       	call   c0007afc <malloc>
c00117bc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00117bf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117c2:	89 c6                	mov    esi,eax
c00117c4:	31 c0                	xor    eax,eax
c00117c6:	85 c9                	test   ecx,ecx
c00117c8:	75 08                	jne    c00117d2 <SysSpawn(regs*)+0x48>
c00117ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00117d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00117da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00117dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00117e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117e4:	e8 ff 32 00 00       	call   c0014ae8 <Process::Process(char const*, Process*, char**)>
c00117e9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00117f0:	75 ae                	jne    c00117a0 <SysSpawn(regs*)+0x16>
c00117f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00117f5:	e8 02 38 00 00       	call   c0014ffc <Process::createUserThread()>
c00117fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00117fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011800:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011804:	83 c4 1c             	add    esp,0x1c
c0011807:	99                   	cdq    
c0011808:	c3                   	ret    

c0011809 <SysGetEnv(regs*)>:
c0011809:	83 ec 2c             	sub    esp,0x2c
c001180c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011810:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011814:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0011818:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001181c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011821:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011824:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011827:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001182a:	89 04 24             	mov    DWORD PTR [esp],eax
c001182d:	e8 ab ee ff ff       	call   c00106dd <Krnl::getProcessTotalEnvCount(Process*)>
c0011832:	39 c7                	cmp    edi,eax
c0011834:	7c 1b                	jl     c0011851 <SysGetEnv(regs*)+0x48>
c0011836:	31 c0                	xor    eax,eax
c0011838:	31 d2                	xor    edx,edx
c001183a:	85 f6                	test   esi,esi
c001183c:	74 03                	je     c0011841 <SysGetEnv(regs*)+0x38>
c001183e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011841:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011845:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011849:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001184d:	83 c4 2c             	add    esp,0x2c
c0011850:	c3                   	ret    
c0011851:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011855:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011859:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001185f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011862:	89 04 24             	mov    DWORD PTR [esp],eax
c0011865:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011869:	e8 8f ee ff ff       	call   c00106fd <Krnl::getProcessEnvPair(Process*, int)>
c001186e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011871:	83 ec 04             	sub    esp,0x4
c0011874:	85 d2                	test   edx,edx
c0011876:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001187a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001187e:	75 28                	jne    c00118a8 <SysGetEnv(regs*)+0x9f>
c0011880:	89 04 24             	mov    DWORD PTR [esp],eax
c0011883:	e8 98 ed fe ff       	call   c0000620 <strlen>
c0011888:	89 3c 24             	mov    DWORD PTR [esp],edi
c001188b:	89 c3                	mov    ebx,eax
c001188d:	e8 8e ed fe ff       	call   c0000620 <strlen>
c0011892:	31 d2                	xor    edx,edx
c0011894:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011898:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001189c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00118a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00118a4:	83 c4 2c             	add    esp,0x2c
c00118a7:	c3                   	ret    
c00118a8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00118ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118af:	89 34 24             	mov    DWORD PTR [esp],esi
c00118b2:	e8 69 ee fe ff       	call   c0000720 <strcpy>
c00118b7:	b8 28 0b 02 c0       	mov    eax,0xc0020b28
c00118bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118c0:	89 34 24             	mov    DWORD PTR [esp],esi
c00118c3:	e8 68 f0 fe ff       	call   c0000930 <strcat>
c00118c8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00118cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00118cf:	e8 5c f0 fe ff       	call   c0000930 <strcat>
c00118d4:	31 c0                	xor    eax,eax
c00118d6:	31 d2                	xor    edx,edx
c00118d8:	eb be                	jmp    c0011898 <SysGetEnv(regs*)+0x8f>

c00118da <SysSetFatAttrib(regs*)>:
c00118da:	83 ec 1c             	sub    esp,0x1c
c00118dd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00118e1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00118e5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00118e9:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00118ed:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00118f0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00118f7:	e8 00 62 ff ff       	call   c0007afc <malloc>
c00118fc:	89 c3                	mov    ebx,eax
c00118fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011903:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011906:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001190a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001190d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011911:	e8 e2 96 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011916:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011919:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001191c:	0f b6 d4             	movzx  edx,ah
c001191f:	0f b6 c0             	movzx  eax,al
c0011922:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011926:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001192a:	e8 99 99 ff ff       	call   c000b2c8 <File::chfatattr(unsigned char, unsigned char)>
c001192f:	85 db                	test   ebx,ebx
c0011931:	89 c6                	mov    esi,eax
c0011933:	74 08                	je     c001193d <SysSetFatAttrib(regs*)+0x63>
c0011935:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011937:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001193a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001193d:	31 c0                	xor    eax,eax
c001193f:	85 f6                	test   esi,esi
c0011941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011945:	0f 95 c0             	setne  al
c0011948:	31 d2                	xor    edx,edx
c001194a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001194e:	f7 d8                	neg    eax
c0011950:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011954:	83 d2 00             	adc    edx,0x0
c0011957:	83 c4 1c             	add    esp,0x1c
c001195a:	f7 da                	neg    edx
c001195c:	c3                   	ret    

c001195d <SysPipe(regs*)>:
c001195d:	83 ec 1c             	sub    esp,0x1c
c0011960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011968:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001196c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0011970:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011973:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011976:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001197d:	e8 7a 61 ff ff       	call   c0007afc <malloc>
c0011982:	89 c3                	mov    ebx,eax
c0011984:	b8 00 50 00 00       	mov    eax,0x5000
c0011989:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001198d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011990:	e8 bf 6a ff ff       	call   c0008454 <Pipe::Pipe(int)>
c0011995:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011998:	e8 59 78 ff ff       	call   c00091f6 <UnixFile::getFileDescriptor()>
c001199d:	89 07                	mov    DWORD PTR [edi],eax
c001199f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119a2:	e8 4f 78 ff ff       	call   c00091f6 <UnixFile::getFileDescriptor()>
c00119a7:	31 d2                	xor    edx,edx
c00119a9:	89 06                	mov    DWORD PTR [esi],eax
c00119ab:	31 c0                	xor    eax,eax
c00119ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00119b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00119b9:	83 c4 1c             	add    esp,0x1c
c00119bc:	c3                   	ret    

c00119bd <SysGetUnixTime(regs*)>:
c00119bd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00119c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00119c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119cc:	e9 23 a0 ff ff       	jmp    c000b9f4 <Clock::timeInSecondsLocal()>

c00119d1 <string_ends_with(char const*, char const*)>:
c00119d1:	83 ec 1c             	sub    esp,0x1c
c00119d4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00119d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119dc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00119e0:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00119e4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00119e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00119eb:	e8 30 ec fe ff       	call   c0000620 <strlen>
c00119f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00119f3:	89 c6                	mov    esi,eax
c00119f5:	e8 26 ec fe ff       	call   c0000620 <strlen>
c00119fa:	31 d2                	xor    edx,edx
c00119fc:	39 c6                	cmp    esi,eax
c00119fe:	7d 12                	jge    c0011a12 <string_ends_with(char const*, char const*)+0x41>
c0011a00:	89 d0                	mov    eax,edx
c0011a02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a06:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011a0a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011a0e:	83 c4 1c             	add    esp,0x1c
c0011a11:	c3                   	ret    
c0011a12:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0011a16:	29 c6                	sub    esi,eax
c0011a18:	01 f3                	add    ebx,esi
c0011a1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a1d:	e8 1e ee fe ff       	call   c0000840 <strcmp>
c0011a22:	31 d2                	xor    edx,edx
c0011a24:	85 c0                	test   eax,eax
c0011a26:	0f 94 c2             	sete   dl
c0011a29:	eb d5                	jmp    c0011a00 <string_ends_with(char const*, char const*)+0x2f>

c0011a2b <SysOpen(regs*)>:
c0011a2b:	56                   	push   esi
c0011a2c:	53                   	push   ebx
c0011a2d:	81 ec 14 01 00 00    	sub    esp,0x114
c0011a33:	8b b4 24 20 01 00 00 	mov    esi,DWORD PTR [esp+0x120]
c0011a3a:	8b 4e 20             	mov    ecx,DWORD PTR [esi+0x20]
c0011a3d:	85 c9                	test   ecx,ecx
c0011a3f:	0f 84 cf 01 00 00    	je     c0011c14 <SysOpen(regs*)+0x1e9>
c0011a45:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011a48:	85 c0                	test   eax,eax
c0011a4a:	0f 84 c4 01 00 00    	je     c0011c14 <SysOpen(regs*)+0x1e9>
c0011a50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a54:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0011a58:	ba 2a 0b 02 c0       	mov    edx,0xc0020b2a
c0011a5d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011a61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a64:	e8 e8 93 ff ff       	call   c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011a69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a6c:	e8 af eb fe ff       	call   c0000620 <strlen>
c0011a71:	48                   	dec    eax
c0011a72:	74 29                	je     c0011a9d <SysOpen(regs*)+0x72>
c0011a74:	0f b6 54 04 10       	movzx  edx,BYTE PTR [esp+eax*1+0x10]
c0011a79:	80 fa 2e             	cmp    dl,0x2e
c0011a7c:	74 1a                	je     c0011a98 <SysOpen(regs*)+0x6d>
c0011a7e:	80 fa 3a             	cmp    dl,0x3a
c0011a81:	74 15                	je     c0011a98 <SysOpen(regs*)+0x6d>
c0011a83:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0011a87:	48                   	dec    eax
c0011a88:	74 13                	je     c0011a9d <SysOpen(regs*)+0x72>
c0011a8a:	0f b6 14 03          	movzx  edx,BYTE PTR [ebx+eax*1]
c0011a8e:	80 fa 3a             	cmp    dl,0x3a
c0011a91:	74 05                	je     c0011a98 <SysOpen(regs*)+0x6d>
c0011a93:	80 fa 2e             	cmp    dl,0x2e
c0011a96:	75 eb                	jne    c0011a83 <SysOpen(regs*)+0x58>
c0011a98:	c6 44 04 10 00       	mov    BYTE PTR [esp+eax*1+0x10],0x0
c0011a9d:	b8 2e 0b 02 c0       	mov    eax,0xc0020b2e
c0011aa2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011aa6:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011aa9:	89 04 24             	mov    DWORD PTR [esp],eax
c0011aac:	e8 20 ff ff ff       	call   c00119d1 <string_ends_with(char const*, char const*)>
c0011ab1:	85 c0                	test   eax,eax
c0011ab3:	74 2a                	je     c0011adf <SysOpen(regs*)+0xb4>
c0011ab5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011ab8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011abe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ac5:	66 0f ef c0          	pxor   xmm0,xmm0
c0011ac9:	81 c4 14 01 00 00    	add    esp,0x114
c0011acf:	66 0f 7e c0          	movd   eax,xmm0
c0011ad3:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0011ad8:	5b                   	pop    ebx
c0011ad9:	66 0f 7e c2          	movd   edx,xmm0
c0011add:	5e                   	pop    esi
c0011ade:	c3                   	ret    
c0011adf:	b8 33 0b 02 c0       	mov    eax,0xc0020b33
c0011ae4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ae8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011aee:	e8 de fe ff ff       	call   c00119d1 <string_ends_with(char const*, char const*)>
c0011af3:	85 c0                	test   eax,eax
c0011af5:	75 be                	jne    c0011ab5 <SysOpen(regs*)+0x8a>
c0011af7:	b8 2f 0b 02 c0       	mov    eax,0xc0020b2f
c0011afc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b00:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b06:	e8 35 ed fe ff       	call   c0000840 <strcmp>
c0011b0b:	85 c0                	test   eax,eax
c0011b0d:	74 a6                	je     c0011ab5 <SysOpen(regs*)+0x8a>
c0011b0f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b12:	b8 2e 0b 02 c0       	mov    eax,0xc0020b2e
c0011b17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b1b:	e8 b1 fe ff ff       	call   c00119d1 <string_ends_with(char const*, char const*)>
c0011b20:	85 c0                	test   eax,eax
c0011b22:	75 91                	jne    c0011ab5 <SysOpen(regs*)+0x8a>
c0011b24:	b8 38 0b 02 c0       	mov    eax,0xc0020b38
c0011b29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b2d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b30:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b33:	e8 99 fe ff ff       	call   c00119d1 <string_ends_with(char const*, char const*)>
c0011b38:	85 c0                	test   eax,eax
c0011b3a:	0f 85 dd 00 00 00    	jne    c0011c1d <SysOpen(regs*)+0x1f2>
c0011b40:	b9 3d 0b 02 c0       	mov    ecx,0xc0020b3d
c0011b45:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0011b49:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b4f:	e8 7d fe ff ff       	call   c00119d1 <string_ends_with(char const*, char const*)>
c0011b54:	85 c0                	test   eax,eax
c0011b56:	0f 85 c1 00 00 00    	jne    c0011c1d <SysOpen(regs*)+0x1f2>
c0011b5c:	ba 39 0b 02 c0       	mov    edx,0xc0020b39
c0011b61:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011b65:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011b68:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b6b:	e8 d0 ec fe ff       	call   c0000840 <strcmp>
c0011b70:	85 c0                	test   eax,eax
c0011b72:	0f 84 a5 00 00 00    	je     c0011c1d <SysOpen(regs*)+0x1f2>
c0011b78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011b7b:	b8 38 0b 02 c0       	mov    eax,0xc0020b38
c0011b80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b84:	e8 48 fe ff ff       	call   c00119d1 <string_ends_with(char const*, char const*)>
c0011b89:	85 c0                	test   eax,eax
c0011b8b:	0f 85 8c 00 00 00    	jne    c0011c1d <SysOpen(regs*)+0x1f2>
c0011b91:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011b98:	e8 5f 5f ff ff       	call   c0007afc <malloc>
c0011b9d:	89 c3                	mov    ebx,eax
c0011b9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011bab:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0011bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bb5:	e8 3e 94 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011bba:	85 db                	test   ebx,ebx
c0011bbc:	74 56                	je     c0011c14 <SysOpen(regs*)+0x1e9>
c0011bbe:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011bc1:	0f b6 c2             	movzx  eax,dl
c0011bc4:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0011bc7:	89 d0                	mov    eax,edx
c0011bc9:	83 e0 01             	and    eax,0x1
c0011bcc:	f6 c2 02             	test   dl,0x2
c0011bcf:	74 03                	je     c0011bd4 <SysOpen(regs*)+0x1a9>
c0011bd1:	83 c8 02             	or     eax,0x2
c0011bd4:	f6 c2 04             	test   dl,0x4
c0011bd7:	74 03                	je     c0011bdc <SysOpen(regs*)+0x1b1>
c0011bd9:	83 c8 04             	or     eax,0x4
c0011bdc:	f6 c2 08             	test   dl,0x8
c0011bdf:	74 03                	je     c0011be4 <SysOpen(regs*)+0x1b9>
c0011be1:	83 c8 0a             	or     eax,0xa
c0011be4:	f6 c2 10             	test   dl,0x10
c0011be7:	74 03                	je     c0011bec <SysOpen(regs*)+0x1c1>
c0011be9:	83 c8 12             	or     eax,0x12
c0011bec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bf3:	e8 be 94 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0011bf8:	85 c0                	test   eax,eax
c0011bfa:	75 18                	jne    c0011c14 <SysOpen(regs*)+0x1e9>
c0011bfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bff:	e8 f2 75 ff ff       	call   c00091f6 <UnixFile::getFileDescriptor()>
c0011c04:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c0011c07:	89 02                	mov    DWORD PTR [edx],eax
c0011c09:	c1 f8 1f             	sar    eax,0x1f
c0011c0c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011c0f:	e9 b1 fe ff ff       	jmp    c0011ac5 <SysOpen(regs*)+0x9a>
c0011c14:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c0011c18:	e9 ac fe ff ff       	jmp    c0011ac9 <SysOpen(regs*)+0x9e>
c0011c1d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011c20:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011c26:	e9 93 fe ff ff       	jmp    c0011abe <SysOpen(regs*)+0x93>

c0011c2b <KeSystemCall(regs*, void*)>:
c0011c2b:	53                   	push   ebx
c0011c2c:	83 ec 08             	sub    esp,0x8
c0011c2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c33:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011c36:	83 f8 3b             	cmp    eax,0x3b
c0011c39:	77 16                	ja     c0011c51 <KeSystemCall(regs*, void*)+0x26>
c0011c3b:	8b 14 85 00 1f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde100]
c0011c42:	85 d2                	test   edx,edx
c0011c44:	74 0b                	je     c0011c51 <KeSystemCall(regs*, void*)+0x26>
c0011c46:	83 ec 0c             	sub    esp,0xc
c0011c49:	53                   	push   ebx
c0011c4a:	ff d2                	call   edx
c0011c4c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011c4f:	eb 0d                	jmp    c0011c5e <KeSystemCall(regs*, void*)+0x33>
c0011c51:	52                   	push   edx
c0011c52:	52                   	push   edx
c0011c53:	50                   	push   eax
c0011c54:	68 42 0b 02 c0       	push   0xc0020b42
c0011c59:	e8 18 8e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0011c5e:	83 c4 10             	add    esp,0x10
c0011c61:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011c66:	83 c4 08             	add    esp,0x8
c0011c69:	31 d2                	xor    edx,edx
c0011c6b:	5b                   	pop    ebx
c0011c6c:	c3                   	ret    
c0011c6d:	66 90                	xchg   ax,ax
c0011c6f:	90                   	nop

c0011c70 <KeSwitchEndian16(unsigned short)>:
c0011c70:	83 ec 04             	sub    esp,0x4
c0011c73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c77:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011c7b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c7f:	c1 f8 08             	sar    eax,0x8
c0011c82:	0f bf d0             	movsx  edx,ax
c0011c85:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011c89:	c1 e0 08             	shl    eax,0x8
c0011c8c:	98                   	cwde   
c0011c8d:	09 d0                	or     eax,edx
c0011c8f:	98                   	cwde   
c0011c90:	0f b7 c0             	movzx  eax,ax
c0011c93:	83 c4 04             	add    esp,0x4
c0011c96:	c3                   	ret    
c0011c97:	90                   	nop

c0011c98 <KeSwitchEndian32(unsigned int)>:
c0011c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c9c:	c1 e8 18             	shr    eax,0x18
c0011c9f:	89 c2                	mov    edx,eax
c0011ca1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ca5:	c1 e0 08             	shl    eax,0x8
c0011ca8:	25 00 00 ff 00       	and    eax,0xff0000
c0011cad:	09 c2                	or     edx,eax
c0011caf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb3:	c1 e8 08             	shr    eax,0x8
c0011cb6:	25 00 ff 00 00       	and    eax,0xff00
c0011cbb:	09 c2                	or     edx,eax
c0011cbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cc1:	c1 e0 18             	shl    eax,0x18
c0011cc4:	09 d0                	or     eax,edx
c0011cc6:	c3                   	ret    
c0011cc7:	90                   	nop

c0011cc8 <EthernetCRC32(unsigned char*, int)>:
c0011cc8:	83 ec 10             	sub    esp,0x10
c0011ccb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011cd0:	75 0a                	jne    c0011cdc <EthernetCRC32(unsigned char*, int)+0x14>
c0011cd2:	b8 00 00 00 00       	mov    eax,0x0
c0011cd7:	e9 8c 00 00 00       	jmp    c0011d68 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011cdc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011ce1:	7f 09                	jg     c0011cec <EthernetCRC32(unsigned char*, int)+0x24>
c0011ce3:	b8 00 00 00 00       	mov    eax,0x0
c0011ce8:	eb 7e                	jmp    c0011d68 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011cea:	66 90                	xchg   ax,ax
c0011cec:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011cf4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011cfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d00:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011d04:	7d 5a                	jge    c0011d60 <EthernetCRC32(unsigned char*, int)+0x98>
c0011d06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d0e:	01 d0                	add    eax,edx
c0011d10:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0011d13:	0f b6 c0             	movzx  eax,al
c0011d16:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011d1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d22:	66 90                	xchg   ax,ax
c0011d24:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011d29:	7f 2d                	jg     c0011d58 <EthernetCRC32(unsigned char*, int)+0x90>
c0011d2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d2f:	83 e0 01             	and    eax,0x1
c0011d32:	74 10                	je     c0011d44 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d38:	d1 e8                	shr    eax,1
c0011d3a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011d3f:	eb 0b                	jmp    c0011d4c <EthernetCRC32(unsigned char*, int)+0x84>
c0011d41:	8d 76 00             	lea    esi,[esi+0x0]
c0011d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d48:	d1 e8                	shr    eax,1
c0011d4a:	66 90                	xchg   ax,ax
c0011d4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d50:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011d54:	eb ce                	jmp    c0011d24 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011d56:	66 90                	xchg   ax,ax
c0011d58:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011d5c:	eb 9e                	jmp    c0011cfc <EthernetCRC32(unsigned char*, int)+0x34>
c0011d5e:	66 90                	xchg   ax,ax
c0011d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d64:	f7 d0                	not    eax
c0011d66:	66 90                	xchg   ax,ax
c0011d68:	83 c4 10             	add    esp,0x10
c0011d6b:	c3                   	ret    

c0011d6c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011d6c:	83 ec 3c             	sub    esp,0x3c
c0011d6f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d73:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0011d78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d7c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d84:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011d88:	3d 06 08 00 00       	cmp    eax,0x806
c0011d8d:	75 11                	jne    c0011da0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c0011d8f:	c7 04 24 56 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b56
c0011d96:	e8 db 8c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0011d9b:	eb 1f                	jmp    c0011dbc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0011da0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011da4:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
c0011da8:	3d 00 08 00 00       	cmp    eax,0x800
c0011dad:	75 0d                	jne    c0011dbc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x50>
c0011daf:	c7 04 24 6c 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b6c
c0011db6:	e8 bb 8c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0011dbb:	90                   	nop
c0011dbc:	90                   	nop
c0011dbd:	83 c4 3c             	add    esp,0x3c
c0011dc0:	c3                   	ret    

c0011dc1 <CmOpen(char const*)>:
c0011dc1:	57                   	push   edi
c0011dc2:	56                   	push   esi
c0011dc3:	53                   	push   ebx
c0011dc4:	83 ec 1c             	sub    esp,0x1c
c0011dc7:	6a 30                	push   0x30
c0011dc9:	e8 2e 5d ff ff       	call   c0007afc <malloc>
c0011dce:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011dd5:	89 c3                	mov    ebx,eax
c0011dd7:	e8 20 5d ff ff       	call   c0007afc <malloc>
c0011ddc:	83 c4 0c             	add    esp,0xc
c0011ddf:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011de9:	89 c6                	mov    esi,eax
c0011deb:	50                   	push   eax
c0011dec:	e8 07 92 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0011df1:	83 c4 0c             	add    esp,0xc
c0011df4:	89 33                	mov    DWORD PTR [ebx],esi
c0011df6:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011dfa:	50                   	push   eax
c0011dfb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011dff:	50                   	push   eax
c0011e00:	56                   	push   esi
c0011e01:	e8 56 95 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0011e06:	5a                   	pop    edx
c0011e07:	59                   	pop    ecx
c0011e08:	6a 01                	push   0x1
c0011e0a:	ff 33                	push   DWORD PTR [ebx]
c0011e0c:	e8 a5 92 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0011e11:	5e                   	pop    esi
c0011e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e16:	e8 e1 5c ff ff       	call   c0007afc <malloc>
c0011e1b:	5a                   	pop    edx
c0011e1c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011e20:	89 c7                	mov    edi,eax
c0011e22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e24:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e26:	56                   	push   esi
c0011e27:	57                   	push   edi
c0011e28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e30:	50                   	push   eax
c0011e31:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e34:	83 c4 14             	add    esp,0x14
c0011e37:	ff 33                	push   DWORD PTR [ebx]
c0011e39:	e8 d6 92 ff ff       	call   c000b114 <File::close()>
c0011e3e:	59                   	pop    ecx
c0011e3f:	58                   	pop    eax
c0011e40:	6a 13                	push   0x13
c0011e42:	ff 33                	push   DWORD PTR [ebx]
c0011e44:	e8 6d 92 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0011e49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e4d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e50:	57                   	push   edi
c0011e51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e59:	50                   	push   eax
c0011e5a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011e5d:	83 c4 14             	add    esp,0x14
c0011e60:	57                   	push   edi
c0011e61:	e8 a9 5c ff ff       	call   c0007b0f <free>
c0011e66:	83 c4 10             	add    esp,0x10
c0011e69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011e6c:	75 10                	jne    c0011e7e <CmOpen(char const*)+0xbd>
c0011e6e:	83 ec 0c             	sub    esp,0xc
c0011e71:	68 81 0b 02 c0       	push   0xc0020b81
c0011e76:	e8 aa e9 ff ff       	call   c0010825 <KePanic(char const*)>
c0011e7b:	83 c4 10             	add    esp,0x10
c0011e7e:	50                   	push   eax
c0011e7f:	6a 00                	push   0x0
c0011e81:	6a 00                	push   0x0
c0011e83:	ff 33                	push   DWORD PTR [ebx]
c0011e85:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011e88:	e8 e7 92 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011e8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e91:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e94:	57                   	push   edi
c0011e95:	6a 00                	push   0x0
c0011e97:	6a 2b                	push   0x2b
c0011e99:	50                   	push   eax
c0011e9a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e9d:	83 c4 1c             	add    esp,0x1c
c0011ea0:	6a 00                	push   0x0
c0011ea2:	6a 00                	push   0x0
c0011ea4:	ff 33                	push   DWORD PTR [ebx]
c0011ea6:	e8 c9 92 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011eab:	83 c4 0c             	add    esp,0xc
c0011eae:	6a 08                	push   0x8
c0011eb0:	68 92 0b 02 c0       	push   0xc0020b92
c0011eb5:	57                   	push   edi
c0011eb6:	e8 c5 e4 fe ff       	call   c0000380 <memcmp>
c0011ebb:	83 c4 10             	add    esp,0x10
c0011ebe:	85 c0                	test   eax,eax
c0011ec0:	74 10                	je     c0011ed2 <CmOpen(char const*)+0x111>
c0011ec2:	83 ec 0c             	sub    esp,0xc
c0011ec5:	68 9b 0b 02 c0       	push   0xc0020b9b
c0011eca:	e8 56 e9 ff ff       	call   c0010825 <KePanic(char const*)>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011ed6:	83 c4 10             	add    esp,0x10
c0011ed9:	89 d8                	mov    eax,ebx
c0011edb:	5b                   	pop    ebx
c0011edc:	5e                   	pop    esi
c0011edd:	5f                   	pop    edi
c0011ede:	c3                   	ret    

c0011edf <CmClose(Reghive_Tag*)>:
c0011edf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ee3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011ee7:	74 0b                	je     c0011ef4 <CmClose(Reghive_Tag*)+0x15>
c0011ee9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011eef:	e9 20 92 ff ff       	jmp    c000b114 <File::close()>
c0011ef4:	c3                   	ret    

c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011ef5:	53                   	push   ebx
c0011ef6:	83 ec 18             	sub    esp,0x18
c0011ef9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011efd:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f01:	74 29                	je     c0011f2c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f03:	50                   	push   eax
c0011f04:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f09:	99                   	cdq    
c0011f0a:	52                   	push   edx
c0011f0b:	50                   	push   eax
c0011f0c:	ff 33                	push   DWORD PTR [ebx]
c0011f0e:	e8 61 92 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0011f13:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f15:	5a                   	pop    edx
c0011f16:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f1c:	51                   	push   ecx
c0011f1d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f21:	6a 00                	push   0x0
c0011f23:	6a 2b                	push   0x2b
c0011f25:	50                   	push   eax
c0011f26:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f29:	83 c4 20             	add    esp,0x20
c0011f2c:	83 c4 18             	add    esp,0x18
c0011f2f:	5b                   	pop    ebx
c0011f30:	c3                   	ret    

c0011f31 <CmGetString(Reghive_Tag*, int, char*)>:
c0011f31:	55                   	push   ebp
c0011f32:	57                   	push   edi
c0011f33:	56                   	push   esi
c0011f34:	53                   	push   ebx
c0011f35:	31 db                	xor    ebx,ebx
c0011f37:	83 ec 70             	sub    esp,0x70
c0011f3a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011f3e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011f45:	50                   	push   eax
c0011f46:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011f4d:	55                   	push   ebp
c0011f4e:	e8 a2 ff ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011f5b:	c1 e0 08             	shl    eax,0x8
c0011f5e:	89 c2                	mov    edx,eax
c0011f60:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011f65:	09 d0                	or     eax,edx
c0011f67:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011f6c:	c1 e0 08             	shl    eax,0x8
c0011f6f:	09 d0                	or     eax,edx
c0011f71:	74 25                	je     c0011f98 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011f73:	52                   	push   edx
c0011f74:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011f78:	52                   	push   edx
c0011f79:	6b fb 0d             	imul   edi,ebx,0xd
c0011f7c:	50                   	push   eax
c0011f7d:	55                   	push   ebp
c0011f7e:	e8 72 ff ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f83:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011f87:	b9 27 00 00 00       	mov    ecx,0x27
c0011f8c:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	83 c3 03             	add    ebx,0x3
c0011f9b:	83 fb 15             	cmp    ebx,0x15
c0011f9e:	75 b6                	jne    c0011f56 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011fa0:	83 c4 6c             	add    esp,0x6c
c0011fa3:	5b                   	pop    ebx
c0011fa4:	5e                   	pop    esi
c0011fa5:	5f                   	pop    edi
c0011fa6:	5d                   	pop    ebp
c0011fa7:	c3                   	ret    

c0011fa8 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011fa8:	83 ec 40             	sub    esp,0x40
c0011fab:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011faf:	50                   	push   eax
c0011fb0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fb4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fb8:	e8 38 ff ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011fbd:	83 c4 10             	add    esp,0x10
c0011fc0:	83 c8 ff             	or     eax,0xffffffff
c0011fc3:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011fc8:	75 19                	jne    c0011fe3 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011fca:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011fcf:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011fd4:	c1 e0 08             	shl    eax,0x8
c0011fd7:	09 c2                	or     edx,eax
c0011fd9:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011fde:	c1 e0 10             	shl    eax,0x10
c0011fe1:	09 d0                	or     eax,edx
c0011fe3:	83 c4 3c             	add    esp,0x3c
c0011fe6:	c3                   	ret    

c0011fe7 <CmGetNext(Reghive_Tag*, int)>:
c0011fe7:	83 ec 40             	sub    esp,0x40
c0011fea:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011fee:	50                   	push   eax
c0011fef:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ff7:	e8 f9 fe ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ffc:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012001:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012006:	c1 e0 08             	shl    eax,0x8
c0012009:	09 c2                	or     edx,eax
c001200b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012010:	83 c4 4c             	add    esp,0x4c
c0012013:	c1 e0 10             	shl    eax,0x10
c0012016:	09 d0                	or     eax,edx
c0012018:	c3                   	ret    

c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012019:	53                   	push   ebx
c001201a:	83 ec 18             	sub    esp,0x18
c001201d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012021:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012025:	74 29                	je     c0012050 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012027:	50                   	push   eax
c0012028:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001202d:	99                   	cdq    
c001202e:	52                   	push   edx
c001202f:	50                   	push   eax
c0012030:	ff 33                	push   DWORD PTR [ebx]
c0012032:	e8 3d 91 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0012037:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012039:	5a                   	pop    edx
c001203a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001203e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012040:	51                   	push   ecx
c0012041:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012045:	6a 00                	push   0x0
c0012047:	6a 2b                	push   0x2b
c0012049:	50                   	push   eax
c001204a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001204d:	83 c4 20             	add    esp,0x20
c0012050:	83 c4 18             	add    esp,0x18
c0012053:	5b                   	pop    ebx
c0012054:	c3                   	ret    

c0012055 <CmFreeExtent(Reghive_Tag*, int)>:
c0012055:	53                   	push   ebx
c0012056:	83 ec 3c             	sub    esp,0x3c
c0012059:	6a 2b                	push   0x2b
c001205b:	6a 00                	push   0x0
c001205d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012061:	53                   	push   ebx
c0012062:	e8 19 e5 fe ff       	call   c0000580 <memset>
c0012067:	83 c4 0c             	add    esp,0xc
c001206a:	53                   	push   ebx
c001206b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001206f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012073:	e8 a1 ff ff ff       	call   c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012078:	83 c4 48             	add    esp,0x48
c001207b:	5b                   	pop    ebx
c001207c:	c3                   	ret    

c001207d <CmUpdateHeader(Reghive_Tag*)>:
c001207d:	83 ec 0c             	sub    esp,0xc
c0012080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012084:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012088:	74 10                	je     c001209a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001208a:	52                   	push   edx
c001208b:	8d 50 05             	lea    edx,[eax+0x5]
c001208e:	52                   	push   edx
c001208f:	6a 00                	push   0x0
c0012091:	50                   	push   eax
c0012092:	e8 82 ff ff ff       	call   c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012097:	83 c4 10             	add    esp,0x10
c001209a:	83 c4 0c             	add    esp,0xc
c001209d:	c3                   	ret    

c001209e <CmExpand(Reghive_Tag*, int)>:
c001209e:	55                   	push   ebp
c001209f:	57                   	push   edi
c00120a0:	83 cf ff             	or     edi,0xffffffff
c00120a3:	56                   	push   esi
c00120a4:	53                   	push   ebx
c00120a5:	83 ec 3c             	sub    esp,0x3c
c00120a8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00120ac:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00120b0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00120b4:	74 59                	je     c001210f <CmExpand(Reghive_Tag*, int)+0x71>
c00120b6:	50                   	push   eax
c00120b7:	31 d2                	xor    edx,edx
c00120b9:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00120bd:	31 ff                	xor    edi,edi
c00120bf:	52                   	push   edx
c00120c0:	50                   	push   eax
c00120c1:	ff 33                	push   DWORD PTR [ebx]
c00120c3:	e8 ac 90 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00120c8:	83 c4 0c             	add    esp,0xc
c00120cb:	6a 2b                	push   0x2b
c00120cd:	6a 00                	push   0x0
c00120cf:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00120d3:	55                   	push   ebp
c00120d4:	e8 a7 e4 fe ff       	call   c0000580 <memset>
c00120d9:	83 c4 10             	add    esp,0x10
c00120dc:	39 f7                	cmp    edi,esi
c00120de:	7d 1b                	jge    c00120fb <CmExpand(Reghive_Tag*, int)+0x5d>
c00120e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00120e2:	83 ec 0c             	sub    esp,0xc
c00120e5:	47                   	inc    edi
c00120e6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00120ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00120ec:	51                   	push   ecx
c00120ed:	55                   	push   ebp
c00120ee:	6a 00                	push   0x0
c00120f0:	6a 2b                	push   0x2b
c00120f2:	50                   	push   eax
c00120f3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00120f6:	83 c4 20             	add    esp,0x20
c00120f9:	eb e1                	jmp    c00120dc <CmExpand(Reghive_Tag*, int)+0x3e>
c00120fb:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c00120fe:	83 ec 0c             	sub    esp,0xc
c0012101:	01 fe                	add    esi,edi
c0012103:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012106:	53                   	push   ebx
c0012107:	e8 71 ff ff ff       	call   c001207d <CmUpdateHeader(Reghive_Tag*)>
c001210c:	83 c4 10             	add    esp,0x10
c001210f:	83 c4 3c             	add    esp,0x3c
c0012112:	89 f8                	mov    eax,edi
c0012114:	5b                   	pop    ebx
c0012115:	5e                   	pop    esi
c0012116:	5f                   	pop    edi
c0012117:	5d                   	pop    ebp
c0012118:	c3                   	ret    

c0012119 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012119:	55                   	push   ebp
c001211a:	57                   	push   edi
c001211b:	56                   	push   esi
c001211c:	53                   	push   ebx
c001211d:	83 cb ff             	or     ebx,0xffffffff
c0012120:	83 ec 1c             	sub    esp,0x1c
c0012123:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012127:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001212b:	74 68                	je     c0012195 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001212d:	51                   	push   ecx
c001212e:	be 2b 00 00 00       	mov    esi,0x2b
c0012133:	6a 00                	push   0x0
c0012135:	31 ff                	xor    edi,edi
c0012137:	6a 00                	push   0x0
c0012139:	31 db                	xor    ebx,ebx
c001213b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001213e:	e8 31 90 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0012143:	83 c4 10             	add    esp,0x10
c0012146:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012149:	76 3b                	jbe    c0012186 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001214b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012155:	8b 10                	mov    edx,DWORD PTR [eax]
c0012157:	51                   	push   ecx
c0012158:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c001215c:	51                   	push   ecx
c001215d:	6a 00                	push   0x0
c001215f:	6a 01                	push   0x1
c0012161:	50                   	push   eax
c0012162:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012165:	83 c4 20             	add    esp,0x20
c0012168:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001216d:	74 26                	je     c0012195 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c001216f:	52                   	push   edx
c0012170:	43                   	inc    ebx
c0012171:	57                   	push   edi
c0012172:	56                   	push   esi
c0012173:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012176:	e8 f9 8f ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001217b:	83 c6 2b             	add    esi,0x2b
c001217e:	83 d7 00             	adc    edi,0x0
c0012181:	83 c4 10             	add    esp,0x10
c0012184:	eb c0                	jmp    c0012146 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012186:	50                   	push   eax
c0012187:	50                   	push   eax
c0012188:	6a 40                	push   0x40
c001218a:	55                   	push   ebp
c001218b:	e8 0e ff ff ff       	call   c001209e <CmExpand(Reghive_Tag*, int)>
c0012190:	83 c4 10             	add    esp,0x10
c0012193:	89 c3                	mov    ebx,eax
c0012195:	83 c4 1c             	add    esp,0x1c
c0012198:	89 d8                	mov    eax,ebx
c001219a:	5b                   	pop    ebx
c001219b:	5e                   	pop    esi
c001219c:	5f                   	pop    edi
c001219d:	5d                   	pop    ebp
c001219e:	c3                   	ret    

c001219f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c001219f:	55                   	push   ebp
c00121a0:	57                   	push   edi
c00121a1:	56                   	push   esi
c00121a2:	53                   	push   ebx
c00121a3:	81 ec 88 00 00 00    	sub    esp,0x88
c00121a9:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00121b0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121b7:	e8 5d ff ff ff       	call   c0012119 <CmFindUnusedExtent(Reghive_Tag*)>
c00121bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121c0:	83 c4 0c             	add    esp,0xc
c00121c3:	6a 2b                	push   0x2b
c00121c5:	6a 00                	push   0x0
c00121c7:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00121cb:	55                   	push   ebp
c00121cc:	e8 af e3 fe ff       	call   c0000580 <memset>
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	85 db                	test   ebx,ebx
c00121d6:	74 12                	je     c00121ea <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00121d8:	51                   	push   ecx
c00121d9:	55                   	push   ebp
c00121da:	53                   	push   ebx
c00121db:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121e2:	e8 0e fd ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121e7:	83 c4 10             	add    esp,0x10
c00121ea:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00121ee:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121f5:	b9 2b 00 00 00       	mov    ecx,0x2b
c00121fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00121fc:	85 db                	test   ebx,ebx
c00121fe:	74 4c                	je     c001224c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xad>
c0012200:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012205:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c001220a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001220e:	c1 e0 08             	shl    eax,0x8
c0012211:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012217:	09 c8                	or     eax,ecx
c0012219:	0f b6 ca             	movzx  ecx,dl
c001221c:	74 11                	je     c001222f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x90>
c001221e:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012222:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012226:	c1 e8 10             	shr    eax,0x10
c0012229:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001222d:	eb 0f                	jmp    c001223e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9f>
c001222f:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012234:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012239:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001223e:	88 4c 24 1b          	mov    BYTE PTR [esp+0x1b],cl
c0012242:	c1 ea 08             	shr    edx,0x8
c0012245:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001224a:	eb 0f                	jmp    c001225b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xbc>
c001224c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012251:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012256:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001225b:	52                   	push   edx
c001225c:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012260:	50                   	push   eax
c0012261:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012265:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001226c:	e8 a8 fd ff ff       	call   c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012271:	83 c4 10             	add    esp,0x10
c0012274:	85 db                	test   ebx,ebx
c0012276:	74 12                	je     c001228a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xeb>
c0012278:	50                   	push   eax
c0012279:	55                   	push   ebp
c001227a:	53                   	push   ebx
c001227b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012282:	e8 92 fd ff ff       	call   c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012287:	83 c4 10             	add    esp,0x10
c001228a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001228e:	83 c4 7c             	add    esp,0x7c
c0012291:	5b                   	pop    ebx
c0012292:	5e                   	pop    esi
c0012293:	5f                   	pop    edi
c0012294:	5d                   	pop    ebp
c0012295:	c3                   	ret    

c0012296 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012296:	55                   	push   ebp
c0012297:	57                   	push   edi
c0012298:	56                   	push   esi
c0012299:	53                   	push   ebx
c001229a:	bb 27 00 00 00       	mov    ebx,0x27
c001229f:	81 ec 88 00 00 00    	sub    esp,0x88
c00122a5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00122ac:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00122b3:	e8 68 e3 fe ff       	call   c0000620 <strlen>
c00122b8:	8d 48 26             	lea    ecx,[eax+0x26]
c00122bb:	89 c8                	mov    eax,ecx
c00122bd:	99                   	cdq    
c00122be:	f7 fb                	idiv   ebx
c00122c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122c4:	83 c4 10             	add    esp,0x10
c00122c7:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00122cd:	7e 10                	jle    c00122df <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00122cf:	83 ec 0c             	sub    esp,0xc
c00122d2:	68 ac 0b 02 c0       	push   0xc0020bac
c00122d7:	e8 49 e5 ff ff       	call   c0010825 <KePanic(char const*)>
c00122dc:	83 c4 10             	add    esp,0x10
c00122df:	50                   	push   eax
c00122e0:	31 ff                	xor    edi,edi
c00122e2:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00122e6:	53                   	push   ebx
c00122e7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122ee:	56                   	push   esi
c00122ef:	e8 01 fc ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122f4:	83 c4 10             	add    esp,0x10
c00122f7:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00122fb:	89 d0                	mov    eax,edx
c00122fd:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012301:	c1 e0 08             	shl    eax,0x8
c0012304:	09 c2                	or     edx,eax
c0012306:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001230a:	c1 e2 08             	shl    edx,0x8
c001230d:	09 c2                	or     edx,eax
c001230f:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012313:	7e 76                	jle    c001238b <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012315:	85 d2                	test   edx,edx
c0012317:	75 25                	jne    c001233e <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012319:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001231e:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012322:	50                   	push   eax
c0012323:	6a 00                	push   0x0
c0012325:	6a 00                	push   0x0
c0012327:	56                   	push   esi
c0012328:	e8 72 fe ff ff       	call   c001219f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001232d:	83 c4 10             	add    esp,0x10
c0012330:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012333:	89 c2                	mov    edx,eax
c0012335:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012338:	c1 f8 10             	sar    eax,0x10
c001233b:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001233e:	55                   	push   ebp
c001233f:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012343:	55                   	push   ebp
c0012344:	52                   	push   edx
c0012345:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012349:	56                   	push   esi
c001234a:	e8 a6 fb ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001234f:	83 c4 0c             	add    esp,0xc
c0012352:	6a 27                	push   0x27
c0012354:	6a 00                	push   0x0
c0012356:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001235a:	51                   	push   ecx
c001235b:	e8 20 e2 fe ff       	call   c0000580 <memset>
c0012360:	6b c7 27             	imul   eax,edi,0x27
c0012363:	83 c4 0c             	add    esp,0xc
c0012366:	6a 27                	push   0x27
c0012368:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c001236f:	50                   	push   eax
c0012370:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012374:	51                   	push   ecx
c0012375:	e8 d6 e3 fe ff       	call   c0000750 <strncpy>
c001237a:	83 c4 0c             	add    esp,0xc
c001237d:	55                   	push   ebp
c001237e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012382:	52                   	push   edx
c0012383:	56                   	push   esi
c0012384:	e8 90 fc ff ff       	call   c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012389:	eb 19                	jmp    c00123a4 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001238b:	85 d2                	test   edx,edx
c001238d:	74 18                	je     c00123a7 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c001238f:	51                   	push   ecx
c0012390:	51                   	push   ecx
c0012391:	52                   	push   edx
c0012392:	56                   	push   esi
c0012393:	e8 bd fc ff ff       	call   c0012055 <CmFreeExtent(Reghive_Tag*, int)>
c0012398:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c001239c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00123a0:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	47                   	inc    edi
c00123a8:	83 c3 03             	add    ebx,0x3
c00123ab:	83 ff 07             	cmp    edi,0x7
c00123ae:	0f 85 43 ff ff ff    	jne    c00122f7 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00123b4:	50                   	push   eax
c00123b5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00123b9:	50                   	push   eax
c00123ba:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00123c1:	56                   	push   esi
c00123c2:	e8 52 fc ff ff       	call   c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00123c7:	81 c4 8c 00 00 00    	add    esp,0x8c
c00123cd:	5b                   	pop    ebx
c00123ce:	5e                   	pop    esi
c00123cf:	5f                   	pop    edi
c00123d0:	5d                   	pop    ebp
c00123d1:	c3                   	ret    

c00123d2 <CmGetMatch(char*, char*, bool, bool*)>:
c00123d2:	56                   	push   esi
c00123d3:	53                   	push   ebx
c00123d4:	50                   	push   eax
c00123d5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00123da:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00123de:	74 25                	je     c0012405 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00123e0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123e3:	31 db                	xor    ebx,ebx
c00123e5:	50                   	push   eax
c00123e6:	50                   	push   eax
c00123e7:	8d 04 9d 00 20 02 c0 	lea    eax,[ebx*4-0x3ffde000]
c00123ee:	50                   	push   eax
c00123ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00123f3:	e8 48 e4 fe ff       	call   c0000840 <strcmp>
c00123f8:	83 c4 10             	add    esp,0x10
c00123fb:	85 c0                	test   eax,eax
c00123fd:	74 2e                	je     c001242d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00123ff:	43                   	inc    ebx
c0012400:	83 fb 3f             	cmp    ebx,0x3f
c0012403:	75 e0                	jne    c00123e5 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012405:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012408:	31 db                	xor    ebx,ebx
c001240a:	51                   	push   ecx
c001240b:	51                   	push   ecx
c001240c:	8d 04 9d 00 20 02 c0 	lea    eax,[ebx*4-0x3ffde000]
c0012413:	50                   	push   eax
c0012414:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012418:	e8 23 e4 fe ff       	call   c0000840 <strcmp>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	85 c0                	test   eax,eax
c0012422:	74 09                	je     c001242d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012424:	43                   	inc    ebx
c0012425:	83 fb 3f             	cmp    ebx,0x3f
c0012428:	75 e0                	jne    c001240a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001242a:	83 cb ff             	or     ebx,0xffffffff
c001242d:	5a                   	pop    edx
c001242e:	89 d8                	mov    eax,ebx
c0012430:	5b                   	pop    ebx
c0012431:	5e                   	pop    esi
c0012432:	c3                   	ret    

c0012433 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012433:	55                   	push   ebp
c0012434:	31 c0                	xor    eax,eax
c0012436:	57                   	push   edi
c0012437:	56                   	push   esi
c0012438:	53                   	push   ebx
c0012439:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001243d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012441:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012445:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c001244a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001244c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001244f:	83 fd 1f             	cmp    ebp,0x1f
c0012452:	7f 08                	jg     c001245c <CmAddShift(unsigned int*, int*, unsigned char, int)+0x29>
c0012454:	d3 e2                	shl    edx,cl
c0012456:	b0 01                	mov    al,0x1
c0012458:	09 17                	or     DWORD PTR [edi],edx
c001245a:	01 33                	add    DWORD PTR [ebx],esi
c001245c:	5b                   	pop    ebx
c001245d:	5e                   	pop    esi
c001245e:	5f                   	pop    edi
c001245f:	5d                   	pop    ebp
c0012460:	c3                   	ret    

c0012461 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012461:	57                   	push   edi
c0012462:	56                   	push   esi
c0012463:	53                   	push   ebx
c0012464:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012468:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001246c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012470:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012474:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012476:	7c 18                	jl     c0012490 <CmGetShift(unsigned int*, int*, int, bool*)+0x2f>
c0012478:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001247a:	b8 01 00 00 00       	mov    eax,0x1
c001247f:	d3 e0                	shl    eax,cl
c0012481:	fe c8                	dec    al
c0012483:	22 03                	and    al,BYTE PTR [ebx]
c0012485:	d3 ef                	shr    edi,cl
c0012487:	89 3b                	mov    DWORD PTR [ebx],edi
c0012489:	29 0a                	sub    DWORD PTR [edx],ecx
c001248b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001248e:	eb 05                	jmp    c0012495 <CmGetShift(unsigned int*, int*, int, bool*)+0x34>
c0012490:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012493:	31 c0                	xor    eax,eax
c0012495:	5b                   	pop    ebx
c0012496:	5e                   	pop    esi
c0012497:	5f                   	pop    edi
c0012498:	c3                   	ret    

c0012499 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012499:	83 ec 40             	sub    esp,0x40
c001249c:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124a0:	50                   	push   eax
c00124a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124a9:	e8 47 fa ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124ae:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00124b2:	f3 0f 7e 44 24 2b    	movq   xmm0,QWORD PTR [esp+0x2b]
c00124b8:	66 0f d6 00          	movq   QWORD PTR [eax],xmm0
c00124bc:	83 c4 4c             	add    esp,0x4c
c00124bf:	c3                   	ret    

c00124c0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00124c0:	55                   	push   ebp
c00124c1:	57                   	push   edi
c00124c2:	56                   	push   esi
c00124c3:	53                   	push   ebx
c00124c4:	83 ec 40             	sub    esp,0x40
c00124c7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00124cb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00124cf:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00124d3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00124d7:	53                   	push   ebx
c00124d8:	56                   	push   esi
c00124d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124dd:	e8 13 fa ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124e2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00124e6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00124ea:	83 c4 0c             	add    esp,0xc
c00124ed:	53                   	push   ebx
c00124ee:	56                   	push   esi
c00124ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00124f3:	e8 21 fb ff ff       	call   c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00124f8:	83 c4 4c             	add    esp,0x4c
c00124fb:	5b                   	pop    ebx
c00124fc:	5e                   	pop    esi
c00124fd:	5f                   	pop    edi
c00124fe:	5d                   	pop    ebp
c00124ff:	c3                   	ret    

c0012500 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012500:	55                   	push   ebp
c0012501:	57                   	push   edi
c0012502:	56                   	push   esi
c0012503:	31 f6                	xor    esi,esi
c0012505:	53                   	push   ebx
c0012506:	31 db                	xor    ebx,ebx
c0012508:	83 ec 40             	sub    esp,0x40
c001250b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012513:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001251b:	6a 12                	push   0x12
c001251d:	68 ee 00 00 00       	push   0xee
c0012522:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012526:	e8 55 e0 fe ff       	call   c0000580 <memset>
c001252b:	83 c4 10             	add    esp,0x10
c001252e:	6a 08                	push   0x8
c0012530:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012534:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012538:	50                   	push   eax
c0012539:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001253d:	57                   	push   edi
c001253e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012542:	55                   	push   ebp
c0012543:	e8 eb fe ff ff       	call   c0012433 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012548:	83 c4 10             	add    esp,0x10
c001254b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001254f:	50                   	push   eax
c0012550:	6a 06                	push   0x6
c0012552:	57                   	push   edi
c0012553:	55                   	push   ebp
c0012554:	e8 08 ff ff ff       	call   c0012461 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012559:	83 c4 10             	add    esp,0x10
c001255c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012561:	74 07                	je     c001256a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012563:	46                   	inc    esi
c0012564:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012568:	eb e1                	jmp    c001254b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001256a:	43                   	inc    ebx
c001256b:	83 fb 12             	cmp    ebx,0x12
c001256e:	75 be                	jne    c001252e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0012570:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012574:	31 f6                	xor    esi,esi
c0012576:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012579:	50                   	push   eax
c001257a:	50                   	push   eax
c001257b:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012580:	46                   	inc    esi
c0012581:	8d 04 85 00 20 02 c0 	lea    eax,[eax*4-0x3ffde000]
c0012588:	50                   	push   eax
c0012589:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001258d:	e8 9e e3 fe ff       	call   c0000930 <strcat>
c0012592:	83 c4 10             	add    esp,0x10
c0012595:	83 fe 18             	cmp    esi,0x18
c0012598:	75 df                	jne    c0012579 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c001259a:	83 c4 3c             	add    esp,0x3c
c001259d:	31 c0                	xor    eax,eax
c001259f:	5b                   	pop    ebx
c00125a0:	5e                   	pop    esi
c00125a1:	5f                   	pop    edi
c00125a2:	5d                   	pop    ebp
c00125a3:	c3                   	ret    

c00125a4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00125a4:	83 ec 40             	sub    esp,0x40
c00125a7:	8d 44 24 09          	lea    eax,[esp+0x9]
c00125ab:	50                   	push   eax
c00125ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00125b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00125b4:	e8 3c f9 ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00125b9:	58                   	pop    eax
c00125ba:	5a                   	pop    edx
c00125bb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00125bf:	8d 44 24 15          	lea    eax,[esp+0x15]
c00125c3:	50                   	push   eax
c00125c4:	e8 37 ff ff ff       	call   c0012500 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00125c9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00125ce:	83 c4 4c             	add    esp,0x4c
c00125d1:	c3                   	ret    

c00125d2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00125d2:	55                   	push   ebp
c00125d3:	57                   	push   edi
c00125d4:	56                   	push   esi
c00125d5:	53                   	push   ebx
c00125d6:	31 db                	xor    ebx,ebx
c00125d8:	83 ec 70             	sub    esp,0x70
c00125db:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00125e2:	6a 30                	push   0x30
c00125e4:	6a 00                	push   0x0
c00125e6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00125ea:	56                   	push   esi
c00125eb:	e8 90 df fe ff       	call   c0000580 <memset>
c00125f0:	83 c4 10             	add    esp,0x10
c00125f3:	83 ec 0c             	sub    esp,0xc
c00125f6:	57                   	push   edi
c00125f7:	e8 24 e0 fe ff       	call   c0000620 <strlen>
c00125fc:	83 c4 10             	add    esp,0x10
c00125ff:	39 d8                	cmp    eax,ebx
c0012601:	76 16                	jbe    c0012619 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012603:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012607:	83 ec 0c             	sub    esp,0xc
c001260a:	50                   	push   eax
c001260b:	e8 10 e4 fe ff       	call   c0000a20 <toupper>
c0012610:	83 c4 10             	add    esp,0x10
c0012613:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012616:	43                   	inc    ebx
c0012617:	eb da                	jmp    c00125f3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012619:	52                   	push   edx
c001261a:	31 db                	xor    ebx,ebx
c001261c:	6a 18                	push   0x18
c001261e:	31 ff                	xor    edi,edi
c0012620:	6a 3f                	push   0x3f
c0012622:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012626:	50                   	push   eax
c0012627:	e8 54 df fe ff       	call   c0000580 <memset>
c001262c:	83 c4 10             	add    esp,0x10
c001262f:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012633:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012637:	84 c0                	test   al,al
c0012639:	0f 84 af 00 00 00    	je     c00126ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c001263f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012643:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012646:	83 ec 0c             	sub    esp,0xc
c0012649:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c001264e:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012652:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012656:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c001265b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001265f:	56                   	push   esi
c0012660:	e8 bb df fe ff       	call   c0000620 <strlen>
c0012665:	83 c4 10             	add    esp,0x10
c0012668:	85 c0                	test   eax,eax
c001266a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001266e:	74 0b                	je     c001267b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012670:	50                   	push   eax
c0012671:	6a 01                	push   0x1
c0012673:	56                   	push   esi
c0012674:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012678:	50                   	push   eax
c0012679:	eb 0a                	jmp    c0012685 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001267b:	50                   	push   eax
c001267c:	6a 00                	push   0x0
c001267e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012682:	50                   	push   eax
c0012683:	6a 00                	push   0x0
c0012685:	e8 48 fd ff ff       	call   c00123d2 <CmGetMatch(char*, char*, bool, bool*)>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	83 f8 ff             	cmp    eax,0xffffffff
c0012690:	75 1a                	jne    c00126ac <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012692:	83 ec 0c             	sub    esp,0xc
c0012695:	68 c1 0b 02 c0       	push   0xc0020bc1
c001269a:	e8 86 e1 ff ff       	call   c0010825 <KePanic(char const*)>
c001269f:	83 c4 10             	add    esp,0x10
c00126a2:	b8 02 00 00 00       	mov    eax,0x2
c00126a7:	e9 bb 00 00 00       	jmp    c0012767 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00126ac:	83 ff 18             	cmp    edi,0x18
c00126af:	75 1a                	jne    c00126cb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00126b1:	83 ec 0c             	sub    esp,0xc
c00126b4:	68 d6 0b 02 c0       	push   0xc0020bd6
c00126b9:	e8 67 e1 ff ff       	call   c0010825 <KePanic(char const*)>
c00126be:	83 c4 10             	add    esp,0x10
c00126c1:	b8 01 00 00 00       	mov    eax,0x1
c00126c6:	e9 9c 00 00 00       	jmp    c0012767 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00126cb:	47                   	inc    edi
c00126cc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00126d1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00126d5:	0f 45 dd             	cmovne ebx,ebp
c00126d8:	83 ec 0c             	sub    esp,0xc
c00126db:	56                   	push   esi
c00126dc:	e8 3f df fe ff       	call   c0000620 <strlen>
c00126e1:	83 c4 10             	add    esp,0x10
c00126e4:	85 c0                	test   eax,eax
c00126e6:	74 06                	je     c00126ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00126e8:	43                   	inc    ebx
c00126e9:	e9 41 ff ff ff       	jmp    c001262f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00126ee:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00126f6:	31 db                	xor    ebx,ebx
c00126f8:	31 ff                	xor    edi,edi
c00126fa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012702:	50                   	push   eax
c0012703:	6a 12                	push   0x12
c0012705:	68 ee 00 00 00       	push   0xee
c001270a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012711:	e8 6a de fe ff       	call   c0000580 <memset>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001271d:	83 fb 17             	cmp    ebx,0x17
c0012720:	7e 26                	jle    c0012748 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0012722:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012726:	50                   	push   eax
c0012727:	6a 08                	push   0x8
c0012729:	55                   	push   ebp
c001272a:	56                   	push   esi
c001272b:	e8 31 fd ff ff       	call   c0012461 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012730:	83 c4 10             	add    esp,0x10
c0012733:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012738:	74 26                	je     c0012760 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001273a:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012741:	4b                   	dec    ebx
c0012742:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012745:	47                   	inc    edi
c0012746:	eb 1c                	jmp    c0012764 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0012748:	6a 06                	push   0x6
c001274a:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c001274f:	50                   	push   eax
c0012750:	55                   	push   ebp
c0012751:	56                   	push   esi
c0012752:	e8 dc fc ff ff       	call   c0012433 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012757:	83 c4 10             	add    esp,0x10
c001275a:	84 c0                	test   al,al
c001275c:	75 06                	jne    c0012764 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001275e:	eb c2                	jmp    c0012722 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0012760:	31 c0                	xor    eax,eax
c0012762:	eb 03                	jmp    c0012767 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012764:	43                   	inc    ebx
c0012765:	eb b2                	jmp    c0012719 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0012767:	83 c4 6c             	add    esp,0x6c
c001276a:	5b                   	pop    ebx
c001276b:	5e                   	pop    esi
c001276c:	5f                   	pop    edi
c001276d:	5d                   	pop    ebp
c001276e:	c3                   	ret    

c001276f <CmCreateString(Reghive_Tag*, int, char const*)>:
c001276f:	53                   	push   ebx
c0012770:	83 ec 3c             	sub    esp,0x3c
c0012773:	6a 2b                	push   0x2b
c0012775:	6a 00                	push   0x0
c0012777:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001277b:	53                   	push   ebx
c001277c:	e8 ff dd fe ff       	call   c0000580 <memset>
c0012781:	58                   	pop    eax
c0012782:	5a                   	pop    edx
c0012783:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012787:	50                   	push   eax
c0012788:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001278c:	e8 41 fe ff ff       	call   c00125d2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012791:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012796:	83 c4 0c             	add    esp,0xc
c0012799:	6a 15                	push   0x15
c001279b:	6a 00                	push   0x0
c001279d:	8d 44 24 27          	lea    eax,[esp+0x27]
c00127a1:	50                   	push   eax
c00127a2:	e8 d9 dd fe ff       	call   c0000580 <memset>
c00127a7:	53                   	push   ebx
c00127a8:	6a 00                	push   0x0
c00127aa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127b2:	e8 e8 f9 ff ff       	call   c001219f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00127b7:	83 c4 58             	add    esp,0x58
c00127ba:	5b                   	pop    ebx
c00127bb:	c3                   	ret    

c00127bc <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00127bc:	56                   	push   esi
c00127bd:	53                   	push   ebx
c00127be:	83 ec 48             	sub    esp,0x48
c00127c1:	6a 12                	push   0x12
c00127c3:	68 ff 00 00 00       	push   0xff
c00127c8:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00127cc:	56                   	push   esi
c00127cd:	e8 ae dd fe ff       	call   c0000580 <memset>
c00127d2:	5a                   	pop    edx
c00127d3:	59                   	pop    ecx
c00127d4:	56                   	push   esi
c00127d5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127d9:	e8 f4 fd ff ff       	call   c00125d2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127de:	83 c4 10             	add    esp,0x10
c00127e1:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127e5:	85 db                	test   ebx,ebx
c00127e7:	74 42                	je     c001282b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00127e9:	50                   	push   eax
c00127ea:	8d 44 24 19          	lea    eax,[esp+0x19]
c00127ee:	50                   	push   eax
c00127ef:	53                   	push   ebx
c00127f0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00127f4:	e8 fc f6 ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00127f9:	83 c4 0c             	add    esp,0xc
c00127fc:	6a 12                	push   0x12
c00127fe:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012802:	50                   	push   eax
c0012803:	56                   	push   esi
c0012804:	e8 77 db fe ff       	call   c0000380 <memcmp>
c0012809:	83 c4 10             	add    esp,0x10
c001280c:	85 c0                	test   eax,eax
c001280e:	74 1e                	je     c001282e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012810:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012815:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001281a:	c1 e3 08             	shl    ebx,0x8
c001281d:	09 d8                	or     eax,ebx
c001281f:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012824:	c1 e3 10             	shl    ebx,0x10
c0012827:	09 c3                	or     ebx,eax
c0012829:	eb ba                	jmp    c00127e5 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001282b:	83 cb ff             	or     ebx,0xffffffff
c001282e:	83 c4 44             	add    esp,0x44
c0012831:	89 d8                	mov    eax,ebx
c0012833:	5b                   	pop    ebx
c0012834:	5e                   	pop    esi
c0012835:	c3                   	ret    

c0012836 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012836:	57                   	push   edi
c0012837:	56                   	push   esi
c0012838:	53                   	push   ebx
c0012839:	83 ec 34             	sub    esp,0x34
c001283c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012840:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012844:	6a 2b                	push   0x2b
c0012846:	6a 00                	push   0x0
c0012848:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001284c:	53                   	push   ebx
c001284d:	e8 2e dd fe ff       	call   c0000580 <memset>
c0012852:	58                   	pop    eax
c0012853:	5a                   	pop    edx
c0012854:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012858:	50                   	push   eax
c0012859:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001285d:	e8 70 fd ff ff       	call   c00125d2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012862:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0012866:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001286a:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001286e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012872:	53                   	push   ebx
c0012873:	6a 00                	push   0x0
c0012875:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012879:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001287d:	e8 1d f9 ff ff       	call   c001219f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012882:	83 c4 50             	add    esp,0x50
c0012885:	5b                   	pop    ebx
c0012886:	5e                   	pop    esi
c0012887:	5f                   	pop    edi
c0012888:	c3                   	ret    

c0012889 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c0012889:	55                   	push   ebp
c001288a:	57                   	push   edi
c001288b:	56                   	push   esi
c001288c:	53                   	push   ebx
c001288d:	83 ec 40             	sub    esp,0x40
c0012890:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0012894:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012898:	6a 2b                	push   0x2b
c001289a:	6a 00                	push   0x0
c001289c:	8d 74 24 11          	lea    esi,[esp+0x11]
c00128a0:	56                   	push   esi
c00128a1:	e8 da dc fe ff       	call   c0000580 <memset>
c00128a6:	5f                   	pop    edi
c00128a7:	89 ef                	mov    edi,ebp
c00128a9:	58                   	pop    eax
c00128aa:	8d 44 24 11          	lea    eax,[esp+0x11]
c00128ae:	50                   	push   eax
c00128af:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00128b3:	e8 1a fd ff ff       	call   c00125d2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00128b8:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00128bd:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00128c2:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00128c7:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00128cc:	83 c4 10             	add    esp,0x10
c00128cf:	85 ed                	test   ebp,ebp
c00128d1:	74 14                	je     c00128e7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128d3:	51                   	push   ecx
c00128d4:	51                   	push   ecx
c00128d5:	57                   	push   edi
c00128d6:	53                   	push   ebx
c00128d7:	e8 0b f7 ff ff       	call   c0011fe7 <CmGetNext(Reghive_Tag*, int)>
c00128dc:	83 c4 10             	add    esp,0x10
c00128df:	85 c0                	test   eax,eax
c00128e1:	74 04                	je     c00128e7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00128e3:	89 c7                	mov    edi,eax
c00128e5:	eb e8                	jmp    c00128cf <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00128e7:	56                   	push   esi
c00128e8:	6a 00                	push   0x0
c00128ea:	57                   	push   edi
c00128eb:	53                   	push   ebx
c00128ec:	e8 ae f8 ff ff       	call   c001219f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00128f1:	83 c4 0c             	add    esp,0xc
c00128f4:	56                   	push   esi
c00128f5:	50                   	push   eax
c00128f6:	89 c7                	mov    edi,eax
c00128f8:	53                   	push   ebx
c00128f9:	e8 f7 f5 ff ff       	call   c0011ef5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128fe:	58                   	pop    eax
c00128ff:	5a                   	pop    edx
c0012900:	6a 6c                	push   0x6c
c0012902:	6a 00                	push   0x0
c0012904:	6a 00                	push   0x0
c0012906:	68 e7 0b 02 c0       	push   0xc0020be7
c001290b:	57                   	push   edi
c001290c:	53                   	push   ebx
c001290d:	e8 24 ff ff ff       	call   c0012836 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012912:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012916:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001291a:	c1 e8 10             	shr    eax,0x10
c001291d:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012921:	83 c4 1c             	add    esp,0x1c
c0012924:	56                   	push   esi
c0012925:	57                   	push   edi
c0012926:	53                   	push   ebx
c0012927:	e8 ed f6 ff ff       	call   c0012019 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001292c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012931:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012936:	c1 e0 08             	shl    eax,0x8
c0012939:	09 c2                	or     edx,eax
c001293b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012940:	83 c4 4c             	add    esp,0x4c
c0012943:	5b                   	pop    ebx
c0012944:	5e                   	pop    esi
c0012945:	c1 e0 10             	shl    eax,0x10
c0012948:	09 d0                	or     eax,edx
c001294a:	5f                   	pop    edi
c001294b:	5d                   	pop    ebp
c001294c:	c3                   	ret    

c001294d <zStrtok(char*, char const*)>:
c001294d:	57                   	push   edi
c001294e:	56                   	push   esi
c001294f:	53                   	push   ebx
c0012950:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012958:	85 f6                	test   esi,esi
c001295a:	74 2b                	je     c0012987 <zStrtok(char*, char const*)+0x3a>
c001295c:	85 c0                	test   eax,eax
c001295e:	75 09                	jne    c0012969 <zStrtok(char*, char const*)+0x1c>
c0012960:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c0012965:	85 c0                	test   eax,eax
c0012967:	74 49                	je     c00129b2 <zStrtok(char*, char const*)+0x65>
c0012969:	31 c9                	xor    ecx,ecx
c001296b:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c001296f:	74 03                	je     c0012974 <zStrtok(char*, char const*)+0x27>
c0012971:	41                   	inc    ecx
c0012972:	eb f7                	jmp    c001296b <zStrtok(char*, char const*)+0x1e>
c0012974:	31 d2                	xor    edx,edx
c0012976:	39 ca                	cmp    edx,ecx
c0012978:	74 11                	je     c001298b <zStrtok(char*, char const*)+0x3e>
c001297a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001297c:	8d 3c 10             	lea    edi,[eax+edx*1]
c001297f:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c0012982:	74 13                	je     c0012997 <zStrtok(char*, char const*)+0x4a>
c0012984:	42                   	inc    edx
c0012985:	eb ef                	jmp    c0012976 <zStrtok(char*, char const*)+0x29>
c0012987:	31 c0                	xor    eax,eax
c0012989:	eb 27                	jmp    c00129b2 <zStrtok(char*, char const*)+0x65>
c001298b:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c0012995:	eb 1b                	jmp    c00129b2 <zStrtok(char*, char const*)+0x65>
c0012997:	3a 18                	cmp    bl,BYTE PTR [eax]
c0012999:	75 0a                	jne    c00129a5 <zStrtok(char*, char const*)+0x58>
c001299b:	40                   	inc    eax
c001299c:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00129a1:	89 f0                	mov    eax,esi
c00129a3:	eb 0d                	jmp    c00129b2 <zStrtok(char*, char const*)+0x65>
c00129a5:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00129a8:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00129ac:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00129b2:	5b                   	pop    ebx
c00129b3:	5e                   	pop    esi
c00129b4:	5f                   	pop    edi
c00129b5:	c3                   	ret    

c00129b6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00129b6:	57                   	push   edi
c00129b7:	56                   	push   esi
c00129b8:	53                   	push   ebx
c00129b9:	81 ec 08 01 00 00    	sub    esp,0x108
c00129bf:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00129c6:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00129cd:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00129d1:	53                   	push   ebx
c00129d2:	e8 49 dd fe ff       	call   c0000720 <strcpy>
c00129d7:	59                   	pop    ecx
c00129d8:	5e                   	pop    esi
c00129d9:	68 4b 0f 02 c0       	push   0xc0020f4b
c00129de:	53                   	push   ebx
c00129df:	bb 01 00 00 00       	mov    ebx,0x1
c00129e4:	e8 64 ff ff ff       	call   c001294d <zStrtok(char*, char const*)>
c00129e9:	83 c4 10             	add    esp,0x10
c00129ec:	85 c0                	test   eax,eax
c00129ee:	74 3b                	je     c0012a2b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00129f0:	52                   	push   edx
c00129f1:	50                   	push   eax
c00129f2:	6a 01                	push   0x1
c00129f4:	57                   	push   edi
c00129f5:	e8 c2 fd ff ff       	call   c00127bc <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00129fa:	59                   	pop    ecx
c00129fb:	5e                   	pop    esi
c00129fc:	89 c3                	mov    ebx,eax
c00129fe:	68 4b 0f 02 c0       	push   0xc0020f4b
c0012a03:	6a 00                	push   0x0
c0012a05:	e8 43 ff ff ff       	call   c001294d <zStrtok(char*, char const*)>
c0012a0a:	83 c4 10             	add    esp,0x10
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	89 c6                	mov    esi,eax
c0012a11:	74 18                	je     c0012a2b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012a13:	52                   	push   edx
c0012a14:	52                   	push   edx
c0012a15:	53                   	push   ebx
c0012a16:	57                   	push   edi
c0012a17:	e8 8c f5 ff ff       	call   c0011fa8 <CmEnterDirectory(Reghive_Tag*, int)>
c0012a1c:	83 c4 10             	add    esp,0x10
c0012a1f:	83 f8 ff             	cmp    eax,0xffffffff
c0012a22:	89 c3                	mov    ebx,eax
c0012a24:	74 05                	je     c0012a2b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012a26:	50                   	push   eax
c0012a27:	56                   	push   esi
c0012a28:	53                   	push   ebx
c0012a29:	eb c9                	jmp    c00129f4 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012a2b:	81 c4 00 01 00 00    	add    esp,0x100
c0012a31:	89 d8                	mov    eax,ebx
c0012a33:	5b                   	pop    ebx
c0012a34:	5e                   	pop    esi
c0012a35:	5f                   	pop    edi
c0012a36:	c3                   	ret    

c0012a37 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012a37:	55                   	push   ebp
c0012a38:	57                   	push   edi
c0012a39:	56                   	push   esi
c0012a3a:	53                   	push   ebx
c0012a3b:	83 ec 5c             	sub    esp,0x5c
c0012a3e:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012a42:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012a46:	85 db                	test   ebx,ebx
c0012a48:	0f 8e 84 00 00 00    	jle    c0012ad2 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012a4e:	57                   	push   edi
c0012a4f:	31 ed                	xor    ebp,ebp
c0012a51:	6a 32                	push   0x32
c0012a53:	6a 00                	push   0x0
c0012a55:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012a59:	57                   	push   edi
c0012a5a:	e8 21 db fe ff       	call   c0000580 <memset>
c0012a5f:	83 c4 0c             	add    esp,0xc
c0012a62:	57                   	push   edi
c0012a63:	53                   	push   ebx
c0012a64:	56                   	push   esi
c0012a65:	e8 3a fb ff ff       	call   c00125a4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012a6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a6e:	83 c4 10             	add    esp,0x10
c0012a71:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012a75:	7d 13                	jge    c0012a8a <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012a77:	83 ec 0c             	sub    esp,0xc
c0012a7a:	45                   	inc    ebp
c0012a7b:	68 b8 12 02 c0       	push   0xc00212b8
c0012a80:	e8 f1 7f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0012a85:	83 c4 10             	add    esp,0x10
c0012a88:	eb e7                	jmp    c0012a71 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0012a8a:	51                   	push   ecx
c0012a8b:	57                   	push   edi
c0012a8c:	53                   	push   ebx
c0012a8d:	68 ed 0b 02 c0       	push   0xc0020bed
c0012a92:	e8 df 7f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0012a9f:	75 1e                	jne    c0012abf <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0012aa1:	52                   	push   edx
c0012aa2:	52                   	push   edx
c0012aa3:	53                   	push   ebx
c0012aa4:	56                   	push   esi
c0012aa5:	e8 fe f4 ff ff       	call   c0011fa8 <CmEnterDirectory(Reghive_Tag*, int)>
c0012aaa:	83 c4 0c             	add    esp,0xc
c0012aad:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0012ab1:	8d 51 04             	lea    edx,[ecx+0x4]
c0012ab4:	52                   	push   edx
c0012ab5:	50                   	push   eax
c0012ab6:	56                   	push   esi
c0012ab7:	e8 7b ff ff ff       	call   c0012a37 <CmDisplayTree(Reghive_Tag*, int, int)>
c0012abc:	83 c4 10             	add    esp,0x10
c0012abf:	50                   	push   eax
c0012ac0:	50                   	push   eax
c0012ac1:	53                   	push   ebx
c0012ac2:	56                   	push   esi
c0012ac3:	e8 1f f5 ff ff       	call   c0011fe7 <CmGetNext(Reghive_Tag*, int)>
c0012ac8:	83 c4 10             	add    esp,0x10
c0012acb:	89 c3                	mov    ebx,eax
c0012acd:	e9 74 ff ff ff       	jmp    c0012a46 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012ad2:	83 c4 5c             	add    esp,0x5c
c0012ad5:	5b                   	pop    ebx
c0012ad6:	5e                   	pop    esi
c0012ad7:	5f                   	pop    edi
c0012ad8:	5d                   	pop    ebp
c0012ad9:	c3                   	ret    

c0012ada <CmSplitFinalSlashInPlace(char*)>:
c0012ada:	53                   	push   ebx
c0012adb:	83 ec 14             	sub    esp,0x14
c0012ade:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012ae2:	53                   	push   ebx
c0012ae3:	e8 38 db fe ff       	call   c0000620 <strlen>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	48                   	dec    eax
c0012aec:	85 c0                	test   eax,eax
c0012aee:	74 15                	je     c0012b05 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012af0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012af4:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012af7:	75 09                	jne    c0012b02 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012af9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012afc:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012b00:	eb 05                	jmp    c0012b07 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012b02:	48                   	dec    eax
c0012b03:	eb e7                	jmp    c0012aec <CmSplitFinalSlashInPlace(char*)+0x12>
c0012b05:	31 c0                	xor    eax,eax
c0012b07:	83 c4 08             	add    esp,0x8
c0012b0a:	5b                   	pop    ebx
c0012b0b:	c3                   	ret    

c0012b0c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012b0c:	55                   	push   ebp
c0012b0d:	57                   	push   edi
c0012b0e:	56                   	push   esi
c0012b0f:	53                   	push   ebx
c0012b10:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012b16:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012b1d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012b1f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012b22:	80 fb 40             	cmp    bl,0x40
c0012b25:	75 19                	jne    c0012b40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x34>
c0012b27:	8a 06                	mov    al,BYTE PTR [esi]
c0012b29:	84 c0                	test   al,al
c0012b2b:	74 07                	je     c0012b34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012b2d:	3c 3a                	cmp    al,0x3a
c0012b2f:	74 03                	je     c0012b34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x28>
c0012b31:	46                   	inc    esi
c0012b32:	eb f3                	jmp    c0012b27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012b34:	84 c0                	test   al,al
c0012b36:	0f 84 2b 01 00 00    	je     c0012c67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b3c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012b3f:	46                   	inc    esi
c0012b40:	50                   	push   eax
c0012b41:	6a 40                	push   0x40
c0012b43:	6a 00                	push   0x0
c0012b45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b49:	50                   	push   eax
c0012b4a:	e8 31 da fe ff       	call   c0000580 <memset>
c0012b4f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012b56:	31 d2                	xor    edx,edx
c0012b58:	83 c4 10             	add    esp,0x10
c0012b5b:	8a 07                	mov    al,BYTE PTR [edi]
c0012b5d:	84 c0                	test   al,al
c0012b5f:	0f 84 02 01 00 00    	je     c0012c67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b65:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0012b6b:	0f 8f f6 00 00 00    	jg     c0012c67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012b71:	3c 0a                	cmp    al,0xa
c0012b73:	0f 85 df 00 00 00    	jne    c0012c58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14c>
c0012b79:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0012b7e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0012b82:	a8 df                	test   al,0xdf
c0012b84:	0f 94 c1             	sete   cl
c0012b87:	3c 23                	cmp    al,0x23
c0012b89:	0f 94 c2             	sete   dl
c0012b8c:	08 d1                	or     cl,dl
c0012b8e:	75 50                	jne    c0012be0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b90:	88 c2                	mov    dl,al
c0012b92:	80 ea 09             	sub    dl,0x9
c0012b95:	80 fa 01             	cmp    dl,0x1
c0012b98:	76 46                	jbe    c0012be0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012b9a:	3c 5b                	cmp    al,0x5b
c0012b9c:	75 46                	jne    c0012be4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd8>
c0012b9e:	80 fb 40             	cmp    bl,0x40
c0012ba1:	75 3d                	jne    c0012be0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012ba3:	83 ec 0c             	sub    esp,0xc
c0012ba6:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012baa:	52                   	push   edx
c0012bab:	e8 70 da fe ff       	call   c0000620 <strlen>
c0012bb0:	83 c4 10             	add    esp,0x10
c0012bb3:	83 f8 3f             	cmp    eax,0x3f
c0012bb6:	0f 87 ab 00 00 00    	ja     c0012c67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012bbc:	50                   	push   eax
c0012bbd:	50                   	push   eax
c0012bbe:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012bc2:	52                   	push   edx
c0012bc3:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bc7:	52                   	push   edx
c0012bc8:	e8 53 db fe ff       	call   c0000720 <strcpy>
c0012bcd:	58                   	pop    eax
c0012bce:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012bd2:	52                   	push   edx
c0012bd3:	e8 48 da fe ff       	call   c0000620 <strlen>
c0012bd8:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012bdd:	83 c4 10             	add    esp,0x10
c0012be0:	31 c9                	xor    ecx,ecx
c0012be2:	eb 7b                	jmp    c0012c5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0012be4:	80 fb 40             	cmp    bl,0x40
c0012be7:	74 06                	je     c0012bef <Reg::findLineFromLoadedData(char*, char*, char*)+0xe3>
c0012be9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012bed:	eb 16                	jmp    c0012c05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012bef:	51                   	push   ecx
c0012bf0:	51                   	push   ecx
c0012bf1:	55                   	push   ebp
c0012bf2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012bf6:	50                   	push   eax
c0012bf7:	e8 44 dc fe ff       	call   c0000840 <strcmp>
c0012bfc:	83 c4 10             	add    esp,0x10
c0012bff:	85 c0                	test   eax,eax
c0012c01:	75 dd                	jne    c0012be0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012c03:	eb e4                	jmp    c0012be9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdd>
c0012c05:	8a 02                	mov    al,BYTE PTR [edx]
c0012c07:	84 c0                	test   al,al
c0012c09:	0f 94 c1             	sete   cl
c0012c0c:	3c 3d                	cmp    al,0x3d
c0012c0e:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
c0012c13:	0a 4c 24 0b          	or     cl,BYTE PTR [esp+0xb]
c0012c17:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0012c1b:	75 03                	jne    c0012c20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x114>
c0012c1d:	42                   	inc    edx
c0012c1e:	eb e5                	jmp    c0012c05 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0012c20:	84 c0                	test   al,al
c0012c22:	74 43                	je     c0012c67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x15b>
c0012c24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c28:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012c2b:	52                   	push   edx
c0012c2c:	52                   	push   edx
c0012c2d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012c31:	50                   	push   eax
c0012c32:	56                   	push   esi
c0012c33:	e8 08 dc fe ff       	call   c0000840 <strcmp>
c0012c38:	83 c4 10             	add    esp,0x10
c0012c3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c3f:	85 c0                	test   eax,eax
c0012c41:	75 9d                	jne    c0012be0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0012c43:	50                   	push   eax
c0012c44:	42                   	inc    edx
c0012c45:	50                   	push   eax
c0012c46:	52                   	push   edx
c0012c47:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012c4e:	e8 cd da fe ff       	call   c0000720 <strcpy>
c0012c53:	83 c4 10             	add    esp,0x10
c0012c56:	eb 14                	jmp    c0012c6c <Reg::findLineFromLoadedData(char*, char*, char*)+0x160>
c0012c58:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0012c5c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012c5f:	47                   	inc    edi
c0012c60:	89 ca                	mov    edx,ecx
c0012c62:	e9 f4 fe ff ff       	jmp    c0012b5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x4f>
c0012c67:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012c6c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012c70:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012c76:	5b                   	pop    ebx
c0012c77:	5e                   	pop    esi
c0012c78:	5f                   	pop    edi
c0012c79:	5d                   	pop    ebp
c0012c7a:	c3                   	ret    

c0012c7b <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012c7b:	57                   	push   edi
c0012c7c:	56                   	push   esi
c0012c7d:	53                   	push   ebx
c0012c7e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012c84:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012c8b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012c92:	53                   	push   ebx
c0012c93:	e8 88 d9 fe ff       	call   c0000620 <strlen>
c0012c98:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c9b:	89 c7                	mov    edi,eax
c0012c9d:	e8 7e d9 fe ff       	call   c0000620 <strlen>
c0012ca2:	83 c4 10             	add    esp,0x10
c0012ca5:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012ca9:	3d ff 00 00 00       	cmp    eax,0xff
c0012cae:	0f 87 d3 00 00 00    	ja     c0012d87 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012cb4:	57                   	push   edi
c0012cb5:	57                   	push   edi
c0012cb6:	56                   	push   esi
c0012cb7:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012cbb:	56                   	push   esi
c0012cbc:	e8 5f da fe ff       	call   c0000720 <strcpy>
c0012cc1:	58                   	pop    eax
c0012cc2:	5a                   	pop    edx
c0012cc3:	68 4b 0f 02 c0       	push   0xc0020f4b
c0012cc8:	56                   	push   esi
c0012cc9:	e8 62 dc fe ff       	call   c0000930 <strcat>
c0012cce:	59                   	pop    ecx
c0012ccf:	5f                   	pop    edi
c0012cd0:	53                   	push   ebx
c0012cd1:	56                   	push   esi
c0012cd2:	e8 59 dc fe ff       	call   c0000930 <strcat>
c0012cd7:	58                   	pop    eax
c0012cd8:	5a                   	pop    edx
c0012cd9:	68 f7 0b 02 c0       	push   0xc0020bf7
c0012cde:	56                   	push   esi
c0012cdf:	e8 4c dc fe ff       	call   c0000930 <strcat>
c0012ce4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012ceb:	e8 0c 4e ff ff       	call   c0007afc <malloc>
c0012cf0:	83 c4 0c             	add    esp,0xc
c0012cf3:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012cf9:	56                   	push   esi
c0012cfa:	50                   	push   eax
c0012cfb:	89 c3                	mov    ebx,eax
c0012cfd:	e8 f6 82 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	85 db                	test   ebx,ebx
c0012d07:	74 7e                	je     c0012d87 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012d09:	51                   	push   ecx
c0012d0a:	51                   	push   ecx
c0012d0b:	6a 01                	push   0x1
c0012d0d:	53                   	push   ebx
c0012d0e:	e8 a3 83 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0012d13:	83 c4 10             	add    esp,0x10
c0012d16:	85 c0                	test   eax,eax
c0012d18:	74 08                	je     c0012d22 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012d1a:	83 ec 0c             	sub    esp,0xc
c0012d1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d1f:	53                   	push   ebx
c0012d20:	eb 5f                	jmp    c0012d81 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012d22:	52                   	push   edx
c0012d23:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012d27:	50                   	push   eax
c0012d28:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012d2c:	50                   	push   eax
c0012d2d:	53                   	push   ebx
c0012d2e:	e8 29 86 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0012d33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	89 c1                	mov    ecx,eax
c0012d3c:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012d40:	74 31                	je     c0012d73 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d42:	83 ec 0c             	sub    esp,0xc
c0012d45:	50                   	push   eax
c0012d46:	e8 b1 4d ff ff       	call   c0007afc <malloc>
c0012d4b:	89 c6                	mov    esi,eax
c0012d4d:	58                   	pop    eax
c0012d4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d50:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012d54:	52                   	push   edx
c0012d55:	56                   	push   esi
c0012d56:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012d5e:	53                   	push   ebx
c0012d5f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d62:	83 c4 20             	add    esp,0x20
c0012d65:	85 c0                	test   eax,eax
c0012d67:	75 0a                	jne    c0012d73 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012d69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012d6d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012d71:	74 18                	je     c0012d8b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012d73:	83 ec 0c             	sub    esp,0xc
c0012d76:	53                   	push   ebx
c0012d77:	e8 98 83 ff ff       	call   c000b114 <File::close()>
c0012d7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d84:	83 c4 10             	add    esp,0x10
c0012d87:	31 c0                	xor    eax,eax
c0012d89:	eb 3b                	jmp    c0012dc6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012d8b:	83 ec 0c             	sub    esp,0xc
c0012d8e:	53                   	push   ebx
c0012d8f:	e8 80 83 ff ff       	call   c000b114 <File::close()>
c0012d94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012d99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d9c:	83 c4 0c             	add    esp,0xc
c0012d9f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012da6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012dad:	56                   	push   esi
c0012dae:	e8 59 fd ff ff       	call   c0012b0c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012db3:	89 34 24             	mov    DWORD PTR [esp],esi
c0012db6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012dba:	e8 50 4d ff ff       	call   c0007b0f <free>
c0012dbf:	83 c4 10             	add    esp,0x10
c0012dc2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012dc6:	81 c4 20 01 00 00    	add    esp,0x120
c0012dcc:	5b                   	pop    ebx
c0012dcd:	5e                   	pop    esi
c0012dce:	5f                   	pop    edi
c0012dcf:	c3                   	ret    

c0012dd0 <Reg::getLine(char*, char*, char*)>:
c0012dd0:	57                   	push   edi
c0012dd1:	56                   	push   esi
c0012dd2:	53                   	push   ebx
c0012dd3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012dd7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012ddb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ddf:	57                   	push   edi
c0012de0:	56                   	push   esi
c0012de1:	53                   	push   ebx
c0012de2:	68 fc 0b 02 c0       	push   0xc0020bfc
c0012de7:	e8 8f fe ff ff       	call   c0012c7b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	84 c0                	test   al,al
c0012df1:	75 10                	jne    c0012e03 <Reg::getLine(char*, char*, char*)+0x33>
c0012df3:	57                   	push   edi
c0012df4:	56                   	push   esi
c0012df5:	53                   	push   ebx
c0012df6:	68 21 0c 02 c0       	push   0xc0020c21
c0012dfb:	e8 7b fe ff ff       	call   c0012c7b <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012e00:	83 c4 10             	add    esp,0x10
c0012e03:	5b                   	pop    ebx
c0012e04:	5e                   	pop    esi
c0012e05:	5f                   	pop    edi
c0012e06:	c3                   	ret    

c0012e07 <Reg::readInt(char*, char*, int*)>:
c0012e07:	55                   	push   ebp
c0012e08:	57                   	push   edi
c0012e09:	56                   	push   esi
c0012e0a:	53                   	push   ebx
c0012e0b:	81 ec e0 00 00 00    	sub    esp,0xe0
c0012e11:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012e15:	56                   	push   esi
c0012e16:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012e1d:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012e24:	e8 a7 ff ff ff       	call   c0012dd0 <Reg::getLine(char*, char*, char*)>
c0012e29:	83 c4 10             	add    esp,0x10
c0012e2c:	84 c0                	test   al,al
c0012e2e:	0f 84 a4 00 00 00    	je     c0012ed8 <Reg::readInt(char*, char*, int*)+0xd1>
c0012e34:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012e38:	80 fa 2b             	cmp    dl,0x2b
c0012e3b:	74 0c                	je     c0012e49 <Reg::readInt(char*, char*, int*)+0x42>
c0012e3d:	80 fa 2d             	cmp    dl,0x2d
c0012e40:	75 0e                	jne    c0012e50 <Reg::readInt(char*, char*, int*)+0x49>
c0012e42:	ba 01 00 00 00       	mov    edx,0x1
c0012e47:	eb 0b                	jmp    c0012e54 <Reg::readInt(char*, char*, int*)+0x4d>
c0012e49:	ba 01 00 00 00       	mov    edx,0x1
c0012e4e:	eb 02                	jmp    c0012e52 <Reg::readInt(char*, char*, int*)+0x4b>
c0012e50:	31 d2                	xor    edx,edx
c0012e52:	31 c0                	xor    eax,eax
c0012e54:	80 7c 14 08 30       	cmp    BYTE PTR [esp+edx*1+0x8],0x30
c0012e59:	bf 0a 00 00 00       	mov    edi,0xa
c0012e5e:	75 20                	jne    c0012e80 <Reg::readInt(char*, char*, int*)+0x79>
c0012e60:	8a 4c 14 09          	mov    cl,BYTE PTR [esp+edx*1+0x9]
c0012e64:	80 f9 78             	cmp    cl,0x78
c0012e67:	75 0a                	jne    c0012e73 <Reg::readInt(char*, char*, int*)+0x6c>
c0012e69:	83 c2 02             	add    edx,0x2
c0012e6c:	bf 10 00 00 00       	mov    edi,0x10
c0012e71:	eb 0d                	jmp    c0012e80 <Reg::readInt(char*, char*, int*)+0x79>
c0012e73:	80 f9 62             	cmp    cl,0x62
c0012e76:	75 08                	jne    c0012e80 <Reg::readInt(char*, char*, int*)+0x79>
c0012e78:	83 c2 02             	add    edx,0x2
c0012e7b:	bf 02 00 00 00       	mov    edi,0x2
c0012e80:	01 d6                	add    esi,edx
c0012e82:	31 ed                	xor    ebp,ebp
c0012e84:	8a 0e                	mov    cl,BYTE PTR [esi]
c0012e86:	84 c9                	test   cl,cl
c0012e88:	0f 94 c2             	sete   dl
c0012e8b:	80 f9 0d             	cmp    cl,0xd
c0012e8e:	0f 94 c3             	sete   bl
c0012e91:	08 d3                	or     bl,dl
c0012e93:	75 32                	jne    c0012ec7 <Reg::readInt(char*, char*, int*)+0xc0>
c0012e95:	89 ea                	mov    edx,ebp
c0012e97:	0f be e9             	movsx  ebp,cl
c0012e9a:	0f af d7             	imul   edx,edi
c0012e9d:	83 ff 10             	cmp    edi,0x10
c0012ea0:	75 1e                	jne    c0012ec0 <Reg::readInt(char*, char*, int*)+0xb9>
c0012ea2:	88 cb                	mov    bl,cl
c0012ea4:	80 eb 41             	sub    bl,0x41
c0012ea7:	80 fb 05             	cmp    bl,0x5
c0012eaa:	77 06                	ja     c0012eb2 <Reg::readInt(char*, char*, int*)+0xab>
c0012eac:	8d 6c 2a c9          	lea    ebp,[edx+ebp*1-0x37]
c0012eb0:	eb 12                	jmp    c0012ec4 <Reg::readInt(char*, char*, int*)+0xbd>
c0012eb2:	80 e9 61             	sub    cl,0x61
c0012eb5:	80 f9 05             	cmp    cl,0x5
c0012eb8:	77 06                	ja     c0012ec0 <Reg::readInt(char*, char*, int*)+0xb9>
c0012eba:	8d 6c 2a a9          	lea    ebp,[edx+ebp*1-0x57]
c0012ebe:	eb 04                	jmp    c0012ec4 <Reg::readInt(char*, char*, int*)+0xbd>
c0012ec0:	8d 6c 2a d0          	lea    ebp,[edx+ebp*1-0x30]
c0012ec4:	46                   	inc    esi
c0012ec5:	eb bd                	jmp    c0012e84 <Reg::readInt(char*, char*, int*)+0x7d>
c0012ec7:	84 c0                	test   al,al
c0012ec9:	74 02                	je     c0012ecd <Reg::readInt(char*, char*, int*)+0xc6>
c0012ecb:	f7 dd                	neg    ebp
c0012ecd:	8b 84 24 f8 00 00 00 	mov    eax,DWORD PTR [esp+0xf8]
c0012ed4:	89 28                	mov    DWORD PTR [eax],ebp
c0012ed6:	88 d8                	mov    al,bl
c0012ed8:	81 c4 dc 00 00 00    	add    esp,0xdc
c0012ede:	5b                   	pop    ebx
c0012edf:	5e                   	pop    esi
c0012ee0:	5f                   	pop    edi
c0012ee1:	5d                   	pop    ebp
c0012ee2:	c3                   	ret    

c0012ee3 <Reg::readString(char*, char*, char*, int)>:
c0012ee3:	56                   	push   esi
c0012ee4:	53                   	push   ebx
c0012ee5:	81 ec e8 00 00 00    	sub    esp,0xe8
c0012eeb:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012eef:	8b 9c 24 fc 00 00 00 	mov    ebx,DWORD PTR [esp+0xfc]
c0012ef6:	56                   	push   esi
c0012ef7:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012efe:	ff b4 24 fc 00 00 00 	push   DWORD PTR [esp+0xfc]
c0012f05:	e8 c6 fe ff ff       	call   c0012dd0 <Reg::getLine(char*, char*, char*)>
c0012f0a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f16:	74 44                	je     c0012f5c <Reg::readString(char*, char*, char*, int)+0x79>
c0012f18:	8b 94 24 fc 00 00 00 	mov    edx,DWORD PTR [esp+0xfc]
c0012f1f:	31 c0                	xor    eax,eax
c0012f21:	4a                   	dec    edx
c0012f22:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c0012f25:	84 c9                	test   cl,cl
c0012f27:	74 0f                	je     c0012f38 <Reg::readString(char*, char*, char*, int)+0x55>
c0012f29:	39 c2                	cmp    edx,eax
c0012f2b:	7e 0b                	jle    c0012f38 <Reg::readString(char*, char*, char*, int)+0x55>
c0012f2d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012f30:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012f35:	40                   	inc    eax
c0012f36:	eb ea                	jmp    c0012f22 <Reg::readString(char*, char*, char*, int)+0x3f>
c0012f38:	83 ec 0c             	sub    esp,0xc
c0012f3b:	53                   	push   ebx
c0012f3c:	e8 df d6 fe ff       	call   c0000620 <strlen>
c0012f41:	83 c4 10             	add    esp,0x10
c0012f44:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012f49:	75 11                	jne    c0012f5c <Reg::readString(char*, char*, char*, int)+0x79>
c0012f4b:	83 ec 0c             	sub    esp,0xc
c0012f4e:	53                   	push   ebx
c0012f4f:	e8 cc d6 fe ff       	call   c0000620 <strlen>
c0012f54:	83 c4 10             	add    esp,0x10
c0012f57:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f5c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f60:	81 c4 e4 00 00 00    	add    esp,0xe4
c0012f66:	5b                   	pop    ebx
c0012f67:	5e                   	pop    esi
c0012f68:	c3                   	ret    

c0012f69 <Reg::readBool(char*, char*, bool*)>:
c0012f69:	83 ec 20             	sub    esp,0x20
c0012f6c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012f70:	50                   	push   eax
c0012f71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f79:	e8 89 fe ff ff       	call   c0012e07 <Reg::readInt(char*, char*, int*)>
c0012f7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f82:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f87:	0f 95 02             	setne  BYTE PTR [edx]
c0012f8a:	83 c4 2c             	add    esp,0x2c
c0012f8d:	c3                   	ret    

c0012f8e <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012f8e:	83 ec 30             	sub    esp,0x30
c0012f91:	8a 54 24 3c          	mov    dl,BYTE PTR [esp+0x3c]
c0012f95:	8d 44 24 23          	lea    eax,[esp+0x23]
c0012f99:	88 54 24 13          	mov    BYTE PTR [esp+0x13],dl
c0012f9d:	50                   	push   eax
c0012f9e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fa6:	e8 be ff ff ff       	call   c0012f69 <Reg::readBool(char*, char*, bool*)>
c0012fab:	83 c4 10             	add    esp,0x10
c0012fae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012fb2:	84 c0                	test   al,al
c0012fb4:	74 04                	je     c0012fba <Reg::readBoolWithDefault(char*, char*, bool)+0x2c>
c0012fb6:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
c0012fba:	88 d0                	mov    al,dl
c0012fbc:	83 c4 2c             	add    esp,0x2c
c0012fbf:	c3                   	ret    

c0012fc0 <Reg::readIntWithDefault(char*, char*, int)>:
c0012fc0:	53                   	push   ebx
c0012fc1:	83 ec 1c             	sub    esp,0x1c
c0012fc4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012fc8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012fcc:	50                   	push   eax
c0012fcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012fd5:	e8 2d fe ff ff       	call   c0012e07 <Reg::readInt(char*, char*, int*)>
c0012fda:	83 c4 10             	add    esp,0x10
c0012fdd:	84 c0                	test   al,al
c0012fdf:	74 04                	je     c0012fe5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012fe1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fe5:	83 c4 18             	add    esp,0x18
c0012fe8:	89 d8                	mov    eax,ebx
c0012fea:	5b                   	pop    ebx
c0012feb:	c3                   	ret    

c0012fec <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012fec:	57                   	push   edi
c0012fed:	56                   	push   esi
c0012fee:	53                   	push   ebx
c0012fef:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012ff3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012ff7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ffb:	56                   	push   esi
c0012ffc:	57                   	push   edi
c0012ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013005:	e8 d9 fe ff ff       	call   c0012ee3 <Reg::readString(char*, char*, char*, int)>
c001300a:	83 c4 10             	add    esp,0x10
c001300d:	84 c0                	test   al,al
c001300f:	75 16                	jne    c0013027 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013011:	50                   	push   eax
c0013012:	56                   	push   esi
c0013013:	6a 00                	push   0x0
c0013015:	57                   	push   edi
c0013016:	e8 65 d5 fe ff       	call   c0000580 <memset>
c001301b:	8d 4e ff             	lea    ecx,[esi-0x1]
c001301e:	89 de                	mov    esi,ebx
c0013020:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013022:	83 c4 10             	add    esp,0x10
c0013025:	89 df                	mov    edi,ebx
c0013027:	5b                   	pop    ebx
c0013028:	89 f8                	mov    eax,edi
c001302a:	5e                   	pop    esi
c001302b:	5f                   	pop    edi
c001302c:	c3                   	ret    

c001302d <SysEject(regs*)>:
c001302d:	83 ec 0c             	sub    esp,0xc
c0013030:	83 ca ff             	or     edx,0xffffffff
c0013033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013037:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001303a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001303f:	83 e9 41             	sub    ecx,0x41
c0013042:	83 f9 19             	cmp    ecx,0x19
c0013045:	77 18                	ja     c001305f <SysEject(regs*)+0x32>
c0013047:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c001304e:	85 c9                	test   ecx,ecx
c0013050:	74 0d                	je     c001305f <SysEject(regs*)+0x32>
c0013052:	83 ec 0c             	sub    esp,0xc
c0013055:	51                   	push   ecx
c0013056:	e8 43 a1 ff ff       	call   c000d19e <LogicalDisk::eject()>
c001305b:	83 c4 10             	add    esp,0x10
c001305e:	99                   	cdq    
c001305f:	83 c4 0c             	add    esp,0xc
c0013062:	c3                   	ret    

c0013063 <SysExit(regs*)>:
c0013063:	83 ec 18             	sub    esp,0x18
c0013066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001306a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001306d:	e8 96 29 00 00       	call   c0015a08 <terminateTask(int)>
c0013072:	83 c8 ff             	or     eax,0xffffffff
c0013075:	83 c4 1c             	add    esp,0x1c
c0013078:	89 c2                	mov    edx,eax
c001307a:	c3                   	ret    

c001307b <SysGetCwd(regs*)>:
c001307b:	83 ec 10             	sub    esp,0x10
c001307e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013082:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013085:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013088:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001308d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013090:	e8 68 7d ff ff       	call   c000adfd <Fs::getcwd(Process*, char*, int)>
c0013095:	83 c4 1c             	add    esp,0x1c
c0013098:	99                   	cdq    
c0013099:	c3                   	ret    

c001309a <SysGetPID(regs*)>:
c001309a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001309f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00130a4:	99                   	cdq    
c00130a5:	c3                   	ret    

c00130a6 <SysGetRAMData(regs*)>:
c00130a6:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c00130b0:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c00130b6:	99                   	cdq    
c00130b7:	f7 f9                	idiv   ecx
c00130b9:	c1 e0 18             	shl    eax,0x18
c00130bc:	09 c8                	or     eax,ecx
c00130be:	99                   	cdq    
c00130bf:	c3                   	ret    

c00130c0 <SysGetVGAPtr(regs*)>:
c00130c0:	55                   	push   ebp
c00130c1:	57                   	push   edi
c00130c2:	56                   	push   esi
c00130c3:	53                   	push   ebx
c00130c4:	83 ec 18             	sub    esp,0x18
c00130c7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00130cb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130ce:	e8 65 24 00 00       	call   c0015538 <Thr::processFromPID(int)>
c00130d3:	83 c4 10             	add    esp,0x10
c00130d6:	89 c1                	mov    ecx,eax
c00130d8:	b8 01 00 00 00       	mov    eax,0x1
c00130dd:	85 c9                	test   ecx,ecx
c00130df:	74 57                	je     c0013138 <SysGetVGAPtr(regs*)+0x78>
c00130e1:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00130e5:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00130eb:	74 0c                	je     c00130f9 <SysGetVGAPtr(regs*)+0x39>
c00130ed:	83 ec 0c             	sub    esp,0xc
c00130f0:	55                   	push   ebp
c00130f1:	e8 87 56 ff ff       	call   c000877d <setActiveTerminal(VgaText*)>
c00130f6:	83 c4 10             	add    esp,0x10
c00130f9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00130fc:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013101:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013104:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013106:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013109:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001310c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013112:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013115:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013118:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001311e:	50                   	push   eax
c001311f:	50                   	push   eax
c0013120:	68 3c 0c 02 c0       	push   0xc0020c3c
c0013125:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013128:	05 a8 0f 00 00       	add    eax,0xfa8
c001312d:	50                   	push   eax
c001312e:	e8 ed d5 fe ff       	call   c0000720 <strcpy>
c0013133:	83 c4 10             	add    esp,0x10
c0013136:	31 c0                	xor    eax,eax
c0013138:	83 c4 0c             	add    esp,0xc
c001313b:	31 d2                	xor    edx,edx
c001313d:	5b                   	pop    ebx
c001313e:	5e                   	pop    esi
c001313f:	5f                   	pop    edi
c0013140:	5d                   	pop    ebp
c0013141:	c3                   	ret    
c0013142:	66 90                	xchg   ax,ax

c0013144 <SysKill(regs*)>:
c0013144:	53                   	push   ebx
c0013145:	83 ec 08             	sub    esp,0x8
c0013148:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001314c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013150:	75 16                	jne    c0013168 <SysKill(regs*)+0x24>
c0013152:	83 ec 0c             	sub    esp,0xc
c0013155:	68 46 0c 02 c0       	push   0xc0020c46
c001315a:	e8 c6 d6 ff ff       	call   c0010825 <KePanic(char const*)>
c001315f:	83 c4 10             	add    esp,0x10
c0013162:	e9 85 00 00 00       	jmp    c00131ec <SysKill(regs*)+0xa8>
c0013167:	90                   	nop
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	68 84 81 02 c0       	push   0xc0028184
c0013170:	e8 8f b8 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013175:	8d 76 00             	lea    esi,[esi+0x0]
c0013178:	83 c4 10             	add    esp,0x10
c001317b:	85 c0                	test   eax,eax
c001317d:	74 19                	je     c0013198 <SysKill(regs*)+0x54>
c001317f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013182:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013185:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013187:	74 33                	je     c00131bc <SysKill(regs*)+0x78>
c0013189:	52                   	push   edx
c001318a:	52                   	push   edx
c001318b:	50                   	push   eax
c001318c:	68 84 81 02 c0       	push   0xc0028184
c0013191:	e8 56 bb 00 00       	call   c001ecec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013196:	eb e0                	jmp    c0013178 <SysKill(regs*)+0x34>
c0013198:	83 ec 0c             	sub    esp,0xc
c001319b:	68 78 81 02 c0       	push   0xc0028178
c00131a0:	e8 5f b8 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00131a5:	8d 76 00             	lea    esi,[esi+0x0]
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	85 c0                	test   eax,eax
c00131ad:	74 3d                	je     c00131ec <SysKill(regs*)+0xa8>
c00131af:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00131b2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00131b5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00131b7:	75 23                	jne    c00131dc <SysKill(regs*)+0x98>
c00131b9:	8d 76 00             	lea    esi,[esi+0x0]
c00131bc:	51                   	push   ecx
c00131bd:	51                   	push   ecx
c00131be:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00131c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131c9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00131cf:	e8 c3 da ff ff       	call   c0010c97 <KeRaiseSignal(SigHandlerBlock*, int)>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	0f 57 c0             	xorps  xmm0,xmm0
c00131da:	eb 14                	jmp    c00131f0 <SysKill(regs*)+0xac>
c00131dc:	52                   	push   edx
c00131dd:	52                   	push   edx
c00131de:	50                   	push   eax
c00131df:	68 78 81 02 c0       	push   0xc0028178
c00131e4:	e8 03 bb 00 00       	call   c001ecec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00131e9:	eb bd                	jmp    c00131a8 <SysKill(regs*)+0x64>
c00131eb:	90                   	nop
c00131ec:	66 0f 76 c0          	pcmpeqd xmm0,xmm0
c00131f0:	66 0f 7e c0          	movd   eax,xmm0
c00131f4:	83 c4 08             	add    esp,0x8
c00131f7:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c00131fc:	66 0f 7e c2          	movd   edx,xmm0
c0013200:	5b                   	pop    ebx
c0013201:	c3                   	ret    

c0013202 <SysLoadDLL(regs*)>:
c0013202:	56                   	push   esi
c0013203:	31 d2                	xor    edx,edx
c0013205:	53                   	push   ebx
c0013206:	b8 01 00 00 00       	mov    eax,0x1
c001320b:	51                   	push   ecx
c001320c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013210:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013214:	0f 84 8c 00 00 00    	je     c00132a6 <SysLoadDLL(regs*)+0xa4>
c001321a:	83 ec 0c             	sub    esp,0xc
c001321d:	68 14 01 00 00       	push   0x114
c0013222:	e8 d5 48 ff ff       	call   c0007afc <malloc>
c0013227:	83 c4 0c             	add    esp,0xc
c001322a:	89 c3                	mov    ebx,eax
c001322c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013231:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013234:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013237:	53                   	push   ebx
c0013238:	e8 bb 7d ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	31 d2                	xor    edx,edx
c0013242:	85 db                	test   ebx,ebx
c0013244:	b8 02 00 00 00       	mov    eax,0x2
c0013249:	74 5b                	je     c00132a6 <SysLoadDLL(regs*)+0xa4>
c001324b:	83 ec 0c             	sub    esp,0xc
c001324e:	53                   	push   ebx
c001324f:	e8 ca 80 ff ff       	call   c000b31e <File::exists()>
c0013254:	83 c4 10             	add    esp,0x10
c0013257:	84 c0                	test   al,al
c0013259:	8b 03                	mov    eax,DWORD PTR [ebx]
c001325b:	75 11                	jne    c001326e <SysLoadDLL(regs*)+0x6c>
c001325d:	83 ec 0c             	sub    esp,0xc
c0013260:	53                   	push   ebx
c0013261:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	b8 03 00 00 00       	mov    eax,0x3
c001326c:	eb 36                	jmp    c00132a4 <SysLoadDLL(regs*)+0xa2>
c001326e:	83 ec 0c             	sub    esp,0xc
c0013271:	53                   	push   ebx
c0013272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013275:	58                   	pop    eax
c0013276:	5a                   	pop    edx
c0013277:	6a 00                	push   0x0
c0013279:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001327c:	e8 4d 14 00 00       	call   c00146ce <Thr::loadDLL(char const*, bool)>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	31 d2                	xor    edx,edx
c0013286:	89 c1                	mov    ecx,eax
c0013288:	b8 04 00 00 00       	mov    eax,0x4
c001328d:	85 c9                	test   ecx,ecx
c001328f:	74 15                	je     c00132a6 <SysLoadDLL(regs*)+0xa4>
c0013291:	53                   	push   ebx
c0013292:	53                   	push   ebx
c0013293:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0013299:	51                   	push   ecx
c001329a:	e8 6b 16 00 00       	call   c001490a <Thr::executeDLL(unsigned long, void*)>
c001329f:	83 c4 10             	add    esp,0x10
c00132a2:	31 c0                	xor    eax,eax
c00132a4:	31 d2                	xor    edx,edx
c00132a6:	59                   	pop    ecx
c00132a7:	5b                   	pop    ebx
c00132a8:	5e                   	pop    esi
c00132a9:	c3                   	ret    

c00132aa <SysRead(regs*)>:
c00132aa:	57                   	push   edi
c00132ab:	56                   	push   esi
c00132ac:	53                   	push   ebx
c00132ad:	83 ec 10             	sub    esp,0x10
c00132b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00132b4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00132b7:	83 f8 02             	cmp    eax,0x2
c00132ba:	77 10                	ja     c00132cc <SysRead(regs*)+0x22>
c00132bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132c4:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00132ca:	eb 0e                	jmp    c00132da <SysRead(regs*)+0x30>
c00132cc:	83 ec 0c             	sub    esp,0xc
c00132cf:	50                   	push   eax
c00132d0:	e8 ea 61 ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c00132d5:	83 c4 10             	add    esp,0x10
c00132d8:	89 c1                	mov    ecx,eax
c00132da:	83 c8 ff             	or     eax,0xffffffff
c00132dd:	85 c9                	test   ecx,ecx
c00132df:	89 c2                	mov    edx,eax
c00132e1:	74 28                	je     c001330b <SysRead(regs*)+0x61>
c00132e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00132eb:	83 ec 0c             	sub    esp,0xc
c00132ee:	31 ff                	xor    edi,edi
c00132f0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132f6:	52                   	push   edx
c00132f7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00132fa:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00132fd:	57                   	push   edi
c00132fe:	56                   	push   esi
c00132ff:	51                   	push   ecx
c0013300:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013307:	83 c4 20             	add    esp,0x20
c001330a:	99                   	cdq    
c001330b:	83 c4 10             	add    esp,0x10
c001330e:	5b                   	pop    ebx
c001330f:	5e                   	pop    esi
c0013310:	5f                   	pop    edi
c0013311:	c3                   	ret    

c0013312 <SysRegisterSignal(regs*)>:
c0013312:	83 ec 18             	sub    esp,0x18
c0013315:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013319:	6a 00                	push   0x0
c001331b:	6a 00                	push   0x0
c001331d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013320:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013323:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013328:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001332b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013331:	e8 2b d9 ff ff       	call   c0010c61 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013336:	83 c4 2c             	add    esp,0x2c
c0013339:	99                   	cdq    
c001333a:	c3                   	ret    

c001333b <SysRegistryGetTypeFromPath(regs*)>:
c001333b:	57                   	push   edi
c001333c:	56                   	push   esi
c001333d:	53                   	push   ebx
c001333e:	81 ec 38 01 00 00    	sub    esp,0x138
c0013344:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001334b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001334e:	68 67 0c 02 c0       	push   0xc0020c67
c0013353:	e8 1e 77 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013358:	5a                   	pop    edx
c0013359:	59                   	pop    ecx
c001335a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001335d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013360:	e8 51 f6 ff ff       	call   c00129b6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013365:	5f                   	pop    edi
c0013366:	5a                   	pop    edx
c0013367:	89 c6                	mov    esi,eax
c0013369:	50                   	push   eax
c001336a:	68 87 0c 02 c0       	push   0xc0020c87
c001336f:	e8 02 77 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013374:	83 c4 10             	add    esp,0x10
c0013377:	85 f6                	test   esi,esi
c0013379:	74 28                	je     c00133a3 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001337b:	50                   	push   eax
c001337c:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013380:	57                   	push   edi
c0013381:	56                   	push   esi
c0013382:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013385:	e8 1a f2 ff ff       	call   c00125a4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001338a:	83 c4 0c             	add    esp,0xc
c001338d:	57                   	push   edi
c001338e:	50                   	push   eax
c001338f:	89 c3                	mov    ebx,eax
c0013391:	68 8f 0c 02 c0       	push   0xc0020c8f
c0013396:	e8 db 76 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001339b:	89 d8                	mov    eax,ebx
c001339d:	83 c4 10             	add    esp,0x10
c00133a0:	99                   	cdq    
c00133a1:	eb 05                	jmp    c00133a8 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00133a3:	83 c8 ff             	or     eax,0xffffffff
c00133a6:	89 c2                	mov    edx,eax
c00133a8:	81 c4 30 01 00 00    	add    esp,0x130
c00133ae:	5b                   	pop    ebx
c00133af:	5e                   	pop    esi
c00133b0:	5f                   	pop    edi
c00133b1:	c3                   	ret    

c00133b2 <SysRegistryReadExtent(regs*)>:
c00133b2:	83 ec 1c             	sub    esp,0x1c
c00133b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00133b9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00133bc:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00133bf:	85 c0                	test   eax,eax
c00133c1:	79 1f                	jns    c00133e2 <SysRegistryReadExtent(regs*)+0x30>
c00133c3:	52                   	push   edx
c00133c4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00133c9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00133cd:	52                   	push   edx
c00133ce:	50                   	push   eax
c00133cf:	51                   	push   ecx
c00133d0:	e8 c4 f0 ff ff       	call   c0012499 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00133d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00133dd:	83 c4 10             	add    esp,0x10
c00133e0:	eb 14                	jmp    c00133f6 <SysRegistryReadExtent(regs*)+0x44>
c00133e2:	83 ec 04             	sub    esp,0x4
c00133e5:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00133e8:	50                   	push   eax
c00133e9:	51                   	push   ecx
c00133ea:	e8 42 eb ff ff       	call   c0011f31 <CmGetString(Reghive_Tag*, int, char*)>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	31 c0                	xor    eax,eax
c00133f4:	31 d2                	xor    edx,edx
c00133f6:	83 c4 1c             	add    esp,0x1c
c00133f9:	c3                   	ret    

c00133fa <SysRegistryPathToExtentLookup(regs*)>:
c00133fa:	53                   	push   ebx
c00133fb:	83 ec 10             	sub    esp,0x10
c00133fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013402:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013405:	68 a5 0c 02 c0       	push   0xc0020ca5
c001340a:	e8 67 76 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001340f:	58                   	pop    eax
c0013410:	5a                   	pop    edx
c0013411:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013414:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013417:	e8 9a f5 ff ff       	call   c00129b6 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001341c:	83 c4 18             	add    esp,0x18
c001341f:	5b                   	pop    ebx
c0013420:	99                   	cdq    
c0013421:	c3                   	ret    

c0013422 <SysRegistryEnterDirectory(regs*)>:
c0013422:	53                   	push   ebx
c0013423:	83 ec 10             	sub    esp,0x10
c0013426:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001342a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001342d:	68 c8 0c 02 c0       	push   0xc0020cc8
c0013432:	e8 3f 76 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013437:	58                   	pop    eax
c0013438:	5a                   	pop    edx
c0013439:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001343c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001343f:	e8 64 eb ff ff       	call   c0011fa8 <CmEnterDirectory(Reghive_Tag*, int)>
c0013444:	83 c4 18             	add    esp,0x18
c0013447:	5b                   	pop    ebx
c0013448:	99                   	cdq    
c0013449:	c3                   	ret    

c001344a <SysRegistryGetNext(regs*)>:
c001344a:	53                   	push   ebx
c001344b:	83 ec 10             	sub    esp,0x10
c001344e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013452:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013455:	68 e6 0c 02 c0       	push   0xc0020ce6
c001345a:	e8 17 76 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001345f:	58                   	pop    eax
c0013460:	5a                   	pop    edx
c0013461:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013464:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013467:	e8 7b eb ff ff       	call   c0011fe7 <CmGetNext(Reghive_Tag*, int)>
c001346c:	83 c4 18             	add    esp,0x18
c001346f:	5b                   	pop    ebx
c0013470:	99                   	cdq    
c0013471:	c3                   	ret    

c0013472 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013472:	57                   	push   edi
c0013473:	56                   	push   esi
c0013474:	53                   	push   ebx
c0013475:	81 ec 34 01 00 00    	sub    esp,0x134
c001347b:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013482:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013486:	57                   	push   edi
c0013487:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001348a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001348d:	e8 12 f1 ff ff       	call   c00125a4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013492:	89 c3                	mov    ebx,eax
c0013494:	58                   	pop    eax
c0013495:	5a                   	pop    edx
c0013496:	57                   	push   edi
c0013497:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001349a:	e8 81 d2 fe ff       	call   c0000720 <strcpy>
c001349f:	81 c4 40 01 00 00    	add    esp,0x140
c00134a5:	89 d8                	mov    eax,ebx
c00134a7:	5b                   	pop    ebx
c00134a8:	99                   	cdq    
c00134a9:	5e                   	pop    esi
c00134aa:	5f                   	pop    edi
c00134ab:	c3                   	ret    

c00134ac <SysRegistryOpen(regs*)>:
c00134ac:	83 ec 18             	sub    esp,0x18
c00134af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134b3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00134b6:	e8 06 e9 ff ff       	call   c0011dc1 <CmOpen(char const*)>
c00134bb:	83 c4 1c             	add    esp,0x1c
c00134be:	99                   	cdq    
c00134bf:	c3                   	ret    

c00134c0 <SysRegistryClose(regs*)>:
c00134c0:	83 ec 18             	sub    esp,0x18
c00134c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134ca:	e8 10 ea ff ff       	call   c0011edf <CmClose(Reghive_Tag*)>
c00134cf:	31 c0                	xor    eax,eax
c00134d1:	31 d2                	xor    edx,edx
c00134d3:	83 c4 1c             	add    esp,0x1c
c00134d6:	c3                   	ret    

c00134d7 <SysSbrk(regs*)>:
c00134d7:	56                   	push   esi
c00134d8:	53                   	push   ebx
c00134d9:	50                   	push   eax
c00134da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00134e6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00134e9:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00134ef:	85 db                	test   ebx,ebx
c00134f1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00134f4:	74 02                	je     c00134f8 <SysSbrk(regs*)+0x21>
c00134f6:	79 06                	jns    c00134fe <SysSbrk(regs*)+0x27>
c00134f8:	89 f0                	mov    eax,esi
c00134fa:	31 d2                	xor    edx,edx
c00134fc:	eb 2a                	jmp    c0013528 <SysSbrk(regs*)+0x51>
c00134fe:	83 c8 ff             	or     eax,0xffffffff
c0013501:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013507:	89 c2                	mov    edx,eax
c0013509:	77 1d                	ja     c0013528 <SysSbrk(regs*)+0x51>
c001350b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013511:	50                   	push   eax
c0013512:	68 07 0c 00 00       	push   0xc07
c0013517:	c1 ea 0c             	shr    edx,0xc
c001351a:	52                   	push   edx
c001351b:	51                   	push   ecx
c001351c:	e8 55 69 ff ff       	call   c0009e76 <VAS::allocatePages(int, int)>
c0013521:	89 f0                	mov    eax,esi
c0013523:	31 d2                	xor    edx,edx
c0013525:	83 c4 10             	add    esp,0x10
c0013528:	59                   	pop    ecx
c0013529:	5b                   	pop    ebx
c001352a:	5e                   	pop    esi
c001352b:	c3                   	ret    

c001352c <SysSetCwd(regs*)>:
c001352c:	83 ec 14             	sub    esp,0x14
c001352f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013533:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013536:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001353b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001353e:	e8 7a 7e ff ff       	call   c000b3bd <Fs::setcwd(Process*, char*)>
c0013543:	83 c4 1c             	add    esp,0x1c
c0013546:	99                   	cdq    
c0013547:	c3                   	ret    

c0013548 <SysSetTime(regs*)>:
c0013548:	56                   	push   esi
c0013549:	be 0c 00 00 00       	mov    esi,0xc
c001354e:	53                   	push   ebx
c001354f:	83 ec 18             	sub    esp,0x18
c0013552:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001355a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001355e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013566:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013569:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001356c:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001356f:	89 c2                	mov    edx,eax
c0013571:	c1 e8 05             	shr    eax,0x5
c0013574:	83 e2 1f             	and    edx,0x1f
c0013577:	42                   	inc    edx
c0013578:	81 eb 6c 07 00 00    	sub    ebx,0x76c
c001357e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013582:	c1 e3 10             	shl    ebx,0x10
c0013585:	31 d2                	xor    edx,edx
c0013587:	f7 f6                	div    esi
c0013589:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001358d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013591:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0013597:	88 d4                	mov    ah,dl
c0013599:	31 d2                	xor    edx,edx
c001359b:	0f b7 c0             	movzx  eax,ax
c001359e:	09 d8                	or     eax,ebx
c00135a0:	bb 3c 00 00 00       	mov    ebx,0x3c
c00135a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135a9:	89 c8                	mov    eax,ecx
c00135ab:	f7 f3                	div    ebx
c00135ad:	c1 e2 10             	shl    edx,0x10
c00135b0:	09 d6                	or     esi,edx
c00135b2:	31 d2                	xor    edx,edx
c00135b4:	f7 f3                	div    ebx
c00135b6:	89 f0                	mov    eax,esi
c00135b8:	bb 10 0e 00 00       	mov    ebx,0xe10
c00135bd:	88 d4                	mov    ah,dl
c00135bf:	31 d2                	xor    edx,edx
c00135c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135c5:	89 c8                	mov    eax,ecx
c00135c7:	b9 18 00 00 00       	mov    ecx,0x18
c00135cc:	f7 f3                	div    ebx
c00135ce:	31 d2                	xor    edx,edx
c00135d0:	f7 f1                	div    ecx
c00135d2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00135d7:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c00135db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00135e3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00135e9:	e8 f0 85 ff ff       	call   c000bbde <Clock::setTimeInDatetimeLocal(datetime_t)>
c00135ee:	83 c4 24             	add    esp,0x24
c00135f1:	31 d2                	xor    edx,edx
c00135f3:	5b                   	pop    ebx
c00135f4:	5e                   	pop    esi
c00135f5:	34 01                	xor    al,0x1
c00135f7:	0f b6 c0             	movzx  eax,al
c00135fa:	c3                   	ret    

c00135fb <SysTimezone(regs*)>:
c00135fb:	53                   	push   ebx
c00135fc:	83 ec 08             	sub    esp,0x8
c00135ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013603:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013607:	75 17                	jne    c0013620 <SysTimezone(regs*)+0x25>
c0013609:	83 ec 0c             	sub    esp,0xc
c001360c:	68 fd 0c 02 c0       	push   0xc0020cfd
c0013611:	e8 60 74 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013616:	83 c8 ff             	or     eax,0xffffffff
c0013619:	83 c4 10             	add    esp,0x10
c001361c:	89 c2                	mov    edx,eax
c001361e:	eb 20                	jmp    c0013640 <SysTimezone(regs*)+0x45>
c0013620:	83 ec 0c             	sub    esp,0xc
c0013623:	68 12 0d 02 c0       	push   0xc0020d12
c0013628:	e8 49 74 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001362d:	58                   	pop    eax
c001362e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013631:	e8 ee 82 ff ff       	call   c000b924 <User::loadClockSettings(int)>
c0013636:	83 c4 10             	add    esp,0x10
c0013639:	b8 01 00 00 00       	mov    eax,0x1
c001363e:	31 d2                	xor    edx,edx
c0013640:	83 c4 08             	add    esp,0x8
c0013643:	5b                   	pop    ebx
c0013644:	c3                   	ret    

c0013645 <SysWrite(regs*)>:
c0013645:	57                   	push   edi
c0013646:	56                   	push   esi
c0013647:	53                   	push   ebx
c0013648:	83 ec 10             	sub    esp,0x10
c001364b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001364f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013652:	83 f8 02             	cmp    eax,0x2
c0013655:	77 10                	ja     c0013667 <SysWrite(regs*)+0x22>
c0013657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001365c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001365f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013665:	eb 0e                	jmp    c0013675 <SysWrite(regs*)+0x30>
c0013667:	83 ec 0c             	sub    esp,0xc
c001366a:	50                   	push   eax
c001366b:	e8 4f 5e ff ff       	call   c00094bf <getFromFileDescriptor(int)>
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	89 c1                	mov    ecx,eax
c0013675:	83 c8 ff             	or     eax,0xffffffff
c0013678:	85 c9                	test   ecx,ecx
c001367a:	89 c2                	mov    edx,eax
c001367c:	74 28                	je     c00136a6 <SysWrite(regs*)+0x61>
c001367e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013686:	83 ec 0c             	sub    esp,0xc
c0013689:	31 ff                	xor    edi,edi
c001368b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001368f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013691:	52                   	push   edx
c0013692:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013695:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013698:	57                   	push   edi
c0013699:	56                   	push   esi
c001369a:	51                   	push   ecx
c001369b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001369e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00136a2:	83 c4 20             	add    esp,0x20
c00136a5:	99                   	cdq    
c00136a6:	83 c4 10             	add    esp,0x10
c00136a9:	5b                   	pop    ebx
c00136aa:	5e                   	pop    esi
c00136ab:	5f                   	pop    edi
c00136ac:	c3                   	ret    

c00136ad <SysWsbe(regs*)>:
c00136ad:	57                   	push   edi
c00136ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00136b3:	56                   	push   esi
c00136b4:	be 51 0d 02 c0       	mov    esi,0xc0020d51
c00136b9:	53                   	push   ebx
c00136ba:	83 ec 30             	sub    esp,0x30
c00136bd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00136c1:	fc                   	cld    
c00136c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00136c4:	83 ec 0c             	sub    esp,0xc
c00136c7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00136cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00136d3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00136d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00136db:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00136de:	57                   	push   edi
c00136df:	e8 3c cf fe ff       	call   c0000620 <strlen>
c00136e4:	5a                   	pop    edx
c00136e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00136e9:	52                   	push   edx
c00136ea:	31 d2                	xor    edx,edx
c00136ec:	57                   	push   edi
c00136ed:	52                   	push   edx
c00136ee:	50                   	push   eax
c00136ef:	56                   	push   esi
c00136f0:	ff d3                	call   ebx
c00136f2:	83 c4 14             	add    esp,0x14
c00136f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00136f9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00136fc:	e8 07 23 00 00       	call   c0015a08 <terminateTask(int)>
c0013701:	83 c4 40             	add    esp,0x40
c0013704:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013709:	5b                   	pop    ebx
c001370a:	31 d2                	xor    edx,edx
c001370c:	5e                   	pop    esi
c001370d:	5f                   	pop    edi
c001370e:	c3                   	ret    

c001370f <SysYield(regs*)>:
c001370f:	83 ec 0c             	sub    esp,0xc
c0013712:	fa                   	cli    
c0013713:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013719:	e8 32 1a 00 00       	call   c0015150 <schedule()>
c001371e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013723:	48                   	dec    eax
c0013724:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0013729:	75 01                	jne    c001372c <SysYield(regs*)+0x1d>
c001372b:	fb                   	sti    
c001372c:	31 c0                	xor    eax,eax
c001372e:	31 d2                	xor    edx,edx
c0013730:	83 c4 0c             	add    esp,0xc
c0013733:	c3                   	ret    

c0013734 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013734:	55                   	push   ebp
c0013735:	57                   	push   edi
c0013736:	56                   	push   esi
c0013737:	53                   	push   ebx
c0013738:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001373e:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013749:	74 3b                	je     c0013786 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001374b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013753:	74 31                	je     c0013786 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013755:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001375d:	75 27                	jne    c0013786 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001375f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013766:	05 00 10 00 00       	add    eax,0x1000
c001376b:	89 c2                	mov    edx,eax
c001376d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013772:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013779:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001377f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013786:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001378d:	83 ec 0c             	sub    esp,0xc
c0013790:	6a 01                	push   0x1
c0013792:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013798:	e8 83 5e ff ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001379d:	83 c4 10             	add    esp,0x10
c00137a0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00137a6:	89 c3                	mov    ebx,eax
c00137a8:	0f 86 26 01 00 00    	jbe    c00138d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00137ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00137b6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137bd:	c1 ee 0c             	shr    esi,0xc
c00137c0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00137c4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00137cb:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00137d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00137d6:	29 ef                	sub    edi,ebp
c00137d8:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00137dc:	0f 83 f9 00 00 00    	jae    c00138db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00137e2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00137e8:	b8 00 10 00 00       	mov    eax,0x1000
c00137ed:	0f 47 f8             	cmova  edi,eax
c00137f0:	83 ec 0c             	sub    esp,0xc
c00137f3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137fa:	31 d2                	xor    edx,edx
c00137fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00137fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013802:	50                   	push   eax
c0013803:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013807:	56                   	push   esi
c0013808:	52                   	push   edx
c0013809:	57                   	push   edi
c001380a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013811:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013814:	83 c4 20             	add    esp,0x20
c0013817:	85 c0                	test   eax,eax
c0013819:	75 06                	jne    c0013821 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c001381b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001381f:	74 13                	je     c0013834 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013821:	83 ec 0c             	sub    esp,0xc
c0013824:	53                   	push   ebx
c0013825:	e8 0f 61 ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c001382a:	83 c4 10             	add    esp,0x10
c001382d:	31 c0                	xor    eax,eax
c001382f:	e9 7c 01 00 00       	jmp    c00139b0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0013834:	fa                   	cli    
c0013835:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001383b:	e8 cc 45 ff ff       	call   c0007e0c <Phys::allocatePage()>
c0013840:	6a 07                	push   0x7
c0013842:	53                   	push   ebx
c0013843:	50                   	push   eax
c0013844:	89 c7                	mov    edi,eax
c0013846:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001384b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001384e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013854:	e8 e9 64 ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013859:	83 c4 0c             	add    esp,0xc
c001385c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013863:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013869:	6a 00                	push   0x0
c001386b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013870:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013873:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013879:	e8 30 63 ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c001387e:	58                   	pop    eax
c001387f:	5a                   	pop    edx
c0013880:	68 07 0c 00 00       	push   0xc07
c0013885:	55                   	push   ebp
c0013886:	57                   	push   edi
c0013887:	89 df                	mov    edi,ebx
c0013889:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013890:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013896:	6a 00                	push   0x0
c0013898:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001389d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138a0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00138a6:	e8 a5 68 ff ff       	call   c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00138ab:	b9 00 10 00 00       	mov    ecx,0x1000
c00138b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138b2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138b7:	83 c4 20             	add    esp,0x20
c00138ba:	48                   	dec    eax
c00138bb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138c0:	85 c0                	test   eax,eax
c00138c2:	75 01                	jne    c00138c5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00138c4:	fb                   	sti    
c00138c5:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00138c9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00138cf:	e9 f0 fe ff ff       	jmp    c00137c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00138d4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00138db:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00138e2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00138e8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00138ee:	0f 86 ae 00 00 00    	jbe    c00139a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00138f4:	fa                   	cli    
c00138f5:	51                   	push   ecx
c00138f6:	31 ff                	xor    edi,edi
c00138f8:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00138ff:	c1 ee 0c             	shr    esi,0xc
c0013902:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013908:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001390e:	6a 00                	push   0x0
c0013910:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013915:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013918:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001391e:	e8 8b 62 ff ff       	call   c0009bae <VAS::mapOtherVASIn(bool, VAS*)>
c0013923:	83 c4 10             	add    esp,0x10
c0013926:	e8 e1 44 ff ff       	call   c0007e0c <Phys::allocatePage()>
c001392b:	47                   	inc    edi
c001392c:	6a 07                	push   0x7
c001392e:	53                   	push   ebx
c001392f:	50                   	push   eax
c0013930:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013934:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001393a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001393d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013943:	e8 fa 63 ff ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013948:	58                   	pop    eax
c0013949:	5a                   	pop    edx
c001394a:	68 07 0c 00 00       	push   0xc07
c001394f:	55                   	push   ebp
c0013950:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013956:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001395a:	50                   	push   eax
c001395b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013962:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013968:	6a 00                	push   0x0
c001396a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001396f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013972:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013978:	e8 d3 67 ff ff       	call   c000a150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001397d:	83 c4 1c             	add    esp,0x1c
c0013980:	68 00 10 00 00       	push   0x1000
c0013985:	6a 00                	push   0x0
c0013987:	53                   	push   ebx
c0013988:	e8 f3 cb fe ff       	call   c0000580 <memset>
c001398d:	83 c4 10             	add    esp,0x10
c0013990:	39 fe                	cmp    esi,edi
c0013992:	77 92                	ja     c0013926 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0013994:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013999:	48                   	dec    eax
c001399a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001399f:	75 01                	jne    c00139a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00139a1:	fb                   	sti    
c00139a2:	83 ec 0c             	sub    esp,0xc
c00139a5:	53                   	push   ebx
c00139a6:	e8 8e 5f ff ff       	call   c0009939 <Virt::freeKernelVirtualPages(unsigned long)>
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	b0 01                	mov    al,0x1
c00139b0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00139b6:	5b                   	pop    ebx
c00139b7:	5e                   	pop    esi
c00139b8:	5f                   	pop    edi
c00139b9:	5d                   	pop    ebp
c00139ba:	c3                   	ret    

c00139bb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00139bb:	55                   	push   ebp
c00139bc:	57                   	push   edi
c00139bd:	56                   	push   esi
c00139be:	53                   	push   ebx
c00139bf:	83 ec 48             	sub    esp,0x48
c00139c2:	68 14 01 00 00       	push   0x114
c00139c7:	e8 30 41 ff ff       	call   c0007afc <malloc>
c00139cc:	83 c4 0c             	add    esp,0xc
c00139cf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00139d3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00139d7:	89 c7                	mov    edi,eax
c00139d9:	50                   	push   eax
c00139da:	e8 19 76 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c00139df:	58                   	pop    eax
c00139e0:	5a                   	pop    edx
c00139e1:	6a 01                	push   0x1
c00139e3:	57                   	push   edi
c00139e4:	e8 cd 76 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c00139e9:	83 c4 10             	add    esp,0x10
c00139ec:	85 c0                	test   eax,eax
c00139ee:	0f 85 4d 01 00 00    	jne    c0013b41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c00139f4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	6a 34                	push   0x34
c0013a01:	e8 f6 40 ff ff       	call   c0007afc <malloc>
c0013a06:	89 c3                	mov    ebx,eax
c0013a08:	58                   	pop    eax
c0013a09:	8b 07                	mov    eax,DWORD PTR [edi]
c0013a0b:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013a0f:	56                   	push   esi
c0013a10:	53                   	push   ebx
c0013a11:	6a 00                	push   0x0
c0013a13:	6a 34                	push   0x34
c0013a15:	57                   	push   edi
c0013a16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a19:	83 c4 20             	add    esp,0x20
c0013a1c:	85 c0                	test   eax,eax
c0013a1e:	0f 85 1d 01 00 00    	jne    c0013b41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a24:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013a2a:	0f 85 11 01 00 00    	jne    c0013b41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a33:	85 c0                	test   eax,eax
c0013a35:	0f 84 06 01 00 00    	je     c0013b41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a3b:	31 d2                	xor    edx,edx
c0013a3d:	55                   	push   ebp
c0013a3e:	52                   	push   edx
c0013a3f:	50                   	push   eax
c0013a40:	57                   	push   edi
c0013a41:	e8 2e 77 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013a46:	83 c4 10             	add    esp,0x10
c0013a49:	85 c0                	test   eax,eax
c0013a4b:	0f 85 f0 00 00 00    	jne    c0013b41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a51:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013a54:	83 ec 0c             	sub    esp,0xc
c0013a57:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a5b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013a5f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a63:	0f af c2             	imul   eax,edx
c0013a66:	50                   	push   eax
c0013a67:	e8 90 40 ff ff       	call   c0007afc <malloc>
c0013a6c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013a6e:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a79:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013a7d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013a81:	0f af c2             	imul   eax,edx
c0013a84:	99                   	cdq    
c0013a85:	52                   	push   edx
c0013a86:	50                   	push   eax
c0013a87:	57                   	push   edi
c0013a88:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a8b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013a8e:	83 c4 20             	add    esp,0x20
c0013a91:	85 c0                	test   eax,eax
c0013a93:	0f 84 a8 00 00 00    	je     c0013b41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013a99:	31 d2                	xor    edx,edx
c0013a9b:	51                   	push   ecx
c0013a9c:	52                   	push   edx
c0013a9d:	50                   	push   eax
c0013a9e:	57                   	push   edi
c0013a9f:	e8 d0 76 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013aa4:	83 c4 10             	add    esp,0x10
c0013aa7:	85 c0                	test   eax,eax
c0013aa9:	0f 85 92 00 00 00    	jne    c0013b41 <Thr::loadProgramIntoMemory(Process*, char const*)+0x186>
c0013aaf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013ab3:	83 ec 0c             	sub    esp,0xc
c0013ab6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013aba:	0f af c2             	imul   eax,edx
c0013abd:	50                   	push   eax
c0013abe:	e8 39 40 ff ff       	call   c0007afc <malloc>
c0013ac3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013ac5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ac8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ad0:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013ad4:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013ad8:	0f af c2             	imul   eax,edx
c0013adb:	99                   	cdq    
c0013adc:	52                   	push   edx
c0013add:	50                   	push   eax
c0013ade:	57                   	push   edi
c0013adf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ae2:	83 c4 20             	add    esp,0x20
c0013ae5:	31 c9                	xor    ecx,ecx
c0013ae7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013aef:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013af3:	39 c8                	cmp    eax,ecx
c0013af5:	0f 86 8b 00 00 00    	jbe    c0013b86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1cb>
c0013afb:	89 cd                	mov    ebp,ecx
c0013afd:	c1 e5 05             	shl    ebp,0x5
c0013b00:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013b04:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013b08:	75 73                	jne    c0013b7d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c2>
c0013b0a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013b11:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013b14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b18:	52                   	push   edx
c0013b19:	31 d2                	xor    edx,edx
c0013b1b:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013b1e:	52                   	push   edx
c0013b1f:	50                   	push   eax
c0013b20:	57                   	push   edi
c0013b21:	e8 4e 76 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013b26:	83 c4 10             	add    esp,0x10
c0013b29:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013b2d:	85 c0                	test   eax,eax
c0013b2f:	74 17                	je     c0013b48 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18d>
c0013b31:	83 ec 0c             	sub    esp,0xc
c0013b34:	68 7d 0d 02 c0       	push   0xc0020d7d
c0013b39:	e8 38 6f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013b3e:	83 c4 10             	add    esp,0x10
c0013b41:	31 c0                	xor    eax,eax
c0013b43:	e9 8e 00 00 00       	jmp    c0013bd6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x21b>
c0013b48:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013b4c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013b4f:	83 ec 0c             	sub    esp,0xc
c0013b52:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013b55:	50                   	push   eax
c0013b56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013b5a:	56                   	push   esi
c0013b5b:	57                   	push   edi
c0013b5c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013b60:	e8 cf fb ff ff       	call   c0013734 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013b65:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013b69:	83 c4 20             	add    esp,0x20
c0013b6c:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013b70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013b74:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013b79:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013b7d:	41                   	inc    ecx
c0013b7e:	0f b7 c9             	movzx  ecx,cx
c0013b81:	e9 69 ff ff ff       	jmp    c0013aef <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013b86:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013b8a:	83 ec 0c             	sub    esp,0xc
c0013b8d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013b91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b95:	89 b2 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],esi
c0013b9b:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013ba1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013ba6:	05 00 10 00 00       	add    eax,0x1000
c0013bab:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb2:	e8 58 3f ff ff       	call   c0007b0f <free>
c0013bb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bba:	e8 50 3f ff ff       	call   c0007b0f <free>
c0013bbf:	58                   	pop    eax
c0013bc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bc4:	e8 46 3f ff ff       	call   c0007b0f <free>
c0013bc9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013bcc:	e8 43 75 ff ff       	call   c000b114 <File::close()>
c0013bd1:	83 c4 10             	add    esp,0x10
c0013bd4:	b0 01                	mov    al,0x1
c0013bd6:	83 c4 3c             	add    esp,0x3c
c0013bd9:	5b                   	pop    ebx
c0013bda:	5e                   	pop    esi
c0013bdb:	5f                   	pop    edi
c0013bdc:	5d                   	pop    ebp
c0013bdd:	c3                   	ret    

c0013bde <Thr::runtimeReferenceHelper()>:
c0013bde:	83 ec 18             	sub    esp,0x18
c0013be1:	68 85 0d 02 c0       	push   0xc0020d85
c0013be6:	e8 8b 6e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0013beb:	fa                   	cli    
c0013bec:	83 c4 10             	add    esp,0x10
c0013bef:	eb fe                	jmp    c0013bef <Thr::runtimeReferenceHelper()+0x11>

c0013bf1 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013bf1:	57                   	push   edi
c0013bf2:	56                   	push   esi
c0013bf3:	53                   	push   ebx
c0013bf4:	31 db                	xor    ebx,ebx
c0013bf6:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013bfc:	7e 3c                	jle    c0013c3a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013bfe:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013c05:	31 ff                	xor    edi,edi
c0013c07:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013c0e:	7e 27                	jle    c0013c37 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013c10:	50                   	push   eax
c0013c11:	50                   	push   eax
c0013c12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c16:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c18:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013c1f:	50                   	push   eax
c0013c20:	e8 1b cc fe ff       	call   c0000840 <strcmp>
c0013c25:	83 c4 10             	add    esp,0x10
c0013c28:	85 c0                	test   eax,eax
c0013c2a:	75 05                	jne    c0013c31 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013c2c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013c2f:	eb 0b                	jmp    c0013c3c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013c31:	83 c6 10             	add    esi,0x10
c0013c34:	47                   	inc    edi
c0013c35:	eb d0                	jmp    c0013c07 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013c37:	43                   	inc    ebx
c0013c38:	eb bc                	jmp    c0013bf6 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013c3a:	31 c0                	xor    eax,eax
c0013c3c:	5b                   	pop    ebx
c0013c3d:	5e                   	pop    esi
c0013c3e:	5f                   	pop    edi
c0013c3f:	c3                   	ret    

c0013c40 <Thr::loadKernelSymbolTable(char const*)>:
c0013c40:	55                   	push   ebp
c0013c41:	57                   	push   edi
c0013c42:	56                   	push   esi
c0013c43:	53                   	push   ebx
c0013c44:	83 ec 68             	sub    esp,0x68
c0013c47:	68 14 01 00 00       	push   0x114
c0013c4c:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013c52:	e8 a5 3e ff ff       	call   c0007afc <malloc>
c0013c57:	83 c4 0c             	add    esp,0xc
c0013c5a:	56                   	push   esi
c0013c5b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013c5f:	89 c3                	mov    ebx,eax
c0013c61:	50                   	push   eax
c0013c62:	e8 91 73 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0013c67:	5e                   	pop    esi
c0013c68:	5f                   	pop    edi
c0013c69:	6a 01                	push   0x1
c0013c6b:	53                   	push   ebx
c0013c6c:	e8 45 74 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	85 c0                	test   eax,eax
c0013c76:	74 0a                	je     c0013c82 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013c78:	83 ec 0c             	sub    esp,0xc
c0013c7b:	68 a7 0d 02 c0       	push   0xc0020da7
c0013c80:	eb 34                	jmp    c0013cb6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013c82:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013c8a:	83 ec 0c             	sub    esp,0xc
c0013c8d:	6a 34                	push   0x34
c0013c8f:	e8 68 3e ff ff       	call   c0007afc <malloc>
c0013c94:	59                   	pop    ecx
c0013c95:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013c99:	89 c7                	mov    edi,eax
c0013c9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c9d:	56                   	push   esi
c0013c9e:	57                   	push   edi
c0013c9f:	6a 00                	push   0x0
c0013ca1:	6a 34                	push   0x34
c0013ca3:	53                   	push   ebx
c0013ca4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ca7:	83 c4 20             	add    esp,0x20
c0013caa:	85 c0                	test   eax,eax
c0013cac:	74 17                	je     c0013cc5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013cae:	83 ec 0c             	sub    esp,0xc
c0013cb1:	68 be 0d 02 c0       	push   0xc0020dbe
c0013cb6:	e8 6a cb ff ff       	call   c0010825 <KePanic(char const*)>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	31 c0                	xor    eax,eax
c0013cc0:	e9 34 02 00 00       	jmp    c0013ef9 <Thr::loadKernelSymbolTable(char const*)+0x2b9>
c0013cc5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013ccb:	75 e1                	jne    c0013cae <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ccd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013cd0:	85 c0                	test   eax,eax
c0013cd2:	74 da                	je     c0013cae <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013cd4:	52                   	push   edx
c0013cd5:	31 d2                	xor    edx,edx
c0013cd7:	52                   	push   edx
c0013cd8:	50                   	push   eax
c0013cd9:	53                   	push   ebx
c0013cda:	e8 95 74 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013cdf:	83 c4 10             	add    esp,0x10
c0013ce2:	85 c0                	test   eax,eax
c0013ce4:	75 c8                	jne    c0013cae <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ce6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013cea:	83 ec 0c             	sub    esp,0xc
c0013ced:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013cf1:	0f af c2             	imul   eax,edx
c0013cf4:	50                   	push   eax
c0013cf5:	e8 02 3e ff ff       	call   c0007afc <malloc>
c0013cfa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013cfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0013cff:	31 f6                	xor    esi,esi
c0013d01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d09:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013d0d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013d11:	0f af c2             	imul   eax,edx
c0013d14:	99                   	cdq    
c0013d15:	52                   	push   edx
c0013d16:	50                   	push   eax
c0013d17:	53                   	push   ebx
c0013d18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d1b:	83 c4 20             	add    esp,0x20
c0013d1e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013d26:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013d2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013d36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013d3e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013d42:	39 f0                	cmp    eax,esi
c0013d44:	0f 86 ab 00 00 00    	jbe    c0013df5 <Thr::loadKernelSymbolTable(char const*)+0x1b5>
c0013d4a:	6b ee 28             	imul   ebp,esi,0x28
c0013d4d:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0013d51:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0013d54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d58:	50                   	push   eax
c0013d59:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013d5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d61:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013d64:	6b c0 28             	imul   eax,eax,0x28
c0013d67:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013d6b:	89 d0                	mov    eax,edx
c0013d6d:	31 d2                	xor    edx,edx
c0013d6f:	52                   	push   edx
c0013d70:	50                   	push   eax
c0013d71:	53                   	push   ebx
c0013d72:	e8 fd 73 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013d77:	83 c4 0c             	add    esp,0xc
c0013d7a:	6a 20                	push   0x20
c0013d7c:	6a 00                	push   0x0
c0013d7e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013d82:	52                   	push   edx
c0013d83:	e8 f8 c7 fe ff       	call   c0000580 <memset>
c0013d88:	58                   	pop    eax
c0013d89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d8b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013d8f:	51                   	push   ecx
c0013d90:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013d94:	52                   	push   edx
c0013d95:	6a 00                	push   0x0
c0013d97:	6a 1f                	push   0x1f
c0013d99:	53                   	push   ebx
c0013d9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d9d:	83 c4 18             	add    esp,0x18
c0013da0:	68 d5 0d 02 c0       	push   0xc0020dd5
c0013da5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013da9:	52                   	push   edx
c0013daa:	e8 91 ca fe ff       	call   c0000840 <strcmp>
c0013daf:	83 c4 10             	add    esp,0x10
c0013db2:	85 c0                	test   eax,eax
c0013db4:	75 0f                	jne    c0013dc5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013db6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013db9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013dbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013dc5:	50                   	push   eax
c0013dc6:	50                   	push   eax
c0013dc7:	68 dd 0d 02 c0       	push   0xc0020ddd
c0013dcc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013dd0:	50                   	push   eax
c0013dd1:	e8 6a ca fe ff       	call   c0000840 <strcmp>
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	85 c0                	test   eax,eax
c0013ddb:	75 0f                	jne    c0013dec <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013ddd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013de0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013de4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013de8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013dec:	46                   	inc    esi
c0013ded:	0f b7 f6             	movzx  esi,si
c0013df0:	e9 49 ff ff ff       	jmp    c0013d3e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013df5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013dfa:	75 10                	jne    c0013e0c <Thr::loadKernelSymbolTable(char const*)+0x1cc>
c0013dfc:	83 ec 0c             	sub    esp,0xc
c0013dff:	68 e5 0d 02 c0       	push   0xc0020de5
c0013e04:	e8 1c ca ff ff       	call   c0010825 <KePanic(char const*)>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013e11:	75 10                	jne    c0013e23 <Thr::loadKernelSymbolTable(char const*)+0x1e3>
c0013e13:	83 ec 0c             	sub    esp,0xc
c0013e16:	68 e5 0d 02 c0       	push   0xc0020de5
c0013e1b:	e8 05 ca ff ff       	call   c0010825 <KePanic(char const*)>
c0013e20:	83 c4 10             	add    esp,0x10
c0013e23:	50                   	push   eax
c0013e24:	31 d2                	xor    edx,edx
c0013e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2a:	52                   	push   edx
c0013e2b:	50                   	push   eax
c0013e2c:	53                   	push   ebx
c0013e2d:	e8 42 73 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013e32:	5a                   	pop    edx
c0013e33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e37:	e8 c0 3c ff ff       	call   c0007afc <malloc>
c0013e3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013e40:	31 c9                	xor    ecx,ecx
c0013e42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e48:	5e                   	pop    esi
c0013e49:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013e4d:	55                   	push   ebp
c0013e4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e52:	51                   	push   ecx
c0013e53:	52                   	push   edx
c0013e54:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013e58:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013e5c:	53                   	push   ebx
c0013e5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e60:	83 c4 14             	add    esp,0x14
c0013e63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e67:	e8 90 3c ff ff       	call   c0007afc <malloc>
c0013e6c:	89 c6                	mov    esi,eax
c0013e6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e70:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013e73:	56                   	push   esi
c0013e74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013e78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013e7c:	51                   	push   ecx
c0013e7d:	52                   	push   edx
c0013e7e:	53                   	push   ebx
c0013e7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e86:	83 c4 1c             	add    esp,0x1c
c0013e89:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013e8f:	c1 e8 04             	shr    eax,0x4
c0013e92:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013e99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e9d:	31 d2                	xor    edx,edx
c0013e9f:	52                   	push   edx
c0013ea0:	50                   	push   eax
c0013ea1:	53                   	push   ebx
c0013ea2:	e8 cd 72 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013ea7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013ea9:	31 d2                	xor    edx,edx
c0013eab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013eae:	56                   	push   esi
c0013eaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013eb3:	52                   	push   edx
c0013eb4:	50                   	push   eax
c0013eb5:	53                   	push   ebx
c0013eb6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013eb9:	83 c4 14             	add    esp,0x14
c0013ebc:	53                   	push   ebx
c0013ebd:	e8 52 72 ff ff       	call   c000b114 <File::close()>
c0013ec2:	5d                   	pop    ebp
c0013ec3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013ec7:	e8 43 3c ff ff       	call   c0007b0f <free>
c0013ecc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ecf:	e8 3b 3c ff ff       	call   c0007b0f <free>
c0013ed4:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013ed9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013edd:	83 c4 10             	add    esp,0x10
c0013ee0:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013ee7:	8d 50 01             	lea    edx,[eax+0x1]
c0013eea:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013ef1:	b0 01                	mov    al,0x1
c0013ef3:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013ef9:	83 c4 5c             	add    esp,0x5c
c0013efc:	5b                   	pop    ebx
c0013efd:	5e                   	pop    esi
c0013efe:	5f                   	pop    edi
c0013eff:	5d                   	pop    ebp
c0013f00:	c3                   	ret    

c0013f01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013f01:	55                   	push   ebp
c0013f02:	57                   	push   edi
c0013f03:	56                   	push   esi
c0013f04:	53                   	push   ebx
c0013f05:	81 ec 68 03 00 00    	sub    esp,0x368
c0013f0b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013f12:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013f18:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0013f1c:	68 14 01 00 00       	push   0x114
c0013f21:	e8 d6 3b ff ff       	call   c0007afc <malloc>
c0013f26:	83 c4 0c             	add    esp,0xc
c0013f29:	53                   	push   ebx
c0013f2a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013f31:	50                   	push   eax
c0013f32:	89 c6                	mov    esi,eax
c0013f34:	e8 bf 70 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0013f39:	5f                   	pop    edi
c0013f3a:	5d                   	pop    ebp
c0013f3b:	6a 01                	push   0x1
c0013f3d:	56                   	push   esi
c0013f3e:	e8 73 71 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	85 c0                	test   eax,eax
c0013f48:	0f 85 bc 06 00 00    	jne    c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f4e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013f56:	83 ec 0c             	sub    esp,0xc
c0013f59:	6a 34                	push   0x34
c0013f5b:	e8 9c 3b ff ff       	call   c0007afc <malloc>
c0013f60:	5b                   	pop    ebx
c0013f61:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013f65:	89 c5                	mov    ebp,eax
c0013f67:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f69:	53                   	push   ebx
c0013f6a:	55                   	push   ebp
c0013f6b:	6a 00                	push   0x0
c0013f6d:	6a 34                	push   0x34
c0013f6f:	56                   	push   esi
c0013f70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f73:	83 c4 20             	add    esp,0x20
c0013f76:	85 c0                	test   eax,eax
c0013f78:	0f 85 8c 06 00 00    	jne    c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f7e:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0013f85:	0f 85 7f 06 00 00    	jne    c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f8b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0013f8e:	85 c0                	test   eax,eax
c0013f90:	0f 84 74 06 00 00    	je     c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013f96:	31 d2                	xor    edx,edx
c0013f98:	51                   	push   ecx
c0013f99:	52                   	push   edx
c0013f9a:	50                   	push   eax
c0013f9b:	56                   	push   esi
c0013f9c:	e8 d3 71 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013fa1:	83 c4 10             	add    esp,0x10
c0013fa4:	85 c0                	test   eax,eax
c0013fa6:	0f 85 5e 06 00 00    	jne    c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013fac:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0013faf:	83 ec 0c             	sub    esp,0xc
c0013fb2:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013fb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013fba:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013fbe:	0f af c2             	imul   eax,edx
c0013fc1:	50                   	push   eax
c0013fc2:	e8 35 3b ff ff       	call   c0007afc <malloc>
c0013fc7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013fc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013fd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fd4:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0013fd8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0013fdc:	0f af c2             	imul   eax,edx
c0013fdf:	99                   	cdq    
c0013fe0:	52                   	push   edx
c0013fe1:	50                   	push   eax
c0013fe2:	56                   	push   esi
c0013fe3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fe6:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0013fe9:	83 c4 20             	add    esp,0x20
c0013fec:	85 c0                	test   eax,eax
c0013fee:	0f 84 16 06 00 00    	je     c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0013ff4:	52                   	push   edx
c0013ff5:	31 d2                	xor    edx,edx
c0013ff7:	52                   	push   edx
c0013ff8:	50                   	push   eax
c0013ff9:	56                   	push   esi
c0013ffa:	e8 75 71 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0013fff:	83 c4 10             	add    esp,0x10
c0014002:	85 c0                	test   eax,eax
c0014004:	0f 85 00 06 00 00    	jne    c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c001400a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001400e:	83 ec 0c             	sub    esp,0xc
c0014011:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014015:	0f af c2             	imul   eax,edx
c0014018:	50                   	push   eax
c0014019:	e8 de 3a ff ff       	call   c0007afc <malloc>
c001401e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014023:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014027:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001402b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001402f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014033:	0f af c2             	imul   eax,edx
c0014036:	99                   	cdq    
c0014037:	52                   	push   edx
c0014038:	50                   	push   eax
c0014039:	56                   	push   esi
c001403a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001403d:	83 c4 20             	add    esp,0x20
c0014040:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014048:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001404c:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0014050:	0f 86 84 00 00 00    	jbe    c00140da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d9>
c0014056:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001405a:	c1 e7 05             	shl    edi,0x5
c001405d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014061:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014064:	75 63                	jne    c00140c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c8>
c0014066:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014069:	31 d2                	xor    edx,edx
c001406b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001406e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014072:	50                   	push   eax
c0014073:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014076:	52                   	push   edx
c0014077:	50                   	push   eax
c0014078:	56                   	push   esi
c0014079:	e8 f6 70 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001407e:	83 c4 10             	add    esp,0x10
c0014081:	85 c0                	test   eax,eax
c0014083:	0f 85 81 05 00 00    	jne    c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c0014089:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014090:	83 ec 0c             	sub    esp,0xc
c0014093:	31 d2                	xor    edx,edx
c0014095:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0014099:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001409b:	01 c3                	add    ebx,eax
c001409d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140a4:	50                   	push   eax
c00140a5:	53                   	push   ebx
c00140a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00140aa:	52                   	push   edx
c00140ab:	50                   	push   eax
c00140ac:	56                   	push   esi
c00140ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140b0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00140b3:	83 c4 1c             	add    esp,0x1c
c00140b6:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00140b9:	50                   	push   eax
c00140ba:	6a 00                	push   0x0
c00140bc:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c00140c0:	53                   	push   ebx
c00140c1:	e8 ba c4 fe ff       	call   c0000580 <memset>
c00140c6:	83 c4 10             	add    esp,0x10
c00140c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140cd:	40                   	inc    eax
c00140ce:	0f b7 c0             	movzx  eax,ax
c00140d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140d5:	e9 6e ff ff ff       	jmp    c0014048 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x147>
c00140da:	53                   	push   ebx
c00140db:	68 00 01 00 00       	push   0x100
c00140e0:	6a 00                	push   0x0
c00140e2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00140e6:	50                   	push   eax
c00140e7:	e8 94 c4 fe ff       	call   c0000580 <memset>
c00140ec:	83 c4 0c             	add    esp,0xc
c00140ef:	68 00 01 00 00       	push   0x100
c00140f4:	6a 00                	push   0x0
c00140f6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00140fd:	50                   	push   eax
c00140fe:	e8 7d c4 fe ff       	call   c0000580 <memset>
c0014103:	83 c4 10             	add    esp,0x10
c0014106:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001410e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014116:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001411e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014126:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001412e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014136:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001413a:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001413e:	0f 86 25 01 00 00    	jbe    c0014269 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x368>
c0014144:	6b 7c 24 10 28       	imul   edi,DWORD PTR [esp+0x10],0x28
c0014149:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001414d:	8b 5f 10             	mov    ebx,DWORD PTR [edi+0x10]
c0014150:	52                   	push   edx
c0014151:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014155:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014159:	8b 07                	mov    eax,DWORD PTR [edi]
c001415b:	6b d2 28             	imul   edx,edx,0x28
c001415e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014162:	31 d2                	xor    edx,edx
c0014164:	52                   	push   edx
c0014165:	50                   	push   eax
c0014166:	56                   	push   esi
c0014167:	e8 08 70 ff ff       	call   c000b174 <File::seek(unsigned long long)>
c001416c:	83 c4 0c             	add    esp,0xc
c001416f:	6a 20                	push   0x20
c0014171:	6a 00                	push   0x0
c0014173:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001417a:	51                   	push   ecx
c001417b:	e8 00 c4 fe ff       	call   c0000580 <memset>
c0014180:	8b 06                	mov    eax,DWORD PTR [esi]
c0014182:	59                   	pop    ecx
c0014183:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014187:	52                   	push   edx
c0014188:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001418f:	51                   	push   ecx
c0014190:	6a 00                	push   0x0
c0014192:	6a 1f                	push   0x1f
c0014194:	56                   	push   esi
c0014195:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014198:	83 c4 1c             	add    esp,0x1c
c001419b:	6a 09                	push   0x9
c001419d:	68 ff 0d 02 c0       	push   0xc0020dff
c00141a2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00141a9:	51                   	push   ecx
c00141aa:	e8 d1 c1 fe ff       	call   c0000380 <memcmp>
c00141af:	83 c4 10             	add    esp,0x10
c00141b2:	85 c0                	test   eax,eax
c00141b4:	75 1d                	jne    c00141d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d2>
c00141b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141ba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00141be:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00141c2:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00141c5:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00141cc:	89 c8                	mov    eax,ecx
c00141ce:	40                   	inc    eax
c00141cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141d3:	50                   	push   eax
c00141d4:	6a 09                	push   0x9
c00141d6:	68 09 0e 02 c0       	push   0xc0020e09
c00141db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00141e2:	50                   	push   eax
c00141e3:	e8 98 c1 fe ff       	call   c0000380 <memcmp>
c00141e8:	83 c4 10             	add    esp,0x10
c00141eb:	85 c0                	test   eax,eax
c00141ed:	75 1d                	jne    c001420c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30b>
c00141ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00141f7:	89 5c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ebx
c00141fb:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00141fe:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014205:	89 c8                	mov    eax,ecx
c0014207:	40                   	inc    eax
c0014208:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001420c:	50                   	push   eax
c001420d:	50                   	push   eax
c001420e:	68 d5 0d 02 c0       	push   0xc0020dd5
c0014213:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001421a:	50                   	push   eax
c001421b:	e8 20 c6 fe ff       	call   c0000840 <strcmp>
c0014220:	83 c4 10             	add    esp,0x10
c0014223:	85 c0                	test   eax,eax
c0014225:	75 0b                	jne    c0014232 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x331>
c0014227:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001422b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001422e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014232:	50                   	push   eax
c0014233:	50                   	push   eax
c0014234:	68 dd 0d 02 c0       	push   0xc0020ddd
c0014239:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014240:	50                   	push   eax
c0014241:	e8 fa c5 fe ff       	call   c0000840 <strcmp>
c0014246:	83 c4 10             	add    esp,0x10
c0014249:	85 c0                	test   eax,eax
c001424b:	75 0b                	jne    c0014258 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x357>
c001424d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014251:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425c:	40                   	inc    eax
c001425d:	0f b7 c0             	movzx  eax,ax
c0014260:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014264:	e9 cd fe ff ff       	jmp    c0014136 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x235>
c0014269:	50                   	push   eax
c001426a:	31 d2                	xor    edx,edx
c001426c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014270:	52                   	push   edx
c0014271:	50                   	push   eax
c0014272:	56                   	push   esi
c0014273:	e8 fc 6e ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014278:	58                   	pop    eax
c0014279:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001427d:	e8 7a 38 ff ff       	call   c0007afc <malloc>
c0014282:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014284:	31 d2                	xor    edx,edx
c0014286:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001428a:	58                   	pop    eax
c001428b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001428f:	53                   	push   ebx
c0014290:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014294:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014298:	52                   	push   edx
c0014299:	50                   	push   eax
c001429a:	56                   	push   esi
c001429b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001429e:	83 c4 14             	add    esp,0x14
c00142a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00142a5:	e8 52 38 ff ff       	call   c0007afc <malloc>
c00142aa:	31 d2                	xor    edx,edx
c00142ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00142b0:	83 c4 0c             	add    esp,0xc
c00142b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142b7:	52                   	push   edx
c00142b8:	50                   	push   eax
c00142b9:	56                   	push   esi
c00142ba:	e8 b5 6e ff ff       	call   c000b174 <File::seek(unsigned long long)>
c00142bf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00142c1:	31 d2                	xor    edx,edx
c00142c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142c6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00142ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00142ce:	52                   	push   edx
c00142cf:	50                   	push   eax
c00142d0:	56                   	push   esi
c00142d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142d4:	83 c4 20             	add    esp,0x20
c00142d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00142df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142e3:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00142e7:	0f 84 21 03 00 00    	je     c001460e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x70d>
c00142ed:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00142f4:	31 d2                	xor    edx,edx
c00142f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00142fa:	c1 e8 03             	shr    eax,0x3
c00142fd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014301:	51                   	push   ecx
c0014302:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014306:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001430a:	52                   	push   edx
c001430b:	50                   	push   eax
c001430c:	56                   	push   esi
c001430d:	e8 62 6e ff ff       	call   c000b174 <File::seek(unsigned long long)>
c0014312:	5b                   	pop    ebx
c0014313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014317:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001431e:	e8 d9 37 ff ff       	call   c0007afc <malloc>
c0014323:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014325:	31 d2                	xor    edx,edx
c0014327:	5f                   	pop    edi
c0014328:	89 c3                	mov    ebx,eax
c001432a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001432e:	50                   	push   eax
c001432f:	53                   	push   ebx
c0014330:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014334:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001433b:	52                   	push   edx
c001433c:	50                   	push   eax
c001433d:	56                   	push   esi
c001433e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014341:	83 c4 20             	add    esp,0x20
c0014344:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001434c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0014350:	39 4c 24 1c          	cmp    DWORD PTR [esp+0x1c],ecx
c0014354:	0f 8d 9b 02 00 00    	jge    c00145f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001435a:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c001435f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014363:	8b 04 c3             	mov    eax,DWORD PTR [ebx+eax*8]
c0014366:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001436a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001436e:	8b 44 c3 04          	mov    eax,DWORD PTR [ebx+eax*8+0x4]
c0014372:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014376:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001437a:	88 44 24 37          	mov    BYTE PTR [esp+0x37],al
c001437e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014382:	c1 e8 08             	shr    eax,0x8
c0014385:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014389:	89 c7                	mov    edi,eax
c001438b:	c1 e7 04             	shl    edi,0x4
c001438e:	03 7c 24 30          	add    edi,DWORD PTR [esp+0x30]
c0014392:	8b 4f 04             	mov    ecx,DWORD PTR [edi+0x4]
c0014395:	85 c9                	test   ecx,ecx
c0014397:	0f 85 bf 00 00 00    	jne    c001445c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c001439d:	83 ec 0c             	sub    esp,0xc
c00143a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143a4:	03 07                	add    eax,DWORD PTR [edi]
c00143a6:	50                   	push   eax
c00143a7:	e8 45 f8 ff ff       	call   c0013bf1 <Thr::getAddressOfKernelSymbol(char const*)>
c00143ac:	83 c4 10             	add    esp,0x10
c00143af:	c6 44 24 20 01       	mov    BYTE PTR [esp+0x20],0x1
c00143b4:	85 c0                	test   eax,eax
c00143b6:	89 c1                	mov    ecx,eax
c00143b8:	0f 85 9e 00 00 00    	jne    c001445c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00143be:	83 ec 0c             	sub    esp,0xc
c00143c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00143c5:	03 07                	add    eax,DWORD PTR [edi]
c00143c7:	50                   	push   eax
c00143c8:	e8 47 c6 ff ff       	call   c0010a14 <KeResolveCompatibilitySymbol(char*)>
c00143cd:	83 c4 10             	add    esp,0x10
c00143d0:	85 c0                	test   eax,eax
c00143d2:	89 c1                	mov    ecx,eax
c00143d4:	0f 85 82 00 00 00    	jne    c001445c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x55b>
c00143da:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00143de:	50                   	push   eax
c00143df:	50                   	push   eax
c00143e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143e4:	03 07                	add    eax,DWORD PTR [edi]
c00143e6:	50                   	push   eax
c00143e7:	68 13 0e 02 c0       	push   0xc0020e13
c00143ec:	e8 85 66 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00143f1:	58                   	pop    eax
c00143f2:	5a                   	pop    edx
c00143f3:	68 2d 0e 02 c0       	push   0xc0020e2d
c00143f8:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c00143ff:	52                   	push   edx
c0014400:	e8 1b c3 fe ff       	call   c0000720 <strcpy>
c0014405:	59                   	pop    ecx
c0014406:	58                   	pop    eax
c0014407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001440b:	03 07                	add    eax,DWORD PTR [edi]
c001440d:	50                   	push   eax
c001440e:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014415:	52                   	push   edx
c0014416:	e8 15 c5 fe ff       	call   c0000930 <strcat>
c001441b:	58                   	pop    eax
c001441c:	5a                   	pop    edx
c001441d:	68 c3 0e 02 c0       	push   0xc0020ec3
c0014422:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014429:	52                   	push   edx
c001442a:	e8 01 c5 fe ff       	call   c0000930 <strcat>
c001442f:	83 c4 10             	add    esp,0x10
c0014432:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014437:	0f 84 75 01 00 00    	je     c00145b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c001443d:	83 ec 0c             	sub    esp,0xc
c0014440:	8d 94 24 5c 02 00 00 	lea    edx,[esp+0x25c]
c0014447:	52                   	push   edx
c0014448:	e8 d8 c3 ff ff       	call   c0010825 <KePanic(char const*)>
c001444d:	83 c4 10             	add    esp,0x10
c0014450:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c0014454:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0014458:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001445c:	80 7c 24 37 01       	cmp    BYTE PTR [esp+0x37],0x1
c0014461:	0f 85 90 00 00 00    	jne    c00144f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f6>
c0014467:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001446b:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014472:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c0014476:	01 f8                	add    eax,edi
c0014478:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014480:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014484:	8b 00                	mov    eax,DWORD PTR [eax]
c0014486:	0f 94 c2             	sete   dl
c0014489:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014491:	0f 94 44 24 10       	sete   BYTE PTR [esp+0x10]
c0014496:	0a 54 24 10          	or     dl,BYTE PTR [esp+0x10]
c001449a:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c001449f:	74 39                	je     c00144da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d9>
c00144a1:	8d 3c 08             	lea    edi,[eax+ecx*1]
c00144a4:	84 d2                	test   dl,dl
c00144a6:	75 15                	jne    c00144bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5bc>
c00144a8:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00144ac:	66 83 f8 0c          	cmp    ax,0xc
c00144b0:	76 05                	jbe    c00144b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00144b2:	b8 0c 00 00 00       	mov    eax,0xc
c00144b7:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144bb:	76 2f                	jbe    c00144ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00144bd:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c00144c2:	0f 84 ea 00 00 00    	je     c00145b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c00144c8:	83 ec 0c             	sub    esp,0xc
c00144cb:	68 44 0e 02 c0       	push   0xc0020e44
c00144d0:	e8 50 c3 ff ff       	call   c0010825 <KePanic(char const*)>
c00144d5:	83 c4 10             	add    esp,0x10
c00144d8:	eb 12                	jmp    c00144ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00144da:	01 c7                	add    edi,eax
c00144dc:	84 d2                	test   dl,dl
c00144de:	75 0c                	jne    c00144ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00144e0:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00144e4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00144e8:	77 02                	ja     c00144ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5eb>
c00144ea:	01 cf                	add    edi,ecx
c00144ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00144f0:	89 38                	mov    DWORD PTR [eax],edi
c00144f2:	e9 f5 00 00 00       	jmp    c00145ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00144f7:	80 7c 24 37 02       	cmp    BYTE PTR [esp+0x37],0x2
c00144fc:	0f 85 82 00 00 00    	jne    c0014584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x683>
c0014502:	8b bc 24 74 03 00 00 	mov    edi,DWORD PTR [esp+0x374]
c0014509:	2b 7c 24 24          	sub    edi,DWORD PTR [esp+0x24]
c001450d:	03 7c 24 28          	add    edi,DWORD PTR [esp+0x28]
c0014511:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014519:	74 21                	je     c001453c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c001451b:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014523:	74 17                	je     c001453c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63b>
c0014525:	0f b7 55 30          	movzx  edx,WORD PTR [ebp+0x30]
c0014529:	b8 0a 00 00 00       	mov    eax,0xa
c001452e:	83 fa 0e             	cmp    edx,0xe
c0014531:	77 03                	ja     c0014536 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x635>
c0014533:	8d 42 fc             	lea    eax,[edx-0x4]
c0014536:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001453a:	76 1f                	jbe    c001455b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65a>
c001453c:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c0014541:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0014545:	74 6b                	je     c00145b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c0014547:	83 ec 0c             	sub    esp,0xc
c001454a:	68 60 0e 02 c0       	push   0xc0020e60
c001454f:	e8 d1 c2 ff ff       	call   c0010825 <KePanic(char const*)>
c0014554:	83 c4 10             	add    esp,0x10
c0014557:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001455b:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
c0014560:	8b 07                	mov    eax,DWORD PTR [edi]
c0014562:	74 16                	je     c001457a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x679>
c0014564:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014568:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001456f:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014573:	01 c2                	add    edx,eax
c0014575:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0014578:	eb 06                	jmp    c0014580 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c001457a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001457e:	01 c8                	add    eax,ecx
c0014580:	89 07                	mov    DWORD PTR [edi],eax
c0014582:	eb 68                	jmp    c00145ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014584:	57                   	push   edi
c0014585:	57                   	push   edi
c0014586:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001458b:	50                   	push   eax
c001458c:	68 7c 0e 02 c0       	push   0xc0020e7c
c0014591:	e8 e0 64 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014596:	83 c4 10             	add    esp,0x10
c0014599:	80 7c 24 36 00       	cmp    BYTE PTR [esp+0x36],0x0
c001459e:	74 12                	je     c00145b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b1>
c00145a0:	83 ec 0c             	sub    esp,0xc
c00145a3:	68 87 0e 02 c0       	push   0xc0020e87
c00145a8:	e8 78 c2 ff ff       	call   c0010825 <KePanic(char const*)>
c00145ad:	83 c4 10             	add    esp,0x10
c00145b0:	eb 3a                	jmp    c00145ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00145b2:	83 ec 0c             	sub    esp,0xc
c00145b5:	56                   	push   esi
c00145b6:	e8 59 6b ff ff       	call   c000b114 <File::close()>
c00145bb:	8b 06                	mov    eax,DWORD PTR [esi]
c00145bd:	89 34 24             	mov    DWORD PTR [esp],esi
c00145c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145c6:	e8 44 35 ff ff       	call   c0007b0f <free>
c00145cb:	59                   	pop    ecx
c00145cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00145d0:	e8 3a 35 ff ff       	call   c0007b0f <free>
c00145d5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00145d8:	e8 32 35 ff ff       	call   c0007b0f <free>
c00145dd:	5b                   	pop    ebx
c00145de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145e2:	e8 28 35 ff ff       	call   c0007b0f <free>
c00145e7:	83 c4 10             	add    esp,0x10
c00145ea:	eb 1e                	jmp    c001460a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x709>
c00145ec:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00145f0:	e9 57 fd ff ff       	jmp    c001434c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44b>
c00145f5:	83 ec 0c             	sub    esp,0xc
c00145f8:	53                   	push   ebx
c00145f9:	e8 11 35 ff ff       	call   c0007b0f <free>
c00145fe:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014602:	83 c4 10             	add    esp,0x10
c0014605:	e9 d5 fc ff ff       	jmp    c00142df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3de>
c001460a:	31 c0                	xor    eax,eax
c001460c:	eb 32                	jmp    c0014640 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001460e:	83 ec 0c             	sub    esp,0xc
c0014611:	56                   	push   esi
c0014612:	e8 fd 6a ff ff       	call   c000b114 <File::close()>
c0014617:	8b 06                	mov    eax,DWORD PTR [esi]
c0014619:	89 34 24             	mov    DWORD PTR [esp],esi
c001461c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001461f:	58                   	pop    eax
c0014620:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014624:	e8 e6 34 ff ff       	call   c0007b0f <free>
c0014629:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001462c:	e8 de 34 ff ff       	call   c0007b0f <free>
c0014631:	5a                   	pop    edx
c0014632:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014636:	e8 d4 34 ff ff       	call   c0007b0f <free>
c001463b:	83 c4 10             	add    esp,0x10
c001463e:	b0 01                	mov    al,0x1
c0014640:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014646:	5b                   	pop    ebx
c0014647:	5e                   	pop    esi
c0014648:	5f                   	pop    edi
c0014649:	5d                   	pop    ebp
c001464a:	c3                   	ret    

c001464b <Thr::getDriverBaseFromAddress(unsigned long)>:
c001464b:	56                   	push   esi
c001464c:	31 d2                	xor    edx,edx
c001464e:	53                   	push   ebx
c001464f:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014655:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014659:	39 d3                	cmp    ebx,edx
c001465b:	7e 1b                	jle    c0014678 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001465d:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c0014664:	39 c8                	cmp    eax,ecx
c0014666:	77 0d                	ja     c0014675 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014668:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c001466f:	01 c6                	add    esi,eax
c0014671:	39 ce                	cmp    esi,ecx
c0014673:	77 05                	ja     c001467a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014675:	42                   	inc    edx
c0014676:	eb e1                	jmp    c0014659 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014678:	31 c0                	xor    eax,eax
c001467a:	5b                   	pop    ebx
c001467b:	5e                   	pop    esi
c001467c:	c3                   	ret    

c001467d <Thr::getDriverNameFromAddress(unsigned long)>:
c001467d:	53                   	push   ebx
c001467e:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014684:	31 c0                	xor    eax,eax
c0014686:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001468a:	39 c3                	cmp    ebx,eax
c001468c:	7e 22                	jle    c00146b0 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001468e:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c0014695:	39 ca                	cmp    edx,ecx
c0014697:	77 14                	ja     c00146ad <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014699:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c00146a0:	39 ca                	cmp    edx,ecx
c00146a2:	76 09                	jbe    c00146ad <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00146a4:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c00146ab:	eb 05                	jmp    c00146b2 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00146ad:	40                   	inc    eax
c00146ae:	eb da                	jmp    c001468a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00146b0:	31 c0                	xor    eax,eax
c00146b2:	5b                   	pop    ebx
c00146b3:	c3                   	ret    

c00146b4 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00146b4:	53                   	push   ebx
c00146b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00146b9:	53                   	push   ebx
c00146ba:	e8 8c ff ff ff       	call   c001464b <Thr::getDriverBaseFromAddress(unsigned long)>
c00146bf:	5a                   	pop    edx
c00146c0:	31 d2                	xor    edx,edx
c00146c2:	85 c0                	test   eax,eax
c00146c4:	74 04                	je     c00146ca <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00146c6:	89 da                	mov    edx,ebx
c00146c8:	29 c2                	sub    edx,eax
c00146ca:	5b                   	pop    ebx
c00146cb:	89 d0                	mov    eax,edx
c00146cd:	c3                   	ret    

c00146ce <Thr::loadDLL(char const*, bool)>:
c00146ce:	55                   	push   ebp
c00146cf:	57                   	push   edi
c00146d0:	56                   	push   esi
c00146d1:	53                   	push   ebx
c00146d2:	81 ec 34 01 00 00    	sub    esp,0x134
c00146d8:	8b bc 24 48 01 00 00 	mov    edi,DWORD PTR [esp+0x148]
c00146df:	8a 9c 24 4c 01 00 00 	mov    bl,BYTE PTR [esp+0x14c]
c00146e6:	57                   	push   edi
c00146e7:	68 9f 0e 02 c0       	push   0xc0020e9f
c00146ec:	e8 85 63 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00146f1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00146f8:	e8 ff 33 ff ff       	call   c0007afc <malloc>
c00146fd:	83 c4 0c             	add    esp,0xc
c0014700:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0014706:	57                   	push   edi
c0014707:	50                   	push   eax
c0014708:	89 c6                	mov    esi,eax
c001470a:	e8 e9 68 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001470f:	83 c4 10             	add    esp,0x10
c0014712:	85 f6                	test   esi,esi
c0014714:	75 3a                	jne    c0014750 <Thr::loadDLL(char const*, bool)+0x82>
c0014716:	84 db                	test   bl,bl
c0014718:	0f 84 df 01 00 00    	je     c00148fd <Thr::loadDLL(char const*, bool)+0x22f>
c001471e:	50                   	push   eax
c001471f:	50                   	push   eax
c0014720:	68 b0 0e 02 c0       	push   0xc0020eb0
c0014725:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014729:	55                   	push   ebp
c001472a:	e8 f1 bf fe ff       	call   c0000720 <strcpy>
c001472f:	58                   	pop    eax
c0014730:	5a                   	pop    edx
c0014731:	57                   	push   edi
c0014732:	55                   	push   ebp
c0014733:	e8 f8 c1 fe ff       	call   c0000930 <strcat>
c0014738:	59                   	pop    ecx
c0014739:	58                   	pop    eax
c001473a:	68 c3 0e 02 c0       	push   0xc0020ec3
c001473f:	55                   	push   ebp
c0014740:	e8 eb c1 fe ff       	call   c0000930 <strcat>
c0014745:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014748:	e8 d8 c0 ff ff       	call   c0010825 <KePanic(char const*)>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	50                   	push   eax
c0014751:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014755:	50                   	push   eax
c0014756:	8d 44 24 20          	lea    eax,[esp+0x20]
c001475a:	50                   	push   eax
c001475b:	56                   	push   esi
c001475c:	e8 fb 6b ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0014761:	83 c4 10             	add    esp,0x10
c0014764:	85 f6                	test   esi,esi
c0014766:	74 0c                	je     c0014774 <Thr::loadDLL(char const*, bool)+0xa6>
c0014768:	8b 06                	mov    eax,DWORD PTR [esi]
c001476a:	83 ec 0c             	sub    esp,0xc
c001476d:	56                   	push   esi
c001476e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014771:	83 c4 10             	add    esp,0x10
c0014774:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014779:	75 0a                	jne    c0014785 <Thr::loadDLL(char const*, bool)+0xb7>
c001477b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001477f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014783:	75 3c                	jne    c00147c1 <Thr::loadDLL(char const*, bool)+0xf3>
c0014785:	31 f6                	xor    esi,esi
c0014787:	84 db                	test   bl,bl
c0014789:	0f 84 6e 01 00 00    	je     c00148fd <Thr::loadDLL(char const*, bool)+0x22f>
c001478f:	50                   	push   eax
c0014790:	50                   	push   eax
c0014791:	68 b0 0e 02 c0       	push   0xc0020eb0
c0014796:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001479a:	56                   	push   esi
c001479b:	e8 80 bf fe ff       	call   c0000720 <strcpy>
c00147a0:	58                   	pop    eax
c00147a1:	5a                   	pop    edx
c00147a2:	57                   	push   edi
c00147a3:	56                   	push   esi
c00147a4:	e8 87 c1 fe ff       	call   c0000930 <strcat>
c00147a9:	59                   	pop    ecx
c00147aa:	5d                   	pop    ebp
c00147ab:	68 c3 0e 02 c0       	push   0xc0020ec3
c00147b0:	56                   	push   esi
c00147b1:	e8 7a c1 fe ff       	call   c0000930 <strcat>
c00147b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00147b9:	e8 67 c0 ff ff       	call   c0010825 <KePanic(char const*)>
c00147be:	83 c4 10             	add    esp,0x10
c00147c1:	56                   	push   esi
c00147c2:	6a 03                	push   0x3
c00147c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147cc:	05 ff 0f 00 00       	add    eax,0xfff
c00147d1:	83 d2 00             	adc    edx,0x0
c00147d4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147d8:	50                   	push   eax
c00147d9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00147df:	e8 92 56 ff ff       	call   c0009e76 <VAS::allocatePages(int, int)>
c00147e4:	89 c6                	mov    esi,eax
c00147e6:	58                   	pop    eax
c00147e7:	5a                   	pop    edx
c00147e8:	56                   	push   esi
c00147e9:	68 32 fa 01 c0       	push   0xc001fa32
c00147ee:	e8 83 62 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00147f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147f6:	e8 25 be fe ff       	call   c0000620 <strlen>
c00147fb:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c0014801:	40                   	inc    eax
c0014802:	89 04 24             	mov    DWORD PTR [esp],eax
c0014805:	e8 f2 32 ff ff       	call   c0007afc <malloc>
c001480a:	59                   	pop    ecx
c001480b:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c0014812:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014817:	5d                   	pop    ebp
c0014818:	57                   	push   edi
c0014819:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c0014820:	e8 fb be fe ff       	call   c0000720 <strcpy>
c0014825:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c001482a:	89 34 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],esi
c0014831:	8d 50 01             	lea    edx,[eax+0x1]
c0014834:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c001483a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001483e:	83 c4 0c             	add    esp,0xc
c0014841:	6a 01                	push   0x1
c0014843:	56                   	push   esi
c0014844:	57                   	push   edi
c0014845:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c001484c:	e8 b0 f6 ff ff       	call   c0013f01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014851:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014855:	83 c4 10             	add    esp,0x10
c0014858:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001485d:	74 2d                	je     c001488c <Thr::loadDLL(char const*, bool)+0x1be>
c001485f:	84 db                	test   bl,bl
c0014861:	74 12                	je     c0014875 <Thr::loadDLL(char const*, bool)+0x1a7>
c0014863:	83 ec 0c             	sub    esp,0xc
c0014866:	68 c5 0e 02 c0       	push   0xc0020ec5
c001486b:	e8 b5 bf ff ff       	call   c0010825 <KePanic(char const*)>
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	eb 07                	jmp    c001487c <Thr::loadDLL(char const*, bool)+0x1ae>
c0014875:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001487a:	75 10                	jne    c001488c <Thr::loadDLL(char const*, bool)+0x1be>
c001487c:	83 ec 0c             	sub    esp,0xc
c001487f:	68 e4 0e 02 c0       	push   0xc0020ee4
c0014884:	e8 9c bf ff ff       	call   c0010825 <KePanic(char const*)>
c0014889:	83 c4 10             	add    esp,0x10
c001488c:	31 ff                	xor    edi,edi
c001488e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014892:	bb 00 00 00 00       	mov    ebx,0x0
c0014897:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001489b:	05 ff 0f 00 00       	add    eax,0xfff
c00148a0:	83 d2 00             	adc    edx,0x0
c00148a3:	0f ac d0 0c          	shrd   eax,edx,0xc
c00148a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00148ab:	c1 ea 0c             	shr    edx,0xc
c00148ae:	89 d8                	mov    eax,ebx
c00148b0:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00148b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00148b8:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00148bc:	73 32                	jae    c00148f0 <Thr::loadDLL(char const*, bool)+0x222>
c00148be:	50                   	push   eax
c00148bf:	50                   	push   eax
c00148c0:	89 f8                	mov    eax,edi
c00148c2:	c1 e0 0c             	shl    eax,0xc
c00148c5:	01 f0                	add    eax,esi
c00148c7:	50                   	push   eax
c00148c8:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00148ce:	e8 47 50 ff ff       	call   c000991a <VAS::getPageTableEntry(unsigned long)>
c00148d3:	83 c4 10             	add    esp,0x10
c00148d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00148d8:	a8 60                	test   al,0x60
c00148da:	75 11                	jne    c00148ed <Thr::loadDLL(char const*, bool)+0x21f>
c00148dc:	83 ec 0c             	sub    esp,0xc
c00148df:	25 00 f0 ff ff       	and    eax,0xfffff000
c00148e4:	50                   	push   eax
c00148e5:	e8 ba 34 ff ff       	call   c0007da4 <Phys::freePage(unsigned long)>
c00148ea:	83 c4 10             	add    esp,0x10
c00148ed:	47                   	inc    edi
c00148ee:	eb 9e                	jmp    c001488e <Thr::loadDLL(char const*, bool)+0x1c0>
c00148f0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00148f5:	b8 00 00 00 00       	mov    eax,0x0
c00148fa:	0f 44 f0             	cmove  esi,eax
c00148fd:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014903:	89 f0                	mov    eax,esi
c0014905:	5b                   	pop    ebx
c0014906:	5e                   	pop    esi
c0014907:	5f                   	pop    edi
c0014908:	5d                   	pop    ebp
c0014909:	c3                   	ret    

c001490a <Thr::executeDLL(unsigned long, void*)>:
c001490a:	56                   	push   esi
c001490b:	53                   	push   ebx
c001490c:	52                   	push   edx
c001490d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014911:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014915:	85 db                	test   ebx,ebx
c0014917:	75 10                	jne    c0014929 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014919:	83 ec 0c             	sub    esp,0xc
c001491c:	68 00 0f 02 c0       	push   0xc0020f00
c0014921:	e8 ff be ff ff       	call   c0010825 <KePanic(char const*)>
c0014926:	83 c4 10             	add    esp,0x10
c0014929:	50                   	push   eax
c001492a:	50                   	push   eax
c001492b:	53                   	push   ebx
c001492c:	68 2a 0f 02 c0       	push   0xc0020f2a
c0014931:	e8 40 61 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014936:	89 d8                	mov    eax,ebx
c0014938:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001493c:	83 c4 14             	add    esp,0x14
c001493f:	5b                   	pop    ebx
c0014940:	5e                   	pop    esi
c0014941:	ff e0                	jmp    eax
c0014943:	66 90                	xchg   ax,ax
c0014945:	66 90                	xchg   ax,ax
c0014947:	66 90                	xchg   ax,ax
c0014949:	66 90                	xchg   ax,ax
c001494b:	66 90                	xchg   ax,ax
c001494d:	66 90                	xchg   ax,ax
c001494f:	90                   	nop

c0014950 <userModeEntryPoint(void*)>:
c0014950:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014955:	48                   	dec    eax
c0014956:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001495b:	75 03                	jne    c0014960 <userModeEntryPoint(void*)+0x10>
c001495d:	fb                   	sti    
c001495e:	66 90                	xchg   ax,ax
c0014960:	fb                   	sti    
c0014961:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014966:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014969:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001496f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014973:	e9 c7 b8 fe ff       	jmp    c000023f <goToUsermode>

c0014978 <changeTSS>:
c0014978:	83 ec 1c             	sub    esp,0x1c
c001497b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014980:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014983:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014988:	c1 e2 15             	shl    edx,0x15
c001498b:	29 d0                	sub    eax,edx
c001498d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014991:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014996:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001499c:	05 7c 11 00 00       	add    eax,0x117c
c00149a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00149a4:	e8 df 45 ff ff       	call   c0008f88 <TSS::setESP(unsigned long)>
c00149a9:	83 c4 1c             	add    esp,0x1c
c00149ac:	c3                   	ret    
c00149ad:	8d 76 00             	lea    esi,[esi+0x0]

c00149b0 <switchToThread(ThreadControlBlock*)>:
c00149b0:	83 ec 1c             	sub    esp,0x1c
c00149b3:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00149b7:	8b 35 64 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028164
c00149bd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00149c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00149c5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00149c9:	85 f6                	test   esi,esi
c00149cb:	0f 85 97 00 00 00    	jne    c0014a68 <switchToThread(ThreadControlBlock*)+0xb8>
c00149d1:	0f b6 43 40          	movzx  eax,BYTE PTR [ebx+0x40]
c00149d5:	3c ff                	cmp    al,0xff
c00149d7:	0f 84 87 00 00 00    	je     c0014a64 <switchToThread(ThreadControlBlock*)+0xb4>
c00149dd:	0f b6 d0             	movzx  edx,al
c00149e0:	b8 00 04 00 00       	mov    eax,0x400
c00149e5:	29 d0                	sub    eax,edx
c00149e7:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00149ea:	d1 f8                	sar    eax,1
c00149ec:	01 d0                	add    eax,edx
c00149ee:	66 90                	xchg   ax,ax
c00149f0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00149f3:	e8 b6 25 00 00       	call   c0016fae <HalQueryPerformanceCounter()>
c00149f8:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00149fd:	89 c6                	mov    esi,eax
c00149ff:	89 d7                	mov    edi,edx
c0014a01:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c0014a07:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c0014a0c:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c0014a12:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c0014a18:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c0014a1e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a24:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c0014a2a:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c0014a30:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014a33:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014a36:	01 c6                	add    esi,eax
c0014a38:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014a3b:	11 d7                	adc    edi,edx
c0014a3d:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014a40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a43:	e8 2f b8 fe ff       	call   c0000277 <switchToThreadASM>
c0014a48:	0f 20 c0             	mov    eax,cr0
c0014a4b:	83 c8 08             	or     eax,0x8
c0014a4e:	0f 22 c0             	mov    cr0,eax
c0014a51:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a55:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a59:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014a5d:	83 c4 1c             	add    esp,0x1c
c0014a60:	c3                   	ret    
c0014a61:	8d 76 00             	lea    esi,[esi+0x0]
c0014a64:	31 c0                	xor    eax,eax
c0014a66:	eb 88                	jmp    c00149f0 <switchToThread(ThreadControlBlock*)+0x40>
c0014a68:	b9 01 00 00 00       	mov    ecx,0x1
c0014a6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a71:	89 0d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ecx
c0014a77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a7b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014a7f:	83 c4 1c             	add    esp,0x1c
c0014a82:	c3                   	ret    
c0014a83:	90                   	nop

c0014a84 <Process::addArgs(char**)>:
c0014a84:	57                   	push   edi
c0014a85:	31 c0                	xor    eax,eax
c0014a87:	56                   	push   esi
c0014a88:	53                   	push   ebx
c0014a89:	83 ec 10             	sub    esp,0x10
c0014a8c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0014a90:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014a94:	85 ff                	test   edi,edi
c0014a96:	89 86 16 05 00 00    	mov    DWORD PTR [esi+0x516],eax
c0014a9c:	74 42                	je     c0014ae0 <Process::addArgs(char**)+0x5c>
c0014a9e:	8b 07                	mov    eax,DWORD PTR [edi]
c0014aa0:	85 c0                	test   eax,eax
c0014aa2:	74 3c                	je     c0014ae0 <Process::addArgs(char**)+0x5c>
c0014aa4:	31 db                	xor    ebx,ebx
c0014aa6:	66 90                	xchg   ax,ax
c0014aa8:	89 04 24             	mov    DWORD PTR [esp],eax
c0014aab:	e8 70 bb fe ff       	call   c0000620 <strlen>
c0014ab0:	40                   	inc    eax
c0014ab1:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ab4:	e8 43 30 ff ff       	call   c0007afc <malloc>
c0014ab9:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014ac0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ac3:	43                   	inc    ebx
c0014ac4:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ac7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014acb:	e8 50 bc fe ff       	call   c0000720 <strcpy>
c0014ad0:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0014ad6:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014ad9:	85 c0                	test   eax,eax
c0014adb:	75 cb                	jne    c0014aa8 <Process::addArgs(char**)+0x24>
c0014add:	8d 76 00             	lea    esi,[esi+0x0]
c0014ae0:	83 c4 10             	add    esp,0x10
c0014ae3:	5b                   	pop    ebx
c0014ae4:	5e                   	pop    esi
c0014ae5:	5f                   	pop    edi
c0014ae6:	c3                   	ret    
c0014ae7:	90                   	nop

c0014ae8 <Process::Process(char const*, Process*, char**)>:
c0014ae8:	56                   	push   esi
c0014ae9:	53                   	push   ebx
c0014aea:	83 ec 24             	sub    esp,0x24
c0014aed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014af1:	05 0c 02 00 00       	add    eax,0x20c
c0014af6:	bb 07 00 00 00       	mov    ebx,0x7
c0014afb:	89 c6                	mov    esi,eax
c0014afd:	8d 76 00             	lea    esi,[esi+0x0]
c0014b00:	85 db                	test   ebx,ebx
c0014b02:	78 10                	js     c0014b14 <Process::Process(char const*, Process*, char**)+0x2c>
c0014b04:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b07:	e8 ec a1 00 00       	call   c001ecf8 <ThreadControlBlock::ThreadControlBlock()>
c0014b0c:	83 c6 5f             	add    esi,0x5f
c0014b0f:	4b                   	dec    ebx
c0014b10:	eb ee                	jmp    c0014b00 <Process::Process(char const*, Process*, char**)+0x18>
c0014b12:	66 90                	xchg   ax,ax
c0014b14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014b1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b23:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014b2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b31:	e8 e4 ba ff ff       	call   c001061a <Krnl::newProcessEnv(Process*)>
c0014b36:	89 c2                	mov    edx,eax
c0014b38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b3c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014b42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b46:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014b4f:	a1 00 21 02 c0       	mov    eax,ds:0xc0022100
c0014b54:	8d 50 01             	lea    edx,[eax+0x1]
c0014b57:	89 15 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,edx
c0014b5d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014b61:	89 02                	mov    DWORD PTR [edx],eax
c0014b63:	c7 44 24 18 14 00 00 00 	mov    DWORD PTR [esp+0x18],0x14
c0014b6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b72:	e8 85 2f ff ff       	call   c0007afc <malloc>
c0014b77:	89 c3                	mov    ebx,eax
c0014b79:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014b81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b84:	e8 ed 56 ff ff       	call   c000a276 <VAS::VAS(bool)>
c0014b89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b8d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014b93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b97:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014ba1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ba5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0014ba9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014baf:	e8 62 c0 ff ff       	call   c0010c16 <KeInitSignals()>
c0014bb4:	89 c2                	mov    edx,eax
c0014bb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bba:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014bc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bc4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014bca:	85 c0                	test   eax,eax
c0014bcc:	74 42                	je     c0014c10 <Process::Process(char const*, Process*, char**)+0x128>
c0014bce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bd2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014bd8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014be2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014be8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bec:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014bf2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014bf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bfc:	05 0c 01 00 00       	add    eax,0x10c
c0014c01:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014c05:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c08:	e8 13 bb fe ff       	call   c0000720 <strcpy>
c0014c0d:	eb 5d                	jmp    c0014c6c <Process::Process(char const*, Process*, char**)+0x184>
c0014c0f:	90                   	nop
c0014c10:	c7 44 24 14 84 01 00 00 	mov    DWORD PTR [esp+0x14],0x184
c0014c18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c1f:	e8 d8 2e ff ff       	call   c0007afc <malloc>
c0014c24:	89 c3                	mov    ebx,eax
c0014c26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c31:	e8 48 40 ff ff       	call   c0008c7e <VgaText::VgaText(char const*)>
c0014c36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c3a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014c40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c4d:	e8 d6 38 ff ff       	call   c0008528 <addToTerminalCycle(VgaText*)>
c0014c52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c56:	05 0c 01 00 00       	add    eax,0x10c
c0014c5b:	c7 44 24 04 49 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f49
c0014c63:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c66:	e8 b5 ba fe ff       	call   c0000720 <strcpy>
c0014c6b:	90                   	nop
c0014c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c70:	8d 50 0c             	lea    edx,[eax+0xc]
c0014c73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c7b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014c7e:	e8 9d ba fe ff       	call   c0000720 <strcpy>
c0014c83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0014c87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c92:	e8 ed fd ff ff       	call   c0014a84 <Process::addArgs(char**)>
c0014c97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ca3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ca6:	e8 10 ed ff ff       	call   c00139bb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014cab:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014caf:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014cb4:	34 01                	xor    al,0x1
c0014cb6:	88 c2                	mov    dl,al
c0014cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cbc:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014cc2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0014cc7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ccb:	c7 04 24 a0 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fa0
c0014cd2:	e8 9f 5d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0014cd7:	90                   	nop
c0014cd8:	83 c4 24             	add    esp,0x24
c0014cdb:	5b                   	pop    ebx
c0014cdc:	5e                   	pop    esi
c0014cdd:	c3                   	ret    
c0014cde:	66 90                	xchg   ax,ax

c0014ce0 <Process::Process(bool, char const*, Process*, char**)>:
c0014ce0:	56                   	push   esi
c0014ce1:	53                   	push   ebx
c0014ce2:	83 ec 34             	sub    esp,0x34
c0014ce5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014ce9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014ced:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014cf1:	05 0c 02 00 00       	add    eax,0x20c
c0014cf6:	bb 07 00 00 00       	mov    ebx,0x7
c0014cfb:	89 c6                	mov    esi,eax
c0014cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0014d00:	85 db                	test   ebx,ebx
c0014d02:	78 10                	js     c0014d14 <Process::Process(bool, char const*, Process*, char**)+0x34>
c0014d04:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d07:	e8 ec 9f 00 00       	call   c001ecf8 <ThreadControlBlock::ThreadControlBlock()>
c0014d0c:	83 c6 5f             	add    esi,0x5f
c0014d0f:	4b                   	dec    ebx
c0014d10:	eb ee                	jmp    c0014d00 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014d12:	66 90                	xchg   ax,ax
c0014d14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d18:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014d1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d23:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014d2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d31:	e8 e4 b8 ff ff       	call   c001061a <Krnl::newProcessEnv(Process*)>
c0014d36:	89 c2                	mov    edx,eax
c0014d38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d3c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014d42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d46:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014d4f:	a1 00 21 02 c0       	mov    eax,ds:0xc0022100
c0014d54:	8d 50 01             	lea    edx,[eax+0x1]
c0014d57:	89 15 00 21 02 c0    	mov    DWORD PTR ds:0xc0022100,edx
c0014d5d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014d61:	89 02                	mov    DWORD PTR [edx],eax
c0014d63:	c7 44 24 2c 14 00 00 00 	mov    DWORD PTR [esp+0x2c],0x14
c0014d6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014d6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d72:	e8 85 2d ff ff       	call   c0007afc <malloc>
c0014d77:	89 c3                	mov    ebx,eax
c0014d79:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0014d7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d85:	e8 ec 54 ff ff       	call   c000a276 <VAS::VAS(bool)>
c0014d8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d8e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014d94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014d98:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014da2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014da6:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014daa:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014db0:	e8 61 be ff ff       	call   c0010c16 <KeInitSignals()>
c0014db5:	89 c2                	mov    edx,eax
c0014db7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dbb:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014dc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dc5:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014dcb:	85 c0                	test   eax,eax
c0014dcd:	74 41                	je     c0014e10 <Process::Process(bool, char const*, Process*, char**)+0x130>
c0014dcf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dd3:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014dd9:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ddf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014de3:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014de9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014ded:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014df3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014df9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014dfd:	05 0c 01 00 00       	add    eax,0x10c
c0014e02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014e06:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e09:	e8 12 b9 fe ff       	call   c0000720 <strcpy>
c0014e0e:	eb 5c                	jmp    c0014e6c <Process::Process(bool, char const*, Process*, char**)+0x18c>
c0014e10:	c7 44 24 28 84 01 00 00 	mov    DWORD PTR [esp+0x28],0x184
c0014e18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e1f:	e8 d8 2c ff ff       	call   c0007afc <malloc>
c0014e24:	89 c3                	mov    ebx,eax
c0014e26:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014e2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e31:	e8 48 3e ff ff       	call   c0008c7e <VgaText::VgaText(char const*)>
c0014e36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e3a:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014e40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e4d:	e8 d6 36 ff ff       	call   c0008528 <addToTerminalCycle(VgaText*)>
c0014e52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e56:	05 0c 01 00 00       	add    eax,0x10c
c0014e5b:	c7 44 24 04 49 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020f49
c0014e63:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e66:	e8 b5 b8 fe ff       	call   c0000720 <strcpy>
c0014e6b:	90                   	nop
c0014e6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e70:	8d 50 0c             	lea    edx,[eax+0xc]
c0014e73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014e77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e7b:	89 14 24             	mov    DWORD PTR [esp],edx
c0014e7e:	e8 9d b8 fe ff       	call   c0000720 <strcpy>
c0014e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014e87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014e92:	e8 ed fb ff ff       	call   c0014a84 <Process::addArgs(char**)>
c0014e97:	90                   	nop
c0014e98:	83 c4 34             	add    esp,0x34
c0014e9b:	5b                   	pop    ebx
c0014e9c:	5e                   	pop    esi
c0014e9d:	c3                   	ret    
c0014e9e:	66 90                	xchg   ax,ax

c0014ea0 <taskStartupFunction>:
c0014ea0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ea5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014ea8:	c3                   	ret    
c0014ea9:	90                   	nop
c0014eaa:	66 90                	xchg   ax,ax

c0014eac <Semaphore::Semaphore(int)>:
c0014eac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014eb4:	89 10                	mov    DWORD PTR [eax],edx
c0014eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eba:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014ec1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ec5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ed0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014ed7:	90                   	nop
c0014ed8:	c3                   	ret    
c0014ed9:	90                   	nop
c0014eda:	66 90                	xchg   ax,ax

c0014edc <Mutex::Mutex()>:
c0014edc:	83 ec 08             	sub    esp,0x8
c0014edf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014ee3:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0014eeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0014eee:	e8 b9 ff ff ff       	call   c0014eac <Semaphore::Semaphore(int)>
c0014ef3:	90                   	nop
c0014ef4:	83 c4 08             	add    esp,0x8
c0014ef7:	c3                   	ret    

c0014ef8 <Process::createThread(void (*)(void*), void*, int)>:
c0014ef8:	57                   	push   edi
c0014ef9:	31 c9                	xor    ecx,ecx
c0014efb:	56                   	push   esi
c0014efc:	53                   	push   ebx
c0014efd:	83 ec 10             	sub    esp,0x10
c0014f00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014f04:	0f b7 93 04 05 00 00 	movzx  edx,WORD PTR [ebx+0x504]
c0014f0b:	89 d0                	mov    eax,edx
c0014f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014f10:	a8 01                	test   al,0x1
c0014f12:	74 14                	je     c0014f28 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014f14:	d1 e8                	shr    eax,1
c0014f16:	41                   	inc    ecx
c0014f17:	83 f9 10             	cmp    ecx,0x10
c0014f1a:	75 f4                	jne    c0014f10 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0014f1c:	83 c4 10             	add    esp,0x10
c0014f1f:	31 db                	xor    ebx,ebx
c0014f21:	89 d8                	mov    eax,ebx
c0014f23:	5b                   	pop    ebx
c0014f24:	5e                   	pop    esi
c0014f25:	5f                   	pop    edi
c0014f26:	c3                   	ret    
c0014f27:	90                   	nop
c0014f28:	b8 01 00 00 00       	mov    eax,0x1
c0014f2d:	d3 e0                	shl    eax,cl
c0014f2f:	09 d0                	or     eax,edx
c0014f31:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f38:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014f3b:	c1 e0 05             	shl    eax,0x5
c0014f3e:	29 c8                	sub    eax,ecx
c0014f40:	01 d8                	add    eax,ebx
c0014f42:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014f49:	75 09                	jne    c0014f54 <Process::createThread(void (*)(void*), void*, int)+0x5c>
c0014f4b:	31 f6                	xor    esi,esi
c0014f4d:	89 b0 61 02 00 00    	mov    DWORD PTR [eax+0x261],esi
c0014f53:	90                   	nop
c0014f54:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f5a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014f5d:	c1 e6 05             	shl    esi,0x5
c0014f60:	29 ce                	sub    esi,ecx
c0014f62:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014f65:	8d 04 33             	lea    eax,[ebx+esi*1]
c0014f68:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014f6e:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0014f74:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014f7a:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0014f81:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014f87:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014f8b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014f91:	89 ca                	mov    edx,ecx
c0014f93:	31 c9                	xor    ecx,ecx
c0014f95:	f7 da                	neg    edx
c0014f97:	c1 e2 15             	shl    edx,0x15
c0014f9a:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014fa0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014fa6:	0f b6 54 24 2c       	movzx  edx,BYTE PTR [esp+0x2c]
c0014fab:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014fb1:	31 d2                	xor    edx,edx
c0014fb3:	89 90 24 02 00 00    	mov    DWORD PTR [eax+0x224],edx
c0014fb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014fbd:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014fc3:	31 d2                	xor    edx,edx
c0014fc5:	89 88 1c 02 00 00    	mov    DWORD PTR [eax+0x21c],ecx
c0014fcb:	89 90 20 02 00 00    	mov    DWORD PTR [eax+0x220],edx
c0014fd1:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014fd8:	e8 1f 2b ff ff       	call   c0007afc <malloc>
c0014fdd:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0014fe0:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014fe4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0014feb:	e8 c8 9a 00 00       	call   c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ff0:	83 c4 10             	add    esp,0x10
c0014ff3:	89 d8                	mov    eax,ebx
c0014ff5:	5b                   	pop    ebx
c0014ff6:	5e                   	pop    esi
c0014ff7:	5f                   	pop    edi
c0014ff8:	c3                   	ret    
c0014ff9:	90                   	nop
c0014ffa:	66 90                	xchg   ax,ax

c0014ffc <Process::createUserThread()>:
c0014ffc:	83 ec 1c             	sub    esp,0x1c
c0014fff:	b8 80 00 00 00       	mov    eax,0x80
c0015004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001500c:	31 d2                	xor    edx,edx
c001500e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0015012:	b9 50 49 01 c0       	mov    ecx,0xc0014950
c0015017:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001501b:	89 04 24             	mov    DWORD PTR [esp],eax
c001501e:	e8 d5 fe ff ff       	call   c0014ef8 <Process::createThread(void (*)(void*), void*, int)>
c0015023:	83 c4 1c             	add    esp,0x1c
c0015026:	c3                   	ret    
c0015027:	90                   	nop

c0015028 <setupMultitasking(void (*)())>:
c0015028:	56                   	push   esi
c0015029:	53                   	push   ebx
c001502a:	83 ec 24             	sub    esp,0x24
c001502d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015031:	eb 0d                	jmp    c0015040 <setupMultitasking(void (*)())+0x18>
c0015033:	90                   	nop
c0015034:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001503b:	e8 cc 99 00 00       	call   c001ea0c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015040:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015047:	e8 9c 99 00 00       	call   c001e9e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001504c:	84 c0                	test   al,al
c001504e:	74 e4                	je     c0015034 <setupMultitasking(void (*)())+0xc>
c0015050:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0015057:	e8 a0 2a ff ff       	call   c0007afc <malloc>
c001505c:	31 d2                	xor    edx,edx
c001505e:	b9 4d 0f 02 c0       	mov    ecx,0xc0020f4d
c0015063:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015067:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001506b:	89 c3                	mov    ebx,eax
c001506d:	31 c0                	xor    eax,eax
c001506f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015073:	b8 01 00 00 00       	mov    eax,0x1
c0015078:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001507c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001507f:	e8 5c fc ff ff       	call   c0014ce0 <Process::Process(bool, char const*, Process*, char**)>
c0015084:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001508a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0015090:	89 04 24             	mov    DWORD PTR [esp],eax
c0015093:	e8 e5 36 ff ff       	call   c000877d <setActiveTerminal(VgaText*)>
c0015098:	0f b7 83 04 05 00 00 	movzx  eax,WORD PTR [ebx+0x504]
c001509f:	31 d2                	xor    edx,edx
c00150a1:	b9 80 f0 fa 02       	mov    ecx,0x2faf080
c00150a6:	83 c8 01             	or     eax,0x1
c00150a9:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00150b0:	31 c0                	xor    eax,eax
c00150b2:	89 83 61 02 00 00    	mov    DWORD PTR [ebx+0x261],eax
c00150b8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00150be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00150c1:	89 8b 40 02 00 00    	mov    DWORD PTR [ebx+0x240],ecx
c00150c7:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00150cd:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00150d3:	b8 e0 ff ff 01       	mov    eax,0x1ffffe0
c00150d8:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c00150de:	31 c0                	xor    eax,eax
c00150e0:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c00150e6:	b8 01 00 00 00       	mov    eax,0x1
c00150eb:	89 83 24 02 00 00    	mov    DWORD PTR [ebx+0x224],eax
c00150f1:	31 c0                	xor    eax,eax
c00150f3:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00150f9:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00150ff:	89 83 1c 02 00 00    	mov    DWORD PTR [ebx+0x21c],eax
c0015105:	89 93 20 02 00 00    	mov    DWORD PTR [ebx+0x220],edx
c001510b:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015112:	e8 e5 29 ff ff       	call   c0007afc <malloc>
c0015117:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001511d:	b8 49 0f 02 c0       	mov    eax,0xc0020f49
c0015122:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015128:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001512c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015132:	89 04 24             	mov    DWORD PTR [esp],eax
c0015135:	e8 e6 b5 fe ff       	call   c0000720 <strcpy>
c001513a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015141:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015145:	83 c4 24             	add    esp,0x24
c0015148:	5b                   	pop    ebx
c0015149:	5e                   	pop    esi
c001514a:	e9 1a b1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001514f:	90                   	nop

c0015150 <schedule()>:
c0015150:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015156:	85 d2                	test   edx,edx
c0015158:	74 0e                	je     c0015168 <schedule()+0x18>
c001515a:	b8 01 00 00 00       	mov    eax,0x1
c001515f:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015164:	c3                   	ret    
c0015165:	8d 76 00             	lea    esi,[esi+0x0]
c0015168:	53                   	push   ebx
c0015169:	83 ec 18             	sub    esp,0x18
c001516c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015173:	e8 70 98 00 00       	call   c001e9e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015178:	84 c0                	test   al,al
c001517a:	75 38                	jne    c00151b4 <schedule()+0x64>
c001517c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015181:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015184:	4a                   	dec    edx
c0015185:	74 35                	je     c00151bc <schedule()+0x6c>
c0015187:	90                   	nop
c0015188:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001518f:	e8 70 98 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015194:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001519b:	89 c3                	mov    ebx,eax
c001519d:	e8 6a 98 00 00       	call   c001ea0c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00151a2:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00151a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151ac:	e8 ff f7 ff ff       	call   c00149b0 <switchToThread(ThreadControlBlock*)>
c00151b1:	8d 76 00             	lea    esi,[esi+0x0]
c00151b4:	83 c4 18             	add    esp,0x18
c00151b7:	5b                   	pop    ebx
c00151b8:	c3                   	ret    
c00151b9:	8d 76 00             	lea    esi,[esi+0x0]
c00151bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00151c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151c8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00151cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151d3:	e8 e0 98 00 00       	call   c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00151d8:	eb ae                	jmp    c0015188 <schedule()+0x38>
c00151da:	66 90                	xchg   ax,ax

c00151dc <Semaphore::tryAcquire()>:
c00151dc:	53                   	push   ebx
c00151dd:	83 ec 08             	sub    esp,0x8
c00151e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00151e4:	fa                   	cli    
c00151e5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00151eb:	8d 42 01             	lea    eax,[edx+0x1]
c00151ee:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151f3:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151f8:	8d 58 01             	lea    ebx,[eax+0x1]
c00151fb:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c0015201:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015204:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015206:	7c 2c                	jl     c0015234 <Semaphore::tryAcquire()+0x58>
c0015208:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001520d:	85 c0                	test   eax,eax
c001520f:	75 0b                	jne    c001521c <Semaphore::tryAcquire()+0x40>
c0015211:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c0015217:	85 c9                	test   ecx,ecx
c0015219:	75 55                	jne    c0015270 <Semaphore::tryAcquire()+0x94>
c001521b:	90                   	nop
c001521c:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015222:	31 c0                	xor    eax,eax
c0015224:	85 d2                	test   edx,edx
c0015226:	75 04                	jne    c001522c <Semaphore::tryAcquire()+0x50>
c0015228:	fb                   	sti    
c0015229:	8d 76 00             	lea    esi,[esi+0x0]
c001522c:	83 c4 08             	add    esp,0x8
c001522f:	5b                   	pop    ebx
c0015230:	c3                   	ret    
c0015231:	8d 76 00             	lea    esi,[esi+0x0]
c0015234:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015239:	43                   	inc    ebx
c001523a:	85 c0                	test   eax,eax
c001523c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001523f:	75 1f                	jne    c0015260 <Semaphore::tryAcquire()+0x84>
c0015241:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015246:	85 c0                	test   eax,eax
c0015248:	74 16                	je     c0015260 <Semaphore::tryAcquire()+0x84>
c001524a:	31 db                	xor    ebx,ebx
c001524c:	89 1d 60 81 02 c0    	mov    DWORD PTR ds:0xc0028160,ebx
c0015252:	e8 f9 fe ff ff       	call   c0015150 <schedule()>
c0015257:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001525c:	8d 50 ff             	lea    edx,[eax-0x1]
c001525f:	90                   	nop
c0015260:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015266:	85 d2                	test   edx,edx
c0015268:	b0 01                	mov    al,0x1
c001526a:	75 c0                	jne    c001522c <Semaphore::tryAcquire()+0x50>
c001526c:	eb ba                	jmp    c0015228 <Semaphore::tryAcquire()+0x4c>
c001526e:	66 90                	xchg   ax,ax
c0015270:	31 c0                	xor    eax,eax
c0015272:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015277:	e8 d4 fe ff ff       	call   c0015150 <schedule()>
c001527c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015281:	8d 50 ff             	lea    edx,[eax-0x1]
c0015284:	31 c0                	xor    eax,eax
c0015286:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001528c:	85 d2                	test   edx,edx
c001528e:	75 9c                	jne    c001522c <Semaphore::tryAcquire()+0x50>
c0015290:	eb 96                	jmp    c0015228 <Semaphore::tryAcquire()+0x4c>
c0015292:	66 90                	xchg   ax,ax

c0015294 <Semaphore::assertLocked(char const*)>:
c0015294:	83 ec 1c             	sub    esp,0x1c
c0015297:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001529b:	fa                   	cli    
c001529c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152a1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00152a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00152aa:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152b0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00152b2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00152b5:	7c 29                	jl     c00152e0 <Semaphore::assertLocked(char const*)+0x4c>
c00152b7:	90                   	nop
c00152b8:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00152bd:	85 c0                	test   eax,eax
c00152bf:	75 0b                	jne    c00152cc <Semaphore::assertLocked(char const*)+0x38>
c00152c1:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00152c7:	85 d2                	test   edx,edx
c00152c9:	75 29                	jne    c00152f4 <Semaphore::assertLocked(char const*)+0x60>
c00152cb:	90                   	nop
c00152cc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00152d1:	48                   	dec    eax
c00152d2:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00152d7:	75 03                	jne    c00152dc <Semaphore::assertLocked(char const*)+0x48>
c00152d9:	fb                   	sti    
c00152da:	66 90                	xchg   ax,ax
c00152dc:	83 c4 1c             	add    esp,0x1c
c00152df:	c3                   	ret    
c00152e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00152e7:	e8 39 b5 ff ff       	call   c0010825 <KePanic(char const*)>
c00152ec:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00152f1:	48                   	dec    eax
c00152f2:	eb c4                	jmp    c00152b8 <Semaphore::assertLocked(char const*)+0x24>
c00152f4:	31 c0                	xor    eax,eax
c00152f6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00152fb:	e8 50 fe ff ff       	call   c0015150 <schedule()>
c0015300:	eb ca                	jmp    c00152cc <Semaphore::assertLocked(char const*)+0x38>
c0015302:	66 90                	xchg   ax,ax

c0015304 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015304:	83 ec 0c             	sub    esp,0xc
c0015307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001530c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015310:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015313:	e8 38 fe ff ff       	call   c0015150 <schedule()>
c0015318:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001531d:	48                   	dec    eax
c001531e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015323:	75 03                	jne    c0015328 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015325:	fb                   	sti    
c0015326:	66 90                	xchg   ax,ax
c0015328:	83 c4 0c             	add    esp,0xc
c001532b:	c3                   	ret    

c001532c <blockTask(TaskState)>:
c001532c:	83 ec 0c             	sub    esp,0xc
c001532f:	fa                   	cli    
c0015330:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015336:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001533a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001533f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015342:	e8 09 fe ff ff       	call   c0015150 <schedule()>
c0015347:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001534c:	48                   	dec    eax
c001534d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015352:	75 04                	jne    c0015358 <blockTask(TaskState)+0x2c>
c0015354:	fb                   	sti    
c0015355:	8d 76 00             	lea    esi,[esi+0x0]
c0015358:	83 c4 0c             	add    esp,0xc
c001535b:	c3                   	ret    

c001535c <waitTask(int, int*, int)>:
c001535c:	83 ec 1c             	sub    esp,0x1c
c001535f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015364:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015368:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001536b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001536f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015374:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015377:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001537e:	e8 a9 ff ff ff       	call   c001532c <blockTask(TaskState)>
c0015383:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015388:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c001538b:	85 d2                	test   edx,edx
c001538d:	74 0d                	je     c001539c <waitTask(int, int*, int)+0x40>
c001538f:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015392:	89 02                	mov    DWORD PTR [edx],eax
c0015394:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015399:	8d 76 00             	lea    esi,[esi+0x0]
c001539c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001539f:	83 c4 1c             	add    esp,0x1c
c00153a2:	c3                   	ret    
c00153a3:	90                   	nop

c00153a4 <milliTenthSleepUntil(unsigned int)>:
c00153a4:	83 ec 1c             	sub    esp,0x1c
c00153a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153ab:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00153b1:	76 05                	jbe    c00153b8 <milliTenthSleepUntil(unsigned int)+0x14>
c00153b3:	90                   	nop
c00153b4:	83 c4 1c             	add    esp,0x1c
c00153b7:	c3                   	ret    
c00153b8:	fa                   	cli    
c00153b9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00153bf:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c00153c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00153cb:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00153ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d3:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c00153da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153de:	e8 d5 96 00 00       	call   c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00153e3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00153ea:	e8 3d ff ff ff       	call   c001532c <blockTask(TaskState)>
c00153ef:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00153f4:	48                   	dec    eax
c00153f5:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153fa:	75 0c                	jne    c0015408 <milliTenthSleepUntil(unsigned int)+0x64>
c00153fc:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015402:	85 d2                	test   edx,edx
c0015404:	75 16                	jne    c001541c <milliTenthSleepUntil(unsigned int)+0x78>
c0015406:	66 90                	xchg   ax,ax
c0015408:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001540d:	48                   	dec    eax
c001540e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015413:	75 9f                	jne    c00153b4 <milliTenthSleepUntil(unsigned int)+0x10>
c0015415:	fb                   	sti    
c0015416:	83 c4 1c             	add    esp,0x1c
c0015419:	c3                   	ret    
c001541a:	66 90                	xchg   ax,ax
c001541c:	31 c0                	xor    eax,eax
c001541e:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015423:	e8 28 fd ff ff       	call   c0015150 <schedule()>
c0015428:	eb de                	jmp    c0015408 <milliTenthSleepUntil(unsigned int)+0x64>
c001542a:	66 90                	xchg   ax,ax

c001542c <milliTenthSleep(unsigned int)>:
c001542c:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015431:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0015435:	e9 6a ff ff ff       	jmp    c00153a4 <milliTenthSleepUntil(unsigned int)>
c001543a:	66 90                	xchg   ax,ax

c001543c <sleep(unsigned int)>:
c001543c:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015444:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015448:	eb e2                	jmp    c001542c <milliTenthSleep(unsigned int)>
c001544a:	66 90                	xchg   ax,ax

c001544c <Semaphore::acquire()>:
c001544c:	83 ec 1c             	sub    esp,0x1c
c001544f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015453:	fa                   	cli    
c0015454:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015459:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001545f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015462:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015468:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001546b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001546d:	7d 2d                	jge    c001549c <Semaphore::acquire()+0x50>
c001546f:	41                   	inc    ecx
c0015470:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015473:	90                   	nop
c0015474:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015479:	85 c0                	test   eax,eax
c001547b:	75 0b                	jne    c0015488 <Semaphore::acquire()+0x3c>
c001547d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015483:	85 d2                	test   edx,edx
c0015485:	75 5d                	jne    c00154e4 <Semaphore::acquire()+0x98>
c0015487:	90                   	nop
c0015488:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001548d:	48                   	dec    eax
c001548e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015493:	75 03                	jne    c0015498 <Semaphore::acquire()+0x4c>
c0015495:	fb                   	sti    
c0015496:	66 90                	xchg   ax,ax
c0015498:	83 c4 1c             	add    esp,0x1c
c001549b:	c3                   	ret    
c001549c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00154a8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00154ab:	85 c9                	test   ecx,ecx
c00154ad:	74 45                	je     c00154f4 <Semaphore::acquire()+0xa8>
c00154af:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00154b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00154b8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00154bb:	90                   	nop
c00154bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00154c4:	c7 04 24 c8 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fc8
c00154cb:	e8 a6 55 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00154d0:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00154d7:	e8 50 fe ff ff       	call   c001532c <blockTask(TaskState)>
c00154dc:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00154e1:	48                   	dec    eax
c00154e2:	eb 90                	jmp    c0015474 <Semaphore::acquire()+0x28>
c00154e4:	31 c0                	xor    eax,eax
c00154e6:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00154eb:	e8 60 fc ff ff       	call   c0015150 <schedule()>
c00154f0:	eb 96                	jmp    c0015488 <Semaphore::acquire()+0x3c>
c00154f2:	66 90                	xchg   ax,ax
c00154f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00154fc:	eb be                	jmp    c00154bc <Semaphore::acquire()+0x70>
c00154fe:	66 90                	xchg   ax,ax

c0015500 <taskReturned>:
c0015500:	83 ec 1c             	sub    esp,0x1c
c0015503:	c7 04 24 e8 0f 02 c0 	mov    DWORD PTR [esp],0xc0020fe8
c001550a:	e8 16 b3 ff ff       	call   c0010825 <KePanic(char const*)>
c001550f:	90                   	nop
c0015510:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0015517:	e8 10 fe ff ff       	call   c001532c <blockTask(TaskState)>
c001551c:	fa                   	cli    
c001551d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015523:	e8 28 fc ff ff       	call   c0015150 <schedule()>
c0015528:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001552d:	48                   	dec    eax
c001552e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015533:	75 db                	jne    c0015510 <taskReturned+0x10>
c0015535:	fb                   	sti    
c0015536:	eb d8                	jmp    c0015510 <taskReturned+0x10>

c0015538 <Thr::processFromPID(int)>:
c0015538:	57                   	push   edi
c0015539:	56                   	push   esi
c001553a:	53                   	push   ebx
c001553b:	83 ec 10             	sub    esp,0x10
c001553e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015542:	fa                   	cli    
c0015543:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001554a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015550:	e8 af 94 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015555:	89 c7                	mov    edi,eax
c0015557:	eb 13                	jmp    c001556c <Thr::processFromPID(int)+0x34>
c0015559:	8d 76 00             	lea    esi,[esi+0x0]
c001555c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015563:	e8 9c 94 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015568:	39 f8                	cmp    eax,edi
c001556a:	74 50                	je     c00155bc <Thr::processFromPID(int)+0x84>
c001556c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015573:	e8 8c 94 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015578:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001557f:	89 c3                	mov    ebx,eax
c0015581:	e8 86 94 00 00       	call   c001ea0c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015586:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001558a:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015591:	e8 22 95 00 00       	call   c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015596:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015599:	39 30                	cmp    DWORD PTR [eax],esi
c001559b:	75 bf                	jne    c001555c <Thr::processFromPID(int)+0x24>
c001559d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155a2:	48                   	dec    eax
c00155a3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155a8:	74 0e                	je     c00155b8 <Thr::processFromPID(int)+0x80>
c00155aa:	66 90                	xchg   ax,ax
c00155ac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155af:	90                   	nop
c00155b0:	83 c4 10             	add    esp,0x10
c00155b3:	5b                   	pop    ebx
c00155b4:	5e                   	pop    esi
c00155b5:	5f                   	pop    edi
c00155b6:	c3                   	ret    
c00155b7:	90                   	nop
c00155b8:	fb                   	sti    
c00155b9:	eb f1                	jmp    c00155ac <Thr::processFromPID(int)+0x74>
c00155bb:	90                   	nop
c00155bc:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00155c1:	8d 50 ff             	lea    edx,[eax-0x1]
c00155c4:	31 c0                	xor    eax,eax
c00155c6:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00155cc:	85 d2                	test   edx,edx
c00155ce:	75 e0                	jne    c00155b0 <Thr::processFromPID(int)+0x78>
c00155d0:	fb                   	sti    
c00155d1:	83 c4 10             	add    esp,0x10
c00155d4:	5b                   	pop    ebx
c00155d5:	5e                   	pop    esi
c00155d6:	5f                   	pop    edi
c00155d7:	c3                   	ret    

c00155d8 <unblockTask(ThreadControlBlock*)>:
c00155d8:	53                   	push   ebx
c00155d9:	83 ec 18             	sub    esp,0x18
c00155dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00155e0:	fa                   	cli    
c00155e1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00155e4:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00155ea:	85 c0                	test   eax,eax
c00155ec:	74 5a                	je     c0015648 <unblockTask(ThreadControlBlock*)+0x70>
c00155ee:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00155f1:	48                   	dec    eax
c00155f2:	74 30                	je     c0015624 <unblockTask(ThreadControlBlock*)+0x4c>
c00155f4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00155fb:	e8 04 94 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015600:	85 c0                	test   eax,eax
c0015602:	75 18                	jne    c001561c <unblockTask(ThreadControlBlock*)+0x44>
c0015604:	eb 52                	jmp    c0015658 <unblockTask(ThreadControlBlock*)+0x80>
c0015606:	66 90                	xchg   ax,ax
c0015608:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001560c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015613:	e8 d4 96 00 00       	call   c001ecec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015618:	85 c0                	test   eax,eax
c001561a:	74 3c                	je     c0015658 <unblockTask(ThreadControlBlock*)+0x80>
c001561c:	39 c3                	cmp    ebx,eax
c001561e:	75 e8                	jne    c0015608 <unblockTask(ThreadControlBlock*)+0x30>
c0015620:	eb 0e                	jmp    c0015630 <unblockTask(ThreadControlBlock*)+0x58>
c0015622:	66 90                	xchg   ax,ax
c0015624:	c7 04 24 6b 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f6b
c001562b:	e8 46 54 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015630:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015635:	48                   	dec    eax
c0015636:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001563b:	75 03                	jne    c0015640 <unblockTask(ThreadControlBlock*)+0x68>
c001563d:	fb                   	sti    
c001563e:	66 90                	xchg   ax,ax
c0015640:	83 c4 18             	add    esp,0x18
c0015643:	5b                   	pop    ebx
c0015644:	c3                   	ret    
c0015645:	8d 76 00             	lea    esi,[esi+0x0]
c0015648:	c7 04 24 54 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f54
c001564f:	e8 22 54 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015654:	eb da                	jmp    c0015630 <unblockTask(ThreadControlBlock*)+0x58>
c0015656:	66 90                	xchg   ax,ax
c0015658:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001565c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015663:	e8 50 94 00 00       	call   c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015668:	eb c6                	jmp    c0015630 <unblockTask(ThreadControlBlock*)+0x58>
c001566a:	66 90                	xchg   ax,ax

c001566c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001566c:	55                   	push   ebp
c001566d:	57                   	push   edi
c001566e:	56                   	push   esi
c001566f:	53                   	push   ebx
c0015670:	83 ec 2c             	sub    esp,0x2c
c0015673:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015677:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001567a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0015680:	85 ff                	test   edi,edi
c0015682:	7e 20                	jle    c00156a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0015684:	31 f6                	xor    esi,esi
c0015686:	66 90                	xchg   ax,ax
c0015688:	8b 84 b0 1a 05 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x51a]
c001568f:	46                   	inc    esi
c0015690:	89 04 24             	mov    DWORD PTR [esp],eax
c0015693:	e8 77 24 ff ff       	call   c0007b0f <free>
c0015698:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001569b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00156a1:	7f e5                	jg     c0015688 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00156a3:	90                   	nop
c00156a4:	31 f6                	xor    esi,esi
c00156a6:	89 b0 16 05 00 00    	mov    DWORD PTR [eax+0x516],esi
c00156ac:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00156b1:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00156b4:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00156b7:	d3 c0                	rol    eax,cl
c00156b9:	0f b7 8a 04 05 00 00 	movzx  ecx,WORD PTR [edx+0x504]
c00156c0:	21 c8                	and    eax,ecx
c00156c2:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00156c9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00156cc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00156d4:	89 f7                	mov    edi,esi
c00156d6:	0f 85 68 01 00 00    	jne    c0015844 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c00156dc:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00156e2:	85 ed                	test   ebp,ebp
c00156e4:	74 1e                	je     c0015704 <cleanupTerminatedTask(ThreadControlBlock*)+0x98>
c00156e6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156e9:	e8 4c ae ff ff       	call   c001053a <EnvVarContainer::~EnvVarContainer()>
c00156ee:	b9 0c 00 00 00       	mov    ecx,0xc
c00156f3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00156f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156fa:	e8 5d 52 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c00156ff:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015702:	89 f7                	mov    edi,esi
c0015704:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001570a:	85 c0                	test   eax,eax
c001570c:	0f 84 ae 00 00 00    	je     c00157c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0015712:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015715:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015719:	31 c9                	xor    ecx,ecx
c001571b:	eb 17                	jmp    c0015734 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001571d:	8d 76 00             	lea    esi,[esi+0x0]
c0015720:	41                   	inc    ecx
c0015721:	83 f9 10             	cmp    ecx,0x10
c0015724:	0f 84 96 00 00 00    	je     c00157c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001572a:	66 90                	xchg   ax,ax
c001572c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015732:	66 90                	xchg   ax,ax
c0015734:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001573b:	d3 fa                	sar    edx,cl
c001573d:	f6 c2 01             	test   dl,0x1
c0015740:	74 de                	je     c0015720 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015742:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015745:	c1 e2 05             	shl    edx,0x5
c0015748:	29 ca                	sub    edx,ecx
c001574a:	01 d0                	add    eax,edx
c001574c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015752:	83 fd 07             	cmp    ebp,0x7
c0015755:	75 c9                	jne    c0015720 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015757:	05 40 02 00 00       	add    eax,0x240
c001575c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001575f:	83 fd ff             	cmp    ebp,0xffffffff
c0015762:	0f 8c e4 00 00 00    	jl     c001584c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0015768:	0f 84 9a 01 00 00    	je     c0015908 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001576e:	85 ed                	test   ebp,ebp
c0015770:	0f 84 72 01 00 00    	je     c00158e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x27c>
c0015776:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015778:	75 a6                	jne    c0015720 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001577a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001577e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015784:	01 d0                	add    eax,edx
c0015786:	66 90                	xchg   ax,ax
c0015788:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001578c:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015792:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015795:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001579b:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00157a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00157a5:	e8 2e fe ff ff       	call   c00155d8 <unblockTask(ThreadControlBlock*)>
c00157aa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00157ae:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157b1:	41                   	inc    ecx
c00157b2:	83 f9 10             	cmp    ecx,0x10
c00157b5:	89 f7                	mov    edi,esi
c00157b7:	0f 85 6f ff ff ff    	jne    c001572c <cleanupTerminatedTask(ThreadControlBlock*)+0xc0>
c00157bd:	8d 76 00             	lea    esi,[esi+0x0]
c00157c0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00157c6:	85 c0                	test   eax,eax
c00157c8:	74 56                	je     c0015820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00157ca:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00157d0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00157d6:	74 48                	je     c0015820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00157d8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157df:	e8 20 92 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157e4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00157eb:	89 c7                	mov    edi,eax
c00157ed:	e8 f6 91 00 00       	call   c001e9e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157f2:	84 c0                	test   al,al
c00157f4:	0f 84 be 00 00 00    	je     c00158b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c00157fa:	66 90                	xchg   ax,ax
c00157fc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157ff:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015805:	85 d2                	test   edx,edx
c0015807:	74 0b                	je     c0015814 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0015809:	8b 02                	mov    eax,DWORD PTR [edx]
c001580b:	89 14 24             	mov    DWORD PTR [esp],edx
c001580e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015811:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015814:	31 d2                	xor    edx,edx
c0015816:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001581c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001581f:	90                   	nop
c0015820:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015826:	85 db                	test   ebx,ebx
c0015828:	74 1a                	je     c0015844 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d8>
c001582a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001582d:	e8 a6 43 ff ff       	call   c0009bd8 <VAS::~VAS()>
c0015832:	b8 14 00 00 00       	mov    eax,0x14
c0015837:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001583b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001583e:	e8 19 51 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c0015843:	90                   	nop
c0015844:	83 c4 2c             	add    esp,0x2c
c0015847:	5b                   	pop    ebx
c0015848:	5e                   	pop    esi
c0015849:	5f                   	pop    edi
c001584a:	5d                   	pop    ebp
c001584b:	c3                   	ret    
c001584c:	c7 04 24 1c 10 02 c0 	mov    DWORD PTR [esp],0xc002101c
c0015853:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0015857:	e8 c9 af ff ff       	call   c0010825 <KePanic(char const*)>
c001585c:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001585f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015863:	89 f7                	mov    edi,esi
c0015865:	e9 b6 fe ff ff       	jmp    c0015720 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c001586a:	66 90                	xchg   ax,ax
c001586c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015872:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015878:	75 1a                	jne    c0015894 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c001587a:	c7 04 24 84 10 02 c0 	mov    DWORD PTR [esp],0xc0021084
c0015881:	e8 f0 51 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015886:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001588d:	e8 9a fa ff ff       	call   c001532c <blockTask(TaskState)>
c0015892:	66 90                	xchg   ax,ax
c0015894:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015898:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001589f:	e8 14 92 00 00       	call   c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00158a4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158ab:	e8 54 91 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158b0:	39 f8                	cmp    eax,edi
c00158b2:	0f 84 44 ff ff ff    	je     c00157fc <cleanupTerminatedTask(ThreadControlBlock*)+0x190>
c00158b8:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158bf:	e8 40 91 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158c4:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00158cb:	89 c6                	mov    esi,eax
c00158cd:	e8 3a 91 00 00       	call   c001ea0c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00158d2:	39 f3                	cmp    ebx,esi
c00158d4:	74 be                	je     c0015894 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00158d6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00158d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00158dc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00158e2:	75 b0                	jne    c0015894 <cleanupTerminatedTask(ThreadControlBlock*)+0x228>
c00158e4:	eb 86                	jmp    c001586c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00158e6:	66 90                	xchg   ax,ax
c00158e8:	c7 04 24 50 10 02 c0 	mov    DWORD PTR [esp],0xc0021050
c00158ef:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00158f3:	e8 2d af ff ff       	call   c0010825 <KePanic(char const*)>
c00158f8:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00158ff:	89 f7                	mov    edi,esi
c0015901:	e9 1a fe ff ff       	jmp    c0015720 <cleanupTerminatedTask(ThreadControlBlock*)+0xb4>
c0015906:	66 90                	xchg   ax,ax
c0015908:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001590c:	8b 36                	mov    esi,DWORD PTR [esi]
c001590e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015911:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015914:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001591a:	01 d7                	add    edi,edx
c001591c:	89 f8                	mov    eax,edi
c001591e:	e9 65 fe ff ff       	jmp    c0015788 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0015923:	90                   	nop

c0015924 <cleanerTaskFunction(void*)>:
c0015924:	53                   	push   ebx
c0015925:	83 ec 18             	sub    esp,0x18
c0015928:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001592d:	48                   	dec    eax
c001592e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015933:	75 03                	jne    c0015938 <cleanerTaskFunction(void*)+0x14>
c0015935:	fb                   	sti    
c0015936:	66 90                	xchg   ax,ax
c0015938:	fa                   	cli    
c0015939:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001593e:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c0015945:	8d 50 01             	lea    edx,[eax+0x1]
c0015948:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c001594e:	0f 84 a0 00 00 00    	je     c00159f4 <cleanerTaskFunction(void*)+0xd0>
c0015954:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015959:	85 c0                	test   eax,eax
c001595b:	75 03                	jne    c0015960 <cleanerTaskFunction(void*)+0x3c>
c001595d:	fb                   	sti    
c001595e:	66 90                	xchg   ax,ax
c0015960:	31 c9                	xor    ecx,ecx
c0015962:	88 0d 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,cl
c0015968:	fa                   	cli    
c0015969:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001596f:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015975:	fa                   	cli    
c0015976:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001597c:	eb 26                	jmp    c00159a4 <cleanerTaskFunction(void*)+0x80>
c001597e:	66 90                	xchg   ax,ax
c0015980:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015987:	e8 78 90 00 00       	call   c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001598c:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015993:	89 c3                	mov    ebx,eax
c0015995:	e8 72 90 00 00       	call   c001ea0c <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001599a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001599d:	e8 ca fc ff ff       	call   c001566c <cleanupTerminatedTask(ThreadControlBlock*)>
c00159a2:	66 90                	xchg   ax,ax
c00159a4:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c00159ab:	e8 38 90 00 00       	call   c001e9e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159b0:	84 c0                	test   al,al
c00159b2:	74 cc                	je     c0015980 <cleanerTaskFunction(void*)+0x5c>
c00159b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159b9:	48                   	dec    eax
c00159ba:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159bf:	75 03                	jne    c00159c4 <cleanerTaskFunction(void*)+0xa0>
c00159c1:	fb                   	sti    
c00159c2:	66 90                	xchg   ax,ax
c00159c4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00159c9:	48                   	dec    eax
c00159ca:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00159cf:	0f 85 53 ff ff ff    	jne    c0015928 <cleanerTaskFunction(void*)+0x4>
c00159d5:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00159db:	85 d2                	test   edx,edx
c00159dd:	0f 84 45 ff ff ff    	je     c0015928 <cleanerTaskFunction(void*)+0x4>
c00159e3:	31 c0                	xor    eax,eax
c00159e5:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c00159ea:	e8 61 f7 ff ff       	call   c0015150 <schedule()>
c00159ef:	e9 34 ff ff ff       	jmp    c0015928 <cleanerTaskFunction(void*)+0x4>
c00159f4:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c00159fb:	e8 04 f9 ff ff       	call   c0015304 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015a00:	e9 5b ff ff ff       	jmp    c0015960 <cleanerTaskFunction(void*)+0x3c>
c0015a05:	8d 76 00             	lea    esi,[esi+0x0]

c0015a08 <terminateTask(int)>:
c0015a08:	83 ec 1c             	sub    esp,0x1c
c0015a0b:	fa                   	cli    
c0015a0c:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015a12:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0015a18:	fa                   	cli    
c0015a19:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015a1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a28:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015a2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a30:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015a33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a37:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015a3e:	e8 75 90 00 00       	call   c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a48:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a4f:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a54:	85 c0                	test   eax,eax
c0015a56:	74 58                	je     c0015ab0 <terminateTask(int)+0xa8>
c0015a58:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a5b:	b2 01                	mov    dl,0x1
c0015a5d:	88 15 4c 81 02 c0    	mov    BYTE PTR ds:0xc002814c,dl
c0015a63:	e8 70 fb ff ff       	call   c00155d8 <unblockTask(ThreadControlBlock*)>
c0015a68:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a6d:	48                   	dec    eax
c0015a6e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a73:	75 03                	jne    c0015a78 <terminateTask(int)+0x70>
c0015a75:	fb                   	sti    
c0015a76:	66 90                	xchg   ax,ax
c0015a78:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a7d:	48                   	dec    eax
c0015a7e:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a83:	75 0b                	jne    c0015a90 <terminateTask(int)+0x88>
c0015a85:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a8c:	75 32                	jne    c0015ac0 <terminateTask(int)+0xb8>
c0015a8e:	66 90                	xchg   ax,ax
c0015a90:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a95:	48                   	dec    eax
c0015a96:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a9b:	75 03                	jne    c0015aa0 <terminateTask(int)+0x98>
c0015a9d:	fb                   	sti    
c0015a9e:	66 90                	xchg   ax,ax
c0015aa0:	fa                   	cli    
c0015aa1:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015aa7:	90                   	nop
c0015aa8:	e8 a3 f6 ff ff       	call   c0015150 <schedule()>
c0015aad:	eb e1                	jmp    c0015a90 <terminateTask(int)+0x88>
c0015aaf:	90                   	nop
c0015ab0:	c7 04 24 82 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f82
c0015ab7:	e8 ba 4f ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0015abc:	eb aa                	jmp    c0015a68 <terminateTask(int)+0x60>
c0015abe:	66 90                	xchg   ax,ax
c0015ac0:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015aca:	eb dc                	jmp    c0015aa8 <terminateTask(int)+0xa0>

c0015acc <Thr::terminateFromIRQ(int)>:
c0015acc:	83 ec 1c             	sub    esp,0x1c
c0015acf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ad6:	e8 2d ff ff ff       	call   c0015a08 <terminateTask(int)>
c0015adb:	90                   	nop

c0015adc <Semaphore::release()>:
c0015adc:	83 ec 1c             	sub    esp,0x1c
c0015adf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ae3:	fa                   	cli    
c0015ae4:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ae9:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015aef:	8d 48 01             	lea    ecx,[eax+0x1]
c0015af2:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015af8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015afb:	85 c9                	test   ecx,ecx
c0015afd:	74 3d                	je     c0015b3c <Semaphore::release()+0x60>
c0015aff:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015b02:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b05:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0015b08:	e8 cb fa ff ff       	call   c00155d8 <unblockTask(ThreadControlBlock*)>
c0015b0d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015b12:	48                   	dec    eax
c0015b13:	90                   	nop
c0015b14:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015b19:	85 c0                	test   eax,eax
c0015b1b:	75 0b                	jne    c0015b28 <Semaphore::release()+0x4c>
c0015b1d:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c0015b23:	85 d2                	test   edx,edx
c0015b25:	75 1d                	jne    c0015b44 <Semaphore::release()+0x68>
c0015b27:	90                   	nop
c0015b28:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b2d:	48                   	dec    eax
c0015b2e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b33:	75 03                	jne    c0015b38 <Semaphore::release()+0x5c>
c0015b35:	fb                   	sti    
c0015b36:	66 90                	xchg   ax,ax
c0015b38:	83 c4 1c             	add    esp,0x1c
c0015b3b:	c3                   	ret    
c0015b3c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0015b3f:	eb d3                	jmp    c0015b14 <Semaphore::release()+0x38>
c0015b41:	8d 76 00             	lea    esi,[esi+0x0]
c0015b44:	31 c0                	xor    eax,eax
c0015b46:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c0015b4b:	e8 00 f6 ff ff       	call   c0015150 <schedule()>
c0015b50:	eb d6                	jmp    c0015b28 <Semaphore::release()+0x4c>
c0015b52:	66 90                	xchg   ax,ax

c0015b54 <__static_initialization_and_destruction_0(int, int)>:
c0015b54:	83 ec 1c             	sub    esp,0x1c
c0015b57:	83 7c 24 20 01       	cmp    DWORD PTR [esp+0x20],0x1
c0015b5c:	0f 85 82 00 00 00    	jne    c0015be4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015b62:	81 7c 24 24 ff ff 00 00 	cmp    DWORD PTR [esp+0x24],0xffff
c0015b6a:	75 78                	jne    c0015be4 <__static_initialization_and_destruction_0(int, int)+0x90>
c0015b6c:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015b73:	e8 cc 91 00 00       	call   c001ed44 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b78:	c7 44 24 08 18 1c 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021c18
c0015b80:	c7 44 24 04 84 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028184
c0015b88:	c7 04 24 f4 ec 01 c0 	mov    DWORD PTR [esp],0xc001ecf4
c0015b8f:	e8 78 4d ff ff       	call   c000a90c <__cxa_atexit>
c0015b94:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c0015b9b:	e8 a4 91 00 00       	call   c001ed44 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ba0:	c7 44 24 08 18 1c 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021c18
c0015ba8:	c7 44 24 04 78 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028178
c0015bb0:	c7 04 24 f4 ec 01 c0 	mov    DWORD PTR [esp],0xc001ecf4
c0015bb7:	e8 50 4d ff ff       	call   c000a90c <__cxa_atexit>
c0015bbc:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015bc3:	e8 7c 91 00 00       	call   c001ed44 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bc8:	c7 44 24 08 18 1c 02 c0 	mov    DWORD PTR [esp+0x8],0xc0021c18
c0015bd0:	c7 44 24 04 6c 81 02 c0 	mov    DWORD PTR [esp+0x4],0xc002816c
c0015bd8:	c7 04 24 f4 ec 01 c0 	mov    DWORD PTR [esp],0xc001ecf4
c0015bdf:	e8 28 4d ff ff       	call   c000a90c <__cxa_atexit>
c0015be4:	90                   	nop
c0015be5:	83 c4 1c             	add    esp,0x1c
c0015be8:	c3                   	ret    
c0015be9:	8d 76 00             	lea    esi,[esi+0x0]

c0015bec <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015bec:	83 ec 1c             	sub    esp,0x1c
c0015bef:	c7 44 24 04 ff ff 00 00 	mov    DWORD PTR [esp+0x4],0xffff
c0015bf7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0015bfe:	e8 51 ff ff ff       	call   c0015b54 <__static_initialization_and_destruction_0(int, int)>
c0015c03:	83 c4 1c             	add    esp,0x1c
c0015c06:	c3                   	ret    

c0015c07 <Vm::inbv(unsigned short)>:
c0015c07:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015c0c:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015c12:	75 06                	jne    c0015c1a <Vm::inbv(unsigned short)+0x13>
c0015c14:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c19:	c3                   	ret    
c0015c1a:	ec                   	in     al,dx
c0015c1b:	c3                   	ret    

c0015c1c <Vm::outbv(unsigned short, unsigned char)>:
c0015c1c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0015c21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c25:	81 fa fe fe 00 00    	cmp    edx,0xfefe
c0015c2b:	75 25                	jne    c0015c52 <Vm::outbv(unsigned short, unsigned char)+0x36>
c0015c2d:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c33:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c39:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c3c:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c42:	83 fa 20             	cmp    edx,0x20
c0015c45:	75 0c                	jne    c0015c53 <Vm::outbv(unsigned short, unsigned char)+0x37>
c0015c47:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c51:	c3                   	ret    
c0015c52:	ee                   	out    dx,al
c0015c53:	c3                   	ret    

c0015c54 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c5e:	c1 e0 04             	shl    eax,0x4
c0015c61:	01 d0                	add    eax,edx
c0015c63:	c3                   	ret    

c0015c64 <Vm::getSegment(unsigned int)>:
c0015c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c68:	c1 e8 10             	shr    eax,0x10
c0015c6b:	c3                   	ret    

c0015c6c <Vm::getOffset(unsigned int)>:
c0015c6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c70:	c3                   	ret    

c0015c71 <Vm::mainloop2()>:
c0015c71:	83 ec 18             	sub    esp,0x18
c0015c74:	fa                   	cli    
c0015c75:	6a 02                	push   0x2
c0015c77:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c7d:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c84:	e8 7b f6 ff ff       	call   c0015304 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c8e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c92:	52                   	push   edx
c0015c93:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c97:	52                   	push   edx
c0015c98:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c9c:	52                   	push   edx
c0015c9d:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015ca1:	50                   	push   eax
c0015ca2:	e8 68 a5 fe ff       	call   c000020f <goToVM86>
c0015ca7:	83 c4 2c             	add    esp,0x2c
c0015caa:	c3                   	ret    

c0015cab <Vm::mainVm8086Loop(void*)>:
c0015cab:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015cb0:	48                   	dec    eax
c0015cb1:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015cb6:	75 01                	jne    c0015cb9 <Vm::mainVm8086Loop(void*)+0xe>
c0015cb8:	fb                   	sti    
c0015cb9:	eb b6                	jmp    c0015c71 <Vm::mainloop2()>

c0015cbb <Vm::mainloop3(unsigned long)>:
c0015cbb:	83 ec 18             	sub    esp,0x18
c0015cbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cc2:	fa                   	cli    
c0015cc3:	6a 02                	push   0x2
c0015cc5:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015ccb:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cd2:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cd7:	e8 28 f6 ff ff       	call   c0015304 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cdc:	83 c4 1c             	add    esp,0x1c
c0015cdf:	eb 90                	jmp    c0015c71 <Vm::mainloop2()>

c0015ce1 <Vm::initialise8086()>:
c0015ce1:	83 ec 0c             	sub    esp,0xc
c0015ce4:	68 80 00 00 00       	push   0x80
c0015ce9:	6a 00                	push   0x0
c0015ceb:	68 ab 5c 01 c0       	push   0xc0015cab
c0015cf0:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015cf6:	e8 fd f1 ff ff       	call   c0014ef8 <Process::createThread(void (*)(void*), void*, int)>
c0015cfb:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015d02:	68 00 01 00 00       	push   0x100
c0015d07:	6a 00                	push   0x0
c0015d09:	6a 00                	push   0x0
c0015d0b:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015d10:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015d15:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d1b:	e8 62 43 ff ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d20:	83 c4 2c             	add    esp,0x2c
c0015d23:	c3                   	ret    

c0015d24 <Vm::finish8086()>:
c0015d24:	53                   	push   ebx
c0015d25:	83 ec 08             	sub    esp,0x8
c0015d28:	fa                   	cli    
c0015d29:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d2f:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d36:	75 15                	jne    c0015d4d <Vm::finish8086()+0x29>
c0015d38:	e8 13 f4 ff ff       	call   c0015150 <schedule()>
c0015d3d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d42:	48                   	dec    eax
c0015d43:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d48:	75 de                	jne    c0015d28 <Vm::finish8086()+0x4>
c0015d4a:	fb                   	sti    
c0015d4b:	eb db                	jmp    c0015d28 <Vm::finish8086()+0x4>
c0015d4d:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d54:	83 ec 0c             	sub    esp,0xc
c0015d57:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d5d:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d63:	e8 70 f8 ff ff       	call   c00155d8 <unblockTask(ThreadControlBlock*)>
c0015d68:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d73:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d79:	85 d2                	test   edx,edx
c0015d7b:	75 01                	jne    c0015d7e <Vm::finish8086()+0x5a>
c0015d7d:	fb                   	sti    
c0015d7e:	83 c4 08             	add    esp,0x8
c0015d81:	89 d8                	mov    eax,ebx
c0015d83:	5b                   	pop    ebx
c0015d84:	c3                   	ret    

c0015d85 <Vm::getOutput8086(unsigned char*)>:
c0015d85:	57                   	push   edi
c0015d86:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d8c:	56                   	push   esi
c0015d8d:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d92:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d98:	5e                   	pop    esi
c0015d99:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d9e:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015da8:	5f                   	pop    edi
c0015da9:	c3                   	ret    

c0015daa <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015daa:	55                   	push   ebp
c0015dab:	57                   	push   edi
c0015dac:	56                   	push   esi
c0015dad:	53                   	push   ebx
c0015dae:	83 ec 0c             	sub    esp,0xc
c0015db1:	0f b7 7c 24 28       	movzx  edi,WORD PTR [esp+0x28]
c0015db6:	0f b7 74 24 2c       	movzx  esi,WORD PTR [esp+0x2c]
c0015dbb:	0f b7 6c 24 30       	movzx  ebp,WORD PTR [esp+0x30]
c0015dc0:	0f b7 5c 24 34       	movzx  ebx,WORD PTR [esp+0x34]
c0015dc5:	fa                   	cli    
c0015dc6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015dcc:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015dd3:	75 15                	jne    c0015dea <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x40>
c0015dd5:	e8 76 f3 ff ff       	call   c0015150 <schedule()>
c0015dda:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ddf:	48                   	dec    eax
c0015de0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015de5:	75 de                	jne    c0015dc5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015de7:	fb                   	sti    
c0015de8:	eb db                	jmp    c0015dc5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015dea:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015df4:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015df9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015dfd:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015e01:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015e05:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015e09:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015e0d:	50                   	push   eax
c0015e0e:	6a 20                	push   0x20
c0015e10:	6a 00                	push   0x0
c0015e12:	68 e0 81 02 c0       	push   0xc00281e0
c0015e17:	e8 64 a7 fe ff       	call   c0000580 <memset>
c0015e1c:	5a                   	pop    edx
c0015e1d:	59                   	pop    ecx
c0015e1e:	57                   	push   edi
c0015e1f:	56                   	push   esi
c0015e20:	e8 2f fe ff ff       	call   c0015c54 <Vm::realToLinear(unsigned short, unsigned short)>
c0015e25:	83 c4 10             	add    esp,0x10
c0015e28:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e2c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e30:	89 c7                	mov    edi,eax
c0015e32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e34:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e3b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e40:	48                   	dec    eax
c0015e41:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e46:	75 01                	jne    c0015e49 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x9f>
c0015e48:	fb                   	sti    
c0015e49:	83 ec 0c             	sub    esp,0xc
c0015e4c:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e52:	e8 81 f7 ff ff       	call   c00155d8 <unblockTask(ThreadControlBlock*)>
c0015e57:	83 c4 1c             	add    esp,0x1c
c0015e5a:	b0 01                	mov    al,0x1
c0015e5c:	5b                   	pop    ebx
c0015e5d:	5e                   	pop    esi
c0015e5e:	5f                   	pop    edi
c0015e5f:	5d                   	pop    ebp
c0015e60:	c3                   	ret    

c0015e61 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e61:	55                   	push   ebp
c0015e62:	57                   	push   edi
c0015e63:	56                   	push   esi
c0015e64:	53                   	push   ebx
c0015e65:	83 ec 2c             	sub    esp,0x2c
c0015e68:	0f b7 7c 24 44       	movzx  edi,WORD PTR [esp+0x44]
c0015e6d:	0f b7 74 24 48       	movzx  esi,WORD PTR [esp+0x48]
c0015e72:	0f b7 6c 24 4c       	movzx  ebp,WORD PTR [esp+0x4c]
c0015e77:	0f b7 5c 24 50       	movzx  ebx,WORD PTR [esp+0x50]
c0015e7c:	fa                   	cli    
c0015e7d:	a0 c5 81 02 c0       	mov    al,ds:0xc00281c5
c0015e82:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e88:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015e8c:	84 c0                	test   al,al
c0015e8e:	75 15                	jne    c0015ea5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x44>
c0015e90:	e8 bb f2 ff ff       	call   c0015150 <schedule()>
c0015e95:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e9a:	48                   	dec    eax
c0015e9b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ea0:	75 da                	jne    c0015e7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015ea2:	fb                   	sti    
c0015ea3:	eb d7                	jmp    c0015e7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1b>
c0015ea5:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015eaf:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015eb4:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015eb8:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015ebc:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015ec0:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015ec4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015ec8:	50                   	push   eax
c0015ec9:	6a 20                	push   0x20
c0015ecb:	6a 00                	push   0x0
c0015ecd:	68 e0 81 02 c0       	push   0xc00281e0
c0015ed2:	e8 a9 a6 fe ff       	call   c0000580 <memset>
c0015ed7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ede:	e8 19 1c ff ff       	call   c0007afc <malloc>
c0015ee3:	83 c4 0c             	add    esp,0xc
c0015ee6:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015eec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ef0:	89 c3                	mov    ebx,eax
c0015ef2:	50                   	push   eax
c0015ef3:	e8 00 51 ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c0015ef8:	83 c4 10             	add    esp,0x10
c0015efb:	85 db                	test   ebx,ebx
c0015efd:	75 0a                	jne    c0015f09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa8>
c0015eff:	83 ec 0c             	sub    esp,0xc
c0015f02:	68 ac 10 02 c0       	push   0xc00210ac
c0015f07:	eb 3e                	jmp    c0015f47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015f09:	55                   	push   ebp
c0015f0a:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f0e:	50                   	push   eax
c0015f0f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f13:	50                   	push   eax
c0015f14:	53                   	push   ebx
c0015f15:	e8 42 54 ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015f22:	74 0a                	je     c0015f2e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xcd>
c0015f24:	83 ec 0c             	sub    esp,0xc
c0015f27:	68 c0 10 02 c0       	push   0xc00210c0
c0015f2c:	eb 19                	jmp    c0015f47 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe6>
c0015f2e:	51                   	push   ecx
c0015f2f:	51                   	push   ecx
c0015f30:	6a 01                	push   0x1
c0015f32:	53                   	push   ebx
c0015f33:	e8 7e 51 ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0015f38:	83 c4 10             	add    esp,0x10
c0015f3b:	85 c0                	test   eax,eax
c0015f3d:	74 27                	je     c0015f66 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x105>
c0015f3f:	83 ec 0c             	sub    esp,0xc
c0015f42:	68 d9 10 02 c0       	push   0xc00210d9
c0015f47:	e8 d9 a8 ff ff       	call   c0010825 <KePanic(char const*)>
c0015f4c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f51:	83 c4 10             	add    esp,0x10
c0015f54:	48                   	dec    eax
c0015f55:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f5a:	85 c0                	test   eax,eax
c0015f5c:	75 01                	jne    c0015f5f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfe>
c0015f5e:	fb                   	sti    
c0015f5f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015f64:	eb 52                	jmp    c0015fb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x157>
c0015f66:	50                   	push   eax
c0015f67:	50                   	push   eax
c0015f68:	57                   	push   edi
c0015f69:	56                   	push   esi
c0015f6a:	e8 e5 fc ff ff       	call   c0015c54 <Vm::realToLinear(unsigned short, unsigned short)>
c0015f6f:	5a                   	pop    edx
c0015f70:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f72:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015f76:	51                   	push   ecx
c0015f77:	50                   	push   eax
c0015f78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f80:	53                   	push   ebx
c0015f81:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f84:	83 c4 14             	add    esp,0x14
c0015f87:	53                   	push   ebx
c0015f88:	e8 87 51 ff ff       	call   c000b114 <File::close()>
c0015f8d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f92:	83 c4 10             	add    esp,0x10
c0015f95:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015f9c:	48                   	dec    eax
c0015f9d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fa2:	85 c0                	test   eax,eax
c0015fa4:	75 01                	jne    c0015fa7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c0015fa6:	fb                   	sti    
c0015fa7:	83 ec 0c             	sub    esp,0xc
c0015faa:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fb0:	e8 23 f6 ff ff       	call   c00155d8 <unblockTask(ThreadControlBlock*)>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015fbc:	83 c4 2c             	add    esp,0x2c
c0015fbf:	5b                   	pop    ebx
c0015fc0:	5e                   	pop    esi
c0015fc1:	5f                   	pop    edi
c0015fc2:	5d                   	pop    ebp
c0015fc3:	c3                   	ret    

c0015fc4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015fc4:	57                   	push   edi
c0015fc5:	56                   	push   esi
c0015fc6:	53                   	push   ebx
c0015fc7:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015fcc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0015fd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fd5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fd9:	83 e8 06             	sub    eax,0x6
c0015fdc:	0f b7 c0             	movzx  eax,ax
c0015fdf:	50                   	push   eax
c0015fe0:	52                   	push   edx
c0015fe1:	e8 6e fc ff ff       	call   c0015c54 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fe6:	5a                   	pop    edx
c0015fe7:	5e                   	pop    esi
c0015fe8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015feb:	8d 56 fa             	lea    edx,[esi-0x6]
c0015fee:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0015ff1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015ff7:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015ffa:	8d 56 02             	lea    edx,[esi+0x2]
c0015ffd:	66 89 10             	mov    WORD PTR [eax],dx
c0016000:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0016003:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016007:	0f b7 51 40          	movzx  edx,WORD PTR [ecx+0x40]
c001600b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001600f:	89 d6                	mov    esi,edx
c0016011:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0016017:	81 e6 ff fd 00 00    	and    esi,0xfdff
c001601d:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016021:	74 08                	je     c001602b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x67>
c0016023:	89 d6                	mov    esi,edx
c0016025:	81 ce 00 02 00 00    	or     esi,0x200
c001602b:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001602f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016034:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016038:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016040:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016043:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001604b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001604e:	5b                   	pop    ebx
c001604f:	5e                   	pop    esi
c0016050:	5f                   	pop    edi
c0016051:	c3                   	ret    

c0016052 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016052:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016057:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001605c:	c1 e0 04             	shl    eax,0x4
c001605f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016062:	c3                   	ret    

c0016063 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016063:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016068:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001606d:	c1 e0 04             	shl    eax,0x4
c0016070:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016074:	c3                   	ret    

c0016075 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016075:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001607a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001607f:	c1 e0 04             	shl    eax,0x4
c0016082:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016085:	c3                   	ret    

c0016086 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016086:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001608b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016090:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016094:	c1 e0 04             	shl    eax,0x4
c0016097:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001609a:	c3                   	ret    

c001609b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001609b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160a5:	0f b7 4c 24 0c       	movzx  ecx,WORD PTR [esp+0xc]
c00160aa:	c1 e0 04             	shl    eax,0x4
c00160ad:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160b1:	c3                   	ret    

c00160b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160c0:	c1 e0 04             	shl    eax,0x4
c00160c3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160c6:	c3                   	ret    

c00160c7 <Vm::faultHandler(regs*)>:
c00160c7:	55                   	push   ebp
c00160c8:	57                   	push   edi
c00160c9:	56                   	push   esi
c00160ca:	53                   	push   ebx
c00160cb:	83 ec 1c             	sub    esp,0x1c
c00160ce:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00160d2:	0f b7 43 38          	movzx  eax,WORD PTR [ebx+0x38]
c00160d6:	0f b7 7b 3c          	movzx  edi,WORD PTR [ebx+0x3c]
c00160da:	50                   	push   eax
c00160db:	57                   	push   edi
c00160dc:	e8 73 fb ff ff       	call   c0015c54 <Vm::realToLinear(unsigned short, unsigned short)>
c00160e1:	0f b7 6b 48          	movzx  ebp,WORD PTR [ebx+0x48]
c00160e5:	59                   	pop    ecx
c00160e6:	5e                   	pop    esi
c00160e7:	8b 73 44             	mov    esi,DWORD PTR [ebx+0x44]
c00160ea:	89 c1                	mov    ecx,eax
c00160ec:	0f b7 c6             	movzx  eax,si
c00160ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160f3:	50                   	push   eax
c00160f4:	55                   	push   ebp
c00160f5:	e8 5a fb ff ff       	call   c0015c54 <Vm::realToLinear(unsigned short, unsigned short)>
c00160fa:	5a                   	pop    edx
c00160fb:	5a                   	pop    edx
c00160fc:	c6 44 24 0a 06       	mov    BYTE PTR [esp+0xa],0x6
c0016101:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016106:	c6 44 24 09 00       	mov    BYTE PTR [esp+0x9],0x0
c001610b:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001610e:	80 fa 9d             	cmp    dl,0x9d
c0016111:	0f 84 2c 02 00 00    	je     c0016343 <Vm::faultHandler(regs*)+0x27c>
c0016117:	0f 87 94 00 00 00    	ja     c00161b1 <Vm::faultHandler(regs*)+0xea>
c001611d:	80 fa 66             	cmp    dl,0x66
c0016120:	0f 84 99 01 00 00    	je     c00162bf <Vm::faultHandler(regs*)+0x1f8>
c0016126:	77 4a                	ja     c0016172 <Vm::faultHandler(regs*)+0xab>
c0016128:	80 fa 36             	cmp    dl,0x36
c001612b:	0f 84 81 01 00 00    	je     c00162b2 <Vm::faultHandler(regs*)+0x1eb>
c0016131:	77 1d                	ja     c0016150 <Vm::faultHandler(regs*)+0x89>
c0016133:	80 fa 26             	cmp    dl,0x26
c0016136:	0f 84 4f 01 00 00    	je     c001628b <Vm::faultHandler(regs*)+0x1c4>
c001613c:	80 fa 2e             	cmp    dl,0x2e
c001613f:	0f 85 ec 05 00 00    	jne    c0016731 <Vm::faultHandler(regs*)+0x66a>
c0016145:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016148:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001614d:	41                   	inc    ecx
c001614e:	eb bb                	jmp    c001610b <Vm::faultHandler(regs*)+0x44>
c0016150:	80 fa 64             	cmp    dl,0x64
c0016153:	0f 84 3f 01 00 00    	je     c0016298 <Vm::faultHandler(regs*)+0x1d1>
c0016159:	0f 87 46 01 00 00    	ja     c00162a5 <Vm::faultHandler(regs*)+0x1de>
c001615f:	80 fa 3e             	cmp    dl,0x3e
c0016162:	0f 85 c9 05 00 00    	jne    c0016731 <Vm::faultHandler(regs*)+0x66a>
c0016168:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001616b:	c6 44 24 0a 01       	mov    BYTE PTR [esp+0xa],0x1
c0016170:	eb db                	jmp    c001614d <Vm::faultHandler(regs*)+0x86>
c0016172:	80 fa 6d             	cmp    dl,0x6d
c0016175:	0f 84 e3 02 00 00    	je     c001645e <Vm::faultHandler(regs*)+0x397>
c001617b:	77 17                	ja     c0016194 <Vm::faultHandler(regs*)+0xcd>
c001617d:	80 fa 67             	cmp    dl,0x67
c0016180:	0f 84 46 01 00 00    	je     c00162cc <Vm::faultHandler(regs*)+0x205>
c0016186:	80 fa 6c             	cmp    dl,0x6c
c0016189:	0f 84 60 02 00 00    	je     c00163ef <Vm::faultHandler(regs*)+0x328>
c001618f:	e9 9d 05 00 00       	jmp    c0016731 <Vm::faultHandler(regs*)+0x66a>
c0016194:	80 fa 6f             	cmp    dl,0x6f
c0016197:	0f 84 f1 03 00 00    	je     c001658e <Vm::faultHandler(regs*)+0x4c7>
c001619d:	0f 82 54 03 00 00    	jb     c00164f7 <Vm::faultHandler(regs*)+0x430>
c00161a3:	80 fa 9c             	cmp    dl,0x9c
c00161a6:	0f 84 2d 01 00 00    	je     c00162d9 <Vm::faultHandler(regs*)+0x212>
c00161ac:	e9 80 05 00 00       	jmp    c0016731 <Vm::faultHandler(regs*)+0x66a>
c00161b1:	80 fa ec             	cmp    dl,0xec
c00161b4:	0f 84 19 05 00 00    	je     c00166d3 <Vm::faultHandler(regs*)+0x60c>
c00161ba:	77 79                	ja     c0016235 <Vm::faultHandler(regs*)+0x16e>
c00161bc:	80 fa e4             	cmp    dl,0xe4
c00161bf:	0f 84 98 04 00 00    	je     c001665d <Vm::faultHandler(regs*)+0x596>
c00161c5:	77 51                	ja     c0016218 <Vm::faultHandler(regs*)+0x151>
c00161c7:	80 fa cd             	cmp    dl,0xcd
c00161ca:	0f 84 d3 01 00 00    	je     c00163a3 <Vm::faultHandler(regs*)+0x2dc>
c00161d0:	80 fa cf             	cmp    dl,0xcf
c00161d3:	0f 85 58 05 00 00    	jne    c0016731 <Vm::faultHandler(regs*)+0x66a>
c00161d9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00161dc:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00161df:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00161e3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00161e6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00161ea:	81 ca 00 02 02 00    	or     edx,0x20200
c00161f0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00161f3:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c00161f7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00161fd:	c1 e8 09             	shr    eax,0x9
c0016200:	24 01                	and    al,0x1
c0016202:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016205:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016208:	83 c0 06             	add    eax,0x6
c001620b:	25 ff ff 00 00       	and    eax,0xffff
c0016210:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016213:	e9 15 05 00 00       	jmp    c001672d <Vm::faultHandler(regs*)+0x666>
c0016218:	80 fa e6             	cmp    dl,0xe6
c001621b:	0f 84 86 04 00 00    	je     c00166a7 <Vm::faultHandler(regs*)+0x5e0>
c0016221:	0f 82 52 04 00 00    	jb     c0016679 <Vm::faultHandler(regs*)+0x5b2>
c0016227:	80 fa e7             	cmp    dl,0xe7
c001622a:	0f 84 8e 04 00 00    	je     c00166be <Vm::faultHandler(regs*)+0x5f7>
c0016230:	e9 fc 04 00 00       	jmp    c0016731 <Vm::faultHandler(regs*)+0x66a>
c0016235:	80 fa ef             	cmp    dl,0xef
c0016238:	0f 84 d9 04 00 00    	je     c0016717 <Vm::faultHandler(regs*)+0x650>
c001623e:	77 28                	ja     c0016268 <Vm::faultHandler(regs*)+0x1a1>
c0016240:	80 fa ed             	cmp    dl,0xed
c0016243:	0f 84 a6 04 00 00    	je     c00166ef <Vm::faultHandler(regs*)+0x628>
c0016249:	80 fa ee             	cmp    dl,0xee
c001624c:	0f 85 df 04 00 00    	jne    c0016731 <Vm::faultHandler(regs*)+0x66a>
c0016252:	50                   	push   eax
c0016253:	50                   	push   eax
c0016254:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016258:	50                   	push   eax
c0016259:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001625d:	50                   	push   eax
c001625e:	e8 b9 f9 ff ff       	call   c0015c1c <Vm::outbv(unsigned short, unsigned char)>
c0016263:	e9 a7 04 00 00       	jmp    c001670f <Vm::faultHandler(regs*)+0x648>
c0016268:	80 fa fa             	cmp    dl,0xfa
c001626b:	0f 84 62 01 00 00    	je     c00163d3 <Vm::faultHandler(regs*)+0x30c>
c0016271:	80 fa fb             	cmp    dl,0xfb
c0016274:	0f 84 67 01 00 00    	je     c00163e1 <Vm::faultHandler(regs*)+0x31a>
c001627a:	80 fa f3             	cmp    dl,0xf3
c001627d:	0f 85 ae 04 00 00    	jne    c0016731 <Vm::faultHandler(regs*)+0x66a>
c0016283:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016286:	e9 c2 fe ff ff       	jmp    c001614d <Vm::faultHandler(regs*)+0x86>
c001628b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001628e:	c6 44 24 0a 02       	mov    BYTE PTR [esp+0xa],0x2
c0016293:	e9 b5 fe ff ff       	jmp    c001614d <Vm::faultHandler(regs*)+0x86>
c0016298:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001629b:	c6 44 24 0a 03       	mov    BYTE PTR [esp+0xa],0x3
c00162a0:	e9 a8 fe ff ff       	jmp    c001614d <Vm::faultHandler(regs*)+0x86>
c00162a5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162a8:	c6 44 24 0a 04       	mov    BYTE PTR [esp+0xa],0x4
c00162ad:	e9 9b fe ff ff       	jmp    c001614d <Vm::faultHandler(regs*)+0x86>
c00162b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162b5:	c6 44 24 0a 05       	mov    BYTE PTR [esp+0xa],0x5
c00162ba:	e9 8e fe ff ff       	jmp    c001614d <Vm::faultHandler(regs*)+0x86>
c00162bf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162c2:	c6 44 24 09 01       	mov    BYTE PTR [esp+0x9],0x1
c00162c7:	e9 81 fe ff ff       	jmp    c001614d <Vm::faultHandler(regs*)+0x86>
c00162cc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162cf:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00162d4:	e9 74 fe ff ff       	jmp    c001614d <Vm::faultHandler(regs*)+0x86>
c00162d9:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00162de:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00162e1:	74 30                	je     c0016313 <Vm::faultHandler(regs*)+0x24c>
c00162e3:	8d 4e fc             	lea    ecx,[esi-0x4]
c00162e6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00162ec:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00162f2:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00162f5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00162f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162fe:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016302:	0f 84 22 04 00 00    	je     c001672a <Vm::faultHandler(regs*)+0x663>
c0016308:	80 ce 02             	or     dh,0x2
c001630b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001630e:	e9 17 04 00 00       	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c0016313:	8d 4e fe             	lea    ecx,[esi-0x2]
c0016316:	0f b7 d2             	movzx  edx,dx
c0016319:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001631f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016322:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016326:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001632c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016330:	74 05                	je     c0016337 <Vm::faultHandler(regs*)+0x270>
c0016332:	80 ce 02             	or     dh,0x2
c0016335:	eb 03                	jmp    c001633a <Vm::faultHandler(regs*)+0x273>
c0016337:	80 e6 fd             	and    dh,0xfd
c001633a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001633e:	e9 e7 03 00 00       	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c0016343:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016348:	74 29                	je     c0016373 <Vm::faultHandler(regs*)+0x2ac>
c001634a:	8b 10                	mov    edx,DWORD PTR [eax]
c001634c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016352:	81 ca 00 02 02 00    	or     edx,0x20200
c0016358:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001635b:	8b 00                	mov    eax,DWORD PTR [eax]
c001635d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016363:	c1 e8 09             	shr    eax,0x9
c0016366:	24 01                	and    al,0x1
c0016368:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001636b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001636e:	83 c0 04             	add    eax,0x4
c0016371:	eb 23                	jmp    c0016396 <Vm::faultHandler(regs*)+0x2cf>
c0016373:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016376:	81 ca 00 02 02 00    	or     edx,0x20200
c001637c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001637f:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016382:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016388:	c1 e8 09             	shr    eax,0x9
c001638b:	24 01                	and    al,0x1
c001638d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016390:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016393:	83 c0 02             	add    eax,0x2
c0016396:	25 ff ff 00 00       	and    eax,0xffff
c001639b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001639e:	e9 87 03 00 00       	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c00163a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00163a7:	3c ee                	cmp    al,0xee
c00163a9:	75 10                	jne    c00163bb <Vm::faultHandler(regs*)+0x2f4>
c00163ab:	83 ec 0c             	sub    esp,0xc
c00163ae:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00163b1:	e8 05 f9 ff ff       	call   c0015cbb <Vm::mainloop3(unsigned long)>
c00163b6:	e9 57 03 00 00       	jmp    c0016712 <Vm::faultHandler(regs*)+0x64b>
c00163bb:	83 ec 0c             	sub    esp,0xc
c00163be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163c2:	55                   	push   ebp
c00163c3:	51                   	push   ecx
c00163c4:	50                   	push   eax
c00163c5:	53                   	push   ebx
c00163c6:	e8 f9 fb ff ff       	call   c0015fc4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00163cb:	83 c4 20             	add    esp,0x20
c00163ce:	e9 5a 03 00 00       	jmp    c001672d <Vm::faultHandler(regs*)+0x666>
c00163d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163d8:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00163dc:	e9 49 03 00 00       	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c00163e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163e6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00163ea:	e9 3b 03 00 00       	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c00163ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00163f4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00163f7:	74 2b                	je     c0016424 <Vm::faultHandler(regs*)+0x35d>
c00163f9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016400:	76 22                	jbe    c0016424 <Vm::faultHandler(regs*)+0x35d>
c0016402:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016406:	50                   	push   eax
c0016407:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001640b:	50                   	push   eax
c001640c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016410:	50                   	push   eax
c0016411:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016415:	50                   	push   eax
c0016416:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001641a:	50                   	push   eax
c001641b:	6a 6c                	push   0x6c
c001641d:	6a 6c                	push   0x6c
c001641f:	e9 c6 01 00 00       	jmp    c00165ea <Vm::faultHandler(regs*)+0x523>
c0016424:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016428:	83 ec 0c             	sub    esp,0xc
c001642b:	0f b7 f6             	movzx  esi,si
c001642e:	50                   	push   eax
c001642f:	e8 d3 f7 ff ff       	call   c0015c07 <Vm::inbv(unsigned short)>
c0016434:	83 c4 0c             	add    esp,0xc
c0016437:	0f b6 c0             	movzx  eax,al
c001643a:	50                   	push   eax
c001643b:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001643f:	50                   	push   eax
c0016440:	56                   	push   esi
c0016441:	e8 40 fc ff ff       	call   c0016086 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016446:	83 c4 10             	add    esp,0x10
c0016449:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001644c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016450:	74 03                	je     c0016455 <Vm::faultHandler(regs*)+0x38e>
c0016452:	48                   	dec    eax
c0016453:	eb 01                	jmp    c0016456 <Vm::faultHandler(regs*)+0x38f>
c0016455:	40                   	inc    eax
c0016456:	0f b7 c0             	movzx  eax,ax
c0016459:	e9 91 00 00 00       	jmp    c00164ef <Vm::faultHandler(regs*)+0x428>
c001645e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016463:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016466:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016469:	74 29                	je     c0016494 <Vm::faultHandler(regs*)+0x3cd>
c001646b:	3d ff ff 00 00       	cmp    eax,0xffff
c0016470:	76 22                	jbe    c0016494 <Vm::faultHandler(regs*)+0x3cd>
c0016472:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016476:	50                   	push   eax
c0016477:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001647b:	50                   	push   eax
c001647c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016480:	50                   	push   eax
c0016481:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016485:	50                   	push   eax
c0016486:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001648a:	50                   	push   eax
c001648b:	6a 6d                	push   0x6d
c001648d:	6a 6d                	push   0x6d
c001648f:	e9 56 01 00 00       	jmp    c00165ea <Vm::faultHandler(regs*)+0x523>
c0016494:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016499:	0f b7 c8             	movzx  ecx,ax
c001649c:	0f b7 f6             	movzx  esi,si
c001649f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c00164a3:	74 1e                	je     c00164c3 <Vm::faultHandler(regs*)+0x3fc>
c00164a5:	ed                   	in     eax,dx
c00164a6:	52                   	push   edx
c00164a7:	50                   	push   eax
c00164a8:	51                   	push   ecx
c00164a9:	56                   	push   esi
c00164aa:	e8 03 fc ff ff       	call   c00160b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00164af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164b2:	83 c4 10             	add    esp,0x10
c00164b5:	8d 50 04             	lea    edx,[eax+0x4]
c00164b8:	83 e8 04             	sub    eax,0x4
c00164bb:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164c1:	eb 20                	jmp    c00164e3 <Vm::faultHandler(regs*)+0x41c>
c00164c3:	66 ed                	in     ax,dx
c00164c5:	55                   	push   ebp
c00164c6:	0f b7 c0             	movzx  eax,ax
c00164c9:	50                   	push   eax
c00164ca:	51                   	push   ecx
c00164cb:	56                   	push   esi
c00164cc:	e8 ca fb ff ff       	call   c001609b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00164d1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164d4:	83 c4 10             	add    esp,0x10
c00164d7:	8d 50 02             	lea    edx,[eax+0x2]
c00164da:	83 e8 02             	sub    eax,0x2
c00164dd:	81 e2 ff ff 00 00    	and    edx,0xffff
c00164e3:	25 ff ff 00 00       	and    eax,0xffff
c00164e8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164ec:	0f 44 c2             	cmove  eax,edx
c00164ef:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00164f2:	e9 33 02 00 00       	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c00164f7:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c00164fb:	fe c8                	dec    al
c00164fd:	3c 05                	cmp    al,0x5
c00164ff:	77 23                	ja     c0016524 <Vm::faultHandler(regs*)+0x45d>
c0016501:	0f b6 c0             	movzx  eax,al
c0016504:	ff 24 85 4c 11 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdeeb4]
c001650b:	89 ef                	mov    edi,ebp
c001650d:	eb 15                	jmp    c0016524 <Vm::faultHandler(regs*)+0x45d>
c001650f:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0016513:	eb 0f                	jmp    c0016524 <Vm::faultHandler(regs*)+0x45d>
c0016515:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016519:	eb 09                	jmp    c0016524 <Vm::faultHandler(regs*)+0x45d>
c001651b:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001651f:	eb 03                	jmp    c0016524 <Vm::faultHandler(regs*)+0x45d>
c0016521:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016524:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0016529:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001652c:	74 29                	je     c0016557 <Vm::faultHandler(regs*)+0x490>
c001652e:	3d ff ff 00 00       	cmp    eax,0xffff
c0016533:	76 22                	jbe    c0016557 <Vm::faultHandler(regs*)+0x490>
c0016535:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016539:	50                   	push   eax
c001653a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001653e:	50                   	push   eax
c001653f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016543:	50                   	push   eax
c0016544:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016548:	50                   	push   eax
c0016549:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001654d:	50                   	push   eax
c001654e:	6a 6e                	push   0x6e
c0016550:	6a 6e                	push   0x6e
c0016552:	e9 93 00 00 00       	jmp    c00165ea <Vm::faultHandler(regs*)+0x523>
c0016557:	51                   	push   ecx
c0016558:	0f b7 c0             	movzx  eax,ax
c001655b:	51                   	push   ecx
c001655c:	50                   	push   eax
c001655d:	57                   	push   edi
c001655e:	e8 ef fa ff ff       	call   c0016052 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016563:	5e                   	pop    esi
c0016564:	5f                   	pop    edi
c0016565:	0f b6 c0             	movzx  eax,al
c0016568:	50                   	push   eax
c0016569:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001656d:	50                   	push   eax
c001656e:	e8 a9 f6 ff ff       	call   c0015c1c <Vm::outbv(unsigned short, unsigned char)>
c0016573:	83 c4 10             	add    esp,0x10
c0016576:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016579:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001657d:	74 03                	je     c0016582 <Vm::faultHandler(regs*)+0x4bb>
c001657f:	48                   	dec    eax
c0016580:	eb 01                	jmp    c0016583 <Vm::faultHandler(regs*)+0x4bc>
c0016582:	40                   	inc    eax
c0016583:	0f b7 c0             	movzx  eax,ax
c0016586:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016589:	e9 9c 01 00 00       	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c001658e:	8a 44 24 0a          	mov    al,BYTE PTR [esp+0xa]
c0016592:	fe c8                	dec    al
c0016594:	3c 05                	cmp    al,0x5
c0016596:	77 23                	ja     c00165bb <Vm::faultHandler(regs*)+0x4f4>
c0016598:	0f b6 c0             	movzx  eax,al
c001659b:	ff 24 85 64 11 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdee9c]
c00165a2:	89 ef                	mov    edi,ebp
c00165a4:	eb 15                	jmp    c00165bb <Vm::faultHandler(regs*)+0x4f4>
c00165a6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00165aa:	eb 0f                	jmp    c00165bb <Vm::faultHandler(regs*)+0x4f4>
c00165ac:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00165b0:	eb 09                	jmp    c00165bb <Vm::faultHandler(regs*)+0x4f4>
c00165b2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00165b6:	eb 03                	jmp    c00165bb <Vm::faultHandler(regs*)+0x4f4>
c00165b8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00165bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00165c0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00165c3:	74 37                	je     c00165fc <Vm::faultHandler(regs*)+0x535>
c00165c5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00165cb:	76 2f                	jbe    c00165fc <Vm::faultHandler(regs*)+0x535>
c00165cd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00165d1:	50                   	push   eax
c00165d2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00165d6:	50                   	push   eax
c00165d7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00165db:	50                   	push   eax
c00165dc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165e0:	50                   	push   eax
c00165e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165e5:	50                   	push   eax
c00165e6:	6a 6f                	push   0x6f
c00165e8:	6a 6f                	push   0x6f
c00165ea:	68 f2 10 02 c0       	push   0xc00210f2
c00165ef:	e8 82 44 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00165f4:	83 c4 20             	add    esp,0x20
c00165f7:	e9 89 01 00 00       	jmp    c0016785 <Vm::faultHandler(regs*)+0x6be>
c00165fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00165ff:	0f b7 c6             	movzx  eax,si
c0016602:	0f b7 6b 24          	movzx  ebp,WORD PTR [ebx+0x24]
c0016606:	81 e1 00 04 00 00    	and    ecx,0x400
c001660c:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c0016611:	74 1c                	je     c001662f <Vm::faultHandler(regs*)+0x568>
c0016613:	52                   	push   edx
c0016614:	52                   	push   edx
c0016615:	50                   	push   eax
c0016616:	57                   	push   edi
c0016617:	e8 59 fa ff ff       	call   c0016075 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001661c:	83 c4 10             	add    esp,0x10
c001661f:	89 ea                	mov    edx,ebp
c0016621:	ef                   	out    dx,eax
c0016622:	8d 46 04             	lea    eax,[esi+0x4]
c0016625:	83 ee 04             	sub    esi,0x4
c0016628:	25 ff ff 00 00       	and    eax,0xffff
c001662d:	eb 1b                	jmp    c001664a <Vm::faultHandler(regs*)+0x583>
c001662f:	52                   	push   edx
c0016630:	52                   	push   edx
c0016631:	50                   	push   eax
c0016632:	57                   	push   edi
c0016633:	e8 2b fa ff ff       	call   c0016063 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016638:	83 c4 10             	add    esp,0x10
c001663b:	89 ea                	mov    edx,ebp
c001663d:	66 ef                	out    dx,ax
c001663f:	8d 46 02             	lea    eax,[esi+0x2]
c0016642:	83 ee 02             	sub    esi,0x2
c0016645:	25 ff ff 00 00       	and    eax,0xffff
c001664a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016650:	85 c9                	test   ecx,ecx
c0016652:	0f 44 f0             	cmove  esi,eax
c0016655:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016658:	e9 cd 00 00 00       	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c001665d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001666b:	50                   	push   eax
c001666c:	e8 96 f5 ff ff       	call   c0015c07 <Vm::inbv(unsigned short)>
c0016671:	0f b6 c0             	movzx  eax,al
c0016674:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016677:	eb 3f                	jmp    c00166b8 <Vm::faultHandler(regs*)+0x5f1>
c0016679:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001667e:	74 07                	je     c0016687 <Vm::faultHandler(regs*)+0x5c0>
c0016680:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016684:	ed                   	in     eax,dx
c0016685:	eb 14                	jmp    c001669b <Vm::faultHandler(regs*)+0x5d4>
c0016687:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001668a:	66 31 f6             	xor    si,si
c001668d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016690:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016694:	66 ed                	in     ax,dx
c0016696:	0f b7 c0             	movzx  eax,ax
c0016699:	09 f0                	or     eax,esi
c001669b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001669e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166a2:	e9 86 00 00 00       	jmp    c001672d <Vm::faultHandler(regs*)+0x666>
c00166a7:	52                   	push   edx
c00166a8:	52                   	push   edx
c00166a9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00166ad:	50                   	push   eax
c00166ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166b2:	50                   	push   eax
c00166b3:	e8 64 f5 ff ff       	call   c0015c1c <Vm::outbv(unsigned short, unsigned char)>
c00166b8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166bc:	eb 54                	jmp    c0016712 <Vm::faultHandler(regs*)+0x64b>
c00166be:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00166c3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00166c6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166ca:	74 03                	je     c00166cf <Vm::faultHandler(regs*)+0x608>
c00166cc:	ef                   	out    dx,eax
c00166cd:	eb cf                	jmp    c001669e <Vm::faultHandler(regs*)+0x5d7>
c00166cf:	66 ef                	out    dx,ax
c00166d1:	eb cb                	jmp    c001669e <Vm::faultHandler(regs*)+0x5d7>
c00166d3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166d7:	83 ec 0c             	sub    esp,0xc
c00166da:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166e1:	50                   	push   eax
c00166e2:	e8 20 f5 ff ff       	call   c0015c07 <Vm::inbv(unsigned short)>
c00166e7:	0f b6 c0             	movzx  eax,al
c00166ea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166ed:	eb 20                	jmp    c001670f <Vm::faultHandler(regs*)+0x648>
c00166ef:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c00166f4:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c00166f8:	74 03                	je     c00166fd <Vm::faultHandler(regs*)+0x636>
c00166fa:	ed                   	in     eax,dx
c00166fb:	eb 0d                	jmp    c001670a <Vm::faultHandler(regs*)+0x643>
c00166fd:	66 ed                	in     ax,dx
c00166ff:	0f b7 d0             	movzx  edx,ax
c0016702:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016705:	66 31 c0             	xor    ax,ax
c0016708:	09 d0                	or     eax,edx
c001670a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001670d:	eb 1b                	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c001670f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016712:	83 c4 10             	add    esp,0x10
c0016715:	eb 16                	jmp    c001672d <Vm::faultHandler(regs*)+0x666>
c0016717:	80 7c 24 09 00       	cmp    BYTE PTR [esp+0x9],0x0
c001671c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001671f:	0f b7 53 24          	movzx  edx,WORD PTR [ebx+0x24]
c0016723:	74 03                	je     c0016728 <Vm::faultHandler(regs*)+0x661>
c0016725:	ef                   	out    dx,eax
c0016726:	eb 02                	jmp    c001672a <Vm::faultHandler(regs*)+0x663>
c0016728:	66 ef                	out    dx,ax
c001672a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001672d:	b0 01                	mov    al,0x1
c001672f:	eb 56                	jmp    c0016787 <Vm::faultHandler(regs*)+0x6c0>
c0016731:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016735:	50                   	push   eax
c0016736:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001673a:	50                   	push   eax
c001673b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001673f:	50                   	push   eax
c0016740:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016744:	50                   	push   eax
c0016745:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016749:	50                   	push   eax
c001674a:	52                   	push   edx
c001674b:	52                   	push   edx
c001674c:	68 1f 11 02 c0       	push   0xc002111f
c0016751:	e8 20 43 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016756:	83 c4 20             	add    esp,0x20
c0016759:	83 ec 0c             	sub    esp,0xc
c001675c:	6a 60                	push   0x60
c001675e:	e8 a4 f4 ff ff       	call   c0015c07 <Vm::inbv(unsigned short)>
c0016763:	83 c4 10             	add    esp,0x10
c0016766:	3c 1c                	cmp    al,0x1c
c0016768:	74 04                	je     c001676e <Vm::faultHandler(regs*)+0x6a7>
c001676a:	3c 5a                	cmp    al,0x5a
c001676c:	75 eb                	jne    c0016759 <Vm::faultHandler(regs*)+0x692>
c001676e:	3c 1c                	cmp    al,0x1c
c0016770:	74 04                	je     c0016776 <Vm::faultHandler(regs*)+0x6af>
c0016772:	3c 5a                	cmp    al,0x5a
c0016774:	75 0f                	jne    c0016785 <Vm::faultHandler(regs*)+0x6be>
c0016776:	83 ec 0c             	sub    esp,0xc
c0016779:	6a 60                	push   0x60
c001677b:	e8 87 f4 ff ff       	call   c0015c07 <Vm::inbv(unsigned short)>
c0016780:	83 c4 10             	add    esp,0x10
c0016783:	eb e9                	jmp    c001676e <Vm::faultHandler(regs*)+0x6a7>
c0016785:	31 c0                	xor    eax,eax
c0016787:	83 c4 1c             	add    esp,0x1c
c001678a:	5b                   	pop    ebx
c001678b:	5e                   	pop    esi
c001678c:	5f                   	pop    edi
c001678d:	5d                   	pop    ebp
c001678e:	c3                   	ret    

c001678f <noCopro(unsigned long)>:
c001678f:	c3                   	ret    

c0016790 <nmiHandler(regs*, void*)>:
c0016790:	83 ec 1c             	sub    esp,0x1c
c0016793:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016798:	89 04 24             	mov    DWORD PTR [esp],eax
c001679b:	e8 58 0b ff ff       	call   c00072f8 <Computer::handleNMI()>
c00167a0:	90                   	nop
c00167a1:	83 c4 1c             	add    esp,0x1c
c00167a4:	c3                   	ret    

c00167a5 <doubleFault(regs*, void*)>:
c00167a5:	55                   	push   ebp
c00167a6:	89 e5                	mov    ebp,esp
c00167a8:	83 ec 18             	sub    esp,0x18
c00167ab:	c7 04 24 7c 11 02 c0 	mov    DWORD PTR [esp],0xc002117c
c00167b2:	e8 6e a0 ff ff       	call   c0010825 <KePanic(char const*)>
c00167b7:	90                   	nop
c00167b8:	c9                   	leave  
c00167b9:	c3                   	ret    

c00167ba <displayDebugInfo(regs*)>:
c00167ba:	83 ec 2c             	sub    esp,0x2c
c00167bd:	0f 20 c0             	mov    eax,cr0
c00167c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00167c4:	0f 20 d0             	mov    eax,cr2
c00167c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167cb:	0f 20 d8             	mov    eax,cr3
c00167ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167d2:	0f 20 e0             	mov    eax,cr4
c00167d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167dd:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00167e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167e4:	c7 04 24 98 11 02 c0 	mov    DWORD PTR [esp],0xc0021198
c00167eb:	e8 86 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00167f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167f4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00167f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167fb:	c7 04 24 89 11 02 c0 	mov    DWORD PTR [esp],0xc0021189
c0016802:	e8 6f 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016807:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001680b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001680e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016812:	c7 04 24 94 11 02 c0 	mov    DWORD PTR [esp],0xc0021194
c0016819:	e8 58 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001681e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016822:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016825:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016829:	c7 04 24 a3 11 02 c0 	mov    DWORD PTR [esp],0xc00211a3
c0016830:	e8 41 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016839:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001683c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016840:	c7 04 24 ae 11 02 c0 	mov    DWORD PTR [esp],0xc00211ae
c0016847:	e8 2a 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001684c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016850:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016854:	c7 04 24 b9 11 02 c0 	mov    DWORD PTR [esp],0xc00211b9
c001685b:	e8 16 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016864:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016868:	c7 04 24 c4 11 02 c0 	mov    DWORD PTR [esp],0xc00211c4
c001686f:	e8 02 42 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016874:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016879:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001687f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016882:	e8 f6 1e ff ff       	call   c000877d <setActiveTerminal(VgaText*)>
c0016887:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001688c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016892:	c7 44 24 04 cf 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211cf
c001689a:	89 04 24             	mov    DWORD PTR [esp],eax
c001689d:	e8 20 22 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00168a2:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168ad:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00168b1:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00168b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00168bb:	e8 bc 21 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c00168c0:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168cb:	c7 44 24 04 dd 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211dd
c00168d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00168d6:	e8 e7 21 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00168db:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168e6:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00168eb:	8b 12                	mov    edx,DWORD PTR [edx]
c00168ed:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00168f0:	83 c2 0c             	add    edx,0xc
c00168f3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00168f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00168fa:	e8 c3 21 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00168ff:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016904:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001690a:	c7 44 24 04 e6 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211e6
c0016912:	89 04 24             	mov    DWORD PTR [esp],eax
c0016915:	e8 a8 21 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c001691a:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001691f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016925:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016929:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001692c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016930:	89 04 24             	mov    DWORD PTR [esp],eax
c0016933:	e8 44 21 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016938:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001693d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016943:	c7 44 24 04 ee 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211ee
c001694b:	89 04 24             	mov    DWORD PTR [esp],eax
c001694e:	e8 6f 21 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016953:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016958:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001695e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016962:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016965:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016969:	89 04 24             	mov    DWORD PTR [esp],eax
c001696c:	e8 0b 21 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016971:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016976:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001697c:	c7 44 24 04 f6 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211f6
c0016984:	89 04 24             	mov    DWORD PTR [esp],eax
c0016987:	e8 36 21 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c001698c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016991:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016997:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001699b:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001699e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00169a5:	e8 d2 20 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c00169aa:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169b5:	c7 44 24 04 fe 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc00211fe
c00169bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00169c0:	e8 fd 20 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00169c5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169ca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00169d4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00169d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00169db:	89 04 24             	mov    DWORD PTR [esp],eax
c00169de:	e8 99 20 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c00169e3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169ee:	c7 44 24 04 06 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021206
c00169f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00169f9:	e8 c4 20 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00169fe:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a09:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016a0d:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a14:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a17:	e8 60 20 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016a1c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a27:	c7 44 24 04 0e 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc002120e
c0016a2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a32:	e8 8b 20 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016a37:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a3c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a42:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016a46:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016a49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a50:	e8 27 20 ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016a55:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a60:	c7 44 24 04 16 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021216
c0016a68:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a6b:	e8 52 20 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016a70:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a7f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016a83:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a86:	e8 f1 1f ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016a8b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a90:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a96:	c7 44 24 04 1f 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc002121f
c0016a9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aa1:	e8 1c 20 ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016aa6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ab1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ab5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016abc:	e8 bb 1f ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016ac1:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016acc:	c7 44 24 04 27 12 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021227
c0016ad4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ad7:	e8 e6 1f ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016adc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ae1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ae7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016aeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016aef:	89 04 24             	mov    DWORD PTR [esp],eax
c0016af2:	e8 85 1f ff ff       	call   c0008a7c <VgaText::putx(unsigned int)>
c0016af7:	fa                   	cli    
c0016af8:	f4                   	hlt    
c0016af9:	eb fe                	jmp    c0016af9 <displayDebugInfo(regs*)+0x33f>

c0016afb <HalSystemIdle()>:
c0016afb:	83 ec 2c             	sub    esp,0x2c
c0016afe:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b09:	0f b6 80 8e 11 00 00 	movzx  eax,BYTE PTR [eax+0x118e]
c0016b10:	24 04                	and    al,0x4
c0016b12:	0f 95 c0             	setne  al
c0016b15:	84 c0                	test   al,al
c0016b17:	74 52                	je     c0016b6b <HalSystemIdle()+0x70>
c0016b19:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b1e:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016b26:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b29:	e8 92 05 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0016b2e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b36:	8b 0d b8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024eb8
c0016b3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b44:	83 e0 02             	and    eax,0x2
c0016b47:	ba 00 00 00 00       	mov    edx,0x0
c0016b4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016b54:	c7 44 24 04 e1 00 00 00 	mov    DWORD PTR [esp+0x4],0xe1
c0016b5c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0016b5f:	e8 84 05 ff ff       	call   c00070e8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016b64:	e8 2b 96 fe ff       	call   c0000194 <doTPAUSE>
c0016b69:	eb 01                	jmp    c0016b6c <HalSystemIdle()+0x71>
c0016b6b:	f4                   	hlt    
c0016b6c:	90                   	nop
c0016b6d:	83 c4 2c             	add    esp,0x2c
c0016b70:	c3                   	ret    

c0016b71 <displayProgramFault(char const*)>:
c0016b71:	83 ec 1c             	sub    esp,0x1c
c0016b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b7b:	e8 f6 3e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016b80:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b85:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b90:	85 c0                	test   eax,eax
c0016b92:	74 30                	je     c0016bc4 <displayProgramFault(char const*)+0x53>
c0016b94:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016b99:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016b9e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ba4:	c7 44 24 0c 04 00 00 00 	mov    DWORD PTR [esp+0xc],0x4
c0016bac:	c7 44 24 08 0f 00 00 00 	mov    DWORD PTR [esp+0x8],0xf
c0016bb4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016bb8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bbc:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bbf:	e8 70 1f ff ff       	call   c0008b34 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016bc4:	90                   	nop
c0016bc5:	83 c4 1c             	add    esp,0x1c
c0016bc8:	c3                   	ret    

c0016bc9 <gpFault(regs*, void*)>:
c0016bc9:	83 ec 2c             	sub    esp,0x2c
c0016bcc:	c7 05 10 82 02 c0 c7 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00160c7
c0016bd6:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016bdb:	85 c0                	test   eax,eax
c0016bdd:	74 19                	je     c0016bf8 <gpFault(regs*, void*)+0x2f>
c0016bdf:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016be4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016be8:	89 14 24             	mov    DWORD PTR [esp],edx
c0016beb:	ff d0                	call   eax
c0016bed:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016bf1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016bf6:	75 26                	jne    c0016c1e <gpFault(regs*, void*)+0x55>
c0016bf8:	c7 04 24 2f 12 02 c0 	mov    DWORD PTR [esp],0xc002122f
c0016bff:	e8 6d ff ff ff       	call   c0016b71 <displayProgramFault(char const*)>
c0016c04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c0b:	e8 aa fb ff ff       	call   c00167ba <displayDebugInfo(regs*)>
c0016c10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c17:	e8 b0 ee ff ff       	call   c0015acc <Thr::terminateFromIRQ(int)>
c0016c1c:	eb 01                	jmp    c0016c1f <gpFault(regs*, void*)+0x56>
c0016c1e:	90                   	nop
c0016c1f:	83 c4 2c             	add    esp,0x2c
c0016c22:	c3                   	ret    

c0016c23 <pgFault(regs*, void*)>:
c0016c23:	83 ec 2c             	sub    esp,0x2c
c0016c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c2a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016c2d:	0f 20 d0             	mov    eax,cr2
c0016c30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c38:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016c3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c40:	c7 04 24 0c 13 02 c0 	mov    DWORD PTR [esp],0xc002130c
c0016c47:	e8 2a 3e ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016c4c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c51:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c53:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c56:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016c5c:	0f 20 d2             	mov    edx,cr2
c0016c5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016c63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016c67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c6e:	e8 57 39 ff ff       	call   c000a5ca <VAS::tryLoadBackOffDisk(unsigned long)>
c0016c73:	84 c0                	test   al,al
c0016c75:	75 26                	jne    c0016c9d <pgFault(regs*, void*)+0x7a>
c0016c77:	c7 04 24 48 12 02 c0 	mov    DWORD PTR [esp],0xc0021248
c0016c7e:	e8 ee fe ff ff       	call   c0016b71 <displayProgramFault(char const*)>
c0016c83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c87:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c8a:	e8 2b fb ff ff       	call   c00167ba <displayDebugInfo(regs*)>
c0016c8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016c96:	e8 31 ee ff ff       	call   c0015acc <Thr::terminateFromIRQ(int)>
c0016c9b:	eb 01                	jmp    c0016c9e <pgFault(regs*, void*)+0x7b>
c0016c9d:	90                   	nop
c0016c9e:	83 c4 2c             	add    esp,0x2c
c0016ca1:	c3                   	ret    

c0016ca2 <otherISRHandler(regs*, void*)>:
c0016ca2:	83 ec 1c             	sub    esp,0x1c
c0016ca5:	c7 04 24 34 13 02 c0 	mov    DWORD PTR [esp],0xc0021334
c0016cac:	e8 c0 fe ff ff       	call   c0016b71 <displayProgramFault(char const*)>
c0016cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016cb8:	e8 fd fa ff ff       	call   c00167ba <displayDebugInfo(regs*)>
c0016cbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016cc4:	e8 03 ee ff ff       	call   c0015acc <Thr::terminateFromIRQ(int)>
c0016cc9:	90                   	nop
c0016cca:	83 c4 1c             	add    esp,0x1c
c0016ccd:	c3                   	ret    

c0016cce <opcodeFault(regs*, void*)>:
c0016cce:	55                   	push   ebp
c0016ccf:	89 e5                	mov    ebp,esp
c0016cd1:	83 ec 18             	sub    esp,0x18
c0016cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016cd7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016cda:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016cde:	c7 04 24 53 12 02 c0 	mov    DWORD PTR [esp],0xc0021253
c0016ce5:	e8 8c 3d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016cea:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016cef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016cf5:	0f b6 80 90 11 00 00 	movzx  eax,BYTE PTR [eax+0x1190]
c0016cfc:	84 c0                	test   al,al
c0016cfe:	74 1d                	je     c0016d1d <opcodeFault(regs*, void*)+0x4f>
c0016d00:	c7 04 24 5c 13 02 c0 	mov    DWORD PTR [esp],0xc002135c
c0016d07:	e8 6a 3d ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d0f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d12:	8d 50 19             	lea    edx,[eax+0x19]
c0016d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d18:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016d1b:	eb 23                	jmp    c0016d40 <opcodeFault(regs*, void*)+0x72>
c0016d1d:	c7 04 24 61 12 02 c0 	mov    DWORD PTR [esp],0xc0021261
c0016d24:	e8 48 fe ff ff       	call   c0016b71 <displayProgramFault(char const*)>
c0016d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d2f:	e8 86 fa ff ff       	call   c00167ba <displayDebugInfo(regs*)>
c0016d34:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016d3b:	e8 8c ed ff ff       	call   c0015acc <Thr::terminateFromIRQ(int)>
c0016d40:	c9                   	leave  
c0016d41:	c3                   	ret    

c0016d42 <i386SaveCoprocessor(void*)>:
c0016d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d46:	83 c0 3f             	add    eax,0x3f
c0016d49:	83 e0 c0             	and    eax,0xffffffc0
c0016d4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d50:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016d56 <i386LoadCoprocessor(void*)>:
c0016d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d5a:	83 c0 3f             	add    eax,0x3f
c0016d5d:	83 e0 c0             	and    eax,0xffffffc0
c0016d60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d64:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016d6a <x87EmulHandler(regs*, void*)>:
c0016d6a:	53                   	push   ebx
c0016d6b:	83 ec 08             	sub    esp,0x8
c0016d6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d73:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016d77:	74 10                	je     c0016d89 <x87EmulHandler(regs*, void*)+0x1f>
c0016d79:	83 ec 0c             	sub    esp,0xc
c0016d7c:	68 6e 12 02 c0       	push   0xc002126e
c0016d81:	e8 9f 9a ff ff       	call   c0010825 <KePanic(char const*)>
c0016d86:	83 c4 10             	add    esp,0x10
c0016d89:	0f 20 c0             	mov    eax,cr0
c0016d8c:	a8 08                	test   al,0x8
c0016d8e:	74 59                	je     c0016de9 <x87EmulHandler(regs*, void*)+0x7f>
c0016d90:	0f 06                	clts   
c0016d92:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016d97:	85 c0                	test   eax,eax
c0016d99:	74 0e                	je     c0016da9 <x87EmulHandler(regs*, void*)+0x3f>
c0016d9b:	83 ec 0c             	sub    esp,0xc
c0016d9e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016da1:	e8 9c ff ff ff       	call   c0016d42 <i386SaveCoprocessor(void*)>
c0016da6:	83 c4 10             	add    esp,0x10
c0016da9:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016daf:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016db3:	75 12                	jne    c0016dc7 <x87EmulHandler(regs*, void*)+0x5d>
c0016db5:	83 ec 0c             	sub    esp,0xc
c0016db8:	68 40 02 00 00       	push   0x240
c0016dbd:	e8 3a 0d ff ff       	call   c0007afc <malloc>
c0016dc2:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016dc5:	eb 10                	jmp    c0016dd7 <x87EmulHandler(regs*, void*)+0x6d>
c0016dc7:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016dd2:	e8 7f ff ff ff       	call   c0016d56 <i386LoadCoprocessor(void*)>
c0016dd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ddc:	83 c4 10             	add    esp,0x10
c0016ddf:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016de4:	83 c4 08             	add    esp,0x8
c0016de7:	5b                   	pop    ebx
c0016de8:	c3                   	ret    
c0016de9:	83 ec 0c             	sub    esp,0xc
c0016dec:	68 82 12 02 c0       	push   0xc0021282
c0016df1:	e8 80 3c ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016df6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016dfe:	83 c4 18             	add    esp,0x18
c0016e01:	5b                   	pop    ebx
c0016e02:	e9 c5 ec ff ff       	jmp    c0015acc <Thr::terminateFromIRQ(int)>

c0016e07 <HalInitialiseCoprocessor()>:
c0016e07:	83 ec 10             	sub    esp,0x10
c0016e0a:	6a 00                	push   0x0
c0016e0c:	68 6a 6d 01 c0       	push   0xc0016d6a
c0016e11:	6a 07                	push   0x7
c0016e13:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016e1d:	e8 d9 55 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016e22:	e8 09 6f 00 00       	call   c001dd30 <avxDetect>
c0016e27:	83 c4 10             	add    esp,0x10
c0016e2a:	85 c0                	test   eax,eax
c0016e2c:	74 1c                	je     c0016e4a <HalInitialiseCoprocessor()+0x43>
c0016e2e:	c7 05 0c 82 02 c0 5a dd 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001dd5a
c0016e38:	c7 05 08 82 02 c0 6b dd 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001dd6b
c0016e42:	83 c4 0c             	add    esp,0xc
c0016e45:	e9 32 6f 00 00       	jmp    c001dd7c <avxInit>
c0016e4a:	e8 71 72 00 00       	call   c001e0c0 <absolutelyNoChanceInHell>
c0016e4f:	85 c0                	test   eax,eax
c0016e51:	74 1c                	je     c0016e6f <HalInitialiseCoprocessor()+0x68>
c0016e53:	c7 05 0c 82 02 c0 d8 e0 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e0d8
c0016e5d:	c7 05 08 82 02 c0 e0 e0 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e0e0
c0016e67:	83 c4 0c             	add    esp,0xc
c0016e6a:	e9 79 72 00 00       	jmp    c001e0e8 <sseInit>
c0016e6f:	e8 92 72 00 00       	call   c001e106 <x87Detect>
c0016e74:	85 c0                	test   eax,eax
c0016e76:	74 1c                	je     c0016e94 <HalInitialiseCoprocessor()+0x8d>
c0016e78:	c7 05 0c 82 02 c0 21 e1 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e121
c0016e82:	c7 05 08 82 02 c0 28 e1 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e128
c0016e8c:	83 c4 0c             	add    esp,0xc
c0016e8f:	e9 9b 72 00 00       	jmp    c001e12f <x87Init>
c0016e94:	c7 05 0c 82 02 c0 8f 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001678f
c0016e9e:	c7 05 08 82 02 c0 8f 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001678f
c0016ea8:	0f 20 c0             	mov    eax,cr0
c0016eab:	83 c8 04             	or     eax,0x4
c0016eae:	0f 22 c0             	mov    cr0,eax
c0016eb1:	83 c4 0c             	add    esp,0xc
c0016eb4:	c3                   	ret    

c0016eb5 <HalPanic(char const*)>:
c0016eb5:	53                   	push   ebx
c0016eb6:	83 ec 10             	sub    esp,0x10
c0016eb9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016ebd:	fa                   	cli    
c0016ebe:	53                   	push   ebx
c0016ebf:	68 98 12 02 c0       	push   0xc0021298
c0016ec4:	e8 ad 3b ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0016ec9:	83 c4 0c             	add    esp,0xc
c0016ecc:	6a 01                	push   0x1
c0016ece:	6a 0f                	push   0xf
c0016ed0:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ed6:	e8 fd 16 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016edb:	58                   	pop    eax
c0016edc:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ee2:	e8 e1 18 ff ff       	call   c00087c8 <VgaText::clearScreen()>
c0016ee7:	5a                   	pop    edx
c0016ee8:	59                   	pop    ecx
c0016ee9:	68 e4 fa 01 c0       	push   0xc001fae4
c0016eee:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ef4:	e8 17 17 ff ff       	call   c0008610 <VgaText::setTitle(char*)>
c0016ef9:	83 c4 0c             	add    esp,0xc
c0016efc:	6a 01                	push   0x1
c0016efe:	6a 0f                	push   0xf
c0016f00:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f06:	e8 cd 16 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f0b:	58                   	pop    eax
c0016f0c:	5a                   	pop    edx
c0016f0d:	68 b1 12 02 c0       	push   0xc00212b1
c0016f12:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f18:	e8 a5 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f1d:	83 c4 0c             	add    esp,0xc
c0016f20:	6a 0f                	push   0xf
c0016f22:	6a 01                	push   0x1
c0016f24:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f2a:	e8 a9 16 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f2f:	59                   	pop    ecx
c0016f30:	58                   	pop    eax
c0016f31:	68 ba 12 02 c0       	push   0xc00212ba
c0016f36:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f3c:	e8 81 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f41:	83 c4 0c             	add    esp,0xc
c0016f44:	6a 01                	push   0x1
c0016f46:	6a 0f                	push   0xf
c0016f48:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f4e:	e8 85 16 ff ff       	call   c00085d8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f53:	58                   	pop    eax
c0016f54:	5a                   	pop    edx
c0016f55:	68 fe 12 02 c0       	push   0xc00212fe
c0016f5a:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f60:	e8 5d 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f65:	59                   	pop    ecx
c0016f66:	58                   	pop    eax
c0016f67:	68 c7 12 02 c0       	push   0xc00212c7
c0016f6c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f72:	e8 4b 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f77:	58                   	pop    eax
c0016f78:	5a                   	pop    edx
c0016f79:	68 01 13 02 c0       	push   0xc0021301
c0016f7e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f84:	e8 39 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f89:	59                   	pop    ecx
c0016f8a:	58                   	pop    eax
c0016f8b:	53                   	push   ebx
c0016f8c:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f92:	e8 2b 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016f97:	58                   	pop    eax
c0016f98:	5a                   	pop    edx
c0016f99:	68 fe 12 02 c0       	push   0xc00212fe
c0016f9e:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fa4:	e8 19 1b ff ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0016fa9:	83 c4 10             	add    esp,0x10
c0016fac:	eb fe                	jmp    c0016fac <HalPanic(char const*)+0xf7>

c0016fae <HalQueryPerformanceCounter()>:
c0016fae:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016fb3:	0f 57 c0             	xorps  xmm0,xmm0
c0016fb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fbc:	f6 80 8c 11 00 00 02 	test   BYTE PTR [eax+0x118c],0x2
c0016fc3:	74 0e                	je     c0016fd3 <HalQueryPerformanceCounter()+0x25>
c0016fc5:	0f 31                	rdtsc  
c0016fc7:	66 0f 6e c0          	movd   xmm0,eax
c0016fcb:	66 0f 6e ca          	movd   xmm1,edx
c0016fcf:	66 0f 62 c1          	punpckldq xmm0,xmm1
c0016fd3:	66 0f 7e c0          	movd   eax,xmm0
c0016fd7:	66 0f 73 d0 20       	psrlq  xmm0,0x20
c0016fdc:	66 0f 7e c2          	movd   edx,xmm0
c0016fe0:	c3                   	ret    

c0016fe1 <HalInitialise()>:
c0016fe1:	53                   	push   ebx
c0016fe2:	83 ec 08             	sub    esp,0x8
c0016fe5:	e8 3c 56 ff ff       	call   c000c626 <setupINTS()>
c0016fea:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016fef:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0016ff6:	75 07                	jne    c0016fff <HalInitialise()+0x1e>
c0016ff8:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016fff:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0017006:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c001700d:	e8 aa 02 00 00       	call   c00172bc <picOpen()>
c0017012:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c0017019:	74 0a                	je     c0017025 <HalInitialise()+0x44>
c001701b:	e8 e0 01 00 00       	call   c0017200 <picDisable()>
c0017020:	e8 64 66 00 00       	call   c001d689 <apicOpen()>
c0017025:	50                   	push   eax
c0017026:	bb 0f 00 00 00       	mov    ebx,0xf
c001702b:	6a 00                	push   0x0
c001702d:	68 a2 6c 01 c0       	push   0xc0016ca2
c0017032:	6a 00                	push   0x0
c0017034:	e8 c2 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017039:	83 c4 0c             	add    esp,0xc
c001703c:	6a 00                	push   0x0
c001703e:	68 a2 6c 01 c0       	push   0xc0016ca2
c0017043:	6a 01                	push   0x1
c0017045:	e8 b1 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001704a:	83 c4 0c             	add    esp,0xc
c001704d:	6a 00                	push   0x0
c001704f:	68 90 67 01 c0       	push   0xc0016790
c0017054:	6a 02                	push   0x2
c0017056:	e8 a0 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001705b:	83 c4 0c             	add    esp,0xc
c001705e:	6a 00                	push   0x0
c0017060:	68 a2 6c 01 c0       	push   0xc0016ca2
c0017065:	6a 03                	push   0x3
c0017067:	e8 8f 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001706c:	83 c4 0c             	add    esp,0xc
c001706f:	6a 00                	push   0x0
c0017071:	68 a2 6c 01 c0       	push   0xc0016ca2
c0017076:	6a 04                	push   0x4
c0017078:	e8 7e 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001707d:	83 c4 0c             	add    esp,0xc
c0017080:	6a 00                	push   0x0
c0017082:	68 a2 6c 01 c0       	push   0xc0016ca2
c0017087:	6a 05                	push   0x5
c0017089:	e8 6d 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001708e:	83 c4 0c             	add    esp,0xc
c0017091:	6a 00                	push   0x0
c0017093:	68 ce 6c 01 c0       	push   0xc0016cce
c0017098:	6a 06                	push   0x6
c001709a:	e8 5c 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001709f:	83 c4 0c             	add    esp,0xc
c00170a2:	6a 00                	push   0x0
c00170a4:	68 a5 67 01 c0       	push   0xc00167a5
c00170a9:	6a 08                	push   0x8
c00170ab:	e8 4b 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170b0:	83 c4 0c             	add    esp,0xc
c00170b3:	6a 00                	push   0x0
c00170b5:	68 a2 6c 01 c0       	push   0xc0016ca2
c00170ba:	6a 09                	push   0x9
c00170bc:	e8 3a 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170c1:	83 c4 0c             	add    esp,0xc
c00170c4:	6a 00                	push   0x0
c00170c6:	68 a2 6c 01 c0       	push   0xc0016ca2
c00170cb:	6a 0a                	push   0xa
c00170cd:	e8 29 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170d2:	83 c4 0c             	add    esp,0xc
c00170d5:	6a 00                	push   0x0
c00170d7:	68 a2 6c 01 c0       	push   0xc0016ca2
c00170dc:	6a 0b                	push   0xb
c00170de:	e8 18 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170e3:	83 c4 0c             	add    esp,0xc
c00170e6:	6a 00                	push   0x0
c00170e8:	68 c9 6b 01 c0       	push   0xc0016bc9
c00170ed:	6a 0d                	push   0xd
c00170ef:	e8 07 53 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170f4:	83 c4 0c             	add    esp,0xc
c00170f7:	6a 00                	push   0x0
c00170f9:	68 23 6c 01 c0       	push   0xc0016c23
c00170fe:	6a 0e                	push   0xe
c0017100:	e8 f6 52 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017105:	83 c4 10             	add    esp,0x10
c0017108:	50                   	push   eax
c0017109:	6a 00                	push   0x0
c001710b:	68 a2 6c 01 c0       	push   0xc0016ca2
c0017110:	53                   	push   ebx
c0017111:	43                   	inc    ebx
c0017112:	e8 e4 52 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017117:	83 c4 10             	add    esp,0x10
c001711a:	83 fb 1e             	cmp    ebx,0x1e
c001711d:	75 e9                	jne    c0017108 <HalInitialise()+0x127>
c001711f:	50                   	push   eax
c0017120:	6a 00                	push   0x0
c0017122:	68 2b 1c 01 c0       	push   0xc0011c2b
c0017127:	6a 60                	push   0x60
c0017129:	e8 cd 52 ff ff       	call   c000c3fb <installISRHandler(int, void (*)(regs*, void*), void*)>
c001712e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017133:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001713d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017144:	e8 b3 09 ff ff       	call   c0007afc <malloc>
c0017149:	89 04 24             	mov    DWORD PTR [esp],eax
c001714c:	89 c3                	mov    ebx,eax
c001714e:	e8 5d 09 00 00       	call   c0017ab0 <RTC::RTC()>
c0017153:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001715d:	5a                   	pop    edx
c001715e:	59                   	pop    ecx
c001715f:	53                   	push   ebx
c0017160:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017166:	e8 75 4d ff ff       	call   c000bee0 <Device::addChild(Device*)>
c001716b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001716d:	6a 00                	push   0x0
c001716f:	6a 00                	push   0x0
c0017171:	6a 00                	push   0x0
c0017173:	53                   	push   ebx
c0017174:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017177:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001717c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017182:	83 c4 28             	add    esp,0x28
c0017185:	5b                   	pop    ebx
c0017186:	c3                   	ret    

c0017187 <HalMakeBeep(int)>:
c0017187:	53                   	push   ebx
c0017188:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001718c:	85 db                	test   ebx,ebx
c001718e:	75 06                	jne    c0017196 <HalMakeBeep(int)+0xf>
c0017190:	e4 61                	in     al,0x61
c0017192:	24 fc                	and    al,0xfc
c0017194:	eb 26                	jmp    c00171bc <HalMakeBeep(int)+0x35>
c0017196:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001719b:	99                   	cdq    
c001719c:	f7 fb                	idiv   ebx
c001719e:	89 c1                	mov    ecx,eax
c00171a0:	b0 b6                	mov    al,0xb6
c00171a2:	e6 43                	out    0x43,al
c00171a4:	88 c8                	mov    al,cl
c00171a6:	e6 42                	out    0x42,al
c00171a8:	89 c8                	mov    eax,ecx
c00171aa:	c1 e8 08             	shr    eax,0x8
c00171ad:	e6 42                	out    0x42,al
c00171af:	e4 61                	in     al,0x61
c00171b1:	88 c2                	mov    dl,al
c00171b3:	80 ca 03             	or     dl,0x3
c00171b6:	38 c2                	cmp    dl,al
c00171b8:	74 04                	je     c00171be <HalMakeBeep(int)+0x37>
c00171ba:	88 d0                	mov    al,dl
c00171bc:	e6 61                	out    0x61,al
c00171be:	5b                   	pop    ebx
c00171bf:	c3                   	ret    

c00171c0 <HalGetRand()>:
c00171c0:	31 c0                	xor    eax,eax
c00171c2:	c3                   	ret    

c00171c3 <HalEndOfInterrupt(int)>:
c00171c3:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00171ca:	74 23                	je     c00171ef <HalEndOfInterrupt(int)+0x2c>
c00171cc:	83 ec 14             	sub    esp,0x14
c00171cf:	6a 1b                	push   0x1b
c00171d1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00171d7:	e8 e4 fe fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00171dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00171e1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00171eb:	83 c4 1c             	add    esp,0x1c
c00171ee:	c3                   	ret    
c00171ef:	e9 5c 02 00 00       	jmp    c0017450 <picEOI(int)>

c00171f4 <HalRestart()>:
c00171f4:	c3                   	ret    

c00171f5 <HalShutdown()>:
c00171f5:	c3                   	ret    

c00171f6 <HalSleep()>:
c00171f6:	c3                   	ret    
c00171f7:	90                   	nop

c00171f8 <picIoWait()>:
c00171f8:	eb 00                	jmp    c00171fa <picIoWait()+0x2>
c00171fa:	eb 00                	jmp    c00171fc <picIoWait()+0x4>
c00171fc:	90                   	nop
c00171fd:	c3                   	ret    
c00171fe:	66 90                	xchg   ax,ax

c0017200 <picDisable()>:
c0017200:	83 ec 10             	sub    esp,0x10
c0017203:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001720a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001720f:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c0017214:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0017219:	ee                   	out    dx,al
c001721a:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017221:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017226:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c001722b:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0017230:	ee                   	out    dx,al
c0017231:	90                   	nop
c0017232:	83 c4 10             	add    esp,0x10
c0017235:	c3                   	ret    
c0017236:	66 90                	xchg   ax,ax

c0017238 <picGetIRQReg(int)>:
c0017238:	83 ec 10             	sub    esp,0x10
c001723b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001723f:	0f b6 c0             	movzx  eax,al
c0017242:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017249:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001724d:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c0017252:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0017257:	ee                   	out    dx,al
c0017258:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001725c:	0f b6 c0             	movzx  eax,al
c001725f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017266:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001726a:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001726f:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0017274:	ee                   	out    dx,al
c0017275:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001727c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0017281:	89 c2                	mov    edx,eax
c0017283:	ec                   	in     al,dx
c0017284:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017288:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c001728d:	0f b6 c0             	movzx  eax,al
c0017290:	c1 e0 08             	shl    eax,0x8
c0017293:	0f bf c8             	movsx  ecx,ax
c0017296:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001729d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00172a2:	89 c2                	mov    edx,eax
c00172a4:	ec                   	in     al,dx
c00172a5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00172a9:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c00172ae:	0f b6 c0             	movzx  eax,al
c00172b1:	98                   	cwde   
c00172b2:	09 c8                	or     eax,ecx
c00172b4:	98                   	cwde   
c00172b5:	0f b7 c0             	movzx  eax,ax
c00172b8:	83 c4 10             	add    esp,0x10
c00172bb:	c3                   	ret    

c00172bc <picOpen()>:
c00172bc:	83 ec 50             	sub    esp,0x50
c00172bf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00172c6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00172cb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00172d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00172d4:	ee                   	out    dx,al
c00172d5:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00172dc:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00172e1:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00172e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00172ea:	ee                   	out    dx,al
c00172eb:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00172f3:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00172fb:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017302:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017306:	89 c2                	mov    edx,eax
c0017308:	ec                   	in     al,dx
c0017309:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001730d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0017312:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017316:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001731d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017321:	89 c2                	mov    edx,eax
c0017323:	ec                   	in     al,dx
c0017324:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017328:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001732d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017331:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017338:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001733d:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0017342:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017346:	ee                   	out    dx,al
c0017347:	e8 ac fe ff ff       	call   c00171f8 <picIoWait()>
c001734c:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017353:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017358:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001735d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017361:	ee                   	out    dx,al
c0017362:	e8 91 fe ff ff       	call   c00171f8 <picIoWait()>
c0017367:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001736b:	0f b6 c0             	movzx  eax,al
c001736e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017375:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017379:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001737e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017382:	ee                   	out    dx,al
c0017383:	e8 70 fe ff ff       	call   c00171f8 <picIoWait()>
c0017388:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001738c:	0f b6 c0             	movzx  eax,al
c001738f:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017396:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001739a:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c001739f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00173a3:	ee                   	out    dx,al
c00173a4:	e8 4f fe ff ff       	call   c00171f8 <picIoWait()>
c00173a9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00173b0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00173b5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00173ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173be:	ee                   	out    dx,al
c00173bf:	e8 34 fe ff ff       	call   c00171f8 <picIoWait()>
c00173c4:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00173cb:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00173d0:	0f b6 44 24 33       	movzx  eax,BYTE PTR [esp+0x33]
c00173d5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00173d9:	ee                   	out    dx,al
c00173da:	e8 19 fe ff ff       	call   c00171f8 <picIoWait()>
c00173df:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00173e6:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00173eb:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00173f0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00173f4:	ee                   	out    dx,al
c00173f5:	e8 fe fd ff ff       	call   c00171f8 <picIoWait()>
c00173fa:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017401:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017406:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001740b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001740f:	ee                   	out    dx,al
c0017410:	e8 e3 fd ff ff       	call   c00171f8 <picIoWait()>
c0017415:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001741a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017421:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017425:	0f b6 44 24 3f       	movzx  eax,BYTE PTR [esp+0x3f]
c001742a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001742e:	ee                   	out    dx,al
c001742f:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017434:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001743b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001743f:	0f b6 44 24 43       	movzx  eax,BYTE PTR [esp+0x43]
c0017444:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017448:	ee                   	out    dx,al
c0017449:	90                   	nop
c001744a:	83 c4 50             	add    esp,0x50
c001744d:	c3                   	ret    
c001744e:	66 90                	xchg   ax,ax

c0017450 <picEOI(int)>:
c0017450:	83 ec 14             	sub    esp,0x14
c0017453:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c0017458:	75 1e                	jne    c0017478 <picEOI(int)+0x28>
c001745a:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0017461:	e8 d2 fd ff ff       	call   c0017238 <picGetIRQReg(int)>
c0017466:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001746b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0017470:	25 80 00 00 00       	and    eax,0x80
c0017475:	74 79                	je     c00174f0 <picEOI(int)+0xa0>
c0017477:	90                   	nop
c0017478:	83 7c 24 18 0f       	cmp    DWORD PTR [esp+0x18],0xf
c001747d:	75 35                	jne    c00174b4 <picEOI(int)+0x64>
c001747f:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0017486:	e8 ad fd ff ff       	call   c0017238 <picGetIRQReg(int)>
c001748b:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0017490:	0f bf 44 24 10       	movsx  eax,WORD PTR [esp+0x10]
c0017495:	85 c0                	test   eax,eax
c0017497:	78 1b                	js     c00174b4 <picEOI(int)+0x64>
c0017499:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00174a0:	c6 44 24 0d 20       	mov    BYTE PTR [esp+0xd],0x20
c00174a5:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c00174aa:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00174af:	ee                   	out    dx,al
c00174b0:	eb 42                	jmp    c00174f4 <picEOI(int)+0xa4>
c00174b2:	66 90                	xchg   ax,ax
c00174b4:	83 7c 24 18 07       	cmp    DWORD PTR [esp+0x18],0x7
c00174b9:	7e 19                	jle    c00174d4 <picEOI(int)+0x84>
c00174bb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c00174c2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00174c7:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c00174cc:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00174d1:	ee                   	out    dx,al
c00174d2:	66 90                	xchg   ax,ax
c00174d4:	66 c7 44 24 06 20 00 	mov    WORD PTR [esp+0x6],0x20
c00174db:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00174e0:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c00174e5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00174ea:	ee                   	out    dx,al
c00174eb:	eb 07                	jmp    c00174f4 <picEOI(int)+0xa4>
c00174ed:	8d 76 00             	lea    esi,[esi+0x0]
c00174f0:	90                   	nop
c00174f1:	8d 76 00             	lea    esi,[esi+0x0]
c00174f4:	83 c4 14             	add    esp,0x14
c00174f7:	c3                   	ret    

c00174f8 <RTC::open(int, int, void*)>:
c00174f8:	31 c0                	xor    eax,eax
c00174fa:	c3                   	ret    
c00174fb:	90                   	nop

c00174fc <RTC::close(int, int, void*)>:
c00174fc:	31 c0                	xor    eax,eax
c00174fe:	c3                   	ret    
c00174ff:	90                   	nop

c0017500 <RTC::timeInSecondsUTC()>:
c0017500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017504:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001750a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017510:	c3                   	ret    
c0017511:	90                   	nop

c0017512 <RTC::timeInDatetimeUTC()>:
c0017512:	53                   	push   ebx
c0017513:	83 ec 14             	sub    esp,0x14
c0017516:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001751a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001751e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017520:	50                   	push   eax
c0017521:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017524:	83 c4 0c             	add    esp,0xc
c0017527:	52                   	push   edx
c0017528:	50                   	push   eax
c0017529:	53                   	push   ebx
c001752a:	e8 22 47 ff ff       	call   c000bc51 <secondsToDatetime(unsigned long long)>
c001752f:	89 d8                	mov    eax,ebx
c0017531:	83 c4 14             	add    esp,0x14
c0017534:	5b                   	pop    ebx
c0017535:	c2 04 00             	ret    0x4

c0017538 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017538:	56                   	push   esi
c0017539:	53                   	push   ebx
c001753a:	83 ec 14             	sub    esp,0x14
c001753d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017541:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017543:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0017546:	8d 44 24 08          	lea    eax,[esp+0x8]
c001754a:	52                   	push   edx
c001754b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001754f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017553:	50                   	push   eax
c0017554:	e8 f8 46 ff ff       	call   c000bc51 <secondsToDatetime(unsigned long long)>
c0017559:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001755d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017561:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017565:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017569:	89 f0                	mov    eax,esi
c001756b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001756f:	83 c4 20             	add    esp,0x20
c0017572:	5b                   	pop    ebx
c0017573:	5e                   	pop    esi
c0017574:	ff e0                	jmp    eax

c0017576 <RTC::~RTC()>:
c0017576:	83 ec 1c             	sub    esp,0x1c
c0017579:	ba 9c 13 02 c0       	mov    edx,0xc002139c
c001757e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017582:	89 10                	mov    DWORD PTR [eax],edx
c0017584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017588:	89 04 24             	mov    DWORD PTR [esp],eax
c001758b:	e8 1c 44 ff ff       	call   c000b9ac <Clock::~Clock()>
c0017590:	90                   	nop
c0017591:	83 c4 1c             	add    esp,0x1c
c0017594:	c3                   	ret    
c0017595:	90                   	nop

c0017596 <RTC::~RTC()>:
c0017596:	83 ec 1c             	sub    esp,0x1c
c0017599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001759d:	89 04 24             	mov    DWORD PTR [esp],eax
c00175a0:	e8 d1 ff ff ff       	call   c0017576 <RTC::~RTC()>
c00175a5:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c00175ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00175b4:	e8 a3 33 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c00175b9:	83 c4 1c             	add    esp,0x1c
c00175bc:	c3                   	ret    
c00175bd:	90                   	nop

c00175be <RTC::get_update_in_progress_flag()>:
c00175be:	83 ec 14             	sub    esp,0x14
c00175c1:	6a 0a                	push   0xa
c00175c3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00175c9:	e8 cc fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00175ce:	83 c4 1c             	add    esp,0x1c
c00175d1:	c0 e8 07             	shr    al,0x7
c00175d4:	c3                   	ret    
c00175d5:	90                   	nop

c00175d6 <RTC::completeRTCRefresh()>:
c00175d6:	57                   	push   edi
c00175d7:	56                   	push   esi
c00175d8:	53                   	push   ebx
c00175d9:	83 ec 20             	sub    esp,0x20
c00175dc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00175e0:	8b 35 8c 74 02 c0    	mov    esi,DWORD PTR ds:0xc002748c
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	53                   	push   ebx
c00175ea:	e8 cf ff ff ff       	call   c00175be <RTC::get_update_in_progress_flag()>
c00175ef:	83 c4 10             	add    esp,0x10
c00175f2:	84 c0                	test   al,al
c00175f4:	74 0e                	je     c0017604 <RTC::completeRTCRefresh()+0x2e>
c00175f6:	8d 86 20 4e 00 00    	lea    eax,[esi+0x4e20]
c00175fc:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017602:	73 e2                	jae    c00175e6 <RTC::completeRTCRefresh()+0x10>
c0017604:	51                   	push   ecx
c0017605:	51                   	push   ecx
c0017606:	6a 00                	push   0x0
c0017608:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001760e:	e8 87 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017613:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017617:	5e                   	pop    esi
c0017618:	5f                   	pop    edi
c0017619:	6a 02                	push   0x2
c001761b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017621:	e8 74 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017626:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001762a:	58                   	pop    eax
c001762b:	5a                   	pop    edx
c001762c:	6a 04                	push   0x4
c001762e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017634:	e8 61 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017639:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001763d:	59                   	pop    ecx
c001763e:	5e                   	pop    esi
c001763f:	6a 07                	push   0x7
c0017641:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017647:	e8 4e fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001764c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0017650:	5f                   	pop    edi
c0017651:	58                   	pop    eax
c0017652:	6a 08                	push   0x8
c0017654:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001765a:	e8 3b fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001765f:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017663:	58                   	pop    eax
c0017664:	5a                   	pop    edx
c0017665:	6a 09                	push   0x9
c0017667:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001766d:	e8 28 fb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017672:	83 c4 10             	add    esp,0x10
c0017675:	0f b6 f0             	movzx  esi,al
c0017678:	8b 3d 8c 74 02 c0    	mov    edi,DWORD PTR ds:0xc002748c
c001767e:	83 ec 0c             	sub    esp,0xc
c0017681:	53                   	push   ebx
c0017682:	e8 37 ff ff ff       	call   c00175be <RTC::get_update_in_progress_flag()>
c0017687:	83 c4 10             	add    esp,0x10
c001768a:	84 c0                	test   al,al
c001768c:	74 0e                	je     c001769c <RTC::completeRTCRefresh()+0xc6>
c001768e:	8d 87 20 4e 00 00    	lea    eax,[edi+0x4e20]
c0017694:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001769a:	73 e2                	jae    c001767e <RTC::completeRTCRefresh()+0xa8>
c001769c:	57                   	push   edi
c001769d:	57                   	push   edi
c001769e:	6a 00                	push   0x0
c00176a0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176a6:	e8 ef fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176ab:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00176af:	58                   	pop    eax
c00176b0:	5a                   	pop    edx
c00176b1:	6a 02                	push   0x2
c00176b3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176b9:	e8 dc fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176be:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00176c2:	59                   	pop    ecx
c00176c3:	5f                   	pop    edi
c00176c4:	6a 04                	push   0x4
c00176c6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176cc:	e8 c9 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00176d5:	58                   	pop    eax
c00176d6:	5a                   	pop    edx
c00176d7:	6a 07                	push   0x7
c00176d9:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176df:	e8 b6 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176e4:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00176e8:	59                   	pop    ecx
c00176e9:	5f                   	pop    edi
c00176ea:	6a 08                	push   0x8
c00176ec:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176f2:	e8 a3 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00176f7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00176fb:	58                   	pop    eax
c00176fc:	5a                   	pop    edx
c00176fd:	6a 09                	push   0x9
c00176ff:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017705:	e8 90 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001770a:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c001770e:	83 c4 10             	add    esp,0x10
c0017711:	0f b6 f8             	movzx  edi,al
c0017714:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0017718:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001771c:	74 2f                	je     c001774d <RTC::completeRTCRefresh()+0x177>
c001771e:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0017722:	89 fe                	mov    esi,edi
c0017724:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017728:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c001772c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0017730:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017734:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0017738:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001773c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017740:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0017744:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017748:	e9 2b ff ff ff       	jmp    c0017678 <RTC::completeRTCRefresh()+0xa2>
c001774d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017751:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c0017755:	75 c7                	jne    c001771e <RTC::completeRTCRefresh()+0x148>
c0017757:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001775b:	38 4c 24 1d          	cmp    BYTE PTR [esp+0x1d],cl
c001775f:	8a 4c 24 19          	mov    cl,BYTE PTR [esp+0x19]
c0017763:	0f 94 c2             	sete   dl
c0017766:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001776a:	0f 94 c1             	sete   cl
c001776d:	20 d1                	and    cl,dl
c001776f:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c0017773:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0017777:	0f 94 c2             	sete   dl
c001777a:	84 d1                	test   cl,dl
c001777c:	74 a0                	je     c001771e <RTC::completeRTCRefresh()+0x148>
c001777e:	39 fe                	cmp    esi,edi
c0017780:	75 9c                	jne    c001771e <RTC::completeRTCRefresh()+0x148>
c0017782:	56                   	push   esi
c0017783:	56                   	push   esi
c0017784:	6a 0b                	push   0xb
c0017786:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001778c:	e8 09 fa fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017791:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017795:	24 04                	and    al,0x4
c0017797:	83 c4 10             	add    esp,0x10
c001779a:	84 c0                	test   al,al
c001779c:	0f 85 8c 00 00 00    	jne    c001782e <RTC::completeRTCRefresh()+0x258>
c00177a2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00177a6:	c1 ef 04             	shr    edi,0x4
c00177a9:	b1 0a                	mov    cl,0xa
c00177ab:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00177af:	6b ff 0a             	imul   edi,edi,0xa
c00177b2:	c0 e8 04             	shr    al,0x4
c00177b5:	f6 e1                	mul    cl
c00177b7:	80 e2 0f             	and    dl,0xf
c00177ba:	00 c2                	add    dl,al
c00177bc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177c0:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c00177c4:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00177c8:	c0 e8 04             	shr    al,0x4
c00177cb:	f6 e1                	mul    cl
c00177cd:	80 e2 0f             	and    dl,0xf
c00177d0:	00 c2                	add    dl,al
c00177d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00177d6:	88 54 24 10          	mov    BYTE PTR [esp+0x10],dl
c00177da:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00177de:	c0 e8 04             	shr    al,0x4
c00177e1:	24 07                	and    al,0x7
c00177e3:	80 e2 0f             	and    dl,0xf
c00177e6:	f6 e1                	mul    cl
c00177e8:	00 d0                	add    al,dl
c00177ea:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00177ee:	80 e2 80             	and    dl,0x80
c00177f1:	08 d0                	or     al,dl
c00177f3:	8a 54 24 19          	mov    dl,BYTE PTR [esp+0x19]
c00177f7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00177fb:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00177ff:	80 e2 0f             	and    dl,0xf
c0017802:	c0 e8 04             	shr    al,0x4
c0017805:	f6 e1                	mul    cl
c0017807:	00 c2                	add    dl,al
c0017809:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001780d:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c0017811:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
c0017815:	c0 e8 04             	shr    al,0x4
c0017818:	f6 e1                	mul    cl
c001781a:	80 e2 0f             	and    dl,0xf
c001781d:	00 c2                	add    dl,al
c001781f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0017823:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017827:	24 0f                	and    al,0xf
c0017829:	0f b6 c0             	movzx  eax,al
c001782c:	01 c7                	add    edi,eax
c001782e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017832:	24 02                	and    al,0x2
c0017834:	75 20                	jne    c0017856 <RTC::completeRTCRefresh()+0x280>
c0017836:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001783b:	79 19                	jns    c0017856 <RTC::completeRTCRefresh()+0x280>
c001783d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017841:	b9 18 00 00 00       	mov    ecx,0x18
c0017846:	80 e2 7f             	and    dl,0x7f
c0017849:	0f b6 d2             	movzx  edx,dl
c001784c:	8d 42 0c             	lea    eax,[edx+0xc]
c001784f:	99                   	cdq    
c0017850:	f7 f9                	idiv   ecx
c0017852:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0017856:	8d b7 d0 07 00 00    	lea    esi,[edi+0x7d0]
c001785c:	81 fe e3 07 00 00    	cmp    esi,0x7e3
c0017862:	77 06                	ja     c001786a <RTC::completeRTCRefresh()+0x294>
c0017864:	8d b7 34 08 00 00    	lea    esi,[edi+0x834]
c001786a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001786f:	c1 e6 10             	shl    esi,0x10
c0017872:	31 d2                	xor    edx,edx
c0017874:	89 d7                	mov    edi,edx
c0017876:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001787c:	c1 e0 10             	shl    eax,0x10
c001787f:	89 c1                	mov    ecx,eax
c0017881:	31 c0                	xor    eax,eax
c0017883:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0017887:	09 cf                	or     edi,ecx
c0017889:	8a 64 24 14          	mov    ah,BYTE PTR [esp+0x14]
c001788d:	89 fa                	mov    edx,edi
c001788f:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0017893:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017897:	0f b7 c8             	movzx  ecx,ax
c001789a:	09 f1                	or     ecx,esi
c001789c:	89 c8                	mov    eax,ecx
c001789e:	51                   	push   ecx
c001789f:	51                   	push   ecx
c00178a0:	52                   	push   edx
c00178a1:	50                   	push   eax
c00178a2:	e8 18 42 ff ff       	call   c000babf <datetimeToSeconds(datetime_t)>
c00178a7:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c00178ad:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c00178b3:	83 c4 30             	add    esp,0x30
c00178b6:	5b                   	pop    ebx
c00178b7:	5e                   	pop    esi
c00178b8:	5f                   	pop    edi
c00178b9:	c3                   	ret    

c00178ba <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00178ba:	53                   	push   ebx
c00178bb:	83 ec 1c             	sub    esp,0x1c
c00178be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178c2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00178c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00178ca:	6a 00                	push   0x0
c00178cc:	6a 00                	push   0x0
c00178ce:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178d4:	e8 ff f9 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178d9:	83 c4 0c             	add    esp,0xc
c00178dc:	6a 00                	push   0x0
c00178de:	6a 02                	push   0x2
c00178e0:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00178e6:	e8 ed f9 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00178eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178ef:	89 d8                	mov    eax,ebx
c00178f1:	c1 e8 10             	shr    eax,0x10
c00178f4:	b9 64 00 00 00       	mov    ecx,0x64
c00178f9:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00178fd:	0f b6 c7             	movzx  eax,bh
c0017900:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017904:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0017908:	0f b6 c6             	movzx  eax,dh
c001790b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001790f:	89 d0                	mov    eax,edx
c0017911:	31 d2                	xor    edx,edx
c0017913:	c1 e8 10             	shr    eax,0x10
c0017916:	f7 f1                	div    ecx
c0017918:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
c001791c:	59                   	pop    ecx
c001791d:	58                   	pop    eax
c001791e:	6a 0b                	push   0xb
c0017920:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017926:	e8 6f f8 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001792b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001792f:	24 04                	and    al,0x4
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	84 c0                	test   al,al
c0017936:	75 78                	jne    c00179b0 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf6>
c0017938:	0f b6 44 24 0d       	movzx  eax,BYTE PTR [esp+0xd]
c001793d:	b1 0a                	mov    cl,0xa
c001793f:	f6 f1                	div    cl
c0017941:	88 c2                	mov    dl,al
c0017943:	0f b6 c4             	movzx  eax,ah
c0017946:	c0 e2 04             	shl    dl,0x4
c0017949:	08 c2                	or     dl,al
c001794b:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001794f:	88 54 24 0d          	mov    BYTE PTR [esp+0xd],dl
c0017953:	f6 f1                	div    cl
c0017955:	88 c2                	mov    dl,al
c0017957:	0f b6 c4             	movzx  eax,ah
c001795a:	c0 e2 04             	shl    dl,0x4
c001795d:	08 c2                	or     dl,al
c001795f:	0f b6 c3             	movzx  eax,bl
c0017962:	f6 f1                	div    cl
c0017964:	88 14 24             	mov    BYTE PTR [esp],dl
c0017967:	88 c3                	mov    bl,al
c0017969:	0f b6 c4             	movzx  eax,ah
c001796c:	c0 e3 04             	shl    bl,0x4
c001796f:	08 c3                	or     bl,al
c0017971:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0017976:	f6 f1                	div    cl
c0017978:	88 c2                	mov    dl,al
c001797a:	0f b6 c4             	movzx  eax,ah
c001797d:	c0 e2 04             	shl    dl,0x4
c0017980:	08 c2                	or     dl,al
c0017982:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017987:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001798b:	f6 f1                	div    cl
c001798d:	88 c2                	mov    dl,al
c001798f:	0f b6 c4             	movzx  eax,ah
c0017992:	c0 e2 04             	shl    dl,0x4
c0017995:	08 c2                	or     dl,al
c0017997:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001799c:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c00179a0:	f6 f1                	div    cl
c00179a2:	88 c2                	mov    dl,al
c00179a4:	0f b6 c4             	movzx  eax,ah
c00179a7:	c0 e2 04             	shl    dl,0x4
c00179aa:	08 c2                	or     dl,al
c00179ac:	88 54 24 0e          	mov    BYTE PTR [esp+0xe],dl
c00179b0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00179b4:	24 02                	and    al,0x2
c00179b6:	75 17                	jne    c00179cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00179b8:	80 fb 0b             	cmp    bl,0xb
c00179bb:	76 0c                	jbe    c00179c9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00179bd:	80 eb 0c             	sub    bl,0xc
c00179c0:	75 02                	jne    c00179c4 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00179c2:	b3 0c                	mov    bl,0xc
c00179c4:	80 cb 80             	or     bl,0x80
c00179c7:	eb 06                	jmp    c00179cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00179c9:	84 db                	test   bl,bl
c00179cb:	75 02                	jne    c00179cf <RTC::setTimeInDatetimeUTC(datetime_t)+0x115>
c00179cd:	b3 0c                	mov    bl,0xc
c00179cf:	50                   	push   eax
c00179d0:	0f b6 db             	movzx  ebx,bl
c00179d3:	0f b6 44 24 11       	movzx  eax,BYTE PTR [esp+0x11]
c00179d8:	50                   	push   eax
c00179d9:	6a 00                	push   0x0
c00179db:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179e1:	e8 f2 f8 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179e6:	83 c4 0c             	add    esp,0xc
c00179e9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179ee:	50                   	push   eax
c00179ef:	6a 02                	push   0x2
c00179f1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179f7:	e8 dc f8 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179fc:	83 c4 0c             	add    esp,0xc
c00179ff:	53                   	push   ebx
c0017a00:	6a 04                	push   0x4
c0017a02:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a08:	e8 cb f8 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a0d:	83 c4 0c             	add    esp,0xc
c0017a10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a15:	50                   	push   eax
c0017a16:	6a 07                	push   0x7
c0017a18:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a1e:	e8 b5 f8 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a23:	83 c4 0c             	add    esp,0xc
c0017a26:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017a2b:	50                   	push   eax
c0017a2c:	6a 08                	push   0x8
c0017a2e:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a34:	e8 9f f8 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a39:	83 c4 0c             	add    esp,0xc
c0017a3c:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0017a41:	52                   	push   edx
c0017a42:	6a 09                	push   0x9
c0017a44:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a4a:	e8 89 f8 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a4f:	5a                   	pop    edx
c0017a50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a54:	e8 7d fb ff ff       	call   c00175d6 <RTC::completeRTCRefresh()>
c0017a59:	83 c4 28             	add    esp,0x28
c0017a5c:	b0 01                	mov    al,0x1
c0017a5e:	5b                   	pop    ebx
c0017a5f:	c3                   	ret    

c0017a60 <rtcIRQHandler(regs*, void*)>:
c0017a60:	53                   	push   ebx
c0017a61:	83 ec 10             	sub    esp,0x10
c0017a64:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017a68:	6a 0c                	push   0xc
c0017a6a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a70:	e8 25 f7 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	84 c0                	test   al,al
c0017a7a:	79 2f                	jns    c0017aab <rtcIRQHandler(regs*, void*)+0x4b>
c0017a7c:	66 a1 14 82 02 c0    	mov    ax,ds:0xc0028214
c0017a82:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017a89:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017a90:	40                   	inc    eax
c0017a91:	0f b7 c0             	movzx  eax,ax
c0017a94:	66 a3 14 82 02 c0    	mov    ds:0xc0028214,ax
c0017a9a:	85 c0                	test   eax,eax
c0017a9c:	75 0d                	jne    c0017aab <rtcIRQHandler(regs*, void*)+0x4b>
c0017a9e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017aa2:	83 c4 08             	add    esp,0x8
c0017aa5:	5b                   	pop    ebx
c0017aa6:	e9 2b fb ff ff       	jmp    c00175d6 <RTC::completeRTCRefresh()>
c0017aab:	83 c4 08             	add    esp,0x8
c0017aae:	5b                   	pop    ebx
c0017aaf:	c3                   	ret    

c0017ab0 <RTC::RTC()>:
c0017ab0:	83 ec 3c             	sub    esp,0x3c
c0017ab3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ab7:	c7 44 24 04 7f 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002137f
c0017abf:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ac2:	e8 af 3e ff ff       	call   c000b976 <Clock::Clock(char const*)>
c0017ac7:	ba 9c 13 02 c0       	mov    edx,0xc002139c
c0017acc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ad0:	89 10                	mov    DWORD PTR [eax],edx
c0017ad2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ad6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017ada:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017ade:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017ae6:	c7 44 24 08 60 7a 01 c0 	mov    DWORD PTR [esp+0x8],0xc0017a60
c0017aee:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0017af6:	89 04 24             	mov    DWORD PTR [esp],eax
c0017af9:	e8 90 43 ff ff       	call   c000be8e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017afe:	89 c2                	mov    edx,eax
c0017b00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017b04:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b0a:	fa                   	cli    
c0017b0b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b10:	40                   	inc    eax
c0017b11:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b16:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b1b:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017b23:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b26:	e8 6f f6 fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0017b2b:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017b2f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b34:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0017b39:	80 ca 10             	or     dl,0x10
c0017b3c:	0f b6 d2             	movzx  edx,dl
c0017b3f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017b43:	c7 44 24 04 0b 00 00 00 	mov    DWORD PTR [esp+0x4],0xb
c0017b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b4e:	e8 85 f7 fe ff       	call   c00072d8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017b57:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b5a:	e8 77 fa ff ff       	call   c00175d6 <RTC::completeRTCRefresh()>
c0017b5f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b64:	48                   	dec    eax
c0017b65:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b6a:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b6f:	85 c0                	test   eax,eax
c0017b71:	75 01                	jne    c0017b74 <RTC::RTC()+0xc4>
c0017b73:	fb                   	sti    
c0017b74:	90                   	nop
c0017b75:	83 c4 3c             	add    esp,0x3c
c0017b78:	c3                   	ret    
c0017b79:	66 90                	xchg   ax,ax
c0017b7b:	90                   	nop

c0017b7c <HalConsoleScroll(int, int)>:
c0017b7c:	83 ec 10             	sub    esp,0x10
c0017b7f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017b87:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017b8f:	90                   	nop
c0017b90:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017b95:	0f 8f e1 00 00 00    	jg     c0017c7c <HalConsoleScroll(int, int)+0x100>
c0017b9b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017ba3:	90                   	nop
c0017ba4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017bac:	0f 8f be 00 00 00    	jg     c0017c70 <HalConsoleScroll(int, int)+0xf4>
c0017bb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bb6:	89 d0                	mov    eax,edx
c0017bb8:	c1 e0 02             	shl    eax,0x2
c0017bbb:	01 d0                	add    eax,edx
c0017bbd:	c1 e0 05             	shl    eax,0x5
c0017bc0:	89 c2                	mov    edx,eax
c0017bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bc6:	01 d0                	add    eax,edx
c0017bc8:	89 c2                	mov    edx,eax
c0017bca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bce:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017bd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bd5:	89 d0                	mov    eax,edx
c0017bd7:	c1 e0 02             	shl    eax,0x2
c0017bda:	01 d0                	add    eax,edx
c0017bdc:	c1 e0 05             	shl    eax,0x5
c0017bdf:	89 c2                	mov    edx,eax
c0017be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017be5:	01 d0                	add    eax,edx
c0017be7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bf1:	01 d0                	add    eax,edx
c0017bf3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017bf6:	88 10                	mov    BYTE PTR [eax],dl
c0017bf8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017bfd:	75 65                	jne    c0017c64 <HalConsoleScroll(int, int)+0xe8>
c0017bff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c03:	83 e0 01             	and    eax,0x1
c0017c06:	74 38                	je     c0017c40 <HalConsoleScroll(int, int)+0xc4>
c0017c08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c0c:	24 0f                	and    al,0xf
c0017c0e:	88 c2                	mov    dl,al
c0017c10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c14:	c1 e0 04             	shl    eax,0x4
c0017c17:	88 d1                	mov    cl,dl
c0017c19:	08 c1                	or     cl,al
c0017c1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c1f:	89 d0                	mov    eax,edx
c0017c21:	c1 e0 02             	shl    eax,0x2
c0017c24:	01 d0                	add    eax,edx
c0017c26:	c1 e0 05             	shl    eax,0x5
c0017c29:	89 c2                	mov    edx,eax
c0017c2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c2f:	01 d0                	add    eax,edx
c0017c31:	89 c2                	mov    edx,eax
c0017c33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c37:	01 d0                	add    eax,edx
c0017c39:	88 ca                	mov    dl,cl
c0017c3b:	88 10                	mov    BYTE PTR [eax],dl
c0017c3d:	eb 25                	jmp    c0017c64 <HalConsoleScroll(int, int)+0xe8>
c0017c3f:	90                   	nop
c0017c40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c44:	89 d0                	mov    eax,edx
c0017c46:	c1 e0 02             	shl    eax,0x2
c0017c49:	01 d0                	add    eax,edx
c0017c4b:	c1 e0 05             	shl    eax,0x5
c0017c4e:	89 c2                	mov    edx,eax
c0017c50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c54:	01 d0                	add    eax,edx
c0017c56:	89 c2                	mov    edx,eax
c0017c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c5c:	01 d0                	add    eax,edx
c0017c5e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017c61:	8d 76 00             	lea    esi,[esi+0x0]
c0017c64:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017c68:	e9 37 ff ff ff       	jmp    c0017ba4 <HalConsoleScroll(int, int)+0x28>
c0017c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0017c70:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017c74:	e9 17 ff ff ff       	jmp    c0017b90 <HalConsoleScroll(int, int)+0x14>
c0017c79:	8d 76 00             	lea    esi,[esi+0x0]
c0017c7c:	90                   	nop
c0017c7d:	83 c4 10             	add    esp,0x10
c0017c80:	c3                   	ret    
c0017c81:	8d 76 00             	lea    esi,[esi+0x0]

c0017c84 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017c84:	83 ec 14             	sub    esp,0x14
c0017c87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c8b:	88 04 24             	mov    BYTE PTR [esp],al
c0017c8e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0017c92:	0f b6 c0             	movzx  eax,al
c0017c95:	0f bf d0             	movsx  edx,ax
c0017c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c9c:	83 e0 0f             	and    eax,0xf
c0017c9f:	89 c1                	mov    ecx,eax
c0017ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ca5:	c1 e0 04             	shl    eax,0x4
c0017ca8:	0f b6 c0             	movzx  eax,al
c0017cab:	09 c8                	or     eax,ecx
c0017cad:	c1 e0 08             	shl    eax,0x8
c0017cb0:	98                   	cwde   
c0017cb1:	09 d0                	or     eax,edx
c0017cb3:	98                   	cwde   
c0017cb4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017cb9:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017cc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc5:	89 d0                	mov    eax,edx
c0017cc7:	c1 e0 02             	shl    eax,0x2
c0017cca:	01 d0                	add    eax,edx
c0017ccc:	c1 e0 04             	shl    eax,0x4
c0017ccf:	89 c2                	mov    edx,eax
c0017cd1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cd5:	01 d0                	add    eax,edx
c0017cd7:	01 c0                	add    eax,eax
c0017cd9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ce1:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0017ce6:	66 89 10             	mov    WORD PTR [eax],dx
c0017ce9:	90                   	nop
c0017cea:	83 c4 14             	add    esp,0x14
c0017ced:	c3                   	ret    
c0017cee:	66 90                	xchg   ax,ax

c0017cf0 <HalConsoleCursorUpdate(int, int)>:
c0017cf0:	83 ec 20             	sub    esp,0x20
c0017cf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cf7:	0f b7 c0             	movzx  eax,ax
c0017cfa:	89 c2                	mov    edx,eax
c0017cfc:	c1 e2 02             	shl    edx,0x2
c0017cff:	01 d0                	add    eax,edx
c0017d01:	c1 e0 04             	shl    eax,0x4
c0017d04:	0f b7 d0             	movzx  edx,ax
c0017d07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d0b:	0f b7 c0             	movzx  eax,ax
c0017d0e:	01 d0                	add    eax,edx
c0017d10:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d15:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d1c:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d21:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d2a:	ee                   	out    dx,al
c0017d2b:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017d30:	0f b6 c0             	movzx  eax,al
c0017d33:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d3a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d3e:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0017d43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d47:	ee                   	out    dx,al
c0017d48:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017d4f:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017d54:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0017d59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d5d:	ee                   	out    dx,al
c0017d5e:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017d63:	c1 e8 08             	shr    eax,0x8
c0017d66:	0f b7 c0             	movzx  eax,ax
c0017d69:	0f b6 c0             	movzx  eax,al
c0017d6c:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017d73:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017d77:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017d7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d80:	ee                   	out    dx,al
c0017d81:	90                   	nop
c0017d82:	83 c4 20             	add    esp,0x20
c0017d85:	c3                   	ret    
c0017d86:	66 90                	xchg   ax,ax

c0017d88 <FAT::getName()>:
c0017d88:	b8 d0 13 02 c0       	mov    eax,0xc00213d0
c0017d8d:	c3                   	ret    
c0017d8e:	66 90                	xchg   ax,ax

c0017d90 <FAT::tell(void*, unsigned long long*)>:
c0017d90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017d95:	75 09                	jne    c0017da0 <FAT::tell(void*, unsigned long long*)+0x10>
c0017d97:	b8 04 00 00 00       	mov    eax,0x4
c0017d9c:	c3                   	ret    
c0017d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0017da0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017da5:	75 09                	jne    c0017db0 <FAT::tell(void*, unsigned long long*)+0x20>
c0017da7:	b8 04 00 00 00       	mov    eax,0x4
c0017dac:	c3                   	ret    
c0017dad:	8d 76 00             	lea    esi,[esi+0x0]
c0017db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017db4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017db7:	ba 00 00 00 00       	mov    edx,0x0
c0017dbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017dc0:	89 01                	mov    DWORD PTR [ecx],eax
c0017dc2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017dc5:	b8 00 00 00 00       	mov    eax,0x0
c0017dca:	c3                   	ret    
c0017dcb:	90                   	nop

c0017dcc <FAT::stat(void*, unsigned long long*)>:
c0017dcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017dd1:	75 09                	jne    c0017ddc <FAT::stat(void*, unsigned long long*)+0x10>
c0017dd3:	b8 04 00 00 00       	mov    eax,0x4
c0017dd8:	c3                   	ret    
c0017dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ddc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017de1:	75 09                	jne    c0017dec <FAT::stat(void*, unsigned long long*)+0x20>
c0017de3:	b8 04 00 00 00       	mov    eax,0x4
c0017de8:	c3                   	ret    
c0017de9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017df0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017df3:	ba 00 00 00 00       	mov    edx,0x0
c0017df8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017dfc:	89 01                	mov    DWORD PTR [ecx],eax
c0017dfe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e01:	b8 00 00 00 00       	mov    eax,0x0
c0017e06:	c3                   	ret    
c0017e07:	90                   	nop

c0017e08 <FAT::~FAT()>:
c0017e08:	83 ec 1c             	sub    esp,0x1c
c0017e0b:	ba 1c 14 02 c0       	mov    edx,0xc002141c
c0017e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e14:	89 10                	mov    DWORD PTR [eax],edx
c0017e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e1d:	e8 a6 2f ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c0017e22:	90                   	nop
c0017e23:	83 c4 1c             	add    esp,0x1c
c0017e26:	c3                   	ret    
c0017e27:	90                   	nop

c0017e28 <FAT::~FAT()>:
c0017e28:	83 ec 1c             	sub    esp,0x1c
c0017e2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e32:	e8 d1 ff ff ff       	call   c0017e08 <FAT::~FAT()>
c0017e37:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0017e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e43:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e46:	e8 11 2b ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c0017e4b:	83 c4 1c             	add    esp,0x1c
c0017e4e:	c3                   	ret    
c0017e4f:	90                   	nop

c0017e50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017e50:	83 ec 2c             	sub    esp,0x2c
c0017e53:	66 c7 44 24 19 30 3a 	mov    WORD PTR [esp+0x19],0x3a30
c0017e5a:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0017e5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e63:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017e6a:	83 f8 ff             	cmp    eax,0xffffffff
c0017e6d:	75 35                	jne    c0017ea4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017e6f:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017e74:	88 c2                	mov    dl,al
c0017e76:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e7b:	00 d0                	add    al,dl
c0017e7d:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017e81:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017e87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017e8b:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017e92:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017e97:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017e9b:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017ea2:	eb 18                	jmp    c0017ebc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017ea4:	0f b6 44 24 19       	movzx  eax,BYTE PTR [esp+0x19]
c0017ea9:	88 c2                	mov    dl,al
c0017eab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017eaf:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017eb6:	00 d0                	add    al,dl
c0017eb8:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0017ebc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ec4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ec8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ecc:	8d 44 24 19          	lea    eax,[esp+0x19]
c0017ed0:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ed3:	e8 f1 d0 fe ff       	call   c0004fc9 <f_getlabel>
c0017ed8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017edc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017ee1:	75 09                	jne    c0017eec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x9c>
c0017ee3:	b8 00 00 00 00       	mov    eax,0x0
c0017ee8:	eb 0a                	jmp    c0017ef4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa4>
c0017eea:	66 90                	xchg   ax,ax
c0017eec:	b8 01 00 00 00       	mov    eax,0x1
c0017ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ef4:	83 c4 2c             	add    esp,0x2c
c0017ef7:	c3                   	ret    

c0017ef8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017ef8:	53                   	push   ebx
c0017ef9:	83 ec 68             	sub    esp,0x68
c0017efc:	c7 44 24 1c 30 3a 00 00 	mov    DWORD PTR [esp+0x1c],0x3a30
c0017f04:	8d 54 24 20          	lea    edx,[esp+0x20]
c0017f08:	b9 00 00 00 00       	mov    ecx,0x0
c0017f0d:	b8 3c 00 00 00       	mov    eax,0x3c
c0017f12:	83 e0 f8             	and    eax,0xfffffff8
c0017f15:	89 c3                	mov    ebx,eax
c0017f17:	b8 00 00 00 00       	mov    eax,0x0
c0017f1c:	89 4c 04 20          	mov    DWORD PTR [esp+eax*1+0x20],ecx
c0017f20:	89 4c 04 24          	mov    DWORD PTR [esp+eax*1+0x24],ecx
c0017f24:	83 c0 08             	add    eax,0x8
c0017f27:	39 d8                	cmp    eax,ebx
c0017f29:	72 f1                	jb     c0017f1c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0017f2b:	01 c2                	add    edx,eax
c0017f2d:	89 0a                	mov    DWORD PTR [edx],ecx
c0017f2f:	83 c2 04             	add    edx,0x4
c0017f32:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017f36:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f3d:	83 f8 ff             	cmp    eax,0xffffffff
c0017f40:	75 36                	jne    c0017f78 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0017f42:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017f47:	88 c2                	mov    dl,al
c0017f49:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f4e:	00 d0                	add    al,dl
c0017f50:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017f54:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f5a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017f5e:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f65:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0017f6e:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017f75:	eb 19                	jmp    c0017f90 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0017f77:	90                   	nop
c0017f78:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017f7d:	88 c2                	mov    dl,al
c0017f7f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0017f83:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f8a:	00 d0                	add    al,dl
c0017f8c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017f90:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017f94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f98:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017f9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f9f:	e8 8c 89 fe ff       	call   c0000930 <strcat>
c0017fa4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017fa8:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fab:	e8 6d d1 fe ff       	call   c000511d <f_setlabel>
c0017fb0:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0017fb4:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0017fb9:	75 09                	jne    c0017fc4 <FAT::setlabel(LogicalDisk*, int, char*)+0xcc>
c0017fbb:	b8 00 00 00 00       	mov    eax,0x0
c0017fc0:	eb 0a                	jmp    c0017fcc <FAT::setlabel(LogicalDisk*, int, char*)+0xd4>
c0017fc2:	66 90                	xchg   ax,ax
c0017fc4:	b8 01 00 00 00       	mov    eax,0x1
c0017fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fcc:	83 c4 68             	add    esp,0x68
c0017fcf:	5b                   	pop    ebx
c0017fd0:	c3                   	ret    
c0017fd1:	90                   	nop
c0017fd2:	66 90                	xchg   ax,ax

c0017fd4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017fd4:	83 ec 3c             	sub    esp,0x3c
c0017fd7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017fdf:	c7 44 24 04 f4 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213f4
c0017fe7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017feb:	89 04 24             	mov    DWORD PTR [esp],eax
c0017fee:	e8 4d 88 fe ff       	call   c0000840 <strcmp>
c0017ff3:	85 c0                	test   eax,eax
c0017ff5:	0f 94 c0             	sete   al
c0017ff8:	84 c0                	test   al,al
c0017ffa:	74 10                	je     c001800c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017ffc:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0018004:	e9 b3 00 00 00       	jmp    c00180bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018009:	8d 76 00             	lea    esi,[esi+0x0]
c001800c:	c7 44 24 04 e6 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213e6
c0018014:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018018:	89 04 24             	mov    DWORD PTR [esp],eax
c001801b:	e8 20 88 fe ff       	call   c0000840 <strcmp>
c0018020:	85 c0                	test   eax,eax
c0018022:	0f 94 c0             	sete   al
c0018025:	84 c0                	test   al,al
c0018027:	74 0f                	je     c0018038 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0018029:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c0018031:	e9 86 00 00 00       	jmp    c00180bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018036:	66 90                	xchg   ax,ax
c0018038:	c7 44 24 04 ec 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213ec
c0018040:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018044:	89 04 24             	mov    DWORD PTR [esp],eax
c0018047:	e8 f4 87 fe ff       	call   c0000840 <strcmp>
c001804c:	85 c0                	test   eax,eax
c001804e:	0f 94 c0             	sete   al
c0018051:	84 c0                	test   al,al
c0018053:	74 0b                	je     c0018060 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0018055:	c7 44 24 2c 01 00 00 00 	mov    DWORD PTR [esp+0x2c],0x1
c001805d:	eb 5d                	jmp    c00180bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001805f:	90                   	nop
c0018060:	c7 44 24 04 9c f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f19c
c0018068:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001806c:	89 04 24             	mov    DWORD PTR [esp],eax
c001806f:	e8 cc 87 fe ff       	call   c0000840 <strcmp>
c0018074:	85 c0                	test   eax,eax
c0018076:	0f 94 c0             	sete   al
c0018079:	84 c0                	test   al,al
c001807b:	74 0b                	je     c0018088 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001807d:	c7 44 24 2c 02 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2
c0018085:	eb 35                	jmp    c00180bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0018087:	90                   	nop
c0018088:	c7 44 24 04 f2 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213f2
c0018090:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018094:	89 04 24             	mov    DWORD PTR [esp],eax
c0018097:	e8 a4 87 fe ff       	call   c0000840 <strcmp>
c001809c:	85 c0                	test   eax,eax
c001809e:	0f 94 c0             	sete   al
c00180a1:	84 c0                	test   al,al
c00180a3:	74 0b                	je     c00180b0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00180a5:	c7 44 24 2c 04 00 00 00 	mov    DWORD PTR [esp+0x2c],0x4
c00180ad:	eb 0d                	jmp    c00180bc <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00180af:	90                   	nop
c00180b0:	b8 08 00 00 00       	mov    eax,0x8
c00180b5:	e9 f2 00 00 00       	jmp    c00181ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00180ba:	66 90                	xchg   ax,ax
c00180bc:	66 c7 44 24 21 30 3a 	mov    WORD PTR [esp+0x21],0x3a30
c00180c3:	c6 44 24 23 00       	mov    BYTE PTR [esp+0x23],0x0
c00180c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180cc:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c00180d3:	83 f8 ff             	cmp    eax,0xffffffff
c00180d6:	75 38                	jne    c0018110 <FAT::format(LogicalDisk*, int, char const*, int)+0x13c>
c00180d8:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c00180dd:	88 c2                	mov    dl,al
c00180df:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00180e4:	00 d0                	add    al,dl
c00180e6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180ea:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c00180f0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180f4:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c00180fb:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018100:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018104:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001810b:	eb 1b                	jmp    c0018128 <FAT::format(LogicalDisk*, int, char const*, int)+0x154>
c001810d:	8d 76 00             	lea    esi,[esi+0x0]
c0018110:	0f b6 44 24 21       	movzx  eax,BYTE PTR [esp+0x21]
c0018115:	88 c2                	mov    dl,al
c0018117:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001811b:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018122:	00 d0                	add    al,dl
c0018124:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018128:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0018130:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018134:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018138:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018140:	c6 44 24 11 02       	mov    BYTE PTR [esp+0x11],0x2
c0018145:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001814d:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018154:	e8 a3 f9 fe ff       	call   c0007afc <malloc>
c0018159:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001815d:	c7 44 24 0c 00 20 00 00 	mov    DWORD PTR [esp+0xc],0x2000
c0018165:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018169:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001816d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018175:	8d 44 24 21          	lea    eax,[esp+0x21]
c0018179:	89 04 24             	mov    DWORD PTR [esp],eax
c001817c:	e8 8a d2 fe ff       	call   c000540b <f_mkfs>
c0018181:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018185:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001818a:	75 08                	jne    c0018194 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c0>
c001818c:	b8 00 00 00 00       	mov    eax,0x0
c0018191:	eb 19                	jmp    c00181ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018193:	90                   	nop
c0018194:	83 7c 24 24 0e       	cmp    DWORD PTR [esp+0x24],0xe
c0018199:	75 09                	jne    c00181a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001819b:	b8 09 00 00 00       	mov    eax,0x9
c00181a0:	eb 0a                	jmp    c00181ac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00181a2:	66 90                	xchg   ax,ax
c00181a4:	b8 01 00 00 00       	mov    eax,0x1
c00181a9:	8d 76 00             	lea    esi,[esi+0x0]
c00181ac:	83 c4 3c             	add    esp,0x3c
c00181af:	c3                   	ret    

c00181b0 <FAT::tryMount(LogicalDisk*, int)>:
c00181b0:	81 ec 5c 03 00 00    	sub    esp,0x35c
c00181b6:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181bb:	83 f8 14             	cmp    eax,0x14
c00181be:	75 14                	jne    c00181d4 <FAT::tryMount(LogicalDisk*, int)+0x24>
c00181c0:	c7 04 24 f8 13 02 c0 	mov    DWORD PTR [esp],0xc00213f8
c00181c7:	e8 59 86 ff ff       	call   c0010825 <KePanic(char const*)>
c00181cc:	b0 00                	mov    al,0x0
c00181ce:	e9 f1 01 00 00       	jmp    c00183c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181d3:	90                   	nop
c00181d4:	8b 84 24 64 03 00 00 	mov    eax,DWORD PTR [esp+0x364]
c00181db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00181e1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00181e7:	3d 00 02 00 00       	cmp    eax,0x200
c00181ec:	74 0a                	je     c00181f8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00181ee:	b0 00                	mov    al,0x0
c00181f0:	e9 cf 01 00 00       	jmp    c00183c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00181f5:	8d 76 00             	lea    esi,[esi+0x0]
c00181f8:	c6 84 24 4f 03 00 00 00 	mov    BYTE PTR [esp+0x34f],0x0
c0018200:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c0018207:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001820e:	83 f8 ff             	cmp    eax,0xffffffff
c0018211:	74 09                	je     c001821c <FAT::tryMount(LogicalDisk*, int)+0x6c>
c0018213:	b0 01                	mov    al,0x1
c0018215:	e9 aa 01 00 00       	jmp    c00183c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001821a:	66 90                	xchg   ax,ax
c001821c:	66 c7 84 24 41 03 00 00 30 3a 	mov    WORD PTR [esp+0x341],0x3a30
c0018226:	c6 84 24 43 03 00 00 00 	mov    BYTE PTR [esp+0x343],0x0
c001822e:	0f b6 84 24 41 03 00 00 	movzx  eax,BYTE PTR [esp+0x341]
c0018236:	88 c2                	mov    dl,al
c0018238:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001823d:	00 d0                	add    al,dl
c001823f:	88 84 24 41 03 00 00 	mov    BYTE PTR [esp+0x341],al
c0018246:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001824c:	8b 84 24 68 03 00 00 	mov    eax,DWORD PTR [esp+0x368]
c0018253:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001825a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001825f:	8b 94 24 68 03 00 00 	mov    edx,DWORD PTR [esp+0x368]
c0018266:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001826d:	c7 04 24 34 02 00 00 	mov    DWORD PTR [esp],0x234
c0018274:	e8 83 f8 fe ff       	call   c0007afc <malloc>
c0018279:	89 84 24 48 03 00 00 	mov    DWORD PTR [esp+0x348],eax
c0018280:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018288:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c001828f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018293:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c001829a:	89 04 24             	mov    DWORD PTR [esp],eax
c001829d:	e8 a9 b9 fe ff       	call   c0003c4b <f_mount>
c00182a2:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c00182a9:	83 bc 24 44 03 00 00 00 	cmp    DWORD PTR [esp+0x344],0x0
c00182b1:	74 19                	je     c00182cc <FAT::tryMount(LogicalDisk*, int)+0x11c>
c00182b3:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c00182ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00182bd:	e8 60 f8 fe ff       	call   c0007b22 <rfree>
c00182c2:	b0 00                	mov    al,0x0
c00182c4:	e9 fb 00 00 00       	jmp    c00183c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00182c9:	8d 76 00             	lea    esi,[esi+0x0]
c00182cc:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00182d4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00182dc:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00182e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00182e6:	e8 95 82 fe ff       	call   c0000580 <memset>
c00182eb:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c00182f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00182f6:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c00182fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0018300:	e8 2b 86 fe ff       	call   c0000930 <strcat>
c0018305:	c7 44 24 04 06 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021406
c001830d:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c0018314:	89 04 24             	mov    DWORD PTR [esp],eax
c0018317:	e8 14 86 fe ff       	call   c0000930 <strcat>
c001831c:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0018324:	8d 84 24 41 02 00 00 	lea    eax,[esp+0x241]
c001832b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001832f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018333:	89 04 24             	mov    DWORD PTR [esp],eax
c0018336:	e8 72 b9 fe ff       	call   c0003cad <f_open>
c001833b:	89 84 24 44 03 00 00 	mov    DWORD PTR [esp+0x344],eax
c0018342:	8b 84 24 44 03 00 00 	mov    eax,DWORD PTR [esp+0x344]
c0018349:	85 c0                	test   eax,eax
c001834b:	74 0b                	je     c0018358 <FAT::tryMount(LogicalDisk*, int)+0x1a8>
c001834d:	78 2d                	js     c001837c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001834f:	83 e8 04             	sub    eax,0x4
c0018352:	83 f8 01             	cmp    eax,0x1
c0018355:	77 25                	ja     c001837c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018357:	90                   	nop
c0018358:	c6 84 24 4f 03 00 00 01 	mov    BYTE PTR [esp+0x34f],0x1
c0018360:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018364:	89 04 24             	mov    DWORD PTR [esp],eax
c0018367:	e8 d1 c0 fe ff       	call   c000443d <f_close>
c001836c:	90                   	nop
c001836d:	80 bc 24 4f 03 00 00 00 	cmp    BYTE PTR [esp+0x34f],0x0
c0018375:	74 45                	je     c00183bc <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018377:	eb 37                	jmp    c00183b0 <FAT::tryMount(LogicalDisk*, int)+0x200>
c0018379:	8d 76 00             	lea    esi,[esi+0x0]
c001837c:	8b 84 24 48 03 00 00 	mov    eax,DWORD PTR [esp+0x348]
c0018383:	89 04 24             	mov    DWORD PTR [esp],eax
c0018386:	e8 97 f7 fe ff       	call   c0007b22 <rfree>
c001838b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018393:	8d 84 24 41 03 00 00 	lea    eax,[esp+0x341]
c001839a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001839e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00183a5:	e8 a1 b8 fe ff       	call   c0003c4b <f_mount>
c00183aa:	b0 00                	mov    al,0x0
c00183ac:	eb 16                	jmp    c00183c4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183ae:	66 90                	xchg   ax,ax
c00183b0:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00183b5:	40                   	inc    eax
c00183b6:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00183bb:	90                   	nop
c00183bc:	0f b6 84 24 4f 03 00 00 	movzx  eax,BYTE PTR [esp+0x34f]
c00183c4:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183ca:	c3                   	ret    
c00183cb:	90                   	nop

c00183cc <FAT::allocateSwapfile(char const*, int)>:
c00183cc:	53                   	push   ebx
c00183cd:	81 ec 68 04 00 00    	sub    esp,0x468
c00183d3:	c7 84 24 50 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x450],0x114
c00183de:	8b 84 24 50 04 00 00 	mov    eax,DWORD PTR [esp+0x450]
c00183e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00183e8:	e8 0f f7 fe ff       	call   c0007afc <malloc>
c00183ed:	89 c3                	mov    ebx,eax
c00183ef:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00183f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00183f8:	8b 84 24 74 04 00 00 	mov    eax,DWORD PTR [esp+0x474]
c00183ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018403:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018406:	e8 ed 2b ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001840b:	89 9c 24 5c 04 00 00 	mov    DWORD PTR [esp+0x45c],ebx
c0018412:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c0018416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001841a:	8d 44 24 40          	lea    eax,[esp+0x40]
c001841e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018422:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018429:	89 04 24             	mov    DWORD PTR [esp],eax
c001842c:	e8 2b 2f ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c0018431:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018438:	c1 e0 14             	shl    eax,0x14
c001843b:	89 c1                	mov    ecx,eax
c001843d:	89 c3                	mov    ebx,eax
c001843f:	c1 fb 1f             	sar    ebx,0x1f
c0018442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018446:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001844a:	31 c8                	xor    eax,ecx
c001844c:	31 da                	xor    edx,ebx
c001844e:	09 d0                	or     eax,edx
c0018450:	0f 84 aa 00 00 00    	je     c0018500 <FAT::allocateSwapfile(char const*, int)+0x134>
c0018456:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c001845d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018460:	e8 c9 2d ff ff       	call   c000b22e <File::unlink()>
c0018465:	c7 44 24 04 12 00 00 00 	mov    DWORD PTR [esp+0x4],0x12
c001846d:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018474:	89 04 24             	mov    DWORD PTR [esp],eax
c0018477:	e8 3a 2c ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c001847c:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018483:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018489:	89 84 24 58 04 00 00 	mov    DWORD PTR [esp+0x458],eax
c0018490:	8b 84 24 78 04 00 00 	mov    eax,DWORD PTR [esp+0x478]
c0018497:	c1 e0 14             	shl    eax,0x14
c001849a:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c00184a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184a6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00184b0:	e8 f8 cd fe ff       	call   c00052ad <f_expand>
c00184b5:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c00184bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00184be:	83 c0 10             	add    eax,0x10
c00184c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00184c3:	8d 54 24 48          	lea    edx,[esp+0x48]
c00184c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00184cb:	8d 54 24 50          	lea    edx,[esp+0x50]
c00184cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00184d3:	c7 44 24 04 00 04 00 00 	mov    DWORD PTR [esp+0x4],0x400
c00184db:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00184e3:	8b 94 24 5c 04 00 00 	mov    edx,DWORD PTR [esp+0x45c]
c00184ea:	89 14 24             	mov    DWORD PTR [esp],edx
c00184ed:	ff d0                	call   eax
c00184ef:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c00184f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00184f9:	e8 16 2c ff ff       	call   c000b114 <File::close()>
c00184fe:	66 90                	xchg   ax,ax
c0018500:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0018508:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c001850f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018512:	e8 9f 2b ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c0018517:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c001851e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018520:	83 c0 0c             	add    eax,0xc
c0018523:	8b 00                	mov    eax,DWORD PTR [eax]
c0018525:	8d 54 24 48          	lea    edx,[esp+0x48]
c0018529:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001852d:	8d 54 24 4c          	lea    edx,[esp+0x4c]
c0018531:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018535:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c001853d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018545:	8b 94 24 5c 04 00 00 	mov    edx,DWORD PTR [esp+0x45c]
c001854c:	89 14 24             	mov    DWORD PTR [esp],edx
c001854f:	ff d0                	call   eax
c0018551:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c0018558:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001855e:	89 84 24 58 04 00 00 	mov    DWORD PTR [esp+0x458],eax
c0018565:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001856c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001856f:	89 84 24 54 04 00 00 	mov    DWORD PTR [esp+0x454],eax
c0018576:	8b 84 24 5c 04 00 00 	mov    eax,DWORD PTR [esp+0x45c]
c001857d:	89 04 24             	mov    DWORD PTR [esp],eax
c0018580:	e8 8f 2b ff ff       	call   c000b114 <File::close()>
c0018585:	66 0f 6e 84 24 54 04 00 00 	movd   xmm0,DWORD PTR [esp+0x454]
c001858e:	66 0f d6 44 24 28    	movq   QWORD PTR [esp+0x28],xmm0
c0018594:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018598:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001859c:	81 c4 68 04 00 00    	add    esp,0x468
c00185a2:	5b                   	pop    ebx
c00185a3:	c3                   	ret    

c00185a4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00185a4:	57                   	push   edi
c00185a5:	56                   	push   esi
c00185a6:	53                   	push   ebx
c00185a7:	81 ec 60 02 00 00    	sub    esp,0x260
c00185ad:	83 bc 24 74 02 00 00 00 	cmp    DWORD PTR [esp+0x274],0x0
c00185b5:	74 0d                	je     c00185c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00185b7:	83 bc 24 80 02 00 00 00 	cmp    DWORD PTR [esp+0x280],0x0
c00185bf:	75 0f                	jne    c00185d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00185c1:	8d 76 00             	lea    esi,[esi+0x0]
c00185c4:	b8 04 00 00 00       	mov    eax,0x4
c00185c9:	e9 32 01 00 00       	jmp    c0018700 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00185ce:	66 90                	xchg   ax,ax
c00185d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00185d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00185db:	8b 84 24 74 02 00 00 	mov    eax,DWORD PTR [esp+0x274]
c00185e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00185e5:	e8 15 c1 fe ff       	call   c00046ff <f_readdir>
c00185ea:	89 84 24 5c 02 00 00 	mov    DWORD PTR [esp+0x25c],eax
c00185f1:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00185f8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00185ff:	83 c0 16             	add    eax,0x16
c0018602:	89 04 24             	mov    DWORD PTR [esp],eax
c0018605:	e8 16 80 fe ff       	call   c0000620 <strlen>
c001860a:	ba 00 00 00 00       	mov    edx,0x0
c001860f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018613:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0018617:	0f b6 84 24 30 01 00 00 	movzx  eax,BYTE PTR [esp+0x130]
c001861f:	0f b6 c0             	movzx  eax,al
c0018622:	83 e0 10             	and    eax,0x10
c0018625:	74 09                	je     c0018630 <FAT::readDir(void*, unsigned long, void*, int*)+0x8c>
c0018627:	b8 02 00 00 00       	mov    eax,0x2
c001862c:	eb 0a                	jmp    c0018638 <FAT::readDir(void*, unsigned long, void*, int*)+0x94>
c001862e:	66 90                	xchg   ax,ax
c0018630:	b8 01 00 00 00       	mov    eax,0x1
c0018635:	8d 76 00             	lea    esi,[esi+0x0]
c0018638:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001863c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018643:	83 c0 16             	add    eax,0x16
c0018646:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001864a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001864e:	83 c0 10             	add    eax,0x10
c0018651:	89 04 24             	mov    DWORD PTR [esp],eax
c0018654:	e8 c7 80 fe ff       	call   c0000720 <strcpy>
c0018659:	8b 84 24 7c 02 00 00 	mov    eax,DWORD PTR [esp+0x27c]
c0018660:	89 84 24 58 02 00 00 	mov    DWORD PTR [esp+0x258],eax
c0018667:	8d 44 24 18          	lea    eax,[esp+0x18]
c001866b:	89 84 24 54 02 00 00 	mov    DWORD PTR [esp+0x254],eax
c0018672:	8b 84 24 78 02 00 00 	mov    eax,DWORD PTR [esp+0x278]
c0018679:	89 84 24 50 02 00 00 	mov    DWORD PTR [esp+0x250],eax
c0018680:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c0018687:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001868e:	8b 84 24 54 02 00 00 	mov    eax,DWORD PTR [esp+0x254]
c0018695:	8b 94 24 58 02 00 00 	mov    edx,DWORD PTR [esp+0x258]
c001869c:	8b 8c 24 50 02 00 00 	mov    ecx,DWORD PTR [esp+0x250]
c00186a3:	89 c6                	mov    esi,eax
c00186a5:	89 d7                	mov    edi,edx
c00186a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00186a9:	89 c8                	mov    eax,ecx
c00186ab:	89 fa                	mov    edx,edi
c00186ad:	89 f3                	mov    ebx,esi
c00186af:	89 9c 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],ebx
c00186b6:	89 94 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],edx
c00186bd:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186c4:	8b 84 24 80 02 00 00 	mov    eax,DWORD PTR [esp+0x280]
c00186cb:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00186d1:	0f b6 84 24 3e 01 00 00 	movzx  eax,BYTE PTR [esp+0x13e]
c00186d9:	84 c0                	test   al,al
c00186db:	75 07                	jne    c00186e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x140>
c00186dd:	b8 07 00 00 00       	mov    eax,0x7
c00186e2:	eb 1c                	jmp    c0018700 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00186e4:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c00186eb:	85 c0                	test   eax,eax
c00186ed:	75 09                	jne    c00186f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x154>
c00186ef:	b8 00 00 00 00       	mov    eax,0x0
c00186f4:	eb 0a                	jmp    c0018700 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00186f6:	66 90                	xchg   ax,ax
c00186f8:	b8 01 00 00 00       	mov    eax,0x1
c00186fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018700:	81 c4 60 02 00 00    	add    esp,0x260
c0018706:	5b                   	pop    ebx
c0018707:	5e                   	pop    esi
c0018708:	5f                   	pop    edi
c0018709:	c3                   	ret    
c001870a:	66 90                	xchg   ax,ax

c001870c <FAT::read(void*, unsigned long, void*, int*)>:
c001870c:	83 ec 2c             	sub    esp,0x2c
c001870f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018714:	74 0a                	je     c0018720 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018716:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001871b:	75 0b                	jne    c0018728 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001871d:	8d 76 00             	lea    esi,[esi+0x0]
c0018720:	b8 04 00 00 00       	mov    eax,0x4
c0018725:	eb 4d                	jmp    c0018774 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c0018727:	90                   	nop
c0018728:	8d 44 24 18          	lea    eax,[esp+0x18]
c001872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018730:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018734:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018738:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001873c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018740:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018744:	89 04 24             	mov    DWORD PTR [esp],eax
c0018747:	e8 2b b8 fe ff       	call   c0003f77 <f_read>
c001874c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018750:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018754:	89 c2                	mov    edx,eax
c0018756:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001875a:	89 10                	mov    DWORD PTR [eax],edx
c001875c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018760:	85 c0                	test   eax,eax
c0018762:	75 08                	jne    c001876c <FAT::read(void*, unsigned long, void*, int*)+0x60>
c0018764:	b8 00 00 00 00       	mov    eax,0x0
c0018769:	eb 09                	jmp    c0018774 <FAT::read(void*, unsigned long, void*, int*)+0x68>
c001876b:	90                   	nop
c001876c:	b8 01 00 00 00       	mov    eax,0x1
c0018771:	8d 76 00             	lea    esi,[esi+0x0]
c0018774:	83 c4 2c             	add    esp,0x2c
c0018777:	c3                   	ret    

c0018778 <FAT::write(void*, unsigned long, void*, int*)>:
c0018778:	83 ec 2c             	sub    esp,0x2c
c001877b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018780:	74 0a                	je     c001878c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0018782:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018787:	75 0b                	jne    c0018794 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018789:	8d 76 00             	lea    esi,[esi+0x0]
c001878c:	b8 04 00 00 00       	mov    eax,0x4
c0018791:	eb 4d                	jmp    c00187e0 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c0018793:	90                   	nop
c0018794:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018798:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001879c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00187a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00187a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00187b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00187b3:	e8 9b b9 fe ff       	call   c0004153 <f_write>
c00187b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187c0:	89 c2                	mov    edx,eax
c00187c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187c6:	89 10                	mov    DWORD PTR [eax],edx
c00187c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00187cc:	85 c0                	test   eax,eax
c00187ce:	75 08                	jne    c00187d8 <FAT::write(void*, unsigned long, void*, int*)+0x60>
c00187d0:	b8 00 00 00 00       	mov    eax,0x0
c00187d5:	eb 09                	jmp    c00187e0 <FAT::write(void*, unsigned long, void*, int*)+0x68>
c00187d7:	90                   	nop
c00187d8:	b8 01 00 00 00       	mov    eax,0x1
c00187dd:	8d 76 00             	lea    esi,[esi+0x0]
c00187e0:	83 c4 2c             	add    esp,0x2c
c00187e3:	c3                   	ret    

c00187e4 <FAT::close(void*)>:
c00187e4:	83 ec 2c             	sub    esp,0x2c
c00187e7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00187ec:	75 0a                	jne    c00187f8 <FAT::close(void*)+0x14>
c00187ee:	b8 04 00 00 00       	mov    eax,0x4
c00187f3:	eb 37                	jmp    c001882c <FAT::close(void*)+0x48>
c00187f5:	8d 76 00             	lea    esi,[esi+0x0]
c00187f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00187fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00187ff:	e8 39 bc fe ff       	call   c000443d <f_close>
c0018804:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018808:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001880c:	89 04 24             	mov    DWORD PTR [esp],eax
c001880f:	e8 fb f2 fe ff       	call   c0007b0f <free>
c0018814:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018818:	85 c0                	test   eax,eax
c001881a:	75 08                	jne    c0018824 <FAT::close(void*)+0x40>
c001881c:	b8 00 00 00 00       	mov    eax,0x0
c0018821:	eb 09                	jmp    c001882c <FAT::close(void*)+0x48>
c0018823:	90                   	nop
c0018824:	b8 01 00 00 00       	mov    eax,0x1
c0018829:	8d 76 00             	lea    esi,[esi+0x0]
c001882c:	83 c4 2c             	add    esp,0x2c
c001882f:	c3                   	ret    

c0018830 <FAT::closeDir(void*)>:
c0018830:	83 ec 2c             	sub    esp,0x2c
c0018833:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018838:	75 0a                	jne    c0018844 <FAT::closeDir(void*)+0x14>
c001883a:	b8 04 00 00 00       	mov    eax,0x4
c001883f:	eb 37                	jmp    c0018878 <FAT::closeDir(void*)+0x48>
c0018841:	8d 76 00             	lea    esi,[esi+0x0]
c0018844:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018848:	89 04 24             	mov    DWORD PTR [esp],eax
c001884b:	e8 8d be fe ff       	call   c00046dd <f_closedir>
c0018850:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018854:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018858:	89 04 24             	mov    DWORD PTR [esp],eax
c001885b:	e8 af f2 fe ff       	call   c0007b0f <free>
c0018860:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018864:	85 c0                	test   eax,eax
c0018866:	75 08                	jne    c0018870 <FAT::closeDir(void*)+0x40>
c0018868:	b8 00 00 00 00       	mov    eax,0x0
c001886d:	eb 09                	jmp    c0018878 <FAT::closeDir(void*)+0x48>
c001886f:	90                   	nop
c0018870:	b8 01 00 00 00       	mov    eax,0x1
c0018875:	8d 76 00             	lea    esi,[esi+0x0]
c0018878:	83 c4 2c             	add    esp,0x2c
c001887b:	c3                   	ret    

c001887c <FAT::seek(void*, unsigned long long)>:
c001887c:	83 ec 3c             	sub    esp,0x3c
c001887f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018883:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018887:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001888b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001888f:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018894:	75 0a                	jne    c00188a0 <FAT::seek(void*, unsigned long long)+0x24>
c0018896:	b8 04 00 00 00       	mov    eax,0x4
c001889b:	eb 33                	jmp    c00188d0 <FAT::seek(void*, unsigned long long)+0x54>
c001889d:	8d 76 00             	lea    esi,[esi+0x0]
c00188a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00188a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00188ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00188af:	e8 b8 bb fe ff       	call   c000446c <f_lseek>
c00188b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00188b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00188bc:	85 c0                	test   eax,eax
c00188be:	75 08                	jne    c00188c8 <FAT::seek(void*, unsigned long long)+0x4c>
c00188c0:	b8 00 00 00 00       	mov    eax,0x0
c00188c5:	eb 09                	jmp    c00188d0 <FAT::seek(void*, unsigned long long)+0x54>
c00188c7:	90                   	nop
c00188c8:	b8 01 00 00 00       	mov    eax,0x1
c00188cd:	8d 76 00             	lea    esi,[esi+0x0]
c00188d0:	83 c4 3c             	add    esp,0x3c
c00188d3:	c3                   	ret    

c00188d4 <fatWrapperReadDisk>:
c00188d4:	83 ec 3c             	sub    esp,0x3c
c00188d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00188db:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00188df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00188e4:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00188eb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00188ef:	66 0f 6e 44 24 48    	movd   xmm0,DWORD PTR [esp+0x48]
c00188f5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00188f9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00188fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018901:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c0018907:	89 04 24             	mov    DWORD PTR [esp],eax
c001890a:	e8 07 49 ff ff       	call   c000d216 <LogicalDisk::read(unsigned long long, int, void*)>
c001890f:	83 c4 3c             	add    esp,0x3c
c0018912:	c3                   	ret    
c0018913:	90                   	nop

c0018914 <fatWrapperWriteDisk>:
c0018914:	83 ec 3c             	sub    esp,0x3c
c0018917:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001891b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001891f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018924:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001892b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001892f:	66 0f 6e 44 24 48    	movd   xmm0,DWORD PTR [esp+0x48]
c0018935:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0018939:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001893d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018941:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c0018947:	89 04 24             	mov    DWORD PTR [esp],eax
c001894a:	e8 33 49 ff ff       	call   c000d282 <LogicalDisk::write(unsigned long long, int, void*)>
c001894f:	83 c4 3c             	add    esp,0x3c
c0018952:	c3                   	ret    
c0018953:	90                   	nop

c0018954 <fatWrapperIoctl>:
c0018954:	53                   	push   ebx
c0018955:	83 ec 38             	sub    esp,0x38
c0018958:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001895c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018960:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018964:	88 d0                	mov    al,dl
c0018966:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001896a:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001896f:	75 37                	jne    c00189a8 <fatWrapperIoctl+0x54>
c0018971:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018975:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018979:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001897e:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0018985:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001898b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018991:	0f b7 d0             	movzx  edx,ax
c0018994:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018998:	66 89 10             	mov    WORD PTR [eax],dx
c001899b:	b8 00 00 00 00       	mov    eax,0x0
c00189a0:	e9 c3 00 00 00       	jmp    c0018a68 <fatWrapperIoctl+0x114>
c00189a5:	8d 76 00             	lea    esi,[esi+0x0]
c00189a8:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00189ad:	75 71                	jne    c0018a20 <fatWrapperIoctl+0xcc>
c00189af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00189b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00189b7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00189bc:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189c9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00189cf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00189d5:	89 c8                	mov    eax,ecx
c00189d7:	89 da                	mov    edx,ebx
c00189d9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00189dd:	c1 e0 0a             	shl    eax,0xa
c00189e0:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c00189e5:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c00189ec:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00189f2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00189f8:	89 cb                	mov    ebx,ecx
c00189fa:	c1 fb 1f             	sar    ebx,0x1f
c00189fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018a01:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018a05:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018a0c:	e8 2f 5a 00 00       	call   c001e440 <__udivdi3>
c0018a11:	89 c2                	mov    edx,eax
c0018a13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a17:	89 10                	mov    DWORD PTR [eax],edx
c0018a19:	b8 00 00 00 00       	mov    eax,0x0
c0018a1e:	eb 48                	jmp    c0018a68 <fatWrapperIoctl+0x114>
c0018a20:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018a25:	75 09                	jne    c0018a30 <fatWrapperIoctl+0xdc>
c0018a27:	b8 00 00 00 00       	mov    eax,0x0
c0018a2c:	eb 3a                	jmp    c0018a68 <fatWrapperIoctl+0x114>
c0018a2e:	66 90                	xchg   ax,ax
c0018a30:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0018a35:	75 19                	jne    c0018a50 <fatWrapperIoctl+0xfc>
c0018a37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018a3b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018a3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a43:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a49:	b8 00 00 00 00       	mov    eax,0x0
c0018a4e:	eb 18                	jmp    c0018a68 <fatWrapperIoctl+0x114>
c0018a50:	80 7c 24 18 04       	cmp    BYTE PTR [esp+0x18],0x4
c0018a55:	75 09                	jne    c0018a60 <fatWrapperIoctl+0x10c>
c0018a57:	b8 00 00 00 00       	mov    eax,0x0
c0018a5c:	eb 0a                	jmp    c0018a68 <fatWrapperIoctl+0x114>
c0018a5e:	66 90                	xchg   ax,ax
c0018a60:	b8 04 00 00 00       	mov    eax,0x4
c0018a65:	8d 76 00             	lea    esi,[esi+0x0]
c0018a68:	83 c4 38             	add    esp,0x38
c0018a6b:	5b                   	pop    ebx
c0018a6c:	c3                   	ret    
c0018a6d:	90                   	nop
c0018a6e:	66 90                	xchg   ax,ax

c0018a70 <FAT::FAT()>:
c0018a70:	83 ec 2c             	sub    esp,0x2c
c0018a73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a77:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a7a:	e8 25 23 ff ff       	call   c000ada4 <Filesystem::Filesystem()>
c0018a7f:	ba 1c 14 02 c0       	mov    edx,0xc002141c
c0018a84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a88:	89 10                	mov    DWORD PTR [eax],edx
c0018a8a:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018a94:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018a9c:	83 7c 24 1c 19       	cmp    DWORD PTR [esp+0x1c],0x19
c0018aa1:	7f 15                	jg     c0018ab8 <FAT::FAT()+0x48>
c0018aa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018aa7:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018ab2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0018ab6:	eb e4                	jmp    c0018a9c <FAT::FAT()+0x2c>
c0018ab8:	90                   	nop
c0018ab9:	83 c4 2c             	add    esp,0x2c
c0018abc:	c3                   	ret    
c0018abd:	90                   	nop
c0018abe:	66 90                	xchg   ax,ax

c0018ac0 <FAT::fixFilepath(char*)>:
c0018ac0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ac4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018ac7:	3c 40                	cmp    al,0x40
c0018ac9:	7e 2d                	jle    c0018af8 <FAT::fixFilepath(char*)+0x38>
c0018acb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018acf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018ad2:	2c 41                	sub    al,0x41
c0018ad4:	88 c2                	mov    dl,al
c0018ad6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ada:	88 10                	mov    BYTE PTR [eax],dl
c0018adc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ae0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0018ae3:	0f be c0             	movsx  eax,al
c0018ae6:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018aed:	04 30                	add    al,0x30
c0018aef:	88 c2                	mov    dl,al
c0018af1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018af5:	88 10                	mov    BYTE PTR [eax],dl
c0018af7:	90                   	nop
c0018af8:	90                   	nop
c0018af9:	c3                   	ret    
c0018afa:	66 90                	xchg   ax,ax

c0018afc <FAT::open(char const*, void**, FileOpenMode)>:
c0018afc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018b02:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018b0a:	74 0c                	je     c0018b18 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b0c:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018b14:	75 0e                	jne    c0018b24 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b16:	66 90                	xchg   ax,ax
c0018b18:	b8 04 00 00 00       	mov    eax,0x4
c0018b1d:	e9 02 01 00 00       	jmp    c0018c24 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018b22:	66 90                	xchg   ax,ax
c0018b24:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b2f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b33:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b36:	e8 e5 7b fe ff       	call   c0000720 <strcpy>
c0018b3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018b43:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018b4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018b4d:	e8 6e ff ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c0018b52:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018b5a:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b61:	83 e0 01             	and    eax,0x1
c0018b64:	74 0a                	je     c0018b70 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0018b66:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018b6e:	66 90                	xchg   ax,ax
c0018b70:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b77:	83 e0 04             	and    eax,0x4
c0018b7a:	74 10                	je     c0018b8c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018b7c:	80 8c 24 1f 01 00 00 30 	or     BYTE PTR [esp+0x11f],0x30
c0018b84:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018b8c:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018b93:	83 e0 02             	and    eax,0x2
c0018b96:	74 08                	je     c0018ba0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018b98:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018ba0:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018ba7:	83 e0 08             	and    eax,0x8
c0018baa:	74 08                	je     c0018bb4 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018bac:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0018bb4:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018bbb:	83 e0 10             	and    eax,0x10
c0018bbe:	74 08                	je     c0018bc8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018bc0:	80 8c 24 1f 01 00 00 08 	or     BYTE PTR [esp+0x11f],0x8
c0018bc8:	c7 04 24 28 02 00 00 	mov    DWORD PTR [esp],0x228
c0018bcf:	e8 28 ef fe ff       	call   c0007afc <malloc>
c0018bd4:	89 c2                	mov    edx,eax
c0018bd6:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018bdd:	89 10                	mov    DWORD PTR [eax],edx
c0018bdf:	0f b6 94 24 1f 01 00 00 	movzx  edx,BYTE PTR [esp+0x11f]
c0018be7:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0018bf0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018bf4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018bf8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018bfc:	89 04 24             	mov    DWORD PTR [esp],eax
c0018bff:	e8 a9 b0 fe ff       	call   c0003cad <f_open>
c0018c04:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018c0b:	83 bc 24 18 01 00 00 00 	cmp    DWORD PTR [esp+0x118],0x0
c0018c13:	74 07                	je     c0018c1c <FAT::open(char const*, void**, FileOpenMode)+0x120>
c0018c15:	b8 01 00 00 00       	mov    eax,0x1
c0018c1a:	eb 08                	jmp    c0018c24 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018c1c:	b8 00 00 00 00       	mov    eax,0x0
c0018c21:	8d 76 00             	lea    esi,[esi+0x0]
c0018c24:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c2a:	c3                   	ret    
c0018c2b:	90                   	nop

c0018c2c <FAT::openDir(char const*, void**)>:
c0018c2c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018c32:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018c3a:	74 0c                	je     c0018c48 <FAT::openDir(char const*, void**)+0x1c>
c0018c3c:	83 bc 24 38 01 00 00 00 	cmp    DWORD PTR [esp+0x138],0x0
c0018c44:	75 0e                	jne    c0018c54 <FAT::openDir(char const*, void**)+0x28>
c0018c46:	66 90                	xchg   ax,ax
c0018c48:	b8 04 00 00 00       	mov    eax,0x4
c0018c4d:	e9 82 00 00 00       	jmp    c0018cd4 <FAT::openDir(char const*, void**)+0xa8>
c0018c52:	66 90                	xchg   ax,ax
c0018c54:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018c5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c5f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c63:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c66:	e8 b5 7a fe ff       	call   c0000720 <strcpy>
c0018c6b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018c6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018c73:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018c7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c7d:	e8 3e fe ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c0018c82:	c7 04 24 30 00 00 00 	mov    DWORD PTR [esp],0x30
c0018c89:	e8 6e ee fe ff       	call   c0007afc <malloc>
c0018c8e:	89 c2                	mov    edx,eax
c0018c90:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018c97:	89 10                	mov    DWORD PTR [eax],edx
c0018c99:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0018ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ca2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0018ca6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018caa:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cad:	e8 60 b9 fe ff       	call   c0004612 <f_opendir>
c0018cb2:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018cb9:	83 bc 24 1c 01 00 00 00 	cmp    DWORD PTR [esp+0x11c],0x0
c0018cc1:	74 09                	je     c0018ccc <FAT::openDir(char const*, void**)+0xa0>
c0018cc3:	b8 01 00 00 00       	mov    eax,0x1
c0018cc8:	eb 0a                	jmp    c0018cd4 <FAT::openDir(char const*, void**)+0xa8>
c0018cca:	66 90                	xchg   ax,ax
c0018ccc:	b8 00 00 00 00       	mov    eax,0x0
c0018cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd4:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018cda:	c3                   	ret    
c0018cdb:	90                   	nop

c0018cdc <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018cdc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0018ce2:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0018cea:	75 0c                	jne    c0018cf8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018cec:	b8 04 00 00 00       	mov    eax,0x4
c0018cf1:	e9 d2 00 00 00       	jmp    c0018dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018cf6:	66 90                	xchg   ax,ax
c0018cf8:	83 bc 24 48 02 00 00 00 	cmp    DWORD PTR [esp+0x248],0x0
c0018d00:	75 0a                	jne    c0018d0c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d02:	b8 04 00 00 00       	mov    eax,0x4
c0018d07:	e9 bc 00 00 00       	jmp    c0018dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018d0c:	83 bc 24 4c 02 00 00 00 	cmp    DWORD PTR [esp+0x24c],0x0
c0018d14:	75 0a                	jne    c0018d20 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d16:	b8 04 00 00 00       	mov    eax,0x4
c0018d1b:	e9 a8 00 00 00       	jmp    c0018dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018d20:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018d27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d2b:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018d32:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d35:	e8 e6 79 fe ff       	call   c0000720 <strcpy>
c0018d3a:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018d41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d45:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c0018d4c:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d4f:	e8 6c fd ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c0018d54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018d58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018d5c:	8d 84 24 2c 01 00 00 	lea    eax,[esp+0x12c]
c0018d63:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d66:	e8 26 ba fe ff       	call   c0004791 <f_stat>
c0018d6b:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0018d72:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0018d79:	85 c0                	test   eax,eax
c0018d7b:	74 07                	je     c0018d84 <FAT::stat(char const*, unsigned long long*, bool*)+0xa8>
c0018d7d:	83 f8 04             	cmp    eax,0x4
c0018d80:	74 36                	je     c0018db8 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c0018d82:	eb 3c                	jmp    c0018dc0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c0018d84:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018d89:	0f b6 c0             	movzx  eax,al
c0018d8c:	83 e0 10             	and    eax,0x10
c0018d8f:	0f 95 c2             	setne  dl
c0018d92:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018d99:	88 10                	mov    BYTE PTR [eax],dl
c0018d9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d9f:	ba 00 00 00 00       	mov    edx,0x0
c0018da4:	8b 8c 24 48 02 00 00 	mov    ecx,DWORD PTR [esp+0x248]
c0018dab:	89 01                	mov    DWORD PTR [ecx],eax
c0018dad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018db0:	b8 00 00 00 00       	mov    eax,0x0
c0018db5:	eb 11                	jmp    c0018dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018db7:	90                   	nop
c0018db8:	b8 02 00 00 00       	mov    eax,0x2
c0018dbd:	eb 09                	jmp    c0018dc8 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c0018dbf:	90                   	nop
c0018dc0:	b8 01 00 00 00       	mov    eax,0x1
c0018dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0018dc8:	81 c4 3c 02 00 00    	add    esp,0x23c
c0018dce:	c3                   	ret    
c0018dcf:	90                   	nop

c0018dd0 <FAT::unlink(char const*)>:
c0018dd0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018dd6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018dde:	75 08                	jne    c0018de8 <FAT::unlink(char const*)+0x18>
c0018de0:	b8 04 00 00 00       	mov    eax,0x4
c0018de5:	eb 5d                	jmp    c0018e44 <FAT::unlink(char const*)+0x74>
c0018de7:	90                   	nop
c0018de8:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0018def:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018df3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018df7:	89 04 24             	mov    DWORD PTR [esp],eax
c0018dfa:	e8 21 79 fe ff       	call   c0000720 <strcpy>
c0018dff:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e07:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c0018e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e11:	e8 aa fc ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c0018e16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e1d:	e8 d6 bb fe ff       	call   c00049f8 <f_unlink>
c0018e22:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c0018e29:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c0018e30:	85 c0                	test   eax,eax
c0018e32:	75 08                	jne    c0018e3c <FAT::unlink(char const*)+0x6c>
c0018e34:	b8 00 00 00 00       	mov    eax,0x0
c0018e39:	eb 09                	jmp    c0018e44 <FAT::unlink(char const*)+0x74>
c0018e3b:	90                   	nop
c0018e3c:	b8 01 00 00 00       	mov    eax,0x1
c0018e41:	8d 76 00             	lea    esi,[esi+0x0]
c0018e44:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e4a:	c3                   	ret    
c0018e4b:	90                   	nop

c0018e4c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018e4c:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0018e52:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018e59:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c0018e60:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018e64:	88 d0                	mov    al,dl
c0018e66:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018e6a:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018e72:	75 0c                	jne    c0018e80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0018e74:	b8 04 00 00 00       	mov    eax,0x4
c0018e79:	e9 32 01 00 00       	jmp    c0018fb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018e7e:	66 90                	xchg   ax,ax
c0018e80:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018e87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e8b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018e92:	e8 89 78 fe ff       	call   c0000720 <strcpy>
c0018e97:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018e9f:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0018ea6:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ea9:	e8 12 fc ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c0018eae:	c6 84 24 2f 01 00 00 00 	mov    BYTE PTR [esp+0x12f],0x0
c0018eb6:	c6 84 24 2e 01 00 00 00 	mov    BYTE PTR [esp+0x12e],0x0
c0018ebe:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018ec3:	83 e0 01             	and    eax,0x1
c0018ec6:	74 08                	je     c0018ed0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0018ec8:	80 8c 24 2f 01 00 00 01 	or     BYTE PTR [esp+0x12f],0x1
c0018ed0:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018ed5:	83 e0 02             	and    eax,0x2
c0018ed8:	74 0a                	je     c0018ee4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x98>
c0018eda:	80 8c 24 2f 01 00 00 20 	or     BYTE PTR [esp+0x12f],0x20
c0018ee2:	66 90                	xchg   ax,ax
c0018ee4:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018ee9:	83 e0 04             	and    eax,0x4
c0018eec:	74 0a                	je     c0018ef8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0018eee:	80 8c 24 2f 01 00 00 04 	or     BYTE PTR [esp+0x12f],0x4
c0018ef6:	66 90                	xchg   ax,ax
c0018ef8:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0018efd:	83 e0 08             	and    eax,0x8
c0018f00:	74 0a                	je     c0018f0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc0>
c0018f02:	80 8c 24 2f 01 00 00 02 	or     BYTE PTR [esp+0x12f],0x2
c0018f0a:	66 90                	xchg   ax,ax
c0018f0c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f11:	83 e0 01             	and    eax,0x1
c0018f14:	74 0a                	je     c0018f20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd4>
c0018f16:	80 8c 24 2e 01 00 00 01 	or     BYTE PTR [esp+0x12e],0x1
c0018f1e:	66 90                	xchg   ax,ax
c0018f20:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f25:	83 e0 02             	and    eax,0x2
c0018f28:	74 0a                	je     c0018f34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe8>
c0018f2a:	80 8c 24 2e 01 00 00 20 	or     BYTE PTR [esp+0x12e],0x20
c0018f32:	66 90                	xchg   ax,ax
c0018f34:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f39:	83 e0 04             	and    eax,0x4
c0018f3c:	74 0a                	je     c0018f48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018f3e:	80 8c 24 2e 01 00 00 04 	or     BYTE PTR [esp+0x12e],0x4
c0018f46:	66 90                	xchg   ax,ax
c0018f48:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0018f4d:	83 e0 08             	and    eax,0x8
c0018f50:	74 0a                	je     c0018f5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x110>
c0018f52:	80 8c 24 2e 01 00 00 02 	or     BYTE PTR [esp+0x12e],0x2
c0018f5a:	66 90                	xchg   ax,ax
c0018f5c:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018f64:	08 84 24 2e 01 00 00 	or     BYTE PTR [esp+0x12e],al
c0018f6b:	0f b6 94 24 2e 01 00 00 	movzx  edx,BYTE PTR [esp+0x12e]
c0018f73:	0f b6 84 24 2f 01 00 00 	movzx  eax,BYTE PTR [esp+0x12f]
c0018f7b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018f7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018f83:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f87:	89 04 24             	mov    DWORD PTR [esp],eax
c0018f8a:	e8 da be fe ff       	call   c0004e69 <f_chmod>
c0018f8f:	89 84 24 28 01 00 00 	mov    DWORD PTR [esp+0x128],eax
c0018f96:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018f9d:	85 c0                	test   eax,eax
c0018f9f:	75 07                	jne    c0018fa8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x15c>
c0018fa1:	b8 00 00 00 00       	mov    eax,0x0
c0018fa6:	eb 08                	jmp    c0018fb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x164>
c0018fa8:	b8 01 00 00 00       	mov    eax,0x1
c0018fad:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb0:	81 c4 3c 01 00 00    	add    esp,0x13c
c0018fb6:	c3                   	ret    
c0018fb7:	90                   	nop

c0018fb8 <FAT::rename(char const*, char const*)>:
c0018fb8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018fbe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018fc6:	74 0c                	je     c0018fd4 <FAT::rename(char const*, char const*)+0x1c>
c0018fc8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018fd0:	75 0e                	jne    c0018fe0 <FAT::rename(char const*, char const*)+0x28>
c0018fd2:	66 90                	xchg   ax,ax
c0018fd4:	b8 04 00 00 00       	mov    eax,0x4
c0018fd9:	e9 9e 00 00 00       	jmp    c001907c <FAT::rename(char const*, char const*)+0xc4>
c0018fde:	66 90                	xchg   ax,ax
c0018fe0:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c0018fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018feb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0018ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ff5:	e8 26 77 fe ff       	call   c0000720 <strcpy>
c0018ffa:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019001:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019005:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c001900c:	89 04 24             	mov    DWORD PTR [esp],eax
c001900f:	e8 ac fa ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c0019014:	8b 84 24 38 02 00 00 	mov    eax,DWORD PTR [esp+0x238]
c001901b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001901f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019023:	89 04 24             	mov    DWORD PTR [esp],eax
c0019026:	e8 f5 76 fe ff       	call   c0000720 <strcpy>
c001902b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001902f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019033:	8b 84 24 30 02 00 00 	mov    eax,DWORD PTR [esp+0x230]
c001903a:	89 04 24             	mov    DWORD PTR [esp],eax
c001903d:	e8 7e fa ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c0019042:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019046:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001904a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019051:	89 04 24             	mov    DWORD PTR [esp],eax
c0019054:	e8 58 bc fe ff       	call   c0004cb1 <f_rename>
c0019059:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019060:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019067:	85 c0                	test   eax,eax
c0019069:	75 09                	jne    c0019074 <FAT::rename(char const*, char const*)+0xbc>
c001906b:	b8 00 00 00 00       	mov    eax,0x0
c0019070:	eb 0a                	jmp    c001907c <FAT::rename(char const*, char const*)+0xc4>
c0019072:	66 90                	xchg   ax,ax
c0019074:	b8 01 00 00 00       	mov    eax,0x1
c0019079:	8d 76 00             	lea    esi,[esi+0x0]
c001907c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019082:	c3                   	ret    
c0019083:	90                   	nop

c0019084 <FAT::mkdir(char const*)>:
c0019084:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001908a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019092:	75 08                	jne    c001909c <FAT::mkdir(char const*)+0x18>
c0019094:	b8 04 00 00 00       	mov    eax,0x4
c0019099:	eb 5d                	jmp    c00190f8 <FAT::mkdir(char const*)+0x74>
c001909b:	90                   	nop
c001909c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c00190a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00190ae:	e8 6d 76 fe ff       	call   c0000720 <strcpy>
c00190b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190b7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190bb:	8b 84 24 30 01 00 00 	mov    eax,DWORD PTR [esp+0x130]
c00190c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00190c5:	e8 f6 f9 ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c00190ca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00190d1:	e8 40 ba fe ff       	call   c0004b16 <f_mkdir>
c00190d6:	89 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],eax
c00190dd:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
c00190e4:	85 c0                	test   eax,eax
c00190e6:	75 08                	jne    c00190f0 <FAT::mkdir(char const*)+0x6c>
c00190e8:	b8 00 00 00 00       	mov    eax,0x0
c00190ed:	eb 09                	jmp    c00190f8 <FAT::mkdir(char const*)+0x74>
c00190ef:	90                   	nop
c00190f0:	b8 01 00 00 00       	mov    eax,0x1
c00190f5:	8d 76 00             	lea    esi,[esi+0x0]
c00190f8:	81 c4 2c 01 00 00    	add    esp,0x12c
c00190fe:	c3                   	ret    
c00190ff:	90                   	nop

c0019100 <FAT::exists(char const*)>:
c0019100:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019106:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001910d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019111:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019115:	89 04 24             	mov    DWORD PTR [esp],eax
c0019118:	e8 03 76 fe ff       	call   c0000720 <strcpy>
c001911d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019121:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019125:	8b 84 24 40 02 00 00 	mov    eax,DWORD PTR [esp+0x240]
c001912c:	89 04 24             	mov    DWORD PTR [esp],eax
c001912f:	e8 8c f9 ff ff       	call   c0018ac0 <FAT::fixFilepath(char*)>
c0019134:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001913b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001913f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019143:	89 04 24             	mov    DWORD PTR [esp],eax
c0019146:	e8 46 b6 fe ff       	call   c0004791 <f_stat>
c001914b:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019152:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019159:	85 c0                	test   eax,eax
c001915b:	75 07                	jne    c0019164 <FAT::exists(char const*)+0x64>
c001915d:	b0 01                	mov    al,0x1
c001915f:	eb 07                	jmp    c0019168 <FAT::exists(char const*)+0x68>
c0019161:	8d 76 00             	lea    esi,[esi+0x0]
c0019164:	b0 00                	mov    al,0x0
c0019166:	66 90                	xchg   ax,ax
c0019168:	81 c4 3c 02 00 00    	add    esp,0x23c
c001916e:	c3                   	ret    
c001916f:	90                   	nop

c0019170 <isoReadDiscSectorHelper>:
c0019170:	83 ec 4c             	sub    esp,0x4c
c0019173:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0019177:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001917b:	0f be 44 24 2c       	movsx  eax,BYTE PTR [esp+0x2c]
c0019180:	83 e8 41             	sub    eax,0x41
c0019183:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c001918a:	66 0f 6e 44 24 54    	movd   xmm0,DWORD PTR [esp+0x54]
c0019190:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0019194:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019198:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001919c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00191a0:	66 0f d6 44 24 04    	movq   QWORD PTR [esp+0x4],xmm0
c00191a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00191a9:	e8 68 40 ff ff       	call   c000d216 <LogicalDisk::read(unsigned long long, int, void*)>
c00191ae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00191b2:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00191b7:	74 0b                	je     c00191c4 <isoReadDiscSectorHelper+0x54>
c00191b9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00191bd:	c1 e0 0b             	shl    eax,0xb
c00191c0:	eb 0a                	jmp    c00191cc <isoReadDiscSectorHelper+0x5c>
c00191c2:	66 90                	xchg   ax,ax
c00191c4:	b8 00 00 00 00       	mov    eax,0x0
c00191c9:	8d 76 00             	lea    esi,[esi+0x0]
c00191cc:	83 c4 4c             	add    esp,0x4c
c00191cf:	c3                   	ret    

c00191d0 <iso_kprintf>:
c00191d0:	83 ec 1c             	sub    esp,0x1c
c00191d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00191d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00191db:	c7 04 24 29 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e29
c00191e2:	e8 8f 18 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00191e7:	90                   	nop
c00191e8:	83 c4 1c             	add    esp,0x1c
c00191eb:	c3                   	ret    

c00191ec <iso_kprintfd>:
c00191ec:	83 ec 1c             	sub    esp,0x1c
c00191ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00191f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00191f7:	c7 04 24 3b fe 01 c0 	mov    DWORD PTR [esp],0xc001fe3b
c00191fe:	e8 73 18 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019203:	90                   	nop
c0019204:	83 c4 1c             	add    esp,0x1c
c0019207:	c3                   	ret    

c0019208 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019208:	b8 08 00 00 00       	mov    eax,0x8
c001920d:	c3                   	ret    

c001920e <ISO9660::getName()>:
c001920e:	b8 7c 14 02 c0       	mov    eax,0xc002147c
c0019213:	c3                   	ret    

c0019214 <ISO9660::closeDir(void*)>:
c0019214:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019218:	8b 00                	mov    eax,DWORD PTR [eax]
c001921a:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001921d:	90                   	nop

c001921e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001921e:	b8 01 00 00 00       	mov    eax,0x1
c0019223:	c3                   	ret    

c0019224 <ISO9660::unlink(char const*)>:
c0019224:	b8 01 00 00 00       	mov    eax,0x1
c0019229:	c3                   	ret    

c001922a <ISO9660::write(void*, unsigned long, void*, int*)>:
c001922a:	b8 03 00 00 00       	mov    eax,0x3
c001922f:	c3                   	ret    

c0019230 <ISO9660::rename(char const*, char const*)>:
c0019230:	b8 01 00 00 00       	mov    eax,0x1
c0019235:	c3                   	ret    

c0019236 <ISO9660::mkdir(char const*)>:
c0019236:	b8 01 00 00 00       	mov    eax,0x1
c001923b:	c3                   	ret    

c001923c <ISO9660::~ISO9660()>:
c001923c:	83 ec 1c             	sub    esp,0x1c
c001923f:	ba bc 15 02 c0       	mov    edx,0xc00215bc
c0019244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019248:	89 10                	mov    DWORD PTR [eax],edx
c001924a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001924e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019251:	e8 72 1b ff ff       	call   c000adc8 <Filesystem::~Filesystem()>
c0019256:	90                   	nop
c0019257:	83 c4 1c             	add    esp,0x1c
c001925a:	c3                   	ret    
c001925b:	90                   	nop

c001925c <ISO9660::~ISO9660()>:
c001925c:	83 ec 1c             	sub    esp,0x1c
c001925f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019263:	89 04 24             	mov    DWORD PTR [esp],eax
c0019266:	e8 d1 ff ff ff       	call   c001923c <ISO9660::~ISO9660()>
c001926b:	c7 44 24 04 08 00 00 00 	mov    DWORD PTR [esp+0x4],0x8
c0019273:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019277:	89 04 24             	mov    DWORD PTR [esp],eax
c001927a:	e8 dd 16 ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001927f:	83 c4 1c             	add    esp,0x1c
c0019282:	c3                   	ret    
c0019283:	90                   	nop

c0019284 <ISO9660::exists(char const*)>:
c0019284:	83 ec 18             	sub    esp,0x18
c0019287:	68 97 14 02 c0       	push   0xc0021497
c001928c:	e8 94 75 ff ff       	call   c0010825 <KePanic(char const*)>
c0019291:	31 c0                	xor    eax,eax
c0019293:	83 c4 1c             	add    esp,0x1c
c0019296:	c3                   	ret    
c0019297:	90                   	nop

c0019298 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019298:	56                   	push   esi
c0019299:	53                   	push   ebx
c001929a:	53                   	push   ebx
c001929b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001929f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00192a3:	85 db                	test   ebx,ebx
c00192a5:	0f 84 c2 00 00 00    	je     c001936d <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00192ab:	85 f6                	test   esi,esi
c00192ad:	0f 84 ba 00 00 00    	je     c001936d <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c00192b3:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c00192b8:	b8 03 00 00 00       	mov    eax,0x3
c00192bd:	0f 85 af 00 00 00    	jne    c0019372 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c00192c3:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00192c8:	38 03                	cmp    BYTE PTR [ebx],al
c00192ca:	74 1b                	je     c00192e7 <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c00192cc:	84 c0                	test   al,al
c00192ce:	74 10                	je     c00192e0 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c00192d0:	83 ec 0c             	sub    esp,0xc
c00192d3:	68 b5 14 02 c0       	push   0xc00214b5
c00192d8:	e8 48 75 ff ff       	call   c0010825 <KePanic(char const*)>
c00192dd:	83 c4 10             	add    esp,0x10
c00192e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00192e2:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00192e7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00192ea:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00192f1:	85 c0                	test   eax,eax
c00192f3:	74 09                	je     c00192fe <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c00192f5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00192fc:	74 48                	je     c0019346 <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c00192fe:	83 ec 0c             	sub    esp,0xc
c0019301:	68 c5 14 02 c0       	push   0xc00214c5
c0019306:	e8 6b 17 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001930b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019318:	85 c0                	test   eax,eax
c001931a:	74 17                	je     c0019333 <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c001931c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	68 e5 14 02 c0       	push   0xc00214e5
c001932b:	e8 46 17 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019330:	83 c4 10             	add    esp,0x10
c0019333:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001933a:	83 ec 0c             	sub    esp,0xc
c001933d:	50                   	push   eax
c001933e:	e8 bc d6 fe ff       	call   c00069ff <init_percd>
c0019343:	83 c4 10             	add    esp,0x10
c0019346:	51                   	push   ecx
c0019347:	83 c3 03             	add    ebx,0x3
c001934a:	51                   	push   ecx
c001934b:	6a 00                	push   0x0
c001934d:	53                   	push   ebx
c001934e:	e8 6f d1 fe ff       	call   c00064c2 <iso_open>
c0019353:	83 c4 10             	add    esp,0x10
c0019356:	89 c2                	mov    edx,eax
c0019358:	b8 01 00 00 00       	mov    eax,0x1
c001935d:	83 fa ff             	cmp    edx,0xffffffff
c0019360:	74 10                	je     c0019372 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0019362:	83 c2 32             	add    edx,0x32
c0019365:	31 c0                	xor    eax,eax
c0019367:	01 d2                	add    edx,edx
c0019369:	89 16                	mov    DWORD PTR [esi],edx
c001936b:	eb 05                	jmp    c0019372 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001936d:	b8 04 00 00 00       	mov    eax,0x4
c0019372:	5a                   	pop    edx
c0019373:	5b                   	pop    ebx
c0019374:	5e                   	pop    esi
c0019375:	c3                   	ret    

c0019376 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019376:	53                   	push   ebx
c0019377:	83 ec 08             	sub    esp,0x8
c001937a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001937e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019382:	85 c0                	test   eax,eax
c0019384:	74 2d                	je     c00193b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019386:	85 db                	test   ebx,ebx
c0019388:	74 29                	je     c00193b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001938a:	52                   	push   edx
c001938b:	b9 02 00 00 00       	mov    ecx,0x2
c0019390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019394:	99                   	cdq    
c0019395:	f7 f9                	idiv   ecx
c0019397:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001939b:	83 e8 32             	sub    eax,0x32
c001939e:	50                   	push   eax
c001939f:	e8 c4 d1 fe ff       	call   c0006568 <iso_read>
c00193a4:	83 c4 10             	add    esp,0x10
c00193a7:	89 03                	mov    DWORD PTR [ebx],eax
c00193a9:	09 d0                	or     eax,edx
c00193ab:	0f 94 c0             	sete   al
c00193ae:	0f b6 c0             	movzx  eax,al
c00193b1:	eb 05                	jmp    c00193b8 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00193b3:	b8 04 00 00 00       	mov    eax,0x4
c00193b8:	83 c4 08             	add    esp,0x8
c00193bb:	5b                   	pop    ebx
c00193bc:	c3                   	ret    
c00193bd:	90                   	nop

c00193be <ISO9660::seek(void*, unsigned long long)>:
c00193be:	57                   	push   edi
c00193bf:	b8 04 00 00 00       	mov    eax,0x4
c00193c4:	56                   	push   esi
c00193c5:	51                   	push   ecx
c00193c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00193ca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00193ce:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00193d2:	85 d2                	test   edx,edx
c00193d4:	74 28                	je     c00193fe <ISO9660::seek(void*, unsigned long long)+0x40>
c00193d6:	89 d0                	mov    eax,edx
c00193d8:	b9 02 00 00 00       	mov    ecx,0x2
c00193dd:	6a 00                	push   0x0
c00193df:	99                   	cdq    
c00193e0:	f7 f9                	idiv   ecx
c00193e2:	57                   	push   edi
c00193e3:	56                   	push   esi
c00193e4:	83 e8 32             	sub    eax,0x32
c00193e7:	50                   	push   eax
c00193e8:	e8 91 d2 fe ff       	call   c000667e <iso_seek>
c00193ed:	83 c4 10             	add    esp,0x10
c00193f0:	31 c6                	xor    esi,eax
c00193f2:	31 d7                	xor    edi,edx
c00193f4:	89 f0                	mov    eax,esi
c00193f6:	09 f8                	or     eax,edi
c00193f8:	0f 95 c0             	setne  al
c00193fb:	0f b6 c0             	movzx  eax,al
c00193fe:	5a                   	pop    edx
c00193ff:	5e                   	pop    esi
c0019400:	5f                   	pop    edi
c0019401:	c3                   	ret    

c0019402 <ISO9660::tell(void*, unsigned long long*)>:
c0019402:	53                   	push   ebx
c0019403:	83 ec 08             	sub    esp,0x8
c0019406:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001940a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001940e:	85 c0                	test   eax,eax
c0019410:	74 24                	je     c0019436 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019412:	85 db                	test   ebx,ebx
c0019414:	74 20                	je     c0019436 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0019416:	b9 02 00 00 00       	mov    ecx,0x2
c001941b:	99                   	cdq    
c001941c:	f7 f9                	idiv   ecx
c001941e:	83 ec 0c             	sub    esp,0xc
c0019421:	83 e8 32             	sub    eax,0x32
c0019424:	50                   	push   eax
c0019425:	e8 d8 d2 fe ff       	call   c0006702 <iso_tell>
c001942a:	83 c4 10             	add    esp,0x10
c001942d:	89 03                	mov    DWORD PTR [ebx],eax
c001942f:	31 c0                	xor    eax,eax
c0019431:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019434:	eb 05                	jmp    c001943b <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019436:	b8 04 00 00 00       	mov    eax,0x4
c001943b:	83 c4 08             	add    esp,0x8
c001943e:	5b                   	pop    ebx
c001943f:	c3                   	ret    

c0019440 <ISO9660::stat(void*, unsigned long long*)>:
c0019440:	56                   	push   esi
c0019441:	53                   	push   ebx
c0019442:	83 ec 10             	sub    esp,0x10
c0019445:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019449:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001944d:	68 09 15 02 c0       	push   0xc0021509
c0019452:	e8 1f 16 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019457:	83 c4 10             	add    esp,0x10
c001945a:	85 db                	test   ebx,ebx
c001945c:	74 2a                	je     c0019488 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001945e:	85 f6                	test   esi,esi
c0019460:	74 26                	je     c0019488 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019462:	89 d8                	mov    eax,ebx
c0019464:	b9 02 00 00 00       	mov    ecx,0x2
c0019469:	99                   	cdq    
c001946a:	83 ec 0c             	sub    esp,0xc
c001946d:	f7 f9                	idiv   ecx
c001946f:	83 e8 32             	sub    eax,0x32
c0019472:	50                   	push   eax
c0019473:	e8 bb d2 fe ff       	call   c0006733 <iso_total>
c0019478:	83 c4 10             	add    esp,0x10
c001947b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019482:	89 06                	mov    DWORD PTR [esi],eax
c0019484:	31 c0                	xor    eax,eax
c0019486:	eb 05                	jmp    c001948d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019488:	b8 04 00 00 00       	mov    eax,0x4
c001948d:	5a                   	pop    edx
c001948e:	5b                   	pop    ebx
c001948f:	5e                   	pop    esi
c0019490:	c3                   	ret    
c0019491:	90                   	nop

c0019492 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0019492:	55                   	push   ebp
c0019493:	57                   	push   edi
c0019494:	56                   	push   esi
c0019495:	53                   	push   ebx
c0019496:	83 ec 18             	sub    esp,0x18
c0019499:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001949d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00194a1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00194a5:	68 11 15 02 c0       	push   0xc0021511
c00194aa:	e8 c7 15 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	85 ff                	test   edi,edi
c00194b4:	0f 94 c2             	sete   dl
c00194b7:	85 f6                	test   esi,esi
c00194b9:	0f 94 c0             	sete   al
c00194bc:	08 c2                	or     dl,al
c00194be:	0f 85 d5 00 00 00    	jne    c0019599 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00194c4:	85 db                	test   ebx,ebx
c00194c6:	0f 84 cd 00 00 00    	je     c0019599 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c00194cc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00194cf:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00194d5:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00194dc:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c00194e1:	38 03                	cmp    BYTE PTR [ebx],al
c00194e3:	74 1b                	je     c0019500 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c00194e5:	84 c0                	test   al,al
c00194e7:	74 10                	je     c00194f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c00194e9:	83 ec 0c             	sub    esp,0xc
c00194ec:	68 b5 14 02 c0       	push   0xc00214b5
c00194f1:	e8 2f 73 ff ff       	call   c0010825 <KePanic(char const*)>
c00194f6:	83 c4 10             	add    esp,0x10
c00194f9:	8a 03                	mov    al,BYTE PTR [ebx]
c00194fb:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019500:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019503:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001950a:	85 c0                	test   eax,eax
c001950c:	74 09                	je     c0019517 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c001950e:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019515:	74 51                	je     c0019568 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0019517:	83 ec 0c             	sub    esp,0xc
c001951a:	68 19 15 02 c0       	push   0xc0021519
c001951f:	e8 52 15 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019524:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019527:	83 c4 10             	add    esp,0x10
c001952a:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019532:	74 21                	je     c0019555 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0019534:	83 ec 0c             	sub    esp,0xc
c0019537:	68 39 15 02 c0       	push   0xc0021539
c001953c:	e8 35 15 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019541:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001954e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019555:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001955c:	83 ec 0c             	sub    esp,0xc
c001955f:	50                   	push   eax
c0019560:	e8 9a d4 fe ff       	call   c00069ff <init_percd>
c0019565:	83 c4 10             	add    esp,0x10
c0019568:	52                   	push   edx
c0019569:	83 c3 03             	add    ebx,0x3
c001956c:	52                   	push   edx
c001956d:	6a 00                	push   0x0
c001956f:	53                   	push   ebx
c0019570:	e8 4d cf fe ff       	call   c00064c2 <iso_open>
c0019575:	83 c4 10             	add    esp,0x10
c0019578:	83 f8 ff             	cmp    eax,0xffffffff
c001957b:	89 c5                	mov    ebp,eax
c001957d:	75 21                	jne    c00195a0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c001957f:	50                   	push   eax
c0019580:	50                   	push   eax
c0019581:	6a 01                	push   0x1
c0019583:	53                   	push   ebx
c0019584:	e8 39 cf fe ff       	call   c00064c2 <iso_open>
c0019589:	83 c4 10             	add    esp,0x10
c001958c:	ba 02 00 00 00       	mov    edx,0x2
c0019591:	40                   	inc    eax
c0019592:	74 2b                	je     c00195bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019594:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0019597:	eb 24                	jmp    c00195bd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0019599:	ba 04 00 00 00       	mov    edx,0x4
c001959e:	eb 1f                	jmp    c00195bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c00195a0:	83 ec 0c             	sub    esp,0xc
c00195a3:	50                   	push   eax
c00195a4:	e8 8a d1 fe ff       	call   c0006733 <iso_total>
c00195a9:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195b0:	89 07                	mov    DWORD PTR [edi],eax
c00195b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00195b5:	e8 90 cf fe ff       	call   c000654a <iso_close>
c00195ba:	83 c4 10             	add    esp,0x10
c00195bd:	31 d2                	xor    edx,edx
c00195bf:	83 c4 0c             	add    esp,0xc
c00195c2:	89 d0                	mov    eax,edx
c00195c4:	5b                   	pop    ebx
c00195c5:	5e                   	pop    esi
c00195c6:	5f                   	pop    edi
c00195c7:	5d                   	pop    ebp
c00195c8:	c3                   	ret    
c00195c9:	90                   	nop

c00195ca <ISO9660::close(void*)>:
c00195ca:	83 ec 0c             	sub    esp,0xc
c00195cd:	b8 04 00 00 00       	mov    eax,0x4
c00195d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195d6:	85 d2                	test   edx,edx
c00195d8:	74 1b                	je     c00195f5 <ISO9660::close(void*)+0x2b>
c00195da:	89 d0                	mov    eax,edx
c00195dc:	b9 02 00 00 00       	mov    ecx,0x2
c00195e1:	99                   	cdq    
c00195e2:	83 ec 0c             	sub    esp,0xc
c00195e5:	f7 f9                	idiv   ecx
c00195e7:	83 e8 32             	sub    eax,0x32
c00195ea:	50                   	push   eax
c00195eb:	e8 5a cf fe ff       	call   c000654a <iso_close>
c00195f0:	83 c4 10             	add    esp,0x10
c00195f3:	31 c0                	xor    eax,eax
c00195f5:	83 c4 0c             	add    esp,0xc
c00195f8:	c3                   	ret    
c00195f9:	90                   	nop

c00195fa <ISO9660::openDir(char const*, void**)>:
c00195fa:	56                   	push   esi
c00195fb:	53                   	push   ebx
c00195fc:	50                   	push   eax
c00195fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019601:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019605:	85 db                	test   ebx,ebx
c0019607:	0f 84 b5 00 00 00    	je     c00196c2 <ISO9660::openDir(char const*, void**)+0xc8>
c001960d:	85 f6                	test   esi,esi
c001960f:	0f 84 ad 00 00 00    	je     c00196c2 <ISO9660::openDir(char const*, void**)+0xc8>
c0019615:	a0 20 83 02 c0       	mov    al,ds:0xc0028320
c001961a:	38 03                	cmp    BYTE PTR [ebx],al
c001961c:	74 1b                	je     c0019639 <ISO9660::openDir(char const*, void**)+0x3f>
c001961e:	84 c0                	test   al,al
c0019620:	74 10                	je     c0019632 <ISO9660::openDir(char const*, void**)+0x38>
c0019622:	83 ec 0c             	sub    esp,0xc
c0019625:	68 b5 14 02 c0       	push   0xc00214b5
c001962a:	e8 f6 71 ff ff       	call   c0010825 <KePanic(char const*)>
c001962f:	83 c4 10             	add    esp,0x10
c0019632:	8a 03                	mov    al,BYTE PTR [ebx]
c0019634:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019639:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001963c:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019643:	85 c0                	test   eax,eax
c0019645:	74 10                	je     c0019657 <ISO9660::openDir(char const*, void**)+0x5d>
c0019647:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001964e:	74 1a                	je     c001966a <ISO9660::openDir(char const*, void**)+0x70>
c0019650:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019657:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001965e:	83 ec 0c             	sub    esp,0xc
c0019661:	50                   	push   eax
c0019662:	e8 98 d3 fe ff       	call   c00069ff <init_percd>
c0019667:	83 c4 10             	add    esp,0x10
c001966a:	50                   	push   eax
c001966b:	83 c3 03             	add    ebx,0x3
c001966e:	50                   	push   eax
c001966f:	6a 01                	push   0x1
c0019671:	53                   	push   ebx
c0019672:	e8 4b ce fe ff       	call   c00064c2 <iso_open>
c0019677:	83 c4 10             	add    esp,0x10
c001967a:	83 f8 ff             	cmp    eax,0xffffffff
c001967d:	89 c3                	mov    ebx,eax
c001967f:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019684:	75 1c                	jne    c00196a2 <ISO9660::openDir(char const*, void**)+0xa8>
c0019686:	53                   	push   ebx
c0019687:	53                   	push   ebx
c0019688:	68 5d 15 02 c0       	push   0xc002155d
c001968d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019693:	e8 2a f4 fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c0019698:	83 c4 10             	add    esp,0x10
c001969b:	b8 01 00 00 00       	mov    eax,0x1
c00196a0:	eb 25                	jmp    c00196c7 <ISO9660::openDir(char const*, void**)+0xcd>
c00196a2:	51                   	push   ecx
c00196a3:	01 db                	add    ebx,ebx
c00196a5:	51                   	push   ecx
c00196a6:	83 c3 65             	add    ebx,0x65
c00196a9:	68 70 15 02 c0       	push   0xc0021570
c00196ae:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00196b4:	e8 09 f4 fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00196b9:	83 c4 10             	add    esp,0x10
c00196bc:	31 c0                	xor    eax,eax
c00196be:	89 1e                	mov    DWORD PTR [esi],ebx
c00196c0:	eb 05                	jmp    c00196c7 <ISO9660::openDir(char const*, void**)+0xcd>
c00196c2:	b8 04 00 00 00       	mov    eax,0x4
c00196c7:	5a                   	pop    edx
c00196c8:	5b                   	pop    ebx
c00196c9:	5e                   	pop    esi
c00196ca:	c3                   	ret    
c00196cb:	90                   	nop

c00196cc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00196cc:	55                   	push   ebp
c00196cd:	57                   	push   edi
c00196ce:	56                   	push   esi
c00196cf:	53                   	push   ebx
c00196d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196d6:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00196dd:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00196e4:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00196eb:	85 db                	test   ebx,ebx
c00196ed:	0f 84 e4 00 00 00    	je     c00197d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00196f3:	85 ed                	test   ebp,ebp
c00196f5:	0f 84 dc 00 00 00    	je     c00197d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00196fb:	83 ec 0c             	sub    esp,0xc
c00196fe:	68 83 15 02 c0       	push   0xc0021583
c0019703:	e8 6e 13 ff ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c0019708:	89 d8                	mov    eax,ebx
c001970a:	b9 02 00 00 00       	mov    ecx,0x2
c001970f:	99                   	cdq    
c0019710:	f7 f9                	idiv   ecx
c0019712:	83 e8 32             	sub    eax,0x32
c0019715:	89 04 24             	mov    DWORD PTR [esp],eax
c0019718:	e8 67 d0 fe ff       	call   c0006784 <iso_readdir>
c001971d:	83 c4 10             	add    esp,0x10
c0019720:	85 c0                	test   eax,eax
c0019722:	89 c3                	mov    ebx,eax
c0019724:	75 38                	jne    c001975e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0019726:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001972b:	53                   	push   ebx
c001972c:	53                   	push   ebx
c001972d:	68 8e 15 02 c0       	push   0xc002158e
c0019732:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019738:	e8 85 f3 fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c001973d:	83 c4 0c             	add    esp,0xc
c0019740:	68 10 01 00 00       	push   0x110
c0019745:	6a 00                	push   0x0
c0019747:	57                   	push   edi
c0019748:	e8 33 6e fe ff       	call   c0000580 <memset>
c001974d:	83 c4 10             	add    esp,0x10
c0019750:	b8 01 00 00 00       	mov    eax,0x1
c0019755:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001975c:	eb 7e                	jmp    c00197dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001975e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019764:	8d 70 08             	lea    esi,[eax+0x8]
c0019767:	83 ec 0c             	sub    esp,0xc
c001976a:	56                   	push   esi
c001976b:	e8 b0 6e fe ff       	call   c0000620 <strlen>
c0019770:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019778:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0019783:	75 0a                	jne    c001978f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0019785:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0019788:	b8 02 00 00 00       	mov    eax,0x2
c001978d:	74 05                	je     c0019794 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001978f:	b8 01 00 00 00       	mov    eax,0x1
c0019794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019798:	50                   	push   eax
c0019799:	50                   	push   eax
c001979a:	56                   	push   esi
c001979b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001979f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00197a3:	50                   	push   eax
c00197a4:	e8 77 6f fe ff       	call   c0000720 <strcpy>
c00197a9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00197b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197b2:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00197b9:	5a                   	pop    edx
c00197ba:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00197bf:	59                   	pop    ecx
c00197c0:	68 a1 15 02 c0       	push   0xc00215a1
c00197c5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00197cb:	e8 f2 f2 fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c00197d0:	83 c4 10             	add    esp,0x10
c00197d3:	31 c0                	xor    eax,eax
c00197d5:	eb 05                	jmp    c00197dc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00197d7:	b8 04 00 00 00       	mov    eax,0x4
c00197dc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00197e2:	5b                   	pop    ebx
c00197e3:	5e                   	pop    esi
c00197e4:	5f                   	pop    edi
c00197e5:	5d                   	pop    ebp
c00197e6:	c3                   	ret    

c00197e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00197e7:	57                   	push   edi
c00197e8:	56                   	push   esi
c00197e9:	53                   	push   ebx
c00197ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00197ee:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00197f4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00197f8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c00197fc:	75 08                	jne    c0019806 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00197fe:	38 1d 04 21 02 c0    	cmp    BYTE PTR ds:0xc0022104,bl
c0019804:	74 4a                	je     c0019850 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019806:	83 ec 0c             	sub    esp,0xc
c0019809:	31 d2                	xor    edx,edx
c001980b:	68 40 83 02 c0       	push   0xc0028340
c0019810:	0f be c3             	movsx  eax,bl
c0019813:	6a 01                	push   0x1
c0019815:	52                   	push   edx
c0019816:	56                   	push   esi
c0019817:	ff 34 85 1c 73 02 c0 	push   DWORD PTR [eax*4-0x3ffd8ce4]
c001981e:	e8 f3 39 ff ff       	call   c000d216 <LogicalDisk::read(unsigned long long, int, void*)>
c0019823:	83 c4 20             	add    esp,0x20
c0019826:	85 c0                	test   eax,eax
c0019828:	75 0e                	jne    c0019838 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001982a:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019830:	88 1d 04 21 02 c0    	mov    BYTE PTR ds:0xc0022104,bl
c0019836:	eb 18                	jmp    c0019850 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019838:	50                   	push   eax
c0019839:	68 00 08 00 00       	push   0x800
c001983e:	6a 00                	push   0x0
c0019840:	57                   	push   edi
c0019841:	e8 3a 6d fe ff       	call   c0000580 <memset>
c0019846:	83 c4 10             	add    esp,0x10
c0019849:	b8 01 00 00 00       	mov    eax,0x1
c001984e:	eb 0e                	jmp    c001985e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0019850:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019855:	b9 00 08 00 00       	mov    ecx,0x800
c001985a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001985c:	31 c0                	xor    eax,eax
c001985e:	5b                   	pop    ebx
c001985f:	5e                   	pop    esi
c0019860:	5f                   	pop    edi
c0019861:	c3                   	ret    

c0019862 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019862:	53                   	push   ebx
c0019863:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019869:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019873:	8a 9c 24 1c 08 00 00 	mov    bl,BYTE PTR [esp+0x81c]
c001987a:	80 c3 41             	add    bl,0x41
c001987d:	0f be db             	movsx  ebx,bl
c0019880:	53                   	push   ebx
c0019881:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019885:	50                   	push   eax
c0019886:	6a 10                	push   0x10
c0019888:	e8 5a ff ff ff       	call   c00197e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001988d:	83 c4 10             	add    esp,0x10
c0019890:	31 d2                	xor    edx,edx
c0019892:	85 c0                	test   eax,eax
c0019894:	75 33                	jne    c00198c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019896:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001989b:	75 2c                	jne    c00198c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001989d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00198a2:	75 25                	jne    c00198c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00198a4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00198a9:	75 1e                	jne    c00198c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00198ab:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00198b0:	75 17                	jne    c00198c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00198b2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00198b7:	75 10                	jne    c00198c9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00198b9:	83 ec 0c             	sub    esp,0xc
c00198bc:	53                   	push   ebx
c00198bd:	e8 3d d1 fe ff       	call   c00069ff <init_percd>
c00198c2:	83 c4 10             	add    esp,0x10
c00198c5:	40                   	inc    eax
c00198c6:	0f 95 c2             	setne  dl
c00198c9:	81 c4 08 08 00 00    	add    esp,0x808
c00198cf:	88 d0                	mov    al,dl
c00198d1:	5b                   	pop    ebx
c00198d2:	c3                   	ret    
c00198d3:	90                   	nop

c00198d4 <ISO9660::ISO9660()>:
c00198d4:	83 ec 1c             	sub    esp,0x1c
c00198d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198db:	89 04 24             	mov    DWORD PTR [esp],eax
c00198de:	e8 c1 14 ff ff       	call   c000ada4 <Filesystem::Filesystem()>
c00198e3:	ba bc 15 02 c0       	mov    edx,0xc00215bc
c00198e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198ec:	89 10                	mov    DWORD PTR [eax],edx
c00198ee:	e8 1e d2 fe ff       	call   c0006b11 <fs_iso9660_init>
c00198f3:	90                   	nop
c00198f4:	83 c4 1c             	add    esp,0x1c
c00198f7:	c3                   	ret    

c00198f8 <SoundCard::beginPlayback()>:
c00198f8:	c7 44 24 04 1c 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002161c
c0019900:	e9 20 6f ff ff       	jmp    c0010825 <KePanic(char const*)>
c0019905:	90                   	nop

c0019906 <SoundCard::stopPlayback()>:
c0019906:	c7 44 24 04 1c 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc002161c
c001990e:	e9 12 6f ff ff       	jmp    c0010825 <KePanic(char const*)>
c0019913:	90                   	nop

c0019914 <SoundCard::SoundCard(char const*)>:
c0019914:	83 ec 2c             	sub    esp,0x2c
c0019917:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001991b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001991f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019923:	89 04 24             	mov    DWORD PTR [esp],eax
c0019926:	e8 4d 27 ff ff       	call   c000c078 <Device::Device(char const*)>
c001992b:	ba 68 16 02 c0       	mov    edx,0xc0021668
c0019930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019934:	89 10                	mov    DWORD PTR [eax],edx
c0019936:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001993a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019941:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019945:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001994f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019953:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001995d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019961:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001996b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001996f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019979:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019981:	83 7c 24 1c 1f       	cmp    DWORD PTR [esp+0x1c],0x1f
c0019986:	7f 19                	jg     c00199a1 <SoundCard::SoundCard(char const*)+0x8d>
c0019988:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001998c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019990:	83 c2 54             	add    edx,0x54
c0019993:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001999b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001999f:	eb e0                	jmp    c0019981 <SoundCard::SoundCard(char const*)+0x6d>
c00199a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00199a5:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00199ac:	90                   	nop
c00199ad:	83 c4 2c             	add    esp,0x2c
c00199b0:	c3                   	ret    
c00199b1:	90                   	nop

c00199b2 <SoundCard::~SoundCard()>:
c00199b2:	83 ec 1c             	sub    esp,0x1c
c00199b5:	ba 68 16 02 c0       	mov    edx,0xc0021668
c00199ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199be:	89 10                	mov    DWORD PTR [eax],edx
c00199c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00199c7:	e8 18 24 ff ff       	call   c000bde4 <Device::~Device()>
c00199cc:	90                   	nop
c00199cd:	83 c4 1c             	add    esp,0x1c
c00199d0:	c3                   	ret    
c00199d1:	90                   	nop

c00199d2 <SoundCard::~SoundCard()>:
c00199d2:	83 ec 1c             	sub    esp,0x1c
c00199d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00199dc:	e8 d1 ff ff ff       	call   c00199b2 <SoundCard::~SoundCard()>
c00199e1:	c7 44 24 04 e8 01 00 00 	mov    DWORD PTR [esp+0x4],0x1e8
c00199e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00199ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00199f0:	e8 67 0f ff ff       	call   c000a95c <operator delete(void*, unsigned long)>
c00199f5:	83 c4 1c             	add    esp,0x1c
c00199f8:	c3                   	ret    
c00199f9:	90                   	nop

c00199fa <SoundCard::configureRates(int, int, int)>:
c00199fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00199fe:	31 c0                	xor    eax,eax
c0019a00:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019a07:	75 20                	jne    c0019a29 <SoundCard::configureRates(int, int, int)+0x2f>
c0019a09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a0d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019a13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a17:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a21:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019a27:	b0 01                	mov    al,0x1
c0019a29:	c3                   	ret    

c0019a2a <SoundCard::getSamples16(int, short*)>:
c0019a2a:	55                   	push   ebp
c0019a2b:	57                   	push   edi
c0019a2c:	31 ff                	xor    edi,edi
c0019a2e:	56                   	push   esi
c0019a2f:	53                   	push   ebx
c0019a30:	31 db                	xor    ebx,ebx
c0019a32:	83 ec 10             	sub    esp,0x10
c0019a35:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019a39:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019a3d:	8d 04 36             	lea    eax,[esi+esi*1]
c0019a40:	50                   	push   eax
c0019a41:	6a 00                	push   0x0
c0019a43:	55                   	push   ebp
c0019a44:	e8 37 6b fe ff       	call   c0000580 <memset>
c0019a49:	83 c4 10             	add    esp,0x10
c0019a4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a50:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0019a57:	85 c0                	test   eax,eax
c0019a59:	74 1a                	je     c0019a75 <SoundCard::getSamples16(int, short*)+0x4b>
c0019a5b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019a5f:	75 14                	jne    c0019a75 <SoundCard::getSamples16(int, short*)+0x4b>
c0019a61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a65:	55                   	push   ebp
c0019a66:	56                   	push   esi
c0019a67:	50                   	push   eax
c0019a68:	e8 e3 02 00 00       	call   c0019d50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019a6d:	83 c4 10             	add    esp,0x10
c0019a70:	39 c3                	cmp    ebx,eax
c0019a72:	0f 4c d8             	cmovl  ebx,eax
c0019a75:	47                   	inc    edi
c0019a76:	83 ff 20             	cmp    edi,0x20
c0019a79:	75 d1                	jne    c0019a4c <SoundCard::getSamples16(int, short*)+0x22>
c0019a7b:	83 c4 0c             	add    esp,0xc
c0019a7e:	89 d8                	mov    eax,ebx
c0019a80:	5b                   	pop    ebx
c0019a81:	5e                   	pop    esi
c0019a82:	5f                   	pop    edi
c0019a83:	5d                   	pop    ebp
c0019a84:	c3                   	ret    
c0019a85:	90                   	nop

c0019a86 <SoundCard::getSamples32(int, int*)>:
c0019a86:	55                   	push   ebp
c0019a87:	57                   	push   edi
c0019a88:	31 ff                	xor    edi,edi
c0019a8a:	56                   	push   esi
c0019a8b:	31 f6                	xor    esi,esi
c0019a8d:	53                   	push   ebx
c0019a8e:	83 ec 10             	sub    esp,0x10
c0019a91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a95:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019a99:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019a9d:	c1 e0 02             	shl    eax,0x2
c0019aa0:	50                   	push   eax
c0019aa1:	6a 00                	push   0x0
c0019aa3:	55                   	push   ebp
c0019aa4:	e8 d7 6a fe ff       	call   c0000580 <memset>
c0019aa9:	83 c4 10             	add    esp,0x10
c0019aac:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019ab3:	85 c0                	test   eax,eax
c0019ab5:	74 1a                	je     c0019ad1 <SoundCard::getSamples32(int, int*)+0x4b>
c0019ab7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019abb:	75 14                	jne    c0019ad1 <SoundCard::getSamples32(int, int*)+0x4b>
c0019abd:	53                   	push   ebx
c0019abe:	55                   	push   ebp
c0019abf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ac3:	50                   	push   eax
c0019ac4:	e8 43 03 00 00       	call   c0019e0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019ac9:	83 c4 10             	add    esp,0x10
c0019acc:	39 c6                	cmp    esi,eax
c0019ace:	0f 4c f0             	cmovl  esi,eax
c0019ad1:	47                   	inc    edi
c0019ad2:	83 ff 20             	cmp    edi,0x20
c0019ad5:	75 d5                	jne    c0019aac <SoundCard::getSamples32(int, int*)+0x26>
c0019ad7:	85 f6                	test   esi,esi
c0019ad9:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0019adf:	75 0f                	jne    c0019af0 <SoundCard::getSamples32(int, int*)+0x6a>
c0019ae1:	84 c0                	test   al,al
c0019ae3:	74 1b                	je     c0019b00 <SoundCard::getSamples32(int, int*)+0x7a>
c0019ae5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ae7:	83 ec 0c             	sub    esp,0xc
c0019aea:	53                   	push   ebx
c0019aeb:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019aee:	eb 0d                	jmp    c0019afd <SoundCard::getSamples32(int, int*)+0x77>
c0019af0:	84 c0                	test   al,al
c0019af2:	75 0c                	jne    c0019b00 <SoundCard::getSamples32(int, int*)+0x7a>
c0019af4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019af6:	83 ec 0c             	sub    esp,0xc
c0019af9:	53                   	push   ebx
c0019afa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019afd:	83 c4 10             	add    esp,0x10
c0019b00:	83 c4 0c             	add    esp,0xc
c0019b03:	89 f0                	mov    eax,esi
c0019b05:	5b                   	pop    ebx
c0019b06:	5e                   	pop    esi
c0019b07:	5f                   	pop    edi
c0019b08:	5d                   	pop    ebp
c0019b09:	c3                   	ret    

c0019b0a <SoundCard::addChannel(SoundPort*)>:
c0019b0a:	83 ec 0c             	sub    esp,0xc
c0019b0d:	31 c0                	xor    eax,eax
c0019b0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b13:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019b1b:	74 1b                	je     c0019b38 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019b1d:	40                   	inc    eax
c0019b1e:	83 f8 20             	cmp    eax,0x20
c0019b21:	75 f0                	jne    c0019b13 <SoundCard::addChannel(SoundPort*)+0x9>
c0019b23:	83 ec 0c             	sub    esp,0xc
c0019b26:	68 41 16 02 c0       	push   0xc0021641
c0019b2b:	e8 f5 6c ff ff       	call   c0010825 <KePanic(char const*)>
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	83 c8 ff             	or     eax,0xffffffff
c0019b36:	eb 0b                	jmp    c0019b43 <SoundCard::addChannel(SoundPort*)+0x39>
c0019b38:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019b3c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019b43:	83 c4 0c             	add    esp,0xc
c0019b46:	c3                   	ret    
c0019b47:	90                   	nop

c0019b48 <SoundCard::removeChannel(int)>:
c0019b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019b50:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019b5b:	c3                   	ret    

c0019b5c <SoundPort::SoundPort(int, int, int, int)>:
c0019b5c:	83 ec 1c             	sub    esp,0x1c
c0019b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b63:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b6e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b76:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019b7a:	89 10                	mov    DWORD PTR [eax],edx
c0019b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019b84:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b8b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019b8f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019b92:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0019b97:	75 13                	jne    c0019bac <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b9f:	05 a0 0f 00 00       	add    eax,0xfa0
c0019ba4:	01 c0                	add    eax,eax
c0019ba6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019baa:	66 90                	xchg   ax,ax
c0019bac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bb0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019bb4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019bb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bbb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019bc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019bc9:	c1 e0 02             	shl    eax,0x2
c0019bcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bcf:	e8 28 df fe ff       	call   c0007afc <malloc>
c0019bd4:	89 c2                	mov    edx,eax
c0019bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bda:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019bdd:	90                   	nop
c0019bde:	83 c4 1c             	add    esp,0x1c
c0019be1:	c3                   	ret    
c0019be2:	66 90                	xchg   ax,ax

c0019be4 <SoundPort::~SoundPort()>:
c0019be4:	83 ec 1c             	sub    esp,0x1c
c0019be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019beb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019bee:	85 c0                	test   eax,eax
c0019bf0:	74 1a                	je     c0019c0c <SoundPort::~SoundPort()+0x28>
c0019bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bf6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019bfc:	e8 0e df fe ff       	call   c0007b0f <free>
c0019c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c05:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c0c:	90                   	nop
c0019c0d:	83 c4 1c             	add    esp,0x1c
c0019c10:	c3                   	ret    
c0019c11:	90                   	nop
c0019c12:	66 90                	xchg   ax,ax

c0019c14 <SoundPort::unpause()>:
c0019c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c18:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019c1c:	c3                   	ret    
c0019c1d:	90                   	nop
c0019c1e:	66 90                	xchg   ax,ax

c0019c20 <SoundPort::pause()>:
c0019c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c24:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c28:	c3                   	ret    
c0019c29:	90                   	nop
c0019c2a:	66 90                	xchg   ax,ax

c0019c2c <SoundPort::getBufferUsed()>:
c0019c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c30:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019c33:	c3                   	ret    

c0019c34 <SoundPort::getBufferSize()>:
c0019c34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c38:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019c3b:	c3                   	ret    

c0019c3c <SoundPort::buffer16(short*, int)>:
c0019c3c:	55                   	push   ebp
c0019c3d:	57                   	push   edi
c0019c3e:	56                   	push   esi
c0019c3f:	53                   	push   ebx
c0019c40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c44:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019c48:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019c4b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019c4e:	74 68                	je     c0019cb8 <SoundPort::buffer16(short*, int)+0x7c>
c0019c50:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019c54:	85 c9                	test   ecx,ecx
c0019c56:	7e 60                	jle    c0019cb8 <SoundPort::buffer16(short*, int)+0x7c>
c0019c58:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019c5c:	8d 70 01             	lea    esi,[eax+0x1]
c0019c5f:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019c62:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019c65:	c1 e1 0f             	shl    ecx,0xf
c0019c68:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019c6b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c6e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c71:	74 4d                	je     c0019cc0 <SoundPort::buffer16(short*, int)+0x84>
c0019c73:	31 f6                	xor    esi,esi
c0019c75:	eb 21                	jmp    c0019c98 <SoundPort::buffer16(short*, int)+0x5c>
c0019c77:	90                   	nop
c0019c78:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019c7d:	8d 79 01             	lea    edi,[ecx+0x1]
c0019c80:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019c83:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019c86:	c1 e3 0f             	shl    ebx,0xf
c0019c89:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019c8c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019c8f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019c92:	74 1c                	je     c0019cb0 <SoundPort::buffer16(short*, int)+0x74>
c0019c94:	89 c6                	mov    esi,eax
c0019c96:	66 90                	xchg   ax,ax
c0019c98:	8d 46 01             	lea    eax,[esi+0x1]
c0019c9b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019c9f:	75 d7                	jne    c0019c78 <SoundPort::buffer16(short*, int)+0x3c>
c0019ca1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca8:	5b                   	pop    ebx
c0019ca9:	5e                   	pop    esi
c0019caa:	5f                   	pop    edi
c0019cab:	5d                   	pop    ebp
c0019cac:	c3                   	ret    
c0019cad:	8d 76 00             	lea    esi,[esi+0x0]
c0019cb0:	5b                   	pop    ebx
c0019cb1:	8d 46 02             	lea    eax,[esi+0x2]
c0019cb4:	5e                   	pop    esi
c0019cb5:	5f                   	pop    edi
c0019cb6:	5d                   	pop    ebp
c0019cb7:	c3                   	ret    
c0019cb8:	5b                   	pop    ebx
c0019cb9:	31 c0                	xor    eax,eax
c0019cbb:	5e                   	pop    esi
c0019cbc:	5f                   	pop    edi
c0019cbd:	5d                   	pop    ebp
c0019cbe:	c3                   	ret    
c0019cbf:	90                   	nop
c0019cc0:	b8 01 00 00 00       	mov    eax,0x1
c0019cc5:	eb e1                	jmp    c0019ca8 <SoundPort::buffer16(short*, int)+0x6c>
c0019cc7:	90                   	nop

c0019cc8 <SoundPort::buffer32(int*, int)>:
c0019cc8:	55                   	push   ebp
c0019cc9:	57                   	push   edi
c0019cca:	56                   	push   esi
c0019ccb:	53                   	push   ebx
c0019ccc:	83 ec 04             	sub    esp,0x4
c0019ccf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019cd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019cdb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019cde:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019ce1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ce4:	74 5a                	je     c0019d40 <SoundPort::buffer32(int*, int)+0x78>
c0019ce6:	85 c0                	test   eax,eax
c0019ce8:	7e 56                	jle    c0019d40 <SoundPort::buffer32(int*, int)+0x78>
c0019cea:	8d 71 01             	lea    esi,[ecx+0x1]
c0019ced:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019cf0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019cf3:	8b 37                	mov    esi,DWORD PTR [edi]
c0019cf5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019cf8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019cfb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019cfe:	74 48                	je     c0019d48 <SoundPort::buffer32(int*, int)+0x80>
c0019d00:	31 f6                	xor    esi,esi
c0019d02:	eb 1c                	jmp    c0019d20 <SoundPort::buffer32(int*, int)+0x58>
c0019d04:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019d07:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019d0a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019d0d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019d10:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019d14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d1a:	74 18                	je     c0019d34 <SoundPort::buffer32(int*, int)+0x6c>
c0019d1c:	89 de                	mov    esi,ebx
c0019d1e:	66 90                	xchg   ax,ax
c0019d20:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019d23:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019d26:	75 dc                	jne    c0019d04 <SoundPort::buffer32(int*, int)+0x3c>
c0019d28:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019d2b:	90                   	nop
c0019d2c:	5a                   	pop    edx
c0019d2d:	5b                   	pop    ebx
c0019d2e:	5e                   	pop    esi
c0019d2f:	5f                   	pop    edi
c0019d30:	5d                   	pop    ebp
c0019d31:	c3                   	ret    
c0019d32:	66 90                	xchg   ax,ax
c0019d34:	5a                   	pop    edx
c0019d35:	8d 46 02             	lea    eax,[esi+0x2]
c0019d38:	5b                   	pop    ebx
c0019d39:	5e                   	pop    esi
c0019d3a:	5f                   	pop    edi
c0019d3b:	5d                   	pop    ebp
c0019d3c:	c3                   	ret    
c0019d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d40:	5a                   	pop    edx
c0019d41:	31 c0                	xor    eax,eax
c0019d43:	5b                   	pop    ebx
c0019d44:	5e                   	pop    esi
c0019d45:	5f                   	pop    edi
c0019d46:	5d                   	pop    ebp
c0019d47:	c3                   	ret    
c0019d48:	b8 01 00 00 00       	mov    eax,0x1
c0019d4d:	eb dd                	jmp    c0019d2c <SoundPort::buffer32(int*, int)+0x64>
c0019d4f:	90                   	nop

c0019d50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019d50:	55                   	push   ebp
c0019d51:	57                   	push   edi
c0019d52:	56                   	push   esi
c0019d53:	53                   	push   ebx
c0019d54:	83 ec 1c             	sub    esp,0x1c
c0019d57:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019d5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019d5f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019d63:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0019d67:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019d6d:	39 03                	cmp    DWORD PTR [ebx],eax
c0019d6f:	74 0f                	je     c0019d80 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x30>
c0019d71:	c7 04 24 94 16 02 c0 	mov    DWORD PTR [esp],0xc0021694
c0019d78:	e8 a8 6a ff ff       	call   c0010825 <KePanic(char const*)>
c0019d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d80:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019d86:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019d89:	74 0d                	je     c0019d98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c0019d8b:	c7 04 24 d3 16 02 c0 	mov    DWORD PTR [esp],0xc00216d3
c0019d92:	e8 8e 6a ff ff       	call   c0010825 <KePanic(char const*)>
c0019d97:	90                   	nop
c0019d98:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019d9e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019da1:	74 0d                	je     c0019db0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019da3:	c7 04 24 d3 16 02 c0 	mov    DWORD PTR [esp],0xc00216d3
c0019daa:	e8 76 6a ff ff       	call   c0010825 <KePanic(char const*)>
c0019daf:	90                   	nop
c0019db0:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0019db3:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0019db7:	85 f6                	test   esi,esi
c0019db9:	7e 25                	jle    c0019de0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019dbb:	31 c0                	xor    eax,eax
c0019dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019dc3:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0019dc6:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0019dcc:	85 c9                	test   ecx,ecx
c0019dce:	0f 49 d1             	cmovns edx,ecx
c0019dd1:	c1 fa 0f             	sar    edx,0xf
c0019dd4:	66 01 14 47          	add    WORD PTR [edi+eax*2],dx
c0019dd8:	40                   	inc    eax
c0019dd9:	39 f0                	cmp    eax,esi
c0019ddb:	75 e3                	jne    c0019dc0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0019de0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019de3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019de6:	29 f0                	sub    eax,esi
c0019de8:	89 14 24             	mov    DWORD PTR [esp],edx
c0019deb:	c1 e0 02             	shl    eax,0x2
c0019dee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019df2:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019df5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019df9:	e8 d2 65 fe ff       	call   c00003d0 <memmove>
c0019dfe:	89 f0                	mov    eax,esi
c0019e00:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0019e03:	83 c4 1c             	add    esp,0x1c
c0019e06:	5b                   	pop    ebx
c0019e07:	5e                   	pop    esi
c0019e08:	5f                   	pop    edi
c0019e09:	5d                   	pop    ebp
c0019e0a:	c3                   	ret    
c0019e0b:	90                   	nop

c0019e0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019e0c:	55                   	push   ebp
c0019e0d:	57                   	push   edi
c0019e0e:	56                   	push   esi
c0019e0f:	53                   	push   ebx
c0019e10:	83 ec 1c             	sub    esp,0x1c
c0019e13:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019e1b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019e1f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019e23:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0019e29:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e2b:	74 0f                	je     c0019e3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x30>
c0019e2d:	c7 04 24 b4 16 02 c0 	mov    DWORD PTR [esp],0xc00216b4
c0019e34:	e8 ec 69 ff ff       	call   c0010825 <KePanic(char const*)>
c0019e39:	8d 76 00             	lea    esi,[esi+0x0]
c0019e3c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0019e42:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e45:	74 0d                	je     c0019e54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019e47:	c7 04 24 ef 16 02 c0 	mov    DWORD PTR [esp],0xc00216ef
c0019e4e:	e8 d2 69 ff ff       	call   c0010825 <KePanic(char const*)>
c0019e53:	90                   	nop
c0019e54:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0019e5a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019e5d:	74 0d                	je     c0019e6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x60>
c0019e5f:	c7 04 24 ef 16 02 c0 	mov    DWORD PTR [esp],0xc00216ef
c0019e66:	e8 ba 69 ff ff       	call   c0010825 <KePanic(char const*)>
c0019e6b:	90                   	nop
c0019e6c:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0019e6f:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0019e73:	85 ff                	test   edi,edi
c0019e75:	7e 19                	jle    c0019e90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019e77:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019e7e:	31 c0                	xor    eax,eax
c0019e80:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e83:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019e86:	01 14 06             	add    DWORD PTR [esi+eax*1],edx
c0019e89:	83 c0 04             	add    eax,0x4
c0019e8c:	39 c1                	cmp    ecx,eax
c0019e8e:	75 f0                	jne    c0019e80 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019e90:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019e93:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019e96:	29 f8                	sub    eax,edi
c0019e98:	89 14 24             	mov    DWORD PTR [esp],edx
c0019e9b:	c1 e0 02             	shl    eax,0x2
c0019e9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ea2:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019ea5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ea9:	e8 22 65 fe ff       	call   c00003d0 <memmove>
c0019eae:	89 f8                	mov    eax,edi
c0019eb0:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0019eb3:	83 c4 1c             	add    esp,0x1c
c0019eb6:	5b                   	pop    ebx
c0019eb7:	5e                   	pop    esi
c0019eb8:	5f                   	pop    edi
c0019eb9:	5d                   	pop    ebp
c0019eba:	c3                   	ret    
c0019ebb:	90                   	nop

c0019ebc <PCI::open(int, int, void*)>:
c0019ebc:	83 ec 18             	sub    esp,0x18
c0019ebf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ec7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019ecd:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ecf:	50                   	push   eax
c0019ed0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019ed3:	31 c0                	xor    eax,eax
c0019ed5:	83 c4 1c             	add    esp,0x1c
c0019ed8:	c3                   	ret    
c0019ed9:	90                   	nop

c0019eda <PCI::close(int, int, void*)>:
c0019eda:	31 c0                	xor    eax,eax
c0019edc:	c3                   	ret    
c0019edd:	90                   	nop

c0019ede <PCI::PCI()>:
c0019ede:	83 ec 1c             	sub    esp,0x1c
c0019ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ee5:	c7 44 24 04 0b 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc002170b
c0019eed:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ef0:	e8 17 19 ff ff       	call   c000b80c <Bus::Bus(char const*)>
c0019ef5:	ba b4 17 02 c0       	mov    edx,0xc00217b4
c0019efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019efe:	89 10                	mov    DWORD PTR [eax],edx
c0019f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f04:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f12:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c0019f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f1b:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019f22:	0f b6 d0             	movzx  edx,al
c0019f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f29:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019f30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f34:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019f3b:	0f b6 d0             	movzx  edx,al
c0019f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f42:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019f47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f4b:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c0019f52:	88 c1                	mov    cl,al
c0019f54:	fe c1                	inc    cl
c0019f56:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019f5a:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0019f60:	0f b6 d0             	movzx  edx,al
c0019f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019f67:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c0019f6c:	80 c9 c0             	or     cl,0xc0
c0019f6f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019f73:	90                   	nop
c0019f74:	83 c4 1c             	add    esp,0x1c
c0019f77:	c3                   	ret    

c0019f78 <PCI::readBAR8(unsigned int, int)>:
c0019f78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f80:	f6 c2 01             	test   dl,0x1
c0019f83:	74 07                	je     c0019f8c <PCI::readBAR8(unsigned int, int)+0x14>
c0019f85:	83 e2 fc             	and    edx,0xfffffffc
c0019f88:	01 c2                	add    edx,eax
c0019f8a:	ec                   	in     al,dx
c0019f8b:	c3                   	ret    
c0019f8c:	83 e2 f0             	and    edx,0xfffffff0
c0019f8f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019f92:	c3                   	ret    
c0019f93:	90                   	nop

c0019f94 <PCI::readBAR16(unsigned int, int)>:
c0019f94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f9c:	f6 c2 01             	test   dl,0x1
c0019f9f:	74 0b                	je     c0019fac <PCI::readBAR16(unsigned int, int)+0x18>
c0019fa1:	83 e2 fc             	and    edx,0xfffffffc
c0019fa4:	01 c2                	add    edx,eax
c0019fa6:	66 ed                	in     ax,dx
c0019fa8:	0f b7 c0             	movzx  eax,ax
c0019fab:	c3                   	ret    
c0019fac:	83 e2 f0             	and    edx,0xfffffff0
c0019faf:	0f b7 04 02          	movzx  eax,WORD PTR [edx+eax*1]
c0019fb3:	c3                   	ret    

c0019fb4 <PCI::readBAR32(unsigned int, int)>:
c0019fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fbc:	f6 c2 01             	test   dl,0x1
c0019fbf:	74 07                	je     c0019fc8 <PCI::readBAR32(unsigned int, int)+0x14>
c0019fc1:	83 e2 fc             	and    edx,0xfffffffc
c0019fc4:	01 c2                	add    edx,eax
c0019fc6:	ed                   	in     eax,dx
c0019fc7:	c3                   	ret    
c0019fc8:	83 e2 f0             	and    edx,0xfffffff0
c0019fcb:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019fce:	c3                   	ret    
c0019fcf:	90                   	nop

c0019fd0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019fd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fdc:	f6 c2 01             	test   dl,0x1
c0019fdf:	74 07                	je     c0019fe8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019fe1:	83 e2 fc             	and    edx,0xfffffffc
c0019fe4:	01 ca                	add    edx,ecx
c0019fe6:	ee                   	out    dx,al
c0019fe7:	c3                   	ret    
c0019fe8:	83 e2 f0             	and    edx,0xfffffff0
c0019feb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019fee:	c3                   	ret    
c0019fef:	90                   	nop

c0019ff0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019ff0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ff4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ff8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0019ffd:	f6 c2 01             	test   dl,0x1
c001a000:	74 08                	je     c001a00a <PCI::writeBAR16(unsigned int, unsigned short, int)+0x1a>
c001a002:	83 e2 fc             	and    edx,0xfffffffc
c001a005:	01 ca                	add    edx,ecx
c001a007:	66 ef                	out    dx,ax
c001a009:	c3                   	ret    
c001a00a:	83 e2 f0             	and    edx,0xfffffff0
c001a00d:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a011:	c3                   	ret    

c001a012 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a012:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a016:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a01a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a01e:	f6 c2 01             	test   dl,0x1
c001a021:	74 07                	je     c001a02a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a023:	83 e2 fc             	and    edx,0xfffffffc
c001a026:	01 ca                	add    edx,ecx
c001a028:	ef                   	out    dx,eax
c001a029:	c3                   	ret    
c001a02a:	83 e2 f0             	and    edx,0xfffffff0
c001a02d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a030:	c3                   	ret    
c001a031:	90                   	nop

c001a032 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a032:	53                   	push   ebx
c001a033:	83 ec 18             	sub    esp,0x18
c001a036:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a03a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a03e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a042:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a046:	80 fb 07             	cmp    bl,0x7
c001a049:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a04d:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a051:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a055:	76 10                	jbe    c001a067 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x35>
c001a057:	83 ec 0c             	sub    esp,0xc
c001a05a:	68 13 17 02 c0       	push   0xc0021713
c001a05f:	e8 c1 67 ff ff       	call   c0010825 <KePanic(char const*)>
c001a064:	83 c4 10             	add    esp,0x10
c001a067:	80 7c 24 0e 0f       	cmp    BYTE PTR [esp+0xe],0xf
c001a06c:	76 10                	jbe    c001a07e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x4c>
c001a06e:	83 ec 0c             	sub    esp,0xc
c001a071:	68 43 17 02 c0       	push   0xc0021743
c001a076:	e8 aa 67 ff ff       	call   c0010825 <KePanic(char const*)>
c001a07b:	83 c4 10             	add    esp,0x10
c001a07e:	88 d8                	mov    al,bl
c001a080:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a085:	00 c0                	add    al,al
c001a087:	0c f0                	or     al,0xf0
c001a089:	ee                   	out    dx,al
c001a08a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a08f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a093:	ee                   	out    dx,al
c001a094:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a099:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001a09e:	83 c4 18             	add    esp,0x18
c001a0a1:	5b                   	pop    ebx
c001a0a2:	c1 e0 08             	shl    eax,0x8
c001a0a5:	83 e2 fc             	and    edx,0xfffffffc
c001a0a8:	09 d0                	or     eax,edx
c001a0aa:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a0af:	c3                   	ret    

c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a0b0:	57                   	push   edi
c001a0b1:	56                   	push   esi
c001a0b2:	53                   	push   ebx
c001a0b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0b7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001a0bc:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a0c1:	0f b6 4c 24 1c       	movzx  ecx,BYTE PTR [esp+0x1c]
c001a0c6:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a0cc:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
c001a0d0:	83 ff 01             	cmp    edi,0x1
c001a0d3:	75 3f                	jne    c001a114 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x64>
c001a0d5:	c1 e0 10             	shl    eax,0x10
c001a0d8:	c1 e1 08             	shl    ecx,0x8
c001a0db:	89 c7                	mov    edi,eax
c001a0dd:	c1 e2 0b             	shl    edx,0xb
c001a0e0:	88 d8                	mov    al,bl
c001a0e2:	24 fc                	and    al,0xfc
c001a0e4:	0f b6 f0             	movzx  esi,al
c001a0e7:	89 f8                	mov    eax,edi
c001a0e9:	09 f0                	or     eax,esi
c001a0eb:	09 c8                	or     eax,ecx
c001a0ed:	09 d0                	or     eax,edx
c001a0ef:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a0f4:	0d 00 00 00 80       	or     eax,0x80000000
c001a0f9:	ef                   	out    dx,eax
c001a0fa:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a0ff:	ed                   	in     eax,dx
c001a100:	80 e3 02             	and    bl,0x2
c001a103:	0f b6 db             	movzx  ebx,bl
c001a106:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a10d:	d3 e8                	shr    eax,cl
c001a10f:	0f b7 c0             	movzx  eax,ax
c001a112:	eb 41                	jmp    c001a155 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a114:	83 ff 02             	cmp    edi,0x2
c001a117:	75 2a                	jne    c001a143 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a119:	83 ec 0c             	sub    esp,0xc
c001a11c:	0f b6 fb             	movzx  edi,bl
c001a11f:	57                   	push   edi
c001a120:	51                   	push   ecx
c001a121:	52                   	push   edx
c001a122:	50                   	push   eax
c001a123:	56                   	push   esi
c001a124:	e8 09 ff ff ff       	call   c001a032 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a129:	89 c2                	mov    edx,eax
c001a12b:	ed                   	in     eax,dx
c001a12c:	80 e3 02             	and    bl,0x2
c001a12f:	83 c4 20             	add    esp,0x20
c001a132:	0f b6 db             	movzx  ebx,bl
c001a135:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a13c:	d3 e8                	shr    eax,cl
c001a13e:	0f b7 c0             	movzx  eax,ax
c001a141:	eb 12                	jmp    c001a155 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a143:	83 ec 0c             	sub    esp,0xc
c001a146:	68 73 17 02 c0       	push   0xc0021773
c001a14b:	e8 d5 66 ff ff       	call   c0010825 <KePanic(char const*)>
c001a150:	83 c4 10             	add    esp,0x10
c001a153:	31 c0                	xor    eax,eax
c001a155:	5b                   	pop    ebx
c001a156:	5e                   	pop    esi
c001a157:	5f                   	pop    edi
c001a158:	c3                   	ret    
c001a159:	90                   	nop

c001a15a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a15a:	83 ec 18             	sub    esp,0x18
c001a15d:	6a 00                	push   0x0
c001a15f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a164:	50                   	push   eax
c001a165:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a16a:	50                   	push   eax
c001a16b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a170:	50                   	push   eax
c001a171:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a175:	e8 36 ff ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a17a:	83 c4 2c             	add    esp,0x2c
c001a17d:	c3                   	ret    

c001a17e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a17e:	83 ec 18             	sub    esp,0x18
c001a181:	6a 0e                	push   0xe
c001a183:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a188:	50                   	push   eax
c001a189:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a18e:	50                   	push   eax
c001a18f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a194:	50                   	push   eax
c001a195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a199:	e8 12 ff ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a19e:	83 c4 2c             	add    esp,0x2c
c001a1a1:	0f b6 c0             	movzx  eax,al
c001a1a4:	c3                   	ret    
c001a1a5:	90                   	nop

c001a1a6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a1a6:	55                   	push   ebp
c001a1a7:	57                   	push   edi
c001a1a8:	56                   	push   esi
c001a1a9:	53                   	push   ebx
c001a1aa:	83 ec 18             	sub    esp,0x18
c001a1ad:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a1b2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a1b7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a1bc:	6a 0a                	push   0xa
c001a1be:	56                   	push   esi
c001a1bf:	55                   	push   ebp
c001a1c0:	57                   	push   edi
c001a1c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1c5:	e8 e6 fe ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1ca:	83 c4 14             	add    esp,0x14
c001a1cd:	6a 0a                	push   0xa
c001a1cf:	56                   	push   esi
c001a1d0:	55                   	push   ebp
c001a1d1:	57                   	push   edi
c001a1d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1d6:	0f b7 d8             	movzx  ebx,ax
c001a1d9:	0f b6 db             	movzx  ebx,bl
c001a1dc:	e8 cf fe ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a1e1:	83 c4 2c             	add    esp,0x2c
c001a1e4:	25 00 ff 00 00       	and    eax,0xff00
c001a1e9:	09 d8                	or     eax,ebx
c001a1eb:	5b                   	pop    ebx
c001a1ec:	5e                   	pop    esi
c001a1ed:	5f                   	pop    edi
c001a1ee:	5d                   	pop    ebp
c001a1ef:	c3                   	ret    

c001a1f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a1f0:	83 ec 18             	sub    esp,0x18
c001a1f3:	6a 08                	push   0x8
c001a1f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1fa:	50                   	push   eax
c001a1fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a200:	50                   	push   eax
c001a201:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a206:	50                   	push   eax
c001a207:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a20b:	e8 a0 fe ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a210:	83 c4 2c             	add    esp,0x2c
c001a213:	0f b6 c4             	movzx  eax,ah
c001a216:	c3                   	ret    
c001a217:	90                   	nop

c001a218 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a218:	83 ec 18             	sub    esp,0x18
c001a21b:	6a 08                	push   0x8
c001a21d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a222:	50                   	push   eax
c001a223:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a228:	50                   	push   eax
c001a229:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a22e:	50                   	push   eax
c001a22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a233:	e8 78 fe ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a238:	83 c4 2c             	add    esp,0x2c
c001a23b:	0f b7 c0             	movzx  eax,ax
c001a23e:	c3                   	ret    
c001a23f:	90                   	nop

c001a240 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a240:	83 ec 18             	sub    esp,0x18
c001a243:	6a 3c                	push   0x3c
c001a245:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a24a:	50                   	push   eax
c001a24b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a250:	50                   	push   eax
c001a251:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a256:	50                   	push   eax
c001a257:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a25b:	e8 50 fe ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a260:	83 c4 2c             	add    esp,0x2c
c001a263:	0f b7 c0             	movzx  eax,ax
c001a266:	c3                   	ret    
c001a267:	90                   	nop

c001a268 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a268:	83 ec 18             	sub    esp,0x18
c001a26b:	6a 18                	push   0x18
c001a26d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a272:	50                   	push   eax
c001a273:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a278:	50                   	push   eax
c001a279:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a27e:	50                   	push   eax
c001a27f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a283:	e8 28 fe ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a288:	83 c4 2c             	add    esp,0x2c
c001a28b:	0f b6 c4             	movzx  eax,ah
c001a28e:	c3                   	ret    
c001a28f:	90                   	nop

c001a290 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a290:	55                   	push   ebp
c001a291:	57                   	push   edi
c001a292:	56                   	push   esi
c001a293:	53                   	push   ebx
c001a294:	83 ec 28             	sub    esp,0x28
c001a297:	8a 5c 24 40          	mov    bl,BYTE PTR [esp+0x40]
c001a29b:	0f b6 74 24 4c       	movzx  esi,BYTE PTR [esp+0x4c]
c001a2a0:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a2a5:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a2aa:	c0 e3 02             	shl    bl,0x2
c001a2ad:	88 d8                	mov    al,bl
c001a2af:	80 c3 10             	add    bl,0x10
c001a2b2:	04 12                	add    al,0x12
c001a2b4:	0f b6 db             	movzx  ebx,bl
c001a2b7:	0f b6 c0             	movzx  eax,al
c001a2ba:	50                   	push   eax
c001a2bb:	56                   	push   esi
c001a2bc:	57                   	push   edi
c001a2bd:	55                   	push   ebp
c001a2be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a2c2:	e8 e9 fd ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2c7:	0f b7 c0             	movzx  eax,ax
c001a2ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2ce:	83 c4 14             	add    esp,0x14
c001a2d1:	53                   	push   ebx
c001a2d2:	56                   	push   esi
c001a2d3:	57                   	push   edi
c001a2d4:	55                   	push   ebp
c001a2d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a2d9:	e8 d2 fd ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2de:	0f b7 d0             	movzx  edx,ax
c001a2e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2e5:	83 c4 3c             	add    esp,0x3c
c001a2e8:	5b                   	pop    ebx
c001a2e9:	5e                   	pop    esi
c001a2ea:	c1 e0 10             	shl    eax,0x10
c001a2ed:	09 d0                	or     eax,edx
c001a2ef:	5f                   	pop    edi
c001a2f0:	5d                   	pop    ebp
c001a2f1:	c3                   	ret    

c001a2f2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a2f2:	55                   	push   ebp
c001a2f3:	57                   	push   edi
c001a2f4:	56                   	push   esi
c001a2f5:	53                   	push   ebx
c001a2f6:	83 ec 0c             	sub    esp,0xc
c001a2f9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a2fd:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001a302:	0f b6 54 24 28       	movzx  edx,BYTE PTR [esp+0x28]
c001a307:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a30c:	8b af 58 01 00 00    	mov    ebp,DWORD PTR [edi+0x158]
c001a312:	0f b6 5c 24 30       	movzx  ebx,BYTE PTR [esp+0x30]
c001a317:	0f b7 74 24 34       	movzx  esi,WORD PTR [esp+0x34]
c001a31c:	83 fd 01             	cmp    ebp,0x1
c001a31f:	75 50                	jne    c001a371 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x7f>
c001a321:	c1 e0 08             	shl    eax,0x8
c001a324:	89 cf                	mov    edi,ecx
c001a326:	c1 e7 10             	shl    edi,0x10
c001a329:	88 d9                	mov    cl,bl
c001a32b:	c1 e2 0b             	shl    edx,0xb
c001a32e:	80 e1 fc             	and    cl,0xfc
c001a331:	0f b6 c9             	movzx  ecx,cl
c001a334:	09 f9                	or     ecx,edi
c001a336:	09 c1                	or     ecx,eax
c001a338:	09 d1                	or     ecx,edx
c001a33a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a33f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a345:	89 c8                	mov    eax,ecx
c001a347:	ef                   	out    dx,eax
c001a348:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a34d:	ed                   	in     eax,dx
c001a34e:	80 e3 02             	and    bl,0x2
c001a351:	74 08                	je     c001a35b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x69>
c001a353:	c1 e6 10             	shl    esi,0x10
c001a356:	0f b7 c0             	movzx  eax,ax
c001a359:	eb 03                	jmp    c001a35e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x6c>
c001a35b:	66 31 c0             	xor    ax,ax
c001a35e:	09 c6                	or     esi,eax
c001a360:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a365:	89 c8                	mov    eax,ecx
c001a367:	ef                   	out    dx,eax
c001a368:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a36d:	89 f0                	mov    eax,esi
c001a36f:	eb 2d                	jmp    c001a39e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xac>
c001a371:	83 fd 02             	cmp    ebp,0x2
c001a374:	75 31                	jne    c001a3a7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xb5>
c001a376:	83 ec 0c             	sub    esp,0xc
c001a379:	53                   	push   ebx
c001a37a:	50                   	push   eax
c001a37b:	52                   	push   edx
c001a37c:	51                   	push   ecx
c001a37d:	57                   	push   edi
c001a37e:	e8 af fc ff ff       	call   c001a032 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a383:	0f b7 c8             	movzx  ecx,ax
c001a386:	89 ca                	mov    edx,ecx
c001a388:	ed                   	in     eax,dx
c001a389:	83 c4 20             	add    esp,0x20
c001a38c:	f6 c1 02             	test   cl,0x2
c001a38f:	74 08                	je     c001a399 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xa7>
c001a391:	c1 e6 10             	shl    esi,0x10
c001a394:	0f b7 c0             	movzx  eax,ax
c001a397:	eb 03                	jmp    c001a39c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xaa>
c001a399:	66 31 c0             	xor    ax,ax
c001a39c:	09 f0                	or     eax,esi
c001a39e:	ef                   	out    dx,eax
c001a39f:	83 c4 0c             	add    esp,0xc
c001a3a2:	5b                   	pop    ebx
c001a3a3:	5e                   	pop    esi
c001a3a4:	5f                   	pop    edi
c001a3a5:	5d                   	pop    ebp
c001a3a6:	c3                   	ret    
c001a3a7:	c7 44 24 20 73 17 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021773
c001a3af:	83 c4 0c             	add    esp,0xc
c001a3b2:	5b                   	pop    ebx
c001a3b3:	5e                   	pop    esi
c001a3b4:	5f                   	pop    edi
c001a3b5:	5d                   	pop    ebp
c001a3b6:	e9 6a 64 ff ff       	jmp    c0010825 <KePanic(char const*)>
c001a3bb:	90                   	nop

c001a3bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a3bc:	55                   	push   ebp
c001a3bd:	57                   	push   edi
c001a3be:	56                   	push   esi
c001a3bf:	53                   	push   ebx
c001a3c0:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001a3c6:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a3cd:	8b bc 24 74 01 00 00 	mov    edi,DWORD PTR [esp+0x174]
c001a3d4:	0f 85 bd 00 00 00    	jne    c001a497 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a3da:	83 ec 0c             	sub    esp,0xc
c001a3dd:	68 14 01 00 00       	push   0x114
c001a3e2:	e8 15 d7 fe ff       	call   c0007afc <malloc>
c001a3e7:	83 c4 0c             	add    esp,0xc
c001a3ea:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a3f0:	68 79 17 02 c0       	push   0xc0021779
c001a3f5:	50                   	push   eax
c001a3f6:	89 c3                	mov    ebx,eax
c001a3f8:	e8 fb 0b ff ff       	call   c000aff8 <File::File(char const*, Process*)>
c001a3fd:	83 c4 10             	add    esp,0x10
c001a400:	85 db                	test   ebx,ebx
c001a402:	0f 84 4c 02 00 00    	je     c001a654 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a408:	56                   	push   esi
c001a409:	56                   	push   esi
c001a40a:	6a 01                	push   0x1
c001a40c:	53                   	push   ebx
c001a40d:	e8 a4 0c ff ff       	call   c000b0b6 <File::open(FileOpenMode)>
c001a412:	83 c4 10             	add    esp,0x10
c001a415:	85 c0                	test   eax,eax
c001a417:	0f 85 37 02 00 00    	jne    c001a654 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a41d:	52                   	push   edx
c001a41e:	8d 44 24 2f          	lea    eax,[esp+0x2f]
c001a422:	50                   	push   eax
c001a423:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a427:	50                   	push   eax
c001a428:	53                   	push   ebx
c001a429:	e8 2e 0f ff ff       	call   c000b35c <File::stat(unsigned long long*, bool*)>
c001a42e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a432:	40                   	inc    eax
c001a433:	89 04 24             	mov    DWORD PTR [esp],eax
c001a436:	e8 c1 d6 fe ff       	call   c0007afc <malloc>
c001a43b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a43f:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a443:	59                   	pop    ecx
c001a444:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a449:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a44b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a44f:	51                   	push   ecx
c001a450:	50                   	push   eax
c001a451:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a455:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a459:	53                   	push   ebx
c001a45a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a45d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c001a461:	83 c4 20             	add    esp,0x20
c001a464:	89 c8                	mov    eax,ecx
c001a466:	99                   	cdq    
c001a467:	3b 54 24 34          	cmp    edx,DWORD PTR [esp+0x34]
c001a46b:	0f 85 e3 01 00 00    	jne    c001a654 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a471:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001a475:	0f 85 d9 01 00 00    	jne    c001a654 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a47b:	83 ec 0c             	sub    esp,0xc
c001a47e:	53                   	push   ebx
c001a47f:	e8 90 0c ff ff       	call   c000b114 <File::close()>
c001a484:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a488:	83 c4 10             	add    esp,0x10
c001a48b:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a492:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a497:	0f b7 84 24 52 01 00 00 	movzx  eax,WORD PTR [esp+0x152]
c001a49f:	31 db                	xor    ebx,ebx
c001a4a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a4a9:	8b 0d 44 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028b44
c001a4af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a4b7:	8b 35 48 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028b48
c001a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4c1:	0f b7 84 24 72 01 00 00 	movzx  eax,WORD PTR [esp+0x172]
c001a4c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a4cd:	8a 84 24 50 01 00 00 	mov    al,BYTE PTR [esp+0x150]
c001a4d4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a4d8:	8a 84 24 51 01 00 00 	mov    al,BYTE PTR [esp+0x151]
c001a4df:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a4e3:	39 d9                	cmp    ecx,ebx
c001a4e5:	0f 8e 69 01 00 00    	jle    c001a654 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x298>
c001a4eb:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a4ee:	d4 40                	aam    0x40
c001a4f0:	d5 39                	aad    0x39
c001a4f2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a4f6:	8a 44 1e 01          	mov    al,BYTE PTR [esi+ebx*1+0x1]
c001a4fa:	d4 40                	aam    0x40
c001a4fc:	d5 39                	aad    0x39
c001a4fe:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001a502:	8a 44 1e 03          	mov    al,BYTE PTR [esi+ebx*1+0x3]
c001a506:	d4 40                	aam    0x40
c001a508:	d5 39                	aad    0x39
c001a50a:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001a50e:	8a 44 1e 04          	mov    al,BYTE PTR [esi+ebx*1+0x4]
c001a512:	d4 40                	aam    0x40
c001a514:	d5 39                	aad    0x39
c001a516:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a51a:	8a 44 1e 06          	mov    al,BYTE PTR [esi+ebx*1+0x6]
c001a51e:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001a522:	3c 56                	cmp    al,0x56
c001a524:	74 46                	je     c001a56c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b0>
c001a526:	d4 40                	aam    0x40
c001a528:	d5 39                	aad    0x39
c001a52a:	2c 30                	sub    al,0x30
c001a52c:	0f b6 d0             	movzx  edx,al
c001a52f:	8a 44 1e 07          	mov    al,BYTE PTR [esi+ebx*1+0x7]
c001a533:	c1 e2 04             	shl    edx,0x4
c001a536:	d4 40                	aam    0x40
c001a538:	d5 39                	aad    0x39
c001a53a:	2c 30                	sub    al,0x30
c001a53c:	0f b6 c0             	movzx  eax,al
c001a53f:	09 c2                	or     edx,eax
c001a541:	8a 44 1e 08          	mov    al,BYTE PTR [esi+ebx*1+0x8]
c001a545:	c1 e2 04             	shl    edx,0x4
c001a548:	d4 40                	aam    0x40
c001a54a:	d5 39                	aad    0x39
c001a54c:	2c 30                	sub    al,0x30
c001a54e:	0f b6 c0             	movzx  eax,al
c001a551:	09 c2                	or     edx,eax
c001a553:	8a 44 1e 09          	mov    al,BYTE PTR [esi+ebx*1+0x9]
c001a557:	c1 e2 04             	shl    edx,0x4
c001a55a:	0f b7 d2             	movzx  edx,dx
c001a55d:	d4 40                	aam    0x40
c001a55f:	d5 39                	aad    0x39
c001a561:	2c 30                	sub    al,0x30
c001a563:	0f b6 c0             	movzx  eax,al
c001a566:	09 d0                	or     eax,edx
c001a568:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a56c:	8a 54 1e 0b          	mov    dl,BYTE PTR [esi+ebx*1+0xb]
c001a570:	80 fa 58             	cmp    dl,0x58
c001a573:	74 48                	je     c001a5bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x201>
c001a575:	88 d0                	mov    al,dl
c001a577:	d4 40                	aam    0x40
c001a579:	d5 39                	aad    0x39
c001a57b:	2c 30                	sub    al,0x30
c001a57d:	0f b6 e8             	movzx  ebp,al
c001a580:	8a 44 1e 0c          	mov    al,BYTE PTR [esi+ebx*1+0xc]
c001a584:	c1 e5 04             	shl    ebp,0x4
c001a587:	d4 40                	aam    0x40
c001a589:	d5 39                	aad    0x39
c001a58b:	2c 30                	sub    al,0x30
c001a58d:	0f b6 c0             	movzx  eax,al
c001a590:	09 c5                	or     ebp,eax
c001a592:	8a 44 1e 0d          	mov    al,BYTE PTR [esi+ebx*1+0xd]
c001a596:	c1 e5 04             	shl    ebp,0x4
c001a599:	d4 40                	aam    0x40
c001a59b:	d5 39                	aad    0x39
c001a59d:	2c 30                	sub    al,0x30
c001a59f:	0f b6 c0             	movzx  eax,al
c001a5a2:	09 c5                	or     ebp,eax
c001a5a4:	8a 44 1e 0e          	mov    al,BYTE PTR [esi+ebx*1+0xe]
c001a5a8:	c1 e5 04             	shl    ebp,0x4
c001a5ab:	0f b7 ed             	movzx  ebp,bp
c001a5ae:	d4 40                	aam    0x40
c001a5b0:	d5 39                	aad    0x39
c001a5b2:	2c 30                	sub    al,0x30
c001a5b4:	0f b6 c0             	movzx  eax,al
c001a5b7:	09 e8                	or     eax,ebp
c001a5b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5bd:	8d 6c 24 30          	lea    ebp,[esp+0x30]
c001a5c1:	83 c3 10             	add    ebx,0x10
c001a5c4:	8a 04 1e             	mov    al,BYTE PTR [esi+ebx*1]
c001a5c7:	3c 0a                	cmp    al,0xa
c001a5c9:	74 07                	je     c001a5d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x216>
c001a5cb:	45                   	inc    ebp
c001a5cc:	39 d9                	cmp    ecx,ebx
c001a5ce:	75 15                	jne    c001a5e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x229>
c001a5d0:	89 cb                	mov    ebx,ecx
c001a5d2:	3c 0a                	cmp    al,0xa
c001a5d4:	0f 94 c0             	sete   al
c001a5d7:	0f b6 c0             	movzx  eax,al
c001a5da:	01 c3                	add    ebx,eax
c001a5dc:	80 7c 24 19 56       	cmp    BYTE PTR [esp+0x19],0x56
c001a5e1:	75 0c                	jne    c001a5ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x233>
c001a5e3:	eb 18                	jmp    c001a5fd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001a5e5:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001a5e8:	43                   	inc    ebx
c001a5e9:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a5ed:	eb d5                	jmp    c001a5c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001a5ef:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001a5f3:	39 6c 24 10          	cmp    DWORD PTR [esp+0x10],ebp
c001a5f7:	0f 85 e6 fe ff ff    	jne    c001a4e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a5fd:	80 fa 58             	cmp    dl,0x58
c001a600:	74 0e                	je     c001a610 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x254>
c001a602:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a606:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c001a60a:	0f 85 d3 fe ff ff    	jne    c001a4e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a610:	8a 54 24 1c          	mov    dl,BYTE PTR [esp+0x1c]
c001a614:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001a618:	c0 e2 04             	shl    dl,0x4
c001a61b:	2c 30                	sub    al,0x30
c001a61d:	08 d0                	or     al,dl
c001a61f:	38 44 24 1a          	cmp    BYTE PTR [esp+0x1a],al
c001a623:	0f 85 ba fe ff ff    	jne    c001a4e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a629:	8a 54 24 1e          	mov    dl,BYTE PTR [esp+0x1e]
c001a62d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a631:	c0 e2 04             	shl    dl,0x4
c001a634:	2c 30                	sub    al,0x30
c001a636:	08 d0                	or     al,dl
c001a638:	38 44 24 1b          	cmp    BYTE PTR [esp+0x1b],al
c001a63c:	0f 85 a1 fe ff ff    	jne    c001a4e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a642:	50                   	push   eax
c001a643:	50                   	push   eax
c001a644:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a648:	50                   	push   eax
c001a649:	57                   	push   edi
c001a64a:	e8 d1 60 fe ff       	call   c0000720 <strcpy>
c001a64f:	83 c4 10             	add    esp,0x10
c001a652:	eb 05                	jmp    c001a659 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x29d>
c001a654:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a657:	31 ff                	xor    edi,edi
c001a659:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a65f:	89 f8                	mov    eax,edi
c001a661:	5b                   	pop    ebx
c001a662:	5e                   	pop    esi
c001a663:	5f                   	pop    edi
c001a664:	5d                   	pop    ebp
c001a665:	c3                   	ret    

c001a666 <PCI::checkBus(unsigned char)>:
c001a666:	56                   	push   esi
c001a667:	53                   	push   ebx
c001a668:	31 db                	xor    ebx,ebx
c001a66a:	51                   	push   ecx
c001a66b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a670:	52                   	push   edx
c001a671:	53                   	push   ebx
c001a672:	43                   	inc    ebx
c001a673:	56                   	push   esi
c001a674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a678:	e8 f1 02 00 00       	call   c001a96e <PCI::checkDevice(unsigned char, unsigned char)>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	83 fb 20             	cmp    ebx,0x20
c001a683:	75 eb                	jne    c001a670 <PCI::checkBus(unsigned char)+0xa>
c001a685:	58                   	pop    eax
c001a686:	5b                   	pop    ebx
c001a687:	5e                   	pop    esi
c001a688:	c3                   	ret    
c001a689:	90                   	nop

c001a68a <PCI::foundDevice(PCIDeviceInfo)>:
c001a68a:	55                   	push   ebp
c001a68b:	57                   	push   edi
c001a68c:	56                   	push   esi
c001a68d:	53                   	push   ebx
c001a68e:	83 ec 1c             	sub    esp,0x1c
c001a691:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a696:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a69a:	3d ff ff 00 00       	cmp    eax,0xffff
c001a69f:	0f 84 54 01 00 00    	je     c001a7f9 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a6a5:	0f b7 7c 24 34       	movzx  edi,WORD PTR [esp+0x34]
c001a6aa:	81 ff 06 04 00 00    	cmp    edi,0x406
c001a6b0:	75 2c                	jne    c001a6de <PCI::foundDevice(PCIDeviceInfo)+0x54>
c001a6b2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a6b7:	50                   	push   eax
c001a6b8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a6bd:	50                   	push   eax
c001a6be:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a6c3:	50                   	push   eax
c001a6c4:	56                   	push   esi
c001a6c5:	e8 9e fb ff ff       	call   c001a268 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a6ca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a6ce:	0f b6 c0             	movzx  eax,al
c001a6d1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a6d5:	83 c4 2c             	add    esp,0x2c
c001a6d8:	5b                   	pop    ebx
c001a6d9:	5e                   	pop    esi
c001a6da:	5f                   	pop    edi
c001a6db:	5d                   	pop    ebp
c001a6dc:	eb 88                	jmp    c001a666 <PCI::checkBus(unsigned char)>
c001a6de:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a6e2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a6e8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a6ec:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a6f0:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001a6f4:	85 c0                	test   eax,eax
c001a6f6:	74 33                	je     c001a72b <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001a6f8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a6fb:	85 d2                	test   edx,edx
c001a6fd:	74 28                	je     c001a727 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a6ff:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001a705:	31 e9                	xor    ecx,ebp
c001a707:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001a70d:	75 18                	jne    c001a727 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a70f:	39 9a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ebx
c001a715:	75 10                	jne    c001a727 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a717:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a71b:	38 8a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],cl
c001a721:	0f 84 d2 00 00 00    	je     c001a7f9 <PCI::foundDevice(PCIDeviceInfo)+0x16f>
c001a727:	8b 00                	mov    eax,DWORD PTR [eax]
c001a729:	eb c9                	jmp    c001a6f4 <PCI::foundDevice(PCIDeviceInfo)+0x6a>
c001a72b:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a72f:	81 ff 01 06 00 00    	cmp    edi,0x601
c001a735:	75 19                	jne    c001a750 <PCI::foundDevice(PCIDeviceInfo)+0xc6>
c001a737:	83 ec 0c             	sub    esp,0xc
c001a73a:	68 64 01 00 00       	push   0x164
c001a73f:	e8 b8 d3 fe ff       	call   c0007afc <malloc>
c001a744:	89 04 24             	mov    DWORD PTR [esp],eax
c001a747:	89 c5                	mov    ebp,eax
c001a749:	e8 36 0e 00 00       	call   c001b584 <SATABus::SATABus()>
c001a74e:	eb 1f                	jmp    c001a76f <PCI::foundDevice(PCIDeviceInfo)+0xe5>
c001a750:	81 ff 01 01 00 00    	cmp    edi,0x101
c001a756:	75 60                	jne    c001a7b8 <PCI::foundDevice(PCIDeviceInfo)+0x12e>
c001a758:	83 ec 0c             	sub    esp,0xc
c001a75b:	68 70 02 00 00       	push   0x270
c001a760:	e8 97 d3 fe ff       	call   c0007afc <malloc>
c001a765:	89 04 24             	mov    DWORD PTR [esp],eax
c001a768:	89 c5                	mov    ebp,eax
c001a76a:	e8 cf 02 00 00       	call   c001aa3e <IDE::IDE()>
c001a76f:	58                   	pop    eax
c001a770:	5a                   	pop    edx
c001a771:	55                   	push   ebp
c001a772:	56                   	push   esi
c001a773:	e8 68 17 ff ff       	call   c000bee0 <Device::addChild(Device*)>
c001a778:	83 ec 1c             	sub    esp,0x1c
c001a77b:	b9 09 00 00 00       	mov    ecx,0x9
c001a780:	fc                   	cld    
c001a781:	89 e7                	mov    edi,esp
c001a783:	89 de                	mov    esi,ebx
c001a785:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a787:	55                   	push   ebp
c001a788:	e8 9b 16 ff ff       	call   c000be28 <Device::preOpenPCI(PCIDeviceInfo)>
c001a78d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a790:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a794:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a79c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a7a4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a7ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a7af:	83 c4 4c             	add    esp,0x4c
c001a7b2:	5b                   	pop    ebx
c001a7b3:	5e                   	pop    esi
c001a7b4:	5f                   	pop    edi
c001a7b5:	5d                   	pop    ebp
c001a7b6:	ff e0                	jmp    eax
c001a7b8:	83 ec 0c             	sub    esp,0xc
c001a7bb:	68 58 01 00 00       	push   0x158
c001a7c0:	e8 37 d3 fe ff       	call   c0007afc <malloc>
c001a7c5:	89 c5                	mov    ebp,eax
c001a7c7:	58                   	pop    eax
c001a7c8:	5a                   	pop    edx
c001a7c9:	68 92 17 02 c0       	push   0xc0021792
c001a7ce:	55                   	push   ebp
c001a7cf:	e8 a8 19 ff ff       	call   c000c17c <DriverlessDevice::DriverlessDevice(char const*)>
c001a7d4:	59                   	pop    ecx
c001a7d5:	5f                   	pop    edi
c001a7d6:	55                   	push   ebp
c001a7d7:	56                   	push   esi
c001a7d8:	e8 03 17 ff ff       	call   c000bee0 <Device::addChild(Device*)>
c001a7dd:	b9 09 00 00 00       	mov    ecx,0x9
c001a7e2:	fc                   	cld    
c001a7e3:	89 df                	mov    edi,ebx
c001a7e5:	89 de                	mov    esi,ebx
c001a7e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a7e9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a7ed:	83 c4 2c             	add    esp,0x2c
c001a7f0:	5b                   	pop    ebx
c001a7f1:	5e                   	pop    esi
c001a7f2:	5f                   	pop    edi
c001a7f3:	5d                   	pop    ebp
c001a7f4:	e9 2f 16 ff ff       	jmp    c000be28 <Device::preOpenPCI(PCIDeviceInfo)>
c001a7f9:	83 c4 1c             	add    esp,0x1c
c001a7fc:	5b                   	pop    ebx
c001a7fd:	5e                   	pop    esi
c001a7fe:	5f                   	pop    edi
c001a7ff:	5d                   	pop    ebp
c001a800:	c3                   	ret    
c001a801:	90                   	nop

c001a802 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a802:	55                   	push   ebp
c001a803:	57                   	push   edi
c001a804:	56                   	push   esi
c001a805:	53                   	push   ebx
c001a806:	83 ec 58             	sub    esp,0x58
c001a809:	8a 44 24 70          	mov    al,BYTE PTR [esp+0x70]
c001a80d:	0f b6 74 24 78       	movzx  esi,BYTE PTR [esp+0x78]
c001a812:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
c001a816:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001a81a:	8a 44 24 74          	mov    al,BYTE PTR [esp+0x74]
c001a81e:	0f b6 7c 24 15       	movzx  edi,BYTE PTR [esp+0x15]
c001a823:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c001a827:	89 f0                	mov    eax,esi
c001a829:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a82d:	0f b6 5c 24 16       	movzx  ebx,BYTE PTR [esp+0x16]
c001a832:	6a 0c                	push   0xc
c001a834:	56                   	push   esi
c001a835:	53                   	push   ebx
c001a836:	57                   	push   edi
c001a837:	55                   	push   ebp
c001a838:	e8 73 f8 ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a83d:	83 c4 20             	add    esp,0x20
c001a840:	56                   	push   esi
c001a841:	53                   	push   ebx
c001a842:	57                   	push   edi
c001a843:	55                   	push   ebp
c001a844:	e8 5d f9 ff ff       	call   c001a1a6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a849:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a84e:	56                   	push   esi
c001a84f:	53                   	push   ebx
c001a850:	57                   	push   edi
c001a851:	55                   	push   ebp
c001a852:	e8 e9 f9 ff ff       	call   c001a240 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a857:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a85b:	83 c4 14             	add    esp,0x14
c001a85e:	6a 3c                	push   0x3c
c001a860:	56                   	push   esi
c001a861:	53                   	push   ebx
c001a862:	57                   	push   edi
c001a863:	55                   	push   ebp
c001a864:	e8 47 f8 ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a869:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001a86f:	8b 8a 68 01 00 00    	mov    ecx,DWORD PTR [edx+0x168]
c001a875:	0f b6 c4             	movzx  eax,ah
c001a878:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a87c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a880:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001a884:	8b 81 5c 11 00 00    	mov    eax,DWORD PTR [ecx+0x115c]
c001a88a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a88e:	83 c4 20             	add    esp,0x20
c001a891:	85 c0                	test   eax,eax
c001a893:	74 2f                	je     c001a8c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a895:	31 d2                	xor    edx,edx
c001a897:	39 14 24             	cmp    DWORD PTR [esp],edx
c001a89a:	7e 28                	jle    c001a8c4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc2>
c001a89c:	0f b7 84 d1 5c 01 00 00 	movzx  eax,WORD PTR [ecx+edx*8+0x15c]
c001a8a4:	39 c3                	cmp    ebx,eax
c001a8a6:	75 19                	jne    c001a8c1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a8a8:	0f b6 84 d1 5e 01 00 00 	movzx  eax,BYTE PTR [ecx+edx*8+0x15e]
c001a8b0:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c001a8b4:	75 0b                	jne    c001a8c1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xbf>
c001a8b6:	8a 84 d1 5f 01 00 00 	mov    al,BYTE PTR [ecx+edx*8+0x15f]
c001a8bd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a8c1:	42                   	inc    edx
c001a8c2:	eb d3                	jmp    c001a897 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x95>
c001a8c4:	31 d2                	xor    edx,edx
c001a8c6:	83 ec 0c             	sub    esp,0xc
c001a8c9:	56                   	push   esi
c001a8ca:	53                   	push   ebx
c001a8cb:	57                   	push   edi
c001a8cc:	52                   	push   edx
c001a8cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a8d1:	55                   	push   ebp
c001a8d2:	e8 b9 f9 ff ff       	call   c001a290 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a8d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a8db:	89 44 94 44          	mov    DWORD PTR [esp+edx*4+0x44],eax
c001a8df:	42                   	inc    edx
c001a8e0:	83 c4 20             	add    esp,0x20
c001a8e3:	83 fa 06             	cmp    edx,0x6
c001a8e6:	75 de                	jne    c001a8c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001a8e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8f3:	c1 e2 08             	shl    edx,0x8
c001a8f6:	0f b6 c4             	movzx  eax,ah
c001a8f9:	09 d0                	or     eax,edx
c001a8fb:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001a900:	6a 02                	push   0x2
c001a902:	56                   	push   esi
c001a903:	53                   	push   ebx
c001a904:	57                   	push   edi
c001a905:	55                   	push   ebp
c001a906:	e8 a5 f7 ff ff       	call   c001a0b0 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a90b:	66 89 44 24 5e       	mov    WORD PTR [esp+0x5e],ax
c001a910:	83 c4 20             	add    esp,0x20
c001a913:	56                   	push   esi
c001a914:	53                   	push   ebx
c001a915:	57                   	push   edi
c001a916:	55                   	push   ebp
c001a917:	e8 d4 f8 ff ff       	call   c001a1f0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a91c:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a920:	56                   	push   esi
c001a921:	53                   	push   ebx
c001a922:	57                   	push   edi
c001a923:	55                   	push   ebp
c001a924:	e8 31 f8 ff ff       	call   c001a15a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a929:	b9 09 00 00 00       	mov    ecx,0x9
c001a92e:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001a933:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a937:	88 44 24 5c          	mov    BYTE PTR [esp+0x5c],al
c001a93b:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c001a93f:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001a943:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c001a947:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001a94b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a94f:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001a953:	83 ec 0c             	sub    esp,0xc
c001a956:	fc                   	cld    
c001a957:	8d 74 24 48          	lea    esi,[esp+0x48]
c001a95b:	89 e7                	mov    edi,esp
c001a95d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a95f:	55                   	push   ebp
c001a960:	e8 25 fd ff ff       	call   c001a68a <PCI::foundDevice(PCIDeviceInfo)>
c001a965:	83 c4 7c             	add    esp,0x7c
c001a968:	5b                   	pop    ebx
c001a969:	5e                   	pop    esi
c001a96a:	5f                   	pop    edi
c001a96b:	5d                   	pop    ebp
c001a96c:	c3                   	ret    
c001a96d:	90                   	nop

c001a96e <PCI::checkDevice(unsigned char, unsigned char)>:
c001a96e:	55                   	push   ebp
c001a96f:	57                   	push   edi
c001a970:	56                   	push   esi
c001a971:	53                   	push   ebx
c001a972:	83 ec 0c             	sub    esp,0xc
c001a975:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a97a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a97f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a983:	6a 00                	push   0x0
c001a985:	56                   	push   esi
c001a986:	57                   	push   edi
c001a987:	55                   	push   ebp
c001a988:	e8 cd f7 ff ff       	call   c001a15a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a98d:	6a 00                	push   0x0
c001a98f:	56                   	push   esi
c001a990:	57                   	push   edi
c001a991:	55                   	push   ebp
c001a992:	e8 6b fe ff ff       	call   c001a802 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a997:	83 c4 20             	add    esp,0x20
c001a99a:	6a 00                	push   0x0
c001a99c:	56                   	push   esi
c001a99d:	57                   	push   edi
c001a99e:	55                   	push   ebp
c001a99f:	e8 da f7 ff ff       	call   c001a17e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a9a4:	83 c4 10             	add    esp,0x10
c001a9a7:	84 c0                	test   al,al
c001a9a9:	79 2d                	jns    c001a9d8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001a9ab:	bb 01 00 00 00       	mov    ebx,0x1
c001a9b0:	53                   	push   ebx
c001a9b1:	56                   	push   esi
c001a9b2:	57                   	push   edi
c001a9b3:	55                   	push   ebp
c001a9b4:	e8 a1 f7 ff ff       	call   c001a15a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a9b9:	83 c4 10             	add    esp,0x10
c001a9bc:	0f b7 c0             	movzx  eax,ax
c001a9bf:	3d ff ff 00 00       	cmp    eax,0xffff
c001a9c4:	74 0c                	je     c001a9d2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a9c6:	53                   	push   ebx
c001a9c7:	56                   	push   esi
c001a9c8:	57                   	push   edi
c001a9c9:	55                   	push   ebp
c001a9ca:	e8 33 fe ff ff       	call   c001a802 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	43                   	inc    ebx
c001a9d3:	83 fb 08             	cmp    ebx,0x8
c001a9d6:	75 d8                	jne    c001a9b0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a9d8:	83 c4 0c             	add    esp,0xc
c001a9db:	5b                   	pop    ebx
c001a9dc:	5e                   	pop    esi
c001a9dd:	5f                   	pop    edi
c001a9de:	5d                   	pop    ebp
c001a9df:	c3                   	ret    

c001a9e0 <PCI::detect()>:
c001a9e0:	56                   	push   esi
c001a9e1:	53                   	push   ebx
c001a9e2:	53                   	push   ebx
c001a9e3:	31 db                	xor    ebx,ebx
c001a9e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a9e9:	6a 00                	push   0x0
c001a9eb:	6a 00                	push   0x0
c001a9ed:	6a 00                	push   0x0
c001a9ef:	56                   	push   esi
c001a9f0:	e8 89 f7 ff ff       	call   c001a17e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a9f5:	83 c4 10             	add    esp,0x10
c001a9f8:	a8 80                	test   al,0x80
c001a9fa:	75 21                	jne    c001aa1d <PCI::detect()+0x3d>
c001a9fc:	51                   	push   ecx
c001a9fd:	51                   	push   ecx
c001a9fe:	6a 00                	push   0x0
c001aa00:	56                   	push   esi
c001aa01:	e8 60 fc ff ff       	call   c001a666 <PCI::checkBus(unsigned char)>
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	eb 2a                	jmp    c001aa35 <PCI::detect()+0x55>
c001aa0b:	52                   	push   edx
c001aa0c:	52                   	push   edx
c001aa0d:	53                   	push   ebx
c001aa0e:	43                   	inc    ebx
c001aa0f:	56                   	push   esi
c001aa10:	e8 51 fc ff ff       	call   c001a666 <PCI::checkBus(unsigned char)>
c001aa15:	83 c4 10             	add    esp,0x10
c001aa18:	83 fb 08             	cmp    ebx,0x8
c001aa1b:	74 18                	je     c001aa35 <PCI::detect()+0x55>
c001aa1d:	53                   	push   ebx
c001aa1e:	6a 00                	push   0x0
c001aa20:	6a 00                	push   0x0
c001aa22:	56                   	push   esi
c001aa23:	e8 32 f7 ff ff       	call   c001a15a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa28:	83 c4 10             	add    esp,0x10
c001aa2b:	0f b7 c0             	movzx  eax,ax
c001aa2e:	3d ff ff 00 00       	cmp    eax,0xffff
c001aa33:	74 d6                	je     c001aa0b <PCI::detect()+0x2b>
c001aa35:	58                   	pop    eax
c001aa36:	5b                   	pop    ebx
c001aa37:	5e                   	pop    esi
c001aa38:	c3                   	ret    
c001aa39:	90                   	nop

c001aa3a <IDE::close(int, int, void*)>:
c001aa3a:	83 c8 ff             	or     eax,0xffffffff
c001aa3d:	c3                   	ret    

c001aa3e <IDE::IDE()>:
c001aa3e:	83 ec 1c             	sub    esp,0x1c
c001aa41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa45:	c7 44 24 04 d8 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217d8
c001aa4d:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa50:	e8 cb 17 ff ff       	call   c000c220 <HardDiskController::HardDiskController(char const*)>
c001aa55:	ba 68 18 02 c0       	mov    edx,0xc0021868
c001aa5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa5e:	89 10                	mov    DWORD PTR [eax],edx
c001aa60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa64:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001aa6b:	90                   	nop
c001aa6c:	83 c4 1c             	add    esp,0x1c
c001aa6f:	c3                   	ret    

c001aa70 <IDE::prepareInterrupt(unsigned char)>:
c001aa70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aa75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa79:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001aa81:	c3                   	ret    

c001aa82 <selectDrive(unsigned char, unsigned char)>:
c001aa82:	c3                   	ret    
c001aa83:	90                   	nop

c001aa84 <IDE::getBase(unsigned char)>:
c001aa84:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001aa89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa8d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001aa95:	c3                   	ret    

c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001aa96:	55                   	push   ebp
c001aa97:	57                   	push   edi
c001aa98:	56                   	push   esi
c001aa99:	53                   	push   ebx
c001aa9a:	83 ec 1c             	sub    esp,0x1c
c001aa9d:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001aaa2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aaa6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aaaa:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001aaaf:	88 d9                	mov    cl,bl
c001aab1:	80 e9 08             	sub    cl,0x8
c001aab4:	80 f9 03             	cmp    cl,0x3
c001aab7:	77 4e                	ja     c001ab07 <IDE::write(unsigned char, unsigned char, unsigned char)+0x71>
c001aab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aabd:	0f b6 fa             	movzx  edi,dl
c001aac0:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001aac3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001aac7:	80 ca 80             	or     dl,0x80
c001aaca:	0f b6 d2             	movzx  edx,dl
c001aacd:	52                   	push   edx
c001aace:	6a 0c                	push   0xc
c001aad0:	57                   	push   edi
c001aad1:	56                   	push   esi
c001aad2:	e8 bf ff ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aad7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001aadc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aae0:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001aae4:	ee                   	out    dx,al
c001aae5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001aaea:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001aaee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001aaf2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001aafa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aafe:	83 c4 2c             	add    esp,0x2c
c001ab01:	5b                   	pop    ebx
c001ab02:	5e                   	pop    esi
c001ab03:	5f                   	pop    edi
c001ab04:	5d                   	pop    ebp
c001ab05:	eb 8f                	jmp    c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab07:	80 fb 07             	cmp    bl,0x7
c001ab0a:	77 0c                	ja     c001ab18 <IDE::write(unsigned char, unsigned char, unsigned char)+0x82>
c001ab0c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ab14:	01 da                	add    edx,ebx
c001ab16:	eb 23                	jmp    c001ab3b <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001ab18:	80 fb 0d             	cmp    bl,0xd
c001ab1b:	77 0d                	ja     c001ab2a <IDE::write(unsigned char, unsigned char, unsigned char)+0x94>
c001ab1d:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ab24:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ab28:	eb 11                	jmp    c001ab3b <IDE::write(unsigned char, unsigned char, unsigned char)+0xa5>
c001ab2a:	80 fb 15             	cmp    bl,0x15
c001ab2d:	77 0d                	ja     c001ab3c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa6>
c001ab2f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ab37:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ab3b:	ee                   	out    dx,al
c001ab3c:	83 c4 1c             	add    esp,0x1c
c001ab3f:	5b                   	pop    ebx
c001ab40:	5e                   	pop    esi
c001ab41:	5f                   	pop    edi
c001ab42:	5d                   	pop    ebp
c001ab43:	c3                   	ret    

c001ab44 <IDE::read(unsigned char, unsigned char)>:
c001ab44:	55                   	push   ebp
c001ab45:	57                   	push   edi
c001ab46:	56                   	push   esi
c001ab47:	53                   	push   ebx
c001ab48:	83 ec 1c             	sub    esp,0x1c
c001ab4b:	0f b6 5c 24 38       	movzx  ebx,BYTE PTR [esp+0x38]
c001ab50:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab54:	0f b6 54 24 34       	movzx  edx,BYTE PTR [esp+0x34]
c001ab59:	88 d8                	mov    al,bl
c001ab5b:	2c 08                	sub    al,0x8
c001ab5d:	3c 03                	cmp    al,0x3
c001ab5f:	77 3f                	ja     c001aba0 <IDE::read(unsigned char, unsigned char)+0x5c>
c001ab61:	0f b6 f2             	movzx  esi,dl
c001ab64:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ab67:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001ab6b:	0c 80                	or     al,0x80
c001ab6d:	0f b6 c0             	movzx  eax,al
c001ab70:	50                   	push   eax
c001ab71:	6a 0c                	push   0xc
c001ab73:	56                   	push   esi
c001ab74:	57                   	push   edi
c001ab75:	e8 1c ff ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab7a:	66 8b 44 ef 0a       	mov    ax,WORD PTR [edi+ebp*8+0xa]
c001ab7f:	8d 54 18 fa          	lea    edx,[eax+ebx*1-0x6]
c001ab83:	ec                   	in     al,dx
c001ab84:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab88:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ab8d:	52                   	push   edx
c001ab8e:	6a 0c                	push   0xc
c001ab90:	56                   	push   esi
c001ab91:	57                   	push   edi
c001ab92:	e8 ff fe ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab97:	83 c4 20             	add    esp,0x20
c001ab9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ab9e:	eb 38                	jmp    c001abd8 <IDE::read(unsigned char, unsigned char)+0x94>
c001aba0:	80 fb 07             	cmp    bl,0x7
c001aba3:	77 0d                	ja     c001abb2 <IDE::read(unsigned char, unsigned char)+0x6e>
c001aba5:	66 8b 84 d7 5a 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15a]
c001abad:	8d 14 18             	lea    edx,[eax+ebx*1]
c001abb0:	eb 25                	jmp    c001abd7 <IDE::read(unsigned char, unsigned char)+0x93>
c001abb2:	80 fb 0d             	cmp    bl,0xd
c001abb5:	77 0d                	ja     c001abc4 <IDE::read(unsigned char, unsigned char)+0x80>
c001abb7:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001abbe:	8d 54 18 f4          	lea    edx,[eax+ebx*1-0xc]
c001abc2:	eb 13                	jmp    c001abd7 <IDE::read(unsigned char, unsigned char)+0x93>
c001abc4:	31 c0                	xor    eax,eax
c001abc6:	80 fb 15             	cmp    bl,0x15
c001abc9:	77 0d                	ja     c001abd8 <IDE::read(unsigned char, unsigned char)+0x94>
c001abcb:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001abd3:	8d 54 18 f2          	lea    edx,[eax+ebx*1-0xe]
c001abd7:	ec                   	in     al,dx
c001abd8:	83 c4 1c             	add    esp,0x1c
c001abdb:	5b                   	pop    ebx
c001abdc:	5e                   	pop    esi
c001abdd:	5f                   	pop    edi
c001abde:	5d                   	pop    ebp
c001abdf:	c3                   	ret    

c001abe0 <IDE::waitInterrupt(unsigned char)>:
c001abe0:	57                   	push   edi
c001abe1:	56                   	push   esi
c001abe2:	53                   	push   ebx
c001abe3:	31 db                	xor    ebx,ebx
c001abe5:	83 ec 10             	sub    esp,0x10
c001abe8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001abec:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001abf1:	8a 84 37 6c 02 00 00 	mov    al,BYTE PTR [edi+esi*1+0x26c]
c001abf8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001abfc:	84 c0                	test   al,al
c001abfe:	75 32                	jne    c001ac32 <IDE::waitInterrupt(unsigned char)+0x52>
c001ac00:	50                   	push   eax
c001ac01:	6a 0c                	push   0xc
c001ac03:	56                   	push   esi
c001ac04:	57                   	push   edi
c001ac05:	e8 3a ff ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001ac0a:	83 c4 10             	add    esp,0x10
c001ac0d:	24 01                	and    al,0x1
c001ac0f:	84 c0                	test   al,al
c001ac11:	75 27                	jne    c001ac3a <IDE::waitInterrupt(unsigned char)+0x5a>
c001ac13:	f6 c3 04             	test   bl,0x4
c001ac16:	75 12                	jne    c001ac2a <IDE::waitInterrupt(unsigned char)+0x4a>
c001ac18:	83 fb 32             	cmp    ebx,0x32
c001ac1b:	7e 0d                	jle    c001ac2a <IDE::waitInterrupt(unsigned char)+0x4a>
c001ac1d:	83 ec 0c             	sub    esp,0xc
c001ac20:	6a 64                	push   0x64
c001ac22:	e8 05 a8 ff ff       	call   c001542c <milliTenthSleep(unsigned int)>
c001ac27:	83 c4 10             	add    esp,0x10
c001ac2a:	83 fb 3c             	cmp    ebx,0x3c
c001ac2d:	74 0b                	je     c001ac3a <IDE::waitInterrupt(unsigned char)+0x5a>
c001ac2f:	43                   	inc    ebx
c001ac30:	eb bf                	jmp    c001abf1 <IDE::waitInterrupt(unsigned char)+0x11>
c001ac32:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ac3a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac3e:	83 c4 10             	add    esp,0x10
c001ac41:	5b                   	pop    ebx
c001ac42:	5e                   	pop    esi
c001ac43:	5f                   	pop    edi
c001ac44:	c3                   	ret    

c001ac45 <ideChannel0IRQHandler(regs*, void*)>:
c001ac45:	83 ec 10             	sub    esp,0x10
c001ac48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac4c:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ac53:	6a 07                	push   0x7
c001ac55:	6a 00                	push   0x0
c001ac57:	50                   	push   eax
c001ac58:	e8 e7 fe ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001ac5d:	83 c4 1c             	add    esp,0x1c
c001ac60:	c3                   	ret    

c001ac61 <ideChannel1IRQHandler(regs*, void*)>:
c001ac61:	83 ec 10             	sub    esp,0x10
c001ac64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac68:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ac6f:	6a 07                	push   0x7
c001ac71:	6a 01                	push   0x1
c001ac73:	50                   	push   eax
c001ac74:	e8 cb fe ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001ac79:	83 c4 1c             	add    esp,0x1c
c001ac7c:	c3                   	ret    
c001ac7d:	90                   	nop

c001ac7e <IDE::enableIRQs(unsigned char, bool)>:
c001ac7e:	57                   	push   edi
c001ac7f:	56                   	push   esi
c001ac80:	be 04 00 00 00       	mov    esi,0x4
c001ac85:	53                   	push   ebx
c001ac86:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ac8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac8f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ac94:	0f 94 c0             	sete   al
c001ac97:	00 c0                	add    al,al
c001ac99:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001aca0:	0f b6 c0             	movzx  eax,al
c001aca3:	50                   	push   eax
c001aca4:	6a 0c                	push   0xc
c001aca6:	57                   	push   edi
c001aca7:	53                   	push   ebx
c001aca8:	e8 e9 fd ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acad:	83 c4 10             	add    esp,0x10
c001acb0:	50                   	push   eax
c001acb1:	6a 0c                	push   0xc
c001acb3:	57                   	push   edi
c001acb4:	53                   	push   ebx
c001acb5:	e8 8a fe ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001acba:	83 c4 10             	add    esp,0x10
c001acbd:	4e                   	dec    esi
c001acbe:	75 f0                	jne    c001acb0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001acc0:	5b                   	pop    ebx
c001acc1:	5e                   	pop    esi
c001acc2:	5f                   	pop    edi
c001acc3:	c3                   	ret    

c001acc4 <IDE::open(int, int, void*)>:
c001acc4:	55                   	push   ebp
c001acc5:	57                   	push   edi
c001acc6:	56                   	push   esi
c001acc7:	53                   	push   ebx
c001acc8:	83 ec 1c             	sub    esp,0x1c
c001accb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001accf:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001acd6:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001acdf:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ace8:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001acef:	0f 85 b7 02 00 00    	jne    c001afac <IDE::open(int, int, void*)+0x2e8>
c001acf5:	8a 8b 1f 01 00 00    	mov    cl,BYTE PTR [ebx+0x11f]
c001acfb:	88 c8                	mov    al,cl
c001acfd:	24 7f                	and    al,0x7f
c001acff:	0f b6 c0             	movzx  eax,al
c001ad02:	83 f8 05             	cmp    eax,0x5
c001ad05:	74 05                	je     c001ad0c <IDE::open(int, int, void*)+0x48>
c001ad07:	83 f8 0f             	cmp    eax,0xf
c001ad0a:	75 32                	jne    c001ad3e <IDE::open(int, int, void*)+0x7a>
c001ad0c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ad12:	83 e0 fc             	and    eax,0xfffffffc
c001ad15:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ad1c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ad22:	83 e0 fc             	and    eax,0xfffffffc
c001ad25:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ad2c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ad32:	83 e0 fc             	and    eax,0xfffffffc
c001ad35:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ad3c:	eb 14                	jmp    c001ad52 <IDE::open(int, int, void*)+0x8e>
c001ad3e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ad48:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ad52:	0f b6 bb 1c 01 00 00 	movzx  edi,BYTE PTR [ebx+0x11c]
c001ad59:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad5e:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ad65:	89 fe                	mov    esi,edi
c001ad67:	c1 e6 10             	shl    esi,0x10
c001ad6a:	89 e8                	mov    eax,ebp
c001ad6c:	c1 e0 0b             	shl    eax,0xb
c001ad6f:	09 c6                	or     esi,eax
c001ad71:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ad78:	c1 e0 08             	shl    eax,0x8
c001ad7b:	09 c6                	or     esi,eax
c001ad7d:	89 f0                	mov    eax,esi
c001ad7f:	0d 08 00 00 80       	or     eax,0x80000008
c001ad84:	ef                   	out    dx,eax
c001ad85:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad8a:	ed                   	in     eax,dx
c001ad8b:	c1 e8 10             	shr    eax,0x10
c001ad8e:	3d ff ff 00 00       	cmp    eax,0xffff
c001ad93:	0f 84 f9 00 00 00    	je     c001ae92 <IDE::open(int, int, void*)+0x1ce>
c001ad99:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ad9f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ada4:	89 f0                	mov    eax,esi
c001ada6:	ef                   	out    dx,eax
c001ada7:	b0 fe                	mov    al,0xfe
c001ada9:	ba fc 0c 00 00       	mov    edx,0xcfc
c001adae:	ee                   	out    dx,al
c001adaf:	ba f8 0c 00 00       	mov    edx,0xcf8
c001adb4:	89 f0                	mov    eax,esi
c001adb6:	ef                   	out    dx,eax
c001adb7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001adbc:	ed                   	in     eax,dx
c001adbd:	3c fe                	cmp    al,0xfe
c001adbf:	0f 85 a5 00 00 00    	jne    c001ae6a <IDE::open(int, int, void*)+0x1a6>
c001adc5:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001adcb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001add2:	74 31                	je     c001ae05 <IDE::open(int, int, void*)+0x141>
c001add4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001adda:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001adde:	83 ec 0c             	sub    esp,0xc
c001ade1:	fe c0                	inc    al
c001ade3:	0f b6 c0             	movzx  eax,al
c001ade6:	50                   	push   eax
c001ade7:	55                   	push   ebp
c001ade8:	57                   	push   edi
c001ade9:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001adef:	51                   	push   ecx
c001adf0:	e8 a7 3f ff ff       	call   c000ed9c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001adf5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001adfa:	83 c4 1c             	add    esp,0x1c
c001adfd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ae03:	eb 0a                	jmp    c001ae0f <IDE::open(int, int, void*)+0x14b>
c001ae05:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ae0f:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001ae16:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001ae1b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ae22:	89 ea                	mov    edx,ebp
c001ae24:	c1 e6 10             	shl    esi,0x10
c001ae27:	c1 e0 08             	shl    eax,0x8
c001ae2a:	09 c6                	or     esi,eax
c001ae2c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ae33:	c1 e0 0b             	shl    eax,0xb
c001ae36:	09 c6                	or     esi,eax
c001ae38:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ae3e:	89 f0                	mov    eax,esi
c001ae40:	ef                   	out    dx,eax
c001ae41:	8b 8b 50 01 00 00    	mov    ecx,DWORD PTR [ebx+0x150]
c001ae47:	bf fc 0c 00 00       	mov    edi,0xcfc
c001ae4c:	89 fa                	mov    edx,edi
c001ae4e:	88 c8                	mov    al,cl
c001ae50:	ee                   	out    dx,al
c001ae51:	89 f0                	mov    eax,esi
c001ae53:	89 ea                	mov    edx,ebp
c001ae55:	ef                   	out    dx,eax
c001ae56:	89 fa                	mov    edx,edi
c001ae58:	ed                   	in     eax,dx
c001ae59:	0f b6 c0             	movzx  eax,al
c001ae5c:	39 c8                	cmp    eax,ecx
c001ae5e:	74 42                	je     c001aea2 <IDE::open(int, int, void*)+0x1de>
c001ae60:	83 ec 0c             	sub    esp,0xc
c001ae63:	68 f0 17 02 c0       	push   0xc00217f0
c001ae68:	eb 30                	jmp    c001ae9a <IDE::open(int, int, void*)+0x1d6>
c001ae6a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ae73:	75 13                	jne    c001ae88 <IDE::open(int, int, void*)+0x1c4>
c001ae75:	80 f9 8a             	cmp    cl,0x8a
c001ae78:	74 05                	je     c001ae7f <IDE::open(int, int, void*)+0x1bb>
c001ae7a:	80 f9 80             	cmp    cl,0x80
c001ae7d:	75 09                	jne    c001ae88 <IDE::open(int, int, void*)+0x1c4>
c001ae7f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ae86:	eb 1a                	jmp    c001aea2 <IDE::open(int, int, void*)+0x1de>
c001ae88:	83 ec 0c             	sub    esp,0xc
c001ae8b:	68 f8 17 02 c0       	push   0xc00217f8
c001ae90:	eb 08                	jmp    c001ae9a <IDE::open(int, int, void*)+0x1d6>
c001ae92:	83 ec 0c             	sub    esp,0xc
c001ae95:	68 29 18 02 c0       	push   0xc0021829
c001ae9a:	e8 86 59 ff ff       	call   c0010825 <KePanic(char const*)>
c001ae9f:	83 c4 10             	add    esp,0x10
c001aea2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001aea9:	79 1c                	jns    c001aec7 <IDE::open(int, int, void*)+0x203>
c001aeab:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001aeb1:	25 fc ff 00 00       	and    eax,0xfffc
c001aeb6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001aebd:	83 c0 08             	add    eax,0x8
c001aec0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001aec7:	0f b7 83 5c 01 00 00 	movzx  eax,WORD PTR [ebx+0x15c]
c001aece:	89 c2                	mov    edx,eax
c001aed0:	83 e2 0f             	and    edx,0xf
c001aed3:	83 fa 08             	cmp    edx,0x8
c001aed6:	75 0a                	jne    c001aee2 <IDE::open(int, int, void*)+0x21e>
c001aed8:	83 e8 02             	sub    eax,0x2
c001aedb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aee2:	0f b7 83 64 01 00 00 	movzx  eax,WORD PTR [ebx+0x164]
c001aee9:	89 c2                	mov    edx,eax
c001aeeb:	83 e2 0f             	and    edx,0xf
c001aeee:	83 fa 08             	cmp    edx,0x8
c001aef1:	75 0a                	jne    c001aefd <IDE::open(int, int, void*)+0x239>
c001aef3:	83 e8 02             	sub    eax,0x2
c001aef6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aefd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001af04:	0f b7 b3 5a 01 00 00 	movzx  esi,WORD PTR [ebx+0x15a]
c001af0b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001af0e:	89 d0                	mov    eax,edx
c001af10:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001af14:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001af18:	88 d1                	mov    cl,dl
c001af1a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001af1f:	fe c1                	inc    cl
c001af21:	0f b6 c9             	movzx  ecx,cl
c001af24:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001af27:	0f b7 b3 62 01 00 00 	movzx  esi,WORD PTR [ebx+0x162]
c001af2e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001af32:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001af36:	88 c2                	mov    dl,al
c001af38:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001af3d:	80 c2 02             	add    dl,0x2
c001af40:	0f b6 d2             	movzx  edx,dl
c001af43:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001af46:	0f b7 b3 5c 01 00 00 	movzx  esi,WORD PTR [ebx+0x15c]
c001af4d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001af51:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001af55:	88 c1                	mov    cl,al
c001af57:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001af5c:	80 c1 03             	add    cl,0x3
c001af5f:	0f b6 c9             	movzx  ecx,cl
c001af62:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001af65:	0f b7 b3 64 01 00 00 	movzx  esi,WORD PTR [ebx+0x164]
c001af6c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001af70:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001af74:	88 c2                	mov    dl,al
c001af76:	80 c2 04             	add    dl,0x4
c001af79:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001af7f:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001af84:	0f b7 b3 5e 01 00 00 	movzx  esi,WORD PTR [ebx+0x15e]
c001af8b:	85 f6                	test   esi,esi
c001af8d:	74 5d                	je     c001afec <IDE::open(int, int, void*)+0x328>
c001af8f:	0f b6 d2             	movzx  edx,dl
c001af92:	04 05                	add    al,0x5
c001af94:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001af97:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001af9b:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001af9f:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001afa5:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001afaa:	eb 40                	jmp    c001afec <IDE::open(int, int, void*)+0x328>
c001afac:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001afb3:	0f b7 83 18 01 00 00 	movzx  eax,WORD PTR [ebx+0x118]
c001afba:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001afc1:	05 06 02 00 00       	add    eax,0x206
c001afc6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001afcd:	0f b7 83 1a 01 00 00 	movzx  eax,WORD PTR [ebx+0x11a]
c001afd4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001afdb:	05 06 02 00 00       	add    eax,0x206
c001afe0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001afe7:	e9 db fe ff ff       	jmp    c001aec7 <IDE::open(int, int, void*)+0x203>
c001afec:	50                   	push   eax
c001afed:	50                   	push   eax
c001afee:	6a 00                	push   0x0
c001aff0:	53                   	push   ebx
c001aff1:	e8 7a fa ff ff       	call   c001aa70 <IDE::prepareInterrupt(unsigned char)>
c001aff6:	5a                   	pop    edx
c001aff7:	59                   	pop    ecx
c001aff8:	6a 01                	push   0x1
c001affa:	53                   	push   ebx
c001affb:	e8 70 fa ff ff       	call   c001aa70 <IDE::prepareInterrupt(unsigned char)>
c001b000:	83 c4 0c             	add    esp,0xc
c001b003:	6a 00                	push   0x0
c001b005:	6a 00                	push   0x0
c001b007:	53                   	push   ebx
c001b008:	e8 71 fc ff ff       	call   c001ac7e <IDE::enableIRQs(unsigned char, bool)>
c001b00d:	83 c4 0c             	add    esp,0xc
c001b010:	6a 00                	push   0x0
c001b012:	6a 01                	push   0x1
c001b014:	53                   	push   ebx
c001b015:	e8 64 fc ff ff       	call   c001ac7e <IDE::enableIRQs(unsigned char, bool)>
c001b01a:	83 c4 10             	add    esp,0x10
c001b01d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b024:	74 34                	je     c001b05a <IDE::open(int, int, void*)+0x396>
c001b026:	83 ec 0c             	sub    esp,0xc
c001b029:	53                   	push   ebx
c001b02a:	6a 01                	push   0x1
c001b02c:	68 45 ac 01 c0       	push   0xc001ac45
c001b031:	6a 0e                	push   0xe
c001b033:	53                   	push   ebx
c001b034:	e8 55 0e ff ff       	call   c000be8e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b039:	83 c4 14             	add    esp,0x14
c001b03c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b042:	53                   	push   ebx
c001b043:	6a 01                	push   0x1
c001b045:	68 61 ac 01 c0       	push   0xc001ac61
c001b04a:	6a 0f                	push   0xf
c001b04c:	53                   	push   ebx
c001b04d:	e8 3c 0e ff ff       	call   c000be8e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b052:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b058:	eb 38                	jmp    c001b092 <IDE::open(int, int, void*)+0x3ce>
c001b05a:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b064:	83 ec 0c             	sub    esp,0xc
c001b067:	53                   	push   ebx
c001b068:	6a 00                	push   0x0
c001b06a:	68 45 ac 01 c0       	push   0xc001ac45
c001b06f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b075:	53                   	push   ebx
c001b076:	e8 13 0e ff ff       	call   c000be8e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b07b:	83 c4 14             	add    esp,0x14
c001b07e:	53                   	push   ebx
c001b07f:	6a 00                	push   0x0
c001b081:	68 61 ac 01 c0       	push   0xc001ac61
c001b086:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b08c:	53                   	push   ebx
c001b08d:	e8 fc 0d ff ff       	call   c000be8e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b092:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b094:	83 c4 20             	add    esp,0x20
c001b097:	83 ec 0c             	sub    esp,0xc
c001b09a:	53                   	push   ebx
c001b09b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b09e:	83 c4 0c             	add    esp,0xc
c001b0a1:	6a 07                	push   0x7
c001b0a3:	6a 00                	push   0x0
c001b0a5:	53                   	push   ebx
c001b0a6:	e8 99 fa ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b0ab:	83 c4 0c             	add    esp,0xc
c001b0ae:	6a 07                	push   0x7
c001b0b0:	6a 01                	push   0x1
c001b0b2:	53                   	push   ebx
c001b0b3:	e8 8c fa ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b0b8:	83 c4 0c             	add    esp,0xc
c001b0bb:	6a 01                	push   0x1
c001b0bd:	6a 00                	push   0x0
c001b0bf:	53                   	push   ebx
c001b0c0:	e8 b9 fb ff ff       	call   c001ac7e <IDE::enableIRQs(unsigned char, bool)>
c001b0c5:	83 c4 0c             	add    esp,0xc
c001b0c8:	6a 01                	push   0x1
c001b0ca:	6a 01                	push   0x1
c001b0cc:	53                   	push   ebx
c001b0cd:	e8 ac fb ff ff       	call   c001ac7e <IDE::enableIRQs(unsigned char, bool)>
c001b0d2:	83 c4 2c             	add    esp,0x2c
c001b0d5:	31 c0                	xor    eax,eax
c001b0d7:	5b                   	pop    ebx
c001b0d8:	5e                   	pop    esi
c001b0d9:	5f                   	pop    edi
c001b0da:	5d                   	pop    ebp
c001b0db:	c3                   	ret    

c001b0dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b0dc:	55                   	push   ebp
c001b0dd:	57                   	push   edi
c001b0de:	56                   	push   esi
c001b0df:	53                   	push   ebx
c001b0e0:	83 ec 1c             	sub    esp,0x1c
c001b0e3:	0f b6 54 24 38       	movzx  edx,BYTE PTR [esp+0x38]
c001b0e8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0ec:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b0f0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b0f4:	88 d0                	mov    al,dl
c001b0f6:	0f b6 5c 24 34       	movzx  ebx,BYTE PTR [esp+0x34]
c001b0fb:	2c 08                	sub    al,0x8
c001b0fd:	3c 03                	cmp    al,0x3
c001b0ff:	77 57                	ja     c001b158 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b101:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b105:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b108:	88 54 24 0b          	mov    BYTE PTR [esp+0xb],dl
c001b10c:	8a 44 ee 10          	mov    al,BYTE PTR [esi+ebp*8+0x10]
c001b110:	0c 80                	or     al,0x80
c001b112:	0f b6 c0             	movzx  eax,al
c001b115:	50                   	push   eax
c001b116:	6a 0c                	push   0xc
c001b118:	53                   	push   ebx
c001b119:	56                   	push   esi
c001b11a:	e8 77 f9 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b11f:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b124:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001b129:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b12d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b131:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b133:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b138:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b13c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b140:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b148:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b14c:	83 c4 2c             	add    esp,0x2c
c001b14f:	5b                   	pop    ebx
c001b150:	5e                   	pop    esi
c001b151:	5f                   	pop    edi
c001b152:	5d                   	pop    ebp
c001b153:	e9 3e f9 ff ff       	jmp    c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b158:	80 fa 07             	cmp    dl,0x7
c001b15b:	77 0c                	ja     c001b169 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x8d>
c001b15d:	66 8b 84 de 5a 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15a]
c001b165:	01 c2                	add    edx,eax
c001b167:	eb 23                	jmp    c001b18c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b169:	80 fa 0d             	cmp    dl,0xd
c001b16c:	77 0d                	ja     c001b17b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x9f>
c001b16e:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b175:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b179:	eb 11                	jmp    c001b18c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb0>
c001b17b:	80 fa 15             	cmp    dl,0x15
c001b17e:	77 0e                	ja     c001b18e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xb2>
c001b180:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b188:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b18c:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b18e:	83 c4 1c             	add    esp,0x1c
c001b191:	5b                   	pop    ebx
c001b192:	5e                   	pop    esi
c001b193:	5f                   	pop    edi
c001b194:	5d                   	pop    ebp
c001b195:	c3                   	ret    

c001b196 <IDE::detect()>:
c001b196:	55                   	push   ebp
c001b197:	57                   	push   edi
c001b198:	56                   	push   esi
c001b199:	53                   	push   ebx
c001b19a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b1a0:	8b b4 24 30 02 00 00 	mov    esi,DWORD PTR [esp+0x230]
c001b1a7:	80 be 58 01 00 00 00 	cmp    BYTE PTR [esi+0x158],0x0
c001b1ae:	0f 85 91 02 00 00    	jne    c001b445 <IDE::detect()+0x2af>
c001b1b4:	c6 86 58 01 00 00 01 	mov    BYTE PTR [esi+0x158],0x1
c001b1bb:	31 db                	xor    ebx,ebx
c001b1bd:	31 ff                	xor    edi,edi
c001b1bf:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b1c4:	89 f8                	mov    eax,edi
c001b1c6:	c1 e0 06             	shl    eax,0x6
c001b1c9:	c6 84 06 6c 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x16c],0x0
c001b1d1:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001b1d5:	c0 e0 04             	shl    al,0x4
c001b1d8:	0c a0                	or     al,0xa0
c001b1da:	0f b6 c0             	movzx  eax,al
c001b1dd:	50                   	push   eax
c001b1de:	6a 06                	push   0x6
c001b1e0:	53                   	push   ebx
c001b1e1:	56                   	push   esi
c001b1e2:	e8 af f8 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1e7:	83 c4 0c             	add    esp,0xc
c001b1ea:	6a 0c                	push   0xc
c001b1ec:	53                   	push   ebx
c001b1ed:	56                   	push   esi
c001b1ee:	e8 51 f9 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b1f3:	83 c4 0c             	add    esp,0xc
c001b1f6:	6a 0c                	push   0xc
c001b1f8:	53                   	push   ebx
c001b1f9:	56                   	push   esi
c001b1fa:	e8 45 f9 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b1ff:	83 c4 0c             	add    esp,0xc
c001b202:	6a 0c                	push   0xc
c001b204:	53                   	push   ebx
c001b205:	56                   	push   esi
c001b206:	e8 39 f9 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b20b:	83 c4 0c             	add    esp,0xc
c001b20e:	6a 0c                	push   0xc
c001b210:	53                   	push   ebx
c001b211:	56                   	push   esi
c001b212:	e8 2d f9 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b217:	68 ec 00 00 00       	push   0xec
c001b21c:	6a 07                	push   0x7
c001b21e:	53                   	push   ebx
c001b21f:	56                   	push   esi
c001b220:	e8 71 f8 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b225:	83 c4 1c             	add    esp,0x1c
c001b228:	6a 0c                	push   0xc
c001b22a:	53                   	push   ebx
c001b22b:	56                   	push   esi
c001b22c:	e8 13 f9 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b231:	83 c4 0c             	add    esp,0xc
c001b234:	6a 0c                	push   0xc
c001b236:	53                   	push   ebx
c001b237:	56                   	push   esi
c001b238:	e8 07 f9 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b23d:	83 c4 0c             	add    esp,0xc
c001b240:	6a 0c                	push   0xc
c001b242:	53                   	push   ebx
c001b243:	56                   	push   esi
c001b244:	e8 fb f8 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b249:	83 c4 0c             	add    esp,0xc
c001b24c:	6a 0c                	push   0xc
c001b24e:	53                   	push   ebx
c001b24f:	56                   	push   esi
c001b250:	e8 ef f8 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b255:	83 c4 0c             	add    esp,0xc
c001b258:	6a 0c                	push   0xc
c001b25a:	53                   	push   ebx
c001b25b:	56                   	push   esi
c001b25c:	e8 e3 f8 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b261:	83 c4 10             	add    esp,0x10
c001b264:	84 c0                	test   al,al
c001b266:	0f 84 62 01 00 00    	je     c001b3ce <IDE::detect()+0x238>
c001b26c:	31 ed                	xor    ebp,ebp
c001b26e:	50                   	push   eax
c001b26f:	6a 0c                	push   0xc
c001b271:	53                   	push   ebx
c001b272:	56                   	push   esi
c001b273:	e8 cc f8 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	88 c2                	mov    dl,al
c001b27d:	80 e2 01             	and    dl,0x1
c001b280:	84 d2                	test   dl,dl
c001b282:	0f 85 64 01 00 00    	jne    c001b3ec <IDE::detect()+0x256>
c001b288:	84 c0                	test   al,al
c001b28a:	78 04                	js     c001b290 <IDE::detect()+0xfa>
c001b28c:	24 08                	and    al,0x8
c001b28e:	75 23                	jne    c001b2b3 <IDE::detect()+0x11d>
c001b290:	45                   	inc    ebp
c001b291:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001b297:	7e d5                	jle    c001b26e <IDE::detect()+0xd8>
c001b299:	83 ec 0c             	sub    esp,0xc
c001b29c:	6a 32                	push   0x32
c001b29e:	e8 89 a1 ff ff       	call   c001542c <milliTenthSleep(unsigned int)>
c001b2a3:	83 c4 10             	add    esp,0x10
c001b2a6:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001b2ac:	75 c0                	jne    c001b26e <IDE::detect()+0xd8>
c001b2ae:	e9 39 01 00 00       	jmp    c001b3ec <IDE::detect()+0x256>
c001b2b3:	31 d2                	xor    edx,edx
c001b2b5:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b2b9:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001b2bd:	83 ec 0c             	sub    esp,0xc
c001b2c0:	68 80 00 00 00       	push   0x80
c001b2c5:	55                   	push   ebp
c001b2c6:	6a 00                	push   0x0
c001b2c8:	53                   	push   ebx
c001b2c9:	56                   	push   esi
c001b2ca:	e8 0d fe ff ff       	call   c001b0dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b2cf:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c001b2d4:	89 f8                	mov    eax,edi
c001b2d6:	c1 e0 06             	shl    eax,0x6
c001b2d9:	01 f0                	add    eax,esi
c001b2db:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b2e2:	66 89 88 70 01 00 00 	mov    WORD PTR [eax+0x170],cx
c001b2e9:	89 ca                	mov    edx,ecx
c001b2eb:	8a 4c 24 2b          	mov    cl,BYTE PTR [esp+0x2b]
c001b2ef:	88 98 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],bl
c001b2f5:	88 88 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],cl
c001b2fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b2ff:	66 89 88 72 01 00 00 	mov    WORD PTR [eax+0x172],cx
c001b306:	66 8b 8c 24 92 00 00 00 	mov    cx,WORD PTR [esp+0x92]
c001b30e:	66 89 88 74 01 00 00 	mov    WORD PTR [eax+0x174],cx
c001b315:	0f b6 8c 24 d4 00 00 00 	movzx  ecx,BYTE PTR [esp+0xd4]
c001b31d:	89 88 78 01 00 00    	mov    DWORD PTR [eax+0x178],ecx
c001b323:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c001b32a:	89 88 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],ecx
c001b330:	8d 4c 24 58          	lea    ecx,[esp+0x58]
c001b334:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b338:	83 c4 20             	add    esp,0x20
c001b33b:	8a 4d 37             	mov    cl,BYTE PTR [ebp+0x37]
c001b33e:	83 c5 02             	add    ebp,0x2
c001b341:	83 c0 02             	add    eax,0x2
c001b344:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001b34a:	8a 4d 34             	mov    cl,BYTE PTR [ebp+0x34]
c001b34d:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001b353:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001b357:	75 e2                	jne    c001b33b <IDE::detect()+0x1a5>
c001b359:	89 f9                	mov    ecx,edi
c001b35b:	c1 e1 06             	shl    ecx,0x6
c001b35e:	01 f1                	add    ecx,esi
c001b360:	c6 81 a8 01 00 00 00 	mov    BYTE PTR [ecx+0x1a8],0x0
c001b367:	0f b7 81 74 01 00 00 	movzx  eax,WORD PTR [ecx+0x174]
c001b36e:	c1 e8 09             	shr    eax,0x9
c001b371:	24 01                	and    al,0x1
c001b373:	84 d2                	test   dl,dl
c001b375:	88 81 a9 01 00 00    	mov    BYTE PTR [ecx+0x1a9],al
c001b37b:	75 22                	jne    c001b39f <IDE::detect()+0x209>
c001b37d:	83 b9 7c 01 00 00 00 	cmp    DWORD PTR [ecx+0x17c],0x0
c001b384:	74 47                	je     c001b3cd <IDE::detect()+0x237>
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	68 7c 01 00 00       	push   0x17c
c001b38e:	e8 69 c7 fe ff       	call   c0007afc <malloc>
c001b393:	89 04 24             	mov    DWORD PTR [esp],eax
c001b396:	89 c5                	mov    ebp,eax
c001b398:	e8 3b 05 00 00       	call   c001b8d8 <ATA::ATA()>
c001b39d:	eb 17                	jmp    c001b3b6 <IDE::detect()+0x220>
c001b39f:	83 ec 0c             	sub    esp,0xc
c001b3a2:	68 84 01 00 00       	push   0x184
c001b3a7:	e8 50 c7 fe ff       	call   c0007afc <malloc>
c001b3ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3af:	89 c5                	mov    ebp,eax
c001b3b1:	e8 b6 0e 00 00       	call   c001c26c <ATAPI::ATAPI()>
c001b3b6:	5a                   	pop    edx
c001b3b7:	59                   	pop    ecx
c001b3b8:	55                   	push   ebp
c001b3b9:	56                   	push   esi
c001b3ba:	e8 21 0b ff ff       	call   c000bee0 <Device::addChild(Device*)>
c001b3bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b3c2:	56                   	push   esi
c001b3c3:	57                   	push   edi
c001b3c4:	6a 00                	push   0x0
c001b3c6:	55                   	push   ebp
c001b3c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ca:	83 c4 20             	add    esp,0x20
c001b3cd:	47                   	inc    edi
c001b3ce:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b3d3:	74 0a                	je     c001b3df <IDE::detect()+0x249>
c001b3d5:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c001b3da:	e9 e5 fd ff ff       	jmp    c001b1c4 <IDE::detect()+0x2e>
c001b3df:	4b                   	dec    ebx
c001b3e0:	74 63                	je     c001b445 <IDE::detect()+0x2af>
c001b3e2:	bb 01 00 00 00       	mov    ebx,0x1
c001b3e7:	e9 d3 fd ff ff       	jmp    c001b1bf <IDE::detect()+0x29>
c001b3ec:	50                   	push   eax
c001b3ed:	6a 04                	push   0x4
c001b3ef:	53                   	push   ebx
c001b3f0:	56                   	push   esi
c001b3f1:	e8 4e f7 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b3f6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b3fa:	83 c4 0c             	add    esp,0xc
c001b3fd:	6a 05                	push   0x5
c001b3ff:	53                   	push   ebx
c001b400:	56                   	push   esi
c001b401:	e8 3e f7 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b406:	83 c4 10             	add    esp,0x10
c001b409:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b40d:	80 fa 14             	cmp    dl,0x14
c001b410:	74 2d                	je     c001b43f <IDE::detect()+0x2a9>
c001b412:	80 fa 69             	cmp    dl,0x69
c001b415:	75 b7                	jne    c001b3ce <IDE::detect()+0x238>
c001b417:	3c 96                	cmp    al,0x96
c001b419:	75 b3                	jne    c001b3ce <IDE::detect()+0x238>
c001b41b:	68 a1 00 00 00       	push   0xa1
c001b420:	6a 07                	push   0x7
c001b422:	53                   	push   ebx
c001b423:	56                   	push   esi
c001b424:	e8 6d f6 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b429:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b430:	e8 f7 9f ff ff       	call   c001542c <milliTenthSleep(unsigned int)>
c001b435:	83 c4 10             	add    esp,0x10
c001b438:	b2 01                	mov    dl,0x1
c001b43a:	e9 76 fe ff ff       	jmp    c001b2b5 <IDE::detect()+0x11f>
c001b43f:	3c eb                	cmp    al,0xeb
c001b441:	75 cf                	jne    c001b412 <IDE::detect()+0x27c>
c001b443:	eb d6                	jmp    c001b41b <IDE::detect()+0x285>
c001b445:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b44b:	5b                   	pop    ebx
c001b44c:	5e                   	pop    esi
c001b44d:	5f                   	pop    edi
c001b44e:	5d                   	pop    ebp
c001b44f:	c3                   	ret    

c001b450 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b450:	56                   	push   esi
c001b451:	53                   	push   ebx
c001b452:	83 ec 14             	sub    esp,0x14
c001b455:	8a 54 24 2c          	mov    dl,BYTE PTR [esp+0x2c]
c001b459:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b45d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b461:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001b465:	84 d2                	test   dl,dl
c001b467:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001b46b:	0f 84 a8 00 00 00    	je     c001b519 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b471:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001b475:	83 ec 0c             	sub    esp,0xc
c001b478:	68 53 18 02 c0       	push   0xc0021853
c001b47d:	e8 f4 f5 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001b482:	83 c4 10             	add    esp,0x10
c001b485:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b489:	80 fa 01             	cmp    dl,0x1
c001b48c:	0f 84 81 00 00 00    	je     c001b513 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc3>
c001b492:	80 fa 02             	cmp    dl,0x2
c001b495:	75 6e                	jne    c001b505 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb5>
c001b497:	00 db                	add    bl,bl
c001b499:	0a 5c 24 0e          	or     bl,BYTE PTR [esp+0xe]
c001b49d:	50                   	push   eax
c001b49e:	6a 01                	push   0x1
c001b4a0:	0f b6 db             	movzx  ebx,bl
c001b4a3:	c1 e3 06             	shl    ebx,0x6
c001b4a6:	0f b6 84 1e 6d 01 00 00 	movzx  eax,BYTE PTR [esi+ebx*1+0x16d]
c001b4ae:	50                   	push   eax
c001b4af:	56                   	push   esi
c001b4b0:	e8 8f f6 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b4b5:	83 c4 10             	add    esp,0x10
c001b4b8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001b4bc:	88 c1                	mov    cl,al
c001b4be:	80 e1 01             	and    cl,0x1
c001b4c1:	84 c9                	test   cl,cl
c001b4c3:	74 02                	je     c001b4c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x77>
c001b4c5:	b2 07                	mov    dl,0x7
c001b4c7:	88 c1                	mov    cl,al
c001b4c9:	80 e1 02             	and    cl,0x2
c001b4cc:	74 02                	je     c001b4d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001b4ce:	b2 03                	mov    dl,0x3
c001b4d0:	88 c1                	mov    cl,al
c001b4d2:	80 e1 04             	and    cl,0x4
c001b4d5:	74 02                	je     c001b4d9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x89>
c001b4d7:	b2 14                	mov    dl,0x14
c001b4d9:	88 c1                	mov    cl,al
c001b4db:	80 e1 08             	and    cl,0x8
c001b4de:	74 02                	je     c001b4e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x92>
c001b4e0:	b2 03                	mov    dl,0x3
c001b4e2:	88 c1                	mov    cl,al
c001b4e4:	80 e1 10             	and    cl,0x10
c001b4e7:	74 02                	je     c001b4eb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9b>
c001b4e9:	b2 15                	mov    dl,0x15
c001b4eb:	88 c1                	mov    cl,al
c001b4ed:	80 e1 20             	and    cl,0x20
c001b4f0:	74 02                	je     c001b4f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001b4f2:	b2 03                	mov    dl,0x3
c001b4f4:	88 c1                	mov    cl,al
c001b4f6:	80 e1 40             	and    cl,0x40
c001b4f9:	74 02                	je     c001b4fd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xad>
c001b4fb:	b2 16                	mov    dl,0x16
c001b4fd:	84 c0                	test   al,al
c001b4ff:	79 18                	jns    c001b519 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b501:	b2 0d                	mov    dl,0xd
c001b503:	eb 14                	jmp    c001b519 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b505:	80 fa 03             	cmp    dl,0x3
c001b508:	74 0d                	je     c001b517 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc7>
c001b50a:	80 fa 04             	cmp    dl,0x4
c001b50d:	75 0a                	jne    c001b519 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b50f:	b2 08                	mov    dl,0x8
c001b511:	eb 06                	jmp    c001b519 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b513:	b2 13                	mov    dl,0x13
c001b515:	eb 02                	jmp    c001b519 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001b517:	b2 17                	mov    dl,0x17
c001b519:	83 c4 14             	add    esp,0x14
c001b51c:	88 d0                	mov    al,dl
c001b51e:	5b                   	pop    ebx
c001b51f:	5e                   	pop    esi
c001b520:	c3                   	ret    
c001b521:	90                   	nop

c001b522 <IDE::polling(unsigned char, unsigned int)>:
c001b522:	57                   	push   edi
c001b523:	56                   	push   esi
c001b524:	53                   	push   ebx
c001b525:	bb 04 00 00 00       	mov    ebx,0x4
c001b52a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b52e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b533:	52                   	push   edx
c001b534:	6a 0c                	push   0xc
c001b536:	56                   	push   esi
c001b537:	57                   	push   edi
c001b538:	e8 07 f6 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b53d:	83 c4 10             	add    esp,0x10
c001b540:	4b                   	dec    ebx
c001b541:	75 f0                	jne    c001b533 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b543:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b548:	50                   	push   eax
c001b549:	6a 0c                	push   0xc
c001b54b:	56                   	push   esi
c001b54c:	57                   	push   edi
c001b54d:	e8 f2 f5 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b552:	83 c4 10             	add    esp,0x10
c001b555:	88 c2                	mov    dl,al
c001b557:	80 e2 01             	and    dl,0x1
c001b55a:	84 d2                	test   dl,dl
c001b55c:	75 1a                	jne    c001b578 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b55e:	88 c2                	mov    dl,al
c001b560:	80 e2 20             	and    dl,0x20
c001b563:	75 0f                	jne    c001b574 <IDE::polling(unsigned char, unsigned int)+0x52>
c001b565:	4b                   	dec    ebx
c001b566:	74 10                	je     c001b578 <IDE::polling(unsigned char, unsigned int)+0x56>
c001b568:	84 c0                	test   al,al
c001b56a:	78 dc                	js     c001b548 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b56c:	24 08                	and    al,0x8
c001b56e:	74 d8                	je     c001b548 <IDE::polling(unsigned char, unsigned int)+0x26>
c001b570:	31 c0                	xor    eax,eax
c001b572:	eb 06                	jmp    c001b57a <IDE::polling(unsigned char, unsigned int)+0x58>
c001b574:	b0 01                	mov    al,0x1
c001b576:	eb 02                	jmp    c001b57a <IDE::polling(unsigned char, unsigned int)+0x58>
c001b578:	b0 02                	mov    al,0x2
c001b57a:	5b                   	pop    ebx
c001b57b:	5e                   	pop    esi
c001b57c:	5f                   	pop    edi
c001b57d:	c3                   	ret    

c001b57e <SATABus::close(int, int, void*)>:
c001b57e:	31 c0                	xor    eax,eax
c001b580:	c3                   	ret    
c001b581:	90                   	nop

c001b582 <SATABus::detect()>:
c001b582:	c3                   	ret    
c001b583:	90                   	nop

c001b584 <SATABus::SATABus()>:
c001b584:	83 ec 2c             	sub    esp,0x2c
c001b587:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b58b:	c7 44 24 04 8c 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002188c
c001b593:	89 04 24             	mov    DWORD PTR [esp],eax
c001b596:	e8 85 0c ff ff       	call   c000c220 <HardDiskController::HardDiskController(char const*)>
c001b59b:	ba b8 18 02 c0       	mov    edx,0xc00218b8
c001b5a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5a4:	89 10                	mov    DWORD PTR [eax],edx
c001b5a6:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b5ad:	e8 1a c9 fe ff       	call   c0007ecc <Phys::allocateContiguousPages(int)>
c001b5b2:	89 c2                	mov    edx,eax
c001b5b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5b8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b5be:	c7 04 24 50 00 00 00 	mov    DWORD PTR [esp],0x50
c001b5c5:	e8 56 e0 fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001b5ca:	89 c2                	mov    edx,eax
c001b5cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5d0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b5d6:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b5db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5df:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b5e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b5e9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b5ef:	c7 44 24 10 03 00 00 00 	mov    DWORD PTR [esp+0x10],0x3
c001b5f7:	c7 44 24 0c 50 00 00 00 	mov    DWORD PTR [esp+0xc],0x50
c001b5ff:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b603:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b607:	89 04 24             	mov    DWORD PTR [esp],eax
c001b60a:	e8 73 ea fe ff       	call   c000a082 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b60f:	90                   	nop
c001b610:	83 c4 2c             	add    esp,0x2c
c001b613:	c3                   	ret    

c001b614 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b618:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b61b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b61e:	09 c2                	or     edx,eax
c001b620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b624:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b62a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b62c:	31 c0                	xor    eax,eax
c001b62e:	c1 e9 08             	shr    ecx,0x8
c001b631:	83 e1 0f             	and    ecx,0xf
c001b634:	39 c8                	cmp    eax,ecx
c001b636:	74 0a                	je     c001b642 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b638:	f6 c2 01             	test   dl,0x1
c001b63b:	74 08                	je     c001b645 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b63d:	d1 ea                	shr    edx,1
c001b63f:	40                   	inc    eax
c001b640:	eb f2                	jmp    c001b634 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b642:	83 c8 ff             	or     eax,0xffffffff
c001b645:	c3                   	ret    

c001b646 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b646:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b64a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b64d:	89 c2                	mov    edx,eax
c001b64f:	c1 ea 08             	shr    edx,0x8
c001b652:	80 e2 0f             	and    dl,0xf
c001b655:	fe ca                	dec    dl
c001b657:	75 30                	jne    c001b689 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b659:	24 0f                	and    al,0xf
c001b65b:	3c 03                	cmp    al,0x3
c001b65d:	75 2a                	jne    c001b689 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x43>
c001b65f:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b662:	b8 02 00 00 00       	mov    eax,0x2
c001b667:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b66d:	74 1c                	je     c001b68b <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b66f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b675:	b8 04 00 00 00       	mov    eax,0x4
c001b67a:	74 0f                	je     c001b68b <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x45>
c001b67c:	31 c0                	xor    eax,eax
c001b67e:	83 fa 03             	cmp    edx,0x3
c001b681:	0f 94 c0             	sete   al
c001b684:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b688:	c3                   	ret    
c001b689:	31 c0                	xor    eax,eax
c001b68b:	c3                   	ret    

c001b68c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b68c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b690:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b693:	0f ba e2 0f          	bt     edx,0xf
c001b697:	72 f7                	jb     c001b690 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b699:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b69c:	83 ca 10             	or     edx,0x10
c001b69f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b6a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6a5:	83 ca 01             	or     edx,0x1
c001b6a8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b6ab:	c3                   	ret    

c001b6ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b6ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6b3:	83 e2 fe             	and    edx,0xfffffffe
c001b6b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b6b9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6bc:	83 e2 ef             	and    edx,0xffffffef
c001b6bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b6c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6c5:	0f ba e2 0e          	bt     edx,0xe
c001b6c9:	72 f7                	jb     c001b6c2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b6cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b6ce:	0f ba e2 0f          	bt     edx,0xf
c001b6d2:	72 ee                	jb     c001b6c2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b6d4:	c3                   	ret    
c001b6d5:	90                   	nop

c001b6d6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b6d6:	55                   	push   ebp
c001b6d7:	57                   	push   edi
c001b6d8:	56                   	push   esi
c001b6d9:	53                   	push   ebx
c001b6da:	83 ec 1c             	sub    esp,0x1c
c001b6dd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b6e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b6e5:	53                   	push   ebx
c001b6e6:	57                   	push   edi
c001b6e7:	e8 c0 ff ff ff       	call   c001b6ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b6ec:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b6f0:	83 ec 0c             	sub    esp,0xc
c001b6f3:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b6f9:	c1 e5 0a             	shl    ebp,0xa
c001b6fc:	01 e8                	add    eax,ebp
c001b6fe:	89 03                	mov    DWORD PTR [ebx],eax
c001b700:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b702:	68 00 04 00 00       	push   0x400
c001b707:	6a 00                	push   0x0
c001b709:	50                   	push   eax
c001b70a:	e8 71 4e fe ff       	call   c0000580 <memset>
c001b70f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b715:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b719:	83 c4 1c             	add    esp,0x1c
c001b71c:	01 e8                	add    eax,ebp
c001b71e:	89 03                	mov    DWORD PTR [ebx],eax
c001b720:	c1 e6 08             	shl    esi,0x8
c001b723:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b72a:	81 c6 00 80 00 00    	add    esi,0x8000
c001b730:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b736:	01 f0                	add    eax,esi
c001b738:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b73b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b73e:	68 00 01 00 00       	push   0x100
c001b743:	6a 00                	push   0x0
c001b745:	50                   	push   eax
c001b746:	e8 35 4e fe ff       	call   c0000580 <memset>
c001b74b:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b751:	31 d2                	xor    edx,edx
c001b753:	01 f0                	add    eax,esi
c001b755:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b758:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b75f:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001b765:	01 ee                	add    esi,ebp
c001b767:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b76b:	83 c4 10             	add    esp,0x10
c001b76e:	c1 e5 0d             	shl    ebp,0xd
c001b771:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001b777:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001b77d:	83 c6 20             	add    esi,0x20
c001b780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b784:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001b78a:	01 e8                	add    eax,ebp
c001b78c:	01 d0                	add    eax,edx
c001b78e:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b791:	52                   	push   edx
c001b792:	68 00 01 00 00       	push   0x100
c001b797:	6a 00                	push   0x0
c001b799:	50                   	push   eax
c001b79a:	e8 e1 4d fe ff       	call   c0000580 <memset>
c001b79f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001b7a5:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001b7ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b7b0:	83 c4 10             	add    esp,0x10
c001b7b3:	01 e8                	add    eax,ebp
c001b7b5:	01 d0                	add    eax,edx
c001b7b7:	81 c2 00 01 00 00    	add    edx,0x100
c001b7bd:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001b7c0:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001b7c6:	75 af                	jne    c001b777 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001b7c8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b7cf:	50                   	push   eax
c001b7d0:	50                   	push   eax
c001b7d1:	53                   	push   ebx
c001b7d2:	57                   	push   edi
c001b7d3:	e8 b4 fe ff ff       	call   c001b68c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b7d8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b7df:	83 c4 2c             	add    esp,0x2c
c001b7e2:	5b                   	pop    ebx
c001b7e3:	5e                   	pop    esi
c001b7e4:	5f                   	pop    edi
c001b7e5:	5d                   	pop    ebp
c001b7e6:	c3                   	ret    
c001b7e7:	90                   	nop

c001b7e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b7e8:	55                   	push   ebp
c001b7e9:	57                   	push   edi
c001b7ea:	56                   	push   esi
c001b7eb:	53                   	push   ebx
c001b7ec:	31 db                	xor    ebx,ebx
c001b7ee:	83 ec 0c             	sub    esp,0xc
c001b7f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b7f9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b7fc:	f7 c7 01 00 00 00    	test   edi,0x1
c001b802:	74 7a                	je     c001b87e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b804:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b808:	89 d8                	mov    eax,ebx
c001b80a:	c1 e0 07             	shl    eax,0x7
c001b80d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b814:	55                   	push   ebp
c001b815:	56                   	push   esi
c001b816:	e8 2b fe ff ff       	call   c001b646 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b81b:	5a                   	pop    edx
c001b81c:	59                   	pop    ecx
c001b81d:	83 f8 01             	cmp    eax,0x1
c001b820:	75 21                	jne    c001b843 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b822:	50                   	push   eax
c001b823:	53                   	push   ebx
c001b824:	55                   	push   ebp
c001b825:	56                   	push   esi
c001b826:	e8 ab fe ff ff       	call   c001b6d6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b82b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b832:	e8 c5 c2 fe ff       	call   c0007afc <malloc>
c001b837:	89 04 24             	mov    DWORD PTR [esp],eax
c001b83a:	89 c5                	mov    ebp,eax
c001b83c:	e8 dd 10 00 00       	call   c001c91e <SATA::SATA()>
c001b841:	eb 24                	jmp    c001b867 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b843:	83 f8 04             	cmp    eax,0x4
c001b846:	75 36                	jne    c001b87e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b848:	51                   	push   ecx
c001b849:	53                   	push   ebx
c001b84a:	55                   	push   ebp
c001b84b:	56                   	push   esi
c001b84c:	e8 85 fe ff ff       	call   c001b6d6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b851:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b858:	e8 9f c2 fe ff       	call   c0007afc <malloc>
c001b85d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b860:	89 c5                	mov    ebp,eax
c001b862:	e8 0d 18 00 00       	call   c001d074 <SATAPI::SATAPI()>
c001b867:	58                   	pop    eax
c001b868:	5a                   	pop    edx
c001b869:	55                   	push   ebp
c001b86a:	56                   	push   esi
c001b86b:	e8 70 06 ff ff       	call   c000bee0 <Device::addChild(Device*)>
c001b870:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b873:	56                   	push   esi
c001b874:	6a 00                	push   0x0
c001b876:	53                   	push   ebx
c001b877:	55                   	push   ebp
c001b878:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b87b:	83 c4 20             	add    esp,0x20
c001b87e:	d1 ef                	shr    edi,1
c001b880:	43                   	inc    ebx
c001b881:	83 fb 20             	cmp    ebx,0x20
c001b884:	0f 85 72 ff ff ff    	jne    c001b7fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b88a:	83 c4 0c             	add    esp,0xc
c001b88d:	5b                   	pop    ebx
c001b88e:	5e                   	pop    esi
c001b88f:	5f                   	pop    edi
c001b890:	5d                   	pop    ebp
c001b891:	c3                   	ret    

c001b892 <SATABus::open(int, int, void*)>:
c001b892:	83 ec 14             	sub    esp,0x14
c001b895:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b899:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b89f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b8a5:	52                   	push   edx
c001b8a6:	50                   	push   eax
c001b8a7:	e8 3c ff ff ff       	call   c001b7e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b8ac:	31 c0                	xor    eax,eax
c001b8ae:	83 c4 1c             	add    esp,0x1c
c001b8b1:	c3                   	ret    

c001b8b2 <ATA::close(int, int, void*)>:
c001b8b2:	83 ec 0c             	sub    esp,0xc
c001b8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b8bf:	85 c0                	test   eax,eax
c001b8c1:	74 0c                	je     c001b8cf <ATA::close(int, int, void*)+0x1d>
c001b8c3:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8c5:	83 ec 0c             	sub    esp,0xc
c001b8c8:	50                   	push   eax
c001b8c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b8cc:	83 c4 10             	add    esp,0x10
c001b8cf:	31 c0                	xor    eax,eax
c001b8d1:	83 c4 0c             	add    esp,0xc
c001b8d4:	c3                   	ret    
c001b8d5:	90                   	nop

c001b8d6 <ATA::powerSaving(PowerSavingLevel)>:
c001b8d6:	c3                   	ret    
c001b8d7:	90                   	nop

c001b8d8 <ATA::ATA()>:
c001b8d8:	83 ec 1c             	sub    esp,0x1c
c001b8db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8df:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001b8e7:	c7 44 24 04 85 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021985
c001b8ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001b8f2:	e8 ad 09 ff ff       	call   c000c2a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b8f7:	ba f8 18 02 c0       	mov    edx,0xc00218f8
c001b8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b900:	89 10                	mov    DWORD PTR [eax],edx
c001b902:	90                   	nop
c001b903:	83 c4 1c             	add    esp,0x1c
c001b906:	c3                   	ret    
c001b907:	90                   	nop

c001b908 <ATA::flush(bool)>:
c001b908:	53                   	push   ebx
c001b909:	83 ec 08             	sub    esp,0x8
c001b90c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b911:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b915:	19 c0                	sbb    eax,eax
c001b917:	83 e0 fd             	and    eax,0xfffffffd
c001b91a:	05 ea 00 00 00       	add    eax,0xea
c001b91f:	50                   	push   eax
c001b920:	6a 07                	push   0x7
c001b922:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b929:	50                   	push   eax
c001b92a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b930:	e8 61 f1 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b935:	83 c4 0c             	add    esp,0xc
c001b938:	6a 00                	push   0x0
c001b93a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b941:	50                   	push   eax
c001b942:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b948:	e8 d5 fb ff ff       	call   c001b522 <IDE::polling(unsigned char, unsigned int)>
c001b94d:	83 c4 18             	add    esp,0x18
c001b950:	5b                   	pop    ebx
c001b951:	c3                   	ret    

c001b952 <ATA::readyForCommand()>:
c001b952:	56                   	push   esi
c001b953:	53                   	push   ebx
c001b954:	53                   	push   ebx
c001b955:	31 db                	xor    ebx,ebx
c001b957:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b95b:	51                   	push   ecx
c001b95c:	6a 0c                	push   0xc
c001b95e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b965:	50                   	push   eax
c001b966:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b96c:	e8 d3 f1 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	a8 88                	test   al,0x88
c001b976:	74 1f                	je     c001b997 <ATA::readyForCommand()+0x45>
c001b978:	43                   	inc    ebx
c001b979:	83 fb 63             	cmp    ebx,0x63
c001b97c:	7e dd                	jle    c001b95b <ATA::readyForCommand()+0x9>
c001b97e:	83 ec 0c             	sub    esp,0xc
c001b981:	6a 0a                	push   0xa
c001b983:	e8 a4 9a ff ff       	call   c001542c <milliTenthSleep(unsigned int)>
c001b988:	83 c4 10             	add    esp,0x10
c001b98b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b991:	75 c8                	jne    c001b95b <ATA::readyForCommand()+0x9>
c001b993:	31 c0                	xor    eax,eax
c001b995:	eb 02                	jmp    c001b999 <ATA::readyForCommand()+0x47>
c001b997:	b0 01                	mov    al,0x1
c001b999:	5a                   	pop    edx
c001b99a:	5b                   	pop    ebx
c001b99b:	5e                   	pop    esi
c001b99c:	c3                   	ret    
c001b99d:	90                   	nop

c001b99e <ATA::access(unsigned long long, int, void*, bool)>:
c001b99e:	55                   	push   ebp
c001b99f:	57                   	push   edi
c001b9a0:	56                   	push   esi
c001b9a1:	53                   	push   ebx
c001b9a2:	83 ec 2c             	sub    esp,0x2c
c001b9a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001b9a9:	f3 0f 7e 44 24 44    	movq   xmm0,QWORD PTR [esp+0x44]
c001b9af:	66 0f 7e c1          	movd   ecx,xmm0
c001b9b3:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001b9b7:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c001b9bb:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c001b9c1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b9c5:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c001b9cb:	c1 e0 06             	shl    eax,0x6
c001b9ce:	80 bc 07 a9 01 00 00 00 	cmp    BYTE PTR [edi+eax*1+0x1a9],0x0
c001b9d6:	74 6e                	je     c001ba46 <ATA::access(unsigned long long, int, void*, bool)+0xa8>
c001b9d8:	0f 28 d0             	movaps xmm2,xmm0
c001b9db:	66 0f 73 d2 1c       	psrlq  xmm2,0x1c
c001b9e0:	0f 28 ca             	movaps xmm1,xmm2
c001b9e3:	66 0f 7e d2          	movd   edx,xmm2
c001b9e7:	66 0f 73 d1 20       	psrlq  xmm1,0x20
c001b9ec:	66 0f 7e c8          	movd   eax,xmm1
c001b9f0:	09 d0                	or     eax,edx
c001b9f2:	74 2a                	je     c001ba1e <ATA::access(unsigned long long, int, void*, bool)+0x80>
c001b9f4:	31 c0                	xor    eax,eax
c001b9f6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001b9fd:	0f 28 d8             	movaps xmm3,xmm0
c001ba00:	0f b6 d2             	movzx  edx,dl
c001ba03:	66 0f 6e ca          	movd   xmm1,edx
c001ba07:	66 0f d3 d9          	psrlq  xmm3,xmm1
c001ba0b:	66 0f 7e da          	movd   edx,xmm3
c001ba0f:	88 54 04 1a          	mov    BYTE PTR [esp+eax*1+0x1a],dl
c001ba13:	40                   	inc    eax
c001ba14:	83 f8 06             	cmp    eax,0x6
c001ba17:	75 dd                	jne    c001b9f6 <ATA::access(unsigned long long, int, void*, bool)+0x58>
c001ba19:	e9 a5 00 00 00       	jmp    c001bac3 <ATA::access(unsigned long long, int, void*, bool)+0x125>
c001ba1e:	66 89 4c 24 1a       	mov    WORD PTR [esp+0x1a],cx
c001ba23:	66 0f 73 d0 10       	psrlq  xmm0,0x10
c001ba28:	b3 01                	mov    bl,0x1
c001ba2a:	66 0f 7e c0          	movd   eax,xmm0
c001ba2e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ba35:	c1 e9 18             	shr    ecx,0x18
c001ba38:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ba3c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ba41:	e9 81 00 00 00       	jmp    c001bac7 <ATA::access(unsigned long long, int, void*, bool)+0x129>
c001ba46:	6a 00                	push   0x0
c001ba48:	0f 28 c8             	movaps xmm1,xmm0
c001ba4b:	6a 3f                	push   0x3f
c001ba4d:	66 0f 73 d1 20       	psrlq  xmm1,0x20
c001ba52:	66 0f 7e cb          	movd   ebx,xmm1
c001ba56:	53                   	push   ebx
c001ba57:	51                   	push   ecx
c001ba58:	66 0f 7e 44 24 10    	movd   DWORD PTR [esp+0x10],xmm0
c001ba5e:	66 0f 7e 4c 24 14    	movd   DWORD PTR [esp+0x14],xmm1
c001ba64:	e8 d7 2a 00 00       	call   c001e540 <__umoddi3>
c001ba69:	83 c4 10             	add    esp,0x10
c001ba6c:	fe c0                	inc    al
c001ba6e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001ba72:	6a 00                	push   0x0
c001ba74:	68 f0 03 00 00       	push   0x3f0
c001ba79:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ba7d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba81:	53                   	push   ebx
c001ba82:	51                   	push   ecx
c001ba83:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ba87:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ba8b:	e8 b0 29 00 00       	call   c001e440 <__udivdi3>
c001ba90:	83 c4 10             	add    esp,0x10
c001ba93:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ba98:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ba9f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001baa4:	6a 00                	push   0x0
c001baa6:	6a 3f                	push   0x3f
c001baa8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001baac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bab0:	53                   	push   ebx
c001bab1:	31 db                	xor    ebx,ebx
c001bab3:	51                   	push   ecx
c001bab4:	e8 87 29 00 00       	call   c001e440 <__udivdi3>
c001bab9:	83 c4 10             	add    esp,0x10
c001babc:	88 c1                	mov    cl,al
c001babe:	80 e1 0f             	and    cl,0xf
c001bac1:	eb 04                	jmp    c001bac7 <ATA::access(unsigned long long, int, void*, bool)+0x129>
c001bac3:	31 c9                	xor    ecx,ecx
c001bac5:	b3 02                	mov    bl,0x2
c001bac7:	88 0c 24             	mov    BYTE PTR [esp],cl
c001baca:	50                   	push   eax
c001bacb:	6a 00                	push   0x0
c001bacd:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bad4:	50                   	push   eax
c001bad5:	57                   	push   edi
c001bad6:	e8 a3 f1 ff ff       	call   c001ac7e <IDE::enableIRQs(unsigned char, bool)>
c001badb:	89 34 24             	mov    DWORD PTR [esp],esi
c001bade:	e8 6f fe ff ff       	call   c001b952 <ATA::readyForCommand()>
c001bae3:	83 c4 10             	add    esp,0x10
c001bae6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001bae9:	84 c0                	test   al,al
c001baeb:	75 0a                	jne    c001baf7 <ATA::access(unsigned long long, int, void*, bool)+0x159>
c001baed:	bb 01 00 00 00       	mov    ebx,0x1
c001baf2:	e9 74 02 00 00       	jmp    c001bd6b <ATA::access(unsigned long long, int, void*, bool)+0x3cd>
c001baf7:	8b 86 74 01 00 00    	mov    eax,DWORD PTR [esi+0x174]
c001bafd:	8b 96 6c 01 00 00    	mov    edx,DWORD PTR [esi+0x16c]
c001bb03:	0f b6 be 70 01 00 00 	movzx  edi,BYTE PTR [esi+0x170]
c001bb0a:	c1 e0 04             	shl    eax,0x4
c001bb0d:	08 c1                	or     cl,al
c001bb0f:	84 db                	test   bl,bl
c001bb11:	75 05                	jne    c001bb18 <ATA::access(unsigned long long, int, void*, bool)+0x17a>
c001bb13:	80 c9 a0             	or     cl,0xa0
c001bb16:	eb 03                	jmp    c001bb1b <ATA::access(unsigned long long, int, void*, bool)+0x17d>
c001bb18:	80 c9 e0             	or     cl,0xe0
c001bb1b:	0f b6 c9             	movzx  ecx,cl
c001bb1e:	51                   	push   ecx
c001bb1f:	6a 06                	push   0x6
c001bb21:	57                   	push   edi
c001bb22:	52                   	push   edx
c001bb23:	e8 6e ef ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb28:	83 c4 10             	add    esp,0x10
c001bb2b:	6a 00                	push   0x0
c001bb2d:	6a 01                	push   0x1
c001bb2f:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb36:	50                   	push   eax
c001bb37:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb3d:	e8 54 ef ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb42:	83 c4 10             	add    esp,0x10
c001bb45:	80 fb 02             	cmp    bl,0x2
c001bb48:	75 6e                	jne    c001bbb8 <ATA::access(unsigned long long, int, void*, bool)+0x21a>
c001bb4a:	6a 00                	push   0x0
c001bb4c:	6a 08                	push   0x8
c001bb4e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb55:	50                   	push   eax
c001bb56:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb5c:	e8 35 ef ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb61:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bb66:	50                   	push   eax
c001bb67:	6a 09                	push   0x9
c001bb69:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb70:	50                   	push   eax
c001bb71:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb77:	e8 1a ef ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb7c:	83 c4 20             	add    esp,0x20
c001bb7f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bb84:	50                   	push   eax
c001bb85:	6a 0a                	push   0xa
c001bb87:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb8e:	50                   	push   eax
c001bb8f:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb95:	e8 fc ee ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bb9a:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bb9f:	50                   	push   eax
c001bba0:	6a 0b                	push   0xb
c001bba2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bba9:	50                   	push   eax
c001bbaa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbb0:	e8 e1 ee ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbb5:	83 c4 20             	add    esp,0x20
c001bbb8:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bbbd:	50                   	push   eax
c001bbbe:	6a 02                	push   0x2
c001bbc0:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbc7:	50                   	push   eax
c001bbc8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbce:	e8 c3 ee ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbd3:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bbd8:	50                   	push   eax
c001bbd9:	6a 03                	push   0x3
c001bbdb:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bbe2:	50                   	push   eax
c001bbe3:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bbe9:	e8 a8 ee ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbee:	83 c4 20             	add    esp,0x20
c001bbf1:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bbf6:	50                   	push   eax
c001bbf7:	6a 04                	push   0x4
c001bbf9:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bc00:	50                   	push   eax
c001bc01:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc07:	e8 8a ee ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc0c:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc11:	50                   	push   eax
c001bc12:	6a 05                	push   0x5
c001bc14:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bc1b:	50                   	push   eax
c001bc1c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc22:	e8 6f ee ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc27:	83 c4 20             	add    esp,0x20
c001bc2a:	80 fb 02             	cmp    bl,0x2
c001bc2d:	0f 94 04 24          	sete   BYTE PTR [esp]
c001bc31:	75 07                	jne    c001bc3a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001bc33:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bc38:	75 40                	jne    c001bc7a <ATA::access(unsigned long long, int, void*, bool)+0x2dc>
c001bc3a:	80 fb 02             	cmp    bl,0x2
c001bc3d:	0f 95 c1             	setne  cl
c001bc40:	74 0c                	je     c001bc4e <ATA::access(unsigned long long, int, void*, bool)+0x2b0>
c001bc42:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bc47:	b8 30 00 00 00       	mov    eax,0x30
c001bc4c:	75 31                	jne    c001bc7f <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001bc4e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001bc52:	80 f2 01             	xor    dl,0x1
c001bc55:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001bc59:	74 09                	je     c001bc64 <ATA::access(unsigned long long, int, void*, bool)+0x2c6>
c001bc5b:	84 d2                	test   dl,dl
c001bc5d:	b8 24 00 00 00       	mov    eax,0x24
c001bc62:	75 1b                	jne    c001bc7f <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001bc64:	84 c9                	test   cl,cl
c001bc66:	0f 84 81 fe ff ff    	je     c001baed <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001bc6c:	84 d2                	test   dl,dl
c001bc6e:	b8 20 00 00 00       	mov    eax,0x20
c001bc73:	75 0a                	jne    c001bc7f <ATA::access(unsigned long long, int, void*, bool)+0x2e1>
c001bc75:	e9 73 fe ff ff       	jmp    c001baed <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001bc7a:	b8 34 00 00 00       	mov    eax,0x34
c001bc7f:	50                   	push   eax
c001bc80:	6a 07                	push   0x7
c001bc82:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bc89:	50                   	push   eax
c001bc8a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc90:	e8 01 ee ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc95:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	85 db                	test   ebx,ebx
c001bc9e:	0f 84 ad 00 00 00    	je     c001bd51 <ATA::access(unsigned long long, int, void*, bool)+0x3b3>
c001bca4:	50                   	push   eax
c001bca5:	6a 01                	push   0x1
c001bca7:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bcae:	50                   	push   eax
c001bcaf:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bcb5:	e8 68 f8 ff ff       	call   c001b522 <IDE::polling(unsigned char, unsigned int)>
c001bcba:	83 c4 10             	add    esp,0x10
c001bcbd:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001bcc3:	84 c0                	test   al,al
c001bcc5:	74 20                	je     c001bce7 <ATA::access(unsigned long long, int, void*, bool)+0x349>
c001bcc7:	0f b6 d8             	movzx  ebx,al
c001bcca:	53                   	push   ebx
c001bccb:	0f b6 86 74 01 00 00 	movzx  eax,BYTE PTR [esi+0x174]
c001bcd2:	50                   	push   eax
c001bcd3:	0f b6 c2             	movzx  eax,dl
c001bcd6:	50                   	push   eax
c001bcd7:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bcdd:	e8 6e f7 ff ff       	call   c001b450 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bce2:	e9 81 00 00 00       	jmp    c001bd68 <ATA::access(unsigned long long, int, void*, bool)+0x3ca>
c001bce7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bcec:	74 36                	je     c001bd24 <ATA::access(unsigned long long, int, void*, bool)+0x386>
c001bcee:	31 ff                	xor    edi,edi
c001bcf0:	0f b7 44 7d 00       	movzx  eax,WORD PTR [ebp+edi*2+0x0]
c001bcf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcf9:	50                   	push   eax
c001bcfa:	50                   	push   eax
c001bcfb:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bd02:	50                   	push   eax
c001bd03:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bd09:	e8 76 ed ff ff       	call   c001aa84 <IDE::getBase(unsigned char)>
c001bd0e:	89 c2                	mov    edx,eax
c001bd10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd14:	66 ef                	out    dx,ax
c001bd16:	47                   	inc    edi
c001bd17:	83 c4 10             	add    esp,0x10
c001bd1a:	81 ff 00 01 00 00    	cmp    edi,0x100
c001bd20:	75 ce                	jne    c001bcf0 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001bd22:	eb 21                	jmp    c001bd45 <ATA::access(unsigned long long, int, void*, bool)+0x3a7>
c001bd24:	51                   	push   ecx
c001bd25:	0f b6 c2             	movzx  eax,dl
c001bd28:	51                   	push   ecx
c001bd29:	89 ef                	mov    edi,ebp
c001bd2b:	50                   	push   eax
c001bd2c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bd32:	e8 4d ed ff ff       	call   c001aa84 <IDE::getBase(unsigned char)>
c001bd37:	b9 00 01 00 00       	mov    ecx,0x100
c001bd3c:	89 c2                	mov    edx,eax
c001bd3e:	fc                   	cld    
c001bd3f:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001bd42:	83 c4 10             	add    esp,0x10
c001bd45:	81 c5 00 02 00 00    	add    ebp,0x200
c001bd4b:	4b                   	dec    ebx
c001bd4c:	e9 4b ff ff ff       	jmp    c001bc9c <ATA::access(unsigned long long, int, void*, bool)+0x2fe>
c001bd51:	31 db                	xor    ebx,ebx
c001bd53:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bd58:	74 11                	je     c001bd6b <ATA::access(unsigned long long, int, void*, bool)+0x3cd>
c001bd5a:	50                   	push   eax
c001bd5b:	50                   	push   eax
c001bd5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd61:	50                   	push   eax
c001bd62:	56                   	push   esi
c001bd63:	e8 a0 fb ff ff       	call   c001b908 <ATA::flush(bool)>
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	83 c4 2c             	add    esp,0x2c
c001bd6e:	89 d8                	mov    eax,ebx
c001bd70:	5b                   	pop    ebx
c001bd71:	5e                   	pop    esi
c001bd72:	5f                   	pop    edi
c001bd73:	5d                   	pop    ebp
c001bd74:	c3                   	ret    
c001bd75:	90                   	nop

c001bd76 <ATA::detectCHS()>:
c001bd76:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd7a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bd80:	c1 e0 06             	shl    eax,0x6
c001bd83:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bd89:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bd93:	c7 44 24 04 dc 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc00218dc
c001bd9b:	e9 85 4a ff ff       	jmp    c0010825 <KePanic(char const*)>

c001bda0 <ATA::open(int, int, void*)>:
c001bda0:	53                   	push   ebx
c001bda1:	83 ec 08             	sub    esp,0x8
c001bda4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bda8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdb0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bdb6:	c1 e0 06             	shl    eax,0x6
c001bdb9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bdbf:	01 d0                	add    eax,edx
c001bdc1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bdc8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bdce:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bdd5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bddf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bde6:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bdec:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bdf3:	75 0c                	jne    c001be01 <ATA::open(int, int, void*)+0x61>
c001bdf5:	83 ec 0c             	sub    esp,0xc
c001bdf8:	53                   	push   ebx
c001bdf9:	e8 78 ff ff ff       	call   c001bd76 <ATA::detectCHS()>
c001bdfe:	83 c4 10             	add    esp,0x10
c001be01:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001be07:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001be0d:	c1 e0 06             	shl    eax,0x6
c001be10:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001be17:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001be21:	d1 e8                	shr    eax,1
c001be23:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001be29:	6a 04                	push   0x4
c001be2b:	6a 0c                	push   0xc
c001be2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be34:	50                   	push   eax
c001be35:	52                   	push   edx
c001be36:	e8 5b ec ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be3b:	90                   	nop
c001be3c:	90                   	nop
c001be3d:	6a 00                	push   0x0
c001be3f:	6a 0c                	push   0xc
c001be41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be48:	50                   	push   eax
c001be49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be4f:	e8 42 ec ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be54:	83 c4 14             	add    esp,0x14
c001be57:	53                   	push   ebx
c001be58:	e8 af 04 ff ff       	call   c000c30c <PhysicalDisk::startCache()>
c001be5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be60:	e8 3c 16 ff ff       	call   c000d4a1 <createPartitionsForDisk(PhysicalDisk*)>
c001be65:	83 c4 18             	add    esp,0x18
c001be68:	31 c0                	xor    eax,eax
c001be6a:	5b                   	pop    ebx
c001be6b:	c3                   	ret    

c001be6c <combineCharAndColour(char, unsigned char)>:
c001be6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be71:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001be77:	c1 e0 08             	shl    eax,0x8
c001be7a:	09 d0                	or     eax,edx
c001be7c:	c3                   	ret    

c001be7d <combineColours(unsigned char, unsigned char)>:
c001be7d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be82:	c1 e0 04             	shl    eax,0x4
c001be85:	0a 44 24 04          	or     al,BYTE PTR [esp+0x4]
c001be89:	c3                   	ret    

c001be8a <ATA::read(unsigned long long, int, void*)>:
c001be8a:	55                   	push   ebp
c001be8b:	57                   	push   edi
c001be8c:	56                   	push   esi
c001be8d:	be 04 00 00 00       	mov    esi,0x4
c001be92:	53                   	push   ebx
c001be93:	83 ec 0c             	sub    esp,0xc
c001be96:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001be9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bea2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bea6:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bea9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001beaf:	0f 87 a9 01 00 00    	ja     c001c05e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001beb5:	85 c9                	test   ecx,ecx
c001beb7:	be 06 00 00 00       	mov    esi,0x6
c001bebc:	0f 84 9c 01 00 00    	je     c001c05e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001bec2:	55                   	push   ebp
c001bec3:	55                   	push   ebp
c001bec4:	6a 00                	push   0x0
c001bec6:	51                   	push   ecx
c001bec7:	53                   	push   ebx
c001bec8:	52                   	push   edx
c001bec9:	50                   	push   eax
c001beca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bece:	e8 cb fa ff ff       	call   c001b99e <ATA::access(unsigned long long, int, void*, bool)>
c001bed3:	83 c4 20             	add    esp,0x20
c001bed6:	85 c0                	test   eax,eax
c001bed8:	89 c6                	mov    esi,eax
c001beda:	0f 85 79 01 00 00    	jne    c001c059 <ATA::read(unsigned long long, int, void*)+0x1cf>
c001bee0:	50                   	push   eax
c001bee1:	bd 10 27 00 00       	mov    ebp,0x2710
c001bee6:	50                   	push   eax
c001bee7:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001beed:	6a 0f                	push   0xf
c001beef:	6a 00                	push   0x0
c001bef1:	89 da                	mov    edx,ebx
c001bef3:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001bef9:	e8 7f ff ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001befe:	59                   	pop    ecx
c001beff:	b9 0a 00 00 00       	mov    ecx,0xa
c001bf04:	5b                   	pop    ebx
c001bf05:	0f b6 d8             	movzx  ebx,al
c001bf08:	89 d0                	mov    eax,edx
c001bf0a:	53                   	push   ebx
c001bf0b:	99                   	cdq    
c001bf0c:	f7 fd                	idiv   ebp
c001bf0e:	99                   	cdq    
c001bf0f:	f7 f9                	idiv   ecx
c001bf11:	80 c2 30             	add    dl,0x30
c001bf14:	0f b6 d2             	movzx  edx,dl
c001bf17:	52                   	push   edx
c001bf18:	e8 4f ff ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001bf1d:	5f                   	pop    edi
c001bf1e:	bf e8 03 00 00       	mov    edi,0x3e8
c001bf23:	5a                   	pop    edx
c001bf24:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bf2a:	53                   	push   ebx
c001bf2b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bf30:	99                   	cdq    
c001bf31:	f7 ff                	idiv   edi
c001bf33:	99                   	cdq    
c001bf34:	f7 f9                	idiv   ecx
c001bf36:	88 d0                	mov    al,dl
c001bf38:	04 30                	add    al,0x30
c001bf3a:	0f b6 c0             	movzx  eax,al
c001bf3d:	50                   	push   eax
c001bf3e:	e8 29 ff ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001bf43:	5f                   	pop    edi
c001bf44:	bf 64 00 00 00       	mov    edi,0x64
c001bf49:	5a                   	pop    edx
c001bf4a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bf50:	53                   	push   ebx
c001bf51:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bf56:	99                   	cdq    
c001bf57:	f7 ff                	idiv   edi
c001bf59:	99                   	cdq    
c001bf5a:	f7 f9                	idiv   ecx
c001bf5c:	88 d0                	mov    al,dl
c001bf5e:	04 30                	add    al,0x30
c001bf60:	0f b6 c0             	movzx  eax,al
c001bf63:	50                   	push   eax
c001bf64:	e8 03 ff ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001bf69:	5a                   	pop    edx
c001bf6a:	5a                   	pop    edx
c001bf6b:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001bf71:	53                   	push   ebx
c001bf72:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bf77:	99                   	cdq    
c001bf78:	f7 f9                	idiv   ecx
c001bf7a:	99                   	cdq    
c001bf7b:	f7 f9                	idiv   ecx
c001bf7d:	88 d0                	mov    al,dl
c001bf7f:	04 30                	add    al,0x30
c001bf81:	0f b6 c0             	movzx  eax,al
c001bf84:	50                   	push   eax
c001bf85:	e8 e2 fe ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001bf8a:	5a                   	pop    edx
c001bf8b:	5a                   	pop    edx
c001bf8c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bf92:	53                   	push   ebx
c001bf93:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001bf98:	99                   	cdq    
c001bf99:	f7 f9                	idiv   ecx
c001bf9b:	88 d0                	mov    al,dl
c001bf9d:	04 30                	add    al,0x30
c001bf9f:	0f b6 c0             	movzx  eax,al
c001bfa2:	50                   	push   eax
c001bfa3:	e8 c4 fe ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001bfa8:	5a                   	pop    edx
c001bfa9:	5a                   	pop    edx
c001bfaa:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bfb0:	53                   	push   ebx
c001bfb1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bfb6:	99                   	cdq    
c001bfb7:	f7 fd                	idiv   ebp
c001bfb9:	99                   	cdq    
c001bfba:	f7 f9                	idiv   ecx
c001bfbc:	88 d0                	mov    al,dl
c001bfbe:	04 30                	add    al,0x30
c001bfc0:	0f b6 c0             	movzx  eax,al
c001bfc3:	50                   	push   eax
c001bfc4:	e8 a3 fe ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001bfc9:	5d                   	pop    ebp
c001bfca:	bd e8 03 00 00       	mov    ebp,0x3e8
c001bfcf:	5a                   	pop    edx
c001bfd0:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bfd6:	53                   	push   ebx
c001bfd7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bfdc:	99                   	cdq    
c001bfdd:	f7 fd                	idiv   ebp
c001bfdf:	99                   	cdq    
c001bfe0:	f7 f9                	idiv   ecx
c001bfe2:	88 d0                	mov    al,dl
c001bfe4:	04 30                	add    al,0x30
c001bfe6:	0f b6 c0             	movzx  eax,al
c001bfe9:	50                   	push   eax
c001bfea:	e8 7d fe ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001bfef:	5d                   	pop    ebp
c001bff0:	5a                   	pop    edx
c001bff1:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bff7:	53                   	push   ebx
c001bff8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001bffd:	99                   	cdq    
c001bffe:	f7 ff                	idiv   edi
c001c000:	99                   	cdq    
c001c001:	f7 f9                	idiv   ecx
c001c003:	88 d0                	mov    al,dl
c001c005:	04 30                	add    al,0x30
c001c007:	0f b6 c0             	movzx  eax,al
c001c00a:	50                   	push   eax
c001c00b:	e8 5c fe ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c010:	5f                   	pop    edi
c001c011:	5d                   	pop    ebp
c001c012:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c018:	53                   	push   ebx
c001c019:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c01e:	99                   	cdq    
c001c01f:	f7 f9                	idiv   ecx
c001c021:	99                   	cdq    
c001c022:	f7 f9                	idiv   ecx
c001c024:	88 d0                	mov    al,dl
c001c026:	04 30                	add    al,0x30
c001c028:	0f b6 c0             	movzx  eax,al
c001c02b:	50                   	push   eax
c001c02c:	e8 3b fe ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c031:	5a                   	pop    edx
c001c032:	5f                   	pop    edi
c001c033:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c039:	53                   	push   ebx
c001c03a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c03f:	99                   	cdq    
c001c040:	f7 f9                	idiv   ecx
c001c042:	80 c2 30             	add    dl,0x30
c001c045:	0f b6 d2             	movzx  edx,dl
c001c048:	52                   	push   edx
c001c049:	e8 1e fe ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c04e:	83 c4 10             	add    esp,0x10
c001c051:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c057:	eb 05                	jmp    c001c05e <ATA::read(unsigned long long, int, void*)+0x1d4>
c001c059:	be 01 00 00 00       	mov    esi,0x1
c001c05e:	83 c4 0c             	add    esp,0xc
c001c061:	89 f0                	mov    eax,esi
c001c063:	5b                   	pop    ebx
c001c064:	5e                   	pop    esi
c001c065:	5f                   	pop    edi
c001c066:	5d                   	pop    ebp
c001c067:	c3                   	ret    

c001c068 <ATA::write(unsigned long long, int, void*)>:
c001c068:	55                   	push   ebp
c001c069:	57                   	push   edi
c001c06a:	56                   	push   esi
c001c06b:	be 04 00 00 00       	mov    esi,0x4
c001c070:	53                   	push   ebx
c001c071:	83 ec 0c             	sub    esp,0xc
c001c074:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c078:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c07c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c080:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c084:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c087:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c08d:	0f 87 a5 01 00 00    	ja     c001c238 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c093:	85 c9                	test   ecx,ecx
c001c095:	be 06 00 00 00       	mov    esi,0x6
c001c09a:	0f 84 98 01 00 00    	je     c001c238 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c0a0:	55                   	push   ebp
c001c0a1:	55                   	push   ebp
c001c0a2:	6a 01                	push   0x1
c001c0a4:	51                   	push   ecx
c001c0a5:	53                   	push   ebx
c001c0a6:	52                   	push   edx
c001c0a7:	50                   	push   eax
c001c0a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c0ac:	e8 ed f8 ff ff       	call   c001b99e <ATA::access(unsigned long long, int, void*, bool)>
c001c0b1:	83 c4 20             	add    esp,0x20
c001c0b4:	85 c0                	test   eax,eax
c001c0b6:	89 c6                	mov    esi,eax
c001c0b8:	0f 85 75 01 00 00    	jne    c001c233 <ATA::write(unsigned long long, int, void*)+0x1cb>
c001c0be:	50                   	push   eax
c001c0bf:	bd 10 27 00 00       	mov    ebp,0x2710
c001c0c4:	50                   	push   eax
c001c0c5:	6a 0f                	push   0xf
c001c0c7:	6a 00                	push   0x0
c001c0c9:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c0cf:	e8 a9 fd ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001c0d4:	5a                   	pop    edx
c001c0d5:	59                   	pop    ecx
c001c0d6:	b9 0a 00 00 00       	mov    ecx,0xa
c001c0db:	0f b6 d8             	movzx  ebx,al
c001c0de:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0e3:	53                   	push   ebx
c001c0e4:	99                   	cdq    
c001c0e5:	f7 fd                	idiv   ebp
c001c0e7:	99                   	cdq    
c001c0e8:	f7 f9                	idiv   ecx
c001c0ea:	88 d0                	mov    al,dl
c001c0ec:	04 30                	add    al,0x30
c001c0ee:	0f b6 c0             	movzx  eax,al
c001c0f1:	50                   	push   eax
c001c0f2:	e8 75 fd ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c0f7:	5f                   	pop    edi
c001c0f8:	bf e8 03 00 00       	mov    edi,0x3e8
c001c0fd:	5a                   	pop    edx
c001c0fe:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c104:	53                   	push   ebx
c001c105:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c10a:	99                   	cdq    
c001c10b:	f7 ff                	idiv   edi
c001c10d:	99                   	cdq    
c001c10e:	f7 f9                	idiv   ecx
c001c110:	88 d0                	mov    al,dl
c001c112:	04 30                	add    al,0x30
c001c114:	0f b6 c0             	movzx  eax,al
c001c117:	50                   	push   eax
c001c118:	e8 4f fd ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c11d:	5f                   	pop    edi
c001c11e:	bf 64 00 00 00       	mov    edi,0x64
c001c123:	5a                   	pop    edx
c001c124:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c12a:	53                   	push   ebx
c001c12b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c130:	99                   	cdq    
c001c131:	f7 ff                	idiv   edi
c001c133:	99                   	cdq    
c001c134:	f7 f9                	idiv   ecx
c001c136:	88 d0                	mov    al,dl
c001c138:	04 30                	add    al,0x30
c001c13a:	0f b6 c0             	movzx  eax,al
c001c13d:	50                   	push   eax
c001c13e:	e8 29 fd ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c143:	5a                   	pop    edx
c001c144:	5a                   	pop    edx
c001c145:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c14b:	53                   	push   ebx
c001c14c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c151:	99                   	cdq    
c001c152:	f7 f9                	idiv   ecx
c001c154:	99                   	cdq    
c001c155:	f7 f9                	idiv   ecx
c001c157:	88 d0                	mov    al,dl
c001c159:	04 30                	add    al,0x30
c001c15b:	0f b6 c0             	movzx  eax,al
c001c15e:	50                   	push   eax
c001c15f:	e8 08 fd ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c164:	5a                   	pop    edx
c001c165:	5a                   	pop    edx
c001c166:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c16c:	53                   	push   ebx
c001c16d:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c172:	99                   	cdq    
c001c173:	f7 f9                	idiv   ecx
c001c175:	88 d0                	mov    al,dl
c001c177:	04 30                	add    al,0x30
c001c179:	0f b6 c0             	movzx  eax,al
c001c17c:	50                   	push   eax
c001c17d:	e8 ea fc ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c182:	5a                   	pop    edx
c001c183:	5a                   	pop    edx
c001c184:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c18a:	53                   	push   ebx
c001c18b:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c190:	99                   	cdq    
c001c191:	f7 fd                	idiv   ebp
c001c193:	99                   	cdq    
c001c194:	f7 f9                	idiv   ecx
c001c196:	88 d0                	mov    al,dl
c001c198:	04 30                	add    al,0x30
c001c19a:	0f b6 c0             	movzx  eax,al
c001c19d:	50                   	push   eax
c001c19e:	e8 c9 fc ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c1a3:	5d                   	pop    ebp
c001c1a4:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c1a9:	5a                   	pop    edx
c001c1aa:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c1b0:	53                   	push   ebx
c001c1b1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1b6:	99                   	cdq    
c001c1b7:	f7 fd                	idiv   ebp
c001c1b9:	99                   	cdq    
c001c1ba:	f7 f9                	idiv   ecx
c001c1bc:	88 d0                	mov    al,dl
c001c1be:	04 30                	add    al,0x30
c001c1c0:	0f b6 c0             	movzx  eax,al
c001c1c3:	50                   	push   eax
c001c1c4:	e8 a3 fc ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c1c9:	5d                   	pop    ebp
c001c1ca:	5a                   	pop    edx
c001c1cb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c1d1:	53                   	push   ebx
c001c1d2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1d7:	99                   	cdq    
c001c1d8:	f7 ff                	idiv   edi
c001c1da:	99                   	cdq    
c001c1db:	f7 f9                	idiv   ecx
c001c1dd:	88 d0                	mov    al,dl
c001c1df:	04 30                	add    al,0x30
c001c1e1:	0f b6 c0             	movzx  eax,al
c001c1e4:	50                   	push   eax
c001c1e5:	e8 82 fc ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c1ea:	5f                   	pop    edi
c001c1eb:	5d                   	pop    ebp
c001c1ec:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c1f2:	53                   	push   ebx
c001c1f3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c1f8:	99                   	cdq    
c001c1f9:	f7 f9                	idiv   ecx
c001c1fb:	99                   	cdq    
c001c1fc:	f7 f9                	idiv   ecx
c001c1fe:	88 d0                	mov    al,dl
c001c200:	04 30                	add    al,0x30
c001c202:	0f b6 c0             	movzx  eax,al
c001c205:	50                   	push   eax
c001c206:	e8 61 fc ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c20b:	5a                   	pop    edx
c001c20c:	5f                   	pop    edi
c001c20d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c213:	53                   	push   ebx
c001c214:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c219:	99                   	cdq    
c001c21a:	f7 f9                	idiv   ecx
c001c21c:	80 c2 30             	add    dl,0x30
c001c21f:	0f b6 d2             	movzx  edx,dl
c001c222:	52                   	push   edx
c001c223:	e8 44 fc ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001c228:	83 c4 10             	add    esp,0x10
c001c22b:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c231:	eb 05                	jmp    c001c238 <ATA::write(unsigned long long, int, void*)+0x1d0>
c001c233:	be 01 00 00 00       	mov    esi,0x1
c001c238:	83 c4 0c             	add    esp,0xc
c001c23b:	89 f0                	mov    eax,esi
c001c23d:	5b                   	pop    ebx
c001c23e:	5e                   	pop    esi
c001c23f:	5f                   	pop    edi
c001c240:	5d                   	pop    ebp
c001c241:	c3                   	ret    

c001c242 <ATAPI::write(unsigned long long, int, void*)>:
c001c242:	b8 03 00 00 00       	mov    eax,0x3
c001c247:	c3                   	ret    

c001c248 <ATAPI::close(int, int, void*)>:
c001c248:	83 ec 0c             	sub    esp,0xc
c001c24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c24f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c255:	85 c0                	test   eax,eax
c001c257:	74 0c                	je     c001c265 <ATAPI::close(int, int, void*)+0x1d>
c001c259:	8b 10                	mov    edx,DWORD PTR [eax]
c001c25b:	83 ec 0c             	sub    esp,0xc
c001c25e:	50                   	push   eax
c001c25f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c262:	83 c4 10             	add    esp,0x10
c001c265:	31 c0                	xor    eax,eax
c001c267:	83 c4 0c             	add    esp,0xc
c001c26a:	c3                   	ret    
c001c26b:	90                   	nop

c001c26c <ATAPI::ATAPI()>:
c001c26c:	83 ec 1c             	sub    esp,0x1c
c001c26f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c273:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001c27b:	c7 44 24 04 25 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a25
c001c283:	89 04 24             	mov    DWORD PTR [esp],eax
c001c286:	e8 19 00 ff ff       	call   c000c2a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c28b:	ba 40 19 02 c0       	mov    edx,0xc0021940
c001c290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c294:	89 10                	mov    DWORD PTR [eax],edx
c001c296:	90                   	nop
c001c297:	83 c4 1c             	add    esp,0x1c
c001c29a:	c3                   	ret    
c001c29b:	90                   	nop

c001c29c <ATAPI::readyForCommand()>:
c001c29c:	56                   	push   esi
c001c29d:	53                   	push   ebx
c001c29e:	53                   	push   ebx
c001c29f:	31 db                	xor    ebx,ebx
c001c2a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c2a5:	51                   	push   ecx
c001c2a6:	6a 0c                	push   0xc
c001c2a8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c2af:	50                   	push   eax
c001c2b0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c2b6:	e8 89 e8 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001c2bb:	83 c4 10             	add    esp,0x10
c001c2be:	a8 88                	test   al,0x88
c001c2c0:	74 25                	je     c001c2e7 <ATAPI::readyForCommand()+0x4b>
c001c2c2:	43                   	inc    ebx
c001c2c3:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c2c9:	7e da                	jle    c001c2a5 <ATAPI::readyForCommand()+0x9>
c001c2cb:	83 ec 0c             	sub    esp,0xc
c001c2ce:	68 5e 01 00 00       	push   0x15e
c001c2d3:	e8 54 91 ff ff       	call   c001542c <milliTenthSleep(unsigned int)>
c001c2d8:	83 c4 10             	add    esp,0x10
c001c2db:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c2e1:	75 c2                	jne    c001c2a5 <ATAPI::readyForCommand()+0x9>
c001c2e3:	31 c0                	xor    eax,eax
c001c2e5:	eb 02                	jmp    c001c2e9 <ATAPI::readyForCommand()+0x4d>
c001c2e7:	b0 01                	mov    al,0x1
c001c2e9:	5a                   	pop    edx
c001c2ea:	5b                   	pop    ebx
c001c2eb:	5e                   	pop    esi
c001c2ec:	c3                   	ret    
c001c2ed:	90                   	nop

c001c2ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c2ee:	55                   	push   ebp
c001c2ef:	57                   	push   edi
c001c2f0:	56                   	push   esi
c001c2f1:	53                   	push   ebx
c001c2f2:	83 ec 20             	sub    esp,0x20
c001c2f5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c2f9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c2fd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c301:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c305:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001c309:	6a 01                	push   0x1
c001c30b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c312:	50                   	push   eax
c001c313:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c319:	e8 60 e9 ff ff       	call   c001ac7e <IDE::enableIRQs(unsigned char, bool)>
c001c31e:	5e                   	pop    esi
c001c31f:	58                   	pop    eax
c001c320:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c327:	50                   	push   eax
c001c328:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c32e:	e8 3d e7 ff ff       	call   c001aa70 <IDE::prepareInterrupt(unsigned char)>
c001c333:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c336:	e8 61 ff ff ff       	call   c001c29c <ATAPI::readyForCommand()>
c001c33b:	83 c4 10             	add    esp,0x10
c001c33e:	84 c0                	test   al,al
c001c340:	75 0a                	jne    c001c34c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c342:	bb 01 00 00 00       	mov    ebx,0x1
c001c347:	e9 57 02 00 00       	jmp    c001c5a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c34c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c352:	c0 e0 04             	shl    al,0x4
c001c355:	0f b6 c0             	movzx  eax,al
c001c358:	50                   	push   eax
c001c359:	6a 06                	push   0x6
c001c35b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c362:	50                   	push   eax
c001c363:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c369:	e8 28 e7 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c36e:	6a 00                	push   0x0
c001c370:	6a 01                	push   0x1
c001c372:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c379:	50                   	push   eax
c001c37a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c380:	e8 11 e7 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c385:	83 c4 20             	add    esp,0x20
c001c388:	0f b6 c3             	movzx  eax,bl
c001c38b:	50                   	push   eax
c001c38c:	0f b6 df             	movzx  ebx,bh
c001c38f:	6a 04                	push   0x4
c001c391:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c398:	50                   	push   eax
c001c399:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c39f:	e8 f2 e6 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3a4:	53                   	push   ebx
c001c3a5:	6a 05                	push   0x5
c001c3a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c3ae:	50                   	push   eax
c001c3af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c3b5:	e8 dc e6 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3ba:	83 c4 20             	add    esp,0x20
c001c3bd:	68 a0 00 00 00       	push   0xa0
c001c3c2:	6a 07                	push   0x7
c001c3c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c3cb:	50                   	push   eax
c001c3cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c3d2:	e8 bf e6 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3d7:	83 c4 0c             	add    esp,0xc
c001c3da:	6a 01                	push   0x1
c001c3dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c3e3:	50                   	push   eax
c001c3e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c3ea:	e8 33 f1 ff ff       	call   c001b522 <IDE::polling(unsigned char, unsigned int)>
c001c3ef:	83 c4 10             	add    esp,0x10
c001c3f2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c3f8:	84 c0                	test   al,al
c001c3fa:	74 23                	je     c001c41f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c3fc:	0f b6 d8             	movzx  ebx,al
c001c3ff:	0f b6 d2             	movzx  edx,dl
c001c402:	53                   	push   ebx
c001c403:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c40a:	50                   	push   eax
c001c40b:	52                   	push   edx
c001c40c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c412:	e8 39 f0 ff ff       	call   c001b450 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	e9 84 01 00 00       	jmp    c001c5a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c41f:	53                   	push   ebx
c001c420:	0f b6 d2             	movzx  edx,dl
c001c423:	53                   	push   ebx
c001c424:	52                   	push   edx
c001c425:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c42b:	e8 54 e6 ff ff       	call   c001aa84 <IDE::getBase(unsigned char)>
c001c430:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c434:	b9 06 00 00 00       	mov    ecx,0x6
c001c439:	89 c2                	mov    edx,eax
c001c43b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c43e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c442:	83 c4 10             	add    esp,0x10
c001c445:	85 db                	test   ebx,ebx
c001c447:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c44d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c454:	0f 84 e9 00 00 00    	je     c001c543 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x255>
c001c45a:	51                   	push   ecx
c001c45b:	51                   	push   ecx
c001c45c:	52                   	push   edx
c001c45d:	50                   	push   eax
c001c45e:	e8 7d e7 ff ff       	call   c001abe0 <IDE::waitInterrupt(unsigned char)>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	84 c0                	test   al,al
c001c468:	0f 84 d4 fe ff ff    	je     c001c342 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c46e:	56                   	push   esi
c001c46f:	56                   	push   esi
c001c470:	31 f6                	xor    esi,esi
c001c472:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c479:	50                   	push   eax
c001c47a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c480:	e8 eb e5 ff ff       	call   c001aa70 <IDE::prepareInterrupt(unsigned char)>
c001c485:	83 c4 0c             	add    esp,0xc
c001c488:	6a 04                	push   0x4
c001c48a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c491:	50                   	push   eax
c001c492:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c498:	e8 a7 e6 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001c49d:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001c4a1:	83 c4 0c             	add    esp,0xc
c001c4a4:	6a 05                	push   0x5
c001c4a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4ad:	50                   	push   eax
c001c4ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4b4:	e8 8b e6 ff ff       	call   c001ab44 <IDE::read(unsigned char, unsigned char)>
c001c4b9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001c4be:	0f b6 c0             	movzx  eax,al
c001c4c1:	c1 e0 08             	shl    eax,0x8
c001c4c4:	09 d0                	or     eax,edx
c001c4c6:	d1 f8                	sar    eax,1
c001c4c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4cc:	83 c4 10             	add    esp,0x10
c001c4cf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c4d4:	74 54                	je     c001c52a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23c>
c001c4d6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c4da:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c4e0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c4e7:	75 0b                	jne    c001c4f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c4e9:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001c4ec:	01 cd                	add    ebp,ecx
c001c4ee:	4b                   	dec    ebx
c001c4ef:	e9 51 ff ff ff       	jmp    c001c445 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001c4f4:	0f b7 4c 75 00       	movzx  ecx,WORD PTR [ebp+esi*2+0x0]
c001c4f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c4fd:	51                   	push   ecx
c001c4fe:	51                   	push   ecx
c001c4ff:	52                   	push   edx
c001c500:	50                   	push   eax
c001c501:	e8 7e e5 ff ff       	call   c001aa84 <IDE::getBase(unsigned char)>
c001c506:	89 c2                	mov    edx,eax
c001c508:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c50c:	66 ef                	out    dx,ax
c001c50e:	46                   	inc    esi
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	eb c2                	jmp    c001c4d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e8>
c001c514:	51                   	push   ecx
c001c515:	51                   	push   ecx
c001c516:	52                   	push   edx
c001c517:	50                   	push   eax
c001c518:	e8 67 e5 ff ff       	call   c001aa84 <IDE::getBase(unsigned char)>
c001c51d:	89 c2                	mov    edx,eax
c001c51f:	66 ed                	in     ax,dx
c001c521:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c526:	83 c4 10             	add    esp,0x10
c001c529:	46                   	inc    esi
c001c52a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c52e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c534:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c53b:	75 d7                	jne    c001c514 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001c53d:	01 f6                	add    esi,esi
c001c53f:	01 f5                	add    ebp,esi
c001c541:	eb ab                	jmp    c001c4ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x200>
c001c543:	51                   	push   ecx
c001c544:	51                   	push   ecx
c001c545:	52                   	push   edx
c001c546:	50                   	push   eax
c001c547:	e8 94 e6 ff ff       	call   c001abe0 <IDE::waitInterrupt(unsigned char)>
c001c54c:	83 c4 10             	add    esp,0x10
c001c54f:	84 c0                	test   al,al
c001c551:	0f 84 eb fd ff ff    	je     c001c342 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c557:	52                   	push   edx
c001c558:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c55d:	52                   	push   edx
c001c55e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c565:	50                   	push   eax
c001c566:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c56c:	e8 ff e4 ff ff       	call   c001aa70 <IDE::prepareInterrupt(unsigned char)>
c001c571:	83 c4 10             	add    esp,0x10
c001c574:	50                   	push   eax
c001c575:	50                   	push   eax
c001c576:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c57d:	50                   	push   eax
c001c57e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c584:	e8 fb e4 ff ff       	call   c001aa84 <IDE::getBase(unsigned char)>
c001c589:	0f b7 c0             	movzx  eax,ax
c001c58c:	8d 50 07             	lea    edx,[eax+0x7]
c001c58f:	ec                   	in     al,dx
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	a8 88                	test   al,0x88
c001c595:	74 0a                	je     c001c5a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c597:	4b                   	dec    ebx
c001c598:	75 da                	jne    c001c574 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x286>
c001c59a:	bb 02 00 00 00       	mov    ebx,0x2
c001c59f:	eb 02                	jmp    c001c5a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c5a1:	31 db                	xor    ebx,ebx
c001c5a3:	83 c4 1c             	add    esp,0x1c
c001c5a6:	89 d8                	mov    eax,ebx
c001c5a8:	5b                   	pop    ebx
c001c5a9:	5e                   	pop    esi
c001c5aa:	5f                   	pop    edi
c001c5ab:	5d                   	pop    ebp
c001c5ac:	c3                   	ret    
c001c5ad:	90                   	nop

c001c5ae <ATAPI::diskRemoved()>:
c001c5ae:	53                   	push   ebx
c001c5af:	83 ec 14             	sub    esp,0x14
c001c5b2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c5b6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c5bd:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c5c3:	e8 c6 0b ff ff       	call   c000d18e <LogicalDisk::unmount()>
c001c5c8:	58                   	pop    eax
c001c5c9:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c5cf:	e8 8c 15 ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c001c5d4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c5da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c5de:	83 c4 18             	add    esp,0x18
c001c5e1:	5b                   	pop    ebx
c001c5e2:	e9 69 15 ff ff       	jmp    c000db50 <VCache::invalidateReadBuffer()>
c001c5e7:	90                   	nop

c001c5e8 <ATAPI::eject()>:
c001c5e8:	57                   	push   edi
c001c5e9:	b9 03 00 00 00       	mov    ecx,0x3
c001c5ee:	53                   	push   ebx
c001c5ef:	83 ec 14             	sub    esp,0x14
c001c5f2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c5f6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c5fa:	fc                   	cld    
c001c5fb:	31 c0                	xor    eax,eax
c001c5fd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c5ff:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c604:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c609:	50                   	push   eax
c001c60a:	50                   	push   eax
c001c60b:	6a 00                	push   0x0
c001c60d:	6a 00                	push   0x0
c001c60f:	6a 00                	push   0x0
c001c611:	6a 02                	push   0x2
c001c613:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c617:	50                   	push   eax
c001c618:	53                   	push   ebx
c001c619:	e8 d0 fc ff ff       	call   c001c2ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c61e:	83 c4 14             	add    esp,0x14
c001c621:	53                   	push   ebx
c001c622:	e8 87 ff ff ff       	call   c001c5ae <ATAPI::diskRemoved()>
c001c627:	83 c4 24             	add    esp,0x24
c001c62a:	31 c0                	xor    eax,eax
c001c62c:	5b                   	pop    ebx
c001c62d:	5f                   	pop    edi
c001c62e:	c3                   	ret    
c001c62f:	90                   	nop

c001c630 <ATAPI::diskInserted()>:
c001c630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c634:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c63b:	c3                   	ret    

c001c63c <ATAPI::detectMedia()>:
c001c63c:	56                   	push   esi
c001c63d:	53                   	push   ebx
c001c63e:	83 ec 28             	sub    esp,0x28
c001c641:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c645:	6a 0c                	push   0xc
c001c647:	6a 00                	push   0x0
c001c649:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c64d:	56                   	push   esi
c001c64e:	e8 2d 3f fe ff       	call   c0000580 <memset>
c001c653:	58                   	pop    eax
c001c654:	5a                   	pop    edx
c001c655:	6a 00                	push   0x0
c001c657:	6a 00                	push   0x0
c001c659:	6a 00                	push   0x0
c001c65b:	6a 00                	push   0x0
c001c65d:	56                   	push   esi
c001c65e:	53                   	push   ebx
c001c65f:	e8 8a fc ff ff       	call   c001c2ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c664:	83 c4 1c             	add    esp,0x1c
c001c667:	6a 0c                	push   0xc
c001c669:	6a 00                	push   0x0
c001c66b:	56                   	push   esi
c001c66c:	e8 0f 3f fe ff       	call   c0000580 <memset>
c001c671:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c676:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c67b:	59                   	pop    ecx
c001c67c:	58                   	pop    eax
c001c67d:	6a 01                	push   0x1
c001c67f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c683:	50                   	push   eax
c001c684:	6a 00                	push   0x0
c001c686:	6a 12                	push   0x12
c001c688:	56                   	push   esi
c001c689:	53                   	push   ebx
c001c68a:	e8 5f fc ff ff       	call   c001c2ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c68f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c693:	83 c4 20             	add    esp,0x20
c001c696:	24 7f                	and    al,0x7f
c001c698:	3c 70                	cmp    al,0x70
c001c69a:	74 15                	je     c001c6b1 <ATAPI::detectMedia()+0x75>
c001c69c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c6a3:	75 0c                	jne    c001c6b1 <ATAPI::detectMedia()+0x75>
c001c6a5:	83 ec 0c             	sub    esp,0xc
c001c6a8:	53                   	push   ebx
c001c6a9:	e8 82 ff ff ff       	call   c001c630 <ATAPI::diskInserted()>
c001c6ae:	83 c4 10             	add    esp,0x10
c001c6b1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c6b5:	24 0f                	and    al,0xf
c001c6b7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c6bc:	75 18                	jne    c001c6d6 <ATAPI::detectMedia()+0x9a>
c001c6be:	3c 02                	cmp    al,0x2
c001c6c0:	75 14                	jne    c001c6d6 <ATAPI::detectMedia()+0x9a>
c001c6c2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c6c9:	74 24                	je     c001c6ef <ATAPI::detectMedia()+0xb3>
c001c6cb:	83 ec 0c             	sub    esp,0xc
c001c6ce:	53                   	push   ebx
c001c6cf:	e8 da fe ff ff       	call   c001c5ae <ATAPI::diskRemoved()>
c001c6d4:	eb 16                	jmp    c001c6ec <ATAPI::detectMedia()+0xb0>
c001c6d6:	84 c0                	test   al,al
c001c6d8:	75 15                	jne    c001c6ef <ATAPI::detectMedia()+0xb3>
c001c6da:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c6e1:	75 0c                	jne    c001c6ef <ATAPI::detectMedia()+0xb3>
c001c6e3:	83 ec 0c             	sub    esp,0xc
c001c6e6:	53                   	push   ebx
c001c6e7:	e8 44 ff ff ff       	call   c001c630 <ATAPI::diskInserted()>
c001c6ec:	83 c4 10             	add    esp,0x10
c001c6ef:	83 c4 24             	add    esp,0x24
c001c6f2:	5b                   	pop    ebx
c001c6f3:	5e                   	pop    esi
c001c6f4:	c3                   	ret    
c001c6f5:	90                   	nop

c001c6f6 <ATAPI::open(int, int, void*)>:
c001c6f6:	56                   	push   esi
c001c6f7:	53                   	push   ebx
c001c6f8:	50                   	push   eax
c001c6f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c701:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c705:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c70b:	c1 e0 06             	shl    eax,0x6
c001c70e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c714:	01 d0                	add    eax,edx
c001c716:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c71d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c723:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c72a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c734:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c73b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c741:	6a 04                	push   0x4
c001c743:	6a 0c                	push   0xc
c001c745:	51                   	push   ecx
c001c746:	52                   	push   edx
c001c747:	e8 4a e3 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c74c:	90                   	nop
c001c74d:	90                   	nop
c001c74e:	6a 00                	push   0x0
c001c750:	6a 0c                	push   0xc
c001c752:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c759:	50                   	push   eax
c001c75a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c760:	e8 31 e3 ff ff       	call   c001aa96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c765:	83 c4 14             	add    esp,0x14
c001c768:	68 78 01 00 00       	push   0x178
c001c76d:	e8 8a b3 fe ff       	call   c0007afc <malloc>
c001c772:	83 c4 0c             	add    esp,0xc
c001c775:	6a 00                	push   0x0
c001c777:	68 ff ff ff 7f       	push   0x7fffffff
c001c77c:	6a 00                	push   0x0
c001c77e:	6a 00                	push   0x0
c001c780:	53                   	push   ebx
c001c781:	68 d7 1a 02 c0       	push   0xc0021ad7
c001c786:	89 c6                	mov    esi,eax
c001c788:	50                   	push   eax
c001c789:	e8 3a 08 ff ff       	call   c000cfc8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c78e:	83 c4 14             	add    esp,0x14
c001c791:	56                   	push   esi
c001c792:	e8 f3 08 ff ff       	call   c000d08a <LogicalDisk::assignDriveLetter()>
c001c797:	5a                   	pop    edx
c001c798:	59                   	pop    ecx
c001c799:	0f be c0             	movsx  eax,al
c001c79c:	50                   	push   eax
c001c79d:	68 28 19 02 c0       	push   0xc0021928
c001c7a2:	e8 cf e2 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001c7a7:	58                   	pop    eax
c001c7a8:	5a                   	pop    edx
c001c7a9:	56                   	push   esi
c001c7aa:	53                   	push   ebx
c001c7ab:	e8 30 f7 fe ff       	call   c000bee0 <Device::addChild(Device*)>
c001c7b0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c7b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7b9:	e8 4e fb fe ff       	call   c000c30c <PhysicalDisk::startCache()>
c001c7be:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c7c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7c8:	e8 6f fe ff ff       	call   c001c63c <ATAPI::detectMedia()>
c001c7cd:	83 c4 14             	add    esp,0x14
c001c7d0:	31 c0                	xor    eax,eax
c001c7d2:	5b                   	pop    ebx
c001c7d3:	5e                   	pop    esi
c001c7d4:	c3                   	ret    
c001c7d5:	90                   	nop

c001c7d6 <ATAPI::read(unsigned long long, int, void*)>:
c001c7d6:	55                   	push   ebp
c001c7d7:	57                   	push   edi
c001c7d8:	56                   	push   esi
c001c7d9:	53                   	push   ebx
c001c7da:	83 ec 1c             	sub    esp,0x1c
c001c7dd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c7e1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c7e5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c7e9:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c7f0:	74 3a                	je     c001c82c <ATAPI::read(unsigned long long, int, void*)+0x56>
c001c7f2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c7f6:	b9 03 00 00 00       	mov    ecx,0x3
c001c7fb:	fc                   	cld    
c001c7fc:	31 c0                	xor    eax,eax
c001c7fe:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c800:	0f ce                	bswap  esi
c001c802:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
c001c806:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c80b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c80f:	50                   	push   eax
c001c810:	50                   	push   eax
c001c811:	53                   	push   ebx
c001c812:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c816:	c1 e3 0b             	shl    ebx,0xb
c001c819:	6a 00                	push   0x0
c001c81b:	53                   	push   ebx
c001c81c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c820:	50                   	push   eax
c001c821:	55                   	push   ebp
c001c822:	e8 c7 fa ff ff       	call   c001c2ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c827:	83 c4 20             	add    esp,0x20
c001c82a:	eb 1a                	jmp    c001c846 <ATAPI::read(unsigned long long, int, void*)+0x70>
c001c82c:	83 ec 0c             	sub    esp,0xc
c001c82f:	55                   	push   ebp
c001c830:	e8 07 fe ff ff       	call   c001c63c <ATAPI::detectMedia()>
c001c835:	83 c4 10             	add    esp,0x10
c001c838:	80 bd 7c 01 00 00 00 	cmp    BYTE PTR [ebp+0x17c],0x0
c001c83f:	75 b1                	jne    c001c7f2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c841:	b8 02 00 00 00       	mov    eax,0x2
c001c846:	83 c4 1c             	add    esp,0x1c
c001c849:	5b                   	pop    ebx
c001c84a:	5e                   	pop    esi
c001c84b:	5f                   	pop    edi
c001c84c:	5d                   	pop    ebp
c001c84d:	c3                   	ret    

c001c84e <SATA::close(int, int, void*)>:
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c855:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c85b:	85 c0                	test   eax,eax
c001c85d:	74 0c                	je     c001c86b <SATA::close(int, int, void*)+0x1d>
c001c85f:	8b 10                	mov    edx,DWORD PTR [eax]
c001c861:	83 ec 0c             	sub    esp,0xc
c001c864:	50                   	push   eax
c001c865:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c868:	83 c4 10             	add    esp,0x10
c001c86b:	31 c0                	xor    eax,eax
c001c86d:	83 c4 0c             	add    esp,0xc
c001c870:	c3                   	ret    
c001c871:	90                   	nop

c001c872 <SATA::powerSaving(PowerSavingLevel)>:
c001c872:	c3                   	ret    
c001c873:	90                   	nop

c001c874 <SATA::open(int, int, void*)>:
c001c874:	56                   	push   esi
c001c875:	53                   	push   ebx
c001c876:	50                   	push   eax
c001c877:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c87b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c87f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c889:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c88f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c893:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c89d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c8a7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c8ae:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c8b4:	e8 53 b5 fe ff       	call   c0007e0c <Phys::allocatePage()>
c001c8b9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c8bf:	89 c6                	mov    esi,eax
c001c8c1:	e8 46 b5 fe ff       	call   c0007e0c <Phys::allocatePage()>
c001c8c6:	81 c6 00 10 00 00    	add    esi,0x1000
c001c8cc:	39 c6                	cmp    esi,eax
c001c8ce:	74 10                	je     c001c8e0 <SATA::open(int, int, void*)+0x6c>
c001c8d0:	83 ec 0c             	sub    esp,0xc
c001c8d3:	68 70 19 02 c0       	push   0xc0021970
c001c8d8:	e8 48 3f ff ff       	call   c0010825 <KePanic(char const*)>
c001c8dd:	83 c4 10             	add    esp,0x10
c001c8e0:	83 ec 0c             	sub    esp,0xc
c001c8e3:	6a 02                	push   0x2
c001c8e5:	e8 36 cd fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001c8ea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c8f0:	6a 03                	push   0x3
c001c8f2:	50                   	push   eax
c001c8f3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c8f9:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001c8ff:	e8 3e d4 fe ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c904:	83 c4 14             	add    esp,0x14
c001c907:	53                   	push   ebx
c001c908:	e8 ff f9 fe ff       	call   c000c30c <PhysicalDisk::startCache()>
c001c90d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c910:	e8 8c 0b ff ff       	call   c000d4a1 <createPartitionsForDisk(PhysicalDisk*)>
c001c915:	83 c4 14             	add    esp,0x14
c001c918:	31 c0                	xor    eax,eax
c001c91a:	5b                   	pop    ebx
c001c91b:	5e                   	pop    esi
c001c91c:	c3                   	ret    
c001c91d:	90                   	nop

c001c91e <SATA::SATA()>:
c001c91e:	83 ec 1c             	sub    esp,0x1c
c001c921:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c925:	c7 44 24 08 00 02 00 00 	mov    DWORD PTR [esp+0x8],0x200
c001c92d:	c7 44 24 04 84 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021984
c001c935:	89 04 24             	mov    DWORD PTR [esp],eax
c001c938:	e8 67 f9 fe ff       	call   c000c2a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c93d:	ba f4 19 02 c0       	mov    edx,0xc00219f4
c001c942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c946:	89 10                	mov    DWORD PTR [eax],edx
c001c948:	90                   	nop
c001c949:	83 c4 1c             	add    esp,0x1c
c001c94c:	c3                   	ret    
c001c94d:	90                   	nop

c001c94e <SATA::access(unsigned long long, int, void*, bool)>:
c001c94e:	55                   	push   ebp
c001c94f:	57                   	push   edi
c001c950:	56                   	push   esi
c001c951:	53                   	push   ebx
c001c952:	83 ec 2c             	sub    esp,0x2c
c001c955:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c959:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c95e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c962:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c966:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c96a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c96e:	8a 44 24 54          	mov    al,BYTE PTR [esp+0x54]
c001c972:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001c976:	7e 10                	jle    c001c988 <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001c978:	83 ec 0c             	sub    esp,0xc
c001c97b:	68 94 19 02 c0       	push   0xc0021994
c001c980:	e8 a0 3e ff ff       	call   c0010825 <KePanic(char const*)>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c98e:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001c994:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001c99a:	89 e8                	mov    eax,ebp
c001c99c:	c1 e0 07             	shl    eax,0x7
c001c99f:	01 d0                	add    eax,edx
c001c9a1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c9ab:	8d 45 02             	lea    eax,[ebp+0x2]
c001c9ae:	51                   	push   ecx
c001c9af:	c1 e0 07             	shl    eax,0x7
c001c9b2:	51                   	push   ecx
c001c9b3:	01 d0                	add    eax,edx
c001c9b5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c9b9:	50                   	push   eax
c001c9ba:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c9c0:	e8 4f ec ff ff       	call   c001b614 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c9c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9c9:	83 c4 10             	add    esp,0x10
c001c9cc:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001c9d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c9d5:	0f 84 4e 01 00 00    	je     c001cb29 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001c9db:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c9df:	c1 e0 09             	shl    eax,0x9
c001c9e2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001c9e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9eb:	74 0e                	je     c001c9fb <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001c9ed:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c9f3:	89 c1                	mov    ecx,eax
c001c9f5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c9f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c9fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c9ff:	8d 45 02             	lea    eax,[ebp+0x2]
c001ca02:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001ca06:	c1 e0 07             	shl    eax,0x7
c001ca09:	01 d0                	add    eax,edx
c001ca0b:	8b 38                	mov    edi,DWORD PTR [eax]
c001ca0d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ca13:	80 e1 01             	and    cl,0x1
c001ca16:	c0 e1 06             	shl    cl,0x6
c001ca19:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c001ca1f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c001ca25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca29:	c1 e0 05             	shl    eax,0x5
c001ca2c:	01 c7                	add    edi,eax
c001ca2e:	8a 07                	mov    al,BYTE PTR [edi]
c001ca30:	24 bf                	and    al,0xbf
c001ca32:	08 c8                	or     al,cl
c001ca34:	88 07                	mov    BYTE PTR [edi],al
c001ca36:	8b 07                	mov    eax,DWORD PTR [edi]
c001ca38:	25 e0 ff 00 00       	and    eax,0xffe0
c001ca3d:	0d 05 00 01 00       	or     eax,0x10005
c001ca42:	89 07                	mov    DWORD PTR [edi],eax
c001ca44:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ca4a:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c001ca50:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c001ca56:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c001ca59:	50                   	push   eax
c001ca5a:	68 90 00 00 00       	push   0x90
c001ca5f:	6a 00                	push   0x0
c001ca61:	56                   	push   esi
c001ca62:	e8 19 3b fe ff       	call   c0000580 <memset>
c001ca67:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ca6d:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ca71:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ca77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca7b:	83 c4 10             	add    esp,0x10
c001ca7e:	48                   	dec    eax
c001ca7f:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ca84:	89 c1                	mov    ecx,eax
c001ca86:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ca8c:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ca91:	09 c8                	or     eax,ecx
c001ca93:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ca99:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ca9c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001caa3:	25 00 7f 00 00       	and    eax,0x7f00
c001caa8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caac:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cab1:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001cab6:	66 89 06             	mov    WORD PTR [esi],ax
c001cab9:	19 c0                	sbb    eax,eax
c001cabb:	24 f0                	and    al,0xf0
c001cabd:	04 35                	add    al,0x35
c001cabf:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cac2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cac6:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001caca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cace:	c1 e8 10             	shr    eax,0x10
c001cad1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cad8:	c1 e8 18             	shr    eax,0x18
c001cadb:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cade:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cae2:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cae5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cae9:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001caec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001caf0:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001caf4:	89 ee                	mov    esi,ebp
c001caf6:	31 c0                	xor    eax,eax
c001caf8:	c1 e6 07             	shl    esi,0x7
c001cafb:	01 d6                	add    esi,edx
c001cafd:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cb03:	f6 c1 88             	test   cl,0x88
c001cb06:	74 0a                	je     c001cb12 <SATA::access(unsigned long long, int, void*, bool)+0x1c4>
c001cb08:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cb0d:	74 0a                	je     c001cb19 <SATA::access(unsigned long long, int, void*, bool)+0x1cb>
c001cb0f:	40                   	inc    eax
c001cb10:	eb eb                	jmp    c001cafd <SATA::access(unsigned long long, int, void*, bool)+0x1af>
c001cb12:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cb17:	75 17                	jne    c001cb30 <SATA::access(unsigned long long, int, void*, bool)+0x1e2>
c001cb19:	83 ec 0c             	sub    esp,0xc
c001cb1c:	68 cd 19 02 c0       	push   0xc00219cd
c001cb21:	e8 50 df fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001cb26:	83 c4 10             	add    esp,0x10
c001cb29:	b8 01 00 00 00       	mov    eax,0x1
c001cb2e:	eb 5b                	jmp    c001cb8b <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001cb30:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001cb34:	c1 e5 07             	shl    ebp,0x7
c001cb37:	b8 01 00 00 00       	mov    eax,0x1
c001cb3c:	01 d5                	add    ebp,edx
c001cb3e:	d3 e0                	shl    eax,cl
c001cb40:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001cb46:	8b 95 38 01 00 00    	mov    edx,DWORD PTR [ebp+0x138]
c001cb4c:	85 d0                	test   eax,edx
c001cb4e:	74 16                	je     c001cb66 <SATA::access(unsigned long long, int, void*, bool)+0x218>
c001cb50:	8b 95 10 01 00 00    	mov    edx,DWORD PTR [ebp+0x110]
c001cb56:	0f ba e2 1e          	bt     edx,0x1e
c001cb5a:	73 ea                	jae    c001cb46 <SATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001cb5c:	83 ec 0c             	sub    esp,0xc
c001cb5f:	68 db 19 02 c0       	push   0xc00219db
c001cb64:	eb bb                	jmp    c001cb21 <SATA::access(unsigned long long, int, void*, bool)+0x1d3>
c001cb66:	8b 85 10 01 00 00    	mov    eax,DWORD PTR [ebp+0x110]
c001cb6c:	0f ba e0 1e          	bt     eax,0x1e
c001cb70:	72 b7                	jb     c001cb29 <SATA::access(unsigned long long, int, void*, bool)+0x1db>
c001cb72:	31 c0                	xor    eax,eax
c001cb74:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001cb79:	75 10                	jne    c001cb8b <SATA::access(unsigned long long, int, void*, bool)+0x23d>
c001cb7b:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001cb81:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001cb85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb8b:	83 c4 2c             	add    esp,0x2c
c001cb8e:	5b                   	pop    ebx
c001cb8f:	5e                   	pop    esi
c001cb90:	5f                   	pop    edi
c001cb91:	5d                   	pop    ebp
c001cb92:	c3                   	ret    
c001cb93:	90                   	nop

c001cb94 <SATA::read(unsigned long long, int, void*)>:
c001cb94:	55                   	push   ebp
c001cb95:	57                   	push   edi
c001cb96:	56                   	push   esi
c001cb97:	be 04 00 00 00       	mov    esi,0x4
c001cb9c:	53                   	push   ebx
c001cb9d:	83 ec 0c             	sub    esp,0xc
c001cba0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cba4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cba8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cbac:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cbb0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cbb3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cbb9:	0f 87 1c 02 00 00    	ja     c001cddb <SATA::read(unsigned long long, int, void*)+0x247>
c001cbbf:	85 c9                	test   ecx,ecx
c001cbc1:	be 06 00 00 00       	mov    esi,0x6
c001cbc6:	0f 84 0f 02 00 00    	je     c001cddb <SATA::read(unsigned long long, int, void*)+0x247>
c001cbcc:	56                   	push   esi
c001cbcd:	56                   	push   esi
c001cbce:	6a 00                	push   0x0
c001cbd0:	51                   	push   ecx
c001cbd1:	53                   	push   ebx
c001cbd2:	52                   	push   edx
c001cbd3:	50                   	push   eax
c001cbd4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbd8:	e8 71 fd ff ff       	call   c001c94e <SATA::access(unsigned long long, int, void*, bool)>
c001cbdd:	83 c4 20             	add    esp,0x20
c001cbe0:	85 c0                	test   eax,eax
c001cbe2:	89 c6                	mov    esi,eax
c001cbe4:	0f 85 ec 01 00 00    	jne    c001cdd6 <SATA::read(unsigned long long, int, void*)+0x242>
c001cbea:	50                   	push   eax
c001cbeb:	bd 10 27 00 00       	mov    ebp,0x2710
c001cbf0:	50                   	push   eax
c001cbf1:	6a 0f                	push   0xf
c001cbf3:	6a 00                	push   0x0
c001cbf5:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cbfb:	bb 0a 00 00 00       	mov    ebx,0xa
c001cc00:	e8 78 f2 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cc05:	5a                   	pop    edx
c001cc06:	59                   	pop    ecx
c001cc07:	0f b6 c0             	movzx  eax,al
c001cc0a:	50                   	push   eax
c001cc0b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cc10:	99                   	cdq    
c001cc11:	f7 fd                	idiv   ebp
c001cc13:	99                   	cdq    
c001cc14:	f7 fb                	idiv   ebx
c001cc16:	80 c2 30             	add    dl,0x30
c001cc19:	0f b6 d2             	movzx  edx,dl
c001cc1c:	52                   	push   edx
c001cc1d:	e8 4a f2 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cc22:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc28:	5f                   	pop    edi
c001cc29:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc2e:	58                   	pop    eax
c001cc2f:	6a 0f                	push   0xf
c001cc31:	6a 00                	push   0x0
c001cc33:	e8 45 f2 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cc38:	5a                   	pop    edx
c001cc39:	59                   	pop    ecx
c001cc3a:	0f b6 c0             	movzx  eax,al
c001cc3d:	50                   	push   eax
c001cc3e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cc43:	99                   	cdq    
c001cc44:	f7 ff                	idiv   edi
c001cc46:	99                   	cdq    
c001cc47:	f7 fb                	idiv   ebx
c001cc49:	80 c2 30             	add    dl,0x30
c001cc4c:	0f b6 d2             	movzx  edx,dl
c001cc4f:	52                   	push   edx
c001cc50:	e8 17 f2 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cc55:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc5b:	58                   	pop    eax
c001cc5c:	5a                   	pop    edx
c001cc5d:	6a 0f                	push   0xf
c001cc5f:	6a 00                	push   0x0
c001cc61:	e8 17 f2 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cc66:	59                   	pop    ecx
c001cc67:	b9 64 00 00 00       	mov    ecx,0x64
c001cc6c:	5a                   	pop    edx
c001cc6d:	0f b6 c0             	movzx  eax,al
c001cc70:	50                   	push   eax
c001cc71:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cc76:	99                   	cdq    
c001cc77:	f7 f9                	idiv   ecx
c001cc79:	99                   	cdq    
c001cc7a:	f7 fb                	idiv   ebx
c001cc7c:	80 c2 30             	add    dl,0x30
c001cc7f:	0f b6 d2             	movzx  edx,dl
c001cc82:	52                   	push   edx
c001cc83:	e8 e4 f1 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cc88:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cc8e:	59                   	pop    ecx
c001cc8f:	58                   	pop    eax
c001cc90:	6a 0f                	push   0xf
c001cc92:	6a 00                	push   0x0
c001cc94:	e8 e4 f1 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cc99:	5a                   	pop    edx
c001cc9a:	59                   	pop    ecx
c001cc9b:	0f b6 c0             	movzx  eax,al
c001cc9e:	50                   	push   eax
c001cc9f:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cca4:	99                   	cdq    
c001cca5:	f7 fb                	idiv   ebx
c001cca7:	99                   	cdq    
c001cca8:	f7 fb                	idiv   ebx
c001ccaa:	80 c2 30             	add    dl,0x30
c001ccad:	0f b6 d2             	movzx  edx,dl
c001ccb0:	52                   	push   edx
c001ccb1:	e8 b6 f1 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001ccb6:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ccbc:	58                   	pop    eax
c001ccbd:	5a                   	pop    edx
c001ccbe:	6a 0f                	push   0xf
c001ccc0:	6a 00                	push   0x0
c001ccc2:	e8 b6 f1 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001ccc7:	59                   	pop    ecx
c001ccc8:	5a                   	pop    edx
c001ccc9:	0f b6 c0             	movzx  eax,al
c001cccc:	50                   	push   eax
c001cccd:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ccd2:	99                   	cdq    
c001ccd3:	f7 fb                	idiv   ebx
c001ccd5:	80 c2 30             	add    dl,0x30
c001ccd8:	0f b6 d2             	movzx  edx,dl
c001ccdb:	52                   	push   edx
c001ccdc:	e8 8b f1 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cce1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cce7:	59                   	pop    ecx
c001cce8:	58                   	pop    eax
c001cce9:	6a 0f                	push   0xf
c001cceb:	6a 00                	push   0x0
c001cced:	e8 8b f1 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001ccf2:	5a                   	pop    edx
c001ccf3:	59                   	pop    ecx
c001ccf4:	0f b6 c0             	movzx  eax,al
c001ccf7:	50                   	push   eax
c001ccf8:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ccfd:	99                   	cdq    
c001ccfe:	f7 fd                	idiv   ebp
c001cd00:	99                   	cdq    
c001cd01:	f7 fb                	idiv   ebx
c001cd03:	80 c2 30             	add    dl,0x30
c001cd06:	0f b6 d2             	movzx  edx,dl
c001cd09:	52                   	push   edx
c001cd0a:	e8 5d f1 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cd0f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cd15:	5d                   	pop    ebp
c001cd16:	58                   	pop    eax
c001cd17:	6a 0f                	push   0xf
c001cd19:	6a 00                	push   0x0
c001cd1b:	e8 5d f1 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cd20:	5a                   	pop    edx
c001cd21:	59                   	pop    ecx
c001cd22:	0f b6 c0             	movzx  eax,al
c001cd25:	50                   	push   eax
c001cd26:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cd2b:	99                   	cdq    
c001cd2c:	f7 ff                	idiv   edi
c001cd2e:	99                   	cdq    
c001cd2f:	f7 fb                	idiv   ebx
c001cd31:	80 c2 30             	add    dl,0x30
c001cd34:	0f b6 d2             	movzx  edx,dl
c001cd37:	52                   	push   edx
c001cd38:	e8 2f f1 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cd3d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cd43:	5f                   	pop    edi
c001cd44:	5d                   	pop    ebp
c001cd45:	6a 0f                	push   0xf
c001cd47:	6a 00                	push   0x0
c001cd49:	e8 2f f1 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cd4e:	5a                   	pop    edx
c001cd4f:	59                   	pop    ecx
c001cd50:	b9 64 00 00 00       	mov    ecx,0x64
c001cd55:	0f b6 c0             	movzx  eax,al
c001cd58:	50                   	push   eax
c001cd59:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cd5e:	99                   	cdq    
c001cd5f:	f7 f9                	idiv   ecx
c001cd61:	99                   	cdq    
c001cd62:	f7 fb                	idiv   ebx
c001cd64:	88 d0                	mov    al,dl
c001cd66:	04 30                	add    al,0x30
c001cd68:	0f b6 c0             	movzx  eax,al
c001cd6b:	50                   	push   eax
c001cd6c:	e8 fb f0 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cd71:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd77:	5f                   	pop    edi
c001cd78:	5d                   	pop    ebp
c001cd79:	6a 0f                	push   0xf
c001cd7b:	6a 00                	push   0x0
c001cd7d:	e8 fb f0 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cd82:	5a                   	pop    edx
c001cd83:	59                   	pop    ecx
c001cd84:	0f b6 c0             	movzx  eax,al
c001cd87:	50                   	push   eax
c001cd88:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cd8d:	99                   	cdq    
c001cd8e:	f7 fb                	idiv   ebx
c001cd90:	99                   	cdq    
c001cd91:	f7 fb                	idiv   ebx
c001cd93:	88 d0                	mov    al,dl
c001cd95:	04 30                	add    al,0x30
c001cd97:	0f b6 c0             	movzx  eax,al
c001cd9a:	50                   	push   eax
c001cd9b:	e8 cc f0 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cda0:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cda6:	5f                   	pop    edi
c001cda7:	5d                   	pop    ebp
c001cda8:	6a 0f                	push   0xf
c001cdaa:	6a 00                	push   0x0
c001cdac:	e8 cc f0 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cdb1:	5a                   	pop    edx
c001cdb2:	59                   	pop    ecx
c001cdb3:	0f b6 c0             	movzx  eax,al
c001cdb6:	50                   	push   eax
c001cdb7:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cdbc:	99                   	cdq    
c001cdbd:	f7 fb                	idiv   ebx
c001cdbf:	80 c2 30             	add    dl,0x30
c001cdc2:	0f b6 d2             	movzx  edx,dl
c001cdc5:	52                   	push   edx
c001cdc6:	e8 a1 f0 ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cdcb:	83 c4 10             	add    esp,0x10
c001cdce:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cdd4:	eb 05                	jmp    c001cddb <SATA::read(unsigned long long, int, void*)+0x247>
c001cdd6:	be 01 00 00 00       	mov    esi,0x1
c001cddb:	83 c4 0c             	add    esp,0xc
c001cdde:	89 f0                	mov    eax,esi
c001cde0:	5b                   	pop    ebx
c001cde1:	5e                   	pop    esi
c001cde2:	5f                   	pop    edi
c001cde3:	5d                   	pop    ebp
c001cde4:	c3                   	ret    
c001cde5:	90                   	nop

c001cde6 <SATA::write(unsigned long long, int, void*)>:
c001cde6:	55                   	push   ebp
c001cde7:	57                   	push   edi
c001cde8:	56                   	push   esi
c001cde9:	53                   	push   ebx
c001cdea:	83 ec 0c             	sub    esp,0xc
c001cded:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001cdf1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cdf5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cdf9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cdfd:	8d 70 ff             	lea    esi,[eax-0x1]
c001ce00:	b8 04 00 00 00       	mov    eax,0x4
c001ce05:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ce0b:	0f 87 30 02 00 00    	ja     c001d041 <SATA::write(unsigned long long, int, void*)+0x25b>
c001ce11:	85 db                	test   ebx,ebx
c001ce13:	b8 06 00 00 00       	mov    eax,0x6
c001ce18:	0f 84 23 02 00 00    	je     c001d041 <SATA::write(unsigned long long, int, void*)+0x25b>
c001ce1e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce22:	c1 e6 09             	shl    esi,0x9
c001ce25:	01 de                	add    esi,ebx
c001ce27:	50                   	push   eax
c001ce28:	89 d7                	mov    edi,edx
c001ce2a:	50                   	push   eax
c001ce2b:	83 c7 01             	add    edi,0x1
c001ce2e:	6a 01                	push   0x1
c001ce30:	89 cd                	mov    ebp,ecx
c001ce32:	53                   	push   ebx
c001ce33:	83 d5 00             	adc    ebp,0x0
c001ce36:	6a 01                	push   0x1
c001ce38:	81 c3 00 02 00 00    	add    ebx,0x200
c001ce3e:	51                   	push   ecx
c001ce3f:	52                   	push   edx
c001ce40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce44:	e8 05 fb ff ff       	call   c001c94e <SATA::access(unsigned long long, int, void*, bool)>
c001ce49:	83 c4 20             	add    esp,0x20
c001ce4c:	39 f3                	cmp    ebx,esi
c001ce4e:	89 fa                	mov    edx,edi
c001ce50:	89 e9                	mov    ecx,ebp
c001ce52:	75 d3                	jne    c001ce27 <SATA::write(unsigned long long, int, void*)+0x41>
c001ce54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ce58:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce5d:	bb 0a 00 00 00       	mov    ebx,0xa
c001ce62:	01 05 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,eax
c001ce68:	50                   	push   eax
c001ce69:	50                   	push   eax
c001ce6a:	6a 0f                	push   0xf
c001ce6c:	6a 00                	push   0x0
c001ce6e:	e8 0a f0 ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001ce73:	5a                   	pop    edx
c001ce74:	59                   	pop    ecx
c001ce75:	0f b6 c0             	movzx  eax,al
c001ce78:	50                   	push   eax
c001ce79:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce7e:	99                   	cdq    
c001ce7f:	f7 fd                	idiv   ebp
c001ce81:	99                   	cdq    
c001ce82:	f7 fb                	idiv   ebx
c001ce84:	88 d0                	mov    al,dl
c001ce86:	04 30                	add    al,0x30
c001ce88:	0f b6 c0             	movzx  eax,al
c001ce8b:	50                   	push   eax
c001ce8c:	e8 db ef ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001ce91:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce97:	5e                   	pop    esi
c001ce98:	5f                   	pop    edi
c001ce99:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce9e:	6a 0f                	push   0xf
c001cea0:	6a 00                	push   0x0
c001cea2:	e8 d6 ef ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cea7:	5a                   	pop    edx
c001cea8:	59                   	pop    ecx
c001cea9:	0f b6 c0             	movzx  eax,al
c001ceac:	50                   	push   eax
c001cead:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ceb2:	99                   	cdq    
c001ceb3:	f7 ff                	idiv   edi
c001ceb5:	99                   	cdq    
c001ceb6:	f7 fb                	idiv   ebx
c001ceb8:	80 c2 30             	add    dl,0x30
c001cebb:	0f b6 d2             	movzx  edx,dl
c001cebe:	52                   	push   edx
c001cebf:	e8 a8 ef ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cec4:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ceca:	5e                   	pop    esi
c001cecb:	be 64 00 00 00       	mov    esi,0x64
c001ced0:	58                   	pop    eax
c001ced1:	6a 0f                	push   0xf
c001ced3:	6a 00                	push   0x0
c001ced5:	e8 a3 ef ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001ceda:	5a                   	pop    edx
c001cedb:	59                   	pop    ecx
c001cedc:	0f b6 c0             	movzx  eax,al
c001cedf:	50                   	push   eax
c001cee0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cee5:	99                   	cdq    
c001cee6:	f7 fe                	idiv   esi
c001cee8:	99                   	cdq    
c001cee9:	f7 fb                	idiv   ebx
c001ceeb:	80 c2 30             	add    dl,0x30
c001ceee:	0f b6 d2             	movzx  edx,dl
c001cef1:	52                   	push   edx
c001cef2:	e8 75 ef ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cef7:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cefd:	58                   	pop    eax
c001cefe:	5a                   	pop    edx
c001ceff:	6a 0f                	push   0xf
c001cf01:	6a 00                	push   0x0
c001cf03:	e8 75 ef ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cf08:	59                   	pop    ecx
c001cf09:	5a                   	pop    edx
c001cf0a:	0f b6 c0             	movzx  eax,al
c001cf0d:	50                   	push   eax
c001cf0e:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cf13:	99                   	cdq    
c001cf14:	f7 fb                	idiv   ebx
c001cf16:	99                   	cdq    
c001cf17:	f7 fb                	idiv   ebx
c001cf19:	80 c2 30             	add    dl,0x30
c001cf1c:	0f b6 d2             	movzx  edx,dl
c001cf1f:	52                   	push   edx
c001cf20:	e8 47 ef ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cf25:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cf2b:	59                   	pop    ecx
c001cf2c:	58                   	pop    eax
c001cf2d:	6a 0f                	push   0xf
c001cf2f:	6a 00                	push   0x0
c001cf31:	e8 47 ef ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cf36:	5a                   	pop    edx
c001cf37:	59                   	pop    ecx
c001cf38:	0f b6 c0             	movzx  eax,al
c001cf3b:	50                   	push   eax
c001cf3c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cf41:	99                   	cdq    
c001cf42:	f7 fb                	idiv   ebx
c001cf44:	80 c2 30             	add    dl,0x30
c001cf47:	0f b6 d2             	movzx  edx,dl
c001cf4a:	52                   	push   edx
c001cf4b:	e8 1c ef ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cf50:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf56:	58                   	pop    eax
c001cf57:	5a                   	pop    edx
c001cf58:	6a 0f                	push   0xf
c001cf5a:	6a 00                	push   0x0
c001cf5c:	e8 1c ef ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cf61:	59                   	pop    ecx
c001cf62:	5a                   	pop    edx
c001cf63:	0f b6 c0             	movzx  eax,al
c001cf66:	50                   	push   eax
c001cf67:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf6c:	99                   	cdq    
c001cf6d:	f7 fd                	idiv   ebp
c001cf6f:	99                   	cdq    
c001cf70:	f7 fb                	idiv   ebx
c001cf72:	80 c2 30             	add    dl,0x30
c001cf75:	0f b6 d2             	movzx  edx,dl
c001cf78:	52                   	push   edx
c001cf79:	e8 ee ee ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cf7e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf84:	59                   	pop    ecx
c001cf85:	5d                   	pop    ebp
c001cf86:	6a 0f                	push   0xf
c001cf88:	6a 00                	push   0x0
c001cf8a:	e8 ee ee ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cf8f:	5a                   	pop    edx
c001cf90:	59                   	pop    ecx
c001cf91:	0f b6 c0             	movzx  eax,al
c001cf94:	50                   	push   eax
c001cf95:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf9a:	99                   	cdq    
c001cf9b:	f7 ff                	idiv   edi
c001cf9d:	99                   	cdq    
c001cf9e:	f7 fb                	idiv   ebx
c001cfa0:	88 d0                	mov    al,dl
c001cfa2:	04 30                	add    al,0x30
c001cfa4:	0f b6 c0             	movzx  eax,al
c001cfa7:	50                   	push   eax
c001cfa8:	e8 bf ee ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cfad:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cfb3:	5f                   	pop    edi
c001cfb4:	5d                   	pop    ebp
c001cfb5:	6a 0f                	push   0xf
c001cfb7:	6a 00                	push   0x0
c001cfb9:	e8 bf ee ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cfbe:	5a                   	pop    edx
c001cfbf:	59                   	pop    ecx
c001cfc0:	0f b6 c0             	movzx  eax,al
c001cfc3:	50                   	push   eax
c001cfc4:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cfc9:	99                   	cdq    
c001cfca:	f7 fe                	idiv   esi
c001cfcc:	99                   	cdq    
c001cfcd:	f7 fb                	idiv   ebx
c001cfcf:	88 d0                	mov    al,dl
c001cfd1:	04 30                	add    al,0x30
c001cfd3:	0f b6 c0             	movzx  eax,al
c001cfd6:	50                   	push   eax
c001cfd7:	e8 90 ee ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001cfdc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cfe2:	5e                   	pop    esi
c001cfe3:	5f                   	pop    edi
c001cfe4:	6a 0f                	push   0xf
c001cfe6:	6a 00                	push   0x0
c001cfe8:	e8 90 ee ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001cfed:	5d                   	pop    ebp
c001cfee:	5a                   	pop    edx
c001cfef:	0f b6 c0             	movzx  eax,al
c001cff2:	50                   	push   eax
c001cff3:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cff8:	99                   	cdq    
c001cff9:	f7 fb                	idiv   ebx
c001cffb:	99                   	cdq    
c001cffc:	f7 fb                	idiv   ebx
c001cffe:	88 d0                	mov    al,dl
c001d000:	04 30                	add    al,0x30
c001d002:	0f b6 c0             	movzx  eax,al
c001d005:	50                   	push   eax
c001d006:	e8 61 ee ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001d00b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d011:	59                   	pop    ecx
c001d012:	5e                   	pop    esi
c001d013:	6a 0f                	push   0xf
c001d015:	6a 00                	push   0x0
c001d017:	e8 61 ee ff ff       	call   c001be7d <combineColours(unsigned char, unsigned char)>
c001d01c:	5f                   	pop    edi
c001d01d:	5d                   	pop    ebp
c001d01e:	0f b6 c0             	movzx  eax,al
c001d021:	50                   	push   eax
c001d022:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d027:	99                   	cdq    
c001d028:	f7 fb                	idiv   ebx
c001d02a:	80 c2 30             	add    dl,0x30
c001d02d:	0f b6 d2             	movzx  edx,dl
c001d030:	52                   	push   edx
c001d031:	e8 36 ee ff ff       	call   c001be6c <combineCharAndColour(char, unsigned char)>
c001d036:	83 c4 10             	add    esp,0x10
c001d039:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d03f:	31 c0                	xor    eax,eax
c001d041:	83 c4 0c             	add    esp,0xc
c001d044:	5b                   	pop    ebx
c001d045:	5e                   	pop    esi
c001d046:	5f                   	pop    edi
c001d047:	5d                   	pop    ebp
c001d048:	c3                   	ret    
c001d049:	90                   	nop

c001d04a <SATAPI::write(unsigned long long, int, void*)>:
c001d04a:	b8 03 00 00 00       	mov    eax,0x3
c001d04f:	c3                   	ret    

c001d050 <SATAPI::close(int, int, void*)>:
c001d050:	83 ec 0c             	sub    esp,0xc
c001d053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d057:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d05d:	85 c0                	test   eax,eax
c001d05f:	74 0c                	je     c001d06d <SATAPI::close(int, int, void*)+0x1d>
c001d061:	8b 10                	mov    edx,DWORD PTR [eax]
c001d063:	83 ec 0c             	sub    esp,0xc
c001d066:	50                   	push   eax
c001d067:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d06a:	83 c4 10             	add    esp,0x10
c001d06d:	31 c0                	xor    eax,eax
c001d06f:	83 c4 0c             	add    esp,0xc
c001d072:	c3                   	ret    
c001d073:	90                   	nop

c001d074 <SATAPI::SATAPI()>:
c001d074:	83 ec 1c             	sub    esp,0x1c
c001d077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d07b:	c7 44 24 08 00 08 00 00 	mov    DWORD PTR [esp+0x8],0x800
c001d083:	c7 44 24 04 24 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a24
c001d08b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d08e:	e8 11 f2 fe ff       	call   c000c2a4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d093:	ba 18 1b 02 c0       	mov    edx,0xc0021b18
c001d098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d09c:	89 10                	mov    DWORD PTR [eax],edx
c001d09e:	90                   	nop
c001d09f:	83 c4 1c             	add    esp,0x1c
c001d0a2:	c3                   	ret    
c001d0a3:	90                   	nop

c001d0a4 <SATAPI::diskRemoved()>:
c001d0a4:	c3                   	ret    
c001d0a5:	90                   	nop

c001d0a6 <SATAPI::diskInserted()>:
c001d0a6:	83 ec 18             	sub    esp,0x18
c001d0a9:	68 30 1a 02 c0       	push   0xc0021a30
c001d0ae:	e8 c3 d9 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d0b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0b7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d0be:	83 c4 1c             	add    esp,0x1c
c001d0c1:	c3                   	ret    

c001d0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d0c2:	55                   	push   ebp
c001d0c3:	57                   	push   edi
c001d0c4:	56                   	push   esi
c001d0c5:	53                   	push   ebx
c001d0c6:	83 ec 34             	sub    esp,0x34
c001d0c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d0cd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d0d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0d5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d0d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d0dd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d0e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d0e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0ed:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d0f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d0f7:	83 c0 02             	add    eax,0x2
c001d0fa:	c1 e0 07             	shl    eax,0x7
c001d0fd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d105:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d109:	c1 e0 07             	shl    eax,0x7
c001d10c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d110:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d114:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d11e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d122:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d128:	e8 e7 e4 ff ff       	call   c001b614 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d12d:	83 c4 10             	add    esp,0x10
c001d130:	89 c2                	mov    edx,eax
c001d132:	b8 01 00 00 00       	mov    eax,0x1
c001d137:	83 fa ff             	cmp    edx,0xffffffff
c001d13a:	0f 84 55 02 00 00    	je     c001d395 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d148:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d14e:	8b 00                	mov    eax,DWORD PTR [eax]
c001d150:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d156:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d15c:	89 d1                	mov    ecx,edx
c001d15e:	c1 e1 05             	shl    ecx,0x5
c001d161:	01 c8                	add    eax,ecx
c001d163:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d165:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d16b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d171:	89 08                	mov    DWORD PTR [eax],ecx
c001d173:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d179:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d17f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d185:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d188:	50                   	push   eax
c001d189:	68 90 00 00 00       	push   0x90
c001d18e:	6a 00                	push   0x0
c001d190:	53                   	push   ebx
c001d191:	e8 ea 33 fe ff       	call   c0000580 <memset>
c001d196:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d199:	b9 0c 00 00 00       	mov    ecx,0xc
c001d19e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d1a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d1a4:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d1aa:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d1ae:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d1b2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d1b8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d1bc:	48                   	dec    eax
c001d1bd:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d1c2:	89 c1                	mov    ecx,eax
c001d1c4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d1ca:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d1cf:	09 c8                	or     eax,ecx
c001d1d1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d1d7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d1da:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001d1e1:	25 00 7f 00 00       	and    eax,0x7f00
c001d1e6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d1eb:	66 89 03             	mov    WORD PTR [ebx],ax
c001d1ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1f2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001d1f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fa:	c1 e8 10             	shr    eax,0x10
c001d1fd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d204:	c1 e8 18             	shr    eax,0x18
c001d207:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001d20a:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d20e:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d211:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d215:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d218:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d21c:	83 c4 10             	add    esp,0x10
c001d21f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d223:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d227:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d22b:	31 c0                	xor    eax,eax
c001d22d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001d233:	f6 c1 88             	test   cl,0x88
c001d236:	74 0a                	je     c001d242 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d238:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d23d:	74 0a                	je     c001d249 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d23f:	40                   	inc    eax
c001d240:	eb eb                	jmp    c001d22d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d242:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d247:	75 43                	jne    c001d28c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d249:	83 ec 0c             	sub    esp,0xc
c001d24c:	68 48 1a 02 c0       	push   0xc0021a48
c001d251:	e8 20 d8 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d256:	58                   	pop    eax
c001d257:	5a                   	pop    edx
c001d258:	68 5d 1a 02 c0       	push   0xc0021a5d
c001d25d:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d263:	e8 5a b8 fe ff       	call   c0008ac2 <VgaText::puts(char const*)>
c001d268:	59                   	pop    ecx
c001d269:	5b                   	pop    ebx
c001d26a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d26e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d274:	e8 33 e4 ff ff       	call   c001b6ac <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d279:	5e                   	pop    esi
c001d27a:	5f                   	pop    edi
c001d27b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d27f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d285:	e8 02 e4 ff ff       	call   c001b68c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d28a:	eb 46                	jmp    c001d2d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001d28c:	be 01 00 00 00       	mov    esi,0x1
c001d291:	88 d1                	mov    cl,dl
c001d293:	d3 e6                	shl    esi,cl
c001d295:	bf a8 e4 ff ff       	mov    edi,0xffffe4a8
c001d29a:	89 b3 38 01 00 00    	mov    DWORD PTR [ebx+0x138],esi
c001d2a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d2a4:	c1 e3 07             	shl    ebx,0x7
c001d2a7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d2ab:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001d2b1:	85 c6                	test   esi,eax
c001d2b3:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001d2b9:	0f 84 a3 00 00 00    	je     c001d362 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a0>
c001d2bf:	0f ba e0 1e          	bt     eax,0x1e
c001d2c3:	73 1a                	jae    c001d2df <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21d>
c001d2c5:	83 ec 0c             	sub    esp,0xc
c001d2c8:	68 6f 1a 02 c0       	push   0xc0021a6f
c001d2cd:	e8 a4 d7 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d2d2:	83 c4 10             	add    esp,0x10
c001d2d5:	b8 01 00 00 00       	mov    eax,0x1
c001d2da:	e9 b6 00 00 00       	jmp    c001d395 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d2df:	8d 87 70 17 00 00    	lea    eax,[edi+0x1770]
c001d2e5:	83 f8 0d             	cmp    eax,0xd
c001d2e8:	77 0a                	ja     c001d2f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x232>
c001d2ea:	83 ec 0c             	sub    esp,0xc
c001d2ed:	68 c8 00 00 00       	push   0xc8
c001d2f2:	eb 28                	jmp    c001d31c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d2f4:	8d 87 88 13 00 00    	lea    eax,[edi+0x1388]
c001d2fa:	83 f8 0d             	cmp    eax,0xd
c001d2fd:	77 0a                	ja     c001d309 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x247>
c001d2ff:	83 ec 0c             	sub    esp,0xc
c001d302:	68 58 02 00 00       	push   0x258
c001d307:	eb 13                	jmp    c001d31c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001d309:	8d 87 a0 0f 00 00    	lea    eax,[edi+0xfa0]
c001d30f:	83 f8 06             	cmp    eax,0x6
c001d312:	77 10                	ja     c001d324 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x262>
c001d314:	83 ec 0c             	sub    esp,0xc
c001d317:	68 dc 05 00 00       	push   0x5dc
c001d31c:	e8 0b 81 ff ff       	call   c001542c <milliTenthSleep(unsigned int)>
c001d321:	83 c4 10             	add    esp,0x10
c001d324:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d328:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d32b:	75 06                	jne    c001d333 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x271>
c001d32d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d331:	74 15                	je     c001d348 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d333:	83 ff 06             	cmp    edi,0x6
c001d336:	77 10                	ja     c001d348 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c001d338:	83 ec 0c             	sub    esp,0xc
c001d33b:	68 c4 09 00 00       	push   0x9c4
c001d340:	e8 e7 80 ff ff       	call   c001542c <milliTenthSleep(unsigned int)>
c001d345:	83 c4 10             	add    esp,0x10
c001d348:	47                   	inc    edi
c001d349:	81 ff b9 0b 00 00    	cmp    edi,0xbb9
c001d34f:	0f 85 56 ff ff ff    	jne    c001d2ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e9>
c001d355:	83 ec 0c             	sub    esp,0xc
c001d358:	68 82 1a 02 c0       	push   0xc0021a82
c001d35d:	e9 6b ff ff ff       	jmp    c001d2cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d362:	0f ba e0 1e          	bt     eax,0x1e
c001d366:	73 0d                	jae    c001d375 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001d368:	83 ec 0c             	sub    esp,0xc
c001d36b:	68 96 1a 02 c0       	push   0xc0021a96
c001d370:	e9 58 ff ff ff       	jmp    c001d2cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20b>
c001d375:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d37a:	74 17                	je     c001d393 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d37c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d381:	74 10                	je     c001d393 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001d383:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d389:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d38d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d391:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d393:	31 c0                	xor    eax,eax
c001d395:	83 c4 2c             	add    esp,0x2c
c001d398:	5b                   	pop    ebx
c001d399:	5e                   	pop    esi
c001d39a:	5f                   	pop    edi
c001d39b:	5d                   	pop    ebp
c001d39c:	c3                   	ret    
c001d39d:	90                   	nop

c001d39e <SATAPI::eject()>:
c001d39e:	57                   	push   edi
c001d39f:	b9 03 00 00 00       	mov    ecx,0x3
c001d3a4:	83 ec 18             	sub    esp,0x18
c001d3a7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d3ab:	fc                   	cld    
c001d3ac:	31 c0                	xor    eax,eax
c001d3ae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d3b0:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d3b5:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d3ba:	50                   	push   eax
c001d3bb:	6a 00                	push   0x0
c001d3bd:	6a 00                	push   0x0
c001d3bf:	6a 00                	push   0x0
c001d3c1:	6a 00                	push   0x0
c001d3c3:	6a 02                	push   0x2
c001d3c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3c9:	50                   	push   eax
c001d3ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3ce:	e8 ef fc ff ff       	call   c001d0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d3d3:	83 c4 38             	add    esp,0x38
c001d3d6:	31 c0                	xor    eax,eax
c001d3d8:	5f                   	pop    edi
c001d3d9:	c3                   	ret    

c001d3da <SATAPI::detectMedia()>:
c001d3da:	53                   	push   ebx
c001d3db:	83 ec 14             	sub    esp,0x14
c001d3de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d3e2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d3e8:	e8 73 07 ff ff       	call   c000db60 <VCache::writeWriteBuffer()>
c001d3ed:	59                   	pop    ecx
c001d3ee:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d3f4:	e8 57 07 ff ff       	call   c000db50 <VCache::invalidateReadBuffer()>
c001d3f9:	c7 04 24 ab 1a 02 c0 	mov    DWORD PTR [esp],0xc0021aab
c001d400:	e8 71 d6 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d405:	83 c4 10             	add    esp,0x10
c001d408:	31 c0                	xor    eax,eax
c001d40a:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d411:	85 d2                	test   edx,edx
c001d413:	74 0f                	je     c001d424 <SATAPI::detectMedia()+0x4a>
c001d415:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d41b:	75 07                	jne    c001d424 <SATAPI::detectMedia()+0x4a>
c001d41d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d424:	40                   	inc    eax
c001d425:	83 f8 1a             	cmp    eax,0x1a
c001d428:	75 e0                	jne    c001d40a <SATAPI::detectMedia()+0x30>
c001d42a:	83 c4 08             	add    esp,0x8
c001d42d:	5b                   	pop    ebx
c001d42e:	c3                   	ret    
c001d42f:	90                   	nop

c001d430 <SATAPI::open(int, int, void*)>:
c001d430:	56                   	push   esi
c001d431:	53                   	push   ebx
c001d432:	51                   	push   ecx
c001d433:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d437:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d43b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d445:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d44b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d44f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d459:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d463:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d46a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d470:	e8 97 a9 fe ff       	call   c0007e0c <Phys::allocatePage()>
c001d475:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d47b:	89 c6                	mov    esi,eax
c001d47d:	e8 8a a9 fe ff       	call   c0007e0c <Phys::allocatePage()>
c001d482:	81 c6 00 10 00 00    	add    esi,0x1000
c001d488:	39 c6                	cmp    esi,eax
c001d48a:	74 10                	je     c001d49c <SATAPI::open(int, int, void*)+0x6c>
c001d48c:	83 ec 0c             	sub    esp,0xc
c001d48f:	68 c0 1a 02 c0       	push   0xc0021ac0
c001d494:	e8 8c 33 ff ff       	call   c0010825 <KePanic(char const*)>
c001d499:	83 c4 10             	add    esp,0x10
c001d49c:	83 ec 0c             	sub    esp,0xc
c001d49f:	6a 02                	push   0x2
c001d4a1:	e8 7a c1 fe ff       	call   c0009620 <Virt::allocateKernelVirtualPages(int)>
c001d4a6:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d4ac:	6a 03                	push   0x3
c001d4ae:	50                   	push   eax
c001d4af:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d4b5:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d4bb:	e8 82 c8 fe ff       	call   c0009d42 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d4c0:	83 c4 14             	add    esp,0x14
c001d4c3:	68 78 01 00 00       	push   0x178
c001d4c8:	e8 2f a6 fe ff       	call   c0007afc <malloc>
c001d4cd:	83 c4 0c             	add    esp,0xc
c001d4d0:	6a 00                	push   0x0
c001d4d2:	68 ff ff ff 7f       	push   0x7fffffff
c001d4d7:	6a 00                	push   0x0
c001d4d9:	6a 00                	push   0x0
c001d4db:	53                   	push   ebx
c001d4dc:	68 d6 1a 02 c0       	push   0xc0021ad6
c001d4e1:	89 c6                	mov    esi,eax
c001d4e3:	50                   	push   eax
c001d4e4:	e8 df fa fe ff       	call   c000cfc8 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d4e9:	83 c4 14             	add    esp,0x14
c001d4ec:	56                   	push   esi
c001d4ed:	e8 98 fb fe ff       	call   c000d08a <LogicalDisk::assignDriveLetter()>
c001d4f2:	5a                   	pop    edx
c001d4f3:	59                   	pop    ecx
c001d4f4:	0f be c0             	movsx  eax,al
c001d4f7:	50                   	push   eax
c001d4f8:	68 28 19 02 c0       	push   0xc0021928
c001d4fd:	e8 74 d5 fe ff       	call   c000aa76 <Dbg::kprintf(char const*, ...)>
c001d502:	58                   	pop    eax
c001d503:	5a                   	pop    edx
c001d504:	56                   	push   esi
c001d505:	53                   	push   ebx
c001d506:	e8 d5 e9 fe ff       	call   c000bee0 <Device::addChild(Device*)>
c001d50b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d511:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d514:	e8 f3 ed fe ff       	call   c000c30c <PhysicalDisk::startCache()>
c001d519:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d520:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d523:	e8 b2 fe ff ff       	call   c001d3da <SATAPI::detectMedia()>
c001d528:	83 c4 14             	add    esp,0x14
c001d52b:	31 c0                	xor    eax,eax
c001d52d:	5b                   	pop    ebx
c001d52e:	5e                   	pop    esi
c001d52f:	c3                   	ret    

c001d530 <SATAPI::read(unsigned long long, int, void*)>:
c001d530:	55                   	push   ebp
c001d531:	57                   	push   edi
c001d532:	56                   	push   esi
c001d533:	53                   	push   ebx
c001d534:	83 ec 3c             	sub    esp,0x3c
c001d537:	8b 5c 24 5c          	mov    ebx,DWORD PTR [esp+0x5c]
c001d53b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d53f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d543:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d547:	83 fb 04             	cmp    ebx,0x4
c001d54a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d54e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d552:	7e 10                	jle    c001d564 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001d554:	83 ec 0c             	sub    esp,0xc
c001d557:	68 e4 1a 02 c0       	push   0xc0021ae4
c001d55c:	e8 c4 32 ff ff       	call   c0010825 <KePanic(char const*)>
c001d561:	83 c4 10             	add    esp,0x10
c001d564:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001d56a:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001d570:	51                   	push   ecx
c001d571:	50                   	push   eax
c001d572:	83 c0 02             	add    eax,0x2
c001d575:	c1 e0 07             	shl    eax,0x7
c001d578:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d57e:	50                   	push   eax
c001d57f:	52                   	push   edx
c001d580:	e8 51 e1 ff ff       	call   c001b6d6 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d585:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d589:	b9 03 00 00 00       	mov    ecx,0x3
c001d58e:	fc                   	cld    
c001d58f:	31 c0                	xor    eax,eax
c001d591:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d593:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d598:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d59d:	83 c4 0c             	add    esp,0xc
c001d5a0:	6a 00                	push   0x0
c001d5a2:	6a 00                	push   0x0
c001d5a4:	6a 00                	push   0x0
c001d5a6:	6a 00                	push   0x0
c001d5a8:	6a 02                	push   0x2
c001d5aa:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d5ae:	50                   	push   eax
c001d5af:	56                   	push   esi
c001d5b0:	e8 0d fb ff ff       	call   c001d0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5b5:	83 c4 20             	add    esp,0x20
c001d5b8:	85 c0                	test   eax,eax
c001d5ba:	89 c5                	mov    ebp,eax
c001d5bc:	75 44                	jne    c001d602 <SATAPI::read(unsigned long long, int, void*)+0xd2>
c001d5be:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d5c2:	b9 03 00 00 00       	mov    ecx,0x3
c001d5c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d5cd:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
c001d5d1:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d5d6:	0f c8                	bswap  eax
c001d5d8:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d5dc:	50                   	push   eax
c001d5dd:	53                   	push   ebx
c001d5de:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001d5e2:	c1 e3 0b             	shl    ebx,0xb
c001d5e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5ed:	53                   	push   ebx
c001d5ee:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d5f2:	50                   	push   eax
c001d5f3:	56                   	push   esi
c001d5f4:	e8 c9 fa ff ff       	call   c001d0c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d5f9:	83 c4 20             	add    esp,0x20
c001d5fc:	85 c0                	test   eax,eax
c001d5fe:	89 c5                	mov    ebp,eax
c001d600:	74 0c                	je     c001d60e <SATAPI::read(unsigned long long, int, void*)+0xde>
c001d602:	83 ec 0c             	sub    esp,0xc
c001d605:	56                   	push   esi
c001d606:	e8 cf fd ff ff       	call   c001d3da <SATAPI::detectMedia()>
c001d60b:	83 c4 10             	add    esp,0x10
c001d60e:	83 c4 3c             	add    esp,0x3c
c001d611:	89 e8                	mov    eax,ebp
c001d613:	5b                   	pop    ebx
c001d614:	5e                   	pop    esi
c001d615:	5f                   	pop    edi
c001d616:	5d                   	pop    ebp
c001d617:	c3                   	ret    

c001d618 <IOAPIC::close(int, int, void*)>:
c001d618:	b8 00 00 00 00       	mov    eax,0x0
c001d61d:	c3                   	ret    

c001d61e <apicGetBase()>:
c001d61e:	55                   	push   ebp
c001d61f:	89 e5                	mov    ebp,esp
c001d621:	83 ec 28             	sub    esp,0x28
c001d624:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d629:	0f b6 80 6c 01 00 00 	movzx  eax,BYTE PTR [eax+0x16c]
c001d630:	24 08                	and    al,0x8
c001d632:	84 c0                	test   al,al
c001d634:	75 07                	jne    c001d63d <apicGetBase()+0x1f>
c001d636:	b8 00 00 00 00       	mov    eax,0x0
c001d63b:	eb 23                	jmp    c001d660 <apicGetBase()+0x42>
c001d63d:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d642:	c7 44 24 04 1b 00 00 00 	mov    DWORD PTR [esp+0x4],0x1b
c001d64a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d64d:	e8 6e 9a fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001d652:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d655:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d658:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d65b:	25 00 00 ff ff       	and    eax,0xffff0000
c001d660:	c9                   	leave  
c001d661:	c3                   	ret    

c001d662 <IOAPIC::IOAPIC()>:
c001d662:	83 ec 1c             	sub    esp,0x1c
c001d665:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d669:	c7 44 24 04 48 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b48
c001d671:	89 04 24             	mov    DWORD PTR [esp],eax
c001d674:	e8 ff e9 fe ff       	call   c000c078 <Device::Device(char const*)>
c001d679:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c001d67e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d682:	89 10                	mov    DWORD PTR [eax],edx
c001d684:	90                   	nop
c001d685:	83 c4 1c             	add    esp,0x1c
c001d688:	c3                   	ret    

c001d689 <apicOpen()>:
c001d689:	55                   	push   ebp
c001d68a:	89 e5                	mov    ebp,esp
c001d68c:	53                   	push   ebx
c001d68d:	83 ec 44             	sub    esp,0x44
c001d690:	0f b6 05 a0 8b 02 c0 	movzx  eax,BYTE PTR ds:0xc0028ba0
c001d697:	34 01                	xor    al,0x1
c001d699:	84 c0                	test   al,al
c001d69b:	0f 84 a1 00 00 00    	je     c001d742 <apicOpen()+0xb9>
c001d6a1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d6a5:	0f b6 05 80 77 02 c0 	movzx  eax,BYTE PTR ds:0xc0027780
c001d6ac:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d6af:	0f 83 86 00 00 00    	jae    c001d73b <apicOpen()+0xb2>
c001d6b5:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d6bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001d6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6c2:	e8 35 a4 fe ff       	call   c0007afc <malloc>
c001d6c7:	89 c3                	mov    ebx,eax
c001d6c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6cc:	e8 91 ff ff ff       	call   c001d662 <IOAPIC::IOAPIC()>
c001d6d1:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d6d4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d6d8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d6db:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d6e2:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d6e7:	40                   	inc    eax
c001d6e8:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d6ed:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d6f2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d6f8:	89 c2                	mov    edx,eax
c001d6fa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d6fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d701:	89 14 24             	mov    DWORD PTR [esp],edx
c001d704:	e8 d7 e7 fe ff       	call   c000bee0 <Device::addChild(Device*)>
c001d709:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d70c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d70e:	83 c0 08             	add    eax,0x8
c001d711:	8b 00                	mov    eax,DWORD PTR [eax]
c001d713:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d717:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d71f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d72b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d72e:	89 14 24             	mov    DWORD PTR [esp],edx
c001d731:	ff d0                	call   eax
c001d733:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d736:	e9 6a ff ff ff       	jmp    c001d6a5 <apicOpen()+0x1c>
c001d73b:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d742:	e8 d7 fe ff ff       	call   c001d61e <apicGetBase()>
c001d747:	05 f0 00 00 00       	add    eax,0xf0
c001d74c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d74f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d752:	8b 00                	mov    eax,DWORD PTR [eax]
c001d754:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d757:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d75e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d768:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d76b:	89 10                	mov    DWORD PTR [eax],edx
c001d76d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d774:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d779:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d77c:	7d 70                	jge    c001d7ee <apicOpen()+0x165>
c001d77e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d781:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d788:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d78b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d78e:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d795:	c1 e8 08             	shr    eax,0x8
c001d798:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d79c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d79f:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d7a6:	c1 e8 18             	shr    eax,0x18
c001d7a9:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d7ac:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d7b0:	75 37                	jne    c001d7e9 <apicOpen()+0x160>
c001d7b2:	e8 67 fe ff ff       	call   c001d61e <apicGetBase()>
c001d7b7:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d7bb:	75 07                	jne    c001d7c4 <apicOpen()+0x13b>
c001d7bd:	ba 60 03 00 00       	mov    edx,0x360
c001d7c2:	eb 05                	jmp    c001d7c9 <apicOpen()+0x140>
c001d7c4:	ba 50 03 00 00       	mov    edx,0x350
c001d7c9:	01 d0                	add    eax,edx
c001d7cb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d7ce:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d7d1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7d3:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d7d6:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d7dd:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d7e1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d7e4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d7e7:	89 10                	mov    DWORD PTR [eax],edx
c001d7e9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d7ec:	eb 86                	jmp    c001d774 <apicOpen()+0xeb>
c001d7ee:	90                   	nop
c001d7ef:	83 c4 44             	add    esp,0x44
c001d7f2:	5b                   	pop    ebx
c001d7f3:	5d                   	pop    ebp
c001d7f4:	c3                   	ret    
c001d7f5:	90                   	nop

c001d7f6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d7f6:	55                   	push   ebp
c001d7f7:	89 e5                	mov    ebp,esp
c001d7f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d7fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d802:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d805:	72 1d                	jb     c001d824 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d807:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d80a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d813:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d819:	01 d0                	add    eax,edx
c001d81b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d81e:	73 04                	jae    c001d824 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d820:	b0 01                	mov    al,0x1
c001d822:	eb 02                	jmp    c001d826 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d824:	b0 00                	mov    al,0x0
c001d826:	5d                   	pop    ebp
c001d827:	c3                   	ret    

c001d828 <IOAPIC::read(int)>:
c001d828:	55                   	push   ebp
c001d829:	89 e5                	mov    ebp,esp
c001d82b:	83 ec 10             	sub    esp,0x10
c001d82e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d831:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d837:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d83a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d83d:	0f b6 d0             	movzx  edx,al
c001d840:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d843:	89 10                	mov    DWORD PTR [eax],edx
c001d845:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d848:	83 c0 10             	add    eax,0x10
c001d84b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d84d:	c9                   	leave  
c001d84e:	c3                   	ret    
c001d84f:	90                   	nop

c001d850 <IOAPIC::open(int, int, void*)>:
c001d850:	55                   	push   ebp
c001d851:	89 e5                	mov    ebp,esp
c001d853:	53                   	push   ebx
c001d854:	83 ec 0c             	sub    esp,0xc
c001d857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d85a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d85d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d866:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d86c:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d876:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d87f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d885:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001d88c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d88f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d898:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d89e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a1:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d8a8:	0f b6 d8             	movzx  ebx,al
c001d8ab:	89 d0                	mov    eax,edx
c001d8ad:	ba 00 00 00 00       	mov    edx,0x0
c001d8b2:	81 e2 ff 00 00 00    	and    edx,0xff
c001d8b8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d8bb:	83 c3 08             	add    ebx,0x8
c001d8be:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d8c2:	0f b6 44 d9 08       	movzx  eax,BYTE PTR [ecx+ebx*8+0x8]
c001d8c7:	24 00                	and    al,0x0
c001d8c9:	08 d0                	or     al,dl
c001d8cb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d8cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8d2:	0f b6 80 c5 00 00 00 	movzx  eax,BYTE PTR [eax+0xc5]
c001d8d9:	88 c1                	mov    cl,al
c001d8db:	fe c1                	inc    cl
c001d8dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001d8e0:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001d8e6:	0f b6 d0             	movzx  edx,al
c001d8e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8ec:	83 c2 08             	add    edx,0x8
c001d8ef:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d8f3:	0f b6 c9             	movzx  ecx,cl
c001d8f6:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d8fc:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d900:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d90b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d90e:	e8 15 ff ff ff       	call   c001d828 <IOAPIC::read(int)>
c001d913:	c1 f8 10             	sar    eax,0x10
c001d916:	0f b6 c0             	movzx  eax,al
c001d919:	8d 50 01             	lea    edx,[eax+0x1]
c001d91c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d91f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d925:	b8 00 00 00 00       	mov    eax,0x0
c001d92a:	83 c4 0c             	add    esp,0xc
c001d92d:	5b                   	pop    ebx
c001d92e:	5d                   	pop    ebp
c001d92f:	c3                   	ret    

c001d930 <IOAPIC::write(int, int)>:
c001d930:	55                   	push   ebp
c001d931:	89 e5                	mov    ebp,esp
c001d933:	83 ec 10             	sub    esp,0x10
c001d936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d939:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d93f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d942:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d945:	0f b6 d0             	movzx  edx,al
c001d948:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d94b:	89 10                	mov    DWORD PTR [eax],edx
c001d94d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d950:	8d 50 10             	lea    edx,[eax+0x10]
c001d953:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d956:	89 02                	mov    DWORD PTR [edx],eax
c001d958:	90                   	nop
c001d959:	c9                   	leave  
c001d95a:	c3                   	ret    
c001d95b:	90                   	nop

c001d95c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d95c:	55                   	push   ebp
c001d95d:	89 e5                	mov    ebp,esp
c001d95f:	53                   	push   ebx
c001d960:	83 ec 38             	sub    esp,0x38
c001d963:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d966:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d969:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d96c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d96f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d972:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d975:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d978:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d97b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d97e:	88 d8                	mov    al,bl
c001d980:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d983:	88 c8                	mov    al,cl
c001d985:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d988:	88 d0                	mov    al,dl
c001d98a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d98d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d991:	83 c0 08             	add    eax,0x8
c001d994:	01 c0                	add    eax,eax
c001d996:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d999:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001d99d:	83 c0 08             	add    eax,0x8
c001d9a0:	01 c0                	add    eax,eax
c001d9a2:	40                   	inc    eax
c001d9a3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d9a6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d9a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9b0:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9b3:	e8 70 fe ff ff       	call   c001d828 <IOAPIC::read(int)>
c001d9b8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d9bb:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d9c2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d9c5:	c1 e0 18             	shl    eax,0x18
c001d9c8:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d9cb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d9ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d9d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d9d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9df:	e8 4c ff ff ff       	call   c001d930 <IOAPIC::write(int, int)>
c001d9e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d9e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d9eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9f1:	e8 32 fe ff ff       	call   c001d828 <IOAPIC::read(int)>
c001d9f6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d9f9:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001da00:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001da07:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001da0e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001da12:	74 09                	je     c001da1d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc1>
c001da14:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001da1b:	eb 07                	jmp    c001da24 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc8>
c001da1d:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001da24:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001da28:	74 09                	je     c001da33 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd7>
c001da2a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001da31:	eb 07                	jmp    c001da3a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xde>
c001da33:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001da3a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001da41:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001da45:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001da48:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001da4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001da4e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001da52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da59:	89 04 24             	mov    DWORD PTR [esp],eax
c001da5c:	e8 cf fe ff ff       	call   c001d930 <IOAPIC::write(int, int)>
c001da61:	90                   	nop
c001da62:	83 c4 38             	add    esp,0x38
c001da65:	5b                   	pop    ebx
c001da66:	5d                   	pop    ebp
c001da67:	c3                   	ret    

c001da68 <APICTimer::close(int, int, void*)>:
c001da68:	b8 00 00 00 00       	mov    eax,0x0
c001da6d:	c3                   	ret    
c001da6e:	66 90                	xchg   ax,ax

c001da70 <apicTimerHandler(regs*, void*)>:
c001da70:	83 ec 1c             	sub    esp,0x1c
c001da73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001da77:	8b 08                	mov    ecx,DWORD PTR [eax]
c001da79:	b8 10 27 00 00       	mov    eax,0x2710
c001da7e:	ba 00 00 00 00       	mov    edx,0x0
c001da83:	f7 f1                	div    ecx
c001da85:	89 04 24             	mov    DWORD PTR [esp],eax
c001da88:	e8 fd fd fe ff       	call   c000d88a <timerHandler(unsigned int)>
c001da8d:	90                   	nop
c001da8e:	83 c4 1c             	add    esp,0x1c
c001da91:	c3                   	ret    
c001da92:	66 90                	xchg   ax,ax

c001da94 <APICTimer::open(int, int, void*)>:
c001da94:	83 ec 2c             	sub    esp,0x2c
c001da97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001da9d:	83 c0 24             	add    eax,0x24
c001daa0:	8b 00                	mov    eax,DWORD PTR [eax]
c001daa2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001daa6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001daaa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001daae:	89 14 24             	mov    DWORD PTR [esp],edx
c001dab1:	ff d0                	call   eax
c001dab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dab7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001dabb:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dac5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dac9:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dacf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dad3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dad9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001dadd:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001dae5:	c7 44 24 08 70 da 01 c0 	mov    DWORD PTR [esp+0x8],0xc001da70
c001daed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001daf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001daf4:	e8 95 e3 fe ff       	call   c000be8e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001daf9:	89 c2                	mov    edx,eax
c001dafb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001daff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001db05:	b8 00 00 00 00       	mov    eax,0x0
c001db0a:	83 c4 2c             	add    esp,0x2c
c001db0d:	c3                   	ret    
c001db0e:	66 90                	xchg   ax,ax

c001db10 <APICTimer::write(int)>:
c001db10:	83 ec 1c             	sub    esp,0x1c
c001db13:	c7 04 24 7c 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b7c
c001db1a:	e8 06 2d ff ff       	call   c0010825 <KePanic(char const*)>
c001db1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db23:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001db27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db2d:	90                   	nop
c001db2e:	83 c4 1c             	add    esp,0x1c
c001db31:	c3                   	ret    
c001db32:	66 90                	xchg   ax,ax

c001db34 <APICTimer::APICTimer()>:
c001db34:	83 ec 1c             	sub    esp,0x1c
c001db37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3b:	c7 44 24 04 8c 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021b8c
c001db43:	89 04 24             	mov    DWORD PTR [esp],eax
c001db46:	e8 79 fc fe ff       	call   c000d7c4 <Timer::Timer(char const*)>
c001db4b:	ba a0 1b 02 c0       	mov    edx,0xc0021ba0
c001db50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db54:	89 10                	mov    DWORD PTR [eax],edx
c001db56:	90                   	nop
c001db57:	83 c4 1c             	add    esp,0x1c
c001db5a:	c3                   	ret    
c001db5b:	90                   	nop

c001db5c <PIT::write(int)>:
c001db5c:	83 ec 10             	sub    esp,0x10
c001db5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db63:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db67:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001db6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db71:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001db76:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001db7b:	99                   	cdq    
c001db7c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001db80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db84:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001db8b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001db90:	0f b6 44 24 01       	movzx  eax,BYTE PTR [esp+0x1]
c001db95:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c001db9a:	ee                   	out    dx,al
c001db9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001db9f:	0f b6 c0             	movzx  eax,al
c001dba2:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dba9:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dbad:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c001dbb2:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c001dbb7:	ee                   	out    dx,al
c001dbb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbbc:	c1 f8 08             	sar    eax,0x8
c001dbbf:	0f b6 c0             	movzx  eax,al
c001dbc2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dbc9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dbcd:	0f b6 44 24 09       	movzx  eax,BYTE PTR [esp+0x9]
c001dbd2:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c001dbd7:	ee                   	out    dx,al
c001dbd8:	90                   	nop
c001dbd9:	83 c4 10             	add    esp,0x10
c001dbdc:	c3                   	ret    
c001dbdd:	8d 76 00             	lea    esi,[esi+0x0]

c001dbe0 <pitHandler(regs*, void*)>:
c001dbe0:	83 ec 1c             	sub    esp,0x1c
c001dbe3:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dbe9:	b8 10 27 00 00       	mov    eax,0x2710
c001dbee:	99                   	cdq    
c001dbef:	f7 f9                	idiv   ecx
c001dbf1:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbf4:	e8 91 fc fe ff       	call   c000d88a <timerHandler(unsigned int)>
c001dbf9:	90                   	nop
c001dbfa:	83 c4 1c             	add    esp,0x1c
c001dbfd:	c3                   	ret    
c001dbfe:	66 90                	xchg   ax,ax

c001dc00 <PIT::open(int, int, void*)>:
c001dc00:	83 ec 2c             	sub    esp,0x2c
c001dc03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc07:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc09:	83 c0 24             	add    eax,0x24
c001dc0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dc12:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001dc16:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dc1a:	89 14 24             	mov    DWORD PTR [esp],edx
c001dc1d:	ff d0                	call   eax
c001dc1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc23:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001dc2b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001dc33:	c7 44 24 08 e0 db 01 c0 	mov    DWORD PTR [esp+0x8],0xc001dbe0
c001dc3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dc43:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc46:	e8 43 e2 fe ff       	call   c000be8e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc4b:	89 c2                	mov    edx,eax
c001dc4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc51:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc57:	b8 00 00 00 00       	mov    eax,0x0
c001dc5c:	83 c4 2c             	add    esp,0x2c
c001dc5f:	c3                   	ret    

c001dc60 <PIT::close(int, int, void*)>:
c001dc60:	83 ec 1c             	sub    esp,0x1c
c001dc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc67:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dc71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc75:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001dc7d:	c7 44 24 08 e0 db 01 c0 	mov    DWORD PTR [esp+0x8],0xc001dbe0
c001dc85:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001dc8d:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc90:	e8 2d e2 fe ff       	call   c000bec2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001dc95:	b8 00 00 00 00       	mov    eax,0x0
c001dc9a:	83 c4 1c             	add    esp,0x1c
c001dc9d:	c3                   	ret    
c001dc9e:	66 90                	xchg   ax,ax

c001dca0 <PIT::PIT()>:
c001dca0:	83 ec 1c             	sub    esp,0x1c
c001dca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca7:	c7 44 24 04 c8 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bc8
c001dcaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001dcb2:	e8 0d fb fe ff       	call   c000d7c4 <Timer::Timer(char const*)>
c001dcb7:	ba f0 1b 02 c0       	mov    edx,0xc0021bf0
c001dcbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcc0:	89 10                	mov    DWORD PTR [eax],edx
c001dcc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcc6:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dccd:	0f b6 d0             	movzx  edx,al
c001dcd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcd4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dcdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcdf:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dce6:	0f b6 d0             	movzx  edx,al
c001dce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dced:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dcf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcf6:	0f b6 80 c4 00 00 00 	movzx  eax,BYTE PTR [eax+0xc4]
c001dcfd:	88 c1                	mov    cl,al
c001dcff:	fe c1                	inc    cl
c001dd01:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dd05:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001dd0b:	0f b6 d0             	movzx  edx,al
c001dd0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd12:	0f b6 4c 90 07       	movzx  ecx,BYTE PTR [eax+edx*4+0x7]
c001dd17:	80 e1 3f             	and    cl,0x3f
c001dd1a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd1e:	90                   	nop
c001dd1f:	83 c4 1c             	add    esp,0x1c
c001dd22:	c3                   	ret    
c001dd23:	66 90                	xchg   ax,ax
c001dd25:	66 90                	xchg   ax,ax
c001dd27:	66 90                	xchg   ax,ax
c001dd29:	66 90                	xchg   ax,ax
c001dd2b:	66 90                	xchg   ax,ax
c001dd2d:	66 90                	xchg   ax,ax
c001dd2f:	90                   	nop

c001dd30 <avxDetect>:
c001dd30:	b8 01 00 00 00       	mov    eax,0x1
c001dd35:	0f a2                	cpuid  
c001dd37:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001dd3d:	74 15                	je     c001dd54 <avxDetect.noAVX>
c001dd3f:	b8 01 00 00 00       	mov    eax,0x1
c001dd44:	0f a2                	cpuid  
c001dd46:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001dd4c:	74 06                	je     c001dd54 <avxDetect.noAVX>
c001dd4e:	b8 01 00 00 00       	mov    eax,0x1
c001dd53:	c3                   	ret    

c001dd54 <avxDetect.noAVX>:
c001dd54:	b8 00 00 00 00       	mov    eax,0x0
c001dd59:	c3                   	ret    

c001dd5a <avxSave>:
c001dd5a:	53                   	push   ebx
c001dd5b:	52                   	push   edx
c001dd5c:	31 c0                	xor    eax,eax
c001dd5e:	48                   	dec    eax
c001dd5f:	89 c2                	mov    edx,eax
c001dd61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dd65:	0f ae 23             	xsave  [ebx]
c001dd68:	5a                   	pop    edx
c001dd69:	5b                   	pop    ebx
c001dd6a:	c3                   	ret    

c001dd6b <avxLoad>:
c001dd6b:	53                   	push   ebx
c001dd6c:	52                   	push   edx
c001dd6d:	31 c0                	xor    eax,eax
c001dd6f:	48                   	dec    eax
c001dd70:	89 c2                	mov    edx,eax
c001dd72:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dd76:	0f ae 2b             	xrstor [ebx]
c001dd79:	5a                   	pop    edx
c001dd7a:	5b                   	pop    ebx
c001dd7b:	c3                   	ret    

c001dd7c <avxInit>:
c001dd7c:	e8 67 03 00 00       	call   c001e0e8 <sseInit>
c001dd81:	50                   	push   eax
c001dd82:	51                   	push   ecx
c001dd83:	0f 20 e0             	mov    eax,cr4
c001dd86:	0d 00 00 04 00       	or     eax,0x40000
c001dd8b:	0f 22 e0             	mov    cr4,eax
c001dd8e:	31 c9                	xor    ecx,ecx
c001dd90:	0f 01 d0             	xgetbv 
c001dd93:	0d 07 00 00 00       	or     eax,0x7
c001dd98:	0f 01 d1             	xsetbv 
c001dd9b:	59                   	pop    ecx
c001dd9c:	58                   	pop    eax
c001dd9d:	c3                   	ret    

c001dd9e <avxClose>:
c001dd9e:	c3                   	ret    

c001dd9f <wouldSheSayYes>:
c001dd9f:	c3                   	ret    
c001dda0:	49                   	dec    ecx
c001dda1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001dda5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001dda9:	75 20                	jne    c001ddcb <isr0+0xb>
c001ddab:	4e                   	dec    esi
c001ddac:	79 61                	jns    c001de0f <isr7+0x3>
c001ddae:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ddb3:	66 90                	xchg   ax,ax
c001ddb5:	66 90                	xchg   ax,ax
c001ddb7:	66 90                	xchg   ax,ax
c001ddb9:	66 90                	xchg   ax,ax
c001ddbb:	66 90                	xchg   ax,ax
c001ddbd:	66 90                	xchg   ax,ax
c001ddbf:	90                   	nop

c001ddc0 <isr0>:
c001ddc0:	fa                   	cli    
c001ddc1:	68 00 00 00 00       	push   0x0
c001ddc6:	68 00 00 00 00       	push   0x0
c001ddcb:	e9 56 01 00 00       	jmp    c001df26 <int_common_stub>

c001ddd0 <isr1>:
c001ddd0:	fa                   	cli    
c001ddd1:	6a 00                	push   0x0
c001ddd3:	6a 01                	push   0x1
c001ddd5:	e9 4c 01 00 00       	jmp    c001df26 <int_common_stub>

c001ddda <isr2>:
c001ddda:	fa                   	cli    
c001dddb:	6a 00                	push   0x0
c001dddd:	6a 02                	push   0x2
c001dddf:	e9 42 01 00 00       	jmp    c001df26 <int_common_stub>

c001dde4 <isr3>:
c001dde4:	fa                   	cli    
c001dde5:	6a 00                	push   0x0
c001dde7:	6a 03                	push   0x3
c001dde9:	e9 38 01 00 00       	jmp    c001df26 <int_common_stub>

c001ddee <isr4>:
c001ddee:	fa                   	cli    
c001ddef:	6a 00                	push   0x0
c001ddf1:	6a 04                	push   0x4
c001ddf3:	e9 2e 01 00 00       	jmp    c001df26 <int_common_stub>

c001ddf8 <isr5>:
c001ddf8:	fa                   	cli    
c001ddf9:	6a 00                	push   0x0
c001ddfb:	6a 05                	push   0x5
c001ddfd:	e9 24 01 00 00       	jmp    c001df26 <int_common_stub>

c001de02 <isr6>:
c001de02:	fa                   	cli    
c001de03:	6a 00                	push   0x0
c001de05:	6a 06                	push   0x6
c001de07:	e9 1a 01 00 00       	jmp    c001df26 <int_common_stub>

c001de0c <isr7>:
c001de0c:	fa                   	cli    
c001de0d:	6a 00                	push   0x0
c001de0f:	6a 07                	push   0x7
c001de11:	e9 10 01 00 00       	jmp    c001df26 <int_common_stub>

c001de16 <isr8>:
c001de16:	fa                   	cli    
c001de17:	6a 08                	push   0x8
c001de19:	e9 08 01 00 00       	jmp    c001df26 <int_common_stub>

c001de1e <isr9>:
c001de1e:	fa                   	cli    
c001de1f:	6a 00                	push   0x0
c001de21:	6a 09                	push   0x9
c001de23:	e9 fe 00 00 00       	jmp    c001df26 <int_common_stub>

c001de28 <isr10>:
c001de28:	fa                   	cli    
c001de29:	6a 0a                	push   0xa
c001de2b:	e9 f6 00 00 00       	jmp    c001df26 <int_common_stub>

c001de30 <isr11>:
c001de30:	fa                   	cli    
c001de31:	6a 0b                	push   0xb
c001de33:	e9 ee 00 00 00       	jmp    c001df26 <int_common_stub>

c001de38 <isr12>:
c001de38:	fa                   	cli    
c001de39:	6a 0c                	push   0xc
c001de3b:	e9 e6 00 00 00       	jmp    c001df26 <int_common_stub>

c001de40 <isr13>:
c001de40:	fa                   	cli    
c001de41:	6a 0d                	push   0xd
c001de43:	53                   	push   ebx
c001de44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001de48:	81 fb 16 e0 01 c0    	cmp    ebx,0xc001e016
c001de4e:	5b                   	pop    ebx
c001de4f:	0f 84 c3 01 00 00    	je     c001e018 <finishSignal2>
c001de55:	e9 cc 00 00 00       	jmp    c001df26 <int_common_stub>

c001de5a <isr14>:
c001de5a:	fa                   	cli    
c001de5b:	6a 0e                	push   0xe
c001de5d:	e9 c4 00 00 00       	jmp    c001df26 <int_common_stub>

c001de62 <isr15>:
c001de62:	fa                   	cli    
c001de63:	6a 00                	push   0x0
c001de65:	6a 0f                	push   0xf
c001de67:	e9 ba 00 00 00       	jmp    c001df26 <int_common_stub>

c001de6c <isr16>:
c001de6c:	fa                   	cli    
c001de6d:	6a 00                	push   0x0
c001de6f:	6a 10                	push   0x10
c001de71:	e9 b0 00 00 00       	jmp    c001df26 <int_common_stub>

c001de76 <isr17>:
c001de76:	fa                   	cli    
c001de77:	6a 00                	push   0x0
c001de79:	6a 11                	push   0x11
c001de7b:	e9 a6 00 00 00       	jmp    c001df26 <int_common_stub>

c001de80 <isr18>:
c001de80:	fa                   	cli    
c001de81:	6a 00                	push   0x0
c001de83:	6a 12                	push   0x12
c001de85:	e9 9c 00 00 00       	jmp    c001df26 <int_common_stub>

c001de8a <irq3>:
c001de8a:	fa                   	cli    
c001de8b:	6a 00                	push   0x0
c001de8d:	6a 23                	push   0x23
c001de8f:	e9 92 00 00 00       	jmp    c001df26 <int_common_stub>

c001de94 <irq4>:
c001de94:	fa                   	cli    
c001de95:	6a 00                	push   0x0
c001de97:	6a 24                	push   0x24
c001de99:	e9 88 00 00 00       	jmp    c001df26 <int_common_stub>

c001de9e <irq5>:
c001de9e:	fa                   	cli    
c001de9f:	6a 00                	push   0x0
c001dea1:	6a 25                	push   0x25
c001dea3:	e9 7e 00 00 00       	jmp    c001df26 <int_common_stub>

c001dea8 <irq6>:
c001dea8:	fa                   	cli    
c001dea9:	6a 00                	push   0x0
c001deab:	6a 26                	push   0x26
c001dead:	e9 74 00 00 00       	jmp    c001df26 <int_common_stub>

c001deb2 <irq7>:
c001deb2:	fa                   	cli    
c001deb3:	6a 00                	push   0x0
c001deb5:	6a 27                	push   0x27
c001deb7:	e9 6a 00 00 00       	jmp    c001df26 <int_common_stub>

c001debc <irq8>:
c001debc:	fa                   	cli    
c001debd:	6a 00                	push   0x0
c001debf:	6a 28                	push   0x28
c001dec1:	e9 60 00 00 00       	jmp    c001df26 <int_common_stub>

c001dec6 <irq9>:
c001dec6:	fa                   	cli    
c001dec7:	6a 00                	push   0x0
c001dec9:	6a 29                	push   0x29
c001decb:	e9 56 00 00 00       	jmp    c001df26 <int_common_stub>

c001ded0 <irq10>:
c001ded0:	fa                   	cli    
c001ded1:	6a 00                	push   0x0
c001ded3:	6a 2a                	push   0x2a
c001ded5:	e9 4c 00 00 00       	jmp    c001df26 <int_common_stub>

c001deda <irq11>:
c001deda:	fa                   	cli    
c001dedb:	6a 00                	push   0x0
c001dedd:	6a 2b                	push   0x2b
c001dedf:	e9 42 00 00 00       	jmp    c001df26 <int_common_stub>

c001dee4 <irq12>:
c001dee4:	fa                   	cli    
c001dee5:	6a 00                	push   0x0
c001dee7:	6a 2c                	push   0x2c
c001dee9:	e9 38 00 00 00       	jmp    c001df26 <int_common_stub>

c001deee <irq13>:
c001deee:	fa                   	cli    
c001deef:	6a 00                	push   0x0
c001def1:	6a 2d                	push   0x2d
c001def3:	e9 2e 00 00 00       	jmp    c001df26 <int_common_stub>

c001def8 <irq14>:
c001def8:	fa                   	cli    
c001def9:	6a 00                	push   0x0
c001defb:	6a 2e                	push   0x2e
c001defd:	e9 24 00 00 00       	jmp    c001df26 <int_common_stub>

c001df02 <irq15>:
c001df02:	fa                   	cli    
c001df03:	6a 00                	push   0x0
c001df05:	6a 2f                	push   0x2f
c001df07:	e9 1a 00 00 00       	jmp    c001df26 <int_common_stub>

c001df0c <irq1>:
c001df0c:	fa                   	cli    
c001df0d:	6a 00                	push   0x0
c001df0f:	6a 21                	push   0x21
c001df11:	eb 13                	jmp    c001df26 <int_common_stub>

c001df13 <irq2>:
c001df13:	fa                   	cli    
c001df14:	6a 00                	push   0x0
c001df16:	6a 22                	push   0x22
c001df18:	eb 0c                	jmp    c001df26 <int_common_stub>

c001df1a <isr96>:
c001df1a:	6a 00                	push   0x0
c001df1c:	6a 60                	push   0x60
c001df1e:	fb                   	sti    
c001df1f:	eb 37                	jmp    c001df58 <syscall_common_stub>

c001df21 <irq0>:
c001df21:	fa                   	cli    
c001df22:	6a 00                	push   0x0
c001df24:	6a 20                	push   0x20

c001df26 <int_common_stub>:
c001df26:	60                   	pusha  
c001df27:	1e                   	push   ds
c001df28:	06                   	push   es
c001df29:	0f a0                	push   fs
c001df2b:	0f a8                	push   gs
c001df2d:	66 b8 10 00          	mov    ax,0x10
c001df31:	66 8e d8             	mov    ds,ax
c001df34:	66 8e c0             	mov    es,ax
c001df37:	66 8e e0             	mov    fs,ax
c001df3a:	66 8e e8             	mov    gs,ax
c001df3d:	54                   	push   esp
c001df3e:	fc                   	cld    
c001df3f:	e8 3c e4 fe ff       	call   c000c380 <int_handler>
c001df44:	81 c4 04 00 00 00    	add    esp,0x4
c001df4a:	0f a9                	pop    gs
c001df4c:	0f a1                	pop    fs
c001df4e:	07                   	pop    es
c001df4f:	1f                   	pop    ds
c001df50:	61                   	popa   
c001df51:	81 c4 08 00 00 00    	add    esp,0x8
c001df57:	cf                   	iret   

c001df58 <syscall_common_stub>:
c001df58:	60                   	pusha  
c001df59:	1e                   	push   ds
c001df5a:	06                   	push   es
c001df5b:	0f a0                	push   fs
c001df5d:	0f a8                	push   gs
c001df5f:	66 b8 10 00          	mov    ax,0x10
c001df63:	66 8e d8             	mov    ds,ax
c001df66:	66 8e c0             	mov    es,ax
c001df69:	66 8e e0             	mov    fs,ax
c001df6c:	66 8e e8             	mov    gs,ax
c001df6f:	54                   	push   esp
c001df70:	fc                   	cld    
c001df71:	e8 0a e4 fe ff       	call   c000c380 <int_handler>
c001df76:	81 c4 04 00 00 00    	add    esp,0x4
c001df7c:	0f a9                	pop    gs
c001df7e:	0f a1                	pop    fs
c001df80:	07                   	pop    es
c001df81:	1f                   	pop    ds
c001df82:	e8 7e 2e ff ff       	call   c0010e05 <KiCheckSignalZ>
c001df87:	3d 00 00 00 00       	cmp    eax,0x0
c001df8c:	0f 84 c0 00 00 00    	je     c001e052 <skipSignals>
c001df92:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001df97:	61                   	popa   
c001df98:	53                   	push   ebx
c001df99:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001df9f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001dfa2:	5b                   	pop    ebx
c001dfa3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001dfa8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001dfab:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001dfae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dfb1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001dfb4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001dfb7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001dfba:	81 c4 08 00 00 00    	add    esp,0x8
c001dfc0:	5e                   	pop    esi
c001dfc1:	5b                   	pop    ebx
c001dfc2:	59                   	pop    ecx
c001dfc3:	5a                   	pop    edx
c001dfc4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001dfc7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001dfca:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001dfcd:	52                   	push   edx
c001dfce:	51                   	push   ecx
c001dfcf:	53                   	push   ebx
c001dfd0:	56                   	push   esi
c001dfd1:	81 ec 08 00 00 00    	sub    esp,0x8
c001dfd7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001dfda:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001dfdd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001dfe0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dfe3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dfe6:	60                   	pusha  
c001dfe7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001dfed:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001dff0:	89 e3                	mov    ebx,esp
c001dff2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001dff5:	52                   	push   edx
c001dff6:	68 16 e0 01 c0       	push   0xc001e016
c001dffb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001dffe:	89 dc                	mov    esp,ebx
c001e000:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e003:	68 23 00 00 00       	push   0x23
c001e008:	51                   	push   ecx
c001e009:	68 02 02 00 00       	push   0x202
c001e00e:	68 1b 00 00 00       	push   0x1b
c001e013:	ff 36                	push   DWORD PTR [esi]
c001e015:	cf                   	iret   

c001e016 <finishSignal>:
c001e016:	cd 0f                	int    0xf

c001e018 <finishSignal2>:
c001e018:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e01e:	e8 5f 2e ff ff       	call   c0010e82 <KiFinishSignalZ>
c001e023:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e029:	68 23 00 00 00       	push   0x23
c001e02e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e031:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e034:	68 1b 00 00 00       	push   0x1b
c001e039:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e03c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e03f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e042:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e045:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e048:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e04b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e04e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e051:	cf                   	iret   

c001e052 <skipSignals>:
c001e052:	61                   	popa   
c001e053:	81 c4 08 00 00 00    	add    esp,0x8
c001e059:	cf                   	iret   
c001e05a:	90                   	nop
c001e05b:	90                   	nop

c001e05c <irq16>:
c001e05c:	fa                   	cli    
c001e05d:	6a 00                	push   0x0
c001e05f:	6a 30                	push   0x30
c001e061:	e9 c0 fe ff ff       	jmp    c001df26 <int_common_stub>

c001e066 <irq17>:
c001e066:	fa                   	cli    
c001e067:	6a 00                	push   0x0
c001e069:	6a 31                	push   0x31
c001e06b:	e9 b6 fe ff ff       	jmp    c001df26 <int_common_stub>

c001e070 <irq18>:
c001e070:	fa                   	cli    
c001e071:	6a 00                	push   0x0
c001e073:	6a 32                	push   0x32
c001e075:	e9 ac fe ff ff       	jmp    c001df26 <int_common_stub>

c001e07a <irq19>:
c001e07a:	fa                   	cli    
c001e07b:	6a 00                	push   0x0
c001e07d:	6a 33                	push   0x33
c001e07f:	e9 a2 fe ff ff       	jmp    c001df26 <int_common_stub>

c001e084 <irq20>:
c001e084:	fa                   	cli    
c001e085:	6a 00                	push   0x0
c001e087:	6a 34                	push   0x34
c001e089:	e9 98 fe ff ff       	jmp    c001df26 <int_common_stub>

c001e08e <irq21>:
c001e08e:	fa                   	cli    
c001e08f:	6a 00                	push   0x0
c001e091:	6a 35                	push   0x35
c001e093:	e9 8e fe ff ff       	jmp    c001df26 <int_common_stub>

c001e098 <irq22>:
c001e098:	fa                   	cli    
c001e099:	6a 00                	push   0x0
c001e09b:	6a 36                	push   0x36
c001e09d:	e9 84 fe ff ff       	jmp    c001df26 <int_common_stub>

c001e0a2 <irq23>:
c001e0a2:	fa                   	cli    
c001e0a3:	6a 00                	push   0x0
c001e0a5:	6a 37                	push   0x37
c001e0a7:	e9 7a fe ff ff       	jmp    c001df26 <int_common_stub>
c001e0ac:	66 90                	xchg   ax,ax
c001e0ae:	66 90                	xchg   ax,ax

c001e0b0 <i386GetRDRAND>:
c001e0b0:	b9 64 00 00 00       	mov    ecx,0x64

c001e0b5 <retry>:
c001e0b5:	0f c7 f0             	rdrand eax
c001e0b8:	72 05                	jb     c001e0bf <retry.done>
c001e0ba:	e2 f9                	loop   c001e0b5 <retry>

c001e0bc <retry.fail>:
c001e0bc:	31 c0                	xor    eax,eax
c001e0be:	c3                   	ret    

c001e0bf <retry.done>:
c001e0bf:	c3                   	ret    

c001e0c0 <absolutelyNoChanceInHell>:
c001e0c0:	b8 01 00 00 00       	mov    eax,0x1
c001e0c5:	0f a2                	cpuid  
c001e0c7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e0cd:	74 06                	je     c001e0d5 <sseDetect.noSSE>
c001e0cf:	b8 01 00 00 00       	mov    eax,0x1
c001e0d4:	c3                   	ret    

c001e0d5 <sseDetect.noSSE>:
c001e0d5:	31 c0                	xor    eax,eax
c001e0d7:	c3                   	ret    

c001e0d8 <sseSave>:
c001e0d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0dc:	0f ae 00             	fxsave [eax]
c001e0df:	c3                   	ret    

c001e0e0 <sseLoad>:
c001e0e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0e4:	0f ae 08             	fxrstor [eax]
c001e0e7:	c3                   	ret    

c001e0e8 <sseInit>:
c001e0e8:	e8 42 00 00 00       	call   c001e12f <x87Init>
c001e0ed:	0f 20 e0             	mov    eax,cr4
c001e0f0:	66 0d 00 06          	or     ax,0x600
c001e0f4:	0f 22 e0             	mov    cr4,eax
c001e0f7:	c3                   	ret    

c001e0f8 <sseClose>:
c001e0f8:	c3                   	ret    
c001e0f9:	66 90                	xchg   ax,ax
c001e0fb:	66 90                	xchg   ax,ax
c001e0fd:	66 90                	xchg   ax,ax
c001e0ff:	90                   	nop

c001e100 <value_37F>:
c001e100:	7f 03                	jg     c001e105 <value_37A+0x1>

c001e102 <value_37E>:
c001e102:	7e 03                	jle    c001e107 <x87Detect+0x1>

c001e104 <value_37A>:
c001e104:	7a 03                	jp     c001e109 <x87Detect+0x3>

c001e106 <x87Detect>:
c001e106:	b8 01 00 00 00       	mov    eax,0x1
c001e10b:	0f a2                	cpuid  
c001e10d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e113:	74 06                	je     c001e11b <x87Detect.nox87>
c001e115:	b8 01 00 00 00       	mov    eax,0x1
c001e11a:	c3                   	ret    

c001e11b <x87Detect.nox87>:
c001e11b:	b8 00 00 00 00       	mov    eax,0x0
c001e120:	c3                   	ret    

c001e121 <x87Save>:
c001e121:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e125:	dd 30                	fnsave [eax]
c001e127:	c3                   	ret    

c001e128 <x87Load>:
c001e128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e12c:	dd 20                	frstor [eax]
c001e12e:	c3                   	ret    

c001e12f <x87Init>:
c001e12f:	0f 20 c0             	mov    eax,cr0
c001e132:	66 25 fb ff          	and    ax,0xfffb
c001e136:	66 0d 22 00          	or     ax,0x22
c001e13a:	0f 22 c0             	mov    cr0,eax
c001e13d:	db e3                	fninit 
c001e13f:	0f 06                	clts   
c001e141:	d9 2d 04 e1 01 c0    	fldcw  WORD PTR ds:0xc001e104
c001e147:	c3                   	ret    

c001e148 <x87Close>:
c001e148:	c3                   	ret    
c001e149:	66 90                	xchg   ax,ax
c001e14b:	90                   	nop

c001e14c <__do_global_ctors_aux>:
c001e14c:	a1 60 f0 01 c0       	mov    eax,ds:0xc001f060
c001e151:	83 f8 ff             	cmp    eax,0xffffffff
c001e154:	74 1a                	je     c001e170 <__do_global_ctors_aux+0x24>
c001e156:	55                   	push   ebp
c001e157:	89 e5                	mov    ebp,esp
c001e159:	53                   	push   ebx
c001e15a:	52                   	push   edx
c001e15b:	bb 60 f0 01 c0       	mov    ebx,0xc001f060
c001e160:	ff d0                	call   eax
c001e162:	83 eb 04             	sub    ebx,0x4
c001e165:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e167:	83 f8 ff             	cmp    eax,0xffffffff
c001e16a:	75 f4                	jne    c001e160 <__do_global_ctors_aux+0x14>
c001e16c:	58                   	pop    eax
c001e16d:	5b                   	pop    ebx
c001e16e:	5d                   	pop    ebp
c001e16f:	c3                   	ret    
c001e170:	c3                   	ret    
c001e171:	66 90                	xchg   ax,ax
c001e173:	90                   	nop

c001e174 <__divdi3>:
c001e174:	55                   	push   ebp
c001e175:	57                   	push   edi
c001e176:	56                   	push   esi
c001e177:	53                   	push   ebx
c001e178:	83 ec 1c             	sub    esp,0x1c
c001e17b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e17f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e183:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e186:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e18a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e18e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e192:	85 db                	test   ebx,ebx
c001e194:	0f 88 8e 00 00 00    	js     c001e228 <__divdi3+0xb4>
c001e19a:	89 dd                	mov    ebp,ebx
c001e19c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e1a4:	89 d3                	mov    ebx,edx
c001e1a6:	85 d2                	test   edx,edx
c001e1a8:	79 0d                	jns    c001e1b7 <__divdi3+0x43>
c001e1aa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e1ae:	f7 d8                	neg    eax
c001e1b0:	83 d2 00             	adc    edx,0x0
c001e1b3:	f7 da                	neg    edx
c001e1b5:	89 d3                	mov    ebx,edx
c001e1b7:	89 c7                	mov    edi,eax
c001e1b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e1bc:	85 db                	test   ebx,ebx
c001e1be:	75 48                	jne    c001e208 <__divdi3+0x94>
c001e1c0:	39 ef                	cmp    edi,ebp
c001e1c2:	76 24                	jbe    c001e1e8 <__divdi3+0x74>
c001e1c4:	89 ea                	mov    edx,ebp
c001e1c6:	f7 f7                	div    edi
c001e1c8:	89 c1                	mov    ecx,eax
c001e1ca:	31 f6                	xor    esi,esi
c001e1cc:	89 c8                	mov    eax,ecx
c001e1ce:	89 f2                	mov    edx,esi
c001e1d0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e1d4:	85 c9                	test   ecx,ecx
c001e1d6:	74 07                	je     c001e1df <__divdi3+0x6b>
c001e1d8:	f7 d8                	neg    eax
c001e1da:	83 d2 00             	adc    edx,0x0
c001e1dd:	f7 da                	neg    edx
c001e1df:	83 c4 1c             	add    esp,0x1c
c001e1e2:	5b                   	pop    ebx
c001e1e3:	5e                   	pop    esi
c001e1e4:	5f                   	pop    edi
c001e1e5:	5d                   	pop    ebp
c001e1e6:	c3                   	ret    
c001e1e7:	90                   	nop
c001e1e8:	85 ff                	test   edi,edi
c001e1ea:	75 0b                	jne    c001e1f7 <__divdi3+0x83>
c001e1ec:	b8 01 00 00 00       	mov    eax,0x1
c001e1f1:	31 d2                	xor    edx,edx
c001e1f3:	f7 f3                	div    ebx
c001e1f5:	89 c7                	mov    edi,eax
c001e1f7:	31 d2                	xor    edx,edx
c001e1f9:	89 e8                	mov    eax,ebp
c001e1fb:	f7 f7                	div    edi
c001e1fd:	89 c6                	mov    esi,eax
c001e1ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e202:	f7 f7                	div    edi
c001e204:	89 c1                	mov    ecx,eax
c001e206:	eb c4                	jmp    c001e1cc <__divdi3+0x58>
c001e208:	39 eb                	cmp    ebx,ebp
c001e20a:	77 3c                	ja     c001e248 <__divdi3+0xd4>
c001e20c:	0f bd f3             	bsr    esi,ebx
c001e20f:	83 f6 1f             	xor    esi,0x1f
c001e212:	75 40                	jne    c001e254 <__divdi3+0xe0>
c001e214:	39 eb                	cmp    ebx,ebp
c001e216:	72 09                	jb     c001e221 <__divdi3+0xad>
c001e218:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e21b:	0f 87 97 00 00 00    	ja     c001e2b8 <__divdi3+0x144>
c001e221:	b9 01 00 00 00       	mov    ecx,0x1
c001e226:	eb a4                	jmp    c001e1cc <__divdi3+0x58>
c001e228:	f7 d9                	neg    ecx
c001e22a:	83 d3 00             	adc    ebx,0x0
c001e22d:	f7 db                	neg    ebx
c001e22f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e232:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e236:	89 dd                	mov    ebp,ebx
c001e238:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e240:	e9 5f ff ff ff       	jmp    c001e1a4 <__divdi3+0x30>
c001e245:	8d 76 00             	lea    esi,[esi+0x0]
c001e248:	31 f6                	xor    esi,esi
c001e24a:	31 c9                	xor    ecx,ecx
c001e24c:	e9 7b ff ff ff       	jmp    c001e1cc <__divdi3+0x58>
c001e251:	8d 76 00             	lea    esi,[esi+0x0]
c001e254:	b8 20 00 00 00       	mov    eax,0x20
c001e259:	29 f0                	sub    eax,esi
c001e25b:	89 f1                	mov    ecx,esi
c001e25d:	d3 e3                	shl    ebx,cl
c001e25f:	89 fa                	mov    edx,edi
c001e261:	88 c1                	mov    cl,al
c001e263:	d3 ea                	shr    edx,cl
c001e265:	09 da                	or     edx,ebx
c001e267:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e26b:	89 f1                	mov    ecx,esi
c001e26d:	d3 e7                	shl    edi,cl
c001e26f:	89 eb                	mov    ebx,ebp
c001e271:	88 c1                	mov    cl,al
c001e273:	d3 eb                	shr    ebx,cl
c001e275:	89 f1                	mov    ecx,esi
c001e277:	d3 e5                	shl    ebp,cl
c001e279:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e27c:	88 c1                	mov    cl,al
c001e27e:	d3 ea                	shr    edx,cl
c001e280:	09 d5                	or     ebp,edx
c001e282:	89 e8                	mov    eax,ebp
c001e284:	89 da                	mov    edx,ebx
c001e286:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e28a:	89 d3                	mov    ebx,edx
c001e28c:	89 c5                	mov    ebp,eax
c001e28e:	f7 e7                	mul    edi
c001e290:	39 d3                	cmp    ebx,edx
c001e292:	72 18                	jb     c001e2ac <__divdi3+0x138>
c001e294:	74 0a                	je     c001e2a0 <__divdi3+0x12c>
c001e296:	89 e9                	mov    ecx,ebp
c001e298:	31 f6                	xor    esi,esi
c001e29a:	e9 2d ff ff ff       	jmp    c001e1cc <__divdi3+0x58>
c001e29f:	90                   	nop
c001e2a0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e2a3:	89 f1                	mov    ecx,esi
c001e2a5:	d3 e7                	shl    edi,cl
c001e2a7:	39 c7                	cmp    edi,eax
c001e2a9:	73 eb                	jae    c001e296 <__divdi3+0x122>
c001e2ab:	90                   	nop
c001e2ac:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e2af:	31 f6                	xor    esi,esi
c001e2b1:	e9 16 ff ff ff       	jmp    c001e1cc <__divdi3+0x58>
c001e2b6:	66 90                	xchg   ax,ax
c001e2b8:	31 c9                	xor    ecx,ecx
c001e2ba:	e9 0d ff ff ff       	jmp    c001e1cc <__divdi3+0x58>
c001e2bf:	90                   	nop

c001e2c0 <__moddi3>:
c001e2c0:	55                   	push   ebp
c001e2c1:	57                   	push   edi
c001e2c2:	56                   	push   esi
c001e2c3:	53                   	push   ebx
c001e2c4:	83 ec 2c             	sub    esp,0x2c
c001e2c7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e2cb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e2cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e2d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e2d7:	85 db                	test   ebx,ebx
c001e2d9:	0f 88 85 00 00 00    	js     c001e364 <__moddi3+0xa4>
c001e2df:	89 de                	mov    esi,ebx
c001e2e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e2e9:	89 d7                	mov    edi,edx
c001e2eb:	85 d2                	test   edx,edx
c001e2ed:	79 09                	jns    c001e2f8 <__moddi3+0x38>
c001e2ef:	f7 d8                	neg    eax
c001e2f1:	83 d2 00             	adc    edx,0x0
c001e2f4:	f7 da                	neg    edx
c001e2f6:	89 d7                	mov    edi,edx
c001e2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e2fc:	89 cd                	mov    ebp,ecx
c001e2fe:	85 ff                	test   edi,edi
c001e300:	75 52                	jne    c001e354 <__moddi3+0x94>
c001e302:	89 c3                	mov    ebx,eax
c001e304:	39 f0                	cmp    eax,esi
c001e306:	76 24                	jbe    c001e32c <__moddi3+0x6c>
c001e308:	89 c8                	mov    eax,ecx
c001e30a:	89 f2                	mov    edx,esi
c001e30c:	f7 f3                	div    ebx
c001e30e:	89 d6                	mov    esi,edx
c001e310:	89 f0                	mov    eax,esi
c001e312:	31 d2                	xor    edx,edx
c001e314:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e318:	85 c9                	test   ecx,ecx
c001e31a:	74 07                	je     c001e323 <__moddi3+0x63>
c001e31c:	f7 d8                	neg    eax
c001e31e:	83 d2 00             	adc    edx,0x0
c001e321:	f7 da                	neg    edx
c001e323:	83 c4 2c             	add    esp,0x2c
c001e326:	5b                   	pop    ebx
c001e327:	5e                   	pop    esi
c001e328:	5f                   	pop    edi
c001e329:	5d                   	pop    ebp
c001e32a:	c3                   	ret    
c001e32b:	90                   	nop
c001e32c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e330:	85 db                	test   ebx,ebx
c001e332:	75 0d                	jne    c001e341 <__moddi3+0x81>
c001e334:	b8 01 00 00 00       	mov    eax,0x1
c001e339:	31 d2                	xor    edx,edx
c001e33b:	f7 f7                	div    edi
c001e33d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e341:	89 f0                	mov    eax,esi
c001e343:	31 d2                	xor    edx,edx
c001e345:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e349:	f7 f7                	div    edi
c001e34b:	89 e8                	mov    eax,ebp
c001e34d:	f7 f7                	div    edi
c001e34f:	89 d6                	mov    esi,edx
c001e351:	eb bd                	jmp    c001e310 <__moddi3+0x50>
c001e353:	90                   	nop
c001e354:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e358:	39 f7                	cmp    edi,esi
c001e35a:	76 20                	jbe    c001e37c <__moddi3+0xbc>
c001e35c:	89 c8                	mov    eax,ecx
c001e35e:	89 f2                	mov    edx,esi
c001e360:	eb b2                	jmp    c001e314 <__moddi3+0x54>
c001e362:	66 90                	xchg   ax,ax
c001e364:	f7 d9                	neg    ecx
c001e366:	83 d3 00             	adc    ebx,0x0
c001e369:	f7 db                	neg    ebx
c001e36b:	89 de                	mov    esi,ebx
c001e36d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e375:	e9 6f ff ff ff       	jmp    c001e2e9 <__moddi3+0x29>
c001e37a:	66 90                	xchg   ax,ax
c001e37c:	0f bd c7             	bsr    eax,edi
c001e37f:	83 f0 1f             	xor    eax,0x1f
c001e382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e386:	75 24                	jne    c001e3ac <__moddi3+0xec>
c001e388:	39 f7                	cmp    edi,esi
c001e38a:	72 06                	jb     c001e392 <__moddi3+0xd2>
c001e38c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e390:	77 0c                	ja     c001e39e <__moddi3+0xde>
c001e392:	89 e9                	mov    ecx,ebp
c001e394:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e398:	19 fe                	sbb    esi,edi
c001e39a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e39e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3a2:	89 f2                	mov    edx,esi
c001e3a4:	e9 6b ff ff ff       	jmp    c001e314 <__moddi3+0x54>
c001e3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001e3ac:	b8 20 00 00 00       	mov    eax,0x20
c001e3b1:	89 c2                	mov    edx,eax
c001e3b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e3b7:	29 da                	sub    edx,ebx
c001e3b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e3bd:	88 d9                	mov    cl,bl
c001e3bf:	d3 e7                	shl    edi,cl
c001e3c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3c5:	88 d1                	mov    cl,dl
c001e3c7:	d3 e8                	shr    eax,cl
c001e3c9:	09 c7                	or     edi,eax
c001e3cb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e3cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e3d3:	89 d8                	mov    eax,ebx
c001e3d5:	88 d9                	mov    cl,bl
c001e3d7:	d3 e7                	shl    edi,cl
c001e3d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e3dd:	89 f3                	mov    ebx,esi
c001e3df:	88 d1                	mov    cl,dl
c001e3e1:	d3 eb                	shr    ebx,cl
c001e3e3:	89 c7                	mov    edi,eax
c001e3e5:	88 c1                	mov    cl,al
c001e3e7:	d3 e6                	shl    esi,cl
c001e3e9:	89 e8                	mov    eax,ebp
c001e3eb:	88 d1                	mov    cl,dl
c001e3ed:	d3 e8                	shr    eax,cl
c001e3ef:	09 f0                	or     eax,esi
c001e3f1:	89 f9                	mov    ecx,edi
c001e3f3:	d3 e5                	shl    ebp,cl
c001e3f5:	89 da                	mov    edx,ebx
c001e3f7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e3fb:	89 d3                	mov    ebx,edx
c001e3fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e401:	89 c6                	mov    esi,eax
c001e403:	89 d1                	mov    ecx,edx
c001e405:	39 d3                	cmp    ebx,edx
c001e407:	72 27                	jb     c001e430 <__moddi3+0x170>
c001e409:	74 21                	je     c001e42c <__moddi3+0x16c>
c001e40b:	29 f5                	sub    ebp,esi
c001e40d:	19 cb                	sbb    ebx,ecx
c001e40f:	89 de                	mov    esi,ebx
c001e411:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e415:	d3 e6                	shl    esi,cl
c001e417:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e41b:	89 f9                	mov    ecx,edi
c001e41d:	d3 ed                	shr    ebp,cl
c001e41f:	09 ee                	or     esi,ebp
c001e421:	89 f0                	mov    eax,esi
c001e423:	d3 eb                	shr    ebx,cl
c001e425:	89 da                	mov    edx,ebx
c001e427:	e9 e8 fe ff ff       	jmp    c001e314 <__moddi3+0x54>
c001e42c:	39 c5                	cmp    ebp,eax
c001e42e:	73 db                	jae    c001e40b <__moddi3+0x14b>
c001e430:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e434:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e438:	89 d1                	mov    ecx,edx
c001e43a:	89 c6                	mov    esi,eax
c001e43c:	eb cd                	jmp    c001e40b <__moddi3+0x14b>
c001e43e:	66 90                	xchg   ax,ax

c001e440 <__udivdi3>:
c001e440:	55                   	push   ebp
c001e441:	57                   	push   edi
c001e442:	56                   	push   esi
c001e443:	53                   	push   ebx
c001e444:	83 ec 1c             	sub    esp,0x1c
c001e447:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e44b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e44f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e453:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e457:	85 d2                	test   edx,edx
c001e459:	75 41                	jne    c001e49c <__udivdi3+0x5c>
c001e45b:	39 f7                	cmp    edi,esi
c001e45d:	76 15                	jbe    c001e474 <__udivdi3+0x34>
c001e45f:	89 e8                	mov    eax,ebp
c001e461:	89 f2                	mov    edx,esi
c001e463:	f7 f7                	div    edi
c001e465:	31 db                	xor    ebx,ebx
c001e467:	89 da                	mov    edx,ebx
c001e469:	83 c4 1c             	add    esp,0x1c
c001e46c:	5b                   	pop    ebx
c001e46d:	5e                   	pop    esi
c001e46e:	5f                   	pop    edi
c001e46f:	5d                   	pop    ebp
c001e470:	c3                   	ret    
c001e471:	8d 76 00             	lea    esi,[esi+0x0]
c001e474:	89 f9                	mov    ecx,edi
c001e476:	85 ff                	test   edi,edi
c001e478:	75 0b                	jne    c001e485 <__udivdi3+0x45>
c001e47a:	b8 01 00 00 00       	mov    eax,0x1
c001e47f:	31 d2                	xor    edx,edx
c001e481:	f7 f7                	div    edi
c001e483:	89 c1                	mov    ecx,eax
c001e485:	31 d2                	xor    edx,edx
c001e487:	89 f0                	mov    eax,esi
c001e489:	f7 f1                	div    ecx
c001e48b:	89 c3                	mov    ebx,eax
c001e48d:	89 e8                	mov    eax,ebp
c001e48f:	f7 f1                	div    ecx
c001e491:	89 da                	mov    edx,ebx
c001e493:	83 c4 1c             	add    esp,0x1c
c001e496:	5b                   	pop    ebx
c001e497:	5e                   	pop    esi
c001e498:	5f                   	pop    edi
c001e499:	5d                   	pop    ebp
c001e49a:	c3                   	ret    
c001e49b:	90                   	nop
c001e49c:	39 f2                	cmp    edx,esi
c001e49e:	77 1c                	ja     c001e4bc <__udivdi3+0x7c>
c001e4a0:	0f bd da             	bsr    ebx,edx
c001e4a3:	83 f3 1f             	xor    ebx,0x1f
c001e4a6:	75 24                	jne    c001e4cc <__udivdi3+0x8c>
c001e4a8:	39 f2                	cmp    edx,esi
c001e4aa:	72 08                	jb     c001e4b4 <__udivdi3+0x74>
c001e4ac:	39 ef                	cmp    edi,ebp
c001e4ae:	0f 87 84 00 00 00    	ja     c001e538 <__udivdi3+0xf8>
c001e4b4:	b8 01 00 00 00       	mov    eax,0x1
c001e4b9:	eb ac                	jmp    c001e467 <__udivdi3+0x27>
c001e4bb:	90                   	nop
c001e4bc:	31 db                	xor    ebx,ebx
c001e4be:	31 c0                	xor    eax,eax
c001e4c0:	89 da                	mov    edx,ebx
c001e4c2:	83 c4 1c             	add    esp,0x1c
c001e4c5:	5b                   	pop    ebx
c001e4c6:	5e                   	pop    esi
c001e4c7:	5f                   	pop    edi
c001e4c8:	5d                   	pop    ebp
c001e4c9:	c3                   	ret    
c001e4ca:	66 90                	xchg   ax,ax
c001e4cc:	b8 20 00 00 00       	mov    eax,0x20
c001e4d1:	29 d8                	sub    eax,ebx
c001e4d3:	88 d9                	mov    cl,bl
c001e4d5:	d3 e2                	shl    edx,cl
c001e4d7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e4db:	89 fa                	mov    edx,edi
c001e4dd:	88 c1                	mov    cl,al
c001e4df:	d3 ea                	shr    edx,cl
c001e4e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4e5:	09 d1                	or     ecx,edx
c001e4e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e4eb:	88 d9                	mov    cl,bl
c001e4ed:	d3 e7                	shl    edi,cl
c001e4ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e4f3:	89 f7                	mov    edi,esi
c001e4f5:	88 c1                	mov    cl,al
c001e4f7:	d3 ef                	shr    edi,cl
c001e4f9:	88 d9                	mov    cl,bl
c001e4fb:	d3 e6                	shl    esi,cl
c001e4fd:	89 ea                	mov    edx,ebp
c001e4ff:	88 c1                	mov    cl,al
c001e501:	d3 ea                	shr    edx,cl
c001e503:	09 d6                	or     esi,edx
c001e505:	89 f0                	mov    eax,esi
c001e507:	89 fa                	mov    edx,edi
c001e509:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e50d:	89 d7                	mov    edi,edx
c001e50f:	89 c6                	mov    esi,eax
c001e511:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e515:	39 d7                	cmp    edi,edx
c001e517:	72 13                	jb     c001e52c <__udivdi3+0xec>
c001e519:	74 09                	je     c001e524 <__udivdi3+0xe4>
c001e51b:	89 f0                	mov    eax,esi
c001e51d:	31 db                	xor    ebx,ebx
c001e51f:	e9 43 ff ff ff       	jmp    c001e467 <__udivdi3+0x27>
c001e524:	88 d9                	mov    cl,bl
c001e526:	d3 e5                	shl    ebp,cl
c001e528:	39 c5                	cmp    ebp,eax
c001e52a:	73 ef                	jae    c001e51b <__udivdi3+0xdb>
c001e52c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e52f:	31 db                	xor    ebx,ebx
c001e531:	e9 31 ff ff ff       	jmp    c001e467 <__udivdi3+0x27>
c001e536:	66 90                	xchg   ax,ax
c001e538:	31 c0                	xor    eax,eax
c001e53a:	e9 28 ff ff ff       	jmp    c001e467 <__udivdi3+0x27>
c001e53f:	90                   	nop

c001e540 <__umoddi3>:
c001e540:	55                   	push   ebp
c001e541:	57                   	push   edi
c001e542:	56                   	push   esi
c001e543:	53                   	push   ebx
c001e544:	83 ec 1c             	sub    esp,0x1c
c001e547:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e54b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e54f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e553:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e557:	89 da                	mov    edx,ebx
c001e559:	85 c0                	test   eax,eax
c001e55b:	75 37                	jne    c001e594 <__umoddi3+0x54>
c001e55d:	39 df                	cmp    edi,ebx
c001e55f:	76 13                	jbe    c001e574 <__umoddi3+0x34>
c001e561:	89 f0                	mov    eax,esi
c001e563:	f7 f7                	div    edi
c001e565:	89 d0                	mov    eax,edx
c001e567:	31 d2                	xor    edx,edx
c001e569:	83 c4 1c             	add    esp,0x1c
c001e56c:	5b                   	pop    ebx
c001e56d:	5e                   	pop    esi
c001e56e:	5f                   	pop    edi
c001e56f:	5d                   	pop    ebp
c001e570:	c3                   	ret    
c001e571:	8d 76 00             	lea    esi,[esi+0x0]
c001e574:	89 fd                	mov    ebp,edi
c001e576:	85 ff                	test   edi,edi
c001e578:	75 0b                	jne    c001e585 <__umoddi3+0x45>
c001e57a:	b8 01 00 00 00       	mov    eax,0x1
c001e57f:	31 d2                	xor    edx,edx
c001e581:	f7 f7                	div    edi
c001e583:	89 c5                	mov    ebp,eax
c001e585:	89 d8                	mov    eax,ebx
c001e587:	31 d2                	xor    edx,edx
c001e589:	f7 f5                	div    ebp
c001e58b:	89 f0                	mov    eax,esi
c001e58d:	f7 f5                	div    ebp
c001e58f:	89 d0                	mov    eax,edx
c001e591:	eb d4                	jmp    c001e567 <__umoddi3+0x27>
c001e593:	90                   	nop
c001e594:	89 f1                	mov    ecx,esi
c001e596:	39 d8                	cmp    eax,ebx
c001e598:	76 0a                	jbe    c001e5a4 <__umoddi3+0x64>
c001e59a:	89 f0                	mov    eax,esi
c001e59c:	83 c4 1c             	add    esp,0x1c
c001e59f:	5b                   	pop    ebx
c001e5a0:	5e                   	pop    esi
c001e5a1:	5f                   	pop    edi
c001e5a2:	5d                   	pop    ebp
c001e5a3:	c3                   	ret    
c001e5a4:	0f bd e8             	bsr    ebp,eax
c001e5a7:	83 f5 1f             	xor    ebp,0x1f
c001e5aa:	75 1c                	jne    c001e5c8 <__umoddi3+0x88>
c001e5ac:	39 d8                	cmp    eax,ebx
c001e5ae:	72 04                	jb     c001e5b4 <__umoddi3+0x74>
c001e5b0:	39 f7                	cmp    edi,esi
c001e5b2:	77 08                	ja     c001e5bc <__umoddi3+0x7c>
c001e5b4:	89 da                	mov    edx,ebx
c001e5b6:	29 fe                	sub    esi,edi
c001e5b8:	19 c2                	sbb    edx,eax
c001e5ba:	89 f1                	mov    ecx,esi
c001e5bc:	89 c8                	mov    eax,ecx
c001e5be:	83 c4 1c             	add    esp,0x1c
c001e5c1:	5b                   	pop    ebx
c001e5c2:	5e                   	pop    esi
c001e5c3:	5f                   	pop    edi
c001e5c4:	5d                   	pop    ebp
c001e5c5:	c3                   	ret    
c001e5c6:	66 90                	xchg   ax,ax
c001e5c8:	ba 20 00 00 00       	mov    edx,0x20
c001e5cd:	29 ea                	sub    edx,ebp
c001e5cf:	89 e9                	mov    ecx,ebp
c001e5d1:	d3 e0                	shl    eax,cl
c001e5d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e5d7:	89 f8                	mov    eax,edi
c001e5d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e5dd:	88 d1                	mov    cl,dl
c001e5df:	d3 e8                	shr    eax,cl
c001e5e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e5e5:	09 c1                	or     ecx,eax
c001e5e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5eb:	89 e9                	mov    ecx,ebp
c001e5ed:	d3 e7                	shl    edi,cl
c001e5ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e5f3:	89 d8                	mov    eax,ebx
c001e5f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5f9:	88 d1                	mov    cl,dl
c001e5fb:	d3 e8                	shr    eax,cl
c001e5fd:	89 c7                	mov    edi,eax
c001e5ff:	89 e9                	mov    ecx,ebp
c001e601:	d3 e3                	shl    ebx,cl
c001e603:	89 f0                	mov    eax,esi
c001e605:	88 d1                	mov    cl,dl
c001e607:	d3 e8                	shr    eax,cl
c001e609:	09 d8                	or     eax,ebx
c001e60b:	89 e9                	mov    ecx,ebp
c001e60d:	d3 e6                	shl    esi,cl
c001e60f:	89 f3                	mov    ebx,esi
c001e611:	89 fa                	mov    edx,edi
c001e613:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e617:	89 d1                	mov    ecx,edx
c001e619:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e61d:	89 c6                	mov    esi,eax
c001e61f:	89 d7                	mov    edi,edx
c001e621:	39 d1                	cmp    ecx,edx
c001e623:	72 27                	jb     c001e64c <__umoddi3+0x10c>
c001e625:	74 21                	je     c001e648 <__umoddi3+0x108>
c001e627:	89 ca                	mov    edx,ecx
c001e629:	29 f3                	sub    ebx,esi
c001e62b:	19 fa                	sbb    edx,edi
c001e62d:	89 d0                	mov    eax,edx
c001e62f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e633:	d3 e0                	shl    eax,cl
c001e635:	89 e9                	mov    ecx,ebp
c001e637:	d3 eb                	shr    ebx,cl
c001e639:	09 d8                	or     eax,ebx
c001e63b:	d3 ea                	shr    edx,cl
c001e63d:	83 c4 1c             	add    esp,0x1c
c001e640:	5b                   	pop    ebx
c001e641:	5e                   	pop    esi
c001e642:	5f                   	pop    edi
c001e643:	5d                   	pop    ebp
c001e644:	c3                   	ret    
c001e645:	8d 76 00             	lea    esi,[esi+0x0]
c001e648:	39 c3                	cmp    ebx,eax
c001e64a:	73 db                	jae    c001e627 <__umoddi3+0xe7>
c001e64c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e650:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e654:	89 d7                	mov    edi,edx
c001e656:	89 c6                	mov    esi,eax
c001e658:	eb cd                	jmp    c001e627 <__umoddi3+0xe7>

Disassembly of section .init:

c001e65a <_init>:
c001e65a:	55                   	push   ebp
c001e65b:	89 e5                	mov    ebp,esp
c001e65d:	e8 92 1a fe ff       	call   c00000f4 <frame_dummy>
c001e662:	e8 e5 fa ff ff       	call   c001e14c <__do_global_ctors_aux>
c001e667:	5d                   	pop    ebp
c001e668:	c3                   	ret    

Disassembly of section .fini:

c001e669 <_fini>:
c001e669:	55                   	push   ebp
c001e66a:	89 e5                	mov    ebp,esp
c001e66c:	e8 13 1a fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e671:	5d                   	pop    ebp
c001e672:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e674 <Computer::~Computer()>:
c001e674:	83 ec 1c             	sub    esp,0x1c
c001e677:	ba f4 f8 01 c0       	mov    edx,0xc001f8f4
c001e67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e680:	89 10                	mov    DWORD PTR [eax],edx
c001e682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e686:	89 04 24             	mov    DWORD PTR [esp],eax
c001e689:	e8 56 d7 fe ff       	call   c000bde4 <Device::~Device()>
c001e68e:	90                   	nop
c001e68f:	83 c4 1c             	add    esp,0x1c
c001e692:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e694 <Computer::~Computer()>:
c001e694:	83 ec 1c             	sub    esp,0x1c
c001e697:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e69b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e69e:	e8 d1 ff ff ff       	call   c001e674 <Computer::~Computer()>
c001e6a3:	c7 44 24 04 70 01 00 00 	mov    DWORD PTR [esp+0x4],0x170
c001e6ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6af:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6b2:	e8 a5 c2 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001e6b7:	83 c4 1c             	add    esp,0x1c
c001e6ba:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e6bb <idleCommon()>:
c001e6bb:	83 ec 0c             	sub    esp,0xc
c001e6be:	fa                   	cli    
c001e6bf:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e6c5:	e8 86 6a ff ff       	call   c0015150 <schedule()>
c001e6ca:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e6cf:	48                   	dec    eax
c001e6d0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e6d5:	75 01                	jne    c001e6d8 <idleCommon()+0x1d>
c001e6d7:	fb                   	sti    
c001e6d8:	83 c4 0c             	add    esp,0xc
c001e6db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e6dc <LinkedList<UnixFile>::~LinkedList()>:
c001e6dc:	90                   	nop
c001e6dd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e6de <LinkedList<UnixFile>::LinkedList()>:
c001e6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e6f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e6fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e702:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e70c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e717:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e71e:	90                   	nop
c001e71f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e720 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e720:	83 ec 1c             	sub    esp,0x1c
c001e723:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e728:	75 0c                	jne    c001e736 <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e72a:	c7 04 24 08 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb08
c001e731:	e8 ef 20 ff ff       	call   c0010825 <KePanic(char const*)>
c001e736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e73a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e73c:	85 c0                	test   eax,eax
c001e73e:	74 34                	je     c001e774 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e744:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e747:	85 c0                	test   eax,eax
c001e749:	74 29                	je     c001e774 <LinkedList<UnixFile>::addElement(UnixFile*)+0x54>
c001e74b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e74f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e752:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e756:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e75d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e761:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e768:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e76b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e772:	eb 5d                	jmp    c001e7d1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e778:	8b 00                	mov    eax,DWORD PTR [eax]
c001e77a:	85 c0                	test   eax,eax
c001e77c:	75 47                	jne    c001e7c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e77e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e782:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e785:	85 c0                	test   eax,eax
c001e787:	75 3c                	jne    c001e7c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xa5>
c001e789:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e78d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e791:	89 10                	mov    DWORD PTR [eax],edx
c001e793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e797:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e79b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e79e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e7a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7b3:	85 c0                	test   eax,eax
c001e7b5:	74 1a                	je     c001e7d1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e7b7:	c7 04 24 2a fb 01 c0 	mov    DWORD PTR [esp],0xc001fb2a
c001e7be:	e8 62 20 ff ff       	call   c0010825 <KePanic(char const*)>
c001e7c3:	eb 0c                	jmp    c001e7d1 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb1>
c001e7c5:	c7 04 24 34 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb34
c001e7cc:	e8 54 20 ff ff       	call   c0010825 <KePanic(char const*)>
c001e7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7d5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e7d8:	8d 50 01             	lea    edx,[eax+0x1]
c001e7db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e7e2:	90                   	nop
c001e7e3:	83 c4 1c             	add    esp,0x1c
c001e7e6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e7e8 <LinkedList<UnixFile>::getFirstElement()>:
c001e7e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7ee:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e7f0 <LinkedList<UnixFile>::removeFirst()>:
c001e7f0:	83 ec 1c             	sub    esp,0x1c
c001e7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e7f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7f9:	85 c0                	test   eax,eax
c001e7fb:	75 0e                	jne    c001e80b <LinkedList<UnixFile>::removeFirst()+0x1b>
c001e7fd:	c7 04 24 40 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb40
c001e804:	e8 1c 20 ff ff       	call   c0010825 <KePanic(char const*)>
c001e809:	eb 76                	jmp    c001e881 <LinkedList<UnixFile>::removeFirst()+0x91>
c001e80b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e80f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e812:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e815:	85 c0                	test   eax,eax
c001e817:	74 0c                	je     c001e825 <LinkedList<UnixFile>::removeFirst()+0x35>
c001e819:	c7 04 24 8b fb 01 c0 	mov    DWORD PTR [esp],0xc001fb8b
c001e820:	e8 00 20 ff ff       	call   c0010825 <KePanic(char const*)>
c001e825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e829:	8b 00                	mov    eax,DWORD PTR [eax]
c001e82b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e82e:	85 c0                	test   eax,eax
c001e830:	75 2f                	jne    c001e861 <LinkedList<UnixFile>::removeFirst()+0x71>
c001e832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e836:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e83c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e840:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e84b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e84e:	83 f8 01             	cmp    eax,0x1
c001e851:	74 1d                	je     c001e870 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e853:	c7 04 24 64 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb64
c001e85a:	e8 c6 1f ff ff       	call   c0010825 <KePanic(char const*)>
c001e85f:	eb 0f                	jmp    c001e870 <LinkedList<UnixFile>::removeFirst()+0x80>
c001e861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e865:	8b 00                	mov    eax,DWORD PTR [eax]
c001e867:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e86a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e86e:	89 10                	mov    DWORD PTR [eax],edx
c001e870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e877:	8d 50 ff             	lea    edx,[eax-0x1]
c001e87a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e87e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e881:	83 c4 1c             	add    esp,0x1c
c001e884:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e886 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e886:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e88a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e88d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e88e <DriverlessDevice::~DriverlessDevice()>:
c001e88e:	83 ec 04             	sub    esp,0x4
c001e891:	ba ec 01 02 c0       	mov    edx,0xc00201ec
c001e896:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e89a:	89 10                	mov    DWORD PTR [eax],edx
c001e89c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8a3:	e8 3c d5 fe ff       	call   c000bde4 <Device::~Device()>
c001e8a8:	90                   	nop
c001e8a9:	83 c4 04             	add    esp,0x4
c001e8ac:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e8ae <DriverlessDevice::~DriverlessDevice()>:
c001e8ae:	83 ec 1c             	sub    esp,0x1c
c001e8b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8b8:	e8 d1 ff ff ff       	call   c001e88e <DriverlessDevice::~DriverlessDevice()>
c001e8bd:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001e8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8cc:	e8 8b c0 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001e8d1:	83 c4 1c             	add    esp,0x1c
c001e8d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e8d6 <LinkedList<Device>::addElement(Device*)>:
c001e8d6:	83 ec 1c             	sub    esp,0x1c
c001e8d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e8de:	75 0c                	jne    c001e8ec <LinkedList<Device>::addElement(Device*)+0x16>
c001e8e0:	c7 04 24 08 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb08
c001e8e7:	e8 39 1f ff ff       	call   c0010825 <KePanic(char const*)>
c001e8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8f2:	85 c0                	test   eax,eax
c001e8f4:	74 3a                	je     c001e930 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e8f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8fd:	85 c0                	test   eax,eax
c001e8ff:	74 2f                	je     c001e930 <LinkedList<Device>::addElement(Device*)+0x5a>
c001e901:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e905:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e908:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e90c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e912:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e916:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e91a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e91d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e921:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e924:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e92e:	eb 60                	jmp    c001e990 <LinkedList<Device>::addElement(Device*)+0xba>
c001e930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e934:	8b 00                	mov    eax,DWORD PTR [eax]
c001e936:	85 c0                	test   eax,eax
c001e938:	75 4a                	jne    c001e984 <LinkedList<Device>::addElement(Device*)+0xae>
c001e93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e93e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e941:	85 c0                	test   eax,eax
c001e943:	75 3f                	jne    c001e984 <LinkedList<Device>::addElement(Device*)+0xae>
c001e945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e949:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e94d:	89 10                	mov    DWORD PTR [eax],edx
c001e94f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e953:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e957:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e95e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e961:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e96b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e96f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e972:	85 c0                	test   eax,eax
c001e974:	74 1a                	je     c001e990 <LinkedList<Device>::addElement(Device*)+0xba>
c001e976:	c7 04 24 2a fb 01 c0 	mov    DWORD PTR [esp],0xc001fb2a
c001e97d:	e8 a3 1e ff ff       	call   c0010825 <KePanic(char const*)>
c001e982:	eb 0c                	jmp    c001e990 <LinkedList<Device>::addElement(Device*)+0xba>
c001e984:	c7 04 24 34 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb34
c001e98b:	e8 95 1e ff ff       	call   c0010825 <KePanic(char const*)>
c001e990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e997:	8d 50 01             	lea    edx,[eax+0x1]
c001e99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e99e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9a1:	90                   	nop
c001e9a2:	83 c4 1c             	add    esp,0x1c
c001e9a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e9a6 <LinkedList<Device>::LinkedList()>:
c001e9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e9e6:	90                   	nop
c001e9e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e9e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e9e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ee:	85 c0                	test   eax,eax
c001e9f0:	75 0e                	jne    c001ea00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e9f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9f9:	85 c0                	test   eax,eax
c001e9fb:	75 03                	jne    c001ea00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e9fd:	b0 01                	mov    al,0x1
c001e9ff:	c3                   	ret    
c001ea00:	b0 00                	mov    al,0x0
c001ea02:	90                   	nop
c001ea03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ea04 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ea04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea08:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea0a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ea0c <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ea0c:	83 ec 1c             	sub    esp,0x1c
c001ea0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea13:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea15:	85 c0                	test   eax,eax
c001ea17:	75 13                	jne    c001ea2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x20>
c001ea19:	c7 04 24 40 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb40
c001ea20:	e8 00 1e ff ff       	call   c0010825 <KePanic(char const*)>
c001ea25:	e9 8a 00 00 00       	jmp    c001eab4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa8>
c001ea2a:	66 90                	xchg   ax,ax
c001ea2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea33:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ea36:	85 c0                	test   eax,eax
c001ea38:	0f 95 c0             	setne  al
c001ea3b:	84 c0                	test   al,al
c001ea3d:	74 0d                	je     c001ea4c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x40>
c001ea3f:	c7 04 24 8b fb 01 c0 	mov    DWORD PTR [esp],0xc001fb8b
c001ea46:	e8 da 1d ff ff       	call   c0010825 <KePanic(char const*)>
c001ea4b:	90                   	nop
c001ea4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea52:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ea55:	85 c0                	test   eax,eax
c001ea57:	0f 94 c0             	sete   al
c001ea5a:	84 c0                	test   al,al
c001ea5c:	74 32                	je     c001ea90 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x84>
c001ea5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea62:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea7a:	83 f8 01             	cmp    eax,0x1
c001ea7d:	74 21                	je     c001eaa0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ea7f:	c7 04 24 64 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb64
c001ea86:	e8 9a 1d ff ff       	call   c0010825 <KePanic(char const*)>
c001ea8b:	eb 13                	jmp    c001eaa0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ea8d:	8d 76 00             	lea    esi,[esi+0x0]
c001ea90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea96:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea9d:	89 10                	mov    DWORD PTR [eax],edx
c001ea9f:	90                   	nop
c001eaa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eaa7:	8d 50 ff             	lea    edx,[eax-0x1]
c001eaaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eab1:	8d 76 00             	lea    esi,[esi+0x0]
c001eab4:	83 c4 1c             	add    esp,0x1c
c001eab7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eab8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eab8:	83 ec 1c             	sub    esp,0x1c
c001eabb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001eac0:	75 0e                	jne    c001ead0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x18>
c001eac2:	c7 04 24 08 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb08
c001eac9:	e8 57 1d ff ff       	call   c0010825 <KePanic(char const*)>
c001eace:	66 90                	xchg   ax,ax
c001ead0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ead4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ead6:	85 c0                	test   eax,eax
c001ead8:	74 36                	je     c001eb10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eade:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eae1:	85 c0                	test   eax,eax
c001eae3:	74 2b                	je     c001eb10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eae9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eaec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eaf0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eaf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eaf7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eafb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eafe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb05:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb0c:	eb 62                	jmp    c001eb70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001eb0e:	66 90                	xchg   ax,ax
c001eb10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb14:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb16:	85 c0                	test   eax,eax
c001eb18:	75 4a                	jne    c001eb64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001eb1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb21:	85 c0                	test   eax,eax
c001eb23:	75 3f                	jne    c001eb64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xac>
c001eb25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb29:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb2d:	89 10                	mov    DWORD PTR [eax],edx
c001eb2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb33:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eb37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb41:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb4f:	85 c0                	test   eax,eax
c001eb51:	74 1d                	je     c001eb70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001eb53:	c7 04 24 2a fb 01 c0 	mov    DWORD PTR [esp],0xc001fb2a
c001eb5a:	e8 c6 1c ff ff       	call   c0010825 <KePanic(char const*)>
c001eb5f:	eb 0f                	jmp    c001eb70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb8>
c001eb61:	8d 76 00             	lea    esi,[esi+0x0]
c001eb64:	c7 04 24 34 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb34
c001eb6b:	e8 b5 1c ff ff       	call   c0010825 <KePanic(char const*)>
c001eb70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb77:	8d 50 01             	lea    edx,[eax+0x1]
c001eb7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb81:	90                   	nop
c001eb82:	83 c4 1c             	add    esp,0x1c
c001eb85:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001eb88 <ACPI::~ACPI()>:
c001eb88:	83 ec 1c             	sub    esp,0x1c
c001eb8b:	ba b8 07 02 c0       	mov    edx,0xc00207b8
c001eb90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb94:	89 10                	mov    DWORD PTR [eax],edx
c001eb96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb9a:	89 04 24             	mov    DWORD PTR [esp],eax
c001eb9d:	e8 42 d2 fe ff       	call   c000bde4 <Device::~Device()>
c001eba2:	90                   	nop
c001eba3:	83 c4 1c             	add    esp,0x1c
c001eba6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001eba8 <ACPI::~ACPI()>:
c001eba8:	83 ec 1c             	sub    esp,0x1c
c001ebab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebaf:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebb2:	e8 d1 ff ff ff       	call   c001eb88 <ACPI::~ACPI()>
c001ebb7:	c7 44 24 04 64 12 00 00 	mov    DWORD PTR [esp+0x4],0x1264
c001ebbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001ebc6:	e8 91 bd fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ebcb:	83 c4 1c             	add    esp,0x1c
c001ebce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ebd0 <LinkedList<Device>::~LinkedList()>:
c001ebd0:	90                   	nop
c001ebd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ebd4 <LinkedList<Device>::isEmpty()>:
c001ebd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebd8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebda:	85 c0                	test   eax,eax
c001ebdc:	75 0e                	jne    c001ebec <LinkedList<Device>::isEmpty()+0x18>
c001ebde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebe5:	85 c0                	test   eax,eax
c001ebe7:	75 03                	jne    c001ebec <LinkedList<Device>::isEmpty()+0x18>
c001ebe9:	b0 01                	mov    al,0x1
c001ebeb:	c3                   	ret    
c001ebec:	b0 00                	mov    al,0x0
c001ebee:	90                   	nop
c001ebef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ebf0 <LinkedList<Device>::getFirstElement()>:
c001ebf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebf6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ebf8 <LinkedList<Device>::removeFirst()>:
c001ebf8:	83 ec 1c             	sub    esp,0x1c
c001ebfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ebff:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec01:	85 c0                	test   eax,eax
c001ec03:	75 13                	jne    c001ec18 <LinkedList<Device>::removeFirst()+0x20>
c001ec05:	c7 04 24 40 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb40
c001ec0c:	e8 14 1c ff ff       	call   c0010825 <KePanic(char const*)>
c001ec11:	e9 8a 00 00 00       	jmp    c001eca0 <LinkedList<Device>::removeFirst()+0xa8>
c001ec16:	66 90                	xchg   ax,ax
c001ec18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec1f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ec25:	85 c0                	test   eax,eax
c001ec27:	74 0f                	je     c001ec38 <LinkedList<Device>::removeFirst()+0x40>
c001ec29:	c7 04 24 8b fb 01 c0 	mov    DWORD PTR [esp],0xc001fb8b
c001ec30:	e8 f0 1b ff ff       	call   c0010825 <KePanic(char const*)>
c001ec35:	8d 76 00             	lea    esi,[esi+0x0]
c001ec38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec3c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec3e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ec44:	85 c0                	test   eax,eax
c001ec46:	75 30                	jne    c001ec78 <LinkedList<Device>::removeFirst()+0x80>
c001ec48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec64:	83 f8 01             	cmp    eax,0x1
c001ec67:	74 23                	je     c001ec8c <LinkedList<Device>::removeFirst()+0x94>
c001ec69:	c7 04 24 64 fb 01 c0 	mov    DWORD PTR [esp],0xc001fb64
c001ec70:	e8 b0 1b ff ff       	call   c0010825 <KePanic(char const*)>
c001ec75:	eb 15                	jmp    c001ec8c <LinkedList<Device>::removeFirst()+0x94>
c001ec77:	90                   	nop
c001ec78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec7c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec7e:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ec84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec88:	89 10                	mov    DWORD PTR [eax],edx
c001ec8a:	66 90                	xchg   ax,ax
c001ec8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec90:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec93:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ec9a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec9d:	8d 76 00             	lea    esi,[esi+0x0]
c001eca0:	83 c4 1c             	add    esp,0x1c
c001eca3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001eca4 <CPU::~CPU()>:
c001eca4:	83 ec 1c             	sub    esp,0x1c
c001eca7:	ba 54 09 02 c0       	mov    edx,0xc0020954
c001ecac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecb0:	89 10                	mov    DWORD PTR [eax],edx
c001ecb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecb6:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecb9:	e8 26 d1 fe ff       	call   c000bde4 <Device::~Device()>
c001ecbe:	90                   	nop
c001ecbf:	83 c4 1c             	add    esp,0x1c
c001ecc2:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ecc4 <CPU::~CPU()>:
c001ecc4:	83 ec 1c             	sub    esp,0x1c
c001ecc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eccb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ecce:	e8 d1 ff ff ff       	call   c001eca4 <CPU::~CPU()>
c001ecd3:	c7 44 24 04 94 11 00 00 	mov    DWORD PTR [esp+0x4],0x1194
c001ecdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ecdf:	89 04 24             	mov    DWORD PTR [esp],eax
c001ece2:	e8 75 bc fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ece7:	83 c4 1c             	add    esp,0x1c
c001ecea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ecec <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ecec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecf0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ecf3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ecf4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ecf4:	90                   	nop
c001ecf5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ecf8 <ThreadControlBlock::ThreadControlBlock()>:
c001ecf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecfc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ed03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed07:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ed0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed12:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ed19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed1d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ed24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed28:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ed2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed33:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ed37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed3b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ed3f:	90                   	nop
c001ed40:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ed44 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ed44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed5d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed7d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ed84:	90                   	nop
c001ed85:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ed86 <PCI::~PCI()>:
c001ed86:	83 ec 1c             	sub    esp,0x1c
c001ed89:	ba b4 17 02 c0       	mov    edx,0xc00217b4
c001ed8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed92:	89 10                	mov    DWORD PTR [eax],edx
c001ed94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed98:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed9b:	e8 a4 ca fe ff       	call   c000b844 <Bus::~Bus()>
c001eda0:	90                   	nop
c001eda1:	83 c4 1c             	add    esp,0x1c
c001eda4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001eda6 <PCI::~PCI()>:
c001eda6:	83 ec 1c             	sub    esp,0x1c
c001eda9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edad:	89 04 24             	mov    DWORD PTR [esp],eax
c001edb0:	e8 d1 ff ff ff       	call   c001ed86 <PCI::~PCI()>
c001edb5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001edbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edc1:	89 04 24             	mov    DWORD PTR [esp],eax
c001edc4:	e8 93 bb fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001edc9:	83 c4 1c             	add    esp,0x1c
c001edcc:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001edce <IDE::~IDE()>:
c001edce:	83 ec 1c             	sub    esp,0x1c
c001edd1:	ba 68 18 02 c0       	mov    edx,0xc0021868
c001edd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edda:	89 10                	mov    DWORD PTR [eax],edx
c001eddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ede0:	89 04 24             	mov    DWORD PTR [esp],eax
c001ede3:	e8 70 d4 fe ff       	call   c000c258 <HardDiskController::~HardDiskController()>
c001ede8:	90                   	nop
c001ede9:	83 c4 1c             	add    esp,0x1c
c001edec:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001edee <IDE::~IDE()>:
c001edee:	83 ec 1c             	sub    esp,0x1c
c001edf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edf5:	89 04 24             	mov    DWORD PTR [esp],eax
c001edf8:	e8 d1 ff ff ff       	call   c001edce <IDE::~IDE()>
c001edfd:	c7 44 24 04 70 02 00 00 	mov    DWORD PTR [esp+0x4],0x270
c001ee05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee09:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee0c:	e8 4b bb fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ee11:	83 c4 1c             	add    esp,0x1c
c001ee14:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001ee16 <SATABus::~SATABus()>:
c001ee16:	83 ec 1c             	sub    esp,0x1c
c001ee19:	ba b8 18 02 c0       	mov    edx,0xc00218b8
c001ee1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee22:	89 10                	mov    DWORD PTR [eax],edx
c001ee24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee28:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee2b:	e8 28 d4 fe ff       	call   c000c258 <HardDiskController::~HardDiskController()>
c001ee30:	90                   	nop
c001ee31:	83 c4 1c             	add    esp,0x1c
c001ee34:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001ee36 <SATABus::~SATABus()>:
c001ee36:	83 ec 1c             	sub    esp,0x1c
c001ee39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee3d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee40:	e8 d1 ff ff ff       	call   c001ee16 <SATABus::~SATABus()>
c001ee45:	c7 44 24 04 64 01 00 00 	mov    DWORD PTR [esp+0x4],0x164
c001ee4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee51:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee54:	e8 03 bb fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ee59:	83 c4 1c             	add    esp,0x1c
c001ee5c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ee5e <ATA::~ATA()>:
c001ee5e:	83 ec 1c             	sub    esp,0x1c
c001ee61:	ba f8 18 02 c0       	mov    edx,0xc00218f8
c001ee66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee6a:	89 10                	mov    DWORD PTR [eax],edx
c001ee6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee70:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee73:	e8 bc d4 fe ff       	call   c000c334 <PhysicalDisk::~PhysicalDisk()>
c001ee78:	90                   	nop
c001ee79:	83 c4 1c             	add    esp,0x1c
c001ee7c:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ee7e <ATA::~ATA()>:
c001ee7e:	83 ec 1c             	sub    esp,0x1c
c001ee81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee85:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee88:	e8 d1 ff ff ff       	call   c001ee5e <ATA::~ATA()>
c001ee8d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001ee95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee99:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee9c:	e8 bb ba fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001eea1:	83 c4 1c             	add    esp,0x1c
c001eea4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001eea6 <ATAPI::~ATAPI()>:
c001eea6:	83 ec 1c             	sub    esp,0x1c
c001eea9:	ba 40 19 02 c0       	mov    edx,0xc0021940
c001eeae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeb2:	89 10                	mov    DWORD PTR [eax],edx
c001eeb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeb8:	89 04 24             	mov    DWORD PTR [esp],eax
c001eebb:	e8 74 d4 fe ff       	call   c000c334 <PhysicalDisk::~PhysicalDisk()>
c001eec0:	90                   	nop
c001eec1:	83 c4 1c             	add    esp,0x1c
c001eec4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001eec6 <ATAPI::~ATAPI()>:
c001eec6:	83 ec 1c             	sub    esp,0x1c
c001eec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eecd:	89 04 24             	mov    DWORD PTR [esp],eax
c001eed0:	e8 d1 ff ff ff       	call   c001eea6 <ATAPI::~ATAPI()>
c001eed5:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001eedd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eee1:	89 04 24             	mov    DWORD PTR [esp],eax
c001eee4:	e8 73 ba fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001eee9:	83 c4 1c             	add    esp,0x1c
c001eeec:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001eeee <SATA::~SATA()>:
c001eeee:	83 ec 1c             	sub    esp,0x1c
c001eef1:	ba f4 19 02 c0       	mov    edx,0xc00219f4
c001eef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eefa:	89 10                	mov    DWORD PTR [eax],edx
c001eefc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef00:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef03:	e8 2c d4 fe ff       	call   c000c334 <PhysicalDisk::~PhysicalDisk()>
c001ef08:	90                   	nop
c001ef09:	83 c4 1c             	add    esp,0x1c
c001ef0c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ef0e <SATA::~SATA()>:
c001ef0e:	83 ec 1c             	sub    esp,0x1c
c001ef11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef15:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef18:	e8 d1 ff ff ff       	call   c001eeee <SATA::~SATA()>
c001ef1d:	c7 44 24 04 7c 01 00 00 	mov    DWORD PTR [esp+0x4],0x17c
c001ef25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef29:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef2c:	e8 2b ba fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ef31:	83 c4 1c             	add    esp,0x1c
c001ef34:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ef36 <SATAPI::~SATAPI()>:
c001ef36:	83 ec 1c             	sub    esp,0x1c
c001ef39:	ba 18 1b 02 c0       	mov    edx,0xc0021b18
c001ef3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef42:	89 10                	mov    DWORD PTR [eax],edx
c001ef44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef48:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef4b:	e8 e4 d3 fe ff       	call   c000c334 <PhysicalDisk::~PhysicalDisk()>
c001ef50:	90                   	nop
c001ef51:	83 c4 1c             	add    esp,0x1c
c001ef54:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ef56 <SATAPI::~SATAPI()>:
c001ef56:	83 ec 1c             	sub    esp,0x1c
c001ef59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef5d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef60:	e8 d1 ff ff ff       	call   c001ef36 <SATAPI::~SATAPI()>
c001ef65:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001ef6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef71:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef74:	e8 e3 b9 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001ef79:	83 c4 1c             	add    esp,0x1c
c001ef7c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ef7e <IOAPIC::~IOAPIC()>:
c001ef7e:	83 ec 1c             	sub    esp,0x1c
c001ef81:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c001ef86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef8a:	89 10                	mov    DWORD PTR [eax],edx
c001ef8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef90:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef93:	e8 4c ce fe ff       	call   c000bde4 <Device::~Device()>
c001ef98:	90                   	nop
c001ef99:	83 c4 1c             	add    esp,0x1c
c001ef9c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ef9e <IOAPIC::~IOAPIC()>:
c001ef9e:	83 ec 1c             	sub    esp,0x1c
c001efa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efa5:	89 04 24             	mov    DWORD PTR [esp],eax
c001efa8:	e8 d1 ff ff ff       	call   c001ef7e <IOAPIC::~IOAPIC()>
c001efad:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001efb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efb9:	89 04 24             	mov    DWORD PTR [esp],eax
c001efbc:	e8 9b b9 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001efc1:	83 c4 1c             	add    esp,0x1c
c001efc4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001efc8 <APICTimer::~APICTimer()>:
c001efc8:	83 ec 1c             	sub    esp,0x1c
c001efcb:	ba a0 1b 02 c0       	mov    edx,0xc0021ba0
c001efd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efd4:	89 10                	mov    DWORD PTR [eax],edx
c001efd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efda:	89 04 24             	mov    DWORD PTR [esp],eax
c001efdd:	e8 1a e8 fe ff       	call   c000d7fc <Timer::~Timer()>
c001efe2:	90                   	nop
c001efe3:	83 c4 1c             	add    esp,0x1c
c001efe6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001efe8 <APICTimer::~APICTimer()>:
c001efe8:	83 ec 1c             	sub    esp,0x1c
c001efeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001efef:	89 04 24             	mov    DWORD PTR [esp],eax
c001eff2:	e8 d1 ff ff ff       	call   c001efc8 <APICTimer::~APICTimer()>
c001eff7:	c7 44 24 04 60 01 00 00 	mov    DWORD PTR [esp+0x4],0x160
c001efff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f003:	89 04 24             	mov    DWORD PTR [esp],eax
c001f006:	e8 51 b9 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f00b:	83 c4 1c             	add    esp,0x1c
c001f00e:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f010 <PIT::~PIT()>:
c001f010:	83 ec 1c             	sub    esp,0x1c
c001f013:	ba f0 1b 02 c0       	mov    edx,0xc0021bf0
c001f018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f01c:	89 10                	mov    DWORD PTR [eax],edx
c001f01e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f022:	89 04 24             	mov    DWORD PTR [esp],eax
c001f025:	e8 d2 e7 fe ff       	call   c000d7fc <Timer::~Timer()>
c001f02a:	90                   	nop
c001f02b:	83 c4 1c             	add    esp,0x1c
c001f02e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f030 <PIT::~PIT()>:
c001f030:	83 ec 1c             	sub    esp,0x1c
c001f033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f037:	89 04 24             	mov    DWORD PTR [esp],eax
c001f03a:	e8 d1 ff ff ff       	call   c001f010 <PIT::~PIT()>
c001f03f:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001f047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f04b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f04e:	e8 09 b9 fe ff       	call   c000a95c <operator delete(void*, unsigned long)>
c001f053:	83 c4 1c             	add    esp,0x1c
c001f056:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be 45 0a 02 c0       	mov    esi,0xc0020a45
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 61 0a 02 c0       	mov    esi,0xc0020a61
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002305e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0023062:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023074:	89 c2                	mov    edx,eax
c0023076:	31 c0                	xor    eax,eax
c0023078:	89 d3                	mov    ebx,edx
c002307a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002307e:	89 c1                	mov    ecx,eax
c0023080:	83 c4 10             	add    esp,0x10
c0023083:	89 d0                	mov    eax,edx
c0023085:	31 d2                	xor    edx,edx
c0023087:	09 da                	or     edx,ebx
c0023089:	09 c8                	or     eax,ecx
c002308b:	5b                   	pop    ebx
c002308c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
