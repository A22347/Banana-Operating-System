
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 24 56 00 10       	push   0x10005624	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	56                   	push   esi
1000008f:	b0 01                	mov    al,0x1
10000091:	53                   	push   ebx
10000092:	bb 26 02 00 00       	mov    ebx,0x226
10000097:	83 ec 10             	sub    esp,0x10
1000009a:	89 da                	mov    edx,ebx
1000009c:	ee                   	out    dx,al
1000009d:	6a 1e                	push   0x1e
1000009f:	e8 fc ff ff ff       	call   100000a0 <ISA::doSoundblaster()+0x12>	100000a0: R_386_PC32	milliTenthSleep(unsigned int)
100000a4:	31 c0                	xor    eax,eax
100000a6:	89 da                	mov    edx,ebx
100000a8:	ee                   	out    dx,al
100000a9:	ba 2a 02 00 00       	mov    edx,0x22a
100000ae:	ec                   	in     al,dx
100000af:	83 c4 10             	add    esp,0x10
100000b2:	3c aa                	cmp    al,0xaa
100000b4:	0f 85 83 00 00 00    	jne    1000013d <ISA::doSoundblaster()+0xaf>
100000ba:	83 ec 0c             	sub    esp,0xc
100000bd:	68 2c 56 00 10       	push   0x1000562c	100000be: R_386_32	.text
100000c2:	e8 fc ff ff ff       	call   100000c3 <ISA::doSoundblaster()+0x35>	100000c3: R_386_PC32	KeSetBootMessage(char const*)
100000c7:	c7 04 24 fc 01 00 00 	mov    DWORD PTR [esp],0x1fc
100000ce:	e8 fc ff ff ff       	call   100000cf <ISA::doSoundblaster()+0x41>	100000cf: R_386_PC32	malloc
100000d3:	89 04 24             	mov    DWORD PTR [esp],eax
100000d6:	89 c3                	mov    ebx,eax
100000d8:	e8 fc ff ff ff       	call   100000d9 <ISA::doSoundblaster()+0x4b>	100000d9: R_386_PC32	SoundBlaster16::SoundBlaster16()
100000dd:	5a                   	pop    edx
100000de:	59                   	pop    ecx
100000df:	53                   	push   ebx
100000e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000e4:	e8 fc ff ff ff       	call   100000e5 <ISA::doSoundblaster()+0x57>	100000e5: R_386_PC32	Device::addChild(Device*)
100000e9:	6a 00                	push   0x0
100000eb:	6a 00                	push   0x0
100000ed:	6a 00                	push   0x0
100000ef:	53                   	push   ebx
100000f0:	e8 fc ff ff ff       	call   100000f1 <ISA::doSoundblaster()+0x63>	100000f1: R_386_PC32	SoundBlaster16::_open(int, int, void*)
100000f5:	83 c4 14             	add    esp,0x14
100000f8:	68 14 01 00 00       	push   0x114
100000fd:	e8 fc ff ff ff       	call   100000fe <ISA::doSoundblaster()+0x70>	100000fe: R_386_PC32	malloc
10000102:	83 c4 0c             	add    esp,0xc
10000105:	89 c6                	mov    esi,eax
10000107:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000109: R_386_32	kernelProcess
1000010d:	68 4c 56 00 10       	push   0x1000564c	1000010e: R_386_32	.text
10000112:	50                   	push   eax
10000113:	e8 fc ff ff ff       	call   10000114 <ISA::doSoundblaster()+0x86>	10000114: R_386_PC32	File::File(char const*, Process*)
10000118:	89 34 24             	mov    DWORD PTR [esp],esi
1000011b:	e8 fc ff ff ff       	call   1000011c <ISA::doSoundblaster()+0x8e>	1000011c: R_386_PC32	File::exists()
10000120:	83 c4 10             	add    esp,0x10
10000123:	84 c0                	test   al,al
10000125:	74 16                	je     1000013d <ISA::doSoundblaster()+0xaf>
10000127:	6a 6f                	push   0x6f
10000129:	53                   	push   ebx
1000012a:	68 00 00 00 00       	push   0x0	1000012b: R_386_32	sb16Demo(void*)
1000012f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000131: R_386_32	kernelProcess
10000135:	e8 fc ff ff ff       	call   10000136 <ISA::doSoundblaster()+0xa8>	10000136: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000013a:	83 c4 10             	add    esp,0x10
1000013d:	58                   	pop    eax
1000013e:	5b                   	pop    ebx
1000013f:	5e                   	pop    esi
10000140:	c3                   	ret    
10000141:	90                   	nop

10000142 <ISA::doSerial()>:
10000142:	c3                   	ret    
10000143:	90                   	nop

10000144 <ISA::doParallel()>:
10000144:	c3                   	ret    
10000145:	90                   	nop

10000146 <ISA::doGameport()>:
10000146:	53                   	push   ebx
10000147:	83 ec 14             	sub    esp,0x14
1000014a:	68 6a 56 00 10       	push   0x1000566a	1000014b: R_386_32	.text
1000014f:	e8 fc ff ff ff       	call   10000150 <ISA::doGameport()+0xa>	10000150: R_386_PC32	KeSetBootMessage(char const*)
10000154:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
1000015b:	e8 fc ff ff ff       	call   1000015c <ISA::doGameport()+0x16>	1000015c: R_386_PC32	malloc
10000160:	89 04 24             	mov    DWORD PTR [esp],eax
10000163:	89 c3                	mov    ebx,eax
10000165:	e8 fc ff ff ff       	call   10000166 <ISA::doGameport()+0x20>	10000166: R_386_PC32	Gameport::Gameport()
1000016a:	58                   	pop    eax
1000016b:	5a                   	pop    edx
1000016c:	53                   	push   ebx
1000016d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000171:	e8 fc ff ff ff       	call   10000172 <ISA::doGameport()+0x2c>	10000172: R_386_PC32	Device::addChild(Device*)
10000176:	6a 00                	push   0x0
10000178:	8b 03                	mov    eax,DWORD PTR [ebx]
1000017a:	6a 00                	push   0x0
1000017c:	6a 00                	push   0x0
1000017e:	53                   	push   ebx
1000017f:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000182:	83 c4 28             	add    esp,0x28
10000185:	5b                   	pop    ebx
10000186:	c3                   	ret    
10000187:	90                   	nop

10000188 <ISA::doFloppy()>:
10000188:	f6 05 01 00 00 00 20 	test   BYTE PTR ds:0x1,0x20	1000018a: R_386_32	keBootSettings
1000018f:	74 54                	je     100001e5 <ISA::doFloppy()+0x5d>
10000191:	53                   	push   ebx
10000192:	83 ec 14             	sub    esp,0x14
10000195:	68 86 56 00 10       	push   0x10005686	10000196: R_386_32	.text
1000019a:	e8 fc ff ff ff       	call   1000019b <ISA::doFloppy()+0x13>	1000019b: R_386_PC32	KeSetBootMessage(char const*)
1000019f:	83 c4 10             	add    esp,0x10
100001a2:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
100001a9:	74 35                	je     100001e0 <ISA::doFloppy()+0x58>
100001ab:	83 ec 0c             	sub    esp,0xc
100001ae:	68 b8 01 00 00       	push   0x1b8
100001b3:	e8 fc ff ff ff       	call   100001b4 <ISA::doFloppy()+0x2c>	100001b4: R_386_PC32	malloc
100001b8:	89 04 24             	mov    DWORD PTR [esp],eax
100001bb:	89 c3                	mov    ebx,eax
100001bd:	e8 fc ff ff ff       	call   100001be <ISA::doFloppy()+0x36>	100001be: R_386_PC32	Floppy::Floppy()
100001c2:	59                   	pop    ecx
100001c3:	58                   	pop    eax
100001c4:	53                   	push   ebx
100001c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001c9:	e8 fc ff ff ff       	call   100001ca <ISA::doFloppy()+0x42>	100001ca: R_386_PC32	Device::addChild(Device*)
100001ce:	6a 00                	push   0x0
100001d0:	6a 00                	push   0x0
100001d2:	68 f0 03 00 00       	push   0x3f0
100001d7:	53                   	push   ebx
100001d8:	e8 fc ff ff ff       	call   100001d9 <ISA::doFloppy()+0x51>	100001d9: R_386_PC32	Floppy::_open(int, int, void*)
100001dd:	83 c4 20             	add    esp,0x20
100001e0:	83 c4 08             	add    esp,0x8
100001e3:	5b                   	pop    ebx
100001e4:	c3                   	ret    
100001e5:	c3                   	ret    

100001e6 <ISA::doATA()>:
100001e6:	c3                   	ret    
100001e7:	90                   	nop

100001e8 <ISA::doPS2()>:
100001e8:	53                   	push   ebx
100001e9:	83 ec 14             	sub    esp,0x14
100001ec:	68 a0 56 00 10       	push   0x100056a0	100001ed: R_386_32	.text
100001f1:	e8 fc ff ff ff       	call   100001f2 <ISA::doPS2()+0xa>	100001f2: R_386_PC32	KeSetBootMessage(char const*)
100001f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100001f9: R_386_32	str_ps2
100001fd:	e8 fc ff ff ff       	call   100001fe <ISA::doPS2()+0x16>	100001fe: R_386_PC32	Dbg::kprintf(char const*, ...)
10000202:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000205: R_386_32	str_ps2
10000209:	e8 fc ff ff ff       	call   1000020a <ISA::doPS2()+0x22>	1000020a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000020e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000211: R_386_32	str_ps2
10000215:	e8 fc ff ff ff       	call   10000216 <ISA::doPS2()+0x2e>	10000216: R_386_PC32	Dbg::kprintf(char const*, ...)
1000021a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000021d: R_386_32	str_ps2
10000221:	e8 fc ff ff ff       	call   10000222 <ISA::doPS2()+0x3a>	10000222: R_386_PC32	Dbg::kprintf(char const*, ...)
10000226:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
1000022d:	e8 fc ff ff ff       	call   1000022e <ISA::doPS2()+0x46>	1000022e: R_386_PC32	malloc
10000232:	89 04 24             	mov    DWORD PTR [esp],eax
10000235:	89 c3                	mov    ebx,eax
10000237:	e8 fc ff ff ff       	call   10000238 <ISA::doPS2()+0x50>	10000238: R_386_PC32	PS2::PS2()
1000023c:	58                   	pop    eax
1000023d:	5a                   	pop    edx
1000023e:	53                   	push   ebx
1000023f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000243:	e8 fc ff ff ff       	call   10000244 <ISA::doPS2()+0x5c>	10000244: R_386_PC32	Device::addChild(Device*)
10000248:	6a 00                	push   0x0
1000024a:	8b 03                	mov    eax,DWORD PTR [ebx]
1000024c:	6a 00                	push   0x0
1000024e:	6a 00                	push   0x0
10000250:	53                   	push   ebx
10000251:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000254:	83 c4 28             	add    esp,0x28
10000257:	5b                   	pop    ebx
10000258:	c3                   	ret    
10000259:	90                   	nop

1000025a <ISA::doRTC()>:
1000025a:	c3                   	ret    
1000025b:	90                   	nop

1000025c <ISA::detect()>:
1000025c:	57                   	push   edi
1000025d:	56                   	push   esi
1000025e:	53                   	push   ebx
1000025f:	83 ec 2c             	sub    esp,0x2c
10000262:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000266:	68 b8 56 00 10       	push   0x100056b8	10000267: R_386_32	.text
1000026b:	e8 fc ff ff ff       	call   1000026c <ISA::detect()+0x10>	1000026c: R_386_PC32	KeSetBootMessage(char const*)
10000270:	c7 04 24 5c 01 00 00 	mov    DWORD PTR [esp],0x15c
10000277:	e8 fc ff ff ff       	call   10000278 <ISA::detect()+0x1c>	10000278: R_386_PC32	malloc
1000027c:	89 04 24             	mov    DWORD PTR [esp],eax
1000027f:	89 c3                	mov    ebx,eax
10000281:	e8 fc ff ff ff       	call   10000282 <ISA::detect()+0x26>	10000282: R_386_PC32	DMA::DMA()
10000286:	58                   	pop    eax
10000287:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000289: R_386_32	isaDMAController
1000028d:	5a                   	pop    edx
1000028e:	53                   	push   ebx
1000028f:	57                   	push   edi
10000290:	e8 fc ff ff ff       	call   10000291 <ISA::detect()+0x35>	10000291: R_386_PC32	Device::addChild(Device*)
10000295:	a1 00 00 00 00       	mov    eax,ds:0x0	10000296: R_386_32	isaDMAController
1000029a:	8b 10                	mov    edx,DWORD PTR [eax]
1000029c:	6a 00                	push   0x0
1000029e:	6a 00                	push   0x0
100002a0:	6a 00                	push   0x0
100002a2:	50                   	push   eax
100002a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
100002a6:	83 c4 20             	add    esp,0x20
100002a9:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100002ab: R_386_32	detectDone
100002b0:	0f 85 f3 00 00 00    	jne    100003a9 <ISA::detect()+0x14d>
100002b6:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100002b8: R_386_32	detectDone
100002bd:	31 db                	xor    ebx,ebx
100002bf:	50                   	push   eax
100002c0:	50                   	push   eax
100002c1:	68 00 00 00 00       	push   0x0	100002c2: R_386_32	str_devices
100002c6:	8d 74 24 0c          	lea    esi,[esp+0xc]
100002ca:	56                   	push   esi
100002cb:	e8 fc ff ff ff       	call   100002cc <ISA::detect()+0x70>	100002cc: R_386_PC32	strcpy
100002d0:	83 c4 10             	add    esp,0x10
100002d3:	85 db                	test   ebx,ebx
100002d5:	75 09                	jne    100002e0 <ISA::detect()+0x84>
100002d7:	50                   	push   eax
100002d8:	50                   	push   eax
100002d9:	68 00 00 00 00       	push   0x0	100002da: R_386_32	str_spk
100002de:	eb 5f                	jmp    1000033f <ISA::detect()+0xe3>
100002e0:	83 fb 01             	cmp    ebx,0x1
100002e3:	75 09                	jne    100002ee <ISA::detect()+0x92>
100002e5:	50                   	push   eax
100002e6:	50                   	push   eax
100002e7:	68 00 00 00 00       	push   0x0	100002e8: R_386_32	str_rtc
100002ec:	eb 51                	jmp    1000033f <ISA::detect()+0xe3>
100002ee:	83 fb 02             	cmp    ebx,0x2
100002f1:	75 12                	jne    10000305 <ISA::detect()+0xa9>
100002f3:	50                   	push   eax
100002f4:	50                   	push   eax
100002f5:	68 00 00 00 00       	push   0x0	100002f6: R_386_32	str_ps2
100002fa:	56                   	push   esi
100002fb:	e8 fc ff ff ff       	call   100002fc <ISA::detect()+0xa0>	100002fc: R_386_PC32	strcat
10000300:	83 c4 10             	add    esp,0x10
10000303:	eb 5e                	jmp    10000363 <ISA::detect()+0x107>
10000305:	83 fb 03             	cmp    ebx,0x3
10000308:	75 12                	jne    1000031c <ISA::detect()+0xc0>
1000030a:	50                   	push   eax
1000030b:	50                   	push   eax
1000030c:	68 00 00 00 00       	push   0x0	1000030d: R_386_32	str_floppy
10000311:	56                   	push   esi
10000312:	e8 fc ff ff ff       	call   10000313 <ISA::detect()+0xb7>	10000313: R_386_PC32	strcat
10000317:	83 c4 10             	add    esp,0x10
1000031a:	eb 57                	jmp    10000373 <ISA::detect()+0x117>
1000031c:	83 fb 04             	cmp    ebx,0x4
1000031f:	75 12                	jne    10000333 <ISA::detect()+0xd7>
10000321:	51                   	push   ecx
10000322:	51                   	push   ecx
10000323:	68 00 00 00 00       	push   0x0	10000324: R_386_32	str_sb16
10000328:	56                   	push   esi
10000329:	e8 fc ff ff ff       	call   1000032a <ISA::detect()+0xce>	1000032a: R_386_PC32	strcat
1000032e:	83 c4 10             	add    esp,0x10
10000331:	eb 50                	jmp    10000383 <ISA::detect()+0x127>
10000333:	83 fb 05             	cmp    ebx,0x5
10000336:	75 0f                	jne    10000347 <ISA::detect()+0xeb>
10000338:	52                   	push   edx
10000339:	52                   	push   edx
1000033a:	68 00 00 00 00       	push   0x0	1000033b: R_386_32	str_isaata
1000033f:	56                   	push   esi
10000340:	e8 fc ff ff ff       	call   10000341 <ISA::detect()+0xe5>	10000341: R_386_PC32	strcat
10000345:	eb 55                	jmp    1000039c <ISA::detect()+0x140>
10000347:	83 fb 06             	cmp    ebx,0x6
1000034a:	75 12                	jne    1000035e <ISA::detect()+0x102>
1000034c:	50                   	push   eax
1000034d:	50                   	push   eax
1000034e:	68 00 00 00 00       	push   0x0	1000034f: R_386_32	str_gp
10000353:	56                   	push   esi
10000354:	e8 fc ff ff ff       	call   10000355 <ISA::detect()+0xf9>	10000355: R_386_PC32	strcat
10000359:	83 c4 10             	add    esp,0x10
1000035c:	eb 35                	jmp    10000393 <ISA::detect()+0x137>
1000035e:	83 fb 02             	cmp    ebx,0x2
10000361:	75 0b                	jne    1000036e <ISA::detect()+0x112>
10000363:	83 ec 0c             	sub    esp,0xc
10000366:	57                   	push   edi
10000367:	e8 fc ff ff ff       	call   10000368 <ISA::detect()+0x10c>	10000368: R_386_PC32	ISA::doPS2()
1000036c:	eb 2e                	jmp    1000039c <ISA::detect()+0x140>
1000036e:	83 fb 03             	cmp    ebx,0x3
10000371:	75 0b                	jne    1000037e <ISA::detect()+0x122>
10000373:	83 ec 0c             	sub    esp,0xc
10000376:	57                   	push   edi
10000377:	e8 fc ff ff ff       	call   10000378 <ISA::detect()+0x11c>	10000378: R_386_PC32	ISA::doFloppy()
1000037c:	eb 1e                	jmp    1000039c <ISA::detect()+0x140>
1000037e:	83 fb 04             	cmp    ebx,0x4
10000381:	75 0b                	jne    1000038e <ISA::detect()+0x132>
10000383:	83 ec 0c             	sub    esp,0xc
10000386:	57                   	push   edi
10000387:	e8 fc ff ff ff       	call   10000388 <ISA::detect()+0x12c>	10000388: R_386_PC32	ISA::doSoundblaster()
1000038c:	eb 0e                	jmp    1000039c <ISA::detect()+0x140>
1000038e:	83 fb 06             	cmp    ebx,0x6
10000391:	75 0c                	jne    1000039f <ISA::detect()+0x143>
10000393:	83 ec 0c             	sub    esp,0xc
10000396:	57                   	push   edi
10000397:	e8 fc ff ff ff       	call   10000398 <ISA::detect()+0x13c>	10000398: R_386_PC32	ISA::doGameport()
1000039c:	83 c4 10             	add    esp,0x10
1000039f:	43                   	inc    ebx
100003a0:	83 fb 07             	cmp    ebx,0x7
100003a3:	0f 85 16 ff ff ff    	jne    100002bf <ISA::detect()+0x63>
100003a9:	83 c4 20             	add    esp,0x20
100003ac:	5b                   	pop    ebx
100003ad:	5e                   	pop    esi
100003ae:	5f                   	pop    edi
100003af:	c3                   	ret    

100003b0 <floppyMotorFunction(void*)>:
100003b0:	55                   	push   ebp
100003b1:	89 e5                	mov    ebp,esp
100003b3:	83 ec 18             	sub    esp,0x18
100003b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100003bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100003bd: R_386_32	irqDisableCounter
100003c1:	48                   	dec    eax
100003c2:	a3 00 00 00 00       	mov    ds:0x0,eax	100003c3: R_386_32	irqDisableCounter
100003c7:	a1 00 00 00 00       	mov    eax,ds:0x0	100003c8: R_386_32	irqDisableCounter
100003cc:	85 c0                	test   eax,eax
100003ce:	75 01                	jne    100003d1 <floppyMotorFunction(void*)+0x21>
100003d0:	fb                   	sti    
100003d1:	83 ec 0c             	sub    esp,0xc
100003d4:	68 a0 0f 00 00       	push   0xfa0
100003d9:	e8 fc ff ff ff       	call   100003da <floppyMotorFunction(void*)+0x2a>	100003da: R_386_PC32	milliTenthSleep(unsigned int)
100003de:	83 c4 10             	add    esp,0x10
100003e1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100003e8:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100003ec:	7f e3                	jg     100003d1 <floppyMotorFunction(void*)+0x21>
100003ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003f1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100003f4:	83 c2 58             	add    edx,0x58
100003f7:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100003fb:	83 f8 02             	cmp    eax,0x2
100003fe:	0f 85 b5 00 00 00    	jne    100004b9 <floppyMotorFunction(void*)+0x109>
10000404:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000407:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000040a:	83 c2 5c             	add    edx,0x5c
1000040d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000411:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
10000417:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000041a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000041d:	83 c2 5c             	add    edx,0x5c
10000420:	89 4c 90 0c          	mov    DWORD PTR [eax+edx*4+0xc],ecx
10000424:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000427:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000042a:	83 c2 5c             	add    edx,0x5c
1000042d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000431:	85 c0                	test   eax,eax
10000433:	0f 8f 80 00 00 00    	jg     100004b9 <floppyMotorFunction(void*)+0x109>
10000439:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000043c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000043f:	83 c2 58             	add    edx,0x58
10000442:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
1000044a:	83 ec 0c             	sub    esp,0xc
1000044d:	68 9c 57 00 10       	push   0x1000579c	1000044e: R_386_32	.text
10000452:	e8 fc ff ff ff       	call   10000453 <floppyMotorFunction(void*)+0xa3>	10000453: R_386_PC32	Dbg::kprintf(char const*, ...)
10000457:	83 c4 10             	add    esp,0x10
1000045a:	fa                   	cli    
1000045b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000045c: R_386_32	irqDisableCounter
10000460:	40                   	inc    eax
10000461:	a3 00 00 00 00       	mov    ds:0x0,eax	10000462: R_386_32	irqDisableCounter
10000466:	83 ec 08             	sub    esp,0x8
10000469:	6a 02                	push   0x2
1000046b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000046e:	e8 fc ff ff ff       	call   1000046f <floppyMotorFunction(void*)+0xbf>	1000046f: R_386_PC32	Floppy::readPort(FloppyReg)
10000473:	83 c4 10             	add    esp,0x10
10000476:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000479:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000047c:	ba 10 00 00 00       	mov    edx,0x10
10000481:	88 c1                	mov    cl,al
10000483:	d3 e2                	shl    edx,cl
10000485:	89 d0                	mov    eax,edx
10000487:	f7 d0                	not    eax
10000489:	88 c2                	mov    dl,al
1000048b:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000048e:	21 d0                	and    eax,edx
10000490:	0f b6 c0             	movzx  eax,al
10000493:	83 ec 04             	sub    esp,0x4
10000496:	50                   	push   eax
10000497:	6a 02                	push   0x2
10000499:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000049c:	e8 fc ff ff ff       	call   1000049d <floppyMotorFunction(void*)+0xed>	1000049d: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100004a1:	83 c4 10             	add    esp,0x10
100004a4:	a1 00 00 00 00       	mov    eax,ds:0x0	100004a5: R_386_32	irqDisableCounter
100004a9:	48                   	dec    eax
100004aa:	a3 00 00 00 00       	mov    ds:0x0,eax	100004ab: R_386_32	irqDisableCounter
100004af:	a1 00 00 00 00       	mov    eax,ds:0x0	100004b0: R_386_32	irqDisableCounter
100004b4:	85 c0                	test   eax,eax
100004b6:	75 01                	jne    100004b9 <floppyMotorFunction(void*)+0x109>
100004b8:	fb                   	sti    
100004b9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100004bc:	e9 27 ff ff ff       	jmp    100003e8 <floppyMotorFunction(void*)+0x38>

100004c1 <floppyIRQHandler(regs*, void*)>:
100004c1:	55                   	push   ebp
100004c2:	89 e5                	mov    ebp,esp
100004c4:	83 ec 10             	sub    esp,0x10
100004c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100004ca:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100004cd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100004d0:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
100004d7:	90                   	nop
100004d8:	c9                   	leave  
100004d9:	c3                   	ret    

100004da <Floppy::Floppy()>:
100004da:	55                   	push   ebp
100004db:	89 e5                	mov    ebp,esp
100004dd:	83 ec 08             	sub    esp,0x8
100004e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e3:	83 ec 08             	sub    esp,0x8
100004e6:	68 bd 57 00 10       	push   0x100057bd	100004e7: R_386_32	.text
100004eb:	50                   	push   eax
100004ec:	e8 fc ff ff ff       	call   100004ed <Floppy::Floppy()+0x13>	100004ed: R_386_PC32	HardDiskController::HardDiskController(char const*)
100004f1:	83 c4 10             	add    esp,0x10
100004f4:	ba 08 00 00 00       	mov    edx,0x8	100004f5: R_386_32	vtable for Floppy
100004f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004fc:	89 10                	mov    DWORD PTR [eax],edx
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
1000050a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050d:	c6 80 8c 01 00 00 01 	mov    BYTE PTR [eax+0x18c],0x1
10000514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000517:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
1000051e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000521:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052b:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000535:	c6 80 90 01 00 00 01 	mov    BYTE PTR [eax+0x190],0x1
1000053c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000053f:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000549:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000553:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
1000055d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000560:	83 ec 0c             	sub    esp,0xc
10000563:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000566:	6a 01                	push   0x1
10000568:	68 00 00 00 00       	push   0x0	10000569: R_386_32	floppyIRQHandler(regs*, void*)
1000056d:	6a 06                	push   0x6
1000056f:	50                   	push   eax
10000570:	e8 fc ff ff ff       	call   10000571 <Floppy::Floppy()+0x97>	10000571: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000575:	83 c4 20             	add    esp,0x20
10000578:	89 c2                	mov    edx,eax
1000057a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000057d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000583:	a1 00 00 00 00       	mov    eax,ds:0x0	10000584: R_386_32	kernelProcess
10000588:	68 d2 00 00 00       	push   0xd2
1000058d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000590:	68 00 00 00 00       	push   0x0	10000591: R_386_32	floppyMotorFunction(void*)
10000595:	50                   	push   eax
10000596:	e8 fc ff ff ff       	call   10000597 <Floppy::Floppy()+0xbd>	10000597: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000059b:	83 c4 10             	add    esp,0x10
1000059e:	89 c2                	mov    edx,eax
100005a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100005a9:	a1 00 00 00 00       	mov    eax,ds:0x0	100005aa: R_386_32	isaDMAController
100005ae:	83 ec 08             	sub    esp,0x8
100005b1:	6a 02                	push   0x2
100005b3:	50                   	push   eax
100005b4:	e8 fc ff ff ff       	call   100005b5 <Floppy::Floppy()+0xdb>	100005b5: R_386_PC32	DMA::tryLockChannel(int)
100005b9:	83 c4 10             	add    esp,0x10
100005bc:	89 c2                	mov    edx,eax
100005be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
100005c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ca:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100005d0:	83 ec 08             	sub    esp,0x8
100005d3:	68 00 48 00 00       	push   0x4800
100005d8:	50                   	push   eax
100005d9:	e8 fc ff ff ff       	call   100005da <Floppy::Floppy()+0x100>	100005da: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100005de:	83 c4 10             	add    esp,0x10
100005e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e4:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100005ea:	83 ec 0c             	sub    esp,0xc
100005ed:	50                   	push   eax
100005ee:	e8 fc ff ff ff       	call   100005ef <Floppy::Floppy()+0x115>	100005ef: R_386_PC32	DMAChannel::getAddress()
100005f3:	83 c4 10             	add    esp,0x10
100005f6:	89 c2                	mov    edx,eax
100005f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005fb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
10000601:	90                   	nop
10000602:	c9                   	leave  
10000603:	c3                   	ret    

10000604 <Floppy::wasFailure()>:
10000604:	55                   	push   ebp
10000605:	89 e5                	mov    ebp,esp
10000607:	83 ec 10             	sub    esp,0x10
1000060a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060d:	c6 80 8f 01 00 00 01 	mov    BYTE PTR [eax+0x18f],0x1
10000614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000617:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
1000061d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000623:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000062a:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
1000062d:	c9                   	leave  
1000062e:	c3                   	ret    
1000062f:	90                   	nop

10000630 <Floppy::writeCommand(unsigned char)>:
10000630:	55                   	push   ebp
10000631:	89 e5                	mov    ebp,esp
10000633:	83 ec 28             	sub    esp,0x28
10000636:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000639:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000063c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063f:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000645:	84 c0                	test   al,al
10000647:	74 10                	je     10000659 <Floppy::writeCommand(unsigned char)+0x29>
10000649:	83 ec 0c             	sub    esp,0xc
1000064c:	68 d4 57 00 10       	push   0x100057d4	1000064d: R_386_32	.text
10000651:	e8 fc ff ff ff       	call   10000652 <Floppy::writeCommand(unsigned char)+0x22>	10000652: R_386_PC32	KePanic(char const*)
10000656:	83 c4 10             	add    esp,0x10
10000659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000065c:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
10000662:	83 f0 01             	xor    eax,0x1
10000665:	84 c0                	test   al,al
10000667:	74 10                	je     10000679 <Floppy::writeCommand(unsigned char)+0x49>
10000669:	83 ec 0c             	sub    esp,0xc
1000066c:	68 04 58 00 10       	push   0x10005804	1000066d: R_386_32	.text
10000671:	e8 fc ff ff ff       	call   10000672 <Floppy::writeCommand(unsigned char)+0x42>	10000672: R_386_PC32	KePanic(char const*)
10000676:	83 c4 10             	add    esp,0x10
10000679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000067c:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000686:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000068d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000694:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000698:	7f 4e                	jg     100006e8 <Floppy::writeCommand(unsigned char)+0xb8>
1000069a:	83 ec 0c             	sub    esp,0xc
1000069d:	6a 64                	push   0x64
1000069f:	e8 fc ff ff ff       	call   100006a0 <Floppy::writeCommand(unsigned char)+0x70>	100006a0: R_386_PC32	milliTenthSleep(unsigned int)
100006a4:	83 c4 10             	add    esp,0x10
100006a7:	83 ec 08             	sub    esp,0x8
100006aa:	6a 04                	push   0x4
100006ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006af:	e8 fc ff ff ff       	call   100006b0 <Floppy::writeCommand(unsigned char)+0x80>	100006b0: R_386_PC32	Floppy::readPort(FloppyReg)
100006b4:	83 c4 10             	add    esp,0x10
100006b7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100006ba:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100006bd:	84 c0                	test   al,al
100006bf:	79 22                	jns    100006e3 <Floppy::writeCommand(unsigned char)+0xb3>
100006c1:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100006c5:	83 e0 40             	and    eax,0x40
100006c8:	85 c0                	test   eax,eax
100006ca:	75 17                	jne    100006e3 <Floppy::writeCommand(unsigned char)+0xb3>
100006cc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100006d0:	83 ec 04             	sub    esp,0x4
100006d3:	50                   	push   eax
100006d4:	6a 05                	push   0x5
100006d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006d9:	e8 fc ff ff ff       	call   100006da <Floppy::writeCommand(unsigned char)+0xaa>	100006da: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100006de:	83 c4 10             	add    esp,0x10
100006e1:	eb 0f                	jmp    100006f2 <Floppy::writeCommand(unsigned char)+0xc2>
100006e3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100006e6:	eb ac                	jmp    10000694 <Floppy::writeCommand(unsigned char)+0x64>
100006e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006eb:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100006f2:	c9                   	leave  
100006f3:	c3                   	ret    

100006f4 <Floppy::readData()>:
100006f4:	55                   	push   ebp
100006f5:	89 e5                	mov    ebp,esp
100006f7:	83 ec 18             	sub    esp,0x18
100006fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006fd:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000703:	84 c0                	test   al,al
10000705:	74 10                	je     10000717 <Floppy::readData()+0x23>
10000707:	83 ec 0c             	sub    esp,0xc
1000070a:	68 d4 57 00 10       	push   0x100057d4	1000070b: R_386_32	.text
1000070f:	e8 fc ff ff ff       	call   10000710 <Floppy::readData()+0x1c>	10000710: R_386_PC32	KePanic(char const*)
10000714:	83 c4 10             	add    esp,0x10
10000717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000071a:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
10000720:	83 f0 01             	xor    eax,0x1
10000723:	84 c0                	test   al,al
10000725:	74 10                	je     10000737 <Floppy::readData()+0x43>
10000727:	83 ec 0c             	sub    esp,0xc
1000072a:	68 04 58 00 10       	push   0x10005804	1000072b: R_386_32	.text
1000072f:	e8 fc ff ff ff       	call   10000730 <Floppy::readData()+0x3c>	10000730: R_386_PC32	KePanic(char const*)
10000734:	83 c4 10             	add    esp,0x10
10000737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000073a:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000744:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000074b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000752:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000756:	7f 49                	jg     100007a1 <Floppy::readData()+0xad>
10000758:	83 ec 0c             	sub    esp,0xc
1000075b:	6a 64                	push   0x64
1000075d:	e8 fc ff ff ff       	call   1000075e <Floppy::readData()+0x6a>	1000075e: R_386_PC32	milliTenthSleep(unsigned int)
10000762:	83 c4 10             	add    esp,0x10
10000765:	83 ec 08             	sub    esp,0x8
10000768:	6a 04                	push   0x4
1000076a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000076d:	e8 fc ff ff ff       	call   1000076e <Floppy::readData()+0x7a>	1000076e: R_386_PC32	Floppy::readPort(FloppyReg)
10000772:	83 c4 10             	add    esp,0x10
10000775:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000778:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000077b:	84 c0                	test   al,al
1000077d:	79 1d                	jns    1000079c <Floppy::readData()+0xa8>
1000077f:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10000783:	83 e0 40             	and    eax,0x40
10000786:	85 c0                	test   eax,eax
10000788:	74 12                	je     1000079c <Floppy::readData()+0xa8>
1000078a:	83 ec 08             	sub    esp,0x8
1000078d:	6a 05                	push   0x5
1000078f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000792:	e8 fc ff ff ff       	call   10000793 <Floppy::readData()+0x9f>	10000793: R_386_PC32	Floppy::readPort(FloppyReg)
10000797:	83 c4 10             	add    esp,0x10
1000079a:	eb 11                	jmp    100007ad <Floppy::readData()+0xb9>
1000079c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000079f:	eb b1                	jmp    10000752 <Floppy::readData()+0x5e>
100007a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007a4:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100007ab:	b0 00                	mov    al,0x0
100007ad:	c9                   	leave  
100007ae:	c3                   	ret    
100007af:	90                   	nop

100007b0 <Floppy::readPort(FloppyReg)>:
100007b0:	55                   	push   ebp
100007b1:	89 e5                	mov    ebp,esp
100007b3:	83 ec 10             	sub    esp,0x10
100007b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100007bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100007c2:	01 d0                	add    eax,edx
100007c4:	0f b7 c0             	movzx  eax,ax
100007c7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100007cb:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100007cf:	89 c2                	mov    edx,eax
100007d1:	ec                   	in     al,dx
100007d2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100007d5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100007d8:	90                   	nop
100007d9:	c9                   	leave  
100007da:	c3                   	ret    
100007db:	90                   	nop

100007dc <Floppy::writePort(FloppyReg, unsigned char)>:
100007dc:	55                   	push   ebp
100007dd:	89 e5                	mov    ebp,esp
100007df:	83 ec 14             	sub    esp,0x14
100007e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100007e5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100007e8:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100007ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100007f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100007f8:	01 d0                	add    eax,edx
100007fa:	0f b7 c0             	movzx  eax,ax
100007fd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000801:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
10000804:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000807:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
1000080b:	ee                   	out    dx,al
1000080c:	90                   	nop
1000080d:	c9                   	leave  
1000080e:	c3                   	ret    
1000080f:	90                   	nop

10000810 <Floppy::driveDetection()>:
10000810:	55                   	push   ebp
10000811:	89 e5                	mov    ebp,esp
10000813:	53                   	push   ebx
10000814:	83 ec 24             	sub    esp,0x24
10000817:	83 ec 0c             	sub    esp,0xc
1000081a:	68 32 58 00 10       	push   0x10005832	1000081b: R_386_32	.text
1000081f:	e8 fc ff ff ff       	call   10000820 <Floppy::driveDetection()+0x10>	10000820: R_386_PC32	Dbg::kprintf(char const*, ...)
10000824:	83 c4 10             	add    esp,0x10
10000827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000082a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000830:	66 3d f0 03          	cmp    ax,0x3f0
10000834:	0f 85 26 01 00 00    	jne    10000960 <Floppy::driveDetection()+0x150>
1000083a:	83 ec 0c             	sub    esp,0xc
1000083d:	68 4c 58 00 10       	push   0x1000584c	1000083e: R_386_32	.text
10000842:	e8 fc ff ff ff       	call   10000843 <Floppy::driveDetection()+0x33>	10000843: R_386_PC32	KePanic(char const*)
10000847:	83 c4 10             	add    esp,0x10
1000084a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
1000084e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000852:	c1 f8 04             	sar    eax,0x4
10000855:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000858:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000085c:	83 e0 0f             	and    eax,0xf
1000085f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000862:	83 ec 08             	sub    esp,0x8
10000865:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000868:	68 64 58 00 10       	push   0x10005864	10000869: R_386_32	.text
1000086d:	e8 fc ff ff ff       	call   1000086e <Floppy::driveDetection()+0x5e>	1000086e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000872:	83 c4 10             	add    esp,0x10
10000875:	83 ec 08             	sub    esp,0x8
10000878:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000087b:	68 78 58 00 10       	push   0x10005878	1000087c: R_386_32	.text
10000880:	e8 fc ff ff ff       	call   10000881 <Floppy::driveDetection()+0x71>	10000881: R_386_PC32	Dbg::kprintf(char const*, ...)
10000885:	83 c4 10             	add    esp,0x10
10000888:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000088c:	74 63                	je     100008f1 <Floppy::driveDetection()+0xe1>
1000088e:	c7 45 e0 74 01 00 00 	mov    DWORD PTR [ebp-0x20],0x174
10000895:	83 ec 0c             	sub    esp,0xc
10000898:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000089b:	e8 fc ff ff ff       	call   1000089c <Floppy::driveDetection()+0x8c>	1000089c: R_386_PC32	malloc
100008a0:	83 c4 10             	add    esp,0x10
100008a3:	89 c3                	mov    ebx,eax
100008a5:	83 ec 0c             	sub    esp,0xc
100008a8:	53                   	push   ebx
100008a9:	e8 fc ff ff ff       	call   100008aa <Floppy::driveDetection()+0x9a>	100008aa: R_386_PC32	FloppyDrive::FloppyDrive()
100008ae:	83 c4 10             	add    esp,0x10
100008b1:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
100008b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100008ba:	89 90 98 01 00 00    	mov    DWORD PTR [eax+0x198],edx
100008c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
100008c6:	89 90 a8 01 00 00    	mov    DWORD PTR [eax+0x1a8],edx
100008cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008cf:	83 ec 08             	sub    esp,0x8
100008d2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100008d5:	50                   	push   eax
100008d6:	e8 fc ff ff ff       	call   100008d7 <Floppy::driveDetection()+0xc7>	100008d7: R_386_PC32	Device::addChild(Device*)
100008db:	83 c4 10             	add    esp,0x10
100008de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008e4:	6a 00                	push   0x0
100008e6:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100008e9:	e8 fc ff ff ff       	call   100008ea <Floppy::driveDetection()+0xda>	100008ea: R_386_PC32	FloppyDrive::_open(int, int, void*)
100008ee:	83 c4 10             	add    esp,0x10
100008f1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100008f5:	74 69                	je     10000960 <Floppy::driveDetection()+0x150>
100008f7:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100008fb:	74 63                	je     10000960 <Floppy::driveDetection()+0x150>
100008fd:	c7 45 dc 74 01 00 00 	mov    DWORD PTR [ebp-0x24],0x174
10000904:	83 ec 0c             	sub    esp,0xc
10000907:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000090a:	e8 fc ff ff ff       	call   1000090b <Floppy::driveDetection()+0xfb>	1000090b: R_386_PC32	malloc
1000090f:	83 c4 10             	add    esp,0x10
10000912:	89 c3                	mov    ebx,eax
10000914:	83 ec 0c             	sub    esp,0xc
10000917:	53                   	push   ebx
10000918:	e8 fc ff ff ff       	call   10000919 <Floppy::driveDetection()+0x109>	10000919: R_386_PC32	FloppyDrive::FloppyDrive()
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000926:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000929:	89 90 9c 01 00 00    	mov    DWORD PTR [eax+0x19c],edx
1000092f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000932:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10000935:	89 90 ac 01 00 00    	mov    DWORD PTR [eax+0x1ac],edx
1000093b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093e:	83 ec 08             	sub    esp,0x8
10000941:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000944:	50                   	push   eax
10000945:	e8 fc ff ff ff       	call   10000946 <Floppy::driveDetection()+0x136>	10000946: R_386_PC32	Device::addChild(Device*)
1000094a:	83 c4 10             	add    esp,0x10
1000094d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000950:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000953:	6a 01                	push   0x1
10000955:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000958:	e8 fc ff ff ff       	call   10000959 <Floppy::driveDetection()+0x149>	10000959: R_386_PC32	FloppyDrive::_open(int, int, void*)
1000095d:	83 c4 10             	add    esp,0x10
10000960:	90                   	nop
10000961:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000964:	c9                   	leave  
10000965:	c3                   	ret    

10000966 <Floppy::close(int, int, void*)>:
10000966:	b8 00 00 00 00       	mov    eax,0x0
1000096b:	c3                   	ret    

1000096c <Floppy::open(int, int, void*)>:
1000096c:	b8 00 00 00 00       	mov    eax,0x0
10000971:	c3                   	ret    

10000972 <Floppy::_open(int, int, void*)>:
10000972:	55                   	push   ebp
10000973:	89 e5                	mov    ebp,esp
10000975:	83 ec 18             	sub    esp,0x18
10000978:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000097b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000097e:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
10000985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000988:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000098e:	0f b6 c8             	movzx  ecx,al
10000991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000994:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000099a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000099d:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100009a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009ab:	0f b6 d0             	movzx  edx,al
100009ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b1:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
100009b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009bf:	8d 50 01             	lea    edx,[eax+0x1]
100009c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100009c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100009cb:	0f b6 d0             	movzx  edx,al
100009ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100009d5:	83 e1 3f             	and    ecx,0x3f
100009d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100009dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100009e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009e8:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100009ee:	0f b6 ca             	movzx  ecx,dl
100009f1:	83 c0 07             	add    eax,0x7
100009f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009f7:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100009fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a05:	0f b6 d0             	movzx  edx,al
10000a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a0b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a19:	8d 50 01             	lea    edx,[eax+0x1]
10000a1c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000a1f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000a25:	0f b6 d0             	movzx  edx,al
10000a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a2b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000a2f:	83 e1 3f             	and    ecx,0x3f
10000a32:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000a36:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000a3d:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10000a41:	7f 27                	jg     10000a6a <Floppy::_open(int, int, void*)+0xf8>
10000a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a46:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000a49:	83 c2 68             	add    edx,0x68
10000a4c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
10000a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a57:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000a5a:	83 c2 58             	add    edx,0x58
10000a5d:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000a65:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000a68:	eb d3                	jmp    10000a3d <Floppy::_open(int, int, void*)+0xcb>
10000a6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a6d:	e8 fc ff ff ff       	call   10000a6e <Floppy::_open(int, int, void*)+0xfc>	10000a6e: R_386_PC32	Floppy::wasFailure()
10000a72:	83 c4 04             	add    esp,0x4
10000a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a78:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a82:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000a89:	83 ec 0c             	sub    esp,0xc
10000a8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a8f:	e8 fc ff ff ff       	call   10000a90 <Floppy::_open(int, int, void*)+0x11e>	10000a90: R_386_PC32	Floppy::reset()
10000a94:	83 c4 10             	add    esp,0x10
10000a97:	83 ec 0c             	sub    esp,0xc
10000a9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a9d:	e8 fc ff ff ff       	call   10000a9e <Floppy::_open(int, int, void*)+0x12c>	10000a9e: R_386_PC32	Floppy::driveDetection()
10000aa2:	83 c4 10             	add    esp,0x10
10000aa5:	b8 00 00 00 00       	mov    eax,0x0
10000aaa:	c9                   	leave  
10000aab:	c3                   	ret    

10000aac <Floppy::senseInterrupt(int*, int*)>:
10000aac:	55                   	push   ebp
10000aad:	89 e5                	mov    ebp,esp
10000aaf:	83 ec 08             	sub    esp,0x8
10000ab2:	83 ec 08             	sub    esp,0x8
10000ab5:	6a 08                	push   0x8
10000ab7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aba:	e8 fc ff ff ff       	call   10000abb <Floppy::senseInterrupt(int*, int*)+0xf>	10000abb: R_386_PC32	Floppy::writeCommand(unsigned char)
10000abf:	83 c4 10             	add    esp,0x10
10000ac2:	83 ec 0c             	sub    esp,0xc
10000ac5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ac8:	e8 fc ff ff ff       	call   10000ac9 <Floppy::senseInterrupt(int*, int*)+0x1d>	10000ac9: R_386_PC32	Floppy::wasFailure()
10000acd:	83 c4 10             	add    esp,0x10
10000ad0:	84 c0                	test   al,al
10000ad2:	74 04                	je     10000ad8 <Floppy::senseInterrupt(int*, int*)+0x2c>
10000ad4:	b0 00                	mov    al,0x0
10000ad6:	eb 5a                	jmp    10000b32 <Floppy::senseInterrupt(int*, int*)+0x86>
10000ad8:	83 ec 0c             	sub    esp,0xc
10000adb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ade:	e8 fc ff ff ff       	call   10000adf <Floppy::senseInterrupt(int*, int*)+0x33>	10000adf: R_386_PC32	Floppy::readData()
10000ae3:	83 c4 10             	add    esp,0x10
10000ae6:	0f b6 d0             	movzx  edx,al
10000ae9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000aec:	89 10                	mov    DWORD PTR [eax],edx
10000aee:	83 ec 0c             	sub    esp,0xc
10000af1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000af4:	e8 fc ff ff ff       	call   10000af5 <Floppy::senseInterrupt(int*, int*)+0x49>	10000af5: R_386_PC32	Floppy::wasFailure()
10000af9:	83 c4 10             	add    esp,0x10
10000afc:	84 c0                	test   al,al
10000afe:	74 04                	je     10000b04 <Floppy::senseInterrupt(int*, int*)+0x58>
10000b00:	b0 00                	mov    al,0x0
10000b02:	eb 2e                	jmp    10000b32 <Floppy::senseInterrupt(int*, int*)+0x86>
10000b04:	83 ec 0c             	sub    esp,0xc
10000b07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b0a:	e8 fc ff ff ff       	call   10000b0b <Floppy::senseInterrupt(int*, int*)+0x5f>	10000b0b: R_386_PC32	Floppy::readData()
10000b0f:	83 c4 10             	add    esp,0x10
10000b12:	0f b6 d0             	movzx  edx,al
10000b15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000b18:	89 10                	mov    DWORD PTR [eax],edx
10000b1a:	83 ec 0c             	sub    esp,0xc
10000b1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b20:	e8 fc ff ff ff       	call   10000b21 <Floppy::senseInterrupt(int*, int*)+0x75>	10000b21: R_386_PC32	Floppy::wasFailure()
10000b25:	83 c4 10             	add    esp,0x10
10000b28:	84 c0                	test   al,al
10000b2a:	74 04                	je     10000b30 <Floppy::senseInterrupt(int*, int*)+0x84>
10000b2c:	b0 00                	mov    al,0x0
10000b2e:	eb 02                	jmp    10000b32 <Floppy::senseInterrupt(int*, int*)+0x86>
10000b30:	b0 01                	mov    al,0x1
10000b32:	c9                   	leave  
10000b33:	c3                   	ret    

10000b34 <Floppy::lock()>:
10000b34:	55                   	push   ebp
10000b35:	89 e5                	mov    ebp,esp
10000b37:	83 ec 08             	sub    esp,0x8
10000b3a:	83 ec 08             	sub    esp,0x8
10000b3d:	6a 14                	push   0x14
10000b3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b42:	e8 fc ff ff ff       	call   10000b43 <Floppy::lock()+0xf>	10000b43: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b47:	83 c4 10             	add    esp,0x10
10000b4a:	83 ec 0c             	sub    esp,0xc
10000b4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b50:	e8 fc ff ff ff       	call   10000b51 <Floppy::lock()+0x1d>	10000b51: R_386_PC32	Floppy::wasFailure()
10000b55:	83 c4 10             	add    esp,0x10
10000b58:	84 c0                	test   al,al
10000b5a:	74 04                	je     10000b60 <Floppy::lock()+0x2c>
10000b5c:	b0 00                	mov    al,0x0
10000b5e:	eb 26                	jmp    10000b86 <Floppy::lock()+0x52>
10000b60:	83 ec 0c             	sub    esp,0xc
10000b63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b66:	e8 fc ff ff ff       	call   10000b67 <Floppy::lock()+0x33>	10000b67: R_386_PC32	Floppy::readData()
10000b6b:	83 c4 10             	add    esp,0x10
10000b6e:	83 ec 0c             	sub    esp,0xc
10000b71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b74:	e8 fc ff ff ff       	call   10000b75 <Floppy::lock()+0x41>	10000b75: R_386_PC32	Floppy::wasFailure()
10000b79:	83 c4 10             	add    esp,0x10
10000b7c:	84 c0                	test   al,al
10000b7e:	74 04                	je     10000b84 <Floppy::lock()+0x50>
10000b80:	b0 00                	mov    al,0x0
10000b82:	eb 02                	jmp    10000b86 <Floppy::lock()+0x52>
10000b84:	b0 01                	mov    al,0x1
10000b86:	c9                   	leave  
10000b87:	c3                   	ret    

10000b88 <Floppy::waitIRQ(int)>:
10000b88:	55                   	push   ebp
10000b89:	89 e5                	mov    ebp,esp
10000b8b:	83 ec 18             	sub    esp,0x18
10000b8e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b98:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000b9e:	84 c0                	test   al,al
10000ba0:	75 1f                	jne    10000bc1 <Floppy::waitIRQ(int)+0x39>
10000ba2:	83 ec 0c             	sub    esp,0xc
10000ba5:	68 f4 01 00 00       	push   0x1f4
10000baa:	e8 fc ff ff ff       	call   10000bab <Floppy::waitIRQ(int)+0x23>	10000bab: R_386_PC32	milliTenthSleep(unsigned int)
10000baf:	83 c4 10             	add    esp,0x10
10000bb2:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
10000bb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000bb9:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000bbc:	7d 02                	jge    10000bc0 <Floppy::waitIRQ(int)+0x38>
10000bbe:	eb d5                	jmp    10000b95 <Floppy::waitIRQ(int)+0xd>
10000bc0:	90                   	nop
10000bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bc4:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000bca:	c9                   	leave  
10000bcb:	c3                   	ret    

10000bcc <Floppy::reset()>:
10000bcc:	55                   	push   ebp
10000bcd:	89 e5                	mov    ebp,esp
10000bcf:	83 ec 28             	sub    esp,0x28
10000bd2:	83 ec 0c             	sub    esp,0xc
10000bd5:	68 8c 58 00 10       	push   0x1000588c	10000bd6: R_386_32	.text
10000bda:	e8 fc ff ff ff       	call   10000bdb <Floppy::reset()+0xf>	10000bdb: R_386_PC32	Dbg::kprintf(char const*, ...)
10000bdf:	83 c4 10             	add    esp,0x10
10000be2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000be5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bef:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bfc:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000c03:	83 ec 08             	sub    esp,0x8
10000c06:	6a 02                	push   0x2
10000c08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c0b:	e8 fc ff ff ff       	call   10000c0c <Floppy::reset()+0x40>	10000c0c: R_386_PC32	Floppy::readPort(FloppyReg)
10000c10:	83 c4 10             	add    esp,0x10
10000c13:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000c16:	83 ec 04             	sub    esp,0x4
10000c19:	6a 00                	push   0x0
10000c1b:	6a 02                	push   0x2
10000c1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c20:	e8 fc ff ff ff       	call   10000c21 <Floppy::reset()+0x55>	10000c21: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c25:	83 c4 10             	add    esp,0x10
10000c28:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c2b:	83 c8 0c             	or     eax,0xc
10000c2e:	0f b6 c0             	movzx  eax,al
10000c31:	83 ec 04             	sub    esp,0x4
10000c34:	50                   	push   eax
10000c35:	6a 02                	push   0x2
10000c37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c3a:	e8 fc ff ff ff       	call   10000c3b <Floppy::reset()+0x6f>	10000c3b: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c3f:	83 c4 10             	add    esp,0x10
10000c42:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000c46:	83 e0 08             	and    eax,0x8
10000c49:	85 c0                	test   eax,eax
10000c4b:	74 3f                	je     10000c8c <Floppy::reset()+0xc0>
10000c4d:	83 ec 08             	sub    esp,0x8
10000c50:	68 90 01 00 00       	push   0x190
10000c55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c58:	e8 fc ff ff ff       	call   10000c59 <Floppy::reset()+0x8d>	10000c59: R_386_PC32	Floppy::waitIRQ(int)
10000c5d:	83 c4 10             	add    esp,0x10
10000c60:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000c63:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000c66:	83 f0 01             	xor    eax,0x1
10000c69:	84 c0                	test   al,al
10000c6b:	74 3e                	je     10000cab <Floppy::reset()+0xdf>
10000c6d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c70:	83 c8 0c             	or     eax,0xc
10000c73:	0f b6 c0             	movzx  eax,al
10000c76:	83 ec 04             	sub    esp,0x4
10000c79:	50                   	push   eax
10000c7a:	6a 02                	push   0x2
10000c7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c7f:	e8 fc ff ff ff       	call   10000c80 <Floppy::reset()+0xb4>	10000c80: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c84:	83 c4 10             	add    esp,0x10
10000c87:	e9 56 ff ff ff       	jmp    10000be2 <Floppy::reset()+0x16>
10000c8c:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c8f:	83 c8 0c             	or     eax,0xc
10000c92:	0f b6 c0             	movzx  eax,al
10000c95:	83 ec 04             	sub    esp,0x4
10000c98:	50                   	push   eax
10000c99:	6a 02                	push   0x2
10000c9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c9e:	e8 fc ff ff ff       	call   10000c9f <Floppy::reset()+0xd3>	10000c9f: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000ca3:	83 c4 10             	add    esp,0x10
10000ca6:	e9 37 ff ff ff       	jmp    10000be2 <Floppy::reset()+0x16>
10000cab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cae:	8a 80 91 01 00 00    	mov    al,BYTE PTR [eax+0x191]
10000cb4:	84 c0                	test   al,al
10000cb6:	0f 84 8f 00 00 00    	je     10000d4b <Floppy::reset()+0x17f>
10000cbc:	83 ec 04             	sub    esp,0x4
10000cbf:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000cc2:	50                   	push   eax
10000cc3:	8d 45 e8             	lea    eax,[ebp-0x18]
10000cc6:	50                   	push   eax
10000cc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cca:	e8 fc ff ff ff       	call   10000ccb <Floppy::reset()+0xff>	10000ccb: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000ccf:	83 c4 10             	add    esp,0x10
10000cd2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cd5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000cd9:	74 19                	je     10000cf4 <Floppy::reset()+0x128>
10000cdb:	83 ec 04             	sub    esp,0x4
10000cde:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000ce1:	50                   	push   eax
10000ce2:	8d 45 e8             	lea    eax,[ebp-0x18]
10000ce5:	50                   	push   eax
10000ce6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ce9:	e8 fc ff ff ff       	call   10000cea <Floppy::reset()+0x11e>	10000cea: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000cee:	83 c4 10             	add    esp,0x10
10000cf1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cf4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000cf8:	74 19                	je     10000d13 <Floppy::reset()+0x147>
10000cfa:	83 ec 04             	sub    esp,0x4
10000cfd:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000d00:	50                   	push   eax
10000d01:	8d 45 e8             	lea    eax,[ebp-0x18]
10000d04:	50                   	push   eax
10000d05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d08:	e8 fc ff ff ff       	call   10000d09 <Floppy::reset()+0x13d>	10000d09: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000d0d:	83 c4 10             	add    esp,0x10
10000d10:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d13:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000d17:	74 19                	je     10000d32 <Floppy::reset()+0x166>
10000d19:	83 ec 04             	sub    esp,0x4
10000d1c:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000d1f:	50                   	push   eax
10000d20:	8d 45 e8             	lea    eax,[ebp-0x18]
10000d23:	50                   	push   eax
10000d24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d27:	e8 fc ff ff ff       	call   10000d28 <Floppy::reset()+0x15c>	10000d28: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000d2c:	83 c4 10             	add    esp,0x10
10000d2f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d32:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d35:	83 f0 01             	xor    eax,0x1
10000d38:	84 c0                	test   al,al
10000d3a:	74 0f                	je     10000d4b <Floppy::reset()+0x17f>
10000d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d3f:	c6 80 91 01 00 00 00 	mov    BYTE PTR [eax+0x191],0x0
10000d46:	e9 97 fe ff ff       	jmp    10000be2 <Floppy::reset()+0x16>
10000d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d4e:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000d54:	84 c0                	test   al,al
10000d56:	75 14                	jne    10000d6c <Floppy::reset()+0x1a0>
10000d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d5b:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000d61:	83 f0 01             	xor    eax,0x1
10000d64:	84 c0                	test   al,al
10000d66:	0f 84 91 00 00 00    	je     10000dfd <Floppy::reset()+0x231>
10000d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d6f:	8a 80 90 01 00 00    	mov    al,BYTE PTR [eax+0x190]
10000d75:	84 c0                	test   al,al
10000d77:	74 3c                	je     10000db5 <Floppy::reset()+0x1e9>
10000d79:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000d80:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000d84:	7f 2f                	jg     10000db5 <Floppy::reset()+0x1e9>
10000d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d89:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d8c:	83 c2 68             	add    edx,0x68
10000d8f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000d93:	85 c0                	test   eax,eax
10000d95:	74 19                	je     10000db0 <Floppy::reset()+0x1e4>
10000d97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d9a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d9d:	83 c2 68             	add    edx,0x68
10000da0:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000da4:	83 ec 0c             	sub    esp,0xc
10000da7:	50                   	push   eax
10000da8:	e8 fc ff ff ff       	call   10000da9 <Floppy::reset()+0x1dd>	10000da9: R_386_PC32	FloppyDrive::floppyConfigure()
10000dad:	83 c4 10             	add    esp,0x10
10000db0:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000db3:	eb cb                	jmp    10000d80 <Floppy::reset()+0x1b4>
10000db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000db8:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000dbe:	83 f0 01             	xor    eax,0x1
10000dc1:	84 c0                	test   al,al
10000dc3:	74 38                	je     10000dfd <Floppy::reset()+0x231>
10000dc5:	83 ec 0c             	sub    esp,0xc
10000dc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000dcb:	e8 fc ff ff ff       	call   10000dcc <Floppy::reset()+0x200>	10000dcc: R_386_PC32	Floppy::lock()
10000dd0:	83 c4 10             	add    esp,0x10
10000dd3:	83 f0 01             	xor    eax,0x1
10000dd6:	88 c2                	mov    dl,al
10000dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ddb:	88 90 8c 01 00 00    	mov    BYTE PTR [eax+0x18c],dl
10000de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000de4:	c6 80 8d 01 00 00 01 	mov    BYTE PTR [eax+0x18d],0x1
10000deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dee:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000df4:	84 c0                	test   al,al
10000df6:	74 05                	je     10000dfd <Floppy::reset()+0x231>
10000df8:	e9 e5 fd ff ff       	jmp    10000be2 <Floppy::reset()+0x16>
10000dfd:	90                   	nop
10000dfe:	c9                   	leave  
10000dff:	c3                   	ret    

10000e00 <Floppy::dmaInit(bool)>:
10000e00:	55                   	push   ebp
10000e01:	89 e5                	mov    ebp,esp
10000e03:	83 ec 18             	sub    esp,0x18
10000e06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000e09:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10000e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e0f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000e15:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
10000e19:	74 07                	je     10000e22 <Floppy::dmaInit(bool)+0x22>
10000e1b:	ba 4a 00 00 00       	mov    edx,0x4a
10000e20:	eb 05                	jmp    10000e27 <Floppy::dmaInit(bool)+0x27>
10000e22:	ba 46 00 00 00       	mov    edx,0x46
10000e27:	83 ec 08             	sub    esp,0x8
10000e2a:	52                   	push   edx
10000e2b:	50                   	push   eax
10000e2c:	e8 fc ff ff ff       	call   10000e2d <Floppy::dmaInit(bool)+0x2d>	10000e2d: R_386_PC32	DMAChannel::setMode(unsigned char)
10000e31:	83 c4 10             	add    esp,0x10
10000e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e37:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000e3d:	83 ec 0c             	sub    esp,0xc
10000e40:	50                   	push   eax
10000e41:	e8 fc ff ff ff       	call   10000e42 <Floppy::dmaInit(bool)+0x42>	10000e42: R_386_PC32	DMAChannel::start()
10000e46:	83 c4 10             	add    esp,0x10
10000e49:	90                   	nop
10000e4a:	c9                   	leave  
10000e4b:	c3                   	ret    

10000e4c <Floppy::specify(int)>:
10000e4c:	55                   	push   ebp
10000e4d:	89 e5                	mov    ebp,esp
10000e4f:	57                   	push   edi
10000e50:	56                   	push   esi
10000e51:	53                   	push   ebx
10000e52:	83 ec 3c             	sub    esp,0x3c
10000e55:	8d 45 c0             	lea    eax,[ebp-0x40]
10000e58:	bb b8 58 00 10       	mov    ebx,0x100058b8	10000e59: R_386_32	.text
10000e5d:	ba 04 00 00 00       	mov    edx,0x4
10000e62:	89 c7                	mov    edi,eax
10000e64:	89 de                	mov    esi,ebx
10000e66:	89 d1                	mov    ecx,edx
10000e68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000e70:	83 c2 64             	add    edx,0x64
10000e73:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000e77:	89 d0                	mov    eax,edx
10000e79:	c1 e0 02             	shl    eax,0x2
10000e7c:	01 d0                	add    eax,edx
10000e7e:	c1 e0 02             	shl    eax,0x2
10000e81:	01 d0                	add    eax,edx
10000e83:	05 10 00 00 00       	add    eax,0x10	10000e84: R_386_32	floppyTable
10000e88:	8a 00                	mov    al,BYTE PTR [eax]
10000e8a:	0f be c0             	movsx  eax,al
10000e8d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000e90:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000e94:	75 10                	jne    10000ea6 <Floppy::specify(int)+0x5a>
10000e96:	83 ec 0c             	sub    esp,0xc
10000e99:	68 a2 58 00 10       	push   0x100058a2	10000e9a: R_386_32	.text
10000e9e:	e8 fc ff ff ff       	call   10000e9f <Floppy::specify(int)+0x53>	10000e9f: R_386_PC32	KePanic(char const*)
10000ea3:	83 c4 10             	add    esp,0x10
10000ea6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000ea9:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000ead:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000eb0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000eb3:	89 c2                	mov    edx,eax
10000eb5:	c1 e0 03             	shl    eax,0x3
10000eb8:	89 d1                	mov    ecx,edx
10000eba:	29 c1                	sub    ecx,eax
10000ebc:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000ec1:	f7 e9                	imul   ecx
10000ec3:	c1 fa 11             	sar    edx,0x11
10000ec6:	89 c8                	mov    eax,ecx
10000ec8:	c1 f8 1f             	sar    eax,0x1f
10000ecb:	29 c2                	sub    edx,eax
10000ecd:	89 d0                	mov    eax,edx
10000ecf:	83 c0 10             	add    eax,0x10
10000ed2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000ed5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000ed8:	89 d0                	mov    eax,edx
10000eda:	01 c0                	add    eax,eax
10000edc:	01 d0                	add    eax,edx
10000ede:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000ee5:	01 d0                	add    eax,edx
10000ee7:	01 c0                	add    eax,eax
10000ee9:	89 c1                	mov    ecx,eax
10000eeb:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000ef0:	f7 e9                	imul   ecx
10000ef2:	c1 fa 12             	sar    edx,0x12
10000ef5:	89 c8                	mov    eax,ecx
10000ef7:	c1 f8 1f             	sar    eax,0x1f
10000efa:	29 c2                	sub    edx,eax
10000efc:	89 d0                	mov    eax,edx
10000efe:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000f01:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000f08:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000f0f:	83 ec 08             	sub    esp,0x8
10000f12:	6a 03                	push   0x3
10000f14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f17:	e8 fc ff ff ff       	call   10000f18 <Floppy::specify(int)+0xcc>	10000f18: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f1c:	83 c4 10             	add    esp,0x10
10000f1f:	83 ec 0c             	sub    esp,0xc
10000f22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f25:	e8 fc ff ff ff       	call   10000f26 <Floppy::specify(int)+0xda>	10000f26: R_386_PC32	Floppy::wasFailure()
10000f2a:	83 c4 10             	add    esp,0x10
10000f2d:	84 c0                	test   al,al
10000f2f:	74 04                	je     10000f35 <Floppy::specify(int)+0xe9>
10000f31:	b0 00                	mov    al,0x0
10000f33:	eb 6b                	jmp    10000fa0 <Floppy::specify(int)+0x154>
10000f35:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000f38:	c1 e0 04             	shl    eax,0x4
10000f3b:	88 c2                	mov    dl,al
10000f3d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000f40:	09 d0                	or     eax,edx
10000f42:	0f b6 c0             	movzx  eax,al
10000f45:	83 ec 08             	sub    esp,0x8
10000f48:	50                   	push   eax
10000f49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f4c:	e8 fc ff ff ff       	call   10000f4d <Floppy::specify(int)+0x101>	10000f4d: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f51:	83 c4 10             	add    esp,0x10
10000f54:	83 ec 0c             	sub    esp,0xc
10000f57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f5a:	e8 fc ff ff ff       	call   10000f5b <Floppy::specify(int)+0x10f>	10000f5b: R_386_PC32	Floppy::wasFailure()
10000f5f:	83 c4 10             	add    esp,0x10
10000f62:	84 c0                	test   al,al
10000f64:	74 04                	je     10000f6a <Floppy::specify(int)+0x11e>
10000f66:	b0 00                	mov    al,0x0
10000f68:	eb 36                	jmp    10000fa0 <Floppy::specify(int)+0x154>
10000f6a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000f6d:	01 c0                	add    eax,eax
10000f6f:	88 c2                	mov    dl,al
10000f71:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000f74:	09 d0                	or     eax,edx
10000f76:	0f b6 c0             	movzx  eax,al
10000f79:	83 ec 08             	sub    esp,0x8
10000f7c:	50                   	push   eax
10000f7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f80:	e8 fc ff ff ff       	call   10000f81 <Floppy::specify(int)+0x135>	10000f81: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f85:	83 c4 10             	add    esp,0x10
10000f88:	83 ec 0c             	sub    esp,0xc
10000f8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f8e:	e8 fc ff ff ff       	call   10000f8f <Floppy::specify(int)+0x143>	10000f8f: R_386_PC32	Floppy::wasFailure()
10000f93:	83 c4 10             	add    esp,0x10
10000f96:	84 c0                	test   al,al
10000f98:	74 04                	je     10000f9e <Floppy::specify(int)+0x152>
10000f9a:	b0 00                	mov    al,0x0
10000f9c:	eb 02                	jmp    10000fa0 <Floppy::specify(int)+0x154>
10000f9e:	b0 01                	mov    al,0x1
10000fa0:	8d 65 f4             	lea    esp,[ebp-0xc]
10000fa3:	5b                   	pop    ebx
10000fa4:	5e                   	pop    esi
10000fa5:	5f                   	pop    edi
10000fa6:	5d                   	pop    ebp
10000fa7:	c3                   	ret    

10000fa8 <Floppy::select(int, bool)>:
10000fa8:	55                   	push   ebp
10000fa9:	89 e5                	mov    ebp,esp
10000fab:	83 ec 28             	sub    esp,0x28
10000fae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000fb1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fb7:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000fbd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000fc0:	75 27                	jne    10000fe9 <Floppy::select(int, bool)+0x41>
10000fc2:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000fc5:	83 f0 01             	xor    eax,0x1
10000fc8:	84 c0                	test   al,al
10000fca:	74 1d                	je     10000fe9 <Floppy::select(int, bool)+0x41>
10000fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fcf:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000fd5:	83 f8 ff             	cmp    eax,0xffffffff
10000fd8:	74 0f                	je     10000fe9 <Floppy::select(int, bool)+0x41>
10000fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fdd:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000fe4:	e9 34 02 00 00       	jmp    1000121d <Floppy::select(int, bool)+0x275>
10000fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fec:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10000ff2:	83 f0 01             	xor    eax,0x1
10000ff5:	84 c0                	test   al,al
10000ff7:	75 12                	jne    1000100b <Floppy::select(int, bool)+0x63>
10000ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ffc:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10001002:	83 f8 ff             	cmp    eax,0xffffffff
10001005:	0f 85 12 02 00 00    	jne    1000121d <Floppy::select(int, bool)+0x275>
1000100b:	83 ec 08             	sub    esp,0x8
1000100e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001011:	68 c8 58 00 10       	push   0x100058c8	10001012: R_386_32	.text
10001016:	e8 fc ff ff ff       	call   10001017 <Floppy::select(int, bool)+0x6f>	10001017: R_386_PC32	Dbg::kprintf(char const*, ...)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001021:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10001027:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
1000102a:	0f 84 b5 01 00 00    	je     100011e5 <Floppy::select(int, bool)+0x23d>
10001030:	83 ec 0c             	sub    esp,0xc
10001033:	68 d8 58 00 10       	push   0x100058d8	10001034: R_386_32	.text
10001038:	e8 fc ff ff ff       	call   10001039 <Floppy::select(int, bool)+0x91>	10001039: R_386_PC32	Dbg::kprintf(char const*, ...)
1000103d:	83 c4 10             	add    esp,0x10
10001040:	fa                   	cli    
10001041:	a1 00 00 00 00       	mov    eax,ds:0x0	10001042: R_386_32	irqDisableCounter
10001046:	40                   	inc    eax
10001047:	a3 00 00 00 00       	mov    ds:0x0,eax	10001048: R_386_32	irqDisableCounter
1000104c:	83 ec 0c             	sub    esp,0xc
1000104f:	68 e5 58 00 10       	push   0x100058e5	10001050: R_386_32	.text
10001054:	e8 fc ff ff ff       	call   10001055 <Floppy::select(int, bool)+0xad>	10001055: R_386_PC32	Dbg::kprintf(char const*, ...)
10001059:	83 c4 10             	add    esp,0x10
1000105c:	83 ec 08             	sub    esp,0x8
1000105f:	6a 02                	push   0x2
10001061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001064:	e8 fc ff ff ff       	call   10001065 <Floppy::select(int, bool)+0xbd>	10001065: R_386_PC32	Floppy::readPort(FloppyReg)
10001069:	83 c4 10             	add    esp,0x10
1000106c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000106f:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
10001073:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001076:	88 c2                	mov    dl,al
10001078:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000107b:	09 d0                	or     eax,edx
1000107d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001080:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001084:	83 ec 04             	sub    esp,0x4
10001087:	50                   	push   eax
10001088:	6a 02                	push   0x2
1000108a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000108d:	e8 fc ff ff ff       	call   1000108e <Floppy::select(int, bool)+0xe6>	1000108e: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001092:	83 c4 10             	add    esp,0x10
10001095:	83 ec 0c             	sub    esp,0xc
10001098:	68 20 03 00 00       	push   0x320
1000109d:	e8 fc ff ff ff       	call   1000109e <Floppy::select(int, bool)+0xf6>	1000109e: R_386_PC32	milliTenthSleep(unsigned int)
100010a2:	83 c4 10             	add    esp,0x10
100010a5:	83 ec 0c             	sub    esp,0xc
100010a8:	68 f2 58 00 10       	push   0x100058f2	100010a9: R_386_32	.text
100010ad:	e8 fc ff ff ff       	call   100010ae <Floppy::select(int, bool)+0x106>	100010ae: R_386_PC32	Dbg::kprintf(char const*, ...)
100010b2:	83 c4 10             	add    esp,0x10
100010b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100010bb:	83 c2 64             	add    edx,0x64
100010be:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100010c2:	89 d0                	mov    eax,edx
100010c4:	c1 e0 02             	shl    eax,0x2
100010c7:	01 d0                	add    eax,edx
100010c9:	c1 e0 02             	shl    eax,0x2
100010cc:	01 d0                	add    eax,edx
100010ce:	05 10 00 00 00       	add    eax,0x10	100010cf: R_386_32	floppyTable
100010d3:	8a 00                	mov    al,BYTE PTR [eax]
100010d5:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
100010d8:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
100010dc:	75 10                	jne    100010ee <Floppy::select(int, bool)+0x146>
100010de:	83 ec 0c             	sub    esp,0xc
100010e1:	68 00 59 00 10       	push   0x10005900	100010e2: R_386_32	.text
100010e6:	e8 fc ff ff ff       	call   100010e7 <Floppy::select(int, bool)+0x13f>	100010e7: R_386_PC32	KePanic(char const*)
100010eb:	83 c4 10             	add    esp,0x10
100010ee:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
100010f1:	0f b6 c0             	movzx  eax,al
100010f4:	83 ec 04             	sub    esp,0x4
100010f7:	50                   	push   eax
100010f8:	6a 07                	push   0x7
100010fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010fd:	e8 fc ff ff ff       	call   100010fe <Floppy::select(int, bool)+0x156>	100010fe: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001102:	83 c4 10             	add    esp,0x10
10001105:	a1 00 00 00 00       	mov    eax,ds:0x0	10001106: R_386_32	irqDisableCounter
1000110a:	48                   	dec    eax
1000110b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000110c: R_386_32	irqDisableCounter
10001110:	a1 00 00 00 00       	mov    eax,ds:0x0	10001111: R_386_32	irqDisableCounter
10001115:	85 c0                	test   eax,eax
10001117:	75 01                	jne    1000111a <Floppy::select(int, bool)+0x172>
10001119:	fb                   	sti    
1000111a:	83 ec 0c             	sub    esp,0xc
1000111d:	68 2f 59 00 10       	push   0x1000592f	1000111e: R_386_32	.text
10001122:	e8 fc ff ff ff       	call   10001123 <Floppy::select(int, bool)+0x17b>	10001123: R_386_PC32	Dbg::kprintf(char const*, ...)
10001127:	83 c4 10             	add    esp,0x10
1000112a:	83 ec 08             	sub    esp,0x8
1000112d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001130:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001133:	e8 fc ff ff ff       	call   10001134 <Floppy::select(int, bool)+0x18c>	10001134: R_386_PC32	Floppy::specify(int)
10001138:	83 c4 10             	add    esp,0x10
1000113b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000113e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10001141:	83 f0 01             	xor    eax,0x1
10001144:	84 c0                	test   al,al
10001146:	74 25                	je     1000116d <Floppy::select(int, bool)+0x1c5>
10001148:	83 ec 0c             	sub    esp,0xc
1000114b:	68 3c 59 00 10       	push   0x1000593c	1000114c: R_386_32	.text
10001150:	e8 fc ff ff ff       	call   10001151 <Floppy::select(int, bool)+0x1a9>	10001151: R_386_PC32	Dbg::kprintf(char const*, ...)
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 ec 0c             	sub    esp,0xc
1000115b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000115e:	e8 fc ff ff ff       	call   1000115f <Floppy::select(int, bool)+0x1b7>	1000115f: R_386_PC32	Floppy::reset()
10001163:	83 c4 10             	add    esp,0x10
10001166:	b0 00                	mov    al,0x0
10001168:	e9 d2 00 00 00       	jmp    1000123f <Floppy::select(int, bool)+0x297>
1000116d:	83 ec 0c             	sub    esp,0xc
10001170:	68 4d 59 00 10       	push   0x1000594d	10001171: R_386_32	.text
10001175:	e8 fc ff ff ff       	call   10001176 <Floppy::select(int, bool)+0x1ce>	10001176: R_386_PC32	Dbg::kprintf(char const*, ...)
1000117a:	83 c4 10             	add    esp,0x10
1000117d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001180:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001183:	83 c2 68             	add    edx,0x68
10001186:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000118a:	83 ec 0c             	sub    esp,0xc
1000118d:	50                   	push   eax
1000118e:	e8 fc ff ff ff       	call   1000118f <Floppy::select(int, bool)+0x1e7>	1000118f: R_386_PC32	FloppyDrive::calibrate()
10001193:	83 c4 10             	add    esp,0x10
10001196:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001199:	83 ec 0c             	sub    esp,0xc
1000119c:	68 5a 59 00 10       	push   0x1000595a	1000119d: R_386_32	.text
100011a1:	e8 fc ff ff ff       	call   100011a2 <Floppy::select(int, bool)+0x1fa>	100011a2: R_386_PC32	Dbg::kprintf(char const*, ...)
100011a6:	83 c4 10             	add    esp,0x10
100011a9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100011ac:	83 f0 01             	xor    eax,0x1
100011af:	84 c0                	test   al,al
100011b1:	74 22                	je     100011d5 <Floppy::select(int, bool)+0x22d>
100011b3:	83 ec 0c             	sub    esp,0xc
100011b6:	68 68 59 00 10       	push   0x10005968	100011b7: R_386_32	.text
100011bb:	e8 fc ff ff ff       	call   100011bc <Floppy::select(int, bool)+0x214>	100011bc: R_386_PC32	Dbg::kprintf(char const*, ...)
100011c0:	83 c4 10             	add    esp,0x10
100011c3:	83 ec 0c             	sub    esp,0xc
100011c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011c9:	e8 fc ff ff ff       	call   100011ca <Floppy::select(int, bool)+0x222>	100011ca: R_386_PC32	Floppy::reset()
100011ce:	83 c4 10             	add    esp,0x10
100011d1:	b0 00                	mov    al,0x0
100011d3:	eb 6a                	jmp    1000123f <Floppy::select(int, bool)+0x297>
100011d5:	83 ec 0c             	sub    esp,0xc
100011d8:	68 7a 59 00 10       	push   0x1000597a	100011d9: R_386_32	.text
100011dd:	e8 fc ff ff ff       	call   100011de <Floppy::select(int, bool)+0x236>	100011de: R_386_PC32	Dbg::kprintf(char const*, ...)
100011e2:	83 c4 10             	add    esp,0x10
100011e5:	83 ec 0c             	sub    esp,0xc
100011e8:	68 87 59 00 10       	push   0x10005987	100011e9: R_386_32	.text
100011ed:	e8 fc ff ff ff       	call   100011ee <Floppy::select(int, bool)+0x246>	100011ee: R_386_PC32	Dbg::kprintf(char const*, ...)
100011f2:	83 c4 10             	add    esp,0x10
100011f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011f8:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
100011fb:	88 90 92 01 00 00    	mov    BYTE PTR [eax+0x192],dl
10001201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001204:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001207:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
1000120d:	83 ec 0c             	sub    esp,0xc
10001210:	68 94 59 00 10       	push   0x10005994	10001211: R_386_32	.text
10001215:	e8 fc ff ff ff       	call   10001216 <Floppy::select(int, bool)+0x26e>	10001216: R_386_PC32	Dbg::kprintf(char const*, ...)
1000121a:	83 c4 10             	add    esp,0x10
1000121d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001220:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10001226:	84 c0                	test   al,al
10001228:	74 12                	je     1000123c <Floppy::select(int, bool)+0x294>
1000122a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000122d:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10001233:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001236:	75 04                	jne    1000123c <Floppy::select(int, bool)+0x294>
10001238:	b0 01                	mov    al,0x1
1000123a:	eb 02                	jmp    1000123e <Floppy::select(int, bool)+0x296>
1000123c:	b0 00                	mov    al,0x0
1000123e:	90                   	nop
1000123f:	c9                   	leave  
10001240:	c3                   	ret    
10001241:	90                   	nop

10001242 <Floppy::motor(int, bool)>:
10001242:	55                   	push   ebp
10001243:	89 e5                	mov    ebp,esp
10001245:	53                   	push   ebx
10001246:	83 ec 24             	sub    esp,0x24
10001249:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000124c:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000124f:	83 ec 0c             	sub    esp,0xc
10001252:	68 a1 59 00 10       	push   0x100059a1	10001253: R_386_32	.text
10001257:	e8 fc ff ff ff       	call   10001258 <Floppy::motor(int, bool)+0x16>	10001258: R_386_PC32	Dbg::kprintf(char const*, ...)
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001263:	83 ec 04             	sub    esp,0x4
10001266:	50                   	push   eax
10001267:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000126a:	68 b0 59 00 10       	push   0x100059b0	1000126b: R_386_32	.text
1000126f:	e8 fc ff ff ff       	call   10001270 <Floppy::motor(int, bool)+0x2e>	10001270: R_386_PC32	Dbg::kprintf(char const*, ...)
10001274:	83 c4 10             	add    esp,0x10
10001277:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
1000127b:	0f 84 7b 01 00 00    	je     100013fc <Floppy::motor(int, bool)+0x1ba>
10001281:	83 ec 0c             	sub    esp,0xc
10001284:	68 c6 59 00 10       	push   0x100059c6	10001285: R_386_32	.text
10001289:	e8 fc ff ff ff       	call   1000128a <Floppy::motor(int, bool)+0x48>	1000128a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000128e:	83 c4 10             	add    esp,0x10
10001291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001294:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001297:	83 c2 58             	add    edx,0x58
1000129a:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
1000129e:	85 c0                	test   eax,eax
100012a0:	0f 85 21 01 00 00    	jne    100013c7 <Floppy::motor(int, bool)+0x185>
100012a6:	83 ec 0c             	sub    esp,0xc
100012a9:	68 ce 59 00 10       	push   0x100059ce	100012aa: R_386_32	.text
100012ae:	e8 fc ff ff ff       	call   100012af <Floppy::motor(int, bool)+0x6d>	100012af: R_386_PC32	Dbg::kprintf(char const*, ...)
100012b3:	83 c4 10             	add    esp,0x10
100012b6:	fa                   	cli    
100012b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100012b8: R_386_32	irqDisableCounter
100012bc:	40                   	inc    eax
100012bd:	a3 00 00 00 00       	mov    ds:0x0,eax	100012be: R_386_32	irqDisableCounter
100012c2:	83 ec 08             	sub    esp,0x8
100012c5:	6a 02                	push   0x2
100012c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012ca:	e8 fc ff ff ff       	call   100012cb <Floppy::motor(int, bool)+0x89>	100012cb: R_386_PC32	Floppy::readPort(FloppyReg)
100012cf:	83 c4 10             	add    esp,0x10
100012d2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100012d5:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100012d9:	83 ec 08             	sub    esp,0x8
100012dc:	50                   	push   eax
100012dd:	68 e3 59 00 10       	push   0x100059e3	100012de: R_386_32	.text
100012e2:	e8 fc ff ff ff       	call   100012e3 <Floppy::motor(int, bool)+0xa1>	100012e3: R_386_PC32	Dbg::kprintf(char const*, ...)
100012e7:	83 c4 10             	add    esp,0x10
100012ea:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100012ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100012f1:	bb 10 00 00 00       	mov    ebx,0x10
100012f6:	88 c1                	mov    cl,al
100012f8:	d3 e3                	shl    ebx,cl
100012fa:	89 d8                	mov    eax,ebx
100012fc:	09 d0                	or     eax,edx
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	50                   	push   eax
10001302:	68 f1 59 00 10       	push   0x100059f1	10001303: R_386_32	.text
10001307:	e8 fc ff ff ff       	call   10001308 <Floppy::motor(int, bool)+0xc6>	10001308: R_386_PC32	Dbg::kprintf(char const*, ...)
1000130c:	83 c4 10             	add    esp,0x10
1000130f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001312:	ba 10 00 00 00       	mov    edx,0x10
10001317:	88 c1                	mov    cl,al
10001319:	d3 e2                	shl    edx,cl
1000131b:	89 d0                	mov    eax,edx
1000131d:	88 c2                	mov    dl,al
1000131f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10001322:	09 d0                	or     eax,edx
10001324:	0f b6 c0             	movzx  eax,al
10001327:	83 ec 04             	sub    esp,0x4
1000132a:	50                   	push   eax
1000132b:	6a 02                	push   0x2
1000132d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001330:	e8 fc ff ff ff       	call   10001331 <Floppy::motor(int, bool)+0xef>	10001331: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001335:	83 c4 10             	add    esp,0x10
10001338:	a1 00 00 00 00       	mov    eax,ds:0x0	10001339: R_386_32	irqDisableCounter
1000133d:	48                   	dec    eax
1000133e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000133f: R_386_32	irqDisableCounter
10001343:	a1 00 00 00 00       	mov    eax,ds:0x0	10001344: R_386_32	irqDisableCounter
10001348:	85 c0                	test   eax,eax
1000134a:	75 01                	jne    1000134d <Floppy::motor(int, bool)+0x10b>
1000134c:	fb                   	sti    
1000134d:	83 ec 0c             	sub    esp,0xc
10001350:	68 ff 59 00 10       	push   0x100059ff	10001351: R_386_32	.text
10001355:	e8 fc ff ff ff       	call   10001356 <Floppy::motor(int, bool)+0x114>	10001356: R_386_PC32	Dbg::kprintf(char const*, ...)
1000135a:	83 c4 10             	add    esp,0x10
1000135d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001360:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001363:	83 c2 64             	add    edx,0x64
10001366:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000136a:	83 f8 04             	cmp    eax,0x4
1000136d:	75 12                	jne    10001381 <Floppy::motor(int, bool)+0x13f>
1000136f:	83 ec 0c             	sub    esp,0xc
10001372:	68 b8 0b 00 00       	push   0xbb8
10001377:	e8 fc ff ff ff       	call   10001378 <Floppy::motor(int, bool)+0x136>	10001378: R_386_PC32	milliTenthSleep(unsigned int)
1000137c:	83 c4 10             	add    esp,0x10
1000137f:	eb 10                	jmp    10001391 <Floppy::motor(int, bool)+0x14f>
10001381:	83 ec 0c             	sub    esp,0xc
10001384:	68 88 13 00 00       	push   0x1388
10001389:	e8 fc ff ff ff       	call   1000138a <Floppy::motor(int, bool)+0x148>	1000138a: R_386_PC32	milliTenthSleep(unsigned int)
1000138e:	83 c4 10             	add    esp,0x10
10001391:	83 ec 0c             	sub    esp,0xc
10001394:	68 0d 5a 00 10       	push   0x10005a0d	10001395: R_386_32	.text
10001399:	e8 fc ff ff ff       	call   1000139a <Floppy::motor(int, bool)+0x158>	1000139a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000139e:	83 c4 10             	add    esp,0x10
100013a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013a7:	83 c2 58             	add    edx,0x58
100013aa:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100013b2:	83 ec 0c             	sub    esp,0xc
100013b5:	68 1d 5a 00 10       	push   0x10005a1d	100013b6: R_386_32	.text
100013ba:	e8 fc ff ff ff       	call   100013bb <Floppy::motor(int, bool)+0x179>	100013bb: R_386_PC32	Dbg::kprintf(char const*, ...)
100013bf:	83 c4 10             	add    esp,0x10
100013c2:	e9 89 00 00 00       	jmp    10001450 <Floppy::motor(int, bool)+0x20e>
100013c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013cd:	83 c2 58             	add    edx,0x58
100013d0:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100013d4:	83 f8 02             	cmp    eax,0x2
100013d7:	75 77                	jne    10001450 <Floppy::motor(int, bool)+0x20e>
100013d9:	83 ec 0c             	sub    esp,0xc
100013dc:	68 2d 5a 00 10       	push   0x10005a2d	100013dd: R_386_32	.text
100013e1:	e8 fc ff ff ff       	call   100013e2 <Floppy::motor(int, bool)+0x1a0>	100013e2: R_386_PC32	Dbg::kprintf(char const*, ...)
100013e6:	83 c4 10             	add    esp,0x10
100013e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013ef:	83 c2 58             	add    edx,0x58
100013f2:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100013fa:	eb 54                	jmp    10001450 <Floppy::motor(int, bool)+0x20e>
100013fc:	83 ec 0c             	sub    esp,0xc
100013ff:	68 3d 5a 00 10       	push   0x10005a3d	10001400: R_386_32	.text
10001404:	e8 fc ff ff ff       	call   10001405 <Floppy::motor(int, bool)+0x1c3>	10001405: R_386_PC32	Dbg::kprintf(char const*, ...)
10001409:	83 c4 10             	add    esp,0x10
1000140c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000140f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001412:	83 c2 58             	add    edx,0x58
10001415:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001419:	83 f8 01             	cmp    eax,0x1
1000141c:	75 32                	jne    10001450 <Floppy::motor(int, bool)+0x20e>
1000141e:	83 ec 0c             	sub    esp,0xc
10001421:	68 4d 5a 00 10       	push   0x10005a4d	10001422: R_386_32	.text
10001426:	e8 fc ff ff ff       	call   10001427 <Floppy::motor(int, bool)+0x1e5>	10001427: R_386_PC32	Dbg::kprintf(char const*, ...)
1000142b:	83 c4 10             	add    esp,0x10
1000142e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001431:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001434:	83 c2 58             	add    edx,0x58
10001437:	c7 44 90 0c 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x2
1000143f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001442:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001445:	83 c2 5c             	add    edx,0x5c
10001448:	c7 44 90 0c c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x9c4
10001450:	83 ec 0c             	sub    esp,0xc
10001453:	68 5d 5a 00 10       	push   0x10005a5d	10001454: R_386_32	.text
10001458:	e8 fc ff ff ff       	call   10001459 <Floppy::motor(int, bool)+0x217>	10001459: R_386_PC32	Dbg::kprintf(char const*, ...)
1000145d:	83 c4 10             	add    esp,0x10
10001460:	90                   	nop
10001461:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001464:	c9                   	leave  
10001465:	c3                   	ret    

10001466 <FloppyDrive::FloppyDrive()>:
10001466:	55                   	push   ebp
10001467:	89 e5                	mov    ebp,esp
10001469:	83 ec 08             	sub    esp,0x8
1000146c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000146f:	83 ec 04             	sub    esp,0x4
10001472:	68 00 02 00 00       	push   0x200
10001477:	68 72 5a 00 10       	push   0x10005a72	10001478: R_386_32	.text
1000147c:	50                   	push   eax
1000147d:	e8 fc ff ff ff       	call   1000147e <FloppyDrive::FloppyDrive()+0x18>	1000147e: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
10001482:	83 c4 10             	add    esp,0x10
10001485:	ba 08 00 00 00       	mov    edx,0x8	10001486: R_386_32	vtable for FloppyDrive
1000148a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000148d:	89 10                	mov    DWORD PTR [eax],edx
1000148f:	90                   	nop
10001490:	c9                   	leave  
10001491:	c3                   	ret    

10001492 <FloppyDrive::motorOn()>:
10001492:	55                   	push   ebp
10001493:	89 e5                	mov    ebp,esp
10001495:	83 ec 08             	sub    esp,0x8
10001498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000149b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
100014a1:	83 ec 08             	sub    esp,0x8
100014a4:	50                   	push   eax
100014a5:	68 84 5a 00 10       	push   0x10005a84	100014a6: R_386_32	.text
100014aa:	e8 fc ff ff ff       	call   100014ab <FloppyDrive::motorOn()+0x19>	100014ab: R_386_PC32	Dbg::kprintf(char const*, ...)
100014af:	83 c4 10             	add    esp,0x10
100014b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014b5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100014be:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014c4:	83 ec 04             	sub    esp,0x4
100014c7:	6a 01                	push   0x1
100014c9:	52                   	push   edx
100014ca:	50                   	push   eax
100014cb:	e8 fc ff ff ff       	call   100014cc <FloppyDrive::motorOn()+0x3a>	100014cc: R_386_PC32	Floppy::motor(int, bool)
100014d0:	83 c4 10             	add    esp,0x10
100014d3:	90                   	nop
100014d4:	c9                   	leave  
100014d5:	c3                   	ret    

100014d6 <FloppyDrive::motorOff()>:
100014d6:	55                   	push   ebp
100014d7:	89 e5                	mov    ebp,esp
100014d9:	83 ec 08             	sub    esp,0x8
100014dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014df:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100014e8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014ee:	83 ec 04             	sub    esp,0x4
100014f1:	6a 00                	push   0x0
100014f3:	52                   	push   edx
100014f4:	50                   	push   eax
100014f5:	e8 fc ff ff ff       	call   100014f6 <FloppyDrive::motorOff()+0x20>	100014f6: R_386_PC32	Floppy::motor(int, bool)
100014fa:	83 c4 10             	add    esp,0x10
100014fd:	90                   	nop
100014fe:	c9                   	leave  
100014ff:	c3                   	ret    

10001500 <FloppyDrive::floppyConfigure()>:
10001500:	55                   	push   ebp
10001501:	89 e5                	mov    ebp,esp
10001503:	83 ec 18             	sub    esp,0x18
10001506:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
1000150a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
1000150e:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
10001512:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10001519:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001523:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001529:	83 ec 08             	sub    esp,0x8
1000152c:	6a 13                	push   0x13
1000152e:	50                   	push   eax
1000152f:	e8 fc ff ff ff       	call   10001530 <FloppyDrive::floppyConfigure()+0x30>	10001530: R_386_PC32	Floppy::writeCommand(unsigned char)
10001534:	83 c4 10             	add    esp,0x10
10001537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000153a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001540:	83 ec 0c             	sub    esp,0xc
10001543:	50                   	push   eax
10001544:	e8 fc ff ff ff       	call   10001545 <FloppyDrive::floppyConfigure()+0x45>	10001545: R_386_PC32	Floppy::wasFailure()
10001549:	83 c4 10             	add    esp,0x10
1000154c:	84 c0                	test   al,al
1000154e:	74 07                	je     10001557 <FloppyDrive::floppyConfigure()+0x57>
10001550:	b0 00                	mov    al,0x0
10001552:	e9 de 00 00 00       	jmp    10001635 <FloppyDrive::floppyConfigure()+0x135>
10001557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000155a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001560:	83 ec 08             	sub    esp,0x8
10001563:	6a 00                	push   0x0
10001565:	50                   	push   eax
10001566:	e8 fc ff ff ff       	call   10001567 <FloppyDrive::floppyConfigure()+0x67>	10001567: R_386_PC32	Floppy::writeCommand(unsigned char)
1000156b:	83 c4 10             	add    esp,0x10
1000156e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001571:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001577:	83 ec 0c             	sub    esp,0xc
1000157a:	50                   	push   eax
1000157b:	e8 fc ff ff ff       	call   1000157c <FloppyDrive::floppyConfigure()+0x7c>	1000157c: R_386_PC32	Floppy::wasFailure()
10001580:	83 c4 10             	add    esp,0x10
10001583:	84 c0                	test   al,al
10001585:	74 07                	je     1000158e <FloppyDrive::floppyConfigure()+0x8e>
10001587:	b0 00                	mov    al,0x0
10001589:	e9 a7 00 00 00       	jmp    10001635 <FloppyDrive::floppyConfigure()+0x135>
1000158e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001591:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001597:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
1000159b:	c1 e2 06             	shl    edx,0x6
1000159e:	88 d1                	mov    cl,dl
100015a0:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
100015a4:	c1 e2 05             	shl    edx,0x5
100015a7:	09 d1                	or     ecx,edx
100015a9:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
100015ad:	c1 e2 04             	shl    edx,0x4
100015b0:	09 d1                	or     ecx,edx
100015b2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100015b5:	4a                   	dec    edx
100015b6:	09 ca                	or     edx,ecx
100015b8:	0f b6 d2             	movzx  edx,dl
100015bb:	83 ec 08             	sub    esp,0x8
100015be:	52                   	push   edx
100015bf:	50                   	push   eax
100015c0:	e8 fc ff ff ff       	call   100015c1 <FloppyDrive::floppyConfigure()+0xc1>	100015c1: R_386_PC32	Floppy::writeCommand(unsigned char)
100015c5:	83 c4 10             	add    esp,0x10
100015c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015d1:	83 ec 0c             	sub    esp,0xc
100015d4:	50                   	push   eax
100015d5:	e8 fc ff ff ff       	call   100015d6 <FloppyDrive::floppyConfigure()+0xd6>	100015d6: R_386_PC32	Floppy::wasFailure()
100015da:	83 c4 10             	add    esp,0x10
100015dd:	84 c0                	test   al,al
100015df:	74 04                	je     100015e5 <FloppyDrive::floppyConfigure()+0xe5>
100015e1:	b0 00                	mov    al,0x0
100015e3:	eb 50                	jmp    10001635 <FloppyDrive::floppyConfigure()+0x135>
100015e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015e8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100015f1:	0f b6 d2             	movzx  edx,dl
100015f4:	83 ec 08             	sub    esp,0x8
100015f7:	52                   	push   edx
100015f8:	50                   	push   eax
100015f9:	e8 fc ff ff ff       	call   100015fa <FloppyDrive::floppyConfigure()+0xfa>	100015fa: R_386_PC32	Floppy::writeCommand(unsigned char)
100015fe:	83 c4 10             	add    esp,0x10
10001601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001604:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000160a:	83 ec 0c             	sub    esp,0xc
1000160d:	50                   	push   eax
1000160e:	e8 fc ff ff ff       	call   1000160f <FloppyDrive::floppyConfigure()+0x10f>	1000160f: R_386_PC32	Floppy::wasFailure()
10001613:	83 c4 10             	add    esp,0x10
10001616:	84 c0                	test   al,al
10001618:	74 04                	je     1000161e <FloppyDrive::floppyConfigure()+0x11e>
1000161a:	b0 00                	mov    al,0x0
1000161c:	eb 17                	jmp    10001635 <FloppyDrive::floppyConfigure()+0x135>
1000161e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001621:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001627:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
1000162a:	83 f2 01             	xor    edx,0x1
1000162d:	88 90 91 01 00 00    	mov    BYTE PTR [eax+0x191],dl
10001633:	b0 01                	mov    al,0x1
10001635:	c9                   	leave  
10001636:	c3                   	ret    
10001637:	90                   	nop

10001638 <FloppyDrive::open(int, int, void*)>:
10001638:	b8 00 00 00 00       	mov    eax,0x0
1000163d:	c3                   	ret    

1000163e <FloppyDrive::_open(int, int, void*)>:
1000163e:	55                   	push   ebp
1000163f:	89 e5                	mov    ebp,esp
10001641:	83 ec 08             	sub    esp,0x8
10001644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001647:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000164a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10001650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001653:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001656:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
1000165c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000165f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001665:	83 ec 08             	sub    esp,0x8
10001668:	50                   	push   eax
10001669:	68 a3 5a 00 10       	push   0x10005aa3	1000166a: R_386_32	.text
1000166e:	e8 fc ff ff ff       	call   1000166f <FloppyDrive::_open(int, int, void*)+0x31>	1000166f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001673:	83 c4 10             	add    esp,0x10
10001676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001679:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
10001683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001686:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
1000168d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001690:	c6 80 69 01 00 00 01 	mov    BYTE PTR [eax+0x169],0x1
10001697:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000169a:	89 d0                	mov    eax,edx
1000169c:	c1 e0 02             	shl    eax,0x2
1000169f:	01 d0                	add    eax,edx
100016a1:	c1 e0 02             	shl    eax,0x2
100016a4:	01 d0                	add    eax,edx
100016a6:	05 11 00 00 00       	add    eax,0x11	100016a7: R_386_32	floppyTable
100016ab:	8a 00                	mov    al,BYTE PTR [eax]
100016ad:	0f b6 c8             	movzx  ecx,al
100016b0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100016b3:	89 d0                	mov    eax,edx
100016b5:	c1 e0 02             	shl    eax,0x2
100016b8:	01 d0                	add    eax,edx
100016ba:	c1 e0 02             	shl    eax,0x2
100016bd:	01 d0                	add    eax,edx
100016bf:	05 13 00 00 00       	add    eax,0x13	100016c0: R_386_32	floppyTable
100016c4:	8a 00                	mov    al,BYTE PTR [eax]
100016c6:	0f b6 c0             	movzx  eax,al
100016c9:	0f af c8             	imul   ecx,eax
100016cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100016cf:	89 d0                	mov    eax,edx
100016d1:	c1 e0 02             	shl    eax,0x2
100016d4:	01 d0                	add    eax,edx
100016d6:	c1 e0 02             	shl    eax,0x2
100016d9:	01 d0                	add    eax,edx
100016db:	05 12 00 00 00       	add    eax,0x12	100016dc: R_386_32	floppyTable
100016e0:	8a 00                	mov    al,BYTE PTR [eax]
100016e2:	0f b6 c0             	movzx  eax,al
100016e5:	0f af c1             	imul   eax,ecx
100016e8:	89 c2                	mov    edx,eax
100016ea:	c1 ea 1f             	shr    edx,0x1f
100016ed:	01 d0                	add    eax,edx
100016ef:	d1 f8                	sar    eax,1
100016f1:	99                   	cdq    
100016f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100016f5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
100016fb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
10001701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001704:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
1000170a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001710:	83 ec 04             	sub    esp,0x4
10001713:	52                   	push   edx
10001714:	50                   	push   eax
10001715:	68 ad 5a 00 10       	push   0x10005aad	10001716: R_386_32	.text
1000171a:	e8 fc ff ff ff       	call   1000171b <FloppyDrive::_open(int, int, void*)+0xdd>	1000171b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000171f:	83 c4 10             	add    esp,0x10
10001722:	83 ec 0c             	sub    esp,0xc
10001725:	68 bf 5a 00 10       	push   0x10005abf	10001726: R_386_32	.text
1000172a:	e8 fc ff ff ff       	call   1000172b <FloppyDrive::_open(int, int, void*)+0xed>	1000172b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000172f:	83 c4 10             	add    esp,0x10
10001732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001735:	83 ec 0c             	sub    esp,0xc
10001738:	50                   	push   eax
10001739:	e8 fc ff ff ff       	call   1000173a <FloppyDrive::_open(int, int, void*)+0xfc>	1000173a: R_386_PC32	PhysicalDisk::startCache()
1000173e:	83 c4 10             	add    esp,0x10
10001741:	83 ec 0c             	sub    esp,0xc
10001744:	68 d5 5a 00 10       	push   0x10005ad5	10001745: R_386_32	.text
10001749:	e8 fc ff ff ff       	call   1000174a <FloppyDrive::_open(int, int, void*)+0x10c>	1000174a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000174e:	83 c4 10             	add    esp,0x10
10001751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001754:	83 ec 0c             	sub    esp,0xc
10001757:	50                   	push   eax
10001758:	e8 fc ff ff ff       	call   10001759 <FloppyDrive::_open(int, int, void*)+0x11b>	10001759: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
1000175d:	83 c4 10             	add    esp,0x10
10001760:	83 ec 0c             	sub    esp,0xc
10001763:	68 eb 5a 00 10       	push   0x10005aeb	10001764: R_386_32	.text
10001768:	e8 fc ff ff ff       	call   10001769 <FloppyDrive::_open(int, int, void*)+0x12b>	10001769: R_386_PC32	Dbg::kprintf(char const*, ...)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	b8 00 00 00 00       	mov    eax,0x0
10001775:	c9                   	leave  
10001776:	c3                   	ret    
10001777:	90                   	nop

10001778 <FloppyDrive::close(int, int, void*)>:
10001778:	b8 00 00 00 00       	mov    eax,0x0
1000177d:	c3                   	ret    

1000177e <FloppyDrive::unselect()>:
1000177e:	55                   	push   ebp
1000177f:	89 e5                	mov    ebp,esp
10001781:	83 ec 08             	sub    esp,0x8
10001784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001787:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000178d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001790:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001796:	83 ec 04             	sub    esp,0x4
10001799:	6a 00                	push   0x0
1000179b:	52                   	push   edx
1000179c:	50                   	push   eax
1000179d:	e8 fc ff ff ff       	call   1000179e <FloppyDrive::unselect()+0x20>	1000179e: R_386_PC32	Floppy::select(int, bool)
100017a2:	83 c4 10             	add    esp,0x10
100017a5:	90                   	nop
100017a6:	c9                   	leave  
100017a7:	c3                   	ret    

100017a8 <FloppyDrive::select()>:
100017a8:	55                   	push   ebp
100017a9:	89 e5                	mov    ebp,esp
100017ab:	83 ec 18             	sub    esp,0x18
100017ae:	83 ec 0c             	sub    esp,0xc
100017b1:	68 01 5b 00 10       	push   0x10005b01	100017b2: R_386_32	.text
100017b6:	e8 fc ff ff ff       	call   100017b7 <FloppyDrive::select()+0xf>	100017b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100017bb:	83 c4 10             	add    esp,0x10
100017be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017c1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017c7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100017ca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100017d0:	83 ec 04             	sub    esp,0x4
100017d3:	6a 01                	push   0x1
100017d5:	52                   	push   edx
100017d6:	50                   	push   eax
100017d7:	e8 fc ff ff ff       	call   100017d8 <FloppyDrive::select()+0x30>	100017d8: R_386_PC32	Floppy::select(int, bool)
100017dc:	83 c4 10             	add    esp,0x10
100017df:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100017e2:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100017e6:	75 22                	jne    1000180a <FloppyDrive::select()+0x62>
100017e8:	83 ec 0c             	sub    esp,0xc
100017eb:	68 18 5b 00 10       	push   0x10005b18	100017ec: R_386_32	.text
100017f0:	e8 fc ff ff ff       	call   100017f1 <FloppyDrive::select()+0x49>	100017f1: R_386_PC32	Dbg::kprintf(char const*, ...)
100017f5:	83 c4 10             	add    esp,0x10
100017f8:	83 ec 0c             	sub    esp,0xc
100017fb:	68 dc 05 00 00       	push   0x5dc
10001800:	e8 fc ff ff ff       	call   10001801 <FloppyDrive::select()+0x59>	10001801: R_386_PC32	milliTenthSleep(unsigned int)
10001805:	83 c4 10             	add    esp,0x10
10001808:	eb a4                	jmp    100017ae <FloppyDrive::select()+0x6>
1000180a:	90                   	nop
1000180b:	c9                   	leave  
1000180c:	c3                   	ret    
1000180d:	90                   	nop

1000180e <FloppyDrive::seek(int, int)>:
1000180e:	55                   	push   ebp
1000180f:	89 e5                	mov    ebp,esp
10001811:	83 ec 18             	sub    esp,0x18
10001814:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000181b:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
1000181f:	7e 33                	jle    10001854 <FloppyDrive::seek(int, int)+0x46>
10001821:	83 ec 0c             	sub    esp,0xc
10001824:	68 38 5b 00 10       	push   0x10005b38	10001825: R_386_32	.text
10001829:	e8 fc ff ff ff       	call   1000182a <FloppyDrive::seek(int, int)+0x1c>	1000182a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000182e:	83 c4 10             	add    esp,0x10
10001831:	83 ec 0c             	sub    esp,0xc
10001834:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001837:	e8 fc ff ff ff       	call   10001838 <FloppyDrive::seek(int, int)+0x2a>	10001838: R_386_PC32	FloppyDrive::motorOff()
1000183c:	83 c4 10             	add    esp,0x10
1000183f:	83 ec 0c             	sub    esp,0xc
10001842:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001845:	e8 fc ff ff ff       	call   10001846 <FloppyDrive::seek(int, int)+0x38>	10001846: R_386_PC32	FloppyDrive::unselect()
1000184a:	83 c4 10             	add    esp,0x10
1000184d:	b0 00                	mov    al,0x0
1000184f:	e9 da 02 00 00       	jmp    10001b2e <FloppyDrive::seek(int, int)+0x320>
10001854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001857:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000185d:	83 ec 08             	sub    esp,0x8
10001860:	50                   	push   eax
10001861:	68 5f 5b 00 10       	push   0x10005b5f	10001862: R_386_32	.text
10001866:	e8 fc ff ff ff       	call   10001867 <FloppyDrive::seek(int, int)+0x59>	10001867: R_386_PC32	Dbg::kprintf(char const*, ...)
1000186b:	83 c4 10             	add    esp,0x10
1000186e:	83 ec 0c             	sub    esp,0xc
10001871:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001874:	e8 fc ff ff ff       	call   10001875 <FloppyDrive::seek(int, int)+0x67>	10001875: R_386_PC32	FloppyDrive::select()
10001879:	83 c4 10             	add    esp,0x10
1000187c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000187f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001885:	83 ec 08             	sub    esp,0x8
10001888:	50                   	push   eax
10001889:	68 6f 5b 00 10       	push   0x10005b6f	1000188a: R_386_32	.text
1000188e:	e8 fc ff ff ff       	call   1000188f <FloppyDrive::seek(int, int)+0x81>	1000188f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001893:	83 c4 10             	add    esp,0x10
10001896:	83 ec 0c             	sub    esp,0xc
10001899:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000189c:	e8 fc ff ff ff       	call   1000189d <FloppyDrive::seek(int, int)+0x8f>	1000189d: R_386_PC32	FloppyDrive::motorOn()
100018a1:	83 c4 10             	add    esp,0x10
100018a4:	83 ec 0c             	sub    esp,0xc
100018a7:	68 7e 5b 00 10       	push   0x10005b7e	100018a8: R_386_32	.text
100018ac:	e8 fc ff ff ff       	call   100018ad <FloppyDrive::seek(int, int)+0x9f>	100018ad: R_386_PC32	Dbg::kprintf(char const*, ...)
100018b1:	83 c4 10             	add    esp,0x10
100018b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018bd:	83 ec 08             	sub    esp,0x8
100018c0:	6a 0f                	push   0xf
100018c2:	50                   	push   eax
100018c3:	e8 fc ff ff ff       	call   100018c4 <FloppyDrive::seek(int, int)+0xb6>	100018c4: R_386_PC32	Floppy::writeCommand(unsigned char)
100018c8:	83 c4 10             	add    esp,0x10
100018cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018d4:	83 ec 0c             	sub    esp,0xc
100018d7:	50                   	push   eax
100018d8:	e8 fc ff ff ff       	call   100018d9 <FloppyDrive::seek(int, int)+0xcb>	100018d9: R_386_PC32	Floppy::wasFailure()
100018dd:	83 c4 10             	add    esp,0x10
100018e0:	84 c0                	test   al,al
100018e2:	74 3d                	je     10001921 <FloppyDrive::seek(int, int)+0x113>
100018e4:	83 ec 0c             	sub    esp,0xc
100018e7:	68 89 5b 00 10       	push   0x10005b89	100018e8: R_386_32	.text
100018ec:	e8 fc ff ff ff       	call   100018ed <FloppyDrive::seek(int, int)+0xdf>	100018ed: R_386_PC32	Dbg::kprintf(char const*, ...)
100018f1:	83 c4 10             	add    esp,0x10
100018f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018fd:	83 ec 0c             	sub    esp,0xc
10001900:	50                   	push   eax
10001901:	e8 fc ff ff ff       	call   10001902 <FloppyDrive::seek(int, int)+0xf4>	10001902: R_386_PC32	Floppy::reset()
10001906:	83 c4 10             	add    esp,0x10
10001909:	83 ec 0c             	sub    esp,0xc
1000190c:	68 95 5b 00 10       	push   0x10005b95	1000190d: R_386_32	.text
10001911:	e8 fc ff ff ff       	call   10001912 <FloppyDrive::seek(int, int)+0x104>	10001912: R_386_PC32	Dbg::kprintf(char const*, ...)
10001916:	83 c4 10             	add    esp,0x10
10001919:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000191c:	e9 fa fe ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
10001921:	83 ec 0c             	sub    esp,0xc
10001924:	68 a1 5b 00 10       	push   0x10005ba1	10001925: R_386_32	.text
10001929:	e8 fc ff ff ff       	call   1000192a <FloppyDrive::seek(int, int)+0x11c>	1000192a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000192e:	83 c4 10             	add    esp,0x10
10001931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001934:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000193a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001944:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000194a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000194d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001953:	88 d1                	mov    cl,dl
10001955:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001958:	c1 e2 02             	shl    edx,0x2
1000195b:	09 ca                	or     edx,ecx
1000195d:	0f b6 d2             	movzx  edx,dl
10001960:	83 ec 08             	sub    esp,0x8
10001963:	52                   	push   edx
10001964:	50                   	push   eax
10001965:	e8 fc ff ff ff       	call   10001966 <FloppyDrive::seek(int, int)+0x158>	10001966: R_386_PC32	Floppy::writeCommand(unsigned char)
1000196a:	83 c4 10             	add    esp,0x10
1000196d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001970:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001976:	83 ec 0c             	sub    esp,0xc
10001979:	50                   	push   eax
1000197a:	e8 fc ff ff ff       	call   1000197b <FloppyDrive::seek(int, int)+0x16d>	1000197b: R_386_PC32	Floppy::wasFailure()
1000197f:	83 c4 10             	add    esp,0x10
10001982:	84 c0                	test   al,al
10001984:	74 1d                	je     100019a3 <FloppyDrive::seek(int, int)+0x195>
10001986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001989:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000198f:	83 ec 0c             	sub    esp,0xc
10001992:	50                   	push   eax
10001993:	e8 fc ff ff ff       	call   10001994 <FloppyDrive::seek(int, int)+0x186>	10001994: R_386_PC32	Floppy::reset()
10001998:	83 c4 10             	add    esp,0x10
1000199b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000199e:	e9 78 fe ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
100019a3:	83 ec 0c             	sub    esp,0xc
100019a6:	68 ac 5b 00 10       	push   0x10005bac	100019a7: R_386_32	.text
100019ab:	e8 fc ff ff ff       	call   100019ac <FloppyDrive::seek(int, int)+0x19e>	100019ac: R_386_PC32	Dbg::kprintf(char const*, ...)
100019b0:	83 c4 10             	add    esp,0x10
100019b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100019bf:	0f b6 d2             	movzx  edx,dl
100019c2:	83 ec 08             	sub    esp,0x8
100019c5:	52                   	push   edx
100019c6:	50                   	push   eax
100019c7:	e8 fc ff ff ff       	call   100019c8 <FloppyDrive::seek(int, int)+0x1ba>	100019c8: R_386_PC32	Floppy::writeCommand(unsigned char)
100019cc:	83 c4 10             	add    esp,0x10
100019cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019d2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019d8:	83 ec 0c             	sub    esp,0xc
100019db:	50                   	push   eax
100019dc:	e8 fc ff ff ff       	call   100019dd <FloppyDrive::seek(int, int)+0x1cf>	100019dd: R_386_PC32	Floppy::wasFailure()
100019e1:	83 c4 10             	add    esp,0x10
100019e4:	84 c0                	test   al,al
100019e6:	74 1d                	je     10001a05 <FloppyDrive::seek(int, int)+0x1f7>
100019e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019f1:	83 ec 0c             	sub    esp,0xc
100019f4:	50                   	push   eax
100019f5:	e8 fc ff ff ff       	call   100019f6 <FloppyDrive::seek(int, int)+0x1e8>	100019f6: R_386_PC32	Floppy::reset()
100019fa:	83 c4 10             	add    esp,0x10
100019fd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a00:	e9 16 fe ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
10001a05:	83 ec 0c             	sub    esp,0xc
10001a08:	68 b7 5b 00 10       	push   0x10005bb7	10001a09: R_386_32	.text
10001a0d:	e8 fc ff ff ff       	call   10001a0e <FloppyDrive::seek(int, int)+0x200>	10001a0e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a12:	83 c4 10             	add    esp,0x10
10001a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a18:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a1e:	83 ec 08             	sub    esp,0x8
10001a21:	68 dc 05 00 00       	push   0x5dc
10001a26:	50                   	push   eax
10001a27:	e8 fc ff ff ff       	call   10001a28 <FloppyDrive::seek(int, int)+0x21a>	10001a28: R_386_PC32	Floppy::waitIRQ(int)
10001a2c:	83 c4 10             	add    esp,0x10
10001a2f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001a32:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001a35:	83 f0 01             	xor    eax,0x1
10001a38:	84 c0                	test   al,al
10001a3a:	74 2d                	je     10001a69 <FloppyDrive::seek(int, int)+0x25b>
10001a3c:	83 ec 0c             	sub    esp,0xc
10001a3f:	68 c2 5b 00 10       	push   0x10005bc2	10001a40: R_386_32	.text
10001a44:	e8 fc ff ff ff       	call   10001a45 <FloppyDrive::seek(int, int)+0x237>	10001a45: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a49:	83 c4 10             	add    esp,0x10
10001a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a4f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a55:	83 ec 0c             	sub    esp,0xc
10001a58:	50                   	push   eax
10001a59:	e8 fc ff ff ff       	call   10001a5a <FloppyDrive::seek(int, int)+0x24c>	10001a5a: R_386_PC32	Floppy::reset()
10001a5e:	83 c4 10             	add    esp,0x10
10001a61:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a64:	e9 b2 fd ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
10001a69:	83 ec 0c             	sub    esp,0xc
10001a6c:	68 d0 5b 00 10       	push   0x10005bd0	10001a6d: R_386_32	.text
10001a71:	e8 fc ff ff ff       	call   10001a72 <FloppyDrive::seek(int, int)+0x264>	10001a72: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a76:	83 c4 10             	add    esp,0x10
10001a79:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001a80:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a8a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a90:	83 ec 04             	sub    esp,0x4
10001a93:	8d 55 e8             	lea    edx,[ebp-0x18]
10001a96:	52                   	push   edx
10001a97:	8d 55 ec             	lea    edx,[ebp-0x14]
10001a9a:	52                   	push   edx
10001a9b:	50                   	push   eax
10001a9c:	e8 fc ff ff ff       	call   10001a9d <FloppyDrive::seek(int, int)+0x28f>	10001a9d: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001aa1:	83 c4 10             	add    esp,0x10
10001aa4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001aa7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001aaa:	83 f0 01             	xor    eax,0x1
10001aad:	84 c0                	test   al,al
10001aaf:	74 15                	je     10001ac6 <FloppyDrive::seek(int, int)+0x2b8>
10001ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ab4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001aba:	83 ec 0c             	sub    esp,0xc
10001abd:	50                   	push   eax
10001abe:	e8 fc ff ff ff       	call   10001abf <FloppyDrive::seek(int, int)+0x2b1>	10001abf: R_386_PC32	Floppy::reset()
10001ac3:	83 c4 10             	add    esp,0x10
10001ac6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001ac9:	83 f0 01             	xor    eax,0x1
10001acc:	84 c0                	test   al,al
10001ace:	75 08                	jne    10001ad8 <FloppyDrive::seek(int, int)+0x2ca>
10001ad0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001ad3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001ad6:	74 08                	je     10001ae0 <FloppyDrive::seek(int, int)+0x2d2>
10001ad8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001adb:	e9 3b fd ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
10001ae0:	83 ec 0c             	sub    esp,0xc
10001ae3:	68 db 5b 00 10       	push   0x10005bdb	10001ae4: R_386_32	.text
10001ae8:	e8 fc ff ff ff       	call   10001ae9 <FloppyDrive::seek(int, int)+0x2db>	10001ae9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001aed:	83 c4 10             	add    esp,0x10
10001af0:	83 ec 0c             	sub    esp,0xc
10001af3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001af6:	e8 fc ff ff ff       	call   10001af7 <FloppyDrive::seek(int, int)+0x2e9>	10001af7: R_386_PC32	FloppyDrive::motorOff()
10001afb:	83 c4 10             	add    esp,0x10
10001afe:	83 ec 0c             	sub    esp,0xc
10001b01:	68 e8 5b 00 10       	push   0x10005be8	10001b02: R_386_32	.text
10001b06:	e8 fc ff ff ff       	call   10001b07 <FloppyDrive::seek(int, int)+0x2f9>	10001b07: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b0b:	83 c4 10             	add    esp,0x10
10001b0e:	83 ec 0c             	sub    esp,0xc
10001b11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b14:	e8 fc ff ff ff       	call   10001b15 <FloppyDrive::seek(int, int)+0x307>	10001b15: R_386_PC32	FloppyDrive::unselect()
10001b19:	83 c4 10             	add    esp,0x10
10001b1c:	83 ec 0c             	sub    esp,0xc
10001b1f:	68 f5 5b 00 10       	push   0x10005bf5	10001b20: R_386_32	.text
10001b24:	e8 fc ff ff ff       	call   10001b25 <FloppyDrive::seek(int, int)+0x317>	10001b25: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b29:	83 c4 10             	add    esp,0x10
10001b2c:	b0 01                	mov    al,0x1
10001b2e:	c9                   	leave  
10001b2f:	c3                   	ret    

10001b30 <FloppyDrive::calibrate()>:
10001b30:	55                   	push   ebp
10001b31:	89 e5                	mov    ebp,esp
10001b33:	83 ec 18             	sub    esp,0x18
10001b36:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001b3d:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001b41:	7e 25                	jle    10001b68 <FloppyDrive::calibrate()+0x38>
10001b43:	83 ec 0c             	sub    esp,0xc
10001b46:	68 04 5c 00 10       	push   0x10005c04	10001b47: R_386_32	.text
10001b4b:	e8 fc ff ff ff       	call   10001b4c <FloppyDrive::calibrate()+0x1c>	10001b4c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b50:	83 c4 10             	add    esp,0x10
10001b53:	83 ec 0c             	sub    esp,0xc
10001b56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b59:	e8 fc ff ff ff       	call   10001b5a <FloppyDrive::calibrate()+0x2a>	10001b5a: R_386_PC32	FloppyDrive::motorOff()
10001b5e:	83 c4 10             	add    esp,0x10
10001b61:	b0 00                	mov    al,0x0
10001b63:	e9 01 02 00 00       	jmp    10001d69 <FloppyDrive::calibrate()+0x239>
10001b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b6b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001b71:	83 ec 08             	sub    esp,0x8
10001b74:	50                   	push   eax
10001b75:	68 30 5c 00 10       	push   0x10005c30	10001b76: R_386_32	.text
10001b7a:	e8 fc ff ff ff       	call   10001b7b <FloppyDrive::calibrate()+0x4b>	10001b7b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b7f:	83 c4 10             	add    esp,0x10
10001b82:	83 ec 0c             	sub    esp,0xc
10001b85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b88:	e8 fc ff ff ff       	call   10001b89 <FloppyDrive::calibrate()+0x59>	10001b89: R_386_PC32	FloppyDrive::motorOn()
10001b8d:	83 c4 10             	add    esp,0x10
10001b90:	83 ec 0c             	sub    esp,0xc
10001b93:	68 3e 5c 00 10       	push   0x10005c3e	10001b94: R_386_32	.text
10001b98:	e8 fc ff ff ff       	call   10001b99 <FloppyDrive::calibrate()+0x69>	10001b99: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b9d:	83 c4 10             	add    esp,0x10
10001ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ba3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ba9:	83 ec 08             	sub    esp,0x8
10001bac:	6a 07                	push   0x7
10001bae:	50                   	push   eax
10001baf:	e8 fc ff ff ff       	call   10001bb0 <FloppyDrive::calibrate()+0x80>	10001bb0: R_386_PC32	Floppy::writeCommand(unsigned char)
10001bb4:	83 c4 10             	add    esp,0x10
10001bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bc0:	83 ec 0c             	sub    esp,0xc
10001bc3:	50                   	push   eax
10001bc4:	e8 fc ff ff ff       	call   10001bc5 <FloppyDrive::calibrate()+0x95>	10001bc5: R_386_PC32	Floppy::wasFailure()
10001bc9:	83 c4 10             	add    esp,0x10
10001bcc:	84 c0                	test   al,al
10001bce:	74 1d                	je     10001bed <FloppyDrive::calibrate()+0xbd>
10001bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bd9:	83 ec 0c             	sub    esp,0xc
10001bdc:	50                   	push   eax
10001bdd:	e8 fc ff ff ff       	call   10001bde <FloppyDrive::calibrate()+0xae>	10001bde: R_386_PC32	Floppy::reset()
10001be2:	83 c4 10             	add    esp,0x10
10001be5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001be8:	e9 50 ff ff ff       	jmp    10001b3d <FloppyDrive::calibrate()+0xd>
10001bed:	83 ec 0c             	sub    esp,0xc
10001bf0:	68 47 5c 00 10       	push   0x10005c47	10001bf1: R_386_32	.text
10001bf5:	e8 fc ff ff ff       	call   10001bf6 <FloppyDrive::calibrate()+0xc6>	10001bf6: R_386_PC32	Dbg::kprintf(char const*, ...)
10001bfa:	83 c4 10             	add    esp,0x10
10001bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c00:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c06:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c10:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c16:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001c19:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001c1f:	0f b6 d2             	movzx  edx,dl
10001c22:	83 ec 08             	sub    esp,0x8
10001c25:	52                   	push   edx
10001c26:	50                   	push   eax
10001c27:	e8 fc ff ff ff       	call   10001c28 <FloppyDrive::calibrate()+0xf8>	10001c28: R_386_PC32	Floppy::writeCommand(unsigned char)
10001c2c:	83 c4 10             	add    esp,0x10
10001c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c38:	83 ec 0c             	sub    esp,0xc
10001c3b:	50                   	push   eax
10001c3c:	e8 fc ff ff ff       	call   10001c3d <FloppyDrive::calibrate()+0x10d>	10001c3d: R_386_PC32	Floppy::wasFailure()
10001c41:	83 c4 10             	add    esp,0x10
10001c44:	84 c0                	test   al,al
10001c46:	74 1d                	je     10001c65 <FloppyDrive::calibrate()+0x135>
10001c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c51:	83 ec 0c             	sub    esp,0xc
10001c54:	50                   	push   eax
10001c55:	e8 fc ff ff ff       	call   10001c56 <FloppyDrive::calibrate()+0x126>	10001c56: R_386_PC32	Floppy::reset()
10001c5a:	83 c4 10             	add    esp,0x10
10001c5d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c60:	e9 d8 fe ff ff       	jmp    10001b3d <FloppyDrive::calibrate()+0xd>
10001c65:	83 ec 0c             	sub    esp,0xc
10001c68:	68 50 5c 00 10       	push   0x10005c50	10001c69: R_386_32	.text
10001c6d:	e8 fc ff ff ff       	call   10001c6e <FloppyDrive::calibrate()+0x13e>	10001c6e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c72:	83 c4 10             	add    esp,0x10
10001c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c78:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c7e:	83 ec 08             	sub    esp,0x8
10001c81:	68 dc 05 00 00       	push   0x5dc
10001c86:	50                   	push   eax
10001c87:	e8 fc ff ff ff       	call   10001c88 <FloppyDrive::calibrate()+0x158>	10001c88: R_386_PC32	Floppy::waitIRQ(int)
10001c8c:	83 c4 10             	add    esp,0x10
10001c8f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001c92:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001c95:	83 f0 01             	xor    eax,0x1
10001c98:	84 c0                	test   al,al
10001c9a:	74 1d                	je     10001cb9 <FloppyDrive::calibrate()+0x189>
10001c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c9f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ca5:	83 ec 0c             	sub    esp,0xc
10001ca8:	50                   	push   eax
10001ca9:	e8 fc ff ff ff       	call   10001caa <FloppyDrive::calibrate()+0x17a>	10001caa: R_386_PC32	Floppy::reset()
10001cae:	83 c4 10             	add    esp,0x10
10001cb1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001cb4:	e9 84 fe ff ff       	jmp    10001b3d <FloppyDrive::calibrate()+0xd>
10001cb9:	83 ec 0c             	sub    esp,0xc
10001cbc:	68 59 5c 00 10       	push   0x10005c59	10001cbd: R_386_32	.text
10001cc1:	e8 fc ff ff ff       	call   10001cc2 <FloppyDrive::calibrate()+0x192>	10001cc2: R_386_PC32	Dbg::kprintf(char const*, ...)
10001cc6:	83 c4 10             	add    esp,0x10
10001cc9:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001cd0:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cda:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ce0:	83 ec 04             	sub    esp,0x4
10001ce3:	8d 55 e8             	lea    edx,[ebp-0x18]
10001ce6:	52                   	push   edx
10001ce7:	8d 55 ec             	lea    edx,[ebp-0x14]
10001cea:	52                   	push   edx
10001ceb:	50                   	push   eax
10001cec:	e8 fc ff ff ff       	call   10001ced <FloppyDrive::calibrate()+0x1bd>	10001ced: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001cf1:	83 c4 10             	add    esp,0x10
10001cf4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001cf7:	83 ec 0c             	sub    esp,0xc
10001cfa:	68 62 5c 00 10       	push   0x10005c62	10001cfb: R_386_32	.text
10001cff:	e8 fc ff ff ff       	call   10001d00 <FloppyDrive::calibrate()+0x1d0>	10001d00: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d04:	83 c4 10             	add    esp,0x10
10001d07:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001d0a:	83 f0 01             	xor    eax,0x1
10001d0d:	84 c0                	test   al,al
10001d0f:	74 15                	je     10001d26 <FloppyDrive::calibrate()+0x1f6>
10001d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d14:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d1a:	83 ec 0c             	sub    esp,0xc
10001d1d:	50                   	push   eax
10001d1e:	e8 fc ff ff ff       	call   10001d1f <FloppyDrive::calibrate()+0x1ef>	10001d1f: R_386_PC32	Floppy::reset()
10001d23:	83 c4 10             	add    esp,0x10
10001d26:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001d29:	83 f0 01             	xor    eax,0x1
10001d2c:	84 c0                	test   al,al
10001d2e:	75 11                	jne    10001d41 <FloppyDrive::calibrate()+0x211>
10001d30:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001d33:	85 c0                	test   eax,eax
10001d35:	75 0a                	jne    10001d41 <FloppyDrive::calibrate()+0x211>
10001d37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001d3a:	83 e0 20             	and    eax,0x20
10001d3d:	85 c0                	test   eax,eax
10001d3f:	75 08                	jne    10001d49 <FloppyDrive::calibrate()+0x219>
10001d41:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001d44:	e9 f4 fd ff ff       	jmp    10001b3d <FloppyDrive::calibrate()+0xd>
10001d49:	83 ec 0c             	sub    esp,0xc
10001d4c:	68 6b 5c 00 10       	push   0x10005c6b	10001d4d: R_386_32	.text
10001d51:	e8 fc ff ff ff       	call   10001d52 <FloppyDrive::calibrate()+0x222>	10001d52: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d56:	83 c4 10             	add    esp,0x10
10001d59:	83 ec 0c             	sub    esp,0xc
10001d5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d5f:	e8 fc ff ff ff       	call   10001d60 <FloppyDrive::calibrate()+0x230>	10001d60: R_386_PC32	FloppyDrive::motorOff()
10001d64:	83 c4 10             	add    esp,0x10
10001d67:	b0 01                	mov    al,0x1
10001d69:	c9                   	leave  
10001d6a:	c3                   	ret    
10001d6b:	90                   	nop

10001d6c <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001d6c:	55                   	push   ebp
10001d6d:	89 e5                	mov    ebp,esp
10001d6f:	57                   	push   edi
10001d70:	56                   	push   esi
10001d71:	53                   	push   ebx
10001d72:	83 ec 6c             	sub    esp,0x6c
10001d75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001d78:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
10001d7b:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001d7f:	74 43                	je     10001dc4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x58>
10001d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d84:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001d90:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001d93:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001d96:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001d99:	c7 45 cc 00 48 00 00 	mov    DWORD PTR [ebp-0x34],0x4800
10001da0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001da3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001da6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001da9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001dac:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10001daf:	89 c6                	mov    esi,eax
10001db1:	89 d7                	mov    edi,edx
10001db3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001db5:	89 c8                	mov    eax,ecx
10001db7:	89 fa                	mov    edx,edi
10001db9:	89 f3                	mov    ebx,esi
10001dbb:	89 5d c4             	mov    DWORD PTR [ebp-0x3c],ebx
10001dbe:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
10001dc1:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001dc4:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001dc8:	74 07                	je     10001dd1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65>
10001dca:	b8 c5 00 00 00       	mov    eax,0xc5
10001dcf:	eb 05                	jmp    10001dd6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a>
10001dd1:	b8 c6 00 00 00       	mov    eax,0xc6
10001dd6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001dd9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001de0:	83 ec 0c             	sub    esp,0xc
10001de3:	68 74 5c 00 10       	push   0x10005c74	10001de4: R_386_32	.text
10001de8:	e8 fc ff ff ff       	call   10001de9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d>	10001de9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ded:	83 c4 10             	add    esp,0x10
10001df0:	83 7d e4 14          	cmp    DWORD PTR [ebp-0x1c],0x14
10001df4:	75 26                	jne    10001e1c <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb0>
10001df6:	83 ec 0c             	sub    esp,0xc
10001df9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001dfc:	e8 fc ff ff ff       	call   10001dfd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x91>	10001dfd: R_386_PC32	FloppyDrive::motorOff()
10001e01:	83 c4 10             	add    esp,0x10
10001e04:	83 ec 0c             	sub    esp,0xc
10001e07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e0a:	e8 fc ff ff ff       	call   10001e0b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x9f>	10001e0b: R_386_PC32	FloppyDrive::unselect()
10001e0f:	83 c4 10             	add    esp,0x10
10001e12:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001e17:	e9 71 07 00 00       	jmp    1000258d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e1c:	83 ec 0c             	sub    esp,0xc
10001e1f:	68 7e 5c 00 10       	push   0x10005c7e	10001e20: R_386_32	.text
10001e24:	e8 fc ff ff ff       	call   10001e25 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb9>	10001e25: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e29:	83 c4 10             	add    esp,0x10
10001e2c:	83 ec 04             	sub    esp,0x4
10001e2f:	6a 00                	push   0x0
10001e31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e37:	e8 fc ff ff ff       	call   10001e38 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xcc>	10001e38: R_386_PC32	FloppyDrive::seek(int, int)
10001e3c:	83 c4 10             	add    esp,0x10
10001e3f:	83 f0 01             	xor    eax,0x1
10001e42:	84 c0                	test   al,al
10001e44:	74 0a                	je     10001e50 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe4>
10001e46:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001e4b:	e9 3d 07 00 00       	jmp    1000258d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e50:	83 ec 04             	sub    esp,0x4
10001e53:	6a 01                	push   0x1
10001e55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e5b:	e8 fc ff ff ff       	call   10001e5c <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf0>	10001e5c: R_386_PC32	FloppyDrive::seek(int, int)
10001e60:	83 c4 10             	add    esp,0x10
10001e63:	83 f0 01             	xor    eax,0x1
10001e66:	84 c0                	test   al,al
10001e68:	74 0a                	je     10001e74 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x108>
10001e6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001e6f:	e9 19 07 00 00       	jmp    1000258d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e74:	83 ec 0c             	sub    esp,0xc
10001e77:	68 8e 5c 00 10       	push   0x10005c8e	10001e78: R_386_32	.text
10001e7c:	e8 fc ff ff ff       	call   10001e7d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x111>	10001e7d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e81:	83 c4 10             	add    esp,0x10
10001e84:	83 ec 0c             	sub    esp,0xc
10001e87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e8a:	e8 fc ff ff ff       	call   10001e8b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x11f>	10001e8b: R_386_PC32	FloppyDrive::motorOn()
10001e8f:	83 c4 10             	add    esp,0x10
10001e92:	83 ec 0c             	sub    esp,0xc
10001e95:	68 9a 5c 00 10       	push   0x10005c9a	10001e96: R_386_32	.text
10001e9a:	e8 fc ff ff ff       	call   10001e9b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x12f>	10001e9b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e9f:	83 c4 10             	add    esp,0x10
10001ea2:	83 ec 0c             	sub    esp,0xc
10001ea5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001ea8:	e8 fc ff ff ff       	call   10001ea9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x13d>	10001ea9: R_386_PC32	FloppyDrive::select()
10001ead:	83 c4 10             	add    esp,0x10
10001eb0:	83 ec 0c             	sub    esp,0xc
10001eb3:	68 a5 5c 00 10       	push   0x10005ca5	10001eb4: R_386_32	.text
10001eb8:	e8 fc ff ff ff       	call   10001eb9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x14d>	10001eb9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ebd:	83 c4 10             	add    esp,0x10
10001ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ec3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ec9:	0f b6 55 94          	movzx  edx,BYTE PTR [ebp-0x6c]
10001ecd:	83 ec 08             	sub    esp,0x8
10001ed0:	52                   	push   edx
10001ed1:	50                   	push   eax
10001ed2:	e8 fc ff ff ff       	call   10001ed3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x167>	10001ed3: R_386_PC32	Floppy::dmaInit(bool)
10001ed7:	83 c4 10             	add    esp,0x10
10001eda:	83 ec 0c             	sub    esp,0xc
10001edd:	68 b0 5c 00 10       	push   0x10005cb0	10001ede: R_386_32	.text
10001ee2:	e8 fc ff ff ff       	call   10001ee3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x177>	10001ee3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ee7:	83 c4 10             	add    esp,0x10
10001eea:	83 ec 0c             	sub    esp,0xc
10001eed:	68 e8 03 00 00       	push   0x3e8
10001ef2:	e8 fc ff ff ff       	call   10001ef3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x187>	10001ef3: R_386_PC32	milliTenthSleep(unsigned int)
10001ef7:	83 c4 10             	add    esp,0x10
10001efa:	83 ec 0c             	sub    esp,0xc
10001efd:	68 bd 5c 00 10       	push   0x10005cbd	10001efe: R_386_32	.text
10001f02:	e8 fc ff ff ff       	call   10001f03 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x197>	10001f03: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f07:	83 c4 10             	add    esp,0x10
10001f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f0d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f13:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001f16:	0f b6 d2             	movzx  edx,dl
10001f19:	83 ec 08             	sub    esp,0x8
10001f1c:	52                   	push   edx
10001f1d:	50                   	push   eax
10001f1e:	e8 fc ff ff ff       	call   10001f1f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b3>	10001f1f: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f23:	83 c4 10             	add    esp,0x10
10001f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f29:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f2f:	83 ec 0c             	sub    esp,0xc
10001f32:	50                   	push   eax
10001f33:	e8 fc ff ff ff       	call   10001f34 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1c8>	10001f34: R_386_PC32	Floppy::wasFailure()
10001f38:	83 c4 10             	add    esp,0x10
10001f3b:	84 c0                	test   al,al
10001f3d:	74 1d                	je     10001f5c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1f0>
10001f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f48:	83 ec 0c             	sub    esp,0xc
10001f4b:	50                   	push   eax
10001f4c:	e8 fc ff ff ff       	call   10001f4d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1e1>	10001f4d: R_386_PC32	Floppy::reset()
10001f51:	83 c4 10             	add    esp,0x10
10001f54:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f57:	e9 84 fe ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f5f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f65:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001f68:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001f6e:	0f b6 d2             	movzx  edx,dl
10001f71:	83 ec 08             	sub    esp,0x8
10001f74:	52                   	push   edx
10001f75:	50                   	push   eax
10001f76:	e8 fc ff ff ff       	call   10001f77 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x20b>	10001f77: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f7b:	83 c4 10             	add    esp,0x10
10001f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f81:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f87:	83 ec 0c             	sub    esp,0xc
10001f8a:	50                   	push   eax
10001f8b:	e8 fc ff ff ff       	call   10001f8c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x220>	10001f8c: R_386_PC32	Floppy::wasFailure()
10001f90:	83 c4 10             	add    esp,0x10
10001f93:	84 c0                	test   al,al
10001f95:	74 1d                	je     10001fb4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x248>
10001f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fa0:	83 ec 0c             	sub    esp,0xc
10001fa3:	50                   	push   eax
10001fa4:	e8 fc ff ff ff       	call   10001fa5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x239>	10001fa5: R_386_PC32	Floppy::reset()
10001fa9:	83 c4 10             	add    esp,0x10
10001fac:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001faf:	e9 2c fe ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fbd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001fc0:	0f b6 d2             	movzx  edx,dl
10001fc3:	83 ec 08             	sub    esp,0x8
10001fc6:	52                   	push   edx
10001fc7:	50                   	push   eax
10001fc8:	e8 fc ff ff ff       	call   10001fc9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x25d>	10001fc9: R_386_PC32	Floppy::writeCommand(unsigned char)
10001fcd:	83 c4 10             	add    esp,0x10
10001fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fd9:	83 ec 0c             	sub    esp,0xc
10001fdc:	50                   	push   eax
10001fdd:	e8 fc ff ff ff       	call   10001fde <FloppyDrive::doTrack(int, bool, unsigned char*)+0x272>	10001fde: R_386_PC32	Floppy::wasFailure()
10001fe2:	83 c4 10             	add    esp,0x10
10001fe5:	84 c0                	test   al,al
10001fe7:	74 1d                	je     10002006 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x29a>
10001fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ff2:	83 ec 0c             	sub    esp,0xc
10001ff5:	50                   	push   eax
10001ff6:	e8 fc ff ff ff       	call   10001ff7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28b>	10001ff7: R_386_PC32	Floppy::reset()
10001ffb:	83 c4 10             	add    esp,0x10
10001ffe:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002001:	e9 da fd ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002009:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000200f:	83 ec 08             	sub    esp,0x8
10002012:	6a 00                	push   0x0
10002014:	50                   	push   eax
10002015:	e8 fc ff ff ff       	call   10002016 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2aa>	10002016: R_386_PC32	Floppy::writeCommand(unsigned char)
1000201a:	83 c4 10             	add    esp,0x10
1000201d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002020:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002026:	83 ec 0c             	sub    esp,0xc
10002029:	50                   	push   eax
1000202a:	e8 fc ff ff ff       	call   1000202b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2bf>	1000202b: R_386_PC32	Floppy::wasFailure()
1000202f:	83 c4 10             	add    esp,0x10
10002032:	84 c0                	test   al,al
10002034:	74 1d                	je     10002053 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2e7>
10002036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002039:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000203f:	83 ec 0c             	sub    esp,0xc
10002042:	50                   	push   eax
10002043:	e8 fc ff ff ff       	call   10002044 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2d8>	10002044: R_386_PC32	Floppy::reset()
10002048:	83 c4 10             	add    esp,0x10
1000204b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000204e:	e9 8d fd ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002056:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000205c:	83 ec 08             	sub    esp,0x8
1000205f:	6a 01                	push   0x1
10002061:	50                   	push   eax
10002062:	e8 fc ff ff ff       	call   10002063 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f7>	10002063: R_386_PC32	Floppy::writeCommand(unsigned char)
10002067:	83 c4 10             	add    esp,0x10
1000206a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002073:	83 ec 0c             	sub    esp,0xc
10002076:	50                   	push   eax
10002077:	e8 fc ff ff ff       	call   10002078 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x30c>	10002078: R_386_PC32	Floppy::wasFailure()
1000207c:	83 c4 10             	add    esp,0x10
1000207f:	84 c0                	test   al,al
10002081:	74 1d                	je     100020a0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x334>
10002083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002086:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000208c:	83 ec 0c             	sub    esp,0xc
1000208f:	50                   	push   eax
10002090:	e8 fc ff ff ff       	call   10002091 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x325>	10002091: R_386_PC32	Floppy::reset()
10002095:	83 c4 10             	add    esp,0x10
10002098:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000209b:	e9 40 fd ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020a9:	83 ec 08             	sub    esp,0x8
100020ac:	6a 02                	push   0x2
100020ae:	50                   	push   eax
100020af:	e8 fc ff ff ff       	call   100020b0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x344>	100020b0: R_386_PC32	Floppy::writeCommand(unsigned char)
100020b4:	83 c4 10             	add    esp,0x10
100020b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020c0:	83 ec 0c             	sub    esp,0xc
100020c3:	50                   	push   eax
100020c4:	e8 fc ff ff ff       	call   100020c5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x359>	100020c5: R_386_PC32	Floppy::wasFailure()
100020c9:	83 c4 10             	add    esp,0x10
100020cc:	84 c0                	test   al,al
100020ce:	74 1d                	je     100020ed <FloppyDrive::doTrack(int, bool, unsigned char*)+0x381>
100020d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020d9:	83 ec 0c             	sub    esp,0xc
100020dc:	50                   	push   eax
100020dd:	e8 fc ff ff ff       	call   100020de <FloppyDrive::doTrack(int, bool, unsigned char*)+0x372>	100020de: R_386_PC32	Floppy::reset()
100020e2:	83 c4 10             	add    esp,0x10
100020e5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020e8:	e9 f3 fc ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020f6:	83 ec 08             	sub    esp,0x8
100020f9:	6a 12                	push   0x12
100020fb:	50                   	push   eax
100020fc:	e8 fc ff ff ff       	call   100020fd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x391>	100020fd: R_386_PC32	Floppy::writeCommand(unsigned char)
10002101:	83 c4 10             	add    esp,0x10
10002104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002107:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000210d:	83 ec 0c             	sub    esp,0xc
10002110:	50                   	push   eax
10002111:	e8 fc ff ff ff       	call   10002112 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3a6>	10002112: R_386_PC32	Floppy::wasFailure()
10002116:	83 c4 10             	add    esp,0x10
10002119:	84 c0                	test   al,al
1000211b:	74 1d                	je     1000213a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3ce>
1000211d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002120:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002126:	83 ec 0c             	sub    esp,0xc
10002129:	50                   	push   eax
1000212a:	e8 fc ff ff ff       	call   1000212b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3bf>	1000212b: R_386_PC32	Floppy::reset()
1000212f:	83 c4 10             	add    esp,0x10
10002132:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002135:	e9 a6 fc ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000213a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000213d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002143:	83 ec 08             	sub    esp,0x8
10002146:	6a 1b                	push   0x1b
10002148:	50                   	push   eax
10002149:	e8 fc ff ff ff       	call   1000214a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3de>	1000214a: R_386_PC32	Floppy::writeCommand(unsigned char)
1000214e:	83 c4 10             	add    esp,0x10
10002151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002154:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000215a:	83 ec 0c             	sub    esp,0xc
1000215d:	50                   	push   eax
1000215e:	e8 fc ff ff ff       	call   1000215f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3f3>	1000215f: R_386_PC32	Floppy::wasFailure()
10002163:	83 c4 10             	add    esp,0x10
10002166:	84 c0                	test   al,al
10002168:	74 1d                	je     10002187 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41b>
1000216a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000216d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002173:	83 ec 0c             	sub    esp,0xc
10002176:	50                   	push   eax
10002177:	e8 fc ff ff ff       	call   10002178 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40c>	10002178: R_386_PC32	Floppy::reset()
1000217c:	83 c4 10             	add    esp,0x10
1000217f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002182:	e9 59 fc ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000218a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002190:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10002197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000219a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021a0:	83 ec 08             	sub    esp,0x8
100021a3:	68 ff 00 00 00       	push   0xff
100021a8:	50                   	push   eax
100021a9:	e8 fc ff ff ff       	call   100021aa <FloppyDrive::doTrack(int, bool, unsigned char*)+0x43e>	100021aa: R_386_PC32	Floppy::writeCommand(unsigned char)
100021ae:	83 c4 10             	add    esp,0x10
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021ba:	83 ec 0c             	sub    esp,0xc
100021bd:	50                   	push   eax
100021be:	e8 fc ff ff ff       	call   100021bf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x453>	100021bf: R_386_PC32	Floppy::wasFailure()
100021c3:	83 c4 10             	add    esp,0x10
100021c6:	84 c0                	test   al,al
100021c8:	74 1d                	je     100021e7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47b>
100021ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021d3:	83 ec 0c             	sub    esp,0xc
100021d6:	50                   	push   eax
100021d7:	e8 fc ff ff ff       	call   100021d8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46c>	100021d8: R_386_PC32	Floppy::reset()
100021dc:	83 c4 10             	add    esp,0x10
100021df:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100021e2:	e9 f9 fb ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100021e7:	83 ec 0c             	sub    esp,0xc
100021ea:	68 c9 5c 00 10       	push   0x10005cc9	100021eb: R_386_32	.text
100021ef:	e8 fc ff ff ff       	call   100021f0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x484>	100021f0: R_386_PC32	Dbg::kprintf(char const*, ...)
100021f4:	83 c4 10             	add    esp,0x10
100021f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002200:	83 ec 08             	sub    esp,0x8
10002203:	68 e8 03 00 00       	push   0x3e8
10002208:	50                   	push   eax
10002209:	e8 fc ff ff ff       	call   1000220a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x49e>	1000220a: R_386_PC32	Floppy::waitIRQ(int)
1000220e:	83 c4 10             	add    esp,0x10
10002211:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10002214:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
10002217:	83 f0 01             	xor    eax,0x1
1000221a:	84 c0                	test   al,al
1000221c:	74 2d                	je     1000224b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4df>
1000221e:	83 ec 0c             	sub    esp,0xc
10002221:	68 dc 5c 00 10       	push   0x10005cdc	10002222: R_386_32	.text
10002226:	e8 fc ff ff ff       	call   10002227 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4bb>	10002227: R_386_PC32	Dbg::kprintf(char const*, ...)
1000222b:	83 c4 10             	add    esp,0x10
1000222e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002231:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002237:	83 ec 0c             	sub    esp,0xc
1000223a:	50                   	push   eax
1000223b:	e8 fc ff ff ff       	call   1000223c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4d0>	1000223c: R_386_PC32	Floppy::reset()
10002240:	83 c4 10             	add    esp,0x10
10002243:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002246:	e9 95 fb ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000224b:	83 ec 0c             	sub    esp,0xc
1000224e:	68 e5 5c 00 10       	push   0x10005ce5	1000224f: R_386_32	.text
10002253:	e8 fc ff ff ff       	call   10002254 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e8>	10002254: R_386_PC32	Dbg::kprintf(char const*, ...)
10002258:	83 c4 10             	add    esp,0x10
1000225b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000225e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002264:	83 ec 0c             	sub    esp,0xc
10002267:	50                   	push   eax
10002268:	e8 fc ff ff ff       	call   10002269 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4fd>	10002269: R_386_PC32	Floppy::readData()
1000226d:	83 c4 10             	add    esp,0x10
10002270:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
10002273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002276:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000227c:	83 ec 0c             	sub    esp,0xc
1000227f:	50                   	push   eax
10002280:	e8 fc ff ff ff       	call   10002281 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x515>	10002281: R_386_PC32	Floppy::wasFailure()
10002285:	83 c4 10             	add    esp,0x10
10002288:	84 c0                	test   al,al
1000228a:	74 2d                	je     100022b9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x54d>
1000228c:	83 ec 0c             	sub    esp,0xc
1000228f:	68 ef 5c 00 10       	push   0x10005cef	10002290: R_386_32	.text
10002294:	e8 fc ff ff ff       	call   10002295 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x529>	10002295: R_386_PC32	Dbg::kprintf(char const*, ...)
10002299:	83 c4 10             	add    esp,0x10
1000229c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022a5:	83 ec 0c             	sub    esp,0xc
100022a8:	50                   	push   eax
100022a9:	e8 fc ff ff ff       	call   100022aa <FloppyDrive::doTrack(int, bool, unsigned char*)+0x53e>	100022aa: R_386_PC32	Floppy::reset()
100022ae:	83 c4 10             	add    esp,0x10
100022b1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100022b4:	e9 27 fb ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100022b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022c2:	83 ec 0c             	sub    esp,0xc
100022c5:	50                   	push   eax
100022c6:	e8 fc ff ff ff       	call   100022c7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x55b>	100022c7: R_386_PC32	Floppy::readData()
100022cb:	83 c4 10             	add    esp,0x10
100022ce:	88 45 dd             	mov    BYTE PTR [ebp-0x23],al
100022d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022da:	83 ec 0c             	sub    esp,0xc
100022dd:	50                   	push   eax
100022de:	e8 fc ff ff ff       	call   100022df <FloppyDrive::doTrack(int, bool, unsigned char*)+0x573>	100022df: R_386_PC32	Floppy::wasFailure()
100022e3:	83 c4 10             	add    esp,0x10
100022e6:	84 c0                	test   al,al
100022e8:	74 2d                	je     10002317 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5ab>
100022ea:	83 ec 0c             	sub    esp,0xc
100022ed:	68 ef 5c 00 10       	push   0x10005cef	100022ee: R_386_32	.text
100022f2:	e8 fc ff ff ff       	call   100022f3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x587>	100022f3: R_386_PC32	Dbg::kprintf(char const*, ...)
100022f7:	83 c4 10             	add    esp,0x10
100022fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022fd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002303:	83 ec 0c             	sub    esp,0xc
10002306:	50                   	push   eax
10002307:	e8 fc ff ff ff       	call   10002308 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59c>	10002308: R_386_PC32	Floppy::reset()
1000230c:	83 c4 10             	add    esp,0x10
1000230f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002312:	e9 c9 fa ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000231a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002320:	83 ec 0c             	sub    esp,0xc
10002323:	50                   	push   eax
10002324:	e8 fc ff ff ff       	call   10002325 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b9>	10002325: R_386_PC32	Floppy::readData()
10002329:	83 c4 10             	add    esp,0x10
1000232c:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
1000232f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002332:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002338:	83 ec 0c             	sub    esp,0xc
1000233b:	50                   	push   eax
1000233c:	e8 fc ff ff ff       	call   1000233d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d1>	1000233d: R_386_PC32	Floppy::wasFailure()
10002341:	83 c4 10             	add    esp,0x10
10002344:	84 c0                	test   al,al
10002346:	74 2d                	je     10002375 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x609>
10002348:	83 ec 0c             	sub    esp,0xc
1000234b:	68 ef 5c 00 10       	push   0x10005cef	1000234c: R_386_32	.text
10002350:	e8 fc ff ff ff       	call   10002351 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e5>	10002351: R_386_PC32	Dbg::kprintf(char const*, ...)
10002355:	83 c4 10             	add    esp,0x10
10002358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002361:	83 ec 0c             	sub    esp,0xc
10002364:	50                   	push   eax
10002365:	e8 fc ff ff ff       	call   10002366 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fa>	10002366: R_386_PC32	Floppy::reset()
1000236a:	83 c4 10             	add    esp,0x10
1000236d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002370:	e9 6b fa ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002378:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000237e:	83 ec 0c             	sub    esp,0xc
10002381:	50                   	push   eax
10002382:	e8 fc ff ff ff       	call   10002383 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x617>	10002383: R_386_PC32	Floppy::readData()
10002387:	83 c4 10             	add    esp,0x10
1000238a:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
1000238d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002390:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002396:	83 ec 0c             	sub    esp,0xc
10002399:	50                   	push   eax
1000239a:	e8 fc ff ff ff       	call   1000239b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x62f>	1000239b: R_386_PC32	Floppy::wasFailure()
1000239f:	83 c4 10             	add    esp,0x10
100023a2:	84 c0                	test   al,al
100023a4:	74 2d                	je     100023d3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x667>
100023a6:	83 ec 0c             	sub    esp,0xc
100023a9:	68 ef 5c 00 10       	push   0x10005cef	100023aa: R_386_32	.text
100023ae:	e8 fc ff ff ff       	call   100023af <FloppyDrive::doTrack(int, bool, unsigned char*)+0x643>	100023af: R_386_PC32	Dbg::kprintf(char const*, ...)
100023b3:	83 c4 10             	add    esp,0x10
100023b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023b9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023bf:	83 ec 0c             	sub    esp,0xc
100023c2:	50                   	push   eax
100023c3:	e8 fc ff ff ff       	call   100023c4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x658>	100023c4: R_386_PC32	Floppy::reset()
100023c8:	83 c4 10             	add    esp,0x10
100023cb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100023ce:	e9 0d fa ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100023d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023dc:	83 ec 0c             	sub    esp,0xc
100023df:	50                   	push   eax
100023e0:	e8 fc ff ff ff       	call   100023e1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x675>	100023e1: R_386_PC32	Floppy::readData()
100023e5:	83 c4 10             	add    esp,0x10
100023e8:	88 45 da             	mov    BYTE PTR [ebp-0x26],al
100023eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023f4:	83 ec 0c             	sub    esp,0xc
100023f7:	50                   	push   eax
100023f8:	e8 fc ff ff ff       	call   100023f9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x68d>	100023f9: R_386_PC32	Floppy::wasFailure()
100023fd:	83 c4 10             	add    esp,0x10
10002400:	84 c0                	test   al,al
10002402:	74 2d                	je     10002431 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6c5>
10002404:	83 ec 0c             	sub    esp,0xc
10002407:	68 ef 5c 00 10       	push   0x10005cef	10002408: R_386_32	.text
1000240c:	e8 fc ff ff ff       	call   1000240d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a1>	1000240d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002411:	83 c4 10             	add    esp,0x10
10002414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002417:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000241d:	83 ec 0c             	sub    esp,0xc
10002420:	50                   	push   eax
10002421:	e8 fc ff ff ff       	call   10002422 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b6>	10002422: R_386_PC32	Floppy::reset()
10002426:	83 c4 10             	add    esp,0x10
10002429:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000242c:	e9 af f9 ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002434:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000243a:	83 ec 0c             	sub    esp,0xc
1000243d:	50                   	push   eax
1000243e:	e8 fc ff ff ff       	call   1000243f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6d3>	1000243f: R_386_PC32	Floppy::readData()
10002443:	83 c4 10             	add    esp,0x10
10002446:	88 45 d9             	mov    BYTE PTR [ebp-0x27],al
10002449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000244c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002452:	83 ec 0c             	sub    esp,0xc
10002455:	50                   	push   eax
10002456:	e8 fc ff ff ff       	call   10002457 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6eb>	10002457: R_386_PC32	Floppy::wasFailure()
1000245b:	83 c4 10             	add    esp,0x10
1000245e:	84 c0                	test   al,al
10002460:	74 2d                	je     1000248f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x723>
10002462:	83 ec 0c             	sub    esp,0xc
10002465:	68 ef 5c 00 10       	push   0x10005cef	10002466: R_386_32	.text
1000246a:	e8 fc ff ff ff       	call   1000246b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ff>	1000246b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000246f:	83 c4 10             	add    esp,0x10
10002472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002475:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000247b:	83 ec 0c             	sub    esp,0xc
1000247e:	50                   	push   eax
1000247f:	e8 fc ff ff ff       	call   10002480 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x714>	10002480: R_386_PC32	Floppy::reset()
10002484:	83 c4 10             	add    esp,0x10
10002487:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000248a:	e9 51 f9 ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000248f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002492:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002498:	83 ec 0c             	sub    esp,0xc
1000249b:	50                   	push   eax
1000249c:	e8 fc ff ff ff       	call   1000249d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x731>	1000249d: R_386_PC32	Floppy::readData()
100024a1:	83 c4 10             	add    esp,0x10
100024a4:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100024a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024b0:	83 ec 0c             	sub    esp,0xc
100024b3:	50                   	push   eax
100024b4:	e8 fc ff ff ff       	call   100024b5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x749>	100024b5: R_386_PC32	Floppy::wasFailure()
100024b9:	83 c4 10             	add    esp,0x10
100024bc:	84 c0                	test   al,al
100024be:	74 2d                	je     100024ed <FloppyDrive::doTrack(int, bool, unsigned char*)+0x781>
100024c0:	83 ec 0c             	sub    esp,0xc
100024c3:	68 ef 5c 00 10       	push   0x10005cef	100024c4: R_386_32	.text
100024c8:	e8 fc ff ff ff       	call   100024c9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x75d>	100024c9: R_386_PC32	Dbg::kprintf(char const*, ...)
100024cd:	83 c4 10             	add    esp,0x10
100024d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024d9:	83 ec 0c             	sub    esp,0xc
100024dc:	50                   	push   eax
100024dd:	e8 fc ff ff ff       	call   100024de <FloppyDrive::doTrack(int, bool, unsigned char*)+0x772>	100024de: R_386_PC32	Floppy::reset()
100024e2:	83 c4 10             	add    esp,0x10
100024e5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100024e8:	e9 f3 f8 ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100024ed:	83 ec 0c             	sub    esp,0xc
100024f0:	68 08 5d 00 10       	push   0x10005d08	100024f1: R_386_32	.text
100024f5:	e8 fc ff ff ff       	call   100024f6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x78a>	100024f6: R_386_PC32	Dbg::kprintf(char const*, ...)
100024fa:	83 c4 10             	add    esp,0x10
100024fd:	83 ec 0c             	sub    esp,0xc
10002500:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002503:	e8 fc ff ff ff       	call   10002504 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x798>	10002504: R_386_PC32	FloppyDrive::motorOff()
10002508:	83 c4 10             	add    esp,0x10
1000250b:	83 ec 0c             	sub    esp,0xc
1000250e:	68 1c 5d 00 10       	push   0x10005d1c	1000250f: R_386_32	.text
10002513:	e8 fc ff ff ff       	call   10002514 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7a8>	10002514: R_386_PC32	Dbg::kprintf(char const*, ...)
10002518:	83 c4 10             	add    esp,0x10
1000251b:	83 ec 0c             	sub    esp,0xc
1000251e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002521:	e8 fc ff ff ff       	call   10002522 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7b6>	10002522: R_386_PC32	FloppyDrive::unselect()
10002526:	83 c4 10             	add    esp,0x10
10002529:	83 ec 0c             	sub    esp,0xc
1000252c:	68 27 5d 00 10       	push   0x10005d27	1000252d: R_386_32	.text
10002531:	e8 fc ff ff ff       	call   10002532 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c6>	10002532: R_386_PC32	Dbg::kprintf(char const*, ...)
10002536:	83 c4 10             	add    esp,0x10
10002539:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
1000253c:	83 f0 01             	xor    eax,0x1
1000253f:	84 c0                	test   al,al
10002541:	74 45                	je     10002588 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x81c>
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000254c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10002552:	89 c2                	mov    edx,eax
10002554:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002557:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000255a:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
1000255d:	c7 45 b0 00 48 00 00 	mov    DWORD PTR [ebp-0x50],0x4800
10002564:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002567:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
1000256a:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
1000256d:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10002570:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10002573:	89 c6                	mov    esi,eax
10002575:	89 d7                	mov    edi,edx
10002577:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002579:	89 c8                	mov    eax,ecx
1000257b:	89 fa                	mov    edx,edi
1000257d:	89 f3                	mov    ebx,esi
1000257f:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
10002582:	89 55 a4             	mov    DWORD PTR [ebp-0x5c],edx
10002585:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002588:	b8 00 00 00 00       	mov    eax,0x0
1000258d:	8d 65 f4             	lea    esp,[ebp-0xc]
10002590:	5b                   	pop    ebx
10002591:	5e                   	pop    esi
10002592:	5f                   	pop    edi
10002593:	5d                   	pop    ebp
10002594:	c3                   	ret    
10002595:	90                   	nop

10002596 <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
10002596:	55                   	push   ebp
10002597:	89 e5                	mov    ebp,esp
10002599:	83 ec 10             	sub    esp,0x10
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100025a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100025a8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100025ae:	83 c2 64             	add    edx,0x64
100025b1:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100025b5:	89 d0                	mov    eax,edx
100025b7:	c1 e0 02             	shl    eax,0x2
100025ba:	01 d0                	add    eax,edx
100025bc:	c1 e0 02             	shl    eax,0x2
100025bf:	01 d0                	add    eax,edx
100025c1:	05 13 00 00 00       	add    eax,0x13	100025c2: R_386_32	floppyTable
100025c6:	8a 00                	mov    al,BYTE PTR [eax]
100025c8:	0f b6 c0             	movzx  eax,al
100025cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100025ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100025d1:	01 c0                	add    eax,eax
100025d3:	89 c1                	mov    ecx,eax
100025d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025d8:	ba 00 00 00 00       	mov    edx,0x0
100025dd:	f7 f1                	div    ecx
100025df:	89 c2                	mov    edx,eax
100025e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100025e4:	89 10                	mov    DWORD PTR [eax],edx
100025e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100025e9:	01 c0                	add    eax,eax
100025eb:	89 c1                	mov    ecx,eax
100025ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025f0:	ba 00 00 00 00       	mov    edx,0x0
100025f5:	f7 f1                	div    ecx
100025f7:	89 d0                	mov    eax,edx
100025f9:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
100025fc:	ba 00 00 00 00       	mov    edx,0x0
10002601:	f7 f1                	div    ecx
10002603:	89 c2                	mov    edx,eax
10002605:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002608:	89 10                	mov    DWORD PTR [eax],edx
1000260a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000260d:	01 c0                	add    eax,eax
1000260f:	89 c1                	mov    ecx,eax
10002611:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002614:	ba 00 00 00 00       	mov    edx,0x0
10002619:	f7 f1                	div    ecx
1000261b:	89 d0                	mov    eax,edx
1000261d:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002620:	ba 00 00 00 00       	mov    edx,0x0
10002625:	f7 f1                	div    ecx
10002627:	89 d0                	mov    eax,edx
10002629:	40                   	inc    eax
1000262a:	89 c2                	mov    edx,eax
1000262c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000262f:	89 10                	mov    DWORD PTR [eax],edx
10002631:	90                   	nop
10002632:	c9                   	leave  
10002633:	c3                   	ret    

10002634 <FloppyDrive::eject()>:
10002634:	55                   	push   ebp
10002635:	89 e5                	mov    ebp,esp
10002637:	57                   	push   edi
10002638:	56                   	push   esi
10002639:	53                   	push   ebx
1000263a:	83 ec 2c             	sub    esp,0x2c
1000263d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002640:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002646:	83 ec 0c             	sub    esp,0xc
10002649:	50                   	push   eax
1000264a:	e8 fc ff ff ff       	call   1000264b <FloppyDrive::eject()+0x17>	1000264b: R_386_PC32	VCache::writeWriteBuffer()
1000264f:	83 c4 10             	add    esp,0x10
10002652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002655:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000265b:	83 ec 0c             	sub    esp,0xc
1000265e:	50                   	push   eax
1000265f:	e8 fc ff ff ff       	call   10002660 <FloppyDrive::eject()+0x2c>	10002660: R_386_PC32	VCache::invalidateReadBuffer()
10002664:	83 c4 10             	add    esp,0x10
10002667:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002669: R_386_32	hasCyl0Bf
1000266e:	c7 05 00 00 00 00 ff ff ff ff 	mov    DWORD PTR ds:0x0,0xffffffff	10002670: R_386_32	_TEMP_cyl
10002678:	a1 00 00 00 00       	mov    eax,ds:0x0	10002679: R_386_32	_TEMP_trackBuffer
1000267d:	83 ec 04             	sub    esp,0x4
10002680:	68 00 48 00 00       	push   0x4800
10002685:	6a 00                	push   0x0
10002687:	50                   	push   eax
10002688:	e8 fc ff ff ff       	call   10002689 <FloppyDrive::eject()+0x55>	10002689: R_386_PC32	memset
1000268d:	83 c4 10             	add    esp,0x10
10002690:	a1 00 00 00 00       	mov    eax,ds:0x0	10002691: R_386_32	_TEMP_cylinder0_bf
10002695:	83 ec 04             	sub    esp,0x4
10002698:	68 00 48 00 00       	push   0x4800
1000269d:	6a 00                	push   0x0
1000269f:	50                   	push   eax
100026a0:	e8 fc ff ff ff       	call   100026a1 <FloppyDrive::eject()+0x6d>	100026a1: R_386_PC32	memset
100026a5:	83 c4 10             	add    esp,0x10
100026a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100026a9: R_386_32	_TEMP_write_bf
100026ad:	83 ec 04             	sub    esp,0x4
100026b0:	68 00 48 00 00       	push   0x4800
100026b5:	6a 00                	push   0x0
100026b7:	50                   	push   eax
100026b8:	e8 fc ff ff ff       	call   100026b9 <FloppyDrive::eject()+0x85>	100026b9: R_386_PC32	memset
100026bd:	83 c4 10             	add    esp,0x10
100026c0:	8d 45 ce             	lea    eax,[ebp-0x32]
100026c3:	bb 32 5d 00 10       	mov    ebx,0x10005d32	100026c4: R_386_32	.text
100026c8:	ba 1a 00 00 00       	mov    edx,0x1a
100026cd:	89 c7                	mov    edi,eax
100026cf:	89 de                	mov    esi,ebx
100026d1:	89 d1                	mov    ecx,edx
100026d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100026d5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100026d7: R_386_32	activeTerminal
100026db:	a1 00 00 00 00       	mov    eax,ds:0x0	100026dc: R_386_32	activeTerminal
100026e0:	8b 00                	mov    eax,DWORD PTR [eax]
100026e2:	83 c0 10             	add    eax,0x10
100026e5:	8b 00                	mov    eax,DWORD PTR [eax]
100026e7:	83 ec 0c             	sub    esp,0xc
100026ea:	8d 4d c8             	lea    ecx,[ebp-0x38]
100026ed:	51                   	push   ecx
100026ee:	8d 4d ce             	lea    ecx,[ebp-0x32]
100026f1:	51                   	push   ecx
100026f2:	6a 00                	push   0x0
100026f4:	6a 1a                	push   0x1a
100026f6:	52                   	push   edx
100026f7:	ff d0                	call   eax
100026f9:	83 c4 20             	add    esp,0x20
100026fc:	b8 00 00 00 00       	mov    eax,0x0
10002701:	8d 65 f4             	lea    esp,[ebp-0xc]
10002704:	5b                   	pop    ebx
10002705:	5e                   	pop    esi
10002706:	5f                   	pop    edi
10002707:	5d                   	pop    ebp
10002708:	c3                   	ret    
10002709:	90                   	nop

1000270a <FloppyDrive::read(unsigned long long, int, void*)>:
1000270a:	55                   	push   ebp
1000270b:	89 e5                	mov    ebp,esp
1000270d:	57                   	push   edi
1000270e:	56                   	push   esi
1000270f:	53                   	push   ebx
10002710:	83 ec 6c             	sub    esp,0x6c
10002713:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002716:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
10002719:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000271c:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
1000271f:	a0 00 00 00 00       	mov    al,ds:0x0	10002720: R_386_32	_TEMP_allocated
10002724:	83 f0 01             	xor    eax,0x1
10002727:	84 c0                	test   al,al
10002729:	74 46                	je     10002771 <FloppyDrive::read(unsigned long long, int, void*)+0x67>
1000272b:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000272d: R_386_32	_TEMP_allocated
10002732:	83 ec 0c             	sub    esp,0xc
10002735:	68 00 48 00 00       	push   0x4800
1000273a:	e8 fc ff ff ff       	call   1000273b <FloppyDrive::read(unsigned long long, int, void*)+0x31>	1000273b: R_386_PC32	malloc
1000273f:	83 c4 10             	add    esp,0x10
10002742:	a3 00 00 00 00       	mov    ds:0x0,eax	10002743: R_386_32	_TEMP_trackBuffer
10002747:	83 ec 0c             	sub    esp,0xc
1000274a:	68 00 48 00 00       	push   0x4800
1000274f:	e8 fc ff ff ff       	call   10002750 <FloppyDrive::read(unsigned long long, int, void*)+0x46>	10002750: R_386_PC32	malloc
10002754:	83 c4 10             	add    esp,0x10
10002757:	a3 00 00 00 00       	mov    ds:0x0,eax	10002758: R_386_32	_TEMP_cylinder0_bf
1000275c:	83 ec 0c             	sub    esp,0xc
1000275f:	68 00 48 00 00       	push   0x4800
10002764:	e8 fc ff ff ff       	call   10002765 <FloppyDrive::read(unsigned long long, int, void*)+0x5b>	10002765: R_386_PC32	malloc
10002769:	83 c4 10             	add    esp,0x10
1000276c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000276d: R_386_32	_TEMP_write_bf
10002771:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
10002775:	74 10                	je     10002787 <FloppyDrive::read(unsigned long long, int, void*)+0x7d>
10002777:	83 ec 0c             	sub    esp,0xc
1000277a:	68 4c 5d 00 10       	push   0x10005d4c	1000277b: R_386_32	.text
1000277f:	e8 fc ff ff ff       	call   10002780 <FloppyDrive::read(unsigned long long, int, void*)+0x76>	10002780: R_386_PC32	KePanic(char const*)
10002784:	83 c4 10             	add    esp,0x10
10002787:	83 ec 0c             	sub    esp,0xc
1000278a:	68 64 5d 00 10       	push   0x10005d64	1000278b: R_386_32	.text
1000278f:	e8 fc ff ff ff       	call   10002790 <FloppyDrive::read(unsigned long long, int, void*)+0x86>	10002790: R_386_PC32	Dbg::kprintf(char const*, ...)
10002794:	83 c4 10             	add    esp,0x10
10002797:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
1000279a:	83 ec 0c             	sub    esp,0xc
1000279d:	8d 55 a0             	lea    edx,[ebp-0x60]
100027a0:	52                   	push   edx
100027a1:	8d 55 a4             	lea    edx,[ebp-0x5c]
100027a4:	52                   	push   edx
100027a5:	8d 55 a8             	lea    edx,[ebp-0x58]
100027a8:	52                   	push   edx
100027a9:	50                   	push   eax
100027aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100027ad:	e8 fc ff ff ff       	call   100027ae <FloppyDrive::read(unsigned long long, int, void*)+0xa4>	100027ae: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
100027b2:	83 c4 20             	add    esp,0x20
100027b5:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
100027b8:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
100027bb:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100027be:	51                   	push   ecx
100027bf:	52                   	push   edx
100027c0:	50                   	push   eax
100027c1:	68 7f 5d 00 10       	push   0x10005d7f	100027c2: R_386_32	.text
100027c6:	e8 fc ff ff ff       	call   100027c7 <FloppyDrive::read(unsigned long long, int, void*)+0xbd>	100027c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100027cb:	83 c4 10             	add    esp,0x10
100027ce:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100027d1:	85 c0                	test   eax,eax
100027d3:	75 2a                	jne    100027ff <FloppyDrive::read(unsigned long long, int, void*)+0xf5>
100027d5:	a0 00 00 00 00       	mov    al,ds:0x0	100027d6: R_386_32	hasCyl0Bf
100027da:	83 f0 01             	xor    eax,0x1
100027dd:	84 c0                	test   al,al
100027df:	74 5a                	je     1000283b <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100027e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100027e2: R_386_32	_TEMP_cylinder0_bf
100027e6:	50                   	push   eax
100027e7:	6a 00                	push   0x0
100027e9:	6a 00                	push   0x0
100027eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100027ee:	e8 fc ff ff ff       	call   100027ef <FloppyDrive::read(unsigned long long, int, void*)+0xe5>	100027ef: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100027f3:	83 c4 10             	add    esp,0x10
100027f6:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100027f8: R_386_32	hasCyl0Bf
100027fd:	eb 3c                	jmp    1000283b <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100027ff:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
10002802:	a1 00 00 00 00       	mov    eax,ds:0x0	10002803: R_386_32	_TEMP_cyl
10002807:	39 c2                	cmp    edx,eax
10002809:	74 30                	je     1000283b <FloppyDrive::read(unsigned long long, int, void*)+0x131>
1000280b:	83 ec 0c             	sub    esp,0xc
1000280e:	68 97 5d 00 10       	push   0x10005d97	1000280f: R_386_32	.text
10002813:	e8 fc ff ff ff       	call   10002814 <FloppyDrive::read(unsigned long long, int, void*)+0x10a>	10002814: R_386_PC32	Dbg::kprintf(char const*, ...)
10002818:	83 c4 10             	add    esp,0x10
1000281b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000281d: R_386_32	_TEMP_trackBuffer
10002821:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002824:	52                   	push   edx
10002825:	6a 00                	push   0x0
10002827:	50                   	push   eax
10002828:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000282b:	e8 fc ff ff ff       	call   1000282c <FloppyDrive::read(unsigned long long, int, void*)+0x122>	1000282c: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002830:	83 c4 10             	add    esp,0x10
10002833:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002836:	a3 00 00 00 00       	mov    ds:0x0,eax	10002837: R_386_32	_TEMP_cyl
1000283b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000283e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002844:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002847:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000284d:	83 c2 64             	add    edx,0x64
10002850:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002854:	89 d0                	mov    eax,edx
10002856:	c1 e0 02             	shl    eax,0x2
10002859:	01 d0                	add    eax,edx
1000285b:	c1 e0 02             	shl    eax,0x2
1000285e:	01 d0                	add    eax,edx
10002860:	05 13 00 00 00       	add    eax,0x13	10002861: R_386_32	floppyTable
10002865:	8a 00                	mov    al,BYTE PTR [eax]
10002867:	0f b6 c0             	movzx  eax,al
1000286a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000286d:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002870:	85 c0                	test   eax,eax
10002872:	75 53                	jne    100028c7 <FloppyDrive::read(unsigned long long, int, void*)+0x1bd>
10002874:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002876: R_386_32	_TEMP_cylinder0_bf
1000287a:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000287d:	48                   	dec    eax
1000287e:	c1 e0 09             	shl    eax,0x9
10002881:	89 c1                	mov    ecx,eax
10002883:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002886:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
1000288a:	c1 e0 09             	shl    eax,0x9
1000288d:	01 c8                	add    eax,ecx
1000288f:	01 c2                	add    edx,eax
10002891:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002894:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002897:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000289a:	c7 45 d8 00 02 00 00 	mov    DWORD PTR [ebp-0x28],0x200
100028a1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100028a4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100028a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100028aa:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100028ad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100028b0:	89 c6                	mov    esi,eax
100028b2:	89 d7                	mov    edi,edx
100028b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100028b6:	89 c8                	mov    eax,ecx
100028b8:	89 fa                	mov    edx,edi
100028ba:	89 f3                	mov    ebx,esi
100028bc:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100028bf:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100028c2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100028c5:	eb 51                	jmp    10002918 <FloppyDrive::read(unsigned long long, int, void*)+0x20e>
100028c7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100028c9: R_386_32	_TEMP_trackBuffer
100028cd:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
100028d0:	48                   	dec    eax
100028d1:	c1 e0 09             	shl    eax,0x9
100028d4:	89 c1                	mov    ecx,eax
100028d6:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
100028d9:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
100028dd:	c1 e0 09             	shl    eax,0x9
100028e0:	01 c8                	add    eax,ecx
100028e2:	01 c2                	add    edx,eax
100028e4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100028e7:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100028ea:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
100028ed:	c7 45 bc 00 02 00 00 	mov    DWORD PTR [ebp-0x44],0x200
100028f4:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100028f7:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100028fa:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100028fd:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002900:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10002903:	89 c6                	mov    esi,eax
10002905:	89 d7                	mov    edi,edx
10002907:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002909:	89 c8                	mov    eax,ecx
1000290b:	89 fa                	mov    edx,edi
1000290d:	89 f3                	mov    ebx,esi
1000290f:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
10002912:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
10002915:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10002918:	b8 00 00 00 00       	mov    eax,0x0
1000291d:	8d 65 f4             	lea    esp,[ebp-0xc]
10002920:	5b                   	pop    ebx
10002921:	5e                   	pop    esi
10002922:	5f                   	pop    edi
10002923:	5d                   	pop    ebp
10002924:	c3                   	ret    
10002925:	90                   	nop

10002926 <FloppyDrive::write(unsigned long long, int, void*)>:
10002926:	55                   	push   ebp
10002927:	89 e5                	mov    ebp,esp
10002929:	57                   	push   edi
1000292a:	56                   	push   esi
1000292b:	53                   	push   ebx
1000292c:	81 ec 8c 00 00 00    	sub    esp,0x8c
10002932:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002935:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
1000293b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000293e:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
10002944:	a0 00 00 00 00       	mov    al,ds:0x0	10002945: R_386_32	_TEMP_allocated
10002949:	83 f0 01             	xor    eax,0x1
1000294c:	84 c0                	test   al,al
1000294e:	74 46                	je     10002996 <FloppyDrive::write(unsigned long long, int, void*)+0x70>
10002950:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002952: R_386_32	_TEMP_allocated
10002957:	83 ec 0c             	sub    esp,0xc
1000295a:	68 00 48 00 00       	push   0x4800
1000295f:	e8 fc ff ff ff       	call   10002960 <FloppyDrive::write(unsigned long long, int, void*)+0x3a>	10002960: R_386_PC32	malloc
10002964:	83 c4 10             	add    esp,0x10
10002967:	a3 00 00 00 00       	mov    ds:0x0,eax	10002968: R_386_32	_TEMP_trackBuffer
1000296c:	83 ec 0c             	sub    esp,0xc
1000296f:	68 00 48 00 00       	push   0x4800
10002974:	e8 fc ff ff ff       	call   10002975 <FloppyDrive::write(unsigned long long, int, void*)+0x4f>	10002975: R_386_PC32	malloc
10002979:	83 c4 10             	add    esp,0x10
1000297c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000297d: R_386_32	_TEMP_cylinder0_bf
10002981:	83 ec 0c             	sub    esp,0xc
10002984:	68 00 48 00 00       	push   0x4800
10002989:	e8 fc ff ff ff       	call   1000298a <FloppyDrive::write(unsigned long long, int, void*)+0x64>	1000298a: R_386_PC32	malloc
1000298e:	83 c4 10             	add    esp,0x10
10002991:	a3 00 00 00 00       	mov    ds:0x0,eax	10002992: R_386_32	_TEMP_write_bf
10002996:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
1000299a:	74 5b                	je     100029f7 <FloppyDrive::write(unsigned long long, int, void*)+0xd1>
1000299c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100029a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100029a6:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
100029a9:	7d 42                	jge    100029ed <FloppyDrive::write(unsigned long long, int, void*)+0xc7>
100029ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029ae:	8b 00                	mov    eax,DWORD PTR [eax]
100029b0:	83 c0 2c             	add    eax,0x2c
100029b3:	8b 30                	mov    esi,DWORD PTR [eax]
100029b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100029b8:	89 c1                	mov    ecx,eax
100029ba:	89 c3                	mov    ebx,eax
100029bc:	c1 fb 1f             	sar    ebx,0x1f
100029bf:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100029c5:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [ebp-0x8c]
100029cb:	01 c8                	add    eax,ecx
100029cd:	11 da                	adc    edx,ebx
100029cf:	83 ec 0c             	sub    esp,0xc
100029d2:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100029d5:	6a 01                	push   0x1
100029d7:	52                   	push   edx
100029d8:	50                   	push   eax
100029d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029dc:	ff d6                	call   esi
100029de:	83 c4 20             	add    esp,0x20
100029e1:	81 45 18 00 02 00 00 	add    DWORD PTR [ebp+0x18],0x200
100029e8:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100029eb:	eb b6                	jmp    100029a3 <FloppyDrive::write(unsigned long long, int, void*)+0x7d>
100029ed:	b8 00 00 00 00       	mov    eax,0x0
100029f2:	e9 d1 01 00 00       	jmp    10002bc8 <FloppyDrive::write(unsigned long long, int, void*)+0x2a2>
100029f7:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100029fd:	83 ec 0c             	sub    esp,0xc
10002a00:	8d 55 80             	lea    edx,[ebp-0x80]
10002a03:	52                   	push   edx
10002a04:	8d 55 84             	lea    edx,[ebp-0x7c]
10002a07:	52                   	push   edx
10002a08:	8d 55 88             	lea    edx,[ebp-0x78]
10002a0b:	52                   	push   edx
10002a0c:	50                   	push   eax
10002a0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a10:	e8 fc ff ff ff       	call   10002a11 <FloppyDrive::write(unsigned long long, int, void*)+0xeb>	10002a11: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
10002a15:	83 c4 20             	add    esp,0x20
10002a18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a1b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002a21:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002a24:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002a2a:	83 c2 64             	add    edx,0x64
10002a2d:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002a31:	89 d0                	mov    eax,edx
10002a33:	c1 e0 02             	shl    eax,0x2
10002a36:	01 d0                	add    eax,edx
10002a38:	c1 e0 02             	shl    eax,0x2
10002a3b:	01 d0                	add    eax,edx
10002a3d:	05 13 00 00 00       	add    eax,0x13	10002a3e: R_386_32	floppyTable
10002a42:	8a 00                	mov    al,BYTE PTR [eax]
10002a44:	0f b6 c0             	movzx  eax,al
10002a47:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002a4a:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002a4d:	85 c0                	test   eax,eax
10002a4f:	75 77                	jne    10002ac8 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002a51:	a0 00 00 00 00       	mov    al,ds:0x0	10002a52: R_386_32	hasCyl0Bf
10002a56:	84 c0                	test   al,al
10002a58:	74 6e                	je     10002ac8 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002a5a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a5c: R_386_32	_TEMP_cylinder0_bf
10002a60:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002a63:	48                   	dec    eax
10002a64:	c1 e0 09             	shl    eax,0x9
10002a67:	89 c1                	mov    ecx,eax
10002a69:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002a6c:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002a70:	c1 e0 09             	shl    eax,0x9
10002a73:	01 c8                	add    eax,ecx
10002a75:	01 d0                	add    eax,edx
10002a77:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002a7a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002a7d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002a80:	c7 45 d4 00 02 00 00 	mov    DWORD PTR [ebp-0x2c],0x200
10002a87:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002a8a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10002a8d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002a90:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002a93:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002a96:	89 c6                	mov    esi,eax
10002a98:	89 d7                	mov    edi,edx
10002a9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002a9c:	89 c8                	mov    eax,ecx
10002a9e:	89 fa                	mov    edx,edi
10002aa0:	89 f3                	mov    ebx,esi
10002aa2:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10002aa5:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
10002aa8:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002aab:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002aad: R_386_32	_TEMP_cylinder0_bf
10002ab1:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002ab4:	52                   	push   edx
10002ab5:	6a 01                	push   0x1
10002ab7:	50                   	push   eax
10002ab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002abb:	e8 fc ff ff ff       	call   10002abc <FloppyDrive::write(unsigned long long, int, void*)+0x196>	10002abc: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002ac0:	83 c4 10             	add    esp,0x10
10002ac3:	e9 fb 00 00 00       	jmp    10002bc3 <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002ac8:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
10002acb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002acc: R_386_32	_TEMP_cyl
10002ad0:	39 c2                	cmp    edx,eax
10002ad2:	75 6e                	jne    10002b42 <FloppyDrive::write(unsigned long long, int, void*)+0x21c>
10002ad4:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002ad6: R_386_32	_TEMP_trackBuffer
10002ada:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002add:	48                   	dec    eax
10002ade:	c1 e0 09             	shl    eax,0x9
10002ae1:	89 c1                	mov    ecx,eax
10002ae3:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002ae6:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002aea:	c1 e0 09             	shl    eax,0x9
10002aed:	01 c8                	add    eax,ecx
10002aef:	01 d0                	add    eax,edx
10002af1:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002af4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002af7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10002afa:	c7 45 b8 00 02 00 00 	mov    DWORD PTR [ebp-0x48],0x200
10002b01:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002b04:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10002b07:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10002b0a:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10002b0d:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
10002b10:	89 c6                	mov    esi,eax
10002b12:	89 d7                	mov    edi,edx
10002b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002b16:	89 c8                	mov    eax,ecx
10002b18:	89 fa                	mov    edx,edi
10002b1a:	89 f3                	mov    ebx,esi
10002b1c:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10002b1f:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002b22:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002b25:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b27: R_386_32	_TEMP_trackBuffer
10002b2b:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002b2e:	52                   	push   edx
10002b2f:	6a 01                	push   0x1
10002b31:	50                   	push   eax
10002b32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b35:	e8 fc ff ff ff       	call   10002b36 <FloppyDrive::write(unsigned long long, int, void*)+0x210>	10002b36: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002b3a:	83 c4 10             	add    esp,0x10
10002b3d:	e9 81 00 00 00       	jmp    10002bc3 <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002b42:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b44: R_386_32	_TEMP_write_bf
10002b48:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002b4b:	52                   	push   edx
10002b4c:	6a 00                	push   0x0
10002b4e:	50                   	push   eax
10002b4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b52:	e8 fc ff ff ff       	call   10002b53 <FloppyDrive::write(unsigned long long, int, void*)+0x22d>	10002b53: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002b57:	83 c4 10             	add    esp,0x10
10002b5a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b5c: R_386_32	_TEMP_write_bf
10002b60:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002b63:	48                   	dec    eax
10002b64:	c1 e0 09             	shl    eax,0x9
10002b67:	89 c1                	mov    ecx,eax
10002b69:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002b6c:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002b70:	c1 e0 09             	shl    eax,0x9
10002b73:	01 c8                	add    eax,ecx
10002b75:	01 d0                	add    eax,edx
10002b77:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10002b7a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002b7d:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002b80:	c7 45 9c 00 02 00 00 	mov    DWORD PTR [ebp-0x64],0x200
10002b87:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002b8a:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10002b8d:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002b90:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10002b93:	8b 4d 9c             	mov    ecx,DWORD PTR [ebp-0x64]
10002b96:	89 c6                	mov    esi,eax
10002b98:	89 d7                	mov    edi,edx
10002b9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002b9c:	89 c8                	mov    eax,ecx
10002b9e:	89 fa                	mov    edx,edi
10002ba0:	89 f3                	mov    ebx,esi
10002ba2:	89 5d 94             	mov    DWORD PTR [ebp-0x6c],ebx
10002ba5:	89 55 90             	mov    DWORD PTR [ebp-0x70],edx
10002ba8:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10002bab:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002bad: R_386_32	_TEMP_write_bf
10002bb1:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002bb4:	52                   	push   edx
10002bb5:	6a 01                	push   0x1
10002bb7:	50                   	push   eax
10002bb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bbb:	e8 fc ff ff ff       	call   10002bbc <FloppyDrive::write(unsigned long long, int, void*)+0x296>	10002bbc: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002bc0:	83 c4 10             	add    esp,0x10
10002bc3:	b8 00 00 00 00       	mov    eax,0x0
10002bc8:	8d 65 f4             	lea    esp,[ebp-0xc]
10002bcb:	5b                   	pop    ebx
10002bcc:	5e                   	pop    esi
10002bcd:	5f                   	pop    edi
10002bce:	5d                   	pop    ebp
10002bcf:	c3                   	ret    

10002bd0 <FloppyDrive::~FloppyDrive()>:
10002bd0:	55                   	push   ebp
10002bd1:	89 e5                	mov    ebp,esp
10002bd3:	83 ec 08             	sub    esp,0x8
10002bd6:	ba 08 00 00 00       	mov    edx,0x8	10002bd7: R_386_32	vtable for FloppyDrive
10002bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bde:	89 10                	mov    DWORD PTR [eax],edx
10002be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002be3:	83 ec 0c             	sub    esp,0xc
10002be6:	50                   	push   eax
10002be7:	e8 fc ff ff ff       	call   10002be8 <FloppyDrive::~FloppyDrive()+0x18>	10002be8: R_386_PC32	PhysicalDisk::~PhysicalDisk()
10002bec:	83 c4 10             	add    esp,0x10
10002bef:	90                   	nop
10002bf0:	c9                   	leave  
10002bf1:	c3                   	ret    

10002bf2 <FloppyDrive::~FloppyDrive()>:
10002bf2:	55                   	push   ebp
10002bf3:	89 e5                	mov    ebp,esp
10002bf5:	83 ec 08             	sub    esp,0x8
10002bf8:	83 ec 0c             	sub    esp,0xc
10002bfb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bfe:	e8 fc ff ff ff       	call   10002bff <FloppyDrive::~FloppyDrive()+0xd>	10002bff: R_386_PC32	FloppyDrive::~FloppyDrive()
10002c03:	83 c4 10             	add    esp,0x10
10002c06:	83 ec 08             	sub    esp,0x8
10002c09:	68 74 01 00 00       	push   0x174
10002c0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002c11:	e8 fc ff ff ff       	call   10002c12 <FloppyDrive::~FloppyDrive()+0x20>	10002c12: R_386_PC32	operator delete(void*, unsigned long)
10002c16:	83 c4 10             	add    esp,0x10
10002c19:	c9                   	leave  
10002c1a:	c3                   	ret    
10002c1b:	90                   	nop

10002c1c <Gameport::Gameport()>:
10002c1c:	55                   	push   ebp
10002c1d:	89 e5                	mov    ebp,esp
10002c1f:	83 ec 08             	sub    esp,0x8
10002c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c25:	83 ec 08             	sub    esp,0x8
10002c28:	68 ac 5e 00 10       	push   0x10005eac	10002c29: R_386_32	.text
10002c2d:	50                   	push   eax
10002c2e:	e8 fc ff ff ff       	call   10002c2f <Gameport::Gameport()+0x13>	10002c2f: R_386_PC32	Device::Device(char const*)
10002c33:	83 c4 10             	add    esp,0x10
10002c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c39:	05 58 01 00 00       	add    eax,0x158
10002c3e:	83 ec 0c             	sub    esp,0xc
10002c41:	50                   	push   eax
10002c42:	e8 fc ff ff ff       	call   10002c43 <Gameport::Gameport()+0x27>	10002c43: R_386_PC32	JoystickHost::JoystickHost()
10002c47:	83 c4 10             	add    esp,0x10
10002c4a:	ba 08 00 00 00       	mov    edx,0x8	10002c4b: R_386_32	vtable for Gameport
10002c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c52:	89 10                	mov    DWORD PTR [eax],edx
10002c54:	ba 38 00 00 00       	mov    edx,0x38	10002c55: R_386_32	vtable for Gameport
10002c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c5c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c65:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
10002c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c72:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
10002c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c7f:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
10002c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c8c:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
10002c96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c99:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
10002ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ca6:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
10002cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cb3:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
10002cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cc0:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
10002cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ccd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cd7:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ce1:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
10002ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ceb:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
10002cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cf5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cff:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002d06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d0f:	0f b6 d0             	movzx  edx,al
10002d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d15:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10002d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d25:	0f b6 d0             	movzx  edx,al
10002d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d2b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10002d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d39:	8d 50 01             	lea    edx,[eax+0x1]
10002d3c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002d3f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002d45:	0f b6 d0             	movzx  edx,al
10002d48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d4b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002d4f:	83 e1 3f             	and    ecx,0x3f
10002d52:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002d56:	90                   	nop
10002d57:	c9                   	leave  
10002d58:	c3                   	ret    
10002d59:	90                   	nop

10002d5a <Gameport::~Gameport()>:
10002d5a:	55                   	push   ebp
10002d5b:	89 e5                	mov    ebp,esp
10002d5d:	83 ec 08             	sub    esp,0x8
10002d60:	ba 08 00 00 00       	mov    edx,0x8	10002d61: R_386_32	vtable for Gameport
10002d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d68:	89 10                	mov    DWORD PTR [eax],edx
10002d6a:	ba 38 00 00 00       	mov    edx,0x38	10002d6b: R_386_32	vtable for Gameport
10002d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d72:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d7b:	83 ec 0c             	sub    esp,0xc
10002d7e:	50                   	push   eax
10002d7f:	e8 fc ff ff ff       	call   10002d80 <Gameport::~Gameport()+0x26>	10002d80: R_386_PC32	Device::~Device()
10002d84:	83 c4 10             	add    esp,0x10
10002d87:	90                   	nop
10002d88:	c9                   	leave  
10002d89:	c3                   	ret    

10002d8a <Gameport::~Gameport()>:
10002d8a:	55                   	push   ebp
10002d8b:	89 e5                	mov    ebp,esp
10002d8d:	83 ec 08             	sub    esp,0x8
10002d90:	83 ec 0c             	sub    esp,0xc
10002d93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d96:	e8 fc ff ff ff       	call   10002d97 <Gameport::~Gameport()+0xd>	10002d97: R_386_PC32	Gameport::~Gameport()
10002d9b:	83 c4 10             	add    esp,0x10
10002d9e:	83 ec 08             	sub    esp,0x8
10002da1:	68 80 01 00 00       	push   0x180
10002da6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002da9:	e8 fc ff ff ff       	call   10002daa <Gameport::~Gameport()+0x20>	10002daa: R_386_PC32	operator delete(void*, unsigned long)
10002dae:	83 c4 10             	add    esp,0x10
10002db1:	c9                   	leave  
10002db2:	c3                   	ret    
10002db3:	90                   	nop

10002db4 <Gameport::calibration(int)>:
10002db4:	57                   	push   edi
10002db5:	56                   	push   esi
10002db6:	53                   	push   ebx
10002db7:	81 ec d0 00 00 00    	sub    esp,0xd0
10002dbd:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
10002dc4:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
10002dcb:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
10002dd2:	74 0c                	je     10002de0 <Gameport::calibration(int)+0x2c>
10002dd4:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
10002ddb:	e9 e6 00 00 00       	jmp    10002ec6 <Gameport::calibration(int)+0x112>
10002de0:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10002de7:	50                   	push   eax
10002de8:	56                   	push   esi
10002de9:	53                   	push   ebx
10002dea:	57                   	push   edi
10002deb:	e8 fc ff ff ff       	call   10002dec <Gameport::calibration(int)+0x38>	10002dec: R_386_PC32	Gameport::readRaw(int)
10002df0:	6a 0a                	push   0xa
10002df2:	e8 fc ff ff ff       	call   10002df3 <Gameport::calibration(int)+0x3f>	10002df3: R_386_PC32	milliTenthSleep(unsigned int)
10002df7:	8d 44 24 10          	lea    eax,[esp+0x10]
10002dfb:	83 c4 0c             	add    esp,0xc
10002dfe:	56                   	push   esi
10002dff:	53                   	push   ebx
10002e00:	50                   	push   eax
10002e01:	e8 fc ff ff ff       	call   10002e02 <Gameport::calibration(int)+0x4e>	10002e02: R_386_PC32	Gameport::readRaw(int)
10002e06:	6a 0a                	push   0xa
10002e08:	e8 fc ff ff ff       	call   10002e09 <Gameport::calibration(int)+0x55>	10002e09: R_386_PC32	milliTenthSleep(unsigned int)
10002e0d:	8d 44 24 44          	lea    eax,[esp+0x44]
10002e11:	83 c4 0c             	add    esp,0xc
10002e14:	56                   	push   esi
10002e15:	53                   	push   ebx
10002e16:	50                   	push   eax
10002e17:	e8 fc ff ff ff       	call   10002e18 <Gameport::calibration(int)+0x64>	10002e18: R_386_PC32	Gameport::readRaw(int)
10002e1c:	6a 0a                	push   0xa
10002e1e:	e8 fc ff ff ff       	call   10002e1f <Gameport::calibration(int)+0x6b>	10002e1f: R_386_PC32	milliTenthSleep(unsigned int)
10002e23:	8d 44 24 78          	lea    eax,[esp+0x78]
10002e27:	83 c4 0c             	add    esp,0xc
10002e2a:	56                   	push   esi
10002e2b:	53                   	push   ebx
10002e2c:	50                   	push   eax
10002e2d:	e8 fc ff ff ff       	call   10002e2e <Gameport::calibration(int)+0x7a>	10002e2e: R_386_PC32	Gameport::readRaw(int)
10002e32:	6a 0a                	push   0xa
10002e34:	e8 fc ff ff ff       	call   10002e35 <Gameport::calibration(int)+0x81>	10002e35: R_386_PC32	milliTenthSleep(unsigned int)
10002e39:	83 c4 0c             	add    esp,0xc
10002e3c:	56                   	push   esi
10002e3d:	53                   	push   ebx
10002e3e:	57                   	push   edi
10002e3f:	bf 03 00 00 00       	mov    edi,0x3
10002e44:	e8 fc ff ff ff       	call   10002e45 <Gameport::calibration(int)+0x91>	10002e45: R_386_PC32	Gameport::readRaw(int)
10002e49:	31 d2                	xor    edx,edx
10002e4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002e4f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10002e53:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
10002e5a:	f7 f7                	div    edi
10002e5c:	31 d2                	xor    edx,edx
10002e5e:	89 c1                	mov    ecx,eax
10002e60:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002e64:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002e68:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
10002e6f:	83 c4 0c             	add    esp,0xc
10002e72:	f7 f7                	div    edi
10002e74:	85 f6                	test   esi,esi
10002e76:	75 0e                	jne    10002e86 <Gameport::calibration(int)+0xd2>
10002e78:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
10002e7e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10002e84:	eb 0c                	jmp    10002e92 <Gameport::calibration(int)+0xde>
10002e86:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
10002e8c:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
10002e92:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
10002e99:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
10002e9f:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
10002ea6:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10002eac:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10002eb3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
10002eb9:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
10002ec0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
10002ec6:	81 c4 d0 00 00 00    	add    esp,0xd0
10002ecc:	5b                   	pop    ebx
10002ecd:	5e                   	pop    esi
10002ece:	5f                   	pop    edi
10002ecf:	c3                   	ret    

10002ed0 <Gameport::detect()>:
10002ed0:	53                   	push   ebx
10002ed1:	81 ec 88 00 00 00    	sub    esp,0x88
10002ed7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10002ede:	8d 44 24 18          	lea    eax,[esp+0x18]
10002ee2:	51                   	push   ecx
10002ee3:	6a 00                	push   0x0
10002ee5:	53                   	push   ebx
10002ee6:	50                   	push   eax
10002ee7:	e8 fc ff ff ff       	call   10002ee8 <Gameport::detect()+0x18>	10002ee8: R_386_PC32	Gameport::readRaw(int)
10002eec:	8d 44 24 58          	lea    eax,[esp+0x58]
10002ef0:	52                   	push   edx
10002ef1:	52                   	push   edx
10002ef2:	6a 01                	push   0x1
10002ef4:	53                   	push   ebx
10002ef5:	50                   	push   eax
10002ef6:	e8 fc ff ff ff       	call   10002ef7 <Gameport::detect()+0x27>	10002ef7: R_386_PC32	Gameport::readRaw(int)
10002efb:	83 c4 1c             	add    esp,0x1c
10002efe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002f05:	75 14                	jne    10002f1b <Gameport::detect()+0x4b>
10002f07:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
10002f0c:	74 0d                	je     10002f1b <Gameport::detect()+0x4b>
10002f0e:	52                   	push   edx
10002f0f:	52                   	push   edx
10002f10:	6a 00                	push   0x0
10002f12:	53                   	push   ebx
10002f13:	e8 fc ff ff ff       	call   10002f14 <Gameport::detect()+0x44>	10002f14: R_386_PC32	Gameport::calibration(int)
10002f18:	83 c4 10             	add    esp,0x10
10002f1b:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
10002f1f:	83 e2 10             	and    edx,0x10
10002f22:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002f29:	75 19                	jne    10002f44 <Gameport::detect()+0x74>
10002f2b:	84 d2                	test   dl,dl
10002f2d:	74 15                	je     10002f44 <Gameport::detect()+0x74>
10002f2f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10002f33:	50                   	push   eax
10002f34:	50                   	push   eax
10002f35:	6a 01                	push   0x1
10002f37:	53                   	push   ebx
10002f38:	e8 fc ff ff ff       	call   10002f39 <Gameport::detect()+0x69>	10002f39: R_386_PC32	Gameport::calibration(int)
10002f3d:	83 c4 10             	add    esp,0x10
10002f40:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10002f44:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
10002f48:	c0 e8 04             	shr    al,0x4
10002f4b:	83 e0 01             	and    eax,0x1
10002f4e:	84 d2                	test   dl,dl
10002f50:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
10002f56:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10002f5d:	81 c4 88 00 00 00    	add    esp,0x88
10002f63:	5b                   	pop    ebx
10002f64:	c3                   	ret    
10002f65:	90                   	nop

10002f66 <Gameport::read(int)>:
10002f66:	57                   	push   edi
10002f67:	56                   	push   esi
10002f68:	53                   	push   ebx
10002f69:	83 ec 50             	sub    esp,0x50
10002f6c:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002f70:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002f74:	85 f6                	test   esi,esi
10002f76:	75 09                	jne    10002f81 <Gameport::read(int)+0x1b>
10002f78:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002f7f:	eb 0c                	jmp    10002f8d <Gameport::read(int)+0x27>
10002f81:	83 fe 01             	cmp    esi,0x1
10002f84:	75 15                	jne    10002f9b <Gameport::read(int)+0x35>
10002f86:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002f8d:	75 0c                	jne    10002f9b <Gameport::read(int)+0x35>
10002f8f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002f93:	80 20 ef             	and    BYTE PTR [eax],0xef
10002f96:	e9 b0 00 00 00       	jmp    1000304b <Gameport::read(int)+0xe5>
10002f9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10002f9f:	52                   	push   edx
10002fa0:	56                   	push   esi
10002fa1:	53                   	push   ebx
10002fa2:	50                   	push   eax
10002fa3:	e8 fc ff ff ff       	call   10002fa4 <Gameport::read(int)+0x3e>	10002fa4: R_386_PC32	Gameport::readRaw(int)
10002fa8:	83 c4 0c             	add    esp,0xc
10002fab:	4e                   	dec    esi
10002fac:	75 1a                	jne    10002fc8 <Gameport::read(int)+0x62>
10002fae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10002fb4:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10002fba:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10002fc0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10002fc6:	eb 18                	jmp    10002fe0 <Gameport::read(int)+0x7a>
10002fc8:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10002fce:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10002fd4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10002fda:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10002fe0:	85 ff                	test   edi,edi
10002fe2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002fe6:	0f 94 c0             	sete   al
10002fe9:	85 f6                	test   esi,esi
10002feb:	0f 94 c1             	sete   cl
10002fee:	09 c1                	or     ecx,eax
10002ff0:	39 d7                	cmp    edi,edx
10002ff2:	0f 94 c0             	sete   al
10002ff5:	08 c1                	or     cl,al
10002ff7:	75 96                	jne    10002f8f <Gameport::read(int)+0x29>
10002ff9:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10002ffd:	74 90                	je     10002f8f <Gameport::read(int)+0x29>
10002fff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10003003:	89 d9                	mov    ecx,ebx
10003005:	29 f1                	sub    ecx,esi
10003007:	6b c9 7f             	imul   ecx,ecx,0x7f
1000300a:	39 fb                	cmp    ebx,edi
1000300c:	7e 1a                	jle    10003028 <Gameport::read(int)+0xc2>
1000300e:	29 fb                	sub    ebx,edi
10003010:	29 fa                	sub    edx,edi
10003012:	6b db 7f             	imul   ebx,ebx,0x7f
10003015:	89 d7                	mov    edi,edx
10003017:	89 d8                	mov    eax,ebx
10003019:	99                   	cdq    
1000301a:	f7 ff                	idiv   edi
1000301c:	89 c3                	mov    ebx,eax
1000301e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003022:	29 f0                	sub    eax,esi
10003024:	89 c6                	mov    esi,eax
10003026:	eb 07                	jmp    1000302f <Gameport::read(int)+0xc9>
10003028:	89 c8                	mov    eax,ecx
1000302a:	99                   	cdq    
1000302b:	f7 ff                	idiv   edi
1000302d:	89 c3                	mov    ebx,eax
1000302f:	89 c8                	mov    eax,ecx
10003031:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
10003035:	99                   	cdq    
10003036:	b9 0d 00 00 00       	mov    ecx,0xd
1000303b:	f7 fe                	idiv   esi
1000303d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
10003041:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
10003045:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10003049:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000304b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000304f:	83 c4 50             	add    esp,0x50
10003052:	5b                   	pop    ebx
10003053:	5e                   	pop    esi
10003054:	5f                   	pop    edi
10003055:	c2 04 00             	ret    0x4

10003058 <non-virtual thunk to Gameport::read(int)>:
10003058:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
10003060:	e9 01 ff ff ff       	jmp    10002f66 <Gameport::read(int)>
10003065:	90                   	nop

10003066 <Gameport::readRaw(int)>:
10003066:	57                   	push   edi
10003067:	ba 01 02 00 00       	mov    edx,0x201
1000306c:	56                   	push   esi
1000306d:	53                   	push   ebx
1000306e:	83 ec 10             	sub    esp,0x10
10003071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10003075:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
10003079:	8a 01                	mov    al,BYTE PTR [ecx]
1000307b:	83 e0 e0             	and    eax,0xffffffe0
1000307e:	83 c8 12             	or     eax,0x12
10003081:	88 01                	mov    BYTE PTR [ecx],al
10003083:	ec                   	in     al,dx
10003084:	88 c2                	mov    dl,al
10003086:	85 db                	test   ebx,ebx
10003088:	75 11                	jne    1000309b <Gameport::readRaw(int)+0x35>
1000308a:	c0 ea 04             	shr    dl,0x4
1000308d:	c0 e8 05             	shr    al,0x5
10003090:	83 e2 01             	and    edx,0x1
10003093:	83 e0 01             	and    eax,0x1
10003096:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
10003099:	eb 0c                	jmp    100030a7 <Gameport::readRaw(int)+0x41>
1000309b:	c0 ea 06             	shr    dl,0x6
1000309e:	c0 e8 07             	shr    al,0x7
100030a1:	83 e2 01             	and    edx,0x1
100030a4:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
100030a7:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
100030aa:	ba 01 02 00 00       	mov    edx,0x201
100030af:	b0 ff                	mov    al,0xff
100030b1:	ee                   	out    dx,al
100030b2:	fa                   	cli    
100030b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100030b4: R_386_32	irqDisableCounter
100030b8:	4b                   	dec    ebx
100030b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100030bd:	0f 94 c3             	sete   bl
100030c0:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
100030c8:	0f b6 f3             	movzx  esi,bl
100030cb:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
100030d0:	0f b6 db             	movzx  ebx,bl
100030d3:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
100030d7:	4b                   	dec    ebx
100030d8:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
100030dd:	83 e3 fa             	and    ebx,0xfffffffa
100030e0:	31 ff                	xor    edi,edi
100030e2:	83 c3 08             	add    ebx,0x8
100030e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100030ec:	ba 01 02 00 00       	mov    edx,0x201
100030f1:	ec                   	in     al,dx
100030f2:	0f b6 c0             	movzx  eax,al
100030f5:	85 f0                	test   eax,esi
100030f7:	0f 94 c2             	sete   dl
100030fa:	08 54 24 06          	or     BYTE PTR [esp+0x6],dl
100030fe:	80 7c 24 06 01       	cmp    BYTE PTR [esp+0x6],0x1
10003103:	83 14 24 00          	adc    DWORD PTR [esp],0x0
10003107:	85 d8                	test   eax,ebx
10003109:	0f 94 c0             	sete   al
1000310c:	08 44 24 07          	or     BYTE PTR [esp+0x7],al
10003110:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
10003115:	83 d7 00             	adc    edi,0x0
10003118:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
1000311c:	75 0a                	jne    10003128 <Gameport::readRaw(int)+0xc2>
1000311e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
10003123:	75 13                	jne    10003138 <Gameport::readRaw(int)+0xd2>
10003125:	fb                   	sti    
10003126:	eb 10                	jmp    10003138 <Gameport::readRaw(int)+0xd2>
10003128:	80 7c 24 06 00       	cmp    BYTE PTR [esp+0x6],0x0
1000312d:	74 bd                	je     100030ec <Gameport::readRaw(int)+0x86>
1000312f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
10003134:	74 b6                	je     100030ec <Gameport::readRaw(int)+0x86>
10003136:	eb e6                	jmp    1000311e <Gameport::readRaw(int)+0xb8>
10003138:	81 ff ff ff 00 00    	cmp    edi,0xffff
1000313e:	74 09                	je     10003149 <Gameport::readRaw(int)+0xe3>
10003140:	81 3c 24 ff ff 00 00 	cmp    DWORD PTR [esp],0xffff
10003147:	75 03                	jne    1000314c <Gameport::readRaw(int)+0xe6>
10003149:	80 21 ef             	and    BYTE PTR [ecx],0xef
1000314c:	89 79 18             	mov    DWORD PTR [ecx+0x18],edi
1000314f:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003152:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
10003155:	83 c4 10             	add    esp,0x10
10003158:	89 c8                	mov    eax,ecx
1000315a:	5b                   	pop    ebx
1000315b:	5e                   	pop    esi
1000315c:	5f                   	pop    edi
1000315d:	c2 04 00             	ret    0x4

10003160 <Gameport::open(int, int, void*)>:
10003160:	31 c0                	xor    eax,eax
10003162:	c3                   	ret    
10003163:	90                   	nop

10003164 <Gameport::close(int, int, void*)>:
10003164:	31 c0                	xor    eax,eax
10003166:	c3                   	ret    
10003167:	90                   	nop

10003168 <DMAChannel::DMAChannel(int)>:
10003168:	55                   	push   ebp
10003169:	89 e5                	mov    ebp,esp
1000316b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000316e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10003175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003178:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000317f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003182:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003185:	89 10                	mov    DWORD PTR [eax],edx
10003187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000318a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10003191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003194:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000319b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000319e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
100031a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031a5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
100031a9:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
100031ad:	0f 9f c2             	setg   dl
100031b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031b3:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
100031b6:	90                   	nop
100031b7:	5d                   	pop    ebp
100031b8:	c3                   	ret    
100031b9:	90                   	nop

100031ba <DMAChannel::~DMAChannel()>:
100031ba:	55                   	push   ebp
100031bb:	89 e5                	mov    ebp,esp
100031bd:	83 ec 08             	sub    esp,0x8
100031c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100031c6:	85 c0                	test   eax,eax
100031c8:	74 19                	je     100031e3 <DMAChannel::~DMAChannel()+0x29>
100031ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031cd:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
100031d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100031d6:	83 ec 08             	sub    esp,0x8
100031d9:	52                   	push   edx
100031da:	50                   	push   eax
100031db:	e8 fc ff ff ff       	call   100031dc <DMAChannel::~DMAChannel()+0x22>	100031dc: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
100031e0:	83 c4 10             	add    esp,0x10
100031e3:	90                   	nop
100031e4:	c9                   	leave  
100031e5:	c3                   	ret    

100031e6 <DMAChannel::getAddress()>:
100031e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100031ed:	c3                   	ret    

100031ee <DMAChannel::getChannelNum()>:
100031ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031f2:	8b 00                	mov    eax,DWORD PTR [eax]
100031f4:	c3                   	ret    
100031f5:	90                   	nop

100031f6 <DMAChannel::setLength(unsigned int)>:
100031f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100031fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100031fe:	3d 00 00 01 00       	cmp    eax,0x10000
10003203:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10003206:	76 0d                	jbe    10003215 <DMAChannel::setLength(unsigned int)+0x1f>
10003208:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	1000320c: R_386_32	dmaLong
10003210:	e9 fc ff ff ff       	jmp    10003211 <DMAChannel::setLength(unsigned int)+0x1b>	10003211: R_386_PC32	KePanic(char const*)
10003215:	c3                   	ret    

10003216 <DMAChannel::setAddress(unsigned int)>:
10003216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000321a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000321e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003221:	c3                   	ret    

10003222 <DMAChannel::allocateAddressAndSet(unsigned short)>:
10003222:	56                   	push   esi
10003223:	53                   	push   ebx
10003224:	83 ec 10             	sub    esp,0x10
10003227:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000322b:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
10003230:	56                   	push   esi
10003231:	e8 fc ff ff ff       	call   10003232 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	10003232: R_386_PC32	Phys::allocateDMA(unsigned long)
10003236:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
10003239:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000323c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000323f:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10003242:	83 c4 14             	add    esp,0x14
10003245:	5b                   	pop    ebx
10003246:	5e                   	pop    esi
10003247:	c3                   	ret    

10003248 <DMAChannel::setMode(unsigned char)>:
10003248:	53                   	push   ebx
10003249:	83 ec 08             	sub    esp,0x8
1000324c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003250:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003254:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
10003258:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
1000325b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
1000325f:	74 2a                	je     1000328b <DMAChannel::setMode(unsigned char)+0x43>
10003261:	51                   	push   ecx
10003262:	51                   	push   ecx
10003263:	6a 01                	push   0x1
10003265:	53                   	push   ebx
10003266:	e8 fc ff ff ff       	call   10003267 <DMAChannel::setMode(unsigned char)+0x1f>	10003267: R_386_PC32	DMAChannel::mask(bool)
1000326b:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
1000326f:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
10003272:	19 d2                	sbb    edx,edx
10003274:	80 e2 35             	and    dl,0x35
10003277:	81 c2 d6 00 00 00    	add    edx,0xd6
1000327d:	ee                   	out    dx,al
1000327e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10003282:	83 c4 18             	add    esp,0x18
10003285:	5b                   	pop    ebx
10003286:	e9 1f 01 00 00       	jmp    100033aa <DMAChannel::unmask()>
1000328b:	83 c4 08             	add    esp,0x8
1000328e:	5b                   	pop    ebx
1000328f:	c3                   	ret    

10003290 <DMAChannel::start()>:
10003290:	57                   	push   edi
10003291:	56                   	push   esi
10003292:	53                   	push   ebx
10003293:	83 ec 10             	sub    esp,0x10
10003296:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000329a:	8b 06                	mov    eax,DWORD PTR [esi]
1000329c:	83 f8 07             	cmp    eax,0x7
1000329f:	77 60                	ja     10003301 <DMAChannel::start()+0x71>
100032a1:	8a 98 a0 5f 00 10    	mov    bl,BYTE PTR [eax+0x10005fa0]	100032a3: R_386_32	.text
100032a7:	8a 88 a8 5f 00 10    	mov    cl,BYTE PTR [eax+0x10005fa8]	100032a9: R_386_32	.text
100032ad:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
100032b1:	8a 80 b0 5f 00 10    	mov    al,BYTE PTR [eax+0x10005fb0]	100032b3: R_386_32	.text
100032b7:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
100032bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100032bf:	fa                   	cli    
100032c0:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100032c2: R_386_32	irqDisableCounter
100032c6:	50                   	push   eax
100032c7:	50                   	push   eax
100032c8:	6a 01                	push   0x1
100032ca:	56                   	push   esi
100032cb:	e8 fc ff ff ff       	call   100032cc <DMAChannel::start()+0x3c>	100032cc: R_386_PC32	DMAChannel::mask(bool)
100032d0:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
100032d3:	83 c4 10             	add    esp,0x10
100032d6:	80 fb 01             	cmp    bl,0x1
100032d9:	19 d2                	sbb    edx,edx
100032db:	31 c0                	xor    eax,eax
100032dd:	80 e2 34             	and    dl,0x34
100032e0:	81 c2 d8 00 00 00    	add    edx,0xd8
100032e6:	89 d7                	mov    edi,edx
100032e8:	ee                   	out    dx,al
100032e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
100032ec:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
100032f1:	84 db                	test   bl,bl
100032f3:	74 1f                	je     10003314 <DMAChannel::start()+0x84>
100032f5:	89 c8                	mov    eax,ecx
100032f7:	d1 e8                	shr    eax,1
100032f9:	ee                   	out    dx,al
100032fa:	89 c8                	mov    eax,ecx
100032fc:	c1 e8 09             	shr    eax,0x9
100032ff:	eb 1b                	jmp    1000331c <DMAChannel::start()+0x8c>
10003301:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10003305: R_386_32	dmaConfused
10003309:	83 c4 10             	add    esp,0x10
1000330c:	5b                   	pop    ebx
1000330d:	5e                   	pop    esi
1000330e:	5f                   	pop    edi
1000330f:	e9 fc ff ff ff       	jmp    10003310 <DMAChannel::start()+0x80>	10003310: R_386_PC32	KePanic(char const*)
10003314:	88 c8                	mov    al,cl
10003316:	ee                   	out    dx,al
10003317:	89 c8                	mov    eax,ecx
10003319:	c1 e8 08             	shr    eax,0x8
1000331c:	ee                   	out    dx,al
1000331d:	31 c0                	xor    eax,eax
1000331f:	89 fa                	mov    edx,edi
10003321:	ee                   	out    dx,al
10003322:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
10003325:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
1000332a:	8d 47 ff             	lea    eax,[edi-0x1]
1000332d:	ee                   	out    dx,al
1000332e:	8d 47 ff             	lea    eax,[edi-0x1]
10003331:	c1 e8 08             	shr    eax,0x8
10003334:	ee                   	out    dx,al
10003335:	89 c8                	mov    eax,ecx
10003337:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
1000333c:	c1 e8 10             	shr    eax,0x10
1000333f:	ee                   	out    dx,al
10003340:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
10003344:	74 12                	je     10003358 <DMAChannel::start()+0xc8>
10003346:	80 fb 01             	cmp    bl,0x1
10003349:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
1000334c:	19 d2                	sbb    edx,edx
1000334e:	80 e2 35             	and    dl,0x35
10003351:	81 c2 d6 00 00 00    	add    edx,0xd6
10003357:	ee                   	out    dx,al
10003358:	83 ec 0c             	sub    esp,0xc
1000335b:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
1000335f:	56                   	push   esi
10003360:	e8 fc ff ff ff       	call   10003361 <DMAChannel::start()+0xd1>	10003361: R_386_PC32	DMAChannel::unmask()
10003365:	a1 00 00 00 00       	mov    eax,ds:0x0	10003366: R_386_32	irqDisableCounter
1000336a:	83 c4 10             	add    esp,0x10
1000336d:	48                   	dec    eax
1000336e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000336f: R_386_32	irqDisableCounter
10003373:	85 c0                	test   eax,eax
10003375:	75 01                	jne    10003378 <DMAChannel::start()+0xe8>
10003377:	fb                   	sti    
10003378:	83 c4 10             	add    esp,0x10
1000337b:	5b                   	pop    ebx
1000337c:	5e                   	pop    esi
1000337d:	5f                   	pop    edi
1000337e:	c3                   	ret    
1000337f:	90                   	nop

10003380 <DMAChannel::stop()>:
10003380:	c3                   	ret    
10003381:	90                   	nop

10003382 <DMAChannel::mask(bool)>:
10003382:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10003386:	8a 01                	mov    al,BYTE PTR [ecx]
10003388:	83 e0 03             	and    eax,0x3
1000338b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10003390:	0f 95 c2             	setne  dl
10003393:	c1 e2 02             	shl    edx,0x2
10003396:	09 d0                	or     eax,edx
10003398:	80 79 0e 01          	cmp    BYTE PTR [ecx+0xe],0x1
1000339c:	19 d2                	sbb    edx,edx
1000339e:	80 e2 36             	and    dl,0x36
100033a1:	81 c2 d4 00 00 00    	add    edx,0xd4
100033a7:	ee                   	out    dx,al
100033a8:	c3                   	ret    
100033a9:	90                   	nop

100033aa <DMAChannel::unmask()>:
100033aa:	6a 00                	push   0x0
100033ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100033b0:	e8 fc ff ff ff       	call   100033b1 <DMAChannel::unmask()+0x7>	100033b1: R_386_PC32	DMAChannel::mask(bool)
100033b5:	58                   	pop    eax
100033b6:	5a                   	pop    edx
100033b7:	c3                   	ret    

100033b8 <DMA::DMA()>:
100033b8:	55                   	push   ebp
100033b9:	89 e5                	mov    ebp,esp
100033bb:	83 ec 08             	sub    esp,0x8
100033be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033c1:	83 ec 08             	sub    esp,0x8
100033c4:	68 00 00 00 00       	push   0x0	100033c5: R_386_32	dmaCtrlName
100033c9:	50                   	push   eax
100033ca:	e8 fc ff ff ff       	call   100033cb <DMA::DMA()+0x13>	100033cb: R_386_PC32	Device::Device(char const*)
100033cf:	83 c4 10             	add    esp,0x10
100033d2:	ba 08 00 00 00       	mov    edx,0x8	100033d3: R_386_32	vtable for DMA
100033d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033da:	89 10                	mov    DWORD PTR [eax],edx
100033dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033df:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
100033e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033ef:	0f b6 d0             	movzx  edx,al
100033f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033f5:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
100033fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003405:	0f b6 d0             	movzx  edx,al
10003408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000340b:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10003410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003413:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003419:	8d 50 01             	lea    edx,[eax+0x1]
1000341c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000341f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003425:	0f b6 d0             	movzx  edx,al
10003428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000342b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000342f:	83 e1 3f             	and    ecx,0x3f
10003432:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003439:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000343f:	0f b6 d0             	movzx  edx,al
10003442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003445:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
1000344c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000344f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003455:	0f b6 d0             	movzx  edx,al
10003458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000345b:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10003460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003463:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003469:	8d 50 01             	lea    edx,[eax+0x1]
1000346c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000346f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003475:	0f b6 d0             	movzx  edx,al
10003478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000347b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000347f:	83 e1 3f             	and    ecx,0x3f
10003482:	83 c9 40             	or     ecx,0x40
10003485:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000348c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003492:	0f b6 d0             	movzx  edx,al
10003495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003498:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
1000349f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034a8:	0f b6 d0             	movzx  edx,al
100034ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034ae:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100034b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034bc:	8d 50 01             	lea    edx,[eax+0x1]
100034bf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100034c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100034c8:	0f b6 d0             	movzx  edx,al
100034cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034ce:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100034d2:	83 e1 3f             	and    ecx,0x3f
100034d5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100034d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034e2:	0f b6 d0             	movzx  edx,al
100034e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034e8:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
100034ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034f8:	0f b6 d0             	movzx  edx,al
100034fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034fe:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10003503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003506:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000350c:	8d 50 01             	lea    edx,[eax+0x1]
1000350f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003512:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003518:	0f b6 d0             	movzx  edx,al
1000351b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000351e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003522:	83 e1 3f             	and    ecx,0x3f
10003525:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000352c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003532:	0f b6 d0             	movzx  edx,al
10003535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003538:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
1000353f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003542:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003548:	0f b6 d0             	movzx  edx,al
1000354b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000354e:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10003553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003556:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000355c:	8d 50 01             	lea    edx,[eax+0x1]
1000355f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003562:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003568:	0f b6 d0             	movzx  edx,al
1000356b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000356e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003572:	83 e1 3f             	and    ecx,0x3f
10003575:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000357c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003582:	0f b6 d0             	movzx  edx,al
10003585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003588:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
1000358f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003592:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003598:	0f b6 d0             	movzx  edx,al
1000359b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000359e:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100035a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100035ac:	8d 50 01             	lea    edx,[eax+0x1]
100035af:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100035b2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100035b8:	0f b6 d0             	movzx  edx,al
100035bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035be:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100035c2:	83 e1 3f             	and    ecx,0x3f
100035c5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100035c9:	90                   	nop
100035ca:	c9                   	leave  
100035cb:	c3                   	ret    

100035cc <DMA::getAvailable()>:
100035cc:	fa                   	cli    
100035cd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100035cf: R_386_32	irqDisableCounter
100035d3:	8d 42 01             	lea    eax,[edx+0x1]
100035d6:	a3 00 00 00 00       	mov    ds:0x0,eax	100035d7: R_386_32	irqDisableCounter
100035db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100035df:	0f b6 88 58 01 00 00 	movzx  ecx,BYTE PTR [eax+0x158]
100035e6:	31 c0                	xor    eax,eax
100035e8:	0f a3 c1             	bt     ecx,eax
100035eb:	73 08                	jae    100035f5 <DMA::getAvailable()+0x29>
100035ed:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100035ef: R_386_32	irqDisableCounter
100035f3:	eb 0f                	jmp    10003604 <DMA::getAvailable()+0x38>
100035f5:	40                   	inc    eax
100035f6:	83 f8 08             	cmp    eax,0x8
100035f9:	75 ed                	jne    100035e8 <DMA::getAvailable()+0x1c>
100035fb:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100035fd: R_386_32	irqDisableCounter
10003601:	83 c8 ff             	or     eax,0xffffffff
10003604:	85 d2                	test   edx,edx
10003606:	75 01                	jne    10003609 <DMA::getAvailable()+0x3d>
10003608:	fb                   	sti    
10003609:	c3                   	ret    

1000360a <DMA::open(int, int, void*)>:
1000360a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000360e:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
10003615:	31 c0                	xor    eax,eax
10003617:	e6 0d                	out    0xd,al
10003619:	e6 da                	out    0xda,al
1000361b:	31 c0                	xor    eax,eax
1000361d:	c3                   	ret    

1000361e <DMA::close(int, int, void*)>:
1000361e:	31 c0                	xor    eax,eax
10003620:	c3                   	ret    
10003621:	90                   	nop

10003622 <DMA::tryLockChannelWithBase(int)>:
10003622:	57                   	push   edi
10003623:	56                   	push   esi
10003624:	53                   	push   ebx
10003625:	83 ec 10             	sub    esp,0x10
10003628:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000362c:	fa                   	cli    
1000362d:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000362f: R_386_32	irqDisableCounter
10003633:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003637:	8d 41 01             	lea    eax,[ecx+0x1]
1000363a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000363b: R_386_32	irqDisableCounter
1000363f:	8d 43 03             	lea    eax,[ebx+0x3]
10003642:	39 d8                	cmp    eax,ebx
10003644:	7c 50                	jl     10003696 <DMA::tryLockChannelWithBase(int)+0x74>
10003646:	0f b6 b7 58 01 00 00 	movzx  esi,BYTE PTR [edi+0x158]
1000364d:	0f a3 de             	bt     esi,ebx
10003650:	73 41                	jae    10003693 <DMA::tryLockChannelWithBase(int)+0x71>
10003652:	83 ec 0c             	sub    esp,0xc
10003655:	88 d9                	mov    cl,bl
10003657:	b8 fe ff ff ff       	mov    eax,0xfffffffe
1000365c:	d3 c0                	rol    eax,cl
1000365e:	21 f0                	and    eax,esi
10003660:	88 87 58 01 00 00    	mov    BYTE PTR [edi+0x158],al
10003666:	6a 18                	push   0x18
10003668:	e8 fc ff ff ff       	call   10003669 <DMA::tryLockChannelWithBase(int)+0x47>	10003669: R_386_PC32	malloc
1000366d:	5a                   	pop    edx
1000366e:	59                   	pop    ecx
1000366f:	53                   	push   ebx
10003670:	50                   	push   eax
10003671:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003675:	e8 fc ff ff ff       	call   10003676 <DMA::tryLockChannelWithBase(int)+0x54>	10003676: R_386_PC32	DMAChannel::DMAChannel(int)
1000367a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000367b: R_386_32	irqDisableCounter
1000367f:	83 c4 10             	add    esp,0x10
10003682:	8d 50 ff             	lea    edx,[eax-0x1]
10003685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003689:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	1000368b: R_386_32	irqDisableCounter
1000368f:	85 d2                	test   edx,edx
10003691:	eb 0d                	jmp    100036a0 <DMA::tryLockChannelWithBase(int)+0x7e>
10003693:	43                   	inc    ebx
10003694:	eb ac                	jmp    10003642 <DMA::tryLockChannelWithBase(int)+0x20>
10003696:	31 c0                	xor    eax,eax
10003698:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	1000369a: R_386_32	irqDisableCounter
1000369e:	85 c9                	test   ecx,ecx
100036a0:	75 01                	jne    100036a3 <DMA::tryLockChannelWithBase(int)+0x81>
100036a2:	fb                   	sti    
100036a3:	83 c4 10             	add    esp,0x10
100036a6:	5b                   	pop    ebx
100036a7:	5e                   	pop    esi
100036a8:	5f                   	pop    edi
100036a9:	c3                   	ret    

100036aa <DMA::lockChannelWithBase(int)>:
100036aa:	83 ec 0c             	sub    esp,0xc
100036ad:	50                   	push   eax
100036ae:	50                   	push   eax
100036af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036b7:	e8 fc ff ff ff       	call   100036b8 <DMA::lockChannelWithBase(int)+0xe>	100036b8: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036bc:	83 c4 10             	add    esp,0x10
100036bf:	85 c0                	test   eax,eax
100036c1:	74 ea                	je     100036ad <DMA::lockChannelWithBase(int)+0x3>
100036c3:	83 c4 0c             	add    esp,0xc
100036c6:	c3                   	ret    
100036c7:	90                   	nop

100036c8 <DMA::tryLockChannel8()>:
100036c8:	83 ec 14             	sub    esp,0x14
100036cb:	6a 00                	push   0x0
100036cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036d1:	e8 fc ff ff ff       	call   100036d2 <DMA::tryLockChannel8()+0xa>	100036d2: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036d6:	83 c4 1c             	add    esp,0x1c
100036d9:	c3                   	ret    

100036da <DMA::tryLockChannel16()>:
100036da:	83 ec 14             	sub    esp,0x14
100036dd:	6a 04                	push   0x4
100036df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036e3:	e8 fc ff ff ff       	call   100036e4 <DMA::tryLockChannel16()+0xa>	100036e4: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036e8:	83 c4 1c             	add    esp,0x1c
100036eb:	c3                   	ret    

100036ec <DMA::tryLockChannel(int)>:
100036ec:	56                   	push   esi
100036ed:	53                   	push   ebx
100036ee:	83 ec 14             	sub    esp,0x14
100036f1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100036f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100036f9:	83 fb 07             	cmp    ebx,0x7
100036fc:	76 14                	jbe    10003712 <DMA::tryLockChannel(int)+0x26>
100036fe:	83 ec 0c             	sub    esp,0xc
10003701:	68 b8 5f 00 10       	push   0x10005fb8	10003702: R_386_32	.text
10003706:	e8 fc ff ff ff       	call   10003707 <DMA::tryLockChannel(int)+0x1b>	10003707: R_386_PC32	Dbg::kprintf(char const*, ...)
1000370b:	83 c4 10             	add    esp,0x10
1000370e:	31 c0                	xor    eax,eax
10003710:	eb 6b                	jmp    1000377d <DMA::tryLockChannel(int)+0x91>
10003712:	fa                   	cli    
10003713:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10003715: R_386_32	irqDisableCounter
10003719:	8d 41 01             	lea    eax,[ecx+0x1]
1000371c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000371d: R_386_32	irqDisableCounter
10003721:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
10003728:	89 c2                	mov    edx,eax
1000372a:	0f a3 d8             	bt     eax,ebx
1000372d:	73 41                	jae    10003770 <DMA::tryLockChannel(int)+0x84>
1000372f:	83 ec 0c             	sub    esp,0xc
10003732:	88 d9                	mov    cl,bl
10003734:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003739:	d3 c0                	rol    eax,cl
1000373b:	21 d0                	and    eax,edx
1000373d:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10003743:	6a 18                	push   0x18
10003745:	e8 fc ff ff ff       	call   10003746 <DMA::tryLockChannel(int)+0x5a>	10003746: R_386_PC32	malloc
1000374a:	5a                   	pop    edx
1000374b:	59                   	pop    ecx
1000374c:	53                   	push   ebx
1000374d:	50                   	push   eax
1000374e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003752:	e8 fc ff ff ff       	call   10003753 <DMA::tryLockChannel(int)+0x67>	10003753: R_386_PC32	DMAChannel::DMAChannel(int)
10003757:	a1 00 00 00 00       	mov    eax,ds:0x0	10003758: R_386_32	irqDisableCounter
1000375c:	83 c4 10             	add    esp,0x10
1000375f:	8d 50 ff             	lea    edx,[eax-0x1]
10003762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003766:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10003768: R_386_32	irqDisableCounter
1000376c:	85 d2                	test   edx,edx
1000376e:	eb 0a                	jmp    1000377a <DMA::tryLockChannel(int)+0x8e>
10003770:	31 c0                	xor    eax,eax
10003772:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10003774: R_386_32	irqDisableCounter
10003778:	85 c9                	test   ecx,ecx
1000377a:	75 01                	jne    1000377d <DMA::tryLockChannel(int)+0x91>
1000377c:	fb                   	sti    
1000377d:	83 c4 14             	add    esp,0x14
10003780:	5b                   	pop    ebx
10003781:	5e                   	pop    esi
10003782:	c3                   	ret    
10003783:	90                   	nop

10003784 <DMA::lockChannel8()>:
10003784:	83 ec 14             	sub    esp,0x14
10003787:	6a 00                	push   0x0
10003789:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000378d:	e8 fc ff ff ff       	call   1000378e <DMA::lockChannel8()+0xa>	1000378e: R_386_PC32	DMA::lockChannelWithBase(int)
10003792:	83 c4 1c             	add    esp,0x1c
10003795:	c3                   	ret    

10003796 <DMA::lockChannel16()>:
10003796:	83 ec 14             	sub    esp,0x14
10003799:	6a 04                	push   0x4
1000379b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000379f:	e8 fc ff ff ff       	call   100037a0 <DMA::lockChannel16()+0xa>	100037a0: R_386_PC32	DMA::lockChannelWithBase(int)
100037a4:	83 c4 1c             	add    esp,0x1c
100037a7:	c3                   	ret    

100037a8 <DMA::lockChannel(int)>:
100037a8:	83 ec 0c             	sub    esp,0xc
100037ab:	50                   	push   eax
100037ac:	50                   	push   eax
100037ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100037b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100037b5:	e8 fc ff ff ff       	call   100037b6 <DMA::lockChannel(int)+0xe>	100037b6: R_386_PC32	DMA::tryLockChannel(int)
100037ba:	83 c4 10             	add    esp,0x10
100037bd:	85 c0                	test   eax,eax
100037bf:	74 ea                	je     100037ab <DMA::lockChannel(int)+0x3>
100037c1:	83 c4 0c             	add    esp,0xc
100037c4:	c3                   	ret    
100037c5:	90                   	nop

100037c6 <DMA::unlockChannel(DMAChannel*)>:
100037c6:	56                   	push   esi
100037c7:	53                   	push   ebx
100037c8:	53                   	push   ebx
100037c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100037cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100037d1:	85 db                	test   ebx,ebx
100037d3:	75 10                	jne    100037e5 <DMA::unlockChannel(DMAChannel*)+0x1f>
100037d5:	83 ec 0c             	sub    esp,0xc
100037d8:	68 00 00 00 00       	push   0x0	100037d9: R_386_32	badDma
100037dd:	e8 fc ff ff ff       	call   100037de <DMA::unlockChannel(DMAChannel*)+0x18>	100037de: R_386_PC32	KePanic(char const*)
100037e2:	83 c4 10             	add    esp,0x10
100037e5:	fa                   	cli    
100037e6:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100037e8: R_386_32	irqDisableCounter
100037ec:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100037f3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100037f5:	89 d0                	mov    eax,edx
100037f7:	0f a3 ca             	bt     edx,ecx
100037fa:	72 24                	jb     10003820 <DMA::unlockChannel(DMAChannel*)+0x5a>
100037fc:	83 ec 0c             	sub    esp,0xc
100037ff:	ba 01 00 00 00       	mov    edx,0x1
10003804:	d3 e2                	shl    edx,cl
10003806:	09 d0                	or     eax,edx
10003808:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000380e:	53                   	push   ebx
1000380f:	e8 fc ff ff ff       	call   10003810 <DMA::unlockChannel(DMAChannel*)+0x4a>	10003810: R_386_PC32	DMAChannel::~DMAChannel()
10003814:	5a                   	pop    edx
10003815:	59                   	pop    ecx
10003816:	6a 18                	push   0x18
10003818:	53                   	push   ebx
10003819:	e8 fc ff ff ff       	call   1000381a <DMA::unlockChannel(DMAChannel*)+0x54>	1000381a: R_386_PC32	operator delete(void*, unsigned long)
1000381e:	eb 0d                	jmp    1000382d <DMA::unlockChannel(DMAChannel*)+0x67>
10003820:	83 ec 0c             	sub    esp,0xc
10003823:	68 00 00 00 00       	push   0x0	10003824: R_386_32	badBook
10003828:	e8 fc ff ff ff       	call   10003829 <DMA::unlockChannel(DMAChannel*)+0x63>	10003829: R_386_PC32	KePanic(char const*)
1000382d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000382e: R_386_32	irqDisableCounter
10003832:	83 c4 10             	add    esp,0x10
10003835:	48                   	dec    eax
10003836:	a3 00 00 00 00       	mov    ds:0x0,eax	10003837: R_386_32	irqDisableCounter
1000383b:	75 01                	jne    1000383e <DMA::unlockChannel(DMAChannel*)+0x78>
1000383d:	fb                   	sti    
1000383e:	58                   	pop    eax
1000383f:	5b                   	pop    ebx
10003840:	5e                   	pop    esi
10003841:	c3                   	ret    

10003842 <PS2::PS2()>:
10003842:	55                   	push   ebp
10003843:	89 e5                	mov    ebp,esp
10003845:	83 ec 08             	sub    esp,0x8
10003848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000384b:	83 ec 08             	sub    esp,0x8
1000384e:	68 00 00 00 00       	push   0x0	1000384f: R_386_32	ps2ctrlname
10003853:	50                   	push   eax
10003854:	e8 fc ff ff ff       	call   10003855 <PS2::PS2()+0x13>	10003855: R_386_PC32	Bus::Bus(char const*)
10003859:	83 c4 10             	add    esp,0x10
1000385c:	ba 08 00 00 00       	mov    edx,0x8	1000385d: R_386_32	vtable for PS2
10003861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003864:	89 10                	mov    DWORD PTR [eax],edx
10003866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003869:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000386f:	0f b6 d0             	movzx  edx,al
10003872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003875:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
1000387c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000387f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003885:	0f b6 d0             	movzx  edx,al
10003888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000388b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10003890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003893:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003899:	8d 50 01             	lea    edx,[eax+0x1]
1000389c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000389f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100038a5:	0f b6 d0             	movzx  edx,al
100038a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100038af:	83 e1 3f             	and    ecx,0x3f
100038b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100038b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038bf:	0f b6 d0             	movzx  edx,al
100038c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038c5:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
100038cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038d5:	0f b6 d0             	movzx  edx,al
100038d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038db:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100038e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038e9:	8d 50 01             	lea    edx,[eax+0x1]
100038ec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100038ef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100038f5:	0f b6 d0             	movzx  edx,al
100038f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038fb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100038ff:	83 e1 3f             	and    ecx,0x3f
10003902:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003906:	90                   	nop
10003907:	c9                   	leave  
10003908:	c3                   	ret    
10003909:	90                   	nop

1000390a <PS2::open(int, int, void*)>:
1000390a:	55                   	push   ebp
1000390b:	89 e5                	mov    ebp,esp
1000390d:	53                   	push   ebx
1000390e:	83 ec 24             	sub    esp,0x24
10003911:	fa                   	cli    
10003912:	a1 00 00 00 00       	mov    eax,ds:0x0	10003913: R_386_32	irqDisableCounter
10003917:	40                   	inc    eax
10003918:	a3 00 00 00 00       	mov    ds:0x0,eax	10003919: R_386_32	irqDisableCounter
1000391d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003924:	83 ec 08             	sub    esp,0x8
10003927:	68 ad 00 00 00       	push   0xad
1000392c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000392f:	e8 fc ff ff ff       	call   10003930 <PS2::open(int, int, void*)+0x26>	10003930: R_386_PC32	PS2::controllerWrite(unsigned char)
10003934:	83 c4 10             	add    esp,0x10
10003937:	83 ec 08             	sub    esp,0x8
1000393a:	68 a7 00 00 00       	push   0xa7
1000393f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003942:	e8 fc ff ff ff       	call   10003943 <PS2::open(int, int, void*)+0x39>	10003943: R_386_PC32	PS2::controllerWrite(unsigned char)
10003947:	83 c4 10             	add    esp,0x10
1000394a:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10003950:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003953:	89 c2                	mov    edx,eax
10003955:	ec                   	in     al,dx
10003956:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10003959:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
1000395f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10003962:	89 c2                	mov    edx,eax
10003964:	ec                   	in     al,dx
10003965:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10003968:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
1000396e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10003971:	89 c2                	mov    edx,eax
10003973:	ec                   	in     al,dx
10003974:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003977:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
1000397d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003980:	89 c2                	mov    edx,eax
10003982:	ec                   	in     al,dx
10003983:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003986:	83 ec 08             	sub    esp,0x8
10003989:	68 aa 00 00 00       	push   0xaa
1000398e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003991:	e8 fc ff ff ff       	call   10003992 <PS2::open(int, int, void*)+0x88>	10003992: R_386_PC32	PS2::controllerWrite(unsigned char)
10003996:	83 c4 10             	add    esp,0x10
10003999:	83 ec 0c             	sub    esp,0xc
1000399c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000399f:	e8 fc ff ff ff       	call   100039a0 <PS2::open(int, int, void*)+0x96>	100039a0: R_386_PC32	PS2::controllerRead()
100039a4:	83 c4 10             	add    esp,0x10
100039a7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039aa:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100039ae:	74 65                	je     10003a15 <PS2::open(int, int, void*)+0x10b>
100039b0:	83 ec 0c             	sub    esp,0xc
100039b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039b6:	e8 fc ff ff ff       	call   100039b7 <PS2::open(int, int, void*)+0xad>	100039b7: R_386_PC32	PS2::controllerRead()
100039bb:	83 c4 10             	add    esp,0x10
100039be:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039c1:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100039c5:	74 4e                	je     10003a15 <PS2::open(int, int, void*)+0x10b>
100039c7:	83 ec 08             	sub    esp,0x8
100039ca:	68 aa 00 00 00       	push   0xaa
100039cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039d2:	e8 fc ff ff ff       	call   100039d3 <PS2::open(int, int, void*)+0xc9>	100039d3: R_386_PC32	PS2::controllerWrite(unsigned char)
100039d7:	83 c4 10             	add    esp,0x10
100039da:	83 ec 08             	sub    esp,0x8
100039dd:	68 aa 00 00 00       	push   0xaa
100039e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039e5:	e8 fc ff ff ff       	call   100039e6 <PS2::open(int, int, void*)+0xdc>	100039e6: R_386_PC32	PS2::controllerWrite(unsigned char)
100039ea:	83 c4 10             	add    esp,0x10
100039ed:	83 ec 0c             	sub    esp,0xc
100039f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039f3:	e8 fc ff ff ff       	call   100039f4 <PS2::open(int, int, void*)+0xea>	100039f4: R_386_PC32	PS2::controllerRead()
100039f8:	83 c4 10             	add    esp,0x10
100039fb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039fe:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003a02:	74 11                	je     10003a15 <PS2::open(int, int, void*)+0x10b>
10003a04:	83 ec 0c             	sub    esp,0xc
10003a07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a0a:	e8 fc ff ff ff       	call   10003a0b <PS2::open(int, int, void*)+0x101>	10003a0b: R_386_PC32	PS2::controllerRead()
10003a0f:	83 c4 10             	add    esp,0x10
10003a12:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003a15:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10003a1c:	83 ec 08             	sub    esp,0x8
10003a1f:	6a 20                	push   0x20
10003a21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a24:	e8 fc ff ff ff       	call   10003a25 <PS2::open(int, int, void*)+0x11b>	10003a25: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a29:	83 c4 10             	add    esp,0x10
10003a2c:	83 ec 0c             	sub    esp,0xc
10003a2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a32:	e8 fc ff ff ff       	call   10003a33 <PS2::open(int, int, void*)+0x129>	10003a33: R_386_PC32	PS2::controllerRead()
10003a37:	83 c4 10             	add    esp,0x10
10003a3a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10003a3d:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10003a41:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10003a45:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10003a49:	83 ec 04             	sub    esp,0x4
10003a4c:	50                   	push   eax
10003a4d:	6a 60                	push   0x60
10003a4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a52:	e8 fc ff ff ff       	call   10003a53 <PS2::open(int, int, void*)+0x149>	10003a53: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10003a57:	83 c4 10             	add    esp,0x10
10003a5a:	83 ec 08             	sub    esp,0x8
10003a5d:	68 ae 00 00 00       	push   0xae
10003a62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a65:	e8 fc ff ff ff       	call   10003a66 <PS2::open(int, int, void*)+0x15c>	10003a66: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a6a:	83 c4 10             	add    esp,0x10
10003a6d:	83 ec 08             	sub    esp,0x8
10003a70:	68 a8 00 00 00       	push   0xa8
10003a75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a78:	e8 fc ff ff ff       	call   10003a79 <PS2::open(int, int, void*)+0x16f>	10003a79: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a7d:	83 c4 10             	add    esp,0x10
10003a80:	a1 00 00 00 00       	mov    eax,ds:0x0	10003a81: R_386_32	irqDisableCounter
10003a85:	48                   	dec    eax
10003a86:	a3 00 00 00 00       	mov    ds:0x0,eax	10003a87: R_386_32	irqDisableCounter
10003a8b:	a1 00 00 00 00       	mov    eax,ds:0x0	10003a8c: R_386_32	irqDisableCounter
10003a90:	85 c0                	test   eax,eax
10003a92:	75 01                	jne    10003a95 <PS2::open(int, int, void*)+0x18b>
10003a94:	fb                   	sti    
10003a95:	c7 45 dc 60 01 00 00 	mov    DWORD PTR [ebp-0x24],0x160
10003a9c:	83 ec 0c             	sub    esp,0xc
10003a9f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10003aa2:	e8 fc ff ff ff       	call   10003aa3 <PS2::open(int, int, void*)+0x199>	10003aa3: R_386_PC32	malloc
10003aa7:	83 c4 10             	add    esp,0x10
10003aaa:	89 c3                	mov    ebx,eax
10003aac:	83 ec 0c             	sub    esp,0xc
10003aaf:	53                   	push   ebx
10003ab0:	e8 fc ff ff ff       	call   10003ab1 <PS2::open(int, int, void*)+0x1a7>	10003ab1: R_386_PC32	PS2Port::PS2Port()
10003ab5:	83 c4 10             	add    esp,0x10
10003ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003abb:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10003ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ac4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003ac7:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10003acd:	83 ec 08             	sub    esp,0x8
10003ad0:	52                   	push   edx
10003ad1:	50                   	push   eax
10003ad2:	e8 fc ff ff ff       	call   10003ad3 <PS2::open(int, int, void*)+0x1c9>	10003ad3: R_386_PC32	Device::addChild(Device*)
10003ad7:	83 c4 10             	add    esp,0x10
10003ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003add:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10003ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ae6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10003aec:	8b 00                	mov    eax,DWORD PTR [eax]
10003aee:	83 c0 08             	add    eax,0x8
10003af1:	8b 00                	mov    eax,DWORD PTR [eax]
10003af3:	6a 00                	push   0x0
10003af5:	6a 00                	push   0x0
10003af7:	6a 00                	push   0x0
10003af9:	52                   	push   edx
10003afa:	ff d0                	call   eax
10003afc:	83 c4 10             	add    esp,0x10
10003aff:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10003b03:	75 6a                	jne    10003b6f <PS2::open(int, int, void*)+0x265>
10003b05:	c7 45 d8 60 01 00 00 	mov    DWORD PTR [ebp-0x28],0x160
10003b0c:	83 ec 0c             	sub    esp,0xc
10003b0f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003b12:	e8 fc ff ff ff       	call   10003b13 <PS2::open(int, int, void*)+0x209>	10003b13: R_386_PC32	malloc
10003b17:	83 c4 10             	add    esp,0x10
10003b1a:	89 c3                	mov    ebx,eax
10003b1c:	83 ec 0c             	sub    esp,0xc
10003b1f:	53                   	push   ebx
10003b20:	e8 fc ff ff ff       	call   10003b21 <PS2::open(int, int, void*)+0x217>	10003b21: R_386_PC32	PS2Port::PS2Port()
10003b25:	83 c4 10             	add    esp,0x10
10003b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b2b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10003b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003b37:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10003b3d:	83 ec 08             	sub    esp,0x8
10003b40:	52                   	push   edx
10003b41:	50                   	push   eax
10003b42:	e8 fc ff ff ff       	call   10003b43 <PS2::open(int, int, void*)+0x239>	10003b43: R_386_PC32	Device::addChild(Device*)
10003b47:	83 c4 10             	add    esp,0x10
10003b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b4d:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10003b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b56:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003b5c:	8b 00                	mov    eax,DWORD PTR [eax]
10003b5e:	83 c0 08             	add    eax,0x8
10003b61:	8b 00                	mov    eax,DWORD PTR [eax]
10003b63:	6a 00                	push   0x0
10003b65:	6a 00                	push   0x0
10003b67:	6a 01                	push   0x1
10003b69:	52                   	push   edx
10003b6a:	ff d0                	call   eax
10003b6c:	83 c4 10             	add    esp,0x10
10003b6f:	b8 00 00 00 00       	mov    eax,0x0
10003b74:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10003b77:	c9                   	leave  
10003b78:	c3                   	ret    
10003b79:	90                   	nop

10003b7a <PS2::close(int, int, void*)>:
10003b7a:	b8 00 00 00 00       	mov    eax,0x0
10003b7f:	c3                   	ret    

10003b80 <PS2::detect()>:
10003b80:	90                   	nop
10003b81:	c3                   	ret    

10003b82 <PS2::controllerWrite(unsigned char)>:
10003b82:	55                   	push   ebp
10003b83:	89 e5                	mov    ebp,esp
10003b85:	83 ec 14             	sub    esp,0x14
10003b88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10003b8b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10003b8e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003b95:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003b9b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003b9e:	89 c2                	mov    edx,eax
10003ba0:	ec                   	in     al,dx
10003ba1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003ba4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003ba7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003baa:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003bae:	83 e0 40             	and    eax,0x40
10003bb1:	85 c0                	test   eax,eax
10003bb3:	75 2d                	jne    10003be2 <PS2::controllerWrite(unsigned char)+0x60>
10003bb5:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003bb8:	84 c0                	test   al,al
10003bba:	78 26                	js     10003be2 <PS2::controllerWrite(unsigned char)+0x60>
10003bbc:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003bc0:	83 e0 02             	and    eax,0x2
10003bc3:	85 c0                	test   eax,eax
10003bc5:	74 17                	je     10003bde <PS2::controllerWrite(unsigned char)+0x5c>
10003bc7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003bca:	8d 50 01             	lea    edx,[eax+0x1]
10003bcd:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003bd0:	3d 20 03 00 00       	cmp    eax,0x320
10003bd5:	0f 94 c0             	sete   al
10003bd8:	84 c0                	test   al,al
10003bda:	75 05                	jne    10003be1 <PS2::controllerWrite(unsigned char)+0x5f>
10003bdc:	eb b7                	jmp    10003b95 <PS2::controllerWrite(unsigned char)+0x13>
10003bde:	90                   	nop
10003bdf:	eb 01                	jmp    10003be2 <PS2::controllerWrite(unsigned char)+0x60>
10003be1:	90                   	nop
10003be2:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10003be6:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10003bec:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003bef:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003bf2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003bf5:	ee                   	out    dx,al
10003bf6:	b0 01                	mov    al,0x1
10003bf8:	c9                   	leave  
10003bf9:	c3                   	ret    

10003bfa <PS2::controllerWrite(unsigned char, unsigned char)>:
10003bfa:	55                   	push   ebp
10003bfb:	89 e5                	mov    ebp,esp
10003bfd:	83 ec 28             	sub    esp,0x28
10003c00:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003c03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10003c06:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10003c09:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10003c0c:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10003c10:	50                   	push   eax
10003c11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003c14:	e8 fc ff ff ff       	call   10003c15 <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10003c15: R_386_PC32	PS2::controllerWrite(unsigned char)
10003c19:	83 c4 08             	add    esp,0x8
10003c1c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003c23:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003c29:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003c2c:	89 c2                	mov    edx,eax
10003c2e:	ec                   	in     al,dx
10003c2f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003c32:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003c35:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003c38:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c3c:	83 e0 40             	and    eax,0x40
10003c3f:	85 c0                	test   eax,eax
10003c41:	75 07                	jne    10003c4a <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10003c43:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003c46:	84 c0                	test   al,al
10003c48:	79 18                	jns    10003c62 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10003c4a:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c4e:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003c54:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003c57:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003c5a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003c5d:	ee                   	out    dx,al
10003c5e:	b0 00                	mov    al,0x0
10003c60:	eb 4f                	jmp    10003cb1 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003c62:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c66:	83 e0 02             	and    eax,0x2
10003c69:	85 c0                	test   eax,eax
10003c6b:	74 2d                	je     10003c9a <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10003c6d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003c70:	8d 50 01             	lea    edx,[eax+0x1]
10003c73:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003c76:	3d 20 03 00 00       	cmp    eax,0x320
10003c7b:	0f 94 c0             	sete   al
10003c7e:	84 c0                	test   al,al
10003c80:	74 a1                	je     10003c23 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10003c82:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c86:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003c8c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003c8f:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003c92:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003c95:	ee                   	out    dx,al
10003c96:	b0 00                	mov    al,0x0
10003c98:	eb 17                	jmp    10003cb1 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003c9a:	90                   	nop
10003c9b:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c9f:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003ca5:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003ca8:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10003cab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10003cae:	ee                   	out    dx,al
10003caf:	b0 01                	mov    al,0x1
10003cb1:	c9                   	leave  
10003cb2:	c3                   	ret    
10003cb3:	90                   	nop

10003cb4 <PS2::controllerRead()>:
10003cb4:	55                   	push   ebp
10003cb5:	89 e5                	mov    ebp,esp
10003cb7:	83 ec 20             	sub    esp,0x20
10003cba:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003cc1:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003cc7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003cca:	89 c2                	mov    edx,eax
10003ccc:	ec                   	in     al,dx
10003ccd:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003cd0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003cd3:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003cd6:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003cda:	83 e0 40             	and    eax,0x40
10003cdd:	85 c0                	test   eax,eax
10003cdf:	75 07                	jne    10003ce8 <PS2::controllerRead()+0x34>
10003ce1:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003ce4:	84 c0                	test   al,al
10003ce6:	79 04                	jns    10003cec <PS2::controllerRead()+0x38>
10003ce8:	b0 00                	mov    al,0x0
10003cea:	eb 48                	jmp    10003d34 <PS2::controllerRead()+0x80>
10003cec:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003cf0:	83 e0 01             	and    eax,0x1
10003cf3:	85 c0                	test   eax,eax
10003cf5:	75 29                	jne    10003d20 <PS2::controllerRead()+0x6c>
10003cf7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003cfa:	8d 50 01             	lea    edx,[eax+0x1]
10003cfd:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003d00:	3d 40 06 00 00       	cmp    eax,0x640
10003d05:	0f 94 c0             	sete   al
10003d08:	84 c0                	test   al,al
10003d0a:	74 b5                	je     10003cc1 <PS2::controllerRead()+0xd>
10003d0c:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003d12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003d15:	89 c2                	mov    edx,eax
10003d17:	ec                   	in     al,dx
10003d18:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003d1b:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003d1e:	eb 14                	jmp    10003d34 <PS2::controllerRead()+0x80>
10003d20:	90                   	nop
10003d21:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003d27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003d2a:	89 c2                	mov    edx,eax
10003d2c:	ec                   	in     al,dx
10003d2d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003d30:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003d33:	90                   	nop
10003d34:	c9                   	leave  
10003d35:	c3                   	ret    

10003d36 <PS2Keyboard::PS2Keyboard()>:
10003d36:	55                   	push   ebp
10003d37:	89 e5                	mov    ebp,esp
10003d39:	83 ec 08             	sub    esp,0x8
10003d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d3f:	83 ec 08             	sub    esp,0x8
10003d42:	68 00 00 00 00       	push   0x0	10003d43: R_386_32	ps2keyname
10003d47:	50                   	push   eax
10003d48:	e8 fc ff ff ff       	call   10003d49 <PS2Keyboard::PS2Keyboard()+0x13>	10003d49: R_386_PC32	Keyboard::Keyboard(char const*)
10003d4d:	83 c4 10             	add    esp,0x10
10003d50:	ba 08 00 00 00       	mov    edx,0x8	10003d51: R_386_32	vtable for PS2Keyboard
10003d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d58:	89 10                	mov    DWORD PTR [eax],edx
10003d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d5d:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10003d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d67:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10003d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d71:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10003d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d7b:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10003d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d85:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10003d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d8f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10003d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d99:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10003da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003da3:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10003daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003dad:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10003db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003db7:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10003dbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003dc1:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10003dc8:	90                   	nop
10003dc9:	c9                   	leave  
10003dca:	c3                   	ret    
10003dcb:	90                   	nop

10003dcc <PS2Keyboard::~PS2Keyboard()>:
10003dcc:	55                   	push   ebp
10003dcd:	89 e5                	mov    ebp,esp
10003dcf:	83 ec 08             	sub    esp,0x8
10003dd2:	ba 08 00 00 00       	mov    edx,0x8	10003dd3: R_386_32	vtable for PS2Keyboard
10003dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003dda:	89 10                	mov    DWORD PTR [eax],edx
10003ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ddf:	83 ec 0c             	sub    esp,0xc
10003de2:	50                   	push   eax
10003de3:	e8 fc ff ff ff       	call   10003de4 <PS2Keyboard::~PS2Keyboard()+0x18>	10003de4: R_386_PC32	Keyboard::~Keyboard()
10003de8:	83 c4 10             	add    esp,0x10
10003deb:	90                   	nop
10003dec:	c9                   	leave  
10003ded:	c3                   	ret    

10003dee <PS2Keyboard::~PS2Keyboard()>:
10003dee:	55                   	push   ebp
10003def:	89 e5                	mov    ebp,esp
10003df1:	83 ec 08             	sub    esp,0x8
10003df4:	83 ec 0c             	sub    esp,0xc
10003df7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003dfa:	e8 fc ff ff ff       	call   10003dfb <PS2Keyboard::~PS2Keyboard()+0xd>	10003dfb: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10003dff:	83 c4 10             	add    esp,0x10
10003e02:	83 ec 08             	sub    esp,0x8
10003e05:	68 70 01 00 00       	push   0x170
10003e0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003e0d:	e8 fc ff ff ff       	call   10003e0e <PS2Keyboard::~PS2Keyboard()+0x20>	10003e0e: R_386_PC32	operator delete(void*, unsigned long)
10003e12:	83 c4 10             	add    esp,0x10
10003e15:	c9                   	leave  
10003e16:	c3                   	ret    
10003e17:	90                   	nop

10003e18 <PS2Keyboard::setRepeatRate(int)>:
10003e18:	c3                   	ret    
10003e19:	90                   	nop

10003e1a <PS2Keyboard::setRepeatDelay(int)>:
10003e1a:	c3                   	ret    
10003e1b:	90                   	nop

10003e1c <PS2Keyboard::sendKey(unsigned short, bool)>:
10003e1c:	83 ec 1c             	sub    esp,0x1c
10003e1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003e23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003e27:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003e2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003e2f:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003e34:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003e3b:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003e41:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003e46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003e4a:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003e4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003e52:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003e57:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003e5c:	83 c4 1c             	add    esp,0x1c
10003e5f:	e9 fc ff ff ff       	jmp    10003e60 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10003e60: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003e64 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10003e64:	83 ec 1c             	sub    esp,0x1c
10003e67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003e6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003e6f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003e73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003e77:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003e7c:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003e83:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003e89:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003e8e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003e92:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003e96:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003e9a:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003e9f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003ea4:	83 c4 1c             	add    esp,0x1c
10003ea7:	e9 fc ff ff ff       	jmp    10003ea8 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10003ea8: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003eac <PS2Keyboard::updateKeyboardLEDs()>:
10003eac:	56                   	push   esi
10003ead:	53                   	push   ebx
10003eae:	83 ec 0c             	sub    esp,0xc
10003eb1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10003eb5:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10003ebb:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10003ec2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10003ec5:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10003ecc:	09 c3                	or     ebx,eax
10003ece:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10003ed4:	68 ed 00 00 00       	push   0xed
10003ed9:	0f b6 db             	movzx  ebx,bl
10003edc:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003ee2:	e8 fc ff ff ff       	call   10003ee3 <PS2Keyboard::updateKeyboardLEDs()+0x37>	10003ee3: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003ee7:	58                   	pop    eax
10003ee8:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003eee:	e8 fc ff ff ff       	call   10003eef <PS2Keyboard::updateKeyboardLEDs()+0x43>	10003eef: R_386_PC32	PS2Port::deviceRead()
10003ef3:	5a                   	pop    edx
10003ef4:	59                   	pop    ecx
10003ef5:	53                   	push   ebx
10003ef6:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003efc:	e8 fc ff ff ff       	call   10003efd <PS2Keyboard::updateKeyboardLEDs()+0x51>	10003efd: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003f01:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10003f07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003f0b:	83 c4 14             	add    esp,0x14
10003f0e:	5b                   	pop    ebx
10003f0f:	5e                   	pop    esi
10003f10:	e9 fc ff ff ff       	jmp    10003f11 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10003f11: R_386_PC32	PS2Port::deviceRead()

10003f15 <ps2KeyboardHandler(regs*, void*)>:
10003f15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003f19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003f1d:	eb 01                	jmp    10003f20 <PS2Keyboard::handler()>
10003f1f:	90                   	nop

10003f20 <PS2Keyboard::handler()>:
10003f20:	57                   	push   edi
10003f21:	56                   	push   esi
10003f22:	53                   	push   ebx
10003f23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003f27:	e4 60                	in     al,0x60
10003f29:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10003f30:	74 29                	je     10003f5b <PS2Keyboard::handler()+0x3b>
10003f32:	88 c2                	mov    dl,al
10003f34:	3c e0                	cmp    al,0xe0
10003f36:	75 0c                	jne    10003f44 <PS2Keyboard::handler()+0x24>
10003f38:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10003f3f:	e9 17 07 00 00       	jmp    1000465b <PS2Keyboard::handler()+0x73b>
10003f44:	84 c0                	test   al,al
10003f46:	0f 89 56 01 00 00    	jns    100040a2 <PS2Keyboard::handler()+0x182>
10003f4c:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003f53:	83 e2 7f             	and    edx,0x7f
10003f56:	e9 47 01 00 00       	jmp    100040a2 <PS2Keyboard::handler()+0x182>
10003f5b:	3c e0                	cmp    al,0xe0
10003f5d:	74 d9                	je     10003f38 <PS2Keyboard::handler()+0x18>
10003f5f:	3c f0                	cmp    al,0xf0
10003f61:	75 0c                	jne    10003f6f <PS2Keyboard::handler()+0x4f>
10003f63:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003f6a:	e9 ec 06 00 00       	jmp    1000465b <PS2Keyboard::handler()+0x73b>
10003f6f:	3c 12                	cmp    al,0x12
10003f71:	75 1f                	jne    10003f92 <PS2Keyboard::handler()+0x72>
10003f73:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003f79:	83 f0 01             	xor    eax,0x1
10003f7c:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10003f82:	52                   	push   edx
10003f83:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f8a:	50                   	push   eax
10003f8b:	68 04 01 00 00       	push   0x104
10003f90:	eb 23                	jmp    10003fb5 <PS2Keyboard::handler()+0x95>
10003f92:	76 3d                	jbe    10003fd1 <PS2Keyboard::handler()+0xb1>
10003f94:	3c 14                	cmp    al,0x14
10003f96:	75 62                	jne    10003ffa <PS2Keyboard::handler()+0xda>
10003f98:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003f9e:	83 f0 01             	xor    eax,0x1
10003fa1:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10003fa7:	51                   	push   ecx
10003fa8:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003faf:	50                   	push   eax
10003fb0:	68 00 01 00 00       	push   0x100
10003fb5:	56                   	push   esi
10003fb6:	e8 fc ff ff ff       	call   10003fb7 <PS2Keyboard::handler()+0x97>	10003fb7: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003fbb:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003fc2:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003fc9:	83 c4 10             	add    esp,0x10
10003fcc:	e9 8a 06 00 00       	jmp    1000465b <PS2Keyboard::handler()+0x73b>
10003fd1:	3c 11                	cmp    al,0x11
10003fd3:	75 2d                	jne    10004002 <PS2Keyboard::handler()+0xe2>
10003fd5:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003fdb:	83 f0 01             	xor    eax,0x1
10003fde:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10003fe4:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10003fea:	50                   	push   eax
10003feb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ff2:	50                   	push   eax
10003ff3:	68 01 01 00 00       	push   0x101
10003ff8:	eb bb                	jmp    10003fb5 <PS2Keyboard::handler()+0x95>
10003ffa:	3c 59                	cmp    al,0x59
10003ffc:	0f 84 71 ff ff ff    	je     10003f73 <PS2Keyboard::handler()+0x53>
10004002:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10004009:	0f 84 c8 01 00 00    	je     100041d7 <PS2Keyboard::handler()+0x2b7>
1000400f:	3c 70                	cmp    al,0x70
10004011:	0f 84 91 01 00 00    	je     100041a8 <PS2Keyboard::handler()+0x288>
10004017:	77 43                	ja     1000405c <PS2Keyboard::handler()+0x13c>
10004019:	3c 69                	cmp    al,0x69
1000401b:	0f 84 58 01 00 00    	je     10004179 <PS2Keyboard::handler()+0x259>
10004021:	77 24                	ja     10004047 <PS2Keyboard::handler()+0x127>
10004023:	3c 4a                	cmp    al,0x4a
10004025:	75 13                	jne    1000403a <PS2Keyboard::handler()+0x11a>
10004027:	50                   	push   eax
10004028:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000402f:	50                   	push   eax
10004030:	68 27 03 00 00       	push   0x327
10004035:	e9 e9 03 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
1000403a:	3c 5a                	cmp    al,0x5a
1000403c:	0f 84 82 01 00 00    	je     100041c4 <PS2Keyboard::handler()+0x2a4>
10004042:	e9 2c 04 00 00       	jmp    10004473 <PS2Keyboard::handler()+0x553>
10004047:	3c 6b                	cmp    al,0x6b
10004049:	0f 84 97 00 00 00    	je     100040e6 <PS2Keyboard::handler()+0x1c6>
1000404f:	3c 6c                	cmp    al,0x6c
10004051:	0f 84 06 01 00 00    	je     1000415d <PS2Keyboard::handler()+0x23d>
10004057:	e9 17 04 00 00       	jmp    10004473 <PS2Keyboard::handler()+0x553>
1000405c:	3c 74                	cmp    al,0x74
1000405e:	0f 84 9c 00 00 00    	je     10004100 <PS2Keyboard::handler()+0x1e0>
10004064:	77 11                	ja     10004077 <PS2Keyboard::handler()+0x157>
10004066:	3c 71                	cmp    al,0x71
10004068:	0f 84 27 01 00 00    	je     10004195 <PS2Keyboard::handler()+0x275>
1000406e:	3c 72                	cmp    al,0x72
10004070:	74 61                	je     100040d3 <PS2Keyboard::handler()+0x1b3>
10004072:	e9 fc 03 00 00       	jmp    10004473 <PS2Keyboard::handler()+0x553>
10004077:	3c 7a                	cmp    al,0x7a
10004079:	0f 84 cb 00 00 00    	je     1000414a <PS2Keyboard::handler()+0x22a>
1000407f:	3c 7d                	cmp    al,0x7d
10004081:	0f 84 a9 00 00 00    	je     10004130 <PS2Keyboard::handler()+0x210>
10004087:	3c 75                	cmp    al,0x75
10004089:	0f 85 e4 03 00 00    	jne    10004473 <PS2Keyboard::handler()+0x553>
1000408f:	50                   	push   eax
10004090:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004097:	50                   	push   eax
10004098:	68 0b 02 00 00       	push   0x20b
1000409d:	e9 81 03 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100040a2:	80 fa 2a             	cmp    dl,0x2a
100040a5:	0f 84 c8 fe ff ff    	je     10003f73 <PS2Keyboard::handler()+0x53>
100040ab:	0f 87 93 05 00 00    	ja     10004644 <PS2Keyboard::handler()+0x724>
100040b1:	80 fa 1d             	cmp    dl,0x1d
100040b4:	0f 84 de fe ff ff    	je     10003f98 <PS2Keyboard::handler()+0x78>
100040ba:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100040c1:	0f 84 ca 03 00 00    	je     10004491 <PS2Keyboard::handler()+0x571>
100040c7:	80 fa 4b             	cmp    dl,0x4b
100040ca:	74 1a                	je     100040e6 <PS2Keyboard::handler()+0x1c6>
100040cc:	76 45                	jbe    10004113 <PS2Keyboard::handler()+0x1f3>
100040ce:	80 fa 50             	cmp    dl,0x50
100040d1:	75 26                	jne    100040f9 <PS2Keyboard::handler()+0x1d9>
100040d3:	50                   	push   eax
100040d4:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040db:	50                   	push   eax
100040dc:	68 0c 02 00 00       	push   0x20c
100040e1:	e9 3d 03 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100040e6:	50                   	push   eax
100040e7:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040ee:	50                   	push   eax
100040ef:	68 0d 02 00 00       	push   0x20d
100040f4:	e9 2a 03 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100040f9:	77 48                	ja     10004143 <PS2Keyboard::handler()+0x223>
100040fb:	80 fa 4d             	cmp    dl,0x4d
100040fe:	75 70                	jne    10004170 <PS2Keyboard::handler()+0x250>
10004100:	50                   	push   eax
10004101:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004108:	50                   	push   eax
10004109:	68 0e 02 00 00       	push   0x20e
1000410e:	e9 10 03 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004113:	80 fa 47             	cmp    dl,0x47
10004116:	74 45                	je     1000415d <PS2Keyboard::handler()+0x23d>
10004118:	0f 86 9d 00 00 00    	jbe    100041bb <PS2Keyboard::handler()+0x29b>
1000411e:	80 fa 48             	cmp    dl,0x48
10004121:	0f 84 68 ff ff ff    	je     1000408f <PS2Keyboard::handler()+0x16f>
10004127:	80 fa 49             	cmp    dl,0x49
1000412a:	0f 85 43 03 00 00    	jne    10004473 <PS2Keyboard::handler()+0x553>
10004130:	50                   	push   eax
10004131:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004138:	50                   	push   eax
10004139:	68 04 02 00 00       	push   0x204
1000413e:	e9 e0 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004143:	80 fa 52             	cmp    dl,0x52
10004146:	74 60                	je     100041a8 <PS2Keyboard::handler()+0x288>
10004148:	73 42                	jae    1000418c <PS2Keyboard::handler()+0x26c>
1000414a:	57                   	push   edi
1000414b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004152:	50                   	push   eax
10004153:	68 05 02 00 00       	push   0x205
10004158:	e9 c6 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
1000415d:	53                   	push   ebx
1000415e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004165:	50                   	push   eax
10004166:	68 00 02 00 00       	push   0x200
1000416b:	e9 b3 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004170:	80 fa 4f             	cmp    dl,0x4f
10004173:	0f 85 fa 02 00 00    	jne    10004473 <PS2Keyboard::handler()+0x553>
10004179:	51                   	push   ecx
1000417a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004181:	50                   	push   eax
10004182:	68 01 02 00 00       	push   0x201
10004187:	e9 97 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
1000418c:	80 fa 53             	cmp    dl,0x53
1000418f:	0f 85 de 02 00 00    	jne    10004473 <PS2Keyboard::handler()+0x553>
10004195:	52                   	push   edx
10004196:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000419d:	50                   	push   eax
1000419e:	68 03 02 00 00       	push   0x203
100041a3:	e9 7b 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100041a8:	50                   	push   eax
100041a9:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100041b0:	50                   	push   eax
100041b1:	68 02 02 00 00       	push   0x202
100041b6:	e9 68 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100041bb:	80 fa 1c             	cmp    dl,0x1c
100041be:	0f 85 c2 02 00 00    	jne    10004486 <PS2Keyboard::handler()+0x566>
100041c4:	50                   	push   eax
100041c5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100041cc:	50                   	push   eax
100041cd:	68 25 03 00 00       	push   0x325
100041d2:	e9 4c 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100041d7:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
100041de:	3c 66                	cmp    al,0x66
100041e0:	75 09                	jne    100041eb <PS2Keyboard::handler()+0x2cb>
100041e2:	50                   	push   eax
100041e3:	52                   	push   edx
100041e4:	6a 08                	push   0x8
100041e6:	e9 38 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100041eb:	3c 0d                	cmp    al,0xd
100041ed:	75 09                	jne    100041f8 <PS2Keyboard::handler()+0x2d8>
100041ef:	50                   	push   eax
100041f0:	52                   	push   edx
100041f1:	6a 09                	push   0x9
100041f3:	e9 2b 02 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100041f8:	3c 58                	cmp    al,0x58
100041fa:	75 2a                	jne    10004226 <PS2Keyboard::handler()+0x306>
100041fc:	84 d2                	test   dl,dl
100041fe:	75 13                	jne    10004213 <PS2Keyboard::handler()+0x2f3>
10004200:	83 ec 0c             	sub    esp,0xc
10004203:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
1000420a:	56                   	push   esi
1000420b:	e8 fc ff ff ff       	call   1000420c <PS2Keyboard::handler()+0x2ec>	1000420c: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10004210:	83 c4 10             	add    esp,0x10
10004213:	50                   	push   eax
10004214:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000421b:	50                   	push   eax
1000421c:	68 80 02 00 00       	push   0x280
10004221:	e9 fd 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004226:	3c 77                	cmp    al,0x77
10004228:	75 2a                	jne    10004254 <PS2Keyboard::handler()+0x334>
1000422a:	84 d2                	test   dl,dl
1000422c:	75 13                	jne    10004241 <PS2Keyboard::handler()+0x321>
1000422e:	83 ec 0c             	sub    esp,0xc
10004231:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
10004238:	56                   	push   esi
10004239:	e8 fc ff ff ff       	call   1000423a <PS2Keyboard::handler()+0x31a>	1000423a: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000423e:	83 c4 10             	add    esp,0x10
10004241:	50                   	push   eax
10004242:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004249:	50                   	push   eax
1000424a:	68 81 02 00 00       	push   0x281
1000424f:	e9 cf 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004254:	3c 7e                	cmp    al,0x7e
10004256:	75 2a                	jne    10004282 <PS2Keyboard::handler()+0x362>
10004258:	84 d2                	test   dl,dl
1000425a:	75 13                	jne    1000426f <PS2Keyboard::handler()+0x34f>
1000425c:	83 ec 0c             	sub    esp,0xc
1000425f:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10004266:	56                   	push   esi
10004267:	e8 fc ff ff ff       	call   10004268 <PS2Keyboard::handler()+0x348>	10004268: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000426c:	83 c4 10             	add    esp,0x10
1000426f:	57                   	push   edi
10004270:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004277:	50                   	push   eax
10004278:	68 82 02 00 00       	push   0x282
1000427d:	e9 a1 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004282:	3c 05                	cmp    al,0x5
10004284:	75 0c                	jne    10004292 <PS2Keyboard::handler()+0x372>
10004286:	53                   	push   ebx
10004287:	52                   	push   edx
10004288:	68 00 03 00 00       	push   0x300
1000428d:	e9 91 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004292:	3c 06                	cmp    al,0x6
10004294:	75 0c                	jne    100042a2 <PS2Keyboard::handler()+0x382>
10004296:	51                   	push   ecx
10004297:	52                   	push   edx
10004298:	68 01 03 00 00       	push   0x301
1000429d:	e9 81 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100042a2:	3c 04                	cmp    al,0x4
100042a4:	75 0c                	jne    100042b2 <PS2Keyboard::handler()+0x392>
100042a6:	50                   	push   eax
100042a7:	52                   	push   edx
100042a8:	68 02 03 00 00       	push   0x302
100042ad:	e9 71 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100042b2:	3c 0c                	cmp    al,0xc
100042b4:	75 0c                	jne    100042c2 <PS2Keyboard::handler()+0x3a2>
100042b6:	50                   	push   eax
100042b7:	52                   	push   edx
100042b8:	68 03 03 00 00       	push   0x303
100042bd:	e9 61 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100042c2:	3c 03                	cmp    al,0x3
100042c4:	75 0c                	jne    100042d2 <PS2Keyboard::handler()+0x3b2>
100042c6:	50                   	push   eax
100042c7:	52                   	push   edx
100042c8:	68 04 03 00 00       	push   0x304
100042cd:	e9 51 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100042d2:	3c 0b                	cmp    al,0xb
100042d4:	75 0c                	jne    100042e2 <PS2Keyboard::handler()+0x3c2>
100042d6:	50                   	push   eax
100042d7:	52                   	push   edx
100042d8:	68 05 03 00 00       	push   0x305
100042dd:	e9 41 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100042e2:	3c 02                	cmp    al,0x2
100042e4:	74 04                	je     100042ea <PS2Keyboard::handler()+0x3ca>
100042e6:	3c 83                	cmp    al,0x83
100042e8:	75 0c                	jne    100042f6 <PS2Keyboard::handler()+0x3d6>
100042ea:	50                   	push   eax
100042eb:	52                   	push   edx
100042ec:	68 06 03 00 00       	push   0x306
100042f1:	e9 2d 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100042f6:	3c 0a                	cmp    al,0xa
100042f8:	75 0c                	jne    10004306 <PS2Keyboard::handler()+0x3e6>
100042fa:	50                   	push   eax
100042fb:	52                   	push   edx
100042fc:	68 07 03 00 00       	push   0x307
10004301:	e9 1d 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004306:	3c 01                	cmp    al,0x1
10004308:	75 0c                	jne    10004316 <PS2Keyboard::handler()+0x3f6>
1000430a:	57                   	push   edi
1000430b:	52                   	push   edx
1000430c:	68 08 03 00 00       	push   0x308
10004311:	e9 0d 01 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004316:	3c 09                	cmp    al,0x9
10004318:	75 0c                	jne    10004326 <PS2Keyboard::handler()+0x406>
1000431a:	53                   	push   ebx
1000431b:	52                   	push   edx
1000431c:	68 09 03 00 00       	push   0x309
10004321:	e9 fd 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004326:	3c 78                	cmp    al,0x78
10004328:	75 0c                	jne    10004336 <PS2Keyboard::handler()+0x416>
1000432a:	51                   	push   ecx
1000432b:	52                   	push   edx
1000432c:	68 0a 03 00 00       	push   0x30a
10004331:	e9 ed 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004336:	3c 07                	cmp    al,0x7
10004338:	75 0c                	jne    10004346 <PS2Keyboard::handler()+0x426>
1000433a:	50                   	push   eax
1000433b:	52                   	push   edx
1000433c:	68 0b 03 00 00       	push   0x30b
10004341:	e9 dd 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004346:	3c 5a                	cmp    al,0x5a
10004348:	75 09                	jne    10004353 <PS2Keyboard::handler()+0x433>
1000434a:	50                   	push   eax
1000434b:	52                   	push   edx
1000434c:	6a 0a                	push   0xa
1000434e:	e9 d0 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004353:	3c 76                	cmp    al,0x76
10004355:	75 0c                	jne    10004363 <PS2Keyboard::handler()+0x443>
10004357:	50                   	push   eax
10004358:	52                   	push   edx
10004359:	68 0a 02 00 00       	push   0x20a
1000435e:	e9 c0 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004363:	3c 70                	cmp    al,0x70
10004365:	75 0c                	jne    10004373 <PS2Keyboard::handler()+0x453>
10004367:	50                   	push   eax
10004368:	52                   	push   edx
10004369:	68 18 03 00 00       	push   0x318
1000436e:	e9 b0 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004373:	3c 69                	cmp    al,0x69
10004375:	75 0c                	jne    10004383 <PS2Keyboard::handler()+0x463>
10004377:	50                   	push   eax
10004378:	52                   	push   edx
10004379:	68 19 03 00 00       	push   0x319
1000437e:	e9 a0 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004383:	3c 72                	cmp    al,0x72
10004385:	75 0c                	jne    10004393 <PS2Keyboard::handler()+0x473>
10004387:	50                   	push   eax
10004388:	52                   	push   edx
10004389:	68 1a 03 00 00       	push   0x31a
1000438e:	e9 90 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004393:	3c 7a                	cmp    al,0x7a
10004395:	75 0c                	jne    100043a3 <PS2Keyboard::handler()+0x483>
10004397:	57                   	push   edi
10004398:	52                   	push   edx
10004399:	68 1b 03 00 00       	push   0x31b
1000439e:	e9 80 00 00 00       	jmp    10004423 <PS2Keyboard::handler()+0x503>
100043a3:	3c 6b                	cmp    al,0x6b
100043a5:	75 09                	jne    100043b0 <PS2Keyboard::handler()+0x490>
100043a7:	53                   	push   ebx
100043a8:	52                   	push   edx
100043a9:	68 1c 03 00 00       	push   0x31c
100043ae:	eb 73                	jmp    10004423 <PS2Keyboard::handler()+0x503>
100043b0:	3c 73                	cmp    al,0x73
100043b2:	75 09                	jne    100043bd <PS2Keyboard::handler()+0x49d>
100043b4:	51                   	push   ecx
100043b5:	52                   	push   edx
100043b6:	68 1d 03 00 00       	push   0x31d
100043bb:	eb 66                	jmp    10004423 <PS2Keyboard::handler()+0x503>
100043bd:	3c 74                	cmp    al,0x74
100043bf:	75 09                	jne    100043ca <PS2Keyboard::handler()+0x4aa>
100043c1:	50                   	push   eax
100043c2:	52                   	push   edx
100043c3:	68 1e 03 00 00       	push   0x31e
100043c8:	eb 59                	jmp    10004423 <PS2Keyboard::handler()+0x503>
100043ca:	3c 6c                	cmp    al,0x6c
100043cc:	75 09                	jne    100043d7 <PS2Keyboard::handler()+0x4b7>
100043ce:	50                   	push   eax
100043cf:	52                   	push   edx
100043d0:	68 1f 03 00 00       	push   0x31f
100043d5:	eb 4c                	jmp    10004423 <PS2Keyboard::handler()+0x503>
100043d7:	3c 75                	cmp    al,0x75
100043d9:	75 09                	jne    100043e4 <PS2Keyboard::handler()+0x4c4>
100043db:	50                   	push   eax
100043dc:	52                   	push   edx
100043dd:	68 20 03 00 00       	push   0x320
100043e2:	eb 3f                	jmp    10004423 <PS2Keyboard::handler()+0x503>
100043e4:	3c 7d                	cmp    al,0x7d
100043e6:	75 09                	jne    100043f1 <PS2Keyboard::handler()+0x4d1>
100043e8:	50                   	push   eax
100043e9:	52                   	push   edx
100043ea:	68 21 03 00 00       	push   0x321
100043ef:	eb 32                	jmp    10004423 <PS2Keyboard::handler()+0x503>
100043f1:	3c 71                	cmp    al,0x71
100043f3:	75 09                	jne    100043fe <PS2Keyboard::handler()+0x4de>
100043f5:	50                   	push   eax
100043f6:	52                   	push   edx
100043f7:	68 22 03 00 00       	push   0x322
100043fc:	eb 25                	jmp    10004423 <PS2Keyboard::handler()+0x503>
100043fe:	3c 7b                	cmp    al,0x7b
10004400:	75 09                	jne    1000440b <PS2Keyboard::handler()+0x4eb>
10004402:	50                   	push   eax
10004403:	52                   	push   edx
10004404:	68 24 03 00 00       	push   0x324
10004409:	eb 18                	jmp    10004423 <PS2Keyboard::handler()+0x503>
1000440b:	3c 79                	cmp    al,0x79
1000440d:	75 09                	jne    10004418 <PS2Keyboard::handler()+0x4f8>
1000440f:	57                   	push   edi
10004410:	52                   	push   edx
10004411:	68 23 03 00 00       	push   0x323
10004416:	eb 0b                	jmp    10004423 <PS2Keyboard::handler()+0x503>
10004418:	3c 7c                	cmp    al,0x7c
1000441a:	75 0f                	jne    1000442b <PS2Keyboard::handler()+0x50b>
1000441c:	53                   	push   ebx
1000441d:	52                   	push   edx
1000441e:	68 26 03 00 00       	push   0x326
10004423:	56                   	push   esi
10004424:	e8 fc ff ff ff       	call   10004425 <PS2Keyboard::handler()+0x505>	10004425: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10004429:	eb 45                	jmp    10004470 <PS2Keyboard::handler()+0x550>
1000442b:	0f b6 c0             	movzx  eax,al
1000442e:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
10004434:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
1000443b:	74 16                	je     10004453 <PS2Keyboard::handler()+0x533>
1000443d:	84 c9                	test   cl,cl
1000443f:	74 09                	je     1000444a <PS2Keyboard::handler()+0x52a>
10004441:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004444: R_386_32	PS2Keyboard::internalMapCapUpper
10004448:	eb 1d                	jmp    10004467 <PS2Keyboard::handler()+0x547>
1000444a:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000444d: R_386_32	PS2Keyboard::internalMapperUpper
10004451:	eb 14                	jmp    10004467 <PS2Keyboard::handler()+0x547>
10004453:	84 c9                	test   cl,cl
10004455:	74 09                	je     10004460 <PS2Keyboard::handler()+0x540>
10004457:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000445a: R_386_32	PS2Keyboard::internalMapCapLower
1000445e:	eb 07                	jmp    10004467 <PS2Keyboard::handler()+0x547>
10004460:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004463: R_386_32	PS2Keyboard::internalMapperLower
10004467:	51                   	push   ecx
10004468:	52                   	push   edx
10004469:	50                   	push   eax
1000446a:	56                   	push   esi
1000446b:	e8 fc ff ff ff       	call   1000446c <PS2Keyboard::handler()+0x54c>	1000446c: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
10004470:	83 c4 10             	add    esp,0x10
10004473:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
1000447a:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10004481:	e9 d5 01 00 00       	jmp    1000465b <PS2Keyboard::handler()+0x73b>
10004486:	80 fa 35             	cmp    dl,0x35
10004489:	0f 84 98 fb ff ff    	je     10004027 <PS2Keyboard::handler()+0x107>
1000448f:	eb e2                	jmp    10004473 <PS2Keyboard::handler()+0x553>
10004491:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
10004498:	80 fa 0e             	cmp    dl,0xe
1000449b:	75 07                	jne    100044a4 <PS2Keyboard::handler()+0x584>
1000449d:	50                   	push   eax
1000449e:	51                   	push   ecx
1000449f:	e9 40 fd ff ff       	jmp    100041e4 <PS2Keyboard::handler()+0x2c4>
100044a4:	80 fa 0f             	cmp    dl,0xf
100044a7:	75 07                	jne    100044b0 <PS2Keyboard::handler()+0x590>
100044a9:	57                   	push   edi
100044aa:	51                   	push   ecx
100044ab:	e9 41 fd ff ff       	jmp    100041f1 <PS2Keyboard::handler()+0x2d1>
100044b0:	80 fa 3a             	cmp    dl,0x3a
100044b3:	75 07                	jne    100044bc <PS2Keyboard::handler()+0x59c>
100044b5:	84 c9                	test   cl,cl
100044b7:	e9 42 fd ff ff       	jmp    100041fe <PS2Keyboard::handler()+0x2de>
100044bc:	80 fa 45             	cmp    dl,0x45
100044bf:	75 07                	jne    100044c8 <PS2Keyboard::handler()+0x5a8>
100044c1:	84 c9                	test   cl,cl
100044c3:	e9 64 fd ff ff       	jmp    1000422c <PS2Keyboard::handler()+0x30c>
100044c8:	80 fa 46             	cmp    dl,0x46
100044cb:	75 07                	jne    100044d4 <PS2Keyboard::handler()+0x5b4>
100044cd:	84 c9                	test   cl,cl
100044cf:	e9 86 fd ff ff       	jmp    1000425a <PS2Keyboard::handler()+0x33a>
100044d4:	80 fa 3b             	cmp    dl,0x3b
100044d7:	75 07                	jne    100044e0 <PS2Keyboard::handler()+0x5c0>
100044d9:	53                   	push   ebx
100044da:	51                   	push   ecx
100044db:	e9 a8 fd ff ff       	jmp    10004288 <PS2Keyboard::handler()+0x368>
100044e0:	80 fa 3c             	cmp    dl,0x3c
100044e3:	75 07                	jne    100044ec <PS2Keyboard::handler()+0x5cc>
100044e5:	52                   	push   edx
100044e6:	51                   	push   ecx
100044e7:	e9 ac fd ff ff       	jmp    10004298 <PS2Keyboard::handler()+0x378>
100044ec:	80 fa 3d             	cmp    dl,0x3d
100044ef:	75 07                	jne    100044f8 <PS2Keyboard::handler()+0x5d8>
100044f1:	50                   	push   eax
100044f2:	51                   	push   ecx
100044f3:	e9 b0 fd ff ff       	jmp    100042a8 <PS2Keyboard::handler()+0x388>
100044f8:	80 fa 3e             	cmp    dl,0x3e
100044fb:	75 07                	jne    10004504 <PS2Keyboard::handler()+0x5e4>
100044fd:	50                   	push   eax
100044fe:	51                   	push   ecx
100044ff:	e9 b4 fd ff ff       	jmp    100042b8 <PS2Keyboard::handler()+0x398>
10004504:	80 fa 3f             	cmp    dl,0x3f
10004507:	75 07                	jne    10004510 <PS2Keyboard::handler()+0x5f0>
10004509:	50                   	push   eax
1000450a:	51                   	push   ecx
1000450b:	e9 b8 fd ff ff       	jmp    100042c8 <PS2Keyboard::handler()+0x3a8>
10004510:	80 fa 40             	cmp    dl,0x40
10004513:	75 07                	jne    1000451c <PS2Keyboard::handler()+0x5fc>
10004515:	50                   	push   eax
10004516:	51                   	push   ecx
10004517:	e9 bc fd ff ff       	jmp    100042d8 <PS2Keyboard::handler()+0x3b8>
1000451c:	80 fa 41             	cmp    dl,0x41
1000451f:	75 07                	jne    10004528 <PS2Keyboard::handler()+0x608>
10004521:	50                   	push   eax
10004522:	51                   	push   ecx
10004523:	e9 c4 fd ff ff       	jmp    100042ec <PS2Keyboard::handler()+0x3cc>
10004528:	80 fa 42             	cmp    dl,0x42
1000452b:	75 07                	jne    10004534 <PS2Keyboard::handler()+0x614>
1000452d:	50                   	push   eax
1000452e:	51                   	push   ecx
1000452f:	e9 c8 fd ff ff       	jmp    100042fc <PS2Keyboard::handler()+0x3dc>
10004534:	80 fa 43             	cmp    dl,0x43
10004537:	75 07                	jne    10004540 <PS2Keyboard::handler()+0x620>
10004539:	57                   	push   edi
1000453a:	51                   	push   ecx
1000453b:	e9 cc fd ff ff       	jmp    1000430c <PS2Keyboard::handler()+0x3ec>
10004540:	80 fa 44             	cmp    dl,0x44
10004543:	75 07                	jne    1000454c <PS2Keyboard::handler()+0x62c>
10004545:	53                   	push   ebx
10004546:	51                   	push   ecx
10004547:	e9 d0 fd ff ff       	jmp    1000431c <PS2Keyboard::handler()+0x3fc>
1000454c:	84 d2                	test   dl,dl
1000454e:	75 07                	jne    10004557 <PS2Keyboard::handler()+0x637>
10004550:	52                   	push   edx
10004551:	51                   	push   ecx
10004552:	e9 d5 fd ff ff       	jmp    1000432c <PS2Keyboard::handler()+0x40c>
10004557:	80 fa 1c             	cmp    dl,0x1c
1000455a:	75 07                	jne    10004563 <PS2Keyboard::handler()+0x643>
1000455c:	50                   	push   eax
1000455d:	51                   	push   ecx
1000455e:	e9 e9 fd ff ff       	jmp    1000434c <PS2Keyboard::handler()+0x42c>
10004563:	80 fa 01             	cmp    dl,0x1
10004566:	75 07                	jne    1000456f <PS2Keyboard::handler()+0x64f>
10004568:	50                   	push   eax
10004569:	51                   	push   ecx
1000456a:	e9 ea fd ff ff       	jmp    10004359 <PS2Keyboard::handler()+0x439>
1000456f:	80 fa 52             	cmp    dl,0x52
10004572:	75 07                	jne    1000457b <PS2Keyboard::handler()+0x65b>
10004574:	50                   	push   eax
10004575:	51                   	push   ecx
10004576:	e9 ee fd ff ff       	jmp    10004369 <PS2Keyboard::handler()+0x449>
1000457b:	80 fa 4f             	cmp    dl,0x4f
1000457e:	75 07                	jne    10004587 <PS2Keyboard::handler()+0x667>
10004580:	50                   	push   eax
10004581:	51                   	push   ecx
10004582:	e9 f2 fd ff ff       	jmp    10004379 <PS2Keyboard::handler()+0x459>
10004587:	80 fa 50             	cmp    dl,0x50
1000458a:	75 07                	jne    10004593 <PS2Keyboard::handler()+0x673>
1000458c:	50                   	push   eax
1000458d:	51                   	push   ecx
1000458e:	e9 f6 fd ff ff       	jmp    10004389 <PS2Keyboard::handler()+0x469>
10004593:	80 fa 51             	cmp    dl,0x51
10004596:	75 07                	jne    1000459f <PS2Keyboard::handler()+0x67f>
10004598:	50                   	push   eax
10004599:	51                   	push   ecx
1000459a:	e9 fa fd ff ff       	jmp    10004399 <PS2Keyboard::handler()+0x479>
1000459f:	80 fa 4b             	cmp    dl,0x4b
100045a2:	75 07                	jne    100045ab <PS2Keyboard::handler()+0x68b>
100045a4:	57                   	push   edi
100045a5:	51                   	push   ecx
100045a6:	e9 fe fd ff ff       	jmp    100043a9 <PS2Keyboard::handler()+0x489>
100045ab:	80 fa 4c             	cmp    dl,0x4c
100045ae:	75 07                	jne    100045b7 <PS2Keyboard::handler()+0x697>
100045b0:	53                   	push   ebx
100045b1:	51                   	push   ecx
100045b2:	e9 ff fd ff ff       	jmp    100043b6 <PS2Keyboard::handler()+0x496>
100045b7:	80 fa 4d             	cmp    dl,0x4d
100045ba:	75 07                	jne    100045c3 <PS2Keyboard::handler()+0x6a3>
100045bc:	52                   	push   edx
100045bd:	51                   	push   ecx
100045be:	e9 00 fe ff ff       	jmp    100043c3 <PS2Keyboard::handler()+0x4a3>
100045c3:	80 fa 47             	cmp    dl,0x47
100045c6:	75 07                	jne    100045cf <PS2Keyboard::handler()+0x6af>
100045c8:	50                   	push   eax
100045c9:	51                   	push   ecx
100045ca:	e9 01 fe ff ff       	jmp    100043d0 <PS2Keyboard::handler()+0x4b0>
100045cf:	80 fa 48             	cmp    dl,0x48
100045d2:	75 07                	jne    100045db <PS2Keyboard::handler()+0x6bb>
100045d4:	50                   	push   eax
100045d5:	51                   	push   ecx
100045d6:	e9 02 fe ff ff       	jmp    100043dd <PS2Keyboard::handler()+0x4bd>
100045db:	80 fa 49             	cmp    dl,0x49
100045de:	75 07                	jne    100045e7 <PS2Keyboard::handler()+0x6c7>
100045e0:	50                   	push   eax
100045e1:	51                   	push   ecx
100045e2:	e9 03 fe ff ff       	jmp    100043ea <PS2Keyboard::handler()+0x4ca>
100045e7:	80 fa 53             	cmp    dl,0x53
100045ea:	75 07                	jne    100045f3 <PS2Keyboard::handler()+0x6d3>
100045ec:	50                   	push   eax
100045ed:	51                   	push   ecx
100045ee:	e9 04 fe ff ff       	jmp    100043f7 <PS2Keyboard::handler()+0x4d7>
100045f3:	80 fa 4a             	cmp    dl,0x4a
100045f6:	75 07                	jne    100045ff <PS2Keyboard::handler()+0x6df>
100045f8:	50                   	push   eax
100045f9:	51                   	push   ecx
100045fa:	e9 05 fe ff ff       	jmp    10004404 <PS2Keyboard::handler()+0x4e4>
100045ff:	80 fa 4e             	cmp    dl,0x4e
10004602:	75 07                	jne    1000460b <PS2Keyboard::handler()+0x6eb>
10004604:	50                   	push   eax
10004605:	51                   	push   ecx
10004606:	e9 06 fe ff ff       	jmp    10004411 <PS2Keyboard::handler()+0x4f1>
1000460b:	80 fa 37             	cmp    dl,0x37
1000460e:	75 07                	jne    10004617 <PS2Keyboard::handler()+0x6f7>
10004610:	57                   	push   edi
10004611:	51                   	push   ecx
10004612:	e9 07 fe ff ff       	jmp    1000441e <PS2Keyboard::handler()+0x4fe>
10004617:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
1000461e:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
10004625:	c1 e7 07             	shl    edi,0x7
10004628:	c1 e0 08             	shl    eax,0x8
1000462b:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	1000462e: R_386_32	PS2Keyboard::internalMapperLowerBad
10004632:	88 d0                	mov    al,dl
10004634:	89 fb                	mov    ebx,edi
10004636:	d7                   	xlat   BYTE PTR ds:[ebx]
10004637:	88 c2                	mov    dl,al
10004639:	0f b6 d2             	movzx  edx,dl
1000463c:	53                   	push   ebx
1000463d:	51                   	push   ecx
1000463e:	52                   	push   edx
1000463f:	e9 26 fe ff ff       	jmp    1000446a <PS2Keyboard::handler()+0x54a>
10004644:	80 fa 36             	cmp    dl,0x36
10004647:	0f 84 26 f9 ff ff    	je     10003f73 <PS2Keyboard::handler()+0x53>
1000464d:	80 fa 38             	cmp    dl,0x38
10004650:	0f 84 7f f9 ff ff    	je     10003fd5 <PS2Keyboard::handler()+0xb5>
10004656:	e9 5f fa ff ff       	jmp    100040ba <PS2Keyboard::handler()+0x19a>
1000465b:	5b                   	pop    ebx
1000465c:	5e                   	pop    esi
1000465d:	5f                   	pop    edi
1000465e:	c3                   	ret    
1000465f:	90                   	nop

10004660 <PS2Keyboard::open(int, int, void*)>:
10004660:	53                   	push   ebx
10004661:	83 ec 14             	sub    esp,0x14
10004664:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004668:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
1000466e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10004674:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004678:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
1000467e:	53                   	push   ebx
1000467f:	6a 01                	push   0x1
10004681:	68 00 00 00 00       	push   0x0	10004682: R_386_32	ps2KeyboardHandler(regs*, void*)
10004686:	6a 01                	push   0x1
10004688:	53                   	push   ebx
10004689:	e8 fc ff ff ff       	call   1000468a <PS2Keyboard::open(int, int, void*)+0x2a>	1000468a: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000468e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
10004694:	a1 00 00 00 00       	mov    eax,ds:0x0	10004695: R_386_32	keBootSettings
10004699:	c1 e8 02             	shr    eax,0x2
1000469c:	83 f0 01             	xor    eax,0x1
1000469f:	83 e0 01             	and    eax,0x1
100046a2:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
100046a8:	31 c0                	xor    eax,eax
100046aa:	83 c4 28             	add    esp,0x28
100046ad:	5b                   	pop    ebx
100046ae:	c3                   	ret    
100046af:	90                   	nop

100046b0 <PS2Keyboard::close(int, int, void*)>:
100046b0:	83 c8 ff             	or     eax,0xffffffff
100046b3:	c3                   	ret    

100046b4 <PS2Mouse::PS2Mouse()>:
100046b4:	55                   	push   ebp
100046b5:	89 e5                	mov    ebp,esp
100046b7:	83 ec 08             	sub    esp,0x8
100046ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046bd:	83 ec 08             	sub    esp,0x8
100046c0:	68 00 00 00 00       	push   0x0	100046c1: R_386_32	ps2mousename
100046c5:	50                   	push   eax
100046c6:	e8 fc ff ff ff       	call   100046c7 <PS2Mouse::PS2Mouse()+0x13>	100046c7: R_386_PC32	Mouse::Mouse(char const*)
100046cb:	83 c4 10             	add    esp,0x10
100046ce:	ba 08 00 00 00       	mov    edx,0x8	100046cf: R_386_32	vtable for PS2Mouse
100046d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046d6:	89 10                	mov    DWORD PTR [eax],edx
100046d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046db:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100046e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046e5:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
100046ef:	90                   	nop
100046f0:	c9                   	leave  
100046f1:	c3                   	ret    

100046f2 <ps2MouseHandler(regs*, void*)>:
100046f2:	55                   	push   ebp
100046f3:	89 e5                	mov    ebp,esp
100046f5:	83 ec 08             	sub    esp,0x8
100046f8:	83 ec 0c             	sub    esp,0xc
100046fb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100046fe:	e8 fc ff ff ff       	call   100046ff <ps2MouseHandler(regs*, void*)+0xd>	100046ff: R_386_PC32	PS2Mouse::handler()
10004703:	83 c4 10             	add    esp,0x10
10004706:	90                   	nop
10004707:	c9                   	leave  
10004708:	c3                   	ret    
10004709:	90                   	nop

1000470a <PS2Mouse::handler()>:
1000470a:	55                   	push   ebp
1000470b:	89 e5                	mov    ebp,esp
1000470d:	83 ec 28             	sub    esp,0x28
10004710:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
10004716:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
1000471a:	89 c2                	mov    edx,eax
1000471c:	ec                   	in     al,dx
1000471d:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
10004720:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
10004723:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10004726:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000472a:	83 e0 01             	and    eax,0x1
1000472d:	85 c0                	test   eax,eax
1000472f:	0f 84 8d 01 00 00    	je     100048c2 <PS2Mouse::handler()+0x1b8>
10004735:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10004739:	83 e0 20             	and    eax,0x20
1000473c:	85 c0                	test   eax,eax
1000473e:	0f 84 81 01 00 00    	je     100048c5 <PS2Mouse::handler()+0x1bb>
10004744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004747:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
1000474d:	8d 50 01             	lea    edx,[eax+0x1]
10004750:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10004753:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
10004759:	0f b6 c8             	movzx  ecx,al
1000475c:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
10004762:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10004766:	89 c2                	mov    edx,eax
10004768:	ec                   	in     al,dx
10004769:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
1000476c:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
1000476f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004772:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
10004779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000477c:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004782:	0f b6 c0             	movzx  eax,al
10004785:	83 e0 08             	and    eax,0x8
10004788:	85 c0                	test   eax,eax
1000478a:	75 0f                	jne    1000479b <PS2Mouse::handler()+0x91>
1000478c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000478f:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004796:	e9 2b 01 00 00       	jmp    100048c6 <PS2Mouse::handler()+0x1bc>
1000479b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000479e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100047a4:	84 c0                	test   al,al
100047a6:	75 0d                	jne    100047b5 <PS2Mouse::handler()+0xab>
100047a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047ab:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100047b1:	3c 02                	cmp    al,0x2
100047b3:	77 2f                	ja     100047e4 <PS2Mouse::handler()+0xda>
100047b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047b8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100047be:	3c 03                	cmp    al,0x3
100047c0:	74 11                	je     100047d3 <PS2Mouse::handler()+0xc9>
100047c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047c5:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100047cb:	3c 04                	cmp    al,0x4
100047cd:	0f 85 f3 00 00 00    	jne    100048c6 <PS2Mouse::handler()+0x1bc>
100047d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047d6:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100047dc:	3c 03                	cmp    al,0x3
100047de:	0f 86 e2 00 00 00    	jbe    100048c6 <PS2Mouse::handler()+0x1bc>
100047e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047e7:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100047ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047f1:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100047f7:	84 c0                	test   al,al
100047f9:	78 13                	js     1000480e <PS2Mouse::handler()+0x104>
100047fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047fe:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004804:	0f b6 c0             	movzx  eax,al
10004807:	83 e0 40             	and    eax,0x40
1000480a:	85 c0                	test   eax,eax
1000480c:	74 37                	je     10004845 <PS2Mouse::handler()+0x13b>
1000480e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004811:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000481b:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
10004822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004825:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
1000482c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000482f:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10004836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004839:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10004840:	e9 81 00 00 00       	jmp    100048c6 <PS2Mouse::handler()+0x1bc>
10004845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004848:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
1000484e:	0f b6 d0             	movzx  edx,al
10004851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004854:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000485a:	0f b6 c0             	movzx  eax,al
1000485d:	c1 e0 04             	shl    eax,0x4
10004860:	25 00 01 00 00       	and    eax,0x100
10004865:	29 c2                	sub    edx,eax
10004867:	89 d0                	mov    eax,edx
10004869:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000486c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000486f:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004875:	0f b6 c0             	movzx  eax,al
10004878:	c1 e0 03             	shl    eax,0x3
1000487b:	25 00 01 00 00       	and    eax,0x100
10004880:	89 c2                	mov    edx,eax
10004882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004885:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
1000488b:	0f b6 c0             	movzx  eax,al
1000488e:	29 c2                	sub    edx,eax
10004890:	89 d0                	mov    eax,edx
10004892:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10004895:	a1 00 00 00 00       	mov    eax,ds:0x0	10004896: R_386_32	guiMouseHandler
1000489a:	85 c0                	test   eax,eax
1000489c:	74 28                	je     100048c6 <PS2Mouse::handler()+0x1bc>
1000489e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000489f: R_386_32	guiMouseHandler
100048a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100048a6:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
100048ac:	0f b6 d2             	movzx  edx,dl
100048af:	83 e2 03             	and    edx,0x3
100048b2:	6a 00                	push   0x0
100048b4:	52                   	push   edx
100048b5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100048b8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100048bb:	ff d0                	call   eax
100048bd:	83 c4 10             	add    esp,0x10
100048c0:	eb 04                	jmp    100048c6 <PS2Mouse::handler()+0x1bc>
100048c2:	90                   	nop
100048c3:	eb 01                	jmp    100048c6 <PS2Mouse::handler()+0x1bc>
100048c5:	90                   	nop
100048c6:	c9                   	leave  
100048c7:	c3                   	ret    

100048c8 <PS2Mouse::open(int, int, void*)>:
100048c8:	55                   	push   ebp
100048c9:	89 e5                	mov    ebp,esp
100048cb:	83 ec 08             	sub    esp,0x8
100048ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048d1:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
100048d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048da:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100048e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048e3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100048e6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100048ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048ef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100048f5:	83 ec 08             	sub    esp,0x8
100048f8:	68 f6 00 00 00       	push   0xf6
100048fd:	50                   	push   eax
100048fe:	e8 fc ff ff ff       	call   100048ff <PS2Mouse::open(int, int, void*)+0x37>	100048ff: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10004903:	83 c4 10             	add    esp,0x10
10004906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004909:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000490f:	83 ec 0c             	sub    esp,0xc
10004912:	50                   	push   eax
10004913:	e8 fc ff ff ff       	call   10004914 <PS2Mouse::open(int, int, void*)+0x4c>	10004914: R_386_PC32	PS2Port::deviceRead()
10004918:	83 c4 10             	add    esp,0x10
1000491b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000491e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004924:	83 ec 08             	sub    esp,0x8
10004927:	68 f4 00 00 00       	push   0xf4
1000492c:	50                   	push   eax
1000492d:	e8 fc ff ff ff       	call   1000492e <PS2Mouse::open(int, int, void*)+0x66>	1000492e: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10004932:	83 c4 10             	add    esp,0x10
10004935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004938:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000493e:	83 ec 0c             	sub    esp,0xc
10004941:	50                   	push   eax
10004942:	e8 fc ff ff ff       	call   10004943 <PS2Mouse::open(int, int, void*)+0x7b>	10004943: R_386_PC32	PS2Port::deviceRead()
10004947:	83 c4 10             	add    esp,0x10
1000494a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000494d:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004957:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
1000495e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004961:	83 ec 0c             	sub    esp,0xc
10004964:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004967:	6a 01                	push   0x1
10004969:	68 00 00 00 00       	push   0x0	1000496a: R_386_32	ps2MouseHandler(regs*, void*)
1000496e:	6a 0c                	push   0xc
10004970:	50                   	push   eax
10004971:	e8 fc ff ff ff       	call   10004972 <PS2Mouse::open(int, int, void*)+0xaa>	10004972: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004976:	83 c4 20             	add    esp,0x20
10004979:	b8 00 00 00 00       	mov    eax,0x0
1000497e:	c9                   	leave  
1000497f:	c3                   	ret    

10004980 <PS2Mouse::close(int, int, void*)>:
10004980:	b8 00 00 00 00       	mov    eax,0x0
10004985:	c3                   	ret    

10004986 <PS2Mouse::detect()>:
10004986:	90                   	nop
10004987:	c3                   	ret    

10004988 <PS2Port::PS2Port()>:
10004988:	55                   	push   ebp
10004989:	89 e5                	mov    ebp,esp
1000498b:	83 ec 08             	sub    esp,0x8
1000498e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004991:	83 ec 08             	sub    esp,0x8
10004994:	68 00 00 00 00       	push   0x0	10004995: R_386_32	ps2portname
10004999:	50                   	push   eax
1000499a:	e8 fc ff ff ff       	call   1000499b <PS2Port::PS2Port()+0x13>	1000499b: R_386_PC32	Bus::Bus(char const*)
1000499f:	83 c4 10             	add    esp,0x10
100049a2:	ba 08 00 00 00       	mov    edx,0x8	100049a3: R_386_32	vtable for PS2Port
100049a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049aa:	89 10                	mov    DWORD PTR [eax],edx
100049ac:	90                   	nop
100049ad:	c9                   	leave  
100049ae:	c3                   	ret    
100049af:	90                   	nop

100049b0 <PS2Port::open(int, int, void*)>:
100049b0:	55                   	push   ebp
100049b1:	89 e5                	mov    ebp,esp
100049b3:	83 ec 08             	sub    esp,0x8
100049b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049b9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100049bc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100049c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049c5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100049c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100049ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049d1:	8b 00                	mov    eax,DWORD PTR [eax]
100049d3:	83 c0 18             	add    eax,0x18
100049d6:	8b 00                	mov    eax,DWORD PTR [eax]
100049d8:	83 ec 0c             	sub    esp,0xc
100049db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100049de:	ff d0                	call   eax
100049e0:	83 c4 10             	add    esp,0x10
100049e3:	b8 00 00 00 00       	mov    eax,0x0
100049e8:	c9                   	leave  
100049e9:	c3                   	ret    

100049ea <PS2Port::close(int, int, void*)>:
100049ea:	b8 00 00 00 00       	mov    eax,0x0
100049ef:	c3                   	ret    

100049f0 <PS2Port::detect()>:
100049f0:	55                   	push   ebp
100049f1:	89 e5                	mov    ebp,esp
100049f3:	53                   	push   ebx
100049f4:	83 ec 14             	sub    esp,0x14
100049f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004a00:	85 c0                	test   eax,eax
10004a02:	75 5a                	jne    10004a5e <PS2Port::detect()+0x6e>
10004a04:	c7 45 ec 70 01 00 00 	mov    DWORD PTR [ebp-0x14],0x170
10004a0b:	83 ec 0c             	sub    esp,0xc
10004a0e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10004a11:	e8 fc ff ff ff       	call   10004a12 <PS2Port::detect()+0x22>	10004a12: R_386_PC32	malloc
10004a16:	83 c4 10             	add    esp,0x10
10004a19:	89 c3                	mov    ebx,eax
10004a1b:	83 ec 0c             	sub    esp,0xc
10004a1e:	53                   	push   ebx
10004a1f:	e8 fc ff ff ff       	call   10004a20 <PS2Port::detect()+0x30>	10004a20: R_386_PC32	PS2Keyboard::PS2Keyboard()
10004a24:	83 c4 10             	add    esp,0x10
10004a27:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10004a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a2d:	83 ec 08             	sub    esp,0x8
10004a30:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10004a33:	50                   	push   eax
10004a34:	e8 fc ff ff ff       	call   10004a35 <PS2Port::detect()+0x45>	10004a35: R_386_PC32	Device::addChild(Device*)
10004a39:	83 c4 10             	add    esp,0x10
10004a3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004a3f:	8b 00                	mov    eax,DWORD PTR [eax]
10004a41:	83 c0 08             	add    eax,0x8
10004a44:	8b 00                	mov    eax,DWORD PTR [eax]
10004a46:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004a49:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004a4f:	52                   	push   edx
10004a50:	6a 00                	push   0x0
10004a52:	6a 00                	push   0x0
10004a54:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10004a57:	ff d0                	call   eax
10004a59:	83 c4 10             	add    esp,0x10
10004a5c:	eb 66                	jmp    10004ac4 <PS2Port::detect()+0xd4>
10004a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a61:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004a67:	83 f8 01             	cmp    eax,0x1
10004a6a:	75 58                	jne    10004ac4 <PS2Port::detect()+0xd4>
10004a6c:	c7 45 e8 68 01 00 00 	mov    DWORD PTR [ebp-0x18],0x168
10004a73:	83 ec 0c             	sub    esp,0xc
10004a76:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10004a79:	e8 fc ff ff ff       	call   10004a7a <PS2Port::detect()+0x8a>	10004a7a: R_386_PC32	malloc
10004a7e:	83 c4 10             	add    esp,0x10
10004a81:	89 c3                	mov    ebx,eax
10004a83:	83 ec 0c             	sub    esp,0xc
10004a86:	53                   	push   ebx
10004a87:	e8 fc ff ff ff       	call   10004a88 <PS2Port::detect()+0x98>	10004a88: R_386_PC32	PS2Mouse::PS2Mouse()
10004a8c:	83 c4 10             	add    esp,0x10
10004a8f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10004a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a95:	83 ec 08             	sub    esp,0x8
10004a98:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004a9b:	50                   	push   eax
10004a9c:	e8 fc ff ff ff       	call   10004a9d <PS2Port::detect()+0xad>	10004a9d: R_386_PC32	Device::addChild(Device*)
10004aa1:	83 c4 10             	add    esp,0x10
10004aa4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004aa7:	8b 00                	mov    eax,DWORD PTR [eax]
10004aa9:	83 c0 08             	add    eax,0x8
10004aac:	8b 00                	mov    eax,DWORD PTR [eax]
10004aae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004ab1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004ab7:	52                   	push   edx
10004ab8:	6a 00                	push   0x0
10004aba:	6a 01                	push   0x1
10004abc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004abf:	ff d0                	call   eax
10004ac1:	83 c4 10             	add    esp,0x10
10004ac4:	90                   	nop
10004ac5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004ac8:	c9                   	leave  
10004ac9:	c3                   	ret    

10004aca <PS2Port::deviceWrite(unsigned char)>:
10004aca:	55                   	push   ebp
10004acb:	89 e5                	mov    ebp,esp
10004acd:	83 ec 28             	sub    esp,0x28
10004ad0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004ad3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10004ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ad9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004adf:	83 f8 01             	cmp    eax,0x1
10004ae2:	75 1a                	jne    10004afe <PS2Port::deviceWrite(unsigned char)+0x34>
10004ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ae7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004aed:	83 ec 08             	sub    esp,0x8
10004af0:	68 d4 00 00 00       	push   0xd4
10004af5:	50                   	push   eax
10004af6:	e8 fc ff ff ff       	call   10004af7 <PS2Port::deviceWrite(unsigned char)+0x2d>	10004af7: R_386_PC32	PS2::controllerWrite(unsigned char)
10004afb:	83 c4 10             	add    esp,0x10
10004afe:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004b05:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10004b0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004b0e:	89 c2                	mov    edx,eax
10004b10:	ec                   	in     al,dx
10004b11:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10004b14:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10004b17:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10004b1a:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004b1e:	83 e0 02             	and    eax,0x2
10004b21:	85 c0                	test   eax,eax
10004b23:	74 29                	je     10004b4e <PS2Port::deviceWrite(unsigned char)+0x84>
10004b25:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004b29:	83 e0 40             	and    eax,0x40
10004b2c:	85 c0                	test   eax,eax
10004b2e:	75 22                	jne    10004b52 <PS2Port::deviceWrite(unsigned char)+0x88>
10004b30:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10004b33:	84 c0                	test   al,al
10004b35:	78 1b                	js     10004b52 <PS2Port::deviceWrite(unsigned char)+0x88>
10004b37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004b3a:	8d 50 01             	lea    edx,[eax+0x1]
10004b3d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10004b40:	3d 40 06 00 00       	cmp    eax,0x640
10004b45:	0f 94 c0             	sete   al
10004b48:	84 c0                	test   al,al
10004b4a:	75 05                	jne    10004b51 <PS2Port::deviceWrite(unsigned char)+0x87>
10004b4c:	eb b7                	jmp    10004b05 <PS2Port::deviceWrite(unsigned char)+0x3b>
10004b4e:	90                   	nop
10004b4f:	eb 01                	jmp    10004b52 <PS2Port::deviceWrite(unsigned char)+0x88>
10004b51:	90                   	nop
10004b52:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10004b56:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10004b5c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10004b5f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10004b62:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10004b65:	ee                   	out    dx,al
10004b66:	b0 01                	mov    al,0x1
10004b68:	c9                   	leave  
10004b69:	c3                   	ret    

10004b6a <PS2Port::deviceRead()>:
10004b6a:	55                   	push   ebp
10004b6b:	89 e5                	mov    ebp,esp
10004b6d:	83 ec 08             	sub    esp,0x8
10004b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b73:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004b79:	83 ec 0c             	sub    esp,0xc
10004b7c:	50                   	push   eax
10004b7d:	e8 fc ff ff ff       	call   10004b7e <PS2Port::deviceRead()+0x14>	10004b7e: R_386_PC32	PS2::controllerRead()
10004b82:	83 c4 10             	add    esp,0x10
10004b85:	c9                   	leave  
10004b86:	c3                   	ret    
10004b87:	90                   	nop

10004b88 <sb16Demo(void*)>:
10004b88:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10004b8b: R_386_32	irqDisableCounter
10004b8f:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004b91: R_386_32	irqDisableCounter
10004b96:	75 01                	jne    10004b99 <sb16Demo(void*)+0x11>
10004b98:	fb                   	sti    
10004b99:	eb fe                	jmp    10004b99 <sb16Demo(void*)+0x11>
10004b9b:	90                   	nop

10004b9c <SoundBlaster16::resetDSP()>:
10004b9c:	53                   	push   ebx
10004b9d:	b0 01                	mov    al,0x1
10004b9f:	83 ec 10             	sub    esp,0x10
10004ba2:	bb 26 02 00 00       	mov    ebx,0x226
10004ba7:	89 da                	mov    edx,ebx
10004ba9:	ee                   	out    dx,al
10004baa:	6a 00                	push   0x0
10004bac:	6a 1e                	push   0x1e
10004bae:	e8 fc ff ff ff       	call   10004baf <SoundBlaster16::resetDSP()+0x13>	10004baf: R_386_PC32	milliTenthSleep(unsigned long long)
10004bb3:	31 c0                	xor    eax,eax
10004bb5:	89 da                	mov    edx,ebx
10004bb7:	ee                   	out    dx,al
10004bb8:	ba 2a 02 00 00       	mov    edx,0x22a
10004bbd:	ec                   	in     al,dx
10004bbe:	83 c4 10             	add    esp,0x10
10004bc1:	3c aa                	cmp    al,0xaa
10004bc3:	75 25                	jne    10004bea <SoundBlaster16::resetDSP()+0x4e>
10004bc5:	b0 e1                	mov    al,0xe1
10004bc7:	ba 2c 02 00 00       	mov    edx,0x22c
10004bcc:	ee                   	out    dx,al
10004bcd:	ba 2e 02 00 00       	mov    edx,0x22e
10004bd2:	ec                   	in     al,dx
10004bd3:	84 c0                	test   al,al
10004bd5:	79 fb                	jns    10004bd2 <SoundBlaster16::resetDSP()+0x36>
10004bd7:	ba 2a 02 00 00       	mov    edx,0x22a
10004bdc:	ec                   	in     al,dx
10004bdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004be1:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10004be7:	ec                   	in     al,dx
10004be8:	eb 13                	jmp    10004bfd <SoundBlaster16::resetDSP()+0x61>
10004bea:	0f b6 c0             	movzx  eax,al
10004bed:	51                   	push   ecx
10004bee:	51                   	push   ecx
10004bef:	50                   	push   eax
10004bf0:	68 00 00 00 00       	push   0x0	10004bf1: R_386_32	badVer
10004bf5:	e8 fc ff ff ff       	call   10004bf6 <SoundBlaster16::resetDSP()+0x5a>	10004bf6: R_386_PC32	Dbg::kprintf(char const*, ...)
10004bfa:	83 c4 10             	add    esp,0x10
10004bfd:	83 c4 08             	add    esp,0x8
10004c00:	5b                   	pop    ebx
10004c01:	c3                   	ret    

10004c02 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10004c02:	53                   	push   ebx
10004c03:	ba 2c 02 00 00       	mov    edx,0x22c
10004c08:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004c0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004c10:	ec                   	in     al,dx
10004c11:	84 c0                	test   al,al
10004c13:	78 fb                	js     10004c10 <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10004c15:	88 c8                	mov    al,cl
10004c17:	89 da                	mov    edx,ebx
10004c19:	ee                   	out    dx,al
10004c1a:	5b                   	pop    ebx
10004c1b:	c3                   	ret    

10004c1c <SoundBlaster16::turnSpeakerOn(bool)>:
10004c1c:	53                   	push   ebx
10004c1d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
10004c21:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10004c26:	75 54                	jne    10004c7c <SoundBlaster16::turnSpeakerOn(bool)+0x60>
10004c28:	31 c0                	xor    eax,eax
10004c2a:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004c31:	0f 94 c0             	sete   al
10004c34:	8d 84 80 d0 00 00 00 	lea    eax,[eax+eax*4+0xd0]
10004c3b:	50                   	push   eax
10004c3c:	68 2c 02 00 00       	push   0x22c
10004c41:	53                   	push   ebx
10004c42:	e8 fc ff ff ff       	call   10004c43 <SoundBlaster16::turnSpeakerOn(bool)+0x27>	10004c43: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c47:	83 c4 0c             	add    esp,0xc
10004c4a:	31 c0                	xor    eax,eax
10004c4c:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004c53:	0f 95 c0             	setne  al
10004c56:	05 d9 00 00 00       	add    eax,0xd9
10004c5b:	50                   	push   eax
10004c5c:	68 2c 02 00 00       	push   0x22c
10004c61:	53                   	push   ebx
10004c62:	e8 fc ff ff ff       	call   10004c63 <SoundBlaster16::turnSpeakerOn(bool)+0x47>	10004c63: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c67:	68 d3 00 00 00       	push   0xd3
10004c6c:	68 2c 02 00 00       	push   0x22c
10004c71:	53                   	push   ebx
10004c72:	e8 fc ff ff ff       	call   10004c73 <SoundBlaster16::turnSpeakerOn(bool)+0x57>	10004c73: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c77:	83 c4 18             	add    esp,0x18
10004c7a:	eb 13                	jmp    10004c8f <SoundBlaster16::turnSpeakerOn(bool)+0x73>
10004c7c:	68 d1 00 00 00       	push   0xd1
10004c81:	68 2c 02 00 00       	push   0x22c
10004c86:	53                   	push   ebx
10004c87:	e8 fc ff ff ff       	call   10004c88 <SoundBlaster16::turnSpeakerOn(bool)+0x6c>	10004c88: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c8c:	83 c4 0c             	add    esp,0xc
10004c8f:	5b                   	pop    ebx
10004c90:	c3                   	ret    
10004c91:	90                   	nop

10004c92 <SoundBlaster16::SoundBlaster16()>:
10004c92:	55                   	push   ebp
10004c93:	89 e5                	mov    ebp,esp
10004c95:	83 ec 08             	sub    esp,0x8
10004c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004c9b:	83 ec 08             	sub    esp,0x8
10004c9e:	68 c8 69 00 10       	push   0x100069c8	10004c9f: R_386_32	.text
10004ca3:	50                   	push   eax
10004ca4:	e8 fc ff ff ff       	call   10004ca5 <SoundBlaster16::SoundBlaster16()+0x13>	10004ca5: R_386_PC32	SoundCard::SoundCard(char const*)
10004ca9:	83 c4 10             	add    esp,0x10
10004cac:	ba 08 00 00 00       	mov    edx,0x8	10004cad: R_386_32	vtable for SoundBlaster16
10004cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004cb4:	89 10                	mov    DWORD PTR [eax],edx
10004cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004cb9:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10004cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004cc3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004cc9:	0f b6 d0             	movzx  edx,al
10004ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ccf:	66 c7 44 90 04 20 02 	mov    WORD PTR [eax+edx*4+0x4],0x220
10004cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004cd9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004cdf:	0f b6 d0             	movzx  edx,al
10004ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ce5:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10004cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ced:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004cf3:	8d 50 01             	lea    edx,[eax+0x1]
10004cf6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10004cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10004cff:	0f b6 d0             	movzx  edx,al
10004d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004d05:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10004d09:	83 e1 3f             	and    ecx,0x3f
10004d0c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10004d10:	90                   	nop
10004d11:	c9                   	leave  
10004d12:	c3                   	ret    
10004d13:	90                   	nop

10004d14 <SoundBlaster16::handleIRQ()>:
10004d14:	53                   	push   ebx
10004d15:	83 ec 14             	sub    esp,0x14
10004d18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004d1c:	68 d8 69 00 10       	push   0x100069d8	10004d1d: R_386_32	.text
10004d21:	e8 fc ff ff ff       	call   10004d22 <SoundBlaster16::handleIRQ()+0xe>	10004d22: R_386_PC32	Dbg::kprintf(char const*, ...)
10004d26:	83 c4 10             	add    esp,0x10
10004d29:	ba 2e 02 00 00       	mov    edx,0x22e
10004d2e:	83 bb dc 01 00 00 08 	cmp    DWORD PTR [ebx+0x1dc],0x8
10004d35:	74 17                	je     10004d4e <SoundBlaster16::handleIRQ()+0x3a>
10004d37:	b0 82                	mov    al,0x82
10004d39:	ba 24 02 00 00       	mov    edx,0x224
10004d3e:	ee                   	out    dx,al
10004d3f:	ba 25 02 00 00       	mov    edx,0x225
10004d44:	ec                   	in     al,dx
10004d45:	a8 02                	test   al,0x2
10004d47:	74 06                	je     10004d4f <SoundBlaster16::handleIRQ()+0x3b>
10004d49:	ba 2f 02 00 00       	mov    edx,0x22f
10004d4e:	ec                   	in     al,dx
10004d4f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004d53:	83 c4 08             	add    esp,0x8
10004d56:	5b                   	pop    ebx
10004d57:	e9 d2 04 00 00       	jmp    1000522e <SoundBlaster16::onInterrupt()>

10004d5c <sb16Handler(regs*, void*)>:
10004d5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004d60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004d64:	eb ae                	jmp    10004d14 <SoundBlaster16::handleIRQ()>

10004d66 <SoundBlaster16::beginPlayback()>:
10004d66:	57                   	push   edi
10004d67:	56                   	push   esi
10004d68:	53                   	push   ebx
10004d69:	52                   	push   edx
10004d6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004d6e:	8b bb e4 01 00 00    	mov    edi,DWORD PTR [ebx+0x1e4]
10004d74:	6a 01                	push   0x1
10004d76:	53                   	push   ebx
10004d77:	e8 fc ff ff ff       	call   10004d78 <SoundBlaster16::beginPlayback()+0x12>	10004d78: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004d7c:	31 c0                	xor    eax,eax
10004d7e:	59                   	pop    ecx
10004d7f:	83 ff 02             	cmp    edi,0x2
10004d82:	5e                   	pop    esi
10004d83:	0f 94 c0             	sete   al
10004d86:	c1 e0 05             	shl    eax,0x5
10004d89:	89 c6                	mov    esi,eax
10004d8b:	83 ce 10             	or     esi,0x10
10004d8e:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004d95:	89 f0                	mov    eax,esi
10004d97:	0f be f0             	movsx  esi,al
10004d9a:	75 7c                	jne    10004e18 <SoundBlaster16::beginPlayback()+0xb2>
10004d9c:	6a 41                	push   0x41
10004d9e:	68 2c 02 00 00       	push   0x22c
10004da3:	53                   	push   ebx
10004da4:	e8 fc ff ff ff       	call   10004da5 <SoundBlaster16::beginPlayback()+0x3f>	10004da5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004da9:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
10004daf:	0f b6 c4             	movzx  eax,ah
10004db2:	50                   	push   eax
10004db3:	68 2c 02 00 00       	push   0x22c
10004db8:	53                   	push   ebx
10004db9:	e8 fc ff ff ff       	call   10004dba <SoundBlaster16::beginPlayback()+0x54>	10004dba: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004dbe:	0f b6 83 e0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1e0]
10004dc5:	50                   	push   eax
10004dc6:	68 2c 02 00 00       	push   0x22c
10004dcb:	53                   	push   ebx
10004dcc:	e8 fc ff ff ff       	call   10004dcd <SoundBlaster16::beginPlayback()+0x67>	10004dcd: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004dd1:	83 c4 24             	add    esp,0x24
10004dd4:	68 b6 00 00 00       	push   0xb6
10004dd9:	68 2c 02 00 00       	push   0x22c
10004dde:	53                   	push   ebx
10004ddf:	e8 fc ff ff ff       	call   10004de0 <SoundBlaster16::beginPlayback()+0x7a>	10004de0: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004de4:	56                   	push   esi
10004de5:	68 2c 02 00 00       	push   0x22c
10004dea:	53                   	push   ebx
10004deb:	e8 fc ff ff ff       	call   10004dec <SoundBlaster16::beginPlayback()+0x86>	10004dec: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004df0:	68 ff 00 00 00       	push   0xff
10004df5:	68 2c 02 00 00       	push   0x22c
10004dfa:	53                   	push   ebx
10004dfb:	e8 fc ff ff ff       	call   10004dfc <SoundBlaster16::beginPlayback()+0x96>	10004dfc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e00:	83 c4 24             	add    esp,0x24
10004e03:	6a 0f                	push   0xf
10004e05:	68 2c 02 00 00       	push   0x22c
10004e0a:	53                   	push   ebx
10004e0b:	e8 fc ff ff ff       	call   10004e0c <SoundBlaster16::beginPlayback()+0xa6>	10004e0c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e10:	83 c4 0c             	add    esp,0xc
10004e13:	e9 c7 00 00 00       	jmp    10004edf <SoundBlaster16::beginPlayback()+0x179>
10004e18:	83 ff 02             	cmp    edi,0x2
10004e1b:	74 05                	je     10004e22 <SoundBlaster16::beginPlayback()+0xbc>
10004e1d:	bf 01 00 00 00       	mov    edi,0x1
10004e22:	0f af bb e0 01 00 00 	imul   edi,DWORD PTR [ebx+0x1e0]
10004e29:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10004e2e:	99                   	cdq    
10004e2f:	f7 ff                	idiv   edi
10004e31:	89 04 24             	mov    DWORD PTR [esp],eax
10004e34:	6a 40                	push   0x40
10004e36:	68 2c 02 00 00       	push   0x22c
10004e3b:	53                   	push   ebx
10004e3c:	e8 fc ff ff ff       	call   10004e3d <SoundBlaster16::beginPlayback()+0xd7>	10004e3d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e41:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10004e46:	50                   	push   eax
10004e47:	68 2c 02 00 00       	push   0x22c
10004e4c:	53                   	push   ebx
10004e4d:	e8 fc ff ff ff       	call   10004e4e <SoundBlaster16::beginPlayback()+0xe8>	10004e4e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e52:	83 c4 18             	add    esp,0x18
10004e55:	31 c0                	xor    eax,eax
10004e57:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004e5e:	0f 95 c0             	setne  al
10004e61:	48                   	dec    eax
10004e62:	83 e0 f0             	and    eax,0xfffffff0
10004e65:	05 c0 00 00 00       	add    eax,0xc0
10004e6a:	50                   	push   eax
10004e6b:	68 2c 02 00 00       	push   0x22c
10004e70:	53                   	push   ebx
10004e71:	e8 fc ff ff ff       	call   10004e72 <SoundBlaster16::beginPlayback()+0x10c>	10004e72: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e76:	56                   	push   esi
10004e77:	68 2c 02 00 00       	push   0x22c
10004e7c:	53                   	push   ebx
10004e7d:	e8 fc ff ff ff       	call   10004e7e <SoundBlaster16::beginPlayback()+0x118>	10004e7e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e82:	68 ff 00 00 00       	push   0xff
10004e87:	68 2c 02 00 00       	push   0x22c
10004e8c:	53                   	push   ebx
10004e8d:	e8 fc ff ff ff       	call   10004e8e <SoundBlaster16::beginPlayback()+0x128>	10004e8e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e92:	83 c4 24             	add    esp,0x24
10004e95:	6a 1f                	push   0x1f
10004e97:	68 2c 02 00 00       	push   0x22c
10004e9c:	53                   	push   ebx
10004e9d:	e8 fc ff ff ff       	call   10004e9e <SoundBlaster16::beginPlayback()+0x138>	10004e9e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ea2:	6a 48                	push   0x48
10004ea4:	68 2c 02 00 00       	push   0x22c
10004ea9:	53                   	push   ebx
10004eaa:	e8 fc ff ff ff       	call   10004eab <SoundBlaster16::beginPlayback()+0x145>	10004eab: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004eaf:	68 ff 00 00 00       	push   0xff
10004eb4:	68 2c 02 00 00       	push   0x22c
10004eb9:	53                   	push   ebx
10004eba:	e8 fc ff ff ff       	call   10004ebb <SoundBlaster16::beginPlayback()+0x155>	10004ebb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ebf:	83 c4 24             	add    esp,0x24
10004ec2:	6a 1f                	push   0x1f
10004ec4:	68 2c 02 00 00       	push   0x22c
10004ec9:	53                   	push   ebx
10004eca:	e8 fc ff ff ff       	call   10004ecb <SoundBlaster16::beginPlayback()+0x165>	10004ecb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ecf:	6a 1c                	push   0x1c
10004ed1:	68 2c 02 00 00       	push   0x22c
10004ed6:	53                   	push   ebx
10004ed7:	e8 fc ff ff ff       	call   10004ed8 <SoundBlaster16::beginPlayback()+0x172>	10004ed8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004edc:	83 c4 18             	add    esp,0x18
10004edf:	58                   	pop    eax
10004ee0:	5b                   	pop    ebx
10004ee1:	5e                   	pop    esi
10004ee2:	5f                   	pop    edi
10004ee3:	c3                   	ret    

10004ee4 <SoundBlaster16::stopPlayback()>:
10004ee4:	6a 00                	push   0x0
10004ee6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10004eea:	e8 fc ff ff ff       	call   10004eeb <SoundBlaster16::stopPlayback()+0x7>	10004eeb: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004eef:	58                   	pop    eax
10004ef0:	5a                   	pop    edx
10004ef1:	c3                   	ret    

10004ef2 <SoundBlaster16::open(int, int, void*)>:
10004ef2:	31 c0                	xor    eax,eax
10004ef4:	c3                   	ret    
10004ef5:	90                   	nop

10004ef6 <SoundBlaster16::_open(int, int, void*)>:
10004ef6:	56                   	push   esi
10004ef7:	be 25 02 00 00       	mov    esi,0x225
10004efc:	53                   	push   ebx
10004efd:	83 ec 14             	sub    esp,0x14
10004f00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004f04:	68 80 00 00 00       	push   0x80
10004f09:	68 24 02 00 00       	push   0x224
10004f0e:	53                   	push   ebx
10004f0f:	e8 fc ff ff ff       	call   10004f10 <SoundBlaster16::_open(int, int, void*)+0x1a>	10004f10: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f14:	89 f2                	mov    edx,esi
10004f16:	ec                   	in     al,dx
10004f17:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
10004f1b:	68 80 00 00 00       	push   0x80
10004f20:	68 24 02 00 00       	push   0x224
10004f25:	53                   	push   ebx
10004f26:	e8 fc ff ff ff       	call   10004f27 <SoundBlaster16::_open(int, int, void*)+0x31>	10004f27: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f2b:	83 c4 18             	add    esp,0x18
10004f2e:	31 c0                	xor    eax,eax
10004f30:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10004f35:	0f 95 c0             	setne  al
10004f38:	40                   	inc    eax
10004f39:	50                   	push   eax
10004f3a:	68 25 02 00 00       	push   0x225
10004f3f:	53                   	push   ebx
10004f40:	e8 fc ff ff ff       	call   10004f41 <SoundBlaster16::_open(int, int, void*)+0x4b>	10004f41: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f45:	68 80 00 00 00       	push   0x80
10004f4a:	68 24 02 00 00       	push   0x224
10004f4f:	53                   	push   ebx
10004f50:	e8 fc ff ff ff       	call   10004f51 <SoundBlaster16::_open(int, int, void*)+0x5b>	10004f51: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f55:	89 f2                	mov    edx,esi
10004f57:	ec                   	in     al,dx
10004f58:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
10004f5c:	83 c4 18             	add    esp,0x18
10004f5f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10004f63:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10004f67:	75 51                	jne    10004fba <SoundBlaster16::_open(int, int, void*)+0xc4>
10004f69:	68 81 00 00 00       	push   0x81
10004f6e:	68 24 02 00 00       	push   0x224
10004f73:	53                   	push   ebx
10004f74:	e8 fc ff ff ff       	call   10004f75 <SoundBlaster16::_open(int, int, void*)+0x7f>	10004f75: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f79:	89 f2                	mov    edx,esi
10004f7b:	ec                   	in     al,dx
10004f7c:	83 e0 0a             	and    eax,0xa
10004f7f:	3c 01                	cmp    al,0x1
10004f81:	19 c0                	sbb    eax,eax
10004f83:	83 e0 62             	and    eax,0x62
10004f86:	40                   	inc    eax
10004f87:	89 04 24             	mov    DWORD PTR [esp],eax
10004f8a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004f8c: R_386_32	isaDMAController
10004f90:	e8 fc ff ff ff       	call   10004f91 <SoundBlaster16::_open(int, int, void*)+0x9b>	10004f91: R_386_PC32	DMA::tryLockChannel(int)
10004f95:	83 c4 10             	add    esp,0x10
10004f98:	89 83 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],eax
10004f9e:	85 c0                	test   eax,eax
10004fa0:	75 3a                	jne    10004fdc <SoundBlaster16::_open(int, int, void*)+0xe6>
10004fa2:	83 ec 0c             	sub    esp,0xc
10004fa5:	68 00 00 00 00       	push   0x0	10004fa6: R_386_32	nodma
10004faa:	e8 fc ff ff ff       	call   10004fab <SoundBlaster16::_open(int, int, void*)+0xb5>	10004fab: R_386_PC32	Dbg::kprintf(char const*, ...)
10004faf:	83 c4 10             	add    esp,0x10
10004fb2:	83 c8 ff             	or     eax,0xffffffff
10004fb5:	e9 6e 02 00 00       	jmp    10005228 <SoundBlaster16::_open(int, int, void*)+0x332>
10004fba:	56                   	push   esi
10004fbb:	56                   	push   esi
10004fbc:	6a 01                	push   0x1
10004fbe:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004fc0: R_386_32	isaDMAController
10004fc4:	e8 fc ff ff ff       	call   10004fc5 <SoundBlaster16::_open(int, int, void*)+0xcf>	10004fc5: R_386_PC32	DMA::tryLockChannel(int)
10004fc9:	83 c4 10             	add    esp,0x10
10004fcc:	89 83 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],eax
10004fd2:	85 c0                	test   eax,eax
10004fd4:	75 06                	jne    10004fdc <SoundBlaster16::_open(int, int, void*)+0xe6>
10004fd6:	51                   	push   ecx
10004fd7:	51                   	push   ecx
10004fd8:	6a 03                	push   0x3
10004fda:	eb ae                	jmp    10004f8a <SoundBlaster16::_open(int, int, void*)+0x94>
10004fdc:	83 ec 0c             	sub    esp,0xc
10004fdf:	68 e3 69 00 10       	push   0x100069e3	10004fe0: R_386_32	.text
10004fe4:	e8 fc ff ff ff       	call   10004fe5 <SoundBlaster16::_open(int, int, void*)+0xef>	10004fe5: R_386_PC32	Dbg::kprintf(char const*, ...)
10004fe9:	58                   	pop    eax
10004fea:	5a                   	pop    edx
10004feb:	6a 05                	push   0x5
10004fed:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004fef: R_386_32	isaDMAController
10004ff3:	e8 fc ff ff ff       	call   10004ff4 <SoundBlaster16::_open(int, int, void*)+0xfe>	10004ff4: R_386_PC32	DMA::tryLockChannel(int)
10004ff8:	83 c4 10             	add    esp,0x10
10004ffb:	89 83 ec 01 00 00    	mov    DWORD PTR [ebx+0x1ec],eax
10005001:	85 c0                	test   eax,eax
10005003:	75 10                	jne    10005015 <SoundBlaster16::_open(int, int, void*)+0x11f>
10005005:	83 ec 0c             	sub    esp,0xc
10005008:	68 f5 69 00 10       	push   0x100069f5	10005009: R_386_32	.text
1000500d:	e8 fc ff ff ff       	call   1000500e <SoundBlaster16::_open(int, int, void*)+0x118>	1000500e: R_386_PC32	KePanic(char const*)
10005012:	83 c4 10             	add    esp,0x10
10005015:	50                   	push   eax
10005016:	50                   	push   eax
10005017:	68 00 20 00 00       	push   0x2000
1000501c:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005022:	e8 fc ff ff ff       	call   10005023 <SoundBlaster16::_open(int, int, void*)+0x12d>	10005023: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
10005027:	58                   	pop    eax
10005028:	5a                   	pop    edx
10005029:	6a 59                	push   0x59
1000502b:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005031:	e8 fc ff ff ff       	call   10005032 <SoundBlaster16::_open(int, int, void*)+0x13c>	10005032: R_386_PC32	DMAChannel::setMode(unsigned char)
10005036:	59                   	pop    ecx
10005037:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000503d:	e8 fc ff ff ff       	call   1000503e <SoundBlaster16::_open(int, int, void*)+0x148>	1000503e: R_386_PC32	DMAChannel::start()
10005042:	5e                   	pop    esi
10005043:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005049:	e8 fc ff ff ff       	call   1000504a <SoundBlaster16::_open(int, int, void*)+0x154>	1000504a: R_386_PC32	DMAChannel::getAddress()
1000504e:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
10005054:	c7 04 24 0e 6a 00 10 	mov    DWORD PTR [esp],0x10006a0e	10005057: R_386_32	.text
1000505b:	e8 fc ff ff ff       	call   1000505c <SoundBlaster16::_open(int, int, void*)+0x166>	1000505c: R_386_PC32	Dbg::kprintf(char const*, ...)
10005060:	58                   	pop    eax
10005061:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005067:	e8 fc ff ff ff       	call   10005068 <SoundBlaster16::_open(int, int, void*)+0x172>	10005068: R_386_PC32	DMAChannel::getAddress()
1000506c:	5a                   	pop    edx
1000506d:	59                   	pop    ecx
1000506e:	50                   	push   eax
1000506f:	68 24 6a 00 10       	push   0x10006a24	10005070: R_386_32	.text
10005074:	e8 fc ff ff ff       	call   10005075 <SoundBlaster16::_open(int, int, void*)+0x17f>	10005075: R_386_PC32	Dbg::kprintf(char const*, ...)
10005079:	5e                   	pop    esi
1000507a:	58                   	pop    eax
1000507b:	ff b3 f4 01 00 00    	push   DWORD PTR [ebx+0x1f4]
10005081:	68 24 6a 00 10       	push   0x10006a24	10005082: R_386_32	.text
10005086:	e8 fc ff ff ff       	call   10005087 <SoundBlaster16::_open(int, int, void*)+0x191>	10005087: R_386_PC32	Dbg::kprintf(char const*, ...)
1000508b:	58                   	pop    eax
1000508c:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005092:	e8 fc ff ff ff       	call   10005093 <SoundBlaster16::_open(int, int, void*)+0x19d>	10005093: R_386_PC32	DMAChannel::getChannelNum()
10005097:	5a                   	pop    edx
10005098:	59                   	pop    ecx
10005099:	50                   	push   eax
1000509a:	68 55 6a 00 10       	push   0x10006a55	1000509b: R_386_32	.text
1000509f:	e8 fc ff ff ff       	call   100050a0 <SoundBlaster16::_open(int, int, void*)+0x1aa>	100050a0: R_386_PC32	Dbg::kprintf(char const*, ...)
100050a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
100050a7:	e8 fc ff ff ff       	call   100050a8 <SoundBlaster16::_open(int, int, void*)+0x1b2>	100050a8: R_386_PC32	SoundBlaster16::resetDSP()
100050ac:	5e                   	pop    esi
100050ad:	58                   	pop    eax
100050ae:	6a 01                	push   0x1
100050b0:	53                   	push   ebx
100050b1:	e8 fc ff ff ff       	call   100050b2 <SoundBlaster16::_open(int, int, void*)+0x1bc>	100050b2: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100050b6:	83 c4 10             	add    esp,0x10
100050b9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
100050bd:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
100050c1:	75 6f                	jne    10005132 <SoundBlaster16::_open(int, int, void*)+0x23c>
100050c3:	50                   	push   eax
100050c4:	68 80 00 00 00       	push   0x80
100050c9:	68 24 02 00 00       	push   0x224
100050ce:	53                   	push   ebx
100050cf:	e8 fc ff ff ff       	call   100050d0 <SoundBlaster16::_open(int, int, void*)+0x1da>	100050d0: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100050d4:	ba 25 02 00 00       	mov    edx,0x225
100050d9:	ec                   	in     al,dx
100050da:	83 c4 10             	add    esp,0x10
100050dd:	3c 01                	cmp    al,0x1
100050df:	75 0f                	jne    100050f0 <SoundBlaster16::_open(int, int, void*)+0x1fa>
100050e1:	83 ec 0c             	sub    esp,0xc
100050e4:	53                   	push   ebx
100050e5:	6a 01                	push   0x1
100050e7:	68 00 00 00 00       	push   0x0	100050e8: R_386_32	sb16Handler(regs*, void*)
100050ec:	6a 02                	push   0x2
100050ee:	eb 6f                	jmp    1000515f <SoundBlaster16::_open(int, int, void*)+0x269>
100050f0:	3c 02                	cmp    al,0x2
100050f2:	75 06                	jne    100050fa <SoundBlaster16::_open(int, int, void*)+0x204>
100050f4:	83 ec 0c             	sub    esp,0xc
100050f7:	53                   	push   ebx
100050f8:	eb 5c                	jmp    10005156 <SoundBlaster16::_open(int, int, void*)+0x260>
100050fa:	3c 04                	cmp    al,0x4
100050fc:	75 0f                	jne    1000510d <SoundBlaster16::_open(int, int, void*)+0x217>
100050fe:	83 ec 0c             	sub    esp,0xc
10005101:	53                   	push   ebx
10005102:	6a 01                	push   0x1
10005104:	68 00 00 00 00       	push   0x0	10005105: R_386_32	sb16Handler(regs*, void*)
10005109:	6a 07                	push   0x7
1000510b:	eb 52                	jmp    1000515f <SoundBlaster16::_open(int, int, void*)+0x269>
1000510d:	3c 08                	cmp    al,0x8
1000510f:	75 0f                	jne    10005120 <SoundBlaster16::_open(int, int, void*)+0x22a>
10005111:	83 ec 0c             	sub    esp,0xc
10005114:	53                   	push   ebx
10005115:	6a 01                	push   0x1
10005117:	68 00 00 00 00       	push   0x0	10005118: R_386_32	sb16Handler(regs*, void*)
1000511c:	6a 0a                	push   0xa
1000511e:	eb 3f                	jmp    1000515f <SoundBlaster16::_open(int, int, void*)+0x269>
10005120:	83 ec 0c             	sub    esp,0xc
10005123:	68 00 00 00 00       	push   0x0	10005124: R_386_32	noirq
10005128:	e8 fc ff ff ff       	call   10005129 <SoundBlaster16::_open(int, int, void*)+0x233>	10005129: R_386_PC32	KePanic(char const*)
1000512d:	83 c4 10             	add    esp,0x10
10005130:	eb 36                	jmp    10005168 <SoundBlaster16::_open(int, int, void*)+0x272>
10005132:	56                   	push   esi
10005133:	68 80 00 00 00       	push   0x80
10005138:	68 24 02 00 00       	push   0x224
1000513d:	53                   	push   ebx
1000513e:	e8 fc ff ff ff       	call   1000513f <SoundBlaster16::_open(int, int, void*)+0x249>	1000513f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005143:	83 c4 0c             	add    esp,0xc
10005146:	6a 02                	push   0x2
10005148:	68 25 02 00 00       	push   0x225
1000514d:	53                   	push   ebx
1000514e:	e8 fc ff ff ff       	call   1000514f <SoundBlaster16::_open(int, int, void*)+0x259>	1000514f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005153:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005156:	6a 01                	push   0x1
10005158:	68 00 00 00 00       	push   0x0	10005159: R_386_32	sb16Handler(regs*, void*)
1000515d:	6a 05                	push   0x5
1000515f:	53                   	push   ebx
10005160:	e8 fc ff ff ff       	call   10005161 <SoundBlaster16::_open(int, int, void*)+0x26b>	10005161: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10005165:	83 c4 20             	add    esp,0x20
10005168:	56                   	push   esi
10005169:	68 81 00 00 00       	push   0x81
1000516e:	68 24 02 00 00       	push   0x224
10005173:	53                   	push   ebx
10005174:	e8 fc ff ff ff       	call   10005175 <SoundBlaster16::_open(int, int, void*)+0x27f>	10005175: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005179:	ba 25 02 00 00       	mov    edx,0x225
1000517e:	ec                   	in     al,dx
1000517f:	89 c6                	mov    esi,eax
10005181:	58                   	pop    eax
10005182:	89 f0                	mov    eax,esi
10005184:	5a                   	pop    edx
10005185:	0f b6 c0             	movzx  eax,al
10005188:	50                   	push   eax
10005189:	68 87 6a 00 10       	push   0x10006a87	1000518a: R_386_32	.text
1000518e:	e8 fc ff ff ff       	call   1000518f <SoundBlaster16::_open(int, int, void*)+0x299>	1000518f: R_386_PC32	Dbg::kprintf(char const*, ...)
10005193:	83 c4 0c             	add    esp,0xc
10005196:	68 81 00 00 00       	push   0x81
1000519b:	68 24 02 00 00       	push   0x224
100051a0:	53                   	push   ebx
100051a1:	e8 fc ff ff ff       	call   100051a2 <SoundBlaster16::_open(int, int, void*)+0x2ac>	100051a2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100051a6:	59                   	pop    ecx
100051a7:	ff b3 e8 01 00 00    	push   DWORD PTR [ebx+0x1e8]
100051ad:	e8 fc ff ff ff       	call   100051ae <SoundBlaster16::_open(int, int, void*)+0x2b8>	100051ae: R_386_PC32	DMAChannel::getChannelNum()
100051b2:	83 c4 10             	add    esp,0x10
100051b5:	48                   	dec    eax
100051b6:	75 0c                	jne    100051c4 <SoundBlaster16::_open(int, int, void*)+0x2ce>
100051b8:	81 e6 f0 00 00 00    	and    esi,0xf0
100051be:	51                   	push   ecx
100051bf:	83 ce 02             	or     esi,0x2
100051c2:	eb 20                	jmp    100051e4 <SoundBlaster16::_open(int, int, void*)+0x2ee>
100051c4:	83 ec 0c             	sub    esp,0xc
100051c7:	ff b3 e8 01 00 00    	push   DWORD PTR [ebx+0x1e8]
100051cd:	e8 fc ff ff ff       	call   100051ce <SoundBlaster16::_open(int, int, void*)+0x2d8>	100051ce: R_386_PC32	DMAChannel::getChannelNum()
100051d2:	83 c4 10             	add    esp,0x10
100051d5:	83 f8 03             	cmp    eax,0x3
100051d8:	75 18                	jne    100051f2 <SoundBlaster16::_open(int, int, void*)+0x2fc>
100051da:	81 e6 f0 00 00 00    	and    esi,0xf0
100051e0:	52                   	push   edx
100051e1:	83 ce 08             	or     esi,0x8
100051e4:	56                   	push   esi
100051e5:	68 25 02 00 00       	push   0x225
100051ea:	53                   	push   ebx
100051eb:	e8 fc ff ff ff       	call   100051ec <SoundBlaster16::_open(int, int, void*)+0x2f6>	100051ec: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100051f0:	eb 0d                	jmp    100051ff <SoundBlaster16::_open(int, int, void*)+0x309>
100051f2:	83 ec 0c             	sub    esp,0xc
100051f5:	68 00 00 00 00       	push   0x0	100051f6: R_386_32	baddma
100051fa:	e8 fc ff ff ff       	call   100051fb <SoundBlaster16::_open(int, int, void*)+0x305>	100051fb: R_386_PC32	KePanic(char const*)
100051ff:	83 c4 10             	add    esp,0x10
10005202:	50                   	push   eax
10005203:	6a 22                	push   0x22
10005205:	68 24 02 00 00       	push   0x224
1000520a:	53                   	push   ebx
1000520b:	e8 fc ff ff ff       	call   1000520c <SoundBlaster16::_open(int, int, void*)+0x316>	1000520c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005210:	83 c4 0c             	add    esp,0xc
10005213:	68 ff 00 00 00       	push   0xff
10005218:	68 24 02 00 00       	push   0x224
1000521d:	53                   	push   ebx
1000521e:	e8 fc ff ff ff       	call   1000521f <SoundBlaster16::_open(int, int, void*)+0x329>	1000521f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005223:	83 c4 10             	add    esp,0x10
10005226:	31 c0                	xor    eax,eax
10005228:	83 c4 14             	add    esp,0x14
1000522b:	5b                   	pop    ebx
1000522c:	5e                   	pop    esi
1000522d:	c3                   	ret    

1000522e <SoundBlaster16::onInterrupt()>:
1000522e:	57                   	push   edi
1000522f:	56                   	push   esi
10005230:	53                   	push   ebx
10005231:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10005235:	8b bb dc 01 00 00    	mov    edi,DWORD PTR [ebx+0x1dc]
1000523b:	83 ff 10             	cmp    edi,0x10
1000523e:	0f 85 e8 00 00 00    	jne    1000532c <SoundBlaster16::onInterrupt()+0xfe>
10005244:	83 ec 0c             	sub    esp,0xc
10005247:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000524d:	e8 fc ff ff ff       	call   1000524e <SoundBlaster16::onInterrupt()+0x20>	1000524e: R_386_PC32	DMAChannel::getAddress()
10005252:	83 c4 0c             	add    esp,0xc
10005255:	50                   	push   eax
10005256:	ff b3 f4 01 00 00    	push   DWORD PTR [ebx+0x1f4]
1000525c:	68 aa 6a 00 10       	push   0x10006aaa	1000525d: R_386_32	.text
10005261:	e8 fc ff ff ff       	call   10005262 <SoundBlaster16::onInterrupt()+0x34>	10005262: R_386_PC32	Dbg::kprintf(char const*, ...)
10005266:	80 3d 9f 6d 00 10 01 	cmp    BYTE PTR ds:0x10006d9f,0x1	10005268: R_386_32	.data
1000526d:	5e                   	pop    esi
1000526e:	58                   	pop    eax
1000526f:	19 c0                	sbb    eax,eax
10005271:	25 00 20 00 00       	and    eax,0x2000
10005276:	03 83 f4 01 00 00    	add    eax,DWORD PTR [ebx+0x1f4]
1000527c:	89 c6                	mov    esi,eax
1000527e:	50                   	push   eax
1000527f:	68 d4 6a 00 10       	push   0x10006ad4	10005280: R_386_32	.text
10005284:	e8 fc ff ff ff       	call   10005285 <SoundBlaster16::onInterrupt()+0x57>	10005285: R_386_PC32	Dbg::kprintf(char const*, ...)
10005289:	83 c4 0c             	add    esp,0xc
1000528c:	56                   	push   esi
1000528d:	68 00 10 00 00       	push   0x1000
10005292:	53                   	push   ebx
10005293:	e8 fc ff ff ff       	call   10005294 <SoundBlaster16::onInterrupt()+0x66>	10005294: R_386_PC32	SoundCard::getSamples16(int, short*)
10005298:	83 c4 10             	add    esp,0x10
1000529b:	89 c6                	mov    esi,eax
1000529d:	85 c0                	test   eax,eax
1000529f:	75 19                	jne    100052ba <SoundBlaster16::onInterrupt()+0x8c>
100052a1:	83 ec 0c             	sub    esp,0xc
100052a4:	68 eb 6a 00 10       	push   0x10006aeb	100052a5: R_386_32	.text
100052a9:	e8 fc ff ff ff       	call   100052aa <SoundBlaster16::onInterrupt()+0x7c>	100052aa: R_386_PC32	Dbg::kprintf(char const*, ...)
100052ae:	5a                   	pop    edx
100052af:	59                   	pop    ecx
100052b0:	6a 00                	push   0x0
100052b2:	53                   	push   ebx
100052b3:	e8 fc ff ff ff       	call   100052b4 <SoundBlaster16::onInterrupt()+0x86>	100052b4: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100052b8:	eb 6f                	jmp    10005329 <SoundBlaster16::onInterrupt()+0xfb>
100052ba:	3d ff 0f 00 00       	cmp    eax,0xfff
100052bf:	7f 6b                	jg     1000532c <SoundBlaster16::onInterrupt()+0xfe>
100052c1:	83 ec 0c             	sub    esp,0xc
100052c4:	68 fb 6a 00 10       	push   0x10006afb	100052c5: R_386_32	.text
100052c9:	e8 fc ff ff ff       	call   100052ca <SoundBlaster16::onInterrupt()+0x9c>	100052ca: R_386_PC32	Dbg::kprintf(char const*, ...)
100052ce:	83 c4 0c             	add    esp,0xc
100052d1:	68 b0 00 00 00       	push   0xb0
100052d6:	68 2c 02 00 00       	push   0x22c
100052db:	53                   	push   ebx
100052dc:	e8 fc ff ff ff       	call   100052dd <SoundBlaster16::onInterrupt()+0xaf>	100052dd: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052e1:	83 c4 10             	add    esp,0x10
100052e4:	83 bb e4 01 00 00 02 	cmp    DWORD PTR [ebx+0x1e4],0x2
100052eb:	75 05                	jne    100052f2 <SoundBlaster16::onInterrupt()+0xc4>
100052ed:	bf 30 00 00 00       	mov    edi,0x30
100052f2:	50                   	push   eax
100052f3:	57                   	push   edi
100052f4:	68 2c 02 00 00       	push   0x22c
100052f9:	53                   	push   ebx
100052fa:	e8 fc ff ff ff       	call   100052fb <SoundBlaster16::onInterrupt()+0xcd>	100052fb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052ff:	83 c4 0c             	add    esp,0xc
10005302:	8d 46 ff             	lea    eax,[esi-0x1]
10005305:	0f b6 c0             	movzx  eax,al
10005308:	50                   	push   eax
10005309:	68 2c 02 00 00       	push   0x22c
1000530e:	53                   	push   ebx
1000530f:	e8 fc ff ff ff       	call   10005310 <SoundBlaster16::onInterrupt()+0xe2>	10005310: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005314:	83 c4 0c             	add    esp,0xc
10005317:	8d 46 ff             	lea    eax,[esi-0x1]
1000531a:	0f b6 f4             	movzx  esi,ah
1000531d:	56                   	push   esi
1000531e:	68 2c 02 00 00       	push   0x22c
10005323:	53                   	push   ebx
10005324:	e8 fc ff ff ff       	call   10005325 <SoundBlaster16::onInterrupt()+0xf7>	10005325: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005329:	83 c4 10             	add    esp,0x10
1000532c:	5b                   	pop    ebx
1000532d:	80 35 9f 6d 00 10 01 	xor    BYTE PTR ds:0x10006d9f,0x1	1000532f: R_386_32	.data
10005334:	5e                   	pop    esi
10005335:	5f                   	pop    edi
10005336:	c3                   	ret    
10005337:	90                   	nop

10005338 <SoundBlaster16::close(int, int, void*)>:
10005338:	83 ec 0c             	sub    esp,0xc
1000533b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000533f:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10005345:	85 c0                	test   eax,eax
10005347:	74 11                	je     1000535a <SoundBlaster16::close(int, int, void*)+0x22>
10005349:	52                   	push   edx
1000534a:	52                   	push   edx
1000534b:	50                   	push   eax
1000534c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000534e: R_386_32	isaDMAController
10005352:	e8 fc ff ff ff       	call   10005353 <SoundBlaster16::close(int, int, void*)+0x1b>	10005353: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10005357:	83 c4 10             	add    esp,0x10
1000535a:	31 c0                	xor    eax,eax
1000535c:	83 c4 0c             	add    esp,0xc
1000535f:	c3                   	ret    

10005360 <ISA::~ISA()>:
10005360:	55                   	push   ebp
10005361:	89 e5                	mov    ebp,esp
10005363:	83 ec 08             	sub    esp,0x8
10005366:	ba 08 00 00 00       	mov    edx,0x8	10005367: R_386_32	vtable for ISA
1000536b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000536e:	89 10                	mov    DWORD PTR [eax],edx
10005370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005373:	83 ec 0c             	sub    esp,0xc
10005376:	50                   	push   eax
10005377:	e8 fc ff ff ff       	call   10005378 <ISA::~ISA()+0x18>	10005378: R_386_PC32	Bus::~Bus()
1000537c:	83 c4 10             	add    esp,0x10
1000537f:	90                   	nop
10005380:	c9                   	leave  
10005381:	c3                   	ret    

10005382 <ISA::~ISA()>:
10005382:	55                   	push   ebp
10005383:	89 e5                	mov    ebp,esp
10005385:	83 ec 08             	sub    esp,0x8
10005388:	83 ec 0c             	sub    esp,0xc
1000538b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000538e:	e8 fc ff ff ff       	call   1000538f <ISA::~ISA()+0xd>	1000538f: R_386_PC32	ISA::~ISA()
10005393:	83 c4 10             	add    esp,0x10
10005396:	83 ec 08             	sub    esp,0x8
10005399:	68 58 01 00 00       	push   0x158
1000539e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100053a1:	e8 fc ff ff ff       	call   100053a2 <ISA::~ISA()+0x20>	100053a2: R_386_PC32	operator delete(void*, unsigned long)
100053a6:	83 c4 10             	add    esp,0x10
100053a9:	c9                   	leave  
100053aa:	c3                   	ret    
100053ab:	90                   	nop

100053ac <Floppy::~Floppy()>:
100053ac:	55                   	push   ebp
100053ad:	89 e5                	mov    ebp,esp
100053af:	83 ec 08             	sub    esp,0x8
100053b2:	ba 08 00 00 00       	mov    edx,0x8	100053b3: R_386_32	vtable for Floppy
100053b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100053ba:	89 10                	mov    DWORD PTR [eax],edx
100053bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100053bf:	83 ec 0c             	sub    esp,0xc
100053c2:	50                   	push   eax
100053c3:	e8 fc ff ff ff       	call   100053c4 <Floppy::~Floppy()+0x18>	100053c4: R_386_PC32	HardDiskController::~HardDiskController()
100053c8:	83 c4 10             	add    esp,0x10
100053cb:	90                   	nop
100053cc:	c9                   	leave  
100053cd:	c3                   	ret    

100053ce <Floppy::~Floppy()>:
100053ce:	55                   	push   ebp
100053cf:	89 e5                	mov    ebp,esp
100053d1:	83 ec 08             	sub    esp,0x8
100053d4:	83 ec 0c             	sub    esp,0xc
100053d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100053da:	e8 fc ff ff ff       	call   100053db <Floppy::~Floppy()+0xd>	100053db: R_386_PC32	Floppy::~Floppy()
100053df:	83 c4 10             	add    esp,0x10
100053e2:	83 ec 08             	sub    esp,0x8
100053e5:	68 b8 01 00 00       	push   0x1b8
100053ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100053ed:	e8 fc ff ff ff       	call   100053ee <Floppy::~Floppy()+0x20>	100053ee: R_386_PC32	operator delete(void*, unsigned long)
100053f2:	83 c4 10             	add    esp,0x10
100053f5:	c9                   	leave  
100053f6:	c3                   	ret    
100053f7:	90                   	nop

100053f8 <JoystickHost::JoystickHost()>:
100053f8:	55                   	push   ebp
100053f9:	89 e5                	mov    ebp,esp
100053fb:	ba 08 00 00 00       	mov    edx,0x8	100053fc: R_386_32	vtable for JoystickHost
10005400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005403:	89 10                	mov    DWORD PTR [eax],edx
10005405:	90                   	nop
10005406:	5d                   	pop    ebp
10005407:	c3                   	ret    

10005408 <DMA::~DMA()>:
10005408:	55                   	push   ebp
10005409:	89 e5                	mov    ebp,esp
1000540b:	83 ec 08             	sub    esp,0x8
1000540e:	ba 08 00 00 00       	mov    edx,0x8	1000540f: R_386_32	vtable for DMA
10005413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005416:	89 10                	mov    DWORD PTR [eax],edx
10005418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000541b:	83 ec 0c             	sub    esp,0xc
1000541e:	50                   	push   eax
1000541f:	e8 fc ff ff ff       	call   10005420 <DMA::~DMA()+0x18>	10005420: R_386_PC32	Device::~Device()
10005424:	83 c4 10             	add    esp,0x10
10005427:	90                   	nop
10005428:	c9                   	leave  
10005429:	c3                   	ret    

1000542a <DMA::~DMA()>:
1000542a:	55                   	push   ebp
1000542b:	89 e5                	mov    ebp,esp
1000542d:	83 ec 08             	sub    esp,0x8
10005430:	83 ec 0c             	sub    esp,0xc
10005433:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005436:	e8 fc ff ff ff       	call   10005437 <DMA::~DMA()+0xd>	10005437: R_386_PC32	DMA::~DMA()
1000543b:	83 c4 10             	add    esp,0x10
1000543e:	83 ec 08             	sub    esp,0x8
10005441:	68 5c 01 00 00       	push   0x15c
10005446:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005449:	e8 fc ff ff ff       	call   1000544a <DMA::~DMA()+0x20>	1000544a: R_386_PC32	operator delete(void*, unsigned long)
1000544e:	83 c4 10             	add    esp,0x10
10005451:	c9                   	leave  
10005452:	c3                   	ret    
10005453:	90                   	nop

10005454 <PS2::~PS2()>:
10005454:	55                   	push   ebp
10005455:	89 e5                	mov    ebp,esp
10005457:	83 ec 08             	sub    esp,0x8
1000545a:	ba 08 00 00 00       	mov    edx,0x8	1000545b: R_386_32	vtable for PS2
1000545f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005462:	89 10                	mov    DWORD PTR [eax],edx
10005464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005467:	83 ec 0c             	sub    esp,0xc
1000546a:	50                   	push   eax
1000546b:	e8 fc ff ff ff       	call   1000546c <PS2::~PS2()+0x18>	1000546c: R_386_PC32	Bus::~Bus()
10005470:	83 c4 10             	add    esp,0x10
10005473:	90                   	nop
10005474:	c9                   	leave  
10005475:	c3                   	ret    

10005476 <PS2::~PS2()>:
10005476:	55                   	push   ebp
10005477:	89 e5                	mov    ebp,esp
10005479:	83 ec 08             	sub    esp,0x8
1000547c:	83 ec 0c             	sub    esp,0xc
1000547f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005482:	e8 fc ff ff ff       	call   10005483 <PS2::~PS2()+0xd>	10005483: R_386_PC32	PS2::~PS2()
10005487:	83 c4 10             	add    esp,0x10
1000548a:	83 ec 08             	sub    esp,0x8
1000548d:	68 60 01 00 00       	push   0x160
10005492:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005495:	e8 fc ff ff ff       	call   10005496 <PS2::~PS2()+0x20>	10005496: R_386_PC32	operator delete(void*, unsigned long)
1000549a:	83 c4 10             	add    esp,0x10
1000549d:	c9                   	leave  
1000549e:	c3                   	ret    
1000549f:	90                   	nop

100054a0 <PS2Mouse::~PS2Mouse()>:
100054a0:	55                   	push   ebp
100054a1:	89 e5                	mov    ebp,esp
100054a3:	83 ec 08             	sub    esp,0x8
100054a6:	ba 08 00 00 00       	mov    edx,0x8	100054a7: R_386_32	vtable for PS2Mouse
100054ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054ae:	89 10                	mov    DWORD PTR [eax],edx
100054b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054b3:	83 ec 0c             	sub    esp,0xc
100054b6:	50                   	push   eax
100054b7:	e8 fc ff ff ff       	call   100054b8 <PS2Mouse::~PS2Mouse()+0x18>	100054b8: R_386_PC32	Mouse::~Mouse()
100054bc:	83 c4 10             	add    esp,0x10
100054bf:	90                   	nop
100054c0:	c9                   	leave  
100054c1:	c3                   	ret    

100054c2 <PS2Mouse::~PS2Mouse()>:
100054c2:	55                   	push   ebp
100054c3:	89 e5                	mov    ebp,esp
100054c5:	83 ec 08             	sub    esp,0x8
100054c8:	83 ec 0c             	sub    esp,0xc
100054cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054ce:	e8 fc ff ff ff       	call   100054cf <PS2Mouse::~PS2Mouse()+0xd>	100054cf: R_386_PC32	PS2Mouse::~PS2Mouse()
100054d3:	83 c4 10             	add    esp,0x10
100054d6:	83 ec 08             	sub    esp,0x8
100054d9:	68 68 01 00 00       	push   0x168
100054de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054e1:	e8 fc ff ff ff       	call   100054e2 <PS2Mouse::~PS2Mouse()+0x20>	100054e2: R_386_PC32	operator delete(void*, unsigned long)
100054e6:	83 c4 10             	add    esp,0x10
100054e9:	c9                   	leave  
100054ea:	c3                   	ret    
100054eb:	90                   	nop

100054ec <PS2Port::~PS2Port()>:
100054ec:	55                   	push   ebp
100054ed:	89 e5                	mov    ebp,esp
100054ef:	83 ec 08             	sub    esp,0x8
100054f2:	ba 08 00 00 00       	mov    edx,0x8	100054f3: R_386_32	vtable for PS2Port
100054f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054fa:	89 10                	mov    DWORD PTR [eax],edx
100054fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054ff:	83 ec 0c             	sub    esp,0xc
10005502:	50                   	push   eax
10005503:	e8 fc ff ff ff       	call   10005504 <PS2Port::~PS2Port()+0x18>	10005504: R_386_PC32	Bus::~Bus()
10005508:	83 c4 10             	add    esp,0x10
1000550b:	90                   	nop
1000550c:	c9                   	leave  
1000550d:	c3                   	ret    

1000550e <PS2Port::~PS2Port()>:
1000550e:	55                   	push   ebp
1000550f:	89 e5                	mov    ebp,esp
10005511:	83 ec 08             	sub    esp,0x8
10005514:	83 ec 0c             	sub    esp,0xc
10005517:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000551a:	e8 fc ff ff ff       	call   1000551b <PS2Port::~PS2Port()+0xd>	1000551b: R_386_PC32	PS2Port::~PS2Port()
1000551f:	83 c4 10             	add    esp,0x10
10005522:	83 ec 08             	sub    esp,0x8
10005525:	68 60 01 00 00       	push   0x160
1000552a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000552d:	e8 fc ff ff ff       	call   1000552e <PS2Port::~PS2Port()+0x20>	1000552e: R_386_PC32	operator delete(void*, unsigned long)
10005532:	83 c4 10             	add    esp,0x10
10005535:	c9                   	leave  
10005536:	c3                   	ret    
10005537:	90                   	nop

10005538 <SoundBlaster16::~SoundBlaster16()>:
10005538:	55                   	push   ebp
10005539:	89 e5                	mov    ebp,esp
1000553b:	83 ec 08             	sub    esp,0x8
1000553e:	ba 08 00 00 00       	mov    edx,0x8	1000553f: R_386_32	vtable for SoundBlaster16
10005543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005546:	89 10                	mov    DWORD PTR [eax],edx
10005548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000554b:	83 ec 0c             	sub    esp,0xc
1000554e:	50                   	push   eax
1000554f:	e8 fc ff ff ff       	call   10005550 <SoundBlaster16::~SoundBlaster16()+0x18>	10005550: R_386_PC32	SoundCard::~SoundCard()
10005554:	83 c4 10             	add    esp,0x10
10005557:	90                   	nop
10005558:	c9                   	leave  
10005559:	c3                   	ret    

1000555a <SoundBlaster16::~SoundBlaster16()>:
1000555a:	55                   	push   ebp
1000555b:	89 e5                	mov    ebp,esp
1000555d:	83 ec 08             	sub    esp,0x8
10005560:	83 ec 0c             	sub    esp,0xc
10005563:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005566:	e8 fc ff ff ff       	call   10005567 <SoundBlaster16::~SoundBlaster16()+0xd>	10005567: R_386_PC32	SoundBlaster16::~SoundBlaster16()
1000556b:	83 c4 10             	add    esp,0x10
1000556e:	83 ec 08             	sub    esp,0x8
10005571:	68 fc 01 00 00       	push   0x1fc
10005576:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005579:	e8 fc ff ff ff       	call   1000557a <SoundBlaster16::~SoundBlaster16()+0x20>	1000557a: R_386_PC32	operator delete(void*, unsigned long)
1000557e:	83 c4 10             	add    esp,0x10
10005581:	c9                   	leave  
10005582:	c3                   	ret    
10005583:	90                   	nop

10005584 <PHYS_RAM_TABLE_SIZE>:
10005584:	13 05 00 00                                         ....

10005588 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005588:	24 05 00 00                                         $...

1000558c <PHYS_RAM_TABLE>:
1000558c:	00 06 00 00                                         ....

10005590 <PHYS_DMA_MEMORY_1>:
10005590:	00 00 01 00                                         ....

10005594 <PHYS_PHYS_PAGE_BITMAP>:
10005594:	00 00 02 00                                         ....

10005598 <PHYS_VIRT_PAGE_BITMAP>:
10005598:	00 00 04 00                                         ....

1000559c <PHYS_DMA_MEMORY_2>:
1000559c:	00 00 06 00                                         ....

100055a0 <PHYS_ALLOCED_VIRT_PAGES>:
100055a0:	00 00 10 00                                         ....

100055a4 <PHYS_KRNL_PAGE_DIRECTORY>:
100055a4:	00 10 00 00                                         ....

100055a8 <VIRT_KERNEL_BASE>:
100055a8:	00 00 00 c0                                         ....

100055ac <VIRT_LOW_MEGS>:
100055ac:	00 00 00 c2                                         ....

100055b0 <VIRT_CPU_SPECIFIC>:
100055b0:	00 00 40 c2                                         ..@.

100055b4 <VIRT_RECURSIVE_SPOT_1>:
100055b4:	00 00 80 c2                                         ....

100055b8 <VIRT_RECURSIVE_SPOT_2>:
100055b8:	00 00 c0 c2                                         ....

100055bc <VIRT_DMA_MEMORY_1>:
100055bc:	00 00 01 c2                                         ....

100055c0 <SIZE_DMA_MEMORY_1>:
100055c0:	00 00 01 00                                         ....

100055c4 <VIRT_DMA_MEMORY_2>:
100055c4:	00 00 06 c2                                         ....

100055c8 <SIZE_DMA_MEMORY_2>:
100055c8:	00 00 02 00                                         ....

100055cc <VIRT_KRNL_PAGE_DIRECTORY>:
100055cc:	00 10 00 c2                                         ....

100055d0 <VIRT_PHYS_PAGE_BITMAP>:
100055d0:	00 00 02 c2                                         ....

100055d4 <SIZE_PHYS_PAGE_BITMAP>:
100055d4:	00 00 02 00                                         ....

100055d8 <VIRT_VIRT_PAGE_BITMAP>:
100055d8:	00 00 04 c2                                         ....

100055dc <SIZE_VIRT_PAGE_BITMAP>:
100055dc:	00 80 00 00                                         ....

100055e0 <VIRT_RAM_TABLE>:
100055e0:	00 06 00 c2                                         ....

100055e4 <VIRT_RAM_TABLE_SIZE>:
100055e4:	13 05 00 c2                                         ....

100055e8 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100055e8:	24 05 00 c2                                         $...

100055ec <SIZE_APP_STACK_USER>:
100055ec:	00 00 18 00                                         ....

100055f0 <SIZE_APP_STACK_KRNL>:
100055f0:	00 00 08 00                                         ....

100055f4 <SIZE_APP_STACK_TOTAL>:
100055f4:	00 00 20 00                                         .. .

100055f8 <VIRT_APP_DATA>:
100055f8:	00 00 00 10                                         ....

100055fc <VIRT_APP_STACK_USER_TOP>:
100055fc:	00 00 00 02                                         ....

10005600 <VIRT_APP_STACK_KRNL_TOP>:
10005600:	00 00 e8 01                                         ....

10005604 <VIRT_HEAP_MIN>:
10005604:	00 00 00 c8                                         ....

10005608 <VIRT_HEAP_MAX>:
10005608:	ff ff ff ef                                         ....

1000560c <VIRT_SBRK_MIN>:
1000560c:	00 00 00 f0                                         ....

10005610 <VIRT_SBRK_MAX>:
10005610:	00 00 c0 ff                                         ....

10005614 <VIRT_ALLOCED_VIRT_PAGES>:
10005614:	00 00 10 c2                                         ....

10005618 <VIRT_ACPI_DRIVER>:
10005618:	00 40 48 c2                                         .@H.

1000561c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000561c:	80 00 00 00                                         ....

10005620 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005620:	80 00 00 00 49 53 41 20 42 75 73 00 53 74 61 72     ....ISA Bus.Star
10005630:	74 69 6e 67 20 53 6f 75 6e 64 62 6c 61 73 74 65     ting Soundblaste
10005640:	72 20 64 72 69 76 65 72 2e 2e 2e 00 43 3a 2f 42     r driver....C:/B
10005650:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74     anana/System/set
10005660:	75 70 69 73 64 2e 6f 6e 65 00 53 74 61 72 74 69     upisd.one.Starti
10005670:	6e 67 20 67 61 6d 65 70 6f 72 74 20 64 72 69 76     ng gameport driv
10005680:	65 72 2e 2e 2e 00 53 74 61 72 74 69 6e 67 20 66     er....Starting f
10005690:	6c 6f 70 70 79 20 64 72 69 76 65 72 2e 2e 2e 00     loppy driver....
100056a0:	53 74 61 72 74 69 6e 67 20 50 53 2f 32 20 64 72     Starting PS/2 dr
100056b0:	69 76 65 72 2e 2e 2e 00 53 74 61 72 74 69 6e 67     iver....Starting
100056c0:	20 44 4d 41 20 64 72 69 76 65 72 2e 2e 2e 00 90      DMA driver.....

100056d0 <vtable for ISA>:
	...
	100056d8: R_386_32	ISA::~ISA()
	100056dc: R_386_32	ISA::~ISA()
	100056e0: R_386_32	ISA::open(int, int, void*)
	100056e4: R_386_32	ISA::close(int, int, void*)
	100056e8: R_386_32	Device::hibernate()
	100056ec: R_386_32	Device::wake()
	100056f0: R_386_32	ISA::detect()
	100056f4: R_386_32	Device::disableLegacy()
	100056f8: R_386_32	Device::powerSaving(PowerSavingLevel)

100056fc <TERMINAL_KEYBUFFER_IN_SIZE>:
100056fc:	80 00 00 00                                         ....

10005700 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005700:	80 00 00 00                                         ....

10005704 <PHYS_RAM_TABLE_SIZE>:
10005704:	13 05 00 00                                         ....

10005708 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005708:	24 05 00 00                                         $...

1000570c <PHYS_RAM_TABLE>:
1000570c:	00 06 00 00                                         ....

10005710 <PHYS_DMA_MEMORY_1>:
10005710:	00 00 01 00                                         ....

10005714 <PHYS_PHYS_PAGE_BITMAP>:
10005714:	00 00 02 00                                         ....

10005718 <PHYS_VIRT_PAGE_BITMAP>:
10005718:	00 00 04 00                                         ....

1000571c <PHYS_DMA_MEMORY_2>:
1000571c:	00 00 06 00                                         ....

10005720 <PHYS_ALLOCED_VIRT_PAGES>:
10005720:	00 00 10 00                                         ....

10005724 <PHYS_KRNL_PAGE_DIRECTORY>:
10005724:	00 10 00 00                                         ....

10005728 <VIRT_KERNEL_BASE>:
10005728:	00 00 00 c0                                         ....

1000572c <VIRT_LOW_MEGS>:
1000572c:	00 00 00 c2                                         ....

10005730 <VIRT_CPU_SPECIFIC>:
10005730:	00 00 40 c2                                         ..@.

10005734 <VIRT_RECURSIVE_SPOT_1>:
10005734:	00 00 80 c2                                         ....

10005738 <VIRT_RECURSIVE_SPOT_2>:
10005738:	00 00 c0 c2                                         ....

1000573c <VIRT_DMA_MEMORY_1>:
1000573c:	00 00 01 c2                                         ....

10005740 <SIZE_DMA_MEMORY_1>:
10005740:	00 00 01 00                                         ....

10005744 <VIRT_DMA_MEMORY_2>:
10005744:	00 00 06 c2                                         ....

10005748 <SIZE_DMA_MEMORY_2>:
10005748:	00 00 02 00                                         ....

1000574c <VIRT_KRNL_PAGE_DIRECTORY>:
1000574c:	00 10 00 c2                                         ....

10005750 <VIRT_PHYS_PAGE_BITMAP>:
10005750:	00 00 02 c2                                         ....

10005754 <SIZE_PHYS_PAGE_BITMAP>:
10005754:	00 00 02 00                                         ....

10005758 <VIRT_VIRT_PAGE_BITMAP>:
10005758:	00 00 04 c2                                         ....

1000575c <SIZE_VIRT_PAGE_BITMAP>:
1000575c:	00 80 00 00                                         ....

10005760 <VIRT_RAM_TABLE>:
10005760:	00 06 00 c2                                         ....

10005764 <VIRT_RAM_TABLE_SIZE>:
10005764:	13 05 00 c2                                         ....

10005768 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005768:	24 05 00 c2                                         $...

1000576c <SIZE_APP_STACK_USER>:
1000576c:	00 00 18 00                                         ....

10005770 <SIZE_APP_STACK_KRNL>:
10005770:	00 00 08 00                                         ....

10005774 <SIZE_APP_STACK_TOTAL>:
10005774:	00 00 20 00                                         .. .

10005778 <VIRT_APP_DATA>:
10005778:	00 00 00 10                                         ....

1000577c <VIRT_APP_STACK_USER_TOP>:
1000577c:	00 00 00 02                                         ....

10005780 <VIRT_APP_STACK_KRNL_TOP>:
10005780:	00 00 e8 01                                         ....

10005784 <VIRT_HEAP_MIN>:
10005784:	00 00 00 c8                                         ....

10005788 <VIRT_HEAP_MAX>:
10005788:	ff ff ff ef                                         ....

1000578c <VIRT_SBRK_MIN>:
1000578c:	00 00 00 f0                                         ....

10005790 <VIRT_SBRK_MAX>:
10005790:	00 00 c0 ff                                         ....

10005794 <VIRT_ALLOCED_VIRT_PAGES>:
10005794:	00 00 10 c2                                         ....

10005798 <VIRT_ACPI_DRIVER>:
10005798:	00 40 48 c2 54 75 72 6e 69 6e 67 20 6f 66 66 20     .@H.Turning off 
100057a8:	74 68 65 20 66 6c 6f 70 70 79 20 6d 6f 74 6f 72     the floppy motor
100057b8:	2e 2e 2e 0a 00 46 6c 6f 70 70 79 20 44 69 73 6b     .....Floppy Disk
100057c8:	20 43 6f 6e 74 72 6f 6c 6c 65 72 00 50 52 45 56      Controller.PREV
100057d8:	49 4f 55 53 20 43 4f 4d 4d 41 4e 44 20 46 41 49     IOUS COMMAND FAI
100057e8:	4c 45 44 2c 20 43 41 55 47 48 54 20 42 59 20 77     LED, CAUGHT BY w
100057f8:	72 69 74 65 43 6f 6d 6d 61 6e 64 00 44 49 44 20     riteCommand.DID 
10005808:	4e 4f 54 20 43 48 45 43 4b 20 46 4f 52 20 46 41     NOT CHECK FOR FA
10005818:	49 4c 55 52 45 20 42 45 46 4f 52 45 20 77 72 69     ILURE BEFORE wri
10005828:	74 65 43 6f 6d 6d 61 6e 64 00 46 6c 6f 70 70 79     teCommand.Floppy
10005838:	3a 3a 64 72 69 76 65 44 65 74 65 63 74 69 6f 6e     ::driveDetection
10005848:	28 29 0a 00 54 4f 44 4f 3a 20 66 64 63 2e 63 70     ()..TODO: fdc.cp
10005858:	70 2c 20 72 65 61 64 43 4d 4f 53 00 44 72 69 76     p, readCMOS.Driv
10005868:	65 20 74 79 70 65 20 30 3a 20 30 78 25 58 0a 00     e type 0: 0x%X..
10005878:	44 72 69 76 65 20 74 79 70 65 20 31 3a 20 30 78     Drive type 1: 0x
10005888:	25 58 0a 00 76 6f 69 64 20 46 6c 6f 70 70 79 3a     %X..void Floppy:
10005898:	3a 72 65 73 65 74 28 29 0a 00 53 50 45 43 49 46     :reset()..SPECIF
100058a8:	59 20 42 41 44 20 44 41 54 41 52 41 54 45 00 00     Y BAD DATARATE..
100058b8:	20 a1 07 00 e0 93 04 00 90 d0 03 00 40 42 0f 00      ...........@B..
100058c8:	73 65 6c 65 63 74 20 28 41 29 2e 20 25 64 0a 00     select (A). %d..
100058d8:	73 65 6c 65 63 74 20 28 42 29 2e 0a 00 73 65 6c     select (B)...sel
100058e8:	65 63 74 20 28 43 29 2e 0a 00 73 65 6c 65 63 74     ect (C)...select
100058f8:	20 28 44 29 2e 0a 00 00 55 4e 53 55 50 50 4f 52      (D)....UNSUPPOR
10005908:	54 45 44 20 46 4c 4f 50 50 59 20 46 4f 52 4d 41     TED FLOPPY FORMA
10005918:	54 20 28 44 41 54 41 52 41 54 45 20 4e 4f 54 20     T (DATARATE NOT 
10005928:	4b 4e 4f 57 4e 29 00 73 65 6c 65 63 74 20 28 45     KNOWN).select (E
10005938:	29 2e 0a 00 73 70 65 63 69 66 69 79 20 72 65 73     )...specifiy res
10005948:	65 74 2e 0a 00 73 65 6c 65 63 74 20 28 46 29 2e     et...select (F).
10005958:	0a 00 73 65 6c 65 63 74 20 28 46 32 29 2e 0a 00     ..select (F2)...
10005968:	63 61 6c 69 62 72 61 74 65 20 72 65 73 65 74 2e     calibrate reset.
10005978:	0a 00 73 65 6c 65 63 74 20 28 47 29 2e 0a 00 73     ..select (G)...s
10005988:	65 6c 65 63 74 20 28 48 29 2e 0a 00 73 65 6c 65     elect (H)...sele
10005998:	63 74 20 28 49 29 2e 0a 00 46 6c 6f 70 70 79 3a     ct (I)...Floppy:
100059a8:	3a 6d 6f 74 6f 72 0a 00 6e 75 6d 20 3d 20 25 64     :motor..num = %d
100059b8:	2c 20 73 74 61 74 65 20 3d 20 25 64 0a 00 73 74     , state = %d..st
100059c8:	61 74 65 2e 0a 00 73 74 61 72 74 69 6e 67 20 74     ate...starting t
100059d8:	68 65 20 6d 6f 74 6f 72 2e 0a 00 64 6f 72 20 31     he motor...dor 1
100059e8:	20 3d 20 30 78 25 58 0a 00 64 6f 72 20 32 20 3d      = 0x%X..dor 2 =
100059f8:	20 30 78 25 58 0a 00 6d 6f 74 6f 72 20 61 67 61      0x%X..motor aga
10005a08:	69 6e 2e 0a 00 6d 6f 74 6f 72 20 61 67 61 69 6e     in...motor again
10005a18:	20 32 2e 0a 00 6d 6f 74 6f 72 20 61 67 61 69 6e      2...motor again
10005a28:	20 33 2e 0a 00 6d 6f 74 6f 72 20 61 67 61 69 6e      3...motor again
10005a38:	20 34 2e 0a 00 6d 6f 74 6f 72 20 61 67 61 69 6e      4...motor again
10005a48:	20 35 2e 0a 00 6d 6f 74 6f 72 20 61 67 61 69 6e      5...motor again
10005a58:	20 36 2e 0a 00 46 6c 6f 70 70 79 3a 3a 6d 6f 74      6...Floppy::mot
10005a68:	6f 72 20 64 6f 6e 65 2e 0a 00 46 6c 6f 70 70 79     or done...Floppy
10005a78:	20 44 69 73 6b 20 44 72 69 76 65 00 46 6c 6f 70      Disk Drive.Flop
10005a88:	70 79 44 72 69 76 65 3a 3a 6d 6f 74 6f 72 4f 6e     pyDrive::motorOn
10005a98:	20 6e 75 6d 20 3d 20 25 64 0a 00 6e 75 6d 20 3d      num = %d..num =
10005aa8:	20 25 64 0a 00 73 69 7a 65 20 69 6e 20 4b 42 73      %d..size in KBs
10005ab8:	20 3d 20 25 64 0a 00 46 6c 6f 70 70 79 44 72 69      = %d..FloppyDri
10005ac8:	76 65 3a 3a 5f 6f 70 65 6e 20 31 0a 00 46 6c 6f     ve::_open 1..Flo
10005ad8:	70 70 79 44 72 69 76 65 3a 3a 5f 6f 70 65 6e 20     ppyDrive::_open 
10005ae8:	32 0a 00 46 6c 6f 70 70 79 44 72 69 76 65 3a 3a     2..FloppyDrive::
10005af8:	5f 6f 70 65 6e 20 33 0a 00 46 6c 6f 70 70 79 44     _open 3..FloppyD
10005b08:	72 69 76 65 3a 3a 73 65 6c 65 63 74 0a 00 00 00     rive::select....
10005b18:	73 65 6c 65 63 74 69 6f 6e 20 6c 6f 63 6b 65 64     selection locked
10005b28:	20 6f 72 20 66 61 69 6c 65 64 2e 2e 2e 0a 00 00      or failed......
10005b38:	73 65 65 6b 3a 20 35 20 72 65 74 72 69 65 73 2c     seek: 5 retries,
10005b48:	20 63 6f 75 6c 64 20 6e 6f 74 20 63 61 6c 69 62      could not calib
10005b58:	72 61 74 65 2e 0a 00 73 65 65 6b 20 28 73 65 6c     rate...seek (sel
10005b68:	29 20 25 64 2e 0a 00 73 65 65 6b 20 28 6f 6e 29     ) %d...seek (on)
10005b78:	20 25 64 2e 0a 00 73 65 65 6b 20 28 31 29 2e 0a      %d...seek (1)..
10005b88:	00 73 65 65 6b 20 28 61 61 29 2e 0a 00 73 65 65     .seek (aa)...see
10005b98:	6b 20 28 62 62 29 2e 0a 00 73 65 65 6b 20 28 32     k (bb)...seek (2
10005ba8:	29 2e 0a 00 73 65 65 6b 20 28 33 29 2e 0a 00 73     )...seek (3)...s
10005bb8:	65 65 6b 20 28 34 29 2e 0a 00 73 65 65 6b 20 28     eek (4)...seek (
10005bc8:	6e 69 72 71 29 2e 0a 00 73 65 65 6b 20 28 35 29     nirq)...seek (5)
10005bd8:	2e 0a 00 73 65 65 6b 20 28 73 69 64 29 2e 0a 00     ...seek (sid)...
10005be8:	73 65 65 6b 20 28 6f 66 66 29 2e 0a 00 73 65 65     seek (off)...see
10005bf8:	6b 20 28 75 6e 29 2e 0a 00 00 00 00 63 61 6c 69     k (un)......cali
10005c08:	62 72 61 74 65 3a 20 35 20 72 65 74 72 69 65 73     brate: 5 retries
10005c18:	2c 20 63 6f 75 6c 64 20 6e 6f 74 20 63 61 6c 69     , could not cali
10005c28:	62 72 61 74 65 2e 0a 00 63 61 6c 20 28 6f 6e 29     brate...cal (on)
10005c38:	2c 20 25 64 0a 00 63 61 6c 20 28 30 29 0a 00 63     , %d..cal (0)..c
10005c48:	61 6c 20 28 31 29 0a 00 63 61 6c 20 28 32 29 0a     al (1)..cal (2).
10005c58:	00 63 61 6c 20 28 33 29 0a 00 63 61 6c 20 28 34     .cal (3)..cal (4
10005c68:	29 0a 00 63 61 6c 20 28 35 29 0a 00 20 72 65 74     )..cal (5).. ret
10005c78:	72 79 3a 20 0a 00 41 62 6f 75 74 20 74 6f 20 73     ry: ..About to s
10005c88:	65 65 6b 2e 0a 00 53 65 65 6b 20 64 6f 6e 65 2e     eek...Seek done.
10005c98:	0a 00 4d 6f 74 6f 72 20 6f 6e 2e 0a 00 53 65 6c     ..Motor on...Sel
10005ca8:	65 63 74 65 64 2e 0a 00 44 4d 41 20 69 6e 69 74     ected...DMA init
10005cb8:	27 64 2e 0a 00 73 6c 65 65 70 20 64 6f 6e 65 0a     'd...sleep done.
10005cc8:	00 61 62 6f 75 74 20 74 6f 20 77 61 69 74 49 52     .about to waitIR
10005cd8:	51 2e 0a 00 6e 6f 20 49 52 51 2e 0a 00 67 6f 74     Q...no IRQ...got
10005ce8:	20 49 52 51 2e 0a 00 66 61 69 6c 75 72 65 20 72      IRQ...failure r
10005cf8:	65 61 64 69 6e 67 20 73 74 61 74 75 73 2e 0a 00     eading status...
10005d08:	72 65 61 64 20 72 65 73 75 6c 74 20 62 79 74 65     read result byte
10005d18:	73 2e 0a 00 6d 6f 74 6f 72 20 6f 66 66 0a 00 75     s...motor off..u
10005d28:	6e 73 65 6c 65 63 74 2e 0a 00 43 61 63 68 65 73     nselect...Caches
10005d38:	20 68 61 76 65 20 62 65 65 6e 20 70 75 72 67 65      have been purge
10005d48:	64 2e 0a 00 66 6c 6f 70 70 79 20 72 65 61 64 20     d...floppy read 
10005d58:	63 6f 75 6e 74 20 6e 6f 74 20 31 00 46 6c 6f 70     count not 1.Flop
10005d68:	70 79 44 72 69 76 65 3a 3a 72 65 61 64 20 63 61     pyDrive::read ca
10005d78:	6c 6c 65 64 2e 0a 00 43 20 30 78 25 58 2c 20 48     lled...C 0x%X, H
10005d88:	20 30 78 25 58 2c 20 53 20 30 78 25 58 0a 00 72      0x%X, S 0x%X..r
10005d98:	65 61 64 69 6e 67 20 74 72 61 63 6b 2e 0a 00 90     eading track....

10005da8 <vtable for FloppyDrive>:
	...
	10005db0: R_386_32	FloppyDrive::~FloppyDrive()
	10005db4: R_386_32	FloppyDrive::~FloppyDrive()
	10005db8: R_386_32	FloppyDrive::open(int, int, void*)
	10005dbc: R_386_32	FloppyDrive::close(int, int, void*)
	10005dc0: R_386_32	Device::hibernate()
	10005dc4: R_386_32	Device::wake()
	10005dc8: R_386_32	Device::detect()
	10005dcc: R_386_32	Device::disableLegacy()
	10005dd0: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005dd4: R_386_32	FloppyDrive::eject()
	10005dd8: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	10005ddc: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10005de0 <vtable for Floppy>:
	...
	10005de8: R_386_32	Floppy::~Floppy()
	10005dec: R_386_32	Floppy::~Floppy()
	10005df0: R_386_32	Floppy::open(int, int, void*)
	10005df4: R_386_32	Floppy::close(int, int, void*)
	10005df8: R_386_32	Device::hibernate()
	10005dfc: R_386_32	Device::wake()
	10005e00: R_386_32	Device::detect()
	10005e04: R_386_32	Device::disableLegacy()
	10005e08: R_386_32	Device::powerSaving(PowerSavingLevel)

10005e0c <PHYS_RAM_TABLE_SIZE>:
10005e0c:	13 05 00 00                                         ....

10005e10 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005e10:	24 05 00 00                                         $...

10005e14 <PHYS_RAM_TABLE>:
10005e14:	00 06 00 00                                         ....

10005e18 <PHYS_DMA_MEMORY_1>:
10005e18:	00 00 01 00                                         ....

10005e1c <PHYS_PHYS_PAGE_BITMAP>:
10005e1c:	00 00 02 00                                         ....

10005e20 <PHYS_VIRT_PAGE_BITMAP>:
10005e20:	00 00 04 00                                         ....

10005e24 <PHYS_DMA_MEMORY_2>:
10005e24:	00 00 06 00                                         ....

10005e28 <PHYS_ALLOCED_VIRT_PAGES>:
10005e28:	00 00 10 00                                         ....

10005e2c <PHYS_KRNL_PAGE_DIRECTORY>:
10005e2c:	00 10 00 00                                         ....

10005e30 <VIRT_KERNEL_BASE>:
10005e30:	00 00 00 c0                                         ....

10005e34 <VIRT_LOW_MEGS>:
10005e34:	00 00 00 c2                                         ....

10005e38 <VIRT_CPU_SPECIFIC>:
10005e38:	00 00 40 c2                                         ..@.

10005e3c <VIRT_RECURSIVE_SPOT_1>:
10005e3c:	00 00 80 c2                                         ....

10005e40 <VIRT_RECURSIVE_SPOT_2>:
10005e40:	00 00 c0 c2                                         ....

10005e44 <VIRT_DMA_MEMORY_1>:
10005e44:	00 00 01 c2                                         ....

10005e48 <SIZE_DMA_MEMORY_1>:
10005e48:	00 00 01 00                                         ....

10005e4c <VIRT_DMA_MEMORY_2>:
10005e4c:	00 00 06 c2                                         ....

10005e50 <SIZE_DMA_MEMORY_2>:
10005e50:	00 00 02 00                                         ....

10005e54 <VIRT_KRNL_PAGE_DIRECTORY>:
10005e54:	00 10 00 c2                                         ....

10005e58 <VIRT_PHYS_PAGE_BITMAP>:
10005e58:	00 00 02 c2                                         ....

10005e5c <SIZE_PHYS_PAGE_BITMAP>:
10005e5c:	00 00 02 00                                         ....

10005e60 <VIRT_VIRT_PAGE_BITMAP>:
10005e60:	00 00 04 c2                                         ....

10005e64 <SIZE_VIRT_PAGE_BITMAP>:
10005e64:	00 80 00 00                                         ....

10005e68 <VIRT_RAM_TABLE>:
10005e68:	00 06 00 c2                                         ....

10005e6c <VIRT_RAM_TABLE_SIZE>:
10005e6c:	13 05 00 c2                                         ....

10005e70 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005e70:	24 05 00 c2                                         $...

10005e74 <SIZE_APP_STACK_USER>:
10005e74:	00 00 18 00                                         ....

10005e78 <SIZE_APP_STACK_KRNL>:
10005e78:	00 00 08 00                                         ....

10005e7c <SIZE_APP_STACK_TOTAL>:
10005e7c:	00 00 20 00                                         .. .

10005e80 <VIRT_APP_DATA>:
10005e80:	00 00 00 10                                         ....

10005e84 <VIRT_APP_STACK_USER_TOP>:
10005e84:	00 00 00 02                                         ....

10005e88 <VIRT_APP_STACK_KRNL_TOP>:
10005e88:	00 00 e8 01                                         ....

10005e8c <VIRT_HEAP_MIN>:
10005e8c:	00 00 00 c8                                         ....

10005e90 <VIRT_HEAP_MAX>:
10005e90:	ff ff ff ef                                         ....

10005e94 <VIRT_SBRK_MIN>:
10005e94:	00 00 00 f0                                         ....

10005e98 <VIRT_SBRK_MAX>:
10005e98:	00 00 c0 ff                                         ....

10005e9c <VIRT_ALLOCED_VIRT_PAGES>:
10005e9c:	00 00 10 c2                                         ....

10005ea0 <VIRT_ACPI_DRIVER>:
10005ea0:	00 40 48 c2                                         .@H.

10005ea4 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005ea4:	30 00 00 00                                         0...

10005ea8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005ea8:	80 00 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ....Gameport.f..

10005eb8 <vtable for Gameport>:
	...
	10005ec0: R_386_32	Gameport::~Gameport()
	10005ec4: R_386_32	Gameport::~Gameport()
	10005ec8: R_386_32	Gameport::open(int, int, void*)
	10005ecc: R_386_32	Gameport::close(int, int, void*)
	10005ed0: R_386_32	Device::hibernate()
	10005ed4: R_386_32	Device::wake()
	10005ed8: R_386_32	Gameport::detect()
	10005edc: R_386_32	Device::disableLegacy()
	10005ee0: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005ee4: R_386_32	Gameport::read(int)
10005ee8:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	10005ef0: R_386_32	non-virtual thunk to Gameport::read(int)

10005ef4 <vtable for JoystickHost>:
	...
	10005efc: R_386_32	__cxa_pure_virtual

10005f00 <PHYS_RAM_TABLE_SIZE>:
10005f00:	13 05 00 00                                         ....

10005f04 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005f04:	24 05 00 00                                         $...

10005f08 <PHYS_RAM_TABLE>:
10005f08:	00 06 00 00                                         ....

10005f0c <PHYS_DMA_MEMORY_1>:
10005f0c:	00 00 01 00                                         ....

10005f10 <PHYS_PHYS_PAGE_BITMAP>:
10005f10:	00 00 02 00                                         ....

10005f14 <PHYS_VIRT_PAGE_BITMAP>:
10005f14:	00 00 04 00                                         ....

10005f18 <PHYS_DMA_MEMORY_2>:
10005f18:	00 00 06 00                                         ....

10005f1c <PHYS_ALLOCED_VIRT_PAGES>:
10005f1c:	00 00 10 00                                         ....

10005f20 <PHYS_KRNL_PAGE_DIRECTORY>:
10005f20:	00 10 00 00                                         ....

10005f24 <VIRT_KERNEL_BASE>:
10005f24:	00 00 00 c0                                         ....

10005f28 <VIRT_LOW_MEGS>:
10005f28:	00 00 00 c2                                         ....

10005f2c <VIRT_CPU_SPECIFIC>:
10005f2c:	00 00 40 c2                                         ..@.

10005f30 <VIRT_RECURSIVE_SPOT_1>:
10005f30:	00 00 80 c2                                         ....

10005f34 <VIRT_RECURSIVE_SPOT_2>:
10005f34:	00 00 c0 c2                                         ....

10005f38 <VIRT_DMA_MEMORY_1>:
10005f38:	00 00 01 c2                                         ....

10005f3c <SIZE_DMA_MEMORY_1>:
10005f3c:	00 00 01 00                                         ....

10005f40 <VIRT_DMA_MEMORY_2>:
10005f40:	00 00 06 c2                                         ....

10005f44 <SIZE_DMA_MEMORY_2>:
10005f44:	00 00 02 00                                         ....

10005f48 <VIRT_KRNL_PAGE_DIRECTORY>:
10005f48:	00 10 00 c2                                         ....

10005f4c <VIRT_PHYS_PAGE_BITMAP>:
10005f4c:	00 00 02 c2                                         ....

10005f50 <SIZE_PHYS_PAGE_BITMAP>:
10005f50:	00 00 02 00                                         ....

10005f54 <VIRT_VIRT_PAGE_BITMAP>:
10005f54:	00 00 04 c2                                         ....

10005f58 <SIZE_VIRT_PAGE_BITMAP>:
10005f58:	00 80 00 00                                         ....

10005f5c <VIRT_RAM_TABLE>:
10005f5c:	00 06 00 c2                                         ....

10005f60 <VIRT_RAM_TABLE_SIZE>:
10005f60:	13 05 00 c2                                         ....

10005f64 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005f64:	24 05 00 c2                                         $...

10005f68 <SIZE_APP_STACK_USER>:
10005f68:	00 00 18 00                                         ....

10005f6c <SIZE_APP_STACK_KRNL>:
10005f6c:	00 00 08 00                                         ....

10005f70 <SIZE_APP_STACK_TOTAL>:
10005f70:	00 00 20 00                                         .. .

10005f74 <VIRT_APP_DATA>:
10005f74:	00 00 00 10                                         ....

10005f78 <VIRT_APP_STACK_USER_TOP>:
10005f78:	00 00 00 02                                         ....

10005f7c <VIRT_APP_STACK_KRNL_TOP>:
10005f7c:	00 00 e8 01                                         ....

10005f80 <VIRT_HEAP_MIN>:
10005f80:	00 00 00 c8                                         ....

10005f84 <VIRT_HEAP_MAX>:
10005f84:	ff ff ff ef                                         ....

10005f88 <VIRT_SBRK_MIN>:
10005f88:	00 00 00 f0                                         ....

10005f8c <VIRT_SBRK_MAX>:
10005f8c:	00 00 c0 ff                                         ....

10005f90 <VIRT_ALLOCED_VIRT_PAGES>:
10005f90:	00 00 10 c2                                         ....

10005f94 <VIRT_ACPI_DRIVER>:
10005f94:	00 40 48 c2                                         .@H.

10005f98 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005f98:	30 00 00 00                                         0...

10005f9c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005f9c:	80 00 00 00                                         ....

10005fa0 <CSWTCH.11>:
10005fa0:	00 02 04 06 c0 c4 c8 cc                             ........

10005fa8 <CSWTCH.12>:
10005fa8:	01 03 05 07 c2 c6 ca ce                             ........

10005fb0 <CSWTCH.13>:
10005fb0:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10005fc0:	61 6e 67 65 2e 0a 00 90                             ange....

10005fc8 <vtable for DMA>:
	...
	10005fd0: R_386_32	DMA::~DMA()
	10005fd4: R_386_32	DMA::~DMA()
	10005fd8: R_386_32	DMA::open(int, int, void*)
	10005fdc: R_386_32	DMA::close(int, int, void*)
	10005fe0: R_386_32	Device::hibernate()
	10005fe4: R_386_32	Device::wake()
	10005fe8: R_386_32	Device::detect()
	10005fec: R_386_32	Device::disableLegacy()
	10005ff0: R_386_32	Device::powerSaving(PowerSavingLevel)

10005ff4 <PHYS_RAM_TABLE_SIZE>:
10005ff4:	13 05 00 00                                         ....

10005ff8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005ff8:	24 05 00 00                                         $...

10005ffc <PHYS_RAM_TABLE>:
10005ffc:	00 06 00 00                                         ....

10006000 <PHYS_DMA_MEMORY_1>:
10006000:	00 00 01 00                                         ....

10006004 <PHYS_PHYS_PAGE_BITMAP>:
10006004:	00 00 02 00                                         ....

10006008 <PHYS_VIRT_PAGE_BITMAP>:
10006008:	00 00 04 00                                         ....

1000600c <PHYS_DMA_MEMORY_2>:
1000600c:	00 00 06 00                                         ....

10006010 <PHYS_ALLOCED_VIRT_PAGES>:
10006010:	00 00 10 00                                         ....

10006014 <PHYS_KRNL_PAGE_DIRECTORY>:
10006014:	00 10 00 00                                         ....

10006018 <VIRT_KERNEL_BASE>:
10006018:	00 00 00 c0                                         ....

1000601c <VIRT_LOW_MEGS>:
1000601c:	00 00 00 c2                                         ....

10006020 <VIRT_CPU_SPECIFIC>:
10006020:	00 00 40 c2                                         ..@.

10006024 <VIRT_RECURSIVE_SPOT_1>:
10006024:	00 00 80 c2                                         ....

10006028 <VIRT_RECURSIVE_SPOT_2>:
10006028:	00 00 c0 c2                                         ....

1000602c <VIRT_DMA_MEMORY_1>:
1000602c:	00 00 01 c2                                         ....

10006030 <SIZE_DMA_MEMORY_1>:
10006030:	00 00 01 00                                         ....

10006034 <VIRT_DMA_MEMORY_2>:
10006034:	00 00 06 c2                                         ....

10006038 <SIZE_DMA_MEMORY_2>:
10006038:	00 00 02 00                                         ....

1000603c <VIRT_KRNL_PAGE_DIRECTORY>:
1000603c:	00 10 00 c2                                         ....

10006040 <VIRT_PHYS_PAGE_BITMAP>:
10006040:	00 00 02 c2                                         ....

10006044 <SIZE_PHYS_PAGE_BITMAP>:
10006044:	00 00 02 00                                         ....

10006048 <VIRT_VIRT_PAGE_BITMAP>:
10006048:	00 00 04 c2                                         ....

1000604c <SIZE_VIRT_PAGE_BITMAP>:
1000604c:	00 80 00 00                                         ....

10006050 <VIRT_RAM_TABLE>:
10006050:	00 06 00 c2                                         ....

10006054 <VIRT_RAM_TABLE_SIZE>:
10006054:	13 05 00 c2                                         ....

10006058 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006058:	24 05 00 c2                                         $...

1000605c <SIZE_APP_STACK_USER>:
1000605c:	00 00 18 00                                         ....

10006060 <SIZE_APP_STACK_KRNL>:
10006060:	00 00 08 00                                         ....

10006064 <SIZE_APP_STACK_TOTAL>:
10006064:	00 00 20 00                                         .. .

10006068 <VIRT_APP_DATA>:
10006068:	00 00 00 10                                         ....

1000606c <VIRT_APP_STACK_USER_TOP>:
1000606c:	00 00 00 02                                         ....

10006070 <VIRT_APP_STACK_KRNL_TOP>:
10006070:	00 00 e8 01                                         ....

10006074 <VIRT_HEAP_MIN>:
10006074:	00 00 00 c8                                         ....

10006078 <VIRT_HEAP_MAX>:
10006078:	ff ff ff ef                                         ....

1000607c <VIRT_SBRK_MIN>:
1000607c:	00 00 00 f0                                         ....

10006080 <VIRT_SBRK_MAX>:
10006080:	00 00 c0 ff                                         ....

10006084 <VIRT_ALLOCED_VIRT_PAGES>:
10006084:	00 00 10 c2                                         ....

10006088 <VIRT_ACPI_DRIVER>:
10006088:	00 40 48 c2                                         .@H.

1000608c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000608c:	80 00 00 00                                         ....

10006090 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006090:	80 00 00 00                                         ....

10006094 <vtable for PS2>:
	...
	1000609c: R_386_32	PS2::~PS2()
	100060a0: R_386_32	PS2::~PS2()
	100060a4: R_386_32	PS2::open(int, int, void*)
	100060a8: R_386_32	PS2::close(int, int, void*)
	100060ac: R_386_32	Device::hibernate()
	100060b0: R_386_32	Device::wake()
	100060b4: R_386_32	PS2::detect()
	100060b8: R_386_32	Device::disableLegacy()
	100060bc: R_386_32	Device::powerSaving(PowerSavingLevel)

100060c0 <PHYS_RAM_TABLE_SIZE>:
100060c0:	13 05 00 00                                         ....

100060c4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100060c4:	24 05 00 00                                         $...

100060c8 <PHYS_RAM_TABLE>:
100060c8:	00 06 00 00                                         ....

100060cc <PHYS_DMA_MEMORY_1>:
100060cc:	00 00 01 00                                         ....

100060d0 <PHYS_PHYS_PAGE_BITMAP>:
100060d0:	00 00 02 00                                         ....

100060d4 <PHYS_VIRT_PAGE_BITMAP>:
100060d4:	00 00 04 00                                         ....

100060d8 <PHYS_DMA_MEMORY_2>:
100060d8:	00 00 06 00                                         ....

100060dc <PHYS_ALLOCED_VIRT_PAGES>:
100060dc:	00 00 10 00                                         ....

100060e0 <PHYS_KRNL_PAGE_DIRECTORY>:
100060e0:	00 10 00 00                                         ....

100060e4 <VIRT_KERNEL_BASE>:
100060e4:	00 00 00 c0                                         ....

100060e8 <VIRT_LOW_MEGS>:
100060e8:	00 00 00 c2                                         ....

100060ec <VIRT_CPU_SPECIFIC>:
100060ec:	00 00 40 c2                                         ..@.

100060f0 <VIRT_RECURSIVE_SPOT_1>:
100060f0:	00 00 80 c2                                         ....

100060f4 <VIRT_RECURSIVE_SPOT_2>:
100060f4:	00 00 c0 c2                                         ....

100060f8 <VIRT_DMA_MEMORY_1>:
100060f8:	00 00 01 c2                                         ....

100060fc <SIZE_DMA_MEMORY_1>:
100060fc:	00 00 01 00                                         ....

10006100 <VIRT_DMA_MEMORY_2>:
10006100:	00 00 06 c2                                         ....

10006104 <SIZE_DMA_MEMORY_2>:
10006104:	00 00 02 00                                         ....

10006108 <VIRT_KRNL_PAGE_DIRECTORY>:
10006108:	00 10 00 c2                                         ....

1000610c <VIRT_PHYS_PAGE_BITMAP>:
1000610c:	00 00 02 c2                                         ....

10006110 <SIZE_PHYS_PAGE_BITMAP>:
10006110:	00 00 02 00                                         ....

10006114 <VIRT_VIRT_PAGE_BITMAP>:
10006114:	00 00 04 c2                                         ....

10006118 <SIZE_VIRT_PAGE_BITMAP>:
10006118:	00 80 00 00                                         ....

1000611c <VIRT_RAM_TABLE>:
1000611c:	00 06 00 c2                                         ....

10006120 <VIRT_RAM_TABLE_SIZE>:
10006120:	13 05 00 c2                                         ....

10006124 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006124:	24 05 00 c2                                         $...

10006128 <SIZE_APP_STACK_USER>:
10006128:	00 00 18 00                                         ....

1000612c <SIZE_APP_STACK_KRNL>:
1000612c:	00 00 08 00                                         ....

10006130 <SIZE_APP_STACK_TOTAL>:
10006130:	00 00 20 00                                         .. .

10006134 <VIRT_APP_DATA>:
10006134:	00 00 00 10                                         ....

10006138 <VIRT_APP_STACK_USER_TOP>:
10006138:	00 00 00 02                                         ....

1000613c <VIRT_APP_STACK_KRNL_TOP>:
1000613c:	00 00 e8 01                                         ....

10006140 <VIRT_HEAP_MIN>:
10006140:	00 00 00 c8                                         ....

10006144 <VIRT_HEAP_MAX>:
10006144:	ff ff ff ef                                         ....

10006148 <VIRT_SBRK_MIN>:
10006148:	00 00 00 f0                                         ....

1000614c <VIRT_SBRK_MAX>:
1000614c:	00 00 c0 ff                                         ....

10006150 <VIRT_ALLOCED_VIRT_PAGES>:
10006150:	00 00 10 c2                                         ....

10006154 <VIRT_ACPI_DRIVER>:
10006154:	00 40 48 c2                                         .@H.

10006158 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006158:	80 00 00 00                                         ....

1000615c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000615c:	80 00 00 00                                         ....

10006160 <PS2Keyboard::internalMapperLower>:
10006160:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10006170:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
10006180:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
10006190:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
100061a0:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
100061b0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
100061c0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100061d0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100061e0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10006260 <PS2Keyboard::internalMapperUpper>:
10006260:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10006270:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10006280:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10006290:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
100062a0:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
100062b0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
100062c0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100062d0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100062e0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10006360 <PS2Keyboard::internalMapCapLower>:
10006360:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10006370:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10006380:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10006390:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
100063a0:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
100063b0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
100063c0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100063d0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100063e0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10006460 <PS2Keyboard::internalMapCapUpper>:
10006460:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10006470:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10006480:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10006490:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
100064a0:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
100064b0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
100064c0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100064d0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100064e0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10006560 <PS2Keyboard::internalMapperLowerBad>:
10006560:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10006570:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10006580:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10006590:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
100065a0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100065b0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
100065c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100065d0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100065e0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100065f0:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10006600:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10006610:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10006620:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006630:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006640:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006650:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006660:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10006670:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10006680:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10006690:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
100066a0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100066b0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
100066c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100066d0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100066e0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100066f0:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10006700:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10006710:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10006720:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006730:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006740:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006750:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006760:	00 66 90 90                                         .f..

10006764 <vtable for PS2Keyboard>:
	...
	1000676c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10006770: R_386_32	PS2Keyboard::~PS2Keyboard()
	10006774: R_386_32	PS2Keyboard::open(int, int, void*)
	10006778: R_386_32	PS2Keyboard::close(int, int, void*)
	1000677c: R_386_32	Device::hibernate()
	10006780: R_386_32	Device::wake()
	10006784: R_386_32	Device::detect()
	10006788: R_386_32	Device::disableLegacy()
	1000678c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10006790: R_386_32	PS2Keyboard::setRepeatRate(int)
	10006794: R_386_32	PS2Keyboard::setRepeatDelay(int)

10006798 <PHYS_RAM_TABLE_SIZE>:
10006798:	13 05 00 00                                         ....

1000679c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000679c:	24 05 00 00                                         $...

100067a0 <PHYS_RAM_TABLE>:
100067a0:	00 06 00 00                                         ....

100067a4 <PHYS_DMA_MEMORY_1>:
100067a4:	00 00 01 00                                         ....

100067a8 <PHYS_PHYS_PAGE_BITMAP>:
100067a8:	00 00 02 00                                         ....

100067ac <PHYS_VIRT_PAGE_BITMAP>:
100067ac:	00 00 04 00                                         ....

100067b0 <PHYS_DMA_MEMORY_2>:
100067b0:	00 00 06 00                                         ....

100067b4 <PHYS_ALLOCED_VIRT_PAGES>:
100067b4:	00 00 10 00                                         ....

100067b8 <PHYS_KRNL_PAGE_DIRECTORY>:
100067b8:	00 10 00 00                                         ....

100067bc <VIRT_KERNEL_BASE>:
100067bc:	00 00 00 c0                                         ....

100067c0 <VIRT_LOW_MEGS>:
100067c0:	00 00 00 c2                                         ....

100067c4 <VIRT_CPU_SPECIFIC>:
100067c4:	00 00 40 c2                                         ..@.

100067c8 <VIRT_RECURSIVE_SPOT_1>:
100067c8:	00 00 80 c2                                         ....

100067cc <VIRT_RECURSIVE_SPOT_2>:
100067cc:	00 00 c0 c2                                         ....

100067d0 <VIRT_DMA_MEMORY_1>:
100067d0:	00 00 01 c2                                         ....

100067d4 <SIZE_DMA_MEMORY_1>:
100067d4:	00 00 01 00                                         ....

100067d8 <VIRT_DMA_MEMORY_2>:
100067d8:	00 00 06 c2                                         ....

100067dc <SIZE_DMA_MEMORY_2>:
100067dc:	00 00 02 00                                         ....

100067e0 <VIRT_KRNL_PAGE_DIRECTORY>:
100067e0:	00 10 00 c2                                         ....

100067e4 <VIRT_PHYS_PAGE_BITMAP>:
100067e4:	00 00 02 c2                                         ....

100067e8 <SIZE_PHYS_PAGE_BITMAP>:
100067e8:	00 00 02 00                                         ....

100067ec <VIRT_VIRT_PAGE_BITMAP>:
100067ec:	00 00 04 c2                                         ....

100067f0 <SIZE_VIRT_PAGE_BITMAP>:
100067f0:	00 80 00 00                                         ....

100067f4 <VIRT_RAM_TABLE>:
100067f4:	00 06 00 c2                                         ....

100067f8 <VIRT_RAM_TABLE_SIZE>:
100067f8:	13 05 00 c2                                         ....

100067fc <VIRT_HIGHEST_UNUSED_ADDRESS>:
100067fc:	24 05 00 c2                                         $...

10006800 <SIZE_APP_STACK_USER>:
10006800:	00 00 18 00                                         ....

10006804 <SIZE_APP_STACK_KRNL>:
10006804:	00 00 08 00                                         ....

10006808 <SIZE_APP_STACK_TOTAL>:
10006808:	00 00 20 00                                         .. .

1000680c <VIRT_APP_DATA>:
1000680c:	00 00 00 10                                         ....

10006810 <VIRT_APP_STACK_USER_TOP>:
10006810:	00 00 00 02                                         ....

10006814 <VIRT_APP_STACK_KRNL_TOP>:
10006814:	00 00 e8 01                                         ....

10006818 <VIRT_HEAP_MIN>:
10006818:	00 00 00 c8                                         ....

1000681c <VIRT_HEAP_MAX>:
1000681c:	ff ff ff ef                                         ....

10006820 <VIRT_SBRK_MIN>:
10006820:	00 00 00 f0                                         ....

10006824 <VIRT_SBRK_MAX>:
10006824:	00 00 c0 ff                                         ....

10006828 <VIRT_ALLOCED_VIRT_PAGES>:
10006828:	00 00 10 c2                                         ....

1000682c <VIRT_ACPI_DRIVER>:
1000682c:	00 40 48 c2                                         .@H.

10006830 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006830:	80 00 00 00                                         ....

10006834 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006834:	80 00 00 00                                         ....

10006838 <vtable for PS2Mouse>:
	...
	10006840: R_386_32	PS2Mouse::~PS2Mouse()
	10006844: R_386_32	PS2Mouse::~PS2Mouse()
	10006848: R_386_32	PS2Mouse::open(int, int, void*)
	1000684c: R_386_32	PS2Mouse::close(int, int, void*)
	10006850: R_386_32	Device::hibernate()
	10006854: R_386_32	Device::wake()
	10006858: R_386_32	PS2Mouse::detect()
	1000685c: R_386_32	Device::disableLegacy()
	10006860: R_386_32	Device::powerSaving(PowerSavingLevel)

10006864 <PHYS_RAM_TABLE_SIZE>:
10006864:	13 05 00 00                                         ....

10006868 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006868:	24 05 00 00                                         $...

1000686c <PHYS_RAM_TABLE>:
1000686c:	00 06 00 00                                         ....

10006870 <PHYS_DMA_MEMORY_1>:
10006870:	00 00 01 00                                         ....

10006874 <PHYS_PHYS_PAGE_BITMAP>:
10006874:	00 00 02 00                                         ....

10006878 <PHYS_VIRT_PAGE_BITMAP>:
10006878:	00 00 04 00                                         ....

1000687c <PHYS_DMA_MEMORY_2>:
1000687c:	00 00 06 00                                         ....

10006880 <PHYS_ALLOCED_VIRT_PAGES>:
10006880:	00 00 10 00                                         ....

10006884 <PHYS_KRNL_PAGE_DIRECTORY>:
10006884:	00 10 00 00                                         ....

10006888 <VIRT_KERNEL_BASE>:
10006888:	00 00 00 c0                                         ....

1000688c <VIRT_LOW_MEGS>:
1000688c:	00 00 00 c2                                         ....

10006890 <VIRT_CPU_SPECIFIC>:
10006890:	00 00 40 c2                                         ..@.

10006894 <VIRT_RECURSIVE_SPOT_1>:
10006894:	00 00 80 c2                                         ....

10006898 <VIRT_RECURSIVE_SPOT_2>:
10006898:	00 00 c0 c2                                         ....

1000689c <VIRT_DMA_MEMORY_1>:
1000689c:	00 00 01 c2                                         ....

100068a0 <SIZE_DMA_MEMORY_1>:
100068a0:	00 00 01 00                                         ....

100068a4 <VIRT_DMA_MEMORY_2>:
100068a4:	00 00 06 c2                                         ....

100068a8 <SIZE_DMA_MEMORY_2>:
100068a8:	00 00 02 00                                         ....

100068ac <VIRT_KRNL_PAGE_DIRECTORY>:
100068ac:	00 10 00 c2                                         ....

100068b0 <VIRT_PHYS_PAGE_BITMAP>:
100068b0:	00 00 02 c2                                         ....

100068b4 <SIZE_PHYS_PAGE_BITMAP>:
100068b4:	00 00 02 00                                         ....

100068b8 <VIRT_VIRT_PAGE_BITMAP>:
100068b8:	00 00 04 c2                                         ....

100068bc <SIZE_VIRT_PAGE_BITMAP>:
100068bc:	00 80 00 00                                         ....

100068c0 <VIRT_RAM_TABLE>:
100068c0:	00 06 00 c2                                         ....

100068c4 <VIRT_RAM_TABLE_SIZE>:
100068c4:	13 05 00 c2                                         ....

100068c8 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100068c8:	24 05 00 c2                                         $...

100068cc <SIZE_APP_STACK_USER>:
100068cc:	00 00 18 00                                         ....

100068d0 <SIZE_APP_STACK_KRNL>:
100068d0:	00 00 08 00                                         ....

100068d4 <SIZE_APP_STACK_TOTAL>:
100068d4:	00 00 20 00                                         .. .

100068d8 <VIRT_APP_DATA>:
100068d8:	00 00 00 10                                         ....

100068dc <VIRT_APP_STACK_USER_TOP>:
100068dc:	00 00 00 02                                         ....

100068e0 <VIRT_APP_STACK_KRNL_TOP>:
100068e0:	00 00 e8 01                                         ....

100068e4 <VIRT_HEAP_MIN>:
100068e4:	00 00 00 c8                                         ....

100068e8 <VIRT_HEAP_MAX>:
100068e8:	ff ff ff ef                                         ....

100068ec <VIRT_SBRK_MIN>:
100068ec:	00 00 00 f0                                         ....

100068f0 <VIRT_SBRK_MAX>:
100068f0:	00 00 c0 ff                                         ....

100068f4 <VIRT_ALLOCED_VIRT_PAGES>:
100068f4:	00 00 10 c2                                         ....

100068f8 <VIRT_ACPI_DRIVER>:
100068f8:	00 40 48 c2                                         .@H.

100068fc <TERMINAL_KEYBUFFER_IN_SIZE>:
100068fc:	30 00 00 00                                         0...

10006900 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006900:	80 00 00 00                                         ....

10006904 <vtable for PS2Port>:
	...
	1000690c: R_386_32	PS2Port::~PS2Port()
	10006910: R_386_32	PS2Port::~PS2Port()
	10006914: R_386_32	PS2Port::open(int, int, void*)
	10006918: R_386_32	PS2Port::close(int, int, void*)
	1000691c: R_386_32	Device::hibernate()
	10006920: R_386_32	Device::wake()
	10006924: R_386_32	PS2Port::detect()
	10006928: R_386_32	Device::disableLegacy()
	1000692c: R_386_32	Device::powerSaving(PowerSavingLevel)

10006930 <PHYS_RAM_TABLE_SIZE>:
10006930:	13 05 00 00                                         ....

10006934 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006934:	24 05 00 00                                         $...

10006938 <PHYS_RAM_TABLE>:
10006938:	00 06 00 00                                         ....

1000693c <PHYS_DMA_MEMORY_1>:
1000693c:	00 00 01 00                                         ....

10006940 <PHYS_PHYS_PAGE_BITMAP>:
10006940:	00 00 02 00                                         ....

10006944 <PHYS_VIRT_PAGE_BITMAP>:
10006944:	00 00 04 00                                         ....

10006948 <PHYS_DMA_MEMORY_2>:
10006948:	00 00 06 00                                         ....

1000694c <PHYS_ALLOCED_VIRT_PAGES>:
1000694c:	00 00 10 00                                         ....

10006950 <PHYS_KRNL_PAGE_DIRECTORY>:
10006950:	00 10 00 00                                         ....

10006954 <VIRT_KERNEL_BASE>:
10006954:	00 00 00 c0                                         ....

10006958 <VIRT_LOW_MEGS>:
10006958:	00 00 00 c2                                         ....

1000695c <VIRT_CPU_SPECIFIC>:
1000695c:	00 00 40 c2                                         ..@.

10006960 <VIRT_RECURSIVE_SPOT_1>:
10006960:	00 00 80 c2                                         ....

10006964 <VIRT_RECURSIVE_SPOT_2>:
10006964:	00 00 c0 c2                                         ....

10006968 <VIRT_DMA_MEMORY_1>:
10006968:	00 00 01 c2                                         ....

1000696c <SIZE_DMA_MEMORY_1>:
1000696c:	00 00 01 00                                         ....

10006970 <VIRT_KRNL_PAGE_DIRECTORY>:
10006970:	00 10 00 c2                                         ....

10006974 <VIRT_PHYS_PAGE_BITMAP>:
10006974:	00 00 02 c2                                         ....

10006978 <SIZE_PHYS_PAGE_BITMAP>:
10006978:	00 00 02 00                                         ....

1000697c <VIRT_VIRT_PAGE_BITMAP>:
1000697c:	00 00 04 c2                                         ....

10006980 <SIZE_VIRT_PAGE_BITMAP>:
10006980:	00 80 00 00                                         ....

10006984 <VIRT_RAM_TABLE>:
10006984:	00 06 00 c2                                         ....

10006988 <VIRT_RAM_TABLE_SIZE>:
10006988:	13 05 00 c2                                         ....

1000698c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000698c:	24 05 00 c2                                         $...

10006990 <SIZE_APP_STACK_USER>:
10006990:	00 00 18 00                                         ....

10006994 <SIZE_APP_STACK_KRNL>:
10006994:	00 00 08 00                                         ....

10006998 <SIZE_APP_STACK_TOTAL>:
10006998:	00 00 20 00                                         .. .

1000699c <VIRT_APP_DATA>:
1000699c:	00 00 00 10                                         ....

100069a0 <VIRT_APP_STACK_USER_TOP>:
100069a0:	00 00 00 02                                         ....

100069a4 <VIRT_APP_STACK_KRNL_TOP>:
100069a4:	00 00 e8 01                                         ....

100069a8 <VIRT_HEAP_MIN>:
100069a8:	00 00 00 c8                                         ....

100069ac <VIRT_HEAP_MAX>:
100069ac:	ff ff ff ef                                         ....

100069b0 <VIRT_SBRK_MIN>:
100069b0:	00 00 00 f0                                         ....

100069b4 <VIRT_SBRK_MAX>:
100069b4:	00 00 c0 ff                                         ....

100069b8 <VIRT_ALLOCED_VIRT_PAGES>:
100069b8:	00 00 10 c2                                         ....

100069bc <VIRT_ACPI_DRIVER>:
100069bc:	00 40 48 c2                                         .@H.

100069c0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100069c0:	80 00 00 00                                         ....

100069c4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100069c4:	80 00 00 00 53 6f 75 6e 64 42 6c 61 73 74 65 72     ....SoundBlaster
100069d4:	20 31 36 00 53 42 31 36 20 49 52 51 2e 0a 00 73      16.SB16 IRQ...s
100069e4:	6f 75 6e 64 62 6c 61 73 74 65 72 20 31 36 2e 0a     oundblaster 16..
100069f4:	00 43 41 4e 27 54 20 47 45 54 20 44 4d 41 20 43     .CAN'T GET DMA C
10006a04:	48 41 4e 4e 45 4c 20 35 21 00 73 6f 75 6e 64 62     HANNEL 5!.soundb
10006a14:	6c 61 73 74 65 72 20 31 36 20 2d 20 42 2e 0a 00     laster 16 - B...
10006a24:	73 6f 75 6e 64 62 6c 61 73 74 65 72 3a 20 44 4d     soundblaster: DM
10006a34:	41 20 63 68 61 6e 6e 65 6c 20 35 20 68 61 73 20     A channel 5 has 
10006a44:	61 64 64 72 65 73 73 20 6f 66 20 30 78 25 58 0a     address of 0x%X.
10006a54:	00 73 6f 75 6e 64 62 6c 61 73 74 65 72 3a 20 44     .soundblaster: D
10006a64:	4d 41 20 63 68 61 6e 6e 65 6c 20 35 20 68 61 73     MA channel 5 has
10006a74:	20 63 68 2e 20 6e 75 6d 2e 20 6f 66 20 30 78 25      ch. num. of 0x%
10006a84:	58 0a 00 53 42 31 36 3a 20 63 75 72 72 65 6e 74     X..SB16: current
10006a94:	20 44 4d 41 20 72 65 67 69 73 74 65 72 20 3d 20      DMA register = 
10006aa4:	30 78 25 78 0a 00 6f 6e 20 69 72 71 2c 20 64 6d     0x%x..on irq, dm
10006ab4:	61 31 36 41 64 64 72 20 3d 20 30 78 25 58 2c 20     a16Addr = 0x%X, 
10006ac4:	35 3a 3a 61 64 64 72 20 3d 20 30 78 25 58 0a 00     5::addr = 0x%X..
10006ad4:	77 72 69 74 65 20 6c 6f 63 61 74 69 6f 6e 20 3d     write location =
10006ae4:	20 30 78 25 58 0a 00 68 65 6c 6c 6f 20 77 6f 72      0x%X..hello wor
10006af4:	6c 64 20 41 21 0a 00 68 65 6c 6c 6f 20 77 6f 72     ld A!..hello wor
10006b04:	6c 64 20 42 21 0a 00 90                             ld B!...

10006b0c <vtable for SoundBlaster16>:
	...
	10006b14: R_386_32	SoundBlaster16::~SoundBlaster16()
	10006b18: R_386_32	SoundBlaster16::~SoundBlaster16()
	10006b1c: R_386_32	SoundBlaster16::open(int, int, void*)
	10006b20: R_386_32	SoundBlaster16::close(int, int, void*)
	10006b24: R_386_32	Device::hibernate()
	10006b28: R_386_32	Device::wake()
	10006b2c: R_386_32	Device::detect()
	10006b30: R_386_32	Device::disableLegacy()
	10006b34: R_386_32	Device::powerSaving(PowerSavingLevel)
	10006b38: R_386_32	SoundBlaster16::beginPlayback()
	10006b3c: R_386_32	SoundBlaster16::stopPlayback()
