
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 74 57 00 10       	push   0x10005774	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	56                   	push   esi
1000008f:	b0 01                	mov    al,0x1
10000091:	53                   	push   ebx
10000092:	bb 26 02 00 00       	mov    ebx,0x226
10000097:	83 ec 10             	sub    esp,0x10
1000009a:	89 da                	mov    edx,ebx
1000009c:	ee                   	out    dx,al
1000009d:	6a 1e                	push   0x1e
1000009f:	e8 fc ff ff ff       	call   100000a0 <ISA::doSoundblaster()+0x12>	100000a0: R_386_PC32	milliTenthSleep(unsigned int)
100000a4:	31 c0                	xor    eax,eax
100000a6:	89 da                	mov    edx,ebx
100000a8:	ee                   	out    dx,al
100000a9:	ba 2a 02 00 00       	mov    edx,0x22a
100000ae:	ec                   	in     al,dx
100000af:	83 c4 10             	add    esp,0x10
100000b2:	3c aa                	cmp    al,0xaa
100000b4:	0f 85 83 00 00 00    	jne    1000013d <ISA::doSoundblaster()+0xaf>
100000ba:	83 ec 0c             	sub    esp,0xc
100000bd:	68 7c 57 00 10       	push   0x1000577c	100000be: R_386_32	.text
100000c2:	e8 fc ff ff ff       	call   100000c3 <ISA::doSoundblaster()+0x35>	100000c3: R_386_PC32	KeSetBootMessage(char const*)
100000c7:	c7 04 24 fc 01 00 00 	mov    DWORD PTR [esp],0x1fc
100000ce:	e8 fc ff ff ff       	call   100000cf <ISA::doSoundblaster()+0x41>	100000cf: R_386_PC32	malloc
100000d3:	89 04 24             	mov    DWORD PTR [esp],eax
100000d6:	89 c3                	mov    ebx,eax
100000d8:	e8 fc ff ff ff       	call   100000d9 <ISA::doSoundblaster()+0x4b>	100000d9: R_386_PC32	SoundBlaster16::SoundBlaster16()
100000dd:	5a                   	pop    edx
100000de:	59                   	pop    ecx
100000df:	53                   	push   ebx
100000e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000e4:	e8 fc ff ff ff       	call   100000e5 <ISA::doSoundblaster()+0x57>	100000e5: R_386_PC32	Device::addChild(Device*)
100000e9:	6a 00                	push   0x0
100000eb:	6a 00                	push   0x0
100000ed:	6a 00                	push   0x0
100000ef:	53                   	push   ebx
100000f0:	e8 fc ff ff ff       	call   100000f1 <ISA::doSoundblaster()+0x63>	100000f1: R_386_PC32	SoundBlaster16::_open(int, int, void*)
100000f5:	83 c4 14             	add    esp,0x14
100000f8:	68 14 01 00 00       	push   0x114
100000fd:	e8 fc ff ff ff       	call   100000fe <ISA::doSoundblaster()+0x70>	100000fe: R_386_PC32	malloc
10000102:	83 c4 0c             	add    esp,0xc
10000105:	89 c6                	mov    esi,eax
10000107:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000109: R_386_32	kernelProcess
1000010d:	68 9c 57 00 10       	push   0x1000579c	1000010e: R_386_32	.text
10000112:	50                   	push   eax
10000113:	e8 fc ff ff ff       	call   10000114 <ISA::doSoundblaster()+0x86>	10000114: R_386_PC32	File::File(char const*, Process*)
10000118:	89 34 24             	mov    DWORD PTR [esp],esi
1000011b:	e8 fc ff ff ff       	call   1000011c <ISA::doSoundblaster()+0x8e>	1000011c: R_386_PC32	File::exists()
10000120:	83 c4 10             	add    esp,0x10
10000123:	84 c0                	test   al,al
10000125:	74 16                	je     1000013d <ISA::doSoundblaster()+0xaf>
10000127:	6a 6f                	push   0x6f
10000129:	53                   	push   ebx
1000012a:	68 00 00 00 00       	push   0x0	1000012b: R_386_32	sb16Demo(void*)
1000012f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000131: R_386_32	kernelProcess
10000135:	e8 fc ff ff ff       	call   10000136 <ISA::doSoundblaster()+0xa8>	10000136: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000013a:	83 c4 10             	add    esp,0x10
1000013d:	58                   	pop    eax
1000013e:	5b                   	pop    ebx
1000013f:	5e                   	pop    esi
10000140:	c3                   	ret    
10000141:	90                   	nop

10000142 <ISA::doSerial()>:
10000142:	c3                   	ret    
10000143:	90                   	nop

10000144 <ISA::doParallel()>:
10000144:	c3                   	ret    
10000145:	90                   	nop

10000146 <ISA::doGameport()>:
10000146:	53                   	push   ebx
10000147:	83 ec 14             	sub    esp,0x14
1000014a:	68 ba 57 00 10       	push   0x100057ba	1000014b: R_386_32	.text
1000014f:	e8 fc ff ff ff       	call   10000150 <ISA::doGameport()+0xa>	10000150: R_386_PC32	KeSetBootMessage(char const*)
10000154:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
1000015b:	e8 fc ff ff ff       	call   1000015c <ISA::doGameport()+0x16>	1000015c: R_386_PC32	malloc
10000160:	89 04 24             	mov    DWORD PTR [esp],eax
10000163:	89 c3                	mov    ebx,eax
10000165:	e8 fc ff ff ff       	call   10000166 <ISA::doGameport()+0x20>	10000166: R_386_PC32	Gameport::Gameport()
1000016a:	58                   	pop    eax
1000016b:	5a                   	pop    edx
1000016c:	53                   	push   ebx
1000016d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000171:	e8 fc ff ff ff       	call   10000172 <ISA::doGameport()+0x2c>	10000172: R_386_PC32	Device::addChild(Device*)
10000176:	6a 00                	push   0x0
10000178:	8b 03                	mov    eax,DWORD PTR [ebx]
1000017a:	6a 00                	push   0x0
1000017c:	6a 00                	push   0x0
1000017e:	53                   	push   ebx
1000017f:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000182:	83 c4 28             	add    esp,0x28
10000185:	5b                   	pop    ebx
10000186:	c3                   	ret    
10000187:	90                   	nop

10000188 <ISA::doFloppy()>:
10000188:	f6 05 01 00 00 00 20 	test   BYTE PTR ds:0x1,0x20	1000018a: R_386_32	sysBootSettings
1000018f:	74 54                	je     100001e5 <ISA::doFloppy()+0x5d>
10000191:	53                   	push   ebx
10000192:	83 ec 14             	sub    esp,0x14
10000195:	68 d6 57 00 10       	push   0x100057d6	10000196: R_386_32	.text
1000019a:	e8 fc ff ff ff       	call   1000019b <ISA::doFloppy()+0x13>	1000019b: R_386_PC32	KeSetBootMessage(char const*)
1000019f:	83 c4 10             	add    esp,0x10
100001a2:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
100001a9:	74 35                	je     100001e0 <ISA::doFloppy()+0x58>
100001ab:	83 ec 0c             	sub    esp,0xc
100001ae:	68 b8 01 00 00       	push   0x1b8
100001b3:	e8 fc ff ff ff       	call   100001b4 <ISA::doFloppy()+0x2c>	100001b4: R_386_PC32	malloc
100001b8:	89 04 24             	mov    DWORD PTR [esp],eax
100001bb:	89 c3                	mov    ebx,eax
100001bd:	e8 fc ff ff ff       	call   100001be <ISA::doFloppy()+0x36>	100001be: R_386_PC32	Floppy::Floppy()
100001c2:	59                   	pop    ecx
100001c3:	58                   	pop    eax
100001c4:	53                   	push   ebx
100001c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001c9:	e8 fc ff ff ff       	call   100001ca <ISA::doFloppy()+0x42>	100001ca: R_386_PC32	Device::addChild(Device*)
100001ce:	6a 00                	push   0x0
100001d0:	6a 00                	push   0x0
100001d2:	68 f0 03 00 00       	push   0x3f0
100001d7:	53                   	push   ebx
100001d8:	e8 fc ff ff ff       	call   100001d9 <ISA::doFloppy()+0x51>	100001d9: R_386_PC32	Floppy::_open(int, int, void*)
100001dd:	83 c4 20             	add    esp,0x20
100001e0:	83 c4 08             	add    esp,0x8
100001e3:	5b                   	pop    ebx
100001e4:	c3                   	ret    
100001e5:	c3                   	ret    

100001e6 <ISA::doATA()>:
100001e6:	c3                   	ret    
100001e7:	90                   	nop

100001e8 <ISA::doPS2()>:
100001e8:	53                   	push   ebx
100001e9:	83 ec 14             	sub    esp,0x14
100001ec:	68 f0 57 00 10       	push   0x100057f0	100001ed: R_386_32	.text
100001f1:	e8 fc ff ff ff       	call   100001f2 <ISA::doPS2()+0xa>	100001f2: R_386_PC32	KeSetBootMessage(char const*)
100001f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100001f9: R_386_32	str_ps2
100001fd:	e8 fc ff ff ff       	call   100001fe <ISA::doPS2()+0x16>	100001fe: R_386_PC32	Dbg::kprintf(char const*, ...)
10000202:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000205: R_386_32	str_ps2
10000209:	e8 fc ff ff ff       	call   1000020a <ISA::doPS2()+0x22>	1000020a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000020e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000211: R_386_32	str_ps2
10000215:	e8 fc ff ff ff       	call   10000216 <ISA::doPS2()+0x2e>	10000216: R_386_PC32	Dbg::kprintf(char const*, ...)
1000021a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000021d: R_386_32	str_ps2
10000221:	e8 fc ff ff ff       	call   10000222 <ISA::doPS2()+0x3a>	10000222: R_386_PC32	Dbg::kprintf(char const*, ...)
10000226:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
1000022d:	e8 fc ff ff ff       	call   1000022e <ISA::doPS2()+0x46>	1000022e: R_386_PC32	malloc
10000232:	89 04 24             	mov    DWORD PTR [esp],eax
10000235:	89 c3                	mov    ebx,eax
10000237:	e8 fc ff ff ff       	call   10000238 <ISA::doPS2()+0x50>	10000238: R_386_PC32	PS2::PS2()
1000023c:	58                   	pop    eax
1000023d:	5a                   	pop    edx
1000023e:	53                   	push   ebx
1000023f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000243:	e8 fc ff ff ff       	call   10000244 <ISA::doPS2()+0x5c>	10000244: R_386_PC32	Device::addChild(Device*)
10000248:	6a 00                	push   0x0
1000024a:	8b 03                	mov    eax,DWORD PTR [ebx]
1000024c:	6a 00                	push   0x0
1000024e:	6a 00                	push   0x0
10000250:	53                   	push   ebx
10000251:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000254:	83 c4 28             	add    esp,0x28
10000257:	5b                   	pop    ebx
10000258:	c3                   	ret    
10000259:	90                   	nop

1000025a <ISA::doRTC()>:
1000025a:	c3                   	ret    
1000025b:	90                   	nop

1000025c <ISA::detect()>:
1000025c:	57                   	push   edi
1000025d:	56                   	push   esi
1000025e:	53                   	push   ebx
1000025f:	83 ec 2c             	sub    esp,0x2c
10000262:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000266:	68 08 58 00 10       	push   0x10005808	10000267: R_386_32	.text
1000026b:	e8 fc ff ff ff       	call   1000026c <ISA::detect()+0x10>	1000026c: R_386_PC32	KeSetBootMessage(char const*)
10000270:	c7 04 24 5c 01 00 00 	mov    DWORD PTR [esp],0x15c
10000277:	e8 fc ff ff ff       	call   10000278 <ISA::detect()+0x1c>	10000278: R_386_PC32	malloc
1000027c:	89 04 24             	mov    DWORD PTR [esp],eax
1000027f:	89 c3                	mov    ebx,eax
10000281:	e8 fc ff ff ff       	call   10000282 <ISA::detect()+0x26>	10000282: R_386_PC32	DMA::DMA()
10000286:	59                   	pop    ecx
10000287:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000289: R_386_32	isaDMAController
1000028d:	5e                   	pop    esi
1000028e:	53                   	push   ebx
1000028f:	57                   	push   edi
10000290:	e8 fc ff ff ff       	call   10000291 <ISA::detect()+0x35>	10000291: R_386_PC32	Device::addChild(Device*)
10000295:	a1 00 00 00 00       	mov    eax,ds:0x0	10000296: R_386_32	isaDMAController
1000029a:	8b 10                	mov    edx,DWORD PTR [eax]
1000029c:	6a 00                	push   0x0
1000029e:	6a 00                	push   0x0
100002a0:	6a 00                	push   0x0
100002a2:	50                   	push   eax
100002a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
100002a6:	83 c4 20             	add    esp,0x20
100002a9:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100002ab: R_386_32	detectDone
100002b0:	0f 85 fb 00 00 00    	jne    100003b1 <ISA::detect()+0x155>
100002b6:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100002b8: R_386_32	detectDone
100002bd:	31 db                	xor    ebx,ebx
100002bf:	52                   	push   edx
100002c0:	6a 01                	push   0x1
100002c2:	68 00 00 00 00       	push   0x0	100002c3: R_386_32	str_isadonesafe
100002c7:	68 00 00 00 00       	push   0x0	100002c8: R_386_32	str_isa
100002cc:	e8 fc ff ff ff       	call   100002cd <ISA::detect()+0x71>	100002cd: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100002d1:	83 c4 10             	add    esp,0x10
100002d4:	50                   	push   eax
100002d5:	50                   	push   eax
100002d6:	68 00 00 00 00       	push   0x0	100002d7: R_386_32	str_devices
100002db:	8d 74 24 0c          	lea    esi,[esp+0xc]
100002df:	56                   	push   esi
100002e0:	e8 fc ff ff ff       	call   100002e1 <ISA::detect()+0x85>	100002e1: R_386_PC32	strcpy
100002e5:	83 c4 10             	add    esp,0x10
100002e8:	85 db                	test   ebx,ebx
100002ea:	75 09                	jne    100002f5 <ISA::detect()+0x99>
100002ec:	50                   	push   eax
100002ed:	50                   	push   eax
100002ee:	68 00 00 00 00       	push   0x0	100002ef: R_386_32	str_spk
100002f3:	eb 52                	jmp    10000347 <ISA::detect()+0xeb>
100002f5:	83 fb 01             	cmp    ebx,0x1
100002f8:	75 09                	jne    10000303 <ISA::detect()+0xa7>
100002fa:	50                   	push   eax
100002fb:	50                   	push   eax
100002fc:	68 00 00 00 00       	push   0x0	100002fd: R_386_32	str_rtc
10000301:	eb 44                	jmp    10000347 <ISA::detect()+0xeb>
10000303:	83 fb 02             	cmp    ebx,0x2
10000306:	75 09                	jne    10000311 <ISA::detect()+0xb5>
10000308:	50                   	push   eax
10000309:	50                   	push   eax
1000030a:	68 00 00 00 00       	push   0x0	1000030b: R_386_32	str_ps2
1000030f:	eb 36                	jmp    10000347 <ISA::detect()+0xeb>
10000311:	83 fb 03             	cmp    ebx,0x3
10000314:	75 09                	jne    1000031f <ISA::detect()+0xc3>
10000316:	50                   	push   eax
10000317:	50                   	push   eax
10000318:	68 00 00 00 00       	push   0x0	10000319: R_386_32	str_floppy
1000031d:	eb 28                	jmp    10000347 <ISA::detect()+0xeb>
1000031f:	83 fb 04             	cmp    ebx,0x4
10000322:	75 09                	jne    1000032d <ISA::detect()+0xd1>
10000324:	50                   	push   eax
10000325:	50                   	push   eax
10000326:	68 00 00 00 00       	push   0x0	10000327: R_386_32	str_sb16
1000032b:	eb 1a                	jmp    10000347 <ISA::detect()+0xeb>
1000032d:	83 fb 05             	cmp    ebx,0x5
10000330:	75 09                	jne    1000033b <ISA::detect()+0xdf>
10000332:	51                   	push   ecx
10000333:	51                   	push   ecx
10000334:	68 00 00 00 00       	push   0x0	10000335: R_386_32	str_isaata
10000339:	eb 0c                	jmp    10000347 <ISA::detect()+0xeb>
1000033b:	83 fb 06             	cmp    ebx,0x6
1000033e:	75 10                	jne    10000350 <ISA::detect()+0xf4>
10000340:	52                   	push   edx
10000341:	52                   	push   edx
10000342:	68 00 00 00 00       	push   0x0	10000343: R_386_32	str_gp
10000347:	56                   	push   esi
10000348:	e8 fc ff ff ff       	call   10000349 <ISA::detect()+0xed>	10000349: R_386_PC32	strcat
1000034d:	83 c4 10             	add    esp,0x10
10000350:	50                   	push   eax
10000351:	6a ff                	push   0xffffffff
10000353:	56                   	push   esi
10000354:	68 00 00 00 00       	push   0x0	10000355: R_386_32	str_isa
10000359:	e8 fc ff ff ff       	call   1000035a <ISA::detect()+0xfe>	1000035a: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000035e:	83 c4 10             	add    esp,0x10
10000361:	83 f8 fe             	cmp    eax,0xfffffffe
10000364:	74 41                	je     100003a7 <ISA::detect()+0x14b>
10000366:	83 fb 02             	cmp    ebx,0x2
10000369:	75 0b                	jne    10000376 <ISA::detect()+0x11a>
1000036b:	83 ec 0c             	sub    esp,0xc
1000036e:	57                   	push   edi
1000036f:	e8 fc ff ff ff       	call   10000370 <ISA::detect()+0x114>	10000370: R_386_PC32	ISA::doPS2()
10000374:	eb 2e                	jmp    100003a4 <ISA::detect()+0x148>
10000376:	83 fb 03             	cmp    ebx,0x3
10000379:	75 0b                	jne    10000386 <ISA::detect()+0x12a>
1000037b:	83 ec 0c             	sub    esp,0xc
1000037e:	57                   	push   edi
1000037f:	e8 fc ff ff ff       	call   10000380 <ISA::detect()+0x124>	10000380: R_386_PC32	ISA::doFloppy()
10000384:	eb 1e                	jmp    100003a4 <ISA::detect()+0x148>
10000386:	83 fb 04             	cmp    ebx,0x4
10000389:	75 0b                	jne    10000396 <ISA::detect()+0x13a>
1000038b:	83 ec 0c             	sub    esp,0xc
1000038e:	57                   	push   edi
1000038f:	e8 fc ff ff ff       	call   10000390 <ISA::detect()+0x134>	10000390: R_386_PC32	ISA::doSoundblaster()
10000394:	eb 0e                	jmp    100003a4 <ISA::detect()+0x148>
10000396:	83 fb 06             	cmp    ebx,0x6
10000399:	75 0c                	jne    100003a7 <ISA::detect()+0x14b>
1000039b:	83 ec 0c             	sub    esp,0xc
1000039e:	57                   	push   edi
1000039f:	e8 fc ff ff ff       	call   100003a0 <ISA::detect()+0x144>	100003a0: R_386_PC32	ISA::doGameport()
100003a4:	83 c4 10             	add    esp,0x10
100003a7:	43                   	inc    ebx
100003a8:	83 fb 07             	cmp    ebx,0x7
100003ab:	0f 85 23 ff ff ff    	jne    100002d4 <ISA::detect()+0x78>
100003b1:	83 c4 20             	add    esp,0x20
100003b4:	5b                   	pop    ebx
100003b5:	5e                   	pop    esi
100003b6:	5f                   	pop    edi
100003b7:	c3                   	ret    

100003b8 <floppyMotorFunction(void*)>:
100003b8:	55                   	push   ebp
100003b9:	89 e5                	mov    ebp,esp
100003bb:	83 ec 18             	sub    esp,0x18
100003be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100003c4:	a1 00 00 00 00       	mov    eax,ds:0x0	100003c5: R_386_32	irqDisableCounter
100003c9:	48                   	dec    eax
100003ca:	a3 00 00 00 00       	mov    ds:0x0,eax	100003cb: R_386_32	irqDisableCounter
100003cf:	a1 00 00 00 00       	mov    eax,ds:0x0	100003d0: R_386_32	irqDisableCounter
100003d4:	85 c0                	test   eax,eax
100003d6:	75 01                	jne    100003d9 <floppyMotorFunction(void*)+0x21>
100003d8:	fb                   	sti    
100003d9:	83 ec 0c             	sub    esp,0xc
100003dc:	68 a0 0f 00 00       	push   0xfa0
100003e1:	e8 fc ff ff ff       	call   100003e2 <floppyMotorFunction(void*)+0x2a>	100003e2: R_386_PC32	milliTenthSleep(unsigned int)
100003e6:	83 c4 10             	add    esp,0x10
100003e9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100003f0:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100003f4:	7f e3                	jg     100003d9 <floppyMotorFunction(void*)+0x21>
100003f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003f9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100003fc:	83 c2 58             	add    edx,0x58
100003ff:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000403:	83 f8 02             	cmp    eax,0x2
10000406:	0f 85 b5 00 00 00    	jne    100004c1 <floppyMotorFunction(void*)+0x109>
1000040c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000040f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000412:	83 c2 5c             	add    edx,0x5c
10000415:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000419:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
1000041f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000422:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000425:	83 c2 5c             	add    edx,0x5c
10000428:	89 4c 90 0c          	mov    DWORD PTR [eax+edx*4+0xc],ecx
1000042c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000042f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000432:	83 c2 5c             	add    edx,0x5c
10000435:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000439:	85 c0                	test   eax,eax
1000043b:	0f 8f 80 00 00 00    	jg     100004c1 <floppyMotorFunction(void*)+0x109>
10000441:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000444:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000447:	83 c2 58             	add    edx,0x58
1000044a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000452:	83 ec 0c             	sub    esp,0xc
10000455:	68 ec 58 00 10       	push   0x100058ec	10000456: R_386_32	.text
1000045a:	e8 fc ff ff ff       	call   1000045b <floppyMotorFunction(void*)+0xa3>	1000045b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000045f:	83 c4 10             	add    esp,0x10
10000462:	fa                   	cli    
10000463:	a1 00 00 00 00       	mov    eax,ds:0x0	10000464: R_386_32	irqDisableCounter
10000468:	40                   	inc    eax
10000469:	a3 00 00 00 00       	mov    ds:0x0,eax	1000046a: R_386_32	irqDisableCounter
1000046e:	83 ec 08             	sub    esp,0x8
10000471:	6a 02                	push   0x2
10000473:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000476:	e8 fc ff ff ff       	call   10000477 <floppyMotorFunction(void*)+0xbf>	10000477: R_386_PC32	Floppy::readPort(FloppyReg)
1000047b:	83 c4 10             	add    esp,0x10
1000047e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000481:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000484:	ba 10 00 00 00       	mov    edx,0x10
10000489:	88 c1                	mov    cl,al
1000048b:	d3 e2                	shl    edx,cl
1000048d:	89 d0                	mov    eax,edx
1000048f:	f7 d0                	not    eax
10000491:	88 c2                	mov    dl,al
10000493:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000496:	21 d0                	and    eax,edx
10000498:	0f b6 c0             	movzx  eax,al
1000049b:	83 ec 04             	sub    esp,0x4
1000049e:	50                   	push   eax
1000049f:	6a 02                	push   0x2
100004a1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004a4:	e8 fc ff ff ff       	call   100004a5 <floppyMotorFunction(void*)+0xed>	100004a5: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100004a9:	83 c4 10             	add    esp,0x10
100004ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100004ad: R_386_32	irqDisableCounter
100004b1:	48                   	dec    eax
100004b2:	a3 00 00 00 00       	mov    ds:0x0,eax	100004b3: R_386_32	irqDisableCounter
100004b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100004b8: R_386_32	irqDisableCounter
100004bc:	85 c0                	test   eax,eax
100004be:	75 01                	jne    100004c1 <floppyMotorFunction(void*)+0x109>
100004c0:	fb                   	sti    
100004c1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100004c4:	e9 27 ff ff ff       	jmp    100003f0 <floppyMotorFunction(void*)+0x38>

100004c9 <floppyIRQHandler(regs*, void*)>:
100004c9:	55                   	push   ebp
100004ca:	89 e5                	mov    ebp,esp
100004cc:	83 ec 10             	sub    esp,0x10
100004cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100004d2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100004d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100004d8:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
100004df:	90                   	nop
100004e0:	c9                   	leave  
100004e1:	c3                   	ret    

100004e2 <Floppy::Floppy()>:
100004e2:	55                   	push   ebp
100004e3:	89 e5                	mov    ebp,esp
100004e5:	83 ec 08             	sub    esp,0x8
100004e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004eb:	83 ec 08             	sub    esp,0x8
100004ee:	68 0d 59 00 10       	push   0x1000590d	100004ef: R_386_32	.text
100004f3:	50                   	push   eax
100004f4:	e8 fc ff ff ff       	call   100004f5 <Floppy::Floppy()+0x13>	100004f5: R_386_PC32	HardDiskController::HardDiskController(char const*)
100004f9:	83 c4 10             	add    esp,0x10
100004fc:	ba 08 00 00 00       	mov    edx,0x8	100004fd: R_386_32	vtable for Floppy
10000501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000504:	89 10                	mov    DWORD PTR [eax],edx
10000506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000509:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
10000512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000515:	c6 80 8c 01 00 00 01 	mov    BYTE PTR [eax+0x18c],0x1
1000051c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000051f:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000529:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000533:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
1000053a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000053d:	c6 80 90 01 00 00 01 	mov    BYTE PTR [eax+0x190],0x1
10000544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000547:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
1000054e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000551:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000055b:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000568:	83 ec 0c             	sub    esp,0xc
1000056b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000056e:	6a 01                	push   0x1
10000570:	68 00 00 00 00       	push   0x0	10000571: R_386_32	floppyIRQHandler(regs*, void*)
10000575:	6a 06                	push   0x6
10000577:	50                   	push   eax
10000578:	e8 fc ff ff ff       	call   10000579 <Floppy::Floppy()+0x97>	10000579: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000057d:	83 c4 20             	add    esp,0x20
10000580:	89 c2                	mov    edx,eax
10000582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000585:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
1000058b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000058c: R_386_32	kernelProcess
10000590:	68 d2 00 00 00       	push   0xd2
10000595:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000598:	68 00 00 00 00       	push   0x0	10000599: R_386_32	floppyMotorFunction(void*)
1000059d:	50                   	push   eax
1000059e:	e8 fc ff ff ff       	call   1000059f <Floppy::Floppy()+0xbd>	1000059f: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100005a3:	83 c4 10             	add    esp,0x10
100005a6:	89 c2                	mov    edx,eax
100005a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ab:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100005b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100005b2: R_386_32	isaDMAController
100005b6:	83 ec 08             	sub    esp,0x8
100005b9:	6a 02                	push   0x2
100005bb:	50                   	push   eax
100005bc:	e8 fc ff ff ff       	call   100005bd <Floppy::Floppy()+0xdb>	100005bd: R_386_PC32	DMA::tryLockChannel(int)
100005c1:	83 c4 10             	add    esp,0x10
100005c4:	89 c2                	mov    edx,eax
100005c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
100005cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d2:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100005d8:	83 ec 08             	sub    esp,0x8
100005db:	68 00 48 00 00       	push   0x4800
100005e0:	50                   	push   eax
100005e1:	e8 fc ff ff ff       	call   100005e2 <Floppy::Floppy()+0x100>	100005e2: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100005e6:	83 c4 10             	add    esp,0x10
100005e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ec:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100005f2:	83 ec 0c             	sub    esp,0xc
100005f5:	50                   	push   eax
100005f6:	e8 fc ff ff ff       	call   100005f7 <Floppy::Floppy()+0x115>	100005f7: R_386_PC32	DMAChannel::getAddress()
100005fb:	83 c4 10             	add    esp,0x10
100005fe:	89 c2                	mov    edx,eax
10000600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000603:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
10000609:	90                   	nop
1000060a:	c9                   	leave  
1000060b:	c3                   	ret    

1000060c <Floppy::wasFailure()>:
1000060c:	55                   	push   ebp
1000060d:	89 e5                	mov    ebp,esp
1000060f:	83 ec 10             	sub    esp,0x10
10000612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000615:	c6 80 8f 01 00 00 01 	mov    BYTE PTR [eax+0x18f],0x1
1000061c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000061f:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000625:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000062b:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000632:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
10000635:	c9                   	leave  
10000636:	c3                   	ret    
10000637:	90                   	nop

10000638 <Floppy::writeCommand(unsigned char)>:
10000638:	55                   	push   ebp
10000639:	89 e5                	mov    ebp,esp
1000063b:	83 ec 28             	sub    esp,0x28
1000063e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000641:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000647:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
1000064d:	84 c0                	test   al,al
1000064f:	74 10                	je     10000661 <Floppy::writeCommand(unsigned char)+0x29>
10000651:	83 ec 0c             	sub    esp,0xc
10000654:	68 24 59 00 10       	push   0x10005924	10000655: R_386_32	.text
10000659:	e8 fc ff ff ff       	call   1000065a <Floppy::writeCommand(unsigned char)+0x22>	1000065a: R_386_PC32	KePanic(char const*)
1000065e:	83 c4 10             	add    esp,0x10
10000661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000664:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
1000066a:	83 f0 01             	xor    eax,0x1
1000066d:	84 c0                	test   al,al
1000066f:	74 10                	je     10000681 <Floppy::writeCommand(unsigned char)+0x49>
10000671:	83 ec 0c             	sub    esp,0xc
10000674:	68 54 59 00 10       	push   0x10005954	10000675: R_386_32	.text
10000679:	e8 fc ff ff ff       	call   1000067a <Floppy::writeCommand(unsigned char)+0x42>	1000067a: R_386_PC32	KePanic(char const*)
1000067e:	83 c4 10             	add    esp,0x10
10000681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000684:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
1000068b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000068e:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000695:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000069c:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
100006a0:	7f 4e                	jg     100006f0 <Floppy::writeCommand(unsigned char)+0xb8>
100006a2:	83 ec 0c             	sub    esp,0xc
100006a5:	6a 64                	push   0x64
100006a7:	e8 fc ff ff ff       	call   100006a8 <Floppy::writeCommand(unsigned char)+0x70>	100006a8: R_386_PC32	milliTenthSleep(unsigned int)
100006ac:	83 c4 10             	add    esp,0x10
100006af:	83 ec 08             	sub    esp,0x8
100006b2:	6a 04                	push   0x4
100006b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006b7:	e8 fc ff ff ff       	call   100006b8 <Floppy::writeCommand(unsigned char)+0x80>	100006b8: R_386_PC32	Floppy::readPort(FloppyReg)
100006bc:	83 c4 10             	add    esp,0x10
100006bf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100006c2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100006c5:	84 c0                	test   al,al
100006c7:	79 22                	jns    100006eb <Floppy::writeCommand(unsigned char)+0xb3>
100006c9:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100006cd:	83 e0 40             	and    eax,0x40
100006d0:	85 c0                	test   eax,eax
100006d2:	75 17                	jne    100006eb <Floppy::writeCommand(unsigned char)+0xb3>
100006d4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100006d8:	83 ec 04             	sub    esp,0x4
100006db:	50                   	push   eax
100006dc:	6a 05                	push   0x5
100006de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006e1:	e8 fc ff ff ff       	call   100006e2 <Floppy::writeCommand(unsigned char)+0xaa>	100006e2: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100006e6:	83 c4 10             	add    esp,0x10
100006e9:	eb 0f                	jmp    100006fa <Floppy::writeCommand(unsigned char)+0xc2>
100006eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100006ee:	eb ac                	jmp    1000069c <Floppy::writeCommand(unsigned char)+0x64>
100006f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006f3:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100006fa:	c9                   	leave  
100006fb:	c3                   	ret    

100006fc <Floppy::readData()>:
100006fc:	55                   	push   ebp
100006fd:	89 e5                	mov    ebp,esp
100006ff:	83 ec 18             	sub    esp,0x18
10000702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000705:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
1000070b:	84 c0                	test   al,al
1000070d:	74 10                	je     1000071f <Floppy::readData()+0x23>
1000070f:	83 ec 0c             	sub    esp,0xc
10000712:	68 24 59 00 10       	push   0x10005924	10000713: R_386_32	.text
10000717:	e8 fc ff ff ff       	call   10000718 <Floppy::readData()+0x1c>	10000718: R_386_PC32	KePanic(char const*)
1000071c:	83 c4 10             	add    esp,0x10
1000071f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000722:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
10000728:	83 f0 01             	xor    eax,0x1
1000072b:	84 c0                	test   al,al
1000072d:	74 10                	je     1000073f <Floppy::readData()+0x43>
1000072f:	83 ec 0c             	sub    esp,0xc
10000732:	68 54 59 00 10       	push   0x10005954	10000733: R_386_32	.text
10000737:	e8 fc ff ff ff       	call   10000738 <Floppy::readData()+0x3c>	10000738: R_386_PC32	KePanic(char const*)
1000073c:	83 c4 10             	add    esp,0x10
1000073f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000742:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000074c:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000753:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000075a:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000075e:	7f 49                	jg     100007a9 <Floppy::readData()+0xad>
10000760:	83 ec 0c             	sub    esp,0xc
10000763:	6a 64                	push   0x64
10000765:	e8 fc ff ff ff       	call   10000766 <Floppy::readData()+0x6a>	10000766: R_386_PC32	milliTenthSleep(unsigned int)
1000076a:	83 c4 10             	add    esp,0x10
1000076d:	83 ec 08             	sub    esp,0x8
10000770:	6a 04                	push   0x4
10000772:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000775:	e8 fc ff ff ff       	call   10000776 <Floppy::readData()+0x7a>	10000776: R_386_PC32	Floppy::readPort(FloppyReg)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000780:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000783:	84 c0                	test   al,al
10000785:	79 1d                	jns    100007a4 <Floppy::readData()+0xa8>
10000787:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
1000078b:	83 e0 40             	and    eax,0x40
1000078e:	85 c0                	test   eax,eax
10000790:	74 12                	je     100007a4 <Floppy::readData()+0xa8>
10000792:	83 ec 08             	sub    esp,0x8
10000795:	6a 05                	push   0x5
10000797:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000079a:	e8 fc ff ff ff       	call   1000079b <Floppy::readData()+0x9f>	1000079b: R_386_PC32	Floppy::readPort(FloppyReg)
1000079f:	83 c4 10             	add    esp,0x10
100007a2:	eb 11                	jmp    100007b5 <Floppy::readData()+0xb9>
100007a4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100007a7:	eb b1                	jmp    1000075a <Floppy::readData()+0x5e>
100007a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007ac:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100007b3:	b0 00                	mov    al,0x0
100007b5:	c9                   	leave  
100007b6:	c3                   	ret    
100007b7:	90                   	nop

100007b8 <Floppy::readPort(FloppyReg)>:
100007b8:	55                   	push   ebp
100007b9:	89 e5                	mov    ebp,esp
100007bb:	83 ec 10             	sub    esp,0x10
100007be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100007c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100007ca:	01 d0                	add    eax,edx
100007cc:	0f b7 c0             	movzx  eax,ax
100007cf:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100007d3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100007d7:	89 c2                	mov    edx,eax
100007d9:	ec                   	in     al,dx
100007da:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100007dd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100007e0:	90                   	nop
100007e1:	c9                   	leave  
100007e2:	c3                   	ret    
100007e3:	90                   	nop

100007e4 <Floppy::writePort(FloppyReg, unsigned char)>:
100007e4:	55                   	push   ebp
100007e5:	89 e5                	mov    ebp,esp
100007e7:	83 ec 14             	sub    esp,0x14
100007ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100007ed:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100007f0:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100007f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007f7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100007fd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000800:	01 d0                	add    eax,edx
10000802:	0f b7 c0             	movzx  eax,ax
10000805:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000809:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
1000080c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
1000080f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
10000813:	ee                   	out    dx,al
10000814:	90                   	nop
10000815:	c9                   	leave  
10000816:	c3                   	ret    
10000817:	90                   	nop

10000818 <Floppy::driveDetection()>:
10000818:	55                   	push   ebp
10000819:	89 e5                	mov    ebp,esp
1000081b:	53                   	push   ebx
1000081c:	83 ec 24             	sub    esp,0x24
1000081f:	83 ec 0c             	sub    esp,0xc
10000822:	68 82 59 00 10       	push   0x10005982	10000823: R_386_32	.text
10000827:	e8 fc ff ff ff       	call   10000828 <Floppy::driveDetection()+0x10>	10000828: R_386_PC32	Dbg::kprintf(char const*, ...)
1000082c:	83 c4 10             	add    esp,0x10
1000082f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000832:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000838:	66 3d f0 03          	cmp    ax,0x3f0
1000083c:	0f 85 28 01 00 00    	jne    1000096a <Floppy::driveDetection()+0x152>
10000842:	a1 00 00 00 00       	mov    eax,ds:0x0	10000843: R_386_32	Krnl::computer
10000847:	83 ec 08             	sub    esp,0x8
1000084a:	6a 10                	push   0x10
1000084c:	50                   	push   eax
1000084d:	e8 fc ff ff ff       	call   1000084e <Floppy::driveDetection()+0x36>	1000084e: R_386_PC32	Computer::readCMOS(unsigned char)
10000852:	83 c4 10             	add    esp,0x10
10000855:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000858:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000085c:	c1 f8 04             	sar    eax,0x4
1000085f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000862:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000866:	83 e0 0f             	and    eax,0xf
10000869:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000086c:	83 ec 08             	sub    esp,0x8
1000086f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000872:	68 9c 59 00 10       	push   0x1000599c	10000873: R_386_32	.text
10000877:	e8 fc ff ff ff       	call   10000878 <Floppy::driveDetection()+0x60>	10000878: R_386_PC32	Dbg::kprintf(char const*, ...)
1000087c:	83 c4 10             	add    esp,0x10
1000087f:	83 ec 08             	sub    esp,0x8
10000882:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000885:	68 b0 59 00 10       	push   0x100059b0	10000886: R_386_32	.text
1000088a:	e8 fc ff ff ff       	call   1000088b <Floppy::driveDetection()+0x73>	1000088b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000088f:	83 c4 10             	add    esp,0x10
10000892:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000896:	74 63                	je     100008fb <Floppy::driveDetection()+0xe3>
10000898:	c7 45 e0 74 01 00 00 	mov    DWORD PTR [ebp-0x20],0x174
1000089f:	83 ec 0c             	sub    esp,0xc
100008a2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100008a5:	e8 fc ff ff ff       	call   100008a6 <Floppy::driveDetection()+0x8e>	100008a6: R_386_PC32	malloc
100008aa:	83 c4 10             	add    esp,0x10
100008ad:	89 c3                	mov    ebx,eax
100008af:	83 ec 0c             	sub    esp,0xc
100008b2:	53                   	push   ebx
100008b3:	e8 fc ff ff ff       	call   100008b4 <Floppy::driveDetection()+0x9c>	100008b4: R_386_PC32	FloppyDrive::FloppyDrive()
100008b8:	83 c4 10             	add    esp,0x10
100008bb:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
100008be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100008c4:	89 90 98 01 00 00    	mov    DWORD PTR [eax+0x198],edx
100008ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008cd:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
100008d0:	89 90 a8 01 00 00    	mov    DWORD PTR [eax+0x1a8],edx
100008d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d9:	83 ec 08             	sub    esp,0x8
100008dc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100008df:	50                   	push   eax
100008e0:	e8 fc ff ff ff       	call   100008e1 <Floppy::driveDetection()+0xc9>	100008e1: R_386_PC32	Device::addChild(Device*)
100008e5:	83 c4 10             	add    esp,0x10
100008e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008eb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008ee:	6a 00                	push   0x0
100008f0:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100008f3:	e8 fc ff ff ff       	call   100008f4 <Floppy::driveDetection()+0xdc>	100008f4: R_386_PC32	FloppyDrive::_open(int, int, void*)
100008f8:	83 c4 10             	add    esp,0x10
100008fb:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100008ff:	74 69                	je     1000096a <Floppy::driveDetection()+0x152>
10000901:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10000905:	74 63                	je     1000096a <Floppy::driveDetection()+0x152>
10000907:	c7 45 dc 74 01 00 00 	mov    DWORD PTR [ebp-0x24],0x174
1000090e:	83 ec 0c             	sub    esp,0xc
10000911:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000914:	e8 fc ff ff ff       	call   10000915 <Floppy::driveDetection()+0xfd>	10000915: R_386_PC32	malloc
10000919:	83 c4 10             	add    esp,0x10
1000091c:	89 c3                	mov    ebx,eax
1000091e:	83 ec 0c             	sub    esp,0xc
10000921:	53                   	push   ebx
10000922:	e8 fc ff ff ff       	call   10000923 <Floppy::driveDetection()+0x10b>	10000923: R_386_PC32	FloppyDrive::FloppyDrive()
10000927:	83 c4 10             	add    esp,0x10
1000092a:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
1000092d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000930:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000933:	89 90 9c 01 00 00    	mov    DWORD PTR [eax+0x19c],edx
10000939:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000093f:	89 90 ac 01 00 00    	mov    DWORD PTR [eax+0x1ac],edx
10000945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000948:	83 ec 08             	sub    esp,0x8
1000094b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000094e:	50                   	push   eax
1000094f:	e8 fc ff ff ff       	call   10000950 <Floppy::driveDetection()+0x138>	10000950: R_386_PC32	Device::addChild(Device*)
10000954:	83 c4 10             	add    esp,0x10
10000957:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000095a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000095d:	6a 01                	push   0x1
1000095f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000962:	e8 fc ff ff ff       	call   10000963 <Floppy::driveDetection()+0x14b>	10000963: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000967:	83 c4 10             	add    esp,0x10
1000096a:	90                   	nop
1000096b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000096e:	c9                   	leave  
1000096f:	c3                   	ret    

10000970 <Floppy::close(int, int, void*)>:
10000970:	b8 00 00 00 00       	mov    eax,0x0
10000975:	c3                   	ret    

10000976 <Floppy::open(int, int, void*)>:
10000976:	b8 00 00 00 00       	mov    eax,0x0
1000097b:	c3                   	ret    

1000097c <Floppy::_open(int, int, void*)>:
1000097c:	55                   	push   ebp
1000097d:	89 e5                	mov    ebp,esp
1000097f:	83 ec 18             	sub    esp,0x18
10000982:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000985:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000988:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
1000098f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000992:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000998:	0f b6 c8             	movzx  ecx,al
1000099b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000099e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100009a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009a7:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100009ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009b5:	0f b6 d0             	movzx  edx,al
100009b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009bb:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
100009c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009c9:	8d 50 01             	lea    edx,[eax+0x1]
100009cc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100009cf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100009d5:	0f b6 d0             	movzx  edx,al
100009d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009db:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100009df:	83 e1 3f             	and    ecx,0x3f
100009e2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100009e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100009ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009f2:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100009f8:	0f b6 ca             	movzx  ecx,dl
100009fb:	83 c0 07             	add    eax,0x7
100009fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a01:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a0f:	0f b6 d0             	movzx  edx,al
10000a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a15:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000a1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a1d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a23:	8d 50 01             	lea    edx,[eax+0x1]
10000a26:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000a29:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000a2f:	0f b6 d0             	movzx  edx,al
10000a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a35:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000a39:	83 e1 3f             	and    ecx,0x3f
10000a3c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000a40:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000a47:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10000a4b:	7f 27                	jg     10000a74 <Floppy::_open(int, int, void*)+0xf8>
10000a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a50:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000a53:	83 c2 68             	add    edx,0x68
10000a56:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
10000a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a61:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000a64:	83 c2 58             	add    edx,0x58
10000a67:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000a6f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000a72:	eb d3                	jmp    10000a47 <Floppy::_open(int, int, void*)+0xcb>
10000a74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a77:	e8 fc ff ff ff       	call   10000a78 <Floppy::_open(int, int, void*)+0xfc>	10000a78: R_386_PC32	Floppy::wasFailure()
10000a7c:	83 c4 04             	add    esp,0x4
10000a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a82:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a8c:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000a93:	83 ec 0c             	sub    esp,0xc
10000a96:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a99:	e8 fc ff ff ff       	call   10000a9a <Floppy::_open(int, int, void*)+0x11e>	10000a9a: R_386_PC32	Floppy::reset()
10000a9e:	83 c4 10             	add    esp,0x10
10000aa1:	83 ec 0c             	sub    esp,0xc
10000aa4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aa7:	e8 fc ff ff ff       	call   10000aa8 <Floppy::_open(int, int, void*)+0x12c>	10000aa8: R_386_PC32	Floppy::driveDetection()
10000aac:	83 c4 10             	add    esp,0x10
10000aaf:	b8 00 00 00 00       	mov    eax,0x0
10000ab4:	c9                   	leave  
10000ab5:	c3                   	ret    

10000ab6 <Floppy::senseInterrupt(int*, int*)>:
10000ab6:	55                   	push   ebp
10000ab7:	89 e5                	mov    ebp,esp
10000ab9:	83 ec 08             	sub    esp,0x8
10000abc:	83 ec 08             	sub    esp,0x8
10000abf:	6a 08                	push   0x8
10000ac1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ac4:	e8 fc ff ff ff       	call   10000ac5 <Floppy::senseInterrupt(int*, int*)+0xf>	10000ac5: R_386_PC32	Floppy::writeCommand(unsigned char)
10000ac9:	83 c4 10             	add    esp,0x10
10000acc:	83 ec 0c             	sub    esp,0xc
10000acf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ad2:	e8 fc ff ff ff       	call   10000ad3 <Floppy::senseInterrupt(int*, int*)+0x1d>	10000ad3: R_386_PC32	Floppy::wasFailure()
10000ad7:	83 c4 10             	add    esp,0x10
10000ada:	84 c0                	test   al,al
10000adc:	74 04                	je     10000ae2 <Floppy::senseInterrupt(int*, int*)+0x2c>
10000ade:	b0 00                	mov    al,0x0
10000ae0:	eb 5a                	jmp    10000b3c <Floppy::senseInterrupt(int*, int*)+0x86>
10000ae2:	83 ec 0c             	sub    esp,0xc
10000ae5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ae8:	e8 fc ff ff ff       	call   10000ae9 <Floppy::senseInterrupt(int*, int*)+0x33>	10000ae9: R_386_PC32	Floppy::readData()
10000aed:	83 c4 10             	add    esp,0x10
10000af0:	0f b6 d0             	movzx  edx,al
10000af3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000af6:	89 10                	mov    DWORD PTR [eax],edx
10000af8:	83 ec 0c             	sub    esp,0xc
10000afb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000afe:	e8 fc ff ff ff       	call   10000aff <Floppy::senseInterrupt(int*, int*)+0x49>	10000aff: R_386_PC32	Floppy::wasFailure()
10000b03:	83 c4 10             	add    esp,0x10
10000b06:	84 c0                	test   al,al
10000b08:	74 04                	je     10000b0e <Floppy::senseInterrupt(int*, int*)+0x58>
10000b0a:	b0 00                	mov    al,0x0
10000b0c:	eb 2e                	jmp    10000b3c <Floppy::senseInterrupt(int*, int*)+0x86>
10000b0e:	83 ec 0c             	sub    esp,0xc
10000b11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b14:	e8 fc ff ff ff       	call   10000b15 <Floppy::senseInterrupt(int*, int*)+0x5f>	10000b15: R_386_PC32	Floppy::readData()
10000b19:	83 c4 10             	add    esp,0x10
10000b1c:	0f b6 d0             	movzx  edx,al
10000b1f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000b22:	89 10                	mov    DWORD PTR [eax],edx
10000b24:	83 ec 0c             	sub    esp,0xc
10000b27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b2a:	e8 fc ff ff ff       	call   10000b2b <Floppy::senseInterrupt(int*, int*)+0x75>	10000b2b: R_386_PC32	Floppy::wasFailure()
10000b2f:	83 c4 10             	add    esp,0x10
10000b32:	84 c0                	test   al,al
10000b34:	74 04                	je     10000b3a <Floppy::senseInterrupt(int*, int*)+0x84>
10000b36:	b0 00                	mov    al,0x0
10000b38:	eb 02                	jmp    10000b3c <Floppy::senseInterrupt(int*, int*)+0x86>
10000b3a:	b0 01                	mov    al,0x1
10000b3c:	c9                   	leave  
10000b3d:	c3                   	ret    

10000b3e <Floppy::lock()>:
10000b3e:	55                   	push   ebp
10000b3f:	89 e5                	mov    ebp,esp
10000b41:	83 ec 08             	sub    esp,0x8
10000b44:	83 ec 08             	sub    esp,0x8
10000b47:	6a 14                	push   0x14
10000b49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b4c:	e8 fc ff ff ff       	call   10000b4d <Floppy::lock()+0xf>	10000b4d: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b51:	83 c4 10             	add    esp,0x10
10000b54:	83 ec 0c             	sub    esp,0xc
10000b57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b5a:	e8 fc ff ff ff       	call   10000b5b <Floppy::lock()+0x1d>	10000b5b: R_386_PC32	Floppy::wasFailure()
10000b5f:	83 c4 10             	add    esp,0x10
10000b62:	84 c0                	test   al,al
10000b64:	74 04                	je     10000b6a <Floppy::lock()+0x2c>
10000b66:	b0 00                	mov    al,0x0
10000b68:	eb 26                	jmp    10000b90 <Floppy::lock()+0x52>
10000b6a:	83 ec 0c             	sub    esp,0xc
10000b6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b70:	e8 fc ff ff ff       	call   10000b71 <Floppy::lock()+0x33>	10000b71: R_386_PC32	Floppy::readData()
10000b75:	83 c4 10             	add    esp,0x10
10000b78:	83 ec 0c             	sub    esp,0xc
10000b7b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b7e:	e8 fc ff ff ff       	call   10000b7f <Floppy::lock()+0x41>	10000b7f: R_386_PC32	Floppy::wasFailure()
10000b83:	83 c4 10             	add    esp,0x10
10000b86:	84 c0                	test   al,al
10000b88:	74 04                	je     10000b8e <Floppy::lock()+0x50>
10000b8a:	b0 00                	mov    al,0x0
10000b8c:	eb 02                	jmp    10000b90 <Floppy::lock()+0x52>
10000b8e:	b0 01                	mov    al,0x1
10000b90:	c9                   	leave  
10000b91:	c3                   	ret    

10000b92 <Floppy::waitIRQ(int)>:
10000b92:	55                   	push   ebp
10000b93:	89 e5                	mov    ebp,esp
10000b95:	83 ec 18             	sub    esp,0x18
10000b98:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ba2:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000ba8:	84 c0                	test   al,al
10000baa:	75 1f                	jne    10000bcb <Floppy::waitIRQ(int)+0x39>
10000bac:	83 ec 0c             	sub    esp,0xc
10000baf:	68 f4 01 00 00       	push   0x1f4
10000bb4:	e8 fc ff ff ff       	call   10000bb5 <Floppy::waitIRQ(int)+0x23>	10000bb5: R_386_PC32	milliTenthSleep(unsigned int)
10000bb9:	83 c4 10             	add    esp,0x10
10000bbc:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
10000bc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000bc3:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000bc6:	7d 02                	jge    10000bca <Floppy::waitIRQ(int)+0x38>
10000bc8:	eb d5                	jmp    10000b9f <Floppy::waitIRQ(int)+0xd>
10000bca:	90                   	nop
10000bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bce:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000bd4:	c9                   	leave  
10000bd5:	c3                   	ret    

10000bd6 <Floppy::reset()>:
10000bd6:	55                   	push   ebp
10000bd7:	89 e5                	mov    ebp,esp
10000bd9:	83 ec 28             	sub    esp,0x28
10000bdc:	83 ec 0c             	sub    esp,0xc
10000bdf:	68 c4 59 00 10       	push   0x100059c4	10000be0: R_386_32	.text
10000be4:	e8 fc ff ff ff       	call   10000be5 <Floppy::reset()+0xf>	10000be5: R_386_PC32	Dbg::kprintf(char const*, ...)
10000be9:	83 c4 10             	add    esp,0x10
10000bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000bf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bf9:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c06:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000c0d:	83 ec 08             	sub    esp,0x8
10000c10:	6a 02                	push   0x2
10000c12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c15:	e8 fc ff ff ff       	call   10000c16 <Floppy::reset()+0x40>	10000c16: R_386_PC32	Floppy::readPort(FloppyReg)
10000c1a:	83 c4 10             	add    esp,0x10
10000c1d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000c20:	83 ec 04             	sub    esp,0x4
10000c23:	6a 00                	push   0x0
10000c25:	6a 02                	push   0x2
10000c27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c2a:	e8 fc ff ff ff       	call   10000c2b <Floppy::reset()+0x55>	10000c2b: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c2f:	83 c4 10             	add    esp,0x10
10000c32:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c35:	83 c8 0c             	or     eax,0xc
10000c38:	0f b6 c0             	movzx  eax,al
10000c3b:	83 ec 04             	sub    esp,0x4
10000c3e:	50                   	push   eax
10000c3f:	6a 02                	push   0x2
10000c41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c44:	e8 fc ff ff ff       	call   10000c45 <Floppy::reset()+0x6f>	10000c45: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c49:	83 c4 10             	add    esp,0x10
10000c4c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000c50:	83 e0 08             	and    eax,0x8
10000c53:	85 c0                	test   eax,eax
10000c55:	74 3f                	je     10000c96 <Floppy::reset()+0xc0>
10000c57:	83 ec 08             	sub    esp,0x8
10000c5a:	68 90 01 00 00       	push   0x190
10000c5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c62:	e8 fc ff ff ff       	call   10000c63 <Floppy::reset()+0x8d>	10000c63: R_386_PC32	Floppy::waitIRQ(int)
10000c67:	83 c4 10             	add    esp,0x10
10000c6a:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000c6d:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000c70:	83 f0 01             	xor    eax,0x1
10000c73:	84 c0                	test   al,al
10000c75:	74 3e                	je     10000cb5 <Floppy::reset()+0xdf>
10000c77:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c7a:	83 c8 0c             	or     eax,0xc
10000c7d:	0f b6 c0             	movzx  eax,al
10000c80:	83 ec 04             	sub    esp,0x4
10000c83:	50                   	push   eax
10000c84:	6a 02                	push   0x2
10000c86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c89:	e8 fc ff ff ff       	call   10000c8a <Floppy::reset()+0xb4>	10000c8a: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c8e:	83 c4 10             	add    esp,0x10
10000c91:	e9 56 ff ff ff       	jmp    10000bec <Floppy::reset()+0x16>
10000c96:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c99:	83 c8 0c             	or     eax,0xc
10000c9c:	0f b6 c0             	movzx  eax,al
10000c9f:	83 ec 04             	sub    esp,0x4
10000ca2:	50                   	push   eax
10000ca3:	6a 02                	push   0x2
10000ca5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ca8:	e8 fc ff ff ff       	call   10000ca9 <Floppy::reset()+0xd3>	10000ca9: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000cad:	83 c4 10             	add    esp,0x10
10000cb0:	e9 37 ff ff ff       	jmp    10000bec <Floppy::reset()+0x16>
10000cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cb8:	8a 80 91 01 00 00    	mov    al,BYTE PTR [eax+0x191]
10000cbe:	84 c0                	test   al,al
10000cc0:	0f 84 8f 00 00 00    	je     10000d55 <Floppy::reset()+0x17f>
10000cc6:	83 ec 04             	sub    esp,0x4
10000cc9:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000ccc:	50                   	push   eax
10000ccd:	8d 45 e8             	lea    eax,[ebp-0x18]
10000cd0:	50                   	push   eax
10000cd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cd4:	e8 fc ff ff ff       	call   10000cd5 <Floppy::reset()+0xff>	10000cd5: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000cd9:	83 c4 10             	add    esp,0x10
10000cdc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cdf:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000ce3:	74 19                	je     10000cfe <Floppy::reset()+0x128>
10000ce5:	83 ec 04             	sub    esp,0x4
10000ce8:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000ceb:	50                   	push   eax
10000cec:	8d 45 e8             	lea    eax,[ebp-0x18]
10000cef:	50                   	push   eax
10000cf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cf3:	e8 fc ff ff ff       	call   10000cf4 <Floppy::reset()+0x11e>	10000cf4: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000cf8:	83 c4 10             	add    esp,0x10
10000cfb:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cfe:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000d02:	74 19                	je     10000d1d <Floppy::reset()+0x147>
10000d04:	83 ec 04             	sub    esp,0x4
10000d07:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000d0a:	50                   	push   eax
10000d0b:	8d 45 e8             	lea    eax,[ebp-0x18]
10000d0e:	50                   	push   eax
10000d0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d12:	e8 fc ff ff ff       	call   10000d13 <Floppy::reset()+0x13d>	10000d13: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000d17:	83 c4 10             	add    esp,0x10
10000d1a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d1d:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000d21:	74 19                	je     10000d3c <Floppy::reset()+0x166>
10000d23:	83 ec 04             	sub    esp,0x4
10000d26:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000d29:	50                   	push   eax
10000d2a:	8d 45 e8             	lea    eax,[ebp-0x18]
10000d2d:	50                   	push   eax
10000d2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d31:	e8 fc ff ff ff       	call   10000d32 <Floppy::reset()+0x15c>	10000d32: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000d36:	83 c4 10             	add    esp,0x10
10000d39:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d3c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d3f:	83 f0 01             	xor    eax,0x1
10000d42:	84 c0                	test   al,al
10000d44:	74 0f                	je     10000d55 <Floppy::reset()+0x17f>
10000d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d49:	c6 80 91 01 00 00 00 	mov    BYTE PTR [eax+0x191],0x0
10000d50:	e9 97 fe ff ff       	jmp    10000bec <Floppy::reset()+0x16>
10000d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d58:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000d5e:	84 c0                	test   al,al
10000d60:	75 14                	jne    10000d76 <Floppy::reset()+0x1a0>
10000d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d65:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000d6b:	83 f0 01             	xor    eax,0x1
10000d6e:	84 c0                	test   al,al
10000d70:	0f 84 91 00 00 00    	je     10000e07 <Floppy::reset()+0x231>
10000d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d79:	8a 80 90 01 00 00    	mov    al,BYTE PTR [eax+0x190]
10000d7f:	84 c0                	test   al,al
10000d81:	74 3c                	je     10000dbf <Floppy::reset()+0x1e9>
10000d83:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000d8a:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000d8e:	7f 2f                	jg     10000dbf <Floppy::reset()+0x1e9>
10000d90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d93:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d96:	83 c2 68             	add    edx,0x68
10000d99:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000d9d:	85 c0                	test   eax,eax
10000d9f:	74 19                	je     10000dba <Floppy::reset()+0x1e4>
10000da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000da4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000da7:	83 c2 68             	add    edx,0x68
10000daa:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000dae:	83 ec 0c             	sub    esp,0xc
10000db1:	50                   	push   eax
10000db2:	e8 fc ff ff ff       	call   10000db3 <Floppy::reset()+0x1dd>	10000db3: R_386_PC32	FloppyDrive::floppyConfigure()
10000db7:	83 c4 10             	add    esp,0x10
10000dba:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000dbd:	eb cb                	jmp    10000d8a <Floppy::reset()+0x1b4>
10000dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dc2:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000dc8:	83 f0 01             	xor    eax,0x1
10000dcb:	84 c0                	test   al,al
10000dcd:	74 38                	je     10000e07 <Floppy::reset()+0x231>
10000dcf:	83 ec 0c             	sub    esp,0xc
10000dd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000dd5:	e8 fc ff ff ff       	call   10000dd6 <Floppy::reset()+0x200>	10000dd6: R_386_PC32	Floppy::lock()
10000dda:	83 c4 10             	add    esp,0x10
10000ddd:	83 f0 01             	xor    eax,0x1
10000de0:	88 c2                	mov    dl,al
10000de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000de5:	88 90 8c 01 00 00    	mov    BYTE PTR [eax+0x18c],dl
10000deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dee:	c6 80 8d 01 00 00 01 	mov    BYTE PTR [eax+0x18d],0x1
10000df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000df8:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000dfe:	84 c0                	test   al,al
10000e00:	74 05                	je     10000e07 <Floppy::reset()+0x231>
10000e02:	e9 e5 fd ff ff       	jmp    10000bec <Floppy::reset()+0x16>
10000e07:	90                   	nop
10000e08:	c9                   	leave  
10000e09:	c3                   	ret    

10000e0a <Floppy::dmaInit(bool)>:
10000e0a:	55                   	push   ebp
10000e0b:	89 e5                	mov    ebp,esp
10000e0d:	83 ec 18             	sub    esp,0x18
10000e10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000e13:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10000e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e19:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000e1f:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
10000e23:	74 07                	je     10000e2c <Floppy::dmaInit(bool)+0x22>
10000e25:	ba 4a 00 00 00       	mov    edx,0x4a
10000e2a:	eb 05                	jmp    10000e31 <Floppy::dmaInit(bool)+0x27>
10000e2c:	ba 46 00 00 00       	mov    edx,0x46
10000e31:	83 ec 08             	sub    esp,0x8
10000e34:	52                   	push   edx
10000e35:	50                   	push   eax
10000e36:	e8 fc ff ff ff       	call   10000e37 <Floppy::dmaInit(bool)+0x2d>	10000e37: R_386_PC32	DMAChannel::setMode(unsigned char)
10000e3b:	83 c4 10             	add    esp,0x10
10000e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e41:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000e47:	83 ec 0c             	sub    esp,0xc
10000e4a:	50                   	push   eax
10000e4b:	e8 fc ff ff ff       	call   10000e4c <Floppy::dmaInit(bool)+0x42>	10000e4c: R_386_PC32	DMAChannel::start()
10000e50:	83 c4 10             	add    esp,0x10
10000e53:	90                   	nop
10000e54:	c9                   	leave  
10000e55:	c3                   	ret    

10000e56 <Floppy::specify(int)>:
10000e56:	55                   	push   ebp
10000e57:	89 e5                	mov    ebp,esp
10000e59:	57                   	push   edi
10000e5a:	56                   	push   esi
10000e5b:	53                   	push   ebx
10000e5c:	83 ec 3c             	sub    esp,0x3c
10000e5f:	8d 45 c0             	lea    eax,[ebp-0x40]
10000e62:	bb f0 59 00 10       	mov    ebx,0x100059f0	10000e63: R_386_32	.text
10000e67:	ba 04 00 00 00       	mov    edx,0x4
10000e6c:	89 c7                	mov    edi,eax
10000e6e:	89 de                	mov    esi,ebx
10000e70:	89 d1                	mov    ecx,edx
10000e72:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000e7a:	83 c2 64             	add    edx,0x64
10000e7d:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000e81:	89 d0                	mov    eax,edx
10000e83:	c1 e0 02             	shl    eax,0x2
10000e86:	01 d0                	add    eax,edx
10000e88:	c1 e0 02             	shl    eax,0x2
10000e8b:	01 d0                	add    eax,edx
10000e8d:	05 10 00 00 00       	add    eax,0x10	10000e8e: R_386_32	floppyTable
10000e92:	8a 00                	mov    al,BYTE PTR [eax]
10000e94:	0f be c0             	movsx  eax,al
10000e97:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000e9a:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000e9e:	75 10                	jne    10000eb0 <Floppy::specify(int)+0x5a>
10000ea0:	83 ec 0c             	sub    esp,0xc
10000ea3:	68 da 59 00 10       	push   0x100059da	10000ea4: R_386_32	.text
10000ea8:	e8 fc ff ff ff       	call   10000ea9 <Floppy::specify(int)+0x53>	10000ea9: R_386_PC32	KePanic(char const*)
10000ead:	83 c4 10             	add    esp,0x10
10000eb0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000eb3:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000eb7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000eba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000ebd:	89 c2                	mov    edx,eax
10000ebf:	c1 e0 03             	shl    eax,0x3
10000ec2:	89 d1                	mov    ecx,edx
10000ec4:	29 c1                	sub    ecx,eax
10000ec6:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000ecb:	f7 e9                	imul   ecx
10000ecd:	c1 fa 11             	sar    edx,0x11
10000ed0:	89 c8                	mov    eax,ecx
10000ed2:	c1 f8 1f             	sar    eax,0x1f
10000ed5:	29 c2                	sub    edx,eax
10000ed7:	89 d0                	mov    eax,edx
10000ed9:	83 c0 10             	add    eax,0x10
10000edc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000edf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000ee2:	89 d0                	mov    eax,edx
10000ee4:	01 c0                	add    eax,eax
10000ee6:	01 d0                	add    eax,edx
10000ee8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000eef:	01 d0                	add    eax,edx
10000ef1:	01 c0                	add    eax,eax
10000ef3:	89 c1                	mov    ecx,eax
10000ef5:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000efa:	f7 e9                	imul   ecx
10000efc:	c1 fa 12             	sar    edx,0x12
10000eff:	89 c8                	mov    eax,ecx
10000f01:	c1 f8 1f             	sar    eax,0x1f
10000f04:	29 c2                	sub    edx,eax
10000f06:	89 d0                	mov    eax,edx
10000f08:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000f0b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000f12:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000f19:	83 ec 08             	sub    esp,0x8
10000f1c:	6a 03                	push   0x3
10000f1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f21:	e8 fc ff ff ff       	call   10000f22 <Floppy::specify(int)+0xcc>	10000f22: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f26:	83 c4 10             	add    esp,0x10
10000f29:	83 ec 0c             	sub    esp,0xc
10000f2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f2f:	e8 fc ff ff ff       	call   10000f30 <Floppy::specify(int)+0xda>	10000f30: R_386_PC32	Floppy::wasFailure()
10000f34:	83 c4 10             	add    esp,0x10
10000f37:	84 c0                	test   al,al
10000f39:	74 04                	je     10000f3f <Floppy::specify(int)+0xe9>
10000f3b:	b0 00                	mov    al,0x0
10000f3d:	eb 6b                	jmp    10000faa <Floppy::specify(int)+0x154>
10000f3f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000f42:	c1 e0 04             	shl    eax,0x4
10000f45:	88 c2                	mov    dl,al
10000f47:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000f4a:	09 d0                	or     eax,edx
10000f4c:	0f b6 c0             	movzx  eax,al
10000f4f:	83 ec 08             	sub    esp,0x8
10000f52:	50                   	push   eax
10000f53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f56:	e8 fc ff ff ff       	call   10000f57 <Floppy::specify(int)+0x101>	10000f57: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f5b:	83 c4 10             	add    esp,0x10
10000f5e:	83 ec 0c             	sub    esp,0xc
10000f61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f64:	e8 fc ff ff ff       	call   10000f65 <Floppy::specify(int)+0x10f>	10000f65: R_386_PC32	Floppy::wasFailure()
10000f69:	83 c4 10             	add    esp,0x10
10000f6c:	84 c0                	test   al,al
10000f6e:	74 04                	je     10000f74 <Floppy::specify(int)+0x11e>
10000f70:	b0 00                	mov    al,0x0
10000f72:	eb 36                	jmp    10000faa <Floppy::specify(int)+0x154>
10000f74:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000f77:	01 c0                	add    eax,eax
10000f79:	88 c2                	mov    dl,al
10000f7b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000f7e:	09 d0                	or     eax,edx
10000f80:	0f b6 c0             	movzx  eax,al
10000f83:	83 ec 08             	sub    esp,0x8
10000f86:	50                   	push   eax
10000f87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f8a:	e8 fc ff ff ff       	call   10000f8b <Floppy::specify(int)+0x135>	10000f8b: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f8f:	83 c4 10             	add    esp,0x10
10000f92:	83 ec 0c             	sub    esp,0xc
10000f95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f98:	e8 fc ff ff ff       	call   10000f99 <Floppy::specify(int)+0x143>	10000f99: R_386_PC32	Floppy::wasFailure()
10000f9d:	83 c4 10             	add    esp,0x10
10000fa0:	84 c0                	test   al,al
10000fa2:	74 04                	je     10000fa8 <Floppy::specify(int)+0x152>
10000fa4:	b0 00                	mov    al,0x0
10000fa6:	eb 02                	jmp    10000faa <Floppy::specify(int)+0x154>
10000fa8:	b0 01                	mov    al,0x1
10000faa:	8d 65 f4             	lea    esp,[ebp-0xc]
10000fad:	5b                   	pop    ebx
10000fae:	5e                   	pop    esi
10000faf:	5f                   	pop    edi
10000fb0:	5d                   	pop    ebp
10000fb1:	c3                   	ret    

10000fb2 <Floppy::select(int, bool)>:
10000fb2:	55                   	push   ebp
10000fb3:	89 e5                	mov    ebp,esp
10000fb5:	83 ec 28             	sub    esp,0x28
10000fb8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000fbb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fc1:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000fc7:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000fca:	75 27                	jne    10000ff3 <Floppy::select(int, bool)+0x41>
10000fcc:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000fcf:	83 f0 01             	xor    eax,0x1
10000fd2:	84 c0                	test   al,al
10000fd4:	74 1d                	je     10000ff3 <Floppy::select(int, bool)+0x41>
10000fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fd9:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000fdf:	83 f8 ff             	cmp    eax,0xffffffff
10000fe2:	74 0f                	je     10000ff3 <Floppy::select(int, bool)+0x41>
10000fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fe7:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000fee:	e9 34 02 00 00       	jmp    10001227 <Floppy::select(int, bool)+0x275>
10000ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ff6:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10000ffc:	83 f0 01             	xor    eax,0x1
10000fff:	84 c0                	test   al,al
10001001:	75 12                	jne    10001015 <Floppy::select(int, bool)+0x63>
10001003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001006:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
1000100c:	83 f8 ff             	cmp    eax,0xffffffff
1000100f:	0f 85 12 02 00 00    	jne    10001227 <Floppy::select(int, bool)+0x275>
10001015:	83 ec 08             	sub    esp,0x8
10001018:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000101b:	68 00 5a 00 10       	push   0x10005a00	1000101c: R_386_32	.text
10001020:	e8 fc ff ff ff       	call   10001021 <Floppy::select(int, bool)+0x6f>	10001021: R_386_PC32	Dbg::kprintf(char const*, ...)
10001025:	83 c4 10             	add    esp,0x10
10001028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000102b:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10001031:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001034:	0f 84 b5 01 00 00    	je     100011ef <Floppy::select(int, bool)+0x23d>
1000103a:	83 ec 0c             	sub    esp,0xc
1000103d:	68 10 5a 00 10       	push   0x10005a10	1000103e: R_386_32	.text
10001042:	e8 fc ff ff ff       	call   10001043 <Floppy::select(int, bool)+0x91>	10001043: R_386_PC32	Dbg::kprintf(char const*, ...)
10001047:	83 c4 10             	add    esp,0x10
1000104a:	fa                   	cli    
1000104b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000104c: R_386_32	irqDisableCounter
10001050:	40                   	inc    eax
10001051:	a3 00 00 00 00       	mov    ds:0x0,eax	10001052: R_386_32	irqDisableCounter
10001056:	83 ec 0c             	sub    esp,0xc
10001059:	68 1d 5a 00 10       	push   0x10005a1d	1000105a: R_386_32	.text
1000105e:	e8 fc ff ff ff       	call   1000105f <Floppy::select(int, bool)+0xad>	1000105f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001063:	83 c4 10             	add    esp,0x10
10001066:	83 ec 08             	sub    esp,0x8
10001069:	6a 02                	push   0x2
1000106b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000106e:	e8 fc ff ff ff       	call   1000106f <Floppy::select(int, bool)+0xbd>	1000106f: R_386_PC32	Floppy::readPort(FloppyReg)
10001073:	83 c4 10             	add    esp,0x10
10001076:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001079:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
1000107d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001080:	88 c2                	mov    dl,al
10001082:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10001085:	09 d0                	or     eax,edx
10001087:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000108a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000108e:	83 ec 04             	sub    esp,0x4
10001091:	50                   	push   eax
10001092:	6a 02                	push   0x2
10001094:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001097:	e8 fc ff ff ff       	call   10001098 <Floppy::select(int, bool)+0xe6>	10001098: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000109c:	83 c4 10             	add    esp,0x10
1000109f:	83 ec 0c             	sub    esp,0xc
100010a2:	68 20 03 00 00       	push   0x320
100010a7:	e8 fc ff ff ff       	call   100010a8 <Floppy::select(int, bool)+0xf6>	100010a8: R_386_PC32	milliTenthSleep(unsigned int)
100010ac:	83 c4 10             	add    esp,0x10
100010af:	83 ec 0c             	sub    esp,0xc
100010b2:	68 2a 5a 00 10       	push   0x10005a2a	100010b3: R_386_32	.text
100010b7:	e8 fc ff ff ff       	call   100010b8 <Floppy::select(int, bool)+0x106>	100010b8: R_386_PC32	Dbg::kprintf(char const*, ...)
100010bc:	83 c4 10             	add    esp,0x10
100010bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100010c5:	83 c2 64             	add    edx,0x64
100010c8:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100010cc:	89 d0                	mov    eax,edx
100010ce:	c1 e0 02             	shl    eax,0x2
100010d1:	01 d0                	add    eax,edx
100010d3:	c1 e0 02             	shl    eax,0x2
100010d6:	01 d0                	add    eax,edx
100010d8:	05 10 00 00 00       	add    eax,0x10	100010d9: R_386_32	floppyTable
100010dd:	8a 00                	mov    al,BYTE PTR [eax]
100010df:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
100010e2:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
100010e6:	75 10                	jne    100010f8 <Floppy::select(int, bool)+0x146>
100010e8:	83 ec 0c             	sub    esp,0xc
100010eb:	68 38 5a 00 10       	push   0x10005a38	100010ec: R_386_32	.text
100010f0:	e8 fc ff ff ff       	call   100010f1 <Floppy::select(int, bool)+0x13f>	100010f1: R_386_PC32	KePanic(char const*)
100010f5:	83 c4 10             	add    esp,0x10
100010f8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
100010fb:	0f b6 c0             	movzx  eax,al
100010fe:	83 ec 04             	sub    esp,0x4
10001101:	50                   	push   eax
10001102:	6a 07                	push   0x7
10001104:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001107:	e8 fc ff ff ff       	call   10001108 <Floppy::select(int, bool)+0x156>	10001108: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000110c:	83 c4 10             	add    esp,0x10
1000110f:	a1 00 00 00 00       	mov    eax,ds:0x0	10001110: R_386_32	irqDisableCounter
10001114:	48                   	dec    eax
10001115:	a3 00 00 00 00       	mov    ds:0x0,eax	10001116: R_386_32	irqDisableCounter
1000111a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000111b: R_386_32	irqDisableCounter
1000111f:	85 c0                	test   eax,eax
10001121:	75 01                	jne    10001124 <Floppy::select(int, bool)+0x172>
10001123:	fb                   	sti    
10001124:	83 ec 0c             	sub    esp,0xc
10001127:	68 67 5a 00 10       	push   0x10005a67	10001128: R_386_32	.text
1000112c:	e8 fc ff ff ff       	call   1000112d <Floppy::select(int, bool)+0x17b>	1000112d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001131:	83 c4 10             	add    esp,0x10
10001134:	83 ec 08             	sub    esp,0x8
10001137:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000113a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000113d:	e8 fc ff ff ff       	call   1000113e <Floppy::select(int, bool)+0x18c>	1000113e: R_386_PC32	Floppy::specify(int)
10001142:	83 c4 10             	add    esp,0x10
10001145:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001148:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
1000114b:	83 f0 01             	xor    eax,0x1
1000114e:	84 c0                	test   al,al
10001150:	74 25                	je     10001177 <Floppy::select(int, bool)+0x1c5>
10001152:	83 ec 0c             	sub    esp,0xc
10001155:	68 74 5a 00 10       	push   0x10005a74	10001156: R_386_32	.text
1000115a:	e8 fc ff ff ff       	call   1000115b <Floppy::select(int, bool)+0x1a9>	1000115b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000115f:	83 c4 10             	add    esp,0x10
10001162:	83 ec 0c             	sub    esp,0xc
10001165:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001168:	e8 fc ff ff ff       	call   10001169 <Floppy::select(int, bool)+0x1b7>	10001169: R_386_PC32	Floppy::reset()
1000116d:	83 c4 10             	add    esp,0x10
10001170:	b0 00                	mov    al,0x0
10001172:	e9 d2 00 00 00       	jmp    10001249 <Floppy::select(int, bool)+0x297>
10001177:	83 ec 0c             	sub    esp,0xc
1000117a:	68 85 5a 00 10       	push   0x10005a85	1000117b: R_386_32	.text
1000117f:	e8 fc ff ff ff       	call   10001180 <Floppy::select(int, bool)+0x1ce>	10001180: R_386_PC32	Dbg::kprintf(char const*, ...)
10001184:	83 c4 10             	add    esp,0x10
10001187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000118a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000118d:	83 c2 68             	add    edx,0x68
10001190:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001194:	83 ec 0c             	sub    esp,0xc
10001197:	50                   	push   eax
10001198:	e8 fc ff ff ff       	call   10001199 <Floppy::select(int, bool)+0x1e7>	10001199: R_386_PC32	FloppyDrive::calibrate()
1000119d:	83 c4 10             	add    esp,0x10
100011a0:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100011a3:	83 ec 0c             	sub    esp,0xc
100011a6:	68 92 5a 00 10       	push   0x10005a92	100011a7: R_386_32	.text
100011ab:	e8 fc ff ff ff       	call   100011ac <Floppy::select(int, bool)+0x1fa>	100011ac: R_386_PC32	Dbg::kprintf(char const*, ...)
100011b0:	83 c4 10             	add    esp,0x10
100011b3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100011b6:	83 f0 01             	xor    eax,0x1
100011b9:	84 c0                	test   al,al
100011bb:	74 22                	je     100011df <Floppy::select(int, bool)+0x22d>
100011bd:	83 ec 0c             	sub    esp,0xc
100011c0:	68 a0 5a 00 10       	push   0x10005aa0	100011c1: R_386_32	.text
100011c5:	e8 fc ff ff ff       	call   100011c6 <Floppy::select(int, bool)+0x214>	100011c6: R_386_PC32	Dbg::kprintf(char const*, ...)
100011ca:	83 c4 10             	add    esp,0x10
100011cd:	83 ec 0c             	sub    esp,0xc
100011d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011d3:	e8 fc ff ff ff       	call   100011d4 <Floppy::select(int, bool)+0x222>	100011d4: R_386_PC32	Floppy::reset()
100011d8:	83 c4 10             	add    esp,0x10
100011db:	b0 00                	mov    al,0x0
100011dd:	eb 6a                	jmp    10001249 <Floppy::select(int, bool)+0x297>
100011df:	83 ec 0c             	sub    esp,0xc
100011e2:	68 b2 5a 00 10       	push   0x10005ab2	100011e3: R_386_32	.text
100011e7:	e8 fc ff ff ff       	call   100011e8 <Floppy::select(int, bool)+0x236>	100011e8: R_386_PC32	Dbg::kprintf(char const*, ...)
100011ec:	83 c4 10             	add    esp,0x10
100011ef:	83 ec 0c             	sub    esp,0xc
100011f2:	68 bf 5a 00 10       	push   0x10005abf	100011f3: R_386_32	.text
100011f7:	e8 fc ff ff ff       	call   100011f8 <Floppy::select(int, bool)+0x246>	100011f8: R_386_PC32	Dbg::kprintf(char const*, ...)
100011fc:	83 c4 10             	add    esp,0x10
100011ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001202:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
10001205:	88 90 92 01 00 00    	mov    BYTE PTR [eax+0x192],dl
1000120b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000120e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001211:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
10001217:	83 ec 0c             	sub    esp,0xc
1000121a:	68 cc 5a 00 10       	push   0x10005acc	1000121b: R_386_32	.text
1000121f:	e8 fc ff ff ff       	call   10001220 <Floppy::select(int, bool)+0x26e>	10001220: R_386_PC32	Dbg::kprintf(char const*, ...)
10001224:	83 c4 10             	add    esp,0x10
10001227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000122a:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10001230:	84 c0                	test   al,al
10001232:	74 12                	je     10001246 <Floppy::select(int, bool)+0x294>
10001234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001237:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
1000123d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001240:	75 04                	jne    10001246 <Floppy::select(int, bool)+0x294>
10001242:	b0 01                	mov    al,0x1
10001244:	eb 02                	jmp    10001248 <Floppy::select(int, bool)+0x296>
10001246:	b0 00                	mov    al,0x0
10001248:	90                   	nop
10001249:	c9                   	leave  
1000124a:	c3                   	ret    
1000124b:	90                   	nop

1000124c <Floppy::motor(int, bool)>:
1000124c:	55                   	push   ebp
1000124d:	89 e5                	mov    ebp,esp
1000124f:	53                   	push   ebx
10001250:	83 ec 24             	sub    esp,0x24
10001253:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001256:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001259:	83 ec 0c             	sub    esp,0xc
1000125c:	68 d9 5a 00 10       	push   0x10005ad9	1000125d: R_386_32	.text
10001261:	e8 fc ff ff ff       	call   10001262 <Floppy::motor(int, bool)+0x16>	10001262: R_386_PC32	Dbg::kprintf(char const*, ...)
10001266:	83 c4 10             	add    esp,0x10
10001269:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
1000126d:	83 ec 04             	sub    esp,0x4
10001270:	50                   	push   eax
10001271:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001274:	68 e8 5a 00 10       	push   0x10005ae8	10001275: R_386_32	.text
10001279:	e8 fc ff ff ff       	call   1000127a <Floppy::motor(int, bool)+0x2e>	1000127a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000127e:	83 c4 10             	add    esp,0x10
10001281:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001285:	0f 84 7b 01 00 00    	je     10001406 <Floppy::motor(int, bool)+0x1ba>
1000128b:	83 ec 0c             	sub    esp,0xc
1000128e:	68 fe 5a 00 10       	push   0x10005afe	1000128f: R_386_32	.text
10001293:	e8 fc ff ff ff       	call   10001294 <Floppy::motor(int, bool)+0x48>	10001294: R_386_PC32	Dbg::kprintf(char const*, ...)
10001298:	83 c4 10             	add    esp,0x10
1000129b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000129e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012a1:	83 c2 58             	add    edx,0x58
100012a4:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100012a8:	85 c0                	test   eax,eax
100012aa:	0f 85 21 01 00 00    	jne    100013d1 <Floppy::motor(int, bool)+0x185>
100012b0:	83 ec 0c             	sub    esp,0xc
100012b3:	68 06 5b 00 10       	push   0x10005b06	100012b4: R_386_32	.text
100012b8:	e8 fc ff ff ff       	call   100012b9 <Floppy::motor(int, bool)+0x6d>	100012b9: R_386_PC32	Dbg::kprintf(char const*, ...)
100012bd:	83 c4 10             	add    esp,0x10
100012c0:	fa                   	cli    
100012c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100012c2: R_386_32	irqDisableCounter
100012c6:	40                   	inc    eax
100012c7:	a3 00 00 00 00       	mov    ds:0x0,eax	100012c8: R_386_32	irqDisableCounter
100012cc:	83 ec 08             	sub    esp,0x8
100012cf:	6a 02                	push   0x2
100012d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012d4:	e8 fc ff ff ff       	call   100012d5 <Floppy::motor(int, bool)+0x89>	100012d5: R_386_PC32	Floppy::readPort(FloppyReg)
100012d9:	83 c4 10             	add    esp,0x10
100012dc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100012df:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100012e3:	83 ec 08             	sub    esp,0x8
100012e6:	50                   	push   eax
100012e7:	68 1b 5b 00 10       	push   0x10005b1b	100012e8: R_386_32	.text
100012ec:	e8 fc ff ff ff       	call   100012ed <Floppy::motor(int, bool)+0xa1>	100012ed: R_386_PC32	Dbg::kprintf(char const*, ...)
100012f1:	83 c4 10             	add    esp,0x10
100012f4:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100012f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100012fb:	bb 10 00 00 00       	mov    ebx,0x10
10001300:	88 c1                	mov    cl,al
10001302:	d3 e3                	shl    ebx,cl
10001304:	89 d8                	mov    eax,ebx
10001306:	09 d0                	or     eax,edx
10001308:	83 ec 08             	sub    esp,0x8
1000130b:	50                   	push   eax
1000130c:	68 29 5b 00 10       	push   0x10005b29	1000130d: R_386_32	.text
10001311:	e8 fc ff ff ff       	call   10001312 <Floppy::motor(int, bool)+0xc6>	10001312: R_386_PC32	Dbg::kprintf(char const*, ...)
10001316:	83 c4 10             	add    esp,0x10
10001319:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000131c:	ba 10 00 00 00       	mov    edx,0x10
10001321:	88 c1                	mov    cl,al
10001323:	d3 e2                	shl    edx,cl
10001325:	89 d0                	mov    eax,edx
10001327:	88 c2                	mov    dl,al
10001329:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000132c:	09 d0                	or     eax,edx
1000132e:	0f b6 c0             	movzx  eax,al
10001331:	83 ec 04             	sub    esp,0x4
10001334:	50                   	push   eax
10001335:	6a 02                	push   0x2
10001337:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000133a:	e8 fc ff ff ff       	call   1000133b <Floppy::motor(int, bool)+0xef>	1000133b: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000133f:	83 c4 10             	add    esp,0x10
10001342:	a1 00 00 00 00       	mov    eax,ds:0x0	10001343: R_386_32	irqDisableCounter
10001347:	48                   	dec    eax
10001348:	a3 00 00 00 00       	mov    ds:0x0,eax	10001349: R_386_32	irqDisableCounter
1000134d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000134e: R_386_32	irqDisableCounter
10001352:	85 c0                	test   eax,eax
10001354:	75 01                	jne    10001357 <Floppy::motor(int, bool)+0x10b>
10001356:	fb                   	sti    
10001357:	83 ec 0c             	sub    esp,0xc
1000135a:	68 37 5b 00 10       	push   0x10005b37	1000135b: R_386_32	.text
1000135f:	e8 fc ff ff ff       	call   10001360 <Floppy::motor(int, bool)+0x114>	10001360: R_386_PC32	Dbg::kprintf(char const*, ...)
10001364:	83 c4 10             	add    esp,0x10
10001367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000136a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000136d:	83 c2 64             	add    edx,0x64
10001370:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001374:	83 f8 04             	cmp    eax,0x4
10001377:	75 12                	jne    1000138b <Floppy::motor(int, bool)+0x13f>
10001379:	83 ec 0c             	sub    esp,0xc
1000137c:	68 b8 0b 00 00       	push   0xbb8
10001381:	e8 fc ff ff ff       	call   10001382 <Floppy::motor(int, bool)+0x136>	10001382: R_386_PC32	milliTenthSleep(unsigned int)
10001386:	83 c4 10             	add    esp,0x10
10001389:	eb 10                	jmp    1000139b <Floppy::motor(int, bool)+0x14f>
1000138b:	83 ec 0c             	sub    esp,0xc
1000138e:	68 88 13 00 00       	push   0x1388
10001393:	e8 fc ff ff ff       	call   10001394 <Floppy::motor(int, bool)+0x148>	10001394: R_386_PC32	milliTenthSleep(unsigned int)
10001398:	83 c4 10             	add    esp,0x10
1000139b:	83 ec 0c             	sub    esp,0xc
1000139e:	68 45 5b 00 10       	push   0x10005b45	1000139f: R_386_32	.text
100013a3:	e8 fc ff ff ff       	call   100013a4 <Floppy::motor(int, bool)+0x158>	100013a4: R_386_PC32	Dbg::kprintf(char const*, ...)
100013a8:	83 c4 10             	add    esp,0x10
100013ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013b1:	83 c2 58             	add    edx,0x58
100013b4:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100013bc:	83 ec 0c             	sub    esp,0xc
100013bf:	68 55 5b 00 10       	push   0x10005b55	100013c0: R_386_32	.text
100013c4:	e8 fc ff ff ff       	call   100013c5 <Floppy::motor(int, bool)+0x179>	100013c5: R_386_PC32	Dbg::kprintf(char const*, ...)
100013c9:	83 c4 10             	add    esp,0x10
100013cc:	e9 89 00 00 00       	jmp    1000145a <Floppy::motor(int, bool)+0x20e>
100013d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013d7:	83 c2 58             	add    edx,0x58
100013da:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100013de:	83 f8 02             	cmp    eax,0x2
100013e1:	75 77                	jne    1000145a <Floppy::motor(int, bool)+0x20e>
100013e3:	83 ec 0c             	sub    esp,0xc
100013e6:	68 65 5b 00 10       	push   0x10005b65	100013e7: R_386_32	.text
100013eb:	e8 fc ff ff ff       	call   100013ec <Floppy::motor(int, bool)+0x1a0>	100013ec: R_386_PC32	Dbg::kprintf(char const*, ...)
100013f0:	83 c4 10             	add    esp,0x10
100013f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013f9:	83 c2 58             	add    edx,0x58
100013fc:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
10001404:	eb 54                	jmp    1000145a <Floppy::motor(int, bool)+0x20e>
10001406:	83 ec 0c             	sub    esp,0xc
10001409:	68 75 5b 00 10       	push   0x10005b75	1000140a: R_386_32	.text
1000140e:	e8 fc ff ff ff       	call   1000140f <Floppy::motor(int, bool)+0x1c3>	1000140f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001413:	83 c4 10             	add    esp,0x10
10001416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001419:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000141c:	83 c2 58             	add    edx,0x58
1000141f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001423:	83 f8 01             	cmp    eax,0x1
10001426:	75 32                	jne    1000145a <Floppy::motor(int, bool)+0x20e>
10001428:	83 ec 0c             	sub    esp,0xc
1000142b:	68 85 5b 00 10       	push   0x10005b85	1000142c: R_386_32	.text
10001430:	e8 fc ff ff ff       	call   10001431 <Floppy::motor(int, bool)+0x1e5>	10001431: R_386_PC32	Dbg::kprintf(char const*, ...)
10001435:	83 c4 10             	add    esp,0x10
10001438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000143b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000143e:	83 c2 58             	add    edx,0x58
10001441:	c7 44 90 0c 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x2
10001449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000144c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000144f:	83 c2 5c             	add    edx,0x5c
10001452:	c7 44 90 0c c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x9c4
1000145a:	83 ec 0c             	sub    esp,0xc
1000145d:	68 95 5b 00 10       	push   0x10005b95	1000145e: R_386_32	.text
10001462:	e8 fc ff ff ff       	call   10001463 <Floppy::motor(int, bool)+0x217>	10001463: R_386_PC32	Dbg::kprintf(char const*, ...)
10001467:	83 c4 10             	add    esp,0x10
1000146a:	90                   	nop
1000146b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000146e:	c9                   	leave  
1000146f:	c3                   	ret    

10001470 <FloppyDrive::FloppyDrive()>:
10001470:	55                   	push   ebp
10001471:	89 e5                	mov    ebp,esp
10001473:	83 ec 08             	sub    esp,0x8
10001476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001479:	83 ec 04             	sub    esp,0x4
1000147c:	68 00 02 00 00       	push   0x200
10001481:	68 aa 5b 00 10       	push   0x10005baa	10001482: R_386_32	.text
10001486:	50                   	push   eax
10001487:	e8 fc ff ff ff       	call   10001488 <FloppyDrive::FloppyDrive()+0x18>	10001488: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
1000148c:	83 c4 10             	add    esp,0x10
1000148f:	ba 08 00 00 00       	mov    edx,0x8	10001490: R_386_32	vtable for FloppyDrive
10001494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001497:	89 10                	mov    DWORD PTR [eax],edx
10001499:	90                   	nop
1000149a:	c9                   	leave  
1000149b:	c3                   	ret    

1000149c <FloppyDrive::motorOn()>:
1000149c:	55                   	push   ebp
1000149d:	89 e5                	mov    ebp,esp
1000149f:	83 ec 08             	sub    esp,0x8
100014a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
100014ab:	83 ec 08             	sub    esp,0x8
100014ae:	50                   	push   eax
100014af:	68 bc 5b 00 10       	push   0x10005bbc	100014b0: R_386_32	.text
100014b4:	e8 fc ff ff ff       	call   100014b5 <FloppyDrive::motorOn()+0x19>	100014b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100014b9:	83 c4 10             	add    esp,0x10
100014bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100014c8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014ce:	83 ec 04             	sub    esp,0x4
100014d1:	6a 01                	push   0x1
100014d3:	52                   	push   edx
100014d4:	50                   	push   eax
100014d5:	e8 fc ff ff ff       	call   100014d6 <FloppyDrive::motorOn()+0x3a>	100014d6: R_386_PC32	Floppy::motor(int, bool)
100014da:	83 c4 10             	add    esp,0x10
100014dd:	90                   	nop
100014de:	c9                   	leave  
100014df:	c3                   	ret    

100014e0 <FloppyDrive::motorOff()>:
100014e0:	55                   	push   ebp
100014e1:	89 e5                	mov    ebp,esp
100014e3:	83 ec 08             	sub    esp,0x8
100014e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014e9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100014f2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014f8:	83 ec 04             	sub    esp,0x4
100014fb:	6a 00                	push   0x0
100014fd:	52                   	push   edx
100014fe:	50                   	push   eax
100014ff:	e8 fc ff ff ff       	call   10001500 <FloppyDrive::motorOff()+0x20>	10001500: R_386_PC32	Floppy::motor(int, bool)
10001504:	83 c4 10             	add    esp,0x10
10001507:	90                   	nop
10001508:	c9                   	leave  
10001509:	c3                   	ret    

1000150a <FloppyDrive::floppyConfigure()>:
1000150a:	55                   	push   ebp
1000150b:	89 e5                	mov    ebp,esp
1000150d:	83 ec 18             	sub    esp,0x18
10001510:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10001514:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
10001518:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
1000151c:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10001523:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000152a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000152d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001533:	83 ec 08             	sub    esp,0x8
10001536:	6a 13                	push   0x13
10001538:	50                   	push   eax
10001539:	e8 fc ff ff ff       	call   1000153a <FloppyDrive::floppyConfigure()+0x30>	1000153a: R_386_PC32	Floppy::writeCommand(unsigned char)
1000153e:	83 c4 10             	add    esp,0x10
10001541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001544:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000154a:	83 ec 0c             	sub    esp,0xc
1000154d:	50                   	push   eax
1000154e:	e8 fc ff ff ff       	call   1000154f <FloppyDrive::floppyConfigure()+0x45>	1000154f: R_386_PC32	Floppy::wasFailure()
10001553:	83 c4 10             	add    esp,0x10
10001556:	84 c0                	test   al,al
10001558:	74 07                	je     10001561 <FloppyDrive::floppyConfigure()+0x57>
1000155a:	b0 00                	mov    al,0x0
1000155c:	e9 de 00 00 00       	jmp    1000163f <FloppyDrive::floppyConfigure()+0x135>
10001561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001564:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000156a:	83 ec 08             	sub    esp,0x8
1000156d:	6a 00                	push   0x0
1000156f:	50                   	push   eax
10001570:	e8 fc ff ff ff       	call   10001571 <FloppyDrive::floppyConfigure()+0x67>	10001571: R_386_PC32	Floppy::writeCommand(unsigned char)
10001575:	83 c4 10             	add    esp,0x10
10001578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000157b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001581:	83 ec 0c             	sub    esp,0xc
10001584:	50                   	push   eax
10001585:	e8 fc ff ff ff       	call   10001586 <FloppyDrive::floppyConfigure()+0x7c>	10001586: R_386_PC32	Floppy::wasFailure()
1000158a:	83 c4 10             	add    esp,0x10
1000158d:	84 c0                	test   al,al
1000158f:	74 07                	je     10001598 <FloppyDrive::floppyConfigure()+0x8e>
10001591:	b0 00                	mov    al,0x0
10001593:	e9 a7 00 00 00       	jmp    1000163f <FloppyDrive::floppyConfigure()+0x135>
10001598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000159b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015a1:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100015a5:	c1 e2 06             	shl    edx,0x6
100015a8:	88 d1                	mov    cl,dl
100015aa:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
100015ae:	c1 e2 05             	shl    edx,0x5
100015b1:	09 d1                	or     ecx,edx
100015b3:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
100015b7:	c1 e2 04             	shl    edx,0x4
100015ba:	09 d1                	or     ecx,edx
100015bc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100015bf:	4a                   	dec    edx
100015c0:	09 ca                	or     edx,ecx
100015c2:	0f b6 d2             	movzx  edx,dl
100015c5:	83 ec 08             	sub    esp,0x8
100015c8:	52                   	push   edx
100015c9:	50                   	push   eax
100015ca:	e8 fc ff ff ff       	call   100015cb <FloppyDrive::floppyConfigure()+0xc1>	100015cb: R_386_PC32	Floppy::writeCommand(unsigned char)
100015cf:	83 c4 10             	add    esp,0x10
100015d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015d5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015db:	83 ec 0c             	sub    esp,0xc
100015de:	50                   	push   eax
100015df:	e8 fc ff ff ff       	call   100015e0 <FloppyDrive::floppyConfigure()+0xd6>	100015e0: R_386_PC32	Floppy::wasFailure()
100015e4:	83 c4 10             	add    esp,0x10
100015e7:	84 c0                	test   al,al
100015e9:	74 04                	je     100015ef <FloppyDrive::floppyConfigure()+0xe5>
100015eb:	b0 00                	mov    al,0x0
100015ed:	eb 50                	jmp    1000163f <FloppyDrive::floppyConfigure()+0x135>
100015ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015f2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015f8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100015fb:	0f b6 d2             	movzx  edx,dl
100015fe:	83 ec 08             	sub    esp,0x8
10001601:	52                   	push   edx
10001602:	50                   	push   eax
10001603:	e8 fc ff ff ff       	call   10001604 <FloppyDrive::floppyConfigure()+0xfa>	10001604: R_386_PC32	Floppy::writeCommand(unsigned char)
10001608:	83 c4 10             	add    esp,0x10
1000160b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000160e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001614:	83 ec 0c             	sub    esp,0xc
10001617:	50                   	push   eax
10001618:	e8 fc ff ff ff       	call   10001619 <FloppyDrive::floppyConfigure()+0x10f>	10001619: R_386_PC32	Floppy::wasFailure()
1000161d:	83 c4 10             	add    esp,0x10
10001620:	84 c0                	test   al,al
10001622:	74 04                	je     10001628 <FloppyDrive::floppyConfigure()+0x11e>
10001624:	b0 00                	mov    al,0x0
10001626:	eb 17                	jmp    1000163f <FloppyDrive::floppyConfigure()+0x135>
10001628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000162b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001631:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10001634:	83 f2 01             	xor    edx,0x1
10001637:	88 90 91 01 00 00    	mov    BYTE PTR [eax+0x191],dl
1000163d:	b0 01                	mov    al,0x1
1000163f:	c9                   	leave  
10001640:	c3                   	ret    
10001641:	90                   	nop

10001642 <FloppyDrive::open(int, int, void*)>:
10001642:	b8 00 00 00 00       	mov    eax,0x0
10001647:	c3                   	ret    

10001648 <FloppyDrive::_open(int, int, void*)>:
10001648:	55                   	push   ebp
10001649:	89 e5                	mov    ebp,esp
1000164b:	83 ec 08             	sub    esp,0x8
1000164e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001651:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001654:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
1000165a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000165d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001660:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10001666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001669:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000166f:	83 ec 08             	sub    esp,0x8
10001672:	50                   	push   eax
10001673:	68 db 5b 00 10       	push   0x10005bdb	10001674: R_386_32	.text
10001678:	e8 fc ff ff ff       	call   10001679 <FloppyDrive::_open(int, int, void*)+0x31>	10001679: R_386_PC32	Dbg::kprintf(char const*, ...)
1000167d:	83 c4 10             	add    esp,0x10
10001680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001683:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
1000168d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001690:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
10001697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000169a:	c6 80 69 01 00 00 01 	mov    BYTE PTR [eax+0x169],0x1
100016a1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100016a4:	89 d0                	mov    eax,edx
100016a6:	c1 e0 02             	shl    eax,0x2
100016a9:	01 d0                	add    eax,edx
100016ab:	c1 e0 02             	shl    eax,0x2
100016ae:	01 d0                	add    eax,edx
100016b0:	05 11 00 00 00       	add    eax,0x11	100016b1: R_386_32	floppyTable
100016b5:	8a 00                	mov    al,BYTE PTR [eax]
100016b7:	0f b6 c8             	movzx  ecx,al
100016ba:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100016bd:	89 d0                	mov    eax,edx
100016bf:	c1 e0 02             	shl    eax,0x2
100016c2:	01 d0                	add    eax,edx
100016c4:	c1 e0 02             	shl    eax,0x2
100016c7:	01 d0                	add    eax,edx
100016c9:	05 13 00 00 00       	add    eax,0x13	100016ca: R_386_32	floppyTable
100016ce:	8a 00                	mov    al,BYTE PTR [eax]
100016d0:	0f b6 c0             	movzx  eax,al
100016d3:	0f af c8             	imul   ecx,eax
100016d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100016d9:	89 d0                	mov    eax,edx
100016db:	c1 e0 02             	shl    eax,0x2
100016de:	01 d0                	add    eax,edx
100016e0:	c1 e0 02             	shl    eax,0x2
100016e3:	01 d0                	add    eax,edx
100016e5:	05 12 00 00 00       	add    eax,0x12	100016e6: R_386_32	floppyTable
100016ea:	8a 00                	mov    al,BYTE PTR [eax]
100016ec:	0f b6 c0             	movzx  eax,al
100016ef:	0f af c1             	imul   eax,ecx
100016f2:	89 c2                	mov    edx,eax
100016f4:	c1 ea 1f             	shr    edx,0x1f
100016f7:	01 d0                	add    eax,edx
100016f9:	d1 f8                	sar    eax,1
100016fb:	99                   	cdq    
100016fc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100016ff:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
10001705:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
1000170b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000170e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
10001714:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
1000171a:	83 ec 04             	sub    esp,0x4
1000171d:	52                   	push   edx
1000171e:	50                   	push   eax
1000171f:	68 e5 5b 00 10       	push   0x10005be5	10001720: R_386_32	.text
10001724:	e8 fc ff ff ff       	call   10001725 <FloppyDrive::_open(int, int, void*)+0xdd>	10001725: R_386_PC32	Dbg::kprintf(char const*, ...)
10001729:	83 c4 10             	add    esp,0x10
1000172c:	83 ec 0c             	sub    esp,0xc
1000172f:	68 f7 5b 00 10       	push   0x10005bf7	10001730: R_386_32	.text
10001734:	e8 fc ff ff ff       	call   10001735 <FloppyDrive::_open(int, int, void*)+0xed>	10001735: R_386_PC32	Dbg::kprintf(char const*, ...)
10001739:	83 c4 10             	add    esp,0x10
1000173c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000173f:	83 ec 0c             	sub    esp,0xc
10001742:	50                   	push   eax
10001743:	e8 fc ff ff ff       	call   10001744 <FloppyDrive::_open(int, int, void*)+0xfc>	10001744: R_386_PC32	PhysicalDisk::startCache()
10001748:	83 c4 10             	add    esp,0x10
1000174b:	83 ec 0c             	sub    esp,0xc
1000174e:	68 0d 5c 00 10       	push   0x10005c0d	1000174f: R_386_32	.text
10001753:	e8 fc ff ff ff       	call   10001754 <FloppyDrive::_open(int, int, void*)+0x10c>	10001754: R_386_PC32	Dbg::kprintf(char const*, ...)
10001758:	83 c4 10             	add    esp,0x10
1000175b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000175e:	83 ec 0c             	sub    esp,0xc
10001761:	50                   	push   eax
10001762:	e8 fc ff ff ff       	call   10001763 <FloppyDrive::_open(int, int, void*)+0x11b>	10001763: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
10001767:	83 c4 10             	add    esp,0x10
1000176a:	83 ec 0c             	sub    esp,0xc
1000176d:	68 23 5c 00 10       	push   0x10005c23	1000176e: R_386_32	.text
10001772:	e8 fc ff ff ff       	call   10001773 <FloppyDrive::_open(int, int, void*)+0x12b>	10001773: R_386_PC32	Dbg::kprintf(char const*, ...)
10001777:	83 c4 10             	add    esp,0x10
1000177a:	b8 00 00 00 00       	mov    eax,0x0
1000177f:	c9                   	leave  
10001780:	c3                   	ret    
10001781:	90                   	nop

10001782 <FloppyDrive::close(int, int, void*)>:
10001782:	b8 00 00 00 00       	mov    eax,0x0
10001787:	c3                   	ret    

10001788 <FloppyDrive::unselect()>:
10001788:	55                   	push   ebp
10001789:	89 e5                	mov    ebp,esp
1000178b:	83 ec 08             	sub    esp,0x8
1000178e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001791:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001797:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000179a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100017a0:	83 ec 04             	sub    esp,0x4
100017a3:	6a 00                	push   0x0
100017a5:	52                   	push   edx
100017a6:	50                   	push   eax
100017a7:	e8 fc ff ff ff       	call   100017a8 <FloppyDrive::unselect()+0x20>	100017a8: R_386_PC32	Floppy::select(int, bool)
100017ac:	83 c4 10             	add    esp,0x10
100017af:	90                   	nop
100017b0:	c9                   	leave  
100017b1:	c3                   	ret    

100017b2 <FloppyDrive::select()>:
100017b2:	55                   	push   ebp
100017b3:	89 e5                	mov    ebp,esp
100017b5:	83 ec 18             	sub    esp,0x18
100017b8:	83 ec 0c             	sub    esp,0xc
100017bb:	68 39 5c 00 10       	push   0x10005c39	100017bc: R_386_32	.text
100017c0:	e8 fc ff ff ff       	call   100017c1 <FloppyDrive::select()+0xf>	100017c1: R_386_PC32	Dbg::kprintf(char const*, ...)
100017c5:	83 c4 10             	add    esp,0x10
100017c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100017d4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100017da:	83 ec 04             	sub    esp,0x4
100017dd:	6a 01                	push   0x1
100017df:	52                   	push   edx
100017e0:	50                   	push   eax
100017e1:	e8 fc ff ff ff       	call   100017e2 <FloppyDrive::select()+0x30>	100017e2: R_386_PC32	Floppy::select(int, bool)
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100017ec:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100017f0:	75 22                	jne    10001814 <FloppyDrive::select()+0x62>
100017f2:	83 ec 0c             	sub    esp,0xc
100017f5:	68 50 5c 00 10       	push   0x10005c50	100017f6: R_386_32	.text
100017fa:	e8 fc ff ff ff       	call   100017fb <FloppyDrive::select()+0x49>	100017fb: R_386_PC32	Dbg::kprintf(char const*, ...)
100017ff:	83 c4 10             	add    esp,0x10
10001802:	83 ec 0c             	sub    esp,0xc
10001805:	68 dc 05 00 00       	push   0x5dc
1000180a:	e8 fc ff ff ff       	call   1000180b <FloppyDrive::select()+0x59>	1000180b: R_386_PC32	milliTenthSleep(unsigned int)
1000180f:	83 c4 10             	add    esp,0x10
10001812:	eb a4                	jmp    100017b8 <FloppyDrive::select()+0x6>
10001814:	90                   	nop
10001815:	c9                   	leave  
10001816:	c3                   	ret    
10001817:	90                   	nop

10001818 <FloppyDrive::seek(int, int)>:
10001818:	55                   	push   ebp
10001819:	89 e5                	mov    ebp,esp
1000181b:	83 ec 18             	sub    esp,0x18
1000181e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001825:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001829:	7e 33                	jle    1000185e <FloppyDrive::seek(int, int)+0x46>
1000182b:	83 ec 0c             	sub    esp,0xc
1000182e:	68 70 5c 00 10       	push   0x10005c70	1000182f: R_386_32	.text
10001833:	e8 fc ff ff ff       	call   10001834 <FloppyDrive::seek(int, int)+0x1c>	10001834: R_386_PC32	Dbg::kprintf(char const*, ...)
10001838:	83 c4 10             	add    esp,0x10
1000183b:	83 ec 0c             	sub    esp,0xc
1000183e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001841:	e8 fc ff ff ff       	call   10001842 <FloppyDrive::seek(int, int)+0x2a>	10001842: R_386_PC32	FloppyDrive::motorOff()
10001846:	83 c4 10             	add    esp,0x10
10001849:	83 ec 0c             	sub    esp,0xc
1000184c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000184f:	e8 fc ff ff ff       	call   10001850 <FloppyDrive::seek(int, int)+0x38>	10001850: R_386_PC32	FloppyDrive::unselect()
10001854:	83 c4 10             	add    esp,0x10
10001857:	b0 00                	mov    al,0x0
10001859:	e9 da 02 00 00       	jmp    10001b38 <FloppyDrive::seek(int, int)+0x320>
1000185e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001861:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001867:	83 ec 08             	sub    esp,0x8
1000186a:	50                   	push   eax
1000186b:	68 97 5c 00 10       	push   0x10005c97	1000186c: R_386_32	.text
10001870:	e8 fc ff ff ff       	call   10001871 <FloppyDrive::seek(int, int)+0x59>	10001871: R_386_PC32	Dbg::kprintf(char const*, ...)
10001875:	83 c4 10             	add    esp,0x10
10001878:	83 ec 0c             	sub    esp,0xc
1000187b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000187e:	e8 fc ff ff ff       	call   1000187f <FloppyDrive::seek(int, int)+0x67>	1000187f: R_386_PC32	FloppyDrive::select()
10001883:	83 c4 10             	add    esp,0x10
10001886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001889:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000188f:	83 ec 08             	sub    esp,0x8
10001892:	50                   	push   eax
10001893:	68 a7 5c 00 10       	push   0x10005ca7	10001894: R_386_32	.text
10001898:	e8 fc ff ff ff       	call   10001899 <FloppyDrive::seek(int, int)+0x81>	10001899: R_386_PC32	Dbg::kprintf(char const*, ...)
1000189d:	83 c4 10             	add    esp,0x10
100018a0:	83 ec 0c             	sub    esp,0xc
100018a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100018a6:	e8 fc ff ff ff       	call   100018a7 <FloppyDrive::seek(int, int)+0x8f>	100018a7: R_386_PC32	FloppyDrive::motorOn()
100018ab:	83 c4 10             	add    esp,0x10
100018ae:	83 ec 0c             	sub    esp,0xc
100018b1:	68 b6 5c 00 10       	push   0x10005cb6	100018b2: R_386_32	.text
100018b6:	e8 fc ff ff ff       	call   100018b7 <FloppyDrive::seek(int, int)+0x9f>	100018b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100018bb:	83 c4 10             	add    esp,0x10
100018be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018c7:	83 ec 08             	sub    esp,0x8
100018ca:	6a 0f                	push   0xf
100018cc:	50                   	push   eax
100018cd:	e8 fc ff ff ff       	call   100018ce <FloppyDrive::seek(int, int)+0xb6>	100018ce: R_386_PC32	Floppy::writeCommand(unsigned char)
100018d2:	83 c4 10             	add    esp,0x10
100018d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018de:	83 ec 0c             	sub    esp,0xc
100018e1:	50                   	push   eax
100018e2:	e8 fc ff ff ff       	call   100018e3 <FloppyDrive::seek(int, int)+0xcb>	100018e3: R_386_PC32	Floppy::wasFailure()
100018e7:	83 c4 10             	add    esp,0x10
100018ea:	84 c0                	test   al,al
100018ec:	74 3d                	je     1000192b <FloppyDrive::seek(int, int)+0x113>
100018ee:	83 ec 0c             	sub    esp,0xc
100018f1:	68 c1 5c 00 10       	push   0x10005cc1	100018f2: R_386_32	.text
100018f6:	e8 fc ff ff ff       	call   100018f7 <FloppyDrive::seek(int, int)+0xdf>	100018f7: R_386_PC32	Dbg::kprintf(char const*, ...)
100018fb:	83 c4 10             	add    esp,0x10
100018fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001901:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001907:	83 ec 0c             	sub    esp,0xc
1000190a:	50                   	push   eax
1000190b:	e8 fc ff ff ff       	call   1000190c <FloppyDrive::seek(int, int)+0xf4>	1000190c: R_386_PC32	Floppy::reset()
10001910:	83 c4 10             	add    esp,0x10
10001913:	83 ec 0c             	sub    esp,0xc
10001916:	68 cd 5c 00 10       	push   0x10005ccd	10001917: R_386_32	.text
1000191b:	e8 fc ff ff ff       	call   1000191c <FloppyDrive::seek(int, int)+0x104>	1000191c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001920:	83 c4 10             	add    esp,0x10
10001923:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001926:	e9 fa fe ff ff       	jmp    10001825 <FloppyDrive::seek(int, int)+0xd>
1000192b:	83 ec 0c             	sub    esp,0xc
1000192e:	68 d9 5c 00 10       	push   0x10005cd9	1000192f: R_386_32	.text
10001933:	e8 fc ff ff ff       	call   10001934 <FloppyDrive::seek(int, int)+0x11c>	10001934: R_386_PC32	Dbg::kprintf(char const*, ...)
10001938:	83 c4 10             	add    esp,0x10
1000193b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000193e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001944:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
1000194b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000194e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001954:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001957:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000195d:	88 d1                	mov    cl,dl
1000195f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001962:	c1 e2 02             	shl    edx,0x2
10001965:	09 ca                	or     edx,ecx
10001967:	0f b6 d2             	movzx  edx,dl
1000196a:	83 ec 08             	sub    esp,0x8
1000196d:	52                   	push   edx
1000196e:	50                   	push   eax
1000196f:	e8 fc ff ff ff       	call   10001970 <FloppyDrive::seek(int, int)+0x158>	10001970: R_386_PC32	Floppy::writeCommand(unsigned char)
10001974:	83 c4 10             	add    esp,0x10
10001977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000197a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001980:	83 ec 0c             	sub    esp,0xc
10001983:	50                   	push   eax
10001984:	e8 fc ff ff ff       	call   10001985 <FloppyDrive::seek(int, int)+0x16d>	10001985: R_386_PC32	Floppy::wasFailure()
10001989:	83 c4 10             	add    esp,0x10
1000198c:	84 c0                	test   al,al
1000198e:	74 1d                	je     100019ad <FloppyDrive::seek(int, int)+0x195>
10001990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001993:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001999:	83 ec 0c             	sub    esp,0xc
1000199c:	50                   	push   eax
1000199d:	e8 fc ff ff ff       	call   1000199e <FloppyDrive::seek(int, int)+0x186>	1000199e: R_386_PC32	Floppy::reset()
100019a2:	83 c4 10             	add    esp,0x10
100019a5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100019a8:	e9 78 fe ff ff       	jmp    10001825 <FloppyDrive::seek(int, int)+0xd>
100019ad:	83 ec 0c             	sub    esp,0xc
100019b0:	68 e4 5c 00 10       	push   0x10005ce4	100019b1: R_386_32	.text
100019b5:	e8 fc ff ff ff       	call   100019b6 <FloppyDrive::seek(int, int)+0x19e>	100019b6: R_386_PC32	Dbg::kprintf(char const*, ...)
100019ba:	83 c4 10             	add    esp,0x10
100019bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019c0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100019c9:	0f b6 d2             	movzx  edx,dl
100019cc:	83 ec 08             	sub    esp,0x8
100019cf:	52                   	push   edx
100019d0:	50                   	push   eax
100019d1:	e8 fc ff ff ff       	call   100019d2 <FloppyDrive::seek(int, int)+0x1ba>	100019d2: R_386_PC32	Floppy::writeCommand(unsigned char)
100019d6:	83 c4 10             	add    esp,0x10
100019d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019dc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019e2:	83 ec 0c             	sub    esp,0xc
100019e5:	50                   	push   eax
100019e6:	e8 fc ff ff ff       	call   100019e7 <FloppyDrive::seek(int, int)+0x1cf>	100019e7: R_386_PC32	Floppy::wasFailure()
100019eb:	83 c4 10             	add    esp,0x10
100019ee:	84 c0                	test   al,al
100019f0:	74 1d                	je     10001a0f <FloppyDrive::seek(int, int)+0x1f7>
100019f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019f5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019fb:	83 ec 0c             	sub    esp,0xc
100019fe:	50                   	push   eax
100019ff:	e8 fc ff ff ff       	call   10001a00 <FloppyDrive::seek(int, int)+0x1e8>	10001a00: R_386_PC32	Floppy::reset()
10001a04:	83 c4 10             	add    esp,0x10
10001a07:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a0a:	e9 16 fe ff ff       	jmp    10001825 <FloppyDrive::seek(int, int)+0xd>
10001a0f:	83 ec 0c             	sub    esp,0xc
10001a12:	68 ef 5c 00 10       	push   0x10005cef	10001a13: R_386_32	.text
10001a17:	e8 fc ff ff ff       	call   10001a18 <FloppyDrive::seek(int, int)+0x200>	10001a18: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a1c:	83 c4 10             	add    esp,0x10
10001a1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a22:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a28:	83 ec 08             	sub    esp,0x8
10001a2b:	68 dc 05 00 00       	push   0x5dc
10001a30:	50                   	push   eax
10001a31:	e8 fc ff ff ff       	call   10001a32 <FloppyDrive::seek(int, int)+0x21a>	10001a32: R_386_PC32	Floppy::waitIRQ(int)
10001a36:	83 c4 10             	add    esp,0x10
10001a39:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001a3c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001a3f:	83 f0 01             	xor    eax,0x1
10001a42:	84 c0                	test   al,al
10001a44:	74 2d                	je     10001a73 <FloppyDrive::seek(int, int)+0x25b>
10001a46:	83 ec 0c             	sub    esp,0xc
10001a49:	68 fa 5c 00 10       	push   0x10005cfa	10001a4a: R_386_32	.text
10001a4e:	e8 fc ff ff ff       	call   10001a4f <FloppyDrive::seek(int, int)+0x237>	10001a4f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a53:	83 c4 10             	add    esp,0x10
10001a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a59:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a5f:	83 ec 0c             	sub    esp,0xc
10001a62:	50                   	push   eax
10001a63:	e8 fc ff ff ff       	call   10001a64 <FloppyDrive::seek(int, int)+0x24c>	10001a64: R_386_PC32	Floppy::reset()
10001a68:	83 c4 10             	add    esp,0x10
10001a6b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a6e:	e9 b2 fd ff ff       	jmp    10001825 <FloppyDrive::seek(int, int)+0xd>
10001a73:	83 ec 0c             	sub    esp,0xc
10001a76:	68 08 5d 00 10       	push   0x10005d08	10001a77: R_386_32	.text
10001a7b:	e8 fc ff ff ff       	call   10001a7c <FloppyDrive::seek(int, int)+0x264>	10001a7c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a80:	83 c4 10             	add    esp,0x10
10001a83:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001a8a:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001a91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a94:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a9a:	83 ec 04             	sub    esp,0x4
10001a9d:	8d 55 e8             	lea    edx,[ebp-0x18]
10001aa0:	52                   	push   edx
10001aa1:	8d 55 ec             	lea    edx,[ebp-0x14]
10001aa4:	52                   	push   edx
10001aa5:	50                   	push   eax
10001aa6:	e8 fc ff ff ff       	call   10001aa7 <FloppyDrive::seek(int, int)+0x28f>	10001aa7: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001aab:	83 c4 10             	add    esp,0x10
10001aae:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001ab1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001ab4:	83 f0 01             	xor    eax,0x1
10001ab7:	84 c0                	test   al,al
10001ab9:	74 15                	je     10001ad0 <FloppyDrive::seek(int, int)+0x2b8>
10001abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001abe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ac4:	83 ec 0c             	sub    esp,0xc
10001ac7:	50                   	push   eax
10001ac8:	e8 fc ff ff ff       	call   10001ac9 <FloppyDrive::seek(int, int)+0x2b1>	10001ac9: R_386_PC32	Floppy::reset()
10001acd:	83 c4 10             	add    esp,0x10
10001ad0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001ad3:	83 f0 01             	xor    eax,0x1
10001ad6:	84 c0                	test   al,al
10001ad8:	75 08                	jne    10001ae2 <FloppyDrive::seek(int, int)+0x2ca>
10001ada:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001add:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001ae0:	74 08                	je     10001aea <FloppyDrive::seek(int, int)+0x2d2>
10001ae2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ae5:	e9 3b fd ff ff       	jmp    10001825 <FloppyDrive::seek(int, int)+0xd>
10001aea:	83 ec 0c             	sub    esp,0xc
10001aed:	68 13 5d 00 10       	push   0x10005d13	10001aee: R_386_32	.text
10001af2:	e8 fc ff ff ff       	call   10001af3 <FloppyDrive::seek(int, int)+0x2db>	10001af3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001af7:	83 c4 10             	add    esp,0x10
10001afa:	83 ec 0c             	sub    esp,0xc
10001afd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b00:	e8 fc ff ff ff       	call   10001b01 <FloppyDrive::seek(int, int)+0x2e9>	10001b01: R_386_PC32	FloppyDrive::motorOff()
10001b05:	83 c4 10             	add    esp,0x10
10001b08:	83 ec 0c             	sub    esp,0xc
10001b0b:	68 20 5d 00 10       	push   0x10005d20	10001b0c: R_386_32	.text
10001b10:	e8 fc ff ff ff       	call   10001b11 <FloppyDrive::seek(int, int)+0x2f9>	10001b11: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b15:	83 c4 10             	add    esp,0x10
10001b18:	83 ec 0c             	sub    esp,0xc
10001b1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b1e:	e8 fc ff ff ff       	call   10001b1f <FloppyDrive::seek(int, int)+0x307>	10001b1f: R_386_PC32	FloppyDrive::unselect()
10001b23:	83 c4 10             	add    esp,0x10
10001b26:	83 ec 0c             	sub    esp,0xc
10001b29:	68 2d 5d 00 10       	push   0x10005d2d	10001b2a: R_386_32	.text
10001b2e:	e8 fc ff ff ff       	call   10001b2f <FloppyDrive::seek(int, int)+0x317>	10001b2f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b33:	83 c4 10             	add    esp,0x10
10001b36:	b0 01                	mov    al,0x1
10001b38:	c9                   	leave  
10001b39:	c3                   	ret    

10001b3a <FloppyDrive::calibrate()>:
10001b3a:	55                   	push   ebp
10001b3b:	89 e5                	mov    ebp,esp
10001b3d:	83 ec 18             	sub    esp,0x18
10001b40:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001b47:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001b4b:	7e 25                	jle    10001b72 <FloppyDrive::calibrate()+0x38>
10001b4d:	83 ec 0c             	sub    esp,0xc
10001b50:	68 3c 5d 00 10       	push   0x10005d3c	10001b51: R_386_32	.text
10001b55:	e8 fc ff ff ff       	call   10001b56 <FloppyDrive::calibrate()+0x1c>	10001b56: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b5a:	83 c4 10             	add    esp,0x10
10001b5d:	83 ec 0c             	sub    esp,0xc
10001b60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b63:	e8 fc ff ff ff       	call   10001b64 <FloppyDrive::calibrate()+0x2a>	10001b64: R_386_PC32	FloppyDrive::motorOff()
10001b68:	83 c4 10             	add    esp,0x10
10001b6b:	b0 00                	mov    al,0x0
10001b6d:	e9 01 02 00 00       	jmp    10001d73 <FloppyDrive::calibrate()+0x239>
10001b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b75:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001b7b:	83 ec 08             	sub    esp,0x8
10001b7e:	50                   	push   eax
10001b7f:	68 68 5d 00 10       	push   0x10005d68	10001b80: R_386_32	.text
10001b84:	e8 fc ff ff ff       	call   10001b85 <FloppyDrive::calibrate()+0x4b>	10001b85: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b89:	83 c4 10             	add    esp,0x10
10001b8c:	83 ec 0c             	sub    esp,0xc
10001b8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b92:	e8 fc ff ff ff       	call   10001b93 <FloppyDrive::calibrate()+0x59>	10001b93: R_386_PC32	FloppyDrive::motorOn()
10001b97:	83 c4 10             	add    esp,0x10
10001b9a:	83 ec 0c             	sub    esp,0xc
10001b9d:	68 76 5d 00 10       	push   0x10005d76	10001b9e: R_386_32	.text
10001ba2:	e8 fc ff ff ff       	call   10001ba3 <FloppyDrive::calibrate()+0x69>	10001ba3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ba7:	83 c4 10             	add    esp,0x10
10001baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bad:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bb3:	83 ec 08             	sub    esp,0x8
10001bb6:	6a 07                	push   0x7
10001bb8:	50                   	push   eax
10001bb9:	e8 fc ff ff ff       	call   10001bba <FloppyDrive::calibrate()+0x80>	10001bba: R_386_PC32	Floppy::writeCommand(unsigned char)
10001bbe:	83 c4 10             	add    esp,0x10
10001bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bc4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bca:	83 ec 0c             	sub    esp,0xc
10001bcd:	50                   	push   eax
10001bce:	e8 fc ff ff ff       	call   10001bcf <FloppyDrive::calibrate()+0x95>	10001bcf: R_386_PC32	Floppy::wasFailure()
10001bd3:	83 c4 10             	add    esp,0x10
10001bd6:	84 c0                	test   al,al
10001bd8:	74 1d                	je     10001bf7 <FloppyDrive::calibrate()+0xbd>
10001bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bdd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001be3:	83 ec 0c             	sub    esp,0xc
10001be6:	50                   	push   eax
10001be7:	e8 fc ff ff ff       	call   10001be8 <FloppyDrive::calibrate()+0xae>	10001be8: R_386_PC32	Floppy::reset()
10001bec:	83 c4 10             	add    esp,0x10
10001bef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bf2:	e9 50 ff ff ff       	jmp    10001b47 <FloppyDrive::calibrate()+0xd>
10001bf7:	83 ec 0c             	sub    esp,0xc
10001bfa:	68 7f 5d 00 10       	push   0x10005d7f	10001bfb: R_386_32	.text
10001bff:	e8 fc ff ff ff       	call   10001c00 <FloppyDrive::calibrate()+0xc6>	10001c00: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c04:	83 c4 10             	add    esp,0x10
10001c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c0a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c10:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001c17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c1a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c20:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001c23:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001c29:	0f b6 d2             	movzx  edx,dl
10001c2c:	83 ec 08             	sub    esp,0x8
10001c2f:	52                   	push   edx
10001c30:	50                   	push   eax
10001c31:	e8 fc ff ff ff       	call   10001c32 <FloppyDrive::calibrate()+0xf8>	10001c32: R_386_PC32	Floppy::writeCommand(unsigned char)
10001c36:	83 c4 10             	add    esp,0x10
10001c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c3c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c42:	83 ec 0c             	sub    esp,0xc
10001c45:	50                   	push   eax
10001c46:	e8 fc ff ff ff       	call   10001c47 <FloppyDrive::calibrate()+0x10d>	10001c47: R_386_PC32	Floppy::wasFailure()
10001c4b:	83 c4 10             	add    esp,0x10
10001c4e:	84 c0                	test   al,al
10001c50:	74 1d                	je     10001c6f <FloppyDrive::calibrate()+0x135>
10001c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c55:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c5b:	83 ec 0c             	sub    esp,0xc
10001c5e:	50                   	push   eax
10001c5f:	e8 fc ff ff ff       	call   10001c60 <FloppyDrive::calibrate()+0x126>	10001c60: R_386_PC32	Floppy::reset()
10001c64:	83 c4 10             	add    esp,0x10
10001c67:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c6a:	e9 d8 fe ff ff       	jmp    10001b47 <FloppyDrive::calibrate()+0xd>
10001c6f:	83 ec 0c             	sub    esp,0xc
10001c72:	68 88 5d 00 10       	push   0x10005d88	10001c73: R_386_32	.text
10001c77:	e8 fc ff ff ff       	call   10001c78 <FloppyDrive::calibrate()+0x13e>	10001c78: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c7c:	83 c4 10             	add    esp,0x10
10001c7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c82:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c88:	83 ec 08             	sub    esp,0x8
10001c8b:	68 dc 05 00 00       	push   0x5dc
10001c90:	50                   	push   eax
10001c91:	e8 fc ff ff ff       	call   10001c92 <FloppyDrive::calibrate()+0x158>	10001c92: R_386_PC32	Floppy::waitIRQ(int)
10001c96:	83 c4 10             	add    esp,0x10
10001c99:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001c9c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001c9f:	83 f0 01             	xor    eax,0x1
10001ca2:	84 c0                	test   al,al
10001ca4:	74 1d                	je     10001cc3 <FloppyDrive::calibrate()+0x189>
10001ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ca9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001caf:	83 ec 0c             	sub    esp,0xc
10001cb2:	50                   	push   eax
10001cb3:	e8 fc ff ff ff       	call   10001cb4 <FloppyDrive::calibrate()+0x17a>	10001cb4: R_386_PC32	Floppy::reset()
10001cb8:	83 c4 10             	add    esp,0x10
10001cbb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001cbe:	e9 84 fe ff ff       	jmp    10001b47 <FloppyDrive::calibrate()+0xd>
10001cc3:	83 ec 0c             	sub    esp,0xc
10001cc6:	68 91 5d 00 10       	push   0x10005d91	10001cc7: R_386_32	.text
10001ccb:	e8 fc ff ff ff       	call   10001ccc <FloppyDrive::calibrate()+0x192>	10001ccc: R_386_PC32	Dbg::kprintf(char const*, ...)
10001cd0:	83 c4 10             	add    esp,0x10
10001cd3:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001cda:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001ce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ce4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001cea:	83 ec 04             	sub    esp,0x4
10001ced:	8d 55 e8             	lea    edx,[ebp-0x18]
10001cf0:	52                   	push   edx
10001cf1:	8d 55 ec             	lea    edx,[ebp-0x14]
10001cf4:	52                   	push   edx
10001cf5:	50                   	push   eax
10001cf6:	e8 fc ff ff ff       	call   10001cf7 <FloppyDrive::calibrate()+0x1bd>	10001cf7: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001cfb:	83 c4 10             	add    esp,0x10
10001cfe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001d01:	83 ec 0c             	sub    esp,0xc
10001d04:	68 9a 5d 00 10       	push   0x10005d9a	10001d05: R_386_32	.text
10001d09:	e8 fc ff ff ff       	call   10001d0a <FloppyDrive::calibrate()+0x1d0>	10001d0a: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d0e:	83 c4 10             	add    esp,0x10
10001d11:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001d14:	83 f0 01             	xor    eax,0x1
10001d17:	84 c0                	test   al,al
10001d19:	74 15                	je     10001d30 <FloppyDrive::calibrate()+0x1f6>
10001d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d1e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d24:	83 ec 0c             	sub    esp,0xc
10001d27:	50                   	push   eax
10001d28:	e8 fc ff ff ff       	call   10001d29 <FloppyDrive::calibrate()+0x1ef>	10001d29: R_386_PC32	Floppy::reset()
10001d2d:	83 c4 10             	add    esp,0x10
10001d30:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001d33:	83 f0 01             	xor    eax,0x1
10001d36:	84 c0                	test   al,al
10001d38:	75 11                	jne    10001d4b <FloppyDrive::calibrate()+0x211>
10001d3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001d3d:	85 c0                	test   eax,eax
10001d3f:	75 0a                	jne    10001d4b <FloppyDrive::calibrate()+0x211>
10001d41:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001d44:	83 e0 20             	and    eax,0x20
10001d47:	85 c0                	test   eax,eax
10001d49:	75 08                	jne    10001d53 <FloppyDrive::calibrate()+0x219>
10001d4b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001d4e:	e9 f4 fd ff ff       	jmp    10001b47 <FloppyDrive::calibrate()+0xd>
10001d53:	83 ec 0c             	sub    esp,0xc
10001d56:	68 a3 5d 00 10       	push   0x10005da3	10001d57: R_386_32	.text
10001d5b:	e8 fc ff ff ff       	call   10001d5c <FloppyDrive::calibrate()+0x222>	10001d5c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d60:	83 c4 10             	add    esp,0x10
10001d63:	83 ec 0c             	sub    esp,0xc
10001d66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d69:	e8 fc ff ff ff       	call   10001d6a <FloppyDrive::calibrate()+0x230>	10001d6a: R_386_PC32	FloppyDrive::motorOff()
10001d6e:	83 c4 10             	add    esp,0x10
10001d71:	b0 01                	mov    al,0x1
10001d73:	c9                   	leave  
10001d74:	c3                   	ret    
10001d75:	90                   	nop

10001d76 <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001d76:	55                   	push   ebp
10001d77:	89 e5                	mov    ebp,esp
10001d79:	57                   	push   edi
10001d7a:	56                   	push   esi
10001d7b:	53                   	push   ebx
10001d7c:	83 ec 6c             	sub    esp,0x6c
10001d7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001d82:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
10001d85:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001d89:	74 43                	je     10001dce <FloppyDrive::doTrack(int, bool, unsigned char*)+0x58>
10001d8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d8e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001d9a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001d9d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001da0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001da3:	c7 45 cc 00 48 00 00 	mov    DWORD PTR [ebp-0x34],0x4800
10001daa:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001dad:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001db0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001db3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001db6:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10001db9:	89 c6                	mov    esi,eax
10001dbb:	89 d7                	mov    edi,edx
10001dbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001dbf:	89 c8                	mov    eax,ecx
10001dc1:	89 fa                	mov    edx,edi
10001dc3:	89 f3                	mov    ebx,esi
10001dc5:	89 5d c4             	mov    DWORD PTR [ebp-0x3c],ebx
10001dc8:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
10001dcb:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001dce:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001dd2:	74 07                	je     10001ddb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65>
10001dd4:	b8 c5 00 00 00       	mov    eax,0xc5
10001dd9:	eb 05                	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a>
10001ddb:	b8 c6 00 00 00       	mov    eax,0xc6
10001de0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001de3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001dea:	83 ec 0c             	sub    esp,0xc
10001ded:	68 ac 5d 00 10       	push   0x10005dac	10001dee: R_386_32	.text
10001df2:	e8 fc ff ff ff       	call   10001df3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d>	10001df3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001df7:	83 c4 10             	add    esp,0x10
10001dfa:	83 7d e4 14          	cmp    DWORD PTR [ebp-0x1c],0x14
10001dfe:	75 26                	jne    10001e26 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb0>
10001e00:	83 ec 0c             	sub    esp,0xc
10001e03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e06:	e8 fc ff ff ff       	call   10001e07 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x91>	10001e07: R_386_PC32	FloppyDrive::motorOff()
10001e0b:	83 c4 10             	add    esp,0x10
10001e0e:	83 ec 0c             	sub    esp,0xc
10001e11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e14:	e8 fc ff ff ff       	call   10001e15 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x9f>	10001e15: R_386_PC32	FloppyDrive::unselect()
10001e19:	83 c4 10             	add    esp,0x10
10001e1c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001e21:	e9 71 07 00 00       	jmp    10002597 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e26:	83 ec 0c             	sub    esp,0xc
10001e29:	68 b6 5d 00 10       	push   0x10005db6	10001e2a: R_386_32	.text
10001e2e:	e8 fc ff ff ff       	call   10001e2f <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb9>	10001e2f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e33:	83 c4 10             	add    esp,0x10
10001e36:	83 ec 04             	sub    esp,0x4
10001e39:	6a 00                	push   0x0
10001e3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e41:	e8 fc ff ff ff       	call   10001e42 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xcc>	10001e42: R_386_PC32	FloppyDrive::seek(int, int)
10001e46:	83 c4 10             	add    esp,0x10
10001e49:	83 f0 01             	xor    eax,0x1
10001e4c:	84 c0                	test   al,al
10001e4e:	74 0a                	je     10001e5a <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe4>
10001e50:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001e55:	e9 3d 07 00 00       	jmp    10002597 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e5a:	83 ec 04             	sub    esp,0x4
10001e5d:	6a 01                	push   0x1
10001e5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e65:	e8 fc ff ff ff       	call   10001e66 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf0>	10001e66: R_386_PC32	FloppyDrive::seek(int, int)
10001e6a:	83 c4 10             	add    esp,0x10
10001e6d:	83 f0 01             	xor    eax,0x1
10001e70:	84 c0                	test   al,al
10001e72:	74 0a                	je     10001e7e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x108>
10001e74:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001e79:	e9 19 07 00 00       	jmp    10002597 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e7e:	83 ec 0c             	sub    esp,0xc
10001e81:	68 c6 5d 00 10       	push   0x10005dc6	10001e82: R_386_32	.text
10001e86:	e8 fc ff ff ff       	call   10001e87 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x111>	10001e87: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e8b:	83 c4 10             	add    esp,0x10
10001e8e:	83 ec 0c             	sub    esp,0xc
10001e91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e94:	e8 fc ff ff ff       	call   10001e95 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x11f>	10001e95: R_386_PC32	FloppyDrive::motorOn()
10001e99:	83 c4 10             	add    esp,0x10
10001e9c:	83 ec 0c             	sub    esp,0xc
10001e9f:	68 d2 5d 00 10       	push   0x10005dd2	10001ea0: R_386_32	.text
10001ea4:	e8 fc ff ff ff       	call   10001ea5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x12f>	10001ea5: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ea9:	83 c4 10             	add    esp,0x10
10001eac:	83 ec 0c             	sub    esp,0xc
10001eaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001eb2:	e8 fc ff ff ff       	call   10001eb3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x13d>	10001eb3: R_386_PC32	FloppyDrive::select()
10001eb7:	83 c4 10             	add    esp,0x10
10001eba:	83 ec 0c             	sub    esp,0xc
10001ebd:	68 dd 5d 00 10       	push   0x10005ddd	10001ebe: R_386_32	.text
10001ec2:	e8 fc ff ff ff       	call   10001ec3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x14d>	10001ec3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ec7:	83 c4 10             	add    esp,0x10
10001eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ecd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ed3:	0f b6 55 94          	movzx  edx,BYTE PTR [ebp-0x6c]
10001ed7:	83 ec 08             	sub    esp,0x8
10001eda:	52                   	push   edx
10001edb:	50                   	push   eax
10001edc:	e8 fc ff ff ff       	call   10001edd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x167>	10001edd: R_386_PC32	Floppy::dmaInit(bool)
10001ee1:	83 c4 10             	add    esp,0x10
10001ee4:	83 ec 0c             	sub    esp,0xc
10001ee7:	68 e8 5d 00 10       	push   0x10005de8	10001ee8: R_386_32	.text
10001eec:	e8 fc ff ff ff       	call   10001eed <FloppyDrive::doTrack(int, bool, unsigned char*)+0x177>	10001eed: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ef1:	83 c4 10             	add    esp,0x10
10001ef4:	83 ec 0c             	sub    esp,0xc
10001ef7:	68 e8 03 00 00       	push   0x3e8
10001efc:	e8 fc ff ff ff       	call   10001efd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x187>	10001efd: R_386_PC32	milliTenthSleep(unsigned int)
10001f01:	83 c4 10             	add    esp,0x10
10001f04:	83 ec 0c             	sub    esp,0xc
10001f07:	68 f5 5d 00 10       	push   0x10005df5	10001f08: R_386_32	.text
10001f0c:	e8 fc ff ff ff       	call   10001f0d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x197>	10001f0d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f11:	83 c4 10             	add    esp,0x10
10001f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f17:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f1d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001f20:	0f b6 d2             	movzx  edx,dl
10001f23:	83 ec 08             	sub    esp,0x8
10001f26:	52                   	push   edx
10001f27:	50                   	push   eax
10001f28:	e8 fc ff ff ff       	call   10001f29 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b3>	10001f29: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f2d:	83 c4 10             	add    esp,0x10
10001f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f39:	83 ec 0c             	sub    esp,0xc
10001f3c:	50                   	push   eax
10001f3d:	e8 fc ff ff ff       	call   10001f3e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1c8>	10001f3e: R_386_PC32	Floppy::wasFailure()
10001f42:	83 c4 10             	add    esp,0x10
10001f45:	84 c0                	test   al,al
10001f47:	74 1d                	je     10001f66 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1f0>
10001f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f4c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f52:	83 ec 0c             	sub    esp,0xc
10001f55:	50                   	push   eax
10001f56:	e8 fc ff ff ff       	call   10001f57 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1e1>	10001f57: R_386_PC32	Floppy::reset()
10001f5b:	83 c4 10             	add    esp,0x10
10001f5e:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f61:	e9 84 fe ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f69:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001f72:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001f78:	0f b6 d2             	movzx  edx,dl
10001f7b:	83 ec 08             	sub    esp,0x8
10001f7e:	52                   	push   edx
10001f7f:	50                   	push   eax
10001f80:	e8 fc ff ff ff       	call   10001f81 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x20b>	10001f81: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f85:	83 c4 10             	add    esp,0x10
10001f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f8b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f91:	83 ec 0c             	sub    esp,0xc
10001f94:	50                   	push   eax
10001f95:	e8 fc ff ff ff       	call   10001f96 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x220>	10001f96: R_386_PC32	Floppy::wasFailure()
10001f9a:	83 c4 10             	add    esp,0x10
10001f9d:	84 c0                	test   al,al
10001f9f:	74 1d                	je     10001fbe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x248>
10001fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fa4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001faa:	83 ec 0c             	sub    esp,0xc
10001fad:	50                   	push   eax
10001fae:	e8 fc ff ff ff       	call   10001faf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x239>	10001faf: R_386_PC32	Floppy::reset()
10001fb3:	83 c4 10             	add    esp,0x10
10001fb6:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001fb9:	e9 2c fe ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fc7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001fca:	0f b6 d2             	movzx  edx,dl
10001fcd:	83 ec 08             	sub    esp,0x8
10001fd0:	52                   	push   edx
10001fd1:	50                   	push   eax
10001fd2:	e8 fc ff ff ff       	call   10001fd3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x25d>	10001fd3: R_386_PC32	Floppy::writeCommand(unsigned char)
10001fd7:	83 c4 10             	add    esp,0x10
10001fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fdd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fe3:	83 ec 0c             	sub    esp,0xc
10001fe6:	50                   	push   eax
10001fe7:	e8 fc ff ff ff       	call   10001fe8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x272>	10001fe8: R_386_PC32	Floppy::wasFailure()
10001fec:	83 c4 10             	add    esp,0x10
10001fef:	84 c0                	test   al,al
10001ff1:	74 1d                	je     10002010 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x29a>
10001ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ff6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ffc:	83 ec 0c             	sub    esp,0xc
10001fff:	50                   	push   eax
10002000:	e8 fc ff ff ff       	call   10002001 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28b>	10002001: R_386_PC32	Floppy::reset()
10002005:	83 c4 10             	add    esp,0x10
10002008:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000200b:	e9 da fd ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002013:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002019:	83 ec 08             	sub    esp,0x8
1000201c:	6a 00                	push   0x0
1000201e:	50                   	push   eax
1000201f:	e8 fc ff ff ff       	call   10002020 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2aa>	10002020: R_386_PC32	Floppy::writeCommand(unsigned char)
10002024:	83 c4 10             	add    esp,0x10
10002027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000202a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002030:	83 ec 0c             	sub    esp,0xc
10002033:	50                   	push   eax
10002034:	e8 fc ff ff ff       	call   10002035 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2bf>	10002035: R_386_PC32	Floppy::wasFailure()
10002039:	83 c4 10             	add    esp,0x10
1000203c:	84 c0                	test   al,al
1000203e:	74 1d                	je     1000205d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2e7>
10002040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002043:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002049:	83 ec 0c             	sub    esp,0xc
1000204c:	50                   	push   eax
1000204d:	e8 fc ff ff ff       	call   1000204e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2d8>	1000204e: R_386_PC32	Floppy::reset()
10002052:	83 c4 10             	add    esp,0x10
10002055:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002058:	e9 8d fd ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000205d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002060:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002066:	83 ec 08             	sub    esp,0x8
10002069:	6a 01                	push   0x1
1000206b:	50                   	push   eax
1000206c:	e8 fc ff ff ff       	call   1000206d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f7>	1000206d: R_386_PC32	Floppy::writeCommand(unsigned char)
10002071:	83 c4 10             	add    esp,0x10
10002074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002077:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000207d:	83 ec 0c             	sub    esp,0xc
10002080:	50                   	push   eax
10002081:	e8 fc ff ff ff       	call   10002082 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x30c>	10002082: R_386_PC32	Floppy::wasFailure()
10002086:	83 c4 10             	add    esp,0x10
10002089:	84 c0                	test   al,al
1000208b:	74 1d                	je     100020aa <FloppyDrive::doTrack(int, bool, unsigned char*)+0x334>
1000208d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002090:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002096:	83 ec 0c             	sub    esp,0xc
10002099:	50                   	push   eax
1000209a:	e8 fc ff ff ff       	call   1000209b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x325>	1000209b: R_386_PC32	Floppy::reset()
1000209f:	83 c4 10             	add    esp,0x10
100020a2:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020a5:	e9 40 fd ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ad:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020b3:	83 ec 08             	sub    esp,0x8
100020b6:	6a 02                	push   0x2
100020b8:	50                   	push   eax
100020b9:	e8 fc ff ff ff       	call   100020ba <FloppyDrive::doTrack(int, bool, unsigned char*)+0x344>	100020ba: R_386_PC32	Floppy::writeCommand(unsigned char)
100020be:	83 c4 10             	add    esp,0x10
100020c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020ca:	83 ec 0c             	sub    esp,0xc
100020cd:	50                   	push   eax
100020ce:	e8 fc ff ff ff       	call   100020cf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x359>	100020cf: R_386_PC32	Floppy::wasFailure()
100020d3:	83 c4 10             	add    esp,0x10
100020d6:	84 c0                	test   al,al
100020d8:	74 1d                	je     100020f7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x381>
100020da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020dd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020e3:	83 ec 0c             	sub    esp,0xc
100020e6:	50                   	push   eax
100020e7:	e8 fc ff ff ff       	call   100020e8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x372>	100020e8: R_386_PC32	Floppy::reset()
100020ec:	83 c4 10             	add    esp,0x10
100020ef:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020f2:	e9 f3 fc ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002100:	83 ec 08             	sub    esp,0x8
10002103:	6a 12                	push   0x12
10002105:	50                   	push   eax
10002106:	e8 fc ff ff ff       	call   10002107 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x391>	10002107: R_386_PC32	Floppy::writeCommand(unsigned char)
1000210b:	83 c4 10             	add    esp,0x10
1000210e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002111:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002117:	83 ec 0c             	sub    esp,0xc
1000211a:	50                   	push   eax
1000211b:	e8 fc ff ff ff       	call   1000211c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3a6>	1000211c: R_386_PC32	Floppy::wasFailure()
10002120:	83 c4 10             	add    esp,0x10
10002123:	84 c0                	test   al,al
10002125:	74 1d                	je     10002144 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3ce>
10002127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000212a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002130:	83 ec 0c             	sub    esp,0xc
10002133:	50                   	push   eax
10002134:	e8 fc ff ff ff       	call   10002135 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3bf>	10002135: R_386_PC32	Floppy::reset()
10002139:	83 c4 10             	add    esp,0x10
1000213c:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000213f:	e9 a6 fc ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002147:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000214d:	83 ec 08             	sub    esp,0x8
10002150:	6a 1b                	push   0x1b
10002152:	50                   	push   eax
10002153:	e8 fc ff ff ff       	call   10002154 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3de>	10002154: R_386_PC32	Floppy::writeCommand(unsigned char)
10002158:	83 c4 10             	add    esp,0x10
1000215b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000215e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002164:	83 ec 0c             	sub    esp,0xc
10002167:	50                   	push   eax
10002168:	e8 fc ff ff ff       	call   10002169 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3f3>	10002169: R_386_PC32	Floppy::wasFailure()
1000216d:	83 c4 10             	add    esp,0x10
10002170:	84 c0                	test   al,al
10002172:	74 1d                	je     10002191 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41b>
10002174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002177:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000217d:	83 ec 0c             	sub    esp,0xc
10002180:	50                   	push   eax
10002181:	e8 fc ff ff ff       	call   10002182 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40c>	10002182: R_386_PC32	Floppy::reset()
10002186:	83 c4 10             	add    esp,0x10
10002189:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000218c:	e9 59 fc ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002194:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000219a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
100021a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021a4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021aa:	83 ec 08             	sub    esp,0x8
100021ad:	68 ff 00 00 00       	push   0xff
100021b2:	50                   	push   eax
100021b3:	e8 fc ff ff ff       	call   100021b4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x43e>	100021b4: R_386_PC32	Floppy::writeCommand(unsigned char)
100021b8:	83 c4 10             	add    esp,0x10
100021bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021c4:	83 ec 0c             	sub    esp,0xc
100021c7:	50                   	push   eax
100021c8:	e8 fc ff ff ff       	call   100021c9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x453>	100021c9: R_386_PC32	Floppy::wasFailure()
100021cd:	83 c4 10             	add    esp,0x10
100021d0:	84 c0                	test   al,al
100021d2:	74 1d                	je     100021f1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47b>
100021d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021dd:	83 ec 0c             	sub    esp,0xc
100021e0:	50                   	push   eax
100021e1:	e8 fc ff ff ff       	call   100021e2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46c>	100021e2: R_386_PC32	Floppy::reset()
100021e6:	83 c4 10             	add    esp,0x10
100021e9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100021ec:	e9 f9 fb ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100021f1:	83 ec 0c             	sub    esp,0xc
100021f4:	68 01 5e 00 10       	push   0x10005e01	100021f5: R_386_32	.text
100021f9:	e8 fc ff ff ff       	call   100021fa <FloppyDrive::doTrack(int, bool, unsigned char*)+0x484>	100021fa: R_386_PC32	Dbg::kprintf(char const*, ...)
100021fe:	83 c4 10             	add    esp,0x10
10002201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002204:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000220a:	83 ec 08             	sub    esp,0x8
1000220d:	68 e8 03 00 00       	push   0x3e8
10002212:	50                   	push   eax
10002213:	e8 fc ff ff ff       	call   10002214 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x49e>	10002214: R_386_PC32	Floppy::waitIRQ(int)
10002218:	83 c4 10             	add    esp,0x10
1000221b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
1000221e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
10002221:	83 f0 01             	xor    eax,0x1
10002224:	84 c0                	test   al,al
10002226:	74 2d                	je     10002255 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4df>
10002228:	83 ec 0c             	sub    esp,0xc
1000222b:	68 14 5e 00 10       	push   0x10005e14	1000222c: R_386_32	.text
10002230:	e8 fc ff ff ff       	call   10002231 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4bb>	10002231: R_386_PC32	Dbg::kprintf(char const*, ...)
10002235:	83 c4 10             	add    esp,0x10
10002238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000223b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002241:	83 ec 0c             	sub    esp,0xc
10002244:	50                   	push   eax
10002245:	e8 fc ff ff ff       	call   10002246 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4d0>	10002246: R_386_PC32	Floppy::reset()
1000224a:	83 c4 10             	add    esp,0x10
1000224d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002250:	e9 95 fb ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002255:	83 ec 0c             	sub    esp,0xc
10002258:	68 1d 5e 00 10       	push   0x10005e1d	10002259: R_386_32	.text
1000225d:	e8 fc ff ff ff       	call   1000225e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e8>	1000225e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002262:	83 c4 10             	add    esp,0x10
10002265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002268:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000226e:	83 ec 0c             	sub    esp,0xc
10002271:	50                   	push   eax
10002272:	e8 fc ff ff ff       	call   10002273 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4fd>	10002273: R_386_PC32	Floppy::readData()
10002277:	83 c4 10             	add    esp,0x10
1000227a:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
1000227d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002280:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002286:	83 ec 0c             	sub    esp,0xc
10002289:	50                   	push   eax
1000228a:	e8 fc ff ff ff       	call   1000228b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x515>	1000228b: R_386_PC32	Floppy::wasFailure()
1000228f:	83 c4 10             	add    esp,0x10
10002292:	84 c0                	test   al,al
10002294:	74 2d                	je     100022c3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x54d>
10002296:	83 ec 0c             	sub    esp,0xc
10002299:	68 27 5e 00 10       	push   0x10005e27	1000229a: R_386_32	.text
1000229e:	e8 fc ff ff ff       	call   1000229f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x529>	1000229f: R_386_PC32	Dbg::kprintf(char const*, ...)
100022a3:	83 c4 10             	add    esp,0x10
100022a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022a9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022af:	83 ec 0c             	sub    esp,0xc
100022b2:	50                   	push   eax
100022b3:	e8 fc ff ff ff       	call   100022b4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x53e>	100022b4: R_386_PC32	Floppy::reset()
100022b8:	83 c4 10             	add    esp,0x10
100022bb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100022be:	e9 27 fb ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100022c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022c6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022cc:	83 ec 0c             	sub    esp,0xc
100022cf:	50                   	push   eax
100022d0:	e8 fc ff ff ff       	call   100022d1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x55b>	100022d1: R_386_PC32	Floppy::readData()
100022d5:	83 c4 10             	add    esp,0x10
100022d8:	88 45 dd             	mov    BYTE PTR [ebp-0x23],al
100022db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022e4:	83 ec 0c             	sub    esp,0xc
100022e7:	50                   	push   eax
100022e8:	e8 fc ff ff ff       	call   100022e9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x573>	100022e9: R_386_PC32	Floppy::wasFailure()
100022ed:	83 c4 10             	add    esp,0x10
100022f0:	84 c0                	test   al,al
100022f2:	74 2d                	je     10002321 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5ab>
100022f4:	83 ec 0c             	sub    esp,0xc
100022f7:	68 27 5e 00 10       	push   0x10005e27	100022f8: R_386_32	.text
100022fc:	e8 fc ff ff ff       	call   100022fd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x587>	100022fd: R_386_PC32	Dbg::kprintf(char const*, ...)
10002301:	83 c4 10             	add    esp,0x10
10002304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002307:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000230d:	83 ec 0c             	sub    esp,0xc
10002310:	50                   	push   eax
10002311:	e8 fc ff ff ff       	call   10002312 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59c>	10002312: R_386_PC32	Floppy::reset()
10002316:	83 c4 10             	add    esp,0x10
10002319:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000231c:	e9 c9 fa ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002324:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000232a:	83 ec 0c             	sub    esp,0xc
1000232d:	50                   	push   eax
1000232e:	e8 fc ff ff ff       	call   1000232f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b9>	1000232f: R_386_PC32	Floppy::readData()
10002333:	83 c4 10             	add    esp,0x10
10002336:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
10002339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000233c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002342:	83 ec 0c             	sub    esp,0xc
10002345:	50                   	push   eax
10002346:	e8 fc ff ff ff       	call   10002347 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d1>	10002347: R_386_PC32	Floppy::wasFailure()
1000234b:	83 c4 10             	add    esp,0x10
1000234e:	84 c0                	test   al,al
10002350:	74 2d                	je     1000237f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x609>
10002352:	83 ec 0c             	sub    esp,0xc
10002355:	68 27 5e 00 10       	push   0x10005e27	10002356: R_386_32	.text
1000235a:	e8 fc ff ff ff       	call   1000235b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e5>	1000235b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000235f:	83 c4 10             	add    esp,0x10
10002362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002365:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000236b:	83 ec 0c             	sub    esp,0xc
1000236e:	50                   	push   eax
1000236f:	e8 fc ff ff ff       	call   10002370 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fa>	10002370: R_386_PC32	Floppy::reset()
10002374:	83 c4 10             	add    esp,0x10
10002377:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000237a:	e9 6b fa ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000237f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002382:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002388:	83 ec 0c             	sub    esp,0xc
1000238b:	50                   	push   eax
1000238c:	e8 fc ff ff ff       	call   1000238d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x617>	1000238d: R_386_PC32	Floppy::readData()
10002391:	83 c4 10             	add    esp,0x10
10002394:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
10002397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000239a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023a0:	83 ec 0c             	sub    esp,0xc
100023a3:	50                   	push   eax
100023a4:	e8 fc ff ff ff       	call   100023a5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x62f>	100023a5: R_386_PC32	Floppy::wasFailure()
100023a9:	83 c4 10             	add    esp,0x10
100023ac:	84 c0                	test   al,al
100023ae:	74 2d                	je     100023dd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x667>
100023b0:	83 ec 0c             	sub    esp,0xc
100023b3:	68 27 5e 00 10       	push   0x10005e27	100023b4: R_386_32	.text
100023b8:	e8 fc ff ff ff       	call   100023b9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x643>	100023b9: R_386_PC32	Dbg::kprintf(char const*, ...)
100023bd:	83 c4 10             	add    esp,0x10
100023c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023c3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023c9:	83 ec 0c             	sub    esp,0xc
100023cc:	50                   	push   eax
100023cd:	e8 fc ff ff ff       	call   100023ce <FloppyDrive::doTrack(int, bool, unsigned char*)+0x658>	100023ce: R_386_PC32	Floppy::reset()
100023d2:	83 c4 10             	add    esp,0x10
100023d5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100023d8:	e9 0d fa ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100023dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023e0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023e6:	83 ec 0c             	sub    esp,0xc
100023e9:	50                   	push   eax
100023ea:	e8 fc ff ff ff       	call   100023eb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x675>	100023eb: R_386_PC32	Floppy::readData()
100023ef:	83 c4 10             	add    esp,0x10
100023f2:	88 45 da             	mov    BYTE PTR [ebp-0x26],al
100023f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023fe:	83 ec 0c             	sub    esp,0xc
10002401:	50                   	push   eax
10002402:	e8 fc ff ff ff       	call   10002403 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x68d>	10002403: R_386_PC32	Floppy::wasFailure()
10002407:	83 c4 10             	add    esp,0x10
1000240a:	84 c0                	test   al,al
1000240c:	74 2d                	je     1000243b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6c5>
1000240e:	83 ec 0c             	sub    esp,0xc
10002411:	68 27 5e 00 10       	push   0x10005e27	10002412: R_386_32	.text
10002416:	e8 fc ff ff ff       	call   10002417 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a1>	10002417: R_386_PC32	Dbg::kprintf(char const*, ...)
1000241b:	83 c4 10             	add    esp,0x10
1000241e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002421:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002427:	83 ec 0c             	sub    esp,0xc
1000242a:	50                   	push   eax
1000242b:	e8 fc ff ff ff       	call   1000242c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b6>	1000242c: R_386_PC32	Floppy::reset()
10002430:	83 c4 10             	add    esp,0x10
10002433:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002436:	e9 af f9 ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000243b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000243e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002444:	83 ec 0c             	sub    esp,0xc
10002447:	50                   	push   eax
10002448:	e8 fc ff ff ff       	call   10002449 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6d3>	10002449: R_386_PC32	Floppy::readData()
1000244d:	83 c4 10             	add    esp,0x10
10002450:	88 45 d9             	mov    BYTE PTR [ebp-0x27],al
10002453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002456:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000245c:	83 ec 0c             	sub    esp,0xc
1000245f:	50                   	push   eax
10002460:	e8 fc ff ff ff       	call   10002461 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6eb>	10002461: R_386_PC32	Floppy::wasFailure()
10002465:	83 c4 10             	add    esp,0x10
10002468:	84 c0                	test   al,al
1000246a:	74 2d                	je     10002499 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x723>
1000246c:	83 ec 0c             	sub    esp,0xc
1000246f:	68 27 5e 00 10       	push   0x10005e27	10002470: R_386_32	.text
10002474:	e8 fc ff ff ff       	call   10002475 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ff>	10002475: R_386_PC32	Dbg::kprintf(char const*, ...)
10002479:	83 c4 10             	add    esp,0x10
1000247c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000247f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002485:	83 ec 0c             	sub    esp,0xc
10002488:	50                   	push   eax
10002489:	e8 fc ff ff ff       	call   1000248a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x714>	1000248a: R_386_PC32	Floppy::reset()
1000248e:	83 c4 10             	add    esp,0x10
10002491:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002494:	e9 51 f9 ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000249c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024a2:	83 ec 0c             	sub    esp,0xc
100024a5:	50                   	push   eax
100024a6:	e8 fc ff ff ff       	call   100024a7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x731>	100024a7: R_386_PC32	Floppy::readData()
100024ab:	83 c4 10             	add    esp,0x10
100024ae:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100024b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024ba:	83 ec 0c             	sub    esp,0xc
100024bd:	50                   	push   eax
100024be:	e8 fc ff ff ff       	call   100024bf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x749>	100024bf: R_386_PC32	Floppy::wasFailure()
100024c3:	83 c4 10             	add    esp,0x10
100024c6:	84 c0                	test   al,al
100024c8:	74 2d                	je     100024f7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x781>
100024ca:	83 ec 0c             	sub    esp,0xc
100024cd:	68 27 5e 00 10       	push   0x10005e27	100024ce: R_386_32	.text
100024d2:	e8 fc ff ff ff       	call   100024d3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x75d>	100024d3: R_386_PC32	Dbg::kprintf(char const*, ...)
100024d7:	83 c4 10             	add    esp,0x10
100024da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024dd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024e3:	83 ec 0c             	sub    esp,0xc
100024e6:	50                   	push   eax
100024e7:	e8 fc ff ff ff       	call   100024e8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x772>	100024e8: R_386_PC32	Floppy::reset()
100024ec:	83 c4 10             	add    esp,0x10
100024ef:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100024f2:	e9 f3 f8 ff ff       	jmp    10001dea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100024f7:	83 ec 0c             	sub    esp,0xc
100024fa:	68 40 5e 00 10       	push   0x10005e40	100024fb: R_386_32	.text
100024ff:	e8 fc ff ff ff       	call   10002500 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x78a>	10002500: R_386_PC32	Dbg::kprintf(char const*, ...)
10002504:	83 c4 10             	add    esp,0x10
10002507:	83 ec 0c             	sub    esp,0xc
1000250a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000250d:	e8 fc ff ff ff       	call   1000250e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x798>	1000250e: R_386_PC32	FloppyDrive::motorOff()
10002512:	83 c4 10             	add    esp,0x10
10002515:	83 ec 0c             	sub    esp,0xc
10002518:	68 54 5e 00 10       	push   0x10005e54	10002519: R_386_32	.text
1000251d:	e8 fc ff ff ff       	call   1000251e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7a8>	1000251e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002522:	83 c4 10             	add    esp,0x10
10002525:	83 ec 0c             	sub    esp,0xc
10002528:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000252b:	e8 fc ff ff ff       	call   1000252c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7b6>	1000252c: R_386_PC32	FloppyDrive::unselect()
10002530:	83 c4 10             	add    esp,0x10
10002533:	83 ec 0c             	sub    esp,0xc
10002536:	68 5f 5e 00 10       	push   0x10005e5f	10002537: R_386_32	.text
1000253b:	e8 fc ff ff ff       	call   1000253c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c6>	1000253c: R_386_PC32	Dbg::kprintf(char const*, ...)
10002540:	83 c4 10             	add    esp,0x10
10002543:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
10002546:	83 f0 01             	xor    eax,0x1
10002549:	84 c0                	test   al,al
1000254b:	74 45                	je     10002592 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x81c>
1000254d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002550:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002556:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
1000255c:	89 c2                	mov    edx,eax
1000255e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002561:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002564:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
10002567:	c7 45 b0 00 48 00 00 	mov    DWORD PTR [ebp-0x50],0x4800
1000256e:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002571:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10002574:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10002577:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
1000257a:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
1000257d:	89 c6                	mov    esi,eax
1000257f:	89 d7                	mov    edi,edx
10002581:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002583:	89 c8                	mov    eax,ecx
10002585:	89 fa                	mov    edx,edi
10002587:	89 f3                	mov    ebx,esi
10002589:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
1000258c:	89 55 a4             	mov    DWORD PTR [ebp-0x5c],edx
1000258f:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002592:	b8 00 00 00 00       	mov    eax,0x0
10002597:	8d 65 f4             	lea    esp,[ebp-0xc]
1000259a:	5b                   	pop    ebx
1000259b:	5e                   	pop    esi
1000259c:	5f                   	pop    edi
1000259d:	5d                   	pop    ebp
1000259e:	c3                   	ret    
1000259f:	90                   	nop

100025a0 <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
100025a0:	55                   	push   ebp
100025a1:	89 e5                	mov    ebp,esp
100025a3:	83 ec 10             	sub    esp,0x10
100025a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025a9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100025af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100025b2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100025b8:	83 c2 64             	add    edx,0x64
100025bb:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100025bf:	89 d0                	mov    eax,edx
100025c1:	c1 e0 02             	shl    eax,0x2
100025c4:	01 d0                	add    eax,edx
100025c6:	c1 e0 02             	shl    eax,0x2
100025c9:	01 d0                	add    eax,edx
100025cb:	05 13 00 00 00       	add    eax,0x13	100025cc: R_386_32	floppyTable
100025d0:	8a 00                	mov    al,BYTE PTR [eax]
100025d2:	0f b6 c0             	movzx  eax,al
100025d5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100025d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100025db:	01 c0                	add    eax,eax
100025dd:	89 c1                	mov    ecx,eax
100025df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025e2:	ba 00 00 00 00       	mov    edx,0x0
100025e7:	f7 f1                	div    ecx
100025e9:	89 c2                	mov    edx,eax
100025eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100025ee:	89 10                	mov    DWORD PTR [eax],edx
100025f0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100025f3:	01 c0                	add    eax,eax
100025f5:	89 c1                	mov    ecx,eax
100025f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025fa:	ba 00 00 00 00       	mov    edx,0x0
100025ff:	f7 f1                	div    ecx
10002601:	89 d0                	mov    eax,edx
10002603:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002606:	ba 00 00 00 00       	mov    edx,0x0
1000260b:	f7 f1                	div    ecx
1000260d:	89 c2                	mov    edx,eax
1000260f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002612:	89 10                	mov    DWORD PTR [eax],edx
10002614:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002617:	01 c0                	add    eax,eax
10002619:	89 c1                	mov    ecx,eax
1000261b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000261e:	ba 00 00 00 00       	mov    edx,0x0
10002623:	f7 f1                	div    ecx
10002625:	89 d0                	mov    eax,edx
10002627:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
1000262a:	ba 00 00 00 00       	mov    edx,0x0
1000262f:	f7 f1                	div    ecx
10002631:	89 d0                	mov    eax,edx
10002633:	40                   	inc    eax
10002634:	89 c2                	mov    edx,eax
10002636:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002639:	89 10                	mov    DWORD PTR [eax],edx
1000263b:	90                   	nop
1000263c:	c9                   	leave  
1000263d:	c3                   	ret    

1000263e <FloppyDrive::eject()>:
1000263e:	55                   	push   ebp
1000263f:	89 e5                	mov    ebp,esp
10002641:	57                   	push   edi
10002642:	56                   	push   esi
10002643:	53                   	push   ebx
10002644:	83 ec 2c             	sub    esp,0x2c
10002647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000264a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002650:	83 ec 0c             	sub    esp,0xc
10002653:	50                   	push   eax
10002654:	e8 fc ff ff ff       	call   10002655 <FloppyDrive::eject()+0x17>	10002655: R_386_PC32	VCache::writeWriteBuffer()
10002659:	83 c4 10             	add    esp,0x10
1000265c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000265f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002665:	83 ec 0c             	sub    esp,0xc
10002668:	50                   	push   eax
10002669:	e8 fc ff ff ff       	call   1000266a <FloppyDrive::eject()+0x2c>	1000266a: R_386_PC32	VCache::invalidateReadBuffer()
1000266e:	83 c4 10             	add    esp,0x10
10002671:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002673: R_386_32	hasCyl0Bf
10002678:	c7 05 00 00 00 00 ff ff ff ff 	mov    DWORD PTR ds:0x0,0xffffffff	1000267a: R_386_32	_TEMP_cyl
10002682:	a1 00 00 00 00       	mov    eax,ds:0x0	10002683: R_386_32	_TEMP_trackBuffer
10002687:	83 ec 04             	sub    esp,0x4
1000268a:	68 00 48 00 00       	push   0x4800
1000268f:	6a 00                	push   0x0
10002691:	50                   	push   eax
10002692:	e8 fc ff ff ff       	call   10002693 <FloppyDrive::eject()+0x55>	10002693: R_386_PC32	memset
10002697:	83 c4 10             	add    esp,0x10
1000269a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000269b: R_386_32	_TEMP_cylinder0_bf
1000269f:	83 ec 04             	sub    esp,0x4
100026a2:	68 00 48 00 00       	push   0x4800
100026a7:	6a 00                	push   0x0
100026a9:	50                   	push   eax
100026aa:	e8 fc ff ff ff       	call   100026ab <FloppyDrive::eject()+0x6d>	100026ab: R_386_PC32	memset
100026af:	83 c4 10             	add    esp,0x10
100026b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100026b3: R_386_32	_TEMP_write_bf
100026b7:	83 ec 04             	sub    esp,0x4
100026ba:	68 00 48 00 00       	push   0x4800
100026bf:	6a 00                	push   0x0
100026c1:	50                   	push   eax
100026c2:	e8 fc ff ff ff       	call   100026c3 <FloppyDrive::eject()+0x85>	100026c3: R_386_PC32	memset
100026c7:	83 c4 10             	add    esp,0x10
100026ca:	8d 45 ce             	lea    eax,[ebp-0x32]
100026cd:	bb 6a 5e 00 10       	mov    ebx,0x10005e6a	100026ce: R_386_32	.text
100026d2:	ba 1a 00 00 00       	mov    edx,0x1a
100026d7:	89 c7                	mov    edi,eax
100026d9:	89 de                	mov    esi,ebx
100026db:	89 d1                	mov    ecx,edx
100026dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100026df:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100026e1: R_386_32	activeTerminal
100026e5:	a1 00 00 00 00       	mov    eax,ds:0x0	100026e6: R_386_32	activeTerminal
100026ea:	8b 00                	mov    eax,DWORD PTR [eax]
100026ec:	83 c0 10             	add    eax,0x10
100026ef:	8b 00                	mov    eax,DWORD PTR [eax]
100026f1:	83 ec 0c             	sub    esp,0xc
100026f4:	8d 4d c8             	lea    ecx,[ebp-0x38]
100026f7:	51                   	push   ecx
100026f8:	8d 4d ce             	lea    ecx,[ebp-0x32]
100026fb:	51                   	push   ecx
100026fc:	6a 00                	push   0x0
100026fe:	6a 1a                	push   0x1a
10002700:	52                   	push   edx
10002701:	ff d0                	call   eax
10002703:	83 c4 20             	add    esp,0x20
10002706:	b8 00 00 00 00       	mov    eax,0x0
1000270b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000270e:	5b                   	pop    ebx
1000270f:	5e                   	pop    esi
10002710:	5f                   	pop    edi
10002711:	5d                   	pop    ebp
10002712:	c3                   	ret    
10002713:	90                   	nop

10002714 <FloppyDrive::read(unsigned long long, int, void*)>:
10002714:	55                   	push   ebp
10002715:	89 e5                	mov    ebp,esp
10002717:	57                   	push   edi
10002718:	56                   	push   esi
10002719:	53                   	push   ebx
1000271a:	83 ec 6c             	sub    esp,0x6c
1000271d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002720:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
10002723:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002726:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10002729:	a0 00 00 00 00       	mov    al,ds:0x0	1000272a: R_386_32	_TEMP_allocated
1000272e:	83 f0 01             	xor    eax,0x1
10002731:	84 c0                	test   al,al
10002733:	74 46                	je     1000277b <FloppyDrive::read(unsigned long long, int, void*)+0x67>
10002735:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002737: R_386_32	_TEMP_allocated
1000273c:	83 ec 0c             	sub    esp,0xc
1000273f:	68 00 48 00 00       	push   0x4800
10002744:	e8 fc ff ff ff       	call   10002745 <FloppyDrive::read(unsigned long long, int, void*)+0x31>	10002745: R_386_PC32	malloc
10002749:	83 c4 10             	add    esp,0x10
1000274c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000274d: R_386_32	_TEMP_trackBuffer
10002751:	83 ec 0c             	sub    esp,0xc
10002754:	68 00 48 00 00       	push   0x4800
10002759:	e8 fc ff ff ff       	call   1000275a <FloppyDrive::read(unsigned long long, int, void*)+0x46>	1000275a: R_386_PC32	malloc
1000275e:	83 c4 10             	add    esp,0x10
10002761:	a3 00 00 00 00       	mov    ds:0x0,eax	10002762: R_386_32	_TEMP_cylinder0_bf
10002766:	83 ec 0c             	sub    esp,0xc
10002769:	68 00 48 00 00       	push   0x4800
1000276e:	e8 fc ff ff ff       	call   1000276f <FloppyDrive::read(unsigned long long, int, void*)+0x5b>	1000276f: R_386_PC32	malloc
10002773:	83 c4 10             	add    esp,0x10
10002776:	a3 00 00 00 00       	mov    ds:0x0,eax	10002777: R_386_32	_TEMP_write_bf
1000277b:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
1000277f:	74 10                	je     10002791 <FloppyDrive::read(unsigned long long, int, void*)+0x7d>
10002781:	83 ec 0c             	sub    esp,0xc
10002784:	68 84 5e 00 10       	push   0x10005e84	10002785: R_386_32	.text
10002789:	e8 fc ff ff ff       	call   1000278a <FloppyDrive::read(unsigned long long, int, void*)+0x76>	1000278a: R_386_PC32	KePanic(char const*)
1000278e:	83 c4 10             	add    esp,0x10
10002791:	83 ec 0c             	sub    esp,0xc
10002794:	68 9c 5e 00 10       	push   0x10005e9c	10002795: R_386_32	.text
10002799:	e8 fc ff ff ff       	call   1000279a <FloppyDrive::read(unsigned long long, int, void*)+0x86>	1000279a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000279e:	83 c4 10             	add    esp,0x10
100027a1:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
100027a4:	83 ec 0c             	sub    esp,0xc
100027a7:	8d 55 a0             	lea    edx,[ebp-0x60]
100027aa:	52                   	push   edx
100027ab:	8d 55 a4             	lea    edx,[ebp-0x5c]
100027ae:	52                   	push   edx
100027af:	8d 55 a8             	lea    edx,[ebp-0x58]
100027b2:	52                   	push   edx
100027b3:	50                   	push   eax
100027b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100027b7:	e8 fc ff ff ff       	call   100027b8 <FloppyDrive::read(unsigned long long, int, void*)+0xa4>	100027b8: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
100027bc:	83 c4 20             	add    esp,0x20
100027bf:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
100027c2:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
100027c5:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100027c8:	51                   	push   ecx
100027c9:	52                   	push   edx
100027ca:	50                   	push   eax
100027cb:	68 b7 5e 00 10       	push   0x10005eb7	100027cc: R_386_32	.text
100027d0:	e8 fc ff ff ff       	call   100027d1 <FloppyDrive::read(unsigned long long, int, void*)+0xbd>	100027d1: R_386_PC32	Dbg::kprintf(char const*, ...)
100027d5:	83 c4 10             	add    esp,0x10
100027d8:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100027db:	85 c0                	test   eax,eax
100027dd:	75 2a                	jne    10002809 <FloppyDrive::read(unsigned long long, int, void*)+0xf5>
100027df:	a0 00 00 00 00       	mov    al,ds:0x0	100027e0: R_386_32	hasCyl0Bf
100027e4:	83 f0 01             	xor    eax,0x1
100027e7:	84 c0                	test   al,al
100027e9:	74 5a                	je     10002845 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100027eb:	a1 00 00 00 00       	mov    eax,ds:0x0	100027ec: R_386_32	_TEMP_cylinder0_bf
100027f0:	50                   	push   eax
100027f1:	6a 00                	push   0x0
100027f3:	6a 00                	push   0x0
100027f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100027f8:	e8 fc ff ff ff       	call   100027f9 <FloppyDrive::read(unsigned long long, int, void*)+0xe5>	100027f9: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100027fd:	83 c4 10             	add    esp,0x10
10002800:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002802: R_386_32	hasCyl0Bf
10002807:	eb 3c                	jmp    10002845 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
10002809:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
1000280c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000280d: R_386_32	_TEMP_cyl
10002811:	39 c2                	cmp    edx,eax
10002813:	74 30                	je     10002845 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
10002815:	83 ec 0c             	sub    esp,0xc
10002818:	68 cf 5e 00 10       	push   0x10005ecf	10002819: R_386_32	.text
1000281d:	e8 fc ff ff ff       	call   1000281e <FloppyDrive::read(unsigned long long, int, void*)+0x10a>	1000281e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002822:	83 c4 10             	add    esp,0x10
10002825:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002827: R_386_32	_TEMP_trackBuffer
1000282b:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000282e:	52                   	push   edx
1000282f:	6a 00                	push   0x0
10002831:	50                   	push   eax
10002832:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002835:	e8 fc ff ff ff       	call   10002836 <FloppyDrive::read(unsigned long long, int, void*)+0x122>	10002836: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
1000283a:	83 c4 10             	add    esp,0x10
1000283d:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002840:	a3 00 00 00 00       	mov    ds:0x0,eax	10002841: R_386_32	_TEMP_cyl
10002845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002848:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000284e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002851:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002857:	83 c2 64             	add    edx,0x64
1000285a:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
1000285e:	89 d0                	mov    eax,edx
10002860:	c1 e0 02             	shl    eax,0x2
10002863:	01 d0                	add    eax,edx
10002865:	c1 e0 02             	shl    eax,0x2
10002868:	01 d0                	add    eax,edx
1000286a:	05 13 00 00 00       	add    eax,0x13	1000286b: R_386_32	floppyTable
1000286f:	8a 00                	mov    al,BYTE PTR [eax]
10002871:	0f b6 c0             	movzx  eax,al
10002874:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002877:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000287a:	85 c0                	test   eax,eax
1000287c:	75 53                	jne    100028d1 <FloppyDrive::read(unsigned long long, int, void*)+0x1bd>
1000287e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002880: R_386_32	_TEMP_cylinder0_bf
10002884:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002887:	48                   	dec    eax
10002888:	c1 e0 09             	shl    eax,0x9
1000288b:	89 c1                	mov    ecx,eax
1000288d:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002890:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
10002894:	c1 e0 09             	shl    eax,0x9
10002897:	01 c8                	add    eax,ecx
10002899:	01 c2                	add    edx,eax
1000289b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000289e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100028a1:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100028a4:	c7 45 d8 00 02 00 00 	mov    DWORD PTR [ebp-0x28],0x200
100028ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100028ae:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100028b1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100028b4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100028b7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100028ba:	89 c6                	mov    esi,eax
100028bc:	89 d7                	mov    edi,edx
100028be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100028c0:	89 c8                	mov    eax,ecx
100028c2:	89 fa                	mov    edx,edi
100028c4:	89 f3                	mov    ebx,esi
100028c6:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100028c9:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100028cc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100028cf:	eb 51                	jmp    10002922 <FloppyDrive::read(unsigned long long, int, void*)+0x20e>
100028d1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100028d3: R_386_32	_TEMP_trackBuffer
100028d7:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
100028da:	48                   	dec    eax
100028db:	c1 e0 09             	shl    eax,0x9
100028de:	89 c1                	mov    ecx,eax
100028e0:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
100028e3:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
100028e7:	c1 e0 09             	shl    eax,0x9
100028ea:	01 c8                	add    eax,ecx
100028ec:	01 c2                	add    edx,eax
100028ee:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100028f1:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100028f4:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
100028f7:	c7 45 bc 00 02 00 00 	mov    DWORD PTR [ebp-0x44],0x200
100028fe:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
10002901:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002904:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002907:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
1000290a:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
1000290d:	89 c6                	mov    esi,eax
1000290f:	89 d7                	mov    edi,edx
10002911:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002913:	89 c8                	mov    eax,ecx
10002915:	89 fa                	mov    edx,edi
10002917:	89 f3                	mov    ebx,esi
10002919:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
1000291c:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
1000291f:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10002922:	b8 00 00 00 00       	mov    eax,0x0
10002927:	8d 65 f4             	lea    esp,[ebp-0xc]
1000292a:	5b                   	pop    ebx
1000292b:	5e                   	pop    esi
1000292c:	5f                   	pop    edi
1000292d:	5d                   	pop    ebp
1000292e:	c3                   	ret    
1000292f:	90                   	nop

10002930 <FloppyDrive::write(unsigned long long, int, void*)>:
10002930:	55                   	push   ebp
10002931:	89 e5                	mov    ebp,esp
10002933:	57                   	push   edi
10002934:	56                   	push   esi
10002935:	53                   	push   ebx
10002936:	81 ec 8c 00 00 00    	sub    esp,0x8c
1000293c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000293f:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
10002945:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002948:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
1000294e:	a0 00 00 00 00       	mov    al,ds:0x0	1000294f: R_386_32	_TEMP_allocated
10002953:	83 f0 01             	xor    eax,0x1
10002956:	84 c0                	test   al,al
10002958:	74 46                	je     100029a0 <FloppyDrive::write(unsigned long long, int, void*)+0x70>
1000295a:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000295c: R_386_32	_TEMP_allocated
10002961:	83 ec 0c             	sub    esp,0xc
10002964:	68 00 48 00 00       	push   0x4800
10002969:	e8 fc ff ff ff       	call   1000296a <FloppyDrive::write(unsigned long long, int, void*)+0x3a>	1000296a: R_386_PC32	malloc
1000296e:	83 c4 10             	add    esp,0x10
10002971:	a3 00 00 00 00       	mov    ds:0x0,eax	10002972: R_386_32	_TEMP_trackBuffer
10002976:	83 ec 0c             	sub    esp,0xc
10002979:	68 00 48 00 00       	push   0x4800
1000297e:	e8 fc ff ff ff       	call   1000297f <FloppyDrive::write(unsigned long long, int, void*)+0x4f>	1000297f: R_386_PC32	malloc
10002983:	83 c4 10             	add    esp,0x10
10002986:	a3 00 00 00 00       	mov    ds:0x0,eax	10002987: R_386_32	_TEMP_cylinder0_bf
1000298b:	83 ec 0c             	sub    esp,0xc
1000298e:	68 00 48 00 00       	push   0x4800
10002993:	e8 fc ff ff ff       	call   10002994 <FloppyDrive::write(unsigned long long, int, void*)+0x64>	10002994: R_386_PC32	malloc
10002998:	83 c4 10             	add    esp,0x10
1000299b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000299c: R_386_32	_TEMP_write_bf
100029a0:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
100029a4:	74 5b                	je     10002a01 <FloppyDrive::write(unsigned long long, int, void*)+0xd1>
100029a6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100029ad:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100029b0:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
100029b3:	7d 42                	jge    100029f7 <FloppyDrive::write(unsigned long long, int, void*)+0xc7>
100029b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029b8:	8b 00                	mov    eax,DWORD PTR [eax]
100029ba:	83 c0 2c             	add    eax,0x2c
100029bd:	8b 30                	mov    esi,DWORD PTR [eax]
100029bf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100029c2:	89 c1                	mov    ecx,eax
100029c4:	89 c3                	mov    ebx,eax
100029c6:	c1 fb 1f             	sar    ebx,0x1f
100029c9:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100029cf:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [ebp-0x8c]
100029d5:	01 c8                	add    eax,ecx
100029d7:	11 da                	adc    edx,ebx
100029d9:	83 ec 0c             	sub    esp,0xc
100029dc:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100029df:	6a 01                	push   0x1
100029e1:	52                   	push   edx
100029e2:	50                   	push   eax
100029e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029e6:	ff d6                	call   esi
100029e8:	83 c4 20             	add    esp,0x20
100029eb:	81 45 18 00 02 00 00 	add    DWORD PTR [ebp+0x18],0x200
100029f2:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100029f5:	eb b6                	jmp    100029ad <FloppyDrive::write(unsigned long long, int, void*)+0x7d>
100029f7:	b8 00 00 00 00       	mov    eax,0x0
100029fc:	e9 d1 01 00 00       	jmp    10002bd2 <FloppyDrive::write(unsigned long long, int, void*)+0x2a2>
10002a01:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
10002a07:	83 ec 0c             	sub    esp,0xc
10002a0a:	8d 55 80             	lea    edx,[ebp-0x80]
10002a0d:	52                   	push   edx
10002a0e:	8d 55 84             	lea    edx,[ebp-0x7c]
10002a11:	52                   	push   edx
10002a12:	8d 55 88             	lea    edx,[ebp-0x78]
10002a15:	52                   	push   edx
10002a16:	50                   	push   eax
10002a17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a1a:	e8 fc ff ff ff       	call   10002a1b <FloppyDrive::write(unsigned long long, int, void*)+0xeb>	10002a1b: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
10002a1f:	83 c4 20             	add    esp,0x20
10002a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a25:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002a2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002a2e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002a34:	83 c2 64             	add    edx,0x64
10002a37:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002a3b:	89 d0                	mov    eax,edx
10002a3d:	c1 e0 02             	shl    eax,0x2
10002a40:	01 d0                	add    eax,edx
10002a42:	c1 e0 02             	shl    eax,0x2
10002a45:	01 d0                	add    eax,edx
10002a47:	05 13 00 00 00       	add    eax,0x13	10002a48: R_386_32	floppyTable
10002a4c:	8a 00                	mov    al,BYTE PTR [eax]
10002a4e:	0f b6 c0             	movzx  eax,al
10002a51:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002a54:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002a57:	85 c0                	test   eax,eax
10002a59:	75 77                	jne    10002ad2 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002a5b:	a0 00 00 00 00       	mov    al,ds:0x0	10002a5c: R_386_32	hasCyl0Bf
10002a60:	84 c0                	test   al,al
10002a62:	74 6e                	je     10002ad2 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002a64:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a66: R_386_32	_TEMP_cylinder0_bf
10002a6a:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002a6d:	48                   	dec    eax
10002a6e:	c1 e0 09             	shl    eax,0x9
10002a71:	89 c1                	mov    ecx,eax
10002a73:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002a76:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002a7a:	c1 e0 09             	shl    eax,0x9
10002a7d:	01 c8                	add    eax,ecx
10002a7f:	01 d0                	add    eax,edx
10002a81:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002a84:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002a87:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002a8a:	c7 45 d4 00 02 00 00 	mov    DWORD PTR [ebp-0x2c],0x200
10002a91:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002a94:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10002a97:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002a9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002a9d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002aa0:	89 c6                	mov    esi,eax
10002aa2:	89 d7                	mov    edi,edx
10002aa4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002aa6:	89 c8                	mov    eax,ecx
10002aa8:	89 fa                	mov    edx,edi
10002aaa:	89 f3                	mov    ebx,esi
10002aac:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10002aaf:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
10002ab2:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002ab5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002ab7: R_386_32	_TEMP_cylinder0_bf
10002abb:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002abe:	52                   	push   edx
10002abf:	6a 01                	push   0x1
10002ac1:	50                   	push   eax
10002ac2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002ac5:	e8 fc ff ff ff       	call   10002ac6 <FloppyDrive::write(unsigned long long, int, void*)+0x196>	10002ac6: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002aca:	83 c4 10             	add    esp,0x10
10002acd:	e9 fb 00 00 00       	jmp    10002bcd <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002ad2:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
10002ad5:	a1 00 00 00 00       	mov    eax,ds:0x0	10002ad6: R_386_32	_TEMP_cyl
10002ada:	39 c2                	cmp    edx,eax
10002adc:	75 6e                	jne    10002b4c <FloppyDrive::write(unsigned long long, int, void*)+0x21c>
10002ade:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002ae0: R_386_32	_TEMP_trackBuffer
10002ae4:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002ae7:	48                   	dec    eax
10002ae8:	c1 e0 09             	shl    eax,0x9
10002aeb:	89 c1                	mov    ecx,eax
10002aed:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002af0:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002af4:	c1 e0 09             	shl    eax,0x9
10002af7:	01 c8                	add    eax,ecx
10002af9:	01 d0                	add    eax,edx
10002afb:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002afe:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002b01:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10002b04:	c7 45 b8 00 02 00 00 	mov    DWORD PTR [ebp-0x48],0x200
10002b0b:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002b0e:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10002b11:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10002b14:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10002b17:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
10002b1a:	89 c6                	mov    esi,eax
10002b1c:	89 d7                	mov    edi,edx
10002b1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002b20:	89 c8                	mov    eax,ecx
10002b22:	89 fa                	mov    edx,edi
10002b24:	89 f3                	mov    ebx,esi
10002b26:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10002b29:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002b2c:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002b2f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b31: R_386_32	_TEMP_trackBuffer
10002b35:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002b38:	52                   	push   edx
10002b39:	6a 01                	push   0x1
10002b3b:	50                   	push   eax
10002b3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b3f:	e8 fc ff ff ff       	call   10002b40 <FloppyDrive::write(unsigned long long, int, void*)+0x210>	10002b40: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002b44:	83 c4 10             	add    esp,0x10
10002b47:	e9 81 00 00 00       	jmp    10002bcd <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002b4c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b4e: R_386_32	_TEMP_write_bf
10002b52:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002b55:	52                   	push   edx
10002b56:	6a 00                	push   0x0
10002b58:	50                   	push   eax
10002b59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b5c:	e8 fc ff ff ff       	call   10002b5d <FloppyDrive::write(unsigned long long, int, void*)+0x22d>	10002b5d: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002b61:	83 c4 10             	add    esp,0x10
10002b64:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b66: R_386_32	_TEMP_write_bf
10002b6a:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002b6d:	48                   	dec    eax
10002b6e:	c1 e0 09             	shl    eax,0x9
10002b71:	89 c1                	mov    ecx,eax
10002b73:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002b76:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002b7a:	c1 e0 09             	shl    eax,0x9
10002b7d:	01 c8                	add    eax,ecx
10002b7f:	01 d0                	add    eax,edx
10002b81:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10002b84:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002b87:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002b8a:	c7 45 9c 00 02 00 00 	mov    DWORD PTR [ebp-0x64],0x200
10002b91:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002b94:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10002b97:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002b9a:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10002b9d:	8b 4d 9c             	mov    ecx,DWORD PTR [ebp-0x64]
10002ba0:	89 c6                	mov    esi,eax
10002ba2:	89 d7                	mov    edi,edx
10002ba4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002ba6:	89 c8                	mov    eax,ecx
10002ba8:	89 fa                	mov    edx,edi
10002baa:	89 f3                	mov    ebx,esi
10002bac:	89 5d 94             	mov    DWORD PTR [ebp-0x6c],ebx
10002baf:	89 55 90             	mov    DWORD PTR [ebp-0x70],edx
10002bb2:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10002bb5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002bb7: R_386_32	_TEMP_write_bf
10002bbb:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002bbe:	52                   	push   edx
10002bbf:	6a 01                	push   0x1
10002bc1:	50                   	push   eax
10002bc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bc5:	e8 fc ff ff ff       	call   10002bc6 <FloppyDrive::write(unsigned long long, int, void*)+0x296>	10002bc6: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002bca:	83 c4 10             	add    esp,0x10
10002bcd:	b8 00 00 00 00       	mov    eax,0x0
10002bd2:	8d 65 f4             	lea    esp,[ebp-0xc]
10002bd5:	5b                   	pop    ebx
10002bd6:	5e                   	pop    esi
10002bd7:	5f                   	pop    edi
10002bd8:	5d                   	pop    ebp
10002bd9:	c3                   	ret    

10002bda <FloppyDrive::~FloppyDrive()>:
10002bda:	55                   	push   ebp
10002bdb:	89 e5                	mov    ebp,esp
10002bdd:	83 ec 08             	sub    esp,0x8
10002be0:	ba 08 00 00 00       	mov    edx,0x8	10002be1: R_386_32	vtable for FloppyDrive
10002be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002be8:	89 10                	mov    DWORD PTR [eax],edx
10002bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bed:	83 ec 0c             	sub    esp,0xc
10002bf0:	50                   	push   eax
10002bf1:	e8 fc ff ff ff       	call   10002bf2 <FloppyDrive::~FloppyDrive()+0x18>	10002bf2: R_386_PC32	PhysicalDisk::~PhysicalDisk()
10002bf6:	83 c4 10             	add    esp,0x10
10002bf9:	90                   	nop
10002bfa:	c9                   	leave  
10002bfb:	c3                   	ret    

10002bfc <FloppyDrive::~FloppyDrive()>:
10002bfc:	55                   	push   ebp
10002bfd:	89 e5                	mov    ebp,esp
10002bff:	83 ec 08             	sub    esp,0x8
10002c02:	83 ec 0c             	sub    esp,0xc
10002c05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002c08:	e8 fc ff ff ff       	call   10002c09 <FloppyDrive::~FloppyDrive()+0xd>	10002c09: R_386_PC32	FloppyDrive::~FloppyDrive()
10002c0d:	83 c4 10             	add    esp,0x10
10002c10:	83 ec 08             	sub    esp,0x8
10002c13:	68 74 01 00 00       	push   0x174
10002c18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002c1b:	e8 fc ff ff ff       	call   10002c1c <FloppyDrive::~FloppyDrive()+0x20>	10002c1c: R_386_PC32	operator delete(void*, unsigned long)
10002c20:	83 c4 10             	add    esp,0x10
10002c23:	c9                   	leave  
10002c24:	c3                   	ret    
10002c25:	90                   	nop

10002c26 <Gameport::Gameport()>:
10002c26:	55                   	push   ebp
10002c27:	89 e5                	mov    ebp,esp
10002c29:	83 ec 08             	sub    esp,0x8
10002c2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c2f:	83 ec 08             	sub    esp,0x8
10002c32:	68 e4 5f 00 10       	push   0x10005fe4	10002c33: R_386_32	.text
10002c37:	50                   	push   eax
10002c38:	e8 fc ff ff ff       	call   10002c39 <Gameport::Gameport()+0x13>	10002c39: R_386_PC32	Device::Device(char const*)
10002c3d:	83 c4 10             	add    esp,0x10
10002c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c43:	05 58 01 00 00       	add    eax,0x158
10002c48:	83 ec 0c             	sub    esp,0xc
10002c4b:	50                   	push   eax
10002c4c:	e8 fc ff ff ff       	call   10002c4d <Gameport::Gameport()+0x27>	10002c4d: R_386_PC32	JoystickHost::JoystickHost()
10002c51:	83 c4 10             	add    esp,0x10
10002c54:	ba 08 00 00 00       	mov    edx,0x8	10002c55: R_386_32	vtable for Gameport
10002c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c5c:	89 10                	mov    DWORD PTR [eax],edx
10002c5e:	ba 38 00 00 00       	mov    edx,0x38	10002c5f: R_386_32	vtable for Gameport
10002c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c66:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002c6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c6f:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
10002c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c7c:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
10002c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c89:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
10002c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c96:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
10002ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ca3:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
10002cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cb0:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
10002cba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cbd:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
10002cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cca:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
10002cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cd7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ce1:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ceb:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
10002cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cf5:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
10002cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cff:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002d06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d09:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d19:	0f b6 d0             	movzx  edx,al
10002d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d1f:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10002d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d29:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d2f:	0f b6 d0             	movzx  edx,al
10002d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d35:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10002d3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d43:	8d 50 01             	lea    edx,[eax+0x1]
10002d46:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002d49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002d4f:	0f b6 d0             	movzx  edx,al
10002d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d55:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002d59:	83 e1 3f             	and    ecx,0x3f
10002d5c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002d60:	90                   	nop
10002d61:	c9                   	leave  
10002d62:	c3                   	ret    
10002d63:	90                   	nop

10002d64 <Gameport::~Gameport()>:
10002d64:	55                   	push   ebp
10002d65:	89 e5                	mov    ebp,esp
10002d67:	83 ec 08             	sub    esp,0x8
10002d6a:	ba 08 00 00 00       	mov    edx,0x8	10002d6b: R_386_32	vtable for Gameport
10002d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d72:	89 10                	mov    DWORD PTR [eax],edx
10002d74:	ba 38 00 00 00       	mov    edx,0x38	10002d75: R_386_32	vtable for Gameport
10002d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d7c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d85:	83 ec 0c             	sub    esp,0xc
10002d88:	50                   	push   eax
10002d89:	e8 fc ff ff ff       	call   10002d8a <Gameport::~Gameport()+0x26>	10002d8a: R_386_PC32	Device::~Device()
10002d8e:	83 c4 10             	add    esp,0x10
10002d91:	90                   	nop
10002d92:	c9                   	leave  
10002d93:	c3                   	ret    

10002d94 <Gameport::~Gameport()>:
10002d94:	55                   	push   ebp
10002d95:	89 e5                	mov    ebp,esp
10002d97:	83 ec 08             	sub    esp,0x8
10002d9a:	83 ec 0c             	sub    esp,0xc
10002d9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002da0:	e8 fc ff ff ff       	call   10002da1 <Gameport::~Gameport()+0xd>	10002da1: R_386_PC32	Gameport::~Gameport()
10002da5:	83 c4 10             	add    esp,0x10
10002da8:	83 ec 08             	sub    esp,0x8
10002dab:	68 80 01 00 00       	push   0x180
10002db0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002db3:	e8 fc ff ff ff       	call   10002db4 <Gameport::~Gameport()+0x20>	10002db4: R_386_PC32	operator delete(void*, unsigned long)
10002db8:	83 c4 10             	add    esp,0x10
10002dbb:	c9                   	leave  
10002dbc:	c3                   	ret    
10002dbd:	90                   	nop

10002dbe <Gameport::calibration(int)>:
10002dbe:	57                   	push   edi
10002dbf:	56                   	push   esi
10002dc0:	53                   	push   ebx
10002dc1:	81 ec d0 00 00 00    	sub    esp,0xd0
10002dc7:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
10002dce:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
10002dd5:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
10002ddc:	74 0c                	je     10002dea <Gameport::calibration(int)+0x2c>
10002dde:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
10002de5:	e9 e6 00 00 00       	jmp    10002ed0 <Gameport::calibration(int)+0x112>
10002dea:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10002df1:	50                   	push   eax
10002df2:	56                   	push   esi
10002df3:	53                   	push   ebx
10002df4:	57                   	push   edi
10002df5:	e8 fc ff ff ff       	call   10002df6 <Gameport::calibration(int)+0x38>	10002df6: R_386_PC32	Gameport::readRaw(int)
10002dfa:	6a 0a                	push   0xa
10002dfc:	e8 fc ff ff ff       	call   10002dfd <Gameport::calibration(int)+0x3f>	10002dfd: R_386_PC32	milliTenthSleep(unsigned int)
10002e01:	8d 44 24 10          	lea    eax,[esp+0x10]
10002e05:	83 c4 0c             	add    esp,0xc
10002e08:	56                   	push   esi
10002e09:	53                   	push   ebx
10002e0a:	50                   	push   eax
10002e0b:	e8 fc ff ff ff       	call   10002e0c <Gameport::calibration(int)+0x4e>	10002e0c: R_386_PC32	Gameport::readRaw(int)
10002e10:	6a 0a                	push   0xa
10002e12:	e8 fc ff ff ff       	call   10002e13 <Gameport::calibration(int)+0x55>	10002e13: R_386_PC32	milliTenthSleep(unsigned int)
10002e17:	8d 44 24 44          	lea    eax,[esp+0x44]
10002e1b:	83 c4 0c             	add    esp,0xc
10002e1e:	56                   	push   esi
10002e1f:	53                   	push   ebx
10002e20:	50                   	push   eax
10002e21:	e8 fc ff ff ff       	call   10002e22 <Gameport::calibration(int)+0x64>	10002e22: R_386_PC32	Gameport::readRaw(int)
10002e26:	6a 0a                	push   0xa
10002e28:	e8 fc ff ff ff       	call   10002e29 <Gameport::calibration(int)+0x6b>	10002e29: R_386_PC32	milliTenthSleep(unsigned int)
10002e2d:	8d 44 24 78          	lea    eax,[esp+0x78]
10002e31:	83 c4 0c             	add    esp,0xc
10002e34:	56                   	push   esi
10002e35:	53                   	push   ebx
10002e36:	50                   	push   eax
10002e37:	e8 fc ff ff ff       	call   10002e38 <Gameport::calibration(int)+0x7a>	10002e38: R_386_PC32	Gameport::readRaw(int)
10002e3c:	6a 0a                	push   0xa
10002e3e:	e8 fc ff ff ff       	call   10002e3f <Gameport::calibration(int)+0x81>	10002e3f: R_386_PC32	milliTenthSleep(unsigned int)
10002e43:	83 c4 0c             	add    esp,0xc
10002e46:	56                   	push   esi
10002e47:	53                   	push   ebx
10002e48:	57                   	push   edi
10002e49:	bf 03 00 00 00       	mov    edi,0x3
10002e4e:	e8 fc ff ff ff       	call   10002e4f <Gameport::calibration(int)+0x91>	10002e4f: R_386_PC32	Gameport::readRaw(int)
10002e53:	31 d2                	xor    edx,edx
10002e55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002e59:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10002e5d:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
10002e64:	f7 f7                	div    edi
10002e66:	31 d2                	xor    edx,edx
10002e68:	89 c1                	mov    ecx,eax
10002e6a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002e6e:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002e72:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
10002e79:	83 c4 0c             	add    esp,0xc
10002e7c:	f7 f7                	div    edi
10002e7e:	85 f6                	test   esi,esi
10002e80:	75 0e                	jne    10002e90 <Gameport::calibration(int)+0xd2>
10002e82:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
10002e88:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10002e8e:	eb 0c                	jmp    10002e9c <Gameport::calibration(int)+0xde>
10002e90:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
10002e96:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
10002e9c:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
10002ea3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
10002ea9:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
10002eb0:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10002eb6:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10002ebd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
10002ec3:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
10002eca:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
10002ed0:	81 c4 d0 00 00 00    	add    esp,0xd0
10002ed6:	5b                   	pop    ebx
10002ed7:	5e                   	pop    esi
10002ed8:	5f                   	pop    edi
10002ed9:	c3                   	ret    

10002eda <Gameport::detect()>:
10002eda:	53                   	push   ebx
10002edb:	81 ec 88 00 00 00    	sub    esp,0x88
10002ee1:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10002ee8:	8d 44 24 18          	lea    eax,[esp+0x18]
10002eec:	51                   	push   ecx
10002eed:	6a 00                	push   0x0
10002eef:	53                   	push   ebx
10002ef0:	50                   	push   eax
10002ef1:	e8 fc ff ff ff       	call   10002ef2 <Gameport::detect()+0x18>	10002ef2: R_386_PC32	Gameport::readRaw(int)
10002ef6:	8d 44 24 58          	lea    eax,[esp+0x58]
10002efa:	52                   	push   edx
10002efb:	52                   	push   edx
10002efc:	6a 01                	push   0x1
10002efe:	53                   	push   ebx
10002eff:	50                   	push   eax
10002f00:	e8 fc ff ff ff       	call   10002f01 <Gameport::detect()+0x27>	10002f01: R_386_PC32	Gameport::readRaw(int)
10002f05:	83 c4 1c             	add    esp,0x1c
10002f08:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002f0f:	75 14                	jne    10002f25 <Gameport::detect()+0x4b>
10002f11:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
10002f16:	74 0d                	je     10002f25 <Gameport::detect()+0x4b>
10002f18:	52                   	push   edx
10002f19:	52                   	push   edx
10002f1a:	6a 00                	push   0x0
10002f1c:	53                   	push   ebx
10002f1d:	e8 fc ff ff ff       	call   10002f1e <Gameport::detect()+0x44>	10002f1e: R_386_PC32	Gameport::calibration(int)
10002f22:	83 c4 10             	add    esp,0x10
10002f25:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
10002f29:	83 e2 10             	and    edx,0x10
10002f2c:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002f33:	75 19                	jne    10002f4e <Gameport::detect()+0x74>
10002f35:	84 d2                	test   dl,dl
10002f37:	74 15                	je     10002f4e <Gameport::detect()+0x74>
10002f39:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10002f3d:	50                   	push   eax
10002f3e:	50                   	push   eax
10002f3f:	6a 01                	push   0x1
10002f41:	53                   	push   ebx
10002f42:	e8 fc ff ff ff       	call   10002f43 <Gameport::detect()+0x69>	10002f43: R_386_PC32	Gameport::calibration(int)
10002f47:	83 c4 10             	add    esp,0x10
10002f4a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10002f4e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
10002f52:	c0 e8 04             	shr    al,0x4
10002f55:	83 e0 01             	and    eax,0x1
10002f58:	84 d2                	test   dl,dl
10002f5a:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
10002f60:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10002f67:	81 c4 88 00 00 00    	add    esp,0x88
10002f6d:	5b                   	pop    ebx
10002f6e:	c3                   	ret    
10002f6f:	90                   	nop

10002f70 <Gameport::read(int)>:
10002f70:	57                   	push   edi
10002f71:	56                   	push   esi
10002f72:	53                   	push   ebx
10002f73:	83 ec 50             	sub    esp,0x50
10002f76:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002f7a:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002f7e:	85 f6                	test   esi,esi
10002f80:	75 09                	jne    10002f8b <Gameport::read(int)+0x1b>
10002f82:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002f89:	eb 0c                	jmp    10002f97 <Gameport::read(int)+0x27>
10002f8b:	83 fe 01             	cmp    esi,0x1
10002f8e:	75 15                	jne    10002fa5 <Gameport::read(int)+0x35>
10002f90:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002f97:	75 0c                	jne    10002fa5 <Gameport::read(int)+0x35>
10002f99:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002f9d:	80 20 ef             	and    BYTE PTR [eax],0xef
10002fa0:	e9 b0 00 00 00       	jmp    10003055 <Gameport::read(int)+0xe5>
10002fa5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10002fa9:	52                   	push   edx
10002faa:	56                   	push   esi
10002fab:	53                   	push   ebx
10002fac:	50                   	push   eax
10002fad:	e8 fc ff ff ff       	call   10002fae <Gameport::read(int)+0x3e>	10002fae: R_386_PC32	Gameport::readRaw(int)
10002fb2:	83 c4 0c             	add    esp,0xc
10002fb5:	4e                   	dec    esi
10002fb6:	75 1a                	jne    10002fd2 <Gameport::read(int)+0x62>
10002fb8:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10002fbe:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10002fc4:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10002fca:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10002fd0:	eb 18                	jmp    10002fea <Gameport::read(int)+0x7a>
10002fd2:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10002fd8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10002fde:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10002fe4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10002fea:	85 ff                	test   edi,edi
10002fec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002ff0:	0f 94 c0             	sete   al
10002ff3:	85 f6                	test   esi,esi
10002ff5:	0f 94 c1             	sete   cl
10002ff8:	09 c1                	or     ecx,eax
10002ffa:	39 d7                	cmp    edi,edx
10002ffc:	0f 94 c0             	sete   al
10002fff:	08 c1                	or     cl,al
10003001:	75 96                	jne    10002f99 <Gameport::read(int)+0x29>
10003003:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10003007:	74 90                	je     10002f99 <Gameport::read(int)+0x29>
10003009:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
1000300d:	89 d9                	mov    ecx,ebx
1000300f:	29 f1                	sub    ecx,esi
10003011:	6b c9 7f             	imul   ecx,ecx,0x7f
10003014:	39 fb                	cmp    ebx,edi
10003016:	7e 1a                	jle    10003032 <Gameport::read(int)+0xc2>
10003018:	29 fb                	sub    ebx,edi
1000301a:	29 fa                	sub    edx,edi
1000301c:	6b db 7f             	imul   ebx,ebx,0x7f
1000301f:	89 d7                	mov    edi,edx
10003021:	89 d8                	mov    eax,ebx
10003023:	99                   	cdq    
10003024:	f7 ff                	idiv   edi
10003026:	89 c3                	mov    ebx,eax
10003028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000302c:	29 f0                	sub    eax,esi
1000302e:	89 c6                	mov    esi,eax
10003030:	eb 07                	jmp    10003039 <Gameport::read(int)+0xc9>
10003032:	89 c8                	mov    eax,ecx
10003034:	99                   	cdq    
10003035:	f7 ff                	idiv   edi
10003037:	89 c3                	mov    ebx,eax
10003039:	89 c8                	mov    eax,ecx
1000303b:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
1000303f:	99                   	cdq    
10003040:	b9 0d 00 00 00       	mov    ecx,0xd
10003045:	f7 fe                	idiv   esi
10003047:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
1000304b:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
1000304f:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10003053:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003055:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003059:	83 c4 50             	add    esp,0x50
1000305c:	5b                   	pop    ebx
1000305d:	5e                   	pop    esi
1000305e:	5f                   	pop    edi
1000305f:	c2 04 00             	ret    0x4

10003062 <non-virtual thunk to Gameport::read(int)>:
10003062:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
1000306a:	e9 01 ff ff ff       	jmp    10002f70 <Gameport::read(int)>
1000306f:	90                   	nop

10003070 <Gameport::readRaw(int)>:
10003070:	57                   	push   edi
10003071:	ba 01 02 00 00       	mov    edx,0x201
10003076:	56                   	push   esi
10003077:	53                   	push   ebx
10003078:	83 ec 10             	sub    esp,0x10
1000307b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
1000307f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
10003083:	8a 01                	mov    al,BYTE PTR [ecx]
10003085:	83 e0 e0             	and    eax,0xffffffe0
10003088:	83 c8 12             	or     eax,0x12
1000308b:	88 01                	mov    BYTE PTR [ecx],al
1000308d:	ec                   	in     al,dx
1000308e:	88 c2                	mov    dl,al
10003090:	85 db                	test   ebx,ebx
10003092:	75 11                	jne    100030a5 <Gameport::readRaw(int)+0x35>
10003094:	c0 ea 04             	shr    dl,0x4
10003097:	c0 e8 05             	shr    al,0x5
1000309a:	83 e2 01             	and    edx,0x1
1000309d:	83 e0 01             	and    eax,0x1
100030a0:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
100030a3:	eb 0c                	jmp    100030b1 <Gameport::readRaw(int)+0x41>
100030a5:	c0 ea 06             	shr    dl,0x6
100030a8:	c0 e8 07             	shr    al,0x7
100030ab:	83 e2 01             	and    edx,0x1
100030ae:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
100030b1:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
100030b4:	ba 01 02 00 00       	mov    edx,0x201
100030b9:	b0 ff                	mov    al,0xff
100030bb:	ee                   	out    dx,al
100030bc:	fa                   	cli    
100030bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100030be: R_386_32	irqDisableCounter
100030c2:	4b                   	dec    ebx
100030c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100030c7:	0f 94 c3             	sete   bl
100030ca:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
100030d2:	0f b6 f3             	movzx  esi,bl
100030d5:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
100030da:	0f b6 db             	movzx  ebx,bl
100030dd:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
100030e1:	4b                   	dec    ebx
100030e2:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
100030e7:	83 e3 fa             	and    ebx,0xfffffffa
100030ea:	31 ff                	xor    edi,edi
100030ec:	83 c3 08             	add    ebx,0x8
100030ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100030f6:	ba 01 02 00 00       	mov    edx,0x201
100030fb:	ec                   	in     al,dx
100030fc:	0f b6 c0             	movzx  eax,al
100030ff:	85 f0                	test   eax,esi
10003101:	0f 94 c2             	sete   dl
10003104:	08 54 24 06          	or     BYTE PTR [esp+0x6],dl
10003108:	80 7c 24 06 01       	cmp    BYTE PTR [esp+0x6],0x1
1000310d:	83 14 24 00          	adc    DWORD PTR [esp],0x0
10003111:	85 d8                	test   eax,ebx
10003113:	0f 94 c0             	sete   al
10003116:	08 44 24 07          	or     BYTE PTR [esp+0x7],al
1000311a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
1000311f:	83 d7 00             	adc    edi,0x0
10003122:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
10003126:	75 0a                	jne    10003132 <Gameport::readRaw(int)+0xc2>
10003128:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
1000312d:	75 13                	jne    10003142 <Gameport::readRaw(int)+0xd2>
1000312f:	fb                   	sti    
10003130:	eb 10                	jmp    10003142 <Gameport::readRaw(int)+0xd2>
10003132:	80 7c 24 06 00       	cmp    BYTE PTR [esp+0x6],0x0
10003137:	74 bd                	je     100030f6 <Gameport::readRaw(int)+0x86>
10003139:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
1000313e:	74 b6                	je     100030f6 <Gameport::readRaw(int)+0x86>
10003140:	eb e6                	jmp    10003128 <Gameport::readRaw(int)+0xb8>
10003142:	81 ff ff ff 00 00    	cmp    edi,0xffff
10003148:	74 09                	je     10003153 <Gameport::readRaw(int)+0xe3>
1000314a:	81 3c 24 ff ff 00 00 	cmp    DWORD PTR [esp],0xffff
10003151:	75 03                	jne    10003156 <Gameport::readRaw(int)+0xe6>
10003153:	80 21 ef             	and    BYTE PTR [ecx],0xef
10003156:	89 79 18             	mov    DWORD PTR [ecx+0x18],edi
10003159:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000315c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
1000315f:	83 c4 10             	add    esp,0x10
10003162:	89 c8                	mov    eax,ecx
10003164:	5b                   	pop    ebx
10003165:	5e                   	pop    esi
10003166:	5f                   	pop    edi
10003167:	c2 04 00             	ret    0x4

1000316a <Gameport::open(int, int, void*)>:
1000316a:	31 c0                	xor    eax,eax
1000316c:	c3                   	ret    
1000316d:	90                   	nop

1000316e <Gameport::close(int, int, void*)>:
1000316e:	31 c0                	xor    eax,eax
10003170:	c3                   	ret    
10003171:	90                   	nop

10003172 <DMAChannel::DMAChannel(int)>:
10003172:	55                   	push   ebp
10003173:	89 e5                	mov    ebp,esp
10003175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003178:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000317f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003182:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10003189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000318c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000318f:	89 10                	mov    DWORD PTR [eax],edx
10003191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003194:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000319b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000319e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100031a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031a8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
100031ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031af:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
100031b3:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
100031b7:	0f 9f c2             	setg   dl
100031ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031bd:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
100031c0:	90                   	nop
100031c1:	5d                   	pop    ebp
100031c2:	c3                   	ret    
100031c3:	90                   	nop

100031c4 <DMAChannel::~DMAChannel()>:
100031c4:	55                   	push   ebp
100031c5:	89 e5                	mov    ebp,esp
100031c7:	83 ec 08             	sub    esp,0x8
100031ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100031d0:	85 c0                	test   eax,eax
100031d2:	74 19                	je     100031ed <DMAChannel::~DMAChannel()+0x29>
100031d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031d7:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
100031da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100031e0:	83 ec 08             	sub    esp,0x8
100031e3:	52                   	push   edx
100031e4:	50                   	push   eax
100031e5:	e8 fc ff ff ff       	call   100031e6 <DMAChannel::~DMAChannel()+0x22>	100031e6: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
100031ea:	83 c4 10             	add    esp,0x10
100031ed:	90                   	nop
100031ee:	c9                   	leave  
100031ef:	c3                   	ret    

100031f0 <DMAChannel::getAddress()>:
100031f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100031f7:	c3                   	ret    

100031f8 <DMAChannel::getChannelNum()>:
100031f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031fc:	8b 00                	mov    eax,DWORD PTR [eax]
100031fe:	c3                   	ret    
100031ff:	90                   	nop

10003200 <DMAChannel::setLength(unsigned int)>:
10003200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003204:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10003208:	3d 00 00 01 00       	cmp    eax,0x10000
1000320d:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10003210:	76 0d                	jbe    1000321f <DMAChannel::setLength(unsigned int)+0x1f>
10003212:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003216: R_386_32	dmaLong
1000321a:	e9 fc ff ff ff       	jmp    1000321b <DMAChannel::setLength(unsigned int)+0x1b>	1000321b: R_386_PC32	KePanic(char const*)
1000321f:	c3                   	ret    

10003220 <DMAChannel::setAddress(unsigned int)>:
10003220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003228:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000322b:	c3                   	ret    

1000322c <DMAChannel::allocateAddressAndSet(unsigned short)>:
1000322c:	56                   	push   esi
1000322d:	53                   	push   ebx
1000322e:	83 ec 10             	sub    esp,0x10
10003231:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003235:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
1000323a:	56                   	push   esi
1000323b:	e8 fc ff ff ff       	call   1000323c <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	1000323c: R_386_PC32	Phys::allocateDMA(unsigned long)
10003240:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
10003243:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10003246:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003249:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
1000324c:	83 c4 14             	add    esp,0x14
1000324f:	5b                   	pop    ebx
10003250:	5e                   	pop    esi
10003251:	c3                   	ret    

10003252 <DMAChannel::setMode(unsigned char)>:
10003252:	53                   	push   ebx
10003253:	83 ec 08             	sub    esp,0x8
10003256:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000325a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000325e:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
10003262:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
10003265:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10003269:	74 2a                	je     10003295 <DMAChannel::setMode(unsigned char)+0x43>
1000326b:	51                   	push   ecx
1000326c:	51                   	push   ecx
1000326d:	6a 01                	push   0x1
1000326f:	53                   	push   ebx
10003270:	e8 fc ff ff ff       	call   10003271 <DMAChannel::setMode(unsigned char)+0x1f>	10003271: R_386_PC32	DMAChannel::mask(bool)
10003275:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
10003279:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
1000327c:	19 d2                	sbb    edx,edx
1000327e:	80 e2 35             	and    dl,0x35
10003281:	81 c2 d6 00 00 00    	add    edx,0xd6
10003287:	ee                   	out    dx,al
10003288:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000328c:	83 c4 18             	add    esp,0x18
1000328f:	5b                   	pop    ebx
10003290:	e9 1f 01 00 00       	jmp    100033b4 <DMAChannel::unmask()>
10003295:	83 c4 08             	add    esp,0x8
10003298:	5b                   	pop    ebx
10003299:	c3                   	ret    

1000329a <DMAChannel::start()>:
1000329a:	57                   	push   edi
1000329b:	56                   	push   esi
1000329c:	53                   	push   ebx
1000329d:	83 ec 10             	sub    esp,0x10
100032a0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100032a4:	8b 06                	mov    eax,DWORD PTR [esi]
100032a6:	83 f8 07             	cmp    eax,0x7
100032a9:	77 60                	ja     1000330b <DMAChannel::start()+0x71>
100032ab:	8a 98 d8 60 00 10    	mov    bl,BYTE PTR [eax+0x100060d8]	100032ad: R_386_32	.text
100032b1:	8a 88 e0 60 00 10    	mov    cl,BYTE PTR [eax+0x100060e0]	100032b3: R_386_32	.text
100032b7:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
100032bb:	8a 80 e8 60 00 10    	mov    al,BYTE PTR [eax+0x100060e8]	100032bd: R_386_32	.text
100032c1:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
100032c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100032c9:	fa                   	cli    
100032ca:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100032cc: R_386_32	irqDisableCounter
100032d0:	50                   	push   eax
100032d1:	50                   	push   eax
100032d2:	6a 01                	push   0x1
100032d4:	56                   	push   esi
100032d5:	e8 fc ff ff ff       	call   100032d6 <DMAChannel::start()+0x3c>	100032d6: R_386_PC32	DMAChannel::mask(bool)
100032da:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
100032dd:	83 c4 10             	add    esp,0x10
100032e0:	80 fb 01             	cmp    bl,0x1
100032e3:	19 d2                	sbb    edx,edx
100032e5:	31 c0                	xor    eax,eax
100032e7:	80 e2 34             	and    dl,0x34
100032ea:	81 c2 d8 00 00 00    	add    edx,0xd8
100032f0:	89 d7                	mov    edi,edx
100032f2:	ee                   	out    dx,al
100032f3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
100032f6:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
100032fb:	84 db                	test   bl,bl
100032fd:	74 1f                	je     1000331e <DMAChannel::start()+0x84>
100032ff:	89 c8                	mov    eax,ecx
10003301:	d1 e8                	shr    eax,1
10003303:	ee                   	out    dx,al
10003304:	89 c8                	mov    eax,ecx
10003306:	c1 e8 09             	shr    eax,0x9
10003309:	eb 1b                	jmp    10003326 <DMAChannel::start()+0x8c>
1000330b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	1000330f: R_386_32	dmaConfused
10003313:	83 c4 10             	add    esp,0x10
10003316:	5b                   	pop    ebx
10003317:	5e                   	pop    esi
10003318:	5f                   	pop    edi
10003319:	e9 fc ff ff ff       	jmp    1000331a <DMAChannel::start()+0x80>	1000331a: R_386_PC32	KePanic(char const*)
1000331e:	88 c8                	mov    al,cl
10003320:	ee                   	out    dx,al
10003321:	89 c8                	mov    eax,ecx
10003323:	c1 e8 08             	shr    eax,0x8
10003326:	ee                   	out    dx,al
10003327:	31 c0                	xor    eax,eax
10003329:	89 fa                	mov    edx,edi
1000332b:	ee                   	out    dx,al
1000332c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
1000332f:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10003334:	8d 47 ff             	lea    eax,[edi-0x1]
10003337:	ee                   	out    dx,al
10003338:	8d 47 ff             	lea    eax,[edi-0x1]
1000333b:	c1 e8 08             	shr    eax,0x8
1000333e:	ee                   	out    dx,al
1000333f:	89 c8                	mov    eax,ecx
10003341:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
10003346:	c1 e8 10             	shr    eax,0x10
10003349:	ee                   	out    dx,al
1000334a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
1000334e:	74 12                	je     10003362 <DMAChannel::start()+0xc8>
10003350:	80 fb 01             	cmp    bl,0x1
10003353:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
10003356:	19 d2                	sbb    edx,edx
10003358:	80 e2 35             	and    dl,0x35
1000335b:	81 c2 d6 00 00 00    	add    edx,0xd6
10003361:	ee                   	out    dx,al
10003362:	83 ec 0c             	sub    esp,0xc
10003365:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
10003369:	56                   	push   esi
1000336a:	e8 fc ff ff ff       	call   1000336b <DMAChannel::start()+0xd1>	1000336b: R_386_PC32	DMAChannel::unmask()
1000336f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003370: R_386_32	irqDisableCounter
10003374:	83 c4 10             	add    esp,0x10
10003377:	48                   	dec    eax
10003378:	a3 00 00 00 00       	mov    ds:0x0,eax	10003379: R_386_32	irqDisableCounter
1000337d:	85 c0                	test   eax,eax
1000337f:	75 01                	jne    10003382 <DMAChannel::start()+0xe8>
10003381:	fb                   	sti    
10003382:	83 c4 10             	add    esp,0x10
10003385:	5b                   	pop    ebx
10003386:	5e                   	pop    esi
10003387:	5f                   	pop    edi
10003388:	c3                   	ret    
10003389:	90                   	nop

1000338a <DMAChannel::stop()>:
1000338a:	c3                   	ret    
1000338b:	90                   	nop

1000338c <DMAChannel::mask(bool)>:
1000338c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10003390:	8a 01                	mov    al,BYTE PTR [ecx]
10003392:	83 e0 03             	and    eax,0x3
10003395:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
1000339a:	0f 95 c2             	setne  dl
1000339d:	c1 e2 02             	shl    edx,0x2
100033a0:	09 d0                	or     eax,edx
100033a2:	80 79 0e 01          	cmp    BYTE PTR [ecx+0xe],0x1
100033a6:	19 d2                	sbb    edx,edx
100033a8:	80 e2 36             	and    dl,0x36
100033ab:	81 c2 d4 00 00 00    	add    edx,0xd4
100033b1:	ee                   	out    dx,al
100033b2:	c3                   	ret    
100033b3:	90                   	nop

100033b4 <DMAChannel::unmask()>:
100033b4:	6a 00                	push   0x0
100033b6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100033ba:	e8 fc ff ff ff       	call   100033bb <DMAChannel::unmask()+0x7>	100033bb: R_386_PC32	DMAChannel::mask(bool)
100033bf:	58                   	pop    eax
100033c0:	5a                   	pop    edx
100033c1:	c3                   	ret    

100033c2 <DMA::DMA()>:
100033c2:	55                   	push   ebp
100033c3:	89 e5                	mov    ebp,esp
100033c5:	83 ec 08             	sub    esp,0x8
100033c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033cb:	83 ec 08             	sub    esp,0x8
100033ce:	68 00 00 00 00       	push   0x0	100033cf: R_386_32	dmaCtrlName
100033d3:	50                   	push   eax
100033d4:	e8 fc ff ff ff       	call   100033d5 <DMA::DMA()+0x13>	100033d5: R_386_PC32	Device::Device(char const*)
100033d9:	83 c4 10             	add    esp,0x10
100033dc:	ba 08 00 00 00       	mov    edx,0x8	100033dd: R_386_32	vtable for DMA
100033e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033e4:	89 10                	mov    DWORD PTR [eax],edx
100033e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033e9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
100033f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033f9:	0f b6 d0             	movzx  edx,al
100033fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033ff:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
10003406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003409:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000340f:	0f b6 d0             	movzx  edx,al
10003412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003415:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
1000341a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000341d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003423:	8d 50 01             	lea    edx,[eax+0x1]
10003426:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000342f:	0f b6 d0             	movzx  edx,al
10003432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003435:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003439:	83 e1 3f             	and    ecx,0x3f
1000343c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003443:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003449:	0f b6 d0             	movzx  edx,al
1000344c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000344f:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
10003456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003459:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000345f:	0f b6 d0             	movzx  edx,al
10003462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003465:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
1000346a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000346d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003473:	8d 50 01             	lea    edx,[eax+0x1]
10003476:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003479:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000347f:	0f b6 d0             	movzx  edx,al
10003482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003485:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003489:	83 e1 3f             	and    ecx,0x3f
1000348c:	83 c9 40             	or     ecx,0x40
1000348f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003496:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000349c:	0f b6 d0             	movzx  edx,al
1000349f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034a2:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
100034a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034b2:	0f b6 d0             	movzx  edx,al
100034b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034b8:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100034bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034c6:	8d 50 01             	lea    edx,[eax+0x1]
100034c9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100034cc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100034d2:	0f b6 d0             	movzx  edx,al
100034d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100034dc:	83 e1 3f             	and    ecx,0x3f
100034df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100034e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034ec:	0f b6 d0             	movzx  edx,al
100034ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034f2:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
100034f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003502:	0f b6 d0             	movzx  edx,al
10003505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003508:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000350d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003510:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003516:	8d 50 01             	lea    edx,[eax+0x1]
10003519:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000351c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003522:	0f b6 d0             	movzx  edx,al
10003525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003528:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000352c:	83 e1 3f             	and    ecx,0x3f
1000352f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003536:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000353c:	0f b6 d0             	movzx  edx,al
1000353f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003542:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
10003549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000354c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003552:	0f b6 d0             	movzx  edx,al
10003555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003558:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
1000355d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003560:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003566:	8d 50 01             	lea    edx,[eax+0x1]
10003569:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000356c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003572:	0f b6 d0             	movzx  edx,al
10003575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003578:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000357c:	83 e1 3f             	and    ecx,0x3f
1000357f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003586:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000358c:	0f b6 d0             	movzx  edx,al
1000358f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003592:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
10003599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000359c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100035a2:	0f b6 d0             	movzx  edx,al
100035a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100035ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100035b6:	8d 50 01             	lea    edx,[eax+0x1]
100035b9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100035bc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100035c2:	0f b6 d0             	movzx  edx,al
100035c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035c8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100035cc:	83 e1 3f             	and    ecx,0x3f
100035cf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100035d3:	90                   	nop
100035d4:	c9                   	leave  
100035d5:	c3                   	ret    

100035d6 <DMA::getAvailable()>:
100035d6:	fa                   	cli    
100035d7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100035d9: R_386_32	irqDisableCounter
100035dd:	8d 42 01             	lea    eax,[edx+0x1]
100035e0:	a3 00 00 00 00       	mov    ds:0x0,eax	100035e1: R_386_32	irqDisableCounter
100035e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100035e9:	0f b6 88 58 01 00 00 	movzx  ecx,BYTE PTR [eax+0x158]
100035f0:	31 c0                	xor    eax,eax
100035f2:	0f a3 c1             	bt     ecx,eax
100035f5:	73 08                	jae    100035ff <DMA::getAvailable()+0x29>
100035f7:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100035f9: R_386_32	irqDisableCounter
100035fd:	eb 0f                	jmp    1000360e <DMA::getAvailable()+0x38>
100035ff:	40                   	inc    eax
10003600:	83 f8 08             	cmp    eax,0x8
10003603:	75 ed                	jne    100035f2 <DMA::getAvailable()+0x1c>
10003605:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10003607: R_386_32	irqDisableCounter
1000360b:	83 c8 ff             	or     eax,0xffffffff
1000360e:	85 d2                	test   edx,edx
10003610:	75 01                	jne    10003613 <DMA::getAvailable()+0x3d>
10003612:	fb                   	sti    
10003613:	c3                   	ret    

10003614 <DMA::open(int, int, void*)>:
10003614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003618:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
1000361f:	31 c0                	xor    eax,eax
10003621:	e6 0d                	out    0xd,al
10003623:	e6 da                	out    0xda,al
10003625:	31 c0                	xor    eax,eax
10003627:	c3                   	ret    

10003628 <DMA::close(int, int, void*)>:
10003628:	31 c0                	xor    eax,eax
1000362a:	c3                   	ret    
1000362b:	90                   	nop

1000362c <DMA::tryLockChannelWithBase(int)>:
1000362c:	57                   	push   edi
1000362d:	56                   	push   esi
1000362e:	53                   	push   ebx
1000362f:	83 ec 10             	sub    esp,0x10
10003632:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10003636:	fa                   	cli    
10003637:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10003639: R_386_32	irqDisableCounter
1000363d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003641:	8d 41 01             	lea    eax,[ecx+0x1]
10003644:	a3 00 00 00 00       	mov    ds:0x0,eax	10003645: R_386_32	irqDisableCounter
10003649:	8d 43 03             	lea    eax,[ebx+0x3]
1000364c:	39 d8                	cmp    eax,ebx
1000364e:	7c 50                	jl     100036a0 <DMA::tryLockChannelWithBase(int)+0x74>
10003650:	0f b6 b7 58 01 00 00 	movzx  esi,BYTE PTR [edi+0x158]
10003657:	0f a3 de             	bt     esi,ebx
1000365a:	73 41                	jae    1000369d <DMA::tryLockChannelWithBase(int)+0x71>
1000365c:	83 ec 0c             	sub    esp,0xc
1000365f:	88 d9                	mov    cl,bl
10003661:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003666:	d3 c0                	rol    eax,cl
10003668:	21 f0                	and    eax,esi
1000366a:	88 87 58 01 00 00    	mov    BYTE PTR [edi+0x158],al
10003670:	6a 18                	push   0x18
10003672:	e8 fc ff ff ff       	call   10003673 <DMA::tryLockChannelWithBase(int)+0x47>	10003673: R_386_PC32	malloc
10003677:	5a                   	pop    edx
10003678:	59                   	pop    ecx
10003679:	53                   	push   ebx
1000367a:	50                   	push   eax
1000367b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000367f:	e8 fc ff ff ff       	call   10003680 <DMA::tryLockChannelWithBase(int)+0x54>	10003680: R_386_PC32	DMAChannel::DMAChannel(int)
10003684:	a1 00 00 00 00       	mov    eax,ds:0x0	10003685: R_386_32	irqDisableCounter
10003689:	83 c4 10             	add    esp,0x10
1000368c:	8d 50 ff             	lea    edx,[eax-0x1]
1000368f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003693:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10003695: R_386_32	irqDisableCounter
10003699:	85 d2                	test   edx,edx
1000369b:	eb 0d                	jmp    100036aa <DMA::tryLockChannelWithBase(int)+0x7e>
1000369d:	43                   	inc    ebx
1000369e:	eb ac                	jmp    1000364c <DMA::tryLockChannelWithBase(int)+0x20>
100036a0:	31 c0                	xor    eax,eax
100036a2:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	100036a4: R_386_32	irqDisableCounter
100036a8:	85 c9                	test   ecx,ecx
100036aa:	75 01                	jne    100036ad <DMA::tryLockChannelWithBase(int)+0x81>
100036ac:	fb                   	sti    
100036ad:	83 c4 10             	add    esp,0x10
100036b0:	5b                   	pop    ebx
100036b1:	5e                   	pop    esi
100036b2:	5f                   	pop    edi
100036b3:	c3                   	ret    

100036b4 <DMA::lockChannelWithBase(int)>:
100036b4:	83 ec 0c             	sub    esp,0xc
100036b7:	50                   	push   eax
100036b8:	50                   	push   eax
100036b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036c1:	e8 fc ff ff ff       	call   100036c2 <DMA::lockChannelWithBase(int)+0xe>	100036c2: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036c6:	83 c4 10             	add    esp,0x10
100036c9:	85 c0                	test   eax,eax
100036cb:	74 ea                	je     100036b7 <DMA::lockChannelWithBase(int)+0x3>
100036cd:	83 c4 0c             	add    esp,0xc
100036d0:	c3                   	ret    
100036d1:	90                   	nop

100036d2 <DMA::tryLockChannel8()>:
100036d2:	83 ec 14             	sub    esp,0x14
100036d5:	6a 00                	push   0x0
100036d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036db:	e8 fc ff ff ff       	call   100036dc <DMA::tryLockChannel8()+0xa>	100036dc: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036e0:	83 c4 1c             	add    esp,0x1c
100036e3:	c3                   	ret    

100036e4 <DMA::tryLockChannel16()>:
100036e4:	83 ec 14             	sub    esp,0x14
100036e7:	6a 04                	push   0x4
100036e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036ed:	e8 fc ff ff ff       	call   100036ee <DMA::tryLockChannel16()+0xa>	100036ee: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036f2:	83 c4 1c             	add    esp,0x1c
100036f5:	c3                   	ret    

100036f6 <DMA::tryLockChannel(int)>:
100036f6:	56                   	push   esi
100036f7:	53                   	push   ebx
100036f8:	83 ec 14             	sub    esp,0x14
100036fb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100036ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003703:	83 fb 07             	cmp    ebx,0x7
10003706:	76 14                	jbe    1000371c <DMA::tryLockChannel(int)+0x26>
10003708:	83 ec 0c             	sub    esp,0xc
1000370b:	68 f0 60 00 10       	push   0x100060f0	1000370c: R_386_32	.text
10003710:	e8 fc ff ff ff       	call   10003711 <DMA::tryLockChannel(int)+0x1b>	10003711: R_386_PC32	Dbg::kprintf(char const*, ...)
10003715:	83 c4 10             	add    esp,0x10
10003718:	31 c0                	xor    eax,eax
1000371a:	eb 6b                	jmp    10003787 <DMA::tryLockChannel(int)+0x91>
1000371c:	fa                   	cli    
1000371d:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000371f: R_386_32	irqDisableCounter
10003723:	8d 41 01             	lea    eax,[ecx+0x1]
10003726:	a3 00 00 00 00       	mov    ds:0x0,eax	10003727: R_386_32	irqDisableCounter
1000372b:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
10003732:	89 c2                	mov    edx,eax
10003734:	0f a3 d8             	bt     eax,ebx
10003737:	73 41                	jae    1000377a <DMA::tryLockChannel(int)+0x84>
10003739:	83 ec 0c             	sub    esp,0xc
1000373c:	88 d9                	mov    cl,bl
1000373e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003743:	d3 c0                	rol    eax,cl
10003745:	21 d0                	and    eax,edx
10003747:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000374d:	6a 18                	push   0x18
1000374f:	e8 fc ff ff ff       	call   10003750 <DMA::tryLockChannel(int)+0x5a>	10003750: R_386_PC32	malloc
10003754:	5a                   	pop    edx
10003755:	59                   	pop    ecx
10003756:	53                   	push   ebx
10003757:	50                   	push   eax
10003758:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000375c:	e8 fc ff ff ff       	call   1000375d <DMA::tryLockChannel(int)+0x67>	1000375d: R_386_PC32	DMAChannel::DMAChannel(int)
10003761:	a1 00 00 00 00       	mov    eax,ds:0x0	10003762: R_386_32	irqDisableCounter
10003766:	83 c4 10             	add    esp,0x10
10003769:	8d 50 ff             	lea    edx,[eax-0x1]
1000376c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003770:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10003772: R_386_32	irqDisableCounter
10003776:	85 d2                	test   edx,edx
10003778:	eb 0a                	jmp    10003784 <DMA::tryLockChannel(int)+0x8e>
1000377a:	31 c0                	xor    eax,eax
1000377c:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	1000377e: R_386_32	irqDisableCounter
10003782:	85 c9                	test   ecx,ecx
10003784:	75 01                	jne    10003787 <DMA::tryLockChannel(int)+0x91>
10003786:	fb                   	sti    
10003787:	83 c4 14             	add    esp,0x14
1000378a:	5b                   	pop    ebx
1000378b:	5e                   	pop    esi
1000378c:	c3                   	ret    
1000378d:	90                   	nop

1000378e <DMA::lockChannel8()>:
1000378e:	83 ec 14             	sub    esp,0x14
10003791:	6a 00                	push   0x0
10003793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003797:	e8 fc ff ff ff       	call   10003798 <DMA::lockChannel8()+0xa>	10003798: R_386_PC32	DMA::lockChannelWithBase(int)
1000379c:	83 c4 1c             	add    esp,0x1c
1000379f:	c3                   	ret    

100037a0 <DMA::lockChannel16()>:
100037a0:	83 ec 14             	sub    esp,0x14
100037a3:	6a 04                	push   0x4
100037a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100037a9:	e8 fc ff ff ff       	call   100037aa <DMA::lockChannel16()+0xa>	100037aa: R_386_PC32	DMA::lockChannelWithBase(int)
100037ae:	83 c4 1c             	add    esp,0x1c
100037b1:	c3                   	ret    

100037b2 <DMA::lockChannel(int)>:
100037b2:	83 ec 0c             	sub    esp,0xc
100037b5:	50                   	push   eax
100037b6:	50                   	push   eax
100037b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100037bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100037bf:	e8 fc ff ff ff       	call   100037c0 <DMA::lockChannel(int)+0xe>	100037c0: R_386_PC32	DMA::tryLockChannel(int)
100037c4:	83 c4 10             	add    esp,0x10
100037c7:	85 c0                	test   eax,eax
100037c9:	74 ea                	je     100037b5 <DMA::lockChannel(int)+0x3>
100037cb:	83 c4 0c             	add    esp,0xc
100037ce:	c3                   	ret    
100037cf:	90                   	nop

100037d0 <DMA::unlockChannel(DMAChannel*)>:
100037d0:	56                   	push   esi
100037d1:	53                   	push   ebx
100037d2:	53                   	push   ebx
100037d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100037d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100037db:	85 db                	test   ebx,ebx
100037dd:	75 10                	jne    100037ef <DMA::unlockChannel(DMAChannel*)+0x1f>
100037df:	83 ec 0c             	sub    esp,0xc
100037e2:	68 00 00 00 00       	push   0x0	100037e3: R_386_32	badDma
100037e7:	e8 fc ff ff ff       	call   100037e8 <DMA::unlockChannel(DMAChannel*)+0x18>	100037e8: R_386_PC32	KePanic(char const*)
100037ec:	83 c4 10             	add    esp,0x10
100037ef:	fa                   	cli    
100037f0:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100037f2: R_386_32	irqDisableCounter
100037f6:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100037fd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100037ff:	89 d0                	mov    eax,edx
10003801:	0f a3 ca             	bt     edx,ecx
10003804:	72 24                	jb     1000382a <DMA::unlockChannel(DMAChannel*)+0x5a>
10003806:	83 ec 0c             	sub    esp,0xc
10003809:	ba 01 00 00 00       	mov    edx,0x1
1000380e:	d3 e2                	shl    edx,cl
10003810:	09 d0                	or     eax,edx
10003812:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10003818:	53                   	push   ebx
10003819:	e8 fc ff ff ff       	call   1000381a <DMA::unlockChannel(DMAChannel*)+0x4a>	1000381a: R_386_PC32	DMAChannel::~DMAChannel()
1000381e:	5a                   	pop    edx
1000381f:	59                   	pop    ecx
10003820:	6a 18                	push   0x18
10003822:	53                   	push   ebx
10003823:	e8 fc ff ff ff       	call   10003824 <DMA::unlockChannel(DMAChannel*)+0x54>	10003824: R_386_PC32	operator delete(void*, unsigned long)
10003828:	eb 0d                	jmp    10003837 <DMA::unlockChannel(DMAChannel*)+0x67>
1000382a:	83 ec 0c             	sub    esp,0xc
1000382d:	68 00 00 00 00       	push   0x0	1000382e: R_386_32	badBook
10003832:	e8 fc ff ff ff       	call   10003833 <DMA::unlockChannel(DMAChannel*)+0x63>	10003833: R_386_PC32	KePanic(char const*)
10003837:	a1 00 00 00 00       	mov    eax,ds:0x0	10003838: R_386_32	irqDisableCounter
1000383c:	83 c4 10             	add    esp,0x10
1000383f:	48                   	dec    eax
10003840:	a3 00 00 00 00       	mov    ds:0x0,eax	10003841: R_386_32	irqDisableCounter
10003845:	75 01                	jne    10003848 <DMA::unlockChannel(DMAChannel*)+0x78>
10003847:	fb                   	sti    
10003848:	58                   	pop    eax
10003849:	5b                   	pop    ebx
1000384a:	5e                   	pop    esi
1000384b:	c3                   	ret    

1000384c <PS2::PS2()>:
1000384c:	55                   	push   ebp
1000384d:	89 e5                	mov    ebp,esp
1000384f:	83 ec 08             	sub    esp,0x8
10003852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003855:	83 ec 08             	sub    esp,0x8
10003858:	68 00 00 00 00       	push   0x0	10003859: R_386_32	ps2ctrlname
1000385d:	50                   	push   eax
1000385e:	e8 fc ff ff ff       	call   1000385f <PS2::PS2()+0x13>	1000385f: R_386_PC32	Bus::Bus(char const*)
10003863:	83 c4 10             	add    esp,0x10
10003866:	ba 08 00 00 00       	mov    edx,0x8	10003867: R_386_32	vtable for PS2
1000386b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000386e:	89 10                	mov    DWORD PTR [eax],edx
10003870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003873:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003879:	0f b6 d0             	movzx  edx,al
1000387c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000387f:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10003886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003889:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000388f:	0f b6 d0             	movzx  edx,al
10003892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003895:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000389a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000389d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038a3:	8d 50 01             	lea    edx,[eax+0x1]
100038a6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100038a9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100038af:	0f b6 d0             	movzx  edx,al
100038b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038b5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100038b9:	83 e1 3f             	and    ecx,0x3f
100038bc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100038c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038c9:	0f b6 d0             	movzx  edx,al
100038cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038cf:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
100038d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038df:	0f b6 d0             	movzx  edx,al
100038e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038e5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100038ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038f3:	8d 50 01             	lea    edx,[eax+0x1]
100038f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100038f9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100038ff:	0f b6 d0             	movzx  edx,al
10003902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003905:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003909:	83 e1 3f             	and    ecx,0x3f
1000390c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003910:	90                   	nop
10003911:	c9                   	leave  
10003912:	c3                   	ret    
10003913:	90                   	nop

10003914 <PS2::open(int, int, void*)>:
10003914:	55                   	push   ebp
10003915:	89 e5                	mov    ebp,esp
10003917:	53                   	push   ebx
10003918:	83 ec 24             	sub    esp,0x24
1000391b:	fa                   	cli    
1000391c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000391d: R_386_32	irqDisableCounter
10003921:	40                   	inc    eax
10003922:	a3 00 00 00 00       	mov    ds:0x0,eax	10003923: R_386_32	irqDisableCounter
10003927:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000392e:	83 ec 08             	sub    esp,0x8
10003931:	68 ad 00 00 00       	push   0xad
10003936:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003939:	e8 fc ff ff ff       	call   1000393a <PS2::open(int, int, void*)+0x26>	1000393a: R_386_PC32	PS2::controllerWrite(unsigned char)
1000393e:	83 c4 10             	add    esp,0x10
10003941:	83 ec 08             	sub    esp,0x8
10003944:	68 a7 00 00 00       	push   0xa7
10003949:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000394c:	e8 fc ff ff ff       	call   1000394d <PS2::open(int, int, void*)+0x39>	1000394d: R_386_PC32	PS2::controllerWrite(unsigned char)
10003951:	83 c4 10             	add    esp,0x10
10003954:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
1000395a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000395d:	89 c2                	mov    edx,eax
1000395f:	ec                   	in     al,dx
10003960:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10003963:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10003969:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000396c:	89 c2                	mov    edx,eax
1000396e:	ec                   	in     al,dx
1000396f:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10003972:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003978:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000397b:	89 c2                	mov    edx,eax
1000397d:	ec                   	in     al,dx
1000397e:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003981:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003987:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000398a:	89 c2                	mov    edx,eax
1000398c:	ec                   	in     al,dx
1000398d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003990:	83 ec 08             	sub    esp,0x8
10003993:	68 aa 00 00 00       	push   0xaa
10003998:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000399b:	e8 fc ff ff ff       	call   1000399c <PS2::open(int, int, void*)+0x88>	1000399c: R_386_PC32	PS2::controllerWrite(unsigned char)
100039a0:	83 c4 10             	add    esp,0x10
100039a3:	83 ec 0c             	sub    esp,0xc
100039a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039a9:	e8 fc ff ff ff       	call   100039aa <PS2::open(int, int, void*)+0x96>	100039aa: R_386_PC32	PS2::controllerRead()
100039ae:	83 c4 10             	add    esp,0x10
100039b1:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039b4:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100039b8:	74 65                	je     10003a1f <PS2::open(int, int, void*)+0x10b>
100039ba:	83 ec 0c             	sub    esp,0xc
100039bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039c0:	e8 fc ff ff ff       	call   100039c1 <PS2::open(int, int, void*)+0xad>	100039c1: R_386_PC32	PS2::controllerRead()
100039c5:	83 c4 10             	add    esp,0x10
100039c8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039cb:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100039cf:	74 4e                	je     10003a1f <PS2::open(int, int, void*)+0x10b>
100039d1:	83 ec 08             	sub    esp,0x8
100039d4:	68 aa 00 00 00       	push   0xaa
100039d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039dc:	e8 fc ff ff ff       	call   100039dd <PS2::open(int, int, void*)+0xc9>	100039dd: R_386_PC32	PS2::controllerWrite(unsigned char)
100039e1:	83 c4 10             	add    esp,0x10
100039e4:	83 ec 08             	sub    esp,0x8
100039e7:	68 aa 00 00 00       	push   0xaa
100039ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039ef:	e8 fc ff ff ff       	call   100039f0 <PS2::open(int, int, void*)+0xdc>	100039f0: R_386_PC32	PS2::controllerWrite(unsigned char)
100039f4:	83 c4 10             	add    esp,0x10
100039f7:	83 ec 0c             	sub    esp,0xc
100039fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039fd:	e8 fc ff ff ff       	call   100039fe <PS2::open(int, int, void*)+0xea>	100039fe: R_386_PC32	PS2::controllerRead()
10003a02:	83 c4 10             	add    esp,0x10
10003a05:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003a08:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003a0c:	74 11                	je     10003a1f <PS2::open(int, int, void*)+0x10b>
10003a0e:	83 ec 0c             	sub    esp,0xc
10003a11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a14:	e8 fc ff ff ff       	call   10003a15 <PS2::open(int, int, void*)+0x101>	10003a15: R_386_PC32	PS2::controllerRead()
10003a19:	83 c4 10             	add    esp,0x10
10003a1c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003a1f:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10003a26:	83 ec 08             	sub    esp,0x8
10003a29:	6a 20                	push   0x20
10003a2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a2e:	e8 fc ff ff ff       	call   10003a2f <PS2::open(int, int, void*)+0x11b>	10003a2f: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a33:	83 c4 10             	add    esp,0x10
10003a36:	83 ec 0c             	sub    esp,0xc
10003a39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a3c:	e8 fc ff ff ff       	call   10003a3d <PS2::open(int, int, void*)+0x129>	10003a3d: R_386_PC32	PS2::controllerRead()
10003a41:	83 c4 10             	add    esp,0x10
10003a44:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10003a47:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10003a4b:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10003a4f:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10003a53:	83 ec 04             	sub    esp,0x4
10003a56:	50                   	push   eax
10003a57:	6a 60                	push   0x60
10003a59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a5c:	e8 fc ff ff ff       	call   10003a5d <PS2::open(int, int, void*)+0x149>	10003a5d: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10003a61:	83 c4 10             	add    esp,0x10
10003a64:	83 ec 08             	sub    esp,0x8
10003a67:	68 ae 00 00 00       	push   0xae
10003a6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a6f:	e8 fc ff ff ff       	call   10003a70 <PS2::open(int, int, void*)+0x15c>	10003a70: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a74:	83 c4 10             	add    esp,0x10
10003a77:	83 ec 08             	sub    esp,0x8
10003a7a:	68 a8 00 00 00       	push   0xa8
10003a7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a82:	e8 fc ff ff ff       	call   10003a83 <PS2::open(int, int, void*)+0x16f>	10003a83: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a87:	83 c4 10             	add    esp,0x10
10003a8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10003a8b: R_386_32	irqDisableCounter
10003a8f:	48                   	dec    eax
10003a90:	a3 00 00 00 00       	mov    ds:0x0,eax	10003a91: R_386_32	irqDisableCounter
10003a95:	a1 00 00 00 00       	mov    eax,ds:0x0	10003a96: R_386_32	irqDisableCounter
10003a9a:	85 c0                	test   eax,eax
10003a9c:	75 01                	jne    10003a9f <PS2::open(int, int, void*)+0x18b>
10003a9e:	fb                   	sti    
10003a9f:	c7 45 dc 60 01 00 00 	mov    DWORD PTR [ebp-0x24],0x160
10003aa6:	83 ec 0c             	sub    esp,0xc
10003aa9:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10003aac:	e8 fc ff ff ff       	call   10003aad <PS2::open(int, int, void*)+0x199>	10003aad: R_386_PC32	malloc
10003ab1:	83 c4 10             	add    esp,0x10
10003ab4:	89 c3                	mov    ebx,eax
10003ab6:	83 ec 0c             	sub    esp,0xc
10003ab9:	53                   	push   ebx
10003aba:	e8 fc ff ff ff       	call   10003abb <PS2::open(int, int, void*)+0x1a7>	10003abb: R_386_PC32	PS2Port::PS2Port()
10003abf:	83 c4 10             	add    esp,0x10
10003ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ac5:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10003acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ace:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003ad1:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10003ad7:	83 ec 08             	sub    esp,0x8
10003ada:	52                   	push   edx
10003adb:	50                   	push   eax
10003adc:	e8 fc ff ff ff       	call   10003add <PS2::open(int, int, void*)+0x1c9>	10003add: R_386_PC32	Device::addChild(Device*)
10003ae1:	83 c4 10             	add    esp,0x10
10003ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ae7:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10003aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003af0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10003af6:	8b 00                	mov    eax,DWORD PTR [eax]
10003af8:	83 c0 08             	add    eax,0x8
10003afb:	8b 00                	mov    eax,DWORD PTR [eax]
10003afd:	6a 00                	push   0x0
10003aff:	6a 00                	push   0x0
10003b01:	6a 00                	push   0x0
10003b03:	52                   	push   edx
10003b04:	ff d0                	call   eax
10003b06:	83 c4 10             	add    esp,0x10
10003b09:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10003b0d:	75 6a                	jne    10003b79 <PS2::open(int, int, void*)+0x265>
10003b0f:	c7 45 d8 60 01 00 00 	mov    DWORD PTR [ebp-0x28],0x160
10003b16:	83 ec 0c             	sub    esp,0xc
10003b19:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003b1c:	e8 fc ff ff ff       	call   10003b1d <PS2::open(int, int, void*)+0x209>	10003b1d: R_386_PC32	malloc
10003b21:	83 c4 10             	add    esp,0x10
10003b24:	89 c3                	mov    ebx,eax
10003b26:	83 ec 0c             	sub    esp,0xc
10003b29:	53                   	push   ebx
10003b2a:	e8 fc ff ff ff       	call   10003b2b <PS2::open(int, int, void*)+0x217>	10003b2b: R_386_PC32	PS2Port::PS2Port()
10003b2f:	83 c4 10             	add    esp,0x10
10003b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b35:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10003b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003b41:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10003b47:	83 ec 08             	sub    esp,0x8
10003b4a:	52                   	push   edx
10003b4b:	50                   	push   eax
10003b4c:	e8 fc ff ff ff       	call   10003b4d <PS2::open(int, int, void*)+0x239>	10003b4d: R_386_PC32	Device::addChild(Device*)
10003b51:	83 c4 10             	add    esp,0x10
10003b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b57:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10003b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b60:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003b66:	8b 00                	mov    eax,DWORD PTR [eax]
10003b68:	83 c0 08             	add    eax,0x8
10003b6b:	8b 00                	mov    eax,DWORD PTR [eax]
10003b6d:	6a 00                	push   0x0
10003b6f:	6a 00                	push   0x0
10003b71:	6a 01                	push   0x1
10003b73:	52                   	push   edx
10003b74:	ff d0                	call   eax
10003b76:	83 c4 10             	add    esp,0x10
10003b79:	b8 00 00 00 00       	mov    eax,0x0
10003b7e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10003b81:	c9                   	leave  
10003b82:	c3                   	ret    
10003b83:	90                   	nop

10003b84 <PS2::close(int, int, void*)>:
10003b84:	b8 00 00 00 00       	mov    eax,0x0
10003b89:	c3                   	ret    

10003b8a <PS2::detect()>:
10003b8a:	90                   	nop
10003b8b:	c3                   	ret    

10003b8c <PS2::controllerWrite(unsigned char)>:
10003b8c:	55                   	push   ebp
10003b8d:	89 e5                	mov    ebp,esp
10003b8f:	83 ec 14             	sub    esp,0x14
10003b92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10003b95:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10003b98:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003b9f:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003ba5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003ba8:	89 c2                	mov    edx,eax
10003baa:	ec                   	in     al,dx
10003bab:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003bae:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003bb1:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003bb4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003bb8:	83 e0 40             	and    eax,0x40
10003bbb:	85 c0                	test   eax,eax
10003bbd:	75 2d                	jne    10003bec <PS2::controllerWrite(unsigned char)+0x60>
10003bbf:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003bc2:	84 c0                	test   al,al
10003bc4:	78 26                	js     10003bec <PS2::controllerWrite(unsigned char)+0x60>
10003bc6:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003bca:	83 e0 02             	and    eax,0x2
10003bcd:	85 c0                	test   eax,eax
10003bcf:	74 17                	je     10003be8 <PS2::controllerWrite(unsigned char)+0x5c>
10003bd1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003bd4:	8d 50 01             	lea    edx,[eax+0x1]
10003bd7:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003bda:	3d 20 03 00 00       	cmp    eax,0x320
10003bdf:	0f 94 c0             	sete   al
10003be2:	84 c0                	test   al,al
10003be4:	75 05                	jne    10003beb <PS2::controllerWrite(unsigned char)+0x5f>
10003be6:	eb b7                	jmp    10003b9f <PS2::controllerWrite(unsigned char)+0x13>
10003be8:	90                   	nop
10003be9:	eb 01                	jmp    10003bec <PS2::controllerWrite(unsigned char)+0x60>
10003beb:	90                   	nop
10003bec:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10003bf0:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10003bf6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003bf9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003bfc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003bff:	ee                   	out    dx,al
10003c00:	b0 01                	mov    al,0x1
10003c02:	c9                   	leave  
10003c03:	c3                   	ret    

10003c04 <PS2::controllerWrite(unsigned char, unsigned char)>:
10003c04:	55                   	push   ebp
10003c05:	89 e5                	mov    ebp,esp
10003c07:	83 ec 28             	sub    esp,0x28
10003c0a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003c0d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10003c10:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10003c13:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10003c16:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10003c1a:	50                   	push   eax
10003c1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003c1e:	e8 fc ff ff ff       	call   10003c1f <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10003c1f: R_386_PC32	PS2::controllerWrite(unsigned char)
10003c23:	83 c4 08             	add    esp,0x8
10003c26:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003c2d:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003c33:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003c36:	89 c2                	mov    edx,eax
10003c38:	ec                   	in     al,dx
10003c39:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003c3c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003c3f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003c42:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c46:	83 e0 40             	and    eax,0x40
10003c49:	85 c0                	test   eax,eax
10003c4b:	75 07                	jne    10003c54 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10003c4d:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003c50:	84 c0                	test   al,al
10003c52:	79 18                	jns    10003c6c <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10003c54:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c58:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003c5e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003c61:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003c64:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003c67:	ee                   	out    dx,al
10003c68:	b0 00                	mov    al,0x0
10003c6a:	eb 4f                	jmp    10003cbb <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003c6c:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c70:	83 e0 02             	and    eax,0x2
10003c73:	85 c0                	test   eax,eax
10003c75:	74 2d                	je     10003ca4 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10003c77:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003c7a:	8d 50 01             	lea    edx,[eax+0x1]
10003c7d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003c80:	3d 20 03 00 00       	cmp    eax,0x320
10003c85:	0f 94 c0             	sete   al
10003c88:	84 c0                	test   al,al
10003c8a:	74 a1                	je     10003c2d <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10003c8c:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c90:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003c96:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003c99:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003c9c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003c9f:	ee                   	out    dx,al
10003ca0:	b0 00                	mov    al,0x0
10003ca2:	eb 17                	jmp    10003cbb <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003ca4:	90                   	nop
10003ca5:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003ca9:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003caf:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003cb2:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10003cb5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10003cb8:	ee                   	out    dx,al
10003cb9:	b0 01                	mov    al,0x1
10003cbb:	c9                   	leave  
10003cbc:	c3                   	ret    
10003cbd:	90                   	nop

10003cbe <PS2::controllerRead()>:
10003cbe:	55                   	push   ebp
10003cbf:	89 e5                	mov    ebp,esp
10003cc1:	83 ec 20             	sub    esp,0x20
10003cc4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003ccb:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003cd1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003cd4:	89 c2                	mov    edx,eax
10003cd6:	ec                   	in     al,dx
10003cd7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003cda:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003cdd:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003ce0:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003ce4:	83 e0 40             	and    eax,0x40
10003ce7:	85 c0                	test   eax,eax
10003ce9:	75 07                	jne    10003cf2 <PS2::controllerRead()+0x34>
10003ceb:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003cee:	84 c0                	test   al,al
10003cf0:	79 04                	jns    10003cf6 <PS2::controllerRead()+0x38>
10003cf2:	b0 00                	mov    al,0x0
10003cf4:	eb 48                	jmp    10003d3e <PS2::controllerRead()+0x80>
10003cf6:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003cfa:	83 e0 01             	and    eax,0x1
10003cfd:	85 c0                	test   eax,eax
10003cff:	75 29                	jne    10003d2a <PS2::controllerRead()+0x6c>
10003d01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003d04:	8d 50 01             	lea    edx,[eax+0x1]
10003d07:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003d0a:	3d 40 06 00 00       	cmp    eax,0x640
10003d0f:	0f 94 c0             	sete   al
10003d12:	84 c0                	test   al,al
10003d14:	74 b5                	je     10003ccb <PS2::controllerRead()+0xd>
10003d16:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003d1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003d1f:	89 c2                	mov    edx,eax
10003d21:	ec                   	in     al,dx
10003d22:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003d25:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003d28:	eb 14                	jmp    10003d3e <PS2::controllerRead()+0x80>
10003d2a:	90                   	nop
10003d2b:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003d31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003d34:	89 c2                	mov    edx,eax
10003d36:	ec                   	in     al,dx
10003d37:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003d3a:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003d3d:	90                   	nop
10003d3e:	c9                   	leave  
10003d3f:	c3                   	ret    

10003d40 <PS2Keyboard::PS2Keyboard()>:
10003d40:	55                   	push   ebp
10003d41:	89 e5                	mov    ebp,esp
10003d43:	83 ec 08             	sub    esp,0x8
10003d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d49:	83 ec 08             	sub    esp,0x8
10003d4c:	68 00 00 00 00       	push   0x0	10003d4d: R_386_32	ps2keyname
10003d51:	50                   	push   eax
10003d52:	e8 fc ff ff ff       	call   10003d53 <PS2Keyboard::PS2Keyboard()+0x13>	10003d53: R_386_PC32	Keyboard::Keyboard(char const*)
10003d57:	83 c4 10             	add    esp,0x10
10003d5a:	ba 08 00 00 00       	mov    edx,0x8	10003d5b: R_386_32	vtable for PS2Keyboard
10003d5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d62:	89 10                	mov    DWORD PTR [eax],edx
10003d64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d67:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10003d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d71:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10003d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d7b:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10003d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d85:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10003d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d8f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10003d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d99:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10003da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003da3:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10003daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003dad:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10003db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003db7:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10003dbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003dc1:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10003dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003dcb:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10003dd2:	90                   	nop
10003dd3:	c9                   	leave  
10003dd4:	c3                   	ret    
10003dd5:	90                   	nop

10003dd6 <PS2Keyboard::~PS2Keyboard()>:
10003dd6:	55                   	push   ebp
10003dd7:	89 e5                	mov    ebp,esp
10003dd9:	83 ec 08             	sub    esp,0x8
10003ddc:	ba 08 00 00 00       	mov    edx,0x8	10003ddd: R_386_32	vtable for PS2Keyboard
10003de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003de4:	89 10                	mov    DWORD PTR [eax],edx
10003de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003de9:	83 ec 0c             	sub    esp,0xc
10003dec:	50                   	push   eax
10003ded:	e8 fc ff ff ff       	call   10003dee <PS2Keyboard::~PS2Keyboard()+0x18>	10003dee: R_386_PC32	Keyboard::~Keyboard()
10003df2:	83 c4 10             	add    esp,0x10
10003df5:	90                   	nop
10003df6:	c9                   	leave  
10003df7:	c3                   	ret    

10003df8 <PS2Keyboard::~PS2Keyboard()>:
10003df8:	55                   	push   ebp
10003df9:	89 e5                	mov    ebp,esp
10003dfb:	83 ec 08             	sub    esp,0x8
10003dfe:	83 ec 0c             	sub    esp,0xc
10003e01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003e04:	e8 fc ff ff ff       	call   10003e05 <PS2Keyboard::~PS2Keyboard()+0xd>	10003e05: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10003e09:	83 c4 10             	add    esp,0x10
10003e0c:	83 ec 08             	sub    esp,0x8
10003e0f:	68 70 01 00 00       	push   0x170
10003e14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003e17:	e8 fc ff ff ff       	call   10003e18 <PS2Keyboard::~PS2Keyboard()+0x20>	10003e18: R_386_PC32	operator delete(void*, unsigned long)
10003e1c:	83 c4 10             	add    esp,0x10
10003e1f:	c9                   	leave  
10003e20:	c3                   	ret    
10003e21:	90                   	nop

10003e22 <PS2Keyboard::setRepeatRate(int)>:
10003e22:	c3                   	ret    
10003e23:	90                   	nop

10003e24 <PS2Keyboard::setRepeatDelay(int)>:
10003e24:	c3                   	ret    
10003e25:	90                   	nop

10003e26 <PS2Keyboard::sendKey(unsigned short, bool)>:
10003e26:	83 ec 1c             	sub    esp,0x1c
10003e29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003e2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003e31:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003e35:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003e39:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003e3e:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003e45:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003e4b:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003e50:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003e54:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003e58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003e5c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003e61:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003e66:	83 c4 1c             	add    esp,0x1c
10003e69:	e9 fc ff ff ff       	jmp    10003e6a <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10003e6a: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003e6e <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10003e6e:	83 ec 1c             	sub    esp,0x1c
10003e71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003e75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003e79:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003e7d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003e81:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003e86:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003e8d:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003e93:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003e98:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003e9c:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003ea4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003ea9:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003eae:	83 c4 1c             	add    esp,0x1c
10003eb1:	e9 fc ff ff ff       	jmp    10003eb2 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10003eb2: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003eb6 <PS2Keyboard::updateKeyboardLEDs()>:
10003eb6:	56                   	push   esi
10003eb7:	53                   	push   ebx
10003eb8:	83 ec 0c             	sub    esp,0xc
10003ebb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10003ebf:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10003ec5:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10003ecc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10003ecf:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10003ed6:	09 c3                	or     ebx,eax
10003ed8:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10003ede:	68 ed 00 00 00       	push   0xed
10003ee3:	0f b6 db             	movzx  ebx,bl
10003ee6:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003eec:	e8 fc ff ff ff       	call   10003eed <PS2Keyboard::updateKeyboardLEDs()+0x37>	10003eed: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003ef1:	58                   	pop    eax
10003ef2:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003ef8:	e8 fc ff ff ff       	call   10003ef9 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10003ef9: R_386_PC32	PS2Port::deviceRead()
10003efd:	5a                   	pop    edx
10003efe:	59                   	pop    ecx
10003eff:	53                   	push   ebx
10003f00:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003f06:	e8 fc ff ff ff       	call   10003f07 <PS2Keyboard::updateKeyboardLEDs()+0x51>	10003f07: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003f0b:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10003f11:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003f15:	83 c4 14             	add    esp,0x14
10003f18:	5b                   	pop    ebx
10003f19:	5e                   	pop    esi
10003f1a:	e9 fc ff ff ff       	jmp    10003f1b <PS2Keyboard::updateKeyboardLEDs()+0x65>	10003f1b: R_386_PC32	PS2Port::deviceRead()

10003f1f <ps2KeyboardHandler(regs*, void*)>:
10003f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003f23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003f27:	eb 01                	jmp    10003f2a <PS2Keyboard::handler()>
10003f29:	90                   	nop

10003f2a <PS2Keyboard::handler()>:
10003f2a:	57                   	push   edi
10003f2b:	56                   	push   esi
10003f2c:	53                   	push   ebx
10003f2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003f31:	e4 60                	in     al,0x60
10003f33:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10003f3a:	74 29                	je     10003f65 <PS2Keyboard::handler()+0x3b>
10003f3c:	88 c2                	mov    dl,al
10003f3e:	3c e0                	cmp    al,0xe0
10003f40:	75 0c                	jne    10003f4e <PS2Keyboard::handler()+0x24>
10003f42:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10003f49:	e9 17 07 00 00       	jmp    10004665 <PS2Keyboard::handler()+0x73b>
10003f4e:	84 c0                	test   al,al
10003f50:	0f 89 56 01 00 00    	jns    100040ac <PS2Keyboard::handler()+0x182>
10003f56:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003f5d:	83 e2 7f             	and    edx,0x7f
10003f60:	e9 47 01 00 00       	jmp    100040ac <PS2Keyboard::handler()+0x182>
10003f65:	3c e0                	cmp    al,0xe0
10003f67:	74 d9                	je     10003f42 <PS2Keyboard::handler()+0x18>
10003f69:	3c f0                	cmp    al,0xf0
10003f6b:	75 0c                	jne    10003f79 <PS2Keyboard::handler()+0x4f>
10003f6d:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003f74:	e9 ec 06 00 00       	jmp    10004665 <PS2Keyboard::handler()+0x73b>
10003f79:	3c 12                	cmp    al,0x12
10003f7b:	75 1f                	jne    10003f9c <PS2Keyboard::handler()+0x72>
10003f7d:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003f83:	83 f0 01             	xor    eax,0x1
10003f86:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10003f8c:	52                   	push   edx
10003f8d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f94:	50                   	push   eax
10003f95:	68 04 01 00 00       	push   0x104
10003f9a:	eb 23                	jmp    10003fbf <PS2Keyboard::handler()+0x95>
10003f9c:	76 3d                	jbe    10003fdb <PS2Keyboard::handler()+0xb1>
10003f9e:	3c 14                	cmp    al,0x14
10003fa0:	75 62                	jne    10004004 <PS2Keyboard::handler()+0xda>
10003fa2:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003fa8:	83 f0 01             	xor    eax,0x1
10003fab:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10003fb1:	51                   	push   ecx
10003fb2:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fb9:	50                   	push   eax
10003fba:	68 00 01 00 00       	push   0x100
10003fbf:	56                   	push   esi
10003fc0:	e8 fc ff ff ff       	call   10003fc1 <PS2Keyboard::handler()+0x97>	10003fc1: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003fc5:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003fcc:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003fd3:	83 c4 10             	add    esp,0x10
10003fd6:	e9 8a 06 00 00       	jmp    10004665 <PS2Keyboard::handler()+0x73b>
10003fdb:	3c 11                	cmp    al,0x11
10003fdd:	75 2d                	jne    1000400c <PS2Keyboard::handler()+0xe2>
10003fdf:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003fe5:	83 f0 01             	xor    eax,0x1
10003fe8:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10003fee:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10003ff4:	50                   	push   eax
10003ff5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ffc:	50                   	push   eax
10003ffd:	68 01 01 00 00       	push   0x101
10004002:	eb bb                	jmp    10003fbf <PS2Keyboard::handler()+0x95>
10004004:	3c 59                	cmp    al,0x59
10004006:	0f 84 71 ff ff ff    	je     10003f7d <PS2Keyboard::handler()+0x53>
1000400c:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10004013:	0f 84 c8 01 00 00    	je     100041e1 <PS2Keyboard::handler()+0x2b7>
10004019:	3c 70                	cmp    al,0x70
1000401b:	0f 84 91 01 00 00    	je     100041b2 <PS2Keyboard::handler()+0x288>
10004021:	77 43                	ja     10004066 <PS2Keyboard::handler()+0x13c>
10004023:	3c 69                	cmp    al,0x69
10004025:	0f 84 58 01 00 00    	je     10004183 <PS2Keyboard::handler()+0x259>
1000402b:	77 24                	ja     10004051 <PS2Keyboard::handler()+0x127>
1000402d:	3c 4a                	cmp    al,0x4a
1000402f:	75 13                	jne    10004044 <PS2Keyboard::handler()+0x11a>
10004031:	50                   	push   eax
10004032:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004039:	50                   	push   eax
1000403a:	68 27 03 00 00       	push   0x327
1000403f:	e9 e9 03 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004044:	3c 5a                	cmp    al,0x5a
10004046:	0f 84 82 01 00 00    	je     100041ce <PS2Keyboard::handler()+0x2a4>
1000404c:	e9 2c 04 00 00       	jmp    1000447d <PS2Keyboard::handler()+0x553>
10004051:	3c 6b                	cmp    al,0x6b
10004053:	0f 84 97 00 00 00    	je     100040f0 <PS2Keyboard::handler()+0x1c6>
10004059:	3c 6c                	cmp    al,0x6c
1000405b:	0f 84 06 01 00 00    	je     10004167 <PS2Keyboard::handler()+0x23d>
10004061:	e9 17 04 00 00       	jmp    1000447d <PS2Keyboard::handler()+0x553>
10004066:	3c 74                	cmp    al,0x74
10004068:	0f 84 9c 00 00 00    	je     1000410a <PS2Keyboard::handler()+0x1e0>
1000406e:	77 11                	ja     10004081 <PS2Keyboard::handler()+0x157>
10004070:	3c 71                	cmp    al,0x71
10004072:	0f 84 27 01 00 00    	je     1000419f <PS2Keyboard::handler()+0x275>
10004078:	3c 72                	cmp    al,0x72
1000407a:	74 61                	je     100040dd <PS2Keyboard::handler()+0x1b3>
1000407c:	e9 fc 03 00 00       	jmp    1000447d <PS2Keyboard::handler()+0x553>
10004081:	3c 7a                	cmp    al,0x7a
10004083:	0f 84 cb 00 00 00    	je     10004154 <PS2Keyboard::handler()+0x22a>
10004089:	3c 7d                	cmp    al,0x7d
1000408b:	0f 84 a9 00 00 00    	je     1000413a <PS2Keyboard::handler()+0x210>
10004091:	3c 75                	cmp    al,0x75
10004093:	0f 85 e4 03 00 00    	jne    1000447d <PS2Keyboard::handler()+0x553>
10004099:	50                   	push   eax
1000409a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040a1:	50                   	push   eax
100040a2:	68 0b 02 00 00       	push   0x20b
100040a7:	e9 81 03 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100040ac:	80 fa 2a             	cmp    dl,0x2a
100040af:	0f 84 c8 fe ff ff    	je     10003f7d <PS2Keyboard::handler()+0x53>
100040b5:	0f 87 93 05 00 00    	ja     1000464e <PS2Keyboard::handler()+0x724>
100040bb:	80 fa 1d             	cmp    dl,0x1d
100040be:	0f 84 de fe ff ff    	je     10003fa2 <PS2Keyboard::handler()+0x78>
100040c4:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100040cb:	0f 84 ca 03 00 00    	je     1000449b <PS2Keyboard::handler()+0x571>
100040d1:	80 fa 4b             	cmp    dl,0x4b
100040d4:	74 1a                	je     100040f0 <PS2Keyboard::handler()+0x1c6>
100040d6:	76 45                	jbe    1000411d <PS2Keyboard::handler()+0x1f3>
100040d8:	80 fa 50             	cmp    dl,0x50
100040db:	75 26                	jne    10004103 <PS2Keyboard::handler()+0x1d9>
100040dd:	50                   	push   eax
100040de:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040e5:	50                   	push   eax
100040e6:	68 0c 02 00 00       	push   0x20c
100040eb:	e9 3d 03 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100040f0:	50                   	push   eax
100040f1:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040f8:	50                   	push   eax
100040f9:	68 0d 02 00 00       	push   0x20d
100040fe:	e9 2a 03 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004103:	77 48                	ja     1000414d <PS2Keyboard::handler()+0x223>
10004105:	80 fa 4d             	cmp    dl,0x4d
10004108:	75 70                	jne    1000417a <PS2Keyboard::handler()+0x250>
1000410a:	50                   	push   eax
1000410b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004112:	50                   	push   eax
10004113:	68 0e 02 00 00       	push   0x20e
10004118:	e9 10 03 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000411d:	80 fa 47             	cmp    dl,0x47
10004120:	74 45                	je     10004167 <PS2Keyboard::handler()+0x23d>
10004122:	0f 86 9d 00 00 00    	jbe    100041c5 <PS2Keyboard::handler()+0x29b>
10004128:	80 fa 48             	cmp    dl,0x48
1000412b:	0f 84 68 ff ff ff    	je     10004099 <PS2Keyboard::handler()+0x16f>
10004131:	80 fa 49             	cmp    dl,0x49
10004134:	0f 85 43 03 00 00    	jne    1000447d <PS2Keyboard::handler()+0x553>
1000413a:	50                   	push   eax
1000413b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004142:	50                   	push   eax
10004143:	68 04 02 00 00       	push   0x204
10004148:	e9 e0 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000414d:	80 fa 52             	cmp    dl,0x52
10004150:	74 60                	je     100041b2 <PS2Keyboard::handler()+0x288>
10004152:	73 42                	jae    10004196 <PS2Keyboard::handler()+0x26c>
10004154:	57                   	push   edi
10004155:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000415c:	50                   	push   eax
1000415d:	68 05 02 00 00       	push   0x205
10004162:	e9 c6 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004167:	53                   	push   ebx
10004168:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000416f:	50                   	push   eax
10004170:	68 00 02 00 00       	push   0x200
10004175:	e9 b3 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000417a:	80 fa 4f             	cmp    dl,0x4f
1000417d:	0f 85 fa 02 00 00    	jne    1000447d <PS2Keyboard::handler()+0x553>
10004183:	51                   	push   ecx
10004184:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000418b:	50                   	push   eax
1000418c:	68 01 02 00 00       	push   0x201
10004191:	e9 97 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004196:	80 fa 53             	cmp    dl,0x53
10004199:	0f 85 de 02 00 00    	jne    1000447d <PS2Keyboard::handler()+0x553>
1000419f:	52                   	push   edx
100041a0:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100041a7:	50                   	push   eax
100041a8:	68 03 02 00 00       	push   0x203
100041ad:	e9 7b 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100041b2:	50                   	push   eax
100041b3:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100041ba:	50                   	push   eax
100041bb:	68 02 02 00 00       	push   0x202
100041c0:	e9 68 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100041c5:	80 fa 1c             	cmp    dl,0x1c
100041c8:	0f 85 c2 02 00 00    	jne    10004490 <PS2Keyboard::handler()+0x566>
100041ce:	50                   	push   eax
100041cf:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100041d6:	50                   	push   eax
100041d7:	68 25 03 00 00       	push   0x325
100041dc:	e9 4c 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100041e1:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
100041e8:	3c 66                	cmp    al,0x66
100041ea:	75 09                	jne    100041f5 <PS2Keyboard::handler()+0x2cb>
100041ec:	50                   	push   eax
100041ed:	52                   	push   edx
100041ee:	6a 08                	push   0x8
100041f0:	e9 38 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100041f5:	3c 0d                	cmp    al,0xd
100041f7:	75 09                	jne    10004202 <PS2Keyboard::handler()+0x2d8>
100041f9:	50                   	push   eax
100041fa:	52                   	push   edx
100041fb:	6a 09                	push   0x9
100041fd:	e9 2b 02 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004202:	3c 58                	cmp    al,0x58
10004204:	75 2a                	jne    10004230 <PS2Keyboard::handler()+0x306>
10004206:	84 d2                	test   dl,dl
10004208:	75 13                	jne    1000421d <PS2Keyboard::handler()+0x2f3>
1000420a:	83 ec 0c             	sub    esp,0xc
1000420d:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
10004214:	56                   	push   esi
10004215:	e8 fc ff ff ff       	call   10004216 <PS2Keyboard::handler()+0x2ec>	10004216: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000421a:	83 c4 10             	add    esp,0x10
1000421d:	50                   	push   eax
1000421e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004225:	50                   	push   eax
10004226:	68 80 02 00 00       	push   0x280
1000422b:	e9 fd 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004230:	3c 77                	cmp    al,0x77
10004232:	75 2a                	jne    1000425e <PS2Keyboard::handler()+0x334>
10004234:	84 d2                	test   dl,dl
10004236:	75 13                	jne    1000424b <PS2Keyboard::handler()+0x321>
10004238:	83 ec 0c             	sub    esp,0xc
1000423b:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
10004242:	56                   	push   esi
10004243:	e8 fc ff ff ff       	call   10004244 <PS2Keyboard::handler()+0x31a>	10004244: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10004248:	83 c4 10             	add    esp,0x10
1000424b:	50                   	push   eax
1000424c:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004253:	50                   	push   eax
10004254:	68 81 02 00 00       	push   0x281
10004259:	e9 cf 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000425e:	3c 7e                	cmp    al,0x7e
10004260:	75 2a                	jne    1000428c <PS2Keyboard::handler()+0x362>
10004262:	84 d2                	test   dl,dl
10004264:	75 13                	jne    10004279 <PS2Keyboard::handler()+0x34f>
10004266:	83 ec 0c             	sub    esp,0xc
10004269:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10004270:	56                   	push   esi
10004271:	e8 fc ff ff ff       	call   10004272 <PS2Keyboard::handler()+0x348>	10004272: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10004276:	83 c4 10             	add    esp,0x10
10004279:	57                   	push   edi
1000427a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004281:	50                   	push   eax
10004282:	68 82 02 00 00       	push   0x282
10004287:	e9 a1 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000428c:	3c 05                	cmp    al,0x5
1000428e:	75 0c                	jne    1000429c <PS2Keyboard::handler()+0x372>
10004290:	53                   	push   ebx
10004291:	52                   	push   edx
10004292:	68 00 03 00 00       	push   0x300
10004297:	e9 91 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000429c:	3c 06                	cmp    al,0x6
1000429e:	75 0c                	jne    100042ac <PS2Keyboard::handler()+0x382>
100042a0:	51                   	push   ecx
100042a1:	52                   	push   edx
100042a2:	68 01 03 00 00       	push   0x301
100042a7:	e9 81 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100042ac:	3c 04                	cmp    al,0x4
100042ae:	75 0c                	jne    100042bc <PS2Keyboard::handler()+0x392>
100042b0:	50                   	push   eax
100042b1:	52                   	push   edx
100042b2:	68 02 03 00 00       	push   0x302
100042b7:	e9 71 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100042bc:	3c 0c                	cmp    al,0xc
100042be:	75 0c                	jne    100042cc <PS2Keyboard::handler()+0x3a2>
100042c0:	50                   	push   eax
100042c1:	52                   	push   edx
100042c2:	68 03 03 00 00       	push   0x303
100042c7:	e9 61 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100042cc:	3c 03                	cmp    al,0x3
100042ce:	75 0c                	jne    100042dc <PS2Keyboard::handler()+0x3b2>
100042d0:	50                   	push   eax
100042d1:	52                   	push   edx
100042d2:	68 04 03 00 00       	push   0x304
100042d7:	e9 51 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100042dc:	3c 0b                	cmp    al,0xb
100042de:	75 0c                	jne    100042ec <PS2Keyboard::handler()+0x3c2>
100042e0:	50                   	push   eax
100042e1:	52                   	push   edx
100042e2:	68 05 03 00 00       	push   0x305
100042e7:	e9 41 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100042ec:	3c 02                	cmp    al,0x2
100042ee:	74 04                	je     100042f4 <PS2Keyboard::handler()+0x3ca>
100042f0:	3c 83                	cmp    al,0x83
100042f2:	75 0c                	jne    10004300 <PS2Keyboard::handler()+0x3d6>
100042f4:	50                   	push   eax
100042f5:	52                   	push   edx
100042f6:	68 06 03 00 00       	push   0x306
100042fb:	e9 2d 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004300:	3c 0a                	cmp    al,0xa
10004302:	75 0c                	jne    10004310 <PS2Keyboard::handler()+0x3e6>
10004304:	50                   	push   eax
10004305:	52                   	push   edx
10004306:	68 07 03 00 00       	push   0x307
1000430b:	e9 1d 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004310:	3c 01                	cmp    al,0x1
10004312:	75 0c                	jne    10004320 <PS2Keyboard::handler()+0x3f6>
10004314:	57                   	push   edi
10004315:	52                   	push   edx
10004316:	68 08 03 00 00       	push   0x308
1000431b:	e9 0d 01 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004320:	3c 09                	cmp    al,0x9
10004322:	75 0c                	jne    10004330 <PS2Keyboard::handler()+0x406>
10004324:	53                   	push   ebx
10004325:	52                   	push   edx
10004326:	68 09 03 00 00       	push   0x309
1000432b:	e9 fd 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004330:	3c 78                	cmp    al,0x78
10004332:	75 0c                	jne    10004340 <PS2Keyboard::handler()+0x416>
10004334:	51                   	push   ecx
10004335:	52                   	push   edx
10004336:	68 0a 03 00 00       	push   0x30a
1000433b:	e9 ed 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004340:	3c 07                	cmp    al,0x7
10004342:	75 0c                	jne    10004350 <PS2Keyboard::handler()+0x426>
10004344:	50                   	push   eax
10004345:	52                   	push   edx
10004346:	68 0b 03 00 00       	push   0x30b
1000434b:	e9 dd 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004350:	3c 5a                	cmp    al,0x5a
10004352:	75 09                	jne    1000435d <PS2Keyboard::handler()+0x433>
10004354:	50                   	push   eax
10004355:	52                   	push   edx
10004356:	6a 0a                	push   0xa
10004358:	e9 d0 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000435d:	3c 76                	cmp    al,0x76
1000435f:	75 0c                	jne    1000436d <PS2Keyboard::handler()+0x443>
10004361:	50                   	push   eax
10004362:	52                   	push   edx
10004363:	68 0a 02 00 00       	push   0x20a
10004368:	e9 c0 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000436d:	3c 70                	cmp    al,0x70
1000436f:	75 0c                	jne    1000437d <PS2Keyboard::handler()+0x453>
10004371:	50                   	push   eax
10004372:	52                   	push   edx
10004373:	68 18 03 00 00       	push   0x318
10004378:	e9 b0 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000437d:	3c 69                	cmp    al,0x69
1000437f:	75 0c                	jne    1000438d <PS2Keyboard::handler()+0x463>
10004381:	50                   	push   eax
10004382:	52                   	push   edx
10004383:	68 19 03 00 00       	push   0x319
10004388:	e9 a0 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000438d:	3c 72                	cmp    al,0x72
1000438f:	75 0c                	jne    1000439d <PS2Keyboard::handler()+0x473>
10004391:	50                   	push   eax
10004392:	52                   	push   edx
10004393:	68 1a 03 00 00       	push   0x31a
10004398:	e9 90 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
1000439d:	3c 7a                	cmp    al,0x7a
1000439f:	75 0c                	jne    100043ad <PS2Keyboard::handler()+0x483>
100043a1:	57                   	push   edi
100043a2:	52                   	push   edx
100043a3:	68 1b 03 00 00       	push   0x31b
100043a8:	e9 80 00 00 00       	jmp    1000442d <PS2Keyboard::handler()+0x503>
100043ad:	3c 6b                	cmp    al,0x6b
100043af:	75 09                	jne    100043ba <PS2Keyboard::handler()+0x490>
100043b1:	53                   	push   ebx
100043b2:	52                   	push   edx
100043b3:	68 1c 03 00 00       	push   0x31c
100043b8:	eb 73                	jmp    1000442d <PS2Keyboard::handler()+0x503>
100043ba:	3c 73                	cmp    al,0x73
100043bc:	75 09                	jne    100043c7 <PS2Keyboard::handler()+0x49d>
100043be:	51                   	push   ecx
100043bf:	52                   	push   edx
100043c0:	68 1d 03 00 00       	push   0x31d
100043c5:	eb 66                	jmp    1000442d <PS2Keyboard::handler()+0x503>
100043c7:	3c 74                	cmp    al,0x74
100043c9:	75 09                	jne    100043d4 <PS2Keyboard::handler()+0x4aa>
100043cb:	50                   	push   eax
100043cc:	52                   	push   edx
100043cd:	68 1e 03 00 00       	push   0x31e
100043d2:	eb 59                	jmp    1000442d <PS2Keyboard::handler()+0x503>
100043d4:	3c 6c                	cmp    al,0x6c
100043d6:	75 09                	jne    100043e1 <PS2Keyboard::handler()+0x4b7>
100043d8:	50                   	push   eax
100043d9:	52                   	push   edx
100043da:	68 1f 03 00 00       	push   0x31f
100043df:	eb 4c                	jmp    1000442d <PS2Keyboard::handler()+0x503>
100043e1:	3c 75                	cmp    al,0x75
100043e3:	75 09                	jne    100043ee <PS2Keyboard::handler()+0x4c4>
100043e5:	50                   	push   eax
100043e6:	52                   	push   edx
100043e7:	68 20 03 00 00       	push   0x320
100043ec:	eb 3f                	jmp    1000442d <PS2Keyboard::handler()+0x503>
100043ee:	3c 7d                	cmp    al,0x7d
100043f0:	75 09                	jne    100043fb <PS2Keyboard::handler()+0x4d1>
100043f2:	50                   	push   eax
100043f3:	52                   	push   edx
100043f4:	68 21 03 00 00       	push   0x321
100043f9:	eb 32                	jmp    1000442d <PS2Keyboard::handler()+0x503>
100043fb:	3c 71                	cmp    al,0x71
100043fd:	75 09                	jne    10004408 <PS2Keyboard::handler()+0x4de>
100043ff:	50                   	push   eax
10004400:	52                   	push   edx
10004401:	68 22 03 00 00       	push   0x322
10004406:	eb 25                	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004408:	3c 7b                	cmp    al,0x7b
1000440a:	75 09                	jne    10004415 <PS2Keyboard::handler()+0x4eb>
1000440c:	50                   	push   eax
1000440d:	52                   	push   edx
1000440e:	68 24 03 00 00       	push   0x324
10004413:	eb 18                	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004415:	3c 79                	cmp    al,0x79
10004417:	75 09                	jne    10004422 <PS2Keyboard::handler()+0x4f8>
10004419:	57                   	push   edi
1000441a:	52                   	push   edx
1000441b:	68 23 03 00 00       	push   0x323
10004420:	eb 0b                	jmp    1000442d <PS2Keyboard::handler()+0x503>
10004422:	3c 7c                	cmp    al,0x7c
10004424:	75 0f                	jne    10004435 <PS2Keyboard::handler()+0x50b>
10004426:	53                   	push   ebx
10004427:	52                   	push   edx
10004428:	68 26 03 00 00       	push   0x326
1000442d:	56                   	push   esi
1000442e:	e8 fc ff ff ff       	call   1000442f <PS2Keyboard::handler()+0x505>	1000442f: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10004433:	eb 45                	jmp    1000447a <PS2Keyboard::handler()+0x550>
10004435:	0f b6 c0             	movzx  eax,al
10004438:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
1000443e:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
10004445:	74 16                	je     1000445d <PS2Keyboard::handler()+0x533>
10004447:	84 c9                	test   cl,cl
10004449:	74 09                	je     10004454 <PS2Keyboard::handler()+0x52a>
1000444b:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000444e: R_386_32	PS2Keyboard::internalMapCapUpper
10004452:	eb 1d                	jmp    10004471 <PS2Keyboard::handler()+0x547>
10004454:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004457: R_386_32	PS2Keyboard::internalMapperUpper
1000445b:	eb 14                	jmp    10004471 <PS2Keyboard::handler()+0x547>
1000445d:	84 c9                	test   cl,cl
1000445f:	74 09                	je     1000446a <PS2Keyboard::handler()+0x540>
10004461:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004464: R_386_32	PS2Keyboard::internalMapCapLower
10004468:	eb 07                	jmp    10004471 <PS2Keyboard::handler()+0x547>
1000446a:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000446d: R_386_32	PS2Keyboard::internalMapperLower
10004471:	51                   	push   ecx
10004472:	52                   	push   edx
10004473:	50                   	push   eax
10004474:	56                   	push   esi
10004475:	e8 fc ff ff ff       	call   10004476 <PS2Keyboard::handler()+0x54c>	10004476: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
1000447a:	83 c4 10             	add    esp,0x10
1000447d:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10004484:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
1000448b:	e9 d5 01 00 00       	jmp    10004665 <PS2Keyboard::handler()+0x73b>
10004490:	80 fa 35             	cmp    dl,0x35
10004493:	0f 84 98 fb ff ff    	je     10004031 <PS2Keyboard::handler()+0x107>
10004499:	eb e2                	jmp    1000447d <PS2Keyboard::handler()+0x553>
1000449b:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
100044a2:	80 fa 0e             	cmp    dl,0xe
100044a5:	75 07                	jne    100044ae <PS2Keyboard::handler()+0x584>
100044a7:	50                   	push   eax
100044a8:	51                   	push   ecx
100044a9:	e9 40 fd ff ff       	jmp    100041ee <PS2Keyboard::handler()+0x2c4>
100044ae:	80 fa 0f             	cmp    dl,0xf
100044b1:	75 07                	jne    100044ba <PS2Keyboard::handler()+0x590>
100044b3:	57                   	push   edi
100044b4:	51                   	push   ecx
100044b5:	e9 41 fd ff ff       	jmp    100041fb <PS2Keyboard::handler()+0x2d1>
100044ba:	80 fa 3a             	cmp    dl,0x3a
100044bd:	75 07                	jne    100044c6 <PS2Keyboard::handler()+0x59c>
100044bf:	84 c9                	test   cl,cl
100044c1:	e9 42 fd ff ff       	jmp    10004208 <PS2Keyboard::handler()+0x2de>
100044c6:	80 fa 45             	cmp    dl,0x45
100044c9:	75 07                	jne    100044d2 <PS2Keyboard::handler()+0x5a8>
100044cb:	84 c9                	test   cl,cl
100044cd:	e9 64 fd ff ff       	jmp    10004236 <PS2Keyboard::handler()+0x30c>
100044d2:	80 fa 46             	cmp    dl,0x46
100044d5:	75 07                	jne    100044de <PS2Keyboard::handler()+0x5b4>
100044d7:	84 c9                	test   cl,cl
100044d9:	e9 86 fd ff ff       	jmp    10004264 <PS2Keyboard::handler()+0x33a>
100044de:	80 fa 3b             	cmp    dl,0x3b
100044e1:	75 07                	jne    100044ea <PS2Keyboard::handler()+0x5c0>
100044e3:	53                   	push   ebx
100044e4:	51                   	push   ecx
100044e5:	e9 a8 fd ff ff       	jmp    10004292 <PS2Keyboard::handler()+0x368>
100044ea:	80 fa 3c             	cmp    dl,0x3c
100044ed:	75 07                	jne    100044f6 <PS2Keyboard::handler()+0x5cc>
100044ef:	52                   	push   edx
100044f0:	51                   	push   ecx
100044f1:	e9 ac fd ff ff       	jmp    100042a2 <PS2Keyboard::handler()+0x378>
100044f6:	80 fa 3d             	cmp    dl,0x3d
100044f9:	75 07                	jne    10004502 <PS2Keyboard::handler()+0x5d8>
100044fb:	50                   	push   eax
100044fc:	51                   	push   ecx
100044fd:	e9 b0 fd ff ff       	jmp    100042b2 <PS2Keyboard::handler()+0x388>
10004502:	80 fa 3e             	cmp    dl,0x3e
10004505:	75 07                	jne    1000450e <PS2Keyboard::handler()+0x5e4>
10004507:	50                   	push   eax
10004508:	51                   	push   ecx
10004509:	e9 b4 fd ff ff       	jmp    100042c2 <PS2Keyboard::handler()+0x398>
1000450e:	80 fa 3f             	cmp    dl,0x3f
10004511:	75 07                	jne    1000451a <PS2Keyboard::handler()+0x5f0>
10004513:	50                   	push   eax
10004514:	51                   	push   ecx
10004515:	e9 b8 fd ff ff       	jmp    100042d2 <PS2Keyboard::handler()+0x3a8>
1000451a:	80 fa 40             	cmp    dl,0x40
1000451d:	75 07                	jne    10004526 <PS2Keyboard::handler()+0x5fc>
1000451f:	50                   	push   eax
10004520:	51                   	push   ecx
10004521:	e9 bc fd ff ff       	jmp    100042e2 <PS2Keyboard::handler()+0x3b8>
10004526:	80 fa 41             	cmp    dl,0x41
10004529:	75 07                	jne    10004532 <PS2Keyboard::handler()+0x608>
1000452b:	50                   	push   eax
1000452c:	51                   	push   ecx
1000452d:	e9 c4 fd ff ff       	jmp    100042f6 <PS2Keyboard::handler()+0x3cc>
10004532:	80 fa 42             	cmp    dl,0x42
10004535:	75 07                	jne    1000453e <PS2Keyboard::handler()+0x614>
10004537:	50                   	push   eax
10004538:	51                   	push   ecx
10004539:	e9 c8 fd ff ff       	jmp    10004306 <PS2Keyboard::handler()+0x3dc>
1000453e:	80 fa 43             	cmp    dl,0x43
10004541:	75 07                	jne    1000454a <PS2Keyboard::handler()+0x620>
10004543:	57                   	push   edi
10004544:	51                   	push   ecx
10004545:	e9 cc fd ff ff       	jmp    10004316 <PS2Keyboard::handler()+0x3ec>
1000454a:	80 fa 44             	cmp    dl,0x44
1000454d:	75 07                	jne    10004556 <PS2Keyboard::handler()+0x62c>
1000454f:	53                   	push   ebx
10004550:	51                   	push   ecx
10004551:	e9 d0 fd ff ff       	jmp    10004326 <PS2Keyboard::handler()+0x3fc>
10004556:	84 d2                	test   dl,dl
10004558:	75 07                	jne    10004561 <PS2Keyboard::handler()+0x637>
1000455a:	52                   	push   edx
1000455b:	51                   	push   ecx
1000455c:	e9 d5 fd ff ff       	jmp    10004336 <PS2Keyboard::handler()+0x40c>
10004561:	80 fa 1c             	cmp    dl,0x1c
10004564:	75 07                	jne    1000456d <PS2Keyboard::handler()+0x643>
10004566:	50                   	push   eax
10004567:	51                   	push   ecx
10004568:	e9 e9 fd ff ff       	jmp    10004356 <PS2Keyboard::handler()+0x42c>
1000456d:	80 fa 01             	cmp    dl,0x1
10004570:	75 07                	jne    10004579 <PS2Keyboard::handler()+0x64f>
10004572:	50                   	push   eax
10004573:	51                   	push   ecx
10004574:	e9 ea fd ff ff       	jmp    10004363 <PS2Keyboard::handler()+0x439>
10004579:	80 fa 52             	cmp    dl,0x52
1000457c:	75 07                	jne    10004585 <PS2Keyboard::handler()+0x65b>
1000457e:	50                   	push   eax
1000457f:	51                   	push   ecx
10004580:	e9 ee fd ff ff       	jmp    10004373 <PS2Keyboard::handler()+0x449>
10004585:	80 fa 4f             	cmp    dl,0x4f
10004588:	75 07                	jne    10004591 <PS2Keyboard::handler()+0x667>
1000458a:	50                   	push   eax
1000458b:	51                   	push   ecx
1000458c:	e9 f2 fd ff ff       	jmp    10004383 <PS2Keyboard::handler()+0x459>
10004591:	80 fa 50             	cmp    dl,0x50
10004594:	75 07                	jne    1000459d <PS2Keyboard::handler()+0x673>
10004596:	50                   	push   eax
10004597:	51                   	push   ecx
10004598:	e9 f6 fd ff ff       	jmp    10004393 <PS2Keyboard::handler()+0x469>
1000459d:	80 fa 51             	cmp    dl,0x51
100045a0:	75 07                	jne    100045a9 <PS2Keyboard::handler()+0x67f>
100045a2:	50                   	push   eax
100045a3:	51                   	push   ecx
100045a4:	e9 fa fd ff ff       	jmp    100043a3 <PS2Keyboard::handler()+0x479>
100045a9:	80 fa 4b             	cmp    dl,0x4b
100045ac:	75 07                	jne    100045b5 <PS2Keyboard::handler()+0x68b>
100045ae:	57                   	push   edi
100045af:	51                   	push   ecx
100045b0:	e9 fe fd ff ff       	jmp    100043b3 <PS2Keyboard::handler()+0x489>
100045b5:	80 fa 4c             	cmp    dl,0x4c
100045b8:	75 07                	jne    100045c1 <PS2Keyboard::handler()+0x697>
100045ba:	53                   	push   ebx
100045bb:	51                   	push   ecx
100045bc:	e9 ff fd ff ff       	jmp    100043c0 <PS2Keyboard::handler()+0x496>
100045c1:	80 fa 4d             	cmp    dl,0x4d
100045c4:	75 07                	jne    100045cd <PS2Keyboard::handler()+0x6a3>
100045c6:	52                   	push   edx
100045c7:	51                   	push   ecx
100045c8:	e9 00 fe ff ff       	jmp    100043cd <PS2Keyboard::handler()+0x4a3>
100045cd:	80 fa 47             	cmp    dl,0x47
100045d0:	75 07                	jne    100045d9 <PS2Keyboard::handler()+0x6af>
100045d2:	50                   	push   eax
100045d3:	51                   	push   ecx
100045d4:	e9 01 fe ff ff       	jmp    100043da <PS2Keyboard::handler()+0x4b0>
100045d9:	80 fa 48             	cmp    dl,0x48
100045dc:	75 07                	jne    100045e5 <PS2Keyboard::handler()+0x6bb>
100045de:	50                   	push   eax
100045df:	51                   	push   ecx
100045e0:	e9 02 fe ff ff       	jmp    100043e7 <PS2Keyboard::handler()+0x4bd>
100045e5:	80 fa 49             	cmp    dl,0x49
100045e8:	75 07                	jne    100045f1 <PS2Keyboard::handler()+0x6c7>
100045ea:	50                   	push   eax
100045eb:	51                   	push   ecx
100045ec:	e9 03 fe ff ff       	jmp    100043f4 <PS2Keyboard::handler()+0x4ca>
100045f1:	80 fa 53             	cmp    dl,0x53
100045f4:	75 07                	jne    100045fd <PS2Keyboard::handler()+0x6d3>
100045f6:	50                   	push   eax
100045f7:	51                   	push   ecx
100045f8:	e9 04 fe ff ff       	jmp    10004401 <PS2Keyboard::handler()+0x4d7>
100045fd:	80 fa 4a             	cmp    dl,0x4a
10004600:	75 07                	jne    10004609 <PS2Keyboard::handler()+0x6df>
10004602:	50                   	push   eax
10004603:	51                   	push   ecx
10004604:	e9 05 fe ff ff       	jmp    1000440e <PS2Keyboard::handler()+0x4e4>
10004609:	80 fa 4e             	cmp    dl,0x4e
1000460c:	75 07                	jne    10004615 <PS2Keyboard::handler()+0x6eb>
1000460e:	50                   	push   eax
1000460f:	51                   	push   ecx
10004610:	e9 06 fe ff ff       	jmp    1000441b <PS2Keyboard::handler()+0x4f1>
10004615:	80 fa 37             	cmp    dl,0x37
10004618:	75 07                	jne    10004621 <PS2Keyboard::handler()+0x6f7>
1000461a:	57                   	push   edi
1000461b:	51                   	push   ecx
1000461c:	e9 07 fe ff ff       	jmp    10004428 <PS2Keyboard::handler()+0x4fe>
10004621:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
10004628:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
1000462f:	c1 e7 07             	shl    edi,0x7
10004632:	c1 e0 08             	shl    eax,0x8
10004635:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	10004638: R_386_32	PS2Keyboard::internalMapperLowerBad
1000463c:	88 d0                	mov    al,dl
1000463e:	89 fb                	mov    ebx,edi
10004640:	d7                   	xlat   BYTE PTR ds:[ebx]
10004641:	88 c2                	mov    dl,al
10004643:	0f b6 d2             	movzx  edx,dl
10004646:	53                   	push   ebx
10004647:	51                   	push   ecx
10004648:	52                   	push   edx
10004649:	e9 26 fe ff ff       	jmp    10004474 <PS2Keyboard::handler()+0x54a>
1000464e:	80 fa 36             	cmp    dl,0x36
10004651:	0f 84 26 f9 ff ff    	je     10003f7d <PS2Keyboard::handler()+0x53>
10004657:	80 fa 38             	cmp    dl,0x38
1000465a:	0f 84 7f f9 ff ff    	je     10003fdf <PS2Keyboard::handler()+0xb5>
10004660:	e9 5f fa ff ff       	jmp    100040c4 <PS2Keyboard::handler()+0x19a>
10004665:	5b                   	pop    ebx
10004666:	5e                   	pop    esi
10004667:	5f                   	pop    edi
10004668:	c3                   	ret    
10004669:	90                   	nop

1000466a <PS2Keyboard::open(int, int, void*)>:
1000466a:	53                   	push   ebx
1000466b:	83 ec 14             	sub    esp,0x14
1000466e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004672:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10004678:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
1000467e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004682:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10004688:	53                   	push   ebx
10004689:	6a 01                	push   0x1
1000468b:	68 00 00 00 00       	push   0x0	1000468c: R_386_32	ps2KeyboardHandler(regs*, void*)
10004690:	6a 01                	push   0x1
10004692:	53                   	push   ebx
10004693:	e8 fc ff ff ff       	call   10004694 <PS2Keyboard::open(int, int, void*)+0x2a>	10004694: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004698:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
1000469e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000469f: R_386_32	sysBootSettings
100046a3:	c1 e8 02             	shr    eax,0x2
100046a6:	83 f0 01             	xor    eax,0x1
100046a9:	83 e0 01             	and    eax,0x1
100046ac:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
100046b2:	31 c0                	xor    eax,eax
100046b4:	83 c4 28             	add    esp,0x28
100046b7:	5b                   	pop    ebx
100046b8:	c3                   	ret    
100046b9:	90                   	nop

100046ba <PS2Keyboard::close(int, int, void*)>:
100046ba:	83 c8 ff             	or     eax,0xffffffff
100046bd:	c3                   	ret    

100046be <PS2Mouse::PS2Mouse()>:
100046be:	55                   	push   ebp
100046bf:	89 e5                	mov    ebp,esp
100046c1:	83 ec 08             	sub    esp,0x8
100046c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046c7:	83 ec 08             	sub    esp,0x8
100046ca:	68 00 00 00 00       	push   0x0	100046cb: R_386_32	ps2mousename
100046cf:	50                   	push   eax
100046d0:	e8 fc ff ff ff       	call   100046d1 <PS2Mouse::PS2Mouse()+0x13>	100046d1: R_386_PC32	Mouse::Mouse(char const*)
100046d5:	83 c4 10             	add    esp,0x10
100046d8:	ba 08 00 00 00       	mov    edx,0x8	100046d9: R_386_32	vtable for PS2Mouse
100046dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046e0:	89 10                	mov    DWORD PTR [eax],edx
100046e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046e5:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100046ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046ef:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
100046f9:	90                   	nop
100046fa:	c9                   	leave  
100046fb:	c3                   	ret    

100046fc <ps2MouseHandler(regs*, void*)>:
100046fc:	55                   	push   ebp
100046fd:	89 e5                	mov    ebp,esp
100046ff:	83 ec 08             	sub    esp,0x8
10004702:	83 ec 0c             	sub    esp,0xc
10004705:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004708:	e8 fc ff ff ff       	call   10004709 <ps2MouseHandler(regs*, void*)+0xd>	10004709: R_386_PC32	PS2Mouse::handler()
1000470d:	83 c4 10             	add    esp,0x10
10004710:	90                   	nop
10004711:	c9                   	leave  
10004712:	c3                   	ret    
10004713:	90                   	nop

10004714 <PS2Mouse::handler()>:
10004714:	55                   	push   ebp
10004715:	89 e5                	mov    ebp,esp
10004717:	83 ec 28             	sub    esp,0x28
1000471a:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
10004720:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
10004724:	89 c2                	mov    edx,eax
10004726:	ec                   	in     al,dx
10004727:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
1000472a:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
1000472d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10004730:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10004734:	83 e0 01             	and    eax,0x1
10004737:	85 c0                	test   eax,eax
10004739:	0f 84 8d 01 00 00    	je     100048cc <PS2Mouse::handler()+0x1b8>
1000473f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10004743:	83 e0 20             	and    eax,0x20
10004746:	85 c0                	test   eax,eax
10004748:	0f 84 81 01 00 00    	je     100048cf <PS2Mouse::handler()+0x1bb>
1000474e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004751:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004757:	8d 50 01             	lea    edx,[eax+0x1]
1000475a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000475d:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
10004763:	0f b6 c8             	movzx  ecx,al
10004766:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
1000476c:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10004770:	89 c2                	mov    edx,eax
10004772:	ec                   	in     al,dx
10004773:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10004776:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10004779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000477c:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
10004783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004786:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000478c:	0f b6 c0             	movzx  eax,al
1000478f:	83 e0 08             	and    eax,0x8
10004792:	85 c0                	test   eax,eax
10004794:	75 0f                	jne    100047a5 <PS2Mouse::handler()+0x91>
10004796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004799:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100047a0:	e9 2b 01 00 00       	jmp    100048d0 <PS2Mouse::handler()+0x1bc>
100047a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047a8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100047ae:	84 c0                	test   al,al
100047b0:	75 0d                	jne    100047bf <PS2Mouse::handler()+0xab>
100047b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047b5:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100047bb:	3c 02                	cmp    al,0x2
100047bd:	77 2f                	ja     100047ee <PS2Mouse::handler()+0xda>
100047bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047c2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100047c8:	3c 03                	cmp    al,0x3
100047ca:	74 11                	je     100047dd <PS2Mouse::handler()+0xc9>
100047cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047cf:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100047d5:	3c 04                	cmp    al,0x4
100047d7:	0f 85 f3 00 00 00    	jne    100048d0 <PS2Mouse::handler()+0x1bc>
100047dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047e0:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100047e6:	3c 03                	cmp    al,0x3
100047e8:	0f 86 e2 00 00 00    	jbe    100048d0 <PS2Mouse::handler()+0x1bc>
100047ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047f1:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100047f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047fb:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004801:	84 c0                	test   al,al
10004803:	78 13                	js     10004818 <PS2Mouse::handler()+0x104>
10004805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004808:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000480e:	0f b6 c0             	movzx  eax,al
10004811:	83 e0 40             	and    eax,0x40
10004814:	85 c0                	test   eax,eax
10004816:	74 37                	je     1000484f <PS2Mouse::handler()+0x13b>
10004818:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000481b:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004825:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
1000482c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000482f:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
10004836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004839:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10004840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004843:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
1000484a:	e9 81 00 00 00       	jmp    100048d0 <PS2Mouse::handler()+0x1bc>
1000484f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004852:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10004858:	0f b6 d0             	movzx  edx,al
1000485b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000485e:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004864:	0f b6 c0             	movzx  eax,al
10004867:	c1 e0 04             	shl    eax,0x4
1000486a:	25 00 01 00 00       	and    eax,0x100
1000486f:	29 c2                	sub    edx,eax
10004871:	89 d0                	mov    eax,edx
10004873:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004879:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000487f:	0f b6 c0             	movzx  eax,al
10004882:	c1 e0 03             	shl    eax,0x3
10004885:	25 00 01 00 00       	and    eax,0x100
1000488a:	89 c2                	mov    edx,eax
1000488c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000488f:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
10004895:	0f b6 c0             	movzx  eax,al
10004898:	29 c2                	sub    edx,eax
1000489a:	89 d0                	mov    eax,edx
1000489c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000489f:	a1 00 00 00 00       	mov    eax,ds:0x0	100048a0: R_386_32	guiMouseHandler
100048a4:	85 c0                	test   eax,eax
100048a6:	74 28                	je     100048d0 <PS2Mouse::handler()+0x1bc>
100048a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100048a9: R_386_32	guiMouseHandler
100048ad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100048b0:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
100048b6:	0f b6 d2             	movzx  edx,dl
100048b9:	83 e2 03             	and    edx,0x3
100048bc:	6a 00                	push   0x0
100048be:	52                   	push   edx
100048bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100048c2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100048c5:	ff d0                	call   eax
100048c7:	83 c4 10             	add    esp,0x10
100048ca:	eb 04                	jmp    100048d0 <PS2Mouse::handler()+0x1bc>
100048cc:	90                   	nop
100048cd:	eb 01                	jmp    100048d0 <PS2Mouse::handler()+0x1bc>
100048cf:	90                   	nop
100048d0:	c9                   	leave  
100048d1:	c3                   	ret    

100048d2 <PS2Mouse::open(int, int, void*)>:
100048d2:	55                   	push   ebp
100048d3:	89 e5                	mov    ebp,esp
100048d5:	83 ec 08             	sub    esp,0x8
100048d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048db:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
100048e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048e4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100048ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048ed:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100048f0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100048f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100048ff:	83 ec 08             	sub    esp,0x8
10004902:	68 f6 00 00 00       	push   0xf6
10004907:	50                   	push   eax
10004908:	e8 fc ff ff ff       	call   10004909 <PS2Mouse::open(int, int, void*)+0x37>	10004909: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000490d:	83 c4 10             	add    esp,0x10
10004910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004913:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004919:	83 ec 0c             	sub    esp,0xc
1000491c:	50                   	push   eax
1000491d:	e8 fc ff ff ff       	call   1000491e <PS2Mouse::open(int, int, void*)+0x4c>	1000491e: R_386_PC32	PS2Port::deviceRead()
10004922:	83 c4 10             	add    esp,0x10
10004925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004928:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000492e:	83 ec 08             	sub    esp,0x8
10004931:	68 f4 00 00 00       	push   0xf4
10004936:	50                   	push   eax
10004937:	e8 fc ff ff ff       	call   10004938 <PS2Mouse::open(int, int, void*)+0x66>	10004938: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000493c:	83 c4 10             	add    esp,0x10
1000493f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004942:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004948:	83 ec 0c             	sub    esp,0xc
1000494b:	50                   	push   eax
1000494c:	e8 fc ff ff ff       	call   1000494d <PS2Mouse::open(int, int, void*)+0x7b>	1000494d: R_386_PC32	PS2Port::deviceRead()
10004951:	83 c4 10             	add    esp,0x10
10004954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004957:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000495e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004961:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10004968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000496b:	83 ec 0c             	sub    esp,0xc
1000496e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004971:	6a 01                	push   0x1
10004973:	68 00 00 00 00       	push   0x0	10004974: R_386_32	ps2MouseHandler(regs*, void*)
10004978:	6a 0c                	push   0xc
1000497a:	50                   	push   eax
1000497b:	e8 fc ff ff ff       	call   1000497c <PS2Mouse::open(int, int, void*)+0xaa>	1000497c: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004980:	83 c4 20             	add    esp,0x20
10004983:	b8 00 00 00 00       	mov    eax,0x0
10004988:	c9                   	leave  
10004989:	c3                   	ret    

1000498a <PS2Mouse::close(int, int, void*)>:
1000498a:	b8 00 00 00 00       	mov    eax,0x0
1000498f:	c3                   	ret    

10004990 <PS2Mouse::detect()>:
10004990:	90                   	nop
10004991:	c3                   	ret    

10004992 <PS2Port::PS2Port()>:
10004992:	55                   	push   ebp
10004993:	89 e5                	mov    ebp,esp
10004995:	83 ec 08             	sub    esp,0x8
10004998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000499b:	83 ec 08             	sub    esp,0x8
1000499e:	68 00 00 00 00       	push   0x0	1000499f: R_386_32	ps2portname
100049a3:	50                   	push   eax
100049a4:	e8 fc ff ff ff       	call   100049a5 <PS2Port::PS2Port()+0x13>	100049a5: R_386_PC32	Bus::Bus(char const*)
100049a9:	83 c4 10             	add    esp,0x10
100049ac:	ba 08 00 00 00       	mov    edx,0x8	100049ad: R_386_32	vtable for PS2Port
100049b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049b4:	89 10                	mov    DWORD PTR [eax],edx
100049b6:	90                   	nop
100049b7:	c9                   	leave  
100049b8:	c3                   	ret    
100049b9:	90                   	nop

100049ba <PS2Port::open(int, int, void*)>:
100049ba:	55                   	push   ebp
100049bb:	89 e5                	mov    ebp,esp
100049bd:	83 ec 08             	sub    esp,0x8
100049c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100049c6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100049cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049cf:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100049d2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100049d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049db:	8b 00                	mov    eax,DWORD PTR [eax]
100049dd:	83 c0 18             	add    eax,0x18
100049e0:	8b 00                	mov    eax,DWORD PTR [eax]
100049e2:	83 ec 0c             	sub    esp,0xc
100049e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100049e8:	ff d0                	call   eax
100049ea:	83 c4 10             	add    esp,0x10
100049ed:	b8 00 00 00 00       	mov    eax,0x0
100049f2:	c9                   	leave  
100049f3:	c3                   	ret    

100049f4 <PS2Port::close(int, int, void*)>:
100049f4:	b8 00 00 00 00       	mov    eax,0x0
100049f9:	c3                   	ret    

100049fa <PS2Port::detect()>:
100049fa:	55                   	push   ebp
100049fb:	89 e5                	mov    ebp,esp
100049fd:	53                   	push   ebx
100049fe:	83 ec 14             	sub    esp,0x14
10004a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004a0a:	85 c0                	test   eax,eax
10004a0c:	75 5a                	jne    10004a68 <PS2Port::detect()+0x6e>
10004a0e:	c7 45 ec 70 01 00 00 	mov    DWORD PTR [ebp-0x14],0x170
10004a15:	83 ec 0c             	sub    esp,0xc
10004a18:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10004a1b:	e8 fc ff ff ff       	call   10004a1c <PS2Port::detect()+0x22>	10004a1c: R_386_PC32	malloc
10004a20:	83 c4 10             	add    esp,0x10
10004a23:	89 c3                	mov    ebx,eax
10004a25:	83 ec 0c             	sub    esp,0xc
10004a28:	53                   	push   ebx
10004a29:	e8 fc ff ff ff       	call   10004a2a <PS2Port::detect()+0x30>	10004a2a: R_386_PC32	PS2Keyboard::PS2Keyboard()
10004a2e:	83 c4 10             	add    esp,0x10
10004a31:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10004a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a37:	83 ec 08             	sub    esp,0x8
10004a3a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10004a3d:	50                   	push   eax
10004a3e:	e8 fc ff ff ff       	call   10004a3f <PS2Port::detect()+0x45>	10004a3f: R_386_PC32	Device::addChild(Device*)
10004a43:	83 c4 10             	add    esp,0x10
10004a46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004a49:	8b 00                	mov    eax,DWORD PTR [eax]
10004a4b:	83 c0 08             	add    eax,0x8
10004a4e:	8b 00                	mov    eax,DWORD PTR [eax]
10004a50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004a53:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004a59:	52                   	push   edx
10004a5a:	6a 00                	push   0x0
10004a5c:	6a 00                	push   0x0
10004a5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10004a61:	ff d0                	call   eax
10004a63:	83 c4 10             	add    esp,0x10
10004a66:	eb 66                	jmp    10004ace <PS2Port::detect()+0xd4>
10004a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004a71:	83 f8 01             	cmp    eax,0x1
10004a74:	75 58                	jne    10004ace <PS2Port::detect()+0xd4>
10004a76:	c7 45 e8 68 01 00 00 	mov    DWORD PTR [ebp-0x18],0x168
10004a7d:	83 ec 0c             	sub    esp,0xc
10004a80:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10004a83:	e8 fc ff ff ff       	call   10004a84 <PS2Port::detect()+0x8a>	10004a84: R_386_PC32	malloc
10004a88:	83 c4 10             	add    esp,0x10
10004a8b:	89 c3                	mov    ebx,eax
10004a8d:	83 ec 0c             	sub    esp,0xc
10004a90:	53                   	push   ebx
10004a91:	e8 fc ff ff ff       	call   10004a92 <PS2Port::detect()+0x98>	10004a92: R_386_PC32	PS2Mouse::PS2Mouse()
10004a96:	83 c4 10             	add    esp,0x10
10004a99:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10004a9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a9f:	83 ec 08             	sub    esp,0x8
10004aa2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004aa5:	50                   	push   eax
10004aa6:	e8 fc ff ff ff       	call   10004aa7 <PS2Port::detect()+0xad>	10004aa7: R_386_PC32	Device::addChild(Device*)
10004aab:	83 c4 10             	add    esp,0x10
10004aae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004ab1:	8b 00                	mov    eax,DWORD PTR [eax]
10004ab3:	83 c0 08             	add    eax,0x8
10004ab6:	8b 00                	mov    eax,DWORD PTR [eax]
10004ab8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004abb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004ac1:	52                   	push   edx
10004ac2:	6a 00                	push   0x0
10004ac4:	6a 01                	push   0x1
10004ac6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004ac9:	ff d0                	call   eax
10004acb:	83 c4 10             	add    esp,0x10
10004ace:	90                   	nop
10004acf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004ad2:	c9                   	leave  
10004ad3:	c3                   	ret    

10004ad4 <PS2Port::deviceWrite(unsigned char)>:
10004ad4:	55                   	push   ebp
10004ad5:	89 e5                	mov    ebp,esp
10004ad7:	83 ec 28             	sub    esp,0x28
10004ada:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004add:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10004ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ae3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004ae9:	83 f8 01             	cmp    eax,0x1
10004aec:	75 1a                	jne    10004b08 <PS2Port::deviceWrite(unsigned char)+0x34>
10004aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004af1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004af7:	83 ec 08             	sub    esp,0x8
10004afa:	68 d4 00 00 00       	push   0xd4
10004aff:	50                   	push   eax
10004b00:	e8 fc ff ff ff       	call   10004b01 <PS2Port::deviceWrite(unsigned char)+0x2d>	10004b01: R_386_PC32	PS2::controllerWrite(unsigned char)
10004b05:	83 c4 10             	add    esp,0x10
10004b08:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004b0f:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10004b15:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004b18:	89 c2                	mov    edx,eax
10004b1a:	ec                   	in     al,dx
10004b1b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10004b1e:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10004b21:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10004b24:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004b28:	83 e0 02             	and    eax,0x2
10004b2b:	85 c0                	test   eax,eax
10004b2d:	74 29                	je     10004b58 <PS2Port::deviceWrite(unsigned char)+0x84>
10004b2f:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004b33:	83 e0 40             	and    eax,0x40
10004b36:	85 c0                	test   eax,eax
10004b38:	75 22                	jne    10004b5c <PS2Port::deviceWrite(unsigned char)+0x88>
10004b3a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10004b3d:	84 c0                	test   al,al
10004b3f:	78 1b                	js     10004b5c <PS2Port::deviceWrite(unsigned char)+0x88>
10004b41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004b44:	8d 50 01             	lea    edx,[eax+0x1]
10004b47:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10004b4a:	3d 40 06 00 00       	cmp    eax,0x640
10004b4f:	0f 94 c0             	sete   al
10004b52:	84 c0                	test   al,al
10004b54:	75 05                	jne    10004b5b <PS2Port::deviceWrite(unsigned char)+0x87>
10004b56:	eb b7                	jmp    10004b0f <PS2Port::deviceWrite(unsigned char)+0x3b>
10004b58:	90                   	nop
10004b59:	eb 01                	jmp    10004b5c <PS2Port::deviceWrite(unsigned char)+0x88>
10004b5b:	90                   	nop
10004b5c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10004b60:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10004b66:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10004b69:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10004b6c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10004b6f:	ee                   	out    dx,al
10004b70:	b0 01                	mov    al,0x1
10004b72:	c9                   	leave  
10004b73:	c3                   	ret    

10004b74 <PS2Port::deviceRead()>:
10004b74:	55                   	push   ebp
10004b75:	89 e5                	mov    ebp,esp
10004b77:	83 ec 08             	sub    esp,0x8
10004b7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b7d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004b83:	83 ec 0c             	sub    esp,0xc
10004b86:	50                   	push   eax
10004b87:	e8 fc ff ff ff       	call   10004b88 <PS2Port::deviceRead()+0x14>	10004b88: R_386_PC32	PS2::controllerRead()
10004b8c:	83 c4 10             	add    esp,0x10
10004b8f:	c9                   	leave  
10004b90:	c3                   	ret    
10004b91:	90                   	nop

10004b92 <sb16Demo(void*)>:
10004b92:	55                   	push   ebp
10004b93:	57                   	push   edi
10004b94:	56                   	push   esi
10004b95:	53                   	push   ebx
10004b96:	83 ec 2c             	sub    esp,0x2c
10004b99:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b9a: R_386_32	irqDisableCounter
10004b9e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10004ba2:	48                   	dec    eax
10004ba3:	a3 00 00 00 00       	mov    ds:0x0,eax	10004ba4: R_386_32	irqDisableCounter
10004ba8:	75 01                	jne    10004bab <sb16Demo(void*)+0x19>
10004baa:	fb                   	sti    
10004bab:	83 ec 0c             	sub    esp,0xc
10004bae:	6a 1c                	push   0x1c
10004bb0:	e8 fc ff ff ff       	call   10004bb1 <sb16Demo(void*)+0x1f>	10004bb1: R_386_PC32	malloc
10004bb5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
10004bbc:	89 c3                	mov    ebx,eax
10004bbe:	6a 02                	push   0x2
10004bc0:	6a 10                	push   0x10
10004bc2:	68 22 56 00 00       	push   0x5622
10004bc7:	50                   	push   eax
10004bc8:	e8 fc ff ff ff       	call   10004bc9 <sb16Demo(void*)+0x37>	10004bc9: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
10004bcd:	83 c4 14             	add    esp,0x14
10004bd0:	68 14 01 00 00       	push   0x114
10004bd5:	e8 fc ff ff ff       	call   10004bd6 <sb16Demo(void*)+0x44>	10004bd6: R_386_PC32	malloc
10004bda:	83 c4 0c             	add    esp,0xc
10004bdd:	89 c6                	mov    esi,eax
10004bdf:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004be1: R_386_32	kernelProcess
10004be5:	68 10 6b 00 10       	push   0x10006b10	10004be6: R_386_32	.text
10004bea:	50                   	push   eax
10004beb:	e8 fc ff ff ff       	call   10004bec <sb16Demo(void*)+0x5a>	10004bec: R_386_PC32	File::File(char const*, Process*)
10004bf0:	5d                   	pop    ebp
10004bf1:	31 ed                	xor    ebp,ebp
10004bf3:	58                   	pop    eax
10004bf4:	6a 01                	push   0x1
10004bf6:	56                   	push   esi
10004bf7:	e8 fc ff ff ff       	call   10004bf8 <sb16Demo(void*)+0x66>	10004bf8: R_386_PC32	File::open(FileOpenMode)
10004bfc:	83 c4 10             	add    esp,0x10
10004bff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10004c07:	8b 06                	mov    eax,DWORD PTR [esi]
10004c09:	83 ec 0c             	sub    esp,0xc
10004c0c:	8d 54 24 28          	lea    edx,[esp+0x28]
10004c10:	52                   	push   edx
10004c11:	68 00 00 00 00       	push   0x0	10004c12: R_386_32	buf
10004c16:	6a 00                	push   0x0
10004c18:	68 00 20 00 00       	push   0x2000
10004c1d:	56                   	push   esi
10004c1e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10004c21:	83 c4 20             	add    esp,0x20
10004c24:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10004c29:	74 04                	je     10004c2f <sb16Demo(void*)+0x9d>
10004c2b:	85 c0                	test   eax,eax
10004c2d:	74 60                	je     10004c8f <sb16Demo(void*)+0xfd>
10004c2f:	83 ec 0c             	sub    esp,0xc
10004c32:	68 2d 6b 00 10       	push   0x10006b2d	10004c33: R_386_32	.text
10004c37:	e8 fc ff ff ff       	call   10004c38 <sb16Demo(void*)+0xa6>	10004c38: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c3c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10004c43:	e8 fc ff ff ff       	call   10004c44 <sb16Demo(void*)+0xb2>	10004c44: R_386_PC32	terminateTask(int)
10004c48:	83 c4 3c             	add    esp,0x3c
10004c4b:	5b                   	pop    ebx
10004c4c:	5e                   	pop    esi
10004c4d:	5f                   	pop    edi
10004c4e:	5d                   	pop    ebp
10004c4f:	c3                   	ret    
10004c50:	83 ec 0c             	sub    esp,0xc
10004c53:	53                   	push   ebx
10004c54:	e8 fc ff ff ff       	call   10004c55 <sb16Demo(void*)+0xc3>	10004c55: R_386_PC32	SoundPort::getBufferUsed()
10004c59:	6b 54 24 2c 03       	imul   edx,DWORD PTR [esp+0x2c],0x3
10004c5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004c61:	01 d0                	add    eax,edx
10004c63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004c67:	e8 fc ff ff ff       	call   10004c68 <sb16Demo(void*)+0xd6>	10004c68: R_386_PC32	SoundPort::getBufferSize()
10004c6c:	83 c4 10             	add    esp,0x10
10004c6f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10004c73:	7c 20                	jl     10004c95 <sb16Demo(void*)+0x103>
10004c75:	fa                   	cli    
10004c76:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10004c78: R_386_32	irqDisableCounter
10004c7c:	e8 fc ff ff ff       	call   10004c7d <sb16Demo(void*)+0xeb>	10004c7d: R_386_PC32	schedule()
10004c81:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c82: R_386_32	irqDisableCounter
10004c86:	48                   	dec    eax
10004c87:	a3 00 00 00 00       	mov    ds:0x0,eax	10004c88: R_386_32	irqDisableCounter
10004c8c:	75 01                	jne    10004c8f <sb16Demo(void*)+0xfd>
10004c8e:	fb                   	sti    
10004c8f:	89 e8                	mov    eax,ebp
10004c91:	84 c0                	test   al,al
10004c93:	75 bb                	jne    10004c50 <sb16Demo(void*)+0xbe>
10004c95:	51                   	push   ecx
10004c96:	b9 02 00 00 00       	mov    ecx,0x2
10004c9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004c9f:	99                   	cdq    
10004ca0:	f7 f9                	idiv   ecx
10004ca2:	50                   	push   eax
10004ca3:	68 00 00 00 00       	push   0x0	10004ca4: R_386_32	buf
10004ca8:	53                   	push   ebx
10004ca9:	e8 fc ff ff ff       	call   10004caa <sb16Demo(void*)+0x118>	10004caa: R_386_PC32	SoundPort::buffer16(short*, int)
10004cae:	83 c4 10             	add    esp,0x10
10004cb1:	89 e8                	mov    eax,ebp
10004cb3:	84 c0                	test   al,al
10004cb5:	75 2b                	jne    10004ce2 <sb16Demo(void*)+0x150>
10004cb7:	6a 02                	push   0x2
10004cb9:	6a 10                	push   0x10
10004cbb:	68 22 56 00 00       	push   0x5622
10004cc0:	57                   	push   edi
10004cc1:	e8 fc ff ff ff       	call   10004cc2 <sb16Demo(void*)+0x130>	10004cc2: R_386_PC32	SoundCard::configureRates(int, int, int)
10004cc6:	58                   	pop    eax
10004cc7:	5a                   	pop    edx
10004cc8:	53                   	push   ebx
10004cc9:	57                   	push   edi
10004cca:	e8 fc ff ff ff       	call   10004ccb <sb16Demo(void*)+0x139>	10004ccb: R_386_PC32	SoundCard::addChannel(SoundPort*)
10004ccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004cd2:	e8 fc ff ff ff       	call   10004cd3 <sb16Demo(void*)+0x141>	10004cd3: R_386_PC32	SoundPort::unpause()
10004cd7:	8b 07                	mov    eax,DWORD PTR [edi]
10004cd9:	89 3c 24             	mov    DWORD PTR [esp],edi
10004cdc:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004cdf:	83 c4 10             	add    esp,0x10
10004ce2:	bd 01 00 00 00       	mov    ebp,0x1
10004ce7:	e9 13 ff ff ff       	jmp    10004bff <sb16Demo(void*)+0x6d>

10004cec <SoundBlaster16::resetDSP()>:
10004cec:	53                   	push   ebx
10004ced:	b0 01                	mov    al,0x1
10004cef:	83 ec 14             	sub    esp,0x14
10004cf2:	bb 26 02 00 00       	mov    ebx,0x226
10004cf7:	89 da                	mov    edx,ebx
10004cf9:	ee                   	out    dx,al
10004cfa:	6a 1e                	push   0x1e
10004cfc:	e8 fc ff ff ff       	call   10004cfd <SoundBlaster16::resetDSP()+0x11>	10004cfd: R_386_PC32	milliTenthSleep(unsigned int)
10004d01:	31 c0                	xor    eax,eax
10004d03:	89 da                	mov    edx,ebx
10004d05:	ee                   	out    dx,al
10004d06:	ba 2a 02 00 00       	mov    edx,0x22a
10004d0b:	ec                   	in     al,dx
10004d0c:	83 c4 10             	add    esp,0x10
10004d0f:	3c aa                	cmp    al,0xaa
10004d11:	75 25                	jne    10004d38 <SoundBlaster16::resetDSP()+0x4c>
10004d13:	b0 e1                	mov    al,0xe1
10004d15:	ba 2c 02 00 00       	mov    edx,0x22c
10004d1a:	ee                   	out    dx,al
10004d1b:	ba 2e 02 00 00       	mov    edx,0x22e
10004d20:	ec                   	in     al,dx
10004d21:	84 c0                	test   al,al
10004d23:	79 fb                	jns    10004d20 <SoundBlaster16::resetDSP()+0x34>
10004d25:	ba 2a 02 00 00       	mov    edx,0x22a
10004d2a:	ec                   	in     al,dx
10004d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004d2f:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10004d35:	ec                   	in     al,dx
10004d36:	eb 13                	jmp    10004d4b <SoundBlaster16::resetDSP()+0x5f>
10004d38:	0f b6 c0             	movzx  eax,al
10004d3b:	51                   	push   ecx
10004d3c:	51                   	push   ecx
10004d3d:	50                   	push   eax
10004d3e:	68 00 00 00 00       	push   0x0	10004d3f: R_386_32	badVer
10004d43:	e8 fc ff ff ff       	call   10004d44 <SoundBlaster16::resetDSP()+0x58>	10004d44: R_386_PC32	Dbg::kprintf(char const*, ...)
10004d48:	83 c4 10             	add    esp,0x10
10004d4b:	83 c4 08             	add    esp,0x8
10004d4e:	5b                   	pop    ebx
10004d4f:	c3                   	ret    

10004d50 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10004d50:	53                   	push   ebx
10004d51:	ba 2c 02 00 00       	mov    edx,0x22c
10004d56:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004d5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004d5e:	ec                   	in     al,dx
10004d5f:	84 c0                	test   al,al
10004d61:	78 fb                	js     10004d5e <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10004d63:	88 c8                	mov    al,cl
10004d65:	89 da                	mov    edx,ebx
10004d67:	ee                   	out    dx,al
10004d68:	5b                   	pop    ebx
10004d69:	c3                   	ret    

10004d6a <SoundBlaster16::turnSpeakerOn(bool)>:
10004d6a:	53                   	push   ebx
10004d6b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
10004d6f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10004d74:	75 54                	jne    10004dca <SoundBlaster16::turnSpeakerOn(bool)+0x60>
10004d76:	31 c0                	xor    eax,eax
10004d78:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004d7f:	0f 94 c0             	sete   al
10004d82:	8d 84 80 d0 00 00 00 	lea    eax,[eax+eax*4+0xd0]
10004d89:	50                   	push   eax
10004d8a:	68 2c 02 00 00       	push   0x22c
10004d8f:	53                   	push   ebx
10004d90:	e8 fc ff ff ff       	call   10004d91 <SoundBlaster16::turnSpeakerOn(bool)+0x27>	10004d91: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d95:	83 c4 0c             	add    esp,0xc
10004d98:	31 c0                	xor    eax,eax
10004d9a:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004da1:	0f 95 c0             	setne  al
10004da4:	05 d9 00 00 00       	add    eax,0xd9
10004da9:	50                   	push   eax
10004daa:	68 2c 02 00 00       	push   0x22c
10004daf:	53                   	push   ebx
10004db0:	e8 fc ff ff ff       	call   10004db1 <SoundBlaster16::turnSpeakerOn(bool)+0x47>	10004db1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004db5:	68 d3 00 00 00       	push   0xd3
10004dba:	68 2c 02 00 00       	push   0x22c
10004dbf:	53                   	push   ebx
10004dc0:	e8 fc ff ff ff       	call   10004dc1 <SoundBlaster16::turnSpeakerOn(bool)+0x57>	10004dc1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004dc5:	83 c4 18             	add    esp,0x18
10004dc8:	eb 13                	jmp    10004ddd <SoundBlaster16::turnSpeakerOn(bool)+0x73>
10004dca:	68 d1 00 00 00       	push   0xd1
10004dcf:	68 2c 02 00 00       	push   0x22c
10004dd4:	53                   	push   ebx
10004dd5:	e8 fc ff ff ff       	call   10004dd6 <SoundBlaster16::turnSpeakerOn(bool)+0x6c>	10004dd6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004dda:	83 c4 0c             	add    esp,0xc
10004ddd:	5b                   	pop    ebx
10004dde:	c3                   	ret    
10004ddf:	90                   	nop

10004de0 <SoundBlaster16::SoundBlaster16()>:
10004de0:	55                   	push   ebp
10004de1:	89 e5                	mov    ebp,esp
10004de3:	83 ec 08             	sub    esp,0x8
10004de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004de9:	83 ec 08             	sub    esp,0x8
10004dec:	68 43 6b 00 10       	push   0x10006b43	10004ded: R_386_32	.text
10004df1:	50                   	push   eax
10004df2:	e8 fc ff ff ff       	call   10004df3 <SoundBlaster16::SoundBlaster16()+0x13>	10004df3: R_386_PC32	SoundCard::SoundCard(char const*)
10004df7:	83 c4 10             	add    esp,0x10
10004dfa:	ba 08 00 00 00       	mov    edx,0x8	10004dfb: R_386_32	vtable for SoundBlaster16
10004dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e02:	89 10                	mov    DWORD PTR [eax],edx
10004e04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e07:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10004e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e11:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004e17:	0f b6 d0             	movzx  edx,al
10004e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e1d:	66 c7 44 90 04 20 02 	mov    WORD PTR [eax+edx*4+0x4],0x220
10004e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e27:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004e2d:	0f b6 d0             	movzx  edx,al
10004e30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e33:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10004e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004e41:	8d 50 01             	lea    edx,[eax+0x1]
10004e44:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10004e47:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10004e4d:	0f b6 d0             	movzx  edx,al
10004e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e53:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10004e57:	83 e1 3f             	and    ecx,0x3f
10004e5a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10004e5e:	90                   	nop
10004e5f:	c9                   	leave  
10004e60:	c3                   	ret    
10004e61:	90                   	nop

10004e62 <SoundBlaster16::handleIRQ()>:
10004e62:	53                   	push   ebx
10004e63:	83 ec 14             	sub    esp,0x14
10004e66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004e6a:	68 53 6b 00 10       	push   0x10006b53	10004e6b: R_386_32	.text
10004e6f:	e8 fc ff ff ff       	call   10004e70 <SoundBlaster16::handleIRQ()+0xe>	10004e70: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e74:	83 c4 10             	add    esp,0x10
10004e77:	ba 2e 02 00 00       	mov    edx,0x22e
10004e7c:	83 bb dc 01 00 00 08 	cmp    DWORD PTR [ebx+0x1dc],0x8
10004e83:	74 17                	je     10004e9c <SoundBlaster16::handleIRQ()+0x3a>
10004e85:	b0 82                	mov    al,0x82
10004e87:	ba 24 02 00 00       	mov    edx,0x224
10004e8c:	ee                   	out    dx,al
10004e8d:	ba 25 02 00 00       	mov    edx,0x225
10004e92:	ec                   	in     al,dx
10004e93:	a8 02                	test   al,0x2
10004e95:	74 06                	je     10004e9d <SoundBlaster16::handleIRQ()+0x3b>
10004e97:	ba 2f 02 00 00       	mov    edx,0x22f
10004e9c:	ec                   	in     al,dx
10004e9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004ea1:	83 c4 08             	add    esp,0x8
10004ea4:	5b                   	pop    ebx
10004ea5:	e9 d2 04 00 00       	jmp    1000537c <SoundBlaster16::onInterrupt()>

10004eaa <sb16Handler(regs*, void*)>:
10004eaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004eb2:	eb ae                	jmp    10004e62 <SoundBlaster16::handleIRQ()>

10004eb4 <SoundBlaster16::beginPlayback()>:
10004eb4:	57                   	push   edi
10004eb5:	56                   	push   esi
10004eb6:	53                   	push   ebx
10004eb7:	52                   	push   edx
10004eb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004ebc:	8b bb e4 01 00 00    	mov    edi,DWORD PTR [ebx+0x1e4]
10004ec2:	6a 01                	push   0x1
10004ec4:	53                   	push   ebx
10004ec5:	e8 fc ff ff ff       	call   10004ec6 <SoundBlaster16::beginPlayback()+0x12>	10004ec6: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004eca:	31 c0                	xor    eax,eax
10004ecc:	59                   	pop    ecx
10004ecd:	83 ff 02             	cmp    edi,0x2
10004ed0:	5e                   	pop    esi
10004ed1:	0f 94 c0             	sete   al
10004ed4:	c1 e0 05             	shl    eax,0x5
10004ed7:	89 c6                	mov    esi,eax
10004ed9:	83 ce 10             	or     esi,0x10
10004edc:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004ee3:	89 f0                	mov    eax,esi
10004ee5:	0f be f0             	movsx  esi,al
10004ee8:	75 7c                	jne    10004f66 <SoundBlaster16::beginPlayback()+0xb2>
10004eea:	6a 41                	push   0x41
10004eec:	68 2c 02 00 00       	push   0x22c
10004ef1:	53                   	push   ebx
10004ef2:	e8 fc ff ff ff       	call   10004ef3 <SoundBlaster16::beginPlayback()+0x3f>	10004ef3: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ef7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
10004efd:	0f b6 c4             	movzx  eax,ah
10004f00:	50                   	push   eax
10004f01:	68 2c 02 00 00       	push   0x22c
10004f06:	53                   	push   ebx
10004f07:	e8 fc ff ff ff       	call   10004f08 <SoundBlaster16::beginPlayback()+0x54>	10004f08: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f0c:	0f b6 83 e0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1e0]
10004f13:	50                   	push   eax
10004f14:	68 2c 02 00 00       	push   0x22c
10004f19:	53                   	push   ebx
10004f1a:	e8 fc ff ff ff       	call   10004f1b <SoundBlaster16::beginPlayback()+0x67>	10004f1b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f1f:	83 c4 24             	add    esp,0x24
10004f22:	68 b6 00 00 00       	push   0xb6
10004f27:	68 2c 02 00 00       	push   0x22c
10004f2c:	53                   	push   ebx
10004f2d:	e8 fc ff ff ff       	call   10004f2e <SoundBlaster16::beginPlayback()+0x7a>	10004f2e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f32:	56                   	push   esi
10004f33:	68 2c 02 00 00       	push   0x22c
10004f38:	53                   	push   ebx
10004f39:	e8 fc ff ff ff       	call   10004f3a <SoundBlaster16::beginPlayback()+0x86>	10004f3a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f3e:	68 ff 00 00 00       	push   0xff
10004f43:	68 2c 02 00 00       	push   0x22c
10004f48:	53                   	push   ebx
10004f49:	e8 fc ff ff ff       	call   10004f4a <SoundBlaster16::beginPlayback()+0x96>	10004f4a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f4e:	83 c4 24             	add    esp,0x24
10004f51:	6a 0f                	push   0xf
10004f53:	68 2c 02 00 00       	push   0x22c
10004f58:	53                   	push   ebx
10004f59:	e8 fc ff ff ff       	call   10004f5a <SoundBlaster16::beginPlayback()+0xa6>	10004f5a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f5e:	83 c4 0c             	add    esp,0xc
10004f61:	e9 c7 00 00 00       	jmp    1000502d <SoundBlaster16::beginPlayback()+0x179>
10004f66:	83 ff 02             	cmp    edi,0x2
10004f69:	74 05                	je     10004f70 <SoundBlaster16::beginPlayback()+0xbc>
10004f6b:	bf 01 00 00 00       	mov    edi,0x1
10004f70:	0f af bb e0 01 00 00 	imul   edi,DWORD PTR [ebx+0x1e0]
10004f77:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10004f7c:	99                   	cdq    
10004f7d:	f7 ff                	idiv   edi
10004f7f:	89 04 24             	mov    DWORD PTR [esp],eax
10004f82:	6a 40                	push   0x40
10004f84:	68 2c 02 00 00       	push   0x22c
10004f89:	53                   	push   ebx
10004f8a:	e8 fc ff ff ff       	call   10004f8b <SoundBlaster16::beginPlayback()+0xd7>	10004f8b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f8f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10004f94:	50                   	push   eax
10004f95:	68 2c 02 00 00       	push   0x22c
10004f9a:	53                   	push   ebx
10004f9b:	e8 fc ff ff ff       	call   10004f9c <SoundBlaster16::beginPlayback()+0xe8>	10004f9c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fa0:	83 c4 18             	add    esp,0x18
10004fa3:	31 c0                	xor    eax,eax
10004fa5:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004fac:	0f 95 c0             	setne  al
10004faf:	48                   	dec    eax
10004fb0:	83 e0 f0             	and    eax,0xfffffff0
10004fb3:	05 c0 00 00 00       	add    eax,0xc0
10004fb8:	50                   	push   eax
10004fb9:	68 2c 02 00 00       	push   0x22c
10004fbe:	53                   	push   ebx
10004fbf:	e8 fc ff ff ff       	call   10004fc0 <SoundBlaster16::beginPlayback()+0x10c>	10004fc0: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fc4:	56                   	push   esi
10004fc5:	68 2c 02 00 00       	push   0x22c
10004fca:	53                   	push   ebx
10004fcb:	e8 fc ff ff ff       	call   10004fcc <SoundBlaster16::beginPlayback()+0x118>	10004fcc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fd0:	68 ff 00 00 00       	push   0xff
10004fd5:	68 2c 02 00 00       	push   0x22c
10004fda:	53                   	push   ebx
10004fdb:	e8 fc ff ff ff       	call   10004fdc <SoundBlaster16::beginPlayback()+0x128>	10004fdc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fe0:	83 c4 24             	add    esp,0x24
10004fe3:	6a 1f                	push   0x1f
10004fe5:	68 2c 02 00 00       	push   0x22c
10004fea:	53                   	push   ebx
10004feb:	e8 fc ff ff ff       	call   10004fec <SoundBlaster16::beginPlayback()+0x138>	10004fec: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ff0:	6a 48                	push   0x48
10004ff2:	68 2c 02 00 00       	push   0x22c
10004ff7:	53                   	push   ebx
10004ff8:	e8 fc ff ff ff       	call   10004ff9 <SoundBlaster16::beginPlayback()+0x145>	10004ff9: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ffd:	68 ff 00 00 00       	push   0xff
10005002:	68 2c 02 00 00       	push   0x22c
10005007:	53                   	push   ebx
10005008:	e8 fc ff ff ff       	call   10005009 <SoundBlaster16::beginPlayback()+0x155>	10005009: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000500d:	83 c4 24             	add    esp,0x24
10005010:	6a 1f                	push   0x1f
10005012:	68 2c 02 00 00       	push   0x22c
10005017:	53                   	push   ebx
10005018:	e8 fc ff ff ff       	call   10005019 <SoundBlaster16::beginPlayback()+0x165>	10005019: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000501d:	6a 1c                	push   0x1c
1000501f:	68 2c 02 00 00       	push   0x22c
10005024:	53                   	push   ebx
10005025:	e8 fc ff ff ff       	call   10005026 <SoundBlaster16::beginPlayback()+0x172>	10005026: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000502a:	83 c4 18             	add    esp,0x18
1000502d:	58                   	pop    eax
1000502e:	5b                   	pop    ebx
1000502f:	5e                   	pop    esi
10005030:	5f                   	pop    edi
10005031:	c3                   	ret    

10005032 <SoundBlaster16::stopPlayback()>:
10005032:	6a 00                	push   0x0
10005034:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10005038:	e8 fc ff ff ff       	call   10005039 <SoundBlaster16::stopPlayback()+0x7>	10005039: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000503d:	58                   	pop    eax
1000503e:	5a                   	pop    edx
1000503f:	c3                   	ret    

10005040 <SoundBlaster16::open(int, int, void*)>:
10005040:	31 c0                	xor    eax,eax
10005042:	c3                   	ret    
10005043:	90                   	nop

10005044 <SoundBlaster16::_open(int, int, void*)>:
10005044:	56                   	push   esi
10005045:	be 25 02 00 00       	mov    esi,0x225
1000504a:	53                   	push   ebx
1000504b:	83 ec 14             	sub    esp,0x14
1000504e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10005052:	68 80 00 00 00       	push   0x80
10005057:	68 24 02 00 00       	push   0x224
1000505c:	53                   	push   ebx
1000505d:	e8 fc ff ff ff       	call   1000505e <SoundBlaster16::_open(int, int, void*)+0x1a>	1000505e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005062:	89 f2                	mov    edx,esi
10005064:	ec                   	in     al,dx
10005065:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
10005069:	68 80 00 00 00       	push   0x80
1000506e:	68 24 02 00 00       	push   0x224
10005073:	53                   	push   ebx
10005074:	e8 fc ff ff ff       	call   10005075 <SoundBlaster16::_open(int, int, void*)+0x31>	10005075: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005079:	83 c4 18             	add    esp,0x18
1000507c:	31 c0                	xor    eax,eax
1000507e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10005083:	0f 95 c0             	setne  al
10005086:	40                   	inc    eax
10005087:	50                   	push   eax
10005088:	68 25 02 00 00       	push   0x225
1000508d:	53                   	push   ebx
1000508e:	e8 fc ff ff ff       	call   1000508f <SoundBlaster16::_open(int, int, void*)+0x4b>	1000508f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005093:	68 80 00 00 00       	push   0x80
10005098:	68 24 02 00 00       	push   0x224
1000509d:	53                   	push   ebx
1000509e:	e8 fc ff ff ff       	call   1000509f <SoundBlaster16::_open(int, int, void*)+0x5b>	1000509f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100050a3:	89 f2                	mov    edx,esi
100050a5:	ec                   	in     al,dx
100050a6:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
100050aa:	83 c4 18             	add    esp,0x18
100050ad:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
100050b1:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
100050b5:	75 51                	jne    10005108 <SoundBlaster16::_open(int, int, void*)+0xc4>
100050b7:	68 81 00 00 00       	push   0x81
100050bc:	68 24 02 00 00       	push   0x224
100050c1:	53                   	push   ebx
100050c2:	e8 fc ff ff ff       	call   100050c3 <SoundBlaster16::_open(int, int, void*)+0x7f>	100050c3: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100050c7:	89 f2                	mov    edx,esi
100050c9:	ec                   	in     al,dx
100050ca:	83 e0 0a             	and    eax,0xa
100050cd:	3c 01                	cmp    al,0x1
100050cf:	19 c0                	sbb    eax,eax
100050d1:	83 e0 62             	and    eax,0x62
100050d4:	40                   	inc    eax
100050d5:	89 04 24             	mov    DWORD PTR [esp],eax
100050d8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100050da: R_386_32	isaDMAController
100050de:	e8 fc ff ff ff       	call   100050df <SoundBlaster16::_open(int, int, void*)+0x9b>	100050df: R_386_PC32	DMA::tryLockChannel(int)
100050e3:	83 c4 10             	add    esp,0x10
100050e6:	89 83 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],eax
100050ec:	85 c0                	test   eax,eax
100050ee:	75 3a                	jne    1000512a <SoundBlaster16::_open(int, int, void*)+0xe6>
100050f0:	83 ec 0c             	sub    esp,0xc
100050f3:	68 00 00 00 00       	push   0x0	100050f4: R_386_32	nodma
100050f8:	e8 fc ff ff ff       	call   100050f9 <SoundBlaster16::_open(int, int, void*)+0xb5>	100050f9: R_386_PC32	Dbg::kprintf(char const*, ...)
100050fd:	83 c4 10             	add    esp,0x10
10005100:	83 c8 ff             	or     eax,0xffffffff
10005103:	e9 6e 02 00 00       	jmp    10005376 <SoundBlaster16::_open(int, int, void*)+0x332>
10005108:	56                   	push   esi
10005109:	56                   	push   esi
1000510a:	6a 01                	push   0x1
1000510c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000510e: R_386_32	isaDMAController
10005112:	e8 fc ff ff ff       	call   10005113 <SoundBlaster16::_open(int, int, void*)+0xcf>	10005113: R_386_PC32	DMA::tryLockChannel(int)
10005117:	83 c4 10             	add    esp,0x10
1000511a:	89 83 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],eax
10005120:	85 c0                	test   eax,eax
10005122:	75 06                	jne    1000512a <SoundBlaster16::_open(int, int, void*)+0xe6>
10005124:	51                   	push   ecx
10005125:	51                   	push   ecx
10005126:	6a 03                	push   0x3
10005128:	eb ae                	jmp    100050d8 <SoundBlaster16::_open(int, int, void*)+0x94>
1000512a:	83 ec 0c             	sub    esp,0xc
1000512d:	68 5e 6b 00 10       	push   0x10006b5e	1000512e: R_386_32	.text
10005132:	e8 fc ff ff ff       	call   10005133 <SoundBlaster16::_open(int, int, void*)+0xef>	10005133: R_386_PC32	Dbg::kprintf(char const*, ...)
10005137:	58                   	pop    eax
10005138:	5a                   	pop    edx
10005139:	6a 05                	push   0x5
1000513b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000513d: R_386_32	isaDMAController
10005141:	e8 fc ff ff ff       	call   10005142 <SoundBlaster16::_open(int, int, void*)+0xfe>	10005142: R_386_PC32	DMA::tryLockChannel(int)
10005146:	83 c4 10             	add    esp,0x10
10005149:	89 83 ec 01 00 00    	mov    DWORD PTR [ebx+0x1ec],eax
1000514f:	85 c0                	test   eax,eax
10005151:	75 10                	jne    10005163 <SoundBlaster16::_open(int, int, void*)+0x11f>
10005153:	83 ec 0c             	sub    esp,0xc
10005156:	68 70 6b 00 10       	push   0x10006b70	10005157: R_386_32	.text
1000515b:	e8 fc ff ff ff       	call   1000515c <SoundBlaster16::_open(int, int, void*)+0x118>	1000515c: R_386_PC32	KePanic(char const*)
10005160:	83 c4 10             	add    esp,0x10
10005163:	50                   	push   eax
10005164:	50                   	push   eax
10005165:	68 00 20 00 00       	push   0x2000
1000516a:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005170:	e8 fc ff ff ff       	call   10005171 <SoundBlaster16::_open(int, int, void*)+0x12d>	10005171: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
10005175:	58                   	pop    eax
10005176:	5a                   	pop    edx
10005177:	6a 59                	push   0x59
10005179:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000517f:	e8 fc ff ff ff       	call   10005180 <SoundBlaster16::_open(int, int, void*)+0x13c>	10005180: R_386_PC32	DMAChannel::setMode(unsigned char)
10005184:	59                   	pop    ecx
10005185:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000518b:	e8 fc ff ff ff       	call   1000518c <SoundBlaster16::_open(int, int, void*)+0x148>	1000518c: R_386_PC32	DMAChannel::start()
10005190:	5e                   	pop    esi
10005191:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005197:	e8 fc ff ff ff       	call   10005198 <SoundBlaster16::_open(int, int, void*)+0x154>	10005198: R_386_PC32	DMAChannel::getAddress()
1000519c:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
100051a2:	c7 04 24 89 6b 00 10 	mov    DWORD PTR [esp],0x10006b89	100051a5: R_386_32	.text
100051a9:	e8 fc ff ff ff       	call   100051aa <SoundBlaster16::_open(int, int, void*)+0x166>	100051aa: R_386_PC32	Dbg::kprintf(char const*, ...)
100051ae:	58                   	pop    eax
100051af:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
100051b5:	e8 fc ff ff ff       	call   100051b6 <SoundBlaster16::_open(int, int, void*)+0x172>	100051b6: R_386_PC32	DMAChannel::getAddress()
100051ba:	5a                   	pop    edx
100051bb:	59                   	pop    ecx
100051bc:	50                   	push   eax
100051bd:	68 9f 6b 00 10       	push   0x10006b9f	100051be: R_386_32	.text
100051c2:	e8 fc ff ff ff       	call   100051c3 <SoundBlaster16::_open(int, int, void*)+0x17f>	100051c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100051c7:	5e                   	pop    esi
100051c8:	58                   	pop    eax
100051c9:	ff b3 f4 01 00 00    	push   DWORD PTR [ebx+0x1f4]
100051cf:	68 9f 6b 00 10       	push   0x10006b9f	100051d0: R_386_32	.text
100051d4:	e8 fc ff ff ff       	call   100051d5 <SoundBlaster16::_open(int, int, void*)+0x191>	100051d5: R_386_PC32	Dbg::kprintf(char const*, ...)
100051d9:	58                   	pop    eax
100051da:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
100051e0:	e8 fc ff ff ff       	call   100051e1 <SoundBlaster16::_open(int, int, void*)+0x19d>	100051e1: R_386_PC32	DMAChannel::getChannelNum()
100051e5:	5a                   	pop    edx
100051e6:	59                   	pop    ecx
100051e7:	50                   	push   eax
100051e8:	68 d0 6b 00 10       	push   0x10006bd0	100051e9: R_386_32	.text
100051ed:	e8 fc ff ff ff       	call   100051ee <SoundBlaster16::_open(int, int, void*)+0x1aa>	100051ee: R_386_PC32	Dbg::kprintf(char const*, ...)
100051f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
100051f5:	e8 fc ff ff ff       	call   100051f6 <SoundBlaster16::_open(int, int, void*)+0x1b2>	100051f6: R_386_PC32	SoundBlaster16::resetDSP()
100051fa:	5e                   	pop    esi
100051fb:	58                   	pop    eax
100051fc:	6a 01                	push   0x1
100051fe:	53                   	push   ebx
100051ff:	e8 fc ff ff ff       	call   10005200 <SoundBlaster16::_open(int, int, void*)+0x1bc>	10005200: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10005204:	83 c4 10             	add    esp,0x10
10005207:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
1000520b:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
1000520f:	75 6f                	jne    10005280 <SoundBlaster16::_open(int, int, void*)+0x23c>
10005211:	50                   	push   eax
10005212:	68 80 00 00 00       	push   0x80
10005217:	68 24 02 00 00       	push   0x224
1000521c:	53                   	push   ebx
1000521d:	e8 fc ff ff ff       	call   1000521e <SoundBlaster16::_open(int, int, void*)+0x1da>	1000521e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005222:	ba 25 02 00 00       	mov    edx,0x225
10005227:	ec                   	in     al,dx
10005228:	83 c4 10             	add    esp,0x10
1000522b:	3c 01                	cmp    al,0x1
1000522d:	75 0f                	jne    1000523e <SoundBlaster16::_open(int, int, void*)+0x1fa>
1000522f:	83 ec 0c             	sub    esp,0xc
10005232:	53                   	push   ebx
10005233:	6a 01                	push   0x1
10005235:	68 00 00 00 00       	push   0x0	10005236: R_386_32	sb16Handler(regs*, void*)
1000523a:	6a 02                	push   0x2
1000523c:	eb 6f                	jmp    100052ad <SoundBlaster16::_open(int, int, void*)+0x269>
1000523e:	3c 02                	cmp    al,0x2
10005240:	75 06                	jne    10005248 <SoundBlaster16::_open(int, int, void*)+0x204>
10005242:	83 ec 0c             	sub    esp,0xc
10005245:	53                   	push   ebx
10005246:	eb 5c                	jmp    100052a4 <SoundBlaster16::_open(int, int, void*)+0x260>
10005248:	3c 04                	cmp    al,0x4
1000524a:	75 0f                	jne    1000525b <SoundBlaster16::_open(int, int, void*)+0x217>
1000524c:	83 ec 0c             	sub    esp,0xc
1000524f:	53                   	push   ebx
10005250:	6a 01                	push   0x1
10005252:	68 00 00 00 00       	push   0x0	10005253: R_386_32	sb16Handler(regs*, void*)
10005257:	6a 07                	push   0x7
10005259:	eb 52                	jmp    100052ad <SoundBlaster16::_open(int, int, void*)+0x269>
1000525b:	3c 08                	cmp    al,0x8
1000525d:	75 0f                	jne    1000526e <SoundBlaster16::_open(int, int, void*)+0x22a>
1000525f:	83 ec 0c             	sub    esp,0xc
10005262:	53                   	push   ebx
10005263:	6a 01                	push   0x1
10005265:	68 00 00 00 00       	push   0x0	10005266: R_386_32	sb16Handler(regs*, void*)
1000526a:	6a 0a                	push   0xa
1000526c:	eb 3f                	jmp    100052ad <SoundBlaster16::_open(int, int, void*)+0x269>
1000526e:	83 ec 0c             	sub    esp,0xc
10005271:	68 00 00 00 00       	push   0x0	10005272: R_386_32	noirq
10005276:	e8 fc ff ff ff       	call   10005277 <SoundBlaster16::_open(int, int, void*)+0x233>	10005277: R_386_PC32	KePanic(char const*)
1000527b:	83 c4 10             	add    esp,0x10
1000527e:	eb 36                	jmp    100052b6 <SoundBlaster16::_open(int, int, void*)+0x272>
10005280:	56                   	push   esi
10005281:	68 80 00 00 00       	push   0x80
10005286:	68 24 02 00 00       	push   0x224
1000528b:	53                   	push   ebx
1000528c:	e8 fc ff ff ff       	call   1000528d <SoundBlaster16::_open(int, int, void*)+0x249>	1000528d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005291:	83 c4 0c             	add    esp,0xc
10005294:	6a 02                	push   0x2
10005296:	68 25 02 00 00       	push   0x225
1000529b:	53                   	push   ebx
1000529c:	e8 fc ff ff ff       	call   1000529d <SoundBlaster16::_open(int, int, void*)+0x259>	1000529d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
100052a4:	6a 01                	push   0x1
100052a6:	68 00 00 00 00       	push   0x0	100052a7: R_386_32	sb16Handler(regs*, void*)
100052ab:	6a 05                	push   0x5
100052ad:	53                   	push   ebx
100052ae:	e8 fc ff ff ff       	call   100052af <SoundBlaster16::_open(int, int, void*)+0x26b>	100052af: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100052b3:	83 c4 20             	add    esp,0x20
100052b6:	56                   	push   esi
100052b7:	68 81 00 00 00       	push   0x81
100052bc:	68 24 02 00 00       	push   0x224
100052c1:	53                   	push   ebx
100052c2:	e8 fc ff ff ff       	call   100052c3 <SoundBlaster16::_open(int, int, void*)+0x27f>	100052c3: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052c7:	ba 25 02 00 00       	mov    edx,0x225
100052cc:	ec                   	in     al,dx
100052cd:	89 c6                	mov    esi,eax
100052cf:	58                   	pop    eax
100052d0:	89 f0                	mov    eax,esi
100052d2:	5a                   	pop    edx
100052d3:	0f b6 c0             	movzx  eax,al
100052d6:	50                   	push   eax
100052d7:	68 02 6c 00 10       	push   0x10006c02	100052d8: R_386_32	.text
100052dc:	e8 fc ff ff ff       	call   100052dd <SoundBlaster16::_open(int, int, void*)+0x299>	100052dd: R_386_PC32	Dbg::kprintf(char const*, ...)
100052e1:	83 c4 0c             	add    esp,0xc
100052e4:	68 81 00 00 00       	push   0x81
100052e9:	68 24 02 00 00       	push   0x224
100052ee:	53                   	push   ebx
100052ef:	e8 fc ff ff ff       	call   100052f0 <SoundBlaster16::_open(int, int, void*)+0x2ac>	100052f0: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052f4:	59                   	pop    ecx
100052f5:	ff b3 e8 01 00 00    	push   DWORD PTR [ebx+0x1e8]
100052fb:	e8 fc ff ff ff       	call   100052fc <SoundBlaster16::_open(int, int, void*)+0x2b8>	100052fc: R_386_PC32	DMAChannel::getChannelNum()
10005300:	83 c4 10             	add    esp,0x10
10005303:	48                   	dec    eax
10005304:	75 0c                	jne    10005312 <SoundBlaster16::_open(int, int, void*)+0x2ce>
10005306:	81 e6 f0 00 00 00    	and    esi,0xf0
1000530c:	51                   	push   ecx
1000530d:	83 ce 02             	or     esi,0x2
10005310:	eb 20                	jmp    10005332 <SoundBlaster16::_open(int, int, void*)+0x2ee>
10005312:	83 ec 0c             	sub    esp,0xc
10005315:	ff b3 e8 01 00 00    	push   DWORD PTR [ebx+0x1e8]
1000531b:	e8 fc ff ff ff       	call   1000531c <SoundBlaster16::_open(int, int, void*)+0x2d8>	1000531c: R_386_PC32	DMAChannel::getChannelNum()
10005320:	83 c4 10             	add    esp,0x10
10005323:	83 f8 03             	cmp    eax,0x3
10005326:	75 18                	jne    10005340 <SoundBlaster16::_open(int, int, void*)+0x2fc>
10005328:	81 e6 f0 00 00 00    	and    esi,0xf0
1000532e:	52                   	push   edx
1000532f:	83 ce 08             	or     esi,0x8
10005332:	56                   	push   esi
10005333:	68 25 02 00 00       	push   0x225
10005338:	53                   	push   ebx
10005339:	e8 fc ff ff ff       	call   1000533a <SoundBlaster16::_open(int, int, void*)+0x2f6>	1000533a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000533e:	eb 0d                	jmp    1000534d <SoundBlaster16::_open(int, int, void*)+0x309>
10005340:	83 ec 0c             	sub    esp,0xc
10005343:	68 00 00 00 00       	push   0x0	10005344: R_386_32	baddma
10005348:	e8 fc ff ff ff       	call   10005349 <SoundBlaster16::_open(int, int, void*)+0x305>	10005349: R_386_PC32	KePanic(char const*)
1000534d:	83 c4 10             	add    esp,0x10
10005350:	50                   	push   eax
10005351:	6a 22                	push   0x22
10005353:	68 24 02 00 00       	push   0x224
10005358:	53                   	push   ebx
10005359:	e8 fc ff ff ff       	call   1000535a <SoundBlaster16::_open(int, int, void*)+0x316>	1000535a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000535e:	83 c4 0c             	add    esp,0xc
10005361:	68 ff 00 00 00       	push   0xff
10005366:	68 24 02 00 00       	push   0x224
1000536b:	53                   	push   ebx
1000536c:	e8 fc ff ff ff       	call   1000536d <SoundBlaster16::_open(int, int, void*)+0x329>	1000536d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005371:	83 c4 10             	add    esp,0x10
10005374:	31 c0                	xor    eax,eax
10005376:	83 c4 14             	add    esp,0x14
10005379:	5b                   	pop    ebx
1000537a:	5e                   	pop    esi
1000537b:	c3                   	ret    

1000537c <SoundBlaster16::onInterrupt()>:
1000537c:	57                   	push   edi
1000537d:	56                   	push   esi
1000537e:	53                   	push   ebx
1000537f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10005383:	8b bb dc 01 00 00    	mov    edi,DWORD PTR [ebx+0x1dc]
10005389:	83 ff 10             	cmp    edi,0x10
1000538c:	0f 85 e8 00 00 00    	jne    1000547a <SoundBlaster16::onInterrupt()+0xfe>
10005392:	83 ec 0c             	sub    esp,0xc
10005395:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000539b:	e8 fc ff ff ff       	call   1000539c <SoundBlaster16::onInterrupt()+0x20>	1000539c: R_386_PC32	DMAChannel::getAddress()
100053a0:	83 c4 0c             	add    esp,0xc
100053a3:	50                   	push   eax
100053a4:	ff b3 f4 01 00 00    	push   DWORD PTR [ebx+0x1f4]
100053aa:	68 25 6c 00 10       	push   0x10006c25	100053ab: R_386_32	.text
100053af:	e8 fc ff ff ff       	call   100053b0 <SoundBlaster16::onInterrupt()+0x34>	100053b0: R_386_PC32	Dbg::kprintf(char const*, ...)
100053b4:	80 3d 1f 6f 00 10 01 	cmp    BYTE PTR ds:0x10006f1f,0x1	100053b6: R_386_32	.data
100053bb:	5e                   	pop    esi
100053bc:	58                   	pop    eax
100053bd:	19 c0                	sbb    eax,eax
100053bf:	25 00 20 00 00       	and    eax,0x2000
100053c4:	03 83 f4 01 00 00    	add    eax,DWORD PTR [ebx+0x1f4]
100053ca:	89 c6                	mov    esi,eax
100053cc:	50                   	push   eax
100053cd:	68 4f 6c 00 10       	push   0x10006c4f	100053ce: R_386_32	.text
100053d2:	e8 fc ff ff ff       	call   100053d3 <SoundBlaster16::onInterrupt()+0x57>	100053d3: R_386_PC32	Dbg::kprintf(char const*, ...)
100053d7:	83 c4 0c             	add    esp,0xc
100053da:	56                   	push   esi
100053db:	68 00 10 00 00       	push   0x1000
100053e0:	53                   	push   ebx
100053e1:	e8 fc ff ff ff       	call   100053e2 <SoundBlaster16::onInterrupt()+0x66>	100053e2: R_386_PC32	SoundCard::getSamples16(int, short*)
100053e6:	83 c4 10             	add    esp,0x10
100053e9:	89 c6                	mov    esi,eax
100053eb:	85 c0                	test   eax,eax
100053ed:	75 19                	jne    10005408 <SoundBlaster16::onInterrupt()+0x8c>
100053ef:	83 ec 0c             	sub    esp,0xc
100053f2:	68 66 6c 00 10       	push   0x10006c66	100053f3: R_386_32	.text
100053f7:	e8 fc ff ff ff       	call   100053f8 <SoundBlaster16::onInterrupt()+0x7c>	100053f8: R_386_PC32	Dbg::kprintf(char const*, ...)
100053fc:	5a                   	pop    edx
100053fd:	59                   	pop    ecx
100053fe:	6a 00                	push   0x0
10005400:	53                   	push   ebx
10005401:	e8 fc ff ff ff       	call   10005402 <SoundBlaster16::onInterrupt()+0x86>	10005402: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10005406:	eb 6f                	jmp    10005477 <SoundBlaster16::onInterrupt()+0xfb>
10005408:	3d ff 0f 00 00       	cmp    eax,0xfff
1000540d:	7f 6b                	jg     1000547a <SoundBlaster16::onInterrupt()+0xfe>
1000540f:	83 ec 0c             	sub    esp,0xc
10005412:	68 76 6c 00 10       	push   0x10006c76	10005413: R_386_32	.text
10005417:	e8 fc ff ff ff       	call   10005418 <SoundBlaster16::onInterrupt()+0x9c>	10005418: R_386_PC32	Dbg::kprintf(char const*, ...)
1000541c:	83 c4 0c             	add    esp,0xc
1000541f:	68 b0 00 00 00       	push   0xb0
10005424:	68 2c 02 00 00       	push   0x22c
10005429:	53                   	push   ebx
1000542a:	e8 fc ff ff ff       	call   1000542b <SoundBlaster16::onInterrupt()+0xaf>	1000542b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000542f:	83 c4 10             	add    esp,0x10
10005432:	83 bb e4 01 00 00 02 	cmp    DWORD PTR [ebx+0x1e4],0x2
10005439:	75 05                	jne    10005440 <SoundBlaster16::onInterrupt()+0xc4>
1000543b:	bf 30 00 00 00       	mov    edi,0x30
10005440:	50                   	push   eax
10005441:	57                   	push   edi
10005442:	68 2c 02 00 00       	push   0x22c
10005447:	53                   	push   ebx
10005448:	e8 fc ff ff ff       	call   10005449 <SoundBlaster16::onInterrupt()+0xcd>	10005449: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000544d:	83 c4 0c             	add    esp,0xc
10005450:	8d 46 ff             	lea    eax,[esi-0x1]
10005453:	0f b6 c0             	movzx  eax,al
10005456:	50                   	push   eax
10005457:	68 2c 02 00 00       	push   0x22c
1000545c:	53                   	push   ebx
1000545d:	e8 fc ff ff ff       	call   1000545e <SoundBlaster16::onInterrupt()+0xe2>	1000545e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005462:	83 c4 0c             	add    esp,0xc
10005465:	8d 46 ff             	lea    eax,[esi-0x1]
10005468:	0f b6 f4             	movzx  esi,ah
1000546b:	56                   	push   esi
1000546c:	68 2c 02 00 00       	push   0x22c
10005471:	53                   	push   ebx
10005472:	e8 fc ff ff ff       	call   10005473 <SoundBlaster16::onInterrupt()+0xf7>	10005473: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005477:	83 c4 10             	add    esp,0x10
1000547a:	5b                   	pop    ebx
1000547b:	80 35 1f 6f 00 10 01 	xor    BYTE PTR ds:0x10006f1f,0x1	1000547d: R_386_32	.data
10005482:	5e                   	pop    esi
10005483:	5f                   	pop    edi
10005484:	c3                   	ret    
10005485:	90                   	nop

10005486 <SoundBlaster16::close(int, int, void*)>:
10005486:	83 ec 0c             	sub    esp,0xc
10005489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000548d:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10005493:	85 c0                	test   eax,eax
10005495:	74 11                	je     100054a8 <SoundBlaster16::close(int, int, void*)+0x22>
10005497:	52                   	push   edx
10005498:	52                   	push   edx
10005499:	50                   	push   eax
1000549a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000549c: R_386_32	isaDMAController
100054a0:	e8 fc ff ff ff       	call   100054a1 <SoundBlaster16::close(int, int, void*)+0x1b>	100054a1: R_386_PC32	DMA::unlockChannel(DMAChannel*)
100054a5:	83 c4 10             	add    esp,0x10
100054a8:	31 c0                	xor    eax,eax
100054aa:	83 c4 0c             	add    esp,0xc
100054ad:	c3                   	ret    

100054ae <ISA::~ISA()>:
100054ae:	55                   	push   ebp
100054af:	89 e5                	mov    ebp,esp
100054b1:	83 ec 08             	sub    esp,0x8
100054b4:	ba 08 00 00 00       	mov    edx,0x8	100054b5: R_386_32	vtable for ISA
100054b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054bc:	89 10                	mov    DWORD PTR [eax],edx
100054be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054c1:	83 ec 0c             	sub    esp,0xc
100054c4:	50                   	push   eax
100054c5:	e8 fc ff ff ff       	call   100054c6 <ISA::~ISA()+0x18>	100054c6: R_386_PC32	Bus::~Bus()
100054ca:	83 c4 10             	add    esp,0x10
100054cd:	90                   	nop
100054ce:	c9                   	leave  
100054cf:	c3                   	ret    

100054d0 <ISA::~ISA()>:
100054d0:	55                   	push   ebp
100054d1:	89 e5                	mov    ebp,esp
100054d3:	83 ec 08             	sub    esp,0x8
100054d6:	83 ec 0c             	sub    esp,0xc
100054d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054dc:	e8 fc ff ff ff       	call   100054dd <ISA::~ISA()+0xd>	100054dd: R_386_PC32	ISA::~ISA()
100054e1:	83 c4 10             	add    esp,0x10
100054e4:	83 ec 08             	sub    esp,0x8
100054e7:	68 58 01 00 00       	push   0x158
100054ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054ef:	e8 fc ff ff ff       	call   100054f0 <ISA::~ISA()+0x20>	100054f0: R_386_PC32	operator delete(void*, unsigned long)
100054f4:	83 c4 10             	add    esp,0x10
100054f7:	c9                   	leave  
100054f8:	c3                   	ret    
100054f9:	90                   	nop

100054fa <Floppy::~Floppy()>:
100054fa:	55                   	push   ebp
100054fb:	89 e5                	mov    ebp,esp
100054fd:	83 ec 08             	sub    esp,0x8
10005500:	ba 08 00 00 00       	mov    edx,0x8	10005501: R_386_32	vtable for Floppy
10005505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005508:	89 10                	mov    DWORD PTR [eax],edx
1000550a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000550d:	83 ec 0c             	sub    esp,0xc
10005510:	50                   	push   eax
10005511:	e8 fc ff ff ff       	call   10005512 <Floppy::~Floppy()+0x18>	10005512: R_386_PC32	HardDiskController::~HardDiskController()
10005516:	83 c4 10             	add    esp,0x10
10005519:	90                   	nop
1000551a:	c9                   	leave  
1000551b:	c3                   	ret    

1000551c <Floppy::~Floppy()>:
1000551c:	55                   	push   ebp
1000551d:	89 e5                	mov    ebp,esp
1000551f:	83 ec 08             	sub    esp,0x8
10005522:	83 ec 0c             	sub    esp,0xc
10005525:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005528:	e8 fc ff ff ff       	call   10005529 <Floppy::~Floppy()+0xd>	10005529: R_386_PC32	Floppy::~Floppy()
1000552d:	83 c4 10             	add    esp,0x10
10005530:	83 ec 08             	sub    esp,0x8
10005533:	68 b8 01 00 00       	push   0x1b8
10005538:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000553b:	e8 fc ff ff ff       	call   1000553c <Floppy::~Floppy()+0x20>	1000553c: R_386_PC32	operator delete(void*, unsigned long)
10005540:	83 c4 10             	add    esp,0x10
10005543:	c9                   	leave  
10005544:	c3                   	ret    
10005545:	90                   	nop

10005546 <JoystickHost::JoystickHost()>:
10005546:	55                   	push   ebp
10005547:	89 e5                	mov    ebp,esp
10005549:	ba 08 00 00 00       	mov    edx,0x8	1000554a: R_386_32	vtable for JoystickHost
1000554e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005551:	89 10                	mov    DWORD PTR [eax],edx
10005553:	90                   	nop
10005554:	5d                   	pop    ebp
10005555:	c3                   	ret    

10005556 <DMA::~DMA()>:
10005556:	55                   	push   ebp
10005557:	89 e5                	mov    ebp,esp
10005559:	83 ec 08             	sub    esp,0x8
1000555c:	ba 08 00 00 00       	mov    edx,0x8	1000555d: R_386_32	vtable for DMA
10005561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005564:	89 10                	mov    DWORD PTR [eax],edx
10005566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005569:	83 ec 0c             	sub    esp,0xc
1000556c:	50                   	push   eax
1000556d:	e8 fc ff ff ff       	call   1000556e <DMA::~DMA()+0x18>	1000556e: R_386_PC32	Device::~Device()
10005572:	83 c4 10             	add    esp,0x10
10005575:	90                   	nop
10005576:	c9                   	leave  
10005577:	c3                   	ret    

10005578 <DMA::~DMA()>:
10005578:	55                   	push   ebp
10005579:	89 e5                	mov    ebp,esp
1000557b:	83 ec 08             	sub    esp,0x8
1000557e:	83 ec 0c             	sub    esp,0xc
10005581:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005584:	e8 fc ff ff ff       	call   10005585 <DMA::~DMA()+0xd>	10005585: R_386_PC32	DMA::~DMA()
10005589:	83 c4 10             	add    esp,0x10
1000558c:	83 ec 08             	sub    esp,0x8
1000558f:	68 5c 01 00 00       	push   0x15c
10005594:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005597:	e8 fc ff ff ff       	call   10005598 <DMA::~DMA()+0x20>	10005598: R_386_PC32	operator delete(void*, unsigned long)
1000559c:	83 c4 10             	add    esp,0x10
1000559f:	c9                   	leave  
100055a0:	c3                   	ret    
100055a1:	90                   	nop

100055a2 <PS2::~PS2()>:
100055a2:	55                   	push   ebp
100055a3:	89 e5                	mov    ebp,esp
100055a5:	83 ec 08             	sub    esp,0x8
100055a8:	ba 08 00 00 00       	mov    edx,0x8	100055a9: R_386_32	vtable for PS2
100055ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100055b0:	89 10                	mov    DWORD PTR [eax],edx
100055b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100055b5:	83 ec 0c             	sub    esp,0xc
100055b8:	50                   	push   eax
100055b9:	e8 fc ff ff ff       	call   100055ba <PS2::~PS2()+0x18>	100055ba: R_386_PC32	Bus::~Bus()
100055be:	83 c4 10             	add    esp,0x10
100055c1:	90                   	nop
100055c2:	c9                   	leave  
100055c3:	c3                   	ret    

100055c4 <PS2::~PS2()>:
100055c4:	55                   	push   ebp
100055c5:	89 e5                	mov    ebp,esp
100055c7:	83 ec 08             	sub    esp,0x8
100055ca:	83 ec 0c             	sub    esp,0xc
100055cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100055d0:	e8 fc ff ff ff       	call   100055d1 <PS2::~PS2()+0xd>	100055d1: R_386_PC32	PS2::~PS2()
100055d5:	83 c4 10             	add    esp,0x10
100055d8:	83 ec 08             	sub    esp,0x8
100055db:	68 60 01 00 00       	push   0x160
100055e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100055e3:	e8 fc ff ff ff       	call   100055e4 <PS2::~PS2()+0x20>	100055e4: R_386_PC32	operator delete(void*, unsigned long)
100055e8:	83 c4 10             	add    esp,0x10
100055eb:	c9                   	leave  
100055ec:	c3                   	ret    
100055ed:	90                   	nop

100055ee <PS2Mouse::~PS2Mouse()>:
100055ee:	55                   	push   ebp
100055ef:	89 e5                	mov    ebp,esp
100055f1:	83 ec 08             	sub    esp,0x8
100055f4:	ba 08 00 00 00       	mov    edx,0x8	100055f5: R_386_32	vtable for PS2Mouse
100055f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100055fc:	89 10                	mov    DWORD PTR [eax],edx
100055fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005601:	83 ec 0c             	sub    esp,0xc
10005604:	50                   	push   eax
10005605:	e8 fc ff ff ff       	call   10005606 <PS2Mouse::~PS2Mouse()+0x18>	10005606: R_386_PC32	Mouse::~Mouse()
1000560a:	83 c4 10             	add    esp,0x10
1000560d:	90                   	nop
1000560e:	c9                   	leave  
1000560f:	c3                   	ret    

10005610 <PS2Mouse::~PS2Mouse()>:
10005610:	55                   	push   ebp
10005611:	89 e5                	mov    ebp,esp
10005613:	83 ec 08             	sub    esp,0x8
10005616:	83 ec 0c             	sub    esp,0xc
10005619:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000561c:	e8 fc ff ff ff       	call   1000561d <PS2Mouse::~PS2Mouse()+0xd>	1000561d: R_386_PC32	PS2Mouse::~PS2Mouse()
10005621:	83 c4 10             	add    esp,0x10
10005624:	83 ec 08             	sub    esp,0x8
10005627:	68 68 01 00 00       	push   0x168
1000562c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000562f:	e8 fc ff ff ff       	call   10005630 <PS2Mouse::~PS2Mouse()+0x20>	10005630: R_386_PC32	operator delete(void*, unsigned long)
10005634:	83 c4 10             	add    esp,0x10
10005637:	c9                   	leave  
10005638:	c3                   	ret    
10005639:	90                   	nop

1000563a <PS2Port::~PS2Port()>:
1000563a:	55                   	push   ebp
1000563b:	89 e5                	mov    ebp,esp
1000563d:	83 ec 08             	sub    esp,0x8
10005640:	ba 08 00 00 00       	mov    edx,0x8	10005641: R_386_32	vtable for PS2Port
10005645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005648:	89 10                	mov    DWORD PTR [eax],edx
1000564a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000564d:	83 ec 0c             	sub    esp,0xc
10005650:	50                   	push   eax
10005651:	e8 fc ff ff ff       	call   10005652 <PS2Port::~PS2Port()+0x18>	10005652: R_386_PC32	Bus::~Bus()
10005656:	83 c4 10             	add    esp,0x10
10005659:	90                   	nop
1000565a:	c9                   	leave  
1000565b:	c3                   	ret    

1000565c <PS2Port::~PS2Port()>:
1000565c:	55                   	push   ebp
1000565d:	89 e5                	mov    ebp,esp
1000565f:	83 ec 08             	sub    esp,0x8
10005662:	83 ec 0c             	sub    esp,0xc
10005665:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005668:	e8 fc ff ff ff       	call   10005669 <PS2Port::~PS2Port()+0xd>	10005669: R_386_PC32	PS2Port::~PS2Port()
1000566d:	83 c4 10             	add    esp,0x10
10005670:	83 ec 08             	sub    esp,0x8
10005673:	68 60 01 00 00       	push   0x160
10005678:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000567b:	e8 fc ff ff ff       	call   1000567c <PS2Port::~PS2Port()+0x20>	1000567c: R_386_PC32	operator delete(void*, unsigned long)
10005680:	83 c4 10             	add    esp,0x10
10005683:	c9                   	leave  
10005684:	c3                   	ret    
10005685:	90                   	nop

10005686 <SoundBlaster16::~SoundBlaster16()>:
10005686:	55                   	push   ebp
10005687:	89 e5                	mov    ebp,esp
10005689:	83 ec 08             	sub    esp,0x8
1000568c:	ba 08 00 00 00       	mov    edx,0x8	1000568d: R_386_32	vtable for SoundBlaster16
10005691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005694:	89 10                	mov    DWORD PTR [eax],edx
10005696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005699:	83 ec 0c             	sub    esp,0xc
1000569c:	50                   	push   eax
1000569d:	e8 fc ff ff ff       	call   1000569e <SoundBlaster16::~SoundBlaster16()+0x18>	1000569e: R_386_PC32	SoundCard::~SoundCard()
100056a2:	83 c4 10             	add    esp,0x10
100056a5:	90                   	nop
100056a6:	c9                   	leave  
100056a7:	c3                   	ret    

100056a8 <SoundBlaster16::~SoundBlaster16()>:
100056a8:	55                   	push   ebp
100056a9:	89 e5                	mov    ebp,esp
100056ab:	83 ec 08             	sub    esp,0x8
100056ae:	83 ec 0c             	sub    esp,0xc
100056b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100056b4:	e8 fc ff ff ff       	call   100056b5 <SoundBlaster16::~SoundBlaster16()+0xd>	100056b5: R_386_PC32	SoundBlaster16::~SoundBlaster16()
100056b9:	83 c4 10             	add    esp,0x10
100056bc:	83 ec 08             	sub    esp,0x8
100056bf:	68 fc 01 00 00       	push   0x1fc
100056c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100056c7:	e8 fc ff ff ff       	call   100056c8 <SoundBlaster16::~SoundBlaster16()+0x20>	100056c8: R_386_PC32	operator delete(void*, unsigned long)
100056cc:	83 c4 10             	add    esp,0x10
100056cf:	c9                   	leave  
100056d0:	c3                   	ret    
100056d1:	66 90                	xchg   ax,ax
100056d3:	90                   	nop

100056d4 <PHYS_RAM_TABLE_SIZE>:
100056d4:	13 05 00 00                                         ....

100056d8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100056d8:	24 05 00 00                                         $...

100056dc <PHYS_RAM_TABLE>:
100056dc:	00 06 00 00                                         ....

100056e0 <PHYS_DMA_MEMORY_1>:
100056e0:	00 00 01 00                                         ....

100056e4 <PHYS_PHYS_PAGE_BITMAP>:
100056e4:	00 00 02 00                                         ....

100056e8 <PHYS_VIRT_PAGE_BITMAP>:
100056e8:	00 00 04 00                                         ....

100056ec <PHYS_DMA_MEMORY_2>:
100056ec:	00 00 06 00                                         ....

100056f0 <PHYS_ALLOCED_VIRT_PAGES>:
100056f0:	00 00 10 00                                         ....

100056f4 <PHYS_KRNL_PAGE_DIRECTORY>:
100056f4:	00 10 00 00                                         ....

100056f8 <VIRT_KERNEL_BASE>:
100056f8:	00 00 00 c0                                         ....

100056fc <VIRT_LOW_MEGS>:
100056fc:	00 00 00 c2                                         ....

10005700 <VIRT_CPU_SPECIFIC>:
10005700:	00 00 40 c2                                         ..@.

10005704 <VIRT_RECURSIVE_SPOT_1>:
10005704:	00 00 80 c2                                         ....

10005708 <VIRT_RECURSIVE_SPOT_2>:
10005708:	00 00 c0 c2                                         ....

1000570c <VIRT_DMA_MEMORY_1>:
1000570c:	00 00 01 c2                                         ....

10005710 <SIZE_DMA_MEMORY_1>:
10005710:	00 00 01 00                                         ....

10005714 <VIRT_DMA_MEMORY_2>:
10005714:	00 00 06 c2                                         ....

10005718 <SIZE_DMA_MEMORY_2>:
10005718:	00 00 02 00                                         ....

1000571c <VIRT_KRNL_PAGE_DIRECTORY>:
1000571c:	00 10 00 c2                                         ....

10005720 <VIRT_PHYS_PAGE_BITMAP>:
10005720:	00 00 02 c2                                         ....

10005724 <SIZE_PHYS_PAGE_BITMAP>:
10005724:	00 00 02 00                                         ....

10005728 <VIRT_VIRT_PAGE_BITMAP>:
10005728:	00 00 04 c2                                         ....

1000572c <SIZE_VIRT_PAGE_BITMAP>:
1000572c:	00 80 00 00                                         ....

10005730 <VIRT_RAM_TABLE>:
10005730:	00 06 00 c2                                         ....

10005734 <VIRT_RAM_TABLE_SIZE>:
10005734:	13 05 00 c2                                         ....

10005738 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005738:	24 05 00 c2                                         $...

1000573c <SIZE_APP_STACK_USER>:
1000573c:	00 00 18 00                                         ....

10005740 <SIZE_APP_STACK_KRNL>:
10005740:	00 00 08 00                                         ....

10005744 <SIZE_APP_STACK_TOTAL>:
10005744:	00 00 20 00                                         .. .

10005748 <VIRT_APP_DATA>:
10005748:	00 00 00 10                                         ....

1000574c <VIRT_APP_STACK_USER_TOP>:
1000574c:	00 00 00 02                                         ....

10005750 <VIRT_APP_STACK_KRNL_TOP>:
10005750:	00 00 e8 01                                         ....

10005754 <VIRT_HEAP_MIN>:
10005754:	00 00 00 c8                                         ....

10005758 <VIRT_HEAP_MAX>:
10005758:	ff ff ff ef                                         ....

1000575c <VIRT_SBRK_MIN>:
1000575c:	00 00 00 f0                                         ....

10005760 <VIRT_SBRK_MAX>:
10005760:	00 00 c0 ff                                         ....

10005764 <VIRT_ALLOCED_VIRT_PAGES>:
10005764:	00 00 10 c2                                         ....

10005768 <VIRT_ACPI_DRIVER>:
10005768:	00 40 48 c2                                         .@H.

1000576c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000576c:	30 00 00 00                                         0...

10005770 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005770:	80 00 00 00 49 53 41 20 42 75 73 00 53 74 61 72     ....ISA Bus.Star
10005780:	74 69 6e 67 20 53 6f 75 6e 64 62 6c 61 73 74 65     ting Soundblaste
10005790:	72 20 64 72 69 76 65 72 2e 2e 2e 00 43 3a 2f 42     r driver....C:/B
100057a0:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74     anana/System/set
100057b0:	75 70 69 73 64 2e 6f 6e 65 00 53 74 61 72 74 69     upisd.one.Starti
100057c0:	6e 67 20 67 61 6d 65 70 6f 72 74 20 64 72 69 76     ng gameport driv
100057d0:	65 72 2e 2e 2e 00 53 74 61 72 74 69 6e 67 20 66     er....Starting f
100057e0:	6c 6f 70 70 79 20 64 72 69 76 65 72 2e 2e 2e 00     loppy driver....
100057f0:	53 74 61 72 74 69 6e 67 20 50 53 2f 32 20 64 72     Starting PS/2 dr
10005800:	69 76 65 72 2e 2e 2e 00 53 74 61 72 74 69 6e 67     iver....Starting
10005810:	20 44 4d 41 20 64 72 69 76 65 72 2e 2e 2e 00 90      DMA driver.....

10005820 <vtable for ISA>:
	...
	10005828: R_386_32	ISA::~ISA()
	1000582c: R_386_32	ISA::~ISA()
	10005830: R_386_32	ISA::open(int, int, void*)
	10005834: R_386_32	ISA::close(int, int, void*)
	10005838: R_386_32	Device::hibernate()
	1000583c: R_386_32	Device::wake()
	10005840: R_386_32	ISA::detect()
	10005844: R_386_32	Device::disableLegacy()
	10005848: R_386_32	Device::powerSaving(PowerSavingLevel)

1000584c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000584c:	30 00 00 00                                         0...

10005850 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005850:	80 00 00 00                                         ....

10005854 <PHYS_RAM_TABLE_SIZE>:
10005854:	13 05 00 00                                         ....

10005858 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005858:	24 05 00 00                                         $...

1000585c <PHYS_RAM_TABLE>:
1000585c:	00 06 00 00                                         ....

10005860 <PHYS_DMA_MEMORY_1>:
10005860:	00 00 01 00                                         ....

10005864 <PHYS_PHYS_PAGE_BITMAP>:
10005864:	00 00 02 00                                         ....

10005868 <PHYS_VIRT_PAGE_BITMAP>:
10005868:	00 00 04 00                                         ....

1000586c <PHYS_DMA_MEMORY_2>:
1000586c:	00 00 06 00                                         ....

10005870 <PHYS_ALLOCED_VIRT_PAGES>:
10005870:	00 00 10 00                                         ....

10005874 <PHYS_KRNL_PAGE_DIRECTORY>:
10005874:	00 10 00 00                                         ....

10005878 <VIRT_KERNEL_BASE>:
10005878:	00 00 00 c0                                         ....

1000587c <VIRT_LOW_MEGS>:
1000587c:	00 00 00 c2                                         ....

10005880 <VIRT_CPU_SPECIFIC>:
10005880:	00 00 40 c2                                         ..@.

10005884 <VIRT_RECURSIVE_SPOT_1>:
10005884:	00 00 80 c2                                         ....

10005888 <VIRT_RECURSIVE_SPOT_2>:
10005888:	00 00 c0 c2                                         ....

1000588c <VIRT_DMA_MEMORY_1>:
1000588c:	00 00 01 c2                                         ....

10005890 <SIZE_DMA_MEMORY_1>:
10005890:	00 00 01 00                                         ....

10005894 <VIRT_DMA_MEMORY_2>:
10005894:	00 00 06 c2                                         ....

10005898 <SIZE_DMA_MEMORY_2>:
10005898:	00 00 02 00                                         ....

1000589c <VIRT_KRNL_PAGE_DIRECTORY>:
1000589c:	00 10 00 c2                                         ....

100058a0 <VIRT_PHYS_PAGE_BITMAP>:
100058a0:	00 00 02 c2                                         ....

100058a4 <SIZE_PHYS_PAGE_BITMAP>:
100058a4:	00 00 02 00                                         ....

100058a8 <VIRT_VIRT_PAGE_BITMAP>:
100058a8:	00 00 04 c2                                         ....

100058ac <SIZE_VIRT_PAGE_BITMAP>:
100058ac:	00 80 00 00                                         ....

100058b0 <VIRT_RAM_TABLE>:
100058b0:	00 06 00 c2                                         ....

100058b4 <VIRT_RAM_TABLE_SIZE>:
100058b4:	13 05 00 c2                                         ....

100058b8 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100058b8:	24 05 00 c2                                         $...

100058bc <SIZE_APP_STACK_USER>:
100058bc:	00 00 18 00                                         ....

100058c0 <SIZE_APP_STACK_KRNL>:
100058c0:	00 00 08 00                                         ....

100058c4 <SIZE_APP_STACK_TOTAL>:
100058c4:	00 00 20 00                                         .. .

100058c8 <VIRT_APP_DATA>:
100058c8:	00 00 00 10                                         ....

100058cc <VIRT_APP_STACK_USER_TOP>:
100058cc:	00 00 00 02                                         ....

100058d0 <VIRT_APP_STACK_KRNL_TOP>:
100058d0:	00 00 e8 01                                         ....

100058d4 <VIRT_HEAP_MIN>:
100058d4:	00 00 00 c8                                         ....

100058d8 <VIRT_HEAP_MAX>:
100058d8:	ff ff ff ef                                         ....

100058dc <VIRT_SBRK_MIN>:
100058dc:	00 00 00 f0                                         ....

100058e0 <VIRT_SBRK_MAX>:
100058e0:	00 00 c0 ff                                         ....

100058e4 <VIRT_ALLOCED_VIRT_PAGES>:
100058e4:	00 00 10 c2                                         ....

100058e8 <VIRT_ACPI_DRIVER>:
100058e8:	00 40 48 c2 54 75 72 6e 69 6e 67 20 6f 66 66 20     .@H.Turning off 
100058f8:	74 68 65 20 66 6c 6f 70 70 79 20 6d 6f 74 6f 72     the floppy motor
10005908:	2e 2e 2e 0a 00 46 6c 6f 70 70 79 20 44 69 73 6b     .....Floppy Disk
10005918:	20 43 6f 6e 74 72 6f 6c 6c 65 72 00 50 52 45 56      Controller.PREV
10005928:	49 4f 55 53 20 43 4f 4d 4d 41 4e 44 20 46 41 49     IOUS COMMAND FAI
10005938:	4c 45 44 2c 20 43 41 55 47 48 54 20 42 59 20 77     LED, CAUGHT BY w
10005948:	72 69 74 65 43 6f 6d 6d 61 6e 64 00 44 49 44 20     riteCommand.DID 
10005958:	4e 4f 54 20 43 48 45 43 4b 20 46 4f 52 20 46 41     NOT CHECK FOR FA
10005968:	49 4c 55 52 45 20 42 45 46 4f 52 45 20 77 72 69     ILURE BEFORE wri
10005978:	74 65 43 6f 6d 6d 61 6e 64 00 46 6c 6f 70 70 79     teCommand.Floppy
10005988:	3a 3a 64 72 69 76 65 44 65 74 65 63 74 69 6f 6e     ::driveDetection
10005998:	28 29 0a 00 44 72 69 76 65 20 74 79 70 65 20 30     ()..Drive type 0
100059a8:	3a 20 30 78 25 58 0a 00 44 72 69 76 65 20 74 79     : 0x%X..Drive ty
100059b8:	70 65 20 31 3a 20 30 78 25 58 0a 00 76 6f 69 64     pe 1: 0x%X..void
100059c8:	20 46 6c 6f 70 70 79 3a 3a 72 65 73 65 74 28 29      Floppy::reset()
100059d8:	0a 00 53 50 45 43 49 46 59 20 42 41 44 20 44 41     ..SPECIFY BAD DA
100059e8:	54 41 52 41 54 45 00 00 20 a1 07 00 e0 93 04 00     TARATE.. .......
100059f8:	90 d0 03 00 40 42 0f 00 73 65 6c 65 63 74 20 28     ....@B..select (
10005a08:	41 29 2e 20 25 64 0a 00 73 65 6c 65 63 74 20 28     A). %d..select (
10005a18:	42 29 2e 0a 00 73 65 6c 65 63 74 20 28 43 29 2e     B)...select (C).
10005a28:	0a 00 73 65 6c 65 63 74 20 28 44 29 2e 0a 00 00     ..select (D)....
10005a38:	55 4e 53 55 50 50 4f 52 54 45 44 20 46 4c 4f 50     UNSUPPORTED FLOP
10005a48:	50 59 20 46 4f 52 4d 41 54 20 28 44 41 54 41 52     PY FORMAT (DATAR
10005a58:	41 54 45 20 4e 4f 54 20 4b 4e 4f 57 4e 29 00 73     ATE NOT KNOWN).s
10005a68:	65 6c 65 63 74 20 28 45 29 2e 0a 00 73 70 65 63     elect (E)...spec
10005a78:	69 66 69 79 20 72 65 73 65 74 2e 0a 00 73 65 6c     ifiy reset...sel
10005a88:	65 63 74 20 28 46 29 2e 0a 00 73 65 6c 65 63 74     ect (F)...select
10005a98:	20 28 46 32 29 2e 0a 00 63 61 6c 69 62 72 61 74      (F2)...calibrat
10005aa8:	65 20 72 65 73 65 74 2e 0a 00 73 65 6c 65 63 74     e reset...select
10005ab8:	20 28 47 29 2e 0a 00 73 65 6c 65 63 74 20 28 48      (G)...select (H
10005ac8:	29 2e 0a 00 73 65 6c 65 63 74 20 28 49 29 2e 0a     )...select (I)..
10005ad8:	00 46 6c 6f 70 70 79 3a 3a 6d 6f 74 6f 72 0a 00     .Floppy::motor..
10005ae8:	6e 75 6d 20 3d 20 25 64 2c 20 73 74 61 74 65 20     num = %d, state 
10005af8:	3d 20 25 64 0a 00 73 74 61 74 65 2e 0a 00 73 74     = %d..state...st
10005b08:	61 72 74 69 6e 67 20 74 68 65 20 6d 6f 74 6f 72     arting the motor
10005b18:	2e 0a 00 64 6f 72 20 31 20 3d 20 30 78 25 58 0a     ...dor 1 = 0x%X.
10005b28:	00 64 6f 72 20 32 20 3d 20 30 78 25 58 0a 00 6d     .dor 2 = 0x%X..m
10005b38:	6f 74 6f 72 20 61 67 61 69 6e 2e 0a 00 6d 6f 74     otor again...mot
10005b48:	6f 72 20 61 67 61 69 6e 20 32 2e 0a 00 6d 6f 74     or again 2...mot
10005b58:	6f 72 20 61 67 61 69 6e 20 33 2e 0a 00 6d 6f 74     or again 3...mot
10005b68:	6f 72 20 61 67 61 69 6e 20 34 2e 0a 00 6d 6f 74     or again 4...mot
10005b78:	6f 72 20 61 67 61 69 6e 20 35 2e 0a 00 6d 6f 74     or again 5...mot
10005b88:	6f 72 20 61 67 61 69 6e 20 36 2e 0a 00 46 6c 6f     or again 6...Flo
10005b98:	70 70 79 3a 3a 6d 6f 74 6f 72 20 64 6f 6e 65 2e     ppy::motor done.
10005ba8:	0a 00 46 6c 6f 70 70 79 20 44 69 73 6b 20 44 72     ..Floppy Disk Dr
10005bb8:	69 76 65 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     ive.FloppyDrive:
10005bc8:	3a 6d 6f 74 6f 72 4f 6e 20 6e 75 6d 20 3d 20 25     :motorOn num = %
10005bd8:	64 0a 00 6e 75 6d 20 3d 20 25 64 0a 00 73 69 7a     d..num = %d..siz
10005be8:	65 20 69 6e 20 4b 42 73 20 3d 20 25 64 0a 00 46     e in KBs = %d..F
10005bf8:	6c 6f 70 70 79 44 72 69 76 65 3a 3a 5f 6f 70 65     loppyDrive::_ope
10005c08:	6e 20 31 0a 00 46 6c 6f 70 70 79 44 72 69 76 65     n 1..FloppyDrive
10005c18:	3a 3a 5f 6f 70 65 6e 20 32 0a 00 46 6c 6f 70 70     ::_open 2..Flopp
10005c28:	79 44 72 69 76 65 3a 3a 5f 6f 70 65 6e 20 33 0a     yDrive::_open 3.
10005c38:	00 46 6c 6f 70 70 79 44 72 69 76 65 3a 3a 73 65     .FloppyDrive::se
10005c48:	6c 65 63 74 0a 00 00 00 73 65 6c 65 63 74 69 6f     lect....selectio
10005c58:	6e 20 6c 6f 63 6b 65 64 20 6f 72 20 66 61 69 6c     n locked or fail
10005c68:	65 64 2e 2e 2e 0a 00 00 73 65 65 6b 3a 20 35 20     ed......seek: 5 
10005c78:	72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20 6e     retries, could n
10005c88:	6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00 73     ot calibrate...s
10005c98:	65 65 6b 20 28 73 65 6c 29 20 25 64 2e 0a 00 73     eek (sel) %d...s
10005ca8:	65 65 6b 20 28 6f 6e 29 20 25 64 2e 0a 00 73 65     eek (on) %d...se
10005cb8:	65 6b 20 28 31 29 2e 0a 00 73 65 65 6b 20 28 61     ek (1)...seek (a
10005cc8:	61 29 2e 0a 00 73 65 65 6b 20 28 62 62 29 2e 0a     a)...seek (bb)..
10005cd8:	00 73 65 65 6b 20 28 32 29 2e 0a 00 73 65 65 6b     .seek (2)...seek
10005ce8:	20 28 33 29 2e 0a 00 73 65 65 6b 20 28 34 29 2e      (3)...seek (4).
10005cf8:	0a 00 73 65 65 6b 20 28 6e 69 72 71 29 2e 0a 00     ..seek (nirq)...
10005d08:	73 65 65 6b 20 28 35 29 2e 0a 00 73 65 65 6b 20     seek (5)...seek 
10005d18:	28 73 69 64 29 2e 0a 00 73 65 65 6b 20 28 6f 66     (sid)...seek (of
10005d28:	66 29 2e 0a 00 73 65 65 6b 20 28 75 6e 29 2e 0a     f)...seek (un)..
10005d38:	00 00 00 00 63 61 6c 69 62 72 61 74 65 3a 20 35     ....calibrate: 5
10005d48:	20 72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20      retries, could 
10005d58:	6e 6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00     not calibrate...
10005d68:	63 61 6c 20 28 6f 6e 29 2c 20 25 64 0a 00 63 61     cal (on), %d..ca
10005d78:	6c 20 28 30 29 0a 00 63 61 6c 20 28 31 29 0a 00     l (0)..cal (1)..
10005d88:	63 61 6c 20 28 32 29 0a 00 63 61 6c 20 28 33 29     cal (2)..cal (3)
10005d98:	0a 00 63 61 6c 20 28 34 29 0a 00 63 61 6c 20 28     ..cal (4)..cal (
10005da8:	35 29 0a 00 20 72 65 74 72 79 3a 20 0a 00 41 62     5).. retry: ..Ab
10005db8:	6f 75 74 20 74 6f 20 73 65 65 6b 2e 0a 00 53 65     out to seek...Se
10005dc8:	65 6b 20 64 6f 6e 65 2e 0a 00 4d 6f 74 6f 72 20     ek done...Motor 
10005dd8:	6f 6e 2e 0a 00 53 65 6c 65 63 74 65 64 2e 0a 00     on...Selected...
10005de8:	44 4d 41 20 69 6e 69 74 27 64 2e 0a 00 73 6c 65     DMA init'd...sle
10005df8:	65 70 20 64 6f 6e 65 0a 00 61 62 6f 75 74 20 74     ep done..about t
10005e08:	6f 20 77 61 69 74 49 52 51 2e 0a 00 6e 6f 20 49     o waitIRQ...no I
10005e18:	52 51 2e 0a 00 67 6f 74 20 49 52 51 2e 0a 00 66     RQ...got IRQ...f
10005e28:	61 69 6c 75 72 65 20 72 65 61 64 69 6e 67 20 73     ailure reading s
10005e38:	74 61 74 75 73 2e 0a 00 72 65 61 64 20 72 65 73     tatus...read res
10005e48:	75 6c 74 20 62 79 74 65 73 2e 0a 00 6d 6f 74 6f     ult bytes...moto
10005e58:	72 20 6f 66 66 0a 00 75 6e 73 65 6c 65 63 74 2e     r off..unselect.
10005e68:	0a 00 43 61 63 68 65 73 20 68 61 76 65 20 62 65     ..Caches have be
10005e78:	65 6e 20 70 75 72 67 65 64 2e 0a 00 66 6c 6f 70     en purged...flop
10005e88:	70 79 20 72 65 61 64 20 63 6f 75 6e 74 20 6e 6f     py read count no
10005e98:	74 20 31 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     t 1.FloppyDrive:
10005ea8:	3a 72 65 61 64 20 63 61 6c 6c 65 64 2e 0a 00 43     :read called...C
10005eb8:	20 30 78 25 58 2c 20 48 20 30 78 25 58 2c 20 53      0x%X, H 0x%X, S
10005ec8:	20 30 78 25 58 0a 00 72 65 61 64 69 6e 67 20 74      0x%X..reading t
10005ed8:	72 61 63 6b 2e 0a 00 90                             rack....

10005ee0 <vtable for FloppyDrive>:
	...
	10005ee8: R_386_32	FloppyDrive::~FloppyDrive()
	10005eec: R_386_32	FloppyDrive::~FloppyDrive()
	10005ef0: R_386_32	FloppyDrive::open(int, int, void*)
	10005ef4: R_386_32	FloppyDrive::close(int, int, void*)
	10005ef8: R_386_32	Device::hibernate()
	10005efc: R_386_32	Device::wake()
	10005f00: R_386_32	Device::detect()
	10005f04: R_386_32	Device::disableLegacy()
	10005f08: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005f0c: R_386_32	FloppyDrive::eject()
	10005f10: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	10005f14: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10005f18 <vtable for Floppy>:
	...
	10005f20: R_386_32	Floppy::~Floppy()
	10005f24: R_386_32	Floppy::~Floppy()
	10005f28: R_386_32	Floppy::open(int, int, void*)
	10005f2c: R_386_32	Floppy::close(int, int, void*)
	10005f30: R_386_32	Device::hibernate()
	10005f34: R_386_32	Device::wake()
	10005f38: R_386_32	Device::detect()
	10005f3c: R_386_32	Device::disableLegacy()
	10005f40: R_386_32	Device::powerSaving(PowerSavingLevel)

10005f44 <PHYS_RAM_TABLE_SIZE>:
10005f44:	13 05 00 00                                         ....

10005f48 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005f48:	24 05 00 00                                         $...

10005f4c <PHYS_RAM_TABLE>:
10005f4c:	00 06 00 00                                         ....

10005f50 <PHYS_DMA_MEMORY_1>:
10005f50:	00 00 01 00                                         ....

10005f54 <PHYS_PHYS_PAGE_BITMAP>:
10005f54:	00 00 02 00                                         ....

10005f58 <PHYS_VIRT_PAGE_BITMAP>:
10005f58:	00 00 04 00                                         ....

10005f5c <PHYS_DMA_MEMORY_2>:
10005f5c:	00 00 06 00                                         ....

10005f60 <PHYS_ALLOCED_VIRT_PAGES>:
10005f60:	00 00 10 00                                         ....

10005f64 <PHYS_KRNL_PAGE_DIRECTORY>:
10005f64:	00 10 00 00                                         ....

10005f68 <VIRT_KERNEL_BASE>:
10005f68:	00 00 00 c0                                         ....

10005f6c <VIRT_LOW_MEGS>:
10005f6c:	00 00 00 c2                                         ....

10005f70 <VIRT_CPU_SPECIFIC>:
10005f70:	00 00 40 c2                                         ..@.

10005f74 <VIRT_RECURSIVE_SPOT_1>:
10005f74:	00 00 80 c2                                         ....

10005f78 <VIRT_RECURSIVE_SPOT_2>:
10005f78:	00 00 c0 c2                                         ....

10005f7c <VIRT_DMA_MEMORY_1>:
10005f7c:	00 00 01 c2                                         ....

10005f80 <SIZE_DMA_MEMORY_1>:
10005f80:	00 00 01 00                                         ....

10005f84 <VIRT_DMA_MEMORY_2>:
10005f84:	00 00 06 c2                                         ....

10005f88 <SIZE_DMA_MEMORY_2>:
10005f88:	00 00 02 00                                         ....

10005f8c <VIRT_KRNL_PAGE_DIRECTORY>:
10005f8c:	00 10 00 c2                                         ....

10005f90 <VIRT_PHYS_PAGE_BITMAP>:
10005f90:	00 00 02 c2                                         ....

10005f94 <SIZE_PHYS_PAGE_BITMAP>:
10005f94:	00 00 02 00                                         ....

10005f98 <VIRT_VIRT_PAGE_BITMAP>:
10005f98:	00 00 04 c2                                         ....

10005f9c <SIZE_VIRT_PAGE_BITMAP>:
10005f9c:	00 80 00 00                                         ....

10005fa0 <VIRT_RAM_TABLE>:
10005fa0:	00 06 00 c2                                         ....

10005fa4 <VIRT_RAM_TABLE_SIZE>:
10005fa4:	13 05 00 c2                                         ....

10005fa8 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005fa8:	24 05 00 c2                                         $...

10005fac <SIZE_APP_STACK_USER>:
10005fac:	00 00 18 00                                         ....

10005fb0 <SIZE_APP_STACK_KRNL>:
10005fb0:	00 00 08 00                                         ....

10005fb4 <SIZE_APP_STACK_TOTAL>:
10005fb4:	00 00 20 00                                         .. .

10005fb8 <VIRT_APP_DATA>:
10005fb8:	00 00 00 10                                         ....

10005fbc <VIRT_APP_STACK_USER_TOP>:
10005fbc:	00 00 00 02                                         ....

10005fc0 <VIRT_APP_STACK_KRNL_TOP>:
10005fc0:	00 00 e8 01                                         ....

10005fc4 <VIRT_HEAP_MIN>:
10005fc4:	00 00 00 c8                                         ....

10005fc8 <VIRT_HEAP_MAX>:
10005fc8:	ff ff ff ef                                         ....

10005fcc <VIRT_SBRK_MIN>:
10005fcc:	00 00 00 f0                                         ....

10005fd0 <VIRT_SBRK_MAX>:
10005fd0:	00 00 c0 ff                                         ....

10005fd4 <VIRT_ALLOCED_VIRT_PAGES>:
10005fd4:	00 00 10 c2                                         ....

10005fd8 <VIRT_ACPI_DRIVER>:
10005fd8:	00 40 48 c2                                         .@H.

10005fdc <TERMINAL_KEYBUFFER_IN_SIZE>:
10005fdc:	30 00 00 00                                         0...

10005fe0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005fe0:	80 00 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ....Gameport.f..

10005ff0 <vtable for Gameport>:
	...
	10005ff8: R_386_32	Gameport::~Gameport()
	10005ffc: R_386_32	Gameport::~Gameport()
	10006000: R_386_32	Gameport::open(int, int, void*)
	10006004: R_386_32	Gameport::close(int, int, void*)
	10006008: R_386_32	Device::hibernate()
	1000600c: R_386_32	Device::wake()
	10006010: R_386_32	Gameport::detect()
	10006014: R_386_32	Device::disableLegacy()
	10006018: R_386_32	Device::powerSaving(PowerSavingLevel)
	1000601c: R_386_32	Gameport::read(int)
10006020:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	10006028: R_386_32	non-virtual thunk to Gameport::read(int)

1000602c <vtable for JoystickHost>:
	...
	10006034: R_386_32	__cxa_pure_virtual

10006038 <PHYS_RAM_TABLE_SIZE>:
10006038:	13 05 00 00                                         ....

1000603c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000603c:	24 05 00 00                                         $...

10006040 <PHYS_RAM_TABLE>:
10006040:	00 06 00 00                                         ....

10006044 <PHYS_DMA_MEMORY_1>:
10006044:	00 00 01 00                                         ....

10006048 <PHYS_PHYS_PAGE_BITMAP>:
10006048:	00 00 02 00                                         ....

1000604c <PHYS_VIRT_PAGE_BITMAP>:
1000604c:	00 00 04 00                                         ....

10006050 <PHYS_DMA_MEMORY_2>:
10006050:	00 00 06 00                                         ....

10006054 <PHYS_ALLOCED_VIRT_PAGES>:
10006054:	00 00 10 00                                         ....

10006058 <PHYS_KRNL_PAGE_DIRECTORY>:
10006058:	00 10 00 00                                         ....

1000605c <VIRT_KERNEL_BASE>:
1000605c:	00 00 00 c0                                         ....

10006060 <VIRT_LOW_MEGS>:
10006060:	00 00 00 c2                                         ....

10006064 <VIRT_CPU_SPECIFIC>:
10006064:	00 00 40 c2                                         ..@.

10006068 <VIRT_RECURSIVE_SPOT_1>:
10006068:	00 00 80 c2                                         ....

1000606c <VIRT_RECURSIVE_SPOT_2>:
1000606c:	00 00 c0 c2                                         ....

10006070 <VIRT_DMA_MEMORY_1>:
10006070:	00 00 01 c2                                         ....

10006074 <SIZE_DMA_MEMORY_1>:
10006074:	00 00 01 00                                         ....

10006078 <VIRT_DMA_MEMORY_2>:
10006078:	00 00 06 c2                                         ....

1000607c <SIZE_DMA_MEMORY_2>:
1000607c:	00 00 02 00                                         ....

10006080 <VIRT_KRNL_PAGE_DIRECTORY>:
10006080:	00 10 00 c2                                         ....

10006084 <VIRT_PHYS_PAGE_BITMAP>:
10006084:	00 00 02 c2                                         ....

10006088 <SIZE_PHYS_PAGE_BITMAP>:
10006088:	00 00 02 00                                         ....

1000608c <VIRT_VIRT_PAGE_BITMAP>:
1000608c:	00 00 04 c2                                         ....

10006090 <SIZE_VIRT_PAGE_BITMAP>:
10006090:	00 80 00 00                                         ....

10006094 <VIRT_RAM_TABLE>:
10006094:	00 06 00 c2                                         ....

10006098 <VIRT_RAM_TABLE_SIZE>:
10006098:	13 05 00 c2                                         ....

1000609c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000609c:	24 05 00 c2                                         $...

100060a0 <SIZE_APP_STACK_USER>:
100060a0:	00 00 18 00                                         ....

100060a4 <SIZE_APP_STACK_KRNL>:
100060a4:	00 00 08 00                                         ....

100060a8 <SIZE_APP_STACK_TOTAL>:
100060a8:	00 00 20 00                                         .. .

100060ac <VIRT_APP_DATA>:
100060ac:	00 00 00 10                                         ....

100060b0 <VIRT_APP_STACK_USER_TOP>:
100060b0:	00 00 00 02                                         ....

100060b4 <VIRT_APP_STACK_KRNL_TOP>:
100060b4:	00 00 e8 01                                         ....

100060b8 <VIRT_HEAP_MIN>:
100060b8:	00 00 00 c8                                         ....

100060bc <VIRT_HEAP_MAX>:
100060bc:	ff ff ff ef                                         ....

100060c0 <VIRT_SBRK_MIN>:
100060c0:	00 00 00 f0                                         ....

100060c4 <VIRT_SBRK_MAX>:
100060c4:	00 00 c0 ff                                         ....

100060c8 <VIRT_ALLOCED_VIRT_PAGES>:
100060c8:	00 00 10 c2                                         ....

100060cc <VIRT_ACPI_DRIVER>:
100060cc:	00 40 48 c2                                         .@H.

100060d0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100060d0:	30 00 00 00                                         0...

100060d4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100060d4:	80 00 00 00                                         ....

100060d8 <CSWTCH.11>:
100060d8:	00 02 04 06 c0 c4 c8 cc                             ........

100060e0 <CSWTCH.12>:
100060e0:	01 03 05 07 c2 c6 ca ce                             ........

100060e8 <CSWTCH.13>:
100060e8:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
100060f8:	61 6e 67 65 2e 0a 00 90                             ange....

10006100 <vtable for DMA>:
	...
	10006108: R_386_32	DMA::~DMA()
	1000610c: R_386_32	DMA::~DMA()
	10006110: R_386_32	DMA::open(int, int, void*)
	10006114: R_386_32	DMA::close(int, int, void*)
	10006118: R_386_32	Device::hibernate()
	1000611c: R_386_32	Device::wake()
	10006120: R_386_32	Device::detect()
	10006124: R_386_32	Device::disableLegacy()
	10006128: R_386_32	Device::powerSaving(PowerSavingLevel)

1000612c <PHYS_RAM_TABLE_SIZE>:
1000612c:	13 05 00 00                                         ....

10006130 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006130:	24 05 00 00                                         $...

10006134 <PHYS_RAM_TABLE>:
10006134:	00 06 00 00                                         ....

10006138 <PHYS_DMA_MEMORY_1>:
10006138:	00 00 01 00                                         ....

1000613c <PHYS_PHYS_PAGE_BITMAP>:
1000613c:	00 00 02 00                                         ....

10006140 <PHYS_VIRT_PAGE_BITMAP>:
10006140:	00 00 04 00                                         ....

10006144 <PHYS_DMA_MEMORY_2>:
10006144:	00 00 06 00                                         ....

10006148 <PHYS_ALLOCED_VIRT_PAGES>:
10006148:	00 00 10 00                                         ....

1000614c <PHYS_KRNL_PAGE_DIRECTORY>:
1000614c:	00 10 00 00                                         ....

10006150 <VIRT_KERNEL_BASE>:
10006150:	00 00 00 c0                                         ....

10006154 <VIRT_LOW_MEGS>:
10006154:	00 00 00 c2                                         ....

10006158 <VIRT_CPU_SPECIFIC>:
10006158:	00 00 40 c2                                         ..@.

1000615c <VIRT_RECURSIVE_SPOT_1>:
1000615c:	00 00 80 c2                                         ....

10006160 <VIRT_RECURSIVE_SPOT_2>:
10006160:	00 00 c0 c2                                         ....

10006164 <VIRT_DMA_MEMORY_1>:
10006164:	00 00 01 c2                                         ....

10006168 <SIZE_DMA_MEMORY_1>:
10006168:	00 00 01 00                                         ....

1000616c <VIRT_DMA_MEMORY_2>:
1000616c:	00 00 06 c2                                         ....

10006170 <SIZE_DMA_MEMORY_2>:
10006170:	00 00 02 00                                         ....

10006174 <VIRT_KRNL_PAGE_DIRECTORY>:
10006174:	00 10 00 c2                                         ....

10006178 <VIRT_PHYS_PAGE_BITMAP>:
10006178:	00 00 02 c2                                         ....

1000617c <SIZE_PHYS_PAGE_BITMAP>:
1000617c:	00 00 02 00                                         ....

10006180 <VIRT_VIRT_PAGE_BITMAP>:
10006180:	00 00 04 c2                                         ....

10006184 <SIZE_VIRT_PAGE_BITMAP>:
10006184:	00 80 00 00                                         ....

10006188 <VIRT_RAM_TABLE>:
10006188:	00 06 00 c2                                         ....

1000618c <VIRT_RAM_TABLE_SIZE>:
1000618c:	13 05 00 c2                                         ....

10006190 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006190:	24 05 00 c2                                         $...

10006194 <SIZE_APP_STACK_USER>:
10006194:	00 00 18 00                                         ....

10006198 <SIZE_APP_STACK_KRNL>:
10006198:	00 00 08 00                                         ....

1000619c <SIZE_APP_STACK_TOTAL>:
1000619c:	00 00 20 00                                         .. .

100061a0 <VIRT_APP_DATA>:
100061a0:	00 00 00 10                                         ....

100061a4 <VIRT_APP_STACK_USER_TOP>:
100061a4:	00 00 00 02                                         ....

100061a8 <VIRT_APP_STACK_KRNL_TOP>:
100061a8:	00 00 e8 01                                         ....

100061ac <VIRT_HEAP_MIN>:
100061ac:	00 00 00 c8                                         ....

100061b0 <VIRT_HEAP_MAX>:
100061b0:	ff ff ff ef                                         ....

100061b4 <VIRT_SBRK_MIN>:
100061b4:	00 00 00 f0                                         ....

100061b8 <VIRT_SBRK_MAX>:
100061b8:	00 00 c0 ff                                         ....

100061bc <VIRT_ALLOCED_VIRT_PAGES>:
100061bc:	00 00 10 c2                                         ....

100061c0 <VIRT_ACPI_DRIVER>:
100061c0:	00 40 48 c2                                         .@H.

100061c4 <TERMINAL_KEYBUFFER_IN_SIZE>:
100061c4:	30 00 00 00                                         0...

100061c8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100061c8:	80 00 00 00                                         ....

100061cc <vtable for PS2>:
	...
	100061d4: R_386_32	PS2::~PS2()
	100061d8: R_386_32	PS2::~PS2()
	100061dc: R_386_32	PS2::open(int, int, void*)
	100061e0: R_386_32	PS2::close(int, int, void*)
	100061e4: R_386_32	Device::hibernate()
	100061e8: R_386_32	Device::wake()
	100061ec: R_386_32	PS2::detect()
	100061f0: R_386_32	Device::disableLegacy()
	100061f4: R_386_32	Device::powerSaving(PowerSavingLevel)
100061f8:	66 90 66 90 66 90 66 90                             f.f.f.f.

10006200 <PHYS_RAM_TABLE_SIZE>:
10006200:	13 05 00 00                                         ....

10006204 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006204:	24 05 00 00                                         $...

10006208 <PHYS_RAM_TABLE>:
10006208:	00 06 00 00                                         ....

1000620c <PHYS_DMA_MEMORY_1>:
1000620c:	00 00 01 00                                         ....

10006210 <PHYS_PHYS_PAGE_BITMAP>:
10006210:	00 00 02 00                                         ....

10006214 <PHYS_VIRT_PAGE_BITMAP>:
10006214:	00 00 04 00                                         ....

10006218 <PHYS_DMA_MEMORY_2>:
10006218:	00 00 06 00                                         ....

1000621c <PHYS_ALLOCED_VIRT_PAGES>:
1000621c:	00 00 10 00                                         ....

10006220 <PHYS_KRNL_PAGE_DIRECTORY>:
10006220:	00 10 00 00                                         ....

10006224 <VIRT_KERNEL_BASE>:
10006224:	00 00 00 c0                                         ....

10006228 <VIRT_LOW_MEGS>:
10006228:	00 00 00 c2                                         ....

1000622c <VIRT_CPU_SPECIFIC>:
1000622c:	00 00 40 c2                                         ..@.

10006230 <VIRT_RECURSIVE_SPOT_1>:
10006230:	00 00 80 c2                                         ....

10006234 <VIRT_RECURSIVE_SPOT_2>:
10006234:	00 00 c0 c2                                         ....

10006238 <VIRT_DMA_MEMORY_1>:
10006238:	00 00 01 c2                                         ....

1000623c <SIZE_DMA_MEMORY_1>:
1000623c:	00 00 01 00                                         ....

10006240 <VIRT_DMA_MEMORY_2>:
10006240:	00 00 06 c2                                         ....

10006244 <SIZE_DMA_MEMORY_2>:
10006244:	00 00 02 00                                         ....

10006248 <VIRT_KRNL_PAGE_DIRECTORY>:
10006248:	00 10 00 c2                                         ....

1000624c <VIRT_PHYS_PAGE_BITMAP>:
1000624c:	00 00 02 c2                                         ....

10006250 <SIZE_PHYS_PAGE_BITMAP>:
10006250:	00 00 02 00                                         ....

10006254 <VIRT_VIRT_PAGE_BITMAP>:
10006254:	00 00 04 c2                                         ....

10006258 <SIZE_VIRT_PAGE_BITMAP>:
10006258:	00 80 00 00                                         ....

1000625c <VIRT_RAM_TABLE>:
1000625c:	00 06 00 c2                                         ....

10006260 <VIRT_RAM_TABLE_SIZE>:
10006260:	13 05 00 c2                                         ....

10006264 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006264:	24 05 00 c2                                         $...

10006268 <SIZE_APP_STACK_USER>:
10006268:	00 00 18 00                                         ....

1000626c <SIZE_APP_STACK_KRNL>:
1000626c:	00 00 08 00                                         ....

10006270 <SIZE_APP_STACK_TOTAL>:
10006270:	00 00 20 00                                         .. .

10006274 <VIRT_APP_DATA>:
10006274:	00 00 00 10                                         ....

10006278 <VIRT_APP_STACK_USER_TOP>:
10006278:	00 00 00 02                                         ....

1000627c <VIRT_APP_STACK_KRNL_TOP>:
1000627c:	00 00 e8 01                                         ....

10006280 <VIRT_HEAP_MIN>:
10006280:	00 00 00 c8                                         ....

10006284 <VIRT_HEAP_MAX>:
10006284:	ff ff ff ef                                         ....

10006288 <VIRT_SBRK_MIN>:
10006288:	00 00 00 f0                                         ....

1000628c <VIRT_SBRK_MAX>:
1000628c:	00 00 c0 ff                                         ....

10006290 <VIRT_ALLOCED_VIRT_PAGES>:
10006290:	00 00 10 c2                                         ....

10006294 <VIRT_ACPI_DRIVER>:
10006294:	00 40 48 c2                                         .@H.

10006298 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006298:	80 00 00 00                                         ....

1000629c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000629c:	80 00 00 00                                         ....

100062a0 <PS2Keyboard::internalMapperLower>:
100062a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100062b0:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
100062c0:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
100062d0:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
100062e0:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
100062f0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10006300:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006310:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006320:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100063a0 <PS2Keyboard::internalMapperUpper>:
100063a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100063b0:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
100063c0:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
100063d0:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
100063e0:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
100063f0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10006400:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006410:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006420:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

100064a0 <PS2Keyboard::internalMapCapLower>:
100064a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100064b0:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
100064c0:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
100064d0:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
100064e0:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
100064f0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10006500:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006510:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006520:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100065a0 <PS2Keyboard::internalMapCapUpper>:
100065a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100065b0:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
100065c0:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
100065d0:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
100065e0:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
100065f0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10006600:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006610:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006620:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

100066a0 <PS2Keyboard::internalMapperLowerBad>:
100066a0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
100066b0:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
100066c0:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
100066d0:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
100066e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100066f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006700:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006710:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006720:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10006730:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10006740:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10006750:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10006760:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006770:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006780:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006790:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100067a0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
100067b0:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
100067c0:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
100067d0:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
100067e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100067f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006800:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006810:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006820:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10006830:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10006840:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10006850:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10006860:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006870:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006880:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006890:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100068a0:	00 66 90 90                                         .f..

100068a4 <vtable for PS2Keyboard>:
	...
	100068ac: R_386_32	PS2Keyboard::~PS2Keyboard()
	100068b0: R_386_32	PS2Keyboard::~PS2Keyboard()
	100068b4: R_386_32	PS2Keyboard::open(int, int, void*)
	100068b8: R_386_32	PS2Keyboard::close(int, int, void*)
	100068bc: R_386_32	Device::hibernate()
	100068c0: R_386_32	Device::wake()
	100068c4: R_386_32	Device::detect()
	100068c8: R_386_32	Device::disableLegacy()
	100068cc: R_386_32	Device::powerSaving(PowerSavingLevel)
	100068d0: R_386_32	PS2Keyboard::setRepeatRate(int)
	100068d4: R_386_32	PS2Keyboard::setRepeatDelay(int)

100068d8 <PHYS_RAM_TABLE_SIZE>:
100068d8:	13 05 00 00                                         ....

100068dc <PHYS_HIGHEST_UNUSED_ADDRESS>:
100068dc:	24 05 00 00                                         $...

100068e0 <PHYS_RAM_TABLE>:
100068e0:	00 06 00 00                                         ....

100068e4 <PHYS_DMA_MEMORY_1>:
100068e4:	00 00 01 00                                         ....

100068e8 <PHYS_PHYS_PAGE_BITMAP>:
100068e8:	00 00 02 00                                         ....

100068ec <PHYS_VIRT_PAGE_BITMAP>:
100068ec:	00 00 04 00                                         ....

100068f0 <PHYS_DMA_MEMORY_2>:
100068f0:	00 00 06 00                                         ....

100068f4 <PHYS_ALLOCED_VIRT_PAGES>:
100068f4:	00 00 10 00                                         ....

100068f8 <PHYS_KRNL_PAGE_DIRECTORY>:
100068f8:	00 10 00 00                                         ....

100068fc <VIRT_KERNEL_BASE>:
100068fc:	00 00 00 c0                                         ....

10006900 <VIRT_LOW_MEGS>:
10006900:	00 00 00 c2                                         ....

10006904 <VIRT_CPU_SPECIFIC>:
10006904:	00 00 40 c2                                         ..@.

10006908 <VIRT_RECURSIVE_SPOT_1>:
10006908:	00 00 80 c2                                         ....

1000690c <VIRT_RECURSIVE_SPOT_2>:
1000690c:	00 00 c0 c2                                         ....

10006910 <VIRT_DMA_MEMORY_1>:
10006910:	00 00 01 c2                                         ....

10006914 <SIZE_DMA_MEMORY_1>:
10006914:	00 00 01 00                                         ....

10006918 <VIRT_DMA_MEMORY_2>:
10006918:	00 00 06 c2                                         ....

1000691c <SIZE_DMA_MEMORY_2>:
1000691c:	00 00 02 00                                         ....

10006920 <VIRT_KRNL_PAGE_DIRECTORY>:
10006920:	00 10 00 c2                                         ....

10006924 <VIRT_PHYS_PAGE_BITMAP>:
10006924:	00 00 02 c2                                         ....

10006928 <SIZE_PHYS_PAGE_BITMAP>:
10006928:	00 00 02 00                                         ....

1000692c <VIRT_VIRT_PAGE_BITMAP>:
1000692c:	00 00 04 c2                                         ....

10006930 <SIZE_VIRT_PAGE_BITMAP>:
10006930:	00 80 00 00                                         ....

10006934 <VIRT_RAM_TABLE>:
10006934:	00 06 00 c2                                         ....

10006938 <VIRT_RAM_TABLE_SIZE>:
10006938:	13 05 00 c2                                         ....

1000693c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000693c:	24 05 00 c2                                         $...

10006940 <SIZE_APP_STACK_USER>:
10006940:	00 00 18 00                                         ....

10006944 <SIZE_APP_STACK_KRNL>:
10006944:	00 00 08 00                                         ....

10006948 <SIZE_APP_STACK_TOTAL>:
10006948:	00 00 20 00                                         .. .

1000694c <VIRT_APP_DATA>:
1000694c:	00 00 00 10                                         ....

10006950 <VIRT_APP_STACK_USER_TOP>:
10006950:	00 00 00 02                                         ....

10006954 <VIRT_APP_STACK_KRNL_TOP>:
10006954:	00 00 e8 01                                         ....

10006958 <VIRT_HEAP_MIN>:
10006958:	00 00 00 c8                                         ....

1000695c <VIRT_HEAP_MAX>:
1000695c:	ff ff ff ef                                         ....

10006960 <VIRT_SBRK_MIN>:
10006960:	00 00 00 f0                                         ....

10006964 <VIRT_SBRK_MAX>:
10006964:	00 00 c0 ff                                         ....

10006968 <VIRT_ALLOCED_VIRT_PAGES>:
10006968:	00 00 10 c2                                         ....

1000696c <VIRT_ACPI_DRIVER>:
1000696c:	00 40 48 c2                                         .@H.

10006970 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006970:	80 00 00 00                                         ....

10006974 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006974:	80 00 00 00                                         ....

10006978 <vtable for PS2Mouse>:
	...
	10006980: R_386_32	PS2Mouse::~PS2Mouse()
	10006984: R_386_32	PS2Mouse::~PS2Mouse()
	10006988: R_386_32	PS2Mouse::open(int, int, void*)
	1000698c: R_386_32	PS2Mouse::close(int, int, void*)
	10006990: R_386_32	Device::hibernate()
	10006994: R_386_32	Device::wake()
	10006998: R_386_32	PS2Mouse::detect()
	1000699c: R_386_32	Device::disableLegacy()
	100069a0: R_386_32	Device::powerSaving(PowerSavingLevel)

100069a4 <PHYS_RAM_TABLE_SIZE>:
100069a4:	13 05 00 00                                         ....

100069a8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100069a8:	24 05 00 00                                         $...

100069ac <PHYS_RAM_TABLE>:
100069ac:	00 06 00 00                                         ....

100069b0 <PHYS_DMA_MEMORY_1>:
100069b0:	00 00 01 00                                         ....

100069b4 <PHYS_PHYS_PAGE_BITMAP>:
100069b4:	00 00 02 00                                         ....

100069b8 <PHYS_VIRT_PAGE_BITMAP>:
100069b8:	00 00 04 00                                         ....

100069bc <PHYS_DMA_MEMORY_2>:
100069bc:	00 00 06 00                                         ....

100069c0 <PHYS_ALLOCED_VIRT_PAGES>:
100069c0:	00 00 10 00                                         ....

100069c4 <PHYS_KRNL_PAGE_DIRECTORY>:
100069c4:	00 10 00 00                                         ....

100069c8 <VIRT_KERNEL_BASE>:
100069c8:	00 00 00 c0                                         ....

100069cc <VIRT_LOW_MEGS>:
100069cc:	00 00 00 c2                                         ....

100069d0 <VIRT_CPU_SPECIFIC>:
100069d0:	00 00 40 c2                                         ..@.

100069d4 <VIRT_RECURSIVE_SPOT_1>:
100069d4:	00 00 80 c2                                         ....

100069d8 <VIRT_RECURSIVE_SPOT_2>:
100069d8:	00 00 c0 c2                                         ....

100069dc <VIRT_DMA_MEMORY_1>:
100069dc:	00 00 01 c2                                         ....

100069e0 <SIZE_DMA_MEMORY_1>:
100069e0:	00 00 01 00                                         ....

100069e4 <VIRT_DMA_MEMORY_2>:
100069e4:	00 00 06 c2                                         ....

100069e8 <SIZE_DMA_MEMORY_2>:
100069e8:	00 00 02 00                                         ....

100069ec <VIRT_KRNL_PAGE_DIRECTORY>:
100069ec:	00 10 00 c2                                         ....

100069f0 <VIRT_PHYS_PAGE_BITMAP>:
100069f0:	00 00 02 c2                                         ....

100069f4 <SIZE_PHYS_PAGE_BITMAP>:
100069f4:	00 00 02 00                                         ....

100069f8 <VIRT_VIRT_PAGE_BITMAP>:
100069f8:	00 00 04 c2                                         ....

100069fc <SIZE_VIRT_PAGE_BITMAP>:
100069fc:	00 80 00 00                                         ....

10006a00 <VIRT_RAM_TABLE>:
10006a00:	00 06 00 c2                                         ....

10006a04 <VIRT_RAM_TABLE_SIZE>:
10006a04:	13 05 00 c2                                         ....

10006a08 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006a08:	24 05 00 c2                                         $...

10006a0c <SIZE_APP_STACK_USER>:
10006a0c:	00 00 18 00                                         ....

10006a10 <SIZE_APP_STACK_KRNL>:
10006a10:	00 00 08 00                                         ....

10006a14 <SIZE_APP_STACK_TOTAL>:
10006a14:	00 00 20 00                                         .. .

10006a18 <VIRT_APP_DATA>:
10006a18:	00 00 00 10                                         ....

10006a1c <VIRT_APP_STACK_USER_TOP>:
10006a1c:	00 00 00 02                                         ....

10006a20 <VIRT_APP_STACK_KRNL_TOP>:
10006a20:	00 00 e8 01                                         ....

10006a24 <VIRT_HEAP_MIN>:
10006a24:	00 00 00 c8                                         ....

10006a28 <VIRT_HEAP_MAX>:
10006a28:	ff ff ff ef                                         ....

10006a2c <VIRT_SBRK_MIN>:
10006a2c:	00 00 00 f0                                         ....

10006a30 <VIRT_SBRK_MAX>:
10006a30:	00 00 c0 ff                                         ....

10006a34 <VIRT_ALLOCED_VIRT_PAGES>:
10006a34:	00 00 10 c2                                         ....

10006a38 <VIRT_ACPI_DRIVER>:
10006a38:	00 40 48 c2                                         .@H.

10006a3c <TERMINAL_KEYBUFFER_IN_SIZE>:
10006a3c:	30 00 00 00                                         0...

10006a40 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006a40:	80 00 00 00                                         ....

10006a44 <vtable for PS2Port>:
	...
	10006a4c: R_386_32	PS2Port::~PS2Port()
	10006a50: R_386_32	PS2Port::~PS2Port()
	10006a54: R_386_32	PS2Port::open(int, int, void*)
	10006a58: R_386_32	PS2Port::close(int, int, void*)
	10006a5c: R_386_32	Device::hibernate()
	10006a60: R_386_32	Device::wake()
	10006a64: R_386_32	PS2Port::detect()
	10006a68: R_386_32	Device::disableLegacy()
	10006a6c: R_386_32	Device::powerSaving(PowerSavingLevel)

10006a70 <PHYS_RAM_TABLE_SIZE>:
10006a70:	13 05 00 00                                         ....

10006a74 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006a74:	24 05 00 00                                         $...

10006a78 <PHYS_RAM_TABLE>:
10006a78:	00 06 00 00                                         ....

10006a7c <PHYS_DMA_MEMORY_1>:
10006a7c:	00 00 01 00                                         ....

10006a80 <PHYS_PHYS_PAGE_BITMAP>:
10006a80:	00 00 02 00                                         ....

10006a84 <PHYS_VIRT_PAGE_BITMAP>:
10006a84:	00 00 04 00                                         ....

10006a88 <PHYS_DMA_MEMORY_2>:
10006a88:	00 00 06 00                                         ....

10006a8c <PHYS_ALLOCED_VIRT_PAGES>:
10006a8c:	00 00 10 00                                         ....

10006a90 <PHYS_KRNL_PAGE_DIRECTORY>:
10006a90:	00 10 00 00                                         ....

10006a94 <VIRT_KERNEL_BASE>:
10006a94:	00 00 00 c0                                         ....

10006a98 <VIRT_LOW_MEGS>:
10006a98:	00 00 00 c2                                         ....

10006a9c <VIRT_CPU_SPECIFIC>:
10006a9c:	00 00 40 c2                                         ..@.

10006aa0 <VIRT_RECURSIVE_SPOT_1>:
10006aa0:	00 00 80 c2                                         ....

10006aa4 <VIRT_RECURSIVE_SPOT_2>:
10006aa4:	00 00 c0 c2                                         ....

10006aa8 <VIRT_DMA_MEMORY_1>:
10006aa8:	00 00 01 c2                                         ....

10006aac <SIZE_DMA_MEMORY_1>:
10006aac:	00 00 01 00                                         ....

10006ab0 <VIRT_DMA_MEMORY_2>:
10006ab0:	00 00 06 c2                                         ....

10006ab4 <SIZE_DMA_MEMORY_2>:
10006ab4:	00 00 02 00                                         ....

10006ab8 <VIRT_KRNL_PAGE_DIRECTORY>:
10006ab8:	00 10 00 c2                                         ....

10006abc <VIRT_PHYS_PAGE_BITMAP>:
10006abc:	00 00 02 c2                                         ....

10006ac0 <SIZE_PHYS_PAGE_BITMAP>:
10006ac0:	00 00 02 00                                         ....

10006ac4 <VIRT_VIRT_PAGE_BITMAP>:
10006ac4:	00 00 04 c2                                         ....

10006ac8 <SIZE_VIRT_PAGE_BITMAP>:
10006ac8:	00 80 00 00                                         ....

10006acc <VIRT_RAM_TABLE>:
10006acc:	00 06 00 c2                                         ....

10006ad0 <VIRT_RAM_TABLE_SIZE>:
10006ad0:	13 05 00 c2                                         ....

10006ad4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006ad4:	24 05 00 c2                                         $...

10006ad8 <SIZE_APP_STACK_USER>:
10006ad8:	00 00 18 00                                         ....

10006adc <SIZE_APP_STACK_KRNL>:
10006adc:	00 00 08 00                                         ....

10006ae0 <SIZE_APP_STACK_TOTAL>:
10006ae0:	00 00 20 00                                         .. .

10006ae4 <VIRT_APP_DATA>:
10006ae4:	00 00 00 10                                         ....

10006ae8 <VIRT_APP_STACK_USER_TOP>:
10006ae8:	00 00 00 02                                         ....

10006aec <VIRT_APP_STACK_KRNL_TOP>:
10006aec:	00 00 e8 01                                         ....

10006af0 <VIRT_HEAP_MIN>:
10006af0:	00 00 00 c8                                         ....

10006af4 <VIRT_HEAP_MAX>:
10006af4:	ff ff ff ef                                         ....

10006af8 <VIRT_SBRK_MIN>:
10006af8:	00 00 00 f0                                         ....

10006afc <VIRT_SBRK_MAX>:
10006afc:	00 00 c0 ff                                         ....

10006b00 <VIRT_ALLOCED_VIRT_PAGES>:
10006b00:	00 00 10 c2                                         ....

10006b04 <VIRT_ACPI_DRIVER>:
10006b04:	00 40 48 c2                                         .@H.

10006b08 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006b08:	30 00 00 00                                         0...

10006b0c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006b0c:	80 00 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 41 75     ....C:/Banana/Au
10006b1c:	64 69 6f 2f 77 69 6e 39 38 73 6e 64 2e 77 61 76     dio/win98snd.wav
10006b2c:	00 53 4f 4e 47 20 53 48 4f 55 4c 44 20 42 45 20     .SONG SHOULD BE 
10006b3c:	44 4f 4e 45 2e 0a 00 53 6f 75 6e 64 42 6c 61 73     DONE...SoundBlas
10006b4c:	74 65 72 20 31 36 00 53 42 31 36 20 49 52 51 2e     ter 16.SB16 IRQ.
10006b5c:	0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72 20 31     ..soundblaster 1
10006b6c:	36 2e 0a 00 43 41 4e 27 54 20 47 45 54 20 44 4d     6...CAN'T GET DM
10006b7c:	41 20 43 48 41 4e 4e 45 4c 20 35 21 00 73 6f 75     A CHANNEL 5!.sou
10006b8c:	6e 64 62 6c 61 73 74 65 72 20 31 36 20 2d 20 42     ndblaster 16 - B
10006b9c:	2e 0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72 3a     ...soundblaster:
10006bac:	20 44 4d 41 20 63 68 61 6e 6e 65 6c 20 35 20 68      DMA channel 5 h
10006bbc:	61 73 20 61 64 64 72 65 73 73 20 6f 66 20 30 78     as address of 0x
10006bcc:	25 58 0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72     %X..soundblaster
10006bdc:	3a 20 44 4d 41 20 63 68 61 6e 6e 65 6c 20 35 20     : DMA channel 5 
10006bec:	68 61 73 20 63 68 2e 20 6e 75 6d 2e 20 6f 66 20     has ch. num. of 
10006bfc:	30 78 25 58 0a 00 53 42 31 36 3a 20 63 75 72 72     0x%X..SB16: curr
10006c0c:	65 6e 74 20 44 4d 41 20 72 65 67 69 73 74 65 72     ent DMA register
10006c1c:	20 3d 20 30 78 25 78 0a 00 6f 6e 20 69 72 71 2c      = 0x%x..on irq,
10006c2c:	20 64 6d 61 31 36 41 64 64 72 20 3d 20 30 78 25      dma16Addr = 0x%
10006c3c:	58 2c 20 35 3a 3a 61 64 64 72 20 3d 20 30 78 25     X, 5::addr = 0x%
10006c4c:	58 0a 00 77 72 69 74 65 20 6c 6f 63 61 74 69 6f     X..write locatio
10006c5c:	6e 20 3d 20 30 78 25 58 0a 00 68 65 6c 6c 6f 20     n = 0x%X..hello 
10006c6c:	77 6f 72 6c 64 20 41 21 0a 00 68 65 6c 6c 6f 20     world A!..hello 
10006c7c:	77 6f 72 6c 64 20 42 21 0a 00 66 90                 world B!..f.

10006c88 <vtable for SoundBlaster16>:
	...
	10006c90: R_386_32	SoundBlaster16::~SoundBlaster16()
	10006c94: R_386_32	SoundBlaster16::~SoundBlaster16()
	10006c98: R_386_32	SoundBlaster16::open(int, int, void*)
	10006c9c: R_386_32	SoundBlaster16::close(int, int, void*)
	10006ca0: R_386_32	Device::hibernate()
	10006ca4: R_386_32	Device::wake()
	10006ca8: R_386_32	Device::detect()
	10006cac: R_386_32	Device::disableLegacy()
	10006cb0: R_386_32	Device::powerSaving(PowerSavingLevel)
	10006cb4: R_386_32	SoundBlaster16::beginPlayback()
	10006cb8: R_386_32	SoundBlaster16::stopPlayback()
