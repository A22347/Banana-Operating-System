
packages/banana/32/0002/ac97.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(Device*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(Device*)-0xa>	1000000d: R_386_PC32	start(Device*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(Device*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	83 ec 08             	sub    esp,0x8
1000001d:	83 ec 0c             	sub    esp,0xc
10000020:	68 94 0c 00 10       	push   0x10000c94	10000021: R_386_32	.text
10000025:	e8 fc ff ff ff       	call   10000026 <start(Device*)+0xf>	10000026: R_386_PC32	KeSetBootMessage(char const*)
1000002a:	83 c4 10             	add    esp,0x10
1000002d:	90                   	nop
1000002e:	c9                   	leave  
1000002f:	c3                   	ret    
10000030:	55                   	push   ebp
10000031:	89 e5                	mov    ebp,esp
10000033:	57                   	push   edi
10000034:	56                   	push   esi
10000035:	53                   	push   ebx
10000036:	83 ec 3c             	sub    esp,0x3c
10000039:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	1000003c: R_386_32	irqDisableCounter
10000040:	a1 00 00 00 00       	mov    eax,ds:0x0	10000041: R_386_32	irqDisableCounter
10000045:	85 c0                	test   eax,eax
10000047:	75 01                	jne    1000004a <start(Device*)+0x33>
10000049:	fb                   	sti    
1000004a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000004d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000050:	c7 45 dc 40 1f 00 00 	mov    DWORD PTR [ebp-0x24],0x1f40
10000057:	c7 45 d8 10 00 00 00 	mov    DWORD PTR [ebp-0x28],0x10
1000005e:	c7 45 d4 02 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x2
10000065:	c7 45 c0 1c 00 00 00 	mov    DWORD PTR [ebp-0x40],0x1c
1000006c:	83 ec 0c             	sub    esp,0xc
1000006f:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10000072:	e8 fc ff ff ff       	call   10000073 <start(Device*)+0x5c>	10000073: R_386_PC32	malloc
10000077:	83 c4 10             	add    esp,0x10
1000007a:	89 c3                	mov    ebx,eax
1000007c:	83 ec 0c             	sub    esp,0xc
1000007f:	68 00 00 06 00       	push   0x60000
10000084:	6a 02                	push   0x2
10000086:	6a 10                	push   0x10
10000088:	68 40 1f 00 00       	push   0x1f40
1000008d:	53                   	push   ebx
1000008e:	e8 fc ff ff ff       	call   1000008f <start(Device*)+0x78>	1000008f: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
10000093:	83 c4 20             	add    esp,0x20
10000096:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000099:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
1000009d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
100000a4:	83 ec 0c             	sub    esp,0xc
100000a7:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100000aa:	e8 fc ff ff ff       	call   100000ab <start(Device*)+0x94>	100000ab: R_386_PC32	malloc
100000af:	83 c4 10             	add    esp,0x10
100000b2:	89 c3                	mov    ebx,eax
100000b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100000b5: R_386_32	kernelProcess
100000b9:	83 ec 04             	sub    esp,0x4
100000bc:	50                   	push   eax
100000bd:	68 ac 0c 00 10       	push   0x10000cac	100000be: R_386_32	.text
100000c2:	53                   	push   ebx
100000c3:	e8 fc ff ff ff       	call   100000c4 <start(Device*)+0xad>	100000c4: R_386_PC32	File::File(char const*, Process*)
100000c8:	83 c4 10             	add    esp,0x10
100000cb:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
100000ce:	83 ec 08             	sub    esp,0x8
100000d1:	6a 01                	push   0x1
100000d3:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100000d6:	e8 fc ff ff ff       	call   100000d7 <start(Device*)+0xc0>	100000d7: R_386_PC32	File::open(FileOpenMode)
100000db:	83 c4 10             	add    esp,0x10
100000de:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
100000e5:	83 ec 0c             	sub    esp,0xc
100000e8:	68 bc 0c 00 10       	push   0x10000cbc	100000e9: R_386_32	.text
100000ed:	e8 fc ff ff ff       	call   100000ee <start(Device*)+0xd7>	100000ee: R_386_PC32	Dbg::kprintf(char const*, ...)
100000f2:	83 c4 10             	add    esp,0x10
100000f5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100000f8:	8b 00                	mov    eax,DWORD PTR [eax]
100000fa:	83 c0 0c             	add    eax,0xc
100000fd:	8b 00                	mov    eax,DWORD PTR [eax]
100000ff:	83 ec 0c             	sub    esp,0xc
10000102:	8d 55 bc             	lea    edx,[ebp-0x44]
10000105:	52                   	push   edx
10000106:	68 00 00 00 00       	push   0x0	10000107: R_386_32	buf
1000010b:	6a 00                	push   0x0
1000010d:	68 00 20 00 00       	push   0x2000
10000112:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000115:	ff d0                	call   eax
10000117:	83 c4 20             	add    esp,0x20
1000011a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000011d:	83 ec 0c             	sub    esp,0xc
10000120:	68 cc 0c 00 10       	push   0x10000ccc	10000121: R_386_32	.text
10000125:	e8 fc ff ff ff       	call   10000126 <start(Device*)+0x10f>	10000126: R_386_PC32	Dbg::kprintf(char const*, ...)
1000012a:	83 c4 10             	add    esp,0x10
1000012d:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10000130:	85 c0                	test   eax,eax
10000132:	74 06                	je     1000013a <start(Device*)+0x123>
10000134:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
10000138:	74 25                	je     1000015f <start(Device*)+0x148>
1000013a:	83 ec 0c             	sub    esp,0xc
1000013d:	68 db 0c 00 10       	push   0x10000cdb	1000013e: R_386_32	.text
10000142:	e8 fc ff ff ff       	call   10000143 <start(Device*)+0x12c>	10000143: R_386_PC32	Dbg::kprintf(char const*, ...)
10000147:	83 c4 10             	add    esp,0x10
1000014a:	83 ec 0c             	sub    esp,0xc
1000014d:	68 f1 0c 00 10       	push   0x10000cf1	1000014e: R_386_32	.text
10000152:	e8 fc ff ff ff       	call   10000153 <start(Device*)+0x13c>	10000153: R_386_PC32	KePanic(char const*)
10000157:	83 c4 10             	add    esp,0x10
1000015a:	e9 4b 01 00 00       	jmp    100002aa <start(Device*)+0x293>
1000015f:	83 ec 0c             	sub    esp,0xc
10000162:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000165:	e8 fc ff ff ff       	call   10000166 <start(Device*)+0x14f>	10000166: R_386_PC32	SoundPort::getBufferUsed()
1000016a:	83 c4 10             	add    esp,0x10
1000016d:	83 ec 08             	sub    esp,0x8
10000170:	50                   	push   eax
10000171:	68 05 0d 00 10       	push   0x10000d05	10000172: R_386_32	.text
10000176:	e8 fc ff ff ff       	call   10000177 <start(Device*)+0x160>	10000177: R_386_PC32	Dbg::kprintf(char const*, ...)
1000017b:	83 c4 10             	add    esp,0x10
1000017e:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
10000181:	83 f0 01             	xor    eax,0x1
10000184:	84 c0                	test   al,al
10000186:	74 4c                	je     100001d4 <start(Device*)+0x1bd>
10000188:	6a 02                	push   0x2
1000018a:	6a 10                	push   0x10
1000018c:	68 40 1f 00 00       	push   0x1f40
10000191:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000194:	e8 fc ff ff ff       	call   10000195 <start(Device*)+0x17e>	10000195: R_386_PC32	SoundCard::configureRates(int, int, int)
10000199:	83 c4 10             	add    esp,0x10
1000019c:	83 ec 08             	sub    esp,0x8
1000019f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100001a2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100001a5:	e8 fc ff ff ff       	call   100001a6 <start(Device*)+0x18f>	100001a6: R_386_PC32	SoundCard::addChannel(SoundPort*)
100001aa:	83 c4 10             	add    esp,0x10
100001ad:	83 ec 0c             	sub    esp,0xc
100001b0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100001b3:	e8 fc ff ff ff       	call   100001b4 <start(Device*)+0x19d>	100001b4: R_386_PC32	SoundPort::unpause()
100001b8:	83 c4 10             	add    esp,0x10
100001bb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100001be:	8b 00                	mov    eax,DWORD PTR [eax]
100001c0:	83 c0 24             	add    eax,0x24
100001c3:	8b 00                	mov    eax,DWORD PTR [eax]
100001c5:	83 ec 0c             	sub    esp,0xc
100001c8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100001cb:	ff d0                	call   eax
100001cd:	83 c4 10             	add    esp,0x10
100001d0:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
100001d4:	83 ec 0c             	sub    esp,0xc
100001d7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100001da:	e8 fc ff ff ff       	call   100001db <start(Device*)+0x1c4>	100001db: R_386_PC32	SoundPort::getBufferUsed()
100001df:	83 c4 10             	add    esp,0x10
100001e2:	89 c2                	mov    edx,eax
100001e4:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100001e7:	89 c1                	mov    ecx,eax
100001e9:	01 c9                	add    ecx,ecx
100001eb:	01 c8                	add    eax,ecx
100001ed:	8d 1c 02             	lea    ebx,[edx+eax*1]
100001f0:	83 ec 0c             	sub    esp,0xc
100001f3:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100001f6:	e8 fc ff ff ff       	call   100001f7 <start(Device*)+0x1e0>	100001f7: R_386_PC32	SoundPort::getBufferSize()
100001fb:	83 c4 10             	add    esp,0x10
100001fe:	39 c3                	cmp    ebx,eax
10000200:	0f 9d c0             	setge  al
10000203:	84 c0                	test   al,al
10000205:	0f 84 83 00 00 00    	je     1000028e <start(Device*)+0x277>
1000020b:	83 ec 0c             	sub    esp,0xc
1000020e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000211:	e8 fc ff ff ff       	call   10000212 <start(Device*)+0x1fb>	10000212: R_386_PC32	SoundPort::getBufferSize()
10000216:	83 c4 10             	add    esp,0x10
10000219:	89 c3                	mov    ebx,eax
1000021b:	83 ec 0c             	sub    esp,0xc
1000021e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000221:	e8 fc ff ff ff       	call   10000222 <start(Device*)+0x20b>	10000222: R_386_PC32	SoundPort::getBufferUsed()
10000226:	83 c4 10             	add    esp,0x10
10000229:	89 c2                	mov    edx,eax
1000022b:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
1000022e:	89 c1                	mov    ecx,eax
10000230:	01 c9                	add    ecx,ecx
10000232:	01 c8                	add    eax,ecx
10000234:	8d 3c 02             	lea    edi,[edx+eax*1]
10000237:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
1000023a:	89 c2                	mov    edx,eax
1000023c:	01 d2                	add    edx,edx
1000023e:	8d 34 02             	lea    esi,[edx+eax*1]
10000241:	83 ec 0c             	sub    esp,0xc
10000244:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000247:	e8 fc ff ff ff       	call   10000248 <start(Device*)+0x231>	10000248: R_386_PC32	SoundPort::getBufferUsed()
1000024c:	83 c4 10             	add    esp,0x10
1000024f:	83 ec 0c             	sub    esp,0xc
10000252:	53                   	push   ebx
10000253:	57                   	push   edi
10000254:	56                   	push   esi
10000255:	50                   	push   eax
10000256:	68 23 0d 00 10       	push   0x10000d23	10000257: R_386_32	.text
1000025b:	e8 fc ff ff ff       	call   1000025c <start(Device*)+0x245>	1000025c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000260:	83 c4 20             	add    esp,0x20
10000263:	fa                   	cli    
10000264:	a1 00 00 00 00       	mov    eax,ds:0x0	10000265: R_386_32	irqDisableCounter
10000269:	40                   	inc    eax
1000026a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000026b: R_386_32	irqDisableCounter
1000026f:	e8 fc ff ff ff       	call   10000270 <start(Device*)+0x259>	10000270: R_386_PC32	schedule()
10000274:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10000277: R_386_32	irqDisableCounter
1000027b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000027c: R_386_32	irqDisableCounter
10000280:	85 c0                	test   eax,eax
10000282:	0f 85 4c ff ff ff    	jne    100001d4 <start(Device*)+0x1bd>
10000288:	fb                   	sti    
10000289:	e9 46 ff ff ff       	jmp    100001d4 <start(Device*)+0x1bd>
1000028e:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10000291:	83 ec 04             	sub    esp,0x4
10000294:	50                   	push   eax
10000295:	68 00 00 00 00       	push   0x0	10000296: R_386_32	buf
1000029a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000029d:	e8 fc ff ff ff       	call   1000029e <start(Device*)+0x287>	1000029e: R_386_PC32	SoundPort::buffer8(signed char*, int)
100002a2:	83 c4 10             	add    esp,0x10
100002a5:	e9 34 fe ff ff       	jmp    100000de <start(Device*)+0xc7>
100002aa:	8d 65 f4             	lea    esp,[ebp-0xc]
100002ad:	5b                   	pop    ebx
100002ae:	5e                   	pop    esi
100002af:	5f                   	pop    edi
100002b0:	5d                   	pop    ebp
100002b1:	c3                   	ret    
100002b2:	55                   	push   ebp
100002b3:	89 e5                	mov    ebp,esp
100002b5:	83 ec 08             	sub    esp,0x8
100002b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bb:	83 ec 08             	sub    esp,0x8
100002be:	68 37 0d 00 10       	push   0x10000d37	100002bf: R_386_32	.text
100002c3:	50                   	push   eax
100002c4:	e8 fc ff ff ff       	call   100002c5 <start(Device*)+0x2ae>	100002c5: R_386_PC32	SoundCard::SoundCard(char const*)
100002c9:	83 c4 10             	add    esp,0x10
100002cc:	ba 08 00 00 00       	mov    edx,0x8	100002cd: R_386_32	vtable for AC97
100002d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d4:	89 10                	mov    DWORD PTR [eax],edx
100002d6:	90                   	nop
100002d7:	c9                   	leave  
100002d8:	c3                   	ret    
100002d9:	90                   	nop

100002da <AC97::~AC97()>:
100002da:	55                   	push   ebp
100002db:	89 e5                	mov    ebp,esp
100002dd:	83 ec 08             	sub    esp,0x8
100002e0:	ba 08 00 00 00       	mov    edx,0x8	100002e1: R_386_32	vtable for AC97
100002e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e8:	89 10                	mov    DWORD PTR [eax],edx
100002ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002ed:	83 ec 0c             	sub    esp,0xc
100002f0:	50                   	push   eax
100002f1:	e8 fc ff ff ff       	call   100002f2 <AC97::~AC97()+0x18>	100002f2: R_386_PC32	SoundCard::~SoundCard()
100002f6:	83 c4 10             	add    esp,0x10
100002f9:	90                   	nop
100002fa:	c9                   	leave  
100002fb:	c3                   	ret    

100002fc <AC97::~AC97()>:
100002fc:	55                   	push   ebp
100002fd:	89 e5                	mov    ebp,esp
100002ff:	83 ec 08             	sub    esp,0x8
10000302:	83 ec 0c             	sub    esp,0xc
10000305:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000308:	e8 fc ff ff ff       	call   10000309 <AC97::~AC97()+0xd>	10000309: R_386_PC32	AC97::~AC97()
1000030d:	83 c4 10             	add    esp,0x10
10000310:	83 ec 08             	sub    esp,0x8
10000313:	68 14 02 00 00       	push   0x214
10000318:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000031b:	e8 fc ff ff ff       	call   1000031c <AC97::~AC97()+0x20>	1000031c: R_386_PC32	operator delete(void*, unsigned long)
10000320:	83 c4 10             	add    esp,0x10
10000323:	c9                   	leave  
10000324:	c3                   	ret    
10000325:	90                   	nop

10000326 <AC97::setVolume(int, int)>:
10000326:	55                   	push   ebp
10000327:	89 e5                	mov    ebp,esp
10000329:	83 ec 18             	sub    esp,0x18
1000032c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000032f:	89 d0                	mov    eax,edx
10000331:	c1 e0 02             	shl    eax,0x2
10000334:	01 d0                	add    eax,edx
10000336:	01 c0                	add    eax,eax
10000338:	85 c0                	test   eax,eax
1000033a:	79 03                	jns    1000033f <AC97::setVolume(int, int)+0x19>
1000033c:	83 c0 1f             	add    eax,0x1f
1000033f:	c1 f8 05             	sar    eax,0x5
10000342:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000345:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000348:	89 d0                	mov    eax,edx
1000034a:	c1 e0 02             	shl    eax,0x2
1000034d:	01 d0                	add    eax,edx
1000034f:	01 c0                	add    eax,eax
10000351:	85 c0                	test   eax,eax
10000353:	79 03                	jns    10000358 <AC97::setVolume(int, int)+0x32>
10000355:	83 c0 1f             	add    eax,0x1f
10000358:	c1 f8 05             	sar    eax,0x5
1000035b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000035e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000361:	c1 e0 08             	shl    eax,0x8
10000364:	89 c2                	mov    edx,eax
10000366:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000369:	09 d0                	or     eax,edx
1000036b:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
1000036f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000370: R_386_32	thePCI
10000374:	0f b7 4d ee          	movzx  ecx,WORD PTR [ebp-0x12]
10000378:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000037b:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
10000381:	6a 02                	push   0x2
10000383:	51                   	push   ecx
10000384:	52                   	push   edx
10000385:	50                   	push   eax
10000386:	e8 fc ff ff ff       	call   10000387 <AC97::setVolume(int, int)+0x61>	10000387: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
1000038b:	83 c4 10             	add    esp,0x10
1000038e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000038f: R_386_32	thePCI
10000393:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000396:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
1000039c:	6a 18                	push   0x18
1000039e:	6a 00                	push   0x0
100003a0:	52                   	push   edx
100003a1:	50                   	push   eax
100003a2:	e8 fc ff ff ff       	call   100003a3 <AC97::setVolume(int, int)+0x7d>	100003a3: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003a7:	83 c4 10             	add    esp,0x10
100003aa:	90                   	nop
100003ab:	c9                   	leave  
100003ac:	c3                   	ret    
100003ad:	90                   	nop

100003ae <AC97::open(int, int, void*)>:
100003ae:	b8 00 00 00 00       	mov    eax,0x0
100003b3:	c3                   	ret    

100003b4 <ac97IRQHandler(regs*, void*)>:
100003b4:	55                   	push   ebp
100003b5:	89 e5                	mov    ebp,esp
100003b7:	83 ec 18             	sub    esp,0x18
100003ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003bd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100003c0:	83 ec 0c             	sub    esp,0xc
100003c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100003c6:	e8 fc ff ff ff       	call   100003c7 <ac97IRQHandler(regs*, void*)+0x13>	100003c7: R_386_PC32	AC97::handleIRQ()
100003cb:	83 c4 10             	add    esp,0x10
100003ce:	90                   	nop
100003cf:	c9                   	leave  
100003d0:	c3                   	ret    
100003d1:	90                   	nop

100003d2 <AC97::handleIRQ()>:
100003d2:	55                   	push   ebp
100003d3:	89 e5                	mov    ebp,esp
100003d5:	83 ec 18             	sub    esp,0x18
100003d8:	83 ec 0c             	sub    esp,0xc
100003db:	68 50 0d 00 10       	push   0x10000d50	100003dc: R_386_32	.text
100003e0:	e8 fc ff ff ff       	call   100003e1 <AC97::handleIRQ()+0xf>	100003e1: R_386_PC32	Dbg::kprintf(char const*, ...)
100003e5:	83 c4 10             	add    esp,0x10
100003e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100003e9: R_386_32	thePCI
100003ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003f0:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100003f6:	83 ec 04             	sub    esp,0x4
100003f9:	6a 14                	push   0x14
100003fb:	52                   	push   edx
100003fc:	50                   	push   eax
100003fd:	e8 fc ff ff ff       	call   100003fe <AC97::handleIRQ()+0x2c>	100003fe: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000402:	83 c4 10             	add    esp,0x10
10000405:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000408:	a1 00 00 00 00       	mov    eax,ds:0x0	10000409: R_386_32	thePCI
1000040d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000410:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000416:	83 ec 04             	sub    esp,0x4
10000419:	6a 15                	push   0x15
1000041b:	52                   	push   edx
1000041c:	50                   	push   eax
1000041d:	e8 fc ff ff ff       	call   1000041e <AC97::handleIRQ()+0x4c>	1000041e: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000422:	83 c4 10             	add    esp,0x10
10000425:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000428:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000042c:	40                   	inc    eax
1000042d:	b9 03 00 00 00       	mov    ecx,0x3
10000432:	99                   	cdq    
10000433:	f7 f9                	idiv   ecx
10000435:	89 d1                	mov    ecx,edx
10000437:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000043b:	8d 50 ff             	lea    edx,[eax-0x1]
1000043e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000442:	51                   	push   ecx
10000443:	52                   	push   edx
10000444:	50                   	push   eax
10000445:	68 5c 0d 00 10       	push   0x10000d5c	10000446: R_386_32	.text
1000044a:	e8 fc ff ff ff       	call   1000044b <AC97::handleIRQ()+0x79>	1000044b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000044f:	83 c4 10             	add    esp,0x10
10000452:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
10000456:	83 ec 08             	sub    esp,0x8
10000459:	50                   	push   eax
1000045a:	68 8b 0d 00 10       	push   0x10000d8b	1000045b: R_386_32	.text
1000045f:	e8 fc ff ff ff       	call   10000460 <AC97::handleIRQ()+0x8e>	10000460: R_386_PC32	Dbg::kprintf(char const*, ...)
10000464:	83 c4 10             	add    esp,0x10
10000467:	a1 00 00 00 00       	mov    eax,ds:0x0	10000468: R_386_32	thePCI
1000046c:	0f b6 4d f6          	movzx  ecx,BYTE PTR [ebp-0xa]
10000470:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000473:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000479:	6a 15                	push   0x15
1000047b:	51                   	push   ecx
1000047c:	52                   	push   edx
1000047d:	50                   	push   eax
1000047e:	e8 fc ff ff ff       	call   1000047f <AC97::handleIRQ()+0xad>	1000047f: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000483:	83 c4 10             	add    esp,0x10
10000486:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000048a:	83 c0 02             	add    eax,0x2
1000048d:	b9 03 00 00 00       	mov    ecx,0x3
10000492:	99                   	cdq    
10000493:	f7 f9                	idiv   ecx
10000495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000498:	83 c2 7c             	add    edx,0x7c
1000049b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
1000049f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004a5:	83 ec 04             	sub    esp,0x4
100004a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004ab:	68 01 80 00 00       	push   0x8001
100004b0:	50                   	push   eax
100004b1:	e8 fc ff ff ff       	call   100004b2 <AC97::handleIRQ()+0xe0>	100004b2: R_386_PC32	SoundCard::getSamples16(int, short*)
100004b6:	83 c4 10             	add    esp,0x10
100004b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004bc:	83 ec 04             	sub    esp,0x4
100004bf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004c2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100004c5:	68 96 0d 00 10       	push   0x10000d96	100004c6: R_386_32	.text
100004ca:	e8 fc ff ff ff       	call   100004cb <AC97::handleIRQ()+0xf9>	100004cb: R_386_PC32	Dbg::kprintf(char const*, ...)
100004cf:	83 c4 10             	add    esp,0x10
100004d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100004d3: R_386_32	thePCI
100004d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100004da:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100004e0:	6a 16                	push   0x16
100004e2:	6a 1c                	push   0x1c
100004e4:	52                   	push   edx
100004e5:	50                   	push   eax
100004e6:	e8 fc ff ff ff       	call   100004e7 <AC97::handleIRQ()+0x115>	100004e7: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100004eb:	83 c4 10             	add    esp,0x10
100004ee:	90                   	nop
100004ef:	c9                   	leave  
100004f0:	c3                   	ret    
100004f1:	90                   	nop

100004f2 <AC97::setSampleRate(int)>:
100004f2:	55                   	push   ebp
100004f3:	89 e5                	mov    ebp,esp
100004f5:	53                   	push   ebx
100004f6:	83 ec 04             	sub    esp,0x4
100004f9:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100004fb: R_386_32	thePCI
100004ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10000500: R_386_32	thePCI
10000504:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000507:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
1000050d:	83 ec 04             	sub    esp,0x4
10000510:	6a 2a                	push   0x2a
10000512:	52                   	push   edx
10000513:	50                   	push   eax
10000514:	e8 fc ff ff ff       	call   10000515 <AC97::setSampleRate(int)+0x23>	10000515: R_386_PC32	PCI::readBAR16(unsigned int, int)
10000519:	83 c4 10             	add    esp,0x10
1000051c:	83 c8 01             	or     eax,0x1
1000051f:	0f b7 d0             	movzx  edx,ax
10000522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000525:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000052b:	6a 2a                	push   0x2a
1000052d:	52                   	push   edx
1000052e:	50                   	push   eax
1000052f:	53                   	push   ebx
10000530:	e8 fc ff ff ff       	call   10000531 <AC97::setSampleRate(int)+0x3f>	10000531: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000535:	83 c4 10             	add    esp,0x10
10000538:	83 ec 08             	sub    esp,0x8
1000053b:	6a 00                	push   0x0
1000053d:	6a 64                	push   0x64
1000053f:	e8 fc ff ff ff       	call   10000540 <AC97::setSampleRate(int)+0x4e>	10000540: R_386_PC32	milliTenthSleep(unsigned long long)
10000544:	83 c4 10             	add    esp,0x10
10000547:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000549: R_386_32	thePCI
1000054d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000550:	0f b7 c8             	movzx  ecx,ax
10000553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000556:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000055c:	6a 2c                	push   0x2c
1000055e:	51                   	push   ecx
1000055f:	50                   	push   eax
10000560:	52                   	push   edx
10000561:	e8 fc ff ff ff       	call   10000562 <AC97::setSampleRate(int)+0x70>	10000562: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000566:	83 c4 10             	add    esp,0x10
10000569:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000056b: R_386_32	thePCI
1000056f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000572:	0f b7 c8             	movzx  ecx,ax
10000575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000578:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000057e:	6a 32                	push   0x32
10000580:	51                   	push   ecx
10000581:	50                   	push   eax
10000582:	52                   	push   edx
10000583:	e8 fc ff ff ff       	call   10000584 <AC97::setSampleRate(int)+0x92>	10000584: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000588:	83 c4 10             	add    esp,0x10
1000058b:	83 ec 08             	sub    esp,0x8
1000058e:	6a 00                	push   0x0
10000590:	6a 64                	push   0x64
10000592:	e8 fc ff ff ff       	call   10000593 <AC97::setSampleRate(int)+0xa1>	10000593: R_386_PC32	milliTenthSleep(unsigned long long)
10000597:	83 c4 10             	add    esp,0x10
1000059a:	90                   	nop
1000059b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000059e:	c9                   	leave  
1000059f:	c3                   	ret    
100005a0:	55                   	push   ebp
100005a1:	89 e5                	mov    ebp,esp
100005a3:	56                   	push   esi
100005a4:	53                   	push   ebx
100005a5:	83 ec 30             	sub    esp,0x30
100005a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ab:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
100005b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b4:	89 90 e8 01 00 00    	mov    DWORD PTR [eax+0x1e8],edx
100005ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005bd:	8b 90 24 01 00 00    	mov    edx,DWORD PTR [eax+0x124]
100005c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c6:	89 90 ec 01 00 00    	mov    DWORD PTR [eax+0x1ec],edx
100005cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005cf:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005d5:	83 e0 01             	and    eax,0x1
100005d8:	85 c0                	test   eax,eax
100005da:	74 5a                	je     10000636 <AC97::setSampleRate(int)+0x144>
100005dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005df:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005e8:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100005ee:	0f b6 ca             	movzx  ecx,dl
100005f1:	83 e0 fc             	and    eax,0xfffffffc
100005f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005f7:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100005fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000605:	0f b6 d0             	movzx  edx,al
10000608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060b:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
10000610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000613:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000619:	8d 50 01             	lea    edx,[eax+0x1]
1000061c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000061f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000625:	0f b6 d0             	movzx  edx,al
10000628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000062b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000062f:	83 e1 3f             	and    ecx,0x3f
10000632:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000639:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
1000063f:	83 e0 01             	and    eax,0x1
10000642:	85 c0                	test   eax,eax
10000644:	74 5a                	je     100006a0 <AC97::setSampleRate(int)+0x1ae>
10000646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000649:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
1000064f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000652:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000658:	0f b6 ca             	movzx  ecx,dl
1000065b:	83 e0 fc             	and    eax,0xfffffffc
1000065e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000661:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000669:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000066f:	0f b6 d0             	movzx  edx,al
10000672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000675:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
1000067a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000067d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000683:	8d 50 01             	lea    edx,[eax+0x1]
10000686:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000689:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000068f:	0f b6 d0             	movzx  edx,al
10000692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000695:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000699:	83 e1 3f             	and    ecx,0x3f
1000069c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100006a1: R_386_32	thePCI
100006a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006a8:	8a 92 1e 01 00 00    	mov    dl,BYTE PTR [edx+0x11e]
100006ae:	0f b6 da             	movzx  ebx,dl
100006b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006b4:	8a 92 1d 01 00 00    	mov    dl,BYTE PTR [edx+0x11d]
100006ba:	0f b6 ca             	movzx  ecx,dl
100006bd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006c0:	8a 92 1c 01 00 00    	mov    dl,BYTE PTR [edx+0x11c]
100006c6:	0f b6 d2             	movzx  edx,dl
100006c9:	83 ec 0c             	sub    esp,0xc
100006cc:	6a 04                	push   0x4
100006ce:	53                   	push   ebx
100006cf:	51                   	push   ecx
100006d0:	52                   	push   edx
100006d1:	50                   	push   eax
100006d2:	e8 fc ff ff ff       	call   100006d3 <AC97::setSampleRate(int)+0x1e1>	100006d3: R_386_PC32	PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)
100006d7:	83 c4 20             	add    esp,0x20
100006da:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
100006de:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100006e0: R_386_32	thePCI
100006e4:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
100006e8:	83 c8 05             	or     eax,0x5
100006eb:	0f b7 f0             	movzx  esi,ax
100006ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006f1:	8a 80 1e 01 00 00    	mov    al,BYTE PTR [eax+0x11e]
100006f7:	0f b6 d8             	movzx  ebx,al
100006fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006fd:	8a 80 1d 01 00 00    	mov    al,BYTE PTR [eax+0x11d]
10000703:	0f b6 c8             	movzx  ecx,al
10000706:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000709:	8a 80 1c 01 00 00    	mov    al,BYTE PTR [eax+0x11c]
1000070f:	0f b6 c0             	movzx  eax,al
10000712:	83 ec 08             	sub    esp,0x8
10000715:	56                   	push   esi
10000716:	6a 04                	push   0x4
10000718:	53                   	push   ebx
10000719:	51                   	push   ecx
1000071a:	50                   	push   eax
1000071b:	52                   	push   edx
1000071c:	e8 fc ff ff ff       	call   1000071d <AC97::setSampleRate(int)+0x22b>	1000071d: R_386_PC32	PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
10000721:	83 c4 20             	add    esp,0x20
10000724:	a1 00 00 00 00       	mov    eax,ds:0x0	10000725: R_386_32	thePCI
10000729:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000072c:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000732:	6a 2c                	push   0x2c
10000734:	6a 03                	push   0x3
10000736:	52                   	push   edx
10000737:	50                   	push   eax
10000738:	e8 fc ff ff ff       	call   10000739 <AC97::setSampleRate(int)+0x247>	10000739: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
1000073d:	83 c4 10             	add    esp,0x10
10000740:	a1 00 00 00 00       	mov    eax,ds:0x0	10000741: R_386_32	thePCI
10000745:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000748:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
1000074e:	6a 00                	push   0x0
10000750:	68 aa 55 00 00       	push   0x55aa
10000755:	52                   	push   edx
10000756:	50                   	push   eax
10000757:	e8 fc ff ff ff       	call   10000758 <AC97::setSampleRate(int)+0x266>	10000758: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
1000075c:	83 c4 10             	add    esp,0x10
1000075f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000760: R_386_32	thePCI
10000764:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000767:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000076d:	83 ec 04             	sub    esp,0x4
10000770:	6a 30                	push   0x30
10000772:	52                   	push   edx
10000773:	50                   	push   eax
10000774:	e8 fc ff ff ff       	call   10000775 <AC97::setSampleRate(int)+0x283>	10000775: R_386_PC32	PCI::readBAR32(unsigned int, int)
10000779:	83 c4 10             	add    esp,0x10
1000077c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000077f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000782:	c1 e8 14             	shr    eax,0x14
10000785:	83 e0 03             	and    eax,0x3
10000788:	40                   	inc    eax
10000789:	01 c0                	add    eax,eax
1000078b:	83 ec 08             	sub    esp,0x8
1000078e:	50                   	push   eax
1000078f:	68 b1 0d 00 10       	push   0x10000db1	10000790: R_386_32	.text
10000794:	e8 fc ff ff ff       	call   10000795 <AC97::setSampleRate(int)+0x2a3>	10000795: R_386_PC32	Dbg::kprintf(char const*, ...)
10000799:	83 c4 10             	add    esp,0x10
1000079c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000079f:	c1 e8 16             	shr    eax,0x16
100007a2:	83 e0 03             	and    eax,0x3
100007a5:	83 f8 01             	cmp    eax,0x1
100007a8:	75 10                	jne    100007ba <AC97::setSampleRate(int)+0x2c8>
100007aa:	83 ec 0c             	sub    esp,0xc
100007ad:	68 c4 0d 00 10       	push   0x10000dc4	100007ae: R_386_32	.text
100007b2:	e8 fc ff ff ff       	call   100007b3 <AC97::setSampleRate(int)+0x2c1>	100007b3: R_386_PC32	Dbg::kprintf(char const*, ...)
100007b7:	83 c4 10             	add    esp,0x10
100007ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100007bb: R_386_32	thePCI
100007bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007c2:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100007c8:	83 ec 04             	sub    esp,0x4
100007cb:	6a 1b                	push   0x1b
100007cd:	52                   	push   edx
100007ce:	50                   	push   eax
100007cf:	e8 fc ff ff ff       	call   100007d0 <AC97::setSampleRate(int)+0x2de>	100007d0: R_386_PC32	PCI::readBAR8(unsigned int, int)
100007d4:	83 c4 10             	add    esp,0x10
100007d7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
100007da:	a1 00 00 00 00       	mov    eax,ds:0x0	100007db: R_386_32	thePCI
100007df:	8a 55 df             	mov    dl,BYTE PTR [ebp-0x21]
100007e2:	83 ca 02             	or     edx,0x2
100007e5:	0f b6 ca             	movzx  ecx,dl
100007e8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007eb:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100007f1:	6a 1b                	push   0x1b
100007f3:	51                   	push   ecx
100007f4:	52                   	push   edx
100007f5:	50                   	push   eax
100007f6:	e8 fc ff ff ff       	call   100007f7 <AC97::setSampleRate(int)+0x305>	100007f7: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100007fb:	83 c4 10             	add    esp,0x10
100007fe:	83 ec 08             	sub    esp,0x8
10000801:	6a 00                	push   0x0
10000803:	68 c4 09 00 00       	push   0x9c4
10000808:	e8 fc ff ff ff       	call   10000809 <AC97::setSampleRate(int)+0x317>	10000809: R_386_PC32	milliTenthSleep(unsigned long long)
1000080d:	83 c4 10             	add    esp,0x10
10000810:	a1 00 00 00 00       	mov    eax,ds:0x0	10000811: R_386_32	thePCI
10000815:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000818:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000081e:	83 ec 04             	sub    esp,0x4
10000821:	6a 1b                	push   0x1b
10000823:	52                   	push   edx
10000824:	50                   	push   eax
10000825:	e8 fc ff ff ff       	call   10000826 <AC97::setSampleRate(int)+0x334>	10000826: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000082a:	83 c4 10             	add    esp,0x10
1000082d:	0f b6 c0             	movzx  eax,al
10000830:	83 e0 02             	and    eax,0x2
10000833:	85 c0                	test   eax,eax
10000835:	0f 95 c0             	setne  al
10000838:	84 c0                	test   al,al
1000083a:	74 10                	je     1000084c <AC97::setSampleRate(int)+0x35a>
1000083c:	83 ec 0c             	sub    esp,0xc
1000083f:	68 dd 0d 00 10       	push   0x10000ddd	10000840: R_386_32	.text
10000844:	e8 fc ff ff ff       	call   10000845 <AC97::setSampleRate(int)+0x353>	10000845: R_386_PC32	Dbg::kprintf(char const*, ...)
10000849:	83 c4 10             	add    esp,0x10
1000084c:	83 ec 04             	sub    esp,0x4
1000084f:	6a 32                	push   0x32
10000851:	6a 0f                	push   0xf
10000853:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000856:	e8 fc ff ff ff       	call   10000857 <AC97::setSampleRate(int)+0x365>	10000857: R_386_PC32	AC97::setVolume(int, int)
1000085b:	83 c4 10             	add    esp,0x10
1000085e:	83 ec 0c             	sub    esp,0xc
10000861:	6a 01                	push   0x1
10000863:	e8 fc ff ff ff       	call   10000864 <AC97::setSampleRate(int)+0x372>	10000864: R_386_PC32	Phys::allocateContiguousPages(int)
10000868:	83 c4 10             	add    esp,0x10
1000086b:	89 c2                	mov    edx,eax
1000086d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000870:	89 90 f4 01 00 00    	mov    DWORD PTR [eax+0x1f4],edx
10000876:	83 ec 0c             	sub    esp,0xc
10000879:	6a 01                	push   0x1
1000087b:	e8 fc ff ff ff       	call   1000087c <AC97::setSampleRate(int)+0x38a>	1000087c: R_386_PC32	Virt::allocateKernelVirtualPages(int)
10000880:	83 c4 10             	add    esp,0x10
10000883:	89 c2                	mov    edx,eax
10000885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000888:	89 90 f0 01 00 00    	mov    DWORD PTR [eax+0x1f0],edx
1000088e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000891:	8b 90 f0 01 00 00    	mov    edx,DWORD PTR [eax+0x1f0]
10000897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000089a:	8b 80 f4 01 00 00    	mov    eax,DWORD PTR [eax+0x1f4]
100008a0:	83 ec 04             	sub    esp,0x4
100008a3:	52                   	push   edx
100008a4:	50                   	push   eax
100008a5:	68 f8 0d 00 10       	push   0x10000df8	100008a6: R_386_32	.text
100008aa:	e8 fc ff ff ff       	call   100008ab <AC97::setSampleRate(int)+0x3b9>	100008ab: R_386_PC32	Dbg::kprintf(char const*, ...)
100008af:	83 c4 10             	add    esp,0x10
100008b2:	a1 00 00 00 00       	mov    eax,ds:0x0	100008b3: R_386_32	keFirstVAS
100008b7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008ba:	8b 8a f0 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f0]
100008c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008c3:	8b 92 f4 01 00 00    	mov    edx,DWORD PTR [edx+0x1f4]
100008c9:	83 ec 0c             	sub    esp,0xc
100008cc:	6a 03                	push   0x3
100008ce:	6a 01                	push   0x1
100008d0:	51                   	push   ecx
100008d1:	52                   	push   edx
100008d2:	50                   	push   eax
100008d3:	e8 fc ff ff ff       	call   100008d4 <AC97::setSampleRate(int)+0x3e2>	100008d4: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
100008d8:	83 c4 20             	add    esp,0x20
100008db:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100008e2:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100008e6:	0f 8f cb 00 00 00    	jg     100009b7 <AC97::setSampleRate(int)+0x4c5>
100008ec:	c7 45 d8 14 00 00 00 	mov    DWORD PTR [ebp-0x28],0x14
100008f3:	83 ec 0c             	sub    esp,0xc
100008f6:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100008f9:	e8 fc ff ff ff       	call   100008fa <AC97::setSampleRate(int)+0x408>	100008fa: R_386_PC32	Phys::allocateContiguousPages(int)
100008fe:	83 c4 10             	add    esp,0x10
10000901:	89 c2                	mov    edx,eax
10000903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000906:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000909:	83 e9 80             	sub    ecx,0xffffff80
1000090c:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
10000910:	83 ec 0c             	sub    esp,0xc
10000913:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000916:	e8 fc ff ff ff       	call   10000917 <AC97::setSampleRate(int)+0x425>	10000917: R_386_PC32	Virt::allocateKernelVirtualPages(int)
1000091b:	83 c4 10             	add    esp,0x10
1000091e:	89 c2                	mov    edx,eax
10000920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000923:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000926:	83 c1 7c             	add    ecx,0x7c
10000929:	89 54 88 0c          	mov    DWORD PTR [eax+ecx*4+0xc],edx
1000092d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000930:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000933:	83 c2 7c             	add    edx,0x7c
10000936:	8b 54 90 0c          	mov    edx,DWORD PTR [eax+edx*4+0xc]
1000093a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000940:	83 e9 80             	sub    ecx,0xffffff80
10000943:	8b 44 88 08          	mov    eax,DWORD PTR [eax+ecx*4+0x8]
10000947:	83 ec 04             	sub    esp,0x4
1000094a:	52                   	push   edx
1000094b:	50                   	push   eax
1000094c:	68 18 0e 00 10       	push   0x10000e18	1000094d: R_386_32	.text
10000951:	e8 fc ff ff ff       	call   10000952 <AC97::setSampleRate(int)+0x460>	10000952: R_386_PC32	Dbg::kprintf(char const*, ...)
10000956:	83 c4 10             	add    esp,0x10
10000959:	a1 00 00 00 00       	mov    eax,ds:0x0	1000095a: R_386_32	keFirstVAS
1000095e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000961:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000964:	83 c1 7c             	add    ecx,0x7c
10000967:	8b 4c 8a 0c          	mov    ecx,DWORD PTR [edx+ecx*4+0xc]
1000096b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000096e:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
10000971:	83 eb 80             	sub    ebx,0xffffff80
10000974:	8b 54 9a 08          	mov    edx,DWORD PTR [edx+ebx*4+0x8]
10000978:	83 ec 0c             	sub    esp,0xc
1000097b:	6a 03                	push   0x3
1000097d:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000980:	51                   	push   ecx
10000981:	52                   	push   edx
10000982:	50                   	push   eax
10000983:	e8 fc ff ff ff       	call   10000984 <AC97::setSampleRate(int)+0x492>	10000984: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
10000988:	83 c4 20             	add    esp,0x20
1000098b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000098e:	c1 e0 0c             	shl    eax,0xc
10000991:	89 c2                	mov    edx,eax
10000993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000996:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000999:	83 c1 7c             	add    ecx,0x7c
1000099c:	8b 44 88 0c          	mov    eax,DWORD PTR [eax+ecx*4+0xc]
100009a0:	83 ec 04             	sub    esp,0x4
100009a3:	52                   	push   edx
100009a4:	6a 00                	push   0x0
100009a6:	50                   	push   eax
100009a7:	e8 fc ff ff ff       	call   100009a8 <AC97::setSampleRate(int)+0x4b6>	100009a8: R_386_PC32	memset
100009ac:	83 c4 10             	add    esp,0x10
100009af:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100009b2:	e9 2b ff ff ff       	jmp    100008e2 <AC97::setSampleRate(int)+0x3f0>
100009b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ba:	8b 80 f0 01 00 00    	mov    eax,DWORD PTR [eax+0x1f0]
100009c0:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100009c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009c6:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
100009cc:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100009cf:	89 10                	mov    DWORD PTR [eax],edx
100009d1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100009d4:	83 c0 04             	add    eax,0x4
100009d7:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
100009dd:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100009e0:	8d 50 08             	lea    edx,[eax+0x8]
100009e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009e6:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
100009ec:	89 02                	mov    DWORD PTR [edx],eax
100009ee:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100009f1:	83 c0 0c             	add    eax,0xc
100009f4:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
100009fa:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
100009fd:	8d 50 10             	lea    edx,[eax+0x10]
10000a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a03:	8b 80 10 02 00 00    	mov    eax,DWORD PTR [eax+0x210]
10000a09:	89 02                	mov    DWORD PTR [edx],eax
10000a0b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a0e:	83 c0 14             	add    eax,0x14
10000a11:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a17:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000a1e:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10000a22:	7f 38                	jg     10000a5c <AC97::setSampleRate(int)+0x56a>
10000a24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a27:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000a2a:	83 c2 7c             	add    edx,0x7c
10000a2d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000a31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000a34:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000a3b:	81 7d e8 fe ff 00 00 	cmp    DWORD PTR [ebp-0x18],0xfffe
10000a42:	7f 13                	jg     10000a57 <AC97::setSampleRate(int)+0x565>
10000a44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000a47:	8d 50 02             	lea    edx,[eax+0x2]
10000a4a:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10000a4d:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
10000a52:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10000a55:	eb e4                	jmp    10000a3b <AC97::setSampleRate(int)+0x549>
10000a57:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000a5a:	eb c2                	jmp    10000a1e <AC97::setSampleRate(int)+0x52c>
10000a5c:	a1 00 00 00 00       	mov    eax,ds:0x0	10000a5d: R_386_32	thePCI
10000a61:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a64:	8b 8a f4 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f4]
10000a6a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a6d:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000a73:	6a 10                	push   0x10
10000a75:	51                   	push   ecx
10000a76:	52                   	push   edx
10000a77:	50                   	push   eax
10000a78:	e8 fc ff ff ff       	call   10000a79 <AC97::setSampleRate(int)+0x587>	10000a79: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000a7d:	83 c4 10             	add    esp,0x10
10000a80:	a1 00 00 00 00       	mov    eax,ds:0x0	10000a81: R_386_32	thePCI
10000a85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a88:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000a8e:	6a 15                	push   0x15
10000a90:	6a 03                	push   0x3
10000a92:	52                   	push   edx
10000a93:	50                   	push   eax
10000a94:	e8 fc ff ff ff       	call   10000a95 <AC97::setSampleRate(int)+0x5a3>	10000a95: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000a99:	83 c4 10             	add    esp,0x10
10000a9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a9f:	8a 80 38 01 00 00    	mov    al,BYTE PTR [eax+0x138]
10000aa5:	0f b6 c0             	movzx  eax,al
10000aa8:	83 ec 08             	sub    esp,0x8
10000aab:	50                   	push   eax
10000aac:	68 3b 0e 00 10       	push   0x10000e3b	10000aad: R_386_32	.text
10000ab1:	e8 fc ff ff ff       	call   10000ab2 <AC97::setSampleRate(int)+0x5c0>	10000ab2: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ab6:	83 c4 10             	add    esp,0x10
10000ab9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000abc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000abf:	8a 92 38 01 00 00    	mov    dl,BYTE PTR [edx+0x138]
10000ac5:	0f b6 d2             	movzx  edx,dl
10000ac8:	83 ec 0c             	sub    esp,0xc
10000acb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ace:	6a 01                	push   0x1
10000ad0:	68 00 00 00 00       	push   0x0	10000ad1: R_386_32	ac97IRQHandler(regs*, void*)
10000ad5:	52                   	push   edx
10000ad6:	50                   	push   eax
10000ad7:	e8 fc ff ff ff       	call   10000ad8 <AC97::setSampleRate(int)+0x5e6>	10000ad8: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000adc:	83 c4 20             	add    esp,0x20
10000adf:	89 c2                	mov    edx,eax
10000ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ae4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000aea:	b8 00 00 00 00       	mov    eax,0x0
10000aef:	8d 65 f8             	lea    esp,[ebp-0x8]
10000af2:	5b                   	pop    ebx
10000af3:	5e                   	pop    esi
10000af4:	5d                   	pop    ebp
10000af5:	c3                   	ret    

10000af6 <AC97::close(int, int, void*)>:
10000af6:	b8 00 00 00 00       	mov    eax,0x0
10000afb:	c3                   	ret    

10000afc <AC97::beginPlayback()>:
10000afc:	55                   	push   ebp
10000afd:	89 e5                	mov    ebp,esp
10000aff:	83 ec 18             	sub    esp,0x18
10000b02:	83 ec 0c             	sub    esp,0xc
10000b05:	68 4b 0e 00 10       	push   0x10000e4b	10000b06: R_386_32	.text
10000b0a:	e8 fc ff ff ff       	call   10000b0b <AC97::beginPlayback()+0xf>	10000b0b: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b0f:	83 c4 10             	add    esp,0x10
10000b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b15:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
10000b1b:	83 ec 08             	sub    esp,0x8
10000b1e:	50                   	push   eax
10000b1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b22:	e8 fc ff ff ff       	call   10000b23 <AC97::beginPlayback()+0x27>	10000b23: R_386_PC32	AC97::setSampleRate(int)
10000b27:	83 c4 10             	add    esp,0x10
10000b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b2d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10000b33:	83 f8 02             	cmp    eax,0x2
10000b36:	74 10                	je     10000b48 <AC97::beginPlayback()+0x4c>
10000b38:	83 ec 0c             	sub    esp,0xc
10000b3b:	68 64 0e 00 10       	push   0x10000e64	10000b3c: R_386_32	.text
10000b40:	e8 fc ff ff ff       	call   10000b41 <AC97::beginPlayback()+0x45>	10000b41: R_386_PC32	KePanic(char const*)
10000b45:	83 c4 10             	add    esp,0x10
10000b48:	a1 00 00 00 00       	mov    eax,ds:0x0	10000b49: R_386_32	thePCI
10000b4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b50:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000b56:	83 ec 04             	sub    esp,0x4
10000b59:	6a 1b                	push   0x1b
10000b5b:	52                   	push   edx
10000b5c:	50                   	push   eax
10000b5d:	e8 fc ff ff ff       	call   10000b5e <AC97::beginPlayback()+0x62>	10000b5e: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000b62:	83 c4 10             	add    esp,0x10
10000b65:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000b68:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000b6b:	83 e0 e0             	and    eax,0xffffffe0
10000b6e:	83 c8 1d             	or     eax,0x1d
10000b71:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000b74:	a1 00 00 00 00       	mov    eax,ds:0x0	10000b75: R_386_32	thePCI
10000b79:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
10000b7d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b80:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000b86:	6a 1b                	push   0x1b
10000b88:	51                   	push   ecx
10000b89:	52                   	push   edx
10000b8a:	50                   	push   eax
10000b8b:	e8 fc ff ff ff       	call   10000b8c <AC97::beginPlayback()+0x90>	10000b8c: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000b90:	83 c4 10             	add    esp,0x10
10000b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b96:	c6 80 d8 01 00 00 01 	mov    BYTE PTR [eax+0x1d8],0x1
10000b9d:	90                   	nop
10000b9e:	c9                   	leave  
10000b9f:	c3                   	ret    

10000ba0 <AC97::stopPlayback()>:
10000ba0:	55                   	push   ebp
10000ba1:	89 e5                	mov    ebp,esp
10000ba3:	83 ec 18             	sub    esp,0x18
10000ba6:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ba7: R_386_32	thePCI
10000bab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bae:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000bb4:	83 ec 04             	sub    esp,0x4
10000bb7:	6a 1b                	push   0x1b
10000bb9:	52                   	push   edx
10000bba:	50                   	push   eax
10000bbb:	e8 fc ff ff ff       	call   10000bbc <AC97::stopPlayback()+0x1c>	10000bbc: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000bc0:	83 c4 10             	add    esp,0x10
10000bc3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bc6:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bc7: R_386_32	thePCI
10000bcb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000bcf:	89 d1                	mov    ecx,edx
10000bd1:	81 e1 e0 00 00 00    	and    ecx,0xe0
10000bd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bda:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000be0:	6a 1b                	push   0x1b
10000be2:	51                   	push   ecx
10000be3:	52                   	push   edx
10000be4:	50                   	push   eax
10000be5:	e8 fc ff ff ff       	call   10000be6 <AC97::stopPlayback()+0x46>	10000be6: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000bea:	83 c4 10             	add    esp,0x10
10000bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bf0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
10000bf7:	90                   	nop
10000bf8:	c9                   	leave  
10000bf9:	c3                   	ret    
10000bfa:	66 90                	xchg   ax,ax
10000bfc:	13 05 00 00 24 05    	adc    eax,DWORD PTR ds:0x5240000
10000c02:	00 00                	add    BYTE PTR [eax],al
10000c04:	00 06                	add    BYTE PTR [esi],al
10000c06:	00 00                	add    BYTE PTR [eax],al
10000c08:	00 00                	add    BYTE PTR [eax],al
10000c0a:	01 00                	add    DWORD PTR [eax],eax
10000c0c:	00 00                	add    BYTE PTR [eax],al
10000c0e:	02 00                	add    al,BYTE PTR [eax]
10000c10:	00 00                	add    BYTE PTR [eax],al
10000c12:	04 00                	add    al,0x0
10000c14:	00 00                	add    BYTE PTR [eax],al
10000c16:	06                   	push   es
10000c17:	00 00                	add    BYTE PTR [eax],al
10000c19:	00 10                	add    BYTE PTR [eax],dl
10000c1b:	00 00                	add    BYTE PTR [eax],al
10000c1d:	10 00                	adc    BYTE PTR [eax],al
10000c1f:	00 00                	add    BYTE PTR [eax],al
10000c21:	00 00                	add    BYTE PTR [eax],al
10000c23:	c0 00 00             	rol    BYTE PTR [eax],0x0
10000c26:	00 c2                	add    dl,al
10000c28:	00 00                	add    BYTE PTR [eax],al
10000c2a:	40                   	inc    eax
10000c2b:	c2 00 00             	ret    0x0
10000c2e:	80 c2 00             	add    dl,0x0
10000c31:	00 c0                	add    al,al
10000c33:	c2 00 00             	ret    0x0
10000c36:	01 c2                	add    edx,eax
10000c38:	00 00                	add    BYTE PTR [eax],al
10000c3a:	01 00                	add    DWORD PTR [eax],eax
10000c3c:	00 10                	add    BYTE PTR [eax],dl
10000c3e:	00 c2                	add    dl,al
10000c40:	00 00                	add    BYTE PTR [eax],al
10000c42:	02 c2                	add    al,dl
10000c44:	00 00                	add    BYTE PTR [eax],al
10000c46:	02 00                	add    al,BYTE PTR [eax]
10000c48:	00 00                	add    BYTE PTR [eax],al
10000c4a:	04 c2                	add    al,0xc2
10000c4c:	00 80 00 00 00 06    	add    BYTE PTR [eax+0x6000000],al
10000c52:	00 c2                	add    dl,al
10000c54:	13 05 00 c2 24 05    	adc    eax,DWORD PTR ds:0x524c200
10000c5a:	00 c2                	add    dl,al
10000c5c:	00 00                	add    BYTE PTR [eax],al
10000c5e:	18 00                	sbb    BYTE PTR [eax],al
10000c60:	00 00                	add    BYTE PTR [eax],al
10000c62:	08 00                	or     BYTE PTR [eax],al
10000c64:	00 00                	add    BYTE PTR [eax],al
10000c66:	20 00                	and    BYTE PTR [eax],al
10000c68:	00 00                	add    BYTE PTR [eax],al
10000c6a:	00 10                	add    BYTE PTR [eax],dl
10000c6c:	00 00                	add    BYTE PTR [eax],al
10000c6e:	00 02                	add    BYTE PTR [edx],al
10000c70:	00 00                	add    BYTE PTR [eax],al
10000c72:	e8 01 00 00 00       	call   10000c78 <AC97::stopPlayback()+0xd8>
10000c77:	c8 ff ff ff          	enter  0xffff,0xff
10000c7b:	ef                   	out    dx,eax
10000c7c:	00 00                	add    BYTE PTR [eax],al
10000c7e:	00 f0                	add    al,dh
10000c80:	00 00                	add    BYTE PTR [eax],al
10000c82:	c0 ff 00             	sar    bh,0x0
10000c85:	00 10                	add    BYTE PTR [eax],dl
10000c87:	c2 00 40             	ret    0x4000
10000c8a:	48                   	dec    eax
10000c8b:	c2 80 00             	ret    0x80
10000c8e:	00 00                	add    BYTE PTR [eax],al
10000c90:	80 00 00             	add    BYTE PTR [eax],0x0
10000c93:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
10000c96:	61                   	popa   
10000c97:	72 74                	jb     10000d0d <AC97::stopPlayback()+0x16d>
10000c99:	69 6e 67 20 41 43 39 	imul   ebp,DWORD PTR [esi+0x67],0x39434120
10000ca0:	37                   	aaa    
10000ca1:	20 64 72 69          	and    BYTE PTR [edx+esi*2+0x69],ah
10000ca5:	76 65                	jbe    10000d0c <AC97::stopPlayback()+0x16c>
10000ca7:	72 2e                	jb     10000cd7 <AC97::stopPlayback()+0x137>
10000ca9:	2e 2e 00 43 3a       	cs add BYTE PTR cs:[ebx+0x3a],al
10000cae:	2f                   	das    
10000caf:	66 6c                	data16 ins BYTE PTR es:[edi],dx
10000cb1:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000cb2:	70 73                	jo     10000d27 <AC97::stopPlayback()+0x187>
10000cb4:	69 64 65 2e 77 61 76 00 	imul   esp,DWORD PTR [ebp+eiz*2+0x2e],0x766177
10000cbc:	61                   	popa   
10000cbd:	62 6f 75             	bound  ebp,QWORD PTR [edi+0x75]
10000cc0:	74 20                	je     10000ce2 <AC97::stopPlayback()+0x142>
10000cc2:	74 6f                	je     10000d33 <AC97::stopPlayback()+0x193>
10000cc4:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000cc7:	61                   	popa   
10000cc8:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000ccc:	77 65                	ja     10000d33 <AC97::stopPlayback()+0x193>
10000cce:	20 6a 75             	and    BYTE PTR [edx+0x75],ch
10000cd1:	73 74                	jae    10000d47 <AC97::stopPlayback()+0x1a7>
10000cd3:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000cd6:	61                   	popa   
10000cd7:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000cdb:	53                   	push   ebx
10000cdc:	4f                   	dec    edi
10000cdd:	4e                   	dec    esi
10000cde:	47                   	inc    edi
10000cdf:	20 53 48             	and    BYTE PTR [ebx+0x48],dl
10000ce2:	4f                   	dec    edi
10000ce3:	55                   	push   ebp
10000ce4:	4c                   	dec    esp
10000ce5:	44                   	inc    esp
10000ce6:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000ce9:	20 44 4f 4e          	and    BYTE PTR [edi+ecx*2+0x4e],al
10000ced:	45                   	inc    ebp
10000cee:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000cf1:	54                   	push   esp
10000cf2:	4f                   	dec    edi
10000cf3:	44                   	inc    esp
10000cf4:	4f                   	dec    edi
10000cf5:	3a 20                	cmp    ah,BYTE PTR [eax]
10000cf7:	74 65                	je     10000d5e <AC97::stopPlayback()+0x1be>
10000cf9:	72 6d                	jb     10000d68 <AC97::stopPlayback()+0x1c8>
10000cfb:	69 6e 61 74 65 54 61 	imul   ebp,DWORD PTR [esi+0x61],0x61546574
10000d02:	73 6b                	jae    10000d6f <AC97::stopPlayback()+0x1cf>
10000d04:	00 62 75             	add    BYTE PTR [edx+0x75],ah
10000d07:	66 66 65 72 20       	data16 data16 gs jb 10000d2c <AC97::stopPlayback()+0x18c>
10000d0c:	68 61 73 20 25       	push   0x25207361
10000d11:	64 20 73 61          	and    BYTE PTR fs:[ebx+0x61],dh
10000d15:	6d                   	ins    DWORD PTR es:[edi],dx
10000d16:	70 6c                	jo     10000d84 <AC97::stopPlayback()+0x1e4>
10000d18:	65 73 20             	gs jae 10000d3b <AC97::stopPlayback()+0x19b>
10000d1b:	69 6e 20 69 74 2e 0a 	imul   ebp,DWORD PTR [esi+0x20],0xa2e7469
10000d22:	00 25 64 20 2b 20    	add    BYTE PTR ds:0x202b2064,ah
10000d28:	25 64 20 28 25       	and    eax,0x25282064
10000d2d:	64 29 20             	sub    DWORD PTR fs:[eax],esp
10000d30:	3e 3d 20 25 64 0a    	ds cmp eax,0xa642520
10000d36:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10000d39:	74 65                	je     10000da0 <AC97::stopPlayback()+0x200>
10000d3b:	6c                   	ins    BYTE PTR es:[edi],dx
10000d3c:	20 41 43             	and    BYTE PTR [ecx+0x43],al
10000d3f:	27                   	daa    
10000d40:	39 37                	cmp    DWORD PTR [edi],esi
10000d42:	20 41 75             	and    BYTE PTR [ecx+0x75],al
10000d45:	64 69 6f 20 44 65 76 69 	imul   ebp,DWORD PTR fs:[edi+0x20],0x69766544
10000d4d:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
10000d50:	41                   	inc    ecx
10000d51:	43                   	inc    ebx
10000d52:	39 37                	cmp    DWORD PTR [edi],esi
10000d54:	20 49 52             	and    BYTE PTR [ecx+0x52],cl
10000d57:	51                   	push   ecx
10000d58:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d5b:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
10000d5e:	72 72                	jb     10000dd2 <AC97::stopPlayback()+0x232>
10000d60:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000d62:	74 6c                	je     10000dd0 <AC97::stopPlayback()+0x230>
10000d64:	79 20                	jns    10000d86 <AC97::stopPlayback()+0x1e6>
10000d66:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d67:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000d68:	20 27                	and    BYTE PTR [edi],ah
10000d6a:	25 64 27 2e 20       	and    eax,0x202e2764
10000d6f:	63 69 76             	arpl   WORD PTR [ecx+0x76],bp
10000d72:	20 2d 20 31 20 3d    	and    BYTE PTR ds:0x3d203120,ch
10000d78:	20 25 64 2c 20 63    	and    BYTE PTR ds:0x63202c64,ah
10000d7e:	69 76 20 2b 20 31 20 	imul   esi,DWORD PTR [esi+0x20],0x2031202b
10000d85:	3d 20 25 64 0a       	cmp    eax,0xa642520
10000d8a:	00 6c 76 69          	add    BYTE PTR [esi+esi*2+0x69],ch
10000d8e:	20 3d 20 20 25 64    	and    BYTE PTR ds:0x64252020,bh
10000d94:	0a 00                	or     al,BYTE PTR [eax]
10000d96:	77 65                	ja     10000dfd <AC97::stopPlayback()+0x25d>
10000d98:	20 67 6f             	and    BYTE PTR [edi+0x6f],ah
10000d9b:	74 20                	je     10000dbd <AC97::stopPlayback()+0x21d>
10000d9d:	25 64 20 73 61       	and    eax,0x61732064
10000da2:	6d                   	ins    DWORD PTR es:[edi],dx
10000da3:	70 6c                	jo     10000e11 <AC97::stopPlayback()+0x271>
10000da5:	65 73 20             	gs jae 10000dc8 <AC97::stopPlayback()+0x228>
10000da8:	74 6f                	je     10000e19 <AC97::stopPlayback()+0x279>
10000daa:	20 30                	and    BYTE PTR [eax],dh
10000dac:	78 25                	js     10000dd3 <AC97::stopPlayback()+0x233>
10000dae:	58                   	pop    eax
10000daf:	0a 00                	or     al,BYTE PTR [eax]
10000db1:	41                   	inc    ecx
10000db2:	43                   	inc    ebx
10000db3:	39 37                	cmp    DWORD PTR [edi],esi
10000db5:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10000db8:	61                   	popa   
10000db9:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000dba:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000dbb:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000dbd:	73 3a                	jae    10000df9 <AC97::stopPlayback()+0x259>
10000dbf:	20 25 64 0a 00 32    	and    BYTE PTR ds:0x32000a64,ah
10000dc5:	30 20                	xor    BYTE PTR [eax],ah
10000dc7:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000dca:	20 73 6f             	and    BYTE PTR [ebx+0x6f],dh
10000dcd:	75 6e                	jne    10000e3d <AC97::stopPlayback()+0x29d>
10000dcf:	64 20 73 75          	and    BYTE PTR fs:[ebx+0x75],dh
10000dd3:	70 70                	jo     10000e45 <AC97::stopPlayback()+0x2a5>
10000dd5:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000dd6:	72 74                	jb     10000e4c <AC97::stopPlayback()+0x2ac>
10000dd8:	65 64 2e 0a 00       	gs fs or al,BYTE PTR cs:[eax]
10000ddd:	42                   	inc    edx
10000dde:	69 74 20 63 6f 75 6c 64 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x646c756f
10000de6:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000de9:	74 20                	je     10000e0b <AC97::stopPlayback()+0x26b>
10000deb:	62 65 20             	bound  esp,QWORD PTR [ebp+0x20]
10000dee:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
10000df2:	72 65                	jb     10000e59 <AC97::stopPlayback()+0x2b9>
10000df4:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000df8:	62 64 6c 20          	bound  esp,QWORD PTR [esp+ebp*2+0x20]
10000dfc:	61                   	popa   
10000dfd:	74 20                	je     10000e1f <AC97::stopPlayback()+0x27f>
10000dff:	70 68                	jo     10000e69 <AC97::stopPlayback()+0x2c9>
10000e01:	79 73                	jns    10000e76 <AC97::stopPlayback()+0x2d6>
10000e03:	20 30                	and    BYTE PTR [eax],dh
10000e05:	78 25                	js     10000e2c <AC97::stopPlayback()+0x28c>
10000e07:	58                   	pop    eax
10000e08:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e0b:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e0f:	72 74                	jb     10000e85 <AC97::stopPlayback()+0x2e5>
10000e11:	20 30                	and    BYTE PTR [eax],dh
10000e13:	78 25                	js     10000e3a <AC97::stopPlayback()+0x29a>
10000e15:	58                   	pop    eax
10000e16:	0a 00                	or     al,BYTE PTR [eax]
10000e18:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000e1b:	66 65 72 20          	data16 gs jb 10000e3f <AC97::stopPlayback()+0x29f>
10000e1f:	61                   	popa   
10000e20:	74 20                	je     10000e42 <AC97::stopPlayback()+0x2a2>
10000e22:	70 68                	jo     10000e8c <AC97::stopPlayback()+0x2ec>
10000e24:	79 73                	jns    10000e99 <vtable for AC97+0x1>
10000e26:	20 30                	and    BYTE PTR [eax],dh
10000e28:	78 25                	js     10000e4f <AC97::stopPlayback()+0x2af>
10000e2a:	58                   	pop    eax
10000e2b:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e2e:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e32:	72 74                	jb     10000ea8 <vtable for AC97+0x10>
10000e34:	20 30                	and    BYTE PTR [eax],dh
10000e36:	78 25                	js     10000e5d <AC97::stopPlayback()+0x2bd>
10000e38:	58                   	pop    eax
10000e39:	0a 00                	or     al,BYTE PTR [eax]
10000e3b:	69 6e 74 65 72 72 75 	imul   ebp,DWORD PTR [esi+0x74],0x75727265
10000e42:	70 74                	jo     10000eb8 <vtable for AC97+0x20>
10000e44:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000e4a:	00 62 65             	add    BYTE PTR [edx+0x65],ah
10000e4d:	67 69 6e 6e 69 6e 67 20 	imul   ebp,DWORD PTR [bp+0x6e],0x20676e69
10000e55:	70 6c                	jo     10000ec3 <vtable for AC97+0x2b>
10000e57:	61                   	popa   
10000e58:	79 62                	jns    10000ebc <vtable for AC97+0x24>
10000e5a:	61                   	popa   
10000e5b:	63 6b 2e             	arpl   WORD PTR [ebx+0x2e],bp
10000e5e:	2e 2e 0a 00          	cs or  al,BYTE PTR cs:[eax]
10000e62:	00 00                	add    BYTE PTR [eax],al
10000e64:	41                   	inc    ecx
10000e65:	43                   	inc    ebx
10000e66:	39 37                	cmp    DWORD PTR [edi],esi
10000e68:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000e6a:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000e6d:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000e74:	61                   	popa   
10000e75:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000e78:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
10000e7b:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e7c:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e7d:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000e7f:	73 20                	jae    10000ea1 <vtable for AC97+0x9>
10000e81:	21 3d 20 32 20 4e    	and    DWORD PTR ds:0x4e203220,edi
10000e87:	4f                   	dec    edi
10000e88:	54                   	push   esp
10000e89:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000e8c:	50                   	push   eax
10000e8d:	50                   	push   eax
10000e8e:	4f                   	dec    edi
10000e8f:	52                   	push   edx
10000e90:	54                   	push   esp
10000e91:	45                   	inc    ebp
10000e92:	44                   	inc    esp
10000e93:	21 00                	and    DWORD PTR [eax],eax
10000e95:	66 90                	xchg   ax,ax
10000e97:	90                   	nop

10000e98 <vtable for AC97>:
	...
	10000ea0: R_386_32	AC97::~AC97()
	10000ea4: R_386_32	AC97::~AC97()
	10000ea8: R_386_32	AC97::open(int, int, void*)
	10000eac: R_386_32	AC97::close(int, int, void*)
	10000eb0: R_386_32	Device::hibernate()
	10000eb4: R_386_32	Device::wake()
	10000eb8: R_386_32	Device::detect()
	10000ebc: R_386_32	Device::disableLegacy()
	10000ec0: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000ec4: R_386_32	AC97::beginPlayback()
	10000ec8: R_386_32	AC97::stopPlayback()
