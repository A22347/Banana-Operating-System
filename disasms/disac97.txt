
packages/banana/32/0002/ac97.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(Device*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(Device*)-0xa>	1000000d: R_386_PC32	start(Device*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(Device*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	57                   	push   edi
1000001b:	56                   	push   esi
1000001c:	53                   	push   ebx
1000001d:	83 ec 2c             	sub    esp,0x2c
10000020:	83 ec 0c             	sub    esp,0xc
10000023:	68 40 0d 00 10       	push   0x10000d40	10000024: R_386_32	.text
10000028:	e8 fc ff ff ff       	call   10000029 <start(Device*)+0x12>	10000029: R_386_PC32	KeSetBootMessage(char const*)
1000002d:	83 c4 10             	add    esp,0x10
10000030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000033:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000003c:	e8 fc ff ff ff       	call   1000003d <start(Device*)+0x26>	1000003d: R_386_PC32	Device::getParent()
10000041:	83 c4 10             	add    esp,0x10
10000044:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000047:	c7 45 d8 14 02 00 00 	mov    DWORD PTR [ebp-0x28],0x214
1000004e:	83 ec 0c             	sub    esp,0xc
10000051:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000054:	e8 fc ff ff ff       	call   10000055 <start(Device*)+0x3e>	10000055: R_386_PC32	malloc
10000059:	83 c4 10             	add    esp,0x10
1000005c:	89 c3                	mov    ebx,eax
1000005e:	83 ec 0c             	sub    esp,0xc
10000061:	53                   	push   ebx
10000062:	e8 fc ff ff ff       	call   10000063 <start(Device*)+0x4c>	10000063: R_386_PC32	AC97::AC97()
10000067:	83 c4 10             	add    esp,0x10
1000006a:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
1000006d:	83 ec 08             	sub    esp,0x8
10000070:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000073:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000076:	e8 fc ff ff ff       	call   10000077 <start(Device*)+0x60>	10000077: R_386_PC32	Device::addChild(Device*)
1000007b:	83 c4 10             	add    esp,0x10
1000007e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000081:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000084:	83 ec 08             	sub    esp,0x8
10000087:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000008a:	83 ec 24             	sub    esp,0x24
1000008d:	89 e2                	mov    edx,esp
1000008f:	8d 98 18 01 00 00    	lea    ebx,[eax+0x118]
10000095:	b8 09 00 00 00       	mov    eax,0x9
1000009a:	89 d7                	mov    edi,edx
1000009c:	89 de                	mov    esi,ebx
1000009e:	89 c1                	mov    ecx,eax
100000a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100000a2:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100000a5:	e8 fc ff ff ff       	call   100000a6 <start(Device*)+0x8f>	100000a6: R_386_PC32	Device::preOpenPCI(PCIDeviceInfo)
100000aa:	83 c4 30             	add    esp,0x30
100000ad:	6a 00                	push   0x0
100000af:	6a 00                	push   0x0
100000b1:	6a 00                	push   0x0
100000b3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000b6:	e8 fc ff ff ff       	call   100000b7 <start(Device*)+0xa0>	100000b7: R_386_PC32	AC97::_open(int, int, void*)
100000bb:	83 c4 10             	add    esp,0x10
100000be:	a1 00 00 00 00       	mov    eax,ds:0x0	100000bf: R_386_32	kernelProcess
100000c3:	6a 1e                	push   0x1e
100000c5:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000c8:	68 00 00 00 00       	push   0x0	100000c9: R_386_32	playThread(void*)
100000cd:	50                   	push   eax
100000ce:	e8 fc ff ff ff       	call   100000cf <start(Device*)+0xb8>	100000cf: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100000d3:	83 c4 10             	add    esp,0x10
100000d6:	90                   	nop
100000d7:	8d 65 f4             	lea    esp,[ebp-0xc]
100000da:	5b                   	pop    ebx
100000db:	5e                   	pop    esi
100000dc:	5f                   	pop    edi
100000dd:	5d                   	pop    ebp
100000de:	c3                   	ret    

100000df <playThread(void*)>:
100000df:	55                   	push   ebp
100000e0:	89 e5                	mov    ebp,esp
100000e2:	57                   	push   edi
100000e3:	56                   	push   esi
100000e4:	53                   	push   ebx
100000e5:	83 ec 3c             	sub    esp,0x3c
100000e8:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	100000eb: R_386_32	irqDisableCounter
100000ef:	a1 00 00 00 00       	mov    eax,ds:0x0	100000f0: R_386_32	irqDisableCounter
100000f4:	85 c0                	test   eax,eax
100000f6:	75 01                	jne    100000f9 <playThread(void*)+0x1a>
100000f8:	fb                   	sti    
100000f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100000ff:	c7 45 dc 40 1f 00 00 	mov    DWORD PTR [ebp-0x24],0x1f40
10000106:	c7 45 d8 10 00 00 00 	mov    DWORD PTR [ebp-0x28],0x10
1000010d:	c7 45 d4 02 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x2
10000114:	c7 45 c0 1c 00 00 00 	mov    DWORD PTR [ebp-0x40],0x1c
1000011b:	83 ec 0c             	sub    esp,0xc
1000011e:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
10000121:	e8 fc ff ff ff       	call   10000122 <playThread(void*)+0x43>	10000122: R_386_PC32	malloc
10000126:	83 c4 10             	add    esp,0x10
10000129:	89 c3                	mov    ebx,eax
1000012b:	83 ec 0c             	sub    esp,0xc
1000012e:	68 00 00 06 00       	push   0x60000
10000133:	6a 02                	push   0x2
10000135:	6a 10                	push   0x10
10000137:	68 40 1f 00 00       	push   0x1f40
1000013c:	53                   	push   ebx
1000013d:	e8 fc ff ff ff       	call   1000013e <playThread(void*)+0x5f>	1000013e: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
10000142:	83 c4 20             	add    esp,0x20
10000145:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10000148:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
1000014c:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
10000153:	83 ec 0c             	sub    esp,0xc
10000156:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
10000159:	e8 fc ff ff ff       	call   1000015a <playThread(void*)+0x7b>	1000015a: R_386_PC32	malloc
1000015e:	83 c4 10             	add    esp,0x10
10000161:	89 c3                	mov    ebx,eax
10000163:	a1 00 00 00 00       	mov    eax,ds:0x0	10000164: R_386_32	kernelProcess
10000168:	83 ec 04             	sub    esp,0x4
1000016b:	50                   	push   eax
1000016c:	68 58 0d 00 10       	push   0x10000d58	1000016d: R_386_32	.text
10000171:	53                   	push   ebx
10000172:	e8 fc ff ff ff       	call   10000173 <playThread(void*)+0x94>	10000173: R_386_PC32	File::File(char const*, Process*)
10000177:	83 c4 10             	add    esp,0x10
1000017a:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
1000017d:	83 ec 08             	sub    esp,0x8
10000180:	6a 01                	push   0x1
10000182:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000185:	e8 fc ff ff ff       	call   10000186 <playThread(void*)+0xa7>	10000186: R_386_PC32	File::open(FileOpenMode)
1000018a:	83 c4 10             	add    esp,0x10
1000018d:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [ebp-0x44],0x0
10000194:	83 ec 0c             	sub    esp,0xc
10000197:	68 68 0d 00 10       	push   0x10000d68	10000198: R_386_32	.text
1000019c:	e8 fc ff ff ff       	call   1000019d <playThread(void*)+0xbe>	1000019d: R_386_PC32	Dbg::kprintf(char const*, ...)
100001a1:	83 c4 10             	add    esp,0x10
100001a4:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100001a7:	8b 00                	mov    eax,DWORD PTR [eax]
100001a9:	83 c0 0c             	add    eax,0xc
100001ac:	8b 00                	mov    eax,DWORD PTR [eax]
100001ae:	83 ec 0c             	sub    esp,0xc
100001b1:	8d 55 bc             	lea    edx,[ebp-0x44]
100001b4:	52                   	push   edx
100001b5:	68 00 00 00 00       	push   0x0	100001b6: R_386_32	buf
100001ba:	6a 00                	push   0x0
100001bc:	68 00 20 00 00       	push   0x2000
100001c1:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100001c4:	ff d0                	call   eax
100001c6:	83 c4 20             	add    esp,0x20
100001c9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100001cc:	83 ec 0c             	sub    esp,0xc
100001cf:	68 78 0d 00 10       	push   0x10000d78	100001d0: R_386_32	.text
100001d4:	e8 fc ff ff ff       	call   100001d5 <playThread(void*)+0xf6>	100001d5: R_386_PC32	Dbg::kprintf(char const*, ...)
100001d9:	83 c4 10             	add    esp,0x10
100001dc:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100001df:	85 c0                	test   eax,eax
100001e1:	74 06                	je     100001e9 <playThread(void*)+0x10a>
100001e3:	83 7d c8 00          	cmp    DWORD PTR [ebp-0x38],0x0
100001e7:	74 22                	je     1000020b <playThread(void*)+0x12c>
100001e9:	83 ec 0c             	sub    esp,0xc
100001ec:	68 87 0d 00 10       	push   0x10000d87	100001ed: R_386_32	.text
100001f1:	e8 fc ff ff ff       	call   100001f2 <playThread(void*)+0x113>	100001f2: R_386_PC32	Dbg::kprintf(char const*, ...)
100001f6:	83 c4 10             	add    esp,0x10
100001f9:	83 ec 0c             	sub    esp,0xc
100001fc:	6a 00                	push   0x0
100001fe:	e8 fc ff ff ff       	call   100001ff <playThread(void*)+0x120>	100001ff: R_386_PC32	terminateTask(int)
10000203:	83 c4 10             	add    esp,0x10
10000206:	e9 4b 01 00 00       	jmp    10000356 <playThread(void*)+0x277>
1000020b:	83 ec 0c             	sub    esp,0xc
1000020e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000211:	e8 fc ff ff ff       	call   10000212 <playThread(void*)+0x133>	10000212: R_386_PC32	SoundPort::getBufferUsed()
10000216:	83 c4 10             	add    esp,0x10
10000219:	83 ec 08             	sub    esp,0x8
1000021c:	50                   	push   eax
1000021d:	68 9d 0d 00 10       	push   0x10000d9d	1000021e: R_386_32	.text
10000222:	e8 fc ff ff ff       	call   10000223 <playThread(void*)+0x144>	10000223: R_386_PC32	Dbg::kprintf(char const*, ...)
10000227:	83 c4 10             	add    esp,0x10
1000022a:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
1000022d:	83 f0 01             	xor    eax,0x1
10000230:	84 c0                	test   al,al
10000232:	74 4c                	je     10000280 <playThread(void*)+0x1a1>
10000234:	6a 02                	push   0x2
10000236:	6a 10                	push   0x10
10000238:	68 40 1f 00 00       	push   0x1f40
1000023d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000240:	e8 fc ff ff ff       	call   10000241 <playThread(void*)+0x162>	10000241: R_386_PC32	SoundCard::configureRates(int, int, int)
10000245:	83 c4 10             	add    esp,0x10
10000248:	83 ec 08             	sub    esp,0x8
1000024b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000024e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000251:	e8 fc ff ff ff       	call   10000252 <playThread(void*)+0x173>	10000252: R_386_PC32	SoundCard::addChannel(SoundPort*)
10000256:	83 c4 10             	add    esp,0x10
10000259:	83 ec 0c             	sub    esp,0xc
1000025c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000025f:	e8 fc ff ff ff       	call   10000260 <playThread(void*)+0x181>	10000260: R_386_PC32	SoundPort::unpause()
10000264:	83 c4 10             	add    esp,0x10
10000267:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000026a:	8b 00                	mov    eax,DWORD PTR [eax]
1000026c:	83 c0 24             	add    eax,0x24
1000026f:	8b 00                	mov    eax,DWORD PTR [eax]
10000271:	83 ec 0c             	sub    esp,0xc
10000274:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000277:	ff d0                	call   eax
10000279:	83 c4 10             	add    esp,0x10
1000027c:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
10000280:	83 ec 0c             	sub    esp,0xc
10000283:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000286:	e8 fc ff ff ff       	call   10000287 <playThread(void*)+0x1a8>	10000287: R_386_PC32	SoundPort::getBufferUsed()
1000028b:	83 c4 10             	add    esp,0x10
1000028e:	89 c2                	mov    edx,eax
10000290:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10000293:	89 c1                	mov    ecx,eax
10000295:	01 c9                	add    ecx,ecx
10000297:	01 c8                	add    eax,ecx
10000299:	8d 1c 02             	lea    ebx,[edx+eax*1]
1000029c:	83 ec 0c             	sub    esp,0xc
1000029f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100002a2:	e8 fc ff ff ff       	call   100002a3 <playThread(void*)+0x1c4>	100002a3: R_386_PC32	SoundPort::getBufferSize()
100002a7:	83 c4 10             	add    esp,0x10
100002aa:	39 c3                	cmp    ebx,eax
100002ac:	0f 9d c0             	setge  al
100002af:	84 c0                	test   al,al
100002b1:	0f 84 83 00 00 00    	je     1000033a <playThread(void*)+0x25b>
100002b7:	83 ec 0c             	sub    esp,0xc
100002ba:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100002bd:	e8 fc ff ff ff       	call   100002be <playThread(void*)+0x1df>	100002be: R_386_PC32	SoundPort::getBufferSize()
100002c2:	83 c4 10             	add    esp,0x10
100002c5:	89 c3                	mov    ebx,eax
100002c7:	83 ec 0c             	sub    esp,0xc
100002ca:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100002cd:	e8 fc ff ff ff       	call   100002ce <playThread(void*)+0x1ef>	100002ce: R_386_PC32	SoundPort::getBufferUsed()
100002d2:	83 c4 10             	add    esp,0x10
100002d5:	89 c2                	mov    edx,eax
100002d7:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100002da:	89 c1                	mov    ecx,eax
100002dc:	01 c9                	add    ecx,ecx
100002de:	01 c8                	add    eax,ecx
100002e0:	8d 3c 02             	lea    edi,[edx+eax*1]
100002e3:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100002e6:	89 c2                	mov    edx,eax
100002e8:	01 d2                	add    edx,edx
100002ea:	8d 34 02             	lea    esi,[edx+eax*1]
100002ed:	83 ec 0c             	sub    esp,0xc
100002f0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100002f3:	e8 fc ff ff ff       	call   100002f4 <playThread(void*)+0x215>	100002f4: R_386_PC32	SoundPort::getBufferUsed()
100002f8:	83 c4 10             	add    esp,0x10
100002fb:	83 ec 0c             	sub    esp,0xc
100002fe:	53                   	push   ebx
100002ff:	57                   	push   edi
10000300:	56                   	push   esi
10000301:	50                   	push   eax
10000302:	68 bb 0d 00 10       	push   0x10000dbb	10000303: R_386_32	.text
10000307:	e8 fc ff ff ff       	call   10000308 <playThread(void*)+0x229>	10000308: R_386_PC32	Dbg::kprintf(char const*, ...)
1000030c:	83 c4 20             	add    esp,0x20
1000030f:	fa                   	cli    
10000310:	a1 00 00 00 00       	mov    eax,ds:0x0	10000311: R_386_32	irqDisableCounter
10000315:	40                   	inc    eax
10000316:	a3 00 00 00 00       	mov    ds:0x0,eax	10000317: R_386_32	irqDisableCounter
1000031b:	e8 fc ff ff ff       	call   1000031c <playThread(void*)+0x23d>	1000031c: R_386_PC32	schedule()
10000320:	f0 ff 0d 00 00 00 00 	lock dec DWORD PTR ds:0x0	10000323: R_386_32	irqDisableCounter
10000327:	a1 00 00 00 00       	mov    eax,ds:0x0	10000328: R_386_32	irqDisableCounter
1000032c:	85 c0                	test   eax,eax
1000032e:	0f 85 4c ff ff ff    	jne    10000280 <playThread(void*)+0x1a1>
10000334:	fb                   	sti    
10000335:	e9 46 ff ff ff       	jmp    10000280 <playThread(void*)+0x1a1>
1000033a:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
1000033d:	83 ec 04             	sub    esp,0x4
10000340:	50                   	push   eax
10000341:	68 00 00 00 00       	push   0x0	10000342: R_386_32	buf
10000346:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000349:	e8 fc ff ff ff       	call   1000034a <playThread(void*)+0x26b>	1000034a: R_386_PC32	SoundPort::buffer8(signed char*, int)
1000034e:	83 c4 10             	add    esp,0x10
10000351:	e9 37 fe ff ff       	jmp    1000018d <playThread(void*)+0xae>
10000356:	8d 65 f4             	lea    esp,[ebp-0xc]
10000359:	5b                   	pop    ebx
1000035a:	5e                   	pop    esi
1000035b:	5f                   	pop    edi
1000035c:	5d                   	pop    ebp
1000035d:	c3                   	ret    

1000035e <AC97::AC97()>:
1000035e:	55                   	push   ebp
1000035f:	89 e5                	mov    ebp,esp
10000361:	83 ec 08             	sub    esp,0x8
10000364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000367:	83 ec 08             	sub    esp,0x8
1000036a:	68 cf 0d 00 10       	push   0x10000dcf	1000036b: R_386_32	.text
1000036f:	50                   	push   eax
10000370:	e8 fc ff ff ff       	call   10000371 <AC97::AC97()+0x13>	10000371: R_386_PC32	SoundCard::SoundCard(char const*)
10000375:	83 c4 10             	add    esp,0x10
10000378:	ba 08 00 00 00       	mov    edx,0x8	10000379: R_386_32	vtable for AC97
1000037d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000380:	89 10                	mov    DWORD PTR [eax],edx
10000382:	90                   	nop
10000383:	c9                   	leave  
10000384:	c3                   	ret    
10000385:	90                   	nop

10000386 <AC97::~AC97()>:
10000386:	55                   	push   ebp
10000387:	89 e5                	mov    ebp,esp
10000389:	83 ec 08             	sub    esp,0x8
1000038c:	ba 08 00 00 00       	mov    edx,0x8	1000038d: R_386_32	vtable for AC97
10000391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000394:	89 10                	mov    DWORD PTR [eax],edx
10000396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000399:	83 ec 0c             	sub    esp,0xc
1000039c:	50                   	push   eax
1000039d:	e8 fc ff ff ff       	call   1000039e <AC97::~AC97()+0x18>	1000039e: R_386_PC32	SoundCard::~SoundCard()
100003a2:	83 c4 10             	add    esp,0x10
100003a5:	90                   	nop
100003a6:	c9                   	leave  
100003a7:	c3                   	ret    

100003a8 <AC97::~AC97()>:
100003a8:	55                   	push   ebp
100003a9:	89 e5                	mov    ebp,esp
100003ab:	83 ec 08             	sub    esp,0x8
100003ae:	83 ec 0c             	sub    esp,0xc
100003b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003b4:	e8 fc ff ff ff       	call   100003b5 <AC97::~AC97()+0xd>	100003b5: R_386_PC32	AC97::~AC97()
100003b9:	83 c4 10             	add    esp,0x10
100003bc:	83 ec 08             	sub    esp,0x8
100003bf:	68 14 02 00 00       	push   0x214
100003c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003c7:	e8 fc ff ff ff       	call   100003c8 <AC97::~AC97()+0x20>	100003c8: R_386_PC32	operator delete(void*, unsigned long)
100003cc:	83 c4 10             	add    esp,0x10
100003cf:	c9                   	leave  
100003d0:	c3                   	ret    
100003d1:	90                   	nop

100003d2 <AC97::setVolume(int, int)>:
100003d2:	55                   	push   ebp
100003d3:	89 e5                	mov    ebp,esp
100003d5:	83 ec 18             	sub    esp,0x18
100003d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100003db:	89 d0                	mov    eax,edx
100003dd:	c1 e0 02             	shl    eax,0x2
100003e0:	01 d0                	add    eax,edx
100003e2:	01 c0                	add    eax,eax
100003e4:	85 c0                	test   eax,eax
100003e6:	79 03                	jns    100003eb <AC97::setVolume(int, int)+0x19>
100003e8:	83 c0 1f             	add    eax,0x1f
100003eb:	c1 f8 05             	sar    eax,0x5
100003ee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100003f1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100003f4:	89 d0                	mov    eax,edx
100003f6:	c1 e0 02             	shl    eax,0x2
100003f9:	01 d0                	add    eax,edx
100003fb:	01 c0                	add    eax,eax
100003fd:	85 c0                	test   eax,eax
100003ff:	79 03                	jns    10000404 <AC97::setVolume(int, int)+0x32>
10000401:	83 c0 1f             	add    eax,0x1f
10000404:	c1 f8 05             	sar    eax,0x5
10000407:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000040a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000040d:	c1 e0 08             	shl    eax,0x8
10000410:	89 c2                	mov    edx,eax
10000412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000415:	09 d0                	or     eax,edx
10000417:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
1000041b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000041c: R_386_32	thePCI
10000420:	0f b7 4d ee          	movzx  ecx,WORD PTR [ebp-0x12]
10000424:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000427:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
1000042d:	6a 02                	push   0x2
1000042f:	51                   	push   ecx
10000430:	52                   	push   edx
10000431:	50                   	push   eax
10000432:	e8 fc ff ff ff       	call   10000433 <AC97::setVolume(int, int)+0x61>	10000433: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000437:	83 c4 10             	add    esp,0x10
1000043a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000043b: R_386_32	thePCI
1000043f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000442:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
10000448:	6a 18                	push   0x18
1000044a:	6a 00                	push   0x0
1000044c:	52                   	push   edx
1000044d:	50                   	push   eax
1000044e:	e8 fc ff ff ff       	call   1000044f <AC97::setVolume(int, int)+0x7d>	1000044f: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000453:	83 c4 10             	add    esp,0x10
10000456:	90                   	nop
10000457:	c9                   	leave  
10000458:	c3                   	ret    
10000459:	90                   	nop

1000045a <AC97::open(int, int, void*)>:
1000045a:	b8 00 00 00 00       	mov    eax,0x0
1000045f:	c3                   	ret    

10000460 <ac97IRQHandler(regs*, void*)>:
10000460:	55                   	push   ebp
10000461:	89 e5                	mov    ebp,esp
10000463:	83 ec 18             	sub    esp,0x18
10000466:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000469:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
1000046c:	83 ec 0c             	sub    esp,0xc
1000046f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000472:	e8 fc ff ff ff       	call   10000473 <ac97IRQHandler(regs*, void*)+0x13>	10000473: R_386_PC32	AC97::handleIRQ()
10000477:	83 c4 10             	add    esp,0x10
1000047a:	90                   	nop
1000047b:	c9                   	leave  
1000047c:	c3                   	ret    
1000047d:	90                   	nop

1000047e <AC97::handleIRQ()>:
1000047e:	55                   	push   ebp
1000047f:	89 e5                	mov    ebp,esp
10000481:	83 ec 18             	sub    esp,0x18
10000484:	83 ec 0c             	sub    esp,0xc
10000487:	68 e8 0d 00 10       	push   0x10000de8	10000488: R_386_32	.text
1000048c:	e8 fc ff ff ff       	call   1000048d <AC97::handleIRQ()+0xf>	1000048d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000491:	83 c4 10             	add    esp,0x10
10000494:	a1 00 00 00 00       	mov    eax,ds:0x0	10000495: R_386_32	thePCI
10000499:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000049c:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100004a2:	83 ec 04             	sub    esp,0x4
100004a5:	6a 14                	push   0x14
100004a7:	52                   	push   edx
100004a8:	50                   	push   eax
100004a9:	e8 fc ff ff ff       	call   100004aa <AC97::handleIRQ()+0x2c>	100004aa: R_386_PC32	PCI::readBAR8(unsigned int, int)
100004ae:	83 c4 10             	add    esp,0x10
100004b1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100004b4:	a1 00 00 00 00       	mov    eax,ds:0x0	100004b5: R_386_32	thePCI
100004b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100004bc:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100004c2:	83 ec 04             	sub    esp,0x4
100004c5:	6a 15                	push   0x15
100004c7:	52                   	push   edx
100004c8:	50                   	push   eax
100004c9:	e8 fc ff ff ff       	call   100004ca <AC97::handleIRQ()+0x4c>	100004ca: R_386_PC32	PCI::readBAR8(unsigned int, int)
100004ce:	83 c4 10             	add    esp,0x10
100004d1:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
100004d4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100004d8:	40                   	inc    eax
100004d9:	b9 03 00 00 00       	mov    ecx,0x3
100004de:	99                   	cdq    
100004df:	f7 f9                	idiv   ecx
100004e1:	89 d1                	mov    ecx,edx
100004e3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100004e7:	8d 50 ff             	lea    edx,[eax-0x1]
100004ea:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100004ee:	51                   	push   ecx
100004ef:	52                   	push   edx
100004f0:	50                   	push   eax
100004f1:	68 f4 0d 00 10       	push   0x10000df4	100004f2: R_386_32	.text
100004f6:	e8 fc ff ff ff       	call   100004f7 <AC97::handleIRQ()+0x79>	100004f7: R_386_PC32	Dbg::kprintf(char const*, ...)
100004fb:	83 c4 10             	add    esp,0x10
100004fe:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
10000502:	83 ec 08             	sub    esp,0x8
10000505:	50                   	push   eax
10000506:	68 23 0e 00 10       	push   0x10000e23	10000507: R_386_32	.text
1000050b:	e8 fc ff ff ff       	call   1000050c <AC97::handleIRQ()+0x8e>	1000050c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000510:	83 c4 10             	add    esp,0x10
10000513:	a1 00 00 00 00       	mov    eax,ds:0x0	10000514: R_386_32	thePCI
10000518:	0f b6 4d f6          	movzx  ecx,BYTE PTR [ebp-0xa]
1000051c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000051f:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000525:	6a 15                	push   0x15
10000527:	51                   	push   ecx
10000528:	52                   	push   edx
10000529:	50                   	push   eax
1000052a:	e8 fc ff ff ff       	call   1000052b <AC97::handleIRQ()+0xad>	1000052b: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
1000052f:	83 c4 10             	add    esp,0x10
10000532:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000536:	83 c0 02             	add    eax,0x2
10000539:	b9 03 00 00 00       	mov    ecx,0x3
1000053e:	99                   	cdq    
1000053f:	f7 f9                	idiv   ecx
10000541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000544:	83 c2 7c             	add    edx,0x7c
10000547:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
1000054b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000054e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000551:	83 ec 04             	sub    esp,0x4
10000554:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000557:	68 01 80 00 00       	push   0x8001
1000055c:	50                   	push   eax
1000055d:	e8 fc ff ff ff       	call   1000055e <AC97::handleIRQ()+0xe0>	1000055e: R_386_PC32	SoundCard::getSamples16(int, short*)
10000562:	83 c4 10             	add    esp,0x10
10000565:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000568:	83 ec 04             	sub    esp,0x4
1000056b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000056e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000571:	68 2e 0e 00 10       	push   0x10000e2e	10000572: R_386_32	.text
10000576:	e8 fc ff ff ff       	call   10000577 <AC97::handleIRQ()+0xf9>	10000577: R_386_PC32	Dbg::kprintf(char const*, ...)
1000057b:	83 c4 10             	add    esp,0x10
1000057e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000057f: R_386_32	thePCI
10000583:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000586:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000058c:	6a 16                	push   0x16
1000058e:	6a 1c                	push   0x1c
10000590:	52                   	push   edx
10000591:	50                   	push   eax
10000592:	e8 fc ff ff ff       	call   10000593 <AC97::handleIRQ()+0x115>	10000593: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000597:	83 c4 10             	add    esp,0x10
1000059a:	90                   	nop
1000059b:	c9                   	leave  
1000059c:	c3                   	ret    
1000059d:	90                   	nop

1000059e <AC97::setSampleRate(int)>:
1000059e:	55                   	push   ebp
1000059f:	89 e5                	mov    ebp,esp
100005a1:	53                   	push   ebx
100005a2:	83 ec 04             	sub    esp,0x4
100005a5:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100005a7: R_386_32	thePCI
100005ab:	a1 00 00 00 00       	mov    eax,ds:0x0	100005ac: R_386_32	thePCI
100005b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005b3:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100005b9:	83 ec 04             	sub    esp,0x4
100005bc:	6a 2a                	push   0x2a
100005be:	52                   	push   edx
100005bf:	50                   	push   eax
100005c0:	e8 fc ff ff ff       	call   100005c1 <AC97::setSampleRate(int)+0x23>	100005c1: R_386_PC32	PCI::readBAR16(unsigned int, int)
100005c5:	83 c4 10             	add    esp,0x10
100005c8:	83 c8 01             	or     eax,0x1
100005cb:	0f b7 d0             	movzx  edx,ax
100005ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d1:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005d7:	6a 2a                	push   0x2a
100005d9:	52                   	push   edx
100005da:	50                   	push   eax
100005db:	53                   	push   ebx
100005dc:	e8 fc ff ff ff       	call   100005dd <AC97::setSampleRate(int)+0x3f>	100005dd: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100005e1:	83 c4 10             	add    esp,0x10
100005e4:	83 ec 0c             	sub    esp,0xc
100005e7:	6a 64                	push   0x64
100005e9:	e8 fc ff ff ff       	call   100005ea <AC97::setSampleRate(int)+0x4c>	100005ea: R_386_PC32	milliTenthSleep(unsigned int)
100005ee:	83 c4 10             	add    esp,0x10
100005f1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100005f3: R_386_32	thePCI
100005f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005fa:	0f b7 c8             	movzx  ecx,ax
100005fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000600:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000606:	6a 2c                	push   0x2c
10000608:	51                   	push   ecx
10000609:	50                   	push   eax
1000060a:	52                   	push   edx
1000060b:	e8 fc ff ff ff       	call   1000060c <AC97::setSampleRate(int)+0x6e>	1000060c: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000610:	83 c4 10             	add    esp,0x10
10000613:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000615: R_386_32	thePCI
10000619:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000061c:	0f b7 c8             	movzx  ecx,ax
1000061f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000622:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000628:	6a 32                	push   0x32
1000062a:	51                   	push   ecx
1000062b:	50                   	push   eax
1000062c:	52                   	push   edx
1000062d:	e8 fc ff ff ff       	call   1000062e <AC97::setSampleRate(int)+0x90>	1000062e: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000632:	83 c4 10             	add    esp,0x10
10000635:	83 ec 0c             	sub    esp,0xc
10000638:	6a 64                	push   0x64
1000063a:	e8 fc ff ff ff       	call   1000063b <AC97::setSampleRate(int)+0x9d>	1000063b: R_386_PC32	milliTenthSleep(unsigned int)
1000063f:	83 c4 10             	add    esp,0x10
10000642:	90                   	nop
10000643:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000646:	c9                   	leave  
10000647:	c3                   	ret    

10000648 <AC97::_open(int, int, void*)>:
10000648:	55                   	push   ebp
10000649:	89 e5                	mov    ebp,esp
1000064b:	56                   	push   esi
1000064c:	53                   	push   ebx
1000064d:	83 ec 30             	sub    esp,0x30
10000650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000653:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
10000659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000065c:	89 90 e8 01 00 00    	mov    DWORD PTR [eax+0x1e8],edx
10000662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000665:	8b 90 24 01 00 00    	mov    edx,DWORD PTR [eax+0x124]
1000066b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000066e:	89 90 ec 01 00 00    	mov    DWORD PTR [eax+0x1ec],edx
10000674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000677:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000067d:	83 e0 01             	and    eax,0x1
10000680:	85 c0                	test   eax,eax
10000682:	74 5a                	je     100006de <AC97::_open(int, int, void*)+0x96>
10000684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000687:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000068d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000690:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000696:	0f b6 ca             	movzx  ecx,dl
10000699:	83 e0 fc             	and    eax,0xfffffffc
1000069c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000069f:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100006a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006ad:	0f b6 d0             	movzx  edx,al
100006b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b3:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
100006b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006c1:	8d 50 01             	lea    edx,[eax+0x1]
100006c4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006c7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006cd:	0f b6 d0             	movzx  edx,al
100006d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006d3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006d7:	83 e1 3f             	and    ecx,0x3f
100006da:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006e1:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
100006e7:	83 e0 01             	and    eax,0x1
100006ea:	85 c0                	test   eax,eax
100006ec:	74 5a                	je     10000748 <AC97::_open(int, int, void*)+0x100>
100006ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006f1:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
100006f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006fa:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000700:	0f b6 ca             	movzx  ecx,dl
10000703:	83 e0 fc             	and    eax,0xfffffffc
10000706:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000709:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
1000070e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000711:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000717:	0f b6 d0             	movzx  edx,al
1000071a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000071d:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
10000722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000725:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000072b:	8d 50 01             	lea    edx,[eax+0x1]
1000072e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000731:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000737:	0f b6 d0             	movzx  edx,al
1000073a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000073d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000741:	83 e1 3f             	and    ecx,0x3f
10000744:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000748:	a1 00 00 00 00       	mov    eax,ds:0x0	10000749: R_386_32	thePCI
1000074d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000750:	8a 92 1e 01 00 00    	mov    dl,BYTE PTR [edx+0x11e]
10000756:	0f b6 da             	movzx  ebx,dl
10000759:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000075c:	8a 92 1d 01 00 00    	mov    dl,BYTE PTR [edx+0x11d]
10000762:	0f b6 ca             	movzx  ecx,dl
10000765:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000768:	8a 92 1c 01 00 00    	mov    dl,BYTE PTR [edx+0x11c]
1000076e:	0f b6 d2             	movzx  edx,dl
10000771:	83 ec 0c             	sub    esp,0xc
10000774:	6a 04                	push   0x4
10000776:	53                   	push   ebx
10000777:	51                   	push   ecx
10000778:	52                   	push   edx
10000779:	50                   	push   eax
1000077a:	e8 fc ff ff ff       	call   1000077b <AC97::_open(int, int, void*)+0x133>	1000077b: R_386_PC32	PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)
1000077f:	83 c4 20             	add    esp,0x20
10000782:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000786:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000788: R_386_32	thePCI
1000078c:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000790:	83 c8 05             	or     eax,0x5
10000793:	0f b7 f0             	movzx  esi,ax
10000796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000799:	8a 80 1e 01 00 00    	mov    al,BYTE PTR [eax+0x11e]
1000079f:	0f b6 d8             	movzx  ebx,al
100007a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007a5:	8a 80 1d 01 00 00    	mov    al,BYTE PTR [eax+0x11d]
100007ab:	0f b6 c8             	movzx  ecx,al
100007ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007b1:	8a 80 1c 01 00 00    	mov    al,BYTE PTR [eax+0x11c]
100007b7:	0f b6 c0             	movzx  eax,al
100007ba:	83 ec 08             	sub    esp,0x8
100007bd:	56                   	push   esi
100007be:	6a 04                	push   0x4
100007c0:	53                   	push   ebx
100007c1:	51                   	push   ecx
100007c2:	50                   	push   eax
100007c3:	52                   	push   edx
100007c4:	e8 fc ff ff ff       	call   100007c5 <AC97::_open(int, int, void*)+0x17d>	100007c5: R_386_PC32	PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
100007c9:	83 c4 20             	add    esp,0x20
100007cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100007cd: R_386_32	thePCI
100007d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007d4:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100007da:	6a 2c                	push   0x2c
100007dc:	6a 03                	push   0x3
100007de:	52                   	push   edx
100007df:	50                   	push   eax
100007e0:	e8 fc ff ff ff       	call   100007e1 <AC97::_open(int, int, void*)+0x199>	100007e1: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
100007e5:	83 c4 10             	add    esp,0x10
100007e8:	a1 00 00 00 00       	mov    eax,ds:0x0	100007e9: R_386_32	thePCI
100007ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007f0:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100007f6:	6a 00                	push   0x0
100007f8:	68 aa 55 00 00       	push   0x55aa
100007fd:	52                   	push   edx
100007fe:	50                   	push   eax
100007ff:	e8 fc ff ff ff       	call   10000800 <AC97::_open(int, int, void*)+0x1b8>	10000800: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000804:	83 c4 10             	add    esp,0x10
10000807:	a1 00 00 00 00       	mov    eax,ds:0x0	10000808: R_386_32	thePCI
1000080c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000080f:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000815:	83 ec 04             	sub    esp,0x4
10000818:	6a 30                	push   0x30
1000081a:	52                   	push   edx
1000081b:	50                   	push   eax
1000081c:	e8 fc ff ff ff       	call   1000081d <AC97::_open(int, int, void*)+0x1d5>	1000081d: R_386_PC32	PCI::readBAR32(unsigned int, int)
10000821:	83 c4 10             	add    esp,0x10
10000824:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000827:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000082a:	c1 e8 14             	shr    eax,0x14
1000082d:	83 e0 03             	and    eax,0x3
10000830:	40                   	inc    eax
10000831:	01 c0                	add    eax,eax
10000833:	83 ec 08             	sub    esp,0x8
10000836:	50                   	push   eax
10000837:	68 49 0e 00 10       	push   0x10000e49	10000838: R_386_32	.text
1000083c:	e8 fc ff ff ff       	call   1000083d <AC97::_open(int, int, void*)+0x1f5>	1000083d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000841:	83 c4 10             	add    esp,0x10
10000844:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000847:	c1 e8 16             	shr    eax,0x16
1000084a:	83 e0 03             	and    eax,0x3
1000084d:	83 f8 01             	cmp    eax,0x1
10000850:	75 10                	jne    10000862 <AC97::_open(int, int, void*)+0x21a>
10000852:	83 ec 0c             	sub    esp,0xc
10000855:	68 5c 0e 00 10       	push   0x10000e5c	10000856: R_386_32	.text
1000085a:	e8 fc ff ff ff       	call   1000085b <AC97::_open(int, int, void*)+0x213>	1000085b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000085f:	83 c4 10             	add    esp,0x10
10000862:	a1 00 00 00 00       	mov    eax,ds:0x0	10000863: R_386_32	thePCI
10000867:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000086a:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000870:	83 ec 04             	sub    esp,0x4
10000873:	6a 1b                	push   0x1b
10000875:	52                   	push   edx
10000876:	50                   	push   eax
10000877:	e8 fc ff ff ff       	call   10000878 <AC97::_open(int, int, void*)+0x230>	10000878: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000087c:	83 c4 10             	add    esp,0x10
1000087f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10000882:	a1 00 00 00 00       	mov    eax,ds:0x0	10000883: R_386_32	thePCI
10000887:	8a 55 df             	mov    dl,BYTE PTR [ebp-0x21]
1000088a:	83 ca 02             	or     edx,0x2
1000088d:	0f b6 ca             	movzx  ecx,dl
10000890:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000893:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000899:	6a 1b                	push   0x1b
1000089b:	51                   	push   ecx
1000089c:	52                   	push   edx
1000089d:	50                   	push   eax
1000089e:	e8 fc ff ff ff       	call   1000089f <AC97::_open(int, int, void*)+0x257>	1000089f: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100008a3:	83 c4 10             	add    esp,0x10
100008a6:	83 ec 0c             	sub    esp,0xc
100008a9:	68 c4 09 00 00       	push   0x9c4
100008ae:	e8 fc ff ff ff       	call   100008af <AC97::_open(int, int, void*)+0x267>	100008af: R_386_PC32	milliTenthSleep(unsigned int)
100008b3:	83 c4 10             	add    esp,0x10
100008b6:	a1 00 00 00 00       	mov    eax,ds:0x0	100008b7: R_386_32	thePCI
100008bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008be:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100008c4:	83 ec 04             	sub    esp,0x4
100008c7:	6a 1b                	push   0x1b
100008c9:	52                   	push   edx
100008ca:	50                   	push   eax
100008cb:	e8 fc ff ff ff       	call   100008cc <AC97::_open(int, int, void*)+0x284>	100008cc: R_386_PC32	PCI::readBAR8(unsigned int, int)
100008d0:	83 c4 10             	add    esp,0x10
100008d3:	0f b6 c0             	movzx  eax,al
100008d6:	83 e0 02             	and    eax,0x2
100008d9:	85 c0                	test   eax,eax
100008db:	0f 95 c0             	setne  al
100008de:	84 c0                	test   al,al
100008e0:	74 10                	je     100008f2 <AC97::_open(int, int, void*)+0x2aa>
100008e2:	83 ec 0c             	sub    esp,0xc
100008e5:	68 75 0e 00 10       	push   0x10000e75	100008e6: R_386_32	.text
100008ea:	e8 fc ff ff ff       	call   100008eb <AC97::_open(int, int, void*)+0x2a3>	100008eb: R_386_PC32	Dbg::kprintf(char const*, ...)
100008ef:	83 c4 10             	add    esp,0x10
100008f2:	83 ec 04             	sub    esp,0x4
100008f5:	6a 32                	push   0x32
100008f7:	6a 0f                	push   0xf
100008f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008fc:	e8 fc ff ff ff       	call   100008fd <AC97::_open(int, int, void*)+0x2b5>	100008fd: R_386_PC32	AC97::setVolume(int, int)
10000901:	83 c4 10             	add    esp,0x10
10000904:	83 ec 0c             	sub    esp,0xc
10000907:	6a 01                	push   0x1
10000909:	e8 fc ff ff ff       	call   1000090a <AC97::_open(int, int, void*)+0x2c2>	1000090a: R_386_PC32	Phys::allocateContiguousPages(int)
1000090e:	83 c4 10             	add    esp,0x10
10000911:	89 c2                	mov    edx,eax
10000913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000916:	89 90 f4 01 00 00    	mov    DWORD PTR [eax+0x1f4],edx
1000091c:	83 ec 0c             	sub    esp,0xc
1000091f:	6a 01                	push   0x1
10000921:	e8 fc ff ff ff       	call   10000922 <AC97::_open(int, int, void*)+0x2da>	10000922: R_386_PC32	Virt::allocateKernelVirtualPages(int)
10000926:	83 c4 10             	add    esp,0x10
10000929:	89 c2                	mov    edx,eax
1000092b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000092e:	89 90 f0 01 00 00    	mov    DWORD PTR [eax+0x1f0],edx
10000934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000937:	8b 90 f0 01 00 00    	mov    edx,DWORD PTR [eax+0x1f0]
1000093d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000940:	8b 80 f4 01 00 00    	mov    eax,DWORD PTR [eax+0x1f4]
10000946:	83 ec 04             	sub    esp,0x4
10000949:	52                   	push   edx
1000094a:	50                   	push   eax
1000094b:	68 90 0e 00 10       	push   0x10000e90	1000094c: R_386_32	.text
10000950:	e8 fc ff ff ff       	call   10000951 <AC97::_open(int, int, void*)+0x309>	10000951: R_386_PC32	Dbg::kprintf(char const*, ...)
10000955:	83 c4 10             	add    esp,0x10
10000958:	a1 00 00 00 00       	mov    eax,ds:0x0	10000959: R_386_32	keFirstVAS
1000095d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000960:	8b 8a f0 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f0]
10000966:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000969:	8b 92 f4 01 00 00    	mov    edx,DWORD PTR [edx+0x1f4]
1000096f:	83 ec 0c             	sub    esp,0xc
10000972:	6a 03                	push   0x3
10000974:	6a 01                	push   0x1
10000976:	51                   	push   ecx
10000977:	52                   	push   edx
10000978:	50                   	push   eax
10000979:	e8 fc ff ff ff       	call   1000097a <AC97::_open(int, int, void*)+0x332>	1000097a: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
1000097e:	83 c4 20             	add    esp,0x20
10000981:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000988:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
1000098c:	0f 8f cb 00 00 00    	jg     10000a5d <AC97::_open(int, int, void*)+0x415>
10000992:	c7 45 d8 14 00 00 00 	mov    DWORD PTR [ebp-0x28],0x14
10000999:	83 ec 0c             	sub    esp,0xc
1000099c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000099f:	e8 fc ff ff ff       	call   100009a0 <AC97::_open(int, int, void*)+0x358>	100009a0: R_386_PC32	Phys::allocateContiguousPages(int)
100009a4:	83 c4 10             	add    esp,0x10
100009a7:	89 c2                	mov    edx,eax
100009a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ac:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
100009af:	83 e9 80             	sub    ecx,0xffffff80
100009b2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
100009b6:	83 ec 0c             	sub    esp,0xc
100009b9:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100009bc:	e8 fc ff ff ff       	call   100009bd <AC97::_open(int, int, void*)+0x375>	100009bd: R_386_PC32	Virt::allocateKernelVirtualPages(int)
100009c1:	83 c4 10             	add    esp,0x10
100009c4:	89 c2                	mov    edx,eax
100009c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009c9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
100009cc:	83 c1 7c             	add    ecx,0x7c
100009cf:	89 54 88 0c          	mov    DWORD PTR [eax+ecx*4+0xc],edx
100009d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100009d9:	83 c2 7c             	add    edx,0x7c
100009dc:	8b 54 90 0c          	mov    edx,DWORD PTR [eax+edx*4+0xc]
100009e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009e3:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
100009e6:	83 e9 80             	sub    ecx,0xffffff80
100009e9:	8b 44 88 08          	mov    eax,DWORD PTR [eax+ecx*4+0x8]
100009ed:	83 ec 04             	sub    esp,0x4
100009f0:	52                   	push   edx
100009f1:	50                   	push   eax
100009f2:	68 b0 0e 00 10       	push   0x10000eb0	100009f3: R_386_32	.text
100009f7:	e8 fc ff ff ff       	call   100009f8 <AC97::_open(int, int, void*)+0x3b0>	100009f8: R_386_PC32	Dbg::kprintf(char const*, ...)
100009fc:	83 c4 10             	add    esp,0x10
100009ff:	a1 00 00 00 00       	mov    eax,ds:0x0	10000a00: R_386_32	keFirstVAS
10000a04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a07:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000a0a:	83 c1 7c             	add    ecx,0x7c
10000a0d:	8b 4c 8a 0c          	mov    ecx,DWORD PTR [edx+ecx*4+0xc]
10000a11:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a14:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
10000a17:	83 eb 80             	sub    ebx,0xffffff80
10000a1a:	8b 54 9a 08          	mov    edx,DWORD PTR [edx+ebx*4+0x8]
10000a1e:	83 ec 0c             	sub    esp,0xc
10000a21:	6a 03                	push   0x3
10000a23:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000a26:	51                   	push   ecx
10000a27:	52                   	push   edx
10000a28:	50                   	push   eax
10000a29:	e8 fc ff ff ff       	call   10000a2a <AC97::_open(int, int, void*)+0x3e2>	10000a2a: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
10000a2e:	83 c4 20             	add    esp,0x20
10000a31:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000a34:	c1 e0 0c             	shl    eax,0xc
10000a37:	89 c2                	mov    edx,eax
10000a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a3c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000a3f:	83 c1 7c             	add    ecx,0x7c
10000a42:	8b 44 88 0c          	mov    eax,DWORD PTR [eax+ecx*4+0xc]
10000a46:	83 ec 04             	sub    esp,0x4
10000a49:	52                   	push   edx
10000a4a:	6a 00                	push   0x0
10000a4c:	50                   	push   eax
10000a4d:	e8 fc ff ff ff       	call   10000a4e <AC97::_open(int, int, void*)+0x406>	10000a4e: R_386_PC32	memset
10000a52:	83 c4 10             	add    esp,0x10
10000a55:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000a58:	e9 2b ff ff ff       	jmp    10000988 <AC97::_open(int, int, void*)+0x340>
10000a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a60:	8b 80 f0 01 00 00    	mov    eax,DWORD PTR [eax+0x1f0]
10000a66:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000a69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a6c:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
10000a72:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a75:	89 10                	mov    DWORD PTR [eax],edx
10000a77:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a7a:	83 c0 04             	add    eax,0x4
10000a7d:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a83:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a86:	8d 50 08             	lea    edx,[eax+0x8]
10000a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a8c:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
10000a92:	89 02                	mov    DWORD PTR [edx],eax
10000a94:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a97:	83 c0 0c             	add    eax,0xc
10000a9a:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000aa0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000aa3:	8d 50 10             	lea    edx,[eax+0x10]
10000aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aa9:	8b 80 10 02 00 00    	mov    eax,DWORD PTR [eax+0x210]
10000aaf:	89 02                	mov    DWORD PTR [edx],eax
10000ab1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000ab4:	83 c0 14             	add    eax,0x14
10000ab7:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000abd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000ac4:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10000ac8:	7f 38                	jg     10000b02 <AC97::_open(int, int, void*)+0x4ba>
10000aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000acd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000ad0:	83 c2 7c             	add    edx,0x7c
10000ad3:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000ad7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000ada:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000ae1:	81 7d e8 fe ff 00 00 	cmp    DWORD PTR [ebp-0x18],0xfffe
10000ae8:	7f 13                	jg     10000afd <AC97::_open(int, int, void*)+0x4b5>
10000aea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000aed:	8d 50 02             	lea    edx,[eax+0x2]
10000af0:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10000af3:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
10000af8:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10000afb:	eb e4                	jmp    10000ae1 <AC97::_open(int, int, void*)+0x499>
10000afd:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000b00:	eb c2                	jmp    10000ac4 <AC97::_open(int, int, void*)+0x47c>
10000b02:	a1 00 00 00 00       	mov    eax,ds:0x0	10000b03: R_386_32	thePCI
10000b07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b0a:	8b 8a f4 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f4]
10000b10:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b13:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000b19:	6a 10                	push   0x10
10000b1b:	51                   	push   ecx
10000b1c:	52                   	push   edx
10000b1d:	50                   	push   eax
10000b1e:	e8 fc ff ff ff       	call   10000b1f <AC97::_open(int, int, void*)+0x4d7>	10000b1f: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000b23:	83 c4 10             	add    esp,0x10
10000b26:	a1 00 00 00 00       	mov    eax,ds:0x0	10000b27: R_386_32	thePCI
10000b2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b2e:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000b34:	6a 15                	push   0x15
10000b36:	6a 03                	push   0x3
10000b38:	52                   	push   edx
10000b39:	50                   	push   eax
10000b3a:	e8 fc ff ff ff       	call   10000b3b <AC97::_open(int, int, void*)+0x4f3>	10000b3b: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000b3f:	83 c4 10             	add    esp,0x10
10000b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b45:	8a 80 38 01 00 00    	mov    al,BYTE PTR [eax+0x138]
10000b4b:	0f b6 c0             	movzx  eax,al
10000b4e:	83 ec 08             	sub    esp,0x8
10000b51:	50                   	push   eax
10000b52:	68 d3 0e 00 10       	push   0x10000ed3	10000b53: R_386_32	.text
10000b57:	e8 fc ff ff ff       	call   10000b58 <AC97::_open(int, int, void*)+0x510>	10000b58: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b5c:	83 c4 10             	add    esp,0x10
10000b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b62:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b65:	8a 92 38 01 00 00    	mov    dl,BYTE PTR [edx+0x138]
10000b6b:	0f b6 d2             	movzx  edx,dl
10000b6e:	83 ec 0c             	sub    esp,0xc
10000b71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b74:	6a 01                	push   0x1
10000b76:	68 00 00 00 00       	push   0x0	10000b77: R_386_32	ac97IRQHandler(regs*, void*)
10000b7b:	52                   	push   edx
10000b7c:	50                   	push   eax
10000b7d:	e8 fc ff ff ff       	call   10000b7e <AC97::_open(int, int, void*)+0x536>	10000b7e: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000b82:	83 c4 20             	add    esp,0x20
10000b85:	89 c2                	mov    edx,eax
10000b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b8a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000b90:	b8 00 00 00 00       	mov    eax,0x0
10000b95:	8d 65 f8             	lea    esp,[ebp-0x8]
10000b98:	5b                   	pop    ebx
10000b99:	5e                   	pop    esi
10000b9a:	5d                   	pop    ebp
10000b9b:	c3                   	ret    

10000b9c <AC97::close(int, int, void*)>:
10000b9c:	b8 00 00 00 00       	mov    eax,0x0
10000ba1:	c3                   	ret    

10000ba2 <AC97::beginPlayback()>:
10000ba2:	55                   	push   ebp
10000ba3:	89 e5                	mov    ebp,esp
10000ba5:	83 ec 18             	sub    esp,0x18
10000ba8:	83 ec 0c             	sub    esp,0xc
10000bab:	68 e3 0e 00 10       	push   0x10000ee3	10000bac: R_386_32	.text
10000bb0:	e8 fc ff ff ff       	call   10000bb1 <AC97::beginPlayback()+0xf>	10000bb1: R_386_PC32	Dbg::kprintf(char const*, ...)
10000bb5:	83 c4 10             	add    esp,0x10
10000bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bbb:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
10000bc1:	83 ec 08             	sub    esp,0x8
10000bc4:	50                   	push   eax
10000bc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bc8:	e8 fc ff ff ff       	call   10000bc9 <AC97::beginPlayback()+0x27>	10000bc9: R_386_PC32	AC97::setSampleRate(int)
10000bcd:	83 c4 10             	add    esp,0x10
10000bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10000bd9:	83 f8 02             	cmp    eax,0x2
10000bdc:	74 10                	je     10000bee <AC97::beginPlayback()+0x4c>
10000bde:	83 ec 0c             	sub    esp,0xc
10000be1:	68 fc 0e 00 10       	push   0x10000efc	10000be2: R_386_32	.text
10000be6:	e8 fc ff ff ff       	call   10000be7 <AC97::beginPlayback()+0x45>	10000be7: R_386_PC32	KePanic(char const*)
10000beb:	83 c4 10             	add    esp,0x10
10000bee:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bef: R_386_32	thePCI
10000bf3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000bf6:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000bfc:	83 ec 04             	sub    esp,0x4
10000bff:	6a 1b                	push   0x1b
10000c01:	52                   	push   edx
10000c02:	50                   	push   eax
10000c03:	e8 fc ff ff ff       	call   10000c04 <AC97::beginPlayback()+0x62>	10000c04: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000c08:	83 c4 10             	add    esp,0x10
10000c0b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c0e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c11:	83 e0 e0             	and    eax,0xffffffe0
10000c14:	83 c8 1d             	or     eax,0x1d
10000c17:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c1a:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c1b: R_386_32	thePCI
10000c1f:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
10000c23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c26:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c2c:	6a 1b                	push   0x1b
10000c2e:	51                   	push   ecx
10000c2f:	52                   	push   edx
10000c30:	50                   	push   eax
10000c31:	e8 fc ff ff ff       	call   10000c32 <AC97::beginPlayback()+0x90>	10000c32: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000c36:	83 c4 10             	add    esp,0x10
10000c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c3c:	c6 80 d8 01 00 00 01 	mov    BYTE PTR [eax+0x1d8],0x1
10000c43:	90                   	nop
10000c44:	c9                   	leave  
10000c45:	c3                   	ret    

10000c46 <AC97::stopPlayback()>:
10000c46:	55                   	push   ebp
10000c47:	89 e5                	mov    ebp,esp
10000c49:	83 ec 18             	sub    esp,0x18
10000c4c:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c4d: R_386_32	thePCI
10000c51:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c54:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c5a:	83 ec 04             	sub    esp,0x4
10000c5d:	6a 1b                	push   0x1b
10000c5f:	52                   	push   edx
10000c60:	50                   	push   eax
10000c61:	e8 fc ff ff ff       	call   10000c62 <AC97::stopPlayback()+0x1c>	10000c62: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000c66:	83 c4 10             	add    esp,0x10
10000c69:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c6c:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c6d: R_386_32	thePCI
10000c71:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000c75:	89 d1                	mov    ecx,edx
10000c77:	81 e1 e0 00 00 00    	and    ecx,0xe0
10000c7d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c80:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c86:	6a 1b                	push   0x1b
10000c88:	51                   	push   ecx
10000c89:	52                   	push   edx
10000c8a:	50                   	push   eax
10000c8b:	e8 fc ff ff ff       	call   10000c8c <AC97::stopPlayback()+0x46>	10000c8c: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000c90:	83 c4 10             	add    esp,0x10
10000c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c96:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
10000c9d:	90                   	nop
10000c9e:	c9                   	leave  
10000c9f:	c3                   	ret    
10000ca0:	13 05 00 00 24 05    	adc    eax,DWORD PTR ds:0x5240000
10000ca6:	00 00                	add    BYTE PTR [eax],al
10000ca8:	00 06                	add    BYTE PTR [esi],al
10000caa:	00 00                	add    BYTE PTR [eax],al
10000cac:	00 00                	add    BYTE PTR [eax],al
10000cae:	01 00                	add    DWORD PTR [eax],eax
10000cb0:	00 00                	add    BYTE PTR [eax],al
10000cb2:	02 00                	add    al,BYTE PTR [eax]
10000cb4:	00 00                	add    BYTE PTR [eax],al
10000cb6:	04 00                	add    al,0x0
10000cb8:	00 00                	add    BYTE PTR [eax],al
10000cba:	06                   	push   es
10000cbb:	00 00                	add    BYTE PTR [eax],al
10000cbd:	00 10                	add    BYTE PTR [eax],dl
10000cbf:	00 00                	add    BYTE PTR [eax],al
10000cc1:	10 00                	adc    BYTE PTR [eax],al
10000cc3:	00 00                	add    BYTE PTR [eax],al
10000cc5:	00 00                	add    BYTE PTR [eax],al
10000cc7:	c0 00 00             	rol    BYTE PTR [eax],0x0
10000cca:	00 c2                	add    dl,al
10000ccc:	00 00                	add    BYTE PTR [eax],al
10000cce:	40                   	inc    eax
10000ccf:	c2 00 00             	ret    0x0
10000cd2:	80 c2 00             	add    dl,0x0
10000cd5:	00 c0                	add    al,al
10000cd7:	c2 00 00             	ret    0x0
10000cda:	01 c2                	add    edx,eax
10000cdc:	00 00                	add    BYTE PTR [eax],al
10000cde:	01 00                	add    DWORD PTR [eax],eax
10000ce0:	00 00                	add    BYTE PTR [eax],al
10000ce2:	06                   	push   es
10000ce3:	c2 00 00             	ret    0x0
10000ce6:	02 00                	add    al,BYTE PTR [eax]
10000ce8:	00 10                	add    BYTE PTR [eax],dl
10000cea:	00 c2                	add    dl,al
10000cec:	00 00                	add    BYTE PTR [eax],al
10000cee:	02 c2                	add    al,dl
10000cf0:	00 00                	add    BYTE PTR [eax],al
10000cf2:	02 00                	add    al,BYTE PTR [eax]
10000cf4:	00 00                	add    BYTE PTR [eax],al
10000cf6:	04 c2                	add    al,0xc2
10000cf8:	00 80 00 00 00 06    	add    BYTE PTR [eax+0x6000000],al
10000cfe:	00 c2                	add    dl,al
10000d00:	13 05 00 c2 24 05    	adc    eax,DWORD PTR ds:0x524c200
10000d06:	00 c2                	add    dl,al
10000d08:	00 00                	add    BYTE PTR [eax],al
10000d0a:	18 00                	sbb    BYTE PTR [eax],al
10000d0c:	00 00                	add    BYTE PTR [eax],al
10000d0e:	08 00                	or     BYTE PTR [eax],al
10000d10:	00 00                	add    BYTE PTR [eax],al
10000d12:	20 00                	and    BYTE PTR [eax],al
10000d14:	00 00                	add    BYTE PTR [eax],al
10000d16:	00 10                	add    BYTE PTR [eax],dl
10000d18:	00 00                	add    BYTE PTR [eax],al
10000d1a:	00 02                	add    BYTE PTR [edx],al
10000d1c:	00 00                	add    BYTE PTR [eax],al
10000d1e:	e8 01 00 00 00       	call   10000d24 <AC97::stopPlayback()+0xde>
10000d23:	c8 ff ff ff          	enter  0xffff,0xff
10000d27:	ef                   	out    dx,eax
10000d28:	00 00                	add    BYTE PTR [eax],al
10000d2a:	00 f0                	add    al,dh
10000d2c:	00 00                	add    BYTE PTR [eax],al
10000d2e:	c0 ff 00             	sar    bh,0x0
10000d31:	00 10                	add    BYTE PTR [eax],dl
10000d33:	c2 00 40             	ret    0x4000
10000d36:	48                   	dec    eax
10000d37:	c2 80 00             	ret    0x80
10000d3a:	00 00                	add    BYTE PTR [eax],al
10000d3c:	80 00 00             	add    BYTE PTR [eax],0x0
10000d3f:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
10000d42:	61                   	popa   
10000d43:	72 74                	jb     10000db9 <AC97::stopPlayback()+0x173>
10000d45:	69 6e 67 20 41 43 39 	imul   ebp,DWORD PTR [esi+0x67],0x39434120
10000d4c:	37                   	aaa    
10000d4d:	20 64 72 69          	and    BYTE PTR [edx+esi*2+0x69],ah
10000d51:	76 65                	jbe    10000db8 <AC97::stopPlayback()+0x172>
10000d53:	72 2e                	jb     10000d83 <AC97::stopPlayback()+0x13d>
10000d55:	2e 2e 00 43 3a       	cs add BYTE PTR cs:[ebx+0x3a],al
10000d5a:	2f                   	das    
10000d5b:	66 6c                	data16 ins BYTE PTR es:[edi],dx
10000d5d:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000d5e:	70 73                	jo     10000dd3 <AC97::stopPlayback()+0x18d>
10000d60:	69 64 65 2e 77 61 76 00 	imul   esp,DWORD PTR [ebp+eiz*2+0x2e],0x766177
10000d68:	61                   	popa   
10000d69:	62 6f 75             	bound  ebp,QWORD PTR [edi+0x75]
10000d6c:	74 20                	je     10000d8e <AC97::stopPlayback()+0x148>
10000d6e:	74 6f                	je     10000ddf <AC97::stopPlayback()+0x199>
10000d70:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d73:	61                   	popa   
10000d74:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d78:	77 65                	ja     10000ddf <AC97::stopPlayback()+0x199>
10000d7a:	20 6a 75             	and    BYTE PTR [edx+0x75],ch
10000d7d:	73 74                	jae    10000df3 <AC97::stopPlayback()+0x1ad>
10000d7f:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d82:	61                   	popa   
10000d83:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d87:	53                   	push   ebx
10000d88:	4f                   	dec    edi
10000d89:	4e                   	dec    esi
10000d8a:	47                   	inc    edi
10000d8b:	20 53 48             	and    BYTE PTR [ebx+0x48],dl
10000d8e:	4f                   	dec    edi
10000d8f:	55                   	push   ebp
10000d90:	4c                   	dec    esp
10000d91:	44                   	inc    esp
10000d92:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000d95:	20 44 4f 4e          	and    BYTE PTR [edi+ecx*2+0x4e],al
10000d99:	45                   	inc    ebp
10000d9a:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d9d:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000da0:	66 65 72 20          	data16 gs jb 10000dc4 <AC97::stopPlayback()+0x17e>
10000da4:	68 61 73 20 25       	push   0x25207361
10000da9:	64 20 73 61          	and    BYTE PTR fs:[ebx+0x61],dh
10000dad:	6d                   	ins    DWORD PTR es:[edi],dx
10000dae:	70 6c                	jo     10000e1c <AC97::stopPlayback()+0x1d6>
10000db0:	65 73 20             	gs jae 10000dd3 <AC97::stopPlayback()+0x18d>
10000db3:	69 6e 20 69 74 2e 0a 	imul   ebp,DWORD PTR [esi+0x20],0xa2e7469
10000dba:	00 25 64 20 2b 20    	add    BYTE PTR ds:0x202b2064,ah
10000dc0:	25 64 20 28 25       	and    eax,0x25282064
10000dc5:	64 29 20             	sub    DWORD PTR fs:[eax],esp
10000dc8:	3e 3d 20 25 64 0a    	ds cmp eax,0xa642520
10000dce:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10000dd1:	74 65                	je     10000e38 <AC97::stopPlayback()+0x1f2>
10000dd3:	6c                   	ins    BYTE PTR es:[edi],dx
10000dd4:	20 41 43             	and    BYTE PTR [ecx+0x43],al
10000dd7:	27                   	daa    
10000dd8:	39 37                	cmp    DWORD PTR [edi],esi
10000dda:	20 41 75             	and    BYTE PTR [ecx+0x75],al
10000ddd:	64 69 6f 20 44 65 76 69 	imul   ebp,DWORD PTR fs:[edi+0x20],0x69766544
10000de5:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
10000de8:	41                   	inc    ecx
10000de9:	43                   	inc    ebx
10000dea:	39 37                	cmp    DWORD PTR [edi],esi
10000dec:	20 49 52             	and    BYTE PTR [ecx+0x52],cl
10000def:	51                   	push   ecx
10000df0:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000df3:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
10000df6:	72 72                	jb     10000e6a <AC97::stopPlayback()+0x224>
10000df8:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000dfa:	74 6c                	je     10000e68 <AC97::stopPlayback()+0x222>
10000dfc:	79 20                	jns    10000e1e <AC97::stopPlayback()+0x1d8>
10000dfe:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000dff:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e00:	20 27                	and    BYTE PTR [edi],ah
10000e02:	25 64 27 2e 20       	and    eax,0x202e2764
10000e07:	63 69 76             	arpl   WORD PTR [ecx+0x76],bp
10000e0a:	20 2d 20 31 20 3d    	and    BYTE PTR ds:0x3d203120,ch
10000e10:	20 25 64 2c 20 63    	and    BYTE PTR ds:0x63202c64,ah
10000e16:	69 76 20 2b 20 31 20 	imul   esi,DWORD PTR [esi+0x20],0x2031202b
10000e1d:	3d 20 25 64 0a       	cmp    eax,0xa642520
10000e22:	00 6c 76 69          	add    BYTE PTR [esi+esi*2+0x69],ch
10000e26:	20 3d 20 20 25 64    	and    BYTE PTR ds:0x64252020,bh
10000e2c:	0a 00                	or     al,BYTE PTR [eax]
10000e2e:	77 65                	ja     10000e95 <AC97::stopPlayback()+0x24f>
10000e30:	20 67 6f             	and    BYTE PTR [edi+0x6f],ah
10000e33:	74 20                	je     10000e55 <AC97::stopPlayback()+0x20f>
10000e35:	25 64 20 73 61       	and    eax,0x61732064
10000e3a:	6d                   	ins    DWORD PTR es:[edi],dx
10000e3b:	70 6c                	jo     10000ea9 <AC97::stopPlayback()+0x263>
10000e3d:	65 73 20             	gs jae 10000e60 <AC97::stopPlayback()+0x21a>
10000e40:	74 6f                	je     10000eb1 <AC97::stopPlayback()+0x26b>
10000e42:	20 30                	and    BYTE PTR [eax],dh
10000e44:	78 25                	js     10000e6b <AC97::stopPlayback()+0x225>
10000e46:	58                   	pop    eax
10000e47:	0a 00                	or     al,BYTE PTR [eax]
10000e49:	41                   	inc    ecx
10000e4a:	43                   	inc    ebx
10000e4b:	39 37                	cmp    DWORD PTR [edi],esi
10000e4d:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10000e50:	61                   	popa   
10000e51:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e52:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e53:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000e55:	73 3a                	jae    10000e91 <AC97::stopPlayback()+0x24b>
10000e57:	20 25 64 0a 00 32    	and    BYTE PTR ds:0x32000a64,ah
10000e5d:	30 20                	xor    BYTE PTR [eax],ah
10000e5f:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000e62:	20 73 6f             	and    BYTE PTR [ebx+0x6f],dh
10000e65:	75 6e                	jne    10000ed5 <AC97::stopPlayback()+0x28f>
10000e67:	64 20 73 75          	and    BYTE PTR fs:[ebx+0x75],dh
10000e6b:	70 70                	jo     10000edd <AC97::stopPlayback()+0x297>
10000e6d:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e6e:	72 74                	jb     10000ee4 <AC97::stopPlayback()+0x29e>
10000e70:	65 64 2e 0a 00       	gs fs or al,BYTE PTR cs:[eax]
10000e75:	42                   	inc    edx
10000e76:	69 74 20 63 6f 75 6c 64 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x646c756f
10000e7e:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000e81:	74 20                	je     10000ea3 <AC97::stopPlayback()+0x25d>
10000e83:	62 65 20             	bound  esp,QWORD PTR [ebp+0x20]
10000e86:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
10000e8a:	72 65                	jb     10000ef1 <AC97::stopPlayback()+0x2ab>
10000e8c:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000e90:	62 64 6c 20          	bound  esp,QWORD PTR [esp+ebp*2+0x20]
10000e94:	61                   	popa   
10000e95:	74 20                	je     10000eb7 <AC97::stopPlayback()+0x271>
10000e97:	70 68                	jo     10000f01 <AC97::stopPlayback()+0x2bb>
10000e99:	79 73                	jns    10000f0e <AC97::stopPlayback()+0x2c8>
10000e9b:	20 30                	and    BYTE PTR [eax],dh
10000e9d:	78 25                	js     10000ec4 <AC97::stopPlayback()+0x27e>
10000e9f:	58                   	pop    eax
10000ea0:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000ea3:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000ea7:	72 74                	jb     10000f1d <AC97::stopPlayback()+0x2d7>
10000ea9:	20 30                	and    BYTE PTR [eax],dh
10000eab:	78 25                	js     10000ed2 <AC97::stopPlayback()+0x28c>
10000ead:	58                   	pop    eax
10000eae:	0a 00                	or     al,BYTE PTR [eax]
10000eb0:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000eb3:	66 65 72 20          	data16 gs jb 10000ed7 <AC97::stopPlayback()+0x291>
10000eb7:	61                   	popa   
10000eb8:	74 20                	je     10000eda <AC97::stopPlayback()+0x294>
10000eba:	70 68                	jo     10000f24 <AC97::stopPlayback()+0x2de>
10000ebc:	79 73                	jns    10000f31 <vtable for AC97+0x1>
10000ebe:	20 30                	and    BYTE PTR [eax],dh
10000ec0:	78 25                	js     10000ee7 <AC97::stopPlayback()+0x2a1>
10000ec2:	58                   	pop    eax
10000ec3:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000ec6:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000eca:	72 74                	jb     10000f40 <vtable for AC97+0x10>
10000ecc:	20 30                	and    BYTE PTR [eax],dh
10000ece:	78 25                	js     10000ef5 <AC97::stopPlayback()+0x2af>
10000ed0:	58                   	pop    eax
10000ed1:	0a 00                	or     al,BYTE PTR [eax]
10000ed3:	69 6e 74 65 72 72 75 	imul   ebp,DWORD PTR [esi+0x74],0x75727265
10000eda:	70 74                	jo     10000f50 <vtable for AC97+0x20>
10000edc:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000ee2:	00 62 65             	add    BYTE PTR [edx+0x65],ah
10000ee5:	67 69 6e 6e 69 6e 67 20 	imul   ebp,DWORD PTR [bp+0x6e],0x20676e69
10000eed:	70 6c                	jo     10000f5b <vtable for AC97+0x2b>
10000eef:	61                   	popa   
10000ef0:	79 62                	jns    10000f54 <vtable for AC97+0x24>
10000ef2:	61                   	popa   
10000ef3:	63 6b 2e             	arpl   WORD PTR [ebx+0x2e],bp
10000ef6:	2e 2e 0a 00          	cs or  al,BYTE PTR cs:[eax]
10000efa:	00 00                	add    BYTE PTR [eax],al
10000efc:	41                   	inc    ecx
10000efd:	43                   	inc    ebx
10000efe:	39 37                	cmp    DWORD PTR [edi],esi
10000f00:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000f02:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000f05:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000f0c:	61                   	popa   
10000f0d:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000f10:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
10000f13:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000f14:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000f15:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000f17:	73 20                	jae    10000f39 <vtable for AC97+0x9>
10000f19:	21 3d 20 32 20 4e    	and    DWORD PTR ds:0x4e203220,edi
10000f1f:	4f                   	dec    edi
10000f20:	54                   	push   esp
10000f21:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000f24:	50                   	push   eax
10000f25:	50                   	push   eax
10000f26:	4f                   	dec    edi
10000f27:	52                   	push   edx
10000f28:	54                   	push   esp
10000f29:	45                   	inc    ebp
10000f2a:	44                   	inc    esp
10000f2b:	21 00                	and    DWORD PTR [eax],eax
10000f2d:	66 90                	xchg   ax,ax
10000f2f:	90                   	nop

10000f30 <vtable for AC97>:
	...
	10000f38: R_386_32	AC97::~AC97()
	10000f3c: R_386_32	AC97::~AC97()
	10000f40: R_386_32	AC97::open(int, int, void*)
	10000f44: R_386_32	AC97::close(int, int, void*)
	10000f48: R_386_32	Device::hibernate()
	10000f4c: R_386_32	Device::wake()
	10000f50: R_386_32	Device::detect()
	10000f54: R_386_32	Device::disableLegacy()
	10000f58: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000f5c: R_386_32	AC97::beginPlayback()
	10000f60: R_386_32	AC97::stopPlayback()
