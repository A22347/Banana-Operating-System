
packages/banana/32/0002/ac97.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(Device*)-0x17>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(Device*)-0xa>	1000000d: R_386_PC32	start(Device*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <start(Device*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	57                   	push   edi
1000001b:	56                   	push   esi
1000001c:	53                   	push   ebx
1000001d:	83 ec 2c             	sub    esp,0x2c
10000020:	83 ec 0c             	sub    esp,0xc
10000023:	68 08 0d 00 10       	push   0x10000d08	10000024: R_386_32	.text
10000028:	e8 fc ff ff ff       	call   10000029 <start(Device*)+0x12>	10000029: R_386_PC32	KeSetBootMessage(char const*)
1000002d:	83 c4 10             	add    esp,0x10
10000030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000033:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000036:	83 ec 0c             	sub    esp,0xc
10000039:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000003c:	e8 fc ff ff ff       	call   1000003d <start(Device*)+0x26>	1000003d: R_386_PC32	Device::getParent()
10000041:	83 c4 10             	add    esp,0x10
10000044:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000047:	c7 45 d8 14 02 00 00 	mov    DWORD PTR [ebp-0x28],0x214
1000004e:	83 ec 0c             	sub    esp,0xc
10000051:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000054:	e8 fc ff ff ff       	call   10000055 <start(Device*)+0x3e>	10000055: R_386_PC32	malloc
10000059:	83 c4 10             	add    esp,0x10
1000005c:	89 c3                	mov    ebx,eax
1000005e:	83 ec 0c             	sub    esp,0xc
10000061:	53                   	push   ebx
10000062:	e8 fc ff ff ff       	call   10000063 <start(Device*)+0x4c>	10000063: R_386_PC32	AC97::AC97()
10000067:	83 c4 10             	add    esp,0x10
1000006a:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
1000006d:	83 ec 08             	sub    esp,0x8
10000070:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000073:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000076:	e8 fc ff ff ff       	call   10000077 <start(Device*)+0x60>	10000077: R_386_PC32	Device::addChild(Device*)
1000007b:	83 c4 10             	add    esp,0x10
1000007e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000081:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10000084:	83 ec 08             	sub    esp,0x8
10000087:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000008a:	83 ec 24             	sub    esp,0x24
1000008d:	89 e2                	mov    edx,esp
1000008f:	8d 98 18 01 00 00    	lea    ebx,[eax+0x118]
10000095:	b8 09 00 00 00       	mov    eax,0x9
1000009a:	89 d7                	mov    edi,edx
1000009c:	89 de                	mov    esi,ebx
1000009e:	89 c1                	mov    ecx,eax
100000a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100000a2:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100000a5:	e8 fc ff ff ff       	call   100000a6 <start(Device*)+0x8f>	100000a6: R_386_PC32	Device::preOpenPCI(PCIDeviceInfo)
100000aa:	83 c4 30             	add    esp,0x30
100000ad:	6a 00                	push   0x0
100000af:	6a 00                	push   0x0
100000b1:	6a 00                	push   0x0
100000b3:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100000b6:	e8 fc ff ff ff       	call   100000b7 <start(Device*)+0xa0>	100000b7: R_386_PC32	AC97::_open(int, int, void*)
100000bb:	83 c4 10             	add    esp,0x10
100000be:	90                   	nop
100000bf:	8d 65 f4             	lea    esp,[ebp-0xc]
100000c2:	5b                   	pop    ebx
100000c3:	5e                   	pop    esi
100000c4:	5f                   	pop    edi
100000c5:	5d                   	pop    ebp
100000c6:	c3                   	ret    
100000c7:	55                   	push   ebp
100000c8:	89 e5                	mov    ebp,esp
100000ca:	53                   	push   ebx
100000cb:	83 ec 34             	sub    esp,0x34
100000ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100000cf: R_386_32	irqDisableCounter
100000d3:	48                   	dec    eax
100000d4:	a3 00 00 00 00       	mov    ds:0x0,eax	100000d5: R_386_32	irqDisableCounter
100000d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100000da: R_386_32	irqDisableCounter
100000de:	85 c0                	test   eax,eax
100000e0:	75 01                	jne    100000e3 <start(Device*)+0xcc>
100000e2:	fb                   	sti    
100000e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100000e9:	c7 45 ec c0 5d 00 00 	mov    DWORD PTR [ebp-0x14],0x5dc0
100000f0:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
100000f7:	c7 45 e4 02 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x2
100000fe:	c7 45 d0 1c 00 00 00 	mov    DWORD PTR [ebp-0x30],0x1c
10000105:	83 ec 0c             	sub    esp,0xc
10000108:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000010b:	e8 fc ff ff ff       	call   1000010c <start(Device*)+0xf5>	1000010c: R_386_PC32	malloc
10000110:	83 c4 10             	add    esp,0x10
10000113:	89 c3                	mov    ebx,eax
10000115:	83 ec 0c             	sub    esp,0xc
10000118:	68 00 00 06 00       	push   0x60000
1000011d:	6a 02                	push   0x2
1000011f:	6a 10                	push   0x10
10000121:	68 c0 5d 00 00       	push   0x5dc0
10000126:	53                   	push   ebx
10000127:	e8 fc ff ff ff       	call   10000128 <start(Device*)+0x111>	10000128: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
1000012c:	83 c4 20             	add    esp,0x20
1000012f:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
10000132:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10000136:	c7 45 d4 14 01 00 00 	mov    DWORD PTR [ebp-0x2c],0x114
1000013d:	83 ec 0c             	sub    esp,0xc
10000140:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000143:	e8 fc ff ff ff       	call   10000144 <start(Device*)+0x12d>	10000144: R_386_PC32	malloc
10000148:	83 c4 10             	add    esp,0x10
1000014b:	89 c3                	mov    ebx,eax
1000014d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000014e: R_386_32	kernelProcess
10000152:	83 ec 04             	sub    esp,0x4
10000155:	50                   	push   eax
10000156:	68 20 0d 00 10       	push   0x10000d20	10000157: R_386_32	.text
1000015b:	53                   	push   ebx
1000015c:	e8 fc ff ff ff       	call   1000015d <start(Device*)+0x146>	1000015d: R_386_PC32	File::File(char const*, Process*)
10000161:	83 c4 10             	add    esp,0x10
10000164:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10000167:	83 ec 08             	sub    esp,0x8
1000016a:	6a 01                	push   0x1
1000016c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000016f:	e8 fc ff ff ff       	call   10000170 <start(Device*)+0x159>	10000170: R_386_PC32	File::open(FileOpenMode)
10000174:	83 c4 10             	add    esp,0x10
10000177:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
1000017e:	83 ec 0c             	sub    esp,0xc
10000181:	68 34 0d 00 10       	push   0x10000d34	10000182: R_386_32	.text
10000186:	e8 fc ff ff ff       	call   10000187 <start(Device*)+0x170>	10000187: R_386_PC32	Dbg::kprintf(char const*, ...)
1000018b:	83 c4 10             	add    esp,0x10
1000018e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000191:	8b 00                	mov    eax,DWORD PTR [eax]
10000193:	83 c0 0c             	add    eax,0xc
10000196:	8b 00                	mov    eax,DWORD PTR [eax]
10000198:	83 ec 0c             	sub    esp,0xc
1000019b:	8d 55 cc             	lea    edx,[ebp-0x34]
1000019e:	52                   	push   edx
1000019f:	68 00 00 00 00       	push   0x0	100001a0: R_386_32	buf
100001a4:	6a 00                	push   0x0
100001a6:	68 00 40 00 00       	push   0x4000
100001ab:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100001ae:	ff d0                	call   eax
100001b0:	83 c4 20             	add    esp,0x20
100001b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100001b6:	83 ec 0c             	sub    esp,0xc
100001b9:	68 44 0d 00 10       	push   0x10000d44	100001ba: R_386_32	.text
100001be:	e8 fc ff ff ff       	call   100001bf <start(Device*)+0x1a8>	100001bf: R_386_PC32	Dbg::kprintf(char const*, ...)
100001c3:	83 c4 10             	add    esp,0x10
100001c6:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100001c9:	85 c0                	test   eax,eax
100001cb:	74 06                	je     100001d3 <start(Device*)+0x1bc>
100001cd:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
100001d1:	74 22                	je     100001f5 <start(Device*)+0x1de>
100001d3:	83 ec 0c             	sub    esp,0xc
100001d6:	68 53 0d 00 10       	push   0x10000d53	100001d7: R_386_32	.text
100001db:	e8 fc ff ff ff       	call   100001dc <start(Device*)+0x1c5>	100001dc: R_386_PC32	Dbg::kprintf(char const*, ...)
100001e0:	83 c4 10             	add    esp,0x10
100001e3:	83 ec 0c             	sub    esp,0xc
100001e6:	6a 00                	push   0x0
100001e8:	e8 fc ff ff ff       	call   100001e9 <start(Device*)+0x1d2>	100001e9: R_386_PC32	terminateTask(int)
100001ed:	83 c4 10             	add    esp,0x10
100001f0:	e9 f5 00 00 00       	jmp    100002ea <start(Device*)+0x2d3>
100001f5:	83 ec 0c             	sub    esp,0xc
100001f8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100001fb:	e8 fc ff ff ff       	call   100001fc <start(Device*)+0x1e5>	100001fc: R_386_PC32	SoundPort::getBufferUsed()
10000200:	83 c4 10             	add    esp,0x10
10000203:	83 ec 08             	sub    esp,0x8
10000206:	50                   	push   eax
10000207:	68 69 0d 00 10       	push   0x10000d69	10000208: R_386_32	.text
1000020c:	e8 fc ff ff ff       	call   1000020d <start(Device*)+0x1f6>	1000020d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000211:	83 c4 10             	add    esp,0x10
10000214:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000217:	83 f0 01             	xor    eax,0x1
1000021a:	84 c0                	test   al,al
1000021c:	74 4c                	je     1000026a <start(Device*)+0x253>
1000021e:	6a 02                	push   0x2
10000220:	6a 10                	push   0x10
10000222:	68 c0 5d 00 00       	push   0x5dc0
10000227:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000022a:	e8 fc ff ff ff       	call   1000022b <start(Device*)+0x214>	1000022b: R_386_PC32	SoundCard::configureRates(int, int, int)
1000022f:	83 c4 10             	add    esp,0x10
10000232:	83 ec 08             	sub    esp,0x8
10000235:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000238:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000023b:	e8 fc ff ff ff       	call   1000023c <start(Device*)+0x225>	1000023c: R_386_PC32	SoundCard::addChannel(SoundPort*)
10000240:	83 c4 10             	add    esp,0x10
10000243:	83 ec 0c             	sub    esp,0xc
10000246:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000249:	e8 fc ff ff ff       	call   1000024a <start(Device*)+0x233>	1000024a: R_386_PC32	SoundPort::unpause()
1000024e:	83 c4 10             	add    esp,0x10
10000251:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000254:	8b 00                	mov    eax,DWORD PTR [eax]
10000256:	83 c0 24             	add    eax,0x24
10000259:	8b 00                	mov    eax,DWORD PTR [eax]
1000025b:	83 ec 0c             	sub    esp,0xc
1000025e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000261:	ff d0                	call   eax
10000263:	83 c4 10             	add    esp,0x10
10000266:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
1000026a:	83 ec 0c             	sub    esp,0xc
1000026d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000270:	e8 fc ff ff ff       	call   10000271 <start(Device*)+0x25a>	10000271: R_386_PC32	SoundPort::getBufferUsed()
10000275:	83 c4 10             	add    esp,0x10
10000278:	89 c2                	mov    edx,eax
1000027a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
1000027d:	89 c1                	mov    ecx,eax
1000027f:	01 c9                	add    ecx,ecx
10000281:	01 c8                	add    eax,ecx
10000283:	8d 1c 02             	lea    ebx,[edx+eax*1]
10000286:	83 ec 0c             	sub    esp,0xc
10000289:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000028c:	e8 fc ff ff ff       	call   1000028d <start(Device*)+0x276>	1000028d: R_386_PC32	SoundPort::getBufferSize()
10000291:	83 c4 10             	add    esp,0x10
10000294:	39 c3                	cmp    ebx,eax
10000296:	0f 9d c0             	setge  al
10000299:	84 c0                	test   al,al
1000029b:	74 28                	je     100002c5 <start(Device*)+0x2ae>
1000029d:	fa                   	cli    
1000029e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000029f: R_386_32	irqDisableCounter
100002a3:	40                   	inc    eax
100002a4:	a3 00 00 00 00       	mov    ds:0x0,eax	100002a5: R_386_32	irqDisableCounter
100002a9:	e8 fc ff ff ff       	call   100002aa <start(Device*)+0x293>	100002aa: R_386_PC32	schedule()
100002ae:	a1 00 00 00 00       	mov    eax,ds:0x0	100002af: R_386_32	irqDisableCounter
100002b3:	48                   	dec    eax
100002b4:	a3 00 00 00 00       	mov    ds:0x0,eax	100002b5: R_386_32	irqDisableCounter
100002b9:	a1 00 00 00 00       	mov    eax,ds:0x0	100002ba: R_386_32	irqDisableCounter
100002be:	85 c0                	test   eax,eax
100002c0:	75 a8                	jne    1000026a <start(Device*)+0x253>
100002c2:	fb                   	sti    
100002c3:	eb a5                	jmp    1000026a <start(Device*)+0x253>
100002c5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100002c8:	89 c2                	mov    edx,eax
100002ca:	c1 ea 1f             	shr    edx,0x1f
100002cd:	01 d0                	add    eax,edx
100002cf:	d1 f8                	sar    eax,1
100002d1:	83 ec 04             	sub    esp,0x4
100002d4:	50                   	push   eax
100002d5:	68 00 00 00 00       	push   0x0	100002d6: R_386_32	buf
100002da:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100002dd:	e8 fc ff ff ff       	call   100002de <start(Device*)+0x2c7>	100002de: R_386_PC32	SoundPort::buffer16(short*, int)
100002e2:	83 c4 10             	add    esp,0x10
100002e5:	e9 8d fe ff ff       	jmp    10000177 <start(Device*)+0x160>
100002ea:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100002ed:	c9                   	leave  
100002ee:	c3                   	ret    
100002ef:	90                   	nop

100002f0 <AC97::AC97()>:
100002f0:	55                   	push   ebp
100002f1:	89 e5                	mov    ebp,esp
100002f3:	83 ec 08             	sub    esp,0x8
100002f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002f9:	83 ec 08             	sub    esp,0x8
100002fc:	68 87 0d 00 10       	push   0x10000d87	100002fd: R_386_32	.text
10000301:	50                   	push   eax
10000302:	e8 fc ff ff ff       	call   10000303 <AC97::AC97()+0x13>	10000303: R_386_PC32	SoundCard::SoundCard(char const*)
10000307:	83 c4 10             	add    esp,0x10
1000030a:	ba 08 00 00 00       	mov    edx,0x8	1000030b: R_386_32	vtable for AC97
1000030f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000312:	89 10                	mov    DWORD PTR [eax],edx
10000314:	90                   	nop
10000315:	c9                   	leave  
10000316:	c3                   	ret    
10000317:	90                   	nop

10000318 <AC97::~AC97()>:
10000318:	55                   	push   ebp
10000319:	89 e5                	mov    ebp,esp
1000031b:	83 ec 08             	sub    esp,0x8
1000031e:	ba 08 00 00 00       	mov    edx,0x8	1000031f: R_386_32	vtable for AC97
10000323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000326:	89 10                	mov    DWORD PTR [eax],edx
10000328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000032b:	83 ec 0c             	sub    esp,0xc
1000032e:	50                   	push   eax
1000032f:	e8 fc ff ff ff       	call   10000330 <AC97::~AC97()+0x18>	10000330: R_386_PC32	SoundCard::~SoundCard()
10000334:	83 c4 10             	add    esp,0x10
10000337:	90                   	nop
10000338:	c9                   	leave  
10000339:	c3                   	ret    

1000033a <AC97::~AC97()>:
1000033a:	55                   	push   ebp
1000033b:	89 e5                	mov    ebp,esp
1000033d:	83 ec 08             	sub    esp,0x8
10000340:	83 ec 0c             	sub    esp,0xc
10000343:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000346:	e8 fc ff ff ff       	call   10000347 <AC97::~AC97()+0xd>	10000347: R_386_PC32	AC97::~AC97()
1000034b:	83 c4 10             	add    esp,0x10
1000034e:	83 ec 08             	sub    esp,0x8
10000351:	68 14 02 00 00       	push   0x214
10000356:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000359:	e8 fc ff ff ff       	call   1000035a <AC97::~AC97()+0x20>	1000035a: R_386_PC32	operator delete(void*, unsigned long)
1000035e:	83 c4 10             	add    esp,0x10
10000361:	c9                   	leave  
10000362:	c3                   	ret    
10000363:	90                   	nop

10000364 <AC97::setVolume(int, int)>:
10000364:	55                   	push   ebp
10000365:	89 e5                	mov    ebp,esp
10000367:	83 ec 18             	sub    esp,0x18
1000036a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000036d:	89 d0                	mov    eax,edx
1000036f:	c1 e0 02             	shl    eax,0x2
10000372:	01 d0                	add    eax,edx
10000374:	01 c0                	add    eax,eax
10000376:	85 c0                	test   eax,eax
10000378:	79 03                	jns    1000037d <AC97::setVolume(int, int)+0x19>
1000037a:	83 c0 1f             	add    eax,0x1f
1000037d:	c1 f8 05             	sar    eax,0x5
10000380:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000383:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000386:	89 d0                	mov    eax,edx
10000388:	c1 e0 02             	shl    eax,0x2
1000038b:	01 d0                	add    eax,edx
1000038d:	01 c0                	add    eax,eax
1000038f:	85 c0                	test   eax,eax
10000391:	79 03                	jns    10000396 <AC97::setVolume(int, int)+0x32>
10000393:	83 c0 1f             	add    eax,0x1f
10000396:	c1 f8 05             	sar    eax,0x5
10000399:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000039c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000039f:	c1 e0 08             	shl    eax,0x8
100003a2:	89 c2                	mov    edx,eax
100003a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100003a7:	09 d0                	or     eax,edx
100003a9:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
100003ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100003ae: R_386_32	thePCI
100003b2:	0f b7 4d ee          	movzx  ecx,WORD PTR [ebp-0x12]
100003b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003b9:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100003bf:	6a 02                	push   0x2
100003c1:	51                   	push   ecx
100003c2:	52                   	push   edx
100003c3:	50                   	push   eax
100003c4:	e8 fc ff ff ff       	call   100003c5 <AC97::setVolume(int, int)+0x61>	100003c5: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003c9:	83 c4 10             	add    esp,0x10
100003cc:	a1 00 00 00 00       	mov    eax,ds:0x0	100003cd: R_386_32	thePCI
100003d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100003d4:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
100003da:	6a 18                	push   0x18
100003dc:	6a 00                	push   0x0
100003de:	52                   	push   edx
100003df:	50                   	push   eax
100003e0:	e8 fc ff ff ff       	call   100003e1 <AC97::setVolume(int, int)+0x7d>	100003e1: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100003e5:	83 c4 10             	add    esp,0x10
100003e8:	90                   	nop
100003e9:	c9                   	leave  
100003ea:	c3                   	ret    
100003eb:	90                   	nop

100003ec <AC97::open(int, int, void*)>:
100003ec:	b8 00 00 00 00       	mov    eax,0x0
100003f1:	c3                   	ret    

100003f2 <ac97IRQHandler(regs*, void*)>:
100003f2:	55                   	push   ebp
100003f3:	89 e5                	mov    ebp,esp
100003f5:	83 ec 18             	sub    esp,0x18
100003f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100003fe:	83 ec 0c             	sub    esp,0xc
10000401:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10000404:	e8 fc ff ff ff       	call   10000405 <ac97IRQHandler(regs*, void*)+0x13>	10000405: R_386_PC32	AC97::handleIRQ()
10000409:	83 c4 10             	add    esp,0x10
1000040c:	90                   	nop
1000040d:	c9                   	leave  
1000040e:	c3                   	ret    
1000040f:	90                   	nop

10000410 <AC97::handleIRQ()>:
10000410:	55                   	push   ebp
10000411:	89 e5                	mov    ebp,esp
10000413:	83 ec 18             	sub    esp,0x18
10000416:	83 ec 0c             	sub    esp,0xc
10000419:	68 a0 0d 00 10       	push   0x10000da0	1000041a: R_386_32	.text
1000041e:	e8 fc ff ff ff       	call   1000041f <AC97::handleIRQ()+0xf>	1000041f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000423:	83 c4 10             	add    esp,0x10
10000426:	a1 00 00 00 00       	mov    eax,ds:0x0	10000427: R_386_32	thePCI
1000042b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000042e:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000434:	83 ec 04             	sub    esp,0x4
10000437:	6a 14                	push   0x14
10000439:	52                   	push   edx
1000043a:	50                   	push   eax
1000043b:	e8 fc ff ff ff       	call   1000043c <AC97::handleIRQ()+0x2c>	1000043c: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000440:	83 c4 10             	add    esp,0x10
10000443:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000446:	a1 00 00 00 00       	mov    eax,ds:0x0	10000447: R_386_32	thePCI
1000044b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000044e:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000454:	83 ec 04             	sub    esp,0x4
10000457:	6a 15                	push   0x15
10000459:	52                   	push   edx
1000045a:	50                   	push   eax
1000045b:	e8 fc ff ff ff       	call   1000045c <AC97::handleIRQ()+0x4c>	1000045c: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000460:	83 c4 10             	add    esp,0x10
10000463:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000466:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000046a:	40                   	inc    eax
1000046b:	b9 03 00 00 00       	mov    ecx,0x3
10000470:	99                   	cdq    
10000471:	f7 f9                	idiv   ecx
10000473:	89 d1                	mov    ecx,edx
10000475:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000479:	8d 50 ff             	lea    edx,[eax-0x1]
1000047c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000480:	51                   	push   ecx
10000481:	52                   	push   edx
10000482:	50                   	push   eax
10000483:	68 ac 0d 00 10       	push   0x10000dac	10000484: R_386_32	.text
10000488:	e8 fc ff ff ff       	call   10000489 <AC97::handleIRQ()+0x79>	10000489: R_386_PC32	Dbg::kprintf(char const*, ...)
1000048d:	83 c4 10             	add    esp,0x10
10000490:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
10000494:	83 ec 08             	sub    esp,0x8
10000497:	50                   	push   eax
10000498:	68 db 0d 00 10       	push   0x10000ddb	10000499: R_386_32	.text
1000049d:	e8 fc ff ff ff       	call   1000049e <AC97::handleIRQ()+0x8e>	1000049e: R_386_PC32	Dbg::kprintf(char const*, ...)
100004a2:	83 c4 10             	add    esp,0x10
100004a5:	a1 00 00 00 00       	mov    eax,ds:0x0	100004a6: R_386_32	thePCI
100004aa:	0f b6 4d f6          	movzx  ecx,BYTE PTR [ebp-0xa]
100004ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100004b1:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100004b7:	6a 15                	push   0x15
100004b9:	51                   	push   ecx
100004ba:	52                   	push   edx
100004bb:	50                   	push   eax
100004bc:	e8 fc ff ff ff       	call   100004bd <AC97::handleIRQ()+0xad>	100004bd: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
100004c1:	83 c4 10             	add    esp,0x10
100004c4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100004c8:	83 c0 02             	add    eax,0x2
100004cb:	b9 03 00 00 00       	mov    ecx,0x3
100004d0:	99                   	cdq    
100004d1:	f7 f9                	idiv   ecx
100004d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d6:	83 c2 7c             	add    edx,0x7c
100004d9:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100004dd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100004e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e3:	83 ec 04             	sub    esp,0x4
100004e6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100004e9:	68 01 80 00 00       	push   0x8001
100004ee:	50                   	push   eax
100004ef:	e8 fc ff ff ff       	call   100004f0 <AC97::handleIRQ()+0xe0>	100004f0: R_386_PC32	SoundCard::getSamples16(int, short*)
100004f4:	83 c4 10             	add    esp,0x10
100004f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100004fa:	83 ec 04             	sub    esp,0x4
100004fd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000500:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000503:	68 e6 0d 00 10       	push   0x10000de6	10000504: R_386_32	.text
10000508:	e8 fc ff ff ff       	call   10000509 <AC97::handleIRQ()+0xf9>	10000509: R_386_PC32	Dbg::kprintf(char const*, ...)
1000050d:	83 c4 10             	add    esp,0x10
10000510:	a1 00 00 00 00       	mov    eax,ds:0x0	10000511: R_386_32	thePCI
10000515:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000518:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000051e:	6a 16                	push   0x16
10000520:	6a 1c                	push   0x1c
10000522:	52                   	push   edx
10000523:	50                   	push   eax
10000524:	e8 fc ff ff ff       	call   10000525 <AC97::handleIRQ()+0x115>	10000525: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000529:	83 c4 10             	add    esp,0x10
1000052c:	90                   	nop
1000052d:	c9                   	leave  
1000052e:	c3                   	ret    
1000052f:	90                   	nop

10000530 <AC97::setSampleRate(int)>:
10000530:	55                   	push   ebp
10000531:	89 e5                	mov    ebp,esp
10000533:	53                   	push   ebx
10000534:	83 ec 04             	sub    esp,0x4
10000537:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10000539: R_386_32	thePCI
1000053d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000053e: R_386_32	thePCI
10000542:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000545:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
1000054b:	83 ec 04             	sub    esp,0x4
1000054e:	6a 2a                	push   0x2a
10000550:	52                   	push   edx
10000551:	50                   	push   eax
10000552:	e8 fc ff ff ff       	call   10000553 <AC97::setSampleRate(int)+0x23>	10000553: R_386_PC32	PCI::readBAR16(unsigned int, int)
10000557:	83 c4 10             	add    esp,0x10
1000055a:	83 c8 01             	or     eax,0x1
1000055d:	0f b7 d0             	movzx  edx,ax
10000560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000563:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000569:	6a 2a                	push   0x2a
1000056b:	52                   	push   edx
1000056c:	50                   	push   eax
1000056d:	53                   	push   ebx
1000056e:	e8 fc ff ff ff       	call   1000056f <AC97::setSampleRate(int)+0x3f>	1000056f: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000573:	83 c4 10             	add    esp,0x10
10000576:	83 ec 0c             	sub    esp,0xc
10000579:	6a 64                	push   0x64
1000057b:	e8 fc ff ff ff       	call   1000057c <AC97::setSampleRate(int)+0x4c>	1000057c: R_386_PC32	milliTenthSleep(unsigned int)
10000580:	83 c4 10             	add    esp,0x10
10000583:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000585: R_386_32	thePCI
10000589:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000058c:	0f b7 c8             	movzx  ecx,ax
1000058f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000592:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10000598:	6a 2c                	push   0x2c
1000059a:	51                   	push   ecx
1000059b:	50                   	push   eax
1000059c:	52                   	push   edx
1000059d:	e8 fc ff ff ff       	call   1000059e <AC97::setSampleRate(int)+0x6e>	1000059e: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100005a2:	83 c4 10             	add    esp,0x10
100005a5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100005a7: R_386_32	thePCI
100005ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005ae:	0f b7 c8             	movzx  ecx,ax
100005b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b4:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
100005ba:	6a 32                	push   0x32
100005bc:	51                   	push   ecx
100005bd:	50                   	push   eax
100005be:	52                   	push   edx
100005bf:	e8 fc ff ff ff       	call   100005c0 <AC97::setSampleRate(int)+0x90>	100005c0: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
100005c4:	83 c4 10             	add    esp,0x10
100005c7:	83 ec 0c             	sub    esp,0xc
100005ca:	6a 64                	push   0x64
100005cc:	e8 fc ff ff ff       	call   100005cd <AC97::setSampleRate(int)+0x9d>	100005cd: R_386_PC32	milliTenthSleep(unsigned int)
100005d1:	83 c4 10             	add    esp,0x10
100005d4:	90                   	nop
100005d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100005d8:	c9                   	leave  
100005d9:	c3                   	ret    

100005da <AC97::_open(int, int, void*)>:
100005da:	55                   	push   ebp
100005db:	89 e5                	mov    ebp,esp
100005dd:	56                   	push   esi
100005de:	53                   	push   ebx
100005df:	83 ec 30             	sub    esp,0x30
100005e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e5:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
100005eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ee:	89 90 e8 01 00 00    	mov    DWORD PTR [eax+0x1e8],edx
100005f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f7:	8b 90 24 01 00 00    	mov    edx,DWORD PTR [eax+0x124]
100005fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000600:	89 90 ec 01 00 00    	mov    DWORD PTR [eax+0x1ec],edx
10000606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000609:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000060f:	83 e0 01             	and    eax,0x1
10000612:	85 c0                	test   eax,eax
10000614:	74 5a                	je     10000670 <AC97::_open(int, int, void*)+0x96>
10000616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000619:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000061f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000622:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000628:	0f b6 ca             	movzx  ecx,dl
1000062b:	83 e0 fc             	and    eax,0xfffffffc
1000062e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000631:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000636:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000639:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000063f:	0f b6 d0             	movzx  edx,al
10000642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000645:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
1000064a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000064d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000653:	8d 50 01             	lea    edx,[eax+0x1]
10000656:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000659:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000065f:	0f b6 d0             	movzx  edx,al
10000662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000665:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000669:	83 e1 3f             	and    ecx,0x3f
1000066c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000673:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
10000679:	83 e0 01             	and    eax,0x1
1000067c:	85 c0                	test   eax,eax
1000067e:	74 5a                	je     100006da <AC97::_open(int, int, void*)+0x100>
10000680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000683:	8b 80 ec 01 00 00    	mov    eax,DWORD PTR [eax+0x1ec]
10000689:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000068c:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000692:	0f b6 ca             	movzx  ecx,dl
10000695:	83 e0 fc             	and    eax,0xfffffffc
10000698:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000069b:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100006a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006a9:	0f b6 d0             	movzx  edx,al
100006ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006af:	c6 44 90 06 40       	mov    BYTE PTR [eax+edx*4+0x6],0x40
100006b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100006bd:	8d 50 01             	lea    edx,[eax+0x1]
100006c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100006c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100006c9:	0f b6 d0             	movzx  edx,al
100006cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100006d3:	83 e1 3f             	and    ecx,0x3f
100006d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100006da:	a1 00 00 00 00       	mov    eax,ds:0x0	100006db: R_386_32	thePCI
100006df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006e2:	8a 92 1e 01 00 00    	mov    dl,BYTE PTR [edx+0x11e]
100006e8:	0f b6 da             	movzx  ebx,dl
100006eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006ee:	8a 92 1d 01 00 00    	mov    dl,BYTE PTR [edx+0x11d]
100006f4:	0f b6 ca             	movzx  ecx,dl
100006f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100006fa:	8a 92 1c 01 00 00    	mov    dl,BYTE PTR [edx+0x11c]
10000700:	0f b6 d2             	movzx  edx,dl
10000703:	83 ec 0c             	sub    esp,0xc
10000706:	6a 04                	push   0x4
10000708:	53                   	push   ebx
10000709:	51                   	push   ecx
1000070a:	52                   	push   edx
1000070b:	50                   	push   eax
1000070c:	e8 fc ff ff ff       	call   1000070d <AC97::_open(int, int, void*)+0x133>	1000070d: R_386_PC32	PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)
10000711:	83 c4 20             	add    esp,0x20
10000714:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
10000718:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000071a: R_386_32	thePCI
1000071e:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10000722:	83 c8 05             	or     eax,0x5
10000725:	0f b7 f0             	movzx  esi,ax
10000728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000072b:	8a 80 1e 01 00 00    	mov    al,BYTE PTR [eax+0x11e]
10000731:	0f b6 d8             	movzx  ebx,al
10000734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000737:	8a 80 1d 01 00 00    	mov    al,BYTE PTR [eax+0x11d]
1000073d:	0f b6 c8             	movzx  ecx,al
10000740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000743:	8a 80 1c 01 00 00    	mov    al,BYTE PTR [eax+0x11c]
10000749:	0f b6 c0             	movzx  eax,al
1000074c:	83 ec 08             	sub    esp,0x8
1000074f:	56                   	push   esi
10000750:	6a 04                	push   0x4
10000752:	53                   	push   ebx
10000753:	51                   	push   ecx
10000754:	50                   	push   eax
10000755:	52                   	push   edx
10000756:	e8 fc ff ff ff       	call   10000757 <AC97::_open(int, int, void*)+0x17d>	10000757: R_386_PC32	PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)
1000075b:	83 c4 20             	add    esp,0x20
1000075e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000075f: R_386_32	thePCI
10000763:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000766:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000076c:	6a 2c                	push   0x2c
1000076e:	6a 03                	push   0x3
10000770:	52                   	push   edx
10000771:	50                   	push   eax
10000772:	e8 fc ff ff ff       	call   10000773 <AC97::_open(int, int, void*)+0x199>	10000773: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000777:	83 c4 10             	add    esp,0x10
1000077a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000077b: R_386_32	thePCI
1000077f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000782:	8b 92 e8 01 00 00    	mov    edx,DWORD PTR [edx+0x1e8]
10000788:	6a 00                	push   0x0
1000078a:	68 aa 55 00 00       	push   0x55aa
1000078f:	52                   	push   edx
10000790:	50                   	push   eax
10000791:	e8 fc ff ff ff       	call   10000792 <AC97::_open(int, int, void*)+0x1b8>	10000792: R_386_PC32	PCI::writeBAR16(unsigned int, unsigned short, int)
10000796:	83 c4 10             	add    esp,0x10
10000799:	a1 00 00 00 00       	mov    eax,ds:0x0	1000079a: R_386_32	thePCI
1000079e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007a1:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
100007a7:	83 ec 04             	sub    esp,0x4
100007aa:	6a 30                	push   0x30
100007ac:	52                   	push   edx
100007ad:	50                   	push   eax
100007ae:	e8 fc ff ff ff       	call   100007af <AC97::_open(int, int, void*)+0x1d5>	100007af: R_386_PC32	PCI::readBAR32(unsigned int, int)
100007b3:	83 c4 10             	add    esp,0x10
100007b6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100007b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100007bc:	c1 e8 14             	shr    eax,0x14
100007bf:	83 e0 03             	and    eax,0x3
100007c2:	40                   	inc    eax
100007c3:	01 c0                	add    eax,eax
100007c5:	83 ec 08             	sub    esp,0x8
100007c8:	50                   	push   eax
100007c9:	68 01 0e 00 10       	push   0x10000e01	100007ca: R_386_32	.text
100007ce:	e8 fc ff ff ff       	call   100007cf <AC97::_open(int, int, void*)+0x1f5>	100007cf: R_386_PC32	Dbg::kprintf(char const*, ...)
100007d3:	83 c4 10             	add    esp,0x10
100007d6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100007d9:	c1 e8 16             	shr    eax,0x16
100007dc:	83 e0 03             	and    eax,0x3
100007df:	83 f8 01             	cmp    eax,0x1
100007e2:	75 10                	jne    100007f4 <AC97::_open(int, int, void*)+0x21a>
100007e4:	83 ec 0c             	sub    esp,0xc
100007e7:	68 14 0e 00 10       	push   0x10000e14	100007e8: R_386_32	.text
100007ec:	e8 fc ff ff ff       	call   100007ed <AC97::_open(int, int, void*)+0x213>	100007ed: R_386_PC32	Dbg::kprintf(char const*, ...)
100007f1:	83 c4 10             	add    esp,0x10
100007f4:	a1 00 00 00 00       	mov    eax,ds:0x0	100007f5: R_386_32	thePCI
100007f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100007fc:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000802:	83 ec 04             	sub    esp,0x4
10000805:	6a 1b                	push   0x1b
10000807:	52                   	push   edx
10000808:	50                   	push   eax
10000809:	e8 fc ff ff ff       	call   1000080a <AC97::_open(int, int, void*)+0x230>	1000080a: R_386_PC32	PCI::readBAR8(unsigned int, int)
1000080e:	83 c4 10             	add    esp,0x10
10000811:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10000814:	a1 00 00 00 00       	mov    eax,ds:0x0	10000815: R_386_32	thePCI
10000819:	8a 55 df             	mov    dl,BYTE PTR [ebp-0x21]
1000081c:	83 ca 02             	or     edx,0x2
1000081f:	0f b6 ca             	movzx  ecx,dl
10000822:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000825:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
1000082b:	6a 1b                	push   0x1b
1000082d:	51                   	push   ecx
1000082e:	52                   	push   edx
1000082f:	50                   	push   eax
10000830:	e8 fc ff ff ff       	call   10000831 <AC97::_open(int, int, void*)+0x257>	10000831: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000835:	83 c4 10             	add    esp,0x10
10000838:	83 ec 0c             	sub    esp,0xc
1000083b:	68 c4 09 00 00       	push   0x9c4
10000840:	e8 fc ff ff ff       	call   10000841 <AC97::_open(int, int, void*)+0x267>	10000841: R_386_PC32	milliTenthSleep(unsigned int)
10000845:	83 c4 10             	add    esp,0x10
10000848:	a1 00 00 00 00       	mov    eax,ds:0x0	10000849: R_386_32	thePCI
1000084d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000850:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000856:	83 ec 04             	sub    esp,0x4
10000859:	6a 1b                	push   0x1b
1000085b:	52                   	push   edx
1000085c:	50                   	push   eax
1000085d:	e8 fc ff ff ff       	call   1000085e <AC97::_open(int, int, void*)+0x284>	1000085e: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000862:	83 c4 10             	add    esp,0x10
10000865:	0f b6 c0             	movzx  eax,al
10000868:	83 e0 02             	and    eax,0x2
1000086b:	85 c0                	test   eax,eax
1000086d:	0f 95 c0             	setne  al
10000870:	84 c0                	test   al,al
10000872:	74 10                	je     10000884 <AC97::_open(int, int, void*)+0x2aa>
10000874:	83 ec 0c             	sub    esp,0xc
10000877:	68 2d 0e 00 10       	push   0x10000e2d	10000878: R_386_32	.text
1000087c:	e8 fc ff ff ff       	call   1000087d <AC97::_open(int, int, void*)+0x2a3>	1000087d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000881:	83 c4 10             	add    esp,0x10
10000884:	83 ec 04             	sub    esp,0x4
10000887:	6a 32                	push   0x32
10000889:	6a 0f                	push   0xf
1000088b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000088e:	e8 fc ff ff ff       	call   1000088f <AC97::_open(int, int, void*)+0x2b5>	1000088f: R_386_PC32	AC97::setVolume(int, int)
10000893:	83 c4 10             	add    esp,0x10
10000896:	83 ec 0c             	sub    esp,0xc
10000899:	6a 01                	push   0x1
1000089b:	e8 fc ff ff ff       	call   1000089c <AC97::_open(int, int, void*)+0x2c2>	1000089c: R_386_PC32	Phys::allocateContiguousPages(int)
100008a0:	83 c4 10             	add    esp,0x10
100008a3:	89 c2                	mov    edx,eax
100008a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008a8:	89 90 f4 01 00 00    	mov    DWORD PTR [eax+0x1f4],edx
100008ae:	83 ec 0c             	sub    esp,0xc
100008b1:	6a 01                	push   0x1
100008b3:	e8 fc ff ff ff       	call   100008b4 <AC97::_open(int, int, void*)+0x2da>	100008b4: R_386_PC32	Virt::allocateKernelVirtualPages(int)
100008b8:	83 c4 10             	add    esp,0x10
100008bb:	89 c2                	mov    edx,eax
100008bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c0:	89 90 f0 01 00 00    	mov    DWORD PTR [eax+0x1f0],edx
100008c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c9:	8b 90 f0 01 00 00    	mov    edx,DWORD PTR [eax+0x1f0]
100008cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d2:	8b 80 f4 01 00 00    	mov    eax,DWORD PTR [eax+0x1f4]
100008d8:	83 ec 04             	sub    esp,0x4
100008db:	52                   	push   edx
100008dc:	50                   	push   eax
100008dd:	68 48 0e 00 10       	push   0x10000e48	100008de: R_386_32	.text
100008e2:	e8 fc ff ff ff       	call   100008e3 <AC97::_open(int, int, void*)+0x309>	100008e3: R_386_PC32	Dbg::kprintf(char const*, ...)
100008e7:	83 c4 10             	add    esp,0x10
100008ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100008eb: R_386_32	firstVAS
100008ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008f2:	8b 8a f0 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f0]
100008f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008fb:	8b 92 f4 01 00 00    	mov    edx,DWORD PTR [edx+0x1f4]
10000901:	83 ec 0c             	sub    esp,0xc
10000904:	6a 03                	push   0x3
10000906:	6a 01                	push   0x1
10000908:	51                   	push   ecx
10000909:	52                   	push   edx
1000090a:	50                   	push   eax
1000090b:	e8 fc ff ff ff       	call   1000090c <AC97::_open(int, int, void*)+0x332>	1000090c: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
10000910:	83 c4 20             	add    esp,0x20
10000913:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000091a:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
1000091e:	0f 8f cb 00 00 00    	jg     100009ef <AC97::_open(int, int, void*)+0x415>
10000924:	c7 45 d8 14 00 00 00 	mov    DWORD PTR [ebp-0x28],0x14
1000092b:	83 ec 0c             	sub    esp,0xc
1000092e:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10000931:	e8 fc ff ff ff       	call   10000932 <AC97::_open(int, int, void*)+0x358>	10000932: R_386_PC32	Phys::allocateContiguousPages(int)
10000936:	83 c4 10             	add    esp,0x10
10000939:	89 c2                	mov    edx,eax
1000093b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000941:	83 e9 80             	sub    ecx,0xffffff80
10000944:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
10000948:	83 ec 0c             	sub    esp,0xc
1000094b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000094e:	e8 fc ff ff ff       	call   1000094f <AC97::_open(int, int, void*)+0x375>	1000094f: R_386_PC32	Virt::allocateKernelVirtualPages(int)
10000953:	83 c4 10             	add    esp,0x10
10000956:	89 c2                	mov    edx,eax
10000958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
1000095e:	83 c1 7c             	add    ecx,0x7c
10000961:	89 54 88 0c          	mov    DWORD PTR [eax+ecx*4+0xc],edx
10000965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000968:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000096b:	83 c2 7c             	add    edx,0x7c
1000096e:	8b 54 90 0c          	mov    edx,DWORD PTR [eax+edx*4+0xc]
10000972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000975:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
10000978:	83 e9 80             	sub    ecx,0xffffff80
1000097b:	8b 44 88 08          	mov    eax,DWORD PTR [eax+ecx*4+0x8]
1000097f:	83 ec 04             	sub    esp,0x4
10000982:	52                   	push   edx
10000983:	50                   	push   eax
10000984:	68 68 0e 00 10       	push   0x10000e68	10000985: R_386_32	.text
10000989:	e8 fc ff ff ff       	call   1000098a <AC97::_open(int, int, void*)+0x3b0>	1000098a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000098e:	83 c4 10             	add    esp,0x10
10000991:	a1 00 00 00 00       	mov    eax,ds:0x0	10000992: R_386_32	firstVAS
10000996:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000999:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
1000099c:	83 c1 7c             	add    ecx,0x7c
1000099f:	8b 4c 8a 0c          	mov    ecx,DWORD PTR [edx+ecx*4+0xc]
100009a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009a6:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
100009a9:	83 eb 80             	sub    ebx,0xffffff80
100009ac:	8b 54 9a 08          	mov    edx,DWORD PTR [edx+ebx*4+0x8]
100009b0:	83 ec 0c             	sub    esp,0xc
100009b3:	6a 03                	push   0x3
100009b5:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100009b8:	51                   	push   ecx
100009b9:	52                   	push   edx
100009ba:	50                   	push   eax
100009bb:	e8 fc ff ff ff       	call   100009bc <AC97::_open(int, int, void*)+0x3e2>	100009bc: R_386_PC32	VAS::mapRange(unsigned long, unsigned long, int, int)
100009c0:	83 c4 20             	add    esp,0x20
100009c3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100009c6:	c1 e0 0c             	shl    eax,0xc
100009c9:	89 c2                	mov    edx,eax
100009cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ce:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
100009d1:	83 c1 7c             	add    ecx,0x7c
100009d4:	8b 44 88 0c          	mov    eax,DWORD PTR [eax+ecx*4+0xc]
100009d8:	83 ec 04             	sub    esp,0x4
100009db:	52                   	push   edx
100009dc:	6a 00                	push   0x0
100009de:	50                   	push   eax
100009df:	e8 fc ff ff ff       	call   100009e0 <AC97::_open(int, int, void*)+0x406>	100009e0: R_386_PC32	memset
100009e4:	83 c4 10             	add    esp,0x10
100009e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100009ea:	e9 2b ff ff ff       	jmp    1000091a <AC97::_open(int, int, void*)+0x340>
100009ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009f2:	8b 80 f0 01 00 00    	mov    eax,DWORD PTR [eax+0x1f0]
100009f8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100009fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009fe:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
10000a04:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a07:	89 10                	mov    DWORD PTR [eax],edx
10000a09:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a0c:	83 c0 04             	add    eax,0x4
10000a0f:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a15:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a18:	8d 50 08             	lea    edx,[eax+0x8]
10000a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a1e:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
10000a24:	89 02                	mov    DWORD PTR [edx],eax
10000a26:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a29:	83 c0 0c             	add    eax,0xc
10000a2c:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a32:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a35:	8d 50 10             	lea    edx,[eax+0x10]
10000a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a3b:	8b 80 10 02 00 00    	mov    eax,DWORD PTR [eax+0x210]
10000a41:	89 02                	mov    DWORD PTR [edx],eax
10000a43:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000a46:	83 c0 14             	add    eax,0x14
10000a49:	c7 00 00 80 00 80    	mov    DWORD PTR [eax],0x80008000
10000a4f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000a56:	83 7d f0 02          	cmp    DWORD PTR [ebp-0x10],0x2
10000a5a:	7f 38                	jg     10000a94 <AC97::_open(int, int, void*)+0x4ba>
10000a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a5f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000a62:	83 c2 7c             	add    edx,0x7c
10000a65:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000a69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000a6c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
10000a73:	81 7d e8 fe ff 00 00 	cmp    DWORD PTR [ebp-0x18],0xfffe
10000a7a:	7f 13                	jg     10000a8f <AC97::_open(int, int, void*)+0x4b5>
10000a7c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000a7f:	8d 50 02             	lea    edx,[eax+0x2]
10000a82:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
10000a85:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
10000a8a:	ff 45 e8             	inc    DWORD PTR [ebp-0x18]
10000a8d:	eb e4                	jmp    10000a73 <AC97::_open(int, int, void*)+0x499>
10000a8f:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000a92:	eb c2                	jmp    10000a56 <AC97::_open(int, int, void*)+0x47c>
10000a94:	a1 00 00 00 00       	mov    eax,ds:0x0	10000a95: R_386_32	thePCI
10000a99:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000a9c:	8b 8a f4 01 00 00    	mov    ecx,DWORD PTR [edx+0x1f4]
10000aa2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000aa5:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000aab:	6a 10                	push   0x10
10000aad:	51                   	push   ecx
10000aae:	52                   	push   edx
10000aaf:	50                   	push   eax
10000ab0:	e8 fc ff ff ff       	call   10000ab1 <AC97::_open(int, int, void*)+0x4d7>	10000ab1: R_386_PC32	PCI::writeBAR32(unsigned int, unsigned int, int)
10000ab5:	83 c4 10             	add    esp,0x10
10000ab8:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ab9: R_386_32	thePCI
10000abd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000ac0:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000ac6:	6a 15                	push   0x15
10000ac8:	6a 03                	push   0x3
10000aca:	52                   	push   edx
10000acb:	50                   	push   eax
10000acc:	e8 fc ff ff ff       	call   10000acd <AC97::_open(int, int, void*)+0x4f3>	10000acd: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000ad1:	83 c4 10             	add    esp,0x10
10000ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ad7:	8a 80 38 01 00 00    	mov    al,BYTE PTR [eax+0x138]
10000add:	0f b6 c0             	movzx  eax,al
10000ae0:	83 ec 08             	sub    esp,0x8
10000ae3:	50                   	push   eax
10000ae4:	68 8b 0e 00 10       	push   0x10000e8b	10000ae5: R_386_32	.text
10000ae9:	e8 fc ff ff ff       	call   10000aea <AC97::_open(int, int, void*)+0x510>	10000aea: R_386_PC32	Dbg::kprintf(char const*, ...)
10000aee:	83 c4 10             	add    esp,0x10
10000af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000af7:	8a 92 38 01 00 00    	mov    dl,BYTE PTR [edx+0x138]
10000afd:	0f b6 d2             	movzx  edx,dl
10000b00:	83 ec 0c             	sub    esp,0xc
10000b03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b06:	6a 01                	push   0x1
10000b08:	68 00 00 00 00       	push   0x0	10000b09: R_386_32	ac97IRQHandler(regs*, void*)
10000b0d:	52                   	push   edx
10000b0e:	50                   	push   eax
10000b0f:	e8 fc ff ff ff       	call   10000b10 <AC97::_open(int, int, void*)+0x536>	10000b10: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000b14:	83 c4 20             	add    esp,0x20
10000b17:	89 c2                	mov    edx,eax
10000b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b1c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000b22:	b8 00 00 00 00       	mov    eax,0x0
10000b27:	8d 65 f8             	lea    esp,[ebp-0x8]
10000b2a:	5b                   	pop    ebx
10000b2b:	5e                   	pop    esi
10000b2c:	5d                   	pop    ebp
10000b2d:	c3                   	ret    

10000b2e <AC97::close(int, int, void*)>:
10000b2e:	b8 00 00 00 00       	mov    eax,0x0
10000b33:	c3                   	ret    

10000b34 <AC97::beginPlayback()>:
10000b34:	55                   	push   ebp
10000b35:	89 e5                	mov    ebp,esp
10000b37:	83 ec 18             	sub    esp,0x18
10000b3a:	83 ec 0c             	sub    esp,0xc
10000b3d:	68 9b 0e 00 10       	push   0x10000e9b	10000b3e: R_386_32	.text
10000b42:	e8 fc ff ff ff       	call   10000b43 <AC97::beginPlayback()+0xf>	10000b43: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b47:	83 c4 10             	add    esp,0x10
10000b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b4d:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
10000b53:	83 ec 08             	sub    esp,0x8
10000b56:	50                   	push   eax
10000b57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b5a:	e8 fc ff ff ff       	call   10000b5b <AC97::beginPlayback()+0x27>	10000b5b: R_386_PC32	AC97::setSampleRate(int)
10000b5f:	83 c4 10             	add    esp,0x10
10000b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b65:	8b 80 dc 01 00 00    	mov    eax,DWORD PTR [eax+0x1dc]
10000b6b:	83 f8 10             	cmp    eax,0x10
10000b6e:	74 10                	je     10000b80 <AC97::beginPlayback()+0x4c>
10000b70:	83 ec 0c             	sub    esp,0xc
10000b73:	68 b4 0e 00 10       	push   0x10000eb4	10000b74: R_386_32	.text
10000b78:	e8 fc ff ff ff       	call   10000b79 <AC97::beginPlayback()+0x45>	10000b79: R_386_PC32	KePanic(char const*)
10000b7d:	83 c4 10             	add    esp,0x10
10000b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b83:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10000b89:	83 f8 02             	cmp    eax,0x2
10000b8c:	74 10                	je     10000b9e <AC97::beginPlayback()+0x6a>
10000b8e:	83 ec 0c             	sub    esp,0xc
10000b91:	68 e4 0e 00 10       	push   0x10000ee4	10000b92: R_386_32	.text
10000b96:	e8 fc ff ff ff       	call   10000b97 <AC97::beginPlayback()+0x63>	10000b97: R_386_PC32	KePanic(char const*)
10000b9b:	83 c4 10             	add    esp,0x10
10000b9e:	a1 00 00 00 00       	mov    eax,ds:0x0	10000b9f: R_386_32	thePCI
10000ba3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000ba6:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000bac:	83 ec 04             	sub    esp,0x4
10000baf:	6a 1b                	push   0x1b
10000bb1:	52                   	push   edx
10000bb2:	50                   	push   eax
10000bb3:	e8 fc ff ff ff       	call   10000bb4 <AC97::beginPlayback()+0x80>	10000bb4: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000bb8:	83 c4 10             	add    esp,0x10
10000bbb:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bbe:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000bc1:	83 e0 e0             	and    eax,0xffffffe0
10000bc4:	83 c8 1d             	or     eax,0x1d
10000bc7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bca:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000bce:	83 ec 08             	sub    esp,0x8
10000bd1:	50                   	push   eax
10000bd2:	68 15 0f 00 10       	push   0x10000f15	10000bd3: R_386_32	.text
10000bd7:	e8 fc ff ff ff       	call   10000bd8 <AC97::beginPlayback()+0xa4>	10000bd8: R_386_PC32	Dbg::kprintf(char const*, ...)
10000bdc:	83 c4 10             	add    esp,0x10
10000bdf:	a1 00 00 00 00       	mov    eax,ds:0x0	10000be0: R_386_32	thePCI
10000be4:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
10000be8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000beb:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000bf1:	6a 1b                	push   0x1b
10000bf3:	51                   	push   ecx
10000bf4:	52                   	push   edx
10000bf5:	50                   	push   eax
10000bf6:	e8 fc ff ff ff       	call   10000bf7 <AC97::beginPlayback()+0xc3>	10000bf7: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000bfb:	83 c4 10             	add    esp,0x10
10000bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c01:	c6 80 d8 01 00 00 01 	mov    BYTE PTR [eax+0x1d8],0x1
10000c08:	90                   	nop
10000c09:	c9                   	leave  
10000c0a:	c3                   	ret    
10000c0b:	90                   	nop

10000c0c <AC97::stopPlayback()>:
10000c0c:	55                   	push   ebp
10000c0d:	89 e5                	mov    ebp,esp
10000c0f:	83 ec 18             	sub    esp,0x18
10000c12:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c13: R_386_32	thePCI
10000c17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c1a:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c20:	83 ec 04             	sub    esp,0x4
10000c23:	6a 1b                	push   0x1b
10000c25:	52                   	push   edx
10000c26:	50                   	push   eax
10000c27:	e8 fc ff ff ff       	call   10000c28 <AC97::stopPlayback()+0x1c>	10000c28: R_386_PC32	PCI::readBAR8(unsigned int, int)
10000c2c:	83 c4 10             	add    esp,0x10
10000c2f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c32:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c33: R_386_32	thePCI
10000c37:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10000c3b:	89 d1                	mov    ecx,edx
10000c3d:	81 e1 e0 00 00 00    	and    ecx,0xe0
10000c43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000c46:	8b 92 ec 01 00 00    	mov    edx,DWORD PTR [edx+0x1ec]
10000c4c:	6a 1b                	push   0x1b
10000c4e:	51                   	push   ecx
10000c4f:	52                   	push   edx
10000c50:	50                   	push   eax
10000c51:	e8 fc ff ff ff       	call   10000c52 <AC97::stopPlayback()+0x46>	10000c52: R_386_PC32	PCI::writeBAR8(unsigned int, unsigned char, int)
10000c56:	83 c4 10             	add    esp,0x10
10000c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c5c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
10000c63:	90                   	nop
10000c64:	c9                   	leave  
10000c65:	c3                   	ret    
10000c66:	66 90                	xchg   ax,ax
10000c68:	13 05 00 00 24 05    	adc    eax,DWORD PTR ds:0x5240000
10000c6e:	00 00                	add    BYTE PTR [eax],al
10000c70:	00 06                	add    BYTE PTR [esi],al
10000c72:	00 00                	add    BYTE PTR [eax],al
10000c74:	00 00                	add    BYTE PTR [eax],al
10000c76:	01 00                	add    DWORD PTR [eax],eax
10000c78:	00 00                	add    BYTE PTR [eax],al
10000c7a:	02 00                	add    al,BYTE PTR [eax]
10000c7c:	00 00                	add    BYTE PTR [eax],al
10000c7e:	04 00                	add    al,0x0
10000c80:	00 00                	add    BYTE PTR [eax],al
10000c82:	06                   	push   es
10000c83:	00 00                	add    BYTE PTR [eax],al
10000c85:	00 10                	add    BYTE PTR [eax],dl
10000c87:	00 00                	add    BYTE PTR [eax],al
10000c89:	10 00                	adc    BYTE PTR [eax],al
10000c8b:	00 00                	add    BYTE PTR [eax],al
10000c8d:	00 00                	add    BYTE PTR [eax],al
10000c8f:	c0 00 00             	rol    BYTE PTR [eax],0x0
10000c92:	00 c2                	add    dl,al
10000c94:	00 00                	add    BYTE PTR [eax],al
10000c96:	40                   	inc    eax
10000c97:	c2 00 00             	ret    0x0
10000c9a:	80 c2 00             	add    dl,0x0
10000c9d:	00 c0                	add    al,al
10000c9f:	c2 00 00             	ret    0x0
10000ca2:	01 c2                	add    edx,eax
10000ca4:	00 00                	add    BYTE PTR [eax],al
10000ca6:	01 00                	add    DWORD PTR [eax],eax
10000ca8:	00 00                	add    BYTE PTR [eax],al
10000caa:	06                   	push   es
10000cab:	c2 00 00             	ret    0x0
10000cae:	02 00                	add    al,BYTE PTR [eax]
10000cb0:	00 10                	add    BYTE PTR [eax],dl
10000cb2:	00 c2                	add    dl,al
10000cb4:	00 00                	add    BYTE PTR [eax],al
10000cb6:	02 c2                	add    al,dl
10000cb8:	00 00                	add    BYTE PTR [eax],al
10000cba:	02 00                	add    al,BYTE PTR [eax]
10000cbc:	00 00                	add    BYTE PTR [eax],al
10000cbe:	04 c2                	add    al,0xc2
10000cc0:	00 80 00 00 00 06    	add    BYTE PTR [eax+0x6000000],al
10000cc6:	00 c2                	add    dl,al
10000cc8:	13 05 00 c2 24 05    	adc    eax,DWORD PTR ds:0x524c200
10000cce:	00 c2                	add    dl,al
10000cd0:	00 00                	add    BYTE PTR [eax],al
10000cd2:	18 00                	sbb    BYTE PTR [eax],al
10000cd4:	00 00                	add    BYTE PTR [eax],al
10000cd6:	08 00                	or     BYTE PTR [eax],al
10000cd8:	00 00                	add    BYTE PTR [eax],al
10000cda:	20 00                	and    BYTE PTR [eax],al
10000cdc:	00 00                	add    BYTE PTR [eax],al
10000cde:	00 10                	add    BYTE PTR [eax],dl
10000ce0:	00 00                	add    BYTE PTR [eax],al
10000ce2:	00 02                	add    BYTE PTR [edx],al
10000ce4:	00 00                	add    BYTE PTR [eax],al
10000ce6:	e8 01 00 00 00       	call   10000cec <AC97::stopPlayback()+0xe0>
10000ceb:	c8 ff ff ff          	enter  0xffff,0xff
10000cef:	ef                   	out    dx,eax
10000cf0:	00 00                	add    BYTE PTR [eax],al
10000cf2:	00 f0                	add    al,dh
10000cf4:	00 00                	add    BYTE PTR [eax],al
10000cf6:	c0 ff 00             	sar    bh,0x0
10000cf9:	00 10                	add    BYTE PTR [eax],dl
10000cfb:	c2 00 40             	ret    0x4000
10000cfe:	48                   	dec    eax
10000cff:	c2 80 00             	ret    0x80
10000d02:	00 00                	add    BYTE PTR [eax],al
10000d04:	80 00 00             	add    BYTE PTR [eax],0x0
10000d07:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
10000d0a:	61                   	popa   
10000d0b:	72 74                	jb     10000d81 <AC97::stopPlayback()+0x175>
10000d0d:	69 6e 67 20 41 43 39 	imul   ebp,DWORD PTR [esi+0x67],0x39434120
10000d14:	37                   	aaa    
10000d15:	20 64 72 69          	and    BYTE PTR [edx+esi*2+0x69],ah
10000d19:	76 65                	jbe    10000d80 <AC97::stopPlayback()+0x174>
10000d1b:	72 2e                	jb     10000d4b <AC97::stopPlayback()+0x13f>
10000d1d:	2e 2e 00 43 3a       	cs add BYTE PTR cs:[ebx+0x3a],al
10000d22:	2f                   	das    
10000d23:	66 6c                	data16 ins BYTE PTR es:[edi],dx
10000d25:	75 66                	jne    10000d8d <AC97::stopPlayback()+0x181>
10000d27:	66 79 20             	data16 jns 10000d4a <AC97::stopPlayback()+0x13e>
10000d2a:	62 6c 75 66          	bound  ebp,QWORD PTR [ebp+esi*2+0x66]
10000d2e:	66 2e 77 61          	data16 cs ja 10000d93 <AC97::stopPlayback()+0x187>
10000d32:	76 00                	jbe    10000d34 <AC97::stopPlayback()+0x128>
10000d34:	61                   	popa   
10000d35:	62 6f 75             	bound  ebp,QWORD PTR [edi+0x75]
10000d38:	74 20                	je     10000d5a <AC97::stopPlayback()+0x14e>
10000d3a:	74 6f                	je     10000dab <AC97::stopPlayback()+0x19f>
10000d3c:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d3f:	61                   	popa   
10000d40:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d44:	77 65                	ja     10000dab <AC97::stopPlayback()+0x19f>
10000d46:	20 6a 75             	and    BYTE PTR [edx+0x75],ch
10000d49:	73 74                	jae    10000dbf <AC97::stopPlayback()+0x1b3>
10000d4b:	20 72 65             	and    BYTE PTR [edx+0x65],dh
10000d4e:	61                   	popa   
10000d4f:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000d53:	53                   	push   ebx
10000d54:	4f                   	dec    edi
10000d55:	4e                   	dec    esi
10000d56:	47                   	inc    edi
10000d57:	20 53 48             	and    BYTE PTR [ebx+0x48],dl
10000d5a:	4f                   	dec    edi
10000d5b:	55                   	push   ebp
10000d5c:	4c                   	dec    esp
10000d5d:	44                   	inc    esp
10000d5e:	20 42 45             	and    BYTE PTR [edx+0x45],al
10000d61:	20 44 4f 4e          	and    BYTE PTR [edi+ecx*2+0x4e],al
10000d65:	45                   	inc    ebp
10000d66:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000d69:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000d6c:	66 65 72 20          	data16 gs jb 10000d90 <AC97::stopPlayback()+0x184>
10000d70:	68 61 73 20 25       	push   0x25207361
10000d75:	64 20 73 61          	and    BYTE PTR fs:[ebx+0x61],dh
10000d79:	6d                   	ins    DWORD PTR es:[edi],dx
10000d7a:	70 6c                	jo     10000de8 <AC97::stopPlayback()+0x1dc>
10000d7c:	65 73 20             	gs jae 10000d9f <AC97::stopPlayback()+0x193>
10000d7f:	69 6e 20 69 74 2e 0a 	imul   ebp,DWORD PTR [esi+0x20],0xa2e7469
10000d86:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10000d89:	74 65                	je     10000df0 <AC97::stopPlayback()+0x1e4>
10000d8b:	6c                   	ins    BYTE PTR es:[edi],dx
10000d8c:	20 41 43             	and    BYTE PTR [ecx+0x43],al
10000d8f:	27                   	daa    
10000d90:	39 37                	cmp    DWORD PTR [edi],esi
10000d92:	20 41 75             	and    BYTE PTR [ecx+0x75],al
10000d95:	64 69 6f 20 44 65 76 69 	imul   ebp,DWORD PTR fs:[edi+0x20],0x69766544
10000d9d:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
10000da0:	41                   	inc    ecx
10000da1:	43                   	inc    ebx
10000da2:	39 37                	cmp    DWORD PTR [edi],esi
10000da4:	20 49 52             	and    BYTE PTR [ecx+0x52],cl
10000da7:	51                   	push   ecx
10000da8:	2e 0a 00             	or     al,BYTE PTR cs:[eax]
10000dab:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
10000dae:	72 72                	jb     10000e22 <AC97::stopPlayback()+0x216>
10000db0:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10000db2:	74 6c                	je     10000e20 <AC97::stopPlayback()+0x214>
10000db4:	79 20                	jns    10000dd6 <AC97::stopPlayback()+0x1ca>
10000db6:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000db7:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000db8:	20 27                	and    BYTE PTR [edi],ah
10000dba:	25 64 27 2e 20       	and    eax,0x202e2764
10000dbf:	63 69 76             	arpl   WORD PTR [ecx+0x76],bp
10000dc2:	20 2d 20 31 20 3d    	and    BYTE PTR ds:0x3d203120,ch
10000dc8:	20 25 64 2c 20 63    	and    BYTE PTR ds:0x63202c64,ah
10000dce:	69 76 20 2b 20 31 20 	imul   esi,DWORD PTR [esi+0x20],0x2031202b
10000dd5:	3d 20 25 64 0a       	cmp    eax,0xa642520
10000dda:	00 6c 76 69          	add    BYTE PTR [esi+esi*2+0x69],ch
10000dde:	20 3d 20 20 25 64    	and    BYTE PTR ds:0x64252020,bh
10000de4:	0a 00                	or     al,BYTE PTR [eax]
10000de6:	77 65                	ja     10000e4d <AC97::stopPlayback()+0x241>
10000de8:	20 67 6f             	and    BYTE PTR [edi+0x6f],ah
10000deb:	74 20                	je     10000e0d <AC97::stopPlayback()+0x201>
10000ded:	25 64 20 73 61       	and    eax,0x61732064
10000df2:	6d                   	ins    DWORD PTR es:[edi],dx
10000df3:	70 6c                	jo     10000e61 <AC97::stopPlayback()+0x255>
10000df5:	65 73 20             	gs jae 10000e18 <AC97::stopPlayback()+0x20c>
10000df8:	74 6f                	je     10000e69 <AC97::stopPlayback()+0x25d>
10000dfa:	20 30                	and    BYTE PTR [eax],dh
10000dfc:	78 25                	js     10000e23 <AC97::stopPlayback()+0x217>
10000dfe:	58                   	pop    eax
10000dff:	0a 00                	or     al,BYTE PTR [eax]
10000e01:	41                   	inc    ecx
10000e02:	43                   	inc    ebx
10000e03:	39 37                	cmp    DWORD PTR [edi],esi
10000e05:	20 63 68             	and    BYTE PTR [ebx+0x68],ah
10000e08:	61                   	popa   
10000e09:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e0a:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000e0b:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000e0d:	73 3a                	jae    10000e49 <AC97::stopPlayback()+0x23d>
10000e0f:	20 25 64 0a 00 32    	and    BYTE PTR ds:0x32000a64,ah
10000e15:	30 20                	xor    BYTE PTR [eax],ah
10000e17:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000e1a:	20 73 6f             	and    BYTE PTR [ebx+0x6f],dh
10000e1d:	75 6e                	jne    10000e8d <AC97::stopPlayback()+0x281>
10000e1f:	64 20 73 75          	and    BYTE PTR fs:[ebx+0x75],dh
10000e23:	70 70                	jo     10000e95 <AC97::stopPlayback()+0x289>
10000e25:	6f                   	outs   dx,DWORD PTR ds:[esi]
10000e26:	72 74                	jb     10000e9c <AC97::stopPlayback()+0x290>
10000e28:	65 64 2e 0a 00       	gs fs or al,BYTE PTR cs:[eax]
10000e2d:	42                   	inc    edx
10000e2e:	69 74 20 63 6f 75 6c 64 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x646c756f
10000e36:	20 6e 6f             	and    BYTE PTR [esi+0x6f],ch
10000e39:	74 20                	je     10000e5b <AC97::stopPlayback()+0x24f>
10000e3b:	62 65 20             	bound  esp,QWORD PTR [ebp+0x20]
10000e3e:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
10000e42:	72 65                	jb     10000ea9 <AC97::stopPlayback()+0x29d>
10000e44:	64 2e 0a 00          	fs or  al,BYTE PTR cs:[eax]
10000e48:	62 64 6c 20          	bound  esp,QWORD PTR [esp+ebp*2+0x20]
10000e4c:	61                   	popa   
10000e4d:	74 20                	je     10000e6f <AC97::stopPlayback()+0x263>
10000e4f:	70 68                	jo     10000eb9 <AC97::stopPlayback()+0x2ad>
10000e51:	79 73                	jns    10000ec6 <AC97::stopPlayback()+0x2ba>
10000e53:	20 30                	and    BYTE PTR [eax],dh
10000e55:	78 25                	js     10000e7c <AC97::stopPlayback()+0x270>
10000e57:	58                   	pop    eax
10000e58:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e5b:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e5f:	72 74                	jb     10000ed5 <AC97::stopPlayback()+0x2c9>
10000e61:	20 30                	and    BYTE PTR [eax],dh
10000e63:	78 25                	js     10000e8a <AC97::stopPlayback()+0x27e>
10000e65:	58                   	pop    eax
10000e66:	0a 00                	or     al,BYTE PTR [eax]
10000e68:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
10000e6b:	66 65 72 20          	data16 gs jb 10000e8f <AC97::stopPlayback()+0x283>
10000e6f:	61                   	popa   
10000e70:	74 20                	je     10000e92 <AC97::stopPlayback()+0x286>
10000e72:	70 68                	jo     10000edc <AC97::stopPlayback()+0x2d0>
10000e74:	79 73                	jns    10000ee9 <AC97::stopPlayback()+0x2dd>
10000e76:	20 30                	and    BYTE PTR [eax],dh
10000e78:	78 25                	js     10000e9f <AC97::stopPlayback()+0x293>
10000e7a:	58                   	pop    eax
10000e7b:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
10000e7e:	64 20 76 69          	and    BYTE PTR fs:[esi+0x69],dh
10000e82:	72 74                	jb     10000ef8 <AC97::stopPlayback()+0x2ec>
10000e84:	20 30                	and    BYTE PTR [eax],dh
10000e86:	78 25                	js     10000ead <AC97::stopPlayback()+0x2a1>
10000e88:	58                   	pop    eax
10000e89:	0a 00                	or     al,BYTE PTR [eax]
10000e8b:	69 6e 74 65 72 72 75 	imul   ebp,DWORD PTR [esi+0x74],0x75727265
10000e92:	70 74                	jo     10000f08 <AC97::stopPlayback()+0x2fc>
10000e94:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
10000e9a:	00 62 65             	add    BYTE PTR [edx+0x65],ah
10000e9d:	67 69 6e 6e 69 6e 67 20 	imul   ebp,DWORD PTR [bp+0x6e],0x20676e69
10000ea5:	70 6c                	jo     10000f13 <AC97::stopPlayback()+0x307>
10000ea7:	61                   	popa   
10000ea8:	79 62                	jns    10000f0c <AC97::stopPlayback()+0x300>
10000eaa:	61                   	popa   
10000eab:	63 6b 2e             	arpl   WORD PTR [ebx+0x2e],bp
10000eae:	2e 2e 0a 00          	cs or  al,BYTE PTR cs:[eax]
10000eb2:	00 00                	add    BYTE PTR [eax],al
10000eb4:	41                   	inc    ecx
10000eb5:	43                   	inc    ebx
10000eb6:	39 37                	cmp    DWORD PTR [edi],esi
10000eb8:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000eba:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000ebd:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000ec4:	61                   	popa   
10000ec5:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000ec8:	62 69 74             	bound  ebp,QWORD PTR [ecx+0x74]
10000ecb:	73 20                	jae    10000eed <AC97::stopPlayback()+0x2e1>
10000ecd:	21 3d 20 31 36 20    	and    DWORD PTR ds:0x20363120,edi
10000ed3:	4e                   	dec    esi
10000ed4:	4f                   	dec    edi
10000ed5:	54                   	push   esp
10000ed6:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000ed9:	50                   	push   eax
10000eda:	50                   	push   eax
10000edb:	4f                   	dec    edi
10000edc:	52                   	push   edx
10000edd:	54                   	push   esp
10000ede:	45                   	inc    ebp
10000edf:	44                   	inc    esp
10000ee0:	21 00                	and    DWORD PTR [eax],eax
10000ee2:	00 00                	add    BYTE PTR [eax],al
10000ee4:	41                   	inc    ecx
10000ee5:	43                   	inc    ebx
10000ee6:	39 37                	cmp    DWORD PTR [edi],esi
10000ee8:	3a 3a                	cmp    bh,BYTE PTR [edx]
10000eea:	62 65 67             	bound  esp,QWORD PTR [ebp+0x67]
10000eed:	69 6e 50 6c 61 79 62 	imul   ebp,DWORD PTR [esi+0x50],0x6279616c
10000ef4:	61                   	popa   
10000ef5:	63 6b 20             	arpl   WORD PTR [ebx+0x20],bp
10000ef8:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
10000efb:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000efc:	6e                   	outs   dx,BYTE PTR ds:[esi]
10000efd:	65 6c                	gs ins BYTE PTR es:[edi],dx
10000eff:	73 20                	jae    10000f21 <AC97::stopPlayback()+0x315>
10000f01:	21 3d 20 32 20 4e    	and    DWORD PTR ds:0x4e203220,edi
10000f07:	4f                   	dec    edi
10000f08:	54                   	push   esp
10000f09:	20 53 55             	and    BYTE PTR [ebx+0x55],dl
10000f0c:	50                   	push   eax
10000f0d:	50                   	push   eax
10000f0e:	4f                   	dec    edi
10000f0f:	52                   	push   edx
10000f10:	54                   	push   esp
10000f11:	45                   	inc    ebp
10000f12:	44                   	inc    esp
10000f13:	21 00                	and    DWORD PTR [eax],eax
10000f15:	56                   	push   esi
10000f16:	41                   	inc    ecx
10000f17:	4c                   	dec    esp
10000f18:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10000f1e:	58                   	pop    eax
10000f1f:	0a 00                	or     al,BYTE PTR [eax]
10000f21:	66 90                	xchg   ax,ax
10000f23:	90                   	nop

10000f24 <vtable for AC97>:
	...
	10000f2c: R_386_32	AC97::~AC97()
	10000f30: R_386_32	AC97::~AC97()
	10000f34: R_386_32	AC97::open(int, int, void*)
	10000f38: R_386_32	AC97::close(int, int, void*)
	10000f3c: R_386_32	Device::hibernate()
	10000f40: R_386_32	Device::wake()
	10000f44: R_386_32	Device::detect()
	10000f48: R_386_32	Device::disableLegacy()
	10000f4c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10000f50: R_386_32	AC97::beginPlayback()
	10000f54: R_386_32	AC97::stopPlayback()
