
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 93 f9 00 00       	call   c000f9b3 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 20 b7 02 c0       	mov    eax,0xc002b720
c0000025:	3d 20 b7 02 c0       	cmp    eax,0xc002b720
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 20 b7 02 c0       	push   0xc002b720
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 20 b7 02 c0       	mov    eax,0xc002b720
c0000051:	2d 20 b7 02 c0       	sub    eax,0xc002b720
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 20 b7 02 c0       	push   0xc002b720
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 68 62 02 c0       	mov    ebx,0xc0026268
c0000097:	81 eb 64 62 02 c0    	sub    ebx,0xc0026264
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 64 62 02 c0       	mov    esi,0xc0026264
c00000a6:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 20 b7 02 c0       	push   0xc002b720
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 d0 02 c0       	push   0xc002d0c8
c0000108:	68 20 b7 02 c0       	push   0xc002b720
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 17 5b 01 00       	call   c0015dc4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 65 3f 01 00       	call   c001422a <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 f5 5a 01 00       	call   c0015dc4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 56 60 01 00       	call   c0016344 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 b9 65 01 00       	call   c00168b0 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 18 11 03 c0 	lgdtd  ds:0xc0031118
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 3e eb 00 00       	jmp    c000eebd <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 d0 02 c0    	mov    DWORD PTR ds:0xc002d0e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 80 62 02 c0 02 	test   BYTE PTR [edx-0x3ffd9d80],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 80 62 02 c0 01 	test   BYTE PTR [edx-0x3ffd9d80],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 80 62 02 c0 08 	test   BYTE PTR [edx-0x3ffd9d80],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 80 62 02 c0 08 	test   BYTE PTR [edx-0x3ffd9d80],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 80 62 02 c0 04 	test   BYTE PTR [ecx-0x3ffd9d80],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 80 62 02 c0 01 	test   BYTE PTR [edx-0x3ffd9d80],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 d1 02 c0    	mov    DWORD PTR ds:0xc002d100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 d1 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd2efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 d1 02 c0    	mov    DWORD PTR ds:0xc002d100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c d1 02 c0    	cmp    DWORD PTR ds:0xc002d12c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d13c
c0000e2a:	c7 42 0c 34 d1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c d1 02 c0    	mov    DWORD PTR ds:0xc002d12c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 d1 02 c0 02 	test   BYTE PTR ds:0xc002d100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 d4 02 c0    	dec    DWORD PTR ds:0xc002d450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 d4 02 c0    	sub    DWORD PTR ds:0xc002d464,eax
c0000e8e:	e8 6b e7 00 00       	call   c000f5fe <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 78 e6 00 00       	call   c000f5a0 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 53 e5 00 00       	call   c000f56a <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 4e e5 00 00       	call   c000f5a0 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 44 e4 00 00       	call   c000f56a <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 5f e3 00 00       	call   c000f56a <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 49 e3 00 00       	call   c000f56a <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 d1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 d1 02 c0 	lea    edx,[eax*8-0x3ffd2ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d140
c0001313:	81 fb 34 d1 02 c0    	cmp    ebx,0xc002d134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 d1 02 c0       	cmp    eax,0xc002d134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 d1 02 c0    	cmp    DWORD PTR ds:0xc002d130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c d1 02 c0       	mov    ds:0xc002d13c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 d1 02 c0       	mov    ds:0xc002d130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d134
c000136a:	c7 40 0c 34 d1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 d1 02 c0       	mov    ds:0xc002d140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 d1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 d0 02 c0 	lea    ebp,[edx*4-0x3ffd2f08]
c00013b3:	8b 14 95 00 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 d1 02 c0 	lea    ecx,[edx*4-0x3ffd2f00]
c00013ce:	8b 14 95 00 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 d4 02 c0 	or     DWORD PTR [edi*4-0x3ffd2bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 d1 02 c0 	lea    eax,[eax*8-0x3ffd2ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,ecx
c0001488:	89 0d 40 d1 02 c0    	mov    DWORD PTR ds:0xc002d140,ecx
c000148e:	c7 41 08 34 d1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d134
c0001495:	c7 41 0c 34 d1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c d1 02 c0 	lea    edx,[ecx*8-0x3ffd2ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 d4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c d1 02 c0 	lea    edx,[eax*4-0x3ffd2ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 d4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c d1 02 c0    	mov    DWORD PTR ds:0xc002d13c,edi
c000155b:	89 3d 40 d1 02 c0    	mov    DWORD PTR ds:0xc002d140,edi
c0001561:	c7 47 08 34 d1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d134
c0001568:	c7 47 0c 34 d1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 d1 02 c0    	mov    DWORD PTR ds:0xc002d130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c d1 02 c0       	mov    eax,ds:0xc002d12c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c d1 02 c0    	mov    DWORD PTR ds:0xc002d12c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 d1 02 c0       	mov    edx,0xc002d100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d454
c00016b6:	c7 05 54 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 d4 02 c0    	mov    DWORD PTR ds:0xc002d454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c d1 02 c0    	cmp    DWORD PTR ds:0xc002d12c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c d1 02 c0    	mov    DWORD PTR ds:0xc002d12c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c d4 02 c0    	push   DWORD PTR ds:0xc002d45c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c d4 02 c0       	mov    eax,ds:0xc002d45c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d12c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c d1 02 c0       	mov    eax,ds:0xc002d12c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 d1 02 c0       	mov    eax,0xc002d134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c d4 02 c0       	cmp    eax,0xc002d42c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 d4 02 c0       	mov    eax,ds:0xc002d468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 d1 02 c0       	mov    eax,0xc002d100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 84 63 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9c7c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 d1 02 c0       	mov    eax,ds:0xc002d100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 d1 02 c0       	mov    ds:0xc002d100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 d4 02 c0    	mov    DWORD PTR ds:0xc002d444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 d4 02 c0    	mov    DWORD PTR ds:0xc002d448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c d4 02 c0    	mov    DWORD PTR ds:0xc002d44c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 d4 02 c0    	mov    DWORD PTR ds:0xc002d454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 20 35 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffccae0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 51 a6 01 00       	jmp    c001c60c <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 20 35 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffccae0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 7b a6 01 00       	jmp    c001c64c <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 20 35 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffccae0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 9c a6 01 00       	jmp    c001c68c <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 e0 64 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd9b20]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 e0 64 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9b20]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 74 93 02 c0       	mov    edx,0xc0029374
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 9c 63 02 c0       	mov    edx,0xc002639c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 d4 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd2b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 d4 02 c0    	mov    ax,ds:0xc002d480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 d4 02 c0    	mov    ds:0xc002d480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 a2 63 02 c0       	mov    eax,0xc00263a2
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 60 64 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd9ba0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 ab 63 02 c0       	mov    eax,0xc00263ab
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 e0 64 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd9b20]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 d4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 d4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 30 64 02 c0       	mov    eax,0xc0026430
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 20 64 02 c0       	mov    ebx,0xc0026420
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 00 64 02 c0       	mov    eax,0xc0026400
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 10 64 02 c0       	mov    eax,0xc0026410
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba b2 63 02 c0       	mov    edx,0xc00263b2
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba be 63 02 c0       	mov    edx,0xc00263be
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba d2 63 02 c0       	mov    edx,0xc00263d2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 3d 98 00 00       	call   c000f680 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 35 98 00 00       	call   c000f690 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c 00 68 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026800
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 00 68 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026800
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 00 66 02 c0       	mov    eax,0xc0026600
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 40 65 02 c0       	mov    eax,0xc0026540
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 00 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9b00]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 00 69 02 c0       	push   0xc0026900
c0006327:	e8 84 6c 01 00       	call   c001cfb0 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 d0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 d0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 0e 69 02 c0       	push   0xc002690e
c000635f:	e8 4c 6c 01 00       	call   c001cfb0 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 d5 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd2a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 d0 02 c0 	movsx  eax,BYTE PTR ds:0xc002d060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 b5 6b 01 00       	call   c001cf54 <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 d0 02 c0       	mov    eax,0xc002d020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 de 02 c0 00 	cmp    DWORD PTR ds:0xc002deb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002deb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 1d 69 02 c0       	push   0xc002691d
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 de 02 c0       	mov    ecx,0xc002de80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 d5 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd2ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 d5 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd2ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 d5 02 c0    	mov    DWORD PTR [edi-0x3ffd2abc],esi
c000675b:	c7 87 48 d5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd2ab8],0x0
c0006765:	89 87 40 d5 02 c0    	mov    DWORD PTR [edi-0x3ffd2ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 d5 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd2a30],0x0
c000677d:	89 87 4c d5 02 c0    	mov    DWORD PTR [edi-0x3ffd2ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 d5 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 d5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd2ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 d5 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd2a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 d5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd2ab8]
c00067f6:	8b 9d 4c d5 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd2ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 d5 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd2ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 d0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2fe0]
c000688d:	8b 85 48 d5 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd2ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 d5 02 c0    	add    DWORD PTR [ebp-0x3ffd2ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 d5 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd2ac0],0x0
c00068ef:	8d 8d 40 d5 02 c0    	lea    ecx,[ebp-0x3ffd2ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c d5 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd2ab4]
c000692c:	05 40 d5 02 c0       	add    eax,0xc002d540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 d5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd2ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 d5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd2ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 d5 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd2a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 d5 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd2ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 d5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd2ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 d5 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd2a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c d5 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd2ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 d5 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd2ac0],0x0
c00069ec:	8d b8 40 d5 02 c0    	lea    edi,[eax-0x3ffd2ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 20 69 02 c0       	push   0xc0026920
c0006a0f:	e8 9c 65 01 00       	call   c001cfb0 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 aa 65 01 00       	call   c001cfcc <iso_kprintfd>
c0006a22:	c7 04 24 25 69 02 c0 	mov    DWORD PTR [esp],0xc0026925
c0006a29:	e8 82 65 01 00       	call   c001cfb0 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 d5 02 c0    	push   DWORD PTR [ebx-0x3ffd2ac0]
c0006a35:	e8 92 65 01 00       	call   c001cfcc <iso_kprintfd>
c0006a3a:	c7 04 24 2b 69 02 c0 	mov    DWORD PTR [esp],0xc002692b
c0006a41:	e8 6a 65 01 00       	call   c001cfb0 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 d5 02 c0    	push   DWORD PTR [ebx-0x3ffd2abc]
c0006a4d:	e8 7a 65 01 00       	call   c001cfcc <iso_kprintfd>
c0006a52:	c7 04 24 31 69 02 c0 	mov    DWORD PTR [esp],0xc0026931
c0006a59:	e8 52 65 01 00       	call   c001cfb0 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 d5 02 c0    	push   DWORD PTR [ebx-0x3ffd2a30]
c0006a65:	e8 62 65 01 00       	call   c001cfcc <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 d0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd2f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 d5 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd2ab8]
c0006acb:	81 c2 40 d5 02 c0    	add    edx,0xc002d540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 d0 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd2f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 de 02 c0 00 	cmp    DWORD PTR ds:0xc002deb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 d5 02 c0    	lea    ebp,[edi-0x3ffd2aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 d5 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd2aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 1d 69 02 c0       	push   0xc002691d
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 d5 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd2aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 d5 02 c0    	mov    DWORD PTR [ebx-0x3ffd2ab0],eax
c0006c0a:	89 93 54 d5 02 c0    	mov    DWORD PTR [ebx-0x3ffd2aac],edx
c0006c10:	81 c3 40 d5 02 c0    	add    ebx,0xc002d540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 d5 02 c0    	lea    eax,[edi-0x3ffd2ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 3a 69 02 c0       	push   0xc002693a
c0006c32:	e8 79 63 01 00       	call   c001cfb0 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 d0 02 c0       	mov    ds:0xc002d060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002deb4,0x0
c0006c67:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 45 69 02 c0       	push   0xc0026945
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 d0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd2f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 de 02 c0       	mov    ds:0xc002deb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 de 02 c0 00 	cmp    DWORD PTR ds:0xc002deb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 d0 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd2f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 4c 69 02 c0       	push   0xc002694c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 d0 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd2f80]
c0006d05:	bf 80 de 02 c0       	mov    edi,0xc002de80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 de 02 c0       	mov    eax,0xc002de82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 de 02 c0       	mov    ds:0xc002dea8,eax
c0006d28:	b8 8a de 02 c0       	mov    eax,0xc002de8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 de 02 c0       	mov    ds:0xc002dea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 53 69 02 c0       	push   0xc0026953
c0006d49:	e8 62 62 01 00       	call   c001cfb0 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 5e 69 02 c0       	push   0xc002695e
c0006d64:	e8 47 62 01 00       	call   c001cfb0 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 d5 02 c0       	push   0xc002d540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 d5 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc002d540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 ed 88 00 00       	call   c000f680 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 de 02 c0       	mov    ds:0xc002deb0,eax
c0006d9f:	e8 dc 88 00 00       	call   c000f680 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 d5 02 c0       	mov    ds:0xc002d520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 c7 88 00 00       	call   c000f680 <malloc>
c0006db9:	89 04 9d 80 d0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 ae 88 00 00       	call   c000f680 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 d0 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd2f80]
c0006dff:	e8 8c 88 00 00       	call   c000f690 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 d0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd2fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 7e 88 00 00       	call   c000f690 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 de 02 c0       	mov    eax,ds:0xc002deb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 64 88 00 00       	call   c000f690 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 d5 02 c0       	mov    eax,ds:0xc002d520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 4f 88 00 00       	call   c000f690 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002deb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	53                   	push   ebx
c0006ed1:	83 ec 14             	sub    esp,0x14
c0006ed4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ed8:	6a 10                	push   0x10
c0006eda:	e8 b1 62 00 00       	call   c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006edf:	83 c4 10             	add    esp,0x10
c0006ee2:	84 c0                	test   al,al
c0006ee4:	75 12                	jne    c0006ef8 <Dbg::logc(char)+0x28>
c0006ee6:	ba fd 03 00 00       	mov    edx,0x3fd
c0006eeb:	ec                   	in     al,dx
c0006eec:	a8 20                	test   al,0x20
c0006eee:	74 fb                	je     c0006eeb <Dbg::logc(char)+0x1b>
c0006ef0:	ba f8 03 00 00       	mov    edx,0x3f8
c0006ef5:	88 d8                	mov    al,bl
c0006ef7:	ee                   	out    dx,al
c0006ef8:	83 c4 08             	add    esp,0x8
c0006efb:	5b                   	pop    ebx
c0006efc:	c3                   	ret    

c0006efd <Dbg::logs(char*)>:
c0006efd:	53                   	push   ebx
c0006efe:	83 ec 08             	sub    esp,0x8
c0006f01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006f05:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	74 16                	je     c0006f22 <Dbg::logs(char*)+0x25>
c0006f0c:	83 ec 0c             	sub    esp,0xc
c0006f0f:	83 c3 01             	add    ebx,0x1
c0006f12:	50                   	push   eax
c0006f13:	e8 b8 ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f18:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1b:	83 c4 10             	add    esp,0x10
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 ea                	jne    c0006f0c <Dbg::logs(char*)+0xf>
c0006f22:	83 c4 08             	add    esp,0x8
c0006f25:	5b                   	pop    ebx
c0006f26:	c3                   	ret    

c0006f27 <Dbg::logWriteInt(unsigned int)>:
c0006f27:	83 ec 1c             	sub    esp,0x1c
c0006f2a:	6a 0a                	push   0xa
c0006f2c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f30:	50                   	push   eax
c0006f31:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006f35:	50                   	push   eax
c0006f36:	e8 24 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f3b:	50                   	push   eax
c0006f3c:	e8 bc ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f41:	83 c4 2c             	add    esp,0x2c
c0006f44:	c3                   	ret    

c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f45:	83 ec 1c             	sub    esp,0x1c
c0006f48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006f4c:	50                   	push   eax
c0006f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f51:	50                   	push   eax
c0006f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0006f56:	52                   	push   edx
c0006f57:	e8 03 ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5c:	50                   	push   eax
c0006f5d:	e8 9b ff ff ff       	call   c0006efd <Dbg::logs(char*)>
c0006f62:	83 c4 2c             	add    esp,0x2c
c0006f65:	c3                   	ret    

c0006f66 <Dbg::kprintf(char const*, ...)>:
c0006f66:	55                   	push   ebp
c0006f67:	57                   	push   edi
c0006f68:	56                   	push   esi
c0006f69:	53                   	push   ebx
c0006f6a:	83 ec 1c             	sub    esp,0x1c
c0006f6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006f71:	85 db                	test   ebx,ebx
c0006f73:	0f 84 4c 01 00 00    	je     c00070c5 <Dbg::kprintf(char const*, ...)+0x15f>
c0006f79:	83 ec 0c             	sub    esp,0xc
c0006f7c:	6a 10                	push   0x10
c0006f7e:	e8 0d 62 00 00       	call   c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0006f83:	83 c4 10             	add    esp,0x10
c0006f86:	84 c0                	test   al,al
c0006f88:	74 08                	je     c0006f92 <Dbg::kprintf(char const*, ...)+0x2c>
c0006f8a:	83 c4 1c             	add    esp,0x1c
c0006f8d:	5b                   	pop    ebx
c0006f8e:	5e                   	pop    esi
c0006f8f:	5f                   	pop    edi
c0006f90:	5d                   	pop    ebp
c0006f91:	c3                   	ret    
c0006f92:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006f96:	31 ff                	xor    edi,edi
c0006f98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f9c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f9f:	85 c0                	test   eax,eax
c0006fa1:	74 e7                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fa3:	8d 77 01             	lea    esi,[edi+0x1]
c0006fa6:	83 f8 25             	cmp    eax,0x25
c0006fa9:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fac:	75 4c                	jne    c0006ffa <Dbg::kprintf(char const*, ...)+0x94>
c0006fae:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fb1:	83 c7 02             	add    edi,0x2
c0006fb4:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fb7:	83 e8 25             	sub    eax,0x25
c0006fba:	0f b6 c0             	movzx  eax,al
c0006fbd:	83 f8 53             	cmp    eax,0x53
c0006fc0:	0f 87 e1 00 00 00    	ja     c00070a7 <Dbg::kprintf(char const*, ...)+0x141>
c0006fc6:	ff 24 85 a8 69 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9658]
c0006fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006fd1:	83 ec 0c             	sub    esp,0xc
c0006fd4:	89 c8                	mov    eax,ecx
c0006fd6:	83 c1 04             	add    ecx,0x4
c0006fd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006fdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fdf:	50                   	push   eax
c0006fe0:	e8 42 ff ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0006fe5:	83 c4 10             	add    esp,0x10
c0006fe8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006feb:	85 c0                	test   eax,eax
c0006fed:	74 9b                	je     c0006f8a <Dbg::kprintf(char const*, ...)+0x24>
c0006fef:	8d 77 01             	lea    esi,[edi+0x1]
c0006ff2:	83 f8 25             	cmp    eax,0x25
c0006ff5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006ff8:	74 b4                	je     c0006fae <Dbg::kprintf(char const*, ...)+0x48>
c0006ffa:	83 ec 0c             	sub    esp,0xc
c0006ffd:	89 f7                	mov    edi,esi
c0006fff:	50                   	push   eax
c0007000:	89 ee                	mov    esi,ebp
c0007002:	e8 c9 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007007:	83 c4 10             	add    esp,0x10
c000700a:	eb dc                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	83 ec 0c             	sub    esp,0xc
c0007013:	89 c8                	mov    eax,ecx
c0007015:	83 c1 04             	add    ecx,0x4
c0007018:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000701c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000701e:	55                   	push   ebp
c000701f:	e8 d9 fe ff ff       	call   c0006efd <Dbg::logs(char*)>
c0007024:	83 c4 10             	add    esp,0x10
c0007027:	eb bf                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007029:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000702d:	83 ec 0c             	sub    esp,0xc
c0007030:	89 d0                	mov    eax,edx
c0007032:	83 c2 04             	add    edx,0x4
c0007035:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007039:	8b 08                	mov    ecx,DWORD PTR [eax]
c000703b:	51                   	push   ecx
c000703c:	e8 e6 fe ff ff       	call   c0006f27 <Dbg::logWriteInt(unsigned int)>
c0007041:	83 c4 10             	add    esp,0x10
c0007044:	eb a2                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007046:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000704a:	83 ec 0c             	sub    esp,0xc
c000704d:	89 d0                	mov    eax,edx
c000704f:	83 c2 04             	add    edx,0x4
c0007052:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007056:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0007059:	50                   	push   eax
c000705a:	e8 71 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000705f:	83 c4 10             	add    esp,0x10
c0007062:	eb 84                	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007064:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007068:	89 c8                	mov    eax,ecx
c000706a:	83 c1 04             	add    ecx,0x4
c000706d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007071:	83 ec 08             	sub    esp,0x8
c0007074:	6a 10                	push   0x10
c0007076:	8b 10                	mov    edx,DWORD PTR [eax]
c0007078:	52                   	push   edx
c0007079:	e8 c7 fe ff ff       	call   c0006f45 <Dbg::logWriteIntBase(unsigned int, int)>
c000707e:	83 c4 10             	add    esp,0x10
c0007081:	e9 62 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c0007086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000708a:	89 d0                	mov    eax,edx
c000708c:	83 c2 08             	add    edx,0x8
c000708f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007093:	eb dc                	jmp    c0007071 <Dbg::kprintf(char const*, ...)+0x10b>
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	6a 25                	push   0x25
c000709a:	e8 31 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	e9 41 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070a7:	83 ec 0c             	sub    esp,0xc
c00070aa:	6a 25                	push   0x25
c00070ac:	e8 1f fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070b1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00070b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00070b8:	e8 13 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	e9 23 ff ff ff       	jmp    c0006fe8 <Dbg::kprintf(char const*, ...)+0x82>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 70 69 02 c0       	push   0xc0026970
c00070cd:	e8 94 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	83 c4 1c             	add    esp,0x1c
c00070d8:	5b                   	pop    ebx
c00070d9:	5e                   	pop    esi
c00070da:	5f                   	pop    edi
c00070db:	5d                   	pop    ebp
c00070dc:	c3                   	ret    
c00070dd:	66 90                	xchg   ax,ax
c00070df:	90                   	nop

c00070e0 <KiUbsanPrintDetails(char const*, void*)>:
c00070e0:	83 ec 1c             	sub    esp,0x1c
c00070e3:	83 ec 08             	sub    esp,0x8
c00070e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070ea:	68 f8 6a 02 c0       	push   0xc0026af8
c00070ef:	e8 72 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00070f4:	83 c4 10             	add    esp,0x10
c00070f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007103:	8b 00                	mov    eax,DWORD PTR [eax]
c0007105:	83 ec 08             	sub    esp,0x8
c0007108:	50                   	push   eax
c0007109:	68 0c 6b 02 c0       	push   0xc0026b0c
c000710e:	e8 53 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007113:	83 c4 10             	add    esp,0x10
c0007116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000711a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000711d:	83 ec 08             	sub    esp,0x8
c0007120:	50                   	push   eax
c0007121:	68 16 6b 02 c0       	push   0xc0026b16
c0007126:	e8 3b fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007132:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0007135:	83 ec 08             	sub    esp,0x8
c0007138:	50                   	push   eax
c0007139:	68 20 6b 02 c0       	push   0xc0026b20
c000713e:	e8 23 fe ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007143:	83 c4 10             	add    esp,0x10
c0007146:	90                   	nop
c0007147:	83 c4 1c             	add    esp,0x1c
c000714a:	c3                   	ret    
c000714b:	90                   	nop

c000714c <__ubsan_handle_type_mismatch_v1>:
c000714c:	83 ec 0c             	sub    esp,0xc
c000714f:	83 ec 08             	sub    esp,0x8
c0007152:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007156:	68 64 6c 02 c0       	push   0xc0026c64
c000715b:	e8 80 ff ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007160:	83 c4 10             	add    esp,0x10
c0007163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007168:	75 16                	jne    c0007180 <__ubsan_handle_type_mismatch_v1+0x34>
c000716a:	83 ec 0c             	sub    esp,0xc
c000716d:	68 2a 6b 02 c0       	push   0xc0026b2a
c0007172:	e8 ef fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0007177:	83 c4 10             	add    esp,0x10
c000717a:	e9 91 00 00 00       	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c000717f:	90                   	nop
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007187:	85 c0                	test   eax,eax
c0007189:	74 29                	je     c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000718b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000718f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007192:	83 e8 01             	sub    eax,0x1
c0007195:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007199:	75 19                	jne    c00071b4 <__ubsan_handle_type_mismatch_v1+0x68>
c000719b:	83 ec 08             	sub    esp,0x8
c000719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00071a2:	68 84 6c 02 c0       	push   0xc0026c84
c00071a7:	e8 ba fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071ac:	83 c4 10             	add    esp,0x10
c00071af:	eb 5f                	jmp    c0007210 <__ubsan_handle_type_mismatch_v1+0xc4>
c00071b1:	8d 76 00             	lea    esi,[esi+0x0]
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 3f 6b 02 c0       	push   0xc0026b3f
c00071bc:	e8 a5 fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071c8:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071cb:	0f b6 c0             	movzx  eax,al
c00071ce:	83 ec 08             	sub    esp,0x8
c00071d1:	50                   	push   eax
c00071d2:	68 59 6b 02 c0       	push   0xc0026b59
c00071d7:	e8 8a fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00071dc:	83 c4 10             	add    esp,0x10
c00071df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071e6:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071f1:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071f4:	0f b6 c0             	movzx  eax,al
c00071f7:	8b 04 85 40 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd53c0]
c00071fe:	51                   	push   ecx
c00071ff:	52                   	push   edx
c0007200:	50                   	push   eax
c0007201:	68 ac 6c 02 c0       	push   0xc0026cac
c0007206:	e8 5b fd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000720b:	83 c4 10             	add    esp,0x10
c000720e:	66 90                	xchg   ax,ax
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	68 64 6c 02 c0       	push   0xc0026c64
c0007218:	e8 b7 88 00 00       	call   c000fad4 <KePanic(char const*)>
c000721d:	83 c4 10             	add    esp,0x10
c0007220:	90                   	nop
c0007221:	83 c4 0c             	add    esp,0xc
c0007224:	c3                   	ret    
c0007225:	8d 76 00             	lea    esi,[esi+0x0]

c0007228 <__ubsan_handle_pointer_overflow>:
c0007228:	83 ec 0c             	sub    esp,0xc
c000722b:	83 ec 08             	sub    esp,0x8
c000722e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007232:	68 f4 6c 02 c0       	push   0xc0026cf4
c0007237:	e8 a4 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000723c:	83 c4 10             	add    esp,0x10
c000723f:	83 ec 0c             	sub    esp,0xc
c0007242:	68 f4 6c 02 c0       	push   0xc0026cf4
c0007247:	e8 88 88 00 00       	call   c000fad4 <KePanic(char const*)>
c000724c:	83 c4 10             	add    esp,0x10
c000724f:	90                   	nop
c0007250:	83 c4 0c             	add    esp,0xc
c0007253:	c3                   	ret    

c0007254 <__ubsan_handle_out_of_bounds>:
c0007254:	83 ec 0c             	sub    esp,0xc
c0007257:	83 ec 08             	sub    esp,0x8
c000725a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725e:	68 64 6b 02 c0       	push   0xc0026b64
c0007263:	e8 78 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007268:	83 c4 10             	add    esp,0x10
c000726b:	83 ec 0c             	sub    esp,0xc
c000726e:	68 64 6b 02 c0       	push   0xc0026b64
c0007273:	e8 5c 88 00 00       	call   c000fad4 <KePanic(char const*)>
c0007278:	83 c4 10             	add    esp,0x10
c000727b:	90                   	nop
c000727c:	83 c4 0c             	add    esp,0xc
c000727f:	c3                   	ret    

c0007280 <__ubsan_handle_add_overflow>:
c0007280:	83 ec 0c             	sub    esp,0xc
c0007283:	83 ec 08             	sub    esp,0x8
c0007286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000728a:	68 81 6b 02 c0       	push   0xc0026b81
c000728f:	e8 4c fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	83 ec 0c             	sub    esp,0xc
c000729a:	68 81 6b 02 c0       	push   0xc0026b81
c000729f:	e8 30 88 00 00       	call   c000fad4 <KePanic(char const*)>
c00072a4:	83 c4 10             	add    esp,0x10
c00072a7:	90                   	nop
c00072a8:	83 c4 0c             	add    esp,0xc
c00072ab:	c3                   	ret    

c00072ac <__ubsan_handle_load_invalid_value>:
c00072ac:	83 ec 0c             	sub    esp,0xc
c00072af:	83 ec 08             	sub    esp,0x8
c00072b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b6:	68 14 6d 02 c0       	push   0xc0026d14
c00072bb:	e8 20 fe ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072c0:	83 c4 10             	add    esp,0x10
c00072c3:	83 ec 0c             	sub    esp,0xc
c00072c6:	68 14 6d 02 c0       	push   0xc0026d14
c00072cb:	e8 04 88 00 00       	call   c000fad4 <KePanic(char const*)>
c00072d0:	83 c4 10             	add    esp,0x10
c00072d3:	90                   	nop
c00072d4:	83 c4 0c             	add    esp,0xc
c00072d7:	c3                   	ret    

c00072d8 <__ubsan_handle_divrem_overflow>:
c00072d8:	83 ec 0c             	sub    esp,0xc
c00072db:	83 ec 08             	sub    esp,0x8
c00072de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072e2:	68 38 6d 02 c0       	push   0xc0026d38
c00072e7:	e8 f4 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c00072ec:	83 c4 10             	add    esp,0x10
c00072ef:	83 ec 0c             	sub    esp,0xc
c00072f2:	68 38 6d 02 c0       	push   0xc0026d38
c00072f7:	e8 d8 87 00 00       	call   c000fad4 <KePanic(char const*)>
c00072fc:	83 c4 10             	add    esp,0x10
c00072ff:	90                   	nop
c0007300:	83 c4 0c             	add    esp,0xc
c0007303:	c3                   	ret    

c0007304 <__ubsan_handle_mul_overflow>:
c0007304:	83 ec 0c             	sub    esp,0xc
c0007307:	83 ec 08             	sub    esp,0x8
c000730a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730e:	68 9d 6b 02 c0       	push   0xc0026b9d
c0007313:	e8 c8 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007318:	83 c4 10             	add    esp,0x10
c000731b:	83 ec 0c             	sub    esp,0xc
c000731e:	68 9d 6b 02 c0       	push   0xc0026b9d
c0007323:	e8 ac 87 00 00       	call   c000fad4 <KePanic(char const*)>
c0007328:	83 c4 10             	add    esp,0x10
c000732b:	90                   	nop
c000732c:	83 c4 0c             	add    esp,0xc
c000732f:	c3                   	ret    

c0007330 <__ubsan_handle_sub_overflow>:
c0007330:	83 ec 0c             	sub    esp,0xc
c0007333:	83 ec 08             	sub    esp,0x8
c0007336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000733a:	68 b9 6b 02 c0       	push   0xc0026bb9
c000733f:	e8 9c fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007344:	83 c4 10             	add    esp,0x10
c0007347:	83 ec 0c             	sub    esp,0xc
c000734a:	68 b9 6b 02 c0       	push   0xc0026bb9
c000734f:	e8 80 87 00 00       	call   c000fad4 <KePanic(char const*)>
c0007354:	83 c4 10             	add    esp,0x10
c0007357:	90                   	nop
c0007358:	83 c4 0c             	add    esp,0xc
c000735b:	c3                   	ret    

c000735c <__ubsan_handle_shift_out_of_bounds>:
c000735c:	83 ec 0c             	sub    esp,0xc
c000735f:	83 ec 08             	sub    esp,0x8
c0007362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007366:	68 58 6d 02 c0       	push   0xc0026d58
c000736b:	e8 70 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c0007370:	83 c4 10             	add    esp,0x10
c0007373:	83 ec 0c             	sub    esp,0xc
c0007376:	68 58 6d 02 c0       	push   0xc0026d58
c000737b:	e8 54 87 00 00       	call   c000fad4 <KePanic(char const*)>
c0007380:	83 c4 10             	add    esp,0x10
c0007383:	90                   	nop
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	c3                   	ret    

c0007388 <__ubsan_handle_negate_overflow>:
c0007388:	83 ec 0c             	sub    esp,0xc
c000738b:	83 ec 08             	sub    esp,0x8
c000738e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007392:	68 7c 6d 02 c0       	push   0xc0026d7c
c0007397:	e8 44 fd ff ff       	call   c00070e0 <KiUbsanPrintDetails(char const*, void*)>
c000739c:	83 c4 10             	add    esp,0x10
c000739f:	83 ec 0c             	sub    esp,0xc
c00073a2:	68 7c 6d 02 c0       	push   0xc0026d7c
c00073a7:	e8 28 87 00 00       	call   c000fad4 <KePanic(char const*)>
c00073ac:	83 c4 10             	add    esp,0x10
c00073af:	90                   	nop
c00073b0:	83 c4 0c             	add    esp,0xc
c00073b3:	c3                   	ret    

c00073b4 <KiIsHashInTable(unsigned short)>:
c00073b4:	0f b7 d0             	movzx  edx,ax
c00073b7:	83 e0 07             	and    eax,0x7
c00073ba:	c1 fa 03             	sar    edx,0x3
c00073bd:	88 c1                	mov    cl,al
c00073bf:	0f b6 92 00 e3 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd1d00]
c00073c6:	d3 fa                	sar    edx,cl
c00073c8:	89 d0                	mov    eax,edx
c00073ca:	83 e0 01             	and    eax,0x1
c00073cd:	c3                   	ret    

c00073ce <KiSetHashInTable(unsigned short, bool)>:
c00073ce:	56                   	push   esi
c00073cf:	53                   	push   ebx
c00073d0:	0f b7 d8             	movzx  ebx,ax
c00073d3:	c1 fb 03             	sar    ebx,0x3
c00073d6:	83 e0 07             	and    eax,0x7
c00073d9:	89 c1                	mov    ecx,eax
c00073db:	b8 01 00 00 00       	mov    eax,0x1
c00073e0:	0f b6 b3 00 e3 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd1d00]
c00073e7:	d3 e0                	shl    eax,cl
c00073e9:	84 d2                	test   dl,dl
c00073eb:	74 04                	je     c00073f1 <KiSetHashInTable(unsigned short, bool)+0x23>
c00073ed:	09 f0                	or     eax,esi
c00073ef:	eb 04                	jmp    c00073f5 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073f1:	f7 d0                	not    eax
c00073f3:	21 f0                	and    eax,esi
c00073f5:	88 83 00 e3 02 c0    	mov    BYTE PTR [ebx-0x3ffd1d00],al
c00073fb:	5b                   	pop    ebx
c00073fc:	5e                   	pop    esi
c00073fd:	c3                   	ret    

c00073fe <KiFlushSymlinkChanges()>:
c00073fe:	57                   	push   edi
c00073ff:	56                   	push   esi
c0007400:	53                   	push   ebx
c0007401:	83 ec 1c             	sub    esp,0x1c
c0007404:	68 14 01 00 00       	push   0x114
c0007409:	e8 72 82 00 00       	call   c000f680 <malloc>
c000740e:	83 c4 0c             	add    esp,0xc
c0007411:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0007417:	68 9b 6d 02 c0       	push   0xc0026d9b
c000741c:	50                   	push   eax
c000741d:	89 c3                	mov    ebx,eax
c000741f:	e8 64 0d 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007424:	83 c4 10             	add    esp,0x10
c0007427:	85 db                	test   ebx,ebx
c0007429:	75 10                	jne    c000743b <KiFlushSymlinkChanges()+0x3d>
c000742b:	83 ec 0c             	sub    esp,0xc
c000742e:	68 b9 6d 02 c0       	push   0xc0026db9
c0007433:	e8 9c 86 00 00       	call   c000fad4 <KePanic(char const*)>
c0007438:	83 c4 10             	add    esp,0x10
c000743b:	50                   	push   eax
c000743c:	50                   	push   eax
c000743d:	6a 06                	push   0x6
c000743f:	53                   	push   ebx
c0007440:	e8 61 0d 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007445:	83 c4 10             	add    esp,0x10
c0007448:	85 c0                	test   eax,eax
c000744a:	74 10                	je     c000745c <KiFlushSymlinkChanges()+0x5e>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	68 d3 6d 02 c0       	push   0xc0026dd3
c0007454:	e8 7b 86 00 00       	call   c000fad4 <KePanic(char const*)>
c0007459:	83 c4 10             	add    esp,0x10
c000745c:	31 f6                	xor    esi,esi
c000745e:	39 35 c0 de 02 c0    	cmp    DWORD PTR ds:0xc002dec0,esi
c0007464:	7e 70                	jle    c00074d6 <KiFlushSymlinkChanges()+0xd8>
c0007466:	83 ec 0c             	sub    esp,0xc
c0007469:	89 f0                	mov    eax,esi
c000746b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000746d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007471:	c1 e0 08             	shl    eax,0x8
c0007474:	57                   	push   edi
c0007475:	05 00 df 02 c0       	add    eax,0xc002df00
c000747a:	50                   	push   eax
c000747b:	6a 00                	push   0x0
c000747d:	68 00 01 00 00       	push   0x100
c0007482:	53                   	push   ebx
c0007483:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007486:	83 c4 20             	add    esp,0x20
c0007489:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007491:	74 10                	je     c00074a3 <KiFlushSymlinkChanges()+0xa5>
c0007493:	83 ec 0c             	sub    esp,0xc
c0007496:	68 ed 6d 02 c0       	push   0xc0026ded
c000749b:	e8 34 86 00 00       	call   c000fad4 <KePanic(char const*)>
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a5:	8d 14 f5 e0 de 02 c0 	lea    edx,[esi*8-0x3ffd2120]
c00074ac:	83 ec 0c             	sub    esp,0xc
c00074af:	57                   	push   edi
c00074b0:	52                   	push   edx
c00074b1:	6a 00                	push   0x0
c00074b3:	6a 08                	push   0x8
c00074b5:	53                   	push   ebx
c00074b6:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00074b9:	83 c4 20             	add    esp,0x20
c00074bc:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00074c1:	74 10                	je     c00074d3 <KiFlushSymlinkChanges()+0xd5>
c00074c3:	83 ec 0c             	sub    esp,0xc
c00074c6:	68 07 6e 02 c0       	push   0xc0026e07
c00074cb:	e8 04 86 00 00       	call   c000fad4 <KePanic(char const*)>
c00074d0:	83 c4 10             	add    esp,0x10
c00074d3:	46                   	inc    esi
c00074d4:	eb 88                	jmp    c000745e <KiFlushSymlinkChanges()+0x60>
c00074d6:	83 ec 0c             	sub    esp,0xc
c00074d9:	53                   	push   ebx
c00074da:	e8 25 0d 00 00       	call   c0008204 <File::close()>
c00074df:	83 c4 10             	add    esp,0x10
c00074e2:	85 db                	test   ebx,ebx
c00074e4:	74 0c                	je     c00074f2 <KiFlushSymlinkChanges()+0xf4>
c00074e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074e8:	83 ec 0c             	sub    esp,0xc
c00074eb:	53                   	push   ebx
c00074ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ef:	83 c4 10             	add    esp,0x10
c00074f2:	c7 05 c0 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dec0,0x0
c00074fc:	83 c4 10             	add    esp,0x10
c00074ff:	5b                   	pop    ebx
c0007500:	5e                   	pop    esi
c0007501:	5f                   	pop    edi
c0007502:	c3                   	ret    

c0007503 <KiDeinitialiseSymlinks(void*)>:
c0007503:	e9 f6 fe ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>

c0007508 <KiGetSymlinkHash(char const*)>:
c0007508:	53                   	push   ebx
c0007509:	89 c3                	mov    ebx,eax
c000750b:	83 ec 14             	sub    esp,0x14
c000750e:	50                   	push   eax
c000750f:	e8 6c 90 ff ff       	call   c0000580 <strlen>
c0007514:	5a                   	pop    edx
c0007515:	59                   	pop    ecx
c0007516:	50                   	push   eax
c0007517:	53                   	push   ebx
c0007518:	e8 1e 6b 00 00       	call   c000e03b <KeCalculateCRC32(unsigned char*, int)>
c000751d:	83 c4 18             	add    esp,0x18
c0007520:	5b                   	pop    ebx
c0007521:	89 c2                	mov    edx,eax
c0007523:	c1 ea 10             	shr    edx,0x10
c0007526:	31 d0                	xor    eax,edx
c0007528:	c3                   	ret    

c0007529 <KiCreateSymlinkID()>:
c0007529:	55                   	push   ebp
c000752a:	57                   	push   edi
c000752b:	56                   	push   esi
c000752c:	53                   	push   ebx
c000752d:	31 db                	xor    ebx,ebx
c000752f:	83 ec 1c             	sub    esp,0x1c
c0007532:	e8 75 8f 00 00       	call   c00104ac <KeRand()>
c0007537:	8b 2d 00 03 03 c0    	mov    ebp,DWORD PTR ds:0xc0030300
c000753d:	31 d2                	xor    edx,edx
c000753f:	43                   	inc    ebx
c0007540:	31 ff                	xor    edi,edi
c0007542:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0007545:	89 ee                	mov    esi,ebp
c0007547:	89 0d 00 03 03 c0    	mov    DWORD PTR ds:0xc0030300,ecx
c000754d:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007551:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007555:	c1 e0 1f             	shl    eax,0x1f
c0007558:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000755e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007562:	75 10                	jne    c0007574 <KiCreateSymlinkID()+0x4b>
c0007564:	83 ec 0c             	sub    esp,0xc
c0007567:	68 21 6e 02 c0       	push   0xc0026e21
c000756c:	e8 63 85 00 00       	call   c000fad4 <KePanic(char const*)>
c0007571:	83 c4 10             	add    esp,0x10
c0007574:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0007578:	75 06                	jne    c0007580 <KiCreateSymlinkID()+0x57>
c000757a:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000757e:	74 b2                	je     c0007532 <KiCreateSymlinkID()+0x9>
c0007580:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007584:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007588:	83 c4 1c             	add    esp,0x1c
c000758b:	5b                   	pop    ebx
c000758c:	31 f0                	xor    eax,esi
c000758e:	5e                   	pop    esi
c000758f:	31 fa                	xor    edx,edi
c0007591:	5f                   	pop    edi
c0007592:	5d                   	pop    ebp
c0007593:	c3                   	ret    

c0007594 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007594:	53                   	push   ebx
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000759c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075a0:	a1 c0 de 02 c0       	mov    eax,ds:0xc002dec0
c00075a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00075a9:	68 00 01 00 00       	push   0x100
c00075ae:	6a 00                	push   0x0
c00075b0:	89 0c c5 e4 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd211c],ecx
c00075b7:	89 14 c5 e0 de 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2120],edx
c00075be:	c1 e0 08             	shl    eax,0x8
c00075c1:	05 00 df 02 c0       	add    eax,0xc002df00
c00075c6:	50                   	push   eax
c00075c7:	e8 24 8f ff ff       	call   c00004f0 <memset>
c00075cc:	58                   	pop    eax
c00075cd:	a1 c0 de 02 c0       	mov    eax,ds:0xc002dec0
c00075d2:	5a                   	pop    edx
c00075d3:	c1 e0 08             	shl    eax,0x8
c00075d6:	53                   	push   ebx
c00075d7:	05 00 df 02 c0       	add    eax,0xc002df00
c00075dc:	50                   	push   eax
c00075dd:	e8 6e 90 ff ff       	call   c0000650 <strcpy>
c00075e2:	89 d8                	mov    eax,ebx
c00075e4:	e8 1f ff ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c00075e9:	ba 01 00 00 00       	mov    edx,0x1
c00075ee:	0f b7 c0             	movzx  eax,ax
c00075f1:	e8 d8 fd ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c00075f6:	a1 c0 de 02 c0       	mov    eax,ds:0xc002dec0
c00075fb:	83 c4 10             	add    esp,0x10
c00075fe:	40                   	inc    eax
c00075ff:	a3 c0 de 02 c0       	mov    ds:0xc002dec0,eax
c0007604:	83 f8 03             	cmp    eax,0x3
c0007607:	7e 09                	jle    c0007612 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c0007609:	83 c4 08             	add    esp,0x8
c000760c:	5b                   	pop    ebx
c000760d:	e9 ec fd ff ff       	jmp    c00073fe <KiFlushSymlinkChanges()>
c0007612:	83 c4 08             	add    esp,0x8
c0007615:	5b                   	pop    ebx
c0007616:	c3                   	ret    

c0007617 <KeInitialiseSymlinks()>:
c0007617:	57                   	push   edi
c0007618:	56                   	push   esi
c0007619:	53                   	push   ebx
c000761a:	81 ec 14 01 00 00    	sub    esp,0x114
c0007620:	68 00 20 00 00       	push   0x2000
c0007625:	6a 00                	push   0x0
c0007627:	68 00 e3 02 c0       	push   0xc002e300
c000762c:	c7 05 00 03 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030300,0x0
c0007636:	c7 05 c0 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dec0,0x0
c0007640:	e8 ab 8e ff ff       	call   c00004f0 <memset>
c0007645:	59                   	pop    ecx
c0007646:	5b                   	pop    ebx
c0007647:	6a 00                	push   0x0
c0007649:	68 03 75 00 c0       	push   0xc0007503
c000764e:	e8 cd 5a 00 00       	call   c000d120 <KeRegisterAtexit(void (*)(void*), void*)>
c0007653:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000765a:	e8 21 80 00 00       	call   c000f680 <malloc>
c000765f:	83 c4 0c             	add    esp,0xc
c0007662:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0007668:	68 9b 6d 02 c0       	push   0xc0026d9b
c000766d:	50                   	push   eax
c000766e:	89 c3                	mov    ebx,eax
c0007670:	e8 13 0b 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007675:	83 c4 10             	add    esp,0x10
c0007678:	85 db                	test   ebx,ebx
c000767a:	75 10                	jne    c000768c <KeInitialiseSymlinks()+0x75>
c000767c:	83 ec 0c             	sub    esp,0xc
c000767f:	68 2a 6e 02 c0       	push   0xc0026e2a
c0007684:	e8 4b 84 00 00       	call   c000fad4 <KePanic(char const*)>
c0007689:	83 c4 10             	add    esp,0x10
c000768c:	83 ec 0c             	sub    esp,0xc
c000768f:	53                   	push   ebx
c0007690:	e8 d5 0d 00 00       	call   c000846a <File::exists()>
c0007695:	83 c4 10             	add    esp,0x10
c0007698:	84 c0                	test   al,al
c000769a:	75 3a                	jne    c00076d6 <KeInitialiseSymlinks()+0xbf>
c000769c:	52                   	push   edx
c000769d:	52                   	push   edx
c000769e:	6a 12                	push   0x12
c00076a0:	53                   	push   ebx
c00076a1:	e8 00 0b 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076a6:	83 c4 10             	add    esp,0x10
c00076a9:	85 c0                	test   eax,eax
c00076ab:	74 10                	je     c00076bd <KeInitialiseSymlinks()+0xa6>
c00076ad:	83 ec 0c             	sub    esp,0xc
c00076b0:	68 47 6e 02 c0       	push   0xc0026e47
c00076b5:	e8 1a 84 00 00       	call   c000fad4 <KePanic(char const*)>
c00076ba:	83 c4 10             	add    esp,0x10
c00076bd:	83 ec 0c             	sub    esp,0xc
c00076c0:	53                   	push   ebx
c00076c1:	e8 3e 0b 00 00       	call   c0008204 <File::close()>
c00076c6:	83 c4 10             	add    esp,0x10
c00076c9:	85 db                	test   ebx,ebx
c00076cb:	0f 84 9e 00 00 00    	je     c000776f <KeInitialiseSymlinks()+0x158>
c00076d1:	e9 8d 00 00 00       	jmp    c0007763 <KeInitialiseSymlinks()+0x14c>
c00076d6:	50                   	push   eax
c00076d7:	50                   	push   eax
c00076d8:	6a 01                	push   0x1
c00076da:	53                   	push   ebx
c00076db:	e8 c6 0a 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c00076e0:	83 c4 10             	add    esp,0x10
c00076e3:	85 c0                	test   eax,eax
c00076e5:	74 10                	je     c00076f7 <KeInitialiseSymlinks()+0xe0>
c00076e7:	83 ec 0c             	sub    esp,0xc
c00076ea:	68 64 6e 02 c0       	push   0xc0026e64
c00076ef:	e8 e0 83 00 00       	call   c000fad4 <KePanic(char const*)>
c00076f4:	83 c4 10             	add    esp,0x10
c00076f7:	ff 05 00 03 03 c0    	inc    DWORD PTR ds:0xc0030300
c00076fd:	83 ec 0c             	sub    esp,0xc
c0007700:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0007704:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007706:	57                   	push   edi
c0007707:	8d 74 24 20          	lea    esi,[esp+0x20]
c000770b:	56                   	push   esi
c000770c:	6a 00                	push   0x0
c000770e:	68 00 01 00 00       	push   0x100
c0007713:	53                   	push   ebx
c0007714:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007717:	83 c4 20             	add    esp,0x20
c000771a:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007722:	75 33                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007724:	83 ec 0c             	sub    esp,0xc
c0007727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007729:	57                   	push   edi
c000772a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000772e:	52                   	push   edx
c000772f:	6a 00                	push   0x0
c0007731:	6a 08                	push   0x8
c0007733:	53                   	push   ebx
c0007734:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007737:	83 c4 20             	add    esp,0x20
c000773a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000773f:	75 16                	jne    c0007757 <KeInitialiseSymlinks()+0x140>
c0007741:	89 f0                	mov    eax,esi
c0007743:	e8 c0 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007748:	ba 01 00 00 00       	mov    edx,0x1
c000774d:	0f b7 c0             	movzx  eax,ax
c0007750:	e8 79 fc ff ff       	call   c00073ce <KiSetHashInTable(unsigned short, bool)>
c0007755:	eb a0                	jmp    c00076f7 <KeInitialiseSymlinks()+0xe0>
c0007757:	83 ec 0c             	sub    esp,0xc
c000775a:	53                   	push   ebx
c000775b:	e8 a4 0a 00 00       	call   c0008204 <File::close()>
c0007760:	83 c4 10             	add    esp,0x10
c0007763:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007765:	83 ec 0c             	sub    esp,0xc
c0007768:	53                   	push   ebx
c0007769:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	81 c4 10 01 00 00    	add    esp,0x110
c0007775:	5b                   	pop    ebx
c0007776:	5e                   	pop    esi
c0007777:	5f                   	pop    edi
c0007778:	c3                   	ret    

c0007779 <KiIsSymlinkRegistered(char const*)>:
c0007779:	55                   	push   ebp
c000777a:	57                   	push   edi
c000777b:	56                   	push   esi
c000777c:	53                   	push   ebx
c000777d:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007783:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000778a:	89 f0                	mov    eax,esi
c000778c:	e8 77 fd ff ff       	call   c0007508 <KiGetSymlinkHash(char const*)>
c0007791:	0f b7 c0             	movzx  eax,ax
c0007794:	e8 1b fc ff ff       	call   c00073b4 <KiIsHashInTable(unsigned short)>
c0007799:	31 d2                	xor    edx,edx
c000779b:	88 c1                	mov    cl,al
c000779d:	31 c0                	xor    eax,eax
c000779f:	84 c9                	test   cl,cl
c00077a1:	0f 84 31 01 00 00    	je     c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077a7:	31 db                	xor    ebx,ebx
c00077a9:	39 1d c0 de 02 c0    	cmp    DWORD PTR ds:0xc002dec0,ebx
c00077af:	7e 30                	jle    c00077e1 <KiIsSymlinkRegistered(char const*)+0x68>
c00077b1:	89 d8                	mov    eax,ebx
c00077b3:	c1 e0 08             	shl    eax,0x8
c00077b6:	51                   	push   ecx
c00077b7:	05 00 df 02 c0       	add    eax,0xc002df00
c00077bc:	51                   	push   ecx
c00077bd:	50                   	push   eax
c00077be:	56                   	push   esi
c00077bf:	e8 bc 8f ff ff       	call   c0000780 <strcmp>
c00077c4:	83 c4 10             	add    esp,0x10
c00077c7:	85 c0                	test   eax,eax
c00077c9:	75 13                	jne    c00077de <KiIsSymlinkRegistered(char const*)+0x65>
c00077cb:	8b 04 dd e0 de 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd2120]
c00077d2:	8b 14 dd e4 de 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd211c]
c00077d9:	e9 fa 00 00 00       	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00077de:	43                   	inc    ebx
c00077df:	eb c8                	jmp    c00077a9 <KiIsSymlinkRegistered(char const*)+0x30>
c00077e1:	83 ec 0c             	sub    esp,0xc
c00077e4:	68 14 01 00 00       	push   0x114
c00077e9:	e8 92 7e 00 00       	call   c000f680 <malloc>
c00077ee:	83 c4 0c             	add    esp,0xc
c00077f1:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c00077f7:	68 9b 6d 02 c0       	push   0xc0026d9b
c00077fc:	50                   	push   eax
c00077fd:	89 c3                	mov    ebx,eax
c00077ff:	e8 84 09 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007804:	83 c4 10             	add    esp,0x10
c0007807:	85 db                	test   ebx,ebx
c0007809:	75 12                	jne    c000781d <KiIsSymlinkRegistered(char const*)+0xa4>
c000780b:	83 ec 0c             	sub    esp,0xc
c000780e:	68 7f 6e 02 c0       	push   0xc0026e7f
c0007813:	e8 bc 82 00 00       	call   c000fad4 <KePanic(char const*)>
c0007818:	83 c4 10             	add    esp,0x10
c000781b:	eb 10                	jmp    c000782d <KiIsSymlinkRegistered(char const*)+0xb4>
c000781d:	83 ec 0c             	sub    esp,0xc
c0007820:	53                   	push   ebx
c0007821:	e8 44 0c 00 00       	call   c000846a <File::exists()>
c0007826:	83 c4 10             	add    esp,0x10
c0007829:	84 c0                	test   al,al
c000782b:	74 de                	je     c000780b <KiIsSymlinkRegistered(char const*)+0x92>
c000782d:	52                   	push   edx
c000782e:	52                   	push   edx
c000782f:	6a 01                	push   0x1
c0007831:	53                   	push   ebx
c0007832:	e8 6f 09 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007837:	83 c4 10             	add    esp,0x10
c000783a:	85 c0                	test   eax,eax
c000783c:	74 10                	je     c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c000783e:	83 ec 0c             	sub    esp,0xc
c0007841:	68 9a 6e 02 c0       	push   0xc0026e9a
c0007846:	e8 89 82 00 00       	call   c000fad4 <KePanic(char const*)>
c000784b:	83 c4 10             	add    esp,0x10
c000784e:	83 ec 0c             	sub    esp,0xc
c0007851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007853:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007857:	55                   	push   ebp
c0007858:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000785c:	57                   	push   edi
c000785d:	6a 00                	push   0x0
c000785f:	68 00 01 00 00       	push   0x100
c0007864:	53                   	push   ebx
c0007865:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007868:	83 c4 20             	add    esp,0x20
c000786b:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007873:	75 4b                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007875:	83 ec 0c             	sub    esp,0xc
c0007878:	8b 03                	mov    eax,DWORD PTR [ebx]
c000787a:	55                   	push   ebp
c000787b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000787f:	52                   	push   edx
c0007880:	6a 00                	push   0x0
c0007882:	6a 08                	push   0x8
c0007884:	53                   	push   ebx
c0007885:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007888:	83 c4 20             	add    esp,0x20
c000788b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007890:	75 2e                	jne    c00078c0 <KiIsSymlinkRegistered(char const*)+0x147>
c0007892:	50                   	push   eax
c0007893:	50                   	push   eax
c0007894:	57                   	push   edi
c0007895:	56                   	push   esi
c0007896:	e8 e5 8e ff ff       	call   c0000780 <strcmp>
c000789b:	83 c4 10             	add    esp,0x10
c000789e:	85 c0                	test   eax,eax
c00078a0:	75 ac                	jne    c000784e <KiIsSymlinkRegistered(char const*)+0xd5>
c00078a2:	83 ec 0c             	sub    esp,0xc
c00078a5:	53                   	push   ebx
c00078a6:	e8 59 09 00 00       	call   c0008204 <File::close()>
c00078ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bb:	83 c4 10             	add    esp,0x10
c00078be:	eb 18                	jmp    c00078d8 <KiIsSymlinkRegistered(char const*)+0x15f>
c00078c0:	83 ec 0c             	sub    esp,0xc
c00078c3:	53                   	push   ebx
c00078c4:	e8 3b 09 00 00       	call   c0008204 <File::close()>
c00078c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00078ce:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00078d1:	83 c4 10             	add    esp,0x10
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	31 d2                	xor    edx,edx
c00078d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00078de:	5b                   	pop    ebx
c00078df:	5e                   	pop    esi
c00078e0:	5f                   	pop    edi
c00078e1:	5d                   	pop    ebp
c00078e2:	c3                   	ret    

c00078e3 <KeDereferenceSymlink(char const*, char*)>:
c00078e3:	55                   	push   ebp
c00078e4:	57                   	push   edi
c00078e5:	56                   	push   esi
c00078e6:	53                   	push   ebx
c00078e7:	83 ec 48             	sub    esp,0x48
c00078ea:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ee:	56                   	push   esi
c00078ef:	e8 85 fe ff ff       	call   c0007779 <KiIsSymlinkRegistered(char const*)>
c00078f4:	83 c4 10             	add    esp,0x10
c00078f7:	89 c7                	mov    edi,eax
c00078f9:	89 d0                	mov    eax,edx
c00078fb:	09 f8                	or     eax,edi
c00078fd:	75 07                	jne    c0007906 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078ff:	31 c0                	xor    eax,eax
c0007901:	e9 7c 01 00 00       	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007906:	83 ec 0c             	sub    esp,0xc
c0007909:	89 d5                	mov    ebp,edx
c000790b:	68 14 01 00 00       	push   0x114
c0007910:	e8 6b 7d 00 00       	call   c000f680 <malloc>
c0007915:	83 c4 0c             	add    esp,0xc
c0007918:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000791e:	56                   	push   esi
c000791f:	50                   	push   eax
c0007920:	89 c3                	mov    ebx,eax
c0007922:	e8 61 08 00 00       	call   c0008188 <File::File(char const*, Process*)>
c0007927:	83 c4 10             	add    esp,0x10
c000792a:	85 db                	test   ebx,ebx
c000792c:	0f 84 32 01 00 00    	je     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007932:	56                   	push   esi
c0007933:	56                   	push   esi
c0007934:	6a 01                	push   0x1
c0007936:	53                   	push   ebx
c0007937:	e8 6a 08 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c000793c:	83 c4 10             	add    esp,0x10
c000793f:	85 c0                	test   eax,eax
c0007941:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007943:	74 09                	je     c000794e <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007945:	83 ec 0c             	sub    esp,0xc
c0007948:	53                   	push   ebx
c0007949:	e9 10 01 00 00       	jmp    c0007a5e <KeDereferenceSymlink(char const*, char*)+0x17b>
c000794e:	83 ec 0c             	sub    esp,0xc
c0007951:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007955:	56                   	push   esi
c0007956:	8d 54 24 37          	lea    edx,[esp+0x37]
c000795a:	52                   	push   edx
c000795b:	6a 00                	push   0x0
c000795d:	6a 08                	push   0x8
c000795f:	53                   	push   ebx
c0007960:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007963:	83 c4 20             	add    esp,0x20
c0007966:	85 c0                	test   eax,eax
c0007968:	0f 85 e2 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000796e:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007973:	0f 85 d7 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007979:	83 ec 0c             	sub    esp,0xc
c000797c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000797e:	56                   	push   esi
c000797f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007983:	52                   	push   edx
c0007984:	6a 00                	push   0x0
c0007986:	6a 08                	push   0x8
c0007988:	53                   	push   ebx
c0007989:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000798c:	83 c4 20             	add    esp,0x20
c000798f:	85 c0                	test   eax,eax
c0007991:	0f 85 b9 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007997:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000799c:	0f 85 ae 00 00 00    	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079a2:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c00079a6:	0f 85 53 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079ac:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c00079b0:	0f 85 49 ff ff ff    	jne    c00078ff <KeDereferenceSymlink(char const*, char*)+0x1c>
c00079b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00079be:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00079c6:	51                   	push   ecx
c00079c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00079cb:	50                   	push   eax
c00079cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00079d0:	50                   	push   eax
c00079d1:	53                   	push   ebx
c00079d2:	e8 d1 0a 00 00       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00079d7:	83 c4 10             	add    esp,0x10
c00079da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00079df:	75 6f                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079e5:	31 c9                	xor    ecx,ecx
c00079e7:	bf 0f 00 00 00       	mov    edi,0xf
c00079ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079f0:	39 c7                	cmp    edi,eax
c00079f2:	89 cf                	mov    edi,ecx
c00079f4:	19 d7                	sbb    edi,edx
c00079f6:	73 58                	jae    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f8:	83 c0 f0             	add    eax,0xfffffff0
c00079fb:	bf ff 00 00 00       	mov    edi,0xff
c0007a00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007a04:	83 d2 ff             	adc    edx,0xffffffff
c0007a07:	39 c7                	cmp    edi,eax
c0007a09:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007a0d:	19 d1                	sbb    ecx,edx
c0007a0f:	72 53                	jb     c0007a64 <KeDereferenceSymlink(char const*, char*)+0x181>
c0007a11:	40                   	inc    eax
c0007a12:	52                   	push   edx
c0007a13:	50                   	push   eax
c0007a14:	6a 00                	push   0x0
c0007a16:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0007a1a:	e8 d1 8a ff ff       	call   c00004f0 <memset>
c0007a1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a21:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0007a28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007a30:	53                   	push   ebx
c0007a31:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	75 15                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a3f:	89 c7                	mov    edi,eax
c0007a41:	c1 ff 1f             	sar    edi,0x1f
c0007a44:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a48:	75 06                	jne    c0007a50 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a4a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a4e:	74 19                	je     c0007a69 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a50:	83 ec 0c             	sub    esp,0xc
c0007a53:	53                   	push   ebx
c0007a54:	e8 ab 07 00 00       	call   c0008204 <File::close()>
c0007a59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a61:	83 c4 10             	add    esp,0x10
c0007a64:	83 c8 ff             	or     eax,0xffffffff
c0007a67:	eb 19                	jmp    c0007a82 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a69:	83 ec 0c             	sub    esp,0xc
c0007a6c:	53                   	push   ebx
c0007a6d:	e8 92 07 00 00       	call   c0008204 <File::close()>
c0007a72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a77:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a7a:	83 c4 10             	add    esp,0x10
c0007a7d:	b8 01 00 00 00       	mov    eax,0x1
c0007a82:	83 c4 3c             	add    esp,0x3c
c0007a85:	5b                   	pop    ebx
c0007a86:	5e                   	pop    esi
c0007a87:	5f                   	pop    edi
c0007a88:	5d                   	pop    ebp
c0007a89:	c3                   	ret    

c0007a8a <KeCreateSymlink(char const*, char const*)>:
c0007a8a:	55                   	push   ebp
c0007a8b:	57                   	push   edi
c0007a8c:	56                   	push   esi
c0007a8d:	53                   	push   ebx
c0007a8e:	83 ec 38             	sub    esp,0x38
c0007a91:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a95:	68 14 01 00 00       	push   0x114
c0007a9a:	e8 e1 7b 00 00       	call   c000f680 <malloc>
c0007a9f:	6a 00                	push   0x0
c0007aa1:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0007aa7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007aab:	89 c3                	mov    ebx,eax
c0007aad:	50                   	push   eax
c0007aae:	e8 d7 05 00 00       	call   c000808a <File::File(char const*, Process*, bool)>
c0007ab3:	83 c4 20             	add    esp,0x20
c0007ab6:	85 db                	test   ebx,ebx
c0007ab8:	b8 01 00 00 00       	mov    eax,0x1
c0007abd:	0f 84 fb 00 00 00    	je     c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ac3:	52                   	push   edx
c0007ac4:	52                   	push   edx
c0007ac5:	6a 12                	push   0x12
c0007ac7:	53                   	push   ebx
c0007ac8:	e8 d9 06 00 00       	call   c00081a6 <File::open(FileOpenMode)>
c0007acd:	83 c4 10             	add    esp,0x10
c0007ad0:	85 c0                	test   eax,eax
c0007ad2:	74 0b                	je     c0007adf <KeCreateSymlink(char const*, char const*)+0x55>
c0007ad4:	83 ec 0c             	sub    esp,0xc
c0007ad7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad9:	53                   	push   ebx
c0007ada:	e9 d4 00 00 00       	jmp    c0007bb3 <KeCreateSymlink(char const*, char const*)+0x129>
c0007adf:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007ae3:	be b5 6e 02 c0       	mov    esi,0xc0026eb5
c0007ae8:	b9 09 00 00 00       	mov    ecx,0x9
c0007aed:	fc                   	cld    
c0007aee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007af0:	83 ec 0c             	sub    esp,0xc
c0007af3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007af7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af9:	56                   	push   esi
c0007afa:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007afe:	52                   	push   edx
c0007aff:	6a 00                	push   0x0
c0007b01:	6a 08                	push   0x8
c0007b03:	53                   	push   ebx
c0007b04:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b07:	83 c4 20             	add    esp,0x20
c0007b0a:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b0f:	0f 85 90 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b15:	85 c0                	test   eax,eax
c0007b17:	0f 85 88 00 00 00    	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1d:	e8 07 fa ff ff       	call   c0007529 <KiCreateSymlinkID()>
c0007b22:	83 ec 0c             	sub    esp,0xc
c0007b25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007b29:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007b2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b2f:	56                   	push   esi
c0007b30:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007b34:	52                   	push   edx
c0007b35:	6a 00                	push   0x0
c0007b37:	6a 08                	push   0x8
c0007b39:	53                   	push   ebx
c0007b3a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007b3d:	83 c4 20             	add    esp,0x20
c0007b40:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b45:	75 5e                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b47:	85 c0                	test   eax,eax
c0007b49:	75 5a                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b4d:	83 ec 0c             	sub    esp,0xc
c0007b50:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b53:	55                   	push   ebp
c0007b54:	e8 27 8a ff ff       	call   c0000580 <strlen>
c0007b59:	31 d2                	xor    edx,edx
c0007b5b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b5e:	55                   	push   ebp
c0007b5f:	52                   	push   edx
c0007b60:	50                   	push   eax
c0007b61:	53                   	push   ebx
c0007b62:	ff d7                	call   edi
c0007b64:	83 c4 14             	add    esp,0x14
c0007b67:	55                   	push   ebp
c0007b68:	89 c6                	mov    esi,eax
c0007b6a:	e8 11 8a ff ff       	call   c0000580 <strlen>
c0007b6f:	83 c4 10             	add    esp,0x10
c0007b72:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b76:	75 2d                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b78:	85 f6                	test   esi,esi
c0007b7a:	75 29                	jne    c0007ba5 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b7c:	50                   	push   eax
c0007b7d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b85:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b89:	e8 06 fa ff ff       	call   c0007594 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b91:	e8 6e 06 00 00       	call   c0008204 <File::close()>
c0007b96:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b9e:	83 c4 10             	add    esp,0x10
c0007ba1:	31 c0                	xor    eax,eax
c0007ba3:	eb 19                	jmp    c0007bbe <KeCreateSymlink(char const*, char const*)+0x134>
c0007ba5:	83 ec 0c             	sub    esp,0xc
c0007ba8:	53                   	push   ebx
c0007ba9:	e8 56 06 00 00       	call   c0008204 <File::close()>
c0007bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007bb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007bb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007bb6:	83 c4 10             	add    esp,0x10
c0007bb9:	b8 01 00 00 00       	mov    eax,0x1
c0007bbe:	83 c4 2c             	add    esp,0x2c
c0007bc1:	5b                   	pop    ebx
c0007bc2:	5e                   	pop    esi
c0007bc3:	5f                   	pop    edi
c0007bc4:	5d                   	pop    ebp
c0007bc5:	c3                   	ret    

c0007bc6 <File::read(unsigned long long, void*, int*)>:
c0007bc6:	53                   	push   ebx
c0007bc7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bcb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd6:	83 f8 19             	cmp    eax,0x19
c0007bd9:	77 35                	ja     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bdb:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0007be2:	85 c0                	test   eax,eax
c0007be4:	74 2a                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007be6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007bec:	85 c0                	test   eax,eax
c0007bee:	74 20                	je     c0007c10 <File::read(unsigned long long, void*, int*)+0x4a>
c0007bf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf4:	74 21                	je     c0007c17 <File::read(unsigned long long, void*, int*)+0x51>
c0007bf6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bfc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c0a:	5b                   	pop    ebx
c0007c0b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007c0e:	ff e0                	jmp    eax
c0007c10:	b8 0b 00 00 00       	mov    eax,0xb
c0007c15:	eb 05                	jmp    c0007c1c <File::read(unsigned long long, void*, int*)+0x56>
c0007c17:	b8 05 00 00 00       	mov    eax,0x5
c0007c1c:	5b                   	pop    ebx
c0007c1d:	c3                   	ret    

c0007c1e <File::write(unsigned long long, void*, int*)>:
c0007c1e:	53                   	push   ebx
c0007c1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c27:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2e:	83 f8 19             	cmp    eax,0x19
c0007c31:	77 35                	ja     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c33:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0007c3a:	85 c0                	test   eax,eax
c0007c3c:	74 2a                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c3e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c44:	85 c0                	test   eax,eax
c0007c46:	74 20                	je     c0007c68 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c48:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c4c:	74 21                	je     c0007c6f <File::write(unsigned long long, void*, int*)+0x51>
c0007c4e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c50:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c54:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c62:	5b                   	pop    ebx
c0007c63:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c66:	ff e0                	jmp    eax
c0007c68:	b8 0b 00 00 00       	mov    eax,0xb
c0007c6d:	eb 05                	jmp    c0007c74 <File::write(unsigned long long, void*, int*)+0x56>
c0007c6f:	b8 05 00 00 00       	mov    eax,0x5
c0007c74:	5b                   	pop    ebx
c0007c75:	c3                   	ret    

c0007c76 <Directory::read(unsigned long long, void*, int*)>:
c0007c76:	53                   	push   ebx
c0007c77:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c7b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c7f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c86:	83 f8 19             	cmp    eax,0x19
c0007c89:	77 35                	ja     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c8b:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0007c92:	85 c0                	test   eax,eax
c0007c94:	74 2a                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c96:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c9c:	85 c0                	test   eax,eax
c0007c9e:	74 20                	je     c0007cc0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007ca0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007ca4:	74 21                	je     c0007cc7 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007ca6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007ca8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007cac:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007cb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007cb6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007cba:	5b                   	pop    ebx
c0007cbb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007cbe:	ff e0                	jmp    eax
c0007cc0:	b8 0b 00 00 00       	mov    eax,0xb
c0007cc5:	eb 05                	jmp    c0007ccc <Directory::read(unsigned long long, void*, int*)+0x56>
c0007cc7:	b8 05 00 00 00       	mov    eax,0x5
c0007ccc:	5b                   	pop    ebx
c0007ccd:	c3                   	ret    

c0007cce <Directory::write(unsigned long long, void*, int*)>:
c0007cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007cd9:	b8 0b 00 00 00       	mov    eax,0xb
c0007cde:	83 fa 19             	cmp    edx,0x19
c0007ce1:	77 18                	ja     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ce3:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c0007cea:	85 d2                	test   edx,edx
c0007cec:	74 0d                	je     c0007cfb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cee:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cf5:	19 c0                	sbb    eax,eax
c0007cf7:	83 e0 0a             	and    eax,0xa
c0007cfa:	40                   	inc    eax
c0007cfb:	c3                   	ret    

c0007cfc <File::isAtty()>:
c0007cfc:	31 c0                	xor    eax,eax
c0007cfe:	c3                   	ret    
c0007cff:	90                   	nop

c0007d00 <Directory::isAtty()>:
c0007d00:	31 c0                	xor    eax,eax
c0007d02:	c3                   	ret    
c0007d03:	90                   	nop

c0007d04 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007d04:	b8 0a 00 00 00       	mov    eax,0xa
c0007d09:	c3                   	ret    

c0007d0a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007d0a:	b8 0a 00 00 00       	mov    eax,0xa
c0007d0f:	c3                   	ret    

c0007d10 <Filesystem::allocateSwapfile(char const*, int)>:
c0007d10:	31 c0                	xor    eax,eax
c0007d12:	31 d2                	xor    edx,edx
c0007d14:	c3                   	ret    
c0007d15:	90                   	nop

c0007d16 <File::~File()>:
c0007d16:	83 ec 0c             	sub    esp,0xc
c0007d19:	ba 8c 6f 02 c0       	mov    edx,0xc0026f8c
c0007d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d22:	89 10                	mov    DWORD PTR [eax],edx
c0007d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d28:	83 ec 0c             	sub    esp,0xc
c0007d2b:	50                   	push   eax
c0007d2c:	e8 7d b0 00 00       	call   c0012dae <UnixFile::~UnixFile()>
c0007d31:	83 c4 10             	add    esp,0x10
c0007d34:	90                   	nop
c0007d35:	83 c4 0c             	add    esp,0xc
c0007d38:	c3                   	ret    
c0007d39:	90                   	nop

c0007d3a <File::~File()>:
c0007d3a:	83 ec 0c             	sub    esp,0xc
c0007d3d:	83 ec 0c             	sub    esp,0xc
c0007d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d44:	e8 cd ff ff ff       	call   c0007d16 <File::~File()>
c0007d49:	83 c4 10             	add    esp,0x10
c0007d4c:	83 ec 08             	sub    esp,0x8
c0007d4f:	68 14 01 00 00       	push   0x114
c0007d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d58:	e8 2b 55 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c0007d5d:	83 c4 10             	add    esp,0x10
c0007d60:	83 c4 0c             	add    esp,0xc
c0007d63:	c3                   	ret    

c0007d64 <Directory::~Directory()>:
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	ba a8 6f 02 c0       	mov    edx,0xc0026fa8
c0007d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d70:	89 10                	mov    DWORD PTR [eax],edx
c0007d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d76:	83 ec 0c             	sub    esp,0xc
c0007d79:	50                   	push   eax
c0007d7a:	e8 2f b0 00 00       	call   c0012dae <UnixFile::~UnixFile()>
c0007d7f:	83 c4 10             	add    esp,0x10
c0007d82:	90                   	nop
c0007d83:	83 c4 0c             	add    esp,0xc
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Directory::~Directory()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	83 ec 0c             	sub    esp,0xc
c0007d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d92:	e8 cd ff ff ff       	call   c0007d64 <Directory::~Directory()>
c0007d97:	83 c4 10             	add    esp,0x10
c0007d9a:	83 ec 08             	sub    esp,0x8
c0007d9d:	68 14 01 00 00       	push   0x114
c0007da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da6:	e8 dd 54 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	83 c4 0c             	add    esp,0xc
c0007db1:	c3                   	ret    

c0007db2 <Filesystem::Filesystem()>:
c0007db2:	ba 20 6f 02 c0       	mov    edx,0xc0026f20
c0007db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbb:	89 10                	mov    DWORD PTR [eax],edx
c0007dbd:	8b 15 04 03 03 c0    	mov    edx,DWORD PTR ds:0xc0030304
c0007dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dc7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dce:	a3 04 03 03 c0       	mov    ds:0xc0030304,eax
c0007dd3:	90                   	nop
c0007dd4:	c3                   	ret    
c0007dd5:	90                   	nop

c0007dd6 <Filesystem::~Filesystem()>:
c0007dd6:	ba 20 6f 02 c0       	mov    edx,0xc0026f20
c0007ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ddf:	89 10                	mov    DWORD PTR [eax],edx
c0007de1:	90                   	nop
c0007de2:	c3                   	ret    
c0007de3:	90                   	nop

c0007de4 <Filesystem::~Filesystem()>:
c0007de4:	83 ec 0c             	sub    esp,0xc
c0007de7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007deb:	e8 e6 ff ff ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c0007df0:	83 c4 04             	add    esp,0x4
c0007df3:	83 ec 08             	sub    esp,0x8
c0007df6:	6a 08                	push   0x8
c0007df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dfc:	e8 87 54 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c0007e01:	83 c4 10             	add    esp,0x10
c0007e04:	83 c4 0c             	add    esp,0xc
c0007e07:	c3                   	ret    

c0007e08 <Fs::getcwd(Process*, char*, int)>:
c0007e08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e0c:	31 c0                	xor    eax,eax
c0007e0e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007e12:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007e15:	7d 15                	jge    c0007e2c <Fs::getcwd(Process*, char*, int)+0x24>
c0007e17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007e1b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007e22:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007e25:	84 c9                	test   cl,cl
c0007e27:	74 06                	je     c0007e2f <Fs::getcwd(Process*, char*, int)+0x27>
c0007e29:	40                   	inc    eax
c0007e2a:	eb e2                	jmp    c0007e0e <Fs::getcwd(Process*, char*, int)+0x6>
c0007e2c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007e2f:	31 c0                	xor    eax,eax
c0007e31:	c3                   	ret    

c0007e32 <Fs::initVFS()>:
c0007e32:	83 ec 18             	sub    esp,0x18
c0007e35:	6a 08                	push   0x8
c0007e37:	e8 44 78 00 00       	call   c000f680 <malloc>
c0007e3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e3f:	e8 68 49 01 00       	call   c001c7ac <FAT::FAT()>
c0007e44:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e4b:	e8 30 78 00 00       	call   c000f680 <malloc>
c0007e50:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e53:	e8 82 58 01 00       	call   c001d6da <ISO9660::ISO9660()>
c0007e58:	83 c4 1c             	add    esp,0x1c
c0007e5b:	c3                   	ret    

c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e5c:	55                   	push   ebp
c0007e5d:	57                   	push   edi
c0007e5e:	56                   	push   esi
c0007e5f:	53                   	push   ebx
c0007e60:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e66:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e6d:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e74:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e7b:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e82:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e86:	68 00 04 00 00       	push   0x400
c0007e8b:	6a 00                	push   0x0
c0007e8d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e91:	57                   	push   edi
c0007e92:	e8 59 86 ff ff       	call   c00004f0 <memset>
c0007e97:	83 c4 10             	add    esp,0x10
c0007e9a:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e9e:	75 0b                	jne    c0007eab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007ea0:	50                   	push   eax
c0007ea1:	50                   	push   eax
c0007ea2:	56                   	push   esi
c0007ea3:	57                   	push   edi
c0007ea4:	e8 a7 87 ff ff       	call   c0000650 <strcpy>
c0007ea9:	eb 45                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007eab:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007eae:	83 f8 2f             	cmp    eax,0x2f
c0007eb1:	74 05                	je     c0007eb8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007eb3:	83 f8 5c             	cmp    eax,0x5c
c0007eb6:	75 19                	jne    c0007ed1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007eb8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007ebb:	3c 60                	cmp    al,0x60
c0007ebd:	7e 03                	jle    c0007ec2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007ebf:	83 e8 20             	sub    eax,0x20
c0007ec2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ec6:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007ecd:	50                   	push   eax
c0007ece:	50                   	push   eax
c0007ecf:	eb 18                	jmp    c0007ee9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007ed1:	50                   	push   eax
c0007ed2:	50                   	push   eax
c0007ed3:	55                   	push   ebp
c0007ed4:	57                   	push   edi
c0007ed5:	e8 76 87 ff ff       	call   c0000650 <strcpy>
c0007eda:	58                   	pop    eax
c0007edb:	5a                   	pop    edx
c0007edc:	68 ce 88 02 c0       	push   0xc00288ce
c0007ee1:	57                   	push   edi
c0007ee2:	e8 89 89 ff ff       	call   c0000870 <strcat>
c0007ee7:	59                   	pop    ecx
c0007ee8:	5d                   	pop    ebp
c0007ee9:	56                   	push   esi
c0007eea:	57                   	push   edi
c0007eeb:	e8 80 89 ff ff       	call   c0000870 <strcat>
c0007ef0:	83 c4 10             	add    esp,0x10
c0007ef3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007ef7:	3c 60                	cmp    al,0x60
c0007ef9:	7e 03                	jle    c0007efe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007efb:	83 e8 20             	sub    eax,0x20
c0007efe:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007f02:	be 03 00 00 00       	mov    esi,0x3
c0007f07:	88 03                	mov    BYTE PTR [ebx],al
c0007f09:	b8 03 00 00 00       	mov    eax,0x3
c0007f0e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007f15:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007f1b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007f1f:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007f24:	89 fa                	mov    edx,edi
c0007f26:	0f be ea             	movsx  ebp,dl
c0007f29:	85 ed                	test   ebp,ebp
c0007f2b:	0f 84 a1 00 00 00    	je     c0007fd2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007f31:	8d 56 01             	lea    edx,[esi+0x1]
c0007f34:	83 fd 2f             	cmp    ebp,0x2f
c0007f37:	74 05                	je     c0007f3e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007f39:	83 fd 5c             	cmp    ebp,0x5c
c0007f3c:	75 12                	jne    c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f3e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f43:	89 c5                	mov    ebp,eax
c0007f45:	74 09                	je     c0007f50 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007f47:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007f4b:	40                   	inc    eax
c0007f4c:	89 d6                	mov    esi,edx
c0007f4e:	eb cf                	jmp    c0007f1f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f50:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007f55:	89 f9                	mov    ecx,edi
c0007f57:	0f be e9             	movsx  ebp,cl
c0007f5a:	75 61                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f5c:	83 fd 2e             	cmp    ebp,0x2e
c0007f5f:	75 5c                	jne    c0007fbd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f61:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f66:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f6b:	74 19                	je     c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f6d:	83 fd 2e             	cmp    ebp,0x2e
c0007f70:	74 55                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f72:	89 f2                	mov    edx,esi
c0007f74:	42                   	inc    edx
c0007f75:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f7a:	83 f9 2f             	cmp    ecx,0x2f
c0007f7d:	74 f5                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f7f:	83 f9 5c             	cmp    ecx,0x5c
c0007f82:	74 f0                	je     c0007f74 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f84:	eb c6                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f86:	83 fd 2e             	cmp    ebp,0x2e
c0007f89:	74 3c                	je     c0007fc7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f8b:	83 f8 03             	cmp    eax,0x3
c0007f8e:	74 bc                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f90:	42                   	inc    edx
c0007f91:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f96:	83 f9 2f             	cmp    ecx,0x2f
c0007f99:	74 f5                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f9b:	83 f9 5c             	cmp    ecx,0x5c
c0007f9e:	74 f0                	je     c0007f90 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007fa0:	48                   	dec    eax
c0007fa1:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fa5:	75 06                	jne    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fa7:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fab:	eb f3                	jmp    c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007fad:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007fb1:	74 07                	je     c0007fba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007fb3:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fb7:	48                   	dec    eax
c0007fb8:	eb f3                	jmp    c0007fad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007fba:	40                   	inc    eax
c0007fbb:	eb 8f                	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fbd:	83 fd 2f             	cmp    ebp,0x2f
c0007fc0:	74 8a                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc2:	83 fd 5c             	cmp    ebp,0x5c
c0007fc5:	74 85                	je     c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fc7:	89 f9                	mov    ecx,edi
c0007fc9:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007fcc:	40                   	inc    eax
c0007fcd:	e9 7a ff ff ff       	jmp    c0007f4c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007fd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007fd6:	83 ec 0c             	sub    esp,0xc
c0007fd9:	53                   	push   ebx
c0007fda:	e8 a1 85 ff ff       	call   c0000580 <strlen>
c0007fdf:	83 c4 10             	add    esp,0x10
c0007fe2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007fe7:	74 1c                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fe9:	83 ec 0c             	sub    esp,0xc
c0007fec:	53                   	push   ebx
c0007fed:	e8 8e 85 ff ff       	call   c0000580 <strlen>
c0007ff2:	83 c4 10             	add    esp,0x10
c0007ff5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ffa:	74 09                	je     c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007ffc:	31 ff                	xor    edi,edi
c0007ffe:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0008003:	eb 5c                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008005:	83 ec 0c             	sub    esp,0xc
c0008008:	53                   	push   ebx
c0008009:	e8 72 85 ff ff       	call   c0000580 <strlen>
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0008016:	74 e4                	je     c0007ffc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0008018:	83 ec 0c             	sub    esp,0xc
c000801b:	53                   	push   ebx
c000801c:	e8 5f 85 ff ff       	call   c0000580 <strlen>
c0008021:	83 c4 10             	add    esp,0x10
c0008024:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0008029:	eb ab                	jmp    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c000802b:	52                   	push   edx
c000802c:	52                   	push   edx
c000802d:	53                   	push   ebx
c000802e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0008032:	55                   	push   ebp
c0008033:	e8 18 86 ff ff       	call   c0000650 <strcpy>
c0008038:	59                   	pop    ecx
c0008039:	58                   	pop    eax
c000803a:	53                   	push   ebx
c000803b:	55                   	push   ebp
c000803c:	e8 a2 f8 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0008041:	83 c4 10             	add    esp,0x10
c0008044:	48                   	dec    eax
c0008045:	75 37                	jne    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008047:	50                   	push   eax
c0008048:	53                   	push   ebx
c0008049:	55                   	push   ebp
c000804a:	68 be 6e 02 c0       	push   0xc0026ebe
c000804f:	e8 12 ef ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008054:	8d 47 01             	lea    eax,[edi+0x1]
c0008057:	83 c4 10             	add    esp,0x10
c000805a:	83 ff 14             	cmp    edi,0x14
c000805d:	74 08                	je     c0008067 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c000805f:	89 c7                	mov    edi,eax
c0008061:	85 f6                	test   esi,esi
c0008063:	75 c6                	jne    c000802b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008065:	eb 17                	jmp    c000807e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0008067:	83 ec 0c             	sub    esp,0xc
c000806a:	bf 15 00 00 00       	mov    edi,0x15
c000806f:	68 d9 6e 02 c0       	push   0xc0026ed9
c0008074:	e8 5b 7a 00 00       	call   c000fad4 <KePanic(char const*)>
c0008079:	83 c4 10             	add    esp,0x10
c000807c:	eb e3                	jmp    c0008061 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c000807e:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008084:	5b                   	pop    ebx
c0008085:	5e                   	pop    esi
c0008086:	5f                   	pop    edi
c0008087:	5d                   	pop    ebp
c0008088:	c3                   	ret    
c0008089:	90                   	nop

c000808a <File::File(char const*, Process*, bool)>:
c000808a:	83 ec 1c             	sub    esp,0x1c
c000808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008091:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008099:	83 ec 08             	sub    esp,0x8
c000809c:	6a 00                	push   0x0
c000809e:	50                   	push   eax
c000809f:	e8 24 ab 00 00       	call   c0012bc8 <UnixFile::UnixFile(int)>
c00080a4:	83 c4 10             	add    esp,0x10
c00080a7:	ba 8c 6f 02 c0       	mov    edx,0xc0026f8c
c00080ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b0:	89 10                	mov    DWORD PTR [eax],edx
c00080b2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00080b7:	85 c0                	test   eax,eax
c00080b9:	74 0f                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080bb:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c00080c0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c00080c4:	74 04                	je     c00080ca <File::File(char const*, Process*, bool)+0x40>
c00080c6:	b0 01                	mov    al,0x1
c00080c8:	eb 02                	jmp    c00080cc <File::File(char const*, Process*, bool)+0x42>
c00080ca:	b0 00                	mov    al,0x0
c00080cc:	0f b6 c0             	movzx  eax,al
c00080cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080d3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00080d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080dd:	83 c2 0d             	add    edx,0xd
c00080e0:	50                   	push   eax
c00080e1:	51                   	push   ecx
c00080e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00080e6:	52                   	push   edx
c00080e7:	e8 70 fd ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00080ec:	83 c4 10             	add    esp,0x10
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080fa:	83 c2 0d             	add    edx,0xd
c00080fd:	83 ec 04             	sub    esp,0x4
c0008100:	50                   	push   eax
c0008101:	52                   	push   edx
c0008102:	68 ff 6e 02 c0       	push   0xc0026eff
c0008107:	e8 5a ee ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008113:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008116:	83 e8 41             	sub    eax,0x41
c0008119:	88 c2                	mov    dl,al
c000811b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000811f:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008129:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000812d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008131:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008137:	0f b6 c0             	movzx  eax,al
c000813a:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0008141:	85 c0                	test   eax,eax
c0008143:	74 3e                	je     c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008149:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000814f:	0f b6 c0             	movzx  eax,al
c0008152:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0008159:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000815f:	85 c0                	test   eax,eax
c0008161:	75 20                	jne    c0008183 <File::File(char const*, Process*, bool)+0xf9>
c0008163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008167:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000816d:	0f b6 c0             	movzx  eax,al
c0008170:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0008177:	83 ec 0c             	sub    esp,0xc
c000817a:	50                   	push   eax
c000817b:	e8 d4 27 00 00       	call   c000a954 <LogicalDisk::mount()>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	90                   	nop
c0008184:	83 c4 1c             	add    esp,0x1c
c0008187:	c3                   	ret    

c0008188 <File::File(char const*, Process*)>:
c0008188:	83 ec 0c             	sub    esp,0xc
c000818b:	6a 01                	push   0x1
c000818d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 ec fe ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <File::open(FileOpenMode)>:
c00081a6:	53                   	push   ebx
c00081a7:	b8 0b 00 00 00       	mov    eax,0xb
c00081ac:	83 ec 08             	sub    esp,0x8
c00081af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00081b3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00081ba:	83 fa 19             	cmp    edx,0x19
c00081bd:	77 40                	ja     c00081ff <File::open(FileOpenMode)+0x59>
c00081bf:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c00081c6:	85 d2                	test   edx,edx
c00081c8:	74 35                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081ca:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00081d0:	85 d2                	test   edx,edx
c00081d2:	74 2b                	je     c00081ff <File::open(FileOpenMode)+0x59>
c00081d4:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00081d8:	b8 06 00 00 00       	mov    eax,0x6
c00081dd:	75 20                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081df:	8b 02                	mov    eax,DWORD PTR [edx]
c00081e1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00081e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00081eb:	51                   	push   ecx
c00081ec:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00081ef:	51                   	push   ecx
c00081f0:	52                   	push   edx
c00081f1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00081f4:	83 c4 10             	add    esp,0x10
c00081f7:	85 c0                	test   eax,eax
c00081f9:	75 04                	jne    c00081ff <File::open(FileOpenMode)+0x59>
c00081fb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081ff:	83 c4 08             	add    esp,0x8
c0008202:	5b                   	pop    ebx
c0008203:	c3                   	ret    

c0008204 <File::close()>:
c0008204:	53                   	push   ebx
c0008205:	b8 0b 00 00 00       	mov    eax,0xb
c000820a:	83 ec 08             	sub    esp,0x8
c000820d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008211:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008218:	83 f9 19             	cmp    ecx,0x19
c000821b:	77 41                	ja     c000825e <File::close()+0x5a>
c000821d:	8b 1c 8d e0 0a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcf520]
c0008224:	85 db                	test   ebx,ebx
c0008226:	74 36                	je     c000825e <File::close()+0x5a>
c0008228:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000822f:	74 2d                	je     c000825e <File::close()+0x5a>
c0008231:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008235:	b8 05 00 00 00       	mov    eax,0x5
c000823a:	74 22                	je     c000825e <File::close()+0x5a>
c000823c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008240:	8b 04 8d e0 0a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcf520]
c0008247:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000824d:	53                   	push   ebx
c000824e:	53                   	push   ebx
c000824f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008251:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008257:	50                   	push   eax
c0008258:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000825b:	83 c4 10             	add    esp,0x10
c000825e:	83 c4 08             	add    esp,0x8
c0008261:	5b                   	pop    ebx
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::seek(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	b8 0b 00 00 00       	mov    eax,0xb
c000826a:	53                   	push   ebx
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008278:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::seek(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c0008299:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000829d:	b8 05 00 00 00       	mov    eax,0x5
c00082a2:	74 11                	je     c00082b5 <File::seek(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::truncate(unsigned long long)>:
c00082ba:	56                   	push   esi
c00082bb:	b8 0b 00 00 00       	mov    eax,0xb
c00082c0:	53                   	push   ebx
c00082c1:	51                   	push   ecx
c00082c2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00082c6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00082ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00082ce:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00082d5:	83 fa 19             	cmp    edx,0x19
c00082d8:	77 31                	ja     c000830b <File::truncate(unsigned long long)+0x51>
c00082da:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c00082e1:	85 d2                	test   edx,edx
c00082e3:	74 26                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082e5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082eb:	85 d2                	test   edx,edx
c00082ed:	74 1c                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082f3:	b8 05 00 00 00       	mov    eax,0x5
c00082f8:	74 11                	je     c000830b <File::truncate(unsigned long long)+0x51>
c00082fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00082fc:	53                   	push   ebx
c00082fd:	51                   	push   ecx
c00082fe:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008304:	52                   	push   edx
c0008305:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008308:	83 c4 10             	add    esp,0x10
c000830b:	5a                   	pop    edx
c000830c:	5b                   	pop    ebx
c000830d:	5e                   	pop    esi
c000830e:	c3                   	ret    
c000830f:	90                   	nop

c0008310 <File::tell(unsigned long long*)>:
c0008310:	83 ec 0c             	sub    esp,0xc
c0008313:	b8 0b 00 00 00       	mov    eax,0xb
c0008318:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000831c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0008323:	83 fa 19             	cmp    edx,0x19
c0008326:	77 34                	ja     c000835c <File::tell(unsigned long long*)+0x4c>
c0008328:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c000832f:	85 d2                	test   edx,edx
c0008331:	74 29                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008333:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008339:	85 d2                	test   edx,edx
c000833b:	74 1f                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c000833d:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0008341:	b8 05 00 00 00       	mov    eax,0x5
c0008346:	74 14                	je     c000835c <File::tell(unsigned long long*)+0x4c>
c0008348:	50                   	push   eax
c0008349:	8b 02                	mov    eax,DWORD PTR [edx]
c000834b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000834f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0008355:	52                   	push   edx
c0008356:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008359:	83 c4 10             	add    esp,0x10
c000835c:	83 c4 0c             	add    esp,0xc
c000835f:	c3                   	ret    

c0008360 <File::rewind()>:
c0008360:	83 ec 10             	sub    esp,0x10
c0008363:	6a 00                	push   0x0
c0008365:	6a 00                	push   0x0
c0008367:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000836b:	e8 f4 fe ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0008370:	83 c4 1c             	add    esp,0x1c
c0008373:	c3                   	ret    

c0008374 <File::unlink()>:
c0008374:	83 ec 0c             	sub    esp,0xc
c0008377:	b8 0b 00 00 00       	mov    eax,0xb
c000837c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008380:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008387:	83 f9 19             	cmp    ecx,0x19
c000838a:	77 2f                	ja     c00083bb <File::unlink()+0x47>
c000838c:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 24                	je     c00083bb <File::unlink()+0x47>
c0008397:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000839d:	85 c9                	test   ecx,ecx
c000839f:	74 1a                	je     c00083bb <File::unlink()+0x47>
c00083a1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a5:	b8 06 00 00 00       	mov    eax,0x6
c00083aa:	75 0f                	jne    c00083bb <File::unlink()+0x47>
c00083ac:	50                   	push   eax
c00083ad:	83 c2 0d             	add    edx,0xd
c00083b0:	50                   	push   eax
c00083b1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083b3:	52                   	push   edx
c00083b4:	51                   	push   ecx
c00083b5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00083b8:	83 c4 10             	add    esp,0x10
c00083bb:	83 c4 0c             	add    esp,0xc
c00083be:	c3                   	ret    
c00083bf:	90                   	nop

c00083c0 <File::rename(char const*)>:
c00083c0:	83 ec 0c             	sub    esp,0xc
c00083c3:	b8 0b 00 00 00       	mov    eax,0xb
c00083c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 32                	ja     c000840a <File::rename(char const*)+0x4a>
c00083d8:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 27                	je     c000840a <File::rename(char const*)+0x4a>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 1d                	je     c000840a <File::rename(char const*)+0x4a>
c00083ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f1:	b8 06 00 00 00       	mov    eax,0x6
c00083f6:	75 12                	jne    c000840a <File::rename(char const*)+0x4a>
c00083f8:	50                   	push   eax
c00083f9:	83 c2 0d             	add    edx,0xd
c00083fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008402:	52                   	push   edx
c0008403:	51                   	push   ecx
c0008404:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008407:	83 c4 10             	add    esp,0x10
c000840a:	83 c4 0c             	add    esp,0xc
c000840d:	c3                   	ret    

c000840e <File::chfatattr(unsigned char, unsigned char)>:
c000840e:	57                   	push   edi
c000840f:	b8 0b 00 00 00       	mov    eax,0xb
c0008414:	56                   	push   esi
c0008415:	53                   	push   ebx
c0008416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000841e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008422:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008429:	83 f9 19             	cmp    ecx,0x19
c000842c:	77 37                	ja     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000842e:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008435:	85 c9                	test   ecx,ecx
c0008437:	74 2c                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008439:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843f:	85 c9                	test   ecx,ecx
c0008441:	74 22                	je     c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0008443:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008447:	b8 06 00 00 00       	mov    eax,0x6
c000844c:	75 17                	jne    c0008465 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000844e:	89 f0                	mov    eax,esi
c0008450:	8b 39                	mov    edi,DWORD PTR [ecx]
c0008452:	0f b6 db             	movzx  ebx,bl
c0008455:	0f b6 f0             	movzx  esi,al
c0008458:	83 c2 0d             	add    edx,0xd
c000845b:	56                   	push   esi
c000845c:	53                   	push   ebx
c000845d:	52                   	push   edx
c000845e:	51                   	push   ecx
c000845f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c0008462:	83 c4 10             	add    esp,0x10
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	c3                   	ret    
c0008469:	90                   	nop

c000846a <File::exists()>:
c000846a:	83 ec 0c             	sub    esp,0xc
c000846d:	31 c0                	xor    eax,eax
c000846f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008473:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000847a:	83 f9 19             	cmp    ecx,0x19
c000847d:	77 24                	ja     c00084a3 <File::exists()+0x39>
c000847f:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008486:	85 c9                	test   ecx,ecx
c0008488:	74 19                	je     c00084a3 <File::exists()+0x39>
c000848a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008490:	85 c9                	test   ecx,ecx
c0008492:	74 0f                	je     c00084a3 <File::exists()+0x39>
c0008494:	50                   	push   eax
c0008495:	83 c2 0d             	add    edx,0xd
c0008498:	50                   	push   eax
c0008499:	8b 01                	mov    eax,DWORD PTR [ecx]
c000849b:	52                   	push   edx
c000849c:	51                   	push   ecx
c000849d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00084a0:	83 c4 10             	add    esp,0x10
c00084a3:	83 c4 0c             	add    esp,0xc
c00084a6:	c3                   	ret    
c00084a7:	90                   	nop

c00084a8 <File::stat(unsigned long long*, bool*)>:
c00084a8:	56                   	push   esi
c00084a9:	53                   	push   ebx
c00084aa:	50                   	push   eax
c00084ab:	b8 0b 00 00 00       	mov    eax,0xb
c00084b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00084b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00084bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00084c3:	83 f9 19             	cmp    ecx,0x19
c00084c6:	77 3d                	ja     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084c8:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c00084cf:	85 c9                	test   ecx,ecx
c00084d1:	74 32                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084d3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00084d9:	85 c9                	test   ecx,ecx
c00084db:	74 28                	je     c0008505 <File::stat(unsigned long long*, bool*)+0x5d>
c00084dd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00084e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00084e3:	74 13                	je     c00084f8 <File::stat(unsigned long long*, bool*)+0x50>
c00084e5:	83 ec 04             	sub    esp,0x4
c00084e8:	56                   	push   esi
c00084e9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00084ef:	51                   	push   ecx
c00084f0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00084f3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084f6:	eb 0a                	jmp    c0008502 <File::stat(unsigned long long*, bool*)+0x5a>
c00084f8:	53                   	push   ebx
c00084f9:	83 c2 0d             	add    edx,0xd
c00084fc:	56                   	push   esi
c00084fd:	52                   	push   edx
c00084fe:	51                   	push   ecx
c00084ff:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008502:	83 c4 10             	add    esp,0x10
c0008505:	5a                   	pop    edx
c0008506:	5b                   	pop    ebx
c0008507:	5e                   	pop    esi
c0008508:	c3                   	ret    

c0008509 <Fs::setcwd(Process*, char*)>:
c0008509:	55                   	push   ebp
c000850a:	57                   	push   edi
c000850b:	56                   	push   esi
c000850c:	53                   	push   ebx
c000850d:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008513:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000851a:	6a 00                	push   0x0
c000851c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0008522:	57                   	push   edi
c0008523:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000852a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000852e:	56                   	push   esi
c000852f:	e8 28 f9 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008534:	89 34 24             	mov    DWORD PTR [esp],esi
c0008537:	e8 44 80 ff ff       	call   c0000580 <strlen>
c000853c:	83 c4 10             	add    esp,0x10
c000853f:	83 f8 02             	cmp    eax,0x2
c0008542:	77 15                	ja     c0008559 <Fs::setcwd(Process*, char*)+0x50>
c0008544:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c0008549:	83 eb 41             	sub    ebx,0x41
c000854c:	8b 04 9d e0 0a 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcf520]
c0008553:	85 c0                	test   eax,eax
c0008555:	75 1c                	jne    c0008573 <Fs::setcwd(Process*, char*)+0x6a>
c0008557:	eb 2f                	jmp    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c0008559:	83 ec 0c             	sub    esp,0xc
c000855c:	56                   	push   esi
c000855d:	e8 1e 80 ff ff       	call   c0000580 <strlen>
c0008562:	83 c4 10             	add    esp,0x10
c0008565:	83 f8 03             	cmp    eax,0x3
c0008568:	75 57                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c000856a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000856f:	75 50                	jne    c00085c1 <Fs::setcwd(Process*, char*)+0xb8>
c0008571:	eb d1                	jmp    c0008544 <Fs::setcwd(Process*, char*)+0x3b>
c0008573:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000857a:	75 0c                	jne    c0008588 <Fs::setcwd(Process*, char*)+0x7f>
c000857c:	83 ec 0c             	sub    esp,0xc
c000857f:	50                   	push   eax
c0008580:	e8 cf 23 00 00       	call   c000a954 <LogicalDisk::mount()>
c0008585:	83 c4 10             	add    esp,0x10
c0008588:	83 fb 19             	cmp    ebx,0x19
c000858b:	b8 03 00 00 00       	mov    eax,0x3
c0008590:	0f 87 c6 00 00 00    	ja     c000865c <Fs::setcwd(Process*, char*)+0x153>
c0008596:	8b 14 9d e0 0a 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffcf520]
c000859d:	b8 05 00 00 00       	mov    eax,0x5
c00085a2:	85 d2                	test   edx,edx
c00085a4:	0f 84 b2 00 00 00    	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085aa:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c00085b1:	b8 06 00 00 00       	mov    eax,0x6
c00085b6:	0f 85 92 00 00 00    	jne    c000864e <Fs::setcwd(Process*, char*)+0x145>
c00085bc:	e9 9b 00 00 00       	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c00085c1:	83 ec 0c             	sub    esp,0xc
c00085c4:	68 14 01 00 00       	push   0x114
c00085c9:	e8 b2 70 00 00       	call   c000f680 <malloc>
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	55                   	push   ebp
c00085d2:	56                   	push   esi
c00085d3:	50                   	push   eax
c00085d4:	89 c3                	mov    ebx,eax
c00085d6:	e8 ad fb ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00085db:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00085e0:	83 c4 0c             	add    esp,0xc
c00085e3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00085e7:	50                   	push   eax
c00085e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00085ec:	50                   	push   eax
c00085ed:	53                   	push   ebx
c00085ee:	e8 b5 fe ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00085f3:	83 c4 10             	add    esp,0x10
c00085f6:	83 f8 02             	cmp    eax,0x2
c00085f9:	74 27                	je     c0008622 <Fs::setcwd(Process*, char*)+0x119>
c00085fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008600:	75 1c                	jne    c000861e <Fs::setcwd(Process*, char*)+0x115>
c0008602:	85 db                	test   ebx,ebx
c0008604:	b8 02 00 00 00       	mov    eax,0x2
c0008609:	74 51                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000860b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000860d:	83 ec 0c             	sub    esp,0xc
c0008610:	53                   	push   ebx
c0008611:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008614:	83 c4 10             	add    esp,0x10
c0008617:	b8 02 00 00 00       	mov    eax,0x2
c000861c:	eb 3e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000861e:	85 c0                	test   eax,eax
c0008620:	74 1c                	je     c000863e <Fs::setcwd(Process*, char*)+0x135>
c0008622:	85 db                	test   ebx,ebx
c0008624:	b8 01 00 00 00       	mov    eax,0x1
c0008629:	74 31                	je     c000865c <Fs::setcwd(Process*, char*)+0x153>
c000862b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000862d:	83 ec 0c             	sub    esp,0xc
c0008630:	53                   	push   ebx
c0008631:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008634:	83 c4 10             	add    esp,0x10
c0008637:	b8 01 00 00 00       	mov    eax,0x1
c000863c:	eb 1e                	jmp    c000865c <Fs::setcwd(Process*, char*)+0x153>
c000863e:	85 db                	test   ebx,ebx
c0008640:	74 0c                	je     c000864e <Fs::setcwd(Process*, char*)+0x145>
c0008642:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008644:	83 ec 0c             	sub    esp,0xc
c0008647:	53                   	push   ebx
c0008648:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000864b:	83 c4 10             	add    esp,0x10
c000864e:	50                   	push   eax
c000864f:	50                   	push   eax
c0008650:	56                   	push   esi
c0008651:	57                   	push   edi
c0008652:	e8 f9 7f ff ff       	call   c0000650 <strcpy>
c0008657:	83 c4 10             	add    esp,0x10
c000865a:	31 c0                	xor    eax,eax
c000865c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0008662:	5b                   	pop    ebx
c0008663:	5e                   	pop    esi
c0008664:	5f                   	pop    edi
c0008665:	5d                   	pop    ebp
c0008666:	c3                   	ret    
c0008667:	90                   	nop

c0008668 <Directory::Directory(char const*, Process*)>:
c0008668:	83 ec 0c             	sub    esp,0xc
c000866b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000866f:	83 ec 08             	sub    esp,0x8
c0008672:	6a 00                	push   0x0
c0008674:	50                   	push   eax
c0008675:	e8 4e a5 00 00       	call   c0012bc8 <UnixFile::UnixFile(int)>
c000867a:	83 c4 10             	add    esp,0x10
c000867d:	ba a8 6f 02 c0       	mov    edx,0xc0026fa8
c0008682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008686:	89 10                	mov    DWORD PTR [eax],edx
c0008688:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000868d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008691:	0f 95 c0             	setne  al
c0008694:	0f b6 c0             	movzx  eax,al
c0008697:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000869b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c00086a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00086a5:	83 c2 0d             	add    edx,0xd
c00086a8:	50                   	push   eax
c00086a9:	51                   	push   ecx
c00086aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00086ae:	52                   	push   edx
c00086af:	e8 a8 f7 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00086b4:	83 c4 10             	add    esp,0x10
c00086b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086bb:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00086be:	83 e8 41             	sub    eax,0x41
c00086c1:	88 c2                	mov    dl,al
c00086c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086c7:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00086cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00086d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086df:	0f b6 c0             	movzx  eax,al
c00086e2:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c00086e9:	85 c0                	test   eax,eax
c00086eb:	74 3e                	je     c000872b <Directory::Directory(char const*, Process*)+0xc3>
c00086ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086f7:	0f b6 c0             	movzx  eax,al
c00086fa:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0008701:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008707:	85 c0                	test   eax,eax
c0008709:	75 20                	jne    c000872b <Directory::Directory(char const*, Process*)+0xc3>
c000870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000870f:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008715:	0f b6 c0             	movzx  eax,al
c0008718:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c000871f:	83 ec 0c             	sub    esp,0xc
c0008722:	50                   	push   eax
c0008723:	e8 2c 22 00 00       	call   c000a954 <LogicalDisk::mount()>
c0008728:	83 c4 10             	add    esp,0x10
c000872b:	90                   	nop
c000872c:	83 c4 0c             	add    esp,0xc
c000872f:	c3                   	ret    

c0008730 <Directory::open()>:
c0008730:	53                   	push   ebx
c0008731:	b8 0b 00 00 00       	mov    eax,0xb
c0008736:	83 ec 08             	sub    esp,0x8
c0008739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000873d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008744:	83 fa 19             	cmp    edx,0x19
c0008747:	77 3d                	ja     c0008786 <Directory::open()+0x56>
c0008749:	8b 14 95 e0 0a 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcf520]
c0008750:	85 d2                	test   edx,edx
c0008752:	74 32                	je     c0008786 <Directory::open()+0x56>
c0008754:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000875a:	85 d2                	test   edx,edx
c000875c:	74 28                	je     c0008786 <Directory::open()+0x56>
c000875e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008762:	b8 06 00 00 00       	mov    eax,0x6
c0008767:	75 1d                	jne    c0008786 <Directory::open()+0x56>
c0008769:	50                   	push   eax
c000876a:	8b 02                	mov    eax,DWORD PTR [edx]
c000876c:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008772:	51                   	push   ecx
c0008773:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008776:	51                   	push   ecx
c0008777:	52                   	push   edx
c0008778:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000877b:	83 c4 10             	add    esp,0x10
c000877e:	85 c0                	test   eax,eax
c0008780:	75 04                	jne    c0008786 <Directory::open()+0x56>
c0008782:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008786:	83 c4 08             	add    esp,0x8
c0008789:	5b                   	pop    ebx
c000878a:	c3                   	ret    
c000878b:	90                   	nop

c000878c <Directory::close()>:
c000878c:	53                   	push   ebx
c000878d:	b8 0b 00 00 00       	mov    eax,0xb
c0008792:	83 ec 08             	sub    esp,0x8
c0008795:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008799:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a0:	83 f9 19             	cmp    ecx,0x19
c00087a3:	77 41                	ja     c00087e6 <Directory::close()+0x5a>
c00087a5:	8b 1c 8d e0 0a 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffcf520]
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	74 36                	je     c00087e6 <Directory::close()+0x5a>
c00087b0:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00087b7:	74 2d                	je     c00087e6 <Directory::close()+0x5a>
c00087b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087bd:	b8 05 00 00 00       	mov    eax,0x5
c00087c2:	74 22                	je     c00087e6 <Directory::close()+0x5a>
c00087c4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00087c8:	8b 04 8d e0 0a 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffcf520]
c00087cf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00087d5:	53                   	push   ebx
c00087d6:	53                   	push   ebx
c00087d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00087d9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00087df:	50                   	push   eax
c00087e0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c00087e3:	83 c4 10             	add    esp,0x10
c00087e6:	83 c4 08             	add    esp,0x8
c00087e9:	5b                   	pop    ebx
c00087ea:	c3                   	ret    
c00087eb:	90                   	nop

c00087ec <Directory::unlink()>:
c00087ec:	83 ec 0c             	sub    esp,0xc
c00087ef:	b8 0b 00 00 00       	mov    eax,0xb
c00087f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087f8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087ff:	83 f9 19             	cmp    ecx,0x19
c0008802:	77 2f                	ja     c0008833 <Directory::unlink()+0x47>
c0008804:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 24                	je     c0008833 <Directory::unlink()+0x47>
c000880f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008815:	85 c9                	test   ecx,ecx
c0008817:	74 1a                	je     c0008833 <Directory::unlink()+0x47>
c0008819:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000881d:	b8 06 00 00 00       	mov    eax,0x6
c0008822:	75 0f                	jne    c0008833 <Directory::unlink()+0x47>
c0008824:	50                   	push   eax
c0008825:	83 c2 0d             	add    edx,0xd
c0008828:	50                   	push   eax
c0008829:	8b 01                	mov    eax,DWORD PTR [ecx]
c000882b:	52                   	push   edx
c000882c:	51                   	push   ecx
c000882d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008830:	83 c4 10             	add    esp,0x10
c0008833:	83 c4 0c             	add    esp,0xc
c0008836:	c3                   	ret    
c0008837:	90                   	nop

c0008838 <Directory::rename(char const*)>:
c0008838:	83 ec 0c             	sub    esp,0xc
c000883b:	b8 0b 00 00 00       	mov    eax,0xb
c0008840:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008844:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000884b:	83 f9 19             	cmp    ecx,0x19
c000884e:	77 32                	ja     c0008882 <Directory::rename(char const*)+0x4a>
c0008850:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0008857:	85 c9                	test   ecx,ecx
c0008859:	74 27                	je     c0008882 <Directory::rename(char const*)+0x4a>
c000885b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008861:	85 c9                	test   ecx,ecx
c0008863:	74 1d                	je     c0008882 <Directory::rename(char const*)+0x4a>
c0008865:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008869:	b8 06 00 00 00       	mov    eax,0x6
c000886e:	75 12                	jne    c0008882 <Directory::rename(char const*)+0x4a>
c0008870:	50                   	push   eax
c0008871:	83 c2 0d             	add    edx,0xd
c0008874:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008876:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000887a:	52                   	push   edx
c000887b:	51                   	push   ecx
c000887c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000887f:	83 c4 10             	add    esp,0x10
c0008882:	83 c4 0c             	add    esp,0xc
c0008885:	c3                   	ret    

c0008886 <Directory::exists()>:
c0008886:	83 ec 0c             	sub    esp,0xc
c0008889:	31 c0                	xor    eax,eax
c000888b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000888f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008896:	83 f9 19             	cmp    ecx,0x19
c0008899:	77 24                	ja     c00088bf <Directory::exists()+0x39>
c000889b:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c00088a2:	85 c9                	test   ecx,ecx
c00088a4:	74 19                	je     c00088bf <Directory::exists()+0x39>
c00088a6:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088ac:	85 c9                	test   ecx,ecx
c00088ae:	74 0f                	je     c00088bf <Directory::exists()+0x39>
c00088b0:	50                   	push   eax
c00088b1:	83 c2 0d             	add    edx,0xd
c00088b4:	50                   	push   eax
c00088b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088b7:	52                   	push   edx
c00088b8:	51                   	push   ecx
c00088b9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 c4 0c             	add    esp,0xc
c00088c2:	c3                   	ret    
c00088c3:	90                   	nop

c00088c4 <Directory::read(dirent*)>:
c00088c4:	83 ec 1c             	sub    esp,0x1c
c00088c7:	b8 0b 00 00 00       	mov    eax,0xb
c00088cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00088d0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088d7:	83 f9 19             	cmp    ecx,0x19
c00088da:	77 30                	ja     c000890c <Directory::read(dirent*)+0x48>
c00088dc:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 25                	je     c000890c <Directory::read(dirent*)+0x48>
c00088e7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c00088ee:	74 1c                	je     c000890c <Directory::read(dirent*)+0x48>
c00088f0:	83 ec 0c             	sub    esp,0xc
c00088f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00088f5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088f9:	51                   	push   ecx
c00088fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088fe:	6a 00                	push   0x0
c0008900:	68 10 01 00 00       	push   0x110
c0008905:	52                   	push   edx
c0008906:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008909:	83 c4 20             	add    esp,0x20
c000890c:	83 c4 1c             	add    esp,0x1c
c000890f:	c3                   	ret    

c0008910 <Directory::create()>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	b8 0b 00 00 00       	mov    eax,0xb
c0008918:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000891c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008923:	83 f9 19             	cmp    ecx,0x19
c0008926:	77 2f                	ja     c0008957 <Directory::create()+0x47>
c0008928:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c000892f:	85 c9                	test   ecx,ecx
c0008931:	74 24                	je     c0008957 <Directory::create()+0x47>
c0008933:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008939:	85 c9                	test   ecx,ecx
c000893b:	74 1a                	je     c0008957 <Directory::create()+0x47>
c000893d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008941:	b8 06 00 00 00       	mov    eax,0x6
c0008946:	75 0f                	jne    c0008957 <Directory::create()+0x47>
c0008948:	50                   	push   eax
c0008949:	83 c2 0d             	add    edx,0xd
c000894c:	50                   	push   eax
c000894d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000894f:	52                   	push   edx
c0008950:	51                   	push   ecx
c0008951:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0008954:	83 c4 10             	add    esp,0x10
c0008957:	83 c4 0c             	add    esp,0xc
c000895a:	c3                   	ret    
c000895b:	90                   	nop

c000895c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000895c:	b8 0a 00 00 00       	mov    eax,0xa
c0008961:	c3                   	ret    
c0008962:	66 90                	xchg   ax,ax

c0008964 <Bus::Bus(char const*)>:
c0008964:	83 ec 0c             	sub    esp,0xc
c0008967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896b:	83 ec 08             	sub    esp,0x8
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	50                   	push   eax
c0008973:	e8 e0 11 00 00       	call   c0009b58 <Device::Device(char const*)>
c0008978:	83 c4 10             	add    esp,0x10
c000897b:	ba c4 6f 02 c0       	mov    edx,0xc0026fc4
c0008980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008984:	89 10                	mov    DWORD PTR [eax],edx
c0008986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008994:	90                   	nop
c0008995:	83 c4 0c             	add    esp,0xc
c0008998:	c3                   	ret    
c0008999:	90                   	nop
c000899a:	66 90                	xchg   ax,ax

c000899c <Bus::~Bus()>:
c000899c:	83 ec 0c             	sub    esp,0xc
c000899f:	ba c4 6f 02 c0       	mov    edx,0xc0026fc4
c00089a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a8:	89 10                	mov    DWORD PTR [eax],edx
c00089aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ae:	83 ec 0c             	sub    esp,0xc
c00089b1:	50                   	push   eax
c00089b2:	e8 41 0f 00 00       	call   c00098f8 <Device::~Device()>
c00089b7:	83 c4 10             	add    esp,0x10
c00089ba:	90                   	nop
c00089bb:	83 c4 0c             	add    esp,0xc
c00089be:	c3                   	ret    
c00089bf:	90                   	nop

c00089c0 <Bus::~Bus()>:
c00089c0:	83 ec 0c             	sub    esp,0xc
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089ca:	e8 cd ff ff ff       	call   c000899c <Bus::~Bus()>
c00089cf:	83 c4 10             	add    esp,0x10
c00089d2:	83 ec 08             	sub    esp,0x8
c00089d5:	68 58 01 00 00       	push   0x158
c00089da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089de:	e8 a5 48 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c00089e3:	83 c4 10             	add    esp,0x10
c00089e6:	83 c4 0c             	add    esp,0xc
c00089e9:	c3                   	ret    

c00089ea <KeBeepThread(void*)>:
c00089ea:	83 ec 0c             	sub    esp,0xc
c00089ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f1:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c00089f8:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c00089ff:	75 01                	jne    c0008a02 <KeBeepThread(void*)+0x18>
c0008a01:	fb                   	sti    
c0008a02:	6b c0 0a             	imul   eax,eax,0xa
c0008a05:	52                   	push   edx
c0008a06:	52                   	push   edx
c0008a07:	99                   	cdq    
c0008a08:	52                   	push   edx
c0008a09:	50                   	push   eax
c0008a0a:	e8 31 de 00 00       	call   c0016840 <milliTenthSleep(unsigned long long)>
c0008a0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a16:	e8 ef 1e 01 00       	call   c001a90a <HalMakeBeep(int)>
c0008a1b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0008a23:	83 c4 1c             	add    esp,0x1c
c0008a26:	e9 e1 dc 00 00       	jmp    c001670c <blockTask(TaskState)>

c0008a2b <KeBeep(int, int, bool)>:
c0008a2b:	56                   	push   esi
c0008a2c:	53                   	push   ebx
c0008a2d:	83 ec 10             	sub    esp,0x10
c0008a30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a34:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a3c:	e8 c9 1e 01 00       	call   c001a90a <HalMakeBeep(int)>
c0008a41:	89 f0                	mov    eax,esi
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	84 c0                	test   al,al
c0008a48:	74 1f                	je     c0008a69 <KeBeep(int, int, bool)+0x3e>
c0008a4a:	50                   	push   eax
c0008a4b:	50                   	push   eax
c0008a4c:	6b c3 0a             	imul   eax,ebx,0xa
c0008a4f:	99                   	cdq    
c0008a50:	52                   	push   edx
c0008a51:	50                   	push   eax
c0008a52:	e8 e9 dd 00 00       	call   c0016840 <milliTenthSleep(unsigned long long)>
c0008a57:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a5f:	83 c4 14             	add    esp,0x14
c0008a62:	5b                   	pop    ebx
c0008a63:	5e                   	pop    esi
c0008a64:	e9 a1 1e 01 00       	jmp    c001a90a <HalMakeBeep(int)>
c0008a69:	68 e6 00 00 00       	push   0xe6
c0008a6e:	53                   	push   ebx
c0008a6f:	68 ea 89 00 c0       	push   0xc00089ea
c0008a74:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0008a7a:	e8 19 d9 00 00       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c0008a7f:	83 c4 14             	add    esp,0x14
c0008a82:	5b                   	pop    ebx
c0008a83:	5e                   	pop    esi
c0008a84:	c3                   	ret    
c0008a85:	90                   	nop

c0008a86 <KeLoadTimezoneStrings()>:
c0008a86:	55                   	push   ebp
c0008a87:	89 e5                	mov    ebp,esp
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 44             	sub    esp,0x44
c0008a8d:	c6 05 20 03 03 c0 01 	mov    BYTE PTR ds:0xc0030320,0x1
c0008a94:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a9b:	83 ec 0c             	sub    esp,0xc
c0008a9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008aa1:	e8 da 6b 00 00       	call   c000f680 <malloc>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	89 c3                	mov    ebx,eax
c0008aab:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	50                   	push   eax
c0008ab4:	68 00 70 02 c0       	push   0xc0027000
c0008ab9:	53                   	push   ebx
c0008aba:	e8 c9 f6 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0008abf:	83 c4 10             	add    esp,0x10
c0008ac2:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008ac5:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008ac9:	75 10                	jne    c0008adb <KeLoadTimezoneStrings()+0x55>
c0008acb:	83 ec 0c             	sub    esp,0xc
c0008ace:	68 1f 70 02 c0       	push   0xc002701f
c0008ad3:	e8 fc 6f 00 00       	call   c000fad4 <KePanic(char const*)>
c0008ad8:	83 c4 10             	add    esp,0x10
c0008adb:	83 ec 08             	sub    esp,0x8
c0008ade:	6a 01                	push   0x1
c0008ae0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ae3:	e8 be f6 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0008ae8:	83 c4 10             	add    esp,0x10
c0008aeb:	83 ec 04             	sub    esp,0x4
c0008aee:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008af1:	50                   	push   eax
c0008af2:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008af5:	50                   	push   eax
c0008af6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008af9:	e8 aa f9 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b07:	83 ec 08             	sub    esp,0x8
c0008b0a:	50                   	push   eax
c0008b0b:	68 35 70 02 c0       	push   0xc0027035
c0008b10:	e8 51 e4 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b15:	83 c4 10             	add    esp,0x10
c0008b18:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b1b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b1e:	83 c0 01             	add    eax,0x1
c0008b21:	83 ec 0c             	sub    esp,0xc
c0008b24:	50                   	push   eax
c0008b25:	e8 56 6b 00 00       	call   c000f680 <malloc>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008b30:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b33:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b36:	83 ec 04             	sub    esp,0x4
c0008b39:	50                   	push   eax
c0008b3a:	6a 00                	push   0x0
c0008b3c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b3f:	e8 ac 79 ff ff       	call   c00004f0 <memset>
c0008b44:	83 c4 10             	add    esp,0x10
c0008b47:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b4c:	83 c0 0c             	add    eax,0xc
c0008b4f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008b51:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008b54:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008b57:	83 ec 0c             	sub    esp,0xc
c0008b5a:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b5d:	53                   	push   ebx
c0008b5e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b61:	52                   	push   edx
c0008b62:	50                   	push   eax
c0008b63:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b66:	ff d1                	call   ecx
c0008b68:	83 c4 20             	add    esp,0x20
c0008b6b:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b6e:	83 ec 08             	sub    esp,0x8
c0008b71:	50                   	push   eax
c0008b72:	68 45 70 02 c0       	push   0xc0027045
c0008b77:	e8 ea e3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	83 ec 0c             	sub    esp,0xc
c0008b82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b85:	e8 7a f6 ff ff       	call   c0008204 <File::close()>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b91:	74 15                	je     c0008ba8 <KeLoadTimezoneStrings()+0x122>
c0008b93:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b96:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b98:	83 c0 08             	add    eax,0x8
c0008b9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b9d:	83 ec 0c             	sub    esp,0xc
c0008ba0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008ba3:	ff d0                	call   eax
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008baf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008bb6:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008bbd:	7f 3a                	jg     c0008bf9 <KeLoadTimezoneStrings()+0x173>
c0008bbf:	83 ec 0c             	sub    esp,0xc
c0008bc2:	6a 78                	push   0x78
c0008bc4:	e8 b7 6a 00 00       	call   c000f680 <malloc>
c0008bc9:	83 c4 10             	add    esp,0x10
c0008bcc:	89 c2                	mov    edx,eax
c0008bce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bd1:	89 14 85 40 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfcc0],edx
c0008bd8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008bdb:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008be2:	83 ec 08             	sub    esp,0x8
c0008be5:	68 4e 70 02 c0       	push   0xc002704e
c0008bea:	50                   	push   eax
c0008beb:	e8 60 7a ff ff       	call   c0000650 <strcpy>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008bf7:	eb bd                	jmp    c0008bb6 <KeLoadTimezoneStrings()+0x130>
c0008bf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008c00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c03:	8d 50 01             	lea    edx,[eax+0x1]
c0008c06:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008c09:	89 c2                	mov    edx,eax
c0008c0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008c0e:	01 d0                	add    eax,edx
c0008c10:	8a 00                	mov    al,BYTE PTR [eax]
c0008c12:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008c15:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008c19:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c1c:	0f be c0             	movsx  eax,al
c0008c1f:	83 f8 0d             	cmp    eax,0xd
c0008c22:	0f 84 82 01 00 00    	je     c0008daa <KeLoadTimezoneStrings()+0x324>
c0008c28:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c2b:	0f be c0             	movsx  eax,al
c0008c2e:	83 f8 09             	cmp    eax,0x9
c0008c31:	75 44                	jne    c0008c77 <KeLoadTimezoneStrings()+0x1f1>
c0008c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c36:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008c3d:	83 ec 0c             	sub    esp,0xc
c0008c40:	50                   	push   eax
c0008c41:	e8 3a 79 ff ff       	call   c0000580 <strlen>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	83 f8 08             	cmp    eax,0x8
c0008c4c:	0f 96 c0             	setbe  al
c0008c4f:	0f b6 c0             	movzx  eax,al
c0008c52:	85 c0                	test   eax,eax
c0008c54:	0f 84 56 01 00 00    	je     c0008db0 <KeLoadTimezoneStrings()+0x32a>
c0008c5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c5d:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008c64:	83 ec 08             	sub    esp,0x8
c0008c67:	68 4e 70 02 c0       	push   0xc002704e
c0008c6c:	50                   	push   eax
c0008c6d:	e8 fe 7b ff ff       	call   c0000870 <strcat>
c0008c72:	83 c4 10             	add    esp,0x10
c0008c75:	eb bc                	jmp    c0008c33 <KeLoadTimezoneStrings()+0x1ad>
c0008c77:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c7a:	0f be c0             	movsx  eax,al
c0008c7d:	83 f8 0a             	cmp    eax,0xa
c0008c80:	0f 85 9b 00 00 00    	jne    c0008d21 <KeLoadTimezoneStrings()+0x29b>
c0008c86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c89:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 e7 78 ff ff       	call   c0000580 <strlen>
c0008c99:	83 c4 10             	add    esp,0x10
c0008c9c:	83 f8 35             	cmp    eax,0x35
c0008c9f:	0f 96 c0             	setbe  al
c0008ca2:	0f b6 c0             	movzx  eax,al
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	74 1d                	je     c0008cc6 <KeLoadTimezoneStrings()+0x240>
c0008ca9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cac:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008cb3:	83 ec 08             	sub    esp,0x8
c0008cb6:	68 4e 70 02 c0       	push   0xc002704e
c0008cbb:	50                   	push   eax
c0008cbc:	e8 af 7b ff ff       	call   c0000870 <strcat>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	eb c0                	jmp    c0008c86 <KeLoadTimezoneStrings()+0x200>
c0008cc6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008cca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ccd:	89 c2                	mov    edx,eax
c0008ccf:	c1 fa 1f             	sar    edx,0x1f
c0008cd2:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008cd5:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008cd8:	39 c8                	cmp    eax,ecx
c0008cda:	89 d0                	mov    eax,edx
c0008cdc:	19 d8                	sbb    eax,ebx
c0008cde:	0f 82 d2 00 00 00    	jb     c0008db6 <KeLoadTimezoneStrings()+0x330>
c0008ce4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ce7:	a3 24 03 03 c0       	mov    ds:0xc0030324,eax
c0008cec:	83 ec 08             	sub    esp,0x8
c0008cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008cf2:	68 50 70 02 c0       	push   0xc0027050
c0008cf7:	e8 6a e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008cfc:	83 c4 10             	add    esp,0x10
c0008cff:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008d04:	83 ec 08             	sub    esp,0x8
c0008d07:	50                   	push   eax
c0008d08:	68 65 70 02 c0       	push   0xc0027065
c0008d0d:	e8 54 e2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008d1c:	e9 9b 00 00 00       	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d24:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008d2b:	83 ec 0c             	sub    esp,0xc
c0008d2e:	50                   	push   eax
c0008d2f:	e8 4c 78 ff ff       	call   c0000580 <strlen>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	83 f8 31             	cmp    eax,0x31
c0008d3a:	0f 96 c0             	setbe  al
c0008d3d:	0f b6 c0             	movzx  eax,al
c0008d40:	85 c0                	test   eax,eax
c0008d42:	74 1f                	je     c0008d63 <KeLoadTimezoneStrings()+0x2dd>
c0008d44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d47:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008d4e:	83 ec 08             	sub    esp,0x8
c0008d51:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008d54:	52                   	push   edx
c0008d55:	50                   	push   eax
c0008d56:	e8 15 7b ff ff       	call   c0000870 <strcat>
c0008d5b:	83 c4 10             	add    esp,0x10
c0008d5e:	e9 9d fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d66:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	50                   	push   eax
c0008d71:	e8 0a 78 ff ff       	call   c0000580 <strlen>
c0008d76:	83 c4 10             	add    esp,0x10
c0008d79:	83 f8 32             	cmp    eax,0x32
c0008d7c:	0f 94 c0             	sete   al
c0008d7f:	0f b6 c0             	movzx  eax,al
c0008d82:	85 c0                	test   eax,eax
c0008d84:	0f 84 76 fe ff ff    	je     c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d8d:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008d94:	83 ec 08             	sub    esp,0x8
c0008d97:	68 69 70 02 c0       	push   0xc0027069
c0008d9c:	50                   	push   eax
c0008d9d:	e8 ce 7a ff ff       	call   c0000870 <strcat>
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	e9 56 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008daa:	90                   	nop
c0008dab:	e9 50 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db0:	90                   	nop
c0008db1:	e9 4a fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008db6:	90                   	nop
c0008db7:	e9 44 fe ff ff       	jmp    c0008c00 <KeLoadTimezoneStrings()+0x17a>
c0008dbc:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008dc1:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dc4:	7d 49                	jge    c0008e0f <KeLoadTimezoneStrings()+0x389>
c0008dc6:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008dcb:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008dce:	0f 9c c0             	setl   al
c0008dd1:	0f b6 d0             	movzx  edx,al
c0008dd4:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008dd9:	52                   	push   edx
c0008dda:	50                   	push   eax
c0008ddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dde:	68 6e 70 02 c0       	push   0xc002706e
c0008de3:	e8 7e e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008dee:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008df5:	83 ec 04             	sub    esp,0x4
c0008df8:	50                   	push   eax
c0008df9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008dfc:	68 7c 70 02 c0       	push   0xc002707c
c0008e01:	e8 60 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e06:	83 c4 10             	add    esp,0x10
c0008e09:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008e0d:	eb ad                	jmp    c0008dbc <KeLoadTimezoneStrings()+0x336>
c0008e0f:	90                   	nop
c0008e10:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008e13:	c9                   	leave  
c0008e14:	c3                   	ret    

c0008e15 <KeGetTimezoneStringFromID(int)>:
c0008e15:	55                   	push   ebp
c0008e16:	89 e5                	mov    ebp,esp
c0008e18:	83 ec 08             	sub    esp,0x8
c0008e1b:	83 ec 08             	sub    esp,0x8
c0008e1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e21:	68 85 70 02 c0       	push   0xc0027085
c0008e26:	e8 3b e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	a0 20 03 03 c0       	mov    al,ds:0xc0030320
c0008e33:	83 f0 01             	xor    eax,0x1
c0008e36:	0f b6 c0             	movzx  eax,al
c0008e39:	85 c0                	test   eax,eax
c0008e3b:	74 15                	je     c0008e52 <KeGetTimezoneStringFromID(int)+0x3d>
c0008e3d:	e8 44 fc ff ff       	call   c0008a86 <KeLoadTimezoneStrings()>
c0008e42:	83 ec 0c             	sub    esp,0xc
c0008e45:	68 a3 70 02 c0       	push   0xc00270a3
c0008e4a:	e8 17 e1 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008e57:	83 ec 04             	sub    esp,0x4
c0008e5a:	50                   	push   eax
c0008e5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e5e:	68 b4 70 02 c0       	push   0xc00270b4
c0008e63:	e8 fe e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008e68:	83 c4 10             	add    esp,0x10
c0008e6b:	a1 24 03 03 c0       	mov    eax,ds:0xc0030324
c0008e70:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e73:	7d 06                	jge    c0008e7b <KeGetTimezoneStringFromID(int)+0x66>
c0008e75:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e79:	79 07                	jns    c0008e82 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e7b:	b8 00 00 00 00       	mov    eax,0x0
c0008e80:	eb 2e                	jmp    c0008eb0 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008e8c:	83 c0 01             	add    eax,0x1
c0008e8f:	83 ec 04             	sub    esp,0x4
c0008e92:	50                   	push   eax
c0008e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e96:	68 c7 70 02 c0       	push   0xc00270c7
c0008e9b:	e8 c6 e0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea6:	8b 04 85 40 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfcc0]
c0008ead:	83 c0 01             	add    eax,0x1
c0008eb0:	c9                   	leave  
c0008eb1:	c3                   	ret    

c0008eb2 <KeUpdateTimezone(char const*)>:
c0008eb2:	55                   	push   ebp
c0008eb3:	89 e5                	mov    ebp,esp
c0008eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 2b             	cmp    eax,0x2b
c0008ec0:	74 11                	je     c0008ed3 <KeUpdateTimezone(char const*)+0x21>
c0008ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0008ec7:	0f be c0             	movsx  eax,al
c0008eca:	83 f8 2d             	cmp    eax,0x2d
c0008ecd:	0f 85 be 00 00 00    	jne    c0008f91 <KeUpdateTimezone(char const*)+0xdf>
c0008ed3:	c6 05 60 06 03 c0 00 	mov    BYTE PTR ds:0xc0030660,0x0
c0008eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008edd:	83 c0 02             	add    eax,0x2
c0008ee0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee2:	0f be c0             	movsx  eax,al
c0008ee5:	83 f8 2e             	cmp    eax,0x2e
c0008ee8:	75 10                	jne    c0008efa <KeUpdateTimezone(char const*)+0x48>
c0008eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eed:	83 c0 03             	add    eax,0x3
c0008ef0:	8a 00                	mov    al,BYTE PTR [eax]
c0008ef2:	0f be c0             	movsx  eax,al
c0008ef5:	83 f8 35             	cmp    eax,0x35
c0008ef8:	74 20                	je     c0008f1a <KeUpdateTimezone(char const*)+0x68>
c0008efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efd:	83 c0 03             	add    eax,0x3
c0008f00:	8a 00                	mov    al,BYTE PTR [eax]
c0008f02:	0f be c0             	movsx  eax,al
c0008f05:	83 f8 2e             	cmp    eax,0x2e
c0008f08:	75 14                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f0d:	83 c0 04             	add    eax,0x4
c0008f10:	8a 00                	mov    al,BYTE PTR [eax]
c0008f12:	0f be c0             	movsx  eax,al
c0008f15:	83 f8 35             	cmp    eax,0x35
c0008f18:	75 04                	jne    c0008f1e <KeUpdateTimezone(char const*)+0x6c>
c0008f1a:	b0 01                	mov    al,0x1
c0008f1c:	eb 02                	jmp    c0008f20 <KeUpdateTimezone(char const*)+0x6e>
c0008f1e:	b0 00                	mov    al,0x0
c0008f20:	a2 61 06 03 c0       	mov    ds:0xc0030661,al
c0008f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f28:	83 c0 01             	add    eax,0x1
c0008f2b:	8a 00                	mov    al,BYTE PTR [eax]
c0008f2d:	0f be c0             	movsx  eax,al
c0008f30:	83 e8 30             	sub    eax,0x30
c0008f33:	a3 64 06 03 c0       	mov    ds:0xc0030664,eax
c0008f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f3b:	83 c0 03             	add    eax,0x3
c0008f3e:	8a 00                	mov    al,BYTE PTR [eax]
c0008f40:	0f be c0             	movsx  eax,al
c0008f43:	83 f8 2e             	cmp    eax,0x2e
c0008f46:	75 2e                	jne    c0008f76 <KeUpdateTimezone(char const*)+0xc4>
c0008f48:	8b 15 64 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030664
c0008f4e:	89 d0                	mov    eax,edx
c0008f50:	c1 e0 02             	shl    eax,0x2
c0008f53:	01 d0                	add    eax,edx
c0008f55:	d1 e0                	shl    eax,1
c0008f57:	a3 64 06 03 c0       	mov    ds:0xc0030664,eax
c0008f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5f:	83 c0 02             	add    eax,0x2
c0008f62:	8a 00                	mov    al,BYTE PTR [eax]
c0008f64:	0f be c0             	movsx  eax,al
c0008f67:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f6a:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c0008f6f:	01 d0                	add    eax,edx
c0008f71:	a3 64 06 03 c0       	mov    ds:0xc0030664,eax
c0008f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f79:	8a 00                	mov    al,BYTE PTR [eax]
c0008f7b:	0f be c0             	movsx  eax,al
c0008f7e:	83 f8 2d             	cmp    eax,0x2d
c0008f81:	75 26                	jne    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f83:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c0008f88:	f7 d8                	neg    eax
c0008f8a:	a3 64 06 03 c0       	mov    ds:0xc0030664,eax
c0008f8f:	eb 18                	jmp    c0008fa9 <KeUpdateTimezone(char const*)+0xf7>
c0008f91:	c6 05 60 06 03 c0 00 	mov    BYTE PTR ds:0xc0030660,0x0
c0008f98:	c6 05 61 06 03 c0 00 	mov    BYTE PTR ds:0xc0030661,0x0
c0008f9f:	c7 05 64 06 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030664,0x0
c0008fa9:	90                   	nop
c0008faa:	5d                   	pop    ebp
c0008fab:	c3                   	ret    

c0008fac <KeSetTimezone(char const*)>:
c0008fac:	55                   	push   ebp
c0008fad:	89 e5                	mov    ebp,esp
c0008faf:	83 ec 18             	sub    esp,0x18
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	68 d4 70 02 c0       	push   0xc00270d4
c0008fba:	e8 1d 43 00 00       	call   c000d2dc <CmOpen(char const*)>
c0008fbf:	83 c4 10             	add    esp,0x10
c0008fc2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc5:	83 ec 08             	sub    esp,0x8
c0008fc8:	68 f9 70 02 c0       	push   0xc00270f9
c0008fcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd0:	e8 02 4f 00 00       	call   c000ded7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008fd5:	83 c4 10             	add    esp,0x10
c0008fd8:	83 ec 04             	sub    esp,0x4
c0008fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fde:	50                   	push   eax
c0008fdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fe2:	e8 c7 47 00 00       	call   c000d7ae <CmSetString(Reghive_Tag*, int, char const*)>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	83 ec 0c             	sub    esp,0xc
c0008fed:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008ff0:	e8 05 44 00 00       	call   c000d3fa <CmClose(Reghive_Tag*)>
c0008ff5:	83 c4 10             	add    esp,0x10
c0008ff8:	83 ec 0c             	sub    esp,0xc
c0008ffb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008ffe:	e8 af fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	90                   	nop
c0009007:	c9                   	leave  
c0009008:	c3                   	ret    

c0009009 <KeSetTimezone(int)>:
c0009009:	55                   	push   ebp
c000900a:	89 e5                	mov    ebp,esp
c000900c:	83 ec 18             	sub    esp,0x18
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009015:	e8 fb fd ff ff       	call   c0008e15 <KeGetTimezoneStringFromID(int)>
c000901a:	83 c4 10             	add    esp,0x10
c000901d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009020:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009024:	74 12                	je     c0009038 <KeSetTimezone(int)+0x2f>
c0009026:	83 ec 0c             	sub    esp,0xc
c0009029:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000902c:	e8 7b ff ff ff       	call   c0008fac <KeSetTimezone(char const*)>
c0009031:	83 c4 10             	add    esp,0x10
c0009034:	b0 01                	mov    al,0x1
c0009036:	eb 02                	jmp    c000903a <KeSetTimezone(int)+0x31>
c0009038:	b0 00                	mov    al,0x0
c000903a:	c9                   	leave  
c000903b:	c3                   	ret    

c000903c <KeLoadTimezone()>:
c000903c:	55                   	push   ebp
c000903d:	89 e5                	mov    ebp,esp
c000903f:	81 ec 68 02 00 00    	sub    esp,0x268
c0009045:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c000904c:	83 ec 0c             	sub    esp,0xc
c000904f:	68 d4 70 02 c0       	push   0xc00270d4
c0009054:	e8 83 42 00 00       	call   c000d2dc <CmOpen(char const*)>
c0009059:	83 c4 10             	add    esp,0x10
c000905c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	68 f9 70 02 c0       	push   0xc00270f9
c0009067:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000906a:	e8 68 4e 00 00       	call   c000ded7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009075:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009079:	7e 18                	jle    c0009093 <KeLoadTimezone()+0x57>
c000907b:	83 ec 04             	sub    esp,0x4
c000907e:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009084:	50                   	push   eax
c0009085:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009088:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000908b:	e8 bc 43 00 00       	call   c000d44c <CmGetString(Reghive_Tag*, int, char*)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	83 ec 0c             	sub    esp,0xc
c0009096:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009099:	e8 5c 43 00 00       	call   c000d3fa <CmClose(Reghive_Tag*)>
c000909e:	83 c4 10             	add    esp,0x10
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c00090aa:	50                   	push   eax
c00090ab:	e8 02 fe ff ff       	call   c0008eb2 <KeUpdateTimezone(char const*)>
c00090b0:	83 c4 10             	add    esp,0x10
c00090b3:	90                   	nop
c00090b4:	c9                   	leave  
c00090b5:	c3                   	ret    

c00090b6 <Clock::Clock(char const*)>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c4:	50                   	push   eax
c00090c5:	e8 8e 0a 00 00       	call   c0009b58 <Device::Device(char const*)>
c00090ca:	83 c4 10             	add    esp,0x10
c00090cd:	ba 58 71 02 c0       	mov    edx,0xc0027158
c00090d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d6:	89 10                	mov    DWORD PTR [eax],edx
c00090d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090dc:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00090e6:	90                   	nop
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <Clock::~Clock()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba 58 71 02 c0       	mov    edx,0xc0027158
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 f1 07 00 00       	call   c00098f8 <Device::~Device()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <Clock::~Clock()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <Clock::~Clock()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	68 58 01 00 00       	push   0x158
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 55 41 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	83 c4 0c             	add    esp,0xc
c0009139:	c3                   	ret    

c000913a <Clock::timeInSecondsLocal()>:
c000913a:	55                   	push   ebp
c000913b:	89 e5                	mov    ebp,esp
c000913d:	53                   	push   ebx
c000913e:	83 ec 04             	sub    esp,0x4
c0009141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009144:	8b 00                	mov    eax,DWORD PTR [eax]
c0009146:	83 c0 24             	add    eax,0x24
c0009149:	8b 00                	mov    eax,DWORD PTR [eax]
c000914b:	83 ec 0c             	sub    esp,0xc
c000914e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009151:	ff d0                	call   eax
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	89 c1                	mov    ecx,eax
c0009158:	89 d3                	mov    ebx,edx
c000915a:	a0 60 06 03 c0       	mov    al,ds:0xc0030660
c000915f:	0f b6 d0             	movzx  edx,al
c0009162:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c0009167:	01 d0                	add    eax,edx
c0009169:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000916f:	89 c2                	mov    edx,eax
c0009171:	c1 fa 1f             	sar    edx,0x1f
c0009174:	01 c1                	add    ecx,eax
c0009176:	11 d3                	adc    ebx,edx
c0009178:	a0 61 06 03 c0       	mov    al,ds:0xc0030661
c000917d:	0f b6 c0             	movzx  eax,al
c0009180:	85 c0                	test   eax,eax
c0009182:	74 0c                	je     c0009190 <Clock::timeInSecondsLocal()+0x56>
c0009184:	b8 08 07 00 00       	mov    eax,0x708
c0009189:	ba 00 00 00 00       	mov    edx,0x0
c000918e:	eb 0a                	jmp    c000919a <Clock::timeInSecondsLocal()+0x60>
c0009190:	b8 00 00 00 00       	mov    eax,0x0
c0009195:	ba 00 00 00 00       	mov    edx,0x0
c000919a:	01 c8                	add    eax,ecx
c000919c:	11 da                	adc    edx,ebx
c000919e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00091a1:	c9                   	leave  
c00091a2:	c3                   	ret    
c00091a3:	90                   	nop

c00091a4 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00091a4:	55                   	push   ebp
c00091a5:	89 e5                	mov    ebp,esp
c00091a7:	56                   	push   esi
c00091a8:	53                   	push   ebx
c00091a9:	83 ec 10             	sub    esp,0x10
c00091ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00091af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00091b2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00091b5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00091b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00091bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00091bd:	83 c0 2c             	add    eax,0x2c
c00091c0:	8b 30                	mov    esi,DWORD PTR [eax]
c00091c2:	a0 60 06 03 c0       	mov    al,ds:0xc0030660
c00091c7:	0f b6 d0             	movzx  edx,al
c00091ca:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c00091cf:	01 d0                	add    eax,edx
c00091d1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00091d7:	89 c2                	mov    edx,eax
c00091d9:	c1 fa 1f             	sar    edx,0x1f
c00091dc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00091df:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091e2:	29 c1                	sub    ecx,eax
c00091e4:	19 d3                	sbb    ebx,edx
c00091e6:	a0 61 06 03 c0       	mov    al,ds:0xc0030661
c00091eb:	0f b6 c0             	movzx  eax,al
c00091ee:	85 c0                	test   eax,eax
c00091f0:	74 0c                	je     c00091fe <Clock::setTimeInSecondsLocal(unsigned long long)+0x5a>
c00091f2:	b8 08 07 00 00       	mov    eax,0x708
c00091f7:	ba 00 00 00 00       	mov    edx,0x0
c00091fc:	eb 0a                	jmp    c0009208 <Clock::setTimeInSecondsLocal(unsigned long long)+0x64>
c00091fe:	b8 00 00 00 00       	mov    eax,0x0
c0009203:	ba 00 00 00 00       	mov    edx,0x0
c0009208:	29 c1                	sub    ecx,eax
c000920a:	19 d3                	sbb    ebx,edx
c000920c:	89 c8                	mov    eax,ecx
c000920e:	89 da                	mov    edx,ebx
c0009210:	83 ec 04             	sub    esp,0x4
c0009213:	52                   	push   edx
c0009214:	50                   	push   eax
c0009215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009218:	ff d6                	call   esi
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009220:	5b                   	pop    ebx
c0009221:	5e                   	pop    esi
c0009222:	5d                   	pop    ebp
c0009223:	c3                   	ret    

c0009224 <KeDatetimeToSeconds(datetime_t)>:
c0009224:	55                   	push   ebp
c0009225:	89 e5                	mov    ebp,esp
c0009227:	53                   	push   ebx
c0009228:	83 ec 24             	sub    esp,0x24
c000922b:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000922f:	2d 6c 07 00 00       	sub    eax,0x76c
c0009234:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0009238:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000923b:	83 e8 01             	sub    eax,0x1
c000923e:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009241:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009248:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000924f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009256:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000925d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009260:	0f b6 c8             	movzx  ecx,al
c0009263:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009266:	0f b6 d0             	movzx  edx,al
c0009269:	89 d0                	mov    eax,edx
c000926b:	c1 e0 04             	shl    eax,0x4
c000926e:	29 d0                	sub    eax,edx
c0009270:	c1 e0 02             	shl    eax,0x2
c0009273:	8d 14 01             	lea    edx,[ecx+eax*1]
c0009276:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009279:	0f b6 c0             	movzx  eax,al
c000927c:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009282:	01 d0                	add    eax,edx
c0009284:	89 c2                	mov    edx,eax
c0009286:	c1 fa 1f             	sar    edx,0x1f
c0009289:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000928c:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c000928f:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009292:	0f b6 c0             	movzx  eax,al
c0009295:	83 e8 01             	sub    eax,0x1
c0009298:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000929b:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000929e:	0f b6 c0             	movzx  eax,al
c00092a1:	8b 04 85 20 71 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ee0]
c00092a8:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00092ab:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00092ae:	0f b6 c0             	movzx  eax,al
c00092b1:	83 f8 01             	cmp    eax,0x1
c00092b4:	76 7c                	jbe    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092b6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ba:	0f b7 c0             	movzx  eax,ax
c00092bd:	83 e0 03             	and    eax,0x3
c00092c0:	85 c0                	test   eax,eax
c00092c2:	75 6e                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c00092c4:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092c8:	0f b7 c8             	movzx  ecx,ax
c00092cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092d0:	89 c8                	mov    eax,ecx
c00092d2:	f7 e2                	mul    edx
c00092d4:	c1 ea 05             	shr    edx,0x5
c00092d7:	89 d0                	mov    eax,edx
c00092d9:	c1 e0 02             	shl    eax,0x2
c00092dc:	01 d0                	add    eax,edx
c00092de:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092e5:	01 d0                	add    eax,edx
c00092e7:	c1 e0 02             	shl    eax,0x2
c00092ea:	29 c1                	sub    ecx,eax
c00092ec:	89 c8                	mov    eax,ecx
c00092ee:	0f b7 c0             	movzx  eax,ax
c00092f1:	85 c0                	test   eax,eax
c00092f3:	75 39                	jne    c000932e <KeDatetimeToSeconds(datetime_t)+0x10a>
c00092f5:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092f9:	0f b7 c0             	movzx  eax,ax
c00092fc:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c0009302:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009307:	f7 e9                	imul   ecx
c0009309:	c1 fa 07             	sar    edx,0x7
c000930c:	89 c8                	mov    eax,ecx
c000930e:	c1 f8 1f             	sar    eax,0x1f
c0009311:	29 c2                	sub    edx,eax
c0009313:	89 d0                	mov    eax,edx
c0009315:	c1 e0 02             	shl    eax,0x2
c0009318:	01 d0                	add    eax,edx
c000931a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009321:	01 d0                	add    eax,edx
c0009323:	c1 e0 04             	shl    eax,0x4
c0009326:	29 c1                	sub    ecx,eax
c0009328:	89 ca                	mov    edx,ecx
c000932a:	85 d2                	test   edx,edx
c000932c:	75 04                	jne    c0009332 <KeDatetimeToSeconds(datetime_t)+0x10e>
c000932e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009332:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009336:	0f b7 c0             	movzx  eax,ax
c0009339:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 f8 46             	cmp    eax,0x46
c0009342:	0f 9f c0             	setg   al
c0009345:	0f b6 c0             	movzx  eax,al
c0009348:	85 c0                	test   eax,eax
c000934a:	0f 84 a4 00 00 00    	je     c00093f4 <KeDatetimeToSeconds(datetime_t)+0x1d0>
c0009350:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009357:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000935b:	0f b7 d0             	movzx  edx,ax
c000935e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009361:	39 c2                	cmp    edx,eax
c0009363:	0f 8e b8 01 00 00    	jle    c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009369:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000936c:	83 e0 03             	and    eax,0x3
c000936f:	85 c0                	test   eax,eax
c0009371:	75 6b                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c0009373:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009376:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000937b:	f7 e9                	imul   ecx
c000937d:	c1 fa 05             	sar    edx,0x5
c0009380:	89 c8                	mov    eax,ecx
c0009382:	c1 f8 1f             	sar    eax,0x1f
c0009385:	29 c2                	sub    edx,eax
c0009387:	89 d0                	mov    eax,edx
c0009389:	c1 e0 02             	shl    eax,0x2
c000938c:	01 d0                	add    eax,edx
c000938e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009395:	01 d0                	add    eax,edx
c0009397:	c1 e0 02             	shl    eax,0x2
c000939a:	29 c1                	sub    ecx,eax
c000939c:	89 ca                	mov    edx,ecx
c000939e:	85 d2                	test   edx,edx
c00093a0:	75 35                	jne    c00093d7 <KeDatetimeToSeconds(datetime_t)+0x1b3>
c00093a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093a5:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00093ab:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093b0:	f7 e9                	imul   ecx
c00093b2:	c1 fa 07             	sar    edx,0x7
c00093b5:	89 c8                	mov    eax,ecx
c00093b7:	c1 f8 1f             	sar    eax,0x1f
c00093ba:	29 c2                	sub    edx,eax
c00093bc:	89 d0                	mov    eax,edx
c00093be:	c1 e0 02             	shl    eax,0x2
c00093c1:	01 d0                	add    eax,edx
c00093c3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00093ca:	01 d0                	add    eax,edx
c00093cc:	c1 e0 04             	shl    eax,0x4
c00093cf:	29 c1                	sub    ecx,eax
c00093d1:	89 ca                	mov    edx,ecx
c00093d3:	85 d2                	test   edx,edx
c00093d5:	75 07                	jne    c00093de <KeDatetimeToSeconds(datetime_t)+0x1ba>
c00093d7:	b8 6e 01 00 00       	mov    eax,0x16e
c00093dc:	eb 05                	jmp    c00093e3 <KeDatetimeToSeconds(datetime_t)+0x1bf>
c00093de:	b8 6d 01 00 00       	mov    eax,0x16d
c00093e3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093e6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e9:	83 c0 01             	add    eax,0x1
c00093ec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093ef:	e9 63 ff ff ff       	jmp    c0009357 <KeDatetimeToSeconds(datetime_t)+0x133>
c00093f4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093f7:	83 f8 45             	cmp    eax,0x45
c00093fa:	0f 8f 21 01 00 00    	jg     c0009521 <KeDatetimeToSeconds(datetime_t)+0x2fd>
c0009400:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c0009407:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000940b:	0f b7 d0             	movzx  edx,ax
c000940e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009411:	39 c2                	cmp    edx,eax
c0009413:	0f 8d 8b 00 00 00    	jge    c00094a4 <KeDatetimeToSeconds(datetime_t)+0x280>
c0009419:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000941c:	83 e0 03             	and    eax,0x3
c000941f:	85 c0                	test   eax,eax
c0009421:	75 6b                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009423:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009426:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000942b:	f7 e9                	imul   ecx
c000942d:	c1 fa 05             	sar    edx,0x5
c0009430:	89 c8                	mov    eax,ecx
c0009432:	c1 f8 1f             	sar    eax,0x1f
c0009435:	29 c2                	sub    edx,eax
c0009437:	89 d0                	mov    eax,edx
c0009439:	c1 e0 02             	shl    eax,0x2
c000943c:	01 d0                	add    eax,edx
c000943e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009445:	01 d0                	add    eax,edx
c0009447:	c1 e0 02             	shl    eax,0x2
c000944a:	29 c1                	sub    ecx,eax
c000944c:	89 ca                	mov    edx,ecx
c000944e:	85 d2                	test   edx,edx
c0009450:	75 35                	jne    c0009487 <KeDatetimeToSeconds(datetime_t)+0x263>
c0009452:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009455:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000945b:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009460:	f7 e9                	imul   ecx
c0009462:	c1 fa 07             	sar    edx,0x7
c0009465:	89 c8                	mov    eax,ecx
c0009467:	c1 f8 1f             	sar    eax,0x1f
c000946a:	29 c2                	sub    edx,eax
c000946c:	89 d0                	mov    eax,edx
c000946e:	c1 e0 02             	shl    eax,0x2
c0009471:	01 d0                	add    eax,edx
c0009473:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000947a:	01 d0                	add    eax,edx
c000947c:	c1 e0 04             	shl    eax,0x4
c000947f:	29 c1                	sub    ecx,eax
c0009481:	89 ca                	mov    edx,ecx
c0009483:	85 d2                	test   edx,edx
c0009485:	75 07                	jne    c000948e <KeDatetimeToSeconds(datetime_t)+0x26a>
c0009487:	b8 6e 01 00 00       	mov    eax,0x16e
c000948c:	eb 05                	jmp    c0009493 <KeDatetimeToSeconds(datetime_t)+0x26f>
c000948e:	b8 6d 01 00 00       	mov    eax,0x16d
c0009493:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009496:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009499:	83 e8 01             	sub    eax,0x1
c000949c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000949f:	e9 63 ff ff ff       	jmp    c0009407 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c00094a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094a7:	83 e0 03             	and    eax,0x3
c00094aa:	85 c0                	test   eax,eax
c00094ac:	75 6b                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c00094ae:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00094b1:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094b6:	f7 e9                	imul   ecx
c00094b8:	c1 fa 05             	sar    edx,0x5
c00094bb:	89 c8                	mov    eax,ecx
c00094bd:	c1 f8 1f             	sar    eax,0x1f
c00094c0:	29 c2                	sub    edx,eax
c00094c2:	89 d0                	mov    eax,edx
c00094c4:	c1 e0 02             	shl    eax,0x2
c00094c7:	01 d0                	add    eax,edx
c00094c9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d0:	01 d0                	add    eax,edx
c00094d2:	c1 e0 02             	shl    eax,0x2
c00094d5:	29 c1                	sub    ecx,eax
c00094d7:	89 ca                	mov    edx,ecx
c00094d9:	85 d2                	test   edx,edx
c00094db:	75 35                	jne    c0009512 <KeDatetimeToSeconds(datetime_t)+0x2ee>
c00094dd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094e0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094e6:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094eb:	f7 e9                	imul   ecx
c00094ed:	c1 fa 07             	sar    edx,0x7
c00094f0:	89 c8                	mov    eax,ecx
c00094f2:	c1 f8 1f             	sar    eax,0x1f
c00094f5:	29 c2                	sub    edx,eax
c00094f7:	89 d0                	mov    eax,edx
c00094f9:	c1 e0 02             	shl    eax,0x2
c00094fc:	01 d0                	add    eax,edx
c00094fe:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009505:	01 d0                	add    eax,edx
c0009507:	c1 e0 04             	shl    eax,0x4
c000950a:	29 c1                	sub    ecx,eax
c000950c:	89 ca                	mov    edx,ecx
c000950e:	85 d2                	test   edx,edx
c0009510:	75 07                	jne    c0009519 <KeDatetimeToSeconds(datetime_t)+0x2f5>
c0009512:	b8 6e 01 00 00       	mov    eax,0x16e
c0009517:	eb 05                	jmp    c000951e <KeDatetimeToSeconds(datetime_t)+0x2fa>
c0009519:	b8 6d 01 00 00       	mov    eax,0x16d
c000951e:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009524:	89 c2                	mov    edx,eax
c0009526:	c1 fa 1f             	sar    edx,0x1f
c0009529:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c000952f:	6b c8 00             	imul   ecx,eax,0x0
c0009532:	01 d9                	add    ecx,ebx
c0009534:	bb 80 51 01 00       	mov    ebx,0x15180
c0009539:	f7 e3                	mul    ebx
c000953b:	01 d1                	add    ecx,edx
c000953d:	89 ca                	mov    edx,ecx
c000953f:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009542:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009545:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009548:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000954b:	83 c4 24             	add    esp,0x24
c000954e:	5b                   	pop    ebx
c000954f:	5d                   	pop    ebp
c0009550:	c3                   	ret    
c0009551:	90                   	nop

c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009552:	55                   	push   ebp
c0009553:	89 e5                	mov    ebp,esp
c0009555:	56                   	push   esi
c0009556:	53                   	push   ebx
c0009557:	83 ec 20             	sub    esp,0x20
c000955a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000955d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009560:	e8 bf fc ff ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c0009565:	83 c4 08             	add    esp,0x8
c0009568:	89 c3                	mov    ebx,eax
c000956a:	89 d6                	mov    esi,edx
c000956c:	a0 60 06 03 c0       	mov    al,ds:0xc0030660
c0009571:	0f b6 d0             	movzx  edx,al
c0009574:	a1 64 06 03 c0       	mov    eax,ds:0xc0030664
c0009579:	01 d0                	add    eax,edx
c000957b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0009581:	89 c2                	mov    edx,eax
c0009583:	c1 fa 1f             	sar    edx,0x1f
c0009586:	29 c3                	sub    ebx,eax
c0009588:	19 d6                	sbb    esi,edx
c000958a:	a0 61 06 03 c0       	mov    al,ds:0xc0030661
c000958f:	0f b6 c0             	movzx  eax,al
c0009592:	85 c0                	test   eax,eax
c0009594:	74 0c                	je     c00095a2 <Clock::setTimeInDatetimeLocal(datetime_t)+0x50>
c0009596:	b8 08 07 00 00       	mov    eax,0x708
c000959b:	ba 00 00 00 00       	mov    edx,0x0
c00095a0:	eb 0a                	jmp    c00095ac <Clock::setTimeInDatetimeLocal(datetime_t)+0x5a>
c00095a2:	b8 00 00 00 00       	mov    eax,0x0
c00095a7:	ba 00 00 00 00       	mov    edx,0x0
c00095ac:	29 c3                	sub    ebx,eax
c00095ae:	19 d6                	sbb    esi,edx
c00095b0:	89 d8                	mov    eax,ebx
c00095b2:	89 f2                	mov    edx,esi
c00095b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00095b7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00095ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00095bd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00095c0:	89 d0                	mov    eax,edx
c00095c2:	31 d2                	xor    edx,edx
c00095c4:	89 c3                	mov    ebx,eax
c00095c6:	89 d6                	mov    esi,edx
c00095c8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095cb:	80 e5 ff             	and    ch,0xff
c00095ce:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095d1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095d4:	83 e1 00             	and    ecx,0x0
c00095d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095da:	83 ec 0c             	sub    esp,0xc
c00095dd:	56                   	push   esi
c00095de:	53                   	push   ebx
c00095df:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095e5:	68 0e 71 02 c0       	push   0xc002710e
c00095ea:	e8 77 d9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00095ef:	83 c4 20             	add    esp,0x20
c00095f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00095f7:	83 c0 2c             	add    eax,0x2c
c00095fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00095fc:	83 ec 04             	sub    esp,0x4
c00095ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009602:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009605:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0009608:	ff d0                	call   eax
c000960a:	83 c4 10             	add    esp,0x10
c000960d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0009610:	5b                   	pop    ebx
c0009611:	5e                   	pop    esi
c0009612:	5d                   	pop    ebp
c0009613:	c3                   	ret    

c0009614 <KeSecondsToDatetime(unsigned long long)>:
c0009614:	55                   	push   ebp
c0009615:	89 e5                	mov    ebp,esp
c0009617:	83 ec 48             	sub    esp,0x48
c000961a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000961d:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0009620:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009623:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009626:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009629:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000962c:	6a 00                	push   0x0
c000962e:	68 80 51 01 00       	push   0x15180
c0009633:	52                   	push   edx
c0009634:	50                   	push   eax
c0009635:	e8 8a 86 01 00       	call   c0021cc4 <__udivdi3>
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009642:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009645:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009648:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000964b:	6a 00                	push   0x0
c000964d:	68 80 51 01 00       	push   0x15180
c0009652:	52                   	push   edx
c0009653:	50                   	push   eax
c0009654:	e8 6b 87 01 00       	call   c0021dc4 <__umoddi3>
c0009659:	83 c4 10             	add    esp,0x10
c000965c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000965f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009663:	79 0b                	jns    c0009670 <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009665:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000966c:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c0009670:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009673:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009678:	89 c8                	mov    eax,ecx
c000967a:	f7 ea                	imul   edx
c000967c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000967f:	c1 f8 0b             	sar    eax,0xb
c0009682:	89 c2                	mov    edx,eax
c0009684:	89 c8                	mov    eax,ecx
c0009686:	c1 f8 1f             	sar    eax,0x1f
c0009689:	29 c2                	sub    edx,eax
c000968b:	89 d0                	mov    eax,edx
c000968d:	88 c2                	mov    dl,al
c000968f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009692:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009695:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009698:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000969d:	89 c8                	mov    eax,ecx
c000969f:	f7 ea                	imul   edx
c00096a1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096a4:	c1 f8 0b             	sar    eax,0xb
c00096a7:	89 c2                	mov    edx,eax
c00096a9:	89 c8                	mov    eax,ecx
c00096ab:	c1 f8 1f             	sar    eax,0x1f
c00096ae:	29 c2                	sub    edx,eax
c00096b0:	89 d0                	mov    eax,edx
c00096b2:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00096b8:	29 c1                	sub    ecx,eax
c00096ba:	89 c8                	mov    eax,ecx
c00096bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096bf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096c2:	ba 89 88 88 88       	mov    edx,0x88888889
c00096c7:	89 c8                	mov    eax,ecx
c00096c9:	f7 ea                	imul   edx
c00096cb:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096ce:	c1 f8 05             	sar    eax,0x5
c00096d1:	89 c2                	mov    edx,eax
c00096d3:	89 c8                	mov    eax,ecx
c00096d5:	c1 f8 1f             	sar    eax,0x1f
c00096d8:	29 c2                	sub    edx,eax
c00096da:	89 d0                	mov    eax,edx
c00096dc:	88 c2                	mov    dl,al
c00096de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096e1:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096e4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096e7:	ba 89 88 88 88       	mov    edx,0x88888889
c00096ec:	89 c8                	mov    eax,ecx
c00096ee:	f7 ea                	imul   edx
c00096f0:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096f3:	c1 f8 05             	sar    eax,0x5
c00096f6:	89 c2                	mov    edx,eax
c00096f8:	89 c8                	mov    eax,ecx
c00096fa:	c1 f8 1f             	sar    eax,0x1f
c00096fd:	29 c2                	sub    edx,eax
c00096ff:	89 d0                	mov    eax,edx
c0009701:	c1 e0 04             	shl    eax,0x4
c0009704:	29 d0                	sub    eax,edx
c0009706:	c1 e0 02             	shl    eax,0x2
c0009709:	29 c1                	sub    ecx,eax
c000970b:	89 ca                	mov    edx,ecx
c000970d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009710:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009713:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009717:	79 20                	jns    c0009739 <KeSecondsToDatetime(unsigned long long)+0x125>
c0009719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000971c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009722:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009727:	89 c8                	mov    eax,ecx
c0009729:	f7 ea                	imul   edx
c000972b:	c1 fa 0f             	sar    edx,0xf
c000972e:	89 c8                	mov    eax,ecx
c0009730:	c1 f8 1f             	sar    eax,0x1f
c0009733:	29 c2                	sub    edx,eax
c0009735:	89 d0                	mov    eax,edx
c0009737:	eb 18                	jmp    c0009751 <KeSecondsToDatetime(unsigned long long)+0x13d>
c0009739:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000973c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009741:	89 c8                	mov    eax,ecx
c0009743:	f7 ea                	imul   edx
c0009745:	c1 fa 0f             	sar    edx,0xf
c0009748:	89 c8                	mov    eax,ecx
c000974a:	c1 f8 1f             	sar    eax,0x1f
c000974d:	29 c2                	sub    edx,eax
c000974f:	89 d0                	mov    eax,edx
c0009751:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009754:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009757:	69 d0 4f c5 fd ff    	imul   edx,eax,0xfffdc54f
c000975d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009760:	01 d0                	add    eax,edx
c0009762:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009765:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009768:	c1 e8 02             	shr    eax,0x2
c000976b:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009770:	f7 e2                	mul    edx
c0009772:	c1 ea 07             	shr    edx,0x7
c0009775:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009778:	29 d0                	sub    eax,edx
c000977a:	89 c1                	mov    ecx,eax
c000977c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977f:	c1 e8 02             	shr    eax,0x2
c0009782:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c0009787:	f7 e2                	mul    edx
c0009789:	89 d0                	mov    eax,edx
c000978b:	c1 e8 0b             	shr    eax,0xb
c000978e:	01 c1                	add    ecx,eax
c0009790:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009793:	c1 e8 04             	shr    eax,0x4
c0009796:	ba 41 d6 72 00       	mov    edx,0x72d641
c000979b:	f7 e2                	mul    edx
c000979d:	89 d0                	mov    eax,edx
c000979f:	c1 e8 04             	shr    eax,0x4
c00097a2:	29 c1                	sub    ecx,eax
c00097a4:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097a9:	89 c8                	mov    eax,ecx
c00097ab:	f7 e2                	mul    edx
c00097ad:	89 c8                	mov    eax,ecx
c00097af:	29 d0                	sub    eax,edx
c00097b1:	d1 e8                	shr    eax,1
c00097b3:	01 d0                	add    eax,edx
c00097b5:	c1 e8 08             	shr    eax,0x8
c00097b8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097be:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c3:	f7 e2                	mul    edx
c00097c5:	89 d1                	mov    ecx,edx
c00097c7:	c1 e9 05             	shr    ecx,0x5
c00097ca:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097cd:	89 d0                	mov    eax,edx
c00097cf:	c1 e0 03             	shl    eax,0x3
c00097d2:	01 d0                	add    eax,edx
c00097d4:	c1 e0 03             	shl    eax,0x3
c00097d7:	01 d0                	add    eax,edx
c00097d9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e0:	01 c2                	add    edx,eax
c00097e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097e5:	c1 e8 02             	shr    eax,0x2
c00097e8:	01 d0                	add    eax,edx
c00097ea:	29 c1                	sub    ecx,eax
c00097ec:	89 ca                	mov    edx,ecx
c00097ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f1:	01 d0                	add    eax,edx
c00097f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097f6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097f9:	89 d0                	mov    eax,edx
c00097fb:	c1 e0 02             	shl    eax,0x2
c00097fe:	01 d0                	add    eax,edx
c0009800:	83 c0 02             	add    eax,0x2
c0009803:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c0009808:	f7 e2                	mul    edx
c000980a:	89 d0                	mov    eax,edx
c000980c:	c1 e8 07             	shr    eax,0x7
c000980f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009812:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009815:	89 d0                	mov    eax,edx
c0009817:	c1 e0 03             	shl    eax,0x3
c000981a:	01 d0                	add    eax,edx
c000981c:	89 c2                	mov    edx,eax
c000981e:	c1 e2 04             	shl    edx,0x4
c0009821:	01 d0                	add    eax,edx
c0009823:	83 c0 02             	add    eax,0x2
c0009826:	ba cd cc cc cc       	mov    edx,0xcccccccd
c000982b:	f7 e2                	mul    edx
c000982d:	c1 ea 02             	shr    edx,0x2
c0009830:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009833:	29 d0                	sub    eax,edx
c0009835:	83 c0 01             	add    eax,0x1
c0009838:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000983b:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c000983f:	77 07                	ja     c0009848 <KeSecondsToDatetime(unsigned long long)+0x234>
c0009841:	b8 02 00 00 00       	mov    eax,0x2
c0009846:	eb 05                	jmp    c000984d <KeSecondsToDatetime(unsigned long long)+0x239>
c0009848:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c000984d:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009850:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009853:	89 d0                	mov    eax,edx
c0009855:	c1 e0 02             	shl    eax,0x2
c0009858:	01 d0                	add    eax,edx
c000985a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009861:	01 d0                	add    eax,edx
c0009863:	c1 e0 04             	shl    eax,0x4
c0009866:	89 c2                	mov    edx,eax
c0009868:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000986b:	01 c2                	add    edx,eax
c000986d:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009871:	0f 96 c0             	setbe  al
c0009874:	0f b6 c0             	movzx  eax,al
c0009877:	01 d0                	add    eax,edx
c0009879:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c000987c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000987f:	89 c2                	mov    edx,eax
c0009881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009884:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0009888:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000988b:	83 c0 01             	add    eax,0x1
c000988e:	88 c2                	mov    dl,al
c0009890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009893:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009896:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0009899:	88 c2                	mov    dl,al
c000989b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000989e:	88 10                	mov    BYTE PTR [eax],dl
c00098a0:	90                   	nop
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	c9                   	leave  
c00098a5:	c2 04 00             	ret    0x4

c00098a8 <Clock::timeInDatetimeLocal()>:
c00098a8:	55                   	push   ebp
c00098a9:	89 e5                	mov    ebp,esp
c00098ab:	83 ec 08             	sub    esp,0x8
c00098ae:	83 ec 0c             	sub    esp,0xc
c00098b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098b4:	e8 81 f8 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098bf:	83 ec 04             	sub    esp,0x4
c00098c2:	52                   	push   edx
c00098c3:	50                   	push   eax
c00098c4:	51                   	push   ecx
c00098c5:	e8 4a fd ff ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c00098ca:	83 c4 0c             	add    esp,0xc
c00098cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d0:	c9                   	leave  
c00098d1:	c2 04 00             	ret    0x4

c00098d4 <Device::hibernate()>:
c00098d4:	c3                   	ret    
c00098d5:	90                   	nop

c00098d6 <Device::wake()>:
c00098d6:	c3                   	ret    
c00098d7:	90                   	nop

c00098d8 <Device::detect()>:
c00098d8:	c3                   	ret    
c00098d9:	90                   	nop

c00098da <Device::disableLegacy()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::powerSaving(PowerSavingLevel)>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <DriverlessDevice::close(int, int, void*)>:
c00098de:	31 c0                	xor    eax,eax
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <DriverlessDevice::detect()>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::open(int, int, void*)>:
c00098e4:	83 ec 18             	sub    esp,0x18
c00098e7:	68 8c 71 02 c0       	push   0xc002718c
c00098ec:	e8 e3 61 00 00       	call   c000fad4 <KePanic(char const*)>
c00098f1:	83 c8 ff             	or     eax,0xffffffff
c00098f4:	83 c4 1c             	add    esp,0x1c
c00098f7:	c3                   	ret    

c00098f8 <Device::~Device()>:
c00098f8:	ba 30 72 02 c0       	mov    edx,0xc0027230
c00098fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009901:	89 10                	mov    DWORD PTR [eax],edx
c0009903:	90                   	nop
c0009904:	c3                   	ret    
c0009905:	90                   	nop

c0009906 <Device::~Device()>:
c0009906:	83 ec 0c             	sub    esp,0xc
c0009909:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000990d:	e8 e6 ff ff ff       	call   c00098f8 <Device::~Device()>
c0009912:	83 c4 04             	add    esp,0x4
c0009915:	83 ec 08             	sub    esp,0x8
c0009918:	68 58 01 00 00       	push   0x158
c000991d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009921:	e8 62 39 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c0009926:	83 c4 10             	add    esp,0x10
c0009929:	83 c4 0c             	add    esp,0xc
c000992c:	c3                   	ret    
c000992d:	90                   	nop

c000992e <Device::findAndLoadDriver()>:
c000992e:	c7 44 24 04 aa 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc00271aa
c0009936:	e9 2b d6 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000993b:	90                   	nop

c000993c <Device::preOpenPCI(PCIDeviceInfo)>:
c000993c:	57                   	push   edi
c000993d:	b9 09 00 00 00       	mov    ecx,0x9
c0009942:	56                   	push   esi
c0009943:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0009947:	8d 74 24 10          	lea    esi,[esp+0x10]
c000994b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009955:	81 c7 18 01 00 00    	add    edi,0x118
c000995b:	fc                   	cld    
c000995c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000995e:	5e                   	pop    esi
c000995f:	5f                   	pop    edi
c0009960:	c3                   	ret    
c0009961:	90                   	nop

c0009962 <Device::preOpenACPI(void*, char*, char*)>:
c0009962:	57                   	push   edi
c0009963:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009968:	56                   	push   esi
c0009969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000996d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009971:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009975:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000997f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009985:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000998b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000998d:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009993:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009997:	b9 0e 00 00 00       	mov    ecx,0xe
c000999c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000999e:	5e                   	pop    esi
c000999f:	5f                   	pop    edi
c00099a0:	c3                   	ret    
c00099a1:	90                   	nop

c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a2:	53                   	push   ebx
c00099a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099af:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b3:	0f b6 c0             	movzx  eax,al
c00099b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099be:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099c6:	5b                   	pop    ebx
c00099c7:	e9 f1 13 01 00       	jmp    c001adbd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099cc <Device::getParent()>:
c00099cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099d6:	c3                   	ret    
c00099d7:	90                   	nop

c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f1:	e9 38 15 01 00       	jmp    c001af2e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099f6 <Device::addChild(Device*)>:
c00099f6:	53                   	push   ebx
c00099f7:	83 ec 08             	sub    esp,0x8
c00099fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00099fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a02:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a08:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a10:	85 d2                	test   edx,edx
c0009a12:	74 04                	je     c0009a18 <Device::addChild(Device*)+0x22>
c0009a14:	89 d3                	mov    ebx,edx
c0009a16:	eb f6                	jmp    c0009a0e <Device::addChild(Device*)+0x18>
c0009a18:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a1b:	83 ec 0c             	sub    esp,0xc
c0009a1e:	6a 08                	push   0x8
c0009a20:	e8 5b 5c 00 00       	call   c000f680 <malloc>
c0009a25:	89 03                	mov    DWORD PTR [ebx],eax
c0009a27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a34:	83 c4 18             	add    esp,0x18
c0009a37:	5b                   	pop    ebx
c0009a38:	c3                   	ret    
c0009a39:	90                   	nop

c0009a3a <Device::removeAllChildren()>:
c0009a3a:	56                   	push   esi
c0009a3b:	53                   	push   ebx
c0009a3c:	52                   	push   edx
c0009a3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a41:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a47:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a4a:	74 17                	je     c0009a63 <Device::removeAllChildren()+0x29>
c0009a4c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a4f:	85 c0                	test   eax,eax
c0009a51:	74 0c                	je     c0009a5f <Device::removeAllChildren()+0x25>
c0009a53:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a55:	83 ec 0c             	sub    esp,0xc
c0009a58:	50                   	push   eax
c0009a59:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a5c:	83 c4 10             	add    esp,0x10
c0009a5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a61:	eb e4                	jmp    c0009a47 <Device::removeAllChildren()+0xd>
c0009a63:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a6f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a7c:	58                   	pop    eax
c0009a7d:	5b                   	pop    ebx
c0009a7e:	5e                   	pop    esi
c0009a7f:	c3                   	ret    

c0009a80 <Device::hibernateAll()>:
c0009a80:	53                   	push   ebx
c0009a81:	83 ec 14             	sub    esp,0x14
c0009a84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8a:	53                   	push   ebx
c0009a8b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a8e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9a:	74 0f                	je     c0009aab <Device::hibernateAll()+0x2b>
c0009a9c:	83 ec 0c             	sub    esp,0xc
c0009a9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa2:	e8 d9 ff ff ff       	call   c0009a80 <Device::hibernateAll()>
c0009aa7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aa9:	eb e9                	jmp    c0009a94 <Device::hibernateAll()+0x14>
c0009aab:	83 c4 08             	add    esp,0x8
c0009aae:	5b                   	pop    ebx
c0009aaf:	c3                   	ret    

c0009ab0 <Device::wakeAll()>:
c0009ab0:	53                   	push   ebx
c0009ab1:	83 ec 14             	sub    esp,0x14
c0009ab4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aba:	53                   	push   ebx
c0009abb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009abe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ac4:	83 c4 10             	add    esp,0x10
c0009ac7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aca:	74 0f                	je     c0009adb <Device::wakeAll()+0x2b>
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad2:	e8 d9 ff ff ff       	call   c0009ab0 <Device::wakeAll()>
c0009ad7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ad9:	eb e9                	jmp    c0009ac4 <Device::wakeAll()+0x14>
c0009adb:	83 c4 08             	add    esp,0x8
c0009ade:	5b                   	pop    ebx
c0009adf:	c3                   	ret    

c0009ae0 <Device::detectAll()>:
c0009ae0:	53                   	push   ebx
c0009ae1:	83 ec 14             	sub    esp,0x14
c0009ae4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009ae8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aea:	53                   	push   ebx
c0009aeb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009aee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af4:	83 c4 10             	add    esp,0x10
c0009af7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009afa:	74 0f                	je     c0009b0b <Device::detectAll()+0x2b>
c0009afc:	83 ec 0c             	sub    esp,0xc
c0009aff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b02:	e8 d9 ff ff ff       	call   c0009ae0 <Device::detectAll()>
c0009b07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b09:	eb e9                	jmp    c0009af4 <Device::detectAll()+0x14>
c0009b0b:	83 c4 08             	add    esp,0x8
c0009b0e:	5b                   	pop    ebx
c0009b0f:	c3                   	ret    

c0009b10 <Device::disableLegacyAll()>:
c0009b10:	c3                   	ret    
c0009b11:	90                   	nop

c0009b12 <Device::loadDriversForAll()>:
c0009b12:	c3                   	ret    
c0009b13:	90                   	nop

c0009b14 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b14:	56                   	push   esi
c0009b15:	53                   	push   ebx
c0009b16:	83 ec 0c             	sub    esp,0xc
c0009b19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b23:	56                   	push   esi
c0009b24:	53                   	push   ebx
c0009b25:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b34:	74 0f                	je     c0009b45 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b36:	52                   	push   edx
c0009b37:	52                   	push   edx
c0009b38:	56                   	push   esi
c0009b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b3c:	e8 d3 ff ff ff       	call   c0009b14 <Device::powerSavingAll(PowerSavingLevel)>
c0009b41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b43:	eb e9                	jmp    c0009b2e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b45:	58                   	pop    eax
c0009b46:	5b                   	pop    ebx
c0009b47:	5e                   	pop    esi
c0009b48:	c3                   	ret    
c0009b49:	90                   	nop

c0009b4a <Device::setName(char const*)>:
c0009b4a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b52:	e9 f9 6a ff ff       	jmp    c0000650 <strcpy>
c0009b57:	90                   	nop

c0009b58 <Device::Device(char const*)>:
c0009b58:	83 ec 1c             	sub    esp,0x1c
c0009b5b:	ba 30 72 02 c0       	mov    edx,0xc0027230
c0009b60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b64:	89 10                	mov    DWORD PTR [eax],edx
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b78:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b86:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b94:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009b9e:	83 ec 08             	sub    esp,0x8
c0009ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba9:	e8 9c ff ff ff       	call   c0009b4a <Device::setName(char const*)>
c0009bae:	83 c4 10             	add    esp,0x10
c0009bb1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bb9:	83 ec 0c             	sub    esp,0xc
c0009bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc0:	e8 bb 5a 00 00       	call   c000f680 <malloc>
c0009bc5:	83 c4 10             	add    esp,0x10
c0009bc8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bd5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bd9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009bdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009be9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c04:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c36:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c44:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c4e:	90                   	nop
c0009c4f:	83 c4 1c             	add    esp,0x1c
c0009c52:	c3                   	ret    
c0009c53:	90                   	nop

c0009c54 <Device::getName()>:
c0009c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c58:	05 d0 00 00 00       	add    eax,0xd0
c0009c5d:	c3                   	ret    

c0009c5e <Device::closeAll()>:
c0009c5e:	53                   	push   ebx
c0009c5f:	83 ec 08             	sub    esp,0x8
c0009c62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c66:	53                   	push   ebx
c0009c67:	e8 e8 ff ff ff       	call   c0009c54 <Device::getName()>
c0009c6c:	52                   	push   edx
c0009c6d:	50                   	push   eax
c0009c6e:	68 e4 71 02 c0       	push   0xc00271e4
c0009c73:	e8 ee d2 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0009c78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c7a:	6a 00                	push   0x0
c0009c7c:	6a 00                	push   0x0
c0009c7e:	6a 00                	push   0x0
c0009c80:	53                   	push   ebx
c0009c81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c8a:	83 c4 20             	add    esp,0x20
c0009c8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c90:	74 12                	je     c0009ca4 <Device::closeAll()+0x46>
c0009c92:	83 ec 0c             	sub    esp,0xc
c0009c95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c98:	e8 c1 ff ff ff       	call   c0009c5e <Device::closeAll()>
c0009c9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009c9f:	83 c4 10             	add    esp,0x10
c0009ca2:	eb e9                	jmp    c0009c8d <Device::closeAll()+0x2f>
c0009ca4:	83 c4 08             	add    esp,0x8
c0009ca7:	5b                   	pop    ebx
c0009ca8:	c3                   	ret    
c0009ca9:	90                   	nop

c0009caa <DriverlessDevice::DriverlessDevice(char const*)>:
c0009caa:	83 ec 0c             	sub    esp,0xc
c0009cad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb1:	83 ec 08             	sub    esp,0x8
c0009cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb8:	50                   	push   eax
c0009cb9:	e8 9a fe ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009cbe:	83 c4 10             	add    esp,0x10
c0009cc1:	ba 5c 72 02 c0       	mov    edx,0xc002725c
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	89 10                	mov    DWORD PTR [eax],edx
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009cda:	90                   	nop
c0009cdb:	83 c4 0c             	add    esp,0xc
c0009cde:	c3                   	ret    
c0009cdf:	90                   	nop

c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce0:	57                   	push   edi
c0009ce1:	56                   	push   esi
c0009ce2:	53                   	push   ebx
c0009ce3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ce7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009ceb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cef:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cf5:	75 0c                	jne    c0009d03 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cf7:	52                   	push   edx
c0009cf8:	52                   	push   edx
c0009cf9:	53                   	push   ebx
c0009cfa:	56                   	push   esi
c0009cfb:	e8 16 bb 01 00       	call   c0025816 <LinkedList<Device>::addElement(Device*)>
c0009d00:	83 c4 10             	add    esp,0x10
c0009d03:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d0c:	74 12                	je     c0009d20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d0e:	50                   	push   eax
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d14:	e8 c7 ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	eb e9                	jmp    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d20:	5b                   	pop    ebx
c0009d21:	5e                   	pop    esi
c0009d22:	5f                   	pop    edi
c0009d23:	c3                   	ret    

c0009d24 <getDevicesOfType(DeviceType)>:
c0009d24:	53                   	push   ebx
c0009d25:	83 ec 14             	sub    esp,0x14
c0009d28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d2c:	53                   	push   ebx
c0009d2d:	e8 c0 bb 01 00       	call   c00258f2 <LinkedList<Device>::LinkedList()>
c0009d32:	83 c4 0c             	add    esp,0xc
c0009d35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d39:	53                   	push   ebx
c0009d3a:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c0009d40:	e8 9b ff ff ff       	call   c0009ce0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d45:	83 c4 18             	add    esp,0x18
c0009d48:	89 d8                	mov    eax,ebx
c0009d4a:	5b                   	pop    ebx
c0009d4b:	c2 04 00             	ret    0x4
c0009d4e:	66 90                	xchg   ax,ax

c0009d50 <HardDiskController::HardDiskController(char const*)>:
c0009d50:	83 ec 0c             	sub    esp,0xc
c0009d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d57:	83 ec 08             	sub    esp,0x8
c0009d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d5e:	50                   	push   eax
c0009d5f:	e8 f4 fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009d64:	83 c4 10             	add    esp,0x10
c0009d67:	ba 88 72 02 c0       	mov    edx,0xc0027288
c0009d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d70:	89 10                	mov    DWORD PTR [eax],edx
c0009d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d76:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop
c0009d86:	66 90                	xchg   ax,ax

c0009d88 <HardDiskController::~HardDiskController()>:
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	ba 88 72 02 c0       	mov    edx,0xc0027288
c0009d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d94:	89 10                	mov    DWORD PTR [eax],edx
c0009d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9a:	83 ec 0c             	sub    esp,0xc
c0009d9d:	50                   	push   eax
c0009d9e:	e8 55 fb ff ff       	call   c00098f8 <Device::~Device()>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	90                   	nop
c0009da7:	83 c4 0c             	add    esp,0xc
c0009daa:	c3                   	ret    
c0009dab:	90                   	nop

c0009dac <HardDiskController::~HardDiskController()>:
c0009dac:	83 ec 0c             	sub    esp,0xc
c0009daf:	83 ec 0c             	sub    esp,0xc
c0009db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db6:	e8 cd ff ff ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0009dbb:	83 c4 10             	add    esp,0x10
c0009dbe:	83 ec 08             	sub    esp,0x8
c0009dc1:	68 58 01 00 00       	push   0x158
c0009dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dca:	e8 b9 34 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	83 c4 0c             	add    esp,0xc
c0009dd5:	c3                   	ret    

c0009dd6 <PhysicalDisk::eject()>:
c0009dd6:	83 c8 ff             	or     eax,0xffffffff
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dda:	83 ec 0c             	sub    esp,0xc
c0009ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de1:	83 ec 08             	sub    esp,0x8
c0009de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de8:	50                   	push   eax
c0009de9:	e8 6a fd ff ff       	call   c0009b58 <Device::Device(char const*)>
c0009dee:	83 c4 10             	add    esp,0x10
c0009df1:	ba b4 72 02 c0       	mov    edx,0xc00272b4
c0009df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfa:	89 10                	mov    DWORD PTR [eax],edx
c0009dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e00:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e16:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e28:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e32:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e3c:	90                   	nop
c0009e3d:	83 c4 0c             	add    esp,0xc
c0009e40:	c3                   	ret    
c0009e41:	90                   	nop

c0009e42 <PhysicalDisk::startCache()>:
c0009e42:	56                   	push   esi
c0009e43:	53                   	push   ebx
c0009e44:	83 ec 10             	sub    esp,0x10
c0009e47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4b:	6a 44                	push   0x44
c0009e4d:	e8 2e 58 00 00       	call   c000f680 <malloc>
c0009e52:	89 c6                	mov    esi,eax
c0009e54:	58                   	pop    eax
c0009e55:	5a                   	pop    edx
c0009e56:	53                   	push   ebx
c0009e57:	56                   	push   esi
c0009e58:	e8 b7 13 00 00       	call   c000b214 <VCache::VCache(PhysicalDisk*)>
c0009e5d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e63:	83 c4 14             	add    esp,0x14
c0009e66:	5b                   	pop    ebx
c0009e67:	5e                   	pop    esi
c0009e68:	c3                   	ret    
c0009e69:	90                   	nop

c0009e6a <PhysicalDisk::~PhysicalDisk()>:
c0009e6a:	83 ec 0c             	sub    esp,0xc
c0009e6d:	ba b4 72 02 c0       	mov    edx,0xc00272b4
c0009e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e76:	89 10                	mov    DWORD PTR [eax],edx
c0009e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7c:	83 ec 0c             	sub    esp,0xc
c0009e7f:	50                   	push   eax
c0009e80:	e8 73 fa ff ff       	call   c00098f8 <Device::~Device()>
c0009e85:	83 c4 10             	add    esp,0x10
c0009e88:	90                   	nop
c0009e89:	83 c4 0c             	add    esp,0xc
c0009e8c:	c3                   	ret    
c0009e8d:	90                   	nop

c0009e8e <PhysicalDisk::~PhysicalDisk()>:
c0009e8e:	83 ec 0c             	sub    esp,0xc
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e98:	e8 cd ff ff ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0009e9d:	83 c4 10             	add    esp,0x10
c0009ea0:	83 ec 08             	sub    esp,0x8
c0009ea3:	68 6c 01 00 00       	push   0x16c
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	e8 d7 33 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c0009eb1:	83 c4 10             	add    esp,0x10
c0009eb4:	83 c4 0c             	add    esp,0xc
c0009eb7:	c3                   	ret    

c0009eb8 <startGUI(void*)>:
c0009eb8:	55                   	push   ebp
c0009eb9:	89 e5                	mov    ebp,esp
c0009ebb:	83 ec 08             	sub    esp,0x8
c0009ebe:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0009ec6:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0009ecb:	85 c0                	test   eax,eax
c0009ecd:	75 01                	jne    c0009ed0 <startGUI(void*)+0x18>
c0009ecf:	fb                   	sti    
c0009ed0:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0009ed5:	83 ec 04             	sub    esp,0x4
c0009ed8:	6a 00                	push   0x0
c0009eda:	50                   	push   eax
c0009edb:	68 e4 72 02 c0       	push   0xc00272e4
c0009ee0:	e8 e6 bd 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0009eed:	83 ec 04             	sub    esp,0x4
c0009ef0:	6a 00                	push   0x0
c0009ef2:	50                   	push   eax
c0009ef3:	68 fe 72 02 c0       	push   0xc00272fe
c0009ef8:	e8 ce bd 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009efd:	83 c4 10             	add    esp,0x10
c0009f00:	eb fe                	jmp    c0009f00 <startGUI(void*)+0x48>

c0009f02 <startGUIVESA(void*)>:
c0009f02:	55                   	push   ebp
c0009f03:	89 e5                	mov    ebp,esp
c0009f05:	83 ec 08             	sub    esp,0x8
c0009f08:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0009f10:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0009f15:	85 c0                	test   eax,eax
c0009f17:	75 01                	jne    c0009f1a <startGUIVESA(void*)+0x18>
c0009f19:	fb                   	sti    
c0009f1a:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0009f1f:	83 ec 04             	sub    esp,0x4
c0009f22:	6a 00                	push   0x0
c0009f24:	50                   	push   eax
c0009f25:	68 1c 73 02 c0       	push   0xc002731c
c0009f2a:	e8 9c bd 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f2f:	83 c4 10             	add    esp,0x10
c0009f32:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0009f37:	83 ec 04             	sub    esp,0x4
c0009f3a:	6a 00                	push   0x0
c0009f3c:	50                   	push   eax
c0009f3d:	68 fe 72 02 c0       	push   0xc00272fe
c0009f42:	e8 84 bd 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0009f47:	83 c4 10             	add    esp,0x10
c0009f4a:	eb fe                	jmp    c0009f4a <startGUIVESA(void*)+0x48>

c0009f4c <sendKeyToTerminal(unsigned char)>:
c0009f4c:	55                   	push   ebp
c0009f4d:	89 e5                	mov    ebp,esp
c0009f4f:	83 ec 28             	sub    esp,0x28
c0009f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f55:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f58:	a1 f4 11 03 c0       	mov    eax,ds:0xc00311f4
c0009f5d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f61:	83 ec 08             	sub    esp,0x8
c0009f64:	52                   	push   edx
c0009f65:	50                   	push   eax
c0009f66:	e8 f1 87 00 00       	call   c001275c <VgaText::receiveKey(unsigned char)>
c0009f6b:	83 c4 10             	add    esp,0x10
c0009f6e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f72:	83 f8 0a             	cmp    eax,0xa
c0009f75:	74 16                	je     c0009f8d <sendKeyToTerminal(unsigned char)+0x41>
c0009f77:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f7b:	83 f8 03             	cmp    eax,0x3
c0009f7e:	74 0d                	je     c0009f8d <sendKeyToTerminal(unsigned char)+0x41>
c0009f80:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009f84:	83 f8 1c             	cmp    eax,0x1c
c0009f87:	0f 85 92 00 00 00    	jne    c000a01f <sendKeyToTerminal(unsigned char)+0xd3>
c0009f8d:	fa                   	cli    
c0009f8e:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0009f93:	83 c0 01             	add    eax,0x1
c0009f96:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0009f9b:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0009fa0:	83 c0 01             	add    eax,0x1
c0009fa3:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0009fa8:	a1 80 06 03 c0       	mov    eax,ds:0xc0030680
c0009fad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fb0:	c7 05 80 06 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030680,0x0
c0009fba:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009fbe:	74 1f                	je     c0009fdf <sendKeyToTerminal(unsigned char)+0x93>
c0009fc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009fc3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009fc6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009fc9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009fcc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fcf:	83 ec 0c             	sub    esp,0xc
c0009fd2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009fd5:	e8 ca c9 00 00       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c0009fda:	83 c4 10             	add    esp,0x10
c0009fdd:	eb db                	jmp    c0009fba <sendKeyToTerminal(unsigned char)+0x6e>
c0009fdf:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0009fe4:	83 e8 01             	sub    eax,0x1
c0009fe7:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0009fec:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0009ff1:	85 c0                	test   eax,eax
c0009ff3:	75 18                	jne    c000a00d <sendKeyToTerminal(unsigned char)+0xc1>
c0009ff5:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0009ffa:	85 c0                	test   eax,eax
c0009ffc:	74 0f                	je     c000a00d <sendKeyToTerminal(unsigned char)+0xc1>
c0009ffe:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c000a008:	e8 3f c6 00 00       	call   c001664c <schedule()>
c000a00d:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000a015:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000a01a:	85 c0                	test   eax,eax
c000a01c:	75 01                	jne    c000a01f <sendKeyToTerminal(unsigned char)+0xd3>
c000a01e:	fb                   	sti    
c000a01f:	90                   	nop
c000a020:	c9                   	leave  
c000a021:	c3                   	ret    

c000a022 <sendKeyboardToken(KeyboardToken)>:
c000a022:	55                   	push   ebp
c000a023:	89 e5                	mov    ebp,esp
c000a025:	83 ec 18             	sub    esp,0x18
c000a028:	e8 24 63 00 00       	call   c0010351 <KeUserIOReceived()>
c000a02d:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a033:	0f b7 c0             	movzx  eax,ax
c000a036:	83 f2 01             	xor    edx,0x1
c000a039:	88 90 a0 06 03 c0    	mov    BYTE PTR [eax-0x3ffcf960],dl
c000a03f:	a1 88 06 03 c0       	mov    eax,ds:0xc0030688
c000a044:	85 c0                	test   eax,eax
c000a046:	74 24                	je     c000a06c <sendKeyboardToken(KeyboardToken)+0x4a>
c000a048:	8b 15 88 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030688
c000a04e:	83 ec 04             	sub    esp,0x4
c000a051:	68 a0 06 03 c0       	push   0xc00306a0
c000a056:	83 ec 08             	sub    esp,0x8
c000a059:	89 e0                	mov    eax,esp
c000a05b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000a05e:	89 08                	mov    DWORD PTR [eax],ecx
c000a060:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000a063:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a067:	ff d2                	call   edx
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a070:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a073:	0f b6 c0             	movzx  eax,al
c000a076:	85 c0                	test   eax,eax
c000a078:	0f 84 da 00 00 00    	je     c000a158 <sendKeyboardToken(KeyboardToken)+0x136>
c000a07e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a081:	0f b7 c0             	movzx  eax,ax
c000a084:	3d 18 03 00 00       	cmp    eax,0x318
c000a089:	75 06                	jne    c000a091 <sendKeyboardToken(KeyboardToken)+0x6f>
c000a08b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a094:	0f b7 c0             	movzx  eax,ax
c000a097:	3d 19 03 00 00       	cmp    eax,0x319
c000a09c:	75 06                	jne    c000a0a4 <sendKeyboardToken(KeyboardToken)+0x82>
c000a09e:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0a7:	0f b7 c0             	movzx  eax,ax
c000a0aa:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0af:	75 06                	jne    c000a0b7 <sendKeyboardToken(KeyboardToken)+0x95>
c000a0b1:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ba:	0f b7 c0             	movzx  eax,ax
c000a0bd:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0c2:	75 06                	jne    c000a0ca <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0c4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a0ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0cd:	0f b7 c0             	movzx  eax,ax
c000a0d0:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a0d5:	75 06                	jne    c000a0dd <sendKeyboardToken(KeyboardToken)+0xbb>
c000a0d7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a0dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e0:	0f b7 c0             	movzx  eax,ax
c000a0e3:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a0e8:	75 06                	jne    c000a0f0 <sendKeyboardToken(KeyboardToken)+0xce>
c000a0ea:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a0f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f3:	0f b7 c0             	movzx  eax,ax
c000a0f6:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a0fb:	75 06                	jne    c000a103 <sendKeyboardToken(KeyboardToken)+0xe1>
c000a0fd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a106:	0f b7 c0             	movzx  eax,ax
c000a109:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a10e:	75 06                	jne    c000a116 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a110:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a119:	0f b7 c0             	movzx  eax,ax
c000a11c:	3d 20 03 00 00       	cmp    eax,0x320
c000a121:	75 06                	jne    c000a129 <sendKeyboardToken(KeyboardToken)+0x107>
c000a123:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a12c:	0f b7 c0             	movzx  eax,ax
c000a12f:	3d 21 03 00 00       	cmp    eax,0x321
c000a134:	75 06                	jne    c000a13c <sendKeyboardToken(KeyboardToken)+0x11a>
c000a136:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a13c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a13f:	0f b7 c0             	movzx  eax,ax
c000a142:	3d 22 03 00 00       	cmp    eax,0x322
c000a147:	0f 85 f1 00 00 00    	jne    c000a23e <sendKeyboardToken(KeyboardToken)+0x21c>
c000a14d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a153:	e9 e6 00 00 00       	jmp    c000a23e <sendKeyboardToken(KeyboardToken)+0x21c>
c000a158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a15b:	0f b7 c0             	movzx  eax,ax
c000a15e:	3d 18 03 00 00       	cmp    eax,0x318
c000a163:	75 0a                	jne    c000a16f <sendKeyboardToken(KeyboardToken)+0x14d>
c000a165:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a16b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a172:	0f b7 c0             	movzx  eax,ax
c000a175:	3d 19 03 00 00       	cmp    eax,0x319
c000a17a:	75 0a                	jne    c000a186 <sendKeyboardToken(KeyboardToken)+0x164>
c000a17c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a182:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a189:	0f b7 c0             	movzx  eax,ax
c000a18c:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a191:	75 0a                	jne    c000a19d <sendKeyboardToken(KeyboardToken)+0x17b>
c000a193:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a199:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1a0:	0f b7 c0             	movzx  eax,ax
c000a1a3:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1a8:	75 0a                	jne    c000a1b4 <sendKeyboardToken(KeyboardToken)+0x192>
c000a1aa:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1b7:	0f b7 c0             	movzx  eax,ax
c000a1ba:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1bf:	75 0a                	jne    c000a1cb <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1c1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a1c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ce:	0f b7 c0             	movzx  eax,ax
c000a1d1:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a1d6:	75 0a                	jne    c000a1e2 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a1d8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a1de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1e5:	0f b7 c0             	movzx  eax,ax
c000a1e8:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a1ed:	75 0a                	jne    c000a1f9 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a1ef:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a1f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1fc:	0f b7 c0             	movzx  eax,ax
c000a1ff:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a204:	75 0a                	jne    c000a210 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a206:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a20c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a213:	0f b7 c0             	movzx  eax,ax
c000a216:	3d 20 03 00 00       	cmp    eax,0x320
c000a21b:	75 0a                	jne    c000a227 <sendKeyboardToken(KeyboardToken)+0x205>
c000a21d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a223:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a22a:	0f b7 c0             	movzx  eax,ax
c000a22d:	3d 21 03 00 00       	cmp    eax,0x321
c000a232:	75 0a                	jne    c000a23e <sendKeyboardToken(KeyboardToken)+0x21c>
c000a234:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a23a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a23e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a241:	0f b7 c0             	movzx  eax,ax
c000a244:	3d 00 02 00 00       	cmp    eax,0x200
c000a249:	75 2f                	jne    c000a27a <sendKeyboardToken(KeyboardToken)+0x258>
c000a24b:	a0 a0 0a 03 c0       	mov    al,ds:0xc0030aa0
c000a250:	83 f0 01             	xor    eax,0x1
c000a253:	0f b6 c0             	movzx  eax,al
c000a256:	85 c0                	test   eax,eax
c000a258:	74 20                	je     c000a27a <sendKeyboardToken(KeyboardToken)+0x258>
c000a25a:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000a25f:	6a 01                	push   0x1
c000a261:	6a 00                	push   0x0
c000a263:	68 b8 9e 00 c0       	push   0xc0009eb8
c000a268:	50                   	push   eax
c000a269:	e8 2a c1 00 00       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	c6 05 a0 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030aa0,0x1
c000a278:	eb 3a                	jmp    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x292>
c000a27a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a27d:	0f b7 c0             	movzx  eax,ax
c000a280:	3d 01 02 00 00       	cmp    eax,0x201
c000a285:	75 2d                	jne    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x292>
c000a287:	a0 a0 0a 03 c0       	mov    al,ds:0xc0030aa0
c000a28c:	83 f0 01             	xor    eax,0x1
c000a28f:	0f b6 c0             	movzx  eax,al
c000a292:	85 c0                	test   eax,eax
c000a294:	74 1e                	je     c000a2b4 <sendKeyboardToken(KeyboardToken)+0x292>
c000a296:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000a29b:	6a 01                	push   0x1
c000a29d:	6a 00                	push   0x0
c000a29f:	68 02 9f 00 c0       	push   0xc0009f02
c000a2a4:	50                   	push   eax
c000a2a5:	e8 ee c0 00 00       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	c6 05 a0 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030aa0,0x1
c000a2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b7:	0f b7 c0             	movzx  eax,ax
c000a2ba:	3d 25 03 00 00       	cmp    eax,0x325
c000a2bf:	75 06                	jne    c000a2c7 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2c1:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2ca:	0f b7 c0             	movzx  eax,ax
c000a2cd:	3d 24 03 00 00       	cmp    eax,0x324
c000a2d2:	75 06                	jne    c000a2da <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a2d4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a2da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2dd:	0f b7 c0             	movzx  eax,ax
c000a2e0:	3d 23 03 00 00       	cmp    eax,0x323
c000a2e5:	75 06                	jne    c000a2ed <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a2e7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a2ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f0:	0f b7 c0             	movzx  eax,ax
c000a2f3:	3d 26 03 00 00       	cmp    eax,0x326
c000a2f8:	75 06                	jne    c000a300 <sendKeyboardToken(KeyboardToken)+0x2de>
c000a2fa:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a303:	0f b7 c0             	movzx  eax,ax
c000a306:	3d 27 03 00 00       	cmp    eax,0x327
c000a30b:	75 06                	jne    c000a313 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a30d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a316:	0f b7 c0             	movzx  eax,ax
c000a319:	3d 22 03 00 00       	cmp    eax,0x322
c000a31e:	75 06                	jne    c000a326 <sendKeyboardToken(KeyboardToken)+0x304>
c000a320:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a326:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a32a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a32d:	83 f0 01             	xor    eax,0x1
c000a330:	0f b6 c0             	movzx  eax,al
c000a333:	85 c0                	test   eax,eax
c000a335:	74 7c                	je     c000a3b3 <sendKeyboardToken(KeyboardToken)+0x391>
c000a337:	a0 a1 07 03 c0       	mov    al,ds:0xc00307a1
c000a33c:	0f b6 c0             	movzx  eax,al
c000a33f:	85 c0                	test   eax,eax
c000a341:	74 43                	je     c000a386 <sendKeyboardToken(KeyboardToken)+0x364>
c000a343:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a347:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a34b:	85 c0                	test   eax,eax
c000a34d:	74 2b                	je     c000a37a <sendKeyboardToken(KeyboardToken)+0x358>
c000a34f:	8b 15 a4 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030aa4
c000a355:	89 d0                	mov    eax,edx
c000a357:	c1 e0 02             	shl    eax,0x2
c000a35a:	01 d0                	add    eax,edx
c000a35c:	d1 e0                	shl    eax,1
c000a35e:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c000a363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a366:	0f b7 c0             	movzx  eax,ax
c000a369:	8d 50 d0             	lea    edx,[eax-0x30]
c000a36c:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a371:	01 d0                	add    eax,edx
c000a373:	a3 a4 0a 03 c0       	mov    ds:0xc0030aa4,eax
c000a378:	eb 71                	jmp    c000a3eb <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a37a:	c7 05 a4 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa4,0x0
c000a384:	eb 65                	jmp    c000a3eb <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a386:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a38b:	85 c0                	test   eax,eax
c000a38d:	74 18                	je     c000a3a7 <sendKeyboardToken(KeyboardToken)+0x385>
c000a38f:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a394:	0f b6 c0             	movzx  eax,al
c000a397:	83 ec 0c             	sub    esp,0xc
c000a39a:	50                   	push   eax
c000a39b:	e8 ac fb ff ff       	call   c0009f4c <sendKeyToTerminal(unsigned char)>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3a7:	c7 05 a4 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa4,0x0
c000a3b1:	eb 38                	jmp    c000a3eb <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3b6:	0f b7 c0             	movzx  eax,ax
c000a3b9:	3d 01 01 00 00       	cmp    eax,0x101
c000a3be:	75 2b                	jne    c000a3eb <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3c0:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 18                	je     c000a3e1 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a3c9:	a1 a4 0a 03 c0       	mov    eax,ds:0xc0030aa4
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	83 ec 0c             	sub    esp,0xc
c000a3d4:	50                   	push   eax
c000a3d5:	e8 72 fb ff ff       	call   c0009f4c <sendKeyToTerminal(unsigned char)>
c000a3da:	83 c4 10             	add    esp,0x10
c000a3dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3e1:	c7 05 a4 0a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030aa4,0x0
c000a3eb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a3ee:	83 f0 01             	xor    eax,0x1
c000a3f1:	0f b6 c0             	movzx  eax,al
c000a3f4:	85 c0                	test   eax,eax
c000a3f6:	74 5a                	je     c000a452 <sendKeyboardToken(KeyboardToken)+0x430>
c000a3f8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a3fb:	83 f0 01             	xor    eax,0x1
c000a3fe:	0f b6 c0             	movzx  eax,al
c000a401:	85 c0                	test   eax,eax
c000a403:	74 4d                	je     c000a452 <sendKeyboardToken(KeyboardToken)+0x430>
c000a405:	a0 a0 07 03 c0       	mov    al,ds:0xc00307a0
c000a40a:	83 f0 01             	xor    eax,0x1
c000a40d:	0f b6 c0             	movzx  eax,al
c000a410:	85 c0                	test   eax,eax
c000a412:	74 3e                	je     c000a452 <sendKeyboardToken(KeyboardToken)+0x430>
c000a414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a417:	0f b7 c0             	movzx  eax,ax
c000a41a:	83 f8 1f             	cmp    eax,0x1f
c000a41d:	76 0b                	jbe    c000a42a <sendKeyboardToken(KeyboardToken)+0x408>
c000a41f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a422:	0f b7 c0             	movzx  eax,ax
c000a425:	83 f8 7e             	cmp    eax,0x7e
c000a428:	76 16                	jbe    c000a440 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a42d:	0f b7 c0             	movzx  eax,ax
c000a430:	83 f8 0a             	cmp    eax,0xa
c000a433:	74 0b                	je     c000a440 <sendKeyboardToken(KeyboardToken)+0x41e>
c000a435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a438:	0f b7 c0             	movzx  eax,ax
c000a43b:	83 f8 08             	cmp    eax,0x8
c000a43e:	75 12                	jne    c000a452 <sendKeyboardToken(KeyboardToken)+0x430>
c000a440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a443:	0f b6 c0             	movzx  eax,al
c000a446:	83 ec 0c             	sub    esp,0xc
c000a449:	50                   	push   eax
c000a44a:	e8 fd fa ff ff       	call   c0009f4c <sendKeyToTerminal(unsigned char)>
c000a44f:	83 c4 10             	add    esp,0x10
c000a452:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a455:	83 f0 01             	xor    eax,0x1
c000a458:	0f b6 c0             	movzx  eax,al
c000a45b:	85 c0                	test   eax,eax
c000a45d:	74 5d                	je     c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a45f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a462:	83 f0 01             	xor    eax,0x1
c000a465:	0f b6 c0             	movzx  eax,al
c000a468:	85 c0                	test   eax,eax
c000a46a:	74 50                	je     c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a46c:	a0 a0 07 03 c0       	mov    al,ds:0xc00307a0
c000a471:	0f b6 c0             	movzx  eax,al
c000a474:	85 c0                	test   eax,eax
c000a476:	74 44                	je     c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a47b:	0f b7 c0             	movzx  eax,ax
c000a47e:	83 f8 3f             	cmp    eax,0x3f
c000a481:	76 39                	jbe    c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a486:	0f b7 c0             	movzx  eax,ax
c000a489:	83 f8 7f             	cmp    eax,0x7f
c000a48c:	77 2e                	ja     c000a4bc <sendKeyboardToken(KeyboardToken)+0x49a>
c000a48e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a491:	88 c2                	mov    dl,al
c000a493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a496:	0f b7 c0             	movzx  eax,ax
c000a499:	83 f8 5f             	cmp    eax,0x5f
c000a49c:	76 04                	jbe    c000a4a2 <sendKeyboardToken(KeyboardToken)+0x480>
c000a49e:	b0 20                	mov    al,0x20
c000a4a0:	eb 02                	jmp    c000a4a4 <sendKeyboardToken(KeyboardToken)+0x482>
c000a4a2:	b0 00                	mov    al,0x0
c000a4a4:	89 d1                	mov    ecx,edx
c000a4a6:	29 c1                	sub    ecx,eax
c000a4a8:	89 c8                	mov    eax,ecx
c000a4aa:	83 e8 40             	sub    eax,0x40
c000a4ad:	0f b6 c0             	movzx  eax,al
c000a4b0:	83 ec 0c             	sub    esp,0xc
c000a4b3:	50                   	push   eax
c000a4b4:	e8 93 fa ff ff       	call   c0009f4c <sendKeyToTerminal(unsigned char)>
c000a4b9:	83 c4 10             	add    esp,0x10
c000a4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4bf:	0f b7 c0             	movzx  eax,ax
c000a4c2:	3d 00 03 00 00       	cmp    eax,0x300
c000a4c7:	75 12                	jne    c000a4db <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4c9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a4cc:	83 f0 01             	xor    eax,0x1
c000a4cf:	0f b6 c0             	movzx  eax,al
c000a4d2:	85 c0                	test   eax,eax
c000a4d4:	74 05                	je     c000a4db <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a4d6:	e8 86 79 00 00       	call   c0011e61 <doTerminalCycle()>
c000a4db:	90                   	nop
c000a4dc:	c9                   	leave  
c000a4dd:	c3                   	ret    

c000a4de <clearInternalKeybuffer(VgaText*)>:
c000a4de:	55                   	push   ebp
c000a4df:	89 e5                	mov    ebp,esp
c000a4e1:	83 ec 08             	sub    esp,0x8
c000a4e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4e7:	05 02 01 00 00       	add    eax,0x102
c000a4ec:	83 ec 0c             	sub    esp,0xc
c000a4ef:	50                   	push   eax
c000a4f0:	e8 8b 60 ff ff       	call   c0000580 <strlen>
c000a4f5:	83 c4 10             	add    esp,0x10
c000a4f8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a4fb:	81 c2 02 01 00 00    	add    edx,0x102
c000a501:	83 ec 04             	sub    esp,0x4
c000a504:	50                   	push   eax
c000a505:	6a 00                	push   0x0
c000a507:	52                   	push   edx
c000a508:	e8 e3 5f ff ff       	call   c00004f0 <memset>
c000a50d:	83 c4 10             	add    esp,0x10
c000a510:	90                   	nop
c000a511:	c9                   	leave  
c000a512:	c3                   	ret    

c000a513 <readKeyboard(VgaText*, char*, unsigned long)>:
c000a513:	55                   	push   ebp
c000a514:	89 e5                	mov    ebp,esp
c000a516:	83 ec 18             	sub    esp,0x18
c000a519:	a1 88 06 03 c0       	mov    eax,ds:0xc0030688
c000a51e:	85 c0                	test   eax,eax
c000a520:	74 2a                	je     c000a54c <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a522:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a528:	8b 15 88 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030688
c000a52e:	83 ec 04             	sub    esp,0x4
c000a531:	68 a0 06 03 c0       	push   0xc00306a0
c000a536:	83 ec 08             	sub    esp,0x8
c000a539:	89 e0                	mov    eax,esp
c000a53b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000a53e:	89 08                	mov    DWORD PTR [eax],ecx
c000a540:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000a543:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000a547:	ff d2                	call   edx
c000a549:	83 c4 10             	add    esp,0x10
c000a54c:	fb                   	sti    
c000a54d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a554:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a558:	0f 84 08 01 00 00    	je     c000a666 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a55e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a561:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a567:	0f be c0             	movsx  eax,al
c000a56a:	85 c0                	test   eax,eax
c000a56c:	75 27                	jne    c000a595 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a56e:	fa                   	cli    
c000a56f:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000a574:	83 c0 01             	add    eax,0x1
c000a577:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000a57c:	e8 cb c0 00 00       	call   c001664c <schedule()>
c000a581:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000a589:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000a58e:	85 c0                	test   eax,eax
c000a590:	75 cc                	jne    c000a55e <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a592:	fb                   	sti    
c000a593:	eb c9                	jmp    c000a55e <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a595:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a598:	8d 50 01             	lea    edx,[eax+0x1]
c000a59b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a59e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5a1:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5a7:	88 10                	mov    BYTE PTR [eax],dl
c000a5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5ac:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5b2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5b5:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5b9:	83 f8 03             	cmp    eax,0x3
c000a5bc:	75 1e                	jne    c000a5dc <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5be:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5c5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5c8:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a5ce:	83 ec 08             	sub    esp,0x8
c000a5d1:	6a 02                	push   0x2
c000a5d3:	50                   	push   eax
c000a5d4:	e8 0a 67 00 00       	call   c0010ce3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a5d9:	83 c4 10             	add    esp,0x10
c000a5dc:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5e0:	83 f8 1c             	cmp    eax,0x1c
c000a5e3:	75 1e                	jne    c000a603 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a5e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a5ef:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c000a5f5:	83 ec 08             	sub    esp,0x8
c000a5f8:	6a 09                	push   0x9
c000a5fa:	50                   	push   eax
c000a5fb:	e8 e3 66 00 00       	call   c0010ce3 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a600:	83 c4 10             	add    esp,0x10
c000a603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a606:	05 02 01 00 00       	add    eax,0x102
c000a60b:	83 ec 0c             	sub    esp,0xc
c000a60e:	50                   	push   eax
c000a60f:	e8 6c 5f ff ff       	call   c0000580 <strlen>
c000a614:	83 c4 10             	add    esp,0x10
c000a617:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a61a:	81 c2 02 01 00 00    	add    edx,0x102
c000a620:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a623:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a626:	81 c2 02 01 00 00    	add    edx,0x102
c000a62c:	83 ec 04             	sub    esp,0x4
c000a62f:	50                   	push   eax
c000a630:	51                   	push   ecx
c000a631:	52                   	push   edx
c000a632:	e8 99 5d ff ff       	call   c00003d0 <memmove>
c000a637:	83 c4 10             	add    esp,0x10
c000a63a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a63e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a642:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a646:	83 f8 0a             	cmp    eax,0xa
c000a649:	74 16                	je     c000a661 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a64b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a64f:	83 f8 03             	cmp    eax,0x3
c000a652:	74 0d                	je     c000a661 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a654:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a658:	83 f8 1c             	cmp    eax,0x1c
c000a65b:	0f 85 f3 fe ff ff    	jne    c000a554 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a661:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a664:	eb 03                	jmp    c000a669 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a669:	c9                   	leave  
c000a66a:	c3                   	ret    
c000a66b:	90                   	nop

c000a66c <Keyboard::Keyboard(char const*)>:
c000a66c:	83 ec 0c             	sub    esp,0xc
c000a66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a673:	83 ec 08             	sub    esp,0x8
c000a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67a:	50                   	push   eax
c000a67b:	e8 d8 f4 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a680:	83 c4 10             	add    esp,0x10
c000a683:	ba 40 73 02 c0       	mov    edx,0xc0027340
c000a688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68c:	89 10                	mov    DWORD PTR [eax],edx
c000a68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a692:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a69c:	c6 05 84 06 03 c0 01 	mov    BYTE PTR ds:0xc0030684,0x1
c000a6a3:	90                   	nop
c000a6a4:	83 c4 0c             	add    esp,0xc
c000a6a7:	c3                   	ret    

c000a6a8 <Keyboard::~Keyboard()>:
c000a6a8:	83 ec 0c             	sub    esp,0xc
c000a6ab:	ba 40 73 02 c0       	mov    edx,0xc0027340
c000a6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b4:	89 10                	mov    DWORD PTR [eax],edx
c000a6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ba:	83 ec 0c             	sub    esp,0xc
c000a6bd:	50                   	push   eax
c000a6be:	e8 35 f2 ff ff       	call   c00098f8 <Device::~Device()>
c000a6c3:	83 c4 10             	add    esp,0x10
c000a6c6:	90                   	nop
c000a6c7:	83 c4 0c             	add    esp,0xc
c000a6ca:	c3                   	ret    
c000a6cb:	90                   	nop

c000a6cc <Keyboard::~Keyboard()>:
c000a6cc:	83 ec 0c             	sub    esp,0xc
c000a6cf:	83 ec 0c             	sub    esp,0xc
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	e8 cd ff ff ff       	call   c000a6a8 <Keyboard::~Keyboard()>
c000a6db:	83 c4 10             	add    esp,0x10
c000a6de:	83 ec 08             	sub    esp,0x8
c000a6e1:	68 5c 01 00 00       	push   0x15c
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 99 2b 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 c4 0c             	add    esp,0xc
c000a6f5:	c3                   	ret    

c000a6f6 <LogicalDisk::close(int, int, void*)>:
c000a6f6:	83 c8 ff             	or     eax,0xffffffff
c000a6f9:	c3                   	ret    

c000a6fa <LogicalDisk::~LogicalDisk()>:
c000a6fa:	83 ec 0c             	sub    esp,0xc
c000a6fd:	ba b8 73 02 c0       	mov    edx,0xc00273b8
c000a702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a706:	89 10                	mov    DWORD PTR [eax],edx
c000a708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a70c:	83 ec 0c             	sub    esp,0xc
c000a70f:	50                   	push   eax
c000a710:	e8 e3 f1 ff ff       	call   c00098f8 <Device::~Device()>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	90                   	nop
c000a719:	83 c4 0c             	add    esp,0xc
c000a71c:	c3                   	ret    
c000a71d:	90                   	nop

c000a71e <LogicalDisk::~LogicalDisk()>:
c000a71e:	83 ec 0c             	sub    esp,0xc
c000a721:	83 ec 0c             	sub    esp,0xc
c000a724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a728:	e8 cd ff ff ff       	call   c000a6fa <LogicalDisk::~LogicalDisk()>
c000a72d:	83 c4 10             	add    esp,0x10
c000a730:	83 ec 08             	sub    esp,0x8
c000a733:	68 78 01 00 00       	push   0x178
c000a738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a73c:	e8 47 2b 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	83 c4 0c             	add    esp,0xc
c000a747:	c3                   	ret    

c000a748 <LogicalDisk::open(int, int, void*)>:
c000a748:	83 ec 18             	sub    esp,0x18
c000a74b:	68 6c 73 02 c0       	push   0xc002736c
c000a750:	e8 7f 53 00 00       	call   c000fad4 <KePanic(char const*)>
c000a755:	83 c8 ff             	or     eax,0xffffffff
c000a758:	83 c4 1c             	add    esp,0x1c
c000a75b:	c3                   	ret    

c000a75c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a75c:	53                   	push   ebx
c000a75d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a765:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a769:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a76f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a775:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a77b:	77 10                	ja     c000a78d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a77d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a783:	89 d3                	mov    ebx,edx
c000a785:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a78b:	72 05                	jb     c000a792 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a78d:	83 c8 ff             	or     eax,0xffffffff
c000a790:	89 c2                	mov    edx,eax
c000a792:	5b                   	pop    ebx
c000a793:	c3                   	ret    

c000a794 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a794:	56                   	push   esi
c000a795:	83 c8 ff             	or     eax,0xffffffff
c000a798:	53                   	push   ebx
c000a799:	89 c2                	mov    edx,eax
c000a79b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a79f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7a7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7ad:	77 27                	ja     c000a7d6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7af:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7b5:	89 d8                	mov    eax,ebx
c000a7b7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7c2:	89 c2                	mov    edx,eax
c000a7c4:	73 10                	jae    c000a7d6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7c6:	89 c8                	mov    eax,ecx
c000a7c8:	89 da                	mov    edx,ebx
c000a7ca:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a7d0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a7d6:	5b                   	pop    ebx
c000a7d7:	5e                   	pop    esi
c000a7d8:	c3                   	ret    
c000a7d9:	90                   	nop

c000a7da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a7da:	83 ec 1c             	sub    esp,0x1c
c000a7dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a7e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a7f1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a7f4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a7f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a7fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a800:	83 ec 08             	sub    esp,0x8
c000a803:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a807:	50                   	push   eax
c000a808:	e8 4b f3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000a80d:	83 c4 10             	add    esp,0x10
c000a810:	ba b8 73 02 c0       	mov    edx,0xc00273b8
c000a815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a819:	89 10                	mov    DWORD PTR [eax],edx
c000a81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a81f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a82a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a835:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a83c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a840:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a84a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a84e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a852:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a856:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a85c:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a862:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a866:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a869:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a86d:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a873:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a881:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a887:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a88b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a895:	90                   	nop
c000a896:	83 c4 1c             	add    esp,0x1c
c000a899:	c3                   	ret    

c000a89a <LogicalDisk::assignDriveLetter()>:
c000a89a:	55                   	push   ebp
c000a89b:	57                   	push   edi
c000a89c:	56                   	push   esi
c000a89d:	53                   	push   ebx
c000a89e:	83 ec 14             	sub    esp,0x14
c000a8a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8a5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8ab:	b0 41                	mov    al,0x41
c000a8ad:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8b3:	84 d2                	test   dl,dl
c000a8b5:	75 02                	jne    c000a8b9 <LogicalDisk::assignDriveLetter()+0x1f>
c000a8b7:	b0 43                	mov    al,0x43
c000a8b9:	8b 3d c0 0a 03 c0    	mov    edi,DWORD PTR ds:0xc0030ac0
c000a8bf:	0f b6 ca             	movzx  ecx,dl
c000a8c2:	0f be e8             	movsx  ebp,al
c000a8c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a8c9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a8cd:	8b 3d c4 0a 03 c0    	mov    edi,DWORD PTR ds:0xc0030ac4
c000a8d3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a8d7:	3c 43                	cmp    al,0x43
c000a8d9:	75 10                	jne    c000a8eb <LogicalDisk::assignDriveLetter()+0x51>
c000a8db:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a8e2:	75 5a                	jne    c000a93e <LogicalDisk::assignDriveLetter()+0xa4>
c000a8e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a8e9:	75 53                	jne    c000a93e <LogicalDisk::assignDriveLetter()+0xa4>
c000a8eb:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a8ee:	ba 01 00 00 00       	mov    edx,0x1
c000a8f3:	89 34 24             	mov    DWORD PTR [esp],esi
c000a8f6:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a8f9:	d3 e2                	shl    edx,cl
c000a8fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a8ff:	89 d7                	mov    edi,edx
c000a901:	89 d6                	mov    esi,edx
c000a903:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a907:	c1 ff 1f             	sar    edi,0x1f
c000a90a:	21 f9                	and    ecx,edi
c000a90c:	09 d1                	or     ecx,edx
c000a90e:	75 2e                	jne    c000a93e <LogicalDisk::assignDriveLetter()+0xa4>
c000a910:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a914:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a918:	09 f2                	or     edx,esi
c000a91a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a91d:	89 15 c0 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac0,edx
c000a923:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a927:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a92d:	89 1c b5 e0 0a 03 c0 	mov    DWORD PTR [esi*4-0x3ffcf520],ebx
c000a934:	09 fa                	or     edx,edi
c000a936:	89 15 c4 0a 03 c0    	mov    DWORD PTR ds:0xc0030ac4,edx
c000a93c:	eb 0d                	jmp    c000a94b <LogicalDisk::assignDriveLetter()+0xb1>
c000a93e:	8d 50 01             	lea    edx,[eax+0x1]
c000a941:	45                   	inc    ebp
c000a942:	80 fa 5b             	cmp    dl,0x5b
c000a945:	88 d0                	mov    al,dl
c000a947:	75 8e                	jne    c000a8d7 <LogicalDisk::assignDriveLetter()+0x3d>
c000a949:	31 c0                	xor    eax,eax
c000a94b:	83 c4 14             	add    esp,0x14
c000a94e:	5b                   	pop    ebx
c000a94f:	5e                   	pop    esi
c000a950:	5f                   	pop    edi
c000a951:	5d                   	pop    ebp
c000a952:	c3                   	ret    
c000a953:	90                   	nop

c000a954 <LogicalDisk::mount()>:
c000a954:	56                   	push   esi
c000a955:	53                   	push   ebx
c000a956:	53                   	push   ebx
c000a957:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a95b:	8b 1d 04 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030304
c000a961:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a96b:	85 db                	test   ebx,ebx
c000a96d:	74 27                	je     c000a996 <LogicalDisk::mount()+0x42>
c000a96f:	51                   	push   ecx
c000a970:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a977:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a979:	83 e8 41             	sub    eax,0x41
c000a97c:	50                   	push   eax
c000a97d:	56                   	push   esi
c000a97e:	53                   	push   ebx
c000a97f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a982:	83 c4 10             	add    esp,0x10
c000a985:	84 c0                	test   al,al
c000a987:	74 08                	je     c000a991 <LogicalDisk::mount()+0x3d>
c000a989:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a98f:	eb 07                	jmp    c000a998 <LogicalDisk::mount()+0x44>
c000a991:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a994:	eb d5                	jmp    c000a96b <LogicalDisk::mount()+0x17>
c000a996:	31 c0                	xor    eax,eax
c000a998:	5a                   	pop    edx
c000a999:	5b                   	pop    ebx
c000a99a:	5e                   	pop    esi
c000a99b:	c3                   	ret    

c000a99c <LogicalDisk::unmount()>:
c000a99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9a0:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9aa:	c3                   	ret    
c000a9ab:	90                   	nop

c000a9ac <LogicalDisk::eject()>:
c000a9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9b0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9bc:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9bf:	90                   	nop

c000a9c0 <LogicalDisk::unassignDriveLetter()>:
c000a9c0:	57                   	push   edi
c000a9c1:	56                   	push   esi
c000a9c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a9c6:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a9cd:	85 c9                	test   ecx,ecx
c000a9cf:	75 0f                	jne    c000a9e0 <LogicalDisk::unassignDriveLetter()+0x20>
c000a9d1:	c7 44 24 0c 90 73 02 c0 	mov    DWORD PTR [esp+0xc],0xc0027390
c000a9d9:	5e                   	pop    esi
c000a9da:	5f                   	pop    edi
c000a9db:	e9 f4 50 00 00       	jmp    c000fad4 <KePanic(char const*)>
c000a9e0:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a9e7:	83 e9 41             	sub    ecx,0x41
c000a9ea:	b8 01 00 00 00       	mov    eax,0x1
c000a9ef:	c7 04 8d e0 0a 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffcf520],0x0
c000a9fa:	d3 e0                	shl    eax,cl
c000a9fc:	89 c7                	mov    edi,eax
c000a9fe:	f7 d0                	not    eax
c000aa00:	c1 ff 1f             	sar    edi,0x1f
c000aa03:	21 05 c0 0a 03 c0    	and    DWORD PTR ds:0xc0030ac0,eax
c000aa09:	89 fe                	mov    esi,edi
c000aa0b:	f7 d6                	not    esi
c000aa0d:	21 35 c4 0a 03 c0    	and    DWORD PTR ds:0xc0030ac4,esi
c000aa13:	5e                   	pop    esi
c000aa14:	5f                   	pop    edi
c000aa15:	c3                   	ret    

c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa16:	57                   	push   edi
c000aa17:	56                   	push   esi
c000aa18:	53                   	push   ebx
c000aa19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa21:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa2f:	77 41                	ja     c000aa72 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa31:	99                   	cdq    
c000aa32:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa38:	01 c8                	add    eax,ecx
c000aa3a:	11 da                	adc    edx,ebx
c000aa3c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa42:	19 d7                	sbb    edi,edx
c000aa44:	72 33                	jb     c000aa79 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa46:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa4c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa52:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa56:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa5a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa60:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aa66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aa6a:	5b                   	pop    ebx
c000aa6b:	5e                   	pop    esi
c000aa6c:	5f                   	pop    edi
c000aa6d:	e9 bc 0b 00 00       	jmp    c000b62e <VCache::read(unsigned long long, int, void*)>
c000aa72:	b8 05 00 00 00       	mov    eax,0x5
c000aa77:	eb 05                	jmp    c000aa7e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aa79:	b8 07 00 00 00       	mov    eax,0x7
c000aa7e:	5b                   	pop    ebx
c000aa7f:	5e                   	pop    esi
c000aa80:	5f                   	pop    edi
c000aa81:	c3                   	ret    

c000aa82 <LogicalDisk::write(unsigned long long, int, void*)>:
c000aa82:	57                   	push   edi
c000aa83:	56                   	push   esi
c000aa84:	53                   	push   ebx
c000aa85:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa8d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa95:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa9b:	77 41                	ja     c000aade <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aa9d:	99                   	cdq    
c000aa9e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aaa4:	01 c8                	add    eax,ecx
c000aaa6:	11 da                	adc    edx,ebx
c000aaa8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aaae:	19 d7                	sbb    edi,edx
c000aab0:	72 33                	jb     c000aae5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aab2:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aab8:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aabe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aac2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aac6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aacc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aad2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad6:	5b                   	pop    ebx
c000aad7:	5e                   	pop    esi
c000aad8:	5f                   	pop    edi
c000aad9:	e9 82 09 00 00       	jmp    c000b460 <VCache::write(unsigned long long, int, void*)>
c000aade:	b8 05 00 00 00       	mov    eax,0x5
c000aae3:	eb 05                	jmp    c000aaea <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000aae5:	b8 07 00 00 00       	mov    eax,0x7
c000aaea:	5b                   	pop    ebx
c000aaeb:	5e                   	pop    esi
c000aaec:	5f                   	pop    edi
c000aaed:	c3                   	ret    
c000aaee:	66 90                	xchg   ax,ax

c000aaf0 <Mouse::Mouse(char const*)>:
c000aaf0:	83 ec 0c             	sub    esp,0xc
c000aaf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf7:	83 ec 08             	sub    esp,0x8
c000aafa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafe:	50                   	push   eax
c000aaff:	e8 54 f0 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	ba e4 73 02 c0       	mov    edx,0xc00273e4
c000ab0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab10:	89 10                	mov    DWORD PTR [eax],edx
c000ab12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab16:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab20:	90                   	nop
c000ab21:	83 c4 0c             	add    esp,0xc
c000ab24:	c3                   	ret    
c000ab25:	90                   	nop
c000ab26:	66 90                	xchg   ax,ax

c000ab28 <Mouse::~Mouse()>:
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	ba e4 73 02 c0       	mov    edx,0xc00273e4
c000ab30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab34:	89 10                	mov    DWORD PTR [eax],edx
c000ab36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3a:	83 ec 0c             	sub    esp,0xc
c000ab3d:	50                   	push   eax
c000ab3e:	e8 b5 ed ff ff       	call   c00098f8 <Device::~Device()>
c000ab43:	83 c4 10             	add    esp,0x10
c000ab46:	90                   	nop
c000ab47:	83 c4 0c             	add    esp,0xc
c000ab4a:	c3                   	ret    
c000ab4b:	90                   	nop

c000ab4c <Mouse::~Mouse()>:
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	83 ec 0c             	sub    esp,0xc
c000ab52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab56:	e8 cd ff ff ff       	call   c000ab28 <Mouse::~Mouse()>
c000ab5b:	83 c4 10             	add    esp,0x10
c000ab5e:	83 ec 08             	sub    esp,0x8
c000ab61:	68 58 01 00 00       	push   0x158
c000ab66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab6a:	e8 19 27 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c000ab6f:	83 c4 10             	add    esp,0x10
c000ab72:	83 c4 0c             	add    esp,0xc
c000ab75:	c3                   	ret    

c000ab76 <NIC::getMAC()>:
c000ab76:	31 c0                	xor    eax,eax
c000ab78:	31 d2                	xor    edx,edx
c000ab7a:	c3                   	ret    
c000ab7b:	90                   	nop

c000ab7c <NIC::write(int, unsigned char*, int*)>:
c000ab7c:	b8 01 00 00 00       	mov    eax,0x1
c000ab81:	c3                   	ret    

c000ab82 <NIC::NIC(char const*)>:
c000ab82:	83 ec 0c             	sub    esp,0xc
c000ab85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab89:	83 ec 08             	sub    esp,0x8
c000ab8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab90:	50                   	push   eax
c000ab91:	e8 c2 ef ff ff       	call   c0009b58 <Device::Device(char const*)>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	ba 10 74 02 c0       	mov    edx,0xc0027410
c000ab9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba2:	89 10                	mov    DWORD PTR [eax],edx
c000aba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abb2:	90                   	nop
c000abb3:	83 c4 0c             	add    esp,0xc
c000abb6:	c3                   	ret    
c000abb7:	90                   	nop

c000abb8 <NIC::~NIC()>:
c000abb8:	83 ec 0c             	sub    esp,0xc
c000abbb:	ba 10 74 02 c0       	mov    edx,0xc0027410
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	89 10                	mov    DWORD PTR [eax],edx
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	83 ec 0c             	sub    esp,0xc
c000abcd:	50                   	push   eax
c000abce:	e8 25 ed ff ff       	call   c00098f8 <Device::~Device()>
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	90                   	nop
c000abd7:	83 c4 0c             	add    esp,0xc
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <NIC::~NIC()>:
c000abdc:	83 ec 0c             	sub    esp,0xc
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abe6:	e8 cd ff ff ff       	call   c000abb8 <NIC::~NIC()>
c000abeb:	83 c4 10             	add    esp,0x10
c000abee:	83 ec 08             	sub    esp,0x8
c000abf1:	68 58 01 00 00       	push   0x158
c000abf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abfa:	e8 89 26 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c000abff:	83 c4 10             	add    esp,0x10
c000ac02:	83 c4 0c             	add    esp,0xc
c000ac05:	c3                   	ret    

c000ac06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac06:	55                   	push   ebp
c000ac07:	57                   	push   edi
c000ac08:	56                   	push   esi
c000ac09:	53                   	push   ebx
c000ac0a:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac10:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000ac17:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000ac1e:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000ac25:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000ac2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac30:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac34:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac3b:	e8 14 f0 ff ff       	call   c0009c54 <Device::getName()>
c000ac40:	5a                   	pop    edx
c000ac41:	59                   	pop    ecx
c000ac42:	50                   	push   eax
c000ac43:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac47:	55                   	push   ebp
c000ac48:	e8 03 5a ff ff       	call   c0000650 <strcpy>
c000ac4d:	5b                   	pop    ebx
c000ac4e:	58                   	pop    eax
c000ac4f:	68 3c 74 02 c0       	push   0xc002743c
c000ac54:	55                   	push   ebp
c000ac55:	e8 16 5c ff ff       	call   c0000870 <strcat>
c000ac5a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac61:	e8 1a 4a 00 00       	call   c000f680 <malloc>
c000ac66:	83 c4 0c             	add    esp,0xc
c000ac69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac71:	89 c3                	mov    ebx,eax
c000ac73:	57                   	push   edi
c000ac74:	56                   	push   esi
c000ac75:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ac7c:	55                   	push   ebp
c000ac7d:	50                   	push   eax
c000ac7e:	e8 57 fb ff ff       	call   c000a7da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ac83:	83 c4 14             	add    esp,0x14
c000ac86:	53                   	push   ebx
c000ac87:	e8 0e fc ff ff       	call   c000a89a <LogicalDisk::assignDriveLetter()>
c000ac8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ac8f:	e8 c0 fc ff ff       	call   c000a954 <LogicalDisk::mount()>
c000ac94:	58                   	pop    eax
c000ac95:	5a                   	pop    edx
c000ac96:	53                   	push   ebx
c000ac97:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac9e:	e8 53 ed ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000aca3:	81 c4 2c 01 00 00    	add    esp,0x12c
c000aca9:	5b                   	pop    ebx
c000acaa:	5e                   	pop    esi
c000acab:	5f                   	pop    edi
c000acac:	5d                   	pop    ebp
c000acad:	c3                   	ret    

c000acae <createPartitionsForDisk(PhysicalDisk*)>:
c000acae:	55                   	push   ebp
c000acaf:	57                   	push   edi
c000acb0:	56                   	push   esi
c000acb1:	53                   	push   ebx
c000acb2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acb8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acbf:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acc5:	3d 00 02 00 00       	cmp    eax,0x200
c000acca:	74 27                	je     c000acf3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000accc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000acd2:	83 ec 10             	sub    esp,0x10
c000acd5:	99                   	cdq    
c000acd6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000acdc:	52                   	push   edx
c000acdd:	50                   	push   eax
c000acde:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ace2:	c1 e6 0a             	shl    esi,0xa
c000ace5:	89 fd                	mov    ebp,edi
c000ace7:	55                   	push   ebp
c000ace8:	56                   	push   esi
c000ace9:	e8 d6 6f 01 00       	call   c0021cc4 <__udivdi3>
c000acee:	e9 b9 00 00 00       	jmp    c000adac <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000acf3:	83 ec 0c             	sub    esp,0xc
c000acf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000acf8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000acfc:	56                   	push   esi
c000acfd:	6a 01                	push   0x1
c000acff:	6a 00                	push   0x0
c000ad01:	6a 00                	push   0x0
c000ad03:	53                   	push   ebx
c000ad04:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad07:	83 c4 20             	add    esp,0x20
c000ad0a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad12:	75 0a                	jne    c000ad1e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad14:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad1c:	74 2c                	je     c000ad4a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad1e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad24:	83 ec 10             	sub    esp,0x10
c000ad27:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad2d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad33:	89 f7                	mov    edi,esi
c000ad35:	c1 ff 1f             	sar    edi,0x1f
c000ad38:	57                   	push   edi
c000ad39:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad3d:	56                   	push   esi
c000ad3e:	c1 e0 0a             	shl    eax,0xa
c000ad41:	52                   	push   edx
c000ad42:	50                   	push   eax
c000ad43:	e8 7c 6f 01 00       	call   c0021cc4 <__udivdi3>
c000ad48:	eb 62                	jmp    c000adac <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad4a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad51:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad58:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad5f:	89 cf                	mov    edi,ecx
c000ad61:	83 e2 7f             	and    edx,0x7f
c000ad64:	83 e7 7f             	and    edi,0x7f
c000ad67:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ad6a:	83 e0 7f             	and    eax,0x7f
c000ad6d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ad70:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ad77:	83 e0 7f             	and    eax,0x7f
c000ad7a:	01 d0                	add    eax,edx
c000ad7c:	84 c0                	test   al,al
c000ad7e:	89 c5                	mov    ebp,eax
c000ad80:	74 41                	je     c000adc3 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000ad82:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad88:	83 ec 10             	sub    esp,0x10
c000ad8b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad91:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad97:	89 f7                	mov    edi,esi
c000ad99:	c1 ff 1f             	sar    edi,0x1f
c000ad9c:	57                   	push   edi
c000ad9d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ada1:	56                   	push   esi
c000ada2:	c1 e0 0a             	shl    eax,0xa
c000ada5:	52                   	push   edx
c000ada6:	50                   	push   eax
c000ada7:	e8 18 6f 01 00       	call   c0021cc4 <__udivdi3>
c000adac:	83 c4 14             	add    esp,0x14
c000adaf:	52                   	push   edx
c000adb0:	50                   	push   eax
c000adb1:	6a 00                	push   0x0
c000adb3:	6a 00                	push   0x0
c000adb5:	53                   	push   ebx
c000adb6:	e8 4b fe ff ff       	call   c000ac06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adbb:	83 c4 20             	add    esp,0x20
c000adbe:	e9 73 01 00 00       	jmp    c000af36 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adc3:	89 f0                	mov    eax,esi
c000adc5:	31 c9                	xor    ecx,ecx
c000adc7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000adce:	75 02                	jne    c000add2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000add0:	89 cd                	mov    ebp,ecx
c000add2:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000adda:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ade1:	83 c0 10             	add    eax,0x10
c000ade4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000adec:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000adf3:	c1 e2 08             	shl    edx,0x8
c000adf6:	c1 e6 10             	shl    esi,0x10
c000adf9:	09 f2                	or     edx,esi
c000adfb:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000ae02:	09 f2                	or     edx,esi
c000ae04:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae0b:	c1 e6 18             	shl    esi,0x18
c000ae0e:	09 f2                	or     edx,esi
c000ae10:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae17:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae1b:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae22:	c1 e6 10             	shl    esi,0x10
c000ae25:	c1 e2 08             	shl    edx,0x8
c000ae28:	09 f2                	or     edx,esi
c000ae2a:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae31:	09 f2                	or     edx,esi
c000ae33:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae3a:	c1 e6 18             	shl    esi,0x18
c000ae3d:	09 f2                	or     edx,esi
c000ae3f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae43:	41                   	inc    ecx
c000ae44:	83 f9 04             	cmp    ecx,0x4
c000ae47:	0f 85 7a ff ff ff    	jne    c000adc7 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae51:	83 f0 01             	xor    eax,0x1
c000ae54:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae58:	75 4f                	jne    c000aea9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae5e:	83 f0 01             	xor    eax,0x1
c000ae61:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae65:	75 42                	jne    c000aea9 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae67:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ae6d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ae75:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ae7b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ae83:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ae89:	89 f7                	mov    edi,esi
c000ae8b:	c1 ff 1f             	sar    edi,0x1f
c000ae8e:	57                   	push   edi
c000ae8f:	56                   	push   esi
c000ae90:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ae94:	52                   	push   edx
c000ae95:	c1 e0 0a             	shl    eax,0xa
c000ae98:	50                   	push   eax
c000ae99:	e8 26 6e 01 00       	call   c0021cc4 <__udivdi3>
c000ae9e:	83 c4 10             	add    esp,0x10
c000aea1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aea5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aea9:	89 e8                	mov    eax,ebp
c000aeab:	0f b6 e8             	movzx  ebp,al
c000aeae:	85 ed                	test   ebp,ebp
c000aeb0:	74 50                	je     c000af02 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aeb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aeba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aebe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aec6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000aeca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aece:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000aed2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000aeda:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aede:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aee2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000aee6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000aeea:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000aeee:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000aef2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000aef6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000aefa:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000aefe:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af02:	31 ed                	xor    ebp,ebp
c000af04:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af08:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af0c:	89 f8                	mov    eax,edi
c000af0e:	09 f0                	or     eax,esi
c000af10:	74 1e                	je     c000af30 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af12:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af16:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af1a:	89 d1                	mov    ecx,edx
c000af1c:	09 c1                	or     ecx,eax
c000af1e:	74 10                	je     c000af30 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	57                   	push   edi
c000af24:	56                   	push   esi
c000af25:	52                   	push   edx
c000af26:	50                   	push   eax
c000af27:	53                   	push   ebx
c000af28:	e8 d9 fc ff ff       	call   c000ac06 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af2d:	83 c4 20             	add    esp,0x20
c000af30:	45                   	inc    ebp
c000af31:	83 fd 04             	cmp    ebp,0x4
c000af34:	75 ce                	jne    c000af04 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af36:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af3c:	5b                   	pop    ebx
c000af3d:	5e                   	pop    esi
c000af3e:	5f                   	pop    edi
c000af3f:	5d                   	pop    ebp
c000af40:	c3                   	ret    
c000af41:	66 90                	xchg   ax,ax
c000af43:	90                   	nop

c000af44 <Serial::Serial(char const*)>:
c000af44:	83 ec 0c             	sub    esp,0xc
c000af47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4b:	83 ec 08             	sub    esp,0x8
c000af4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af52:	50                   	push   eax
c000af53:	e8 00 ec ff ff       	call   c0009b58 <Device::Device(char const*)>
c000af58:	83 c4 10             	add    esp,0x10
c000af5b:	ba 50 74 02 c0       	mov    edx,0xc0027450
c000af60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af64:	89 10                	mov    DWORD PTR [eax],edx
c000af66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af6a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000af74:	90                   	nop
c000af75:	83 c4 0c             	add    esp,0xc
c000af78:	c3                   	ret    
c000af79:	90                   	nop
c000af7a:	66 90                	xchg   ax,ax

c000af7c <Serial::~Serial()>:
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	ba 50 74 02 c0       	mov    edx,0xc0027450
c000af84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af88:	89 10                	mov    DWORD PTR [eax],edx
c000af8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8e:	83 ec 0c             	sub    esp,0xc
c000af91:	50                   	push   eax
c000af92:	e8 61 e9 ff ff       	call   c00098f8 <Device::~Device()>
c000af97:	83 c4 10             	add    esp,0x10
c000af9a:	90                   	nop
c000af9b:	83 c4 0c             	add    esp,0xc
c000af9e:	c3                   	ret    
c000af9f:	90                   	nop

c000afa0 <Serial::~Serial()>:
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	83 ec 0c             	sub    esp,0xc
c000afa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afaa:	e8 cd ff ff ff       	call   c000af7c <Serial::~Serial()>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	83 ec 08             	sub    esp,0x8
c000afb5:	68 58 01 00 00       	push   0x158
c000afba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afbe:	e8 c5 22 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c000afc3:	83 c4 10             	add    esp,0x10
c000afc6:	83 c4 0c             	add    esp,0xc
c000afc9:	c3                   	ret    
c000afca:	66 90                	xchg   ax,ax

c000afcc <Timer::Timer(char const*)>:
c000afcc:	83 ec 0c             	sub    esp,0xc
c000afcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd3:	83 ec 08             	sub    esp,0x8
c000afd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afda:	50                   	push   eax
c000afdb:	e8 78 eb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000afe0:	83 c4 10             	add    esp,0x10
c000afe3:	ba 30 75 02 c0       	mov    edx,0xc0027530
c000afe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afec:	89 10                	mov    DWORD PTR [eax],edx
c000afee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000affc:	90                   	nop
c000affd:	83 c4 0c             	add    esp,0xc
c000b000:	c3                   	ret    
c000b001:	90                   	nop
c000b002:	66 90                	xchg   ax,ax

c000b004 <Timer::~Timer()>:
c000b004:	83 ec 0c             	sub    esp,0xc
c000b007:	ba 30 75 02 c0       	mov    edx,0xc0027530
c000b00c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b010:	89 10                	mov    DWORD PTR [eax],edx
c000b012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b016:	83 ec 0c             	sub    esp,0xc
c000b019:	50                   	push   eax
c000b01a:	e8 d9 e8 ff ff       	call   c00098f8 <Device::~Device()>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	90                   	nop
c000b023:	83 c4 0c             	add    esp,0xc
c000b026:	c3                   	ret    
c000b027:	90                   	nop

c000b028 <Timer::~Timer()>:
c000b028:	83 ec 0c             	sub    esp,0xc
c000b02b:	83 ec 0c             	sub    esp,0xc
c000b02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b032:	e8 cd ff ff ff       	call   c000b004 <Timer::~Timer()>
c000b037:	83 c4 10             	add    esp,0x10
c000b03a:	83 ec 08             	sub    esp,0x8
c000b03d:	68 5c 01 00 00       	push   0x15c
c000b042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b046:	e8 3d 22 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	83 c4 0c             	add    esp,0xc
c000b051:	c3                   	ret    

c000b052 <Timer::read()>:
c000b052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b056:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b05c:	c3                   	ret    

c000b05d <setupTimer(int)>:
c000b05d:	53                   	push   ebx
c000b05e:	83 ec 14             	sub    esp,0x14
c000b061:	68 5c 01 00 00       	push   0x15c
c000b066:	e8 15 46 00 00       	call   c000f680 <malloc>
c000b06b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b06e:	89 c3                	mov    ebx,eax
c000b070:	e8 fb 64 01 00       	call   c0021570 <PIT::PIT()>
c000b075:	58                   	pop    eax
c000b076:	5a                   	pop    edx
c000b077:	53                   	push   ebx
c000b078:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c000b07e:	e8 73 e9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000b083:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b085:	6a 00                	push   0x0
c000b087:	6a 00                	push   0x0
c000b089:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b08d:	53                   	push   ebx
c000b08e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b091:	83 c4 28             	add    esp,0x28
c000b094:	89 d8                	mov    eax,ebx
c000b096:	5b                   	pop    ebx
c000b097:	c3                   	ret    

c000b098 <timerHandler(unsigned int)>:
c000b098:	57                   	push   edi
c000b099:	31 d2                	xor    edx,edx
c000b09b:	56                   	push   esi
c000b09c:	53                   	push   ebx
c000b09d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0a1:	01 1d 50 0b 03 c0    	add    DWORD PTR ds:0xc0030b50,ebx
c000b0a7:	11 15 54 0b 03 c0    	adc    DWORD PTR ds:0xc0030b54,edx
c000b0ad:	80 3d 0d 11 03 c0 00 	cmp    BYTE PTR ds:0xc003110d,0x0
c000b0b4:	75 12                	jne    c000b0c8 <timerHandler(unsigned int)+0x30>
c000b0b6:	c7 44 24 10 df 74 02 c0 	mov    DWORD PTR [esp+0x10],0xc00274df
c000b0be:	5b                   	pop    ebx
c000b0bf:	5e                   	pop    esi
c000b0c0:	5f                   	pop    edi
c000b0c1:	e9 a0 be ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c000b0c6:	66 90                	xchg   ax,ax
c000b0c8:	fa                   	cli    
c000b0c9:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c000b0cf:	83 ec 0c             	sub    esp,0xc
c000b0d2:	68 40 13 03 c0       	push   0xc0031340
c000b0d7:	e8 58 a8 01 00       	call   c0025934 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	84 c0                	test   al,al
c000b0e1:	0f 85 a9 00 00 00    	jne    c000b190 <timerHandler(unsigned int)+0xf8>
c000b0e7:	83 ec 0c             	sub    esp,0xc
c000b0ea:	68 40 13 03 c0       	push   0xc0031340
c000b0ef:	e8 5c a8 01 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b0f4:	83 c4 10             	add    esp,0x10
c000b0f7:	89 c6                	mov    esi,eax
c000b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c000b0fc:	83 ec 0c             	sub    esp,0xc
c000b0ff:	68 40 13 03 c0       	push   0xc0031340
c000b104:	e8 47 a8 01 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b109:	c7 04 24 40 13 03 c0 	mov    DWORD PTR [esp],0xc0031340
c000b110:	89 c7                	mov    edi,eax
c000b112:	e8 41 a8 01 00       	call   c0025958 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b117:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b11a:	83 c4 10             	add    esp,0x10
c000b11d:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b120:	a1 54 0b 03 c0       	mov    eax,ds:0xc0030b54
c000b125:	39 15 50 0b 03 c0    	cmp    DWORD PTR ds:0xc0030b50,edx
c000b12b:	19 c8                	sbb    eax,ecx
c000b12d:	72 21                	jb     c000b150 <timerHandler(unsigned int)+0xb8>
c000b12f:	83 ec 0c             	sub    esp,0xc
c000b132:	57                   	push   edi
c000b133:	e8 6c b8 00 00       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	39 fe                	cmp    esi,edi
c000b13d:	75 25                	jne    c000b164 <timerHandler(unsigned int)+0xcc>
c000b13f:	83 ec 0c             	sub    esp,0xc
c000b142:	68 40 13 03 c0       	push   0xc0031340
c000b147:	e8 04 a8 01 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b14c:	89 c6                	mov    esi,eax
c000b14e:	eb 10                	jmp    c000b160 <timerHandler(unsigned int)+0xc8>
c000b150:	51                   	push   ecx
c000b151:	51                   	push   ecx
c000b152:	57                   	push   edi
c000b153:	68 40 13 03 c0       	push   0xc0031340
c000b158:	e8 b7 a8 01 00       	call   c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b15d:	8d 76 00             	lea    esi,[esi+0x0]
c000b160:	83 c4 10             	add    esp,0x10
c000b163:	90                   	nop
c000b164:	83 ec 0c             	sub    esp,0xc
c000b167:	68 40 13 03 c0       	push   0xc0031340
c000b16c:	e8 c3 a7 01 00       	call   c0025934 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b171:	83 c4 10             	add    esp,0x10
c000b174:	84 c0                	test   al,al
c000b176:	75 18                	jne    c000b190 <timerHandler(unsigned int)+0xf8>
c000b178:	83 ec 0c             	sub    esp,0xc
c000b17b:	68 40 13 03 c0       	push   0xc0031340
c000b180:	e8 cb a7 01 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b185:	83 c4 10             	add    esp,0x10
c000b188:	39 f0                	cmp    eax,esi
c000b18a:	0f 85 6c ff ff ff    	jne    c000b0fc <timerHandler(unsigned int)+0x64>
c000b190:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b196:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b199:	85 c0                	test   eax,eax
c000b19b:	74 5f                	je     c000b1fc <timerHandler(unsigned int)+0x164>
c000b19d:	80 3d 0c 11 03 c0 00 	cmp    BYTE PTR ds:0xc003110c,0x0
c000b1a4:	74 56                	je     c000b1fc <timerHandler(unsigned int)+0x164>
c000b1a6:	3d e8 03 00 00       	cmp    eax,0x3e8
c000b1ab:	76 23                	jbe    c000b1d0 <timerHandler(unsigned int)+0x138>
c000b1ad:	80 7a 62 00          	cmp    BYTE PTR [edx+0x62],0x0
c000b1b1:	75 11                	jne    c000b1c4 <timerHandler(unsigned int)+0x12c>
c000b1b3:	52                   	push   edx
c000b1b4:	52                   	push   edx
c000b1b5:	50                   	push   eax
c000b1b6:	68 f5 74 02 c0       	push   0xc00274f5
c000b1bb:	e8 a6 bd ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b1c0:	83 c4 10             	add    esp,0x10
c000b1c3:	90                   	nop
c000b1c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1c9:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b1d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b1d6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b1d9:	39 d8                	cmp    eax,ebx
c000b1db:	73 0b                	jae    c000b1e8 <timerHandler(unsigned int)+0x150>
c000b1dd:	c7 42 38 00 00 00 00 	mov    DWORD PTR [edx+0x38],0x0
c000b1e4:	eb 0e                	jmp    c000b1f4 <timerHandler(unsigned int)+0x15c>
c000b1e6:	66 90                	xchg   ax,ax
c000b1e8:	89 c1                	mov    ecx,eax
c000b1ea:	29 d9                	sub    ecx,ebx
c000b1ec:	39 d8                	cmp    eax,ebx
c000b1ee:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b1f1:	75 09                	jne    c000b1fc <timerHandler(unsigned int)+0x164>
c000b1f3:	90                   	nop
c000b1f4:	e8 53 b4 00 00       	call   c001664c <schedule()>
c000b1f9:	8d 76 00             	lea    esi,[esi+0x0]
c000b1fc:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c000b203:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000b20a:	75 04                	jne    c000b210 <timerHandler(unsigned int)+0x178>
c000b20c:	fb                   	sti    
c000b20d:	8d 76 00             	lea    esi,[esi+0x0]
c000b210:	5b                   	pop    ebx
c000b211:	5e                   	pop    esi
c000b212:	5f                   	pop    edi
c000b213:	c3                   	ret    

c000b214 <VCache::VCache(PhysicalDisk*)>:
c000b214:	53                   	push   ebx
c000b215:	83 ec 18             	sub    esp,0x18
c000b218:	ba a0 75 02 c0       	mov    edx,0xc00275a0
c000b21d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b221:	89 10                	mov    DWORD PTR [eax],edx
c000b223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b227:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b232:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b23d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b244:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b24b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b24f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b256:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b25d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b261:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b274:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b27b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b286:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b28e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b296:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b29e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2a5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b2ad:	83 ec 0c             	sub    esp,0xc
c000b2b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b4:	e8 c7 43 00 00       	call   c000f680 <malloc>
c000b2b9:	83 c4 10             	add    esp,0x10
c000b2bc:	89 c3                	mov    ebx,eax
c000b2be:	83 ec 0c             	sub    esp,0xc
c000b2c1:	53                   	push   ebx
c000b2c2:	e8 ed 47 00 00       	call   c000fab4 <Mutex::Mutex()>
c000b2c7:	83 c4 10             	add    esp,0x10
c000b2ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b2e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2eb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b2f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b2f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2fc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b302:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b308:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b30c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b30f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b316:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b31a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b31e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b324:	05 00 01 00 00       	add    eax,0x100
c000b329:	c1 e0 04             	shl    eax,0x4
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	50                   	push   eax
c000b330:	e8 4b 43 00 00       	call   c000f680 <malloc>
c000b335:	83 c4 10             	add    esp,0x10
c000b338:	89 c2                	mov    edx,eax
c000b33a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b33e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b345:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b350:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b354:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b358:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b35e:	89 d0                	mov    eax,edx
c000b360:	c1 e0 02             	shl    eax,0x2
c000b363:	01 d0                	add    eax,edx
c000b365:	c1 e0 04             	shl    eax,0x4
c000b368:	83 ec 0c             	sub    esp,0xc
c000b36b:	50                   	push   eax
c000b36c:	e8 0f 43 00 00       	call   c000f680 <malloc>
c000b371:	83 c4 10             	add    esp,0x10
c000b374:	89 c2                	mov    edx,eax
c000b376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b37a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b37d:	90                   	nop
c000b37e:	83 c4 18             	add    esp,0x18
c000b381:	5b                   	pop    ebx
c000b382:	c3                   	ret    
c000b383:	90                   	nop

c000b384 <VCache::invalidateReadBuffer()>:
c000b384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b388:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b38e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b392:	c3                   	ret    
c000b393:	90                   	nop

c000b394 <VCache::writeWriteBuffer()>:
c000b394:	53                   	push   ebx
c000b395:	83 ec 08             	sub    esp,0x8
c000b398:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b39c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3a0:	74 1e                	je     c000b3c0 <VCache::writeWriteBuffer()+0x2c>
c000b3a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3a5:	83 ec 0c             	sub    esp,0xc
c000b3a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b3ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b3b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b3b3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b3b6:	50                   	push   eax
c000b3b7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b3ba:	83 c4 20             	add    esp,0x20
c000b3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b3c0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3c7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3ce:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3d2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3d9:	83 c4 08             	add    esp,0x8
c000b3dc:	5b                   	pop    ebx
c000b3dd:	c3                   	ret    
c000b3de:	66 90                	xchg   ax,ax

c000b3e0 <VCache::~VCache()>:
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	ba a0 75 02 c0       	mov    edx,0xc00275a0
c000b3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ec:	89 10                	mov    DWORD PTR [eax],edx
c000b3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b3f5:	0f b6 c0             	movzx  eax,al
c000b3f8:	85 c0                	test   eax,eax
c000b3fa:	74 10                	je     c000b40c <VCache::~VCache()+0x2c>
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b403:	e8 8c ff ff ff       	call   c000b394 <VCache::writeWriteBuffer()>
c000b408:	83 c4 10             	add    esp,0x10
c000b40b:	90                   	nop
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b413:	83 ec 0c             	sub    esp,0xc
c000b416:	50                   	push   eax
c000b417:	e8 74 42 00 00       	call   c000f690 <free>
c000b41c:	83 c4 10             	add    esp,0x10
c000b41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b423:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	50                   	push   eax
c000b42a:	e8 61 42 00 00       	call   c000f690 <free>
c000b42f:	83 c4 10             	add    esp,0x10
c000b432:	90                   	nop
c000b433:	83 c4 0c             	add    esp,0xc
c000b436:	c3                   	ret    
c000b437:	90                   	nop

c000b438 <VCache::~VCache()>:
c000b438:	83 ec 0c             	sub    esp,0xc
c000b43b:	83 ec 0c             	sub    esp,0xc
c000b43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b442:	e8 99 ff ff ff       	call   c000b3e0 <VCache::~VCache()>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	6a 44                	push   0x44
c000b44f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b453:	e8 30 1e 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	83 c4 0c             	add    esp,0xc
c000b45e:	c3                   	ret    
c000b45f:	90                   	nop

c000b460 <VCache::write(unsigned long long, int, void*)>:
c000b460:	55                   	push   ebp
c000b461:	57                   	push   edi
c000b462:	56                   	push   esi
c000b463:	53                   	push   ebx
c000b464:	83 ec 1c             	sub    esp,0x1c
c000b467:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b46b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b46f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b473:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b477:	e8 d4 ae 00 00       	call   c0016350 <KeDisablePreemption()>
c000b47c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b481:	50                   	push   eax
c000b482:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b485:	0f af c3             	imul   eax,ebx
c000b488:	05 ff 0f 00 00       	add    eax,0xfff
c000b48d:	99                   	cdq    
c000b48e:	f7 f9                	idiv   ecx
c000b490:	50                   	push   eax
c000b491:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b495:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b49b:	e8 d2 88 00 00       	call   c0013d72 <VAS::canLockPages(unsigned long, int)>
c000b4a0:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4a4:	83 c4 10             	add    esp,0x10
c000b4a7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b4ac:	74 2a                	je     c000b4d8 <VCache::write(unsigned long long, int, void*)+0x78>
c000b4ae:	50                   	push   eax
c000b4af:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4b7:	0f af c3             	imul   eax,ebx
c000b4ba:	05 ff 0f 00 00       	add    eax,0xfff
c000b4bf:	99                   	cdq    
c000b4c0:	f7 f9                	idiv   ecx
c000b4c2:	50                   	push   eax
c000b4c3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4c7:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b4cd:	e8 3e 8b 00 00       	call   c0014010 <VAS::lockPages(unsigned long, int)>
c000b4d2:	83 c4 10             	add    esp,0x10
c000b4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d8:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4dc:	74 0e                	je     c000b4ec <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	55                   	push   ebp
c000b4e2:	e8 9d fe ff ff       	call   c000b384 <VCache::invalidateReadBuffer()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	66 90                	xchg   ax,ax
c000b4ec:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b4f0:	74 72                	je     c000b564 <VCache::write(unsigned long long, int, void*)+0x104>
c000b4f2:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b4f5:	89 c8                	mov    eax,ecx
c000b4f7:	99                   	cdq    
c000b4f8:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b4fb:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b4fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b506:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b50a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b50e:	31 f0                	xor    eax,esi
c000b510:	31 fa                	xor    edx,edi
c000b512:	09 d0                	or     eax,edx
c000b514:	75 42                	jne    c000b558 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b516:	83 fb 01             	cmp    ebx,0x1
c000b519:	75 3d                	jne    c000b558 <VCache::write(unsigned long long, int, void*)+0xf8>
c000b51b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b51e:	89 cf                	mov    edi,ecx
c000b520:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b524:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b52a:	0f af f8             	imul   edi,eax
c000b52d:	89 c1                	mov    ecx,eax
c000b52f:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b532:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b534:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b537:	40                   	inc    eax
c000b538:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b53b:	83 f8 50             	cmp    eax,0x50
c000b53e:	0f 85 a8 00 00 00    	jne    c000b5ec <VCache::write(unsigned long long, int, void*)+0x18c>
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	55                   	push   ebp
c000b548:	e8 47 fe ff ff       	call   c000b394 <VCache::writeWriteBuffer()>
c000b54d:	83 c4 10             	add    esp,0x10
c000b550:	e9 97 00 00 00       	jmp    c000b5ec <VCache::write(unsigned long long, int, void*)+0x18c>
c000b555:	8d 76 00             	lea    esi,[esi+0x0]
c000b558:	83 ec 0c             	sub    esp,0xc
c000b55b:	55                   	push   ebp
c000b55c:	e8 33 fe ff ff       	call   c000b394 <VCache::writeWriteBuffer()>
c000b561:	83 c4 10             	add    esp,0x10
c000b564:	83 fb 4f             	cmp    ebx,0x4f
c000b567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b56a:	7f 20                	jg     c000b58c <VCache::write(unsigned long long, int, void*)+0x12c>
c000b56c:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b56f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b573:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b576:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b579:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b57c:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b580:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b588:	eb 62                	jmp    c000b5ec <VCache::write(unsigned long long, int, void*)+0x18c>
c000b58a:	66 90                	xchg   ax,ax
c000b58c:	83 ec 0c             	sub    esp,0xc
c000b58f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b591:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b595:	53                   	push   ebx
c000b596:	57                   	push   edi
c000b597:	56                   	push   esi
c000b598:	50                   	push   eax
c000b599:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b59c:	83 c4 20             	add    esp,0x20
c000b59f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5a4:	89 c6                	mov    esi,eax
c000b5a6:	74 28                	je     c000b5d0 <VCache::write(unsigned long long, int, void*)+0x170>
c000b5a8:	52                   	push   edx
c000b5a9:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5ae:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5b2:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5b8:	99                   	cdq    
c000b5b9:	f7 f9                	idiv   ecx
c000b5bb:	50                   	push   eax
c000b5bc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5c0:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b5c6:	e8 e3 87 00 00       	call   c0013dae <VAS::unlockPages(unsigned long, int)>
c000b5cb:	83 c4 10             	add    esp,0x10
c000b5ce:	66 90                	xchg   ax,ax
c000b5d0:	e8 a3 ad 00 00       	call   c0016378 <KeRestorePreemption()>
c000b5d5:	85 f6                	test   esi,esi
c000b5d7:	74 4b                	je     c000b624 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5d9:	83 ec 0c             	sub    esp,0xc
c000b5dc:	68 58 75 02 c0       	push   0xc0027558
c000b5e1:	e8 80 b9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	eb 39                	jmp    c000b624 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5eb:	90                   	nop
c000b5ec:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5f1:	74 29                	je     c000b61c <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b5f3:	50                   	push   eax
c000b5f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5f9:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5fd:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b603:	99                   	cdq    
c000b604:	f7 f9                	idiv   ecx
c000b606:	50                   	push   eax
c000b607:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b60b:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b611:	e8 98 87 00 00       	call   c0013dae <VAS::unlockPages(unsigned long, int)>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	8d 76 00             	lea    esi,[esi+0x0]
c000b61c:	e8 57 ad 00 00       	call   c0016378 <KeRestorePreemption()>
c000b621:	31 f6                	xor    esi,esi
c000b623:	90                   	nop
c000b624:	83 c4 1c             	add    esp,0x1c
c000b627:	89 f0                	mov    eax,esi
c000b629:	5b                   	pop    ebx
c000b62a:	5e                   	pop    esi
c000b62b:	5f                   	pop    edi
c000b62c:	5d                   	pop    ebp
c000b62d:	c3                   	ret    

c000b62e <VCache::read(unsigned long long, int, void*)>:
c000b62e:	55                   	push   ebp
c000b62f:	bd 00 10 00 00       	mov    ebp,0x1000
c000b634:	57                   	push   edi
c000b635:	56                   	push   esi
c000b636:	53                   	push   ebx
c000b637:	83 ec 2c             	sub    esp,0x2c
c000b63a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b63e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b642:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b646:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b652:	e8 f9 ac 00 00       	call   c0016350 <KeDisablePreemption()>
c000b657:	50                   	push   eax
c000b658:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b65b:	0f af c6             	imul   eax,esi
c000b65e:	05 ff 0f 00 00       	add    eax,0xfff
c000b663:	99                   	cdq    
c000b664:	f7 fd                	idiv   ebp
c000b666:	50                   	push   eax
c000b667:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b66b:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b671:	e8 fc 86 00 00       	call   c0013d72 <VAS::canLockPages(unsigned long, int)>
c000b676:	83 c4 10             	add    esp,0x10
c000b679:	84 c0                	test   al,al
c000b67b:	89 c7                	mov    edi,eax
c000b67d:	74 25                	je     c000b6a4 <VCache::read(unsigned long long, int, void*)+0x76>
c000b67f:	50                   	push   eax
c000b680:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b683:	0f af c6             	imul   eax,esi
c000b686:	05 ff 0f 00 00       	add    eax,0xfff
c000b68b:	99                   	cdq    
c000b68c:	f7 fd                	idiv   ebp
c000b68e:	50                   	push   eax
c000b68f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b693:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b699:	e8 72 89 00 00       	call   c0014010 <VAS::lockPages(unsigned long, int)>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b6a4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6a8:	74 0e                	je     c000b6b8 <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6aa:	83 ec 0c             	sub    esp,0xc
c000b6ad:	53                   	push   ebx
c000b6ae:	e8 e1 fc ff ff       	call   c000b394 <VCache::writeWriteBuffer()>
c000b6b3:	83 c4 10             	add    esp,0x10
c000b6b6:	66 90                	xchg   ax,ax
c000b6b8:	83 fe 01             	cmp    esi,0x1
c000b6bb:	0f 85 fb 00 00 00    	jne    c000b7bc <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b6c4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000b6cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6cf:	0f 85 e7 00 00 00    	jne    c000b7bc <VCache::read(unsigned long long, int, void*)+0x18e>
c000b6d5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000b6d8:	89 ee                	mov    esi,ebp
c000b6da:	f7 de                	neg    esi
c000b6dc:	89 f0                	mov    eax,esi
c000b6de:	c1 f8 1f             	sar    eax,0x1f
c000b6e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6e5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b6e9:	23 4c 24 0c          	and    ecx,DWORD PTR [esp+0xc]
c000b6ed:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b6f1:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b6f5:	89 ca                	mov    edx,ecx
c000b6f7:	89 f9                	mov    ecx,edi
c000b6f9:	0f b6 f9             	movzx  edi,cl
c000b6fc:	89 f0                	mov    eax,esi
c000b6fe:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000b702:	74 0c                	je     c000b710 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b704:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b707:	75 07                	jne    c000b710 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b709:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000b70c:	74 56                	je     c000b764 <VCache::read(unsigned long long, int, void*)+0x136>
c000b70e:	66 90                	xchg   ax,ax
c000b710:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b714:	83 ec 0c             	sub    esp,0xc
c000b717:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b71a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000b71e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b721:	8b 37                	mov    esi,DWORD PTR [edi]
c000b723:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b726:	55                   	push   ebp
c000b727:	52                   	push   edx
c000b728:	50                   	push   eax
c000b729:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b72d:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b730:	83 c4 20             	add    esp,0x20
c000b733:	85 c0                	test   eax,eax
c000b735:	89 c5                	mov    ebp,eax
c000b737:	74 2b                	je     c000b764 <VCache::read(unsigned long long, int, void*)+0x136>
c000b739:	83 ec 0c             	sub    esp,0xc
c000b73c:	68 70 75 02 c0       	push   0xc0027570
c000b741:	e8 20 b8 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000b746:	83 c4 10             	add    esp,0x10
c000b749:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b74e:	0f 84 bc 00 00 00    	je     c000b810 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b754:	56                   	push   esi
c000b755:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b758:	05 ff 0f 00 00       	add    eax,0xfff
c000b75d:	e9 92 00 00 00       	jmp    c000b7f4 <VCache::read(unsigned long long, int, void*)+0x1c6>
c000b762:	66 90                	xchg   ax,ax
c000b764:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b767:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000b76b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b771:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b774:	8d 70 ff             	lea    esi,[eax-0x1]
c000b777:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b77b:	0f af f1             	imul   esi,ecx
c000b77e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b781:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b783:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b788:	74 26                	je     c000b7b0 <VCache::read(unsigned long long, int, void*)+0x182>
c000b78a:	51                   	push   ecx
c000b78b:	b9 00 10 00 00       	mov    ecx,0x1000
c000b790:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b793:	05 ff 0f 00 00       	add    eax,0xfff
c000b798:	99                   	cdq    
c000b799:	f7 f9                	idiv   ecx
c000b79b:	50                   	push   eax
c000b79c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b7a0:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b7a6:	e8 03 86 00 00       	call   c0013dae <VAS::unlockPages(unsigned long, int)>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	66 90                	xchg   ax,ax
c000b7b0:	e8 c3 ab 00 00       	call   c0016378 <KeRestorePreemption()>
c000b7b5:	31 ed                	xor    ebp,ebp
c000b7b7:	eb 5f                	jmp    c000b818 <VCache::read(unsigned long long, int, void*)+0x1ea>
c000b7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7bc:	83 ec 0c             	sub    esp,0xc
c000b7bf:	53                   	push   ebx
c000b7c0:	e8 bf fb ff ff       	call   c000b384 <VCache::invalidateReadBuffer()>
c000b7c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7c8:	5a                   	pop    edx
c000b7c9:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b7cf:	56                   	push   esi
c000b7d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7d4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7d8:	50                   	push   eax
c000b7d9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7dc:	83 c4 20             	add    esp,0x20
c000b7df:	89 c5                	mov    ebp,eax
c000b7e1:	89 f8                	mov    eax,edi
c000b7e3:	84 c0                	test   al,al
c000b7e5:	74 29                	je     c000b810 <VCache::read(unsigned long long, int, void*)+0x1e2>
c000b7e7:	50                   	push   eax
c000b7e8:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b7ec:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b7f2:	66 90                	xchg   ax,ax
c000b7f4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7f9:	99                   	cdq    
c000b7fa:	f7 f9                	idiv   ecx
c000b7fc:	50                   	push   eax
c000b7fd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000b801:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000b807:	e8 a2 85 00 00       	call   c0013dae <VAS::unlockPages(unsigned long, int)>
c000b80c:	83 c4 10             	add    esp,0x10
c000b80f:	90                   	nop
c000b810:	e8 63 ab 00 00       	call   c0016378 <KeRestorePreemption()>
c000b815:	8d 76 00             	lea    esi,[esi+0x0]
c000b818:	83 c4 2c             	add    esp,0x2c
c000b81b:	89 e8                	mov    eax,ebp
c000b81d:	5b                   	pop    ebx
c000b81e:	5e                   	pop    esi
c000b81f:	5f                   	pop    edi
c000b820:	5d                   	pop    ebp
c000b821:	c3                   	ret    

c000b822 <Video::putrect(int, int, int, int, unsigned int)>:
c000b822:	55                   	push   ebp
c000b823:	57                   	push   edi
c000b824:	56                   	push   esi
c000b825:	53                   	push   ebx
c000b826:	83 ec 1c             	sub    esp,0x1c
c000b829:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b82d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b831:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b835:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b839:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b83d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b841:	01 df                	add    edi,ebx
c000b843:	39 fb                	cmp    ebx,edi
c000b845:	7d 1f                	jge    c000b866 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b847:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b84b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b84f:	7d 12                	jge    c000b863 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b851:	8b 16                	mov    edx,DWORD PTR [esi]
c000b853:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b857:	53                   	push   ebx
c000b858:	55                   	push   ebp
c000b859:	45                   	inc    ebp
c000b85a:	56                   	push   esi
c000b85b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b85e:	83 c4 10             	add    esp,0x10
c000b861:	eb e8                	jmp    c000b84b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b863:	43                   	inc    ebx
c000b864:	eb dd                	jmp    c000b843 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b866:	83 c4 1c             	add    esp,0x1c
c000b869:	5b                   	pop    ebx
c000b86a:	5e                   	pop    esi
c000b86b:	5f                   	pop    edi
c000b86c:	5d                   	pop    ebp
c000b86d:	c3                   	ret    

c000b86e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b86e:	55                   	push   ebp
c000b86f:	57                   	push   edi
c000b870:	31 ff                	xor    edi,edi
c000b872:	56                   	push   esi
c000b873:	53                   	push   ebx
c000b874:	83 ec 1c             	sub    esp,0x1c
c000b877:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b87b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b87f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b886:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b88b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b88f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b893:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b897:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b89a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b89e:	01 f9                	add    ecx,edi
c000b8a0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8a4:	7d 2f                	jge    c000b8d5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8a6:	31 f6                	xor    esi,esi
c000b8a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8ac:	01 f2                	add    edx,esi
c000b8ae:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8b2:	7d 1a                	jge    c000b8ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8b7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8ba:	46                   	inc    esi
c000b8bb:	51                   	push   ecx
c000b8bc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b8c0:	52                   	push   edx
c000b8c1:	55                   	push   ebp
c000b8c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8c5:	83 c4 10             	add    esp,0x10
c000b8c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8cc:	eb da                	jmp    c000b8a8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8ce:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8d2:	47                   	inc    edi
c000b8d3:	eb c5                	jmp    c000b89a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8d5:	83 c4 1c             	add    esp,0x1c
c000b8d8:	5b                   	pop    ebx
c000b8d9:	5e                   	pop    esi
c000b8da:	5f                   	pop    edi
c000b8db:	5d                   	pop    ebp
c000b8dc:	c3                   	ret    
c000b8dd:	90                   	nop

c000b8de <Video::blit(unsigned int*, int, int, int, int)>:
c000b8de:	55                   	push   ebp
c000b8df:	ba 00 00 00 00       	mov    edx,0x0
c000b8e4:	57                   	push   edi
c000b8e5:	56                   	push   esi
c000b8e6:	53                   	push   ebx
c000b8e7:	83 ec 1c             	sub    esp,0x1c
c000b8ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8ee:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b8f2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8f6:	85 c0                	test   eax,eax
c000b8f8:	0f 49 d0             	cmovns edx,eax
c000b8fb:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000b902:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000b906:	89 eb                	mov    ebx,ebp
c000b908:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b90c:	01 ea                	add    edx,ebp
c000b90e:	39 da                	cmp    edx,ebx
c000b910:	7e 54                	jle    c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b912:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b918:	7c 4c                	jl     c000b966 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000b91a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b91e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b922:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b926:	01 c1                	add    ecx,eax
c000b928:	39 f9                	cmp    ecx,edi
c000b92a:	7e 2f                	jle    c000b95b <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000b92c:	83 c2 04             	add    edx,0x4
c000b92f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b935:	7c 21                	jl     c000b958 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000b937:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b93b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b93d:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000b940:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b944:	55                   	push   ebp
c000b945:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b949:	56                   	push   esi
c000b94a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b94d:	83 c4 10             	add    esp,0x10
c000b950:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b954:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b958:	47                   	inc    edi
c000b959:	eb c7                	jmp    c000b922 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000b95b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000b95f:	43                   	inc    ebx
c000b960:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000b964:	eb a2                	jmp    c000b908 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000b966:	83 c4 1c             	add    esp,0x1c
c000b969:	5b                   	pop    ebx
c000b96a:	5e                   	pop    esi
c000b96b:	5f                   	pop    edi
c000b96c:	5d                   	pop    ebp
c000b96d:	c3                   	ret    

c000b96e <Video::clearScreen(unsigned int)>:
c000b96e:	83 ec 14             	sub    esp,0x14
c000b971:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b975:	8b 10                	mov    edx,DWORD PTR [eax]
c000b977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b97b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000b981:	ff b0 58 01 00 00    	push   DWORD PTR [eax+0x158]
c000b987:	6a 00                	push   0x0
c000b989:	6a 00                	push   0x0
c000b98b:	50                   	push   eax
c000b98c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b98f:	83 c4 2c             	add    esp,0x2c
c000b992:	c3                   	ret    
c000b993:	90                   	nop

c000b994 <Video::putpixel(int, int, unsigned int)>:
c000b994:	c7 44 24 04 a8 75 02 c0 	mov    DWORD PTR [esp+0x4],0xc00275a8
c000b99c:	e9 33 41 00 00       	jmp    c000fad4 <KePanic(char const*)>
c000b9a1:	90                   	nop

c000b9a2 <Video::readPixelApprox(int, int)>:
c000b9a2:	83 ec 18             	sub    esp,0x18
c000b9a5:	68 c9 75 02 c0       	push   0xc00275c9
c000b9aa:	e8 25 41 00 00       	call   c000fad4 <KePanic(char const*)>
c000b9af:	31 c0                	xor    eax,eax
c000b9b1:	83 c4 1c             	add    esp,0x1c
c000b9b4:	c3                   	ret    
c000b9b5:	90                   	nop

c000b9b6 <Video::Video(char const*)>:
c000b9b6:	83 ec 0c             	sub    esp,0xc
c000b9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9bd:	83 ec 08             	sub    esp,0x8
c000b9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9c4:	50                   	push   eax
c000b9c5:	e8 8e e1 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	ba 6c 76 02 c0       	mov    edx,0xc002766c
c000b9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d6:	89 10                	mov    DWORD PTR [eax],edx
c000b9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9dc:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b9e6:	90                   	nop
c000b9e7:	83 c4 0c             	add    esp,0xc
c000b9ea:	c3                   	ret    
c000b9eb:	90                   	nop

c000b9ec <Video::~Video()>:
c000b9ec:	83 ec 0c             	sub    esp,0xc
c000b9ef:	ba 6c 76 02 c0       	mov    edx,0xc002766c
c000b9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f8:	89 10                	mov    DWORD PTR [eax],edx
c000b9fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fe:	83 ec 0c             	sub    esp,0xc
c000ba01:	50                   	push   eax
c000ba02:	e8 f1 de ff ff       	call   c00098f8 <Device::~Device()>
c000ba07:	83 c4 10             	add    esp,0x10
c000ba0a:	90                   	nop
c000ba0b:	83 c4 0c             	add    esp,0xc
c000ba0e:	c3                   	ret    
c000ba0f:	90                   	nop

c000ba10 <Video::~Video()>:
c000ba10:	83 ec 0c             	sub    esp,0xc
c000ba13:	83 ec 0c             	sub    esp,0xc
c000ba16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba1a:	e8 cd ff ff ff       	call   c000b9ec <Video::~Video()>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	83 ec 08             	sub    esp,0x8
c000ba25:	68 64 01 00 00       	push   0x164
c000ba2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba2e:	e8 55 18 00 00       	call   c000d288 <operator delete(void*, unsigned long)>
c000ba33:	83 c4 10             	add    esp,0x10
c000ba36:	83 c4 0c             	add    esp,0xc
c000ba39:	c3                   	ret    

c000ba3a <Video::isMonochrome()>:
c000ba3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba3e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba44:	c3                   	ret    
c000ba45:	90                   	nop

c000ba46 <Video::getWidth()>:
c000ba46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba4a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba50:	c3                   	ret    
c000ba51:	90                   	nop

c000ba52 <Video::getHeight()>:
c000ba52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba56:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba5c:	c3                   	ret    
c000ba5d:	90                   	nop

c000ba5e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba5e:	55                   	push   ebp
c000ba5f:	57                   	push   edi
c000ba60:	56                   	push   esi
c000ba61:	53                   	push   ebx
c000ba62:	83 ec 2c             	sub    esp,0x2c
c000ba65:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba69:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ba6d:	83 f8 01             	cmp    eax,0x1
c000ba70:	19 c9                	sbb    ecx,ecx
c000ba72:	31 db                	xor    ebx,ebx
c000ba74:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ba78:	f7 54 24 14          	not    DWORD PTR [esp+0x14]
c000ba7c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba80:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba88:	81 64 24 14 ff ff ff 00 	and    DWORD PTR [esp+0x14],0xffffff
c000ba90:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba94:	01 d8                	add    eax,ebx
c000ba96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba9a:	56                   	push   esi
c000ba9b:	e8 b2 ff ff ff       	call   c000ba52 <Video::getHeight()>
c000baa0:	59                   	pop    ecx
c000baa1:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000baa5:	0f 8e 80 00 00 00    	jle    c000bb2b <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000baab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baaf:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000bab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bab6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baba:	8b ac 98 80 00 00 00 	mov    ebp,DWORD PTR [eax+ebx*4+0x80]
c000bac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bac5:	09 e8                	or     eax,ebp
c000bac7:	74 47                	je     c000bb10 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000bac9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bacd:	89 f8                	mov    eax,edi
c000bacf:	83 c0 1f             	add    eax,0x1f
c000bad2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bad6:	56                   	push   esi
c000bad7:	e8 6a ff ff ff       	call   c000ba46 <Video::getWidth()>
c000badc:	5a                   	pop    edx
c000badd:	39 c7                	cmp    edi,eax
c000badf:	7d 2f                	jge    c000bb10 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000bae1:	f7 c5 01 00 00 00    	test   ebp,0x1
c000bae7:	74 33                	je     c000bb1c <Video::drawCursor(int, int, unsigned int*, int)+0xbe>
c000bae9:	8b 06                	mov    eax,DWORD PTR [esi]
c000baeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf3:	57                   	push   edi
c000baf4:	56                   	push   esi
c000baf5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000baf8:	83 c4 10             	add    esp,0x10
c000bafb:	d1 ed                	shr    ebp,1
c000bafd:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c000bb01:	39 7c 24 1c          	cmp    DWORD PTR [esp+0x1c],edi
c000bb05:	74 09                	je     c000bb10 <Video::drawCursor(int, int, unsigned int*, int)+0xb2>
c000bb07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb0b:	47                   	inc    edi
c000bb0c:	09 e8                	or     eax,ebp
c000bb0e:	75 c6                	jne    c000bad6 <Video::drawCursor(int, int, unsigned int*, int)+0x78>
c000bb10:	43                   	inc    ebx
c000bb11:	83 fb 20             	cmp    ebx,0x20
c000bb14:	0f 85 76 ff ff ff    	jne    c000ba90 <Video::drawCursor(int, int, unsigned int*, int)+0x32>
c000bb1a:	eb 0f                	jmp    c000bb2b <Video::drawCursor(int, int, unsigned int*, int)+0xcd>
c000bb1c:	f6 44 24 0c 01       	test   BYTE PTR [esp+0xc],0x1
c000bb21:	74 d8                	je     c000bafb <Video::drawCursor(int, int, unsigned int*, int)+0x9d>
c000bb23:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb29:	eb c4                	jmp    c000baef <Video::drawCursor(int, int, unsigned int*, int)+0x91>
c000bb2b:	83 c4 2c             	add    esp,0x2c
c000bb2e:	5b                   	pop    ebx
c000bb2f:	5e                   	pop    esi
c000bb30:	5f                   	pop    edi
c000bb31:	5d                   	pop    ebp
c000bb32:	c3                   	ret    
c000bb33:	90                   	nop

c000bb34 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb34:	55                   	push   ebp
c000bb35:	57                   	push   edi
c000bb36:	56                   	push   esi
c000bb37:	53                   	push   ebx
c000bb38:	83 ec 48             	sub    esp,0x48
c000bb3b:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb3f:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb43:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb47:	c1 e0 08             	shl    eax,0x8
c000bb4a:	01 d0                	add    eax,edx
c000bb4c:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb54:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb58:	c1 e0 08             	shl    eax,0x8
c000bb5b:	01 d0                	add    eax,edx
c000bb5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb65:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000bb6a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb72:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb79:	50                   	push   eax
c000bb7a:	e8 01 3b 00 00       	call   c000f680 <malloc>
c000bb7f:	83 c4 10             	add    esp,0x10
c000bb82:	85 c0                	test   eax,eax
c000bb84:	89 c5                	mov    ebp,eax
c000bb86:	75 10                	jne    c000bb98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000bb88:	83 ec 0c             	sub    esp,0xc
c000bb8b:	68 f4 75 02 c0       	push   0xc00275f4
c000bb90:	e8 3f 3f 00 00       	call   c000fad4 <KePanic(char const*)>
c000bb95:	83 c4 10             	add    esp,0x10
c000bb98:	52                   	push   edx
c000bb99:	bf 12 00 00 00       	mov    edi,0x12
c000bb9e:	52                   	push   edx
c000bb9f:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bba3:	50                   	push   eax
c000bba4:	68 04 76 02 c0       	push   0xc0027604
c000bba9:	e8 b8 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbae:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbb1:	83 e0 20             	and    eax,0x20
c000bbb4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000bbb8:	85 c0                	test   eax,eax
c000bbba:	59                   	pop    ecx
c000bbbb:	0f 94 c0             	sete   al
c000bbbe:	0f b6 c0             	movzx  eax,al
c000bbc1:	5e                   	pop    esi
c000bbc2:	50                   	push   eax
c000bbc3:	68 0e 76 02 c0       	push   0xc002760e
c000bbc8:	e8 99 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bbcd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000bbd1:	83 c4 10             	add    esp,0x10
c000bbd4:	85 c0                	test   eax,eax
c000bbd6:	89 c2                	mov    edx,eax
c000bbd8:	74 11                	je     c000bbeb <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000bbda:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000bbde:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bbe2:	c1 ff 03             	sar    edi,0x3
c000bbe5:	0f af f9             	imul   edi,ecx
c000bbe8:	83 c7 12             	add    edi,0x12
c000bbeb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbf0:	74 07                	je     c000bbf9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000bbf2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bbf7:	75 12                	jne    c000bc0b <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000bbf9:	83 ec 0c             	sub    esp,0xc
c000bbfc:	68 1c 76 02 c0       	push   0xc002761c
c000bc01:	e8 60 b3 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bc06:	e9 aa 02 00 00       	jmp    c000beb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000bc0b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc0f:	83 f9 02             	cmp    ecx,0x2
c000bc12:	74 0e                	je     c000bc22 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000bc14:	83 f9 0a             	cmp    ecx,0xa
c000bc17:	0f 84 d1 00 00 00    	je     c000bcee <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000bc1d:	e9 7e 02 00 00       	jmp    c000bea0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000bc22:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc27:	75 0e                	jne    c000bc37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc29:	84 d2                	test   dl,dl
c000bc2b:	75 0a                	jne    c000bc37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000bc2d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc30:	83 e8 18             	sub    eax,0x18
c000bc33:	a8 f7                	test   al,0xf7
c000bc35:	74 0d                	je     c000bc44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000bc37:	83 ec 0c             	sub    esp,0xc
c000bc3a:	68 31 76 02 c0       	push   0xc0027631
c000bc3f:	e9 64 02 00 00       	jmp    c000bea8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bc44:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc4c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000bc51:	31 c0                	xor    eax,eax
c000bc53:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000bc57:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bc5f:	89 c6                	mov    esi,eax
c000bc61:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bc66:	75 15                	jne    c000bc7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc68:	99                   	cdq    
c000bc69:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bc6d:	85 d2                	test   edx,edx
c000bc6f:	75 0c                	jne    c000bc7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000bc71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000bc75:	29 c6                	sub    esi,eax
c000bc77:	4e                   	dec    esi
c000bc78:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000bc7d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc89:	75 0c                	jne    c000bc97 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000bc8b:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000bc90:	c1 e2 18             	shl    edx,0x18
c000bc93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc97:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000bc9c:	8d 46 01             	lea    eax,[esi+0x1]
c000bc9f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000bca3:	c1 e1 10             	shl    ecx,0x10
c000bca6:	89 ca                	mov    edx,ecx
c000bca8:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000bcad:	c1 e1 08             	shl    ecx,0x8
c000bcb0:	09 d1                	or     ecx,edx
c000bcb2:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bcb6:	09 d1                	or     ecx,edx
c000bcb8:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000bcbc:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000bcc0:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bcc4:	c1 fa 03             	sar    edx,0x3
c000bcc7:	01 d7                	add    edi,edx
c000bcc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bccd:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000bcd1:	7e 04                	jle    c000bcd7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000bcd3:	89 c6                	mov    esi,eax
c000bcd5:	eb 8a                	jmp    c000bc61 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000bcd7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bcdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcdf:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bce3:	0f 8f 6e ff ff ff    	jg     c000bc57 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000bce9:	e9 ce 01 00 00       	jmp    c000bebc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bcee:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bcf3:	75 0e                	jne    c000bd03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bcf5:	85 c0                	test   eax,eax
c000bcf7:	75 0a                	jne    c000bd03 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000bcf9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bcfc:	83 e8 18             	sub    eax,0x18
c000bcff:	a8 f7                	test   al,0xf7
c000bd01:	74 0d                	je     c000bd10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000bd03:	83 ec 0c             	sub    esp,0xc
c000bd06:	68 3f 76 02 c0       	push   0xc002763f
c000bd0b:	e9 98 01 00 00       	jmp    c000bea8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000bd10:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000bd18:	31 c9                	xor    ecx,ecx
c000bd1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bd22:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000bd26:	0f 8d 90 01 00 00    	jge    c000bebc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd2c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bd30:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000bd34:	0f 8e 82 01 00 00    	jle    c000bebc <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000bd3a:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000bd3e:	8d 77 01             	lea    esi,[edi+0x1]
c000bd41:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd45:	83 fa 7f             	cmp    edx,0x7f
c000bd48:	89 d0                	mov    eax,edx
c000bd4a:	0f 8e a3 00 00 00    	jle    c000bdf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000bd50:	83 e0 7f             	and    eax,0x7f
c000bd53:	31 d2                	xor    edx,edx
c000bd55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd59:	40                   	inc    eax
c000bd5a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bd62:	75 08                	jne    c000bd6c <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000bd64:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000bd69:	c1 e2 18             	shl    edx,0x18
c000bd6c:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000bd71:	c1 e0 10             	shl    eax,0x10
c000bd74:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd78:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000bd7d:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000bd81:	c1 e0 08             	shl    eax,0x8
c000bd84:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000bd88:	09 f8                	or     eax,edi
c000bd8a:	31 ff                	xor    edi,edi
c000bd8c:	09 d0                	or     eax,edx
c000bd8e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000bd97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd9b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000bda0:	75 1d                	jne    c000bdbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bda2:	89 c8                	mov    eax,ecx
c000bda4:	99                   	cdq    
c000bda5:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000bda9:	85 d2                	test   edx,edx
c000bdab:	75 12                	jne    c000bdbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000bdad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bdb1:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000bdb5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bdb9:	49                   	dec    ecx
c000bdba:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000bdbf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bdc3:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdc6:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000bdca:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000bdce:	8d 47 01             	lea    eax,[edi+0x1]
c000bdd1:	7e 06                	jle    c000bdd9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000bdd3:	89 c7                	mov    edi,eax
c000bdd5:	89 d1                	mov    ecx,edx
c000bdd7:	eb c2                	jmp    c000bd9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000bdd9:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bddd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000bde1:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000bde5:	c1 f8 03             	sar    eax,0x3
c000bde8:	01 c6                	add    esi,eax
c000bdea:	89 d1                	mov    ecx,edx
c000bdec:	89 f7                	mov    edi,esi
c000bdee:	e9 2f ff ff ff       	jmp    c000bd22 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000bdf3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bdfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bdff:	40                   	inc    eax
c000be00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000be09:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be0d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be12:	75 1d                	jne    c000be31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be14:	89 c8                	mov    eax,ecx
c000be16:	99                   	cdq    
c000be17:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000be1b:	85 d2                	test   edx,edx
c000be1d:	75 12                	jne    c000be31 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000be1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be23:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000be27:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000be2b:	49                   	dec    ecx
c000be2c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000be31:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be35:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be3d:	75 0c                	jne    c000be4b <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000be3f:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000be44:	c1 e7 18             	shl    edi,0x18
c000be47:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be4b:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000be50:	8d 51 01             	lea    edx,[ecx+0x1]
c000be53:	c1 e0 10             	shl    eax,0x10
c000be56:	89 c7                	mov    edi,eax
c000be58:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000be5d:	c1 e0 08             	shl    eax,0x8
c000be60:	09 f8                	or     eax,edi
c000be62:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000be66:	09 f8                	or     eax,edi
c000be68:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be6c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000be70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000be74:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be78:	c1 f8 03             	sar    eax,0x3
c000be7b:	01 c6                	add    esi,eax
c000be7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be81:	40                   	inc    eax
c000be82:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000be86:	7e 0b                	jle    c000be93 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000be88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be8c:	89 d1                	mov    ecx,edx
c000be8e:	e9 7a ff ff ff       	jmp    c000be0d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000be93:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000be97:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000be9b:	e9 4a ff ff ff       	jmp    c000bdea <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000bea0:	50                   	push   eax
c000bea1:	50                   	push   eax
c000bea2:	51                   	push   ecx
c000bea3:	68 4e 76 02 c0       	push   0xc002764e
c000bea8:	e8 b9 b0 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000bead:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000beb0:	e8 db 37 00 00       	call   c000f690 <free>
c000beb5:	83 c4 10             	add    esp,0x10
c000beb8:	31 ed                	xor    ebp,ebp
c000beba:	eb 14                	jmp    c000bed0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000bebc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bec0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000bec4:	89 18                	mov    DWORD PTR [eax],ebx
c000bec6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000beca:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bece:	89 18                	mov    DWORD PTR [eax],ebx
c000bed0:	83 c4 3c             	add    esp,0x3c
c000bed3:	89 e8                	mov    eax,ebp
c000bed5:	5b                   	pop    ebx
c000bed6:	5e                   	pop    esi
c000bed7:	5f                   	pop    edi
c000bed8:	5d                   	pop    ebp
c000bed9:	c3                   	ret    

c000beda <Video::putTGA(int, int, unsigned char*, int)>:
c000beda:	55                   	push   ebp
c000bedb:	57                   	push   edi
c000bedc:	56                   	push   esi
c000bedd:	53                   	push   ebx
c000bede:	83 ec 28             	sub    esp,0x28
c000bee1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bee5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000bee9:	50                   	push   eax
c000beea:	8d 44 24 18          	lea    eax,[esp+0x18]
c000beee:	50                   	push   eax
c000beef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bef3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bef7:	55                   	push   ebp
c000bef8:	e8 37 fc ff ff       	call   c000bb34 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000befd:	83 c4 20             	add    esp,0x20
c000bf00:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf04:	85 c0                	test   eax,eax
c000bf06:	74 3b                	je     c000bf43 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf08:	89 c6                	mov    esi,eax
c000bf0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf0e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf12:	39 d8                	cmp    eax,ebx
c000bf14:	7e 2d                	jle    c000bf43 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000bf16:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bf1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf1e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf22:	39 f8                	cmp    eax,edi
c000bf24:	7e 1a                	jle    c000bf40 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000bf26:	83 c6 04             	add    esi,0x4
c000bf29:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf2c:	85 c0                	test   eax,eax
c000bf2e:	79 0d                	jns    c000bf3d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000bf30:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000bf33:	50                   	push   eax
c000bf34:	53                   	push   ebx
c000bf35:	57                   	push   edi
c000bf36:	55                   	push   ebp
c000bf37:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000bf3a:	83 c4 10             	add    esp,0x10
c000bf3d:	47                   	inc    edi
c000bf3e:	eb da                	jmp    c000bf1a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf40:	43                   	inc    ebx
c000bf41:	eb c7                	jmp    c000bf0a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf43:	83 c4 1c             	add    esp,0x1c
c000bf46:	5b                   	pop    ebx
c000bf47:	5e                   	pop    esi
c000bf48:	5f                   	pop    edi
c000bf49:	5d                   	pop    ebp
c000bf4a:	c3                   	ret    
c000bf4b:	90                   	nop

c000bf4c <ACPI::close(int, int, void*)>:
c000bf4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf51:	c3                   	ret    
c000bf52:	66 90                	xchg   ax,ax

c000bf54 <loadACPITables(unsigned char*)>:
c000bf54:	57                   	push   edi
c000bf55:	56                   	push   esi
c000bf56:	53                   	push   ebx
c000bf57:	83 ec 60             	sub    esp,0x60
c000bf5a:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf5f:	0f 84 43 02 00 00    	je     c000c1a8 <loadACPITables(unsigned char*)+0x254>
c000bf65:	a0 80 0d 03 c0       	mov    al,ds:0xc0030d80
c000bf6a:	0f b6 c0             	movzx  eax,al
c000bf6d:	85 c0                	test   eax,eax
c000bf6f:	74 7b                	je     c000bfec <loadACPITables(unsigned char*)+0x98>
c000bf71:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf75:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf79:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf80:	83 e8 24             	sub    eax,0x24
c000bf83:	c1 e8 03             	shr    eax,0x3
c000bf86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf8a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf92:	66 90                	xchg   ax,ax
c000bf94:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf98:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf9c:	0f 8d ba 00 00 00    	jge    c000c05c <loadACPITables(unsigned char*)+0x108>
c000bfa2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfa6:	83 c0 24             	add    eax,0x24
c000bfa9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfb1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfb5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfb9:	c1 e0 03             	shl    eax,0x3
c000bfbc:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfc0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfc7:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc9:	89 c1                	mov    ecx,eax
c000bfcb:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c000bfd0:	8d 50 01             	lea    edx,[eax+0x1]
c000bfd3:	89 15 60 0b 03 c0    	mov    DWORD PTR ds:0xc0030b60,edx
c000bfd9:	89 ca                	mov    edx,ecx
c000bfdb:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c000bfe2:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bfe7:	eb ab                	jmp    c000bf94 <loadACPITables(unsigned char*)+0x40>
c000bfe9:	8d 76 00             	lea    esi,[esi+0x0]
c000bfec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bff0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bff4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bffb:	83 e8 24             	sub    eax,0x24
c000bffe:	c1 e8 02             	shr    eax,0x2
c000c001:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c005:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c00d:	8d 76 00             	lea    esi,[esi+0x0]
c000c010:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c014:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c018:	7d 42                	jge    c000c05c <loadACPITables(unsigned char*)+0x108>
c000c01a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c01e:	83 c0 24             	add    eax,0x24
c000c021:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c025:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c029:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c02d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c031:	c1 e0 02             	shl    eax,0x2
c000c034:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c038:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c03c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c03e:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c000c043:	8d 50 01             	lea    edx,[eax+0x1]
c000c046:	89 15 60 0b 03 c0    	mov    DWORD PTR ds:0xc0030b60,edx
c000c04c:	89 ca                	mov    edx,ecx
c000c04e:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c000c055:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c05a:	eb b4                	jmp    c000c010 <loadACPITables(unsigned char*)+0xbc>
c000c05c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c064:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c000c069:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c06d:	0f 8d 39 01 00 00    	jge    c000c1ac <loadACPITables(unsigned char*)+0x258>
c000c073:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c077:	8b 04 c5 84 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf47c]
c000c07e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c082:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c086:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c08e:	25 ff 0f 00 00       	and    eax,0xfff
c000c093:	89 c6                	mov    esi,eax
c000c095:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c000c09b:	83 ec 0c             	sub    esp,0xc
c000c09e:	6a 01                	push   0x1
c000c0a0:	e8 76 6f 00 00       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c000c0a5:	83 c4 10             	add    esp,0x10
c000c0a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0b2:	83 ec 0c             	sub    esp,0xc
c000c0b5:	6a 01                	push   0x1
c000c0b7:	6a 01                	push   0x1
c000c0b9:	50                   	push   eax
c000c0ba:	52                   	push   edx
c000c0bb:	53                   	push   ebx
c000c0bc:	e8 2d 78 00 00       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0c1:	83 c4 20             	add    esp,0x20
c000c0c4:	09 f0                	or     eax,esi
c000c0c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0ca:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0ce:	c1 e0 03             	shl    eax,0x3
c000c0d1:	05 80 0b 03 c0       	add    eax,0xc0030b80
c000c0d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c0da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0e2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0fe:	89 c6                	mov    esi,eax
c000c100:	89 d7                	mov    edi,edx
c000c102:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c104:	89 c8                	mov    eax,ecx
c000c106:	89 fa                	mov    edx,edi
c000c108:	89 f3                	mov    ebx,esi
c000c10a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c10e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c112:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c116:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c11a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c11d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c121:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c125:	05 00 10 00 00       	add    eax,0x1000
c000c12a:	c1 e8 0c             	shr    eax,0xc
c000c12d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c131:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c135:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c139:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c13d:	25 ff 0f 00 00       	and    eax,0xfff
c000c142:	89 c6                	mov    esi,eax
c000c144:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c000c14a:	83 ec 0c             	sub    esp,0xc
c000c14d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c151:	e8 c5 6e 00 00       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c000c156:	83 c4 10             	add    esp,0x10
c000c159:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c15d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c163:	83 ec 0c             	sub    esp,0xc
c000c166:	6a 01                	push   0x1
c000c168:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c16c:	50                   	push   eax
c000c16d:	52                   	push   edx
c000c16e:	53                   	push   ebx
c000c16f:	e8 7a 77 00 00       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c174:	83 c4 20             	add    esp,0x20
c000c177:	09 f0                	or     eax,esi
c000c179:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c17d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c181:	83 ec 0c             	sub    esp,0xc
c000c184:	50                   	push   eax
c000c185:	e8 8f 71 00 00       	call   c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c191:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c195:	89 14 c5 84 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf47c],edx
c000c19c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1a1:	e9 be fe ff ff       	jmp    c000c064 <loadACPITables(unsigned char*)+0x110>
c000c1a6:	66 90                	xchg   ax,ax
c000c1a8:	90                   	nop
c000c1a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c1ac:	83 c4 60             	add    esp,0x60
c000c1af:	5b                   	pop    ebx
c000c1b0:	5e                   	pop    esi
c000c1b1:	5f                   	pop    edi
c000c1b2:	c3                   	ret    
c000c1b3:	90                   	nop

c000c1b4 <findRSDT(unsigned char*)>:
c000c1b4:	57                   	push   edi
c000c1b5:	56                   	push   esi
c000c1b6:	53                   	push   ebx
c000c1b7:	83 ec 50             	sub    esp,0x50
c000c1ba:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000c1bf:	85 c0                	test   eax,eax
c000c1c1:	75 0d                	jne    c000c1d0 <findRSDT(unsigned char*)+0x1c>
c000c1c3:	b8 00 00 00 00       	mov    eax,0x0
c000c1c8:	e9 2b 01 00 00       	jmp    c000c2f8 <findRSDT(unsigned char*)+0x144>
c000c1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d0:	89 e0                	mov    eax,esp
c000c1d2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1d6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c1da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c1de:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c1e6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c1f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c1f6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c1fa:	89 c6                	mov    esi,eax
c000c1fc:	89 d7                	mov    edi,edx
c000c1fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c200:	89 c8                	mov    eax,ecx
c000c202:	89 fa                	mov    edx,edi
c000c204:	89 f3                	mov    ebx,esi
c000c206:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c20a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c20e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c212:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c216:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c21a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c222:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c226:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c22a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c232:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c236:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c23a:	25 ff 0f 00 00       	and    eax,0xfff
c000c23f:	89 c6                	mov    esi,eax
c000c241:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c000c247:	83 ec 0c             	sub    esp,0xc
c000c24a:	6a 02                	push   0x2
c000c24c:	e8 ca 6d 00 00       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c000c251:	83 c4 10             	add    esp,0x10
c000c254:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c258:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c25e:	83 ec 0c             	sub    esp,0xc
c000c261:	6a 01                	push   0x1
c000c263:	6a 02                	push   0x2
c000c265:	50                   	push   eax
c000c266:	52                   	push   edx
c000c267:	53                   	push   ebx
c000c268:	e8 81 76 00 00       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c26d:	83 c4 20             	add    esp,0x20
c000c270:	09 f0                	or     eax,esi
c000c272:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c276:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c27a:	25 ff 0f 00 00       	and    eax,0xfff
c000c27f:	89 c6                	mov    esi,eax
c000c281:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c000c287:	83 ec 0c             	sub    esp,0xc
c000c28a:	6a 02                	push   0x2
c000c28c:	e8 8a 6d 00 00       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c000c291:	83 c4 10             	add    esp,0x10
c000c294:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c298:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c29e:	83 ec 0c             	sub    esp,0xc
c000c2a1:	6a 01                	push   0x1
c000c2a3:	6a 02                	push   0x2
c000c2a5:	50                   	push   eax
c000c2a6:	52                   	push   edx
c000c2a7:	53                   	push   ebx
c000c2a8:	e8 41 76 00 00       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2ad:	83 c4 20             	add    esp,0x20
c000c2b0:	09 f0                	or     eax,esi
c000c2b2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2b6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2bb:	85 c0                	test   eax,eax
c000c2bd:	75 11                	jne    c000c2d0 <findRSDT(unsigned char*)+0x11c>
c000c2bf:	c6 05 80 0d 03 c0 00 	mov    BYTE PTR ds:0xc0030d80,0x0
c000c2c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2ce:	eb 24                	jmp    c000c2f4 <findRSDT(unsigned char*)+0x140>
c000c2d0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2d5:	83 f8 02             	cmp    eax,0x2
c000c2d8:	75 12                	jne    c000c2ec <findRSDT(unsigned char*)+0x138>
c000c2da:	c6 05 80 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d80,0x1
c000c2e1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c2e5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2e9:	eb 09                	jmp    c000c2f4 <findRSDT(unsigned char*)+0x140>
c000c2eb:	90                   	nop
c000c2ec:	b8 00 00 00 00       	mov    eax,0x0
c000c2f1:	eb 05                	jmp    c000c2f8 <findRSDT(unsigned char*)+0x144>
c000c2f3:	90                   	nop
c000c2f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2f8:	83 c4 50             	add    esp,0x50
c000c2fb:	5b                   	pop    ebx
c000c2fc:	5e                   	pop    esi
c000c2fd:	5f                   	pop    edi
c000c2fe:	c3                   	ret    
c000c2ff:	90                   	nop

c000c300 <findDataTable(unsigned char*, char*)>:
c000c300:	83 ec 1c             	sub    esp,0x1c
c000c303:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c308:	75 0a                	jne    c000c314 <findDataTable(unsigned char*, char*)+0x14>
c000c30a:	b8 00 00 00 00       	mov    eax,0x0
c000c30f:	eb 5f                	jmp    c000c370 <findDataTable(unsigned char*, char*)+0x70>
c000c311:	8d 76 00             	lea    esi,[esi+0x0]
c000c314:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c31c:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c000c321:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c325:	7d 41                	jge    c000c368 <findDataTable(unsigned char*, char*)+0x68>
c000c327:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c32b:	c1 e0 03             	shl    eax,0x3
c000c32e:	05 80 0b 03 c0       	add    eax,0xc0030b80
c000c333:	83 ec 04             	sub    esp,0x4
c000c336:	6a 04                	push   0x4
c000c338:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c33c:	50                   	push   eax
c000c33d:	e8 3e 40 ff ff       	call   c0000380 <memcmp>
c000c342:	83 c4 10             	add    esp,0x10
c000c345:	85 c0                	test   eax,eax
c000c347:	0f 94 c0             	sete   al
c000c34a:	0f b6 c0             	movzx  eax,al
c000c34d:	85 c0                	test   eax,eax
c000c34f:	74 0f                	je     c000c360 <findDataTable(unsigned char*, char*)+0x60>
c000c351:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c355:	8b 04 c5 84 0b 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf47c]
c000c35c:	eb 12                	jmp    c000c370 <findDataTable(unsigned char*, char*)+0x70>
c000c35e:	66 90                	xchg   ax,ax
c000c360:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c365:	eb b5                	jmp    c000c31c <findDataTable(unsigned char*, char*)+0x1c>
c000c367:	90                   	nop
c000c368:	b8 00 00 00 00       	mov    eax,0x0
c000c36d:	8d 76 00             	lea    esi,[esi+0x0]
c000c370:	83 c4 1c             	add    esp,0x1c
c000c373:	c3                   	ret    

c000c374 <scanMADT()>:
c000c374:	53                   	push   ebx
c000c375:	83 ec 38             	sub    esp,0x38
c000c378:	c7 05 88 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d88,0x0
c000c382:	c7 05 84 0d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030d84,0x0
c000c38c:	83 ec 0c             	sub    esp,0xc
c000c38f:	68 b0 76 02 c0       	push   0xc00276b0
c000c394:	e8 cd ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	e8 3e db 00 00       	call   c0019edf <HalFindRSDP()>
c000c3a1:	a3 88 0d 03 c0       	mov    ds:0xc0030d88,eax
c000c3a6:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000c3ab:	85 c0                	test   eax,eax
c000c3ad:	0f 84 59 04 00 00    	je     c000c80c <scanMADT()+0x498>
c000c3b3:	83 ec 0c             	sub    esp,0xc
c000c3b6:	68 be 76 02 c0       	push   0xc00276be
c000c3bb:	e8 a6 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c3c0:	83 c4 10             	add    esp,0x10
c000c3c3:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000c3c8:	83 ec 0c             	sub    esp,0xc
c000c3cb:	50                   	push   eax
c000c3cc:	e8 e3 fd ff ff       	call   c000c1b4 <findRSDT(unsigned char*)>
c000c3d1:	83 c4 10             	add    esp,0x10
c000c3d4:	a3 84 0d 03 c0       	mov    ds:0xc0030d84,eax
c000c3d9:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000c3de:	85 c0                	test   eax,eax
c000c3e0:	0f 84 2a 04 00 00    	je     c000c810 <scanMADT()+0x49c>
c000c3e6:	8b 15 84 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d84
c000c3ec:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000c3f1:	83 ec 04             	sub    esp,0x4
c000c3f4:	52                   	push   edx
c000c3f5:	50                   	push   eax
c000c3f6:	68 68 78 02 c0       	push   0xc0027868
c000c3fb:	e8 66 ab ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000c408:	83 ec 0c             	sub    esp,0xc
c000c40b:	50                   	push   eax
c000c40c:	e8 43 fb ff ff       	call   c000bf54 <loadACPITables(unsigned char*)>
c000c411:	83 c4 10             	add    esp,0x10
c000c414:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000c419:	83 ec 08             	sub    esp,0x8
c000c41c:	68 cd 76 02 c0       	push   0xc00276cd
c000c421:	50                   	push   eax
c000c422:	e8 d9 fe ff ff       	call   c000c300 <findDataTable(unsigned char*, char*)>
c000c427:	83 c4 10             	add    esp,0x10
c000c42a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c42e:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c433:	0f 84 db 03 00 00    	je     c000c814 <scanMADT()+0x4a0>
c000c439:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c441:	8d 76 00             	lea    esi,[esi+0x0]
c000c444:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c448:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c44b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c44f:	0f 87 c7 03 00 00    	ja     c000c81c <scanMADT()+0x4a8>
c000c455:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c45d:	0f 87 b9 03 00 00    	ja     c000c81c <scanMADT()+0x4a8>
c000c463:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c467:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c46b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c46f:	8d 50 01             	lea    edx,[eax+0x1]
c000c472:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c476:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c47a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c47e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c482:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c486:	8d 50 01             	lea    edx,[eax+0x1]
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c491:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c495:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c499:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c49e:	83 f8 02             	cmp    eax,0x2
c000c4a1:	0f 86 71 03 00 00    	jbe    c000c818 <scanMADT()+0x4a4>
c000c4a7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4ac:	85 c0                	test   eax,eax
c000c4ae:	75 58                	jne    c000c508 <scanMADT()+0x194>
c000c4b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4b4:	8d 50 01             	lea    edx,[eax+0x1]
c000c4b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4bb:	8a 15 80 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f80
c000c4c1:	0f b6 d2             	movzx  edx,dl
c000c4c4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4c8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4cc:	88 82 c0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf040],al
c000c4d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4d6:	8d 50 01             	lea    edx,[eax+0x1]
c000c4d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4dd:	8a 15 80 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f80
c000c4e3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c4e6:	88 0d 80 0f 03 c0    	mov    BYTE PTR ds:0xc0030f80,cl
c000c4ec:	0f b6 d2             	movzx  edx,dl
c000c4ef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4f3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4f7:	88 82 a0 0f 03 c0    	mov    BYTE PTR [edx-0x3ffcf060],al
c000c4fd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c502:	e9 f1 02 00 00       	jmp    c000c7f8 <scanMADT()+0x484>
c000c507:	90                   	nop
c000c508:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c50d:	83 f8 01             	cmp    eax,0x1
c000c510:	0f 85 32 01 00 00    	jne    c000c648 <scanMADT()+0x2d4>
c000c516:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c51a:	8d 50 01             	lea    edx,[eax+0x1]
c000c51d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c521:	8a 15 40 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030e40
c000c527:	0f b6 d2             	movzx  edx,dl
c000c52a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c52e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c532:	88 82 60 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf1a0],al
c000c538:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c53d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c541:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c545:	01 d0                	add    eax,edx
c000c547:	83 c0 2c             	add    eax,0x2c
c000c54a:	8a 00                	mov    al,BYTE PTR [eax]
c000c54c:	0f b6 d0             	movzx  edx,al
c000c54f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c553:	8d 48 01             	lea    ecx,[eax+0x1]
c000c556:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c55a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c55e:	0f b6 c0             	movzx  eax,al
c000c561:	c1 e0 08             	shl    eax,0x8
c000c564:	89 d1                	mov    ecx,edx
c000c566:	09 c1                	or     ecx,eax
c000c568:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c56c:	8d 50 02             	lea    edx,[eax+0x2]
c000c56f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c573:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c577:	0f b6 c0             	movzx  eax,al
c000c57a:	c1 e0 10             	shl    eax,0x10
c000c57d:	09 c1                	or     ecx,eax
c000c57f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c583:	8d 50 03             	lea    edx,[eax+0x3]
c000c586:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c58a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c58e:	0f b6 c0             	movzx  eax,al
c000c591:	c1 e0 18             	shl    eax,0x18
c000c594:	09 c1                	or     ecx,eax
c000c596:	89 ca                	mov    edx,ecx
c000c598:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c000c59d:	0f b6 c0             	movzx  eax,al
c000c5a0:	89 14 85 80 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf180],edx
c000c5a7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c5ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5b4:	01 d0                	add    eax,edx
c000c5b6:	83 c0 2c             	add    eax,0x2c
c000c5b9:	8a 00                	mov    al,BYTE PTR [eax]
c000c5bb:	0f b6 d0             	movzx  edx,al
c000c5be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5c2:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5c9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5cd:	0f b6 c0             	movzx  eax,al
c000c5d0:	c1 e0 08             	shl    eax,0x8
c000c5d3:	89 d1                	mov    ecx,edx
c000c5d5:	09 c1                	or     ecx,eax
c000c5d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5db:	8d 50 02             	lea    edx,[eax+0x2]
c000c5de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5e2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5e6:	0f b6 c0             	movzx  eax,al
c000c5e9:	c1 e0 10             	shl    eax,0x10
c000c5ec:	09 c1                	or     ecx,eax
c000c5ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5f2:	8d 50 03             	lea    edx,[eax+0x3]
c000c5f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5f9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5fd:	0f b6 c0             	movzx  eax,al
c000c600:	c1 e0 18             	shl    eax,0x18
c000c603:	09 c1                	or     ecx,eax
c000c605:	89 ca                	mov    edx,ecx
c000c607:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c000c60c:	0f b6 c0             	movzx  eax,al
c000c60f:	89 14 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],edx
c000c616:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c61b:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c000c620:	83 c0 01             	add    eax,0x1
c000c623:	a2 40 0e 03 c0       	mov    ds:0xc0030e40,al
c000c628:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c000c62d:	0f b6 c0             	movzx  eax,al
c000c630:	83 ec 08             	sub    esp,0x8
c000c633:	50                   	push   eax
c000c634:	68 d2 76 02 c0       	push   0xc00276d2
c000c639:	e8 28 a9 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000c63e:	83 c4 10             	add    esp,0x10
c000c641:	e9 b2 01 00 00       	jmp    c000c7f8 <scanMADT()+0x484>
c000c646:	66 90                	xchg   ax,ax
c000c648:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c64d:	83 f8 02             	cmp    eax,0x2
c000c650:	0f 85 ea 00 00 00    	jne    c000c740 <scanMADT()+0x3cc>
c000c656:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c65a:	8d 50 01             	lea    edx,[eax+0x1]
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c665:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c669:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c66d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c671:	8d 50 01             	lea    edx,[eax+0x1]
c000c674:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c678:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c67c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c680:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c684:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c688:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c68c:	01 d0                	add    eax,edx
c000c68e:	83 c0 2c             	add    eax,0x2c
c000c691:	8a 00                	mov    al,BYTE PTR [eax]
c000c693:	0f b6 d0             	movzx  edx,al
c000c696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69a:	8d 48 01             	lea    ecx,[eax+0x1]
c000c69d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6a1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6a5:	0f b6 c0             	movzx  eax,al
c000c6a8:	c1 e0 08             	shl    eax,0x8
c000c6ab:	89 d1                	mov    ecx,edx
c000c6ad:	09 c1                	or     ecx,eax
c000c6af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6b3:	8d 50 02             	lea    edx,[eax+0x2]
c000c6b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6be:	0f b6 c0             	movzx  eax,al
c000c6c1:	c1 e0 10             	shl    eax,0x10
c000c6c4:	09 c1                	or     ecx,eax
c000c6c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ca:	8d 50 03             	lea    edx,[eax+0x3]
c000c6cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6d1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6d5:	0f b6 c0             	movzx  eax,al
c000c6d8:	c1 e0 18             	shl    eax,0x18
c000c6db:	09 c8                	or     eax,ecx
c000c6dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6e1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6ee:	01 d0                	add    eax,edx
c000c6f0:	83 c0 2c             	add    eax,0x2c
c000c6f3:	8a 00                	mov    al,BYTE PTR [eax]
c000c6f5:	0f b6 d0             	movzx  edx,al
c000c6f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6fc:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c703:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c707:	0f b6 c0             	movzx  eax,al
c000c70a:	c1 e0 08             	shl    eax,0x8
c000c70d:	09 d0                	or     eax,edx
c000c70f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c714:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c719:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c71e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c722:	88 90 68 ac 02 c0    	mov    BYTE PTR [eax-0x3ffd5398],dl
c000c728:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c72d:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000c732:	66 89 94 00 20 0e 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffcf1e0],dx
c000c73a:	e9 b9 00 00 00       	jmp    c000c7f8 <scanMADT()+0x484>
c000c73f:	90                   	nop
c000c740:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c745:	83 f8 04             	cmp    eax,0x4
c000c748:	0f 85 9a 00 00 00    	jne    c000c7e8 <scanMADT()+0x474>
c000c74e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c752:	8d 50 01             	lea    edx,[eax+0x1]
c000c755:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c759:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c75d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c761:	0f b6 c0             	movzx  eax,al
c000c764:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c768:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c76c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c770:	01 d0                	add    eax,edx
c000c772:	83 c0 2c             	add    eax,0x2c
c000c775:	8a 00                	mov    al,BYTE PTR [eax]
c000c777:	0f b6 d0             	movzx  edx,al
c000c77a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c77e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c785:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c789:	0f b6 c0             	movzx  eax,al
c000c78c:	c1 e0 08             	shl    eax,0x8
c000c78f:	09 d0                	or     eax,edx
c000c791:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c795:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c79e:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c7a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c7ad:	0f b6 c0             	movzx  eax,al
c000c7b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7b8:	c1 e0 08             	shl    eax,0x8
c000c7bb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c7bf:	89 c1                	mov    ecx,eax
c000c7c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7c5:	c1 e0 18             	shl    eax,0x18
c000c7c8:	89 c3                	mov    ebx,eax
c000c7ca:	a1 8c 0d 03 c0       	mov    eax,ds:0xc0030d8c
c000c7cf:	8d 50 01             	lea    edx,[eax+0x1]
c000c7d2:	89 15 8c 0d 03 c0    	mov    DWORD PTR ds:0xc0030d8c,edx
c000c7d8:	09 d9                	or     ecx,ebx
c000c7da:	89 ca                	mov    edx,ecx
c000c7dc:	89 14 85 a0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf260],edx
c000c7e3:	eb 13                	jmp    c000c7f8 <scanMADT()+0x484>
c000c7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7e8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7ed:	83 f8 05             	cmp    eax,0x5
c000c7f0:	75 06                	jne    c000c7f8 <scanMADT()+0x484>
c000c7f2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c7f7:	90                   	nop
c000c7f8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c7fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c801:	01 d0                	add    eax,edx
c000c803:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c807:	e9 38 fc ff ff       	jmp    c000c444 <scanMADT()+0xd0>
c000c80c:	90                   	nop
c000c80d:	eb 0d                	jmp    c000c81c <scanMADT()+0x4a8>
c000c80f:	90                   	nop
c000c810:	90                   	nop
c000c811:	eb 09                	jmp    c000c81c <scanMADT()+0x4a8>
c000c813:	90                   	nop
c000c814:	90                   	nop
c000c815:	eb 05                	jmp    c000c81c <scanMADT()+0x4a8>
c000c817:	90                   	nop
c000c818:	90                   	nop
c000c819:	8d 76 00             	lea    esi,[esi+0x0]
c000c81c:	83 c4 38             	add    esp,0x38
c000c81f:	5b                   	pop    ebx
c000c820:	c3                   	ret    
c000c821:	90                   	nop
c000c822:	66 90                	xchg   ax,ax

c000c824 <ACPI::ACPI()>:
c000c824:	83 ec 0c             	sub    esp,0xc
c000c827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c82b:	83 ec 08             	sub    esp,0x8
c000c82e:	68 ee 76 02 c0       	push   0xc00276ee
c000c833:	50                   	push   eax
c000c834:	e8 1f d3 ff ff       	call   c0009b58 <Device::Device(char const*)>
c000c839:	83 c4 10             	add    esp,0x10
c000c83c:	ba 0c 79 02 c0       	mov    edx,0xc002790c
c000c841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c845:	89 10                	mov    DWORD PTR [eax],edx
c000c847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c856:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c864:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c86e:	90                   	nop
c000c86f:	83 c4 0c             	add    esp,0xc
c000c872:	c3                   	ret    
c000c873:	90                   	nop

c000c874 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c874:	83 ec 2c             	sub    esp,0x2c
c000c877:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c87b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c87f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000c883:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000c887:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c88c:	88 c8                	mov    al,cl
c000c88e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c892:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c897:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c89f:	90                   	nop
c000c8a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8a4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c8aa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c8ae:	0f 8d b0 00 00 00    	jge    c000c964 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c8b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8bc:	83 c2 2a             	add    edx,0x2a
c000c8bf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c8c3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c8c8:	0f b7 c0             	movzx  eax,ax
c000c8cb:	39 c2                	cmp    edx,eax
c000c8cd:	0f 85 85 00 00 00    	jne    c000c958 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8db:	83 c2 2a             	add    edx,0x2a
c000c8de:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8e2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8e7:	0f b6 c0             	movzx  eax,al
c000c8ea:	39 c2                	cmp    edx,eax
c000c8ec:	75 6a                	jne    c000c958 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8ee:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c8f3:	85 c0                	test   eax,eax
c000c8f5:	74 3d                	je     c000c934 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c8f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8ff:	83 c2 2a             	add    edx,0x2a
c000c902:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c90a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c90d:	39 c2                	cmp    edx,eax
c000c90f:	74 13                	je     c000c924 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c911:	83 ec 0c             	sub    esp,0xc
c000c914:	68 8c 78 02 c0       	push   0xc002788c
c000c919:	e8 b6 31 00 00       	call   c000fad4 <KePanic(char const*)>
c000c91e:	83 c4 10             	add    esp,0x10
c000c921:	8d 76 00             	lea    esi,[esi+0x0]
c000c924:	83 ec 0c             	sub    esp,0xc
c000c927:	68 f3 76 02 c0       	push   0xc00276f3
c000c92c:	e8 a3 31 00 00       	call   c000fad4 <KePanic(char const*)>
c000c931:	83 c4 10             	add    esp,0x10
c000c934:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c938:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c93c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c940:	83 c2 2a             	add    edx,0x2a
c000c943:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c947:	8b 02                	mov    eax,DWORD PTR [edx]
c000c949:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c94c:	89 01                	mov    DWORD PTR [ecx],eax
c000c94e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c951:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c956:	66 90                	xchg   ax,ax
c000c958:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c95d:	e9 3e ff ff ff       	jmp    c000c8a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c962:	66 90                	xchg   ax,ax
c000c964:	90                   	nop
c000c965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c969:	83 c4 2c             	add    esp,0x2c
c000c96c:	c2 04 00             	ret    0x4
c000c96f:	90                   	nop

c000c970 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c970:	83 ec 1c             	sub    esp,0x1c
c000c973:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c977:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c97b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c97f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c984:	88 c8                	mov    al,cl
c000c986:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c98a:	88 d0                	mov    al,dl
c000c98c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c994:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99e:	83 c2 2a             	add    edx,0x2a
c000c9a1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000c9a5:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000c9a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ad:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9be:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000c9c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9cd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9d1:	83 c0 01             	add    eax,0x1
c000c9d4:	88 c1                	mov    cl,al
c000c9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9da:	83 c2 2a             	add    edx,0x2a
c000c9dd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ef:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9f2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c9f6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9fe:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca04:	8d 50 01             	lea    edx,[eax+0x1]
c000ca07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ca11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca15:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ca1b:	3d 00 02 00 00       	cmp    eax,0x200
c000ca20:	75 12                	jne    c000ca34 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000ca22:	83 ec 0c             	sub    esp,0xc
c000ca25:	68 02 77 02 c0       	push   0xc0027702
c000ca2a:	e8 a5 30 00 00       	call   c000fad4 <KePanic(char const*)>
c000ca2f:	83 c4 10             	add    esp,0x10
c000ca32:	66 90                	xchg   ax,ax
c000ca34:	90                   	nop
c000ca35:	83 c4 1c             	add    esp,0x1c
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop
c000ca3a:	66 90                	xchg   ax,ax

c000ca3c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca3c:	b8 00 00 00 00       	mov    eax,0x0
c000ca41:	c3                   	ret    
c000ca42:	66 90                	xchg   ax,ax

c000ca44 <ACPI::detectPCI()>:
c000ca44:	53                   	push   ebx
c000ca45:	83 ec 28             	sub    esp,0x28
c000ca48:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca4d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca52:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000ca57:	83 ec 08             	sub    esp,0x8
c000ca5a:	68 1f 77 02 c0       	push   0xc002771f
c000ca5f:	50                   	push   eax
c000ca60:	e8 9b f8 ff ff       	call   c000c300 <findDataTable(unsigned char*, char*)>
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca6c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca71:	74 0d                	je     c000ca80 <ACPI::detectPCI()+0x3c>
c000ca73:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca78:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ca80:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca8c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca8e:	0f b6 c0             	movzx  eax,al
c000ca91:	83 f8 01             	cmp    eax,0x1
c000ca94:	75 0e                	jne    c000caa4 <ACPI::detectPCI()+0x60>
c000ca96:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca9b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caa0:	eb 2e                	jmp    c000cad0 <ACPI::detectPCI()+0x8c>
c000caa2:	66 90                	xchg   ax,ax
c000caa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000caa8:	8a 00                	mov    al,BYTE PTR [eax]
c000caaa:	0f b6 c0             	movzx  eax,al
c000caad:	83 f8 02             	cmp    eax,0x2
c000cab0:	75 1e                	jne    c000cad0 <ACPI::detectPCI()+0x8c>
c000cab2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cab7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cabc:	85 c0                	test   eax,eax
c000cabe:	74 10                	je     c000cad0 <ACPI::detectPCI()+0x8c>
c000cac0:	83 ec 0c             	sub    esp,0xc
c000cac3:	68 bc 78 02 c0       	push   0xc00278bc
c000cac8:	e8 07 30 00 00       	call   c000fad4 <KePanic(char const*)>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000cad4:	83 f0 01             	xor    eax,0x1
c000cad7:	0f b6 c0             	movzx  eax,al
c000cada:	85 c0                	test   eax,eax
c000cadc:	74 46                	je     c000cb24 <ACPI::detectPCI()+0xe0>
c000cade:	e8 4d 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cae3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cae7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000caec:	75 0e                	jne    c000cafc <ACPI::detectPCI()+0xb8>
c000caee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000caf3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000caf8:	eb 2a                	jmp    c000cb24 <ACPI::detectPCI()+0xe0>
c000cafa:	66 90                	xchg   ax,ax
c000cafc:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cb01:	75 21                	jne    c000cb24 <ACPI::detectPCI()+0xe0>
c000cb03:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cb08:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cb0d:	85 c0                	test   eax,eax
c000cb0f:	74 13                	je     c000cb24 <ACPI::detectPCI()+0xe0>
c000cb11:	83 ec 0c             	sub    esp,0xc
c000cb14:	68 bc 78 02 c0       	push   0xc00278bc
c000cb19:	e8 b6 2f 00 00       	call   c000fad4 <KePanic(char const*)>
c000cb1e:	83 c4 10             	add    esp,0x10
c000cb21:	8d 76 00             	lea    esi,[esi+0x0]
c000cb24:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cb29:	85 c0                	test   eax,eax
c000cb2b:	0f 84 87 00 00 00    	je     c000cbb8 <ACPI::detectPCI()+0x174>
c000cb31:	83 ec 0c             	sub    esp,0xc
c000cb34:	68 24 77 02 c0       	push   0xc0027724
c000cb39:	e8 9f 06 00 00       	call   c000d1dd <KeSetBootMessage(char const*)>
c000cb3e:	83 c4 10             	add    esp,0x10
c000cb41:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb49:	83 ec 0c             	sub    esp,0xc
c000cb4c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb50:	e8 2b 2b 00 00       	call   c000f680 <malloc>
c000cb55:	83 c4 10             	add    esp,0x10
c000cb58:	89 c3                	mov    ebx,eax
c000cb5a:	83 ec 0c             	sub    esp,0xc
c000cb5d:	53                   	push   ebx
c000cb5e:	e8 5f 12 01 00       	call   c001ddc2 <PCI::PCI()>
c000cb63:	83 c4 10             	add    esp,0x10
c000cb66:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb6e:	83 ec 08             	sub    esp,0x8
c000cb71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb75:	50                   	push   eax
c000cb76:	e8 7b ce ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb82:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb84:	83 c0 08             	add    eax,0x8
c000cb87:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb89:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb8e:	85 d2                	test   edx,edx
c000cb90:	74 0a                	je     c000cb9c <ACPI::detectPCI()+0x158>
c000cb92:	ba 01 00 00 00       	mov    edx,0x1
c000cb97:	eb 0b                	jmp    c000cba4 <ACPI::detectPCI()+0x160>
c000cb99:	8d 76 00             	lea    esi,[esi+0x0]
c000cb9c:	ba 02 00 00 00       	mov    edx,0x2
c000cba1:	8d 76 00             	lea    esi,[esi+0x0]
c000cba4:	6a 00                	push   0x0
c000cba6:	6a 00                	push   0x0
c000cba8:	52                   	push   edx
c000cba9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbad:	ff d0                	call   eax
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	e9 91 00 00 00       	jmp    c000cc48 <ACPI::detectPCI()+0x204>
c000cbb7:	90                   	nop
c000cbb8:	83 ec 0c             	sub    esp,0xc
c000cbbb:	68 3c 77 02 c0       	push   0xc002773c
c000cbc0:	e8 18 06 00 00       	call   c000d1dd <KeSetBootMessage(char const*)>
c000cbc5:	83 c4 10             	add    esp,0x10
c000cbc8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cbcf:	83 ec 0c             	sub    esp,0xc
c000cbd2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbd6:	e8 a5 2a 00 00       	call   c000f680 <malloc>
c000cbdb:	83 c4 10             	add    esp,0x10
c000cbde:	89 c3                	mov    ebx,eax
c000cbe0:	83 ec 0c             	sub    esp,0xc
c000cbe3:	53                   	push   ebx
c000cbe4:	e8 e1 1d 01 00       	call   c001e9ca <IDE::IDE()>
c000cbe9:	83 c4 10             	add    esp,0x10
c000cbec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cbf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbf4:	83 ec 08             	sub    esp,0x8
c000cbf7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cbfb:	50                   	push   eax
c000cbfc:	e8 f5 cd ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000cc01:	83 c4 10             	add    esp,0x10
c000cc04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc08:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cc12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc16:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cc1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc23:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc30:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc32:	83 c0 08             	add    eax,0x8
c000cc35:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc37:	6a 00                	push   0x0
c000cc39:	6a 00                	push   0x0
c000cc3b:	6a 00                	push   0x0
c000cc3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc41:	ff d0                	call   eax
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	66 90                	xchg   ax,ax
c000cc48:	90                   	nop
c000cc49:	83 c4 28             	add    esp,0x28
c000cc4c:	5b                   	pop    ebx
c000cc4d:	c3                   	ret    
c000cc4e:	66 90                	xchg   ax,ax

c000cc50 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc50:	83 ec 0c             	sub    esp,0xc
c000cc53:	83 ec 0c             	sub    esp,0xc
c000cc56:	68 51 77 02 c0       	push   0xc0027751
c000cc5b:	e8 74 2e 00 00       	call   c000fad4 <KePanic(char const*)>
c000cc60:	83 c4 10             	add    esp,0x10
c000cc63:	90                   	nop
c000cc64:	83 c4 0c             	add    esp,0xc
c000cc67:	c3                   	ret    

c000cc68 <ACPI::open(int, int, void*)>:
c000cc68:	55                   	push   ebp
c000cc69:	89 e5                	mov    ebp,esp
c000cc6b:	53                   	push   ebx
c000cc6c:	81 ec 74 01 00 00    	sub    esp,0x174
c000cc72:	83 ec 0c             	sub    esp,0xc
c000cc75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cc78:	e8 c7 fd ff ff       	call   c000ca44 <ACPI::detectPCI()>
c000cc7d:	83 c4 10             	add    esp,0x10
c000cc80:	83 ec 0c             	sub    esp,0xc
c000cc83:	68 e4 78 02 c0       	push   0xc00278e4
c000cc88:	e8 50 05 00 00       	call   c000d1dd <KeSetBootMessage(char const*)>
c000cc8d:	83 c4 10             	add    esp,0x10
c000cc90:	b8 4c 05 00 00       	mov    eax,0x54c
c000cc95:	8a 00                	mov    al,BYTE PTR [eax]
c000cc97:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000cc9a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000cc9e:	83 f8 01             	cmp    eax,0x1
c000cca1:	75 15                	jne    c000ccb8 <ACPI::open(int, int, void*)+0x50>
c000cca3:	83 ec 0c             	sub    esp,0xc
c000cca6:	68 62 77 02 c0       	push   0xc0027762
c000ccab:	e8 7f 88 00 00       	call   c001552f <Thr::loadKernelSymbolTable(char const*)>
c000ccb0:	83 c4 10             	add    esp,0x10
c000ccb3:	eb 33                	jmp    c000cce8 <ACPI::open(int, int, void*)+0x80>
c000ccb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ccb8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000ccbc:	3d bb 00 00 00       	cmp    eax,0xbb
c000ccc1:	75 15                	jne    c000ccd8 <ACPI::open(int, int, void*)+0x70>
c000ccc3:	83 ec 0c             	sub    esp,0xc
c000ccc6:	68 80 77 02 c0       	push   0xc0027780
c000cccb:	e8 5f 88 00 00       	call   c001552f <Thr::loadKernelSymbolTable(char const*)>
c000ccd0:	83 c4 10             	add    esp,0x10
c000ccd3:	eb 13                	jmp    c000cce8 <ACPI::open(int, int, void*)+0x80>
c000ccd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ccd8:	83 ec 0c             	sub    esp,0xc
c000ccdb:	68 9e 77 02 c0       	push   0xc002779e
c000cce0:	e8 ef 2d 00 00       	call   c000fad4 <KePanic(char const*)>
c000cce5:	83 c4 10             	add    esp,0x10
c000cce8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ccec:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000ccf3:	83 ec 0c             	sub    esp,0xc
c000ccf6:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000ccf9:	e8 82 29 00 00       	call   c000f680 <malloc>
c000ccfe:	83 c4 10             	add    esp,0x10
c000cd01:	89 c3                	mov    ebx,eax
c000cd03:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000cd08:	83 ec 04             	sub    esp,0x4
c000cd0b:	50                   	push   eax
c000cd0c:	68 b8 77 02 c0       	push   0xc00277b8
c000cd11:	53                   	push   ebx
c000cd12:	e8 71 b4 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cd17:	83 c4 10             	add    esp,0x10
c000cd1a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000cd1d:	83 ec 08             	sub    esp,0x8
c000cd20:	6a 01                	push   0x1
c000cd22:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd25:	e8 7c b4 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000cd2a:	83 c4 10             	add    esp,0x10
c000cd2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000cd30:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000cd34:	75 12                	jne    c000cd48 <ACPI::open(int, int, void*)+0xe0>
c000cd36:	83 ec 0c             	sub    esp,0xc
c000cd39:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd3c:	e8 c3 b4 ff ff       	call   c0008204 <File::close()>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	eb 06                	jmp    c000cd4c <ACPI::open(int, int, void*)+0xe4>
c000cd46:	66 90                	xchg   ax,ax
c000cd48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000cd4c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000cd50:	74 16                	je     c000cd68 <ACPI::open(int, int, void*)+0x100>
c000cd52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cd55:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd57:	83 c0 08             	add    eax,0x8
c000cd5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd5c:	83 ec 0c             	sub    esp,0xc
c000cd5f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cd62:	ff d0                	call   eax
c000cd64:	83 c4 10             	add    esp,0x10
c000cd67:	90                   	nop
c000cd68:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000cd6b:	83 f0 01             	xor    eax,0x1
c000cd6e:	0f b6 c0             	movzx  eax,al
c000cd71:	85 c0                	test   eax,eax
c000cd73:	74 27                	je     c000cd9c <ACPI::open(int, int, void*)+0x134>
c000cd75:	83 ec 0c             	sub    esp,0xc
c000cd78:	68 d6 77 02 c0       	push   0xc00277d6
c000cd7d:	e8 5b 04 00 00       	call   c000d1dd <KeSetBootMessage(char const*)>
c000cd82:	83 c4 10             	add    esp,0x10
c000cd85:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000cd8c:	83 ec 0c             	sub    esp,0xc
c000cd8f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000cd92:	e8 a9 64 00 00       	call   c0013240 <Virt::setupPageSwapping(int)>
c000cd97:	83 c4 10             	add    esp,0x10
c000cd9a:	66 90                	xchg   ax,ax
c000cd9c:	83 ec 0c             	sub    esp,0xc
c000cd9f:	68 f1 77 02 c0       	push   0xc00277f1
c000cda4:	e8 34 04 00 00       	call   c000d1dd <KeSetBootMessage(char const*)>
c000cda9:	83 c4 10             	add    esp,0x10
c000cdac:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdaf:	83 ec 08             	sub    esp,0x8
c000cdb2:	6a 13                	push   0x13
c000cdb4:	50                   	push   eax
c000cdb5:	e8 6a cf ff ff       	call   c0009d24 <getDevicesOfType(DeviceType)>
c000cdba:	83 c4 0c             	add    esp,0xc
c000cdbd:	8d 76 00             	lea    esi,[esi+0x0]
c000cdc0:	83 ec 0c             	sub    esp,0xc
c000cdc3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdc6:	50                   	push   eax
c000cdc7:	e8 78 8d 01 00       	call   c0025b44 <LinkedList<Device>::isEmpty()>
c000cdcc:	83 c4 10             	add    esp,0x10
c000cdcf:	83 f0 01             	xor    eax,0x1
c000cdd2:	0f b6 c0             	movzx  eax,al
c000cdd5:	85 c0                	test   eax,eax
c000cdd7:	0f 84 13 01 00 00    	je     c000cef0 <ACPI::open(int, int, void*)+0x288>
c000cddd:	83 ec 0c             	sub    esp,0xc
c000cde0:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cde3:	50                   	push   eax
c000cde4:	e8 77 8d 01 00       	call   c0025b60 <LinkedList<Device>::getFirstElement()>
c000cde9:	83 c4 10             	add    esp,0x10
c000cdec:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000cdef:	83 ec 0c             	sub    esp,0xc
c000cdf2:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cdf5:	50                   	push   eax
c000cdf6:	e8 6d 8d 01 00       	call   c0025b68 <LinkedList<Device>::removeFirst()>
c000cdfb:	83 c4 10             	add    esp,0x10
c000cdfe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000ce01:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000ce04:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000ce07:	b8 24 00 00 00       	mov    eax,0x24
c000ce0c:	83 e0 fc             	and    eax,0xfffffffc
c000ce0f:	89 c3                	mov    ebx,eax
c000ce11:	b8 00 00 00 00       	mov    eax,0x0
c000ce16:	66 90                	xchg   ax,ax
c000ce18:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000ce1f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000ce26:	83 c0 04             	add    eax,0x4
c000ce29:	39 d8                	cmp    eax,ebx
c000ce2b:	72 eb                	jb     c000ce18 <ACPI::open(int, int, void*)+0x1b0>
c000ce2d:	83 ec 08             	sub    esp,0x8
c000ce30:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000ce36:	50                   	push   eax
c000ce37:	83 ec 24             	sub    esp,0x24
c000ce3a:	89 e1                	mov    ecx,esp
c000ce3c:	b8 24 00 00 00       	mov    eax,0x24
c000ce41:	83 e0 fc             	and    eax,0xfffffffc
c000ce44:	89 c3                	mov    ebx,eax
c000ce46:	b8 00 00 00 00       	mov    eax,0x0
c000ce4b:	90                   	nop
c000ce4c:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000ce53:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000ce56:	83 c0 04             	add    eax,0x4
c000ce59:	39 d8                	cmp    eax,ebx
c000ce5b:	72 ef                	jb     c000ce4c <ACPI::open(int, int, void*)+0x1e4>
c000ce5d:	e8 48 14 01 00       	call   c001e2aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce62:	83 c4 30             	add    esp,0x30
c000ce65:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000ce68:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000ce6c:	0f 84 4e ff ff ff    	je     c000cdc0 <ACPI::open(int, int, void*)+0x158>
c000ce72:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000ce79:	83 ec 0c             	sub    esp,0xc
c000ce7c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000ce7f:	e8 fc 27 00 00       	call   c000f680 <malloc>
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	89 c3                	mov    ebx,eax
c000ce89:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000ce8e:	83 ec 04             	sub    esp,0x4
c000ce91:	50                   	push   eax
c000ce92:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000ce95:	53                   	push   ebx
c000ce96:	e8 ed b2 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000ce9b:	83 c4 10             	add    esp,0x10
c000ce9e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000cea1:	83 ec 0c             	sub    esp,0xc
c000cea4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000cea7:	e8 be b5 ff ff       	call   c000846a <File::exists()>
c000ceac:	83 c4 10             	add    esp,0x10
c000ceaf:	0f b6 c0             	movzx  eax,al
c000ceb2:	85 c0                	test   eax,eax
c000ceb4:	74 16                	je     c000cecc <ACPI::open(int, int, void*)+0x264>
c000ceb6:	83 ec 04             	sub    esp,0x4
c000ceb9:	6a 00                	push   0x0
c000cebb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000cebe:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000cec1:	e8 05 8e 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cec6:	83 c4 10             	add    esp,0x10
c000cec9:	8d 76 00             	lea    esi,[esi+0x0]
c000cecc:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000ced0:	0f 84 ea fe ff ff    	je     c000cdc0 <ACPI::open(int, int, void*)+0x158>
c000ced6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000ced9:	8b 00                	mov    eax,DWORD PTR [eax]
c000cedb:	83 c0 08             	add    eax,0x8
c000cede:	8b 00                	mov    eax,DWORD PTR [eax]
c000cee0:	83 ec 0c             	sub    esp,0xc
c000cee3:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000cee6:	ff d0                	call   eax
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	e9 d0 fe ff ff       	jmp    c000cdc0 <ACPI::open(int, int, void*)+0x158>
c000cef0:	83 ec 0c             	sub    esp,0xc
c000cef3:	8d 45 b8             	lea    eax,[ebp-0x48]
c000cef6:	50                   	push   eax
c000cef7:	e8 44 8c 01 00       	call   c0025b40 <LinkedList<Device>::~LinkedList()>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c000cf04:	83 ec 04             	sub    esp,0x4
c000cf07:	6a 00                	push   0x0
c000cf09:	50                   	push   eax
c000cf0a:	68 0b 78 02 c0       	push   0xc002780b
c000cf0f:	e8 b7 8d 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cf14:	83 c4 10             	add    esp,0x10
c000cf17:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000cf1c:	85 c0                	test   eax,eax
c000cf1e:	0f 84 e4 00 00 00    	je     c000d008 <ACPI::open(int, int, void*)+0x3a0>
c000cf24:	a1 88 0d 03 c0       	mov    eax,ds:0xc0030d88
c000cf29:	85 c0                	test   eax,eax
c000cf2b:	0f 84 d7 00 00 00    	je     c000d008 <ACPI::open(int, int, void*)+0x3a0>
c000cf31:	83 ec 0c             	sub    esp,0xc
c000cf34:	68 28 78 02 c0       	push   0xc0027828
c000cf39:	e8 9f 02 00 00       	call   c000d1dd <KeSetBootMessage(char const*)>
c000cf3e:	83 c4 10             	add    esp,0x10
c000cf41:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000cf48:	83 ec 0c             	sub    esp,0xc
c000cf4b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000cf4e:	e8 2d 27 00 00       	call   c000f680 <malloc>
c000cf53:	83 c4 10             	add    esp,0x10
c000cf56:	89 c3                	mov    ebx,eax
c000cf58:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000cf5d:	83 ec 04             	sub    esp,0x4
c000cf60:	50                   	push   eax
c000cf61:	68 45 78 02 c0       	push   0xc0027845
c000cf66:	53                   	push   ebx
c000cf67:	e8 1c b2 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000cf6c:	83 c4 10             	add    esp,0x10
c000cf6f:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000cf72:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cf76:	74 1c                	je     c000cf94 <ACPI::open(int, int, void*)+0x32c>
c000cf78:	83 ec 0c             	sub    esp,0xc
c000cf7b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cf7e:	e8 e7 b4 ff ff       	call   c000846a <File::exists()>
c000cf83:	83 c4 10             	add    esp,0x10
c000cf86:	0f b6 c0             	movzx  eax,al
c000cf89:	85 c0                	test   eax,eax
c000cf8b:	74 07                	je     c000cf94 <ACPI::open(int, int, void*)+0x32c>
c000cf8d:	b0 01                	mov    al,0x1
c000cf8f:	eb 07                	jmp    c000cf98 <ACPI::open(int, int, void*)+0x330>
c000cf91:	8d 76 00             	lea    esi,[esi+0x0]
c000cf94:	b0 00                	mov    al,0x0
c000cf96:	66 90                	xchg   ax,ax
c000cf98:	0f b6 c0             	movzx  eax,al
c000cf9b:	85 c0                	test   eax,eax
c000cf9d:	74 15                	je     c000cfb4 <ACPI::open(int, int, void*)+0x34c>
c000cf9f:	83 ec 04             	sub    esp,0x4
c000cfa2:	6a 00                	push   0x0
c000cfa4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000cfa7:	68 45 78 02 c0       	push   0xc0027845
c000cfac:	e8 1a 8d 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000cfb1:	83 c4 10             	add    esp,0x10
c000cfb4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cfb8:	74 1e                	je     c000cfd8 <ACPI::open(int, int, void*)+0x370>
c000cfba:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000cfbe:	74 18                	je     c000cfd8 <ACPI::open(int, int, void*)+0x370>
c000cfc0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000cfc3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfc5:	83 c0 08             	add    eax,0x8
c000cfc8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfca:	83 ec 0c             	sub    esp,0xc
c000cfcd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000cfd0:	ff d0                	call   eax
c000cfd2:	83 c4 10             	add    esp,0x10
c000cfd5:	8d 76 00             	lea    esi,[esi+0x0]
c000cfd8:	a1 84 0d 03 c0       	mov    eax,ds:0xc0030d84
c000cfdd:	83 ec 08             	sub    esp,0x8
c000cfe0:	68 62 78 02 c0       	push   0xc0027862
c000cfe5:	50                   	push   eax
c000cfe6:	e8 15 f3 ff ff       	call   c000c300 <findDataTable(unsigned char*, char*)>
c000cfeb:	83 c4 10             	add    esp,0x10
c000cfee:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000cff1:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000cff5:	74 11                	je     c000d008 <ACPI::open(int, int, void*)+0x3a0>
c000cff7:	83 ec 08             	sub    esp,0x8
c000cffa:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000cffd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d000:	e8 4b fc ff ff       	call   c000cc50 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d005:	83 c4 10             	add    esp,0x10
c000d008:	b8 00 00 00 00       	mov    eax,0x0
c000d00d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d010:	c9                   	leave  
c000d011:	c3                   	ret    
c000d012:	66 90                	xchg   ax,ax

c000d014 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d014:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d01a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d021:	89 c2                	mov    edx,eax
c000d023:	c1 fa 1f             	sar    edx,0x1f
c000d026:	83 ec 04             	sub    esp,0x4
c000d029:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d02d:	51                   	push   ecx
c000d02e:	52                   	push   edx
c000d02f:	50                   	push   eax
c000d030:	e8 43 24 00 00       	call   c000f478 <KeItoa(long long, char*)>
c000d035:	83 c4 10             	add    esp,0x10
c000d038:	83 ec 08             	sub    esp,0x8
c000d03b:	68 30 79 02 c0       	push   0xc0027930
c000d040:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d044:	50                   	push   eax
c000d045:	e8 06 36 ff ff       	call   c0000650 <strcpy>
c000d04a:	83 c4 10             	add    esp,0x10
c000d04d:	83 ec 08             	sub    esp,0x8
c000d050:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d057:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d05b:	50                   	push   eax
c000d05c:	e8 0f 38 ff ff       	call   c0000870 <strcat>
c000d061:	83 c4 10             	add    esp,0x10
c000d064:	83 ec 08             	sub    esp,0x8
c000d067:	68 3e 79 02 c0       	push   0xc002793e
c000d06c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d070:	50                   	push   eax
c000d071:	e8 fa 37 ff ff       	call   c0000870 <strcat>
c000d076:	83 c4 10             	add    esp,0x10
c000d079:	83 ec 08             	sub    esp,0x8
c000d07c:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d083:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d087:	50                   	push   eax
c000d088:	e8 e3 37 ff ff       	call   c0000870 <strcat>
c000d08d:	83 c4 10             	add    esp,0x10
c000d090:	83 ec 08             	sub    esp,0x8
c000d093:	68 41 79 02 c0       	push   0xc0027941
c000d098:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d09c:	50                   	push   eax
c000d09d:	e8 ce 37 ff ff       	call   c0000870 <strcat>
c000d0a2:	83 c4 10             	add    esp,0x10
c000d0a5:	83 ec 08             	sub    esp,0x8
c000d0a8:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d0af:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0b3:	50                   	push   eax
c000d0b4:	e8 b7 37 ff ff       	call   c0000870 <strcat>
c000d0b9:	83 c4 10             	add    esp,0x10
c000d0bc:	83 ec 08             	sub    esp,0x8
c000d0bf:	68 41 79 02 c0       	push   0xc0027941
c000d0c4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0c8:	50                   	push   eax
c000d0c9:	e8 a2 37 ff ff       	call   c0000870 <strcat>
c000d0ce:	83 c4 10             	add    esp,0x10
c000d0d1:	83 ec 08             	sub    esp,0x8
c000d0d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d0d8:	50                   	push   eax
c000d0d9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0dd:	50                   	push   eax
c000d0de:	e8 8d 37 ff ff       	call   c0000870 <strcat>
c000d0e3:	83 c4 10             	add    esp,0x10
c000d0e6:	83 ec 0c             	sub    esp,0xc
c000d0e9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0ed:	50                   	push   eax
c000d0ee:	e8 e1 29 00 00       	call   c000fad4 <KePanic(char const*)>
c000d0f3:	83 c4 10             	add    esp,0x10
c000d0f6:	90                   	nop
c000d0f7:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d0fd:	c3                   	ret    

c000d0fe <KeInitialiseAtexit()>:
c000d0fe:	83 ec 10             	sub    esp,0x10
c000d101:	68 80 00 00 00       	push   0x80
c000d106:	6a 00                	push   0x0
c000d108:	68 80 10 03 c0       	push   0xc0031080
c000d10d:	c7 05 e0 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030fe0,0x0
c000d117:	e8 d4 33 ff ff       	call   c00004f0 <memset>
c000d11c:	83 c4 1c             	add    esp,0x1c
c000d11f:	c3                   	ret    

c000d120 <KeRegisterAtexit(void (*)(void*), void*)>:
c000d120:	a1 e0 0f 03 c0       	mov    eax,ds:0xc0030fe0
c000d125:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d129:	89 14 85 80 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcef80],edx
c000d130:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d134:	89 14 85 00 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf000],edx
c000d13b:	40                   	inc    eax
c000d13c:	a3 e0 0f 03 c0       	mov    ds:0xc0030fe0,eax
c000d141:	83 f8 1f             	cmp    eax,0x1f
c000d144:	7e 0d                	jle    c000d153 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d146:	c7 44 24 04 43 79 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027943
c000d14e:	e9 81 29 00 00       	jmp    c000fad4 <KePanic(char const*)>
c000d153:	c3                   	ret    

c000d154 <KeExecuteAtexit()>:
c000d154:	53                   	push   ebx
c000d155:	31 db                	xor    ebx,ebx
c000d157:	83 ec 08             	sub    esp,0x8
c000d15a:	39 1d e0 0f 03 c0    	cmp    DWORD PTR ds:0xc0030fe0,ebx
c000d160:	7e 28                	jle    c000d18a <KeExecuteAtexit()+0x36>
c000d162:	8b 04 9d 80 10 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcef80]
c000d169:	85 c0                	test   eax,eax
c000d16b:	74 1a                	je     c000d187 <KeExecuteAtexit()+0x33>
c000d16d:	83 ec 0c             	sub    esp,0xc
c000d170:	ff 34 9d 00 10 03 c0 	push   DWORD PTR [ebx*4-0x3ffcf000]
c000d177:	ff d0                	call   eax
c000d179:	c7 04 9d 80 10 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffcef80],0x0
c000d184:	83 c4 10             	add    esp,0x10
c000d187:	43                   	inc    ebx
c000d188:	eb d0                	jmp    c000d15a <KeExecuteAtexit()+0x6>
c000d18a:	83 c4 08             	add    esp,0x8
c000d18d:	5b                   	pop    ebx
c000d18e:	c3                   	ret    
c000d18f:	90                   	nop

c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>:
c000d190:	8b 15 00 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031100
c000d196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d19a:	21 d0                	and    eax,edx
c000d19c:	0f 95 c0             	setne  al
c000d19f:	c3                   	ret    

c000d1a0 <KeInitialiseBootConfigurationFlags()>:
c000d1a0:	b8 00 05 00 00       	mov    eax,0x500
c000d1a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1a7:	a3 00 11 03 c0       	mov    ds:0xc0031100,eax
c000d1ac:	90                   	nop
c000d1ad:	c3                   	ret    

c000d1ae <KeDisplaySplashScreen()>:
c000d1ae:	53                   	push   ebx
c000d1af:	bb 01 00 00 00       	mov    ebx,0x1
c000d1b4:	83 ec 08             	sub    esp,0x8
c000d1b7:	43                   	inc    ebx
c000d1b8:	0f be 83 5a 79 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffd86a6]
c000d1bf:	85 c0                	test   eax,eax
c000d1c1:	74 15                	je     c000d1d8 <KeDisplaySplashScreen()+0x2a>
c000d1c3:	83 ec 0c             	sub    esp,0xc
c000d1c6:	6a 01                	push   0x1
c000d1c8:	53                   	push   ebx
c000d1c9:	6a 00                	push   0x0
c000d1cb:	6a 0f                	push   0xf
c000d1cd:	50                   	push   eax
c000d1ce:	e8 a1 e7 00 00       	call   c001b974 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d1d3:	83 c4 20             	add    esp,0x20
c000d1d6:	eb df                	jmp    c000d1b7 <KeDisplaySplashScreen()+0x9>
c000d1d8:	83 c4 08             	add    esp,0x8
c000d1db:	5b                   	pop    ebx
c000d1dc:	c3                   	ret    

c000d1dd <KeSetBootMessage(char const*)>:
c000d1dd:	57                   	push   edi
c000d1de:	56                   	push   esi
c000d1df:	53                   	push   ebx
c000d1e0:	31 db                	xor    ebx,ebx
c000d1e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1e6:	83 ec 0c             	sub    esp,0xc
c000d1e9:	6a 14                	push   0x14
c000d1eb:	53                   	push   ebx
c000d1ec:	43                   	inc    ebx
c000d1ed:	6a 00                	push   0x0
c000d1ef:	6a 00                	push   0x0
c000d1f1:	6a 20                	push   0x20
c000d1f3:	e8 7c e7 00 00       	call   c001b974 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d1f8:	83 c4 20             	add    esp,0x20
c000d1fb:	83 fb 50             	cmp    ebx,0x50
c000d1fe:	75 e6                	jne    c000d1e6 <KeSetBootMessage(char const*)+0x9>
c000d200:	83 ec 0c             	sub    esp,0xc
c000d203:	56                   	push   esi
c000d204:	e8 77 33 ff ff       	call   c0000580 <strlen>
c000d209:	83 c4 10             	add    esp,0x10
c000d20c:	29 c3                	sub    ebx,eax
c000d20e:	d1 eb                	shr    ebx,1
c000d210:	89 df                	mov    edi,ebx
c000d212:	89 f0                	mov    eax,esi
c000d214:	29 d8                	sub    eax,ebx
c000d216:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000d21a:	85 c0                	test   eax,eax
c000d21c:	74 16                	je     c000d234 <KeSetBootMessage(char const*)+0x57>
c000d21e:	83 ec 0c             	sub    esp,0xc
c000d221:	6a 14                	push   0x14
c000d223:	57                   	push   edi
c000d224:	47                   	inc    edi
c000d225:	6a 00                	push   0x0
c000d227:	6a 07                	push   0x7
c000d229:	50                   	push   eax
c000d22a:	e8 45 e7 00 00       	call   c001b974 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d22f:	83 c4 20             	add    esp,0x20
c000d232:	eb de                	jmp    c000d212 <KeSetBootMessage(char const*)+0x35>
c000d234:	5b                   	pop    ebx
c000d235:	5e                   	pop    esi
c000d236:	5f                   	pop    edi
c000d237:	c3                   	ret    

c000d238 <__cxa_atexit>:
c000d238:	31 c0                	xor    eax,eax
c000d23a:	c3                   	ret    

c000d23b <__cxa_finalize>:
c000d23b:	c3                   	ret    

c000d23c <__stack_chk_fail>:
c000d23c:	55                   	push   ebp
c000d23d:	89 e5                	mov    ebp,esp
c000d23f:	83 ec 10             	sub    esp,0x10
c000d242:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d245:	68 6f 79 02 c0       	push   0xc002796f
c000d24a:	e8 17 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d24f:	58                   	pop    eax
c000d250:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d253:	5a                   	pop    edx
c000d254:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d257:	68 6f 79 02 c0       	push   0xc002796f
c000d25c:	e8 05 9d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d261:	c7 04 24 77 79 02 c0 	mov    DWORD PTR [esp],0xc0027977
c000d268:	e8 67 28 00 00       	call   c000fad4 <KePanic(char const*)>
c000d26d:	83 c4 10             	add    esp,0x10
c000d270:	c9                   	leave  
c000d271:	c3                   	ret    

c000d272 <__cxa_pure_virtual>:
c000d272:	83 ec 18             	sub    esp,0x18
c000d275:	68 8f 79 02 c0       	push   0xc002798f
c000d27a:	e8 55 28 00 00       	call   c000fad4 <KePanic(char const*)>
c000d27f:	83 c4 1c             	add    esp,0x1c
c000d282:	c3                   	ret    

c000d283 <operator new[](unsigned long)>:
c000d283:	e9 f8 23 00 00       	jmp    c000f680 <malloc>

c000d288 <operator delete(void*, unsigned long)>:
c000d288:	e9 13 24 00 00       	jmp    c000f6a0 <rfree>

c000d28d <operator delete[](void*)>:
c000d28d:	e9 0e 24 00 00       	jmp    c000f6a0 <rfree>

c000d292 <operator delete[](void*, unsigned long)>:
c000d292:	e9 09 24 00 00       	jmp    c000f6a0 <rfree>
c000d297:	90                   	nop

c000d298 <CUnlockScheduler>:
c000d298:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000d2a0:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000d2a5:	85 c0                	test   eax,eax
c000d2a7:	75 03                	jne    c000d2ac <CUnlockScheduler+0x14>
c000d2a9:	fb                   	sti    
c000d2aa:	66 90                	xchg   ax,ax
c000d2ac:	90                   	nop
c000d2ad:	c3                   	ret    
c000d2ae:	66 90                	xchg   ax,ax

c000d2b0 <CLockScheduler>:
c000d2b0:	fa                   	cli    
c000d2b1:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000d2b6:	83 c0 01             	add    eax,0x1
c000d2b9:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000d2be:	90                   	nop
c000d2bf:	c3                   	ret    

c000d2c0 <CPrintf>:
c000d2c0:	83 ec 0c             	sub    esp,0xc
c000d2c3:	83 ec 08             	sub    esp,0x8
c000d2c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d2ca:	68 a2 79 02 c0       	push   0xc00279a2
c000d2cf:	e8 92 9c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	90                   	nop
c000d2d8:	83 c4 0c             	add    esp,0xc
c000d2db:	c3                   	ret    

c000d2dc <CmOpen(char const*)>:
c000d2dc:	57                   	push   edi
c000d2dd:	56                   	push   esi
c000d2de:	53                   	push   ebx
c000d2df:	83 ec 1c             	sub    esp,0x1c
c000d2e2:	6a 30                	push   0x30
c000d2e4:	e8 97 23 00 00       	call   c000f680 <malloc>
c000d2e9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d2f0:	89 c3                	mov    ebx,eax
c000d2f2:	e8 89 23 00 00       	call   c000f680 <malloc>
c000d2f7:	83 c4 0c             	add    esp,0xc
c000d2fa:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000d300:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d304:	89 c6                	mov    esi,eax
c000d306:	50                   	push   eax
c000d307:	e8 7c ae ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000d30c:	83 c4 0c             	add    esp,0xc
c000d30f:	89 33                	mov    DWORD PTR [ebx],esi
c000d311:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d315:	50                   	push   eax
c000d316:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d31a:	50                   	push   eax
c000d31b:	56                   	push   esi
c000d31c:	e8 87 b1 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c000d321:	5a                   	pop    edx
c000d322:	59                   	pop    ecx
c000d323:	6a 01                	push   0x1
c000d325:	ff 33                	push   DWORD PTR [ebx]
c000d327:	e8 7a ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d32c:	5e                   	pop    esi
c000d32d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d331:	e8 4a 23 00 00       	call   c000f680 <malloc>
c000d336:	5a                   	pop    edx
c000d337:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d33b:	89 c7                	mov    edi,eax
c000d33d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d33f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d341:	56                   	push   esi
c000d342:	57                   	push   edi
c000d343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d347:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d34b:	50                   	push   eax
c000d34c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d34f:	83 c4 14             	add    esp,0x14
c000d352:	ff 33                	push   DWORD PTR [ebx]
c000d354:	e8 ab ae ff ff       	call   c0008204 <File::close()>
c000d359:	59                   	pop    ecx
c000d35a:	58                   	pop    eax
c000d35b:	6a 13                	push   0x13
c000d35d:	ff 33                	push   DWORD PTR [ebx]
c000d35f:	e8 42 ae ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000d364:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d366:	8b 10                	mov    edx,DWORD PTR [eax]
c000d368:	89 34 24             	mov    DWORD PTR [esp],esi
c000d36b:	57                   	push   edi
c000d36c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d370:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d374:	50                   	push   eax
c000d375:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d378:	83 c4 14             	add    esp,0x14
c000d37b:	57                   	push   edi
c000d37c:	e8 0f 23 00 00       	call   c000f690 <free>
c000d381:	83 c4 10             	add    esp,0x10
c000d384:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d387:	75 10                	jne    c000d399 <CmOpen(char const*)+0xbd>
c000d389:	83 ec 0c             	sub    esp,0xc
c000d38c:	68 a5 79 02 c0       	push   0xc00279a5
c000d391:	e8 3e 27 00 00       	call   c000fad4 <KePanic(char const*)>
c000d396:	83 c4 10             	add    esp,0x10
c000d399:	50                   	push   eax
c000d39a:	6a 00                	push   0x0
c000d39c:	6a 00                	push   0x0
c000d39e:	ff 33                	push   DWORD PTR [ebx]
c000d3a0:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d3a3:	e8 bc ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d3a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3ac:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3af:	57                   	push   edi
c000d3b0:	6a 00                	push   0x0
c000d3b2:	6a 2b                	push   0x2b
c000d3b4:	50                   	push   eax
c000d3b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3b8:	83 c4 1c             	add    esp,0x1c
c000d3bb:	6a 00                	push   0x0
c000d3bd:	6a 00                	push   0x0
c000d3bf:	ff 33                	push   DWORD PTR [ebx]
c000d3c1:	e8 9e ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d3c6:	83 c4 0c             	add    esp,0xc
c000d3c9:	6a 08                	push   0x8
c000d3cb:	68 c7 79 02 c0       	push   0xc00279c7
c000d3d0:	57                   	push   edi
c000d3d1:	e8 aa 2f ff ff       	call   c0000380 <memcmp>
c000d3d6:	83 c4 10             	add    esp,0x10
c000d3d9:	85 c0                	test   eax,eax
c000d3db:	74 10                	je     c000d3ed <CmOpen(char const*)+0x111>
c000d3dd:	83 ec 0c             	sub    esp,0xc
c000d3e0:	68 d0 79 02 c0       	push   0xc00279d0
c000d3e5:	e8 ea 26 00 00       	call   c000fad4 <KePanic(char const*)>
c000d3ea:	83 c4 10             	add    esp,0x10
c000d3ed:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d3f1:	83 c4 10             	add    esp,0x10
c000d3f4:	89 d8                	mov    eax,ebx
c000d3f6:	5b                   	pop    ebx
c000d3f7:	5e                   	pop    esi
c000d3f8:	5f                   	pop    edi
c000d3f9:	c3                   	ret    

c000d3fa <CmClose(Reghive_Tag*)>:
c000d3fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3fe:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d402:	74 0b                	je     c000d40f <CmClose(Reghive_Tag*)+0x15>
c000d404:	8b 00                	mov    eax,DWORD PTR [eax]
c000d406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d40a:	e9 f5 ad ff ff       	jmp    c0008204 <File::close()>
c000d40f:	c3                   	ret    

c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d410:	53                   	push   ebx
c000d411:	83 ec 18             	sub    esp,0x18
c000d414:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d418:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d41c:	74 29                	je     c000d447 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d41e:	50                   	push   eax
c000d41f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d424:	99                   	cdq    
c000d425:	52                   	push   edx
c000d426:	50                   	push   eax
c000d427:	ff 33                	push   DWORD PTR [ebx]
c000d429:	e8 36 ae ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d42e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d430:	5a                   	pop    edx
c000d431:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d435:	8b 10                	mov    edx,DWORD PTR [eax]
c000d437:	51                   	push   ecx
c000d438:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d43c:	6a 00                	push   0x0
c000d43e:	6a 2b                	push   0x2b
c000d440:	50                   	push   eax
c000d441:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d444:	83 c4 20             	add    esp,0x20
c000d447:	83 c4 18             	add    esp,0x18
c000d44a:	5b                   	pop    ebx
c000d44b:	c3                   	ret    

c000d44c <CmGetString(Reghive_Tag*, int, char*)>:
c000d44c:	55                   	push   ebp
c000d44d:	57                   	push   edi
c000d44e:	56                   	push   esi
c000d44f:	53                   	push   ebx
c000d450:	31 db                	xor    ebx,ebx
c000d452:	83 ec 70             	sub    esp,0x70
c000d455:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d459:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d460:	50                   	push   eax
c000d461:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d468:	55                   	push   ebp
c000d469:	e8 a2 ff ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d476:	c1 e0 08             	shl    eax,0x8
c000d479:	89 c2                	mov    edx,eax
c000d47b:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d480:	09 d0                	or     eax,edx
c000d482:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d487:	c1 e0 08             	shl    eax,0x8
c000d48a:	09 d0                	or     eax,edx
c000d48c:	74 25                	je     c000d4b3 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d48e:	52                   	push   edx
c000d48f:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d493:	52                   	push   edx
c000d494:	6b fb 0d             	imul   edi,ebx,0xd
c000d497:	50                   	push   eax
c000d498:	55                   	push   ebp
c000d499:	e8 72 ff ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d49e:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d4a2:	b9 27 00 00 00       	mov    ecx,0x27
c000d4a7:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d4ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d4b0:	83 c4 10             	add    esp,0x10
c000d4b3:	83 c3 03             	add    ebx,0x3
c000d4b6:	83 fb 15             	cmp    ebx,0x15
c000d4b9:	75 b6                	jne    c000d471 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d4bb:	83 c4 6c             	add    esp,0x6c
c000d4be:	5b                   	pop    ebx
c000d4bf:	5e                   	pop    esi
c000d4c0:	5f                   	pop    edi
c000d4c1:	5d                   	pop    ebp
c000d4c2:	c3                   	ret    

c000d4c3 <CmEnterDirectory(Reghive_Tag*, int)>:
c000d4c3:	83 ec 40             	sub    esp,0x40
c000d4c6:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d4ca:	50                   	push   eax
c000d4cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4cf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4d3:	e8 38 ff ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	83 c8 ff             	or     eax,0xffffffff
c000d4de:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d4e3:	75 19                	jne    c000d4fe <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d4e5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d4ea:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d4ef:	c1 e0 08             	shl    eax,0x8
c000d4f2:	09 c2                	or     edx,eax
c000d4f4:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d4f9:	c1 e0 10             	shl    eax,0x10
c000d4fc:	09 d0                	or     eax,edx
c000d4fe:	83 c4 3c             	add    esp,0x3c
c000d501:	c3                   	ret    

c000d502 <CmGetNext(Reghive_Tag*, int)>:
c000d502:	83 ec 40             	sub    esp,0x40
c000d505:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d509:	50                   	push   eax
c000d50a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d50e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d512:	e8 f9 fe ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d517:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d51c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d521:	c1 e0 08             	shl    eax,0x8
c000d524:	09 c2                	or     edx,eax
c000d526:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d52b:	83 c4 4c             	add    esp,0x4c
c000d52e:	c1 e0 10             	shl    eax,0x10
c000d531:	09 d0                	or     eax,edx
c000d533:	c3                   	ret    

c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d534:	53                   	push   ebx
c000d535:	83 ec 18             	sub    esp,0x18
c000d538:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d53c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d540:	74 29                	je     c000d56b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d542:	50                   	push   eax
c000d543:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d548:	99                   	cdq    
c000d549:	52                   	push   edx
c000d54a:	50                   	push   eax
c000d54b:	ff 33                	push   DWORD PTR [ebx]
c000d54d:	e8 12 ad ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d552:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d554:	5a                   	pop    edx
c000d555:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d559:	8b 10                	mov    edx,DWORD PTR [eax]
c000d55b:	51                   	push   ecx
c000d55c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d560:	6a 00                	push   0x0
c000d562:	6a 2b                	push   0x2b
c000d564:	50                   	push   eax
c000d565:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d568:	83 c4 20             	add    esp,0x20
c000d56b:	83 c4 18             	add    esp,0x18
c000d56e:	5b                   	pop    ebx
c000d56f:	c3                   	ret    

c000d570 <CmFreeExtent(Reghive_Tag*, int)>:
c000d570:	53                   	push   ebx
c000d571:	83 ec 3c             	sub    esp,0x3c
c000d574:	6a 2b                	push   0x2b
c000d576:	6a 00                	push   0x0
c000d578:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d57c:	53                   	push   ebx
c000d57d:	e8 6e 2f ff ff       	call   c00004f0 <memset>
c000d582:	83 c4 0c             	add    esp,0xc
c000d585:	53                   	push   ebx
c000d586:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d58a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d58e:	e8 a1 ff ff ff       	call   c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d593:	83 c4 48             	add    esp,0x48
c000d596:	5b                   	pop    ebx
c000d597:	c3                   	ret    

c000d598 <CmUpdateHeader(Reghive_Tag*)>:
c000d598:	83 ec 0c             	sub    esp,0xc
c000d59b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d59f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d5a3:	74 10                	je     c000d5b5 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d5a5:	52                   	push   edx
c000d5a6:	8d 50 05             	lea    edx,[eax+0x5]
c000d5a9:	52                   	push   edx
c000d5aa:	6a 00                	push   0x0
c000d5ac:	50                   	push   eax
c000d5ad:	e8 82 ff ff ff       	call   c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5b2:	83 c4 10             	add    esp,0x10
c000d5b5:	83 c4 0c             	add    esp,0xc
c000d5b8:	c3                   	ret    

c000d5b9 <CmExpand(Reghive_Tag*, int)>:
c000d5b9:	55                   	push   ebp
c000d5ba:	57                   	push   edi
c000d5bb:	83 cf ff             	or     edi,0xffffffff
c000d5be:	56                   	push   esi
c000d5bf:	53                   	push   ebx
c000d5c0:	83 ec 3c             	sub    esp,0x3c
c000d5c3:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000d5c7:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d5cb:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d5cf:	74 59                	je     c000d62a <CmExpand(Reghive_Tag*, int)+0x71>
c000d5d1:	50                   	push   eax
c000d5d2:	31 d2                	xor    edx,edx
c000d5d4:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d5d8:	31 ff                	xor    edi,edi
c000d5da:	52                   	push   edx
c000d5db:	50                   	push   eax
c000d5dc:	ff 33                	push   DWORD PTR [ebx]
c000d5de:	e8 81 ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d5e3:	83 c4 0c             	add    esp,0xc
c000d5e6:	6a 2b                	push   0x2b
c000d5e8:	6a 00                	push   0x0
c000d5ea:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000d5ee:	55                   	push   ebp
c000d5ef:	e8 fc 2e ff ff       	call   c00004f0 <memset>
c000d5f4:	83 c4 10             	add    esp,0x10
c000d5f7:	39 f7                	cmp    edi,esi
c000d5f9:	7d 1b                	jge    c000d616 <CmExpand(Reghive_Tag*, int)+0x5d>
c000d5fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5fd:	83 ec 0c             	sub    esp,0xc
c000d600:	47                   	inc    edi
c000d601:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d605:	8b 10                	mov    edx,DWORD PTR [eax]
c000d607:	51                   	push   ecx
c000d608:	55                   	push   ebp
c000d609:	6a 00                	push   0x0
c000d60b:	6a 2b                	push   0x2b
c000d60d:	50                   	push   eax
c000d60e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d611:	83 c4 20             	add    esp,0x20
c000d614:	eb e1                	jmp    c000d5f7 <CmExpand(Reghive_Tag*, int)+0x3e>
c000d616:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000d619:	83 ec 0c             	sub    esp,0xc
c000d61c:	01 fe                	add    esi,edi
c000d61e:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000d621:	53                   	push   ebx
c000d622:	e8 71 ff ff ff       	call   c000d598 <CmUpdateHeader(Reghive_Tag*)>
c000d627:	83 c4 10             	add    esp,0x10
c000d62a:	83 c4 3c             	add    esp,0x3c
c000d62d:	89 f8                	mov    eax,edi
c000d62f:	5b                   	pop    ebx
c000d630:	5e                   	pop    esi
c000d631:	5f                   	pop    edi
c000d632:	5d                   	pop    ebp
c000d633:	c3                   	ret    

c000d634 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d634:	55                   	push   ebp
c000d635:	57                   	push   edi
c000d636:	56                   	push   esi
c000d637:	53                   	push   ebx
c000d638:	83 cb ff             	or     ebx,0xffffffff
c000d63b:	83 ec 1c             	sub    esp,0x1c
c000d63e:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d642:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d646:	74 68                	je     c000d6b0 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d648:	51                   	push   ecx
c000d649:	be 2b 00 00 00       	mov    esi,0x2b
c000d64e:	6a 00                	push   0x0
c000d650:	31 ff                	xor    edi,edi
c000d652:	6a 00                	push   0x0
c000d654:	31 db                	xor    ebx,ebx
c000d656:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d659:	e8 06 ac ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d65e:	83 c4 10             	add    esp,0x10
c000d661:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d664:	76 3b                	jbe    c000d6a1 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d666:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d669:	83 ec 0c             	sub    esp,0xc
c000d66c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d670:	8b 10                	mov    edx,DWORD PTR [eax]
c000d672:	51                   	push   ecx
c000d673:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d677:	51                   	push   ecx
c000d678:	6a 00                	push   0x0
c000d67a:	6a 01                	push   0x1
c000d67c:	50                   	push   eax
c000d67d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d680:	83 c4 20             	add    esp,0x20
c000d683:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d688:	74 26                	je     c000d6b0 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d68a:	52                   	push   edx
c000d68b:	43                   	inc    ebx
c000d68c:	57                   	push   edi
c000d68d:	56                   	push   esi
c000d68e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d691:	e8 ce ab ff ff       	call   c0008264 <File::seek(unsigned long long)>
c000d696:	83 c6 2b             	add    esi,0x2b
c000d699:	83 d7 00             	adc    edi,0x0
c000d69c:	83 c4 10             	add    esp,0x10
c000d69f:	eb c0                	jmp    c000d661 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d6a1:	50                   	push   eax
c000d6a2:	50                   	push   eax
c000d6a3:	6a 40                	push   0x40
c000d6a5:	55                   	push   ebp
c000d6a6:	e8 0e ff ff ff       	call   c000d5b9 <CmExpand(Reghive_Tag*, int)>
c000d6ab:	83 c4 10             	add    esp,0x10
c000d6ae:	89 c3                	mov    ebx,eax
c000d6b0:	83 c4 1c             	add    esp,0x1c
c000d6b3:	89 d8                	mov    eax,ebx
c000d6b5:	5b                   	pop    ebx
c000d6b6:	5e                   	pop    esi
c000d6b7:	5f                   	pop    edi
c000d6b8:	5d                   	pop    ebp
c000d6b9:	c3                   	ret    

c000d6ba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d6ba:	55                   	push   ebp
c000d6bb:	57                   	push   edi
c000d6bc:	56                   	push   esi
c000d6bd:	53                   	push   ebx
c000d6be:	81 ec 88 00 00 00    	sub    esp,0x88
c000d6c4:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d6cb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6d2:	e8 5d ff ff ff       	call   c000d634 <CmFindUnusedExtent(Reghive_Tag*)>
c000d6d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d6db:	83 c4 0c             	add    esp,0xc
c000d6de:	6a 2b                	push   0x2b
c000d6e0:	6a 00                	push   0x0
c000d6e2:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d6e6:	55                   	push   ebp
c000d6e7:	e8 04 2e ff ff       	call   c00004f0 <memset>
c000d6ec:	83 c4 10             	add    esp,0x10
c000d6ef:	85 db                	test   ebx,ebx
c000d6f1:	74 12                	je     c000d705 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d6f3:	51                   	push   ecx
c000d6f4:	55                   	push   ebp
c000d6f5:	53                   	push   ebx
c000d6f6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d6fd:	e8 0e fd ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d702:	83 c4 10             	add    esp,0x10
c000d705:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d709:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d710:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d715:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d717:	85 db                	test   ebx,ebx
c000d719:	74 49                	je     c000d764 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d71b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d720:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d725:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d729:	c1 e0 08             	shl    eax,0x8
c000d72c:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d732:	09 c8                	or     eax,ecx
c000d734:	74 11                	je     c000d747 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d736:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d73a:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d73e:	c1 e8 10             	shr    eax,0x10
c000d741:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d745:	eb 0f                	jmp    c000d756 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d747:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d74c:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d751:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d756:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d75a:	c1 ea 08             	shr    edx,0x8
c000d75d:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d762:	eb 0f                	jmp    c000d773 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d764:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d769:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d76e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d773:	52                   	push   edx
c000d774:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d778:	50                   	push   eax
c000d779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77d:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d784:	e8 ab fd ff ff       	call   c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d789:	83 c4 10             	add    esp,0x10
c000d78c:	85 db                	test   ebx,ebx
c000d78e:	74 12                	je     c000d7a2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d790:	50                   	push   eax
c000d791:	55                   	push   ebp
c000d792:	53                   	push   ebx
c000d793:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d79a:	e8 95 fd ff ff       	call   c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7a6:	83 c4 7c             	add    esp,0x7c
c000d7a9:	5b                   	pop    ebx
c000d7aa:	5e                   	pop    esi
c000d7ab:	5f                   	pop    edi
c000d7ac:	5d                   	pop    ebp
c000d7ad:	c3                   	ret    

c000d7ae <CmSetString(Reghive_Tag*, int, char const*)>:
c000d7ae:	55                   	push   ebp
c000d7af:	57                   	push   edi
c000d7b0:	56                   	push   esi
c000d7b1:	53                   	push   ebx
c000d7b2:	bb 27 00 00 00       	mov    ebx,0x27
c000d7b7:	81 ec 88 00 00 00    	sub    esp,0x88
c000d7bd:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000d7c4:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d7cb:	e8 b0 2d ff ff       	call   c0000580 <strlen>
c000d7d0:	8d 48 26             	lea    ecx,[eax+0x26]
c000d7d3:	89 c8                	mov    eax,ecx
c000d7d5:	99                   	cdq    
c000d7d6:	f7 fb                	idiv   ebx
c000d7d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7dc:	83 c4 10             	add    esp,0x10
c000d7df:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d7e5:	7e 10                	jle    c000d7f7 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d7e7:	83 ec 0c             	sub    esp,0xc
c000d7ea:	68 eb 79 02 c0       	push   0xc00279eb
c000d7ef:	e8 e0 22 00 00       	call   c000fad4 <KePanic(char const*)>
c000d7f4:	83 c4 10             	add    esp,0x10
c000d7f7:	53                   	push   ebx
c000d7f8:	31 ed                	xor    ebp,ebp
c000d7fa:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d7fe:	53                   	push   ebx
c000d7ff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d806:	57                   	push   edi
c000d807:	e8 04 fc ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d80c:	83 c4 10             	add    esp,0x10
c000d80f:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000d813:	89 f0                	mov    eax,esi
c000d815:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000d819:	c1 e0 08             	shl    eax,0x8
c000d81c:	09 c6                	or     esi,eax
c000d81e:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d822:	c1 e6 08             	shl    esi,0x8
c000d825:	09 c6                	or     esi,eax
c000d827:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000d82b:	7e 72                	jle    c000d89f <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000d82d:	85 f6                	test   esi,esi
c000d82f:	75 25                	jne    c000d856 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d831:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d836:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d83a:	50                   	push   eax
c000d83b:	6a 00                	push   0x0
c000d83d:	6a 00                	push   0x0
c000d83f:	57                   	push   edi
c000d840:	e8 75 fe ff ff       	call   c000d6ba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d845:	83 c4 10             	add    esp,0x10
c000d848:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d84b:	89 c6                	mov    esi,eax
c000d84d:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d850:	c1 f8 10             	sar    eax,0x10
c000d853:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d856:	51                   	push   ecx
c000d857:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d85b:	52                   	push   edx
c000d85c:	56                   	push   esi
c000d85d:	57                   	push   edi
c000d85e:	e8 ad fb ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d863:	83 c4 0c             	add    esp,0xc
c000d866:	6a 27                	push   0x27
c000d868:	6a 00                	push   0x0
c000d86a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d86e:	51                   	push   ecx
c000d86f:	e8 7c 2c ff ff       	call   c00004f0 <memset>
c000d874:	6b c5 27             	imul   eax,ebp,0x27
c000d877:	83 c4 0c             	add    esp,0xc
c000d87a:	6a 27                	push   0x27
c000d87c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d883:	50                   	push   eax
c000d884:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d888:	51                   	push   ecx
c000d889:	e8 02 2e ff ff       	call   c0000690 <strncpy>
c000d88e:	83 c4 0c             	add    esp,0xc
c000d891:	8d 54 24 49          	lea    edx,[esp+0x49]
c000d895:	52                   	push   edx
c000d896:	56                   	push   esi
c000d897:	57                   	push   edi
c000d898:	e8 97 fc ff ff       	call   c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d89d:	eb 19                	jmp    c000d8b8 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000d89f:	85 f6                	test   esi,esi
c000d8a1:	74 18                	je     c000d8bb <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000d8a3:	52                   	push   edx
c000d8a4:	52                   	push   edx
c000d8a5:	56                   	push   esi
c000d8a6:	57                   	push   edi
c000d8a7:	e8 c4 fc ff ff       	call   c000d570 <CmFreeExtent(Reghive_Tag*, int)>
c000d8ac:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d8b0:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d8b4:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d8b8:	83 c4 10             	add    esp,0x10
c000d8bb:	45                   	inc    ebp
c000d8bc:	83 c3 03             	add    ebx,0x3
c000d8bf:	83 fd 07             	cmp    ebp,0x7
c000d8c2:	0f 85 47 ff ff ff    	jne    c000d80f <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d8c8:	50                   	push   eax
c000d8c9:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d8cd:	50                   	push   eax
c000d8ce:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8d5:	57                   	push   edi
c000d8d6:	e8 59 fc ff ff       	call   c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8db:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d8e1:	5b                   	pop    ebx
c000d8e2:	5e                   	pop    esi
c000d8e3:	5f                   	pop    edi
c000d8e4:	5d                   	pop    ebp
c000d8e5:	c3                   	ret    

c000d8e6 <CmGetMatch(char*, char*, bool, bool*)>:
c000d8e6:	56                   	push   esi
c000d8e7:	53                   	push   ebx
c000d8e8:	50                   	push   eax
c000d8e9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d8ee:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d8f2:	74 25                	je     c000d919 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d8f4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d8f7:	31 db                	xor    ebx,ebx
c000d8f9:	50                   	push   eax
c000d8fa:	50                   	push   eax
c000d8fb:	8d 04 9d 80 ac 02 c0 	lea    eax,[ebx*4-0x3ffd5380]
c000d902:	50                   	push   eax
c000d903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d907:	e8 74 2e ff ff       	call   c0000780 <strcmp>
c000d90c:	83 c4 10             	add    esp,0x10
c000d90f:	85 c0                	test   eax,eax
c000d911:	74 2e                	je     c000d941 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d913:	43                   	inc    ebx
c000d914:	83 fb 3f             	cmp    ebx,0x3f
c000d917:	75 e0                	jne    c000d8f9 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d919:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d91c:	31 db                	xor    ebx,ebx
c000d91e:	51                   	push   ecx
c000d91f:	51                   	push   ecx
c000d920:	8d 04 9d 80 ac 02 c0 	lea    eax,[ebx*4-0x3ffd5380]
c000d927:	50                   	push   eax
c000d928:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d92c:	e8 4f 2e ff ff       	call   c0000780 <strcmp>
c000d931:	83 c4 10             	add    esp,0x10
c000d934:	85 c0                	test   eax,eax
c000d936:	74 09                	je     c000d941 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d938:	43                   	inc    ebx
c000d939:	83 fb 3f             	cmp    ebx,0x3f
c000d93c:	75 e0                	jne    c000d91e <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d93e:	83 cb ff             	or     ebx,0xffffffff
c000d941:	5a                   	pop    edx
c000d942:	89 d8                	mov    eax,ebx
c000d944:	5b                   	pop    ebx
c000d945:	5e                   	pop    esi
c000d946:	c3                   	ret    

c000d947 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d947:	55                   	push   ebp
c000d948:	31 c0                	xor    eax,eax
c000d94a:	57                   	push   edi
c000d94b:	56                   	push   esi
c000d94c:	53                   	push   ebx
c000d94d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d951:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d955:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d959:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d95d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d95f:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d962:	83 fd 1f             	cmp    ebp,0x1f
c000d965:	7f 0b                	jg     c000d972 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d967:	0f b6 c2             	movzx  eax,dl
c000d96a:	d3 e0                	shl    eax,cl
c000d96c:	09 07                	or     DWORD PTR [edi],eax
c000d96e:	b0 01                	mov    al,0x1
c000d970:	01 33                	add    DWORD PTR [ebx],esi
c000d972:	5b                   	pop    ebx
c000d973:	5e                   	pop    esi
c000d974:	5f                   	pop    edi
c000d975:	5d                   	pop    ebp
c000d976:	c3                   	ret    

c000d977 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d977:	57                   	push   edi
c000d978:	56                   	push   esi
c000d979:	53                   	push   ebx
c000d97a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d97e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d982:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d986:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d98a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d98c:	7c 17                	jl     c000d9a5 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d98e:	8b 17                	mov    edx,DWORD PTR [edi]
c000d990:	b8 01 00 00 00       	mov    eax,0x1
c000d995:	d3 e0                	shl    eax,cl
c000d997:	48                   	dec    eax
c000d998:	21 d0                	and    eax,edx
c000d99a:	d3 ea                	shr    edx,cl
c000d99c:	89 17                	mov    DWORD PTR [edi],edx
c000d99e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d9a0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d9a3:	eb 05                	jmp    c000d9aa <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d9a5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9a8:	31 c0                	xor    eax,eax
c000d9aa:	5b                   	pop    ebx
c000d9ab:	5e                   	pop    esi
c000d9ac:	5f                   	pop    edi
c000d9ad:	c3                   	ret    

c000d9ae <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d9ae:	83 ec 40             	sub    esp,0x40
c000d9b1:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d9b5:	50                   	push   eax
c000d9b6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d9be:	e8 4d fa ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9c3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d9c7:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d9cb:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d9cf:	89 10                	mov    DWORD PTR [eax],edx
c000d9d1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d9d4:	83 c4 4c             	add    esp,0x4c
c000d9d7:	c3                   	ret    

c000d9d8 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d9d8:	55                   	push   ebp
c000d9d9:	57                   	push   edi
c000d9da:	56                   	push   esi
c000d9db:	53                   	push   ebx
c000d9dc:	83 ec 40             	sub    esp,0x40
c000d9df:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d9e3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d9e7:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d9eb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d9ef:	53                   	push   ebx
c000d9f0:	56                   	push   esi
c000d9f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d9f5:	e8 16 fa ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d9fa:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d9fe:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000da02:	83 c4 0c             	add    esp,0xc
c000da05:	53                   	push   ebx
c000da06:	56                   	push   esi
c000da07:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da0b:	e8 24 fb ff ff       	call   c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da10:	83 c4 4c             	add    esp,0x4c
c000da13:	5b                   	pop    ebx
c000da14:	5e                   	pop    esi
c000da15:	5f                   	pop    edi
c000da16:	5d                   	pop    ebp
c000da17:	c3                   	ret    

c000da18 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000da18:	55                   	push   ebp
c000da19:	57                   	push   edi
c000da1a:	56                   	push   esi
c000da1b:	31 f6                	xor    esi,esi
c000da1d:	53                   	push   ebx
c000da1e:	31 db                	xor    ebx,ebx
c000da20:	83 ec 40             	sub    esp,0x40
c000da23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da2b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da33:	6a 12                	push   0x12
c000da35:	68 ee 00 00 00       	push   0xee
c000da3a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da3e:	e8 ad 2a ff ff       	call   c00004f0 <memset>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000da4a:	6a 08                	push   0x8
c000da4c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da50:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000da54:	50                   	push   eax
c000da55:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000da59:	55                   	push   ebp
c000da5a:	57                   	push   edi
c000da5b:	e8 e7 fe ff ff       	call   c000d947 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000da60:	83 c4 10             	add    esp,0x10
c000da63:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000da67:	50                   	push   eax
c000da68:	6a 06                	push   0x6
c000da6a:	55                   	push   ebp
c000da6b:	57                   	push   edi
c000da6c:	e8 06 ff ff ff       	call   c000d977 <CmGetShift(unsigned int*, int*, int, bool*)>
c000da71:	83 c4 10             	add    esp,0x10
c000da74:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000da79:	74 07                	je     c000da82 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000da7b:	46                   	inc    esi
c000da7c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000da80:	eb e1                	jmp    c000da63 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000da82:	43                   	inc    ebx
c000da83:	83 fb 12             	cmp    ebx,0x12
c000da86:	75 c2                	jne    c000da4a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000da88:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000da8c:	31 f6                	xor    esi,esi
c000da8e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000da91:	50                   	push   eax
c000da92:	50                   	push   eax
c000da93:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000da98:	46                   	inc    esi
c000da99:	8d 04 85 80 ac 02 c0 	lea    eax,[eax*4-0x3ffd5380]
c000daa0:	50                   	push   eax
c000daa1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000daa5:	e8 c6 2d ff ff       	call   c0000870 <strcat>
c000daaa:	83 c4 10             	add    esp,0x10
c000daad:	83 fe 18             	cmp    esi,0x18
c000dab0:	75 df                	jne    c000da91 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000dab2:	83 c4 3c             	add    esp,0x3c
c000dab5:	31 c0                	xor    eax,eax
c000dab7:	5b                   	pop    ebx
c000dab8:	5e                   	pop    esi
c000dab9:	5f                   	pop    edi
c000daba:	5d                   	pop    ebp
c000dabb:	c3                   	ret    

c000dabc <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000dabc:	83 ec 40             	sub    esp,0x40
c000dabf:	8d 44 24 09          	lea    eax,[esp+0x9]
c000dac3:	50                   	push   eax
c000dac4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dac8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000dacc:	e8 3f f9 ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dad1:	58                   	pop    eax
c000dad2:	5a                   	pop    edx
c000dad3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dad7:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dadb:	50                   	push   eax
c000dadc:	e8 37 ff ff ff       	call   c000da18 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dae1:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dae6:	83 c4 4c             	add    esp,0x4c
c000dae9:	c3                   	ret    

c000daea <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000daea:	55                   	push   ebp
c000daeb:	57                   	push   edi
c000daec:	56                   	push   esi
c000daed:	53                   	push   ebx
c000daee:	31 db                	xor    ebx,ebx
c000daf0:	83 ec 70             	sub    esp,0x70
c000daf3:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dafa:	6a 30                	push   0x30
c000dafc:	6a 00                	push   0x0
c000dafe:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000db02:	56                   	push   esi
c000db03:	e8 e8 29 ff ff       	call   c00004f0 <memset>
c000db08:	83 c4 10             	add    esp,0x10
c000db0b:	83 ec 0c             	sub    esp,0xc
c000db0e:	57                   	push   edi
c000db0f:	e8 6c 2a ff ff       	call   c0000580 <strlen>
c000db14:	83 c4 10             	add    esp,0x10
c000db17:	39 d8                	cmp    eax,ebx
c000db19:	76 16                	jbe    c000db31 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000db1b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db1f:	83 ec 0c             	sub    esp,0xc
c000db22:	50                   	push   eax
c000db23:	e8 38 2e ff ff       	call   c0000960 <toupper>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db2e:	43                   	inc    ebx
c000db2f:	eb da                	jmp    c000db0b <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db31:	52                   	push   edx
c000db32:	31 db                	xor    ebx,ebx
c000db34:	6a 18                	push   0x18
c000db36:	31 ff                	xor    edi,edi
c000db38:	6a 3f                	push   0x3f
c000db3a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000db3e:	50                   	push   eax
c000db3f:	e8 ac 29 ff ff       	call   c00004f0 <memset>
c000db44:	83 c4 10             	add    esp,0x10
c000db47:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000db4b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000db4f:	84 c0                	test   al,al
c000db51:	0f 84 af 00 00 00    	je     c000dc06 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000db57:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000db5b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000db5e:	83 ec 0c             	sub    esp,0xc
c000db61:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000db66:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000db6a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000db6e:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000db73:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000db77:	56                   	push   esi
c000db78:	e8 03 2a ff ff       	call   c0000580 <strlen>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	85 c0                	test   eax,eax
c000db82:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db86:	74 0b                	je     c000db93 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000db88:	50                   	push   eax
c000db89:	6a 01                	push   0x1
c000db8b:	56                   	push   esi
c000db8c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000db90:	50                   	push   eax
c000db91:	eb 0a                	jmp    c000db9d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000db93:	50                   	push   eax
c000db94:	6a 00                	push   0x0
c000db96:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000db9a:	50                   	push   eax
c000db9b:	6a 00                	push   0x0
c000db9d:	e8 44 fd ff ff       	call   c000d8e6 <CmGetMatch(char*, char*, bool, bool*)>
c000dba2:	83 c4 10             	add    esp,0x10
c000dba5:	83 f8 ff             	cmp    eax,0xffffffff
c000dba8:	75 1a                	jne    c000dbc4 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dbaa:	83 ec 0c             	sub    esp,0xc
c000dbad:	68 00 7a 02 c0       	push   0xc0027a00
c000dbb2:	e8 1d 1f 00 00       	call   c000fad4 <KePanic(char const*)>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	b8 02 00 00 00       	mov    eax,0x2
c000dbbf:	e9 bb 00 00 00       	jmp    c000dc7f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbc4:	83 ff 18             	cmp    edi,0x18
c000dbc7:	75 1a                	jne    c000dbe3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dbc9:	83 ec 0c             	sub    esp,0xc
c000dbcc:	68 15 7a 02 c0       	push   0xc0027a15
c000dbd1:	e8 fe 1e 00 00       	call   c000fad4 <KePanic(char const*)>
c000dbd6:	83 c4 10             	add    esp,0x10
c000dbd9:	b8 01 00 00 00       	mov    eax,0x1
c000dbde:	e9 9c 00 00 00       	jmp    c000dc7f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dbe3:	47                   	inc    edi
c000dbe4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dbe9:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dbed:	0f 45 dd             	cmovne ebx,ebp
c000dbf0:	83 ec 0c             	sub    esp,0xc
c000dbf3:	56                   	push   esi
c000dbf4:	e8 87 29 ff ff       	call   c0000580 <strlen>
c000dbf9:	83 c4 10             	add    esp,0x10
c000dbfc:	85 c0                	test   eax,eax
c000dbfe:	74 06                	je     c000dc06 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000dc00:	43                   	inc    ebx
c000dc01:	e9 41 ff ff ff       	jmp    c000db47 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dc06:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dc0e:	31 db                	xor    ebx,ebx
c000dc10:	31 ff                	xor    edi,edi
c000dc12:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dc1a:	50                   	push   eax
c000dc1b:	6a 12                	push   0x12
c000dc1d:	68 ee 00 00 00       	push   0xee
c000dc22:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc29:	e8 c2 28 ff ff       	call   c00004f0 <memset>
c000dc2e:	83 c4 10             	add    esp,0x10
c000dc31:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dc35:	83 fb 17             	cmp    ebx,0x17
c000dc38:	7e 26                	jle    c000dc60 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000dc3a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc3e:	50                   	push   eax
c000dc3f:	6a 08                	push   0x8
c000dc41:	55                   	push   ebp
c000dc42:	56                   	push   esi
c000dc43:	e8 2f fd ff ff       	call   c000d977 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dc48:	83 c4 10             	add    esp,0x10
c000dc4b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc50:	74 26                	je     c000dc78 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000dc52:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dc59:	4b                   	dec    ebx
c000dc5a:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dc5d:	47                   	inc    edi
c000dc5e:	eb 1c                	jmp    c000dc7c <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc60:	6a 06                	push   0x6
c000dc62:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000dc67:	50                   	push   eax
c000dc68:	55                   	push   ebp
c000dc69:	56                   	push   esi
c000dc6a:	e8 d8 fc ff ff       	call   c000d947 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	84 c0                	test   al,al
c000dc74:	75 06                	jne    c000dc7c <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000dc76:	eb c2                	jmp    c000dc3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000dc78:	31 c0                	xor    eax,eax
c000dc7a:	eb 03                	jmp    c000dc7f <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000dc7c:	43                   	inc    ebx
c000dc7d:	eb b2                	jmp    c000dc31 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000dc7f:	83 c4 6c             	add    esp,0x6c
c000dc82:	5b                   	pop    ebx
c000dc83:	5e                   	pop    esi
c000dc84:	5f                   	pop    edi
c000dc85:	5d                   	pop    ebp
c000dc86:	c3                   	ret    

c000dc87 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dc87:	53                   	push   ebx
c000dc88:	83 ec 3c             	sub    esp,0x3c
c000dc8b:	6a 2b                	push   0x2b
c000dc8d:	6a 00                	push   0x0
c000dc8f:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dc93:	53                   	push   ebx
c000dc94:	e8 57 28 ff ff       	call   c00004f0 <memset>
c000dc99:	58                   	pop    eax
c000dc9a:	5a                   	pop    edx
c000dc9b:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dc9f:	50                   	push   eax
c000dca0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dca4:	e8 41 fe ff ff       	call   c000daea <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dca9:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dcae:	83 c4 0c             	add    esp,0xc
c000dcb1:	6a 15                	push   0x15
c000dcb3:	6a 00                	push   0x0
c000dcb5:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dcb9:	50                   	push   eax
c000dcba:	e8 31 28 ff ff       	call   c00004f0 <memset>
c000dcbf:	53                   	push   ebx
c000dcc0:	6a 00                	push   0x0
c000dcc2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcc6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dcca:	e8 eb f9 ff ff       	call   c000d6ba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dccf:	83 c4 58             	add    esp,0x58
c000dcd2:	5b                   	pop    ebx
c000dcd3:	c3                   	ret    

c000dcd4 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dcd4:	56                   	push   esi
c000dcd5:	53                   	push   ebx
c000dcd6:	83 ec 48             	sub    esp,0x48
c000dcd9:	6a 12                	push   0x12
c000dcdb:	68 ff 00 00 00       	push   0xff
c000dce0:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dce4:	56                   	push   esi
c000dce5:	e8 06 28 ff ff       	call   c00004f0 <memset>
c000dcea:	5a                   	pop    edx
c000dceb:	59                   	pop    ecx
c000dcec:	56                   	push   esi
c000dced:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dcf1:	e8 f4 fd ff ff       	call   c000daea <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dcfd:	85 db                	test   ebx,ebx
c000dcff:	74 42                	je     c000dd43 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dd01:	50                   	push   eax
c000dd02:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dd06:	50                   	push   eax
c000dd07:	53                   	push   ebx
c000dd08:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd0c:	e8 ff f6 ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd11:	83 c4 0c             	add    esp,0xc
c000dd14:	6a 12                	push   0x12
c000dd16:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dd1a:	50                   	push   eax
c000dd1b:	56                   	push   esi
c000dd1c:	e8 5f 26 ff ff       	call   c0000380 <memcmp>
c000dd21:	83 c4 10             	add    esp,0x10
c000dd24:	85 c0                	test   eax,eax
c000dd26:	74 1e                	je     c000dd46 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd28:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd2d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd32:	c1 e3 08             	shl    ebx,0x8
c000dd35:	09 d8                	or     eax,ebx
c000dd37:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dd3c:	c1 e3 10             	shl    ebx,0x10
c000dd3f:	09 c3                	or     ebx,eax
c000dd41:	eb ba                	jmp    c000dcfd <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dd43:	83 cb ff             	or     ebx,0xffffffff
c000dd46:	83 c4 44             	add    esp,0x44
c000dd49:	89 d8                	mov    eax,ebx
c000dd4b:	5b                   	pop    ebx
c000dd4c:	5e                   	pop    esi
c000dd4d:	c3                   	ret    

c000dd4e <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000dd4e:	57                   	push   edi
c000dd4f:	56                   	push   esi
c000dd50:	53                   	push   ebx
c000dd51:	83 ec 34             	sub    esp,0x34
c000dd54:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000dd58:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000dd5c:	6a 2b                	push   0x2b
c000dd5e:	6a 00                	push   0x0
c000dd60:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd64:	53                   	push   ebx
c000dd65:	e8 86 27 ff ff       	call   c00004f0 <memset>
c000dd6a:	58                   	pop    eax
c000dd6b:	5a                   	pop    edx
c000dd6c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd70:	50                   	push   eax
c000dd71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd75:	e8 70 fd ff ff       	call   c000daea <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd7a:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000dd7e:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dd82:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000dd86:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000dd8a:	53                   	push   ebx
c000dd8b:	6a 00                	push   0x0
c000dd8d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd95:	e8 20 f9 ff ff       	call   c000d6ba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd9a:	83 c4 50             	add    esp,0x50
c000dd9d:	5b                   	pop    ebx
c000dd9e:	5e                   	pop    esi
c000dd9f:	5f                   	pop    edi
c000dda0:	c3                   	ret    

c000dda1 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000dda1:	55                   	push   ebp
c000dda2:	57                   	push   edi
c000dda3:	56                   	push   esi
c000dda4:	53                   	push   ebx
c000dda5:	83 ec 40             	sub    esp,0x40
c000dda8:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000ddac:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000ddb0:	6a 2b                	push   0x2b
c000ddb2:	6a 00                	push   0x0
c000ddb4:	8d 74 24 11          	lea    esi,[esp+0x11]
c000ddb8:	56                   	push   esi
c000ddb9:	e8 32 27 ff ff       	call   c00004f0 <memset>
c000ddbe:	5f                   	pop    edi
c000ddbf:	89 ef                	mov    edi,ebp
c000ddc1:	58                   	pop    eax
c000ddc2:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddc6:	50                   	push   eax
c000ddc7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddcb:	e8 1a fd ff ff       	call   c000daea <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddd0:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000ddd5:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ddda:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000dddf:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000dde4:	83 c4 10             	add    esp,0x10
c000dde7:	85 ed                	test   ebp,ebp
c000dde9:	74 14                	je     c000ddff <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ddeb:	51                   	push   ecx
c000ddec:	51                   	push   ecx
c000dded:	57                   	push   edi
c000ddee:	53                   	push   ebx
c000ddef:	e8 0e f7 ff ff       	call   c000d502 <CmGetNext(Reghive_Tag*, int)>
c000ddf4:	83 c4 10             	add    esp,0x10
c000ddf7:	85 c0                	test   eax,eax
c000ddf9:	74 04                	je     c000ddff <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000ddfb:	89 c7                	mov    edi,eax
c000ddfd:	eb e8                	jmp    c000dde7 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000ddff:	56                   	push   esi
c000de00:	6a 00                	push   0x0
c000de02:	57                   	push   edi
c000de03:	53                   	push   ebx
c000de04:	e8 b1 f8 ff ff       	call   c000d6ba <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de09:	83 c4 0c             	add    esp,0xc
c000de0c:	56                   	push   esi
c000de0d:	50                   	push   eax
c000de0e:	89 c7                	mov    edi,eax
c000de10:	53                   	push   ebx
c000de11:	e8 fa f5 ff ff       	call   c000d410 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de16:	58                   	pop    eax
c000de17:	5a                   	pop    edx
c000de18:	6a 6c                	push   0x6c
c000de1a:	6a 00                	push   0x0
c000de1c:	6a 00                	push   0x0
c000de1e:	68 26 7a 02 c0       	push   0xc0027a26
c000de23:	57                   	push   edi
c000de24:	53                   	push   ebx
c000de25:	e8 24 ff ff ff       	call   c000dd4e <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de2a:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de2e:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de32:	c1 e8 10             	shr    eax,0x10
c000de35:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000de39:	83 c4 1c             	add    esp,0x1c
c000de3c:	56                   	push   esi
c000de3d:	57                   	push   edi
c000de3e:	53                   	push   ebx
c000de3f:	e8 f0 f6 ff ff       	call   c000d534 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000de44:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000de49:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000de4e:	c1 e0 08             	shl    eax,0x8
c000de51:	09 c2                	or     edx,eax
c000de53:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000de58:	83 c4 4c             	add    esp,0x4c
c000de5b:	5b                   	pop    ebx
c000de5c:	5e                   	pop    esi
c000de5d:	c1 e0 10             	shl    eax,0x10
c000de60:	09 d0                	or     eax,edx
c000de62:	5f                   	pop    edi
c000de63:	5d                   	pop    ebp
c000de64:	c3                   	ret    

c000de65 <zStrtok(char*, char const*)>:
c000de65:	55                   	push   ebp
c000de66:	57                   	push   edi
c000de67:	56                   	push   esi
c000de68:	53                   	push   ebx
c000de69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de71:	85 db                	test   ebx,ebx
c000de73:	74 2f                	je     c000dea4 <zStrtok(char*, char const*)+0x3f>
c000de75:	85 c0                	test   eax,eax
c000de77:	75 09                	jne    c000de82 <zStrtok(char*, char const*)+0x1d>
c000de79:	a1 04 11 03 c0       	mov    eax,ds:0xc0031104
c000de7e:	85 c0                	test   eax,eax
c000de80:	74 50                	je     c000ded2 <zStrtok(char*, char const*)+0x6d>
c000de82:	31 c9                	xor    ecx,ecx
c000de84:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000de88:	74 03                	je     c000de8d <zStrtok(char*, char const*)+0x28>
c000de8a:	41                   	inc    ecx
c000de8b:	eb f7                	jmp    c000de84 <zStrtok(char*, char const*)+0x1f>
c000de8d:	31 d2                	xor    edx,edx
c000de8f:	39 ca                	cmp    edx,ecx
c000de91:	74 15                	je     c000dea8 <zStrtok(char*, char const*)+0x43>
c000de93:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000de97:	8d 3c 10             	lea    edi,[eax+edx*1]
c000de9a:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000de9d:	39 ee                	cmp    esi,ebp
c000de9f:	74 13                	je     c000deb4 <zStrtok(char*, char const*)+0x4f>
c000dea1:	42                   	inc    edx
c000dea2:	eb eb                	jmp    c000de8f <zStrtok(char*, char const*)+0x2a>
c000dea4:	31 c0                	xor    eax,eax
c000dea6:	eb 2a                	jmp    c000ded2 <zStrtok(char*, char const*)+0x6d>
c000dea8:	c7 05 04 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031104,0x0
c000deb2:	eb 1e                	jmp    c000ded2 <zStrtok(char*, char const*)+0x6d>
c000deb4:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000deb7:	39 ce                	cmp    esi,ecx
c000deb9:	75 0a                	jne    c000dec5 <zStrtok(char*, char const*)+0x60>
c000debb:	40                   	inc    eax
c000debc:	a3 04 11 03 c0       	mov    ds:0xc0031104,eax
c000dec1:	89 d8                	mov    eax,ebx
c000dec3:	eb 0d                	jmp    c000ded2 <zStrtok(char*, char const*)+0x6d>
c000dec5:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000dec8:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000decc:	89 15 04 11 03 c0    	mov    DWORD PTR ds:0xc0031104,edx
c000ded2:	5b                   	pop    ebx
c000ded3:	5e                   	pop    esi
c000ded4:	5f                   	pop    edi
c000ded5:	5d                   	pop    ebp
c000ded6:	c3                   	ret    

c000ded7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000ded7:	57                   	push   edi
c000ded8:	56                   	push   esi
c000ded9:	53                   	push   ebx
c000deda:	81 ec 08 01 00 00    	sub    esp,0x108
c000dee0:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000dee7:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000deee:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000def2:	53                   	push   ebx
c000def3:	e8 58 27 ff ff       	call   c0000650 <strcpy>
c000def8:	59                   	pop    ecx
c000def9:	5e                   	pop    esi
c000defa:	68 ce 88 02 c0       	push   0xc00288ce
c000deff:	53                   	push   ebx
c000df00:	bb 01 00 00 00       	mov    ebx,0x1
c000df05:	e8 5b ff ff ff       	call   c000de65 <zStrtok(char*, char const*)>
c000df0a:	83 c4 10             	add    esp,0x10
c000df0d:	85 c0                	test   eax,eax
c000df0f:	74 3b                	je     c000df4c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df11:	52                   	push   edx
c000df12:	50                   	push   eax
c000df13:	6a 01                	push   0x1
c000df15:	57                   	push   edi
c000df16:	e8 b9 fd ff ff       	call   c000dcd4 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000df1b:	59                   	pop    ecx
c000df1c:	5e                   	pop    esi
c000df1d:	89 c3                	mov    ebx,eax
c000df1f:	68 ce 88 02 c0       	push   0xc00288ce
c000df24:	6a 00                	push   0x0
c000df26:	e8 3a ff ff ff       	call   c000de65 <zStrtok(char*, char const*)>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	85 c0                	test   eax,eax
c000df30:	89 c6                	mov    esi,eax
c000df32:	74 18                	je     c000df4c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df34:	52                   	push   edx
c000df35:	52                   	push   edx
c000df36:	53                   	push   ebx
c000df37:	57                   	push   edi
c000df38:	e8 86 f5 ff ff       	call   c000d4c3 <CmEnterDirectory(Reghive_Tag*, int)>
c000df3d:	83 c4 10             	add    esp,0x10
c000df40:	83 f8 ff             	cmp    eax,0xffffffff
c000df43:	89 c3                	mov    ebx,eax
c000df45:	74 05                	je     c000df4c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df47:	50                   	push   eax
c000df48:	56                   	push   esi
c000df49:	53                   	push   ebx
c000df4a:	eb c9                	jmp    c000df15 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000df4c:	81 c4 00 01 00 00    	add    esp,0x100
c000df52:	89 d8                	mov    eax,ebx
c000df54:	5b                   	pop    ebx
c000df55:	5e                   	pop    esi
c000df56:	5f                   	pop    edi
c000df57:	c3                   	ret    

c000df58 <Computer::close(int, int, void*)>:
c000df58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df5d:	c3                   	ret    

c000df5e <Computer::Computer()>:
c000df5e:	83 ec 0c             	sub    esp,0xc
c000df61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df65:	83 ec 08             	sub    esp,0x8
c000df68:	68 2c 7a 02 c0       	push   0xc0027a2c
c000df6d:	50                   	push   eax
c000df6e:	e8 e5 bb ff ff       	call   c0009b58 <Device::Device(char const*)>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	ba 84 7a 02 c0       	mov    edx,0xc0027a84
c000df7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7f:	89 10                	mov    DWORD PTR [eax],edx
c000df81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df85:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000df8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df93:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000df9d:	90                   	nop
c000df9e:	83 c4 0c             	add    esp,0xc
c000dfa1:	c3                   	ret    

c000dfa2 <Computer::open(int, int, void*)>:
c000dfa2:	56                   	push   esi
c000dfa3:	53                   	push   ebx
c000dfa4:	83 ec 04             	sub    esp,0x4
c000dfa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfab:	39 1d 08 11 03 c0    	cmp    DWORD PTR ds:0xc0031108,ebx
c000dfb1:	74 10                	je     c000dfc3 <Computer::open(int, int, void*)+0x21>
c000dfb3:	83 ec 0c             	sub    esp,0xc
c000dfb6:	68 50 7a 02 c0       	push   0xc0027a50
c000dfbb:	e8 14 1b 00 00       	call   c000fad4 <KePanic(char const*)>
c000dfc0:	83 c4 10             	add    esp,0x10
c000dfc3:	83 ec 0c             	sub    esp,0xc
c000dfc6:	68 78 11 00 00       	push   0x1178
c000dfcb:	e8 b0 16 00 00       	call   c000f680 <malloc>
c000dfd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfd3:	89 c6                	mov    esi,eax
c000dfd5:	e8 98 c9 00 00       	call   c001a972 <CPU::CPU()>
c000dfda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000dfde:	89 b3 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],esi
c000dfe4:	50                   	push   eax
c000dfe5:	6a 00                	push   0x0
c000dfe7:	6a 00                	push   0x0
c000dfe9:	56                   	push   esi
c000dfea:	e8 65 cb 00 00       	call   c001ab54 <CPU::open(int, int, void*)>
c000dfef:	83 c4 14             	add    esp,0x14
c000dff2:	68 35 7a 02 c0       	push   0xc0027a35
c000dff7:	e8 e1 f1 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000dffc:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e003:	e8 78 16 00 00       	call   c000f680 <malloc>
c000e008:	89 04 24             	mov    DWORD PTR [esp],eax
c000e00b:	89 c6                	mov    esi,eax
c000e00d:	e8 12 e8 ff ff       	call   c000c824 <ACPI::ACPI()>
c000e012:	89 b3 64 01 00 00    	mov    DWORD PTR [ebx+0x164],esi
c000e018:	5a                   	pop    edx
c000e019:	59                   	pop    ecx
c000e01a:	56                   	push   esi
c000e01b:	53                   	push   ebx
c000e01c:	e8 d5 b9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e021:	5e                   	pop    esi
c000e022:	58                   	pop    eax
c000e023:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e029:	50                   	push   eax
c000e02a:	53                   	push   ebx
c000e02b:	e8 c6 b9 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c000e030:	83 c4 14             	add    esp,0x14
c000e033:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e038:	5b                   	pop    ebx
c000e039:	5e                   	pop    esi
c000e03a:	c3                   	ret    

c000e03b <KeCalculateCRC32(unsigned char*, int)>:
c000e03b:	53                   	push   ebx
c000e03c:	83 c8 ff             	or     eax,0xffffffff
c000e03f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e043:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e047:	01 cb                	add    ebx,ecx
c000e049:	39 d9                	cmp    ecx,ebx
c000e04b:	74 15                	je     c000e062 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e04d:	41                   	inc    ecx
c000e04e:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e051:	31 c2                	xor    edx,eax
c000e053:	c1 e8 08             	shr    eax,0x8
c000e056:	0f b6 d2             	movzx  edx,dl
c000e059:	33 04 95 80 ad 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd5280]
c000e060:	eb e7                	jmp    c000e049 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e062:	5b                   	pop    ebx
c000e063:	f7 d0                	not    eax
c000e065:	c3                   	ret    

c000e066 <EnvVarContainer::getEnv(char const*)>:
c000e066:	57                   	push   edi
c000e067:	56                   	push   esi
c000e068:	53                   	push   ebx
c000e069:	31 db                	xor    ebx,ebx
c000e06b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e06f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e071:	7e 2b                	jle    c000e09e <EnvVarContainer::getEnv(char const*)+0x38>
c000e073:	50                   	push   eax
c000e074:	50                   	push   eax
c000e075:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e078:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e07f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e082:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e086:	e8 f5 26 ff ff       	call   c0000780 <strcmp>
c000e08b:	83 c4 10             	add    esp,0x10
c000e08e:	85 c0                	test   eax,eax
c000e090:	75 09                	jne    c000e09b <EnvVarContainer::getEnv(char const*)+0x35>
c000e092:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e095:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e099:	eb 05                	jmp    c000e0a0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e09b:	43                   	inc    ebx
c000e09c:	eb d1                	jmp    c000e06f <EnvVarContainer::getEnv(char const*)+0x9>
c000e09e:	31 c0                	xor    eax,eax
c000e0a0:	5b                   	pop    ebx
c000e0a1:	5e                   	pop    esi
c000e0a2:	5f                   	pop    edi
c000e0a3:	c3                   	ret    

c000e0a4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000e0a4:	55                   	push   ebp
c000e0a5:	57                   	push   edi
c000e0a6:	56                   	push   esi
c000e0a7:	53                   	push   ebx
c000e0a8:	83 ec 28             	sub    esp,0x28
c000e0ab:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e0af:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e0b3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e0b7:	56                   	push   esi
c000e0b8:	e8 c3 24 ff ff       	call   c0000580 <strlen>
c000e0bd:	40                   	inc    eax
c000e0be:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0c1:	e8 ba 15 00 00       	call   c000f680 <malloc>
c000e0c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e0c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0cd:	e8 ae 24 ff ff       	call   c0000580 <strlen>
c000e0d2:	40                   	inc    eax
c000e0d3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0d6:	e8 a5 15 00 00       	call   c000f680 <malloc>
c000e0db:	89 34 24             	mov    DWORD PTR [esp],esi
c000e0de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0e2:	e8 99 24 ff ff       	call   c0000580 <strlen>
c000e0e7:	83 c4 0c             	add    esp,0xc
c000e0ea:	40                   	inc    eax
c000e0eb:	50                   	push   eax
c000e0ec:	6a 00                	push   0x0
c000e0ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f2:	e8 f9 23 ff ff       	call   c00004f0 <memset>
c000e0f7:	89 34 24             	mov    DWORD PTR [esp],esi
c000e0fa:	e8 81 24 ff ff       	call   c0000580 <strlen>
c000e0ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e103:	8d 48 01             	lea    ecx,[eax+0x1]
c000e106:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e108:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e10b:	89 de                	mov    esi,ebx
c000e10d:	e8 6e 24 ff ff       	call   c0000580 <strlen>
c000e112:	83 c4 0c             	add    esp,0xc
c000e115:	40                   	inc    eax
c000e116:	50                   	push   eax
c000e117:	6a 00                	push   0x0
c000e119:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e11d:	e8 ce 23 ff ff       	call   c00004f0 <memset>
c000e122:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e125:	e8 56 24 ff ff       	call   c0000580 <strlen>
c000e12a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e12e:	8d 48 01             	lea    ecx,[eax+0x1]
c000e131:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e133:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e136:	40                   	inc    eax
c000e137:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e13a:	c1 e0 03             	shl    eax,0x3
c000e13d:	5a                   	pop    edx
c000e13e:	59                   	pop    ecx
c000e13f:	50                   	push   eax
c000e140:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e143:	e8 24 15 00 00       	call   c000f66c <realloc>
c000e148:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e14b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e14f:	b9 08 00 00 00       	mov    ecx,0x8
c000e154:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e157:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e15b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e15d:	83 c4 2c             	add    esp,0x2c
c000e160:	5b                   	pop    ebx
c000e161:	5e                   	pop    esi
c000e162:	5f                   	pop    edi
c000e163:	5d                   	pop    ebp
c000e164:	c3                   	ret    
c000e165:	90                   	nop

c000e166 <EnvVarContainer::deleteEnv(char const*)>:
c000e166:	c3                   	ret    
c000e167:	90                   	nop

c000e168 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e168:	55                   	push   ebp
c000e169:	57                   	push   edi
c000e16a:	56                   	push   esi
c000e16b:	53                   	push   ebx
c000e16c:	81 ec 38 01 00 00    	sub    esp,0x138
c000e172:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e179:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e180:	68 14 01 00 00       	push   0x114
c000e185:	e8 f6 14 00 00       	call   c000f680 <malloc>
c000e18a:	83 c4 0c             	add    esp,0xc
c000e18d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e190:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e197:	89 c3                	mov    ebx,eax
c000e199:	50                   	push   eax
c000e19a:	e8 e9 9f ff ff       	call   c0008188 <File::File(char const*, Process*)>
c000e19f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1a2:	e8 c3 a2 ff ff       	call   c000846a <File::exists()>
c000e1a7:	83 c4 10             	add    esp,0x10
c000e1aa:	84 c0                	test   al,al
c000e1ac:	75 31                	jne    c000e1df <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e1ae:	50                   	push   eax
c000e1af:	50                   	push   eax
c000e1b0:	6a 12                	push   0x12
c000e1b2:	53                   	push   ebx
c000e1b3:	e8 ee 9f ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e1b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1ba:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e1bd:	89 34 24             	mov    DWORD PTR [esp],esi
c000e1c0:	e8 bb 23 ff ff       	call   c0000580 <strlen>
c000e1c5:	5a                   	pop    edx
c000e1c6:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e1ca:	52                   	push   edx
c000e1cb:	31 d2                	xor    edx,edx
c000e1cd:	56                   	push   esi
c000e1ce:	52                   	push   edx
c000e1cf:	50                   	push   eax
c000e1d0:	53                   	push   ebx
c000e1d1:	ff d7                	call   edi
c000e1d3:	83 c4 14             	add    esp,0x14
c000e1d6:	53                   	push   ebx
c000e1d7:	e8 28 a0 ff ff       	call   c0008204 <File::close()>
c000e1dc:	83 c4 10             	add    esp,0x10
c000e1df:	56                   	push   esi
c000e1e0:	31 f6                	xor    esi,esi
c000e1e2:	68 00 01 00 00       	push   0x100
c000e1e7:	6a 00                	push   0x0
c000e1e9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e1ed:	50                   	push   eax
c000e1ee:	e8 fd 22 ff ff       	call   c00004f0 <memset>
c000e1f3:	5f                   	pop    edi
c000e1f4:	58                   	pop    eax
c000e1f5:	6a 01                	push   0x1
c000e1f7:	53                   	push   ebx
c000e1f8:	e8 a9 9f ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c000e1fd:	83 c4 10             	add    esp,0x10
c000e200:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e208:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e210:	83 ec 0c             	sub    esp,0xc
c000e213:	8d 54 24 20          	lea    edx,[esp+0x20]
c000e217:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e219:	52                   	push   edx
c000e21a:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000e21e:	51                   	push   ecx
c000e21f:	6a 00                	push   0x0
c000e221:	6a 01                	push   0x1
c000e223:	53                   	push   ebx
c000e224:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e227:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e22c:	83 c4 20             	add    esp,0x20
c000e22f:	85 c0                	test   eax,eax
c000e231:	89 c1                	mov    ecx,eax
c000e233:	0f 84 36 01 00 00    	je     c000e36f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e239:	83 f8 0d             	cmp    eax,0xd
c000e23c:	0f 84 22 01 00 00    	je     c000e364 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e242:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e247:	0f 84 f0 00 00 00    	je     c000e33d <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e24d:	83 f8 0a             	cmp    eax,0xa
c000e250:	74 13                	je     c000e265 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e252:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e257:	74 0c                	je     c000e265 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e259:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e25f:	0f 8e f6 00 00 00    	jle    c000e35b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e269:	83 ec 0c             	sub    esp,0xc
c000e26c:	8d 78 01             	lea    edi,[eax+0x1]
c000e26f:	57                   	push   edi
c000e270:	e8 0b 14 00 00       	call   c000f680 <malloc>
c000e275:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e279:	8d 56 04             	lea    edx,[esi+0x4]
c000e27c:	89 14 24             	mov    DWORD PTR [esp],edx
c000e27f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e283:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e287:	e8 f4 13 00 00       	call   c000f680 <malloc>
c000e28c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e290:	83 c4 0c             	add    esp,0xc
c000e293:	57                   	push   edi
c000e294:	6a 00                	push   0x0
c000e296:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e29a:	e8 51 22 ff ff       	call   c00004f0 <memset>
c000e29f:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e2a3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e2a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e2ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e2ad:	83 c4 0c             	add    esp,0xc
c000e2b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e2b4:	52                   	push   edx
c000e2b5:	6a 00                	push   0x0
c000e2b7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2bb:	e8 30 22 ff ff       	call   c00004f0 <memset>
c000e2c0:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e2c4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e2c8:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2cb:	e8 b0 22 ff ff       	call   c0000580 <strlen>
c000e2d0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e2d4:	89 c1                	mov    ecx,eax
c000e2d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e2d8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e2e1:	40                   	inc    eax
c000e2e2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e2e5:	85 d2                	test   edx,edx
c000e2e7:	75 0c                	jne    c000e2f5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e2e9:	83 ec 0c             	sub    esp,0xc
c000e2ec:	6a 08                	push   0x8
c000e2ee:	e8 8d 13 00 00       	call   c000f680 <malloc>
c000e2f3:	eb 0c                	jmp    c000e301 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e2f5:	51                   	push   ecx
c000e2f6:	51                   	push   ecx
c000e2f7:	c1 e0 03             	shl    eax,0x3
c000e2fa:	50                   	push   eax
c000e2fb:	52                   	push   edx
c000e2fc:	e8 6b 13 00 00       	call   c000f66c <realloc>
c000e301:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e304:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e307:	83 c4 10             	add    esp,0x10
c000e30a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e30d:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e311:	b9 08 00 00 00       	mov    ecx,0x8
c000e316:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e31a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e31c:	50                   	push   eax
c000e31d:	31 f6                	xor    esi,esi
c000e31f:	68 00 01 00 00       	push   0x100
c000e324:	6a 00                	push   0x0
c000e326:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e32a:	50                   	push   eax
c000e32b:	e8 c0 21 ff ff       	call   c00004f0 <memset>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e33b:	eb 27                	jmp    c000e364 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e33d:	83 f8 3d             	cmp    eax,0x3d
c000e340:	74 1e                	je     c000e360 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e342:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e348:	7f 07                	jg     c000e351 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e34a:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000e34e:	46                   	inc    esi
c000e34f:	eb 13                	jmp    c000e364 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e351:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e359:	eb 09                	jmp    c000e364 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e35b:	83 f8 3d             	cmp    eax,0x3d
c000e35e:	75 ea                	jne    c000e34a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e360:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e364:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e369:	0f 85 99 fe ff ff    	jne    c000e208 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e36f:	83 ec 0c             	sub    esp,0xc
c000e372:	53                   	push   ebx
c000e373:	e8 8c 9e ff ff       	call   c0008204 <File::close()>
c000e378:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e37a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e37d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e380:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e386:	5b                   	pop    ebx
c000e387:	5e                   	pop    esi
c000e388:	5f                   	pop    edi
c000e389:	5d                   	pop    ebp
c000e38a:	c3                   	ret    
c000e38b:	90                   	nop

c000e38c <EnvVarContainer::__loadSystem()>:
c000e38c:	83 ec 10             	sub    esp,0x10
c000e38f:	68 80 b1 02 c0       	push   0xc002b180
c000e394:	68 a8 7a 02 c0       	push   0xc0027aa8
c000e399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39d:	e8 c6 fd ff ff       	call   c000e168 <EnvVarContainer::loadFrom(char const*, char const*)>
c000e3a2:	83 c4 1c             	add    esp,0x1c
c000e3a5:	c3                   	ret    

c000e3a6 <EnvVarContainer::__loadUser()>:
c000e3a6:	c3                   	ret    
c000e3a7:	90                   	nop

c000e3a8 <EnvVarContainer::EnvVarContainer(Process*)>:
c000e3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e3b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3ba:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e3bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3c8:	90                   	nop
c000e3c9:	c3                   	ret    

c000e3ca <EnvVarContainer::~EnvVarContainer()>:
c000e3ca:	83 ec 0c             	sub    esp,0xc
c000e3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3d4:	85 c0                	test   eax,eax
c000e3d6:	74 1d                	je     c000e3f5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3de:	85 c0                	test   eax,eax
c000e3e0:	74 13                	je     c000e3f5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e3e9:	83 ec 0c             	sub    esp,0xc
c000e3ec:	50                   	push   eax
c000e3ed:	e8 9e 12 00 00       	call   c000f690 <free>
c000e3f2:	83 c4 10             	add    esp,0x10
c000e3f5:	90                   	nop
c000e3f6:	83 c4 0c             	add    esp,0xc
c000e3f9:	c3                   	ret    

c000e3fa <KeGetEnv(Process*, char const*)>:
c000e3fa:	53                   	push   ebx
c000e3fb:	83 ec 08             	sub    esp,0x8
c000e3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e402:	39 05 58 13 03 c0    	cmp    DWORD PTR ds:0xc0031358,eax
c000e408:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e40c:	74 04                	je     c000e412 <KeGetEnv(Process*, char const*)+0x18>
c000e40e:	85 c0                	test   eax,eax
c000e410:	75 0b                	jne    c000e41d <KeGetEnv(Process*, char const*)+0x23>
c000e412:	a1 10 11 03 c0       	mov    eax,ds:0xc0031110
c000e417:	85 c0                	test   eax,eax
c000e419:	75 19                	jne    c000e434 <KeGetEnv(Process*, char const*)+0x3a>
c000e41b:	eb 27                	jmp    c000e444 <KeGetEnv(Process*, char const*)+0x4a>
c000e41d:	52                   	push   edx
c000e41e:	52                   	push   edx
c000e41f:	53                   	push   ebx
c000e420:	ff b0 ba 07 00 00    	push   DWORD PTR [eax+0x7ba]
c000e426:	e8 3b fc ff ff       	call   c000e066 <EnvVarContainer::getEnv(char const*)>
c000e42b:	83 c4 10             	add    esp,0x10
c000e42e:	85 c0                	test   eax,eax
c000e430:	75 28                	jne    c000e45a <KeGetEnv(Process*, char const*)+0x60>
c000e432:	eb de                	jmp    c000e412 <KeGetEnv(Process*, char const*)+0x18>
c000e434:	52                   	push   edx
c000e435:	52                   	push   edx
c000e436:	53                   	push   ebx
c000e437:	50                   	push   eax
c000e438:	e8 29 fc ff ff       	call   c000e066 <EnvVarContainer::getEnv(char const*)>
c000e43d:	83 c4 10             	add    esp,0x10
c000e440:	85 c0                	test   eax,eax
c000e442:	75 16                	jne    c000e45a <KeGetEnv(Process*, char const*)+0x60>
c000e444:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e448:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c000e44d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e451:	83 c4 08             	add    esp,0x8
c000e454:	5b                   	pop    ebx
c000e455:	e9 0c fc ff ff       	jmp    c000e066 <EnvVarContainer::getEnv(char const*)>
c000e45a:	83 c4 08             	add    esp,0x8
c000e45d:	5b                   	pop    ebx
c000e45e:	c3                   	ret    

c000e45f <KeSetEnvSystem(char const*, char const*)>:
c000e45f:	83 ec 10             	sub    esp,0x10
c000e462:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e466:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e46a:	ff 35 14 11 03 c0    	push   DWORD PTR ds:0xc0031114
c000e470:	e8 2f fc ff ff       	call   c000e0a4 <EnvVarContainer::setEnv(char const*, char const*)>
c000e475:	83 c4 1c             	add    esp,0x1c
c000e478:	c3                   	ret    

c000e479 <KeSetEnvUser(char const*, char const*)>:
c000e479:	a1 10 11 03 c0       	mov    eax,ds:0xc0031110
c000e47e:	85 c0                	test   eax,eax
c000e480:	74 15                	je     c000e497 <KeSetEnvUser(char const*, char const*)+0x1e>
c000e482:	83 ec 10             	sub    esp,0x10
c000e485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e489:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e48d:	50                   	push   eax
c000e48e:	e8 11 fc ff ff       	call   c000e0a4 <EnvVarContainer::setEnv(char const*, char const*)>
c000e493:	83 c4 1c             	add    esp,0x1c
c000e496:	c3                   	ret    
c000e497:	c3                   	ret    

c000e498 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e49c:	8b 80 ba 07 00 00    	mov    eax,DWORD PTR [eax+0x7ba]
c000e4a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4a6:	e9 f9 fb ff ff       	jmp    c000e0a4 <EnvVarContainer::setEnv(char const*, char const*)>

c000e4ab <KeDeleteEnvSystem(char const*)>:
c000e4ab:	c3                   	ret    

c000e4ac <KeDeleteEnvUser(char const*)>:
c000e4ac:	c3                   	ret    

c000e4ad <KeDeleteEnvProcess(Process*, char const*)>:
c000e4ad:	c3                   	ret    

c000e4ae <KeNewProcessEnv(Process*)>:
c000e4ae:	83 ec 28             	sub    esp,0x28
c000e4b1:	6a 0c                	push   0xc
c000e4b3:	e8 c8 11 00 00       	call   c000f680 <malloc>
c000e4b8:	5a                   	pop    edx
c000e4b9:	59                   	pop    ecx
c000e4ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e4be:	50                   	push   eax
c000e4bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4c3:	e8 e0 fe ff ff       	call   c000e3a8 <EnvVarContainer::EnvVarContainer(Process*)>
c000e4c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e4cc:	83 c4 2c             	add    esp,0x2c
c000e4cf:	c3                   	ret    

c000e4d0 <KeCopyProcessEnv(Process*, Process*)>:
c000e4d0:	57                   	push   edi
c000e4d1:	56                   	push   esi
c000e4d2:	53                   	push   ebx
c000e4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4d7:	83 ec 0c             	sub    esp,0xc
c000e4da:	8b b8 ba 07 00 00    	mov    edi,DWORD PTR [eax+0x7ba]
c000e4e0:	6a 0c                	push   0xc
c000e4e2:	e8 99 11 00 00       	call   c000f680 <malloc>
c000e4e7:	89 c3                	mov    ebx,eax
c000e4e9:	58                   	pop    eax
c000e4ea:	5a                   	pop    edx
c000e4eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4ef:	53                   	push   ebx
c000e4f0:	e8 b3 fe ff ff       	call   c000e3a8 <EnvVarContainer::EnvVarContainer(Process*)>
c000e4f5:	8b 07                	mov    eax,DWORD PTR [edi]
c000e4f7:	89 03                	mov    DWORD PTR [ebx],eax
c000e4f9:	c1 e0 03             	shl    eax,0x3
c000e4fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4ff:	e8 7c 11 00 00       	call   c000f680 <malloc>
c000e504:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e507:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e509:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e50c:	89 c7                	mov    edi,eax
c000e50e:	c1 e1 03             	shl    ecx,0x3
c000e511:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e513:	83 c4 10             	add    esp,0x10
c000e516:	89 d8                	mov    eax,ebx
c000e518:	5b                   	pop    ebx
c000e519:	5e                   	pop    esi
c000e51a:	5f                   	pop    edi
c000e51b:	c3                   	ret    

c000e51c <KeLoadSystemEnv()>:
c000e51c:	53                   	push   ebx
c000e51d:	83 ec 14             	sub    esp,0x14
c000e520:	6a 0c                	push   0xc
c000e522:	e8 59 11 00 00       	call   c000f680 <malloc>
c000e527:	89 c3                	mov    ebx,eax
c000e529:	58                   	pop    eax
c000e52a:	5a                   	pop    edx
c000e52b:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000e531:	53                   	push   ebx
c000e532:	e8 71 fe ff ff       	call   c000e3a8 <EnvVarContainer::EnvVarContainer(Process*)>
c000e537:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e53a:	89 1d 14 11 03 c0    	mov    DWORD PTR ds:0xc0031114,ebx
c000e540:	e8 47 fe ff ff       	call   c000e38c <EnvVarContainer::__loadSystem()>
c000e545:	83 c4 18             	add    esp,0x18
c000e548:	5b                   	pop    ebx
c000e549:	c3                   	ret    

c000e54a <KeLoadUserEnv()>:
c000e54a:	53                   	push   ebx
c000e54b:	83 ec 14             	sub    esp,0x14
c000e54e:	6a 0c                	push   0xc
c000e550:	e8 2b 11 00 00       	call   c000f680 <malloc>
c000e555:	89 c3                	mov    ebx,eax
c000e557:	58                   	pop    eax
c000e558:	5a                   	pop    edx
c000e559:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c000e55f:	53                   	push   ebx
c000e560:	e8 43 fe ff ff       	call   c000e3a8 <EnvVarContainer::EnvVarContainer(Process*)>
c000e565:	89 1d 10 11 03 c0    	mov    DWORD PTR ds:0xc0031110,ebx
c000e56b:	83 c4 18             	add    esp,0x18
c000e56e:	5b                   	pop    ebx
c000e56f:	c3                   	ret    

c000e570 <KeFlushEnv()>:
c000e570:	c3                   	ret    

c000e571 <KeGetProcessTotalEnvCount(Process*)>:
c000e571:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e575:	8b 15 10 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031110
c000e57b:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e581:	a1 14 11 03 c0       	mov    eax,ds:0xc0031114
c000e586:	8b 00                	mov    eax,DWORD PTR [eax]
c000e588:	03 01                	add    eax,DWORD PTR [ecx]
c000e58a:	85 d2                	test   edx,edx
c000e58c:	74 02                	je     c000e590 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e58e:	03 02                	add    eax,DWORD PTR [edx]
c000e590:	c3                   	ret    

c000e591 <KeGetProcessEnvPair(Process*, int)>:
c000e591:	57                   	push   edi
c000e592:	56                   	push   esi
c000e593:	8b 35 10 11 03 c0    	mov    esi,DWORD PTR ds:0xc0031110
c000e599:	53                   	push   ebx
c000e59a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e59e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5a2:	85 f6                	test   esi,esi
c000e5a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e5a8:	8b 88 ba 07 00 00    	mov    ecx,DWORD PTR [eax+0x7ba]
c000e5ae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e5b0:	75 16                	jne    c000e5c8 <KeGetProcessEnvPair(Process*, int)+0x37>
c000e5b2:	39 c2                	cmp    edx,eax
c000e5b4:	7c 16                	jl     c000e5cc <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e5b6:	8b 0d 14 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031114
c000e5bc:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e5be:	01 c6                	add    esi,eax
c000e5c0:	39 d6                	cmp    esi,edx
c000e5c2:	7e 3c                	jle    c000e600 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e5c4:	29 c2                	sub    edx,eax
c000e5c6:	eb 04                	jmp    c000e5cc <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e5c8:	39 c2                	cmp    edx,eax
c000e5ca:	7d 05                	jge    c000e5d1 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e5cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e5cf:	eb 20                	jmp    c000e5f1 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e5d1:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e5d3:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e5d6:	39 d1                	cmp    ecx,edx
c000e5d8:	7e 04                	jle    c000e5de <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e5da:	29 c2                	sub    edx,eax
c000e5dc:	eb 10                	jmp    c000e5ee <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e5de:	8b 35 14 11 03 c0    	mov    esi,DWORD PTR ds:0xc0031114
c000e5e4:	03 0e                	add    ecx,DWORD PTR [esi]
c000e5e6:	39 d1                	cmp    ecx,edx
c000e5e8:	7e 16                	jle    c000e600 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e5ea:	29 c2                	sub    edx,eax
c000e5ec:	29 fa                	sub    edx,edi
c000e5ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e5f1:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e5f4:	8b 02                	mov    eax,DWORD PTR [edx]
c000e5f6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e5f9:	89 03                	mov    DWORD PTR [ebx],eax
c000e5fb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e5fe:	eb 1d                	jmp    c000e61d <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e600:	83 ec 0c             	sub    esp,0xc
c000e603:	68 ca 7a 02 c0       	push   0xc0027aca
c000e608:	e8 c7 14 00 00       	call   c000fad4 <KePanic(char const*)>
c000e60d:	83 c4 10             	add    esp,0x10
c000e610:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e616:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e61d:	89 d8                	mov    eax,ebx
c000e61f:	5b                   	pop    ebx
c000e620:	5e                   	pop    esi
c000e621:	5f                   	pop    edi
c000e622:	c2 04 00             	ret    0x4
c000e625:	66 90                	xchg   ax,ax
c000e627:	90                   	nop

c000e628 <KeDisplayProgramFault(char const*)>:
c000e628:	83 ec 0c             	sub    esp,0xc
c000e62b:	83 ec 0c             	sub    esp,0xc
c000e62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e632:	e8 2f 89 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000e637:	83 c4 10             	add    esp,0x10
c000e63a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e63f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e641:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e644:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e64a:	85 c0                	test   eax,eax
c000e64c:	74 22                	je     c000e670 <KeDisplayProgramFault(char const*)+0x48>
c000e64e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e653:	8b 00                	mov    eax,DWORD PTR [eax]
c000e655:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e658:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c000e65e:	6a 04                	push   0x4
c000e660:	6a 0f                	push   0xf
c000e662:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e666:	50                   	push   eax
c000e667:	e8 16 3e 00 00       	call   c0012482 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e66c:	83 c4 10             	add    esp,0x10
c000e66f:	90                   	nop
c000e670:	90                   	nop
c000e671:	83 c4 0c             	add    esp,0xc
c000e674:	c3                   	ret    
c000e675:	8d 76 00             	lea    esi,[esi+0x0]

c000e678 <KeGeneralProtectionFault(void*, void*)>:
c000e678:	83 ec 0c             	sub    esp,0xc
c000e67b:	83 ec 08             	sub    esp,0x8
c000e67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e686:	e8 29 b8 00 00       	call   c0019eb4 <HalHandleGeneralProtectionFault(void*, void*)>
c000e68b:	83 c4 10             	add    esp,0x10
c000e68e:	0f b6 c0             	movzx  eax,al
c000e691:	85 c0                	test   eax,eax
c000e693:	75 2f                	jne    c000e6c4 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e695:	83 ec 0c             	sub    esp,0xc
c000e698:	68 e4 7a 02 c0       	push   0xc0027ae4
c000e69d:	e8 86 ff ff ff       	call   c000e628 <KeDisplayProgramFault(char const*)>
c000e6a2:	83 c4 10             	add    esp,0x10
c000e6a5:	83 ec 0c             	sub    esp,0xc
c000e6a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6ac:	e8 7c b9 00 00       	call   c001a02d <HalDisplayDebugInfo(void*)>
c000e6b1:	83 c4 10             	add    esp,0x10
c000e6b4:	83 ec 0c             	sub    esp,0xc
c000e6b7:	6a 7e                	push   0x7e
c000e6b9:	e8 82 87 00 00       	call   c0016e40 <KeTerminateCurrentThread(int)>
c000e6be:	83 c4 10             	add    esp,0x10
c000e6c1:	eb 05                	jmp    c000e6c8 <KeGeneralProtectionFault(void*, void*)+0x50>
c000e6c3:	90                   	nop
c000e6c4:	90                   	nop
c000e6c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e6c8:	83 c4 0c             	add    esp,0xc
c000e6cb:	c3                   	ret    

c000e6cc <KePageFault(void*, void*)>:
c000e6cc:	83 ec 0c             	sub    esp,0xc
c000e6cf:	83 ec 08             	sub    esp,0x8
c000e6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6da:	e8 dd b8 00 00       	call   c0019fbc <HalHandlePageFault(void*, void*)>
c000e6df:	83 c4 10             	add    esp,0x10
c000e6e2:	0f b6 c0             	movzx  eax,al
c000e6e5:	85 c0                	test   eax,eax
c000e6e7:	75 2f                	jne    c000e718 <KePageFault(void*, void*)+0x4c>
c000e6e9:	83 ec 0c             	sub    esp,0xc
c000e6ec:	68 fd 7a 02 c0       	push   0xc0027afd
c000e6f1:	e8 32 ff ff ff       	call   c000e628 <KeDisplayProgramFault(char const*)>
c000e6f6:	83 c4 10             	add    esp,0x10
c000e6f9:	83 ec 0c             	sub    esp,0xc
c000e6fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e700:	e8 28 b9 00 00       	call   c001a02d <HalDisplayDebugInfo(void*)>
c000e705:	83 c4 10             	add    esp,0x10
c000e708:	83 ec 0c             	sub    esp,0xc
c000e70b:	6a 7f                	push   0x7f
c000e70d:	e8 2e 87 00 00       	call   c0016e40 <KeTerminateCurrentThread(int)>
c000e712:	83 c4 10             	add    esp,0x10
c000e715:	eb 05                	jmp    c000e71c <KePageFault(void*, void*)+0x50>
c000e717:	90                   	nop
c000e718:	90                   	nop
c000e719:	8d 76 00             	lea    esi,[esi+0x0]
c000e71c:	83 c4 0c             	add    esp,0xc
c000e71f:	c3                   	ret    

c000e720 <KeOpcodeFault(void*, void*)>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	83 ec 08             	sub    esp,0x8
c000e726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e72e:	e8 b8 b8 00 00       	call   c0019feb <HalHandleOpcodeFault(void*, void*)>
c000e733:	83 c4 10             	add    esp,0x10
c000e736:	0f b6 c0             	movzx  eax,al
c000e739:	85 c0                	test   eax,eax
c000e73b:	75 2f                	jne    c000e76c <KeOpcodeFault(void*, void*)+0x4c>
c000e73d:	83 ec 0c             	sub    esp,0xc
c000e740:	68 08 7b 02 c0       	push   0xc0027b08
c000e745:	e8 de fe ff ff       	call   c000e628 <KeDisplayProgramFault(char const*)>
c000e74a:	83 c4 10             	add    esp,0x10
c000e74d:	83 ec 0c             	sub    esp,0xc
c000e750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e754:	e8 d4 b8 00 00       	call   c001a02d <HalDisplayDebugInfo(void*)>
c000e759:	83 c4 10             	add    esp,0x10
c000e75c:	83 ec 0c             	sub    esp,0xc
c000e75f:	6a 7c                	push   0x7c
c000e761:	e8 da 86 00 00       	call   c0016e40 <KeTerminateCurrentThread(int)>
c000e766:	83 c4 10             	add    esp,0x10
c000e769:	eb 05                	jmp    c000e770 <KeOpcodeFault(void*, void*)+0x50>
c000e76b:	90                   	nop
c000e76c:	90                   	nop
c000e76d:	8d 76 00             	lea    esi,[esi+0x0]
c000e770:	83 c4 0c             	add    esp,0xc
c000e773:	c3                   	ret    

c000e774 <KeOtherFault(void*, void*)>:
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	83 ec 0c             	sub    esp,0xc
c000e77a:	68 24 7b 02 c0       	push   0xc0027b24
c000e77f:	e8 a4 fe ff ff       	call   c000e628 <KeDisplayProgramFault(char const*)>
c000e784:	83 c4 10             	add    esp,0x10
c000e787:	83 ec 0c             	sub    esp,0xc
c000e78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78e:	e8 9a b8 00 00       	call   c001a02d <HalDisplayDebugInfo(void*)>
c000e793:	83 c4 10             	add    esp,0x10
c000e796:	83 ec 0c             	sub    esp,0xc
c000e799:	6a 7d                	push   0x7d
c000e79b:	e8 a0 86 00 00       	call   c0016e40 <KeTerminateCurrentThread(int)>
c000e7a0:	83 c4 10             	add    esp,0x10
c000e7a3:	90                   	nop
c000e7a4:	83 c4 0c             	add    esp,0xc
c000e7a7:	c3                   	ret    

c000e7a8 <KeNonMaskableInterrupt(void*, void*)>:
c000e7a8:	83 ec 0c             	sub    esp,0xc
c000e7ab:	e8 0b bc 00 00       	call   c001a3bb <HalReceivedNMI()>
c000e7b0:	90                   	nop
c000e7b1:	83 c4 0c             	add    esp,0xc
c000e7b4:	c3                   	ret    
c000e7b5:	8d 76 00             	lea    esi,[esi+0x0]

c000e7b8 <KeDoubleFault(void*, void*)>:
c000e7b8:	83 ec 0c             	sub    esp,0xc
c000e7bb:	83 ec 0c             	sub    esp,0xc
c000e7be:	68 15 7b 02 c0       	push   0xc0027b15
c000e7c3:	e8 0c 13 00 00       	call   c000fad4 <KePanic(char const*)>
c000e7c8:	83 c4 10             	add    esp,0x10
c000e7cb:	90                   	nop
c000e7cc:	83 c4 0c             	add    esp,0xc
c000e7cf:	c3                   	ret    

c000e7d0 <GDTEntry::setBase(unsigned int)>:
c000e7d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e7d8:	89 c1                	mov    ecx,eax
c000e7da:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e7de:	c1 e9 10             	shr    ecx,0x10
c000e7e1:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e7e4:	c1 e8 18             	shr    eax,0x18
c000e7e7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e7ea:	c3                   	ret    
c000e7eb:	90                   	nop

c000e7ec <GDTEntry::setLimit(unsigned int)>:
c000e7ec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e7f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e7f4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e7f7:	66 89 01             	mov    WORD PTR [ecx],ax
c000e7fa:	c1 e8 10             	shr    eax,0x10
c000e7fd:	83 e0 0f             	and    eax,0xf
c000e800:	83 e2 f0             	and    edx,0xfffffff0
c000e803:	09 d0                	or     eax,edx
c000e805:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e808:	c3                   	ret    
c000e809:	90                   	nop

c000e80a <GDT::GDT()>:
c000e80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e80e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e818:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e81e:	90                   	nop
c000e81f:	c3                   	ret    

c000e820 <GDT::addEntry(GDTEntry)>:
c000e820:	53                   	push   ebx
c000e821:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e825:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e829:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e82d:	8b 02                	mov    eax,DWORD PTR [edx]
c000e82f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e833:	8d 48 01             	lea    ecx,[eax+0x1]
c000e836:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e83a:	c1 e0 03             	shl    eax,0x3
c000e83d:	89 0a                	mov    DWORD PTR [edx],ecx
c000e83f:	5b                   	pop    ebx
c000e840:	c3                   	ret    
c000e841:	90                   	nop

c000e842 <GDT::getNumberOfEntries()>:
c000e842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e846:	8b 00                	mov    eax,DWORD PTR [eax]
c000e848:	c3                   	ret    
c000e849:	90                   	nop

c000e84a <GDT::flush()>:
c000e84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e84e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e850:	83 c0 04             	add    eax,0x4
c000e853:	a3 1a 11 03 c0       	mov    ds:0xc003111a,eax
c000e858:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e85f:	66 89 15 18 11 03 c0 	mov    WORD PTR ds:0xc0031118,dx
c000e866:	e9 ef 1a ff ff       	jmp    c000035a <loadGDT>
c000e86b:	90                   	nop

c000e86c <GDT::setup()>:
c000e86c:	57                   	push   edi
c000e86d:	56                   	push   esi
c000e86e:	53                   	push   ebx
c000e86f:	83 ec 30             	sub    esp,0x30
c000e872:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e876:	6a 00                	push   0x0
c000e878:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e87c:	56                   	push   esi
c000e87d:	e8 4e ff ff ff       	call   c000e7d0 <GDTEntry::setBase(unsigned int)>
c000e882:	6a 00                	push   0x0
c000e884:	56                   	push   esi
c000e885:	e8 62 ff ff ff       	call   c000e7ec <GDTEntry::setLimit(unsigned int)>
c000e88a:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e892:	6a 00                	push   0x0
c000e894:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e898:	56                   	push   esi
c000e899:	e8 32 ff ff ff       	call   c000e7d0 <GDTEntry::setBase(unsigned int)>
c000e89e:	68 ff ff ff 00       	push   0xffffff
c000e8a3:	56                   	push   esi
c000e8a4:	e8 43 ff ff ff       	call   c000e7ec <GDTEntry::setLimit(unsigned int)>
c000e8a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8ad:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8b1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e8b6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e8ba:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e8bf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e8c3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e8c7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e8cb:	89 f8                	mov    eax,edi
c000e8cd:	89 fa                	mov    edx,edi
c000e8cf:	80 e4 f7             	and    ah,0xf7
c000e8d2:	80 ce 60             	or     dh,0x60
c000e8d5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e8d9:	89 c7                	mov    edi,eax
c000e8db:	80 cc 60             	or     ah,0x60
c000e8de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e8e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e8ea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e8ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e8f2:	83 c4 20             	add    esp,0x20
c000e8f5:	6a 00                	push   0x0
c000e8f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e8fb:	50                   	push   eax
c000e8fc:	e8 cf fe ff ff       	call   c000e7d0 <GDTEntry::setBase(unsigned int)>
c000e901:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e905:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e909:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e90d:	83 e0 3f             	and    eax,0x3f
c000e910:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e914:	6a 00                	push   0x0
c000e916:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e91a:	50                   	push   eax
c000e91b:	e8 b0 fe ff ff       	call   c000e7d0 <GDTEntry::setBase(unsigned int)>
c000e920:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e924:	83 e0 3f             	and    eax,0x3f
c000e927:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e92b:	83 c4 0c             	add    esp,0xc
c000e92e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e932:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e936:	53                   	push   ebx
c000e937:	e8 e4 fe ff ff       	call   c000e820 <GDT::addEntry(GDTEntry)>
c000e93c:	83 c4 0c             	add    esp,0xc
c000e93f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e943:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e947:	53                   	push   ebx
c000e948:	e8 d3 fe ff ff       	call   c000e820 <GDT::addEntry(GDTEntry)>
c000e94d:	83 c4 0c             	add    esp,0xc
c000e950:	57                   	push   edi
c000e951:	56                   	push   esi
c000e952:	53                   	push   ebx
c000e953:	e8 c8 fe ff ff       	call   c000e820 <GDT::addEntry(GDTEntry)>
c000e958:	83 c4 0c             	add    esp,0xc
c000e95b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e95f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e963:	53                   	push   ebx
c000e964:	e8 b7 fe ff ff       	call   c000e820 <GDT::addEntry(GDTEntry)>
c000e969:	83 c4 0c             	add    esp,0xc
c000e96c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e970:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e974:	53                   	push   ebx
c000e975:	e8 a6 fe ff ff       	call   c000e820 <GDT::addEntry(GDTEntry)>
c000e97a:	83 c4 0c             	add    esp,0xc
c000e97d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e981:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e985:	53                   	push   ebx
c000e986:	e8 95 fe ff ff       	call   c000e820 <GDT::addEntry(GDTEntry)>
c000e98b:	83 c4 0c             	add    esp,0xc
c000e98e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e992:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e996:	53                   	push   ebx
c000e997:	e8 84 fe ff ff       	call   c000e820 <GDT::addEntry(GDTEntry)>
c000e99c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e99f:	e8 a6 fe ff ff       	call   c000e84a <GDT::flush()>
c000e9a4:	83 c4 40             	add    esp,0x40
c000e9a7:	5b                   	pop    ebx
c000e9a8:	5e                   	pop    esi
c000e9a9:	5f                   	pop    edi
c000e9aa:	c3                   	ret    

c000e9ab <idleFunction(void*)>:
c000e9ab:	83 ec 0c             	sub    esp,0xc
c000e9ae:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c000e9b5:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000e9bc:	75 01                	jne    c000e9bf <idleFunction(void*)+0x14>
c000e9be:	fb                   	sti    
c000e9bf:	e8 92 ba 00 00       	call   c001a456 <HalSystemIdle()>
c000e9c4:	e8 a5 72 01 00       	call   c0025c6e <idleCommon()>
c000e9c9:	eb f4                	jmp    c000e9bf <idleFunction(void*)+0x14>
c000e9cb:	90                   	nop

c000e9cc <IDTEntry::IDTEntry(bool)>:
c000e9cc:	53                   	push   ebx
c000e9cd:	83 ec 04             	sub    esp,0x4
c000e9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9d4:	88 04 24             	mov    BYTE PTR [esp],al
c000e9d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9db:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e9e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e9e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9ed:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e9f0:	83 e2 f0             	and    edx,0xfffffff0
c000e9f3:	83 ca 0e             	or     edx,0xe
c000e9f6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e9f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9fd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea00:	83 e2 ef             	and    edx,0xffffffef
c000ea03:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea06:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ea0a:	85 c0                	test   eax,eax
c000ea0c:	74 06                	je     c000ea14 <IDTEntry::IDTEntry(bool)+0x48>
c000ea0e:	b2 03                	mov    dl,0x3
c000ea10:	eb 06                	jmp    c000ea18 <IDTEntry::IDTEntry(bool)+0x4c>
c000ea12:	66 90                	xchg   ax,ax
c000ea14:	b2 00                	mov    dl,0x0
c000ea16:	66 90                	xchg   ax,ax
c000ea18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea1c:	83 e2 03             	and    edx,0x3
c000ea1f:	89 d3                	mov    ebx,edx
c000ea21:	c1 e3 05             	shl    ebx,0x5
c000ea24:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea27:	83 e2 9f             	and    edx,0xffffff9f
c000ea2a:	88 d1                	mov    cl,dl
c000ea2c:	88 da                	mov    dl,bl
c000ea2e:	09 ca                	or     edx,ecx
c000ea30:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea37:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ea3a:	83 ca 80             	or     edx,0xffffff80
c000ea3d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ea40:	90                   	nop
c000ea41:	83 c4 04             	add    esp,0x4
c000ea44:	5b                   	pop    ebx
c000ea45:	c3                   	ret    

c000ea46 <IDTEntry::setOffset(unsigned int)>:
c000ea46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ea4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea4e:	66 89 02             	mov    WORD PTR [edx],ax
c000ea51:	c1 e8 10             	shr    eax,0x10
c000ea54:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ea58:	c3                   	ret    
c000ea59:	90                   	nop
c000ea5a:	66 90                	xchg   ax,ax

c000ea5c <IDT::IDT()>:
c000ea5c:	90                   	nop
c000ea5d:	c3                   	ret    

c000ea5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ea5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ea62:	83 c0 30             	add    eax,0x30
c000ea65:	c3                   	ret    

c000ea66 <IDT::addEntry(IDTEntry, int)>:
c000ea66:	53                   	push   ebx
c000ea67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ea6f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ea77:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ea7a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ea7e:	5b                   	pop    ebx
c000ea7f:	c3                   	ret    

c000ea80 <IDT::addEntry(int, void (*)(), bool)>:
c000ea80:	53                   	push   ebx
c000ea81:	83 ec 10             	sub    esp,0x10
c000ea84:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ea89:	50                   	push   eax
c000ea8a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ea8e:	53                   	push   ebx
c000ea8f:	e8 38 ff ff ff       	call   c000e9cc <IDTEntry::IDTEntry(bool)>
c000ea94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea98:	53                   	push   ebx
c000ea99:	e8 a8 ff ff ff       	call   c000ea46 <IDTEntry::setOffset(unsigned int)>
c000ea9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eaa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eaa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eaaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000eaae:	e8 b3 ff ff ff       	call   c000ea66 <IDT::addEntry(IDTEntry, int)>
c000eab3:	83 c4 30             	add    esp,0x30
c000eab6:	5b                   	pop    ebx
c000eab7:	c3                   	ret    

c000eab8 <IDT::flush()>:
c000eab8:	66 c7 05 20 11 03 c0 ff 07 	mov    WORD PTR ds:0xc0031120,0x7ff
c000eac1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eac5:	a3 22 11 03 c0       	mov    ds:0xc0031122,eax
c000eaca:	0f 01 1d 20 11 03 c0 	lidtd  ds:0xc0031120
c000ead1:	c3                   	ret    

c000ead2 <IDT::setup()>:
c000ead2:	57                   	push   edi
c000ead3:	56                   	push   esi
c000ead4:	53                   	push   ebx
c000ead5:	83 ec 10             	sub    esp,0x10
c000ead8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000eadc:	6a 00                	push   0x0
c000eade:	68 70 16 02 c0       	push   0xc0021670
c000eae3:	6a 00                	push   0x0
c000eae5:	53                   	push   ebx
c000eae6:	e8 95 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eaeb:	6a 00                	push   0x0
c000eaed:	68 80 16 02 c0       	push   0xc0021680
c000eaf2:	6a 01                	push   0x1
c000eaf4:	53                   	push   ebx
c000eaf5:	e8 86 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eafa:	83 c4 20             	add    esp,0x20
c000eafd:	6a 00                	push   0x0
c000eaff:	68 8a 16 02 c0       	push   0xc002168a
c000eb04:	6a 02                	push   0x2
c000eb06:	53                   	push   ebx
c000eb07:	e8 74 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb0c:	6a 00                	push   0x0
c000eb0e:	68 94 16 02 c0       	push   0xc0021694
c000eb13:	6a 03                	push   0x3
c000eb15:	53                   	push   ebx
c000eb16:	e8 65 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb1b:	83 c4 20             	add    esp,0x20
c000eb1e:	6a 00                	push   0x0
c000eb20:	68 9e 16 02 c0       	push   0xc002169e
c000eb25:	6a 04                	push   0x4
c000eb27:	53                   	push   ebx
c000eb28:	e8 53 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb2d:	6a 00                	push   0x0
c000eb2f:	68 a8 16 02 c0       	push   0xc00216a8
c000eb34:	6a 05                	push   0x5
c000eb36:	53                   	push   ebx
c000eb37:	e8 44 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb3c:	83 c4 20             	add    esp,0x20
c000eb3f:	6a 00                	push   0x0
c000eb41:	68 b2 16 02 c0       	push   0xc00216b2
c000eb46:	6a 06                	push   0x6
c000eb48:	53                   	push   ebx
c000eb49:	e8 32 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb4e:	6a 00                	push   0x0
c000eb50:	68 bc 16 02 c0       	push   0xc00216bc
c000eb55:	6a 07                	push   0x7
c000eb57:	53                   	push   ebx
c000eb58:	e8 23 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb5d:	83 c4 20             	add    esp,0x20
c000eb60:	6a 00                	push   0x0
c000eb62:	68 c6 16 02 c0       	push   0xc00216c6
c000eb67:	6a 08                	push   0x8
c000eb69:	53                   	push   ebx
c000eb6a:	e8 11 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb6f:	6a 00                	push   0x0
c000eb71:	68 ce 16 02 c0       	push   0xc00216ce
c000eb76:	6a 09                	push   0x9
c000eb78:	53                   	push   ebx
c000eb79:	e8 02 ff ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb7e:	83 c4 20             	add    esp,0x20
c000eb81:	6a 00                	push   0x0
c000eb83:	68 d8 16 02 c0       	push   0xc00216d8
c000eb88:	6a 0a                	push   0xa
c000eb8a:	53                   	push   ebx
c000eb8b:	e8 f0 fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb90:	6a 00                	push   0x0
c000eb92:	68 e0 16 02 c0       	push   0xc00216e0
c000eb97:	6a 0b                	push   0xb
c000eb99:	53                   	push   ebx
c000eb9a:	e8 e1 fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eb9f:	83 c4 20             	add    esp,0x20
c000eba2:	6a 00                	push   0x0
c000eba4:	68 e8 16 02 c0       	push   0xc00216e8
c000eba9:	6a 0c                	push   0xc
c000ebab:	53                   	push   ebx
c000ebac:	e8 cf fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ebb1:	6a 00                	push   0x0
c000ebb3:	68 f0 16 02 c0       	push   0xc00216f0
c000ebb8:	6a 0d                	push   0xd
c000ebba:	53                   	push   ebx
c000ebbb:	e8 c0 fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ebc0:	83 c4 20             	add    esp,0x20
c000ebc3:	6a 00                	push   0x0
c000ebc5:	68 0a 17 02 c0       	push   0xc002170a
c000ebca:	6a 0e                	push   0xe
c000ebcc:	53                   	push   ebx
c000ebcd:	e8 ae fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ebd2:	6a 00                	push   0x0
c000ebd4:	68 12 17 02 c0       	push   0xc0021712
c000ebd9:	6a 0f                	push   0xf
c000ebdb:	53                   	push   ebx
c000ebdc:	e8 9f fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ebe1:	83 c4 20             	add    esp,0x20
c000ebe4:	6a 00                	push   0x0
c000ebe6:	68 1c 17 02 c0       	push   0xc002171c
c000ebeb:	6a 10                	push   0x10
c000ebed:	53                   	push   ebx
c000ebee:	e8 8d fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ebf3:	6a 00                	push   0x0
c000ebf5:	68 26 17 02 c0       	push   0xc0021726
c000ebfa:	6a 11                	push   0x11
c000ebfc:	53                   	push   ebx
c000ebfd:	e8 7e fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec02:	83 c4 20             	add    esp,0x20
c000ec05:	6a 00                	push   0x0
c000ec07:	68 30 17 02 c0       	push   0xc0021730
c000ec0c:	6a 12                	push   0x12
c000ec0e:	53                   	push   ebx
c000ec0f:	e8 6c fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec14:	6a 01                	push   0x1
c000ec16:	68 ca 17 02 c0       	push   0xc00217ca
c000ec1b:	6a 60                	push   0x60
c000ec1d:	53                   	push   ebx
c000ec1e:	e8 5d fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec23:	83 c4 20             	add    esp,0x20
c000ec26:	6a 00                	push   0x0
c000ec28:	68 d1 17 02 c0       	push   0xc00217d1
c000ec2d:	6a 20                	push   0x20
c000ec2f:	53                   	push   ebx
c000ec30:	e8 4b fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec35:	6a 00                	push   0x0
c000ec37:	68 bc 17 02 c0       	push   0xc00217bc
c000ec3c:	6a 21                	push   0x21
c000ec3e:	53                   	push   ebx
c000ec3f:	e8 3c fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec44:	83 c4 20             	add    esp,0x20
c000ec47:	6a 00                	push   0x0
c000ec49:	68 c3 17 02 c0       	push   0xc00217c3
c000ec4e:	6a 22                	push   0x22
c000ec50:	53                   	push   ebx
c000ec51:	e8 2a fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec56:	6a 00                	push   0x0
c000ec58:	68 3a 17 02 c0       	push   0xc002173a
c000ec5d:	6a 23                	push   0x23
c000ec5f:	53                   	push   ebx
c000ec60:	e8 1b fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec65:	83 c4 20             	add    esp,0x20
c000ec68:	6a 00                	push   0x0
c000ec6a:	68 44 17 02 c0       	push   0xc0021744
c000ec6f:	6a 24                	push   0x24
c000ec71:	53                   	push   ebx
c000ec72:	e8 09 fe ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec77:	6a 00                	push   0x0
c000ec79:	68 4e 17 02 c0       	push   0xc002174e
c000ec7e:	6a 25                	push   0x25
c000ec80:	53                   	push   ebx
c000ec81:	e8 fa fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec86:	83 c4 20             	add    esp,0x20
c000ec89:	6a 00                	push   0x0
c000ec8b:	68 58 17 02 c0       	push   0xc0021758
c000ec90:	6a 26                	push   0x26
c000ec92:	53                   	push   ebx
c000ec93:	e8 e8 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ec98:	6a 00                	push   0x0
c000ec9a:	68 62 17 02 c0       	push   0xc0021762
c000ec9f:	6a 27                	push   0x27
c000eca1:	53                   	push   ebx
c000eca2:	e8 d9 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eca7:	83 c4 20             	add    esp,0x20
c000ecaa:	6a 00                	push   0x0
c000ecac:	68 6c 17 02 c0       	push   0xc002176c
c000ecb1:	6a 28                	push   0x28
c000ecb3:	53                   	push   ebx
c000ecb4:	e8 c7 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ecb9:	6a 00                	push   0x0
c000ecbb:	68 76 17 02 c0       	push   0xc0021776
c000ecc0:	6a 29                	push   0x29
c000ecc2:	53                   	push   ebx
c000ecc3:	e8 b8 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ecc8:	83 c4 20             	add    esp,0x20
c000eccb:	6a 00                	push   0x0
c000eccd:	68 80 17 02 c0       	push   0xc0021780
c000ecd2:	6a 2a                	push   0x2a
c000ecd4:	53                   	push   ebx
c000ecd5:	e8 a6 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ecda:	6a 00                	push   0x0
c000ecdc:	68 8a 17 02 c0       	push   0xc002178a
c000ece1:	6a 2b                	push   0x2b
c000ece3:	53                   	push   ebx
c000ece4:	e8 97 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ece9:	83 c4 20             	add    esp,0x20
c000ecec:	6a 00                	push   0x0
c000ecee:	68 94 17 02 c0       	push   0xc0021794
c000ecf3:	6a 2c                	push   0x2c
c000ecf5:	53                   	push   ebx
c000ecf6:	e8 85 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ecfb:	6a 00                	push   0x0
c000ecfd:	68 9e 17 02 c0       	push   0xc002179e
c000ed02:	6a 2d                	push   0x2d
c000ed04:	53                   	push   ebx
c000ed05:	e8 76 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed0a:	83 c4 20             	add    esp,0x20
c000ed0d:	6a 00                	push   0x0
c000ed0f:	68 a8 17 02 c0       	push   0xc00217a8
c000ed14:	6a 2e                	push   0x2e
c000ed16:	53                   	push   ebx
c000ed17:	e8 64 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed1c:	6a 00                	push   0x0
c000ed1e:	68 b2 17 02 c0       	push   0xc00217b2
c000ed23:	6a 2f                	push   0x2f
c000ed25:	53                   	push   ebx
c000ed26:	e8 55 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed2b:	83 c4 20             	add    esp,0x20
c000ed2e:	6a 00                	push   0x0
c000ed30:	68 d8 18 02 c0       	push   0xc00218d8
c000ed35:	6a 30                	push   0x30
c000ed37:	53                   	push   ebx
c000ed38:	e8 43 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed3d:	6a 00                	push   0x0
c000ed3f:	68 e2 18 02 c0       	push   0xc00218e2
c000ed44:	6a 31                	push   0x31
c000ed46:	53                   	push   ebx
c000ed47:	e8 34 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed4c:	83 c4 20             	add    esp,0x20
c000ed4f:	6a 00                	push   0x0
c000ed51:	68 ec 18 02 c0       	push   0xc00218ec
c000ed56:	6a 32                	push   0x32
c000ed58:	53                   	push   ebx
c000ed59:	e8 22 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed5e:	6a 00                	push   0x0
c000ed60:	68 f6 18 02 c0       	push   0xc00218f6
c000ed65:	6a 33                	push   0x33
c000ed67:	53                   	push   ebx
c000ed68:	e8 13 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed6d:	83 c4 20             	add    esp,0x20
c000ed70:	6a 00                	push   0x0
c000ed72:	68 00 19 02 c0       	push   0xc0021900
c000ed77:	6a 34                	push   0x34
c000ed79:	53                   	push   ebx
c000ed7a:	e8 01 fd ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	68 0a 19 02 c0       	push   0xc002190a
c000ed86:	6a 35                	push   0x35
c000ed88:	53                   	push   ebx
c000ed89:	e8 f2 fc ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000ed8e:	83 c4 20             	add    esp,0x20
c000ed91:	6a 00                	push   0x0
c000ed93:	68 14 19 02 c0       	push   0xc0021914
c000ed98:	6a 36                	push   0x36
c000ed9a:	53                   	push   ebx
c000ed9b:	e8 e0 fc ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000eda0:	6a 00                	push   0x0
c000eda2:	68 1e 19 02 c0       	push   0xc002191e
c000eda7:	6a 37                	push   0x37
c000eda9:	53                   	push   ebx
c000edaa:	e8 d1 fc ff ff       	call   c000ea80 <IDT::addEntry(int, void (*)(), bool)>
c000edaf:	83 c4 1c             	add    esp,0x1c
c000edb2:	6a 03                	push   0x3
c000edb4:	6a 02                	push   0x2
c000edb6:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000edbc:	e8 3b 4a 00 00       	call   c00137fc <VAS::allocatePages(int, int)>
c000edc1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000edc8:	89 c6                	mov    esi,eax
c000edca:	e8 b1 08 00 00       	call   c000f680 <malloc>
c000edcf:	81 c6 00 20 00 00    	add    esi,0x2000
c000edd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000edd8:	89 c7                	mov    edi,eax
c000edda:	e8 ed 3a 00 00       	call   c00128cc <TSS::TSS()>
c000eddf:	83 c4 0c             	add    esp,0xc
c000ede2:	68 c6 16 02 c0       	push   0xc00216c6
c000ede7:	56                   	push   esi
c000ede8:	57                   	push   edi
c000ede9:	e8 22 3b 00 00       	call   c0012910 <TSS::setup(unsigned long, unsigned long)>
c000edee:	89 c6                	mov    esi,eax
c000edf0:	58                   	pop    eax
c000edf1:	5a                   	pop    edx
c000edf2:	6a 00                	push   0x0
c000edf4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000edf8:	50                   	push   eax
c000edf9:	e8 ce fb ff ff       	call   c000e9cc <IDTEntry::IDTEntry(bool)>
c000edfe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee02:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ee07:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ee0e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee12:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ee18:	80 ce 05             	or     dh,0x5
c000ee1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ee1f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ee22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee26:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ee29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee2c:	e8 87 fc ff ff       	call   c000eab8 <IDT::flush()>
c000ee31:	83 c4 20             	add    esp,0x20
c000ee34:	5b                   	pop    ebx
c000ee35:	5e                   	pop    esi
c000ee36:	5f                   	pop    edi
c000ee37:	c3                   	ret    

c000ee38 <CPU::current()>:
c000ee38:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c000ee3d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ee43:	c3                   	ret    

c000ee44 <operator new(unsigned long)>:
c000ee44:	e9 37 08 00 00       	jmp    c000f680 <malloc>

c000ee49 <operator delete(void*)>:
c000ee49:	e9 52 08 00 00       	jmp    c000f6a0 <rfree>

c000ee4e <disableIRQs()>:
c000ee4e:	fa                   	cli    
c000ee4f:	c3                   	ret    

c000ee50 <enableIRQs()>:
c000ee50:	fb                   	sti    
c000ee51:	c3                   	ret    

c000ee52 <lockScheduler()>:
c000ee52:	fa                   	cli    
c000ee53:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c000ee59:	c3                   	ret    

c000ee5a <unlockScheduler()>:
c000ee5a:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c000ee61:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000ee68:	75 01                	jne    c000ee6b <unlockScheduler()+0x11>
c000ee6a:	fb                   	sti    
c000ee6b:	c3                   	ret    

c000ee6c <lockStuff()>:
c000ee6c:	fa                   	cli    
c000ee6d:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c000ee73:	ff 05 2c 13 03 c0    	inc    DWORD PTR ds:0xc003132c
c000ee79:	c3                   	ret    

c000ee7a <unlockStuff()>:
c000ee7a:	83 ec 0c             	sub    esp,0xc
c000ee7d:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c000ee82:	48                   	dec    eax
c000ee83:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c000ee88:	75 18                	jne    c000eea2 <unlockStuff()+0x28>
c000ee8a:	83 3d 28 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031328,0x0
c000ee91:	74 0f                	je     c000eea2 <unlockStuff()+0x28>
c000ee93:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c000ee9d:	e8 aa 77 00 00       	call   c001664c <schedule()>
c000eea2:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c000eea9:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000eeb0:	75 01                	jne    c000eeb3 <unlockStuff()+0x39>
c000eeb2:	fb                   	sti    
c000eeb3:	83 c4 0c             	add    esp,0xc
c000eeb6:	c3                   	ret    

c000eeb7 <Virt::getAKernelVAS()>:
c000eeb7:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c000eebc:	c3                   	ret    

c000eebd <__not_memcpy>:
c000eebd:	57                   	push   edi
c000eebe:	56                   	push   esi
c000eebf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eec3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eec7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eecb:	89 c7                	mov    edi,eax
c000eecd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eecf:	5e                   	pop    esi
c000eed0:	5f                   	pop    edi
c000eed1:	c3                   	ret    

c000eed2 <KeFormatDate(char*, int, int, int, int, bool)>:
c000eed2:	55                   	push   ebp
c000eed3:	57                   	push   edi
c000eed4:	56                   	push   esi
c000eed5:	be e8 03 00 00       	mov    esi,0x3e8
c000eeda:	53                   	push   ebx
c000eedb:	bb 0a 00 00 00       	mov    ebx,0xa
c000eee0:	81 ec ac 00 00 00    	sub    esp,0xac
c000eee6:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000eeeb:	8b 8c 24 d0 00 00 00 	mov    ecx,DWORD PTR [esp+0xd0]
c000eef2:	89 c8                	mov    eax,ecx
c000eef4:	99                   	cdq    
c000eef5:	f7 fb                	idiv   ebx
c000eef7:	89 d5                	mov    ebp,edx
c000eef9:	99                   	cdq    
c000eefa:	f7 fb                	idiv   ebx
c000eefc:	8d 42 30             	lea    eax,[edx+0x30]
c000eeff:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ef03:	8d 45 30             	lea    eax,[ebp+0x30]
c000ef06:	0f b6 ac 24 d4 00 00 00 	movzx  ebp,BYTE PTR [esp+0xd4]
c000ef0e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000ef12:	89 c8                	mov    eax,ecx
c000ef14:	99                   	cdq    
c000ef15:	f7 fe                	idiv   esi
c000ef17:	be 64 00 00 00       	mov    esi,0x64
c000ef1c:	99                   	cdq    
c000ef1d:	f7 fb                	idiv   ebx
c000ef1f:	8d 42 30             	lea    eax,[edx+0x30]
c000ef22:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000ef26:	89 c8                	mov    eax,ecx
c000ef28:	99                   	cdq    
c000ef29:	f7 fe                	idiv   esi
c000ef2b:	99                   	cdq    
c000ef2c:	f7 fb                	idiv   ebx
c000ef2e:	31 db                	xor    ebx,ebx
c000ef30:	8d 42 30             	lea    eax,[edx+0x30]
c000ef33:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000ef37:	0f be 8b 44 11 03 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffceebc]
c000ef3e:	83 f9 59             	cmp    ecx,0x59
c000ef41:	0f 84 1f 01 00 00    	je     c000f066 <KeFormatDate(char*, int, int, int, int, bool)+0x194>
c000ef47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ef4b:	8b 94 24 c8 00 00 00 	mov    edx,DWORD PTR [esp+0xc8]
c000ef52:	83 f9 4d             	cmp    ecx,0x4d
c000ef55:	0f 44 94 24 cc 00 00 00 	cmove  edx,DWORD PTR [esp+0xcc]
c000ef5d:	57                   	push   edi
c000ef5e:	57                   	push   edi
c000ef5f:	89 d7                	mov    edi,edx
c000ef61:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ef65:	c1 ff 1f             	sar    edi,0x1f
c000ef68:	57                   	push   edi
c000ef69:	52                   	push   edx
c000ef6a:	e8 6d 04 00 00       	call   c000f3dc <KeGetDigitsInNumber(long long)>
c000ef6f:	83 c4 10             	add    esp,0x10
c000ef72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef76:	48                   	dec    eax
c000ef77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef7b:	75 1c                	jne    c000ef99 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000ef7d:	83 f9 44             	cmp    ecx,0x44
c000ef80:	75 09                	jne    c000ef8b <KeFormatDate(char*, int, int, int, int, bool)+0xb9>
c000ef82:	80 3d 60 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031160,0x0
c000ef89:	eb 0c                	jmp    c000ef97 <KeFormatDate(char*, int, int, int, int, bool)+0xc5>
c000ef8b:	83 f9 4d             	cmp    ecx,0x4d
c000ef8e:	75 60                	jne    c000eff0 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000ef90:	80 3d 61 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031161,0x0
c000ef97:	74 57                	je     c000eff0 <KeFormatDate(char*, int, int, int, int, bool)+0x11e>
c000ef99:	89 d0                	mov    eax,edx
c000ef9b:	b9 0a 00 00 00       	mov    ecx,0xa
c000efa0:	99                   	cdq    
c000efa1:	f7 f9                	idiv   ecx
c000efa3:	89 d6                	mov    esi,edx
c000efa5:	99                   	cdq    
c000efa6:	f7 f9                	idiv   ecx
c000efa8:	83 c2 30             	add    edx,0x30
c000efab:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000efaf:	8d 56 30             	lea    edx,[esi+0x30]
c000efb2:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000efb6:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000efbb:	56                   	push   esi
c000efbc:	56                   	push   esi
c000efbd:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000efc1:	57                   	push   edi
c000efc2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000efc6:	56                   	push   esi
c000efc7:	e8 a4 18 ff ff       	call   c0000870 <strcat>
c000efcc:	83 c4 10             	add    esp,0x10
c000efcf:	83 fb 02             	cmp    ebx,0x2
c000efd2:	74 34                	je     c000f008 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000efd4:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000efd9:	a0 48 11 03 c0       	mov    al,ds:0xc0031148
c000efde:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000efe2:	51                   	push   ecx
c000efe3:	51                   	push   ecx
c000efe4:	57                   	push   edi
c000efe5:	56                   	push   esi
c000efe6:	e8 85 18 ff ff       	call   c0000870 <strcat>
c000efeb:	83 c4 10             	add    esp,0x10
c000efee:	eb 18                	jmp    c000f008 <KeFormatDate(char*, int, int, int, int, bool)+0x136>
c000eff0:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000eff5:	89 d0                	mov    eax,edx
c000eff7:	b9 0a 00 00 00       	mov    ecx,0xa
c000effc:	99                   	cdq    
c000effd:	f7 f9                	idiv   ecx
c000efff:	83 c2 30             	add    edx,0x30
c000f002:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f006:	eb b3                	jmp    c000efbb <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f008:	43                   	inc    ebx
c000f009:	83 fb 03             	cmp    ebx,0x3
c000f00c:	0f 85 25 ff ff ff    	jne    c000ef37 <KeFormatDate(char*, int, int, int, int, bool)+0x65>
c000f012:	52                   	push   edx
c000f013:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f01a:	6a 00                	push   0x0
c000f01c:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f023:	e8 c8 14 ff ff       	call   c00004f0 <memset>
c000f028:	89 34 24             	mov    DWORD PTR [esp],esi
c000f02b:	e8 50 15 ff ff       	call   c0000580 <strlen>
c000f030:	83 c4 10             	add    esp,0x10
c000f033:	40                   	inc    eax
c000f034:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f03b:	72 14                	jb     c000f051 <KeFormatDate(char*, int, int, int, int, bool)+0x17f>
c000f03d:	50                   	push   eax
c000f03e:	50                   	push   eax
c000f03f:	56                   	push   esi
c000f040:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f047:	e8 04 16 ff ff       	call   c0000650 <strcpy>
c000f04c:	83 c4 10             	add    esp,0x10
c000f04f:	eb 58                	jmp    c000f0a9 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f051:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f058:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f05f:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f062:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f064:	eb 43                	jmp    c000f0a9 <KeFormatDate(char*, int, int, int, int, bool)+0x1d7>
c000f066:	85 ed                	test   ebp,ebp
c000f068:	74 2a                	je     c000f094 <KeFormatDate(char*, int, int, int, int, bool)+0x1c2>
c000f06a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f06f:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f073:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f077:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f07b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f07f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f083:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f087:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f08b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f08f:	e9 27 ff ff ff       	jmp    c000efbb <KeFormatDate(char*, int, int, int, int, bool)+0xe9>
c000f094:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f098:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f09c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f0a0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f0a4:	e9 0d ff ff ff       	jmp    c000efb6 <KeFormatDate(char*, int, int, int, int, bool)+0xe4>
c000f0a9:	81 c4 ac 00 00 00    	add    esp,0xac
c000f0af:	5b                   	pop    ebx
c000f0b0:	5e                   	pop    esi
c000f0b1:	5f                   	pop    edi
c000f0b2:	5d                   	pop    ebp
c000f0b3:	c3                   	ret    

c000f0b4 <KeFormatShortDate(char*, int, int, int, int)>:
c000f0b4:	83 ec 14             	sub    esp,0x14
c000f0b7:	6a 00                	push   0x0
c000f0b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0cd:	e8 00 fe ff ff       	call   c000eed2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f0d2:	83 c4 2c             	add    esp,0x2c
c000f0d5:	c3                   	ret    

c000f0d6 <KeFormatLongDate(char*, int, int, int, int)>:
c000f0d6:	83 ec 14             	sub    esp,0x14
c000f0d9:	6a 01                	push   0x1
c000f0db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0ef:	e8 de fd ff ff       	call   c000eed2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f0f4:	83 c4 2c             	add    esp,0x2c
c000f0f7:	c3                   	ret    

c000f0f8 <KeSetLocale(klocale_t)>:
c000f0f8:	57                   	push   edi
c000f0f9:	b9 09 00 00 00       	mov    ecx,0x9
c000f0fe:	56                   	push   esi
c000f0ff:	bf 40 11 03 c0       	mov    edi,0xc0031140
c000f104:	fc                   	cld    
c000f105:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f109:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f10b:	5e                   	pop    esi
c000f10c:	5f                   	pop    edi
c000f10d:	c3                   	ret    

c000f10e <KeInitialiseLocale()>:
c000f10e:	57                   	push   edi
c000f10f:	56                   	push   esi
c000f110:	83 ec 3c             	sub    esp,0x3c
c000f113:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f11b:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f123:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f12b:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f133:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f13a:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f142:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f14a:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f151:	68 4c 7b 02 c0       	push   0xc0027b4c
c000f156:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f15a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f15e:	50                   	push   eax
c000f15f:	e8 ec 14 ff ff       	call   c0000650 <strcpy>
c000f164:	83 ec 20             	sub    esp,0x20
c000f167:	b9 09 00 00 00       	mov    ecx,0x9
c000f16c:	fc                   	cld    
c000f16d:	89 e7                	mov    edi,esp
c000f16f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f171:	e8 82 ff ff ff       	call   c000f0f8 <KeSetLocale(klocale_t)>
c000f176:	83 c4 64             	add    esp,0x64
c000f179:	5e                   	pop    esi
c000f17a:	5f                   	pop    edi
c000f17b:	c3                   	ret    

c000f17c <KeFormatCurrency(char*, int, long long, long long)>:
c000f17c:	c3                   	ret    

c000f17d <KeFormatCurrency(char*, int, double)>:
c000f17d:	c3                   	ret    

c000f17e <KeFormatNumber(char*, long long, long long)>:
c000f17e:	c3                   	ret    

c000f17f <KeFormatNumber(char*, double)>:
c000f17f:	c3                   	ret    

c000f180 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f180:	55                   	push   ebp
c000f181:	57                   	push   edi
c000f182:	56                   	push   esi
c000f183:	53                   	push   ebx
c000f184:	83 ec 4c             	sub    esp,0x4c
c000f187:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f18b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f18f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f193:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f197:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f19f:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f1a7:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f1af:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f1b7:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f1bc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f1c0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f1c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f1cc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1d0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f1d4:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f1d9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f1dd:	89 c2                	mov    edx,eax
c000f1df:	c1 fa 1f             	sar    edx,0x1f
c000f1e2:	52                   	push   edx
c000f1e3:	50                   	push   eax
c000f1e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f1e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f1ec:	e8 d3 2a 01 00       	call   c0021cc4 <__udivdi3>
c000f1f1:	83 c4 10             	add    esp,0x10
c000f1f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f1f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f1fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f200:	80 f4 00             	xor    ah,0x0
c000f203:	89 c7                	mov    edi,eax
c000f205:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f209:	80 f4 00             	xor    ah,0x0
c000f20c:	89 c5                	mov    ebp,eax
c000f20e:	89 e8                	mov    eax,ebp
c000f210:	09 f8                	or     eax,edi
c000f212:	74 04                	je     c000f218 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x98>
c000f214:	eb be                	jmp    c000f1d4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f216:	66 90                	xchg   ax,ax
c000f218:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f21c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f21f:	90                   	nop
c000f220:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f224:	89 c7                	mov    edi,eax
c000f226:	89 c5                	mov    ebp,eax
c000f228:	c1 fd 1f             	sar    ebp,0x1f
c000f22b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f22f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f233:	55                   	push   ebp
c000f234:	57                   	push   edi
c000f235:	52                   	push   edx
c000f236:	50                   	push   eax
c000f237:	e8 88 2b 01 00       	call   c0021dc4 <__umoddi3>
c000f23c:	83 c4 10             	add    esp,0x10
c000f23f:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f244:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f248:	01 c8                	add    eax,ecx
c000f24a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f24c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f250:	88 10                	mov    BYTE PTR [eax],dl
c000f252:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f256:	89 c2                	mov    edx,eax
c000f258:	c1 fa 1f             	sar    edx,0x1f
c000f25b:	52                   	push   edx
c000f25c:	50                   	push   eax
c000f25d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f261:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f265:	e8 5a 2a 01 00       	call   c0021cc4 <__udivdi3>
c000f26a:	83 c4 10             	add    esp,0x10
c000f26d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f271:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f275:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f279:	80 f4 00             	xor    ah,0x0
c000f27c:	89 c3                	mov    ebx,eax
c000f27e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f282:	80 f4 00             	xor    ah,0x0
c000f285:	89 c6                	mov    esi,eax
c000f287:	89 f0                	mov    eax,esi
c000f289:	09 d8                	or     eax,ebx
c000f28b:	74 03                	je     c000f290 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x110>
c000f28d:	eb 91                	jmp    c000f220 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa0>
c000f28f:	90                   	nop
c000f290:	90                   	nop
c000f291:	83 c4 4c             	add    esp,0x4c
c000f294:	5b                   	pop    ebx
c000f295:	5e                   	pop    esi
c000f296:	5f                   	pop    edi
c000f297:	5d                   	pop    ebp
c000f298:	c3                   	ret    
c000f299:	8d 76 00             	lea    esi,[esi+0x0]

c000f29c <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f29c:	55                   	push   ebp
c000f29d:	57                   	push   edi
c000f29e:	56                   	push   esi
c000f29f:	53                   	push   ebx
c000f2a0:	83 ec 4c             	sub    esp,0x4c
c000f2a3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f2af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f2b3:	c7 44 24 1f 30 31 32 33 	mov    DWORD PTR [esp+0x1f],0x33323130
c000f2bb:	c7 44 24 23 34 35 36 37 	mov    DWORD PTR [esp+0x23],0x37363534
c000f2c3:	c7 44 24 27 38 39 41 42 	mov    DWORD PTR [esp+0x27],0x42413938
c000f2cb:	c7 44 24 2b 43 44 45 46 	mov    DWORD PTR [esp+0x2b],0x46454443
c000f2d3:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f2d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000f2dc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f2e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f2e5:	79 1d                	jns    c000f304 <KeBasedSignedIntegerToString(long long, char*, int)+0x68>
c000f2e7:	f7 5c 24 08          	neg    DWORD PTR [esp+0x8]
c000f2eb:	83 54 24 0c 00       	adc    DWORD PTR [esp+0xc],0x0
c000f2f0:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c000f2f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2f8:	8d 50 01             	lea    edx,[eax+0x1]
c000f2fb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000f2ff:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f302:	66 90                	xchg   ax,ax
c000f304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f308:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f30c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f310:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f314:	83 44 24 3c 01       	add    DWORD PTR [esp+0x3c],0x1
c000f319:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f31d:	89 c2                	mov    edx,eax
c000f31f:	c1 fa 1f             	sar    edx,0x1f
c000f322:	52                   	push   edx
c000f323:	50                   	push   eax
c000f324:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f328:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f32c:	e8 93 29 01 00       	call   c0021cc4 <__udivdi3>
c000f331:	83 c4 10             	add    esp,0x10
c000f334:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f338:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000f33c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f340:	80 f4 00             	xor    ah,0x0
c000f343:	89 c7                	mov    edi,eax
c000f345:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f349:	80 f4 00             	xor    ah,0x0
c000f34c:	89 c5                	mov    ebp,eax
c000f34e:	89 e8                	mov    eax,ebp
c000f350:	09 f8                	or     eax,edi
c000f352:	74 04                	je     c000f358 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f354:	eb be                	jmp    c000f314 <KeBasedSignedIntegerToString(long long, char*, int)+0x78>
c000f356:	66 90                	xchg   ax,ax
c000f358:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f35c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f35f:	90                   	nop
c000f360:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f364:	89 c7                	mov    edi,eax
c000f366:	89 c5                	mov    ebp,eax
c000f368:	c1 fd 1f             	sar    ebp,0x1f
c000f36b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f36f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f373:	55                   	push   ebp
c000f374:	57                   	push   edi
c000f375:	52                   	push   edx
c000f376:	50                   	push   eax
c000f377:	e8 c8 27 01 00       	call   c0021b44 <__moddi3>
c000f37c:	83 c4 10             	add    esp,0x10
c000f37f:	83 6c 24 3c 01       	sub    DWORD PTR [esp+0x3c],0x1
c000f384:	8d 4c 24 1f          	lea    ecx,[esp+0x1f]
c000f388:	01 c8                	add    eax,ecx
c000f38a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f38c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f390:	88 10                	mov    BYTE PTR [eax],dl
c000f392:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000f396:	89 c2                	mov    edx,eax
c000f398:	c1 fa 1f             	sar    edx,0x1f
c000f39b:	52                   	push   edx
c000f39c:	50                   	push   eax
c000f39d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f3a5:	e8 4e 26 01 00       	call   c00219f8 <__divdi3>
c000f3aa:	83 c4 10             	add    esp,0x10
c000f3ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3b9:	80 f4 00             	xor    ah,0x0
c000f3bc:	89 c3                	mov    ebx,eax
c000f3be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3c2:	80 f4 00             	xor    ah,0x0
c000f3c5:	89 c6                	mov    esi,eax
c000f3c7:	89 f0                	mov    eax,esi
c000f3c9:	09 d8                	or     eax,ebx
c000f3cb:	74 03                	je     c000f3d0 <KeBasedSignedIntegerToString(long long, char*, int)+0x134>
c000f3cd:	eb 91                	jmp    c000f360 <KeBasedSignedIntegerToString(long long, char*, int)+0xc4>
c000f3cf:	90                   	nop
c000f3d0:	90                   	nop
c000f3d1:	83 c4 4c             	add    esp,0x4c
c000f3d4:	5b                   	pop    ebx
c000f3d5:	5e                   	pop    esi
c000f3d6:	5f                   	pop    edi
c000f3d7:	5d                   	pop    ebp
c000f3d8:	c3                   	ret    
c000f3d9:	8d 76 00             	lea    esi,[esi+0x0]

c000f3dc <KeGetDigitsInNumber(long long)>:
c000f3dc:	56                   	push   esi
c000f3dd:	53                   	push   ebx
c000f3de:	83 ec 24             	sub    esp,0x24
c000f3e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f3e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f3ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3f1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f3f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f3fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f400:	80 f4 00             	xor    ah,0x0
c000f403:	89 c3                	mov    ebx,eax
c000f405:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f409:	80 f4 00             	xor    ah,0x0
c000f40c:	89 c6                	mov    esi,eax
c000f40e:	89 f0                	mov    eax,esi
c000f410:	09 d8                	or     eax,ebx
c000f412:	74 28                	je     c000f43c <KeGetDigitsInNumber(long long)+0x60>
c000f414:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f418:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f41c:	6a 00                	push   0x0
c000f41e:	6a 0a                	push   0xa
c000f420:	52                   	push   edx
c000f421:	50                   	push   eax
c000f422:	e8 d1 25 01 00       	call   c00219f8 <__divdi3>
c000f427:	83 c4 10             	add    esp,0x10
c000f42a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f42e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f432:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f437:	eb c3                	jmp    c000f3fc <KeGetDigitsInNumber(long long)+0x20>
c000f439:	8d 76 00             	lea    esi,[esi+0x0]
c000f43c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f440:	83 c4 24             	add    esp,0x24
c000f443:	5b                   	pop    ebx
c000f444:	5e                   	pop    esi
c000f445:	c3                   	ret    
c000f446:	66 90                	xchg   ax,ax

c000f448 <KeItoa(unsigned long long, char*)>:
c000f448:	83 ec 1c             	sub    esp,0x1c
c000f44b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f44f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f453:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f45b:	6a 0a                	push   0xa
c000f45d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f461:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f465:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f469:	e8 12 fd ff ff       	call   c000f180 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	90                   	nop
c000f472:	83 c4 1c             	add    esp,0x1c
c000f475:	c3                   	ret    
c000f476:	66 90                	xchg   ax,ax

c000f478 <KeItoa(long long, char*)>:
c000f478:	83 ec 1c             	sub    esp,0x1c
c000f47b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f47f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f483:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f487:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f48b:	6a 0a                	push   0xa
c000f48d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f495:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f499:	e8 fe fd ff ff       	call   c000f29c <KeBasedSignedIntegerToString(long long, char*, int)>
c000f49e:	83 c4 10             	add    esp,0x10
c000f4a1:	90                   	nop
c000f4a2:	83 c4 1c             	add    esp,0x1c
c000f4a5:	c3                   	ret    
c000f4a6:	66 90                	xchg   ax,ax

c000f4a8 <KeXtoa(unsigned long long, char*)>:
c000f4a8:	83 ec 1c             	sub    esp,0x1c
c000f4ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f4af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f4b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4bb:	6a 10                	push   0x10
c000f4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f4c9:	e8 b2 fc ff ff       	call   c000f180 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f4ce:	83 c4 10             	add    esp,0x10
c000f4d1:	90                   	nop
c000f4d2:	83 c4 1c             	add    esp,0x1c
c000f4d5:	c3                   	ret    

c000f4d6 <sbrk>:
c000f4d6:	55                   	push   ebp
c000f4d7:	57                   	push   edi
c000f4d8:	56                   	push   esi
c000f4d9:	53                   	push   ebx
c000f4da:	83 ec 1c             	sub    esp,0x1c
c000f4dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f4e1:	85 c0                	test   eax,eax
c000f4e3:	74 66                	je     c000f54b <sbrk+0x75>
c000f4e5:	78 6b                	js     c000f552 <sbrk+0x7c>
c000f4e7:	8b 15 d0 b1 02 c0    	mov    edx,DWORD PTR ds:0xc002b1d0
c000f4ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4f1:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000f4f7:	05 ff 0f 00 00       	add    eax,0xfff
c000f4fc:	0f 49 e8             	cmovns ebp,eax
c000f4ff:	c1 fd 0c             	sar    ebp,0xc
c000f502:	bb 00 00 00 00       	mov    ebx,0x0
c000f507:	8b 35 90 12 03 c0    	mov    esi,DWORD PTR ds:0xc0031290
c000f50d:	8b 3d d0 b1 02 c0    	mov    edi,DWORD PTR ds:0xc002b1d0
c000f513:	e8 b6 07 00 00       	call   c000fcce <Phys::allocatePage()>
c000f518:	68 01 04 00 00       	push   0x401
c000f51d:	57                   	push   edi
c000f51e:	50                   	push   eax
c000f51f:	56                   	push   esi
c000f520:	e8 cf 41 00 00       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f525:	81 05 d0 b1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b1d0,0x1000
c000f52f:	83 c3 01             	add    ebx,0x1
c000f532:	83 c4 10             	add    esp,0x10
c000f535:	39 dd                	cmp    ebp,ebx
c000f537:	75 ce                	jne    c000f507 <sbrk+0x31>
c000f539:	0f 20 d8             	mov    eax,cr3
c000f53c:	0f 22 d8             	mov    cr3,eax
c000f53f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f543:	83 c4 1c             	add    esp,0x1c
c000f546:	5b                   	pop    ebx
c000f547:	5e                   	pop    esi
c000f548:	5f                   	pop    edi
c000f549:	5d                   	pop    ebp
c000f54a:	c3                   	ret    
c000f54b:	a1 d0 b1 02 c0       	mov    eax,ds:0xc002b1d0
c000f550:	eb f1                	jmp    c000f543 <sbrk+0x6d>
c000f552:	83 ec 08             	sub    esp,0x8
c000f555:	50                   	push   eax
c000f556:	68 50 7b 02 c0       	push   0xc0027b50
c000f55b:	e8 06 7a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f560:	83 c4 10             	add    esp,0x10
c000f563:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f568:	eb d9                	jmp    c000f543 <sbrk+0x6d>

c000f56a <sbrk_thunk>:
c000f56a:	83 ec 0c             	sub    esp,0xc
c000f56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f571:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f576:	7f 10                	jg     c000f588 <sbrk_thunk+0x1e>
c000f578:	83 ec 0c             	sub    esp,0xc
c000f57b:	50                   	push   eax
c000f57c:	e8 55 ff ff ff       	call   c000f4d6 <sbrk>
c000f581:	83 c4 10             	add    esp,0x10
c000f584:	83 c4 0c             	add    esp,0xc
c000f587:	c3                   	ret    
c000f588:	83 ec 08             	sub    esp,0x8
c000f58b:	50                   	push   eax
c000f58c:	68 80 7b 02 c0       	push   0xc0027b80
c000f591:	e8 d0 79 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f59e:	eb e4                	jmp    c000f584 <sbrk_thunk+0x1a>

c000f5a0 <mmap>:
c000f5a0:	55                   	push   ebp
c000f5a1:	57                   	push   edi
c000f5a2:	56                   	push   esi
c000f5a3:	53                   	push   ebx
c000f5a4:	83 ec 18             	sub    esp,0x18
c000f5a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5ab:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f5b1:	89 fb                	mov    ebx,edi
c000f5b3:	c1 eb 0c             	shr    ebx,0xc
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 5f 3a 00 00       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c000f5bc:	89 c5                	mov    ebp,eax
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	85 db                	test   ebx,ebx
c000f5c3:	7e 2f                	jle    c000f5f4 <mmap+0x54>
c000f5c5:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f5cb:	01 c7                	add    edi,eax
c000f5cd:	89 c3                	mov    ebx,eax
c000f5cf:	8b 35 90 12 03 c0    	mov    esi,DWORD PTR ds:0xc0031290
c000f5d5:	e8 f4 06 00 00       	call   c000fcce <Phys::allocatePage()>
c000f5da:	68 01 04 00 00       	push   0x401
c000f5df:	53                   	push   ebx
c000f5e0:	50                   	push   eax
c000f5e1:	56                   	push   esi
c000f5e2:	e8 0d 41 00 00       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f5e7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f5ed:	83 c4 10             	add    esp,0x10
c000f5f0:	39 fb                	cmp    ebx,edi
c000f5f2:	75 db                	jne    c000f5cf <mmap+0x2f>
c000f5f4:	89 e8                	mov    eax,ebp
c000f5f6:	83 c4 0c             	add    esp,0xc
c000f5f9:	5b                   	pop    ebx
c000f5fa:	5e                   	pop    esi
c000f5fb:	5f                   	pop    edi
c000f5fc:	5d                   	pop    ebp
c000f5fd:	c3                   	ret    

c000f5fe <munmap>:
c000f5fe:	83 ec 18             	sub    esp,0x18
c000f601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f605:	e8 0f 3d 00 00       	call   c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c000f60a:	b8 00 00 00 00       	mov    eax,0x0
c000f60f:	83 c4 1c             	add    esp,0x1c
c000f612:	c3                   	ret    

c000f613 <liballoc_lock()>:
c000f613:	fa                   	cli    
c000f614:	83 05 30 13 03 c0 01 	add    DWORD PTR ds:0xc0031330,0x1
c000f61b:	b8 00 00 00 00       	mov    eax,0x0
c000f620:	c3                   	ret    

c000f621 <liballoc_unlock()>:
c000f621:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f629:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c000f630:	75 01                	jne    c000f633 <liballoc_unlock()+0x12>
c000f632:	fb                   	sti    
c000f633:	b8 00 00 00 00       	mov    eax,0x0
c000f638:	c3                   	ret    

c000f639 <liballoc_alloc(int)>:
c000f639:	83 ec 10             	sub    esp,0x10
c000f63c:	6a 01                	push   0x1
c000f63e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f642:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000f648:	e8 af 41 00 00       	call   c00137fc <VAS::allocatePages(int, int)>
c000f64d:	83 c4 1c             	add    esp,0x1c
c000f650:	c3                   	ret    

c000f651 <liballoc_free(void*, int)>:
c000f651:	83 ec 14             	sub    esp,0x14
c000f654:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f658:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c000f65e:	e8 f3 3d 00 00       	call   c0013456 <VAS::freeAllocatedPages(unsigned long)>
c000f663:	b8 00 00 00 00       	mov    eax,0x0
c000f668:	83 c4 1c             	add    esp,0x1c
c000f66b:	c3                   	ret    

c000f66c <realloc>:
c000f66c:	83 ec 14             	sub    esp,0x14
c000f66f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f673:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f677:	e8 09 21 ff ff       	call   c0001785 <dlrealloc>
c000f67c:	83 c4 1c             	add    esp,0x1c
c000f67f:	c3                   	ret    

c000f680 <malloc>:
c000f680:	83 ec 18             	sub    esp,0x18
c000f683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f687:	e8 bc 1b ff ff       	call   c0001248 <dlmalloc>
c000f68c:	83 c4 1c             	add    esp,0x1c
c000f68f:	c3                   	ret    

c000f690 <free>:
c000f690:	83 ec 18             	sub    esp,0x18
c000f693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f697:	e8 ea 16 ff ff       	call   c0000d86 <dlfree>
c000f69c:	83 c4 1c             	add    esp,0x1c
c000f69f:	c3                   	ret    

c000f6a0 <rfree>:
c000f6a0:	83 ec 18             	sub    esp,0x18
c000f6a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6a7:	e8 da 16 ff ff       	call   c0000d86 <dlfree>
c000f6ac:	83 c4 1c             	add    esp,0x1c
c000f6af:	c3                   	ret    

c000f6b0 <calloc>:
c000f6b0:	56                   	push   esi
c000f6b1:	53                   	push   ebx
c000f6b2:	83 ec 10             	sub    esp,0x10
c000f6b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f6b9:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f6be:	53                   	push   ebx
c000f6bf:	e8 bc ff ff ff       	call   c000f680 <malloc>
c000f6c4:	89 c6                	mov    esi,eax
c000f6c6:	83 c4 0c             	add    esp,0xc
c000f6c9:	53                   	push   ebx
c000f6ca:	6a 00                	push   0x0
c000f6cc:	50                   	push   eax
c000f6cd:	e8 1e 0e ff ff       	call   c00004f0 <memset>
c000f6d2:	89 f0                	mov    eax,esi
c000f6d4:	83 c4 14             	add    esp,0x14
c000f6d7:	5b                   	pop    ebx
c000f6d8:	5e                   	pop    esi
c000f6d9:	c3                   	ret    
c000f6da:	66 90                	xchg   ax,ax

c000f6dc <KeMailboxTryPost(Mailbox*, void*)>:
c000f6dc:	83 ec 10             	sub    esp,0x10
c000f6df:	fa                   	cli    
c000f6e0:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f6e5:	83 c0 01             	add    eax,0x1
c000f6e8:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000f6ed:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f6f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f6f9:	85 c0                	test   eax,eax
c000f6fb:	75 23                	jne    c000f720 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f6fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f701:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f705:	89 10                	mov    DWORD PTR [eax],edx
c000f707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f70b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f70e:	8d 50 01             	lea    edx,[eax+0x1]
c000f711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f715:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f718:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f71d:	8d 76 00             	lea    esi,[esi+0x0]
c000f720:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f728:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f72d:	85 c0                	test   eax,eax
c000f72f:	75 03                	jne    c000f734 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f731:	fb                   	sti    
c000f732:	66 90                	xchg   ax,ax
c000f734:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f738:	83 c4 10             	add    esp,0x10
c000f73b:	c3                   	ret    

c000f73c <KeMailboxTryGet(Mailbox*, void**)>:
c000f73c:	83 ec 10             	sub    esp,0x10
c000f73f:	fa                   	cli    
c000f740:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f745:	83 c0 01             	add    eax,0x1
c000f748:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000f74d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f752:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f759:	83 f8 01             	cmp    eax,0x1
c000f75c:	75 22                	jne    c000f780 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f75e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f762:	8b 10                	mov    edx,DWORD PTR [eax]
c000f764:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f768:	89 10                	mov    DWORD PTR [eax],edx
c000f76a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f76e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f771:	8d 50 ff             	lea    edx,[eax-0x1]
c000f774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f778:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f77b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f780:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f788:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f78d:	85 c0                	test   eax,eax
c000f78f:	75 03                	jne    c000f794 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f791:	fb                   	sti    
c000f792:	66 90                	xchg   ax,ax
c000f794:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f798:	83 c4 10             	add    esp,0x10
c000f79b:	c3                   	ret    

c000f79c <KeMailboxCreate()>:
c000f79c:	83 ec 1c             	sub    esp,0x1c
c000f79f:	83 ec 0c             	sub    esp,0xc
c000f7a2:	6a 08                	push   0x8
c000f7a4:	e8 d7 fe ff ff       	call   c000f680 <malloc>
c000f7a9:	83 c4 10             	add    esp,0x10
c000f7ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f7ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f7c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7c9:	83 c4 1c             	add    esp,0x1c
c000f7cc:	c3                   	ret    
c000f7cd:	8d 76 00             	lea    esi,[esi+0x0]

c000f7d0 <KeMailboxPost(Mailbox*, void*)>:
c000f7d0:	83 ec 1c             	sub    esp,0x1c
c000f7d3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f7d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f7dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f7e0:	e8 f7 fe ff ff       	call   c000f6dc <KeMailboxTryPost(Mailbox*, void*)>
c000f7e5:	83 c4 08             	add    esp,0x8
c000f7e8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f7ec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f7f0:	83 f0 01             	xor    eax,0x1
c000f7f3:	0f b6 c0             	movzx  eax,al
c000f7f6:	85 c0                	test   eax,eax
c000f7f8:	74 26                	je     c000f820 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f7fa:	fa                   	cli    
c000f7fb:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f800:	83 c0 01             	add    eax,0x1
c000f803:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000f808:	e8 3f 6e 00 00       	call   c001664c <schedule()>
c000f80d:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f815:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f81a:	85 c0                	test   eax,eax
c000f81c:	75 02                	jne    c000f820 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f81e:	fb                   	sti    
c000f81f:	90                   	nop
c000f820:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f825:	85 c0                	test   eax,eax
c000f827:	75 03                	jne    c000f82c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f829:	eb ad                	jmp    c000f7d8 <KeMailboxPost(Mailbox*, void*)+0x8>
c000f82b:	90                   	nop
c000f82c:	90                   	nop
c000f82d:	83 c4 1c             	add    esp,0x1c
c000f830:	c3                   	ret    
c000f831:	8d 76 00             	lea    esi,[esi+0x0]

c000f834 <KeMailboxGet(Mailbox*, void**)>:
c000f834:	83 ec 1c             	sub    esp,0x1c
c000f837:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f83c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f840:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f844:	e8 f3 fe ff ff       	call   c000f73c <KeMailboxTryGet(Mailbox*, void**)>
c000f849:	83 c4 08             	add    esp,0x8
c000f84c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f850:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f854:	83 f0 01             	xor    eax,0x1
c000f857:	0f b6 c0             	movzx  eax,al
c000f85a:	85 c0                	test   eax,eax
c000f85c:	74 26                	je     c000f884 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f85e:	fa                   	cli    
c000f85f:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f864:	83 c0 01             	add    eax,0x1
c000f867:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c000f86c:	e8 db 6d 00 00       	call   c001664c <schedule()>
c000f871:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000f879:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000f87e:	85 c0                	test   eax,eax
c000f880:	75 02                	jne    c000f884 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f882:	fb                   	sti    
c000f883:	90                   	nop
c000f884:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f889:	85 c0                	test   eax,eax
c000f88b:	75 03                	jne    c000f890 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f88d:	eb ad                	jmp    c000f83c <KeMailboxGet(Mailbox*, void**)+0x8>
c000f88f:	90                   	nop
c000f890:	90                   	nop
c000f891:	83 c4 1c             	add    esp,0x1c
c000f894:	c3                   	ret    
c000f895:	8d 76 00             	lea    esi,[esi+0x0]

c000f898 <KeMailboxDestroy(Mailbox*)>:
c000f898:	83 ec 0c             	sub    esp,0xc
c000f89b:	83 ec 0c             	sub    esp,0xc
c000f89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a2:	e8 e9 fd ff ff       	call   c000f690 <free>
c000f8a7:	83 c4 10             	add    esp,0x10
c000f8aa:	90                   	nop
c000f8ab:	83 c4 0c             	add    esp,0xc
c000f8ae:	c3                   	ret    

c000f8af <KeFirstTask()>:
c000f8af:	53                   	push   ebx
c000f8b0:	83 ec 08             	sub    esp,0x8
c000f8b3:	fb                   	sti    
c000f8b4:	e8 4c a5 00 00       	call   c0019e05 <HalEnableNMI()>
c000f8b9:	83 ec 0c             	sub    esp,0xc
c000f8bc:	68 8f 7b 02 c0       	push   0xc0027b8f
c000f8c1:	e8 17 d9 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000f8c6:	c7 04 24 c4 07 00 00 	mov    DWORD PTR [esp],0x7c4
c000f8cd:	e8 ae fd ff ff       	call   c000f680 <malloc>
c000f8d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000f8d9:	89 c3                	mov    ebx,eax
c000f8db:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c000f8e0:	50                   	push   eax
c000f8e1:	68 a8 7b 02 c0       	push   0xc0027ba8
c000f8e6:	6a 01                	push   0x1
c000f8e8:	53                   	push   ebx
c000f8e9:	e8 6a 68 00 00       	call   c0016158 <Process::Process(bool, char const*, Process*, char**)>
c000f8ee:	83 c4 20             	add    esp,0x20
c000f8f1:	68 ff 00 00 00       	push   0xff
c000f8f6:	6a 00                	push   0x0
c000f8f8:	68 ab e9 00 c0       	push   0xc000e9ab
c000f8fd:	53                   	push   ebx
c000f8fe:	e8 95 6a 00 00       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c000f903:	8b 15 58 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031358
c000f909:	6a 7a                	push   0x7a
c000f90b:	6a 00                	push   0x0
c000f90d:	68 28 6d 01 c0       	push   0xc0016d28
c000f912:	52                   	push   edx
c000f913:	e8 80 6a 00 00       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c000f918:	83 c4 14             	add    esp,0x14
c000f91b:	68 30 7c 02 c0       	push   0xc0027c30
c000f920:	a3 10 13 03 c0       	mov    ds:0xc0031310,eax
c000f925:	e8 b3 d8 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000f92a:	c6 05 0d 11 03 c0 01 	mov    BYTE PTR ds:0xc003110d,0x1
c000f931:	e8 df 0b 00 00       	call   c0010515 <KeInitRand()>
c000f936:	e8 73 78 00 00       	call   c00171ae <Vm::initialise8086()>
c000f93b:	e8 f2 84 ff ff       	call   c0007e32 <Fs::initVFS()>
c000f940:	c7 04 24 f1 77 02 c0 	mov    DWORD PTR [esp],0xc00277f1
c000f947:	e8 91 d8 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000f94c:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c000f951:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c000f957:	8b 10                	mov    edx,DWORD PTR [eax]
c000f959:	6a 00                	push   0x0
c000f95b:	6a 00                	push   0x0
c000f95d:	6a 00                	push   0x0
c000f95f:	50                   	push   eax
c000f960:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f963:	83 c4 14             	add    esp,0x14
c000f966:	68 30 7c 02 c0       	push   0xc0027c30
c000f96b:	e8 6d d8 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000f970:	e8 a2 7c ff ff       	call   c0007617 <KeInitialiseSymlinks()>
c000f975:	e8 a2 eb ff ff       	call   c000e51c <KeLoadSystemEnv()>
c000f97a:	e8 dd 09 00 00       	call   c001035c <KeSetupPowerManager()>
c000f97f:	c7 04 24 b5 7b 02 c0 	mov    DWORD PTR [esp],0xc0027bb5
c000f986:	e8 52 d8 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000f98b:	8b 0d 08 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031108
c000f991:	83 c4 0c             	add    esp,0xc
c000f994:	6a 00                	push   0x0
c000f996:	51                   	push   ecx
c000f997:	68 c6 7b 02 c0       	push   0xc0027bc6
c000f99c:	e8 2a 63 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c000f9a1:	83 c4 10             	add    esp,0x10
c000f9a4:	83 ec 0c             	sub    esp,0xc
c000f9a7:	6a 02                	push   0x2
c000f9a9:	e8 5e 6d 00 00       	call   c001670c <blockTask(TaskState)>
c000f9ae:	83 c4 10             	add    esp,0x10
c000f9b1:	eb f1                	jmp    c000f9a4 <KeFirstTask()+0xf5>

c000f9b3 <KeEntryPoint>:
c000f9b3:	57                   	push   edi
c000f9b4:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9b9:	56                   	push   esi
c000f9ba:	31 f6                	xor    esi,esi
c000f9bc:	53                   	push   ebx
c000f9bd:	83 ec 20             	sub    esp,0x20
c000f9c0:	e8 db d7 ff ff       	call   c000d1a0 <KeInitialiseBootConfigurationFlags()>
c000f9c5:	89 f0                	mov    eax,esi
c000f9c7:	89 fa                	mov    edx,edi
c000f9c9:	ee                   	out    dx,al
c000f9ca:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9cf:	b0 80                	mov    al,0x80
c000f9d1:	89 da                	mov    edx,ebx
c000f9d3:	ee                   	out    dx,al
c000f9d4:	b1 03                	mov    cl,0x3
c000f9d6:	ba f8 03 00 00       	mov    edx,0x3f8
c000f9db:	88 c8                	mov    al,cl
c000f9dd:	ee                   	out    dx,al
c000f9de:	89 f0                	mov    eax,esi
c000f9e0:	89 fa                	mov    edx,edi
c000f9e2:	ee                   	out    dx,al
c000f9e3:	88 c8                	mov    al,cl
c000f9e5:	89 da                	mov    edx,ebx
c000f9e7:	ee                   	out    dx,al
c000f9e8:	b0 c7                	mov    al,0xc7
c000f9ea:	ba fa 03 00 00       	mov    edx,0x3fa
c000f9ef:	ee                   	out    dx,al
c000f9f0:	b0 0b                	mov    al,0xb
c000f9f2:	ba fc 03 00 00       	mov    edx,0x3fc
c000f9f7:	ee                   	out    dx,al
c000f9f8:	83 ec 0c             	sub    esp,0xc
c000f9fb:	68 e2 7b 02 c0       	push   0xc0027be2
c000fa00:	e8 61 75 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fa05:	e8 a4 d7 ff ff       	call   c000d1ae <KeDisplaySplashScreen()>
c000fa0a:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa0f:	05 ff 0f 00 00       	add    eax,0xfff
c000fa14:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa19:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa1c:	e8 47 04 00 00       	call   c000fe68 <Phys::physicalMemorySetup(unsigned int)>
c000fa21:	e8 c9 37 00 00       	call   c00131ef <Virt::virtualMemorySetup()>
c000fa26:	e8 d3 d6 ff ff       	call   c000d0fe <KeInitialiseAtexit()>
c000fa2b:	58                   	pop    eax
c000fa2c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fa30:	53                   	push   ebx
c000fa31:	e8 a0 3a 00 00       	call   c00134d6 <VAS::VAS()>
c000fa36:	89 1d 90 12 03 c0    	mov    DWORD PTR ds:0xc0031290,ebx
c000fa3c:	e8 77 5d 01 00       	call   c00257b8 <_init>
c000fa41:	c7 04 24 f9 7b 02 c0 	mov    DWORD PTR [esp],0xc0027bf9
c000fa48:	e8 90 d7 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000fa4d:	c7 04 24 68 01 00 00 	mov    DWORD PTR [esp],0x168
c000fa54:	e8 27 fc ff ff       	call   c000f680 <malloc>
c000fa59:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa5c:	89 c6                	mov    esi,eax
c000fa5e:	e8 fb e4 ff ff       	call   c000df5e <Computer::Computer()>
c000fa63:	8b 15 90 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031290
c000fa69:	89 35 08 11 03 c0    	mov    DWORD PTR ds:0xc0031108,esi
c000fa6f:	52                   	push   edx
c000fa70:	6a 00                	push   0x0
c000fa72:	6a 00                	push   0x0
c000fa74:	56                   	push   esi
c000fa75:	e8 28 e5 ff ff       	call   c000dfa2 <Computer::open(int, int, void*)>
c000fa7a:	83 c4 14             	add    esp,0x14
c000fa7d:	68 54 7c 02 c0       	push   0xc0027c54
c000fa82:	e8 56 d7 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000fa87:	e8 ee aa 00 00       	call   c001a57a <HalInitialiseCoprocessor()>
c000fa8c:	c7 04 24 13 7c 02 c0 	mov    DWORD PTR [esp],0xc0027c13
c000fa93:	e8 45 d7 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c000fa98:	c7 04 24 af f8 00 c0 	mov    DWORD PTR [esp],0xc000f8af
c000fa9f:	e8 60 6a 00 00       	call   c0016504 <setupMultitasking(void (*)())>
c000faa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000faa7:	e8 e0 3a 00 00       	call   c001358c <VAS::~VAS()>
c000faac:	83 c4 30             	add    esp,0x30
c000faaf:	5b                   	pop    ebx
c000fab0:	5e                   	pop    esi
c000fab1:	5f                   	pop    edi
c000fab2:	c3                   	ret    
c000fab3:	90                   	nop

c000fab4 <Mutex::Mutex()>:
c000fab4:	83 ec 0c             	sub    esp,0xc
c000fab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fabb:	83 ec 08             	sub    esp,0x8
c000fabe:	6a 01                	push   0x1
c000fac0:	50                   	push   eax
c000fac1:	e8 ee 0c 00 00       	call   c00107b4 <Semaphore::Semaphore(int)>
c000fac6:	83 c4 10             	add    esp,0x10
c000fac9:	90                   	nop
c000faca:	83 c4 0c             	add    esp,0xc
c000facd:	c3                   	ret    

c000face <KeIsKernelInPanic()>:
c000face:	a0 64 11 03 c0       	mov    al,ds:0xc0031164
c000fad3:	c3                   	ret    

c000fad4 <KePanic(char const*)>:
c000fad4:	c6 05 64 11 03 c0 01 	mov    BYTE PTR ds:0xc0031164,0x1
c000fadb:	e9 1e ab 00 00       	jmp    c001a5fe <HalPanic(char const*)>

c000fae0 <Phys::allocateDMA(unsigned long)>:
c000fae0:	55                   	push   ebp
c000fae1:	31 ed                	xor    ebp,ebp
c000fae3:	57                   	push   edi
c000fae4:	56                   	push   esi
c000fae5:	31 f6                	xor    esi,esi
c000fae7:	53                   	push   ebx
c000fae8:	31 db                	xor    ebx,ebx
c000faea:	83 ec 1c             	sub    esp,0x1c
c000faed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000faf1:	05 ff 0f 00 00       	add    eax,0xfff
c000faf6:	c1 e8 0c             	shr    eax,0xc
c000faf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fafd:	31 c0                	xor    eax,eax
c000faff:	eb 1b                	jmp    c000fb1c <Phys::allocateDMA(unsigned long)+0x3c>
c000fb01:	8d 78 01             	lea    edi,[eax+0x1]
c000fb04:	85 c0                	test   eax,eax
c000fb06:	0f 44 eb             	cmove  ebp,ebx
c000fb09:	0f 44 f3             	cmove  esi,ebx
c000fb0c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000fb10:	74 37                	je     c000fb49 <Phys::allocateDMA(unsigned long)+0x69>
c000fb12:	89 f8                	mov    eax,edi
c000fb14:	83 c3 01             	add    ebx,0x1
c000fb17:	83 fb 0f             	cmp    ebx,0xf
c000fb1a:	7f 13                	jg     c000fb2f <Phys::allocateDMA(unsigned long)+0x4f>
c000fb1c:	80 bb 80 11 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffcee80],0x0
c000fb23:	74 dc                	je     c000fb01 <Phys::allocateDMA(unsigned long)+0x21>
c000fb25:	31 c0                	xor    eax,eax
c000fb27:	83 c3 01             	add    ebx,0x1
c000fb2a:	83 fb 0f             	cmp    ebx,0xf
c000fb2d:	7e ed                	jle    c000fb1c <Phys::allocateDMA(unsigned long)+0x3c>
c000fb2f:	83 ec 0c             	sub    esp,0xc
c000fb32:	68 78 7c 02 c0       	push   0xc0027c78
c000fb37:	e8 98 ff ff ff       	call   c000fad4 <KePanic(char const*)>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	31 c0                	xor    eax,eax
c000fb41:	83 c4 1c             	add    esp,0x1c
c000fb44:	5b                   	pop    ebx
c000fb45:	5e                   	pop    esi
c000fb46:	5f                   	pop    edi
c000fb47:	5d                   	pop    ebp
c000fb48:	c3                   	ret    
c000fb49:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb4d:	89 f2                	mov    edx,esi
c000fb4f:	c1 fa 04             	sar    edx,0x4
c000fb52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb56:	01 f1                	add    ecx,esi
c000fb58:	8d 51 0e             	lea    edx,[ecx+0xe]
c000fb5b:	83 e9 01             	sub    ecx,0x1
c000fb5e:	0f 48 ca             	cmovs  ecx,edx
c000fb61:	c1 f9 04             	sar    ecx,0x4
c000fb64:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000fb68:	74 06                	je     c000fb70 <Phys::allocateDMA(unsigned long)+0x90>
c000fb6a:	89 eb                	mov    ebx,ebp
c000fb6c:	31 c0                	xor    eax,eax
c000fb6e:	eb b7                	jmp    c000fb27 <Phys::allocateDMA(unsigned long)+0x47>
c000fb70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb74:	85 d2                	test   edx,edx
c000fb76:	74 17                	je     c000fb8f <Phys::allocateDMA(unsigned long)+0xaf>
c000fb78:	8d 96 80 11 03 c0    	lea    edx,[esi-0x3ffcee80]
c000fb7e:	8d 84 06 81 11 03 c0 	lea    eax,[esi+eax*1-0x3ffcee7f]
c000fb85:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb88:	83 c2 01             	add    edx,0x1
c000fb8b:	39 d0                	cmp    eax,edx
c000fb8d:	75 f6                	jne    c000fb85 <Phys::allocateDMA(unsigned long)+0xa5>
c000fb8f:	8b 15 78 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031178
c000fb95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb9d:	01 c2                	add    edx,eax
c000fb9f:	89 15 78 11 03 c0    	mov    DWORD PTR ds:0xc0031178,edx
c000fba5:	85 c9                	test   ecx,ecx
c000fba7:	74 17                	je     c000fbc0 <Phys::allocateDMA(unsigned long)+0xe0>
c000fba9:	83 ec 0c             	sub    esp,0xc
c000fbac:	68 78 7c 02 c0       	push   0xc0027c78
c000fbb1:	e8 1e ff ff ff       	call   c000fad4 <KePanic(char const*)>
c000fbb6:	83 c4 10             	add    esp,0x10
c000fbb9:	89 f8                	mov    eax,edi
c000fbbb:	e9 54 ff ff ff       	jmp    c000fb14 <Phys::allocateDMA(unsigned long)+0x34>
c000fbc0:	c1 e6 0c             	shl    esi,0xc
c000fbc3:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000fbc9:	e9 73 ff ff ff       	jmp    c000fb41 <Phys::allocateDMA(unsigned long)+0x61>

c000fbce <Phys::freeDMA(unsigned long, unsigned long)>:
c000fbce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbd2:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000fbd8:	a1 78 11 03 c0       	mov    eax,ds:0xc0031178
c000fbdd:	c1 ea 0c             	shr    edx,0xc
c000fbe0:	29 d0                	sub    eax,edx
c000fbe2:	a3 78 11 03 c0       	mov    ds:0xc0031178,eax
c000fbe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbeb:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000fbf0:	c1 e8 0c             	shr    eax,0xc
c000fbf3:	85 d2                	test   edx,edx
c000fbf5:	74 11                	je     c000fc08 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000fbf7:	05 80 11 03 c0       	add    eax,0xc0031180
c000fbfc:	01 c2                	add    edx,eax
c000fbfe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fc01:	83 c0 01             	add    eax,0x1
c000fc04:	39 d0                	cmp    eax,edx
c000fc06:	75 f6                	jne    c000fbfe <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000fc08:	c3                   	ret    

c000fc09 <Phys::setPageState(unsigned long, bool)>:
c000fc09:	57                   	push   edi
c000fc0a:	56                   	push   esi
c000fc0b:	8b 35 38 b2 02 c0    	mov    esi,DWORD PTR ds:0xc002b238
c000fc11:	53                   	push   ebx
c000fc12:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000fc17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc1f:	89 ca                	mov    edx,ecx
c000fc21:	83 e1 07             	and    ecx,0x7
c000fc24:	c1 ea 03             	shr    edx,0x3
c000fc27:	0f b6 c0             	movzx  eax,al
c000fc2a:	d3 c3                	rol    ebx,cl
c000fc2c:	01 d6                	add    esi,edx
c000fc2e:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000fc31:	d3 e0                	shl    eax,cl
c000fc33:	21 fb                	and    ebx,edi
c000fc35:	88 1e                	mov    BYTE PTR [esi],bl
c000fc37:	8b 1d 38 b2 02 c0    	mov    ebx,DWORD PTR ds:0xc002b238
c000fc3d:	01 da                	add    edx,ebx
c000fc3f:	8a 0a                	mov    cl,BYTE PTR [edx]
c000fc41:	09 c8                	or     eax,ecx
c000fc43:	88 02                	mov    BYTE PTR [edx],al
c000fc45:	5b                   	pop    ebx
c000fc46:	5e                   	pop    esi
c000fc47:	5f                   	pop    edi
c000fc48:	c3                   	ret    

c000fc49 <Phys::getPageState(unsigned long)>:
c000fc49:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc4d:	8b 15 38 b2 02 c0    	mov    edx,DWORD PTR ds:0xc002b238
c000fc53:	89 c8                	mov    eax,ecx
c000fc55:	83 e1 07             	and    ecx,0x7
c000fc58:	c1 e8 03             	shr    eax,0x3
c000fc5b:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc5f:	d3 f8                	sar    eax,cl
c000fc61:	83 e0 01             	and    eax,0x1
c000fc64:	c3                   	ret    

c000fc65 <Phys::freePage(unsigned long)>:
c000fc65:	53                   	push   ebx
c000fc66:	83 ec 08             	sub    esp,0x8
c000fc69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc6d:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000fc73:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000fc79:	76 41                	jbe    c000fcbc <Phys::freePage(unsigned long)+0x57>
c000fc7b:	c1 e8 0c             	shr    eax,0xc
c000fc7e:	50                   	push   eax
c000fc7f:	89 c3                	mov    ebx,eax
c000fc81:	e8 c3 ff ff ff       	call   c000fc49 <Phys::getPageState(unsigned long)>
c000fc86:	5a                   	pop    edx
c000fc87:	84 c0                	test   al,al
c000fc89:	74 20                	je     c000fcab <Phys::freePage(unsigned long)+0x46>
c000fc8b:	a1 78 11 03 c0       	mov    eax,ds:0xc0031178
c000fc90:	83 ec 08             	sub    esp,0x8
c000fc93:	6a 00                	push   0x0
c000fc95:	53                   	push   ebx
c000fc96:	83 e8 01             	sub    eax,0x1
c000fc99:	a3 78 11 03 c0       	mov    ds:0xc0031178,eax
c000fc9e:	e8 66 ff ff ff       	call   c000fc09 <Phys::setPageState(unsigned long, bool)>
c000fca3:	83 c4 10             	add    esp,0x10
c000fca6:	83 c4 08             	add    esp,0x8
c000fca9:	5b                   	pop    ebx
c000fcaa:	c3                   	ret    
c000fcab:	c7 44 24 10 8a 7c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0027c8a
c000fcb3:	83 c4 08             	add    esp,0x8
c000fcb6:	5b                   	pop    ebx
c000fcb7:	e9 18 fe ff ff       	jmp    c000fad4 <KePanic(char const*)>
c000fcbc:	68 00 10 00 00       	push   0x1000
c000fcc1:	50                   	push   eax
c000fcc2:	e8 07 ff ff ff       	call   c000fbce <Phys::freeDMA(unsigned long, unsigned long)>
c000fcc7:	59                   	pop    ecx
c000fcc8:	5b                   	pop    ebx
c000fcc9:	83 c4 08             	add    esp,0x8
c000fccc:	5b                   	pop    ebx
c000fccd:	c3                   	ret    

c000fcce <Phys::allocatePage()>:
c000fcce:	56                   	push   esi
c000fccf:	53                   	push   ebx
c000fcd0:	83 ec 14             	sub    esp,0x14
c000fcd3:	8b 35 6c 11 03 c0    	mov    esi,DWORD PTR ds:0xc003116c
c000fcd9:	89 f3                	mov    ebx,esi
c000fcdb:	eb 18                	jmp    c000fcf5 <Phys::allocatePage()+0x27>
c000fcdd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fce3:	75 0c                	jne    c000fcf1 <Phys::allocatePage()+0x23>
c000fce5:	c7 05 6c 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003116c,0x0
c000fcef:	31 db                	xor    ebx,ebx
c000fcf1:	39 de                	cmp    esi,ebx
c000fcf3:	74 5b                	je     c000fd50 <Phys::allocatePage()+0x82>
c000fcf5:	53                   	push   ebx
c000fcf6:	e8 4e ff ff ff       	call   c000fc49 <Phys::getPageState(unsigned long)>
c000fcfb:	59                   	pop    ecx
c000fcfc:	84 c0                	test   al,al
c000fcfe:	74 29                	je     c000fd29 <Phys::allocatePage()+0x5b>
c000fd00:	83 c3 01             	add    ebx,0x1
c000fd03:	89 1d 6c 11 03 c0    	mov    DWORD PTR ds:0xc003116c,ebx
c000fd09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd0f:	76 cc                	jbe    c000fcdd <Phys::allocatePage()+0xf>
c000fd11:	83 ec 0c             	sub    esp,0xc
c000fd14:	68 a0 7c 02 c0       	push   0xc0027ca0
c000fd19:	e8 b6 fd ff ff       	call   c000fad4 <KePanic(char const*)>
c000fd1e:	8b 1d 6c 11 03 c0    	mov    ebx,DWORD PTR ds:0xc003116c
c000fd24:	83 c4 10             	add    esp,0x10
c000fd27:	eb b4                	jmp    c000fcdd <Phys::allocatePage()+0xf>
c000fd29:	6a 01                	push   0x1
c000fd2b:	53                   	push   ebx
c000fd2c:	e8 d8 fe ff ff       	call   c000fc09 <Phys::setPageState(unsigned long, bool)>
c000fd31:	8b 1d 78 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031178
c000fd37:	5e                   	pop    esi
c000fd38:	a1 6c 11 03 c0       	mov    eax,ds:0xc003116c
c000fd3d:	5a                   	pop    edx
c000fd3e:	83 c3 01             	add    ebx,0x1
c000fd41:	89 1d 78 11 03 c0    	mov    DWORD PTR ds:0xc0031178,ebx
c000fd47:	c1 e0 0c             	shl    eax,0xc
c000fd4a:	83 c4 14             	add    esp,0x14
c000fd4d:	5b                   	pop    ebx
c000fd4e:	5e                   	pop    esi
c000fd4f:	c3                   	ret    
c000fd50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fd55:	83 ec 0c             	sub    esp,0xc
c000fd58:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fd5b:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c000fd61:	51                   	push   ecx
c000fd62:	e8 85 43 00 00       	call   c00140ec <VAS::scanForEviction()>
c000fd67:	83 c4 10             	add    esp,0x10
c000fd6a:	85 c0                	test   eax,eax
c000fd6c:	75 1b                	jne    c000fd89 <Phys::allocatePage()+0xbb>
c000fd6e:	83 ec 0c             	sub    esp,0xc
c000fd71:	68 e8 7c 02 c0       	push   0xc0027ce8
c000fd76:	e8 59 fd ff ff       	call   c000fad4 <KePanic(char const*)>
c000fd7b:	8b 1d 6c 11 03 c0    	mov    ebx,DWORD PTR ds:0xc003116c
c000fd81:	83 c4 10             	add    esp,0x10
c000fd84:	e9 6c ff ff ff       	jmp    c000fcf5 <Phys::allocatePage()+0x27>
c000fd89:	8b 15 78 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031178
c000fd8f:	83 ec 08             	sub    esp,0x8
c000fd92:	6a 01                	push   0x1
c000fd94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd98:	83 c2 01             	add    edx,0x1
c000fd9b:	89 15 78 11 03 c0    	mov    DWORD PTR ds:0xc0031178,edx
c000fda1:	89 c2                	mov    edx,eax
c000fda3:	c1 ea 0c             	shr    edx,0xc
c000fda6:	52                   	push   edx
c000fda7:	e8 5d fe ff ff       	call   c000fc09 <Phys::setPageState(unsigned long, bool)>
c000fdac:	83 c4 10             	add    esp,0x10
c000fdaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdb3:	eb 95                	jmp    c000fd4a <Phys::allocatePage()+0x7c>

c000fdb5 <Phys::allocateContiguousPages(int)>:
c000fdb5:	57                   	push   edi
c000fdb6:	56                   	push   esi
c000fdb7:	53                   	push   ebx
c000fdb8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fdbc:	fa                   	cli    
c000fdbd:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c000fdc3:	83 ec 0c             	sub    esp,0xc
c000fdc6:	31 db                	xor    ebx,ebx
c000fdc8:	68 18 7d 02 c0       	push   0xc0027d18
c000fdcd:	83 c2 01             	add    edx,0x1
c000fdd0:	89 15 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,edx
c000fdd6:	e8 8b 71 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fddb:	83 c4 10             	add    esp,0x10
c000fdde:	85 db                	test   ebx,ebx
c000fde0:	75 11                	jne    c000fdf3 <Phys::allocateContiguousPages(int)+0x3e>
c000fde2:	e8 e7 fe ff ff       	call   c000fcce <Phys::allocatePage()>
c000fde7:	83 ff 01             	cmp    edi,0x1
c000fdea:	89 c6                	mov    esi,eax
c000fdec:	74 21                	je     c000fe0f <Phys::allocateContiguousPages(int)+0x5a>
c000fdee:	bb 01 00 00 00       	mov    ebx,0x1
c000fdf3:	e8 d6 fe ff ff       	call   c000fcce <Phys::allocatePage()>
c000fdf8:	89 da                	mov    edx,ebx
c000fdfa:	c1 e2 0c             	shl    edx,0xc
c000fdfd:	01 f2                	add    edx,esi
c000fdff:	39 c2                	cmp    edx,eax
c000fe01:	74 24                	je     c000fe27 <Phys::allocateContiguousPages(int)+0x72>
c000fe03:	83 ff 01             	cmp    edi,0x1
c000fe06:	bb 01 00 00 00       	mov    ebx,0x1
c000fe0b:	89 c6                	mov    esi,eax
c000fe0d:	75 e4                	jne    c000fdf3 <Phys::allocateContiguousPages(int)+0x3e>
c000fe0f:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c000fe17:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c000fe1c:	85 c0                	test   eax,eax
c000fe1e:	75 01                	jne    c000fe21 <Phys::allocateContiguousPages(int)+0x6c>
c000fe20:	fb                   	sti    
c000fe21:	5b                   	pop    ebx
c000fe22:	89 f0                	mov    eax,esi
c000fe24:	5e                   	pop    esi
c000fe25:	5f                   	pop    edi
c000fe26:	c3                   	ret    
c000fe27:	83 c3 01             	add    ebx,0x1
c000fe2a:	39 fb                	cmp    ebx,edi
c000fe2c:	75 b0                	jne    c000fdde <Phys::allocateContiguousPages(int)+0x29>
c000fe2e:	eb df                	jmp    c000fe0f <Phys::allocateContiguousPages(int)+0x5a>

c000fe30 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fe30:	56                   	push   esi
c000fe31:	53                   	push   ebx
c000fe32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe36:	39 1d 70 11 03 c0    	cmp    DWORD PTR ds:0xc0031170,ebx
c000fe3c:	73 06                	jae    c000fe44 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fe3e:	89 1d 70 11 03 c0    	mov    DWORD PTR ds:0xc0031170,ebx
c000fe44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe48:	c1 eb 0c             	shr    ebx,0xc
c000fe4b:	c1 e8 0c             	shr    eax,0xc
c000fe4e:	39 d8                	cmp    eax,ebx
c000fe50:	73 13                	jae    c000fe65 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fe52:	6a 00                	push   0x0
c000fe54:	50                   	push   eax
c000fe55:	8d 70 01             	lea    esi,[eax+0x1]
c000fe58:	e8 ac fd ff ff       	call   c000fc09 <Phys::setPageState(unsigned long, bool)>
c000fe5d:	39 f3                	cmp    ebx,esi
c000fe5f:	89 f0                	mov    eax,esi
c000fe61:	5a                   	pop    edx
c000fe62:	59                   	pop    ecx
c000fe63:	75 ed                	jne    c000fe52 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fe65:	5b                   	pop    ebx
c000fe66:	5e                   	pop    esi
c000fe67:	c3                   	ret    

c000fe68 <Phys::physicalMemorySetup(unsigned int)>:
c000fe68:	55                   	push   ebp
c000fe69:	57                   	push   edi
c000fe6a:	56                   	push   esi
c000fe6b:	53                   	push   ebx
c000fe6c:	83 ec 40             	sub    esp,0x40
c000fe6f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000fe73:	6a 10                	push   0x10
c000fe75:	6a 00                	push   0x0
c000fe77:	68 80 11 03 c0       	push   0xc0031180
c000fe7c:	e8 6f 06 ff ff       	call   c00004f0 <memset>
c000fe81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000fe87:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c000fe8d:	31 db                	xor    ebx,ebx
c000fe8f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000fe93:	5a                   	pop    edx
c000fe94:	59                   	pop    ecx
c000fe95:	50                   	push   eax
c000fe96:	68 a5 7c 02 c0       	push   0xc0027ca5
c000fe9b:	e8 c6 70 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000fea0:	83 c4 10             	add    esp,0x10
c000fea3:	83 ec 08             	sub    esp,0x8
c000fea6:	6a 01                	push   0x1
c000fea8:	53                   	push   ebx
c000fea9:	83 c3 01             	add    ebx,0x1
c000feac:	e8 58 fd ff ff       	call   c000fc09 <Phys::setPageState(unsigned long, bool)>
c000feb1:	83 c4 10             	add    esp,0x10
c000feb4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000feba:	75 e7                	jne    c000fea3 <Phys::physicalMemorySetup(unsigned int)+0x3b>
c000febc:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000fec3:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000feca:	c1 e0 08             	shl    eax,0x8
c000fecd:	09 c2                	or     edx,eax
c000fecf:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000fed3:	0f 84 ab 01 00 00    	je     c0010084 <Phys::physicalMemorySetup(unsigned int)+0x21c>
c000fed9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fee1:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fee6:	e9 82 00 00 00       	jmp    c000ff6d <Phys::physicalMemorySetup(unsigned int)+0x105>
c000feeb:	ba 00 00 08 00       	mov    edx,0x80000
c000fef0:	89 c1                	mov    ecx,eax
c000fef2:	39 f2                	cmp    edx,esi
c000fef4:	19 f9                	sbb    ecx,edi
c000fef6:	0f 82 c4 00 00 00    	jb     c000ffc0 <Phys::physicalMemorySetup(unsigned int)+0x158>
c000fefc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff00:	89 c5                	mov    ebp,eax
c000ff02:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000ff06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff0a:	19 cd                	sbb    ebp,ecx
c000ff0c:	0f 83 b3 00 00 00    	jae    c000ffc5 <Phys::physicalMemorySetup(unsigned int)+0x15d>
c000ff12:	89 d6                	mov    esi,edx
c000ff14:	ba 00 00 0a 00       	mov    edx,0xa0000
c000ff19:	39 f2                	cmp    edx,esi
c000ff1b:	89 cf                	mov    edi,ecx
c000ff1d:	19 c8                	sbb    eax,ecx
c000ff1f:	73 07                	jae    c000ff28 <Phys::physicalMemorySetup(unsigned int)+0xc0>
c000ff21:	be 00 00 0a 00       	mov    esi,0xa0000
c000ff26:	31 ff                	xor    edi,edi
c000ff28:	89 f2                	mov    edx,esi
c000ff2a:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000ff2f:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000ff35:	89 f9                	mov    ecx,edi
c000ff37:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ff3b:	83 d1 ff             	adc    ecx,0xffffffff
c000ff3e:	39 d0                	cmp    eax,edx
c000ff40:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000ff44:	b8 00 00 00 00       	mov    eax,0x0
c000ff49:	19 c8                	sbb    eax,ecx
c000ff4b:	0f 82 c8 00 00 00    	jb     c0010019 <Phys::physicalMemorySetup(unsigned int)+0x1b1>
c000ff51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff55:	83 c3 18             	add    ebx,0x18
c000ff58:	83 c0 01             	add    eax,0x1
c000ff5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ff5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff63:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000ff67:	0f 84 0f 01 00 00    	je     c001007c <Phys::physicalMemorySetup(unsigned int)+0x214>
c000ff6d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000ff6f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ff72:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000ff75:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ff78:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ff7c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ff7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff83:	01 f0                	add    eax,esi
c000ff85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff89:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ff8d:	55                   	push   ebp
c000ff8e:	11 fa                	adc    edx,edi
c000ff90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ff98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff9c:	50                   	push   eax
c000ff9d:	56                   	push   esi
c000ff9e:	68 78 7d 02 c0       	push   0xc0027d78
c000ffa3:	e8 be 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c000ffa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffac:	83 c4 10             	add    esp,0x10
c000ffaf:	09 f8                	or     eax,edi
c000ffb1:	0f 85 c5 00 00 00    	jne    c001007c <Phys::physicalMemorySetup(unsigned int)+0x214>
c000ffb7:	83 fd 01             	cmp    ebp,0x1
c000ffba:	0f 84 2b ff ff ff    	je     c000feeb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000ffc0:	83 fd 01             	cmp    ebp,0x1
c000ffc3:	75 8c                	jne    c000ff51 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c000ffc5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ffc9:	31 d2                	xor    edx,edx
c000ffcb:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000ffcf:	89 c8                	mov    eax,ecx
c000ffd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffd5:	19 d1                	sbb    ecx,edx
c000ffd7:	0f 82 74 ff ff ff    	jb     c000ff51 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c000ffdd:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000ffe2:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000ffe6:	b9 00 00 00 00       	mov    ecx,0x0
c000ffeb:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000ffef:	0f 83 5c ff ff ff    	jae    c000ff51 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c000fff5:	39 c6                	cmp    esi,eax
c000fff7:	19 d7                	sbb    edi,edx
c000fff9:	73 2a                	jae    c0010025 <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c000fffb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ffff:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010003:	29 c7                	sub    edi,eax
c0010005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010009:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001000d:	19 d5                	sbb    ebp,edx
c001000f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010013:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010017:	eb 0c                	jmp    c0010025 <Phys::physicalMemorySetup(unsigned int)+0x1bd>
c0010019:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001001d:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0010025:	83 ec 04             	sub    esp,0x4
c0010028:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001002c:	56                   	push   esi
c001002d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010031:	57                   	push   edi
c0010032:	68 9c 7d 02 c0       	push   0xc0027d9c
c0010037:	e8 2a 6f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001003c:	5a                   	pop    edx
c001003d:	59                   	pop    ecx
c001003e:	56                   	push   esi
c001003f:	57                   	push   edi
c0010040:	e8 eb fd ff ff       	call   c000fe30 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010045:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010049:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001004d:	83 c4 0c             	add    esp,0xc
c0010050:	8b 3d 7c 11 03 c0    	mov    edi,DWORD PTR ds:0xc003117c
c0010056:	0f ac d0 0c          	shrd   eax,edx,0xc
c001005a:	01 f8                	add    eax,edi
c001005c:	a3 7c 11 03 c0       	mov    ds:0xc003117c,eax
c0010061:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010068:	52                   	push   edx
c0010069:	50                   	push   eax
c001006a:	68 cb 7c 02 c0       	push   0xc0027ccb
c001006f:	e8 f2 6e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010074:	83 c4 10             	add    esp,0x10
c0010077:	e9 d5 fe ff ff       	jmp    c000ff51 <Phys::physicalMemorySetup(unsigned int)+0xe9>
c001007c:	83 c4 3c             	add    esp,0x3c
c001007f:	5b                   	pop    ebx
c0010080:	5e                   	pop    esi
c0010081:	5f                   	pop    edi
c0010082:	5d                   	pop    ebp
c0010083:	c3                   	ret    
c0010084:	c7 44 24 50 bd 7c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0027cbd
c001008c:	83 c4 3c             	add    esp,0x3c
c001008f:	5b                   	pop    ebx
c0010090:	5e                   	pop    esi
c0010091:	5f                   	pop    edi
c0010092:	5d                   	pop    ebp
c0010093:	e9 3c fa ff ff       	jmp    c000fad4 <KePanic(char const*)>

c0010098 <Pipe::isAtty()>:
c0010098:	31 c0                	xor    eax,eax
c001009a:	c3                   	ret    
c001009b:	90                   	nop

c001009c <Pipe::~Pipe()>:
c001009c:	83 ec 0c             	sub    esp,0xc
c001009f:	ba 08 7e 02 c0       	mov    edx,0xc0027e08
c00100a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a8:	89 10                	mov    DWORD PTR [eax],edx
c00100aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ae:	83 ec 0c             	sub    esp,0xc
c00100b1:	50                   	push   eax
c00100b2:	e8 f7 2c 00 00       	call   c0012dae <UnixFile::~UnixFile()>
c00100b7:	83 c4 10             	add    esp,0x10
c00100ba:	90                   	nop
c00100bb:	83 c4 0c             	add    esp,0xc
c00100be:	c3                   	ret    
c00100bf:	90                   	nop

c00100c0 <Pipe::~Pipe()>:
c00100c0:	83 ec 0c             	sub    esp,0xc
c00100c3:	83 ec 0c             	sub    esp,0xc
c00100c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ca:	e8 cd ff ff ff       	call   c001009c <Pipe::~Pipe()>
c00100cf:	83 c4 10             	add    esp,0x10
c00100d2:	83 ec 08             	sub    esp,0x8
c00100d5:	6a 20                	push   0x20
c00100d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100db:	e8 a8 d1 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	83 c4 0c             	add    esp,0xc
c00100e6:	c3                   	ret    
c00100e7:	90                   	nop

c00100e8 <Pipe::write(unsigned long long, void*, int*)>:
c00100e8:	55                   	push   ebp
c00100e9:	57                   	push   edi
c00100ea:	56                   	push   esi
c00100eb:	53                   	push   ebx
c00100ec:	83 ec 1c             	sub    esp,0x1c
c00100ef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00100f3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00100f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00100fb:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00100fe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010102:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010105:	89 04 24             	mov    DWORD PTR [esp],eax
c0010108:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001010c:	89 d8                	mov    eax,ebx
c001010e:	89 d6                	mov    esi,edx
c0010110:	89 d7                	mov    edi,edx
c0010112:	c1 ff 1f             	sar    edi,0x1f
c0010115:	03 34 24             	add    esi,DWORD PTR [esp]
c0010118:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001011c:	c1 f8 1f             	sar    eax,0x1f
c001011f:	39 f3                	cmp    ebx,esi
c0010121:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010125:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010129:	19 f8                	sbb    eax,edi
c001012b:	b8 01 00 00 00       	mov    eax,0x1
c0010130:	72 72                	jb     c00101a4 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0010132:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010135:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010139:	01 d0                	add    eax,edx
c001013b:	99                   	cdq    
c001013c:	f7 fb                	idiv   ebx
c001013e:	89 d8                	mov    eax,ebx
c0010140:	29 d0                	sub    eax,edx
c0010142:	89 d6                	mov    esi,edx
c0010144:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010147:	89 c3                	mov    ebx,eax
c0010149:	c1 fb 1f             	sar    ebx,0x1f
c001014c:	39 c2                	cmp    edx,eax
c001014e:	19 df                	sbb    edi,ebx
c0010150:	bb 00 00 00 00       	mov    ebx,0x0
c0010155:	72 04                	jb     c001015b <Pipe::write(unsigned long long, void*, int*)+0x73>
c0010157:	89 d3                	mov    ebx,edx
c0010159:	29 c3                	sub    ebx,eax
c001015b:	89 d0                	mov    eax,edx
c001015d:	29 d8                	sub    eax,ebx
c001015f:	74 0d                	je     c001016e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0010161:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010164:	89 c1                	mov    ecx,eax
c0010166:	01 f7                	add    edi,esi
c0010168:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001016c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001016e:	85 db                	test   ebx,ebx
c0010170:	74 0d                	je     c001017f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0010172:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010176:	89 d9                	mov    ecx,ebx
c0010178:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001017b:	89 c6                	mov    esi,eax
c001017d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001017f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010182:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010187:	75 10                	jne    c0010199 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0010189:	83 ec 0c             	sub    esp,0xc
c001018c:	68 c5 7d 02 c0       	push   0xc0027dc5
c0010191:	e8 3e f9 ff ff       	call   c000fad4 <KePanic(char const*)>
c0010196:	83 c4 10             	add    esp,0x10
c0010199:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001019d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00101a0:	89 08                	mov    DWORD PTR [eax],ecx
c00101a2:	31 c0                	xor    eax,eax
c00101a4:	83 c4 1c             	add    esp,0x1c
c00101a7:	5b                   	pop    ebx
c00101a8:	5e                   	pop    esi
c00101a9:	5f                   	pop    edi
c00101aa:	5d                   	pop    ebp
c00101ab:	c3                   	ret    

c00101ac <Pipe::read(unsigned long long, void*, int*)>:
c00101ac:	55                   	push   ebp
c00101ad:	57                   	push   edi
c00101ae:	56                   	push   esi
c00101af:	53                   	push   ebx
c00101b0:	83 ec 1c             	sub    esp,0x1c
c00101b3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00101b7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00101bb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00101bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00101c2:	89 c8                	mov    eax,ecx
c00101c4:	99                   	cdq    
c00101c5:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00101c9:	74 27                	je     c00101f2 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00101cb:	39 f9                	cmp    ecx,edi
c00101cd:	89 d1                	mov    ecx,edx
c00101cf:	19 f1                	sbb    ecx,esi
c00101d1:	73 1f                	jae    c00101f2 <Pipe::read(unsigned long long, void*, int*)+0x46>
c00101d3:	fa                   	cli    
c00101d4:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c00101da:	e8 6d 64 00 00       	call   c001664c <schedule()>
c00101df:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c00101e6:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c00101ed:	75 d0                	jne    c00101bf <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101ef:	fb                   	sti    
c00101f0:	eb cd                	jmp    c00101bf <Pipe::read(unsigned long long, void*, int*)+0x13>
c00101f2:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00101f6:	39 f8                	cmp    eax,edi
c00101f8:	89 d1                	mov    ecx,edx
c00101fa:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00101fe:	19 f1                	sbb    ecx,esi
c0010200:	73 08                	jae    c001020a <Pipe::read(unsigned long long, void*, int*)+0x5e>
c0010202:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010206:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001020a:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c001020d:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010210:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0010214:	29 f7                	sub    edi,esi
c0010216:	89 f8                	mov    eax,edi
c0010218:	99                   	cdq    
c0010219:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001021d:	89 d0                	mov    eax,edx
c001021f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010223:	19 c2                	sbb    edx,eax
c0010225:	89 f8                	mov    eax,edi
c0010227:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c001022c:	89 ea                	mov    edx,ebp
c001022e:	29 c2                	sub    edx,eax
c0010230:	85 c0                	test   eax,eax
c0010232:	74 0b                	je     c001023f <Pipe::read(unsigned long long, void*, int*)+0x93>
c0010234:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010237:	89 c1                	mov    ecx,eax
c0010239:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001023d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001023f:	85 d2                	test   edx,edx
c0010241:	74 0d                	je     c0010250 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c0010243:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010247:	89 d1                	mov    ecx,edx
c0010249:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001024c:	89 c7                	mov    edi,eax
c001024e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010250:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010253:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010256:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010259:	99                   	cdq    
c001025a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001025e:	89 f7                	mov    edi,esi
c0010260:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010264:	c1 ff 1f             	sar    edi,0x1f
c0010267:	57                   	push   edi
c0010268:	56                   	push   esi
c0010269:	52                   	push   edx
c001026a:	50                   	push   eax
c001026b:	e8 54 1b 01 00       	call   c0021dc4 <__umoddi3>
c0010270:	83 c4 10             	add    esp,0x10
c0010273:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010278:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001027b:	75 10                	jne    c001028d <Pipe::read(unsigned long long, void*, int*)+0xe1>
c001027d:	83 ec 0c             	sub    esp,0xc
c0010280:	68 e2 7d 02 c0       	push   0xc0027de2
c0010285:	e8 4a f8 ff ff       	call   c000fad4 <KePanic(char const*)>
c001028a:	83 c4 10             	add    esp,0x10
c001028d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010291:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010295:	89 10                	mov    DWORD PTR [eax],edx
c0010297:	83 c4 1c             	add    esp,0x1c
c001029a:	31 c0                	xor    eax,eax
c001029c:	5b                   	pop    ebx
c001029d:	5e                   	pop    esi
c001029e:	5f                   	pop    edi
c001029f:	5d                   	pop    ebp
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <Pipe::Pipe(int)>:
c00102a2:	83 ec 0c             	sub    esp,0xc
c00102a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a9:	83 ec 08             	sub    esp,0x8
c00102ac:	6a 00                	push   0x0
c00102ae:	50                   	push   eax
c00102af:	e8 14 29 00 00       	call   c0012bc8 <UnixFile::UnixFile(int)>
c00102b4:	83 c4 10             	add    esp,0x10
c00102b7:	ba 08 7e 02 c0       	mov    edx,0xc0027e08
c00102bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102c0:	89 10                	mov    DWORD PTR [eax],edx
c00102c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00102ca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00102d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102dc:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00102e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102e7:	83 ec 0c             	sub    esp,0xc
c00102ea:	50                   	push   eax
c00102eb:	e8 90 f3 ff ff       	call   c000f680 <malloc>
c00102f0:	83 c4 10             	add    esp,0x10
c00102f3:	89 c2                	mov    edx,eax
c00102f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00102fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010300:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010304:	90                   	nop
c0010305:	83 c4 0c             	add    esp,0xc
c0010308:	c3                   	ret    

c0010309 <KePowerThread(void*)>:
c0010309:	83 ec 0c             	sub    esp,0xc
c001030c:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0010313:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c001031a:	75 01                	jne    c001031d <KePowerThread(void*)+0x14>
c001031c:	fb                   	sti    
c001031d:	50                   	push   eax
c001031e:	50                   	push   eax
c001031f:	6a 00                	push   0x0
c0010321:	6a 0a                	push   0xa
c0010323:	c6 05 ac 11 03 c0 00 	mov    BYTE PTR ds:0xc00311ac,0x0
c001032a:	e8 29 65 00 00       	call   c0016858 <sleep(unsigned long long)>
c001032f:	83 c4 10             	add    esp,0x10
c0010332:	83 05 e4 11 03 c0 0a 	add    DWORD PTR ds:0xc00311e4,0xa
c0010339:	eb e2                	jmp    c001031d <KePowerThread(void*)+0x14>

c001033b <KeChangePowerSettings(PowerSettings)>:
c001033b:	57                   	push   edi
c001033c:	b9 09 00 00 00       	mov    ecx,0x9
c0010341:	56                   	push   esi
c0010342:	bf c0 11 03 c0       	mov    edi,0xc00311c0
c0010347:	fc                   	cld    
c0010348:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001034c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001034e:	5e                   	pop    esi
c001034f:	5f                   	pop    edi
c0010350:	c3                   	ret    

c0010351 <KeUserIOReceived()>:
c0010351:	c7 05 e4 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311e4,0x0
c001035b:	c3                   	ret    

c001035c <KeSetupPowerManager()>:
c001035c:	83 ec 0c             	sub    esp,0xc
c001035f:	68 f0 00 00 00       	push   0xf0
c0010364:	6a 00                	push   0x0
c0010366:	68 09 03 01 c0       	push   0xc0010309
c001036b:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0010371:	c7 05 e4 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311e4,0x0
c001037b:	c6 05 ac 11 03 c0 00 	mov    BYTE PTR ds:0xc00311ac,0x0
c0010382:	e8 11 60 00 00       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c0010387:	c7 05 c0 11 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00311c0,0x2
c0010391:	c7 05 c4 11 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00311c4,0x1
c001039b:	c7 05 c8 11 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00311c8,0x3
c00103a5:	c7 05 cc 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311cc,0x0
c00103af:	c7 05 d8 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311d8,0x0
c00103b9:	c7 05 d0 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311d0,0x0
c00103c3:	c7 05 dc 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311dc,0x0
c00103cd:	c7 05 d4 11 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00311d4,0x3c
c00103d7:	c7 05 e0 11 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00311e0,0x3c
c00103e1:	83 c4 1c             	add    esp,0x1c
c00103e4:	c3                   	ret    

c00103e5 <KePrepareShutdown()>:
c00103e5:	83 ec 0c             	sub    esp,0xc
c00103e8:	e8 67 cd ff ff       	call   c000d154 <KeExecuteAtexit()>
c00103ed:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c00103f2:	83 ec 0c             	sub    esp,0xc
c00103f5:	ff b0 64 01 00 00    	push   DWORD PTR [eax+0x164]
c00103fb:	e8 5e 98 ff ff       	call   c0009c5e <Device::closeAll()>
c0010400:	83 c4 1c             	add    esp,0x1c
c0010403:	c3                   	ret    

c0010404 <KeRegisterShutdownHandler(void (*)())>:
c0010404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010408:	a3 a8 11 03 c0       	mov    ds:0xc00311a8,eax
c001040d:	c3                   	ret    

c001040e <KeRegisterRestartHandler(void (*)())>:
c001040e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010412:	a3 a4 11 03 c0       	mov    ds:0xc00311a4,eax
c0010417:	c3                   	ret    

c0010418 <KeRegisterSleepHandler(void (*)())>:
c0010418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041c:	a3 a0 11 03 c0       	mov    ds:0xc00311a0,eax
c0010421:	c3                   	ret    

c0010422 <KeShutdown()>:
c0010422:	83 ec 0c             	sub    esp,0xc
c0010425:	e8 bb ff ff ff       	call   c00103e5 <KePrepareShutdown()>
c001042a:	a1 a8 11 03 c0       	mov    eax,ds:0xc00311a8
c001042f:	85 c0                	test   eax,eax
c0010431:	74 04                	je     c0010437 <KeShutdown()+0x15>
c0010433:	ff d0                	call   eax
c0010435:	eb 10                	jmp    c0010447 <KeShutdown()+0x25>
c0010437:	83 ec 0c             	sub    esp,0xc
c001043a:	68 1c 7e 02 c0       	push   0xc0027e1c
c001043f:	e8 90 f6 ff ff       	call   c000fad4 <KePanic(char const*)>
c0010444:	83 c4 10             	add    esp,0x10
c0010447:	83 ec 0c             	sub    esp,0xc
c001044a:	68 3d 7e 02 c0       	push   0xc0027e3d
c001044f:	e8 80 f6 ff ff       	call   c000fad4 <KePanic(char const*)>
c0010454:	83 c4 1c             	add    esp,0x1c
c0010457:	c3                   	ret    

c0010458 <KeSleep()>:
c0010458:	a1 a0 11 03 c0       	mov    eax,ds:0xc00311a0
c001045d:	85 c0                	test   eax,eax
c001045f:	74 02                	je     c0010463 <KeSleep()+0xb>
c0010461:	ff e0                	jmp    eax
c0010463:	c3                   	ret    

c0010464 <KeHandlePowerButton()>:
c0010464:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c0010469:	83 f8 02             	cmp    eax,0x2
c001046c:	75 02                	jne    c0010470 <KeHandlePowerButton()+0xc>
c001046e:	eb b2                	jmp    c0010422 <KeShutdown()>
c0010470:	48                   	dec    eax
c0010471:	75 02                	jne    c0010475 <KeHandlePowerButton()+0x11>
c0010473:	eb e3                	jmp    c0010458 <KeSleep()>
c0010475:	c3                   	ret    

c0010476 <KeHandleSleepButton()>:
c0010476:	a1 c4 11 03 c0       	mov    eax,ds:0xc00311c4
c001047b:	83 f8 02             	cmp    eax,0x2
c001047e:	75 02                	jne    c0010482 <KeHandleSleepButton()+0xc>
c0010480:	eb a0                	jmp    c0010422 <KeShutdown()>
c0010482:	48                   	dec    eax
c0010483:	75 02                	jne    c0010487 <KeHandleSleepButton()+0x11>
c0010485:	eb d1                	jmp    c0010458 <KeSleep()>
c0010487:	c3                   	ret    

c0010488 <KeRestart()>:
c0010488:	83 ec 0c             	sub    esp,0xc
c001048b:	e8 55 ff ff ff       	call   c00103e5 <KePrepareShutdown()>
c0010490:	a1 a4 11 03 c0       	mov    eax,ds:0xc00311a4
c0010495:	85 c0                	test   eax,eax
c0010497:	74 02                	je     c001049b <KeRestart()+0x13>
c0010499:	ff d0                	call   eax
c001049b:	83 ec 0c             	sub    esp,0xc
c001049e:	68 61 7e 02 c0       	push   0xc0027e61
c00104a3:	e8 2c f6 ff ff       	call   c000fad4 <KePanic(char const*)>
c00104a8:	83 c4 1c             	add    esp,0x1c
c00104ab:	c3                   	ret    

c00104ac <KeRand()>:
c00104ac:	69 05 e8 11 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc00311e8,0x2875
c00104b6:	69 0d ec 11 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc00311ec,0xa2e7b175
c00104c0:	53                   	push   ebx
c00104c1:	01 c1                	add    ecx,eax
c00104c3:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00104c8:	f7 25 e8 11 03 c0    	mul    DWORD PTR ds:0xc00311e8
c00104ce:	01 ca                	add    edx,ecx
c00104d0:	05 ef 04 b5 00       	add    eax,0xb504ef
c00104d5:	a3 e8 11 03 c0       	mov    ds:0xc00311e8,eax
c00104da:	83 d2 00             	adc    edx,0x0
c00104dd:	0f b7 da             	movzx  ebx,dx
c00104e0:	89 1d ec 11 03 c0    	mov    DWORD PTR ds:0xc00311ec,ebx
c00104e6:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00104ea:	5b                   	pop    ebx
c00104eb:	c3                   	ret    

c00104ec <KeSeedRand(unsigned int)>:
c00104ec:	53                   	push   ebx
c00104ed:	83 ec 08             	sub    esp,0x8
c00104f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104f4:	e8 4b a4 00 00       	call   c001a944 <HalGetRand()>
c00104f9:	c7 05 ec 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311ec,0x0
c0010503:	31 d8                	xor    eax,ebx
c0010505:	a3 e8 11 03 c0       	mov    ds:0xc00311e8,eax
c001050a:	e8 9d ff ff ff       	call   c00104ac <KeRand()>
c001050f:	83 c4 08             	add    esp,0x8
c0010512:	5b                   	pop    ebx
c0010513:	eb 97                	jmp    c00104ac <KeRand()>

c0010515 <KeInitRand()>:
c0010515:	83 ec 0c             	sub    esp,0xc
c0010518:	e8 f5 a1 00 00       	call   c001a712 <HalQueryPerformanceCounter()>
c001051d:	0f 20 da             	mov    edx,cr3
c0010520:	0f 22 da             	mov    cr3,edx
c0010523:	0f 20 da             	mov    edx,cr3
c0010526:	0f 22 da             	mov    cr3,edx
c0010529:	0f 20 da             	mov    edx,cr3
c001052c:	0f 22 da             	mov    cr3,edx
c001052f:	0f 20 da             	mov    edx,cr3
c0010532:	0f 22 da             	mov    cr3,edx
c0010535:	83 ec 0c             	sub    esp,0xc
c0010538:	35 03 8a 95 38       	xor    eax,0x38958a03
c001053d:	50                   	push   eax
c001053e:	e8 a9 ff ff ff       	call   c00104ec <KeSeedRand(unsigned int)>
c0010543:	83 c4 1c             	add    esp,0x1c
c0010546:	c3                   	ret    
c0010547:	90                   	nop

c0010548 <KeResolveCompatibilitySymbol(char*)>:
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	83 ec 08             	sub    esp,0x8
c001054e:	68 70 7e 02 c0       	push   0xc0027e70
c0010553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010557:	e8 24 02 ff ff       	call   c0000780 <strcmp>
c001055c:	83 c4 10             	add    esp,0x10
c001055f:	85 c0                	test   eax,eax
c0010561:	0f 94 c0             	sete   al
c0010564:	0f b6 c0             	movzx  eax,al
c0010567:	85 c0                	test   eax,eax
c0010569:	74 0d                	je     c0010578 <KeResolveCompatibilitySymbol(char*)+0x30>
c001056b:	b8 08 11 03 c0       	mov    eax,0xc0031108
c0010570:	e9 3b 02 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010575:	8d 76 00             	lea    esi,[esi+0x0]
c0010578:	83 ec 08             	sub    esp,0x8
c001057b:	68 79 7e 02 c0       	push   0xc0027e79
c0010580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010584:	e8 f7 01 ff ff       	call   c0000780 <strcmp>
c0010589:	83 c4 10             	add    esp,0x10
c001058c:	85 c0                	test   eax,eax
c001058e:	0f 94 c0             	sete   al
c0010591:	0f b6 c0             	movzx  eax,al
c0010594:	85 c0                	test   eax,eax
c0010596:	74 0c                	je     c00105a4 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010598:	b8 c4 1c 02 c0       	mov    eax,0xc0021cc4
c001059d:	e9 0e 02 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00105a2:	66 90                	xchg   ax,ax
c00105a4:	83 ec 08             	sub    esp,0x8
c00105a7:	68 83 7e 02 c0       	push   0xc0027e83
c00105ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b0:	e8 cb 01 ff ff       	call   c0000780 <strcmp>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	85 c0                	test   eax,eax
c00105ba:	0f 94 c0             	sete   al
c00105bd:	0f b6 c0             	movzx  eax,al
c00105c0:	85 c0                	test   eax,eax
c00105c2:	74 0c                	je     c00105d0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00105c4:	b8 08 11 03 c0       	mov    eax,0xc0031108
c00105c9:	e9 e2 01 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00105ce:	66 90                	xchg   ax,ax
c00105d0:	83 ec 08             	sub    esp,0x8
c00105d3:	68 96 7e 02 c0       	push   0xc0027e96
c00105d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105dc:	e8 9f 01 ff ff       	call   c0000780 <strcmp>
c00105e1:	83 c4 10             	add    esp,0x10
c00105e4:	85 c0                	test   eax,eax
c00105e6:	0f 94 c0             	sete   al
c00105e9:	0f b6 c0             	movzx  eax,al
c00105ec:	85 c0                	test   eax,eax
c00105ee:	74 0c                	je     c00105fc <KeResolveCompatibilitySymbol(char*)+0xb4>
c00105f0:	b8 f8 19 02 c0       	mov    eax,0xc00219f8
c00105f5:	e9 b6 01 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00105fa:	66 90                	xchg   ax,ax
c00105fc:	83 ec 08             	sub    esp,0x8
c00105ff:	68 9f 7e 02 c0       	push   0xc0027e9f
c0010604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010608:	e8 73 01 ff ff       	call   c0000780 <strcmp>
c001060d:	83 c4 10             	add    esp,0x10
c0010610:	85 c0                	test   eax,eax
c0010612:	0f 94 c0             	sete   al
c0010615:	0f b6 c0             	movzx  eax,al
c0010618:	85 c0                	test   eax,eax
c001061a:	74 0c                	je     c0010628 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001061c:	b8 d4 fa 00 c0       	mov    eax,0xc000fad4
c0010621:	e9 8a 01 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010626:	66 90                	xchg   ax,ax
c0010628:	83 ec 08             	sub    esp,0x8
c001062b:	68 b2 7e 02 c0       	push   0xc0027eb2
c0010630:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010634:	e8 47 01 ff ff       	call   c0000780 <strcmp>
c0010639:	83 c4 10             	add    esp,0x10
c001063c:	85 c0                	test   eax,eax
c001063e:	0f 94 c0             	sete   al
c0010641:	0f b6 c0             	movzx  eax,al
c0010644:	85 c0                	test   eax,eax
c0010646:	74 0c                	je     c0010654 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010648:	b8 dd d1 00 c0       	mov    eax,0xc000d1dd
c001064d:	e9 5e 01 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010652:	66 90                	xchg   ax,ax
c0010654:	83 ec 08             	sub    esp,0x8
c0010657:	68 cf 7e 02 c0       	push   0xc0027ecf
c001065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010660:	e8 1b 01 ff ff       	call   c0000780 <strcmp>
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	85 c0                	test   eax,eax
c001066a:	0f 94 c0             	sete   al
c001066d:	0f b6 c0             	movzx  eax,al
c0010670:	85 c0                	test   eax,eax
c0010672:	74 0c                	je     c0010680 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010674:	b8 c4 1d 02 c0       	mov    eax,0xc0021dc4
c0010679:	e9 32 01 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c001067e:	66 90                	xchg   ax,ax
c0010680:	83 ec 08             	sub    esp,0x8
c0010683:	68 d9 7e 02 c0       	push   0xc0027ed9
c0010688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001068c:	e8 ef 00 ff ff       	call   c0000780 <strcmp>
c0010691:	83 c4 10             	add    esp,0x10
c0010694:	85 c0                	test   eax,eax
c0010696:	0f 94 c0             	sete   al
c0010699:	0f b6 c0             	movzx  eax,al
c001069c:	85 c0                	test   eax,eax
c001069e:	74 0c                	je     c00106ac <KeResolveCompatibilitySymbol(char*)+0x164>
c00106a0:	b8 44 1b 02 c0       	mov    eax,0xc0021b44
c00106a5:	e9 06 01 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00106aa:	66 90                	xchg   ax,ax
c00106ac:	83 ec 08             	sub    esp,0x8
c00106af:	68 e2 7e 02 c0       	push   0xc0027ee2
c00106b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b8:	e8 c3 00 ff ff       	call   c0000780 <strcmp>
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	85 c0                	test   eax,eax
c00106c2:	0f 94 c0             	sete   al
c00106c5:	0f b6 c0             	movzx  eax,al
c00106c8:	85 c0                	test   eax,eax
c00106ca:	74 0c                	je     c00106d8 <KeResolveCompatibilitySymbol(char*)+0x190>
c00106cc:	b8 0c 11 03 c0       	mov    eax,0xc003110c
c00106d1:	e9 da 00 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00106d6:	66 90                	xchg   ax,ax
c00106d8:	83 ec 08             	sub    esp,0x8
c00106db:	68 fa 7e 02 c0       	push   0xc0027efa
c00106e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e4:	e8 97 00 ff ff       	call   c0000780 <strcmp>
c00106e9:	83 c4 10             	add    esp,0x10
c00106ec:	85 c0                	test   eax,eax
c00106ee:	0f 94 c0             	sete   al
c00106f1:	0f b6 c0             	movzx  eax,al
c00106f4:	85 c0                	test   eax,eax
c00106f6:	74 0c                	je     c0010704 <KeResolveCompatibilitySymbol(char*)+0x1bc>
c00106f8:	b8 0c 11 03 c0       	mov    eax,0xc003110c
c00106fd:	e9 ae 00 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010702:	66 90                	xchg   ax,ax
c0010704:	83 ec 08             	sub    esp,0x8
c0010707:	68 07 7f 02 c0       	push   0xc0027f07
c001070c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010710:	e8 6b 00 ff ff       	call   c0000780 <strcmp>
c0010715:	83 c4 10             	add    esp,0x10
c0010718:	85 c0                	test   eax,eax
c001071a:	0f 94 c0             	sete   al
c001071d:	0f b6 c0             	movzx  eax,al
c0010720:	85 c0                	test   eax,eax
c0010722:	74 0c                	je     c0010730 <KeResolveCompatibilitySymbol(char*)+0x1e8>
c0010724:	b8 0d 11 03 c0       	mov    eax,0xc003110d
c0010729:	e9 82 00 00 00       	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c001072e:	66 90                	xchg   ax,ax
c0010730:	83 ec 08             	sub    esp,0x8
c0010733:	68 14 7f 02 c0       	push   0xc0027f14
c0010738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001073c:	e8 3f 00 ff ff       	call   c0000780 <strcmp>
c0010741:	83 c4 10             	add    esp,0x10
c0010744:	85 c0                	test   eax,eax
c0010746:	0f 94 c0             	sete   al
c0010749:	0f b6 c0             	movzx  eax,al
c001074c:	85 c0                	test   eax,eax
c001074e:	74 08                	je     c0010758 <KeResolveCompatibilitySymbol(char*)+0x210>
c0010750:	b8 0c 11 03 c0       	mov    eax,0xc003110c
c0010755:	eb 59                	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c0010757:	90                   	nop
c0010758:	83 ec 08             	sub    esp,0x8
c001075b:	68 25 7f 02 c0       	push   0xc0027f25
c0010760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010764:	e8 17 00 ff ff       	call   c0000780 <strcmp>
c0010769:	83 c4 10             	add    esp,0x10
c001076c:	85 c0                	test   eax,eax
c001076e:	0f 94 c0             	sete   al
c0010771:	0f b6 c0             	movzx  eax,al
c0010774:	85 c0                	test   eax,eax
c0010776:	74 08                	je     c0010780 <KeResolveCompatibilitySymbol(char*)+0x238>
c0010778:	b8 0d 11 03 c0       	mov    eax,0xc003110d
c001077d:	eb 31                	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c001077f:	90                   	nop
c0010780:	83 ec 08             	sub    esp,0x8
c0010783:	68 36 7f 02 c0       	push   0xc0027f36
c0010788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001078c:	e8 ef ff fe ff       	call   c0000780 <strcmp>
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	85 c0                	test   eax,eax
c0010796:	0f 94 c0             	sete   al
c0010799:	0f b6 c0             	movzx  eax,al
c001079c:	85 c0                	test   eax,eax
c001079e:	74 08                	je     c00107a8 <KeResolveCompatibilitySymbol(char*)+0x260>
c00107a0:	b8 40 6e 01 c0       	mov    eax,0xc0016e40
c00107a5:	eb 09                	jmp    c00107b0 <KeResolveCompatibilitySymbol(char*)+0x268>
c00107a7:	90                   	nop
c00107a8:	b8 00 00 00 00       	mov    eax,0x0
c00107ad:	8d 76 00             	lea    esi,[esi+0x0]
c00107b0:	83 c4 0c             	add    esp,0xc
c00107b3:	c3                   	ret    

c00107b4 <Semaphore::Semaphore(int)>:
c00107b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107bc:	89 10                	mov    DWORD PTR [eax],edx
c00107be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107c2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00107c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00107df:	90                   	nop
c00107e0:	c3                   	ret    
c00107e1:	90                   	nop
c00107e2:	66 90                	xchg   ax,ax

c00107e4 <Semaphore::tryAcquire()>:
c00107e4:	83 ec 0c             	sub    esp,0xc
c00107e7:	fa                   	cli    
c00107e8:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00107ed:	83 c0 01             	add    eax,0x1
c00107f0:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c00107f5:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c00107fa:	83 c0 01             	add    eax,0x1
c00107fd:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010806:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080d:	8b 00                	mov    eax,DWORD PTR [eax]
c001080f:	39 c2                	cmp    edx,eax
c0010811:	7d 59                	jge    c001086c <Semaphore::tryAcquire()+0x88>
c0010813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010817:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001081a:	8d 50 01             	lea    edx,[eax+0x1]
c001081d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010821:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010824:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010829:	83 e8 01             	sub    eax,0x1
c001082c:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010831:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010836:	85 c0                	test   eax,eax
c0010838:	75 1a                	jne    c0010854 <Semaphore::tryAcquire()+0x70>
c001083a:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c001083f:	85 c0                	test   eax,eax
c0010841:	74 11                	je     c0010854 <Semaphore::tryAcquire()+0x70>
c0010843:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c001084d:	e8 fa 5d 00 00       	call   c001664c <schedule()>
c0010852:	66 90                	xchg   ax,ax
c0010854:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001085c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010861:	85 c0                	test   eax,eax
c0010863:	75 03                	jne    c0010868 <Semaphore::tryAcquire()+0x84>
c0010865:	fb                   	sti    
c0010866:	66 90                	xchg   ax,ax
c0010868:	b0 01                	mov    al,0x1
c001086a:	eb 48                	jmp    c00108b4 <Semaphore::tryAcquire()+0xd0>
c001086c:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010871:	83 e8 01             	sub    eax,0x1
c0010874:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010879:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c001087e:	85 c0                	test   eax,eax
c0010880:	75 1a                	jne    c001089c <Semaphore::tryAcquire()+0xb8>
c0010882:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010887:	85 c0                	test   eax,eax
c0010889:	74 11                	je     c001089c <Semaphore::tryAcquire()+0xb8>
c001088b:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010895:	e8 b2 5d 00 00       	call   c001664c <schedule()>
c001089a:	66 90                	xchg   ax,ax
c001089c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00108a4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00108a9:	85 c0                	test   eax,eax
c00108ab:	75 03                	jne    c00108b0 <Semaphore::tryAcquire()+0xcc>
c00108ad:	fb                   	sti    
c00108ae:	66 90                	xchg   ax,ax
c00108b0:	b0 00                	mov    al,0x0
c00108b2:	66 90                	xchg   ax,ax
c00108b4:	83 c4 0c             	add    esp,0xc
c00108b7:	c3                   	ret    

c00108b8 <Semaphore::assertLocked(char const*)>:
c00108b8:	83 ec 0c             	sub    esp,0xc
c00108bb:	fa                   	cli    
c00108bc:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00108c1:	83 c0 01             	add    eax,0x1
c00108c4:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c00108c9:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c00108ce:	83 c0 01             	add    eax,0x1
c00108d1:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c00108d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00108dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00108e3:	39 c2                	cmp    edx,eax
c00108e5:	7d 11                	jge    c00108f8 <Semaphore::assertLocked(char const*)+0x40>
c00108e7:	83 ec 0c             	sub    esp,0xc
c00108ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00108ee:	e8 e1 f1 ff ff       	call   c000fad4 <KePanic(char const*)>
c00108f3:	83 c4 10             	add    esp,0x10
c00108f6:	66 90                	xchg   ax,ax
c00108f8:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c00108fd:	83 e8 01             	sub    eax,0x1
c0010900:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010905:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c001090a:	85 c0                	test   eax,eax
c001090c:	75 1a                	jne    c0010928 <Semaphore::assertLocked(char const*)+0x70>
c001090e:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010913:	85 c0                	test   eax,eax
c0010915:	74 11                	je     c0010928 <Semaphore::assertLocked(char const*)+0x70>
c0010917:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010921:	e8 26 5d 00 00       	call   c001664c <schedule()>
c0010926:	66 90                	xchg   ax,ax
c0010928:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0010930:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010935:	85 c0                	test   eax,eax
c0010937:	75 03                	jne    c001093c <Semaphore::assertLocked(char const*)+0x84>
c0010939:	fb                   	sti    
c001093a:	66 90                	xchg   ax,ax
c001093c:	90                   	nop
c001093d:	83 c4 0c             	add    esp,0xc
c0010940:	c3                   	ret    
c0010941:	90                   	nop
c0010942:	66 90                	xchg   ax,ax

c0010944 <Semaphore::acquire(int)>:
c0010944:	83 ec 1c             	sub    esp,0x1c
c0010947:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001094c:	0f 84 ae 00 00 00    	je     c0010a00 <Semaphore::acquire(int)+0xbc>
c0010952:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001095a:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c001095f:	90                   	nop
c0010960:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010965:	85 c0                	test   eax,eax
c0010967:	0f 84 87 00 00 00    	je     c00109f4 <Semaphore::acquire(int)+0xb0>
c001096d:	83 ec 0c             	sub    esp,0xc
c0010970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010974:	e8 6b fe ff ff       	call   c00107e4 <Semaphore::tryAcquire()>
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	83 f0 01             	xor    eax,0x1
c001097f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010983:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010987:	83 f0 01             	xor    eax,0x1
c001098a:	0f b6 c0             	movzx  eax,al
c001098d:	85 c0                	test   eax,eax
c001098f:	75 5f                	jne    c00109f0 <Semaphore::acquire(int)+0xac>
c0010991:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010996:	7f 34                	jg     c00109cc <Semaphore::acquire(int)+0x88>
c0010998:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001099c:	89 d0                	mov    eax,edx
c001099e:	c1 e0 02             	shl    eax,0x2
c00109a1:	01 d0                	add    eax,edx
c00109a3:	d1 e0                	shl    eax,1
c00109a5:	89 c2                	mov    edx,eax
c00109a7:	c1 fa 1f             	sar    edx,0x1f
c00109aa:	83 ec 08             	sub    esp,0x8
c00109ad:	52                   	push   edx
c00109ae:	50                   	push   eax
c00109af:	e8 8c 5e 00 00       	call   c0016840 <milliTenthSleep(unsigned long long)>
c00109b4:	83 c4 10             	add    esp,0x10
c00109b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109bb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00109bf:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00109c7:	eb 97                	jmp    c0010960 <Semaphore::acquire(int)+0x1c>
c00109c9:	8d 76 00             	lea    esi,[esi+0x0]
c00109cc:	83 ec 08             	sub    esp,0x8
c00109cf:	6a 00                	push   0x0
c00109d1:	68 90 01 00 00       	push   0x190
c00109d6:	e8 65 5e 00 00       	call   c0016840 <milliTenthSleep(unsigned long long)>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c00109e3:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c00109e8:	e9 73 ff ff ff       	jmp    c0010960 <Semaphore::acquire(int)+0x1c>
c00109ed:	8d 76 00             	lea    esi,[esi+0x0]
c00109f0:	90                   	nop
c00109f1:	8d 76 00             	lea    esi,[esi+0x0]
c00109f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109f8:	e9 fb 00 00 00       	jmp    c0010af8 <Semaphore::acquire(int)+0x1b4>
c00109fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010a00:	fa                   	cli    
c0010a01:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010a06:	83 c0 01             	add    eax,0x1
c0010a09:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0010a0e:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010a13:	83 c0 01             	add    eax,0x1
c0010a16:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a1f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010a22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a26:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a28:	39 c2                	cmp    edx,eax
c0010a2a:	7d 14                	jge    c0010a40 <Semaphore::acquire(int)+0xfc>
c0010a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010a33:	8d 50 01             	lea    edx,[eax+0x1]
c0010a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a3a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a3d:	eb 6d                	jmp    c0010aac <Semaphore::acquire(int)+0x168>
c0010a3f:	90                   	nop
c0010a40:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a47:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010a4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a55:	85 c0                	test   eax,eax
c0010a57:	75 13                	jne    c0010a6c <Semaphore::acquire(int)+0x128>
c0010a59:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010a5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a67:	eb 17                	jmp    c0010a80 <Semaphore::acquire(int)+0x13c>
c0010a69:	8d 76 00             	lea    esi,[esi+0x0]
c0010a6c:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010a78:	8b 12                	mov    edx,DWORD PTR [edx]
c0010a7a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a80:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a8e:	83 ec 0c             	sub    esp,0xc
c0010a91:	68 4c 7f 02 c0       	push   0xc0027f4c
c0010a96:	e8 cb 64 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010a9b:	83 c4 10             	add    esp,0x10
c0010a9e:	83 ec 0c             	sub    esp,0xc
c0010aa1:	6a 05                	push   0x5
c0010aa3:	e8 64 5c 00 00       	call   c001670c <blockTask(TaskState)>
c0010aa8:	83 c4 10             	add    esp,0x10
c0010aab:	90                   	nop
c0010aac:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010ab1:	83 e8 01             	sub    eax,0x1
c0010ab4:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010ab9:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010abe:	85 c0                	test   eax,eax
c0010ac0:	75 1a                	jne    c0010adc <Semaphore::acquire(int)+0x198>
c0010ac2:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010ac7:	85 c0                	test   eax,eax
c0010ac9:	74 11                	je     c0010adc <Semaphore::acquire(int)+0x198>
c0010acb:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010ad5:	e8 72 5b 00 00       	call   c001664c <schedule()>
c0010ada:	66 90                	xchg   ax,ax
c0010adc:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0010ae4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010ae9:	85 c0                	test   eax,eax
c0010aeb:	75 03                	jne    c0010af0 <Semaphore::acquire(int)+0x1ac>
c0010aed:	fb                   	sti    
c0010aee:	66 90                	xchg   ax,ax
c0010af0:	b8 00 00 00 00       	mov    eax,0x0
c0010af5:	8d 76 00             	lea    esi,[esi+0x0]
c0010af8:	83 c4 1c             	add    esp,0x1c
c0010afb:	c3                   	ret    

c0010afc <Semaphore::acquire()>:
c0010afc:	83 ec 0c             	sub    esp,0xc
c0010aff:	83 ec 08             	sub    esp,0x8
c0010b02:	6a 00                	push   0x0
c0010b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b08:	e8 37 fe ff ff       	call   c0010944 <Semaphore::acquire(int)>
c0010b0d:	83 c4 10             	add    esp,0x10
c0010b10:	90                   	nop
c0010b11:	83 c4 0c             	add    esp,0xc
c0010b14:	c3                   	ret    
c0010b15:	90                   	nop
c0010b16:	66 90                	xchg   ax,ax

c0010b18 <Semaphore::release()>:
c0010b18:	83 ec 1c             	sub    esp,0x1c
c0010b1b:	fa                   	cli    
c0010b1c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010b21:	83 c0 01             	add    eax,0x1
c0010b24:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0010b29:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010b2e:	83 c0 01             	add    eax,0x1
c0010b31:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b3d:	85 c0                	test   eax,eax
c0010b3f:	74 2b                	je     c0010b6c <Semaphore::release()+0x54>
c0010b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b50:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010b53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b5a:	83 ec 0c             	sub    esp,0xc
c0010b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010b61:	e8 3e 5e 00 00       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c0010b66:	83 c4 10             	add    esp,0x10
c0010b69:	eb 15                	jmp    c0010b80 <Semaphore::release()+0x68>
c0010b6b:	90                   	nop
c0010b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b73:	8d 50 ff             	lea    edx,[eax-0x1]
c0010b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b7a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b80:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010b85:	83 e8 01             	sub    eax,0x1
c0010b88:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0010b8d:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0010b92:	85 c0                	test   eax,eax
c0010b94:	75 1a                	jne    c0010bb0 <Semaphore::release()+0x98>
c0010b96:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0010b9b:	85 c0                	test   eax,eax
c0010b9d:	74 11                	je     c0010bb0 <Semaphore::release()+0x98>
c0010b9f:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0010ba9:	e8 9e 5a 00 00       	call   c001664c <schedule()>
c0010bae:	66 90                	xchg   ax,ax
c0010bb0:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0010bb8:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0010bbd:	85 c0                	test   eax,eax
c0010bbf:	75 03                	jne    c0010bc4 <Semaphore::release()+0xac>
c0010bc1:	fb                   	sti    
c0010bc2:	66 90                	xchg   ax,ax
c0010bc4:	90                   	nop
c0010bc5:	83 c4 1c             	add    esp,0x1c
c0010bc8:	c3                   	ret    

c0010bc9 <KiSigKill(int)>:
c0010bc9:	83 ec 0c             	sub    esp,0xc
c0010bcc:	6a 00                	push   0x0
c0010bce:	6a 00                	push   0x0
c0010bd0:	6a ff                	push   0xffffffff
c0010bd2:	6a 01                	push   0x1
c0010bd4:	e8 79 b4 01 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010bd9:	83 c4 1c             	add    esp,0x1c
c0010bdc:	c3                   	ret    

c0010bdd <KiDefaultSignalHandlerIgnore(int)>:
c0010bdd:	c3                   	ret    

c0010bde <KiDefaultSignalHandlerPause(int)>:
c0010bde:	57                   	push   edi
c0010bdf:	b9 07 00 00 00       	mov    ecx,0x7
c0010be4:	56                   	push   esi
c0010be5:	be a7 7f 02 c0       	mov    esi,0xc0027fa7
c0010bea:	83 ec 24             	sub    esp,0x24
c0010bed:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010bf1:	fc                   	cld    
c0010bf2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bf4:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010bf8:	50                   	push   eax
c0010bf9:	6a 00                	push   0x0
c0010bfb:	6a 00                	push   0x0
c0010bfd:	6a 27                	push   0x27
c0010bff:	e8 4e b4 01 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c04:	83 c4 34             	add    esp,0x34
c0010c07:	5e                   	pop    esi
c0010c08:	5f                   	pop    edi
c0010c09:	c3                   	ret    

c0010c0a <KiDefaultSignalHandlerResume(int)>:
c0010c0a:	57                   	push   edi
c0010c0b:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c10:	56                   	push   esi
c0010c11:	be c3 7f 02 c0       	mov    esi,0xc0027fc3
c0010c16:	83 ec 24             	sub    esp,0x24
c0010c19:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c1d:	fc                   	cld    
c0010c1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c20:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c24:	50                   	push   eax
c0010c25:	6a 00                	push   0x0
c0010c27:	6a 00                	push   0x0
c0010c29:	6a 27                	push   0x27
c0010c2b:	e8 22 b4 01 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c30:	83 c4 34             	add    esp,0x34
c0010c33:	5e                   	pop    esi
c0010c34:	5f                   	pop    edi
c0010c35:	c3                   	ret    

c0010c36 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c36:	e9 55 ea ff ff       	jmp    c000f690 <free>

c0010c3b <KeInitSignals()>:
c0010c3b:	53                   	push   ebx
c0010c3c:	83 ec 14             	sub    esp,0x14
c0010c3f:	68 c8 00 00 00       	push   0xc8
c0010c44:	e8 37 ea ff ff       	call   c000f680 <malloc>
c0010c49:	83 c4 0c             	add    esp,0xc
c0010c4c:	6a 04                	push   0x4
c0010c4e:	6a 00                	push   0x0
c0010c50:	50                   	push   eax
c0010c51:	89 c3                	mov    ebx,eax
c0010c53:	e8 98 f8 fe ff       	call   c00004f0 <memset>
c0010c58:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0010c5e:	83 c4 0c             	add    esp,0xc
c0010c61:	c7 83 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xbc],0x0
c0010c6b:	c7 83 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xc0],0x0
c0010c75:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010c7c:	6a 20                	push   0x20
c0010c7e:	6a 00                	push   0x0
c0010c80:	50                   	push   eax
c0010c81:	e8 6a f8 fe ff       	call   c00004f0 <memset>
c0010c86:	83 c4 0c             	add    esp,0xc
c0010c89:	6a 44                	push   0x44
c0010c8b:	6a 00                	push   0x0
c0010c8d:	53                   	push   ebx
c0010c8e:	e8 5d f8 fe ff       	call   c00004f0 <memset>
c0010c93:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c0010c99:	83 c4 0c             	add    esp,0xc
c0010c9c:	6a 11                	push   0x11
c0010c9e:	6a 00                	push   0x0
c0010ca0:	50                   	push   eax
c0010ca1:	e8 4a f8 fe ff       	call   c00004f0 <memset>
c0010ca6:	83 c4 18             	add    esp,0x18
c0010ca9:	89 d8                	mov    eax,ebx
c0010cab:	5b                   	pop    ebx
c0010cac:	c3                   	ret    

c0010cad <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010cad:	53                   	push   ebx
c0010cae:	b8 01 00 00 00       	mov    eax,0x1
c0010cb3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010cb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cbb:	83 f9 10             	cmp    ecx,0x10
c0010cbe:	7f 21                	jg     c0010ce1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010cc7:	89 03                	mov    DWORD PTR [ebx],eax
c0010cc9:	b8 01 00 00 00       	mov    eax,0x1
c0010cce:	d3 e0                	shl    eax,cl
c0010cd0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010cd4:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010cd7:	31 c0                	xor    eax,eax
c0010cd9:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010ce1:	5b                   	pop    ebx
c0010ce2:	c3                   	ret    

c0010ce3 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010ce3:	55                   	push   ebp
c0010ce4:	57                   	push   edi
c0010ce5:	bf 08 00 00 00       	mov    edi,0x8
c0010cea:	56                   	push   esi
c0010ceb:	53                   	push   ebx
c0010cec:	83 ec 14             	sub    esp,0x14
c0010cef:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010cf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cf7:	68 e0 7f 02 c0       	push   0xc0027fe0
c0010cfc:	e8 65 62 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010d01:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010d07:	83 c4 10             	add    esp,0x10
c0010d0a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d11:	31 c9                	xor    ecx,ecx
c0010d13:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010d17:	99                   	cdq    
c0010d18:	f7 ff                	idiv   edi
c0010d1a:	8d 42 24             	lea    eax,[edx+0x24]
c0010d1d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d21:	85 f6                	test   esi,esi
c0010d23:	75 1a                	jne    c0010d3f <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c0010d25:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d29:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c0010d2d:	50                   	push   eax
c0010d2e:	50                   	push   eax
c0010d2f:	52                   	push   edx
c0010d30:	68 f6 7f 02 c0       	push   0xc0027ff6
c0010d35:	e8 2c 62 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010d3a:	83 c4 10             	add    esp,0x10
c0010d3d:	eb 1b                	jmp    c0010d5a <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c0010d3f:	41                   	inc    ecx
c0010d40:	83 f9 08             	cmp    ecx,0x8
c0010d43:	75 ce                	jne    c0010d13 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c0010d45:	83 ec 0c             	sub    esp,0xc
c0010d48:	be 01 00 00 00       	mov    esi,0x1
c0010d4d:	68 17 80 02 c0       	push   0xc0028017
c0010d52:	e8 0f 62 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	83 c4 0c             	add    esp,0xc
c0010d5d:	89 f0                	mov    eax,esi
c0010d5f:	5b                   	pop    ebx
c0010d60:	5e                   	pop    esi
c0010d61:	5f                   	pop    edi
c0010d62:	5d                   	pop    ebp
c0010d63:	c3                   	ret    

c0010d64 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d64:	55                   	push   ebp
c0010d65:	57                   	push   edi
c0010d66:	56                   	push   esi
c0010d67:	53                   	push   ebx
c0010d68:	83 ec 1c             	sub    esp,0x1c
c0010d6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d6f:	85 db                	test   ebx,ebx
c0010d71:	0f 84 e0 00 00 00    	je     c0010e57 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010d77:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d7e:	0f 84 d3 00 00 00    	je     c0010e57 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010d84:	31 c9                	xor    ecx,ecx
c0010d86:	bf 08 00 00 00       	mov    edi,0x8
c0010d8b:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d91:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d94:	99                   	cdq    
c0010d95:	f7 ff                	idiv   edi
c0010d97:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010d9e:	85 ed                	test   ebp,ebp
c0010da0:	0f 84 d2 00 00 00    	je     c0010e78 <KeCheckSignal(SigHandlerBlock*, int*)+0x114>
c0010da6:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010dac:	89 e9                	mov    ecx,ebp
c0010dae:	bf 01 00 00 00       	mov    edi,0x1
c0010db3:	d3 e7                	shl    edi,cl
c0010db5:	31 c9                	xor    ecx,ecx
c0010db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dbb:	b8 01 00 00 00       	mov    eax,0x1
c0010dc0:	d3 e0                	shl    eax,cl
c0010dc2:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c0010dc6:	74 0a                	je     c0010dd2 <KeCheckSignal(SigHandlerBlock*, int*)+0x6e>
c0010dc8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010dcc:	0f 85 85 00 00 00    	jne    c0010e57 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010dd2:	41                   	inc    ecx
c0010dd3:	83 f9 11             	cmp    ecx,0x11
c0010dd6:	75 e3                	jne    c0010dbb <KeCheckSignal(SigHandlerBlock*, int*)+0x57>
c0010dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ddc:	46                   	inc    esi
c0010ddd:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010de3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010dee:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010df5:	09 f8                	or     eax,edi
c0010df7:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010dfd:	31 c0                	xor    eax,eax
c0010dff:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010e07:	74 09                	je     c0010e12 <KeCheckSignal(SigHandlerBlock*, int*)+0xae>
c0010e09:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010e10:	eb 06                	jmp    c0010e18 <KeCheckSignal(SigHandlerBlock*, int*)+0xb4>
c0010e12:	40                   	inc    eax
c0010e13:	83 f8 08             	cmp    eax,0x8
c0010e16:	75 e7                	jne    c0010dff <KeCheckSignal(SigHandlerBlock*, int*)+0x9b>
c0010e18:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010e1c:	83 fd 09             	cmp    ebp,0x9
c0010e1f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010e22:	89 2a                	mov    DWORD PTR [edx],ebp
c0010e24:	75 14                	jne    c0010e3a <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010e26:	83 ec 0c             	sub    esp,0xc
c0010e29:	68 28 80 02 c0       	push   0xc0028028
c0010e2e:	e8 33 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e33:	b8 c9 0b 01 c0       	mov    eax,0xc0010bc9
c0010e38:	eb 39                	jmp    c0010e73 <KeCheckSignal(SigHandlerBlock*, int*)+0x10f>
c0010e3a:	83 f8 01             	cmp    eax,0x1
c0010e3d:	75 1c                	jne    c0010e5b <KeCheckSignal(SigHandlerBlock*, int*)+0xf7>
c0010e3f:	83 ec 0c             	sub    esp,0xc
c0010e42:	f7 d7                	not    edi
c0010e44:	68 32 80 02 c0       	push   0xc0028032
c0010e49:	e8 18 61 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e4e:	83 c4 10             	add    esp,0x10
c0010e51:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e57:	31 c0                	xor    eax,eax
c0010e59:	eb 30                	jmp    c0010e8b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010e5b:	85 c0                	test   eax,eax
c0010e5d:	75 2c                	jne    c0010e8b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010e5f:	83 ec 0c             	sub    esp,0xc
c0010e62:	68 3f 80 02 c0       	push   0xc002803f
c0010e67:	e8 fa 60 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0010e6c:	8b 04 ad 40 b2 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd4dc0]
c0010e73:	83 c4 10             	add    esp,0x10
c0010e76:	eb 13                	jmp    c0010e8b <KeCheckSignal(SigHandlerBlock*, int*)+0x127>
c0010e78:	41                   	inc    ecx
c0010e79:	46                   	inc    esi
c0010e7a:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e80:	83 f9 08             	cmp    ecx,0x8
c0010e83:	0f 85 02 ff ff ff    	jne    c0010d8b <KeCheckSignal(SigHandlerBlock*, int*)+0x27>
c0010e89:	eb cc                	jmp    c0010e57 <KeCheckSignal(SigHandlerBlock*, int*)+0xf3>
c0010e8b:	83 c4 1c             	add    esp,0x1c
c0010e8e:	5b                   	pop    ebx
c0010e8f:	5e                   	pop    esi
c0010e90:	5f                   	pop    edi
c0010e91:	5d                   	pop    ebp
c0010e92:	c3                   	ret    

c0010e93 <KiCheckSignalZ>:
c0010e93:	80 3d 0c 11 03 c0 00 	cmp    BYTE PTR ds:0xc003110c,0x0
c0010e9a:	74 43                	je     c0010edf <KiCheckSignalZ+0x4c>
c0010e9c:	83 ec 24             	sub    esp,0x24
c0010e9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0010ea3:	50                   	push   eax
c0010ea4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ea9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010eac:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0010eb2:	e8 ad fe ff ff       	call   c0010d64 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010eb7:	83 c4 10             	add    esp,0x10
c0010eba:	31 d2                	xor    edx,edx
c0010ebc:	85 c0                	test   eax,eax
c0010ebe:	74 19                	je     c0010ed9 <KiCheckSignalZ+0x46>
c0010ec0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010ec6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010ec9:	89 02                	mov    DWORD PTR [edx],eax
c0010ecb:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ed6:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010ed9:	89 d0                	mov    eax,edx
c0010edb:	83 c4 1c             	add    esp,0x1c
c0010ede:	c3                   	ret    
c0010edf:	31 d2                	xor    edx,edx
c0010ee1:	89 d0                	mov    eax,edx
c0010ee3:	c3                   	ret    

c0010ee4 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010ee4:	56                   	push   esi
c0010ee5:	53                   	push   ebx
c0010ee6:	bb 01 00 00 00       	mov    ebx,0x1
c0010eeb:	52                   	push   edx
c0010eec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010ef0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ef4:	d3 e3                	shl    ebx,cl
c0010ef6:	83 f9 10             	cmp    ecx,0x10
c0010ef9:	7f 08                	jg     c0010f03 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010efb:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010f01:	75 10                	jne    c0010f13 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010f03:	83 ec 0c             	sub    esp,0xc
c0010f06:	68 62 80 02 c0       	push   0xc0028062
c0010f0b:	e8 c4 eb ff ff       	call   c000fad4 <KePanic(char const*)>
c0010f10:	83 c4 10             	add    esp,0x10
c0010f13:	f7 d3                	not    ebx
c0010f15:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010f1b:	58                   	pop    eax
c0010f1c:	5b                   	pop    ebx
c0010f1d:	5e                   	pop    esi
c0010f1e:	c3                   	ret    

c0010f1f <KiFinishSignalZ>:
c0010f1f:	53                   	push   ebx
c0010f20:	83 ec 08             	sub    esp,0x8
c0010f23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f2c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0010f2f:	83 fa 08             	cmp    edx,0x8
c0010f32:	75 0c                	jne    c0010f40 <KiFinishSignalZ+0x21>
c0010f34:	83 ec 0c             	sub    esp,0xc
c0010f37:	50                   	push   eax
c0010f38:	e8 67 5a 00 00       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c0010f3d:	83 c4 10             	add    esp,0x10
c0010f40:	50                   	push   eax
c0010f41:	50                   	push   eax
c0010f42:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010f45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f4d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0010f53:	e8 8c ff ff ff       	call   c0010ee4 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010f58:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f5e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010f65:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010f6c:	83 c4 18             	add    esp,0x18
c0010f6f:	5b                   	pop    ebx
c0010f70:	c3                   	ret    

c0010f71 <SysSeekDir(regs*)>:
c0010f71:	31 c0                	xor    eax,eax
c0010f73:	31 d2                	xor    edx,edx
c0010f75:	c3                   	ret    

c0010f76 <SysTellDir(regs*)>:
c0010f76:	31 c0                	xor    eax,eax
c0010f78:	31 d2                	xor    edx,edx
c0010f7a:	c3                   	ret    

c0010f7b <SysVerify(regs*)>:
c0010f7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f7f:	31 d2                	xor    edx,edx
c0010f81:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f84:	c3                   	ret    

c0010f85 <SysGetArgc(regs*)>:
c0010f85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f8a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f8d:	8b 80 b6 05 00 00    	mov    eax,DWORD PTR [eax+0x5b6]
c0010f93:	89 c2                	mov    edx,eax
c0010f95:	c1 fa 1f             	sar    edx,0x1f
c0010f98:	c3                   	ret    

c0010f99 <SysTTYName(regs*)>:
c0010f99:	b8 01 00 00 00       	mov    eax,0x1
c0010f9e:	31 d2                	xor    edx,edx
c0010fa0:	c3                   	ret    

c0010fa1 <SysFormatDisk(regs*)>:
c0010fa1:	56                   	push   esi
c0010fa2:	53                   	push   ebx
c0010fa3:	83 ec 04             	sub    esp,0x4
c0010fa6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010faa:	8b 1d 04 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030304
c0010fb0:	eb 2a                	jmp    c0010fdc <SysFormatDisk(regs*)+0x3b>
c0010fb2:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010fb5:	83 ec 0c             	sub    esp,0xc
c0010fb8:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010fbb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010fbd:	51                   	push   ecx
c0010fbe:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010fc1:	51                   	push   ecx
c0010fc2:	50                   	push   eax
c0010fc3:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c0010fca:	50                   	push   eax
c0010fcb:	53                   	push   ebx
c0010fcc:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010fcf:	83 c4 20             	add    esp,0x20
c0010fd2:	83 f8 08             	cmp    eax,0x8
c0010fd5:	89 c1                	mov    ecx,eax
c0010fd7:	75 14                	jne    c0010fed <SysFormatDisk(regs*)+0x4c>
c0010fd9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010fdc:	85 db                	test   ebx,ebx
c0010fde:	75 d2                	jne    c0010fb2 <SysFormatDisk(regs*)+0x11>
c0010fe0:	b8 03 00 00 00       	mov    eax,0x3
c0010fe5:	31 d2                	xor    edx,edx
c0010fe7:	83 c4 04             	add    esp,0x4
c0010fea:	5b                   	pop    ebx
c0010feb:	5e                   	pop    esi
c0010fec:	c3                   	ret    
c0010fed:	85 c0                	test   eax,eax
c0010fef:	74 13                	je     c0011004 <SysFormatDisk(regs*)+0x63>
c0010ff1:	31 d2                	xor    edx,edx
c0010ff3:	83 f9 09             	cmp    ecx,0x9
c0010ff6:	b8 01 00 00 00       	mov    eax,0x1
c0010ffb:	74 ea                	je     c0010fe7 <SysFormatDisk(regs*)+0x46>
c0010ffd:	b8 02 00 00 00       	mov    eax,0x2
c0011002:	eb e1                	jmp    c0010fe5 <SysFormatDisk(regs*)+0x44>
c0011004:	31 c0                	xor    eax,eax
c0011006:	eb dd                	jmp    c0010fe5 <SysFormatDisk(regs*)+0x44>

c0011008 <SysSetDiskVolumeLabel(regs*)>:
c0011008:	56                   	push   esi
c0011009:	53                   	push   ebx
c001100a:	83 ec 04             	sub    esp,0x4
c001100d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011011:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011014:	83 f8 19             	cmp    eax,0x19
c0011017:	77 33                	ja     c001104c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011019:	8b 0c 85 e0 0a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf520]
c0011020:	85 c9                	test   ecx,ecx
c0011022:	74 28                	je     c001104c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011024:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011027:	85 db                	test   ebx,ebx
c0011029:	74 21                	je     c001104c <SysSetDiskVolumeLabel(regs*)+0x44>
c001102b:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011031:	85 d2                	test   edx,edx
c0011033:	74 17                	je     c001104c <SysSetDiskVolumeLabel(regs*)+0x44>
c0011035:	8b 32                	mov    esi,DWORD PTR [edx]
c0011037:	53                   	push   ebx
c0011038:	50                   	push   eax
c0011039:	51                   	push   ecx
c001103a:	52                   	push   edx
c001103b:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001103e:	83 c4 10             	add    esp,0x10
c0011041:	83 c4 04             	add    esp,0x4
c0011044:	5b                   	pop    ebx
c0011045:	5e                   	pop    esi
c0011046:	89 c2                	mov    edx,eax
c0011048:	c1 fa 1f             	sar    edx,0x1f
c001104b:	c3                   	ret    
c001104c:	83 c4 04             	add    esp,0x4
c001104f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011054:	5b                   	pop    ebx
c0011055:	ba ff ff ff ff       	mov    edx,0xffffffff
c001105a:	5e                   	pop    esi
c001105b:	c3                   	ret    

c001105c <SysGetDiskVolumeLabel(regs*)>:
c001105c:	57                   	push   edi
c001105d:	56                   	push   esi
c001105e:	53                   	push   ebx
c001105f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011063:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011066:	83 fa 19             	cmp    edx,0x19
c0011069:	77 3c                	ja     c00110a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001106b:	8b 0c 95 e0 0a 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffcf520]
c0011072:	85 c9                	test   ecx,ecx
c0011074:	74 31                	je     c00110a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011076:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011079:	85 db                	test   ebx,ebx
c001107b:	74 2a                	je     c00110a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001107d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011080:	85 f6                	test   esi,esi
c0011082:	74 23                	je     c00110a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011084:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001108a:	85 c0                	test   eax,eax
c001108c:	74 19                	je     c00110a7 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001108e:	83 ec 0c             	sub    esp,0xc
c0011091:	8b 38                	mov    edi,DWORD PTR [eax]
c0011093:	56                   	push   esi
c0011094:	53                   	push   ebx
c0011095:	52                   	push   edx
c0011096:	51                   	push   ecx
c0011097:	50                   	push   eax
c0011098:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001109b:	83 c4 20             	add    esp,0x20
c001109e:	5b                   	pop    ebx
c001109f:	5e                   	pop    esi
c00110a0:	89 c2                	mov    edx,eax
c00110a2:	c1 fa 1f             	sar    edx,0x1f
c00110a5:	5f                   	pop    edi
c00110a6:	c3                   	ret    
c00110a7:	5b                   	pop    ebx
c00110a8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00110ad:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110b2:	5e                   	pop    esi
c00110b3:	5f                   	pop    edi
c00110b4:	c3                   	ret    

c00110b5 <SysRealpath(regs*)>:
c00110b5:	53                   	push   ebx
c00110b6:	83 ec 08             	sub    esp,0x8
c00110b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00110c0:	85 c9                	test   ecx,ecx
c00110c2:	74 36                	je     c00110fa <SysRealpath(regs*)+0x45>
c00110c4:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00110c7:	31 d2                	xor    edx,edx
c00110c9:	b8 01 00 00 00       	mov    eax,0x1
c00110ce:	85 db                	test   ebx,ebx
c00110d0:	75 05                	jne    c00110d7 <SysRealpath(regs*)+0x22>
c00110d2:	83 c4 08             	add    esp,0x8
c00110d5:	5b                   	pop    ebx
c00110d6:	c3                   	ret    
c00110d7:	6a 00                	push   0x0
c00110d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110e1:	05 0c 01 00 00       	add    eax,0x10c
c00110e6:	50                   	push   eax
c00110e7:	51                   	push   ecx
c00110e8:	53                   	push   ebx
c00110e9:	e8 6e 6d ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00110ee:	83 c4 10             	add    esp,0x10
c00110f1:	31 c0                	xor    eax,eax
c00110f3:	31 d2                	xor    edx,edx
c00110f5:	83 c4 08             	add    esp,0x8
c00110f8:	5b                   	pop    ebx
c00110f9:	c3                   	ret    
c00110fa:	b8 01 00 00 00       	mov    eax,0x1
c00110ff:	31 d2                	xor    edx,edx
c0011101:	eb f2                	jmp    c00110f5 <SysRealpath(regs*)+0x40>

c0011103 <SysReadDir(regs*)>:
c0011103:	53                   	push   ebx
c0011104:	83 ec 18             	sub    esp,0x18
c0011107:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001110b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001110e:	83 f8 02             	cmp    eax,0x2
c0011111:	76 4f                	jbe    c0011162 <SysReadDir(regs*)+0x5f>
c0011113:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001111a:	77 52                	ja     c001116e <SysReadDir(regs*)+0x6b>
c001111c:	83 ec 0c             	sub    esp,0xc
c001111f:	50                   	push   eax
c0011120:	e8 98 1d 00 00       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c0011125:	83 c4 10             	add    esp,0x10
c0011128:	85 c0                	test   eax,eax
c001112a:	74 42                	je     c001116e <SysReadDir(regs*)+0x6b>
c001112c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011134:	83 ec 0c             	sub    esp,0xc
c0011137:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001113b:	8b 10                	mov    edx,DWORD PTR [eax]
c001113d:	51                   	push   ecx
c001113e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011141:	51                   	push   ecx
c0011142:	6a 00                	push   0x0
c0011144:	68 10 01 00 00       	push   0x110
c0011149:	50                   	push   eax
c001114a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001114d:	83 c4 20             	add    esp,0x20
c0011150:	85 c0                	test   eax,eax
c0011152:	89 c1                	mov    ecx,eax
c0011154:	74 27                	je     c001117d <SysReadDir(regs*)+0x7a>
c0011156:	31 d2                	xor    edx,edx
c0011158:	83 f9 07             	cmp    ecx,0x7
c001115b:	b8 02 00 00 00       	mov    eax,0x2
c0011160:	75 16                	jne    c0011178 <SysReadDir(regs*)+0x75>
c0011162:	b8 01 00 00 00       	mov    eax,0x1
c0011167:	31 d2                	xor    edx,edx
c0011169:	83 c4 18             	add    esp,0x18
c001116c:	5b                   	pop    ebx
c001116d:	c3                   	ret    
c001116e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011173:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011178:	83 c4 18             	add    esp,0x18
c001117b:	5b                   	pop    ebx
c001117c:	c3                   	ret    
c001117d:	31 c0                	xor    eax,eax
c001117f:	31 d2                	xor    edx,edx
c0011181:	eb e6                	jmp    c0011169 <SysReadDir(regs*)+0x66>

c0011183 <SysIsATTY(regs*)>:
c0011183:	83 ec 0c             	sub    esp,0xc
c0011186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001118d:	83 f8 02             	cmp    eax,0x2
c0011190:	76 07                	jbe    c0011199 <SysIsATTY(regs*)+0x16>
c0011192:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011197:	75 26                	jne    c00111bf <SysIsATTY(regs*)+0x3c>
c0011199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001119e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00111a1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00111a7:	85 c0                	test   eax,eax
c00111a9:	74 24                	je     c00111cf <SysIsATTY(regs*)+0x4c>
c00111ab:	8b 10                	mov    edx,DWORD PTR [eax]
c00111ad:	83 ec 0c             	sub    esp,0xc
c00111b0:	50                   	push   eax
c00111b1:	ff 12                	call   DWORD PTR [edx]
c00111b3:	83 c4 10             	add    esp,0x10
c00111b6:	31 d2                	xor    edx,edx
c00111b8:	83 c4 0c             	add    esp,0xc
c00111bb:	0f b6 c0             	movzx  eax,al
c00111be:	c3                   	ret    
c00111bf:	83 ec 0c             	sub    esp,0xc
c00111c2:	50                   	push   eax
c00111c3:	e8 f5 1c 00 00       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c00111c8:	83 c4 10             	add    esp,0x10
c00111cb:	85 c0                	test   eax,eax
c00111cd:	75 dc                	jne    c00111ab <SysIsATTY(regs*)+0x28>
c00111cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111d9:	83 c4 0c             	add    esp,0xc
c00111dc:	c3                   	ret    

c00111dd <SysSeek(regs*)>:
c00111dd:	53                   	push   ebx
c00111de:	83 ec 08             	sub    esp,0x8
c00111e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111e8:	8d 50 fd             	lea    edx,[eax-0x3]
c00111eb:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00111f1:	77 39                	ja     c001122c <SysSeek(regs*)+0x4f>
c00111f3:	83 ec 0c             	sub    esp,0xc
c00111f6:	50                   	push   eax
c00111f7:	e8 c1 1c 00 00       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c00111fc:	83 c4 10             	add    esp,0x10
c00111ff:	85 c0                	test   eax,eax
c0011201:	74 29                	je     c001122c <SysSeek(regs*)+0x4f>
c0011203:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011206:	83 ec 04             	sub    esp,0x4
c0011209:	31 db                	xor    ebx,ebx
c001120b:	53                   	push   ebx
c001120c:	51                   	push   ecx
c001120d:	50                   	push   eax
c001120e:	e8 51 70 ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	85 c0                	test   eax,eax
c0011218:	0f 95 c0             	setne  al
c001121b:	31 d2                	xor    edx,edx
c001121d:	0f b6 c0             	movzx  eax,al
c0011220:	f7 d8                	neg    eax
c0011222:	83 d2 00             	adc    edx,0x0
c0011225:	83 c4 08             	add    esp,0x8
c0011228:	5b                   	pop    ebx
c0011229:	f7 da                	neg    edx
c001122b:	c3                   	ret    
c001122c:	83 c4 08             	add    esp,0x8
c001122f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011234:	5b                   	pop    ebx
c0011235:	ba ff ff ff ff       	mov    edx,0xffffffff
c001123a:	c3                   	ret    

c001123b <SysTell(regs*)>:
c001123b:	53                   	push   ebx
c001123c:	83 ec 08             	sub    esp,0x8
c001123f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011243:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011246:	83 f8 02             	cmp    eax,0x2
c0011249:	76 56                	jbe    c00112a1 <SysTell(regs*)+0x66>
c001124b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011250:	76 19                	jbe    c001126b <SysTell(regs*)+0x30>
c0011252:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011255:	31 d2                	xor    edx,edx
c0011257:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001125d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011264:	83 c4 08             	add    esp,0x8
c0011267:	31 c0                	xor    eax,eax
c0011269:	5b                   	pop    ebx
c001126a:	c3                   	ret    
c001126b:	83 ec 0c             	sub    esp,0xc
c001126e:	50                   	push   eax
c001126f:	e8 49 1c 00 00       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c0011274:	83 c4 10             	add    esp,0x10
c0011277:	85 c0                	test   eax,eax
c0011279:	74 26                	je     c00112a1 <SysTell(regs*)+0x66>
c001127b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001127e:	83 ec 08             	sub    esp,0x8
c0011281:	52                   	push   edx
c0011282:	50                   	push   eax
c0011283:	e8 88 70 ff ff       	call   c0008310 <File::tell(unsigned long long*)>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	85 c0                	test   eax,eax
c001128d:	0f 95 c0             	setne  al
c0011290:	31 d2                	xor    edx,edx
c0011292:	0f b6 c0             	movzx  eax,al
c0011295:	f7 d8                	neg    eax
c0011297:	83 d2 00             	adc    edx,0x0
c001129a:	83 c4 08             	add    esp,0x8
c001129d:	5b                   	pop    ebx
c001129e:	f7 da                	neg    edx
c00112a0:	c3                   	ret    
c00112a1:	83 c4 08             	add    esp,0x8
c00112a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112a9:	5b                   	pop    ebx
c00112aa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112af:	c3                   	ret    

c00112b0 <SysSize(regs*)>:
c00112b0:	53                   	push   ebx
c00112b1:	83 ec 18             	sub    esp,0x18
c00112b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112bb:	83 f8 02             	cmp    eax,0x2
c00112be:	76 5b                	jbe    c001131b <SysSize(regs*)+0x6b>
c00112c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112c5:	76 19                	jbe    c00112e0 <SysSize(regs*)+0x30>
c00112c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112ca:	31 d2                	xor    edx,edx
c00112cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112d9:	83 c4 18             	add    esp,0x18
c00112dc:	31 c0                	xor    eax,eax
c00112de:	5b                   	pop    ebx
c00112df:	c3                   	ret    
c00112e0:	83 ec 0c             	sub    esp,0xc
c00112e3:	50                   	push   eax
c00112e4:	e8 d4 1b 00 00       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c00112e9:	83 c4 10             	add    esp,0x10
c00112ec:	85 c0                	test   eax,eax
c00112ee:	74 2b                	je     c001131b <SysSize(regs*)+0x6b>
c00112f0:	83 ec 04             	sub    esp,0x4
c00112f3:	8d 54 24 13          	lea    edx,[esp+0x13]
c00112f7:	52                   	push   edx
c00112f8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112fb:	52                   	push   edx
c00112fc:	50                   	push   eax
c00112fd:	e8 a6 71 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	85 c0                	test   eax,eax
c0011307:	0f 95 c0             	setne  al
c001130a:	31 d2                	xor    edx,edx
c001130c:	0f b6 c0             	movzx  eax,al
c001130f:	f7 d8                	neg    eax
c0011311:	83 d2 00             	adc    edx,0x0
c0011314:	83 c4 18             	add    esp,0x18
c0011317:	5b                   	pop    ebx
c0011318:	f7 da                	neg    edx
c001131a:	c3                   	ret    
c001131b:	83 c4 18             	add    esp,0x18
c001131e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011323:	5b                   	pop    ebx
c0011324:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011329:	c3                   	ret    

c001132a <SysSizeFromFilename(regs*)>:
c001132a:	55                   	push   ebp
c001132b:	57                   	push   edi
c001132c:	56                   	push   esi
c001132d:	53                   	push   ebx
c001132e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011334:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001133b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001133e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011341:	85 f6                	test   esi,esi
c0011343:	89 f8                	mov    eax,edi
c0011345:	74 09                	je     c0011350 <SysSizeFromFilename(regs*)+0x26>
c0011347:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001134d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011350:	83 f8 02             	cmp    eax,0x2
c0011353:	0f 86 c9 00 00 00    	jbe    c0011422 <SysSizeFromFilename(regs*)+0xf8>
c0011359:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001135e:	76 1f                	jbe    c001137f <SysSizeFromFilename(regs*)+0x55>
c0011360:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011363:	31 d2                	xor    edx,edx
c0011365:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001136b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011372:	31 c0                	xor    eax,eax
c0011374:	81 c4 4c 02 00 00    	add    esp,0x24c
c001137a:	5b                   	pop    ebx
c001137b:	5e                   	pop    esi
c001137c:	5f                   	pop    edi
c001137d:	5d                   	pop    ebp
c001137e:	c3                   	ret    
c001137f:	83 ec 0c             	sub    esp,0xc
c0011382:	68 14 01 00 00       	push   0x114
c0011387:	e8 f4 e2 ff ff       	call   c000f680 <malloc>
c001138c:	6a 01                	push   0x1
c001138e:	89 c5                	mov    ebp,eax
c0011390:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011395:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011398:	50                   	push   eax
c0011399:	57                   	push   edi
c001139a:	55                   	push   ebp
c001139b:	e8 ea 6c ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00113a0:	83 c4 20             	add    esp,0x20
c00113a3:	85 ed                	test   ebp,ebp
c00113a5:	74 7b                	je     c0011422 <SysSizeFromFilename(regs*)+0xf8>
c00113a7:	83 ec 04             	sub    esp,0x4
c00113aa:	8d 44 24 13          	lea    eax,[esp+0x13]
c00113ae:	50                   	push   eax
c00113af:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00113b2:	51                   	push   ecx
c00113b3:	55                   	push   ebp
c00113b4:	e8 ef 70 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00113b9:	89 c3                	mov    ebx,eax
c00113bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00113be:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00113c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113c4:	83 c4 10             	add    esp,0x10
c00113c7:	85 db                	test   ebx,ebx
c00113c9:	75 57                	jne    c0011422 <SysSizeFromFilename(regs*)+0xf8>
c00113cb:	6a 00                	push   0x0
c00113cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113d5:	05 0c 01 00 00       	add    eax,0x10c
c00113da:	50                   	push   eax
c00113db:	57                   	push   edi
c00113dc:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00113e3:	53                   	push   ebx
c00113e4:	e8 73 6a ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00113e9:	58                   	pop    eax
c00113ea:	5a                   	pop    edx
c00113eb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00113ef:	50                   	push   eax
c00113f0:	53                   	push   ebx
c00113f1:	e8 ed 64 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c00113f6:	83 c4 10             	add    esp,0x10
c00113f9:	ba 00 00 00 00       	mov    edx,0x0
c00113fe:	83 f8 01             	cmp    eax,0x1
c0011401:	b8 00 00 00 00       	mov    eax,0x0
c0011406:	74 2f                	je     c0011437 <SysSizeFromFilename(regs*)+0x10d>
c0011408:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001140d:	74 3b                	je     c001144a <SysSizeFromFilename(regs*)+0x120>
c001140f:	85 f6                	test   esi,esi
c0011411:	0f 84 5d ff ff ff    	je     c0011374 <SysSizeFromFilename(regs*)+0x4a>
c0011417:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001141d:	e9 52 ff ff ff       	jmp    c0011374 <SysSizeFromFilename(regs*)+0x4a>
c0011422:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011428:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001142d:	5b                   	pop    ebx
c001142e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011433:	5e                   	pop    esi
c0011434:	5f                   	pop    edi
c0011435:	5d                   	pop    ebp
c0011436:	c3                   	ret    
c0011437:	85 f6                	test   esi,esi
c0011439:	0f 84 35 ff ff ff    	je     c0011374 <SysSizeFromFilename(regs*)+0x4a>
c001143f:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011445:	e9 2a ff ff ff       	jmp    c0011374 <SysSizeFromFilename(regs*)+0x4a>
c001144a:	85 f6                	test   esi,esi
c001144c:	0f 84 22 ff ff ff    	je     c0011374 <SysSizeFromFilename(regs*)+0x4a>
c0011452:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011458:	e9 17 ff ff ff       	jmp    c0011374 <SysSizeFromFilename(regs*)+0x4a>

c001145d <SysSizeFromFilenameNoSymlink(regs*)>:
c001145d:	55                   	push   ebp
c001145e:	57                   	push   edi
c001145f:	56                   	push   esi
c0011460:	53                   	push   ebx
c0011461:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011467:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001146e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011471:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011474:	85 f6                	test   esi,esi
c0011476:	89 f8                	mov    eax,edi
c0011478:	74 09                	je     c0011483 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c001147a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011480:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011483:	83 f8 02             	cmp    eax,0x2
c0011486:	0f 86 c9 00 00 00    	jbe    c0011555 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c001148c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011491:	76 1f                	jbe    c00114b2 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0011493:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011496:	31 d2                	xor    edx,edx
c0011498:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001149e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114a5:	31 c0                	xor    eax,eax
c00114a7:	81 c4 4c 02 00 00    	add    esp,0x24c
c00114ad:	5b                   	pop    ebx
c00114ae:	5e                   	pop    esi
c00114af:	5f                   	pop    edi
c00114b0:	5d                   	pop    ebp
c00114b1:	c3                   	ret    
c00114b2:	83 ec 0c             	sub    esp,0xc
c00114b5:	68 14 01 00 00       	push   0x114
c00114ba:	e8 c1 e1 ff ff       	call   c000f680 <malloc>
c00114bf:	6a 00                	push   0x0
c00114c1:	89 c5                	mov    ebp,eax
c00114c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00114cb:	50                   	push   eax
c00114cc:	57                   	push   edi
c00114cd:	55                   	push   ebp
c00114ce:	e8 b7 6b ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00114d3:	83 c4 20             	add    esp,0x20
c00114d6:	85 ed                	test   ebp,ebp
c00114d8:	74 7b                	je     c0011555 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00114da:	83 ec 04             	sub    esp,0x4
c00114dd:	8d 44 24 13          	lea    eax,[esp+0x13]
c00114e1:	50                   	push   eax
c00114e2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00114e5:	51                   	push   ecx
c00114e6:	55                   	push   ebp
c00114e7:	e8 bc 6f ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c00114ec:	89 c3                	mov    ebx,eax
c00114ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00114f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00114f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114f7:	83 c4 10             	add    esp,0x10
c00114fa:	85 db                	test   ebx,ebx
c00114fc:	75 57                	jne    c0011555 <SysSizeFromFilenameNoSymlink(regs*)+0xf8>
c00114fe:	6a 00                	push   0x0
c0011500:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011505:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011508:	05 0c 01 00 00       	add    eax,0x10c
c001150d:	50                   	push   eax
c001150e:	57                   	push   edi
c001150f:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011516:	53                   	push   ebx
c0011517:	e8 40 69 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001151c:	58                   	pop    eax
c001151d:	5a                   	pop    edx
c001151e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011522:	50                   	push   eax
c0011523:	53                   	push   ebx
c0011524:	e8 ba 63 ff ff       	call   c00078e3 <KeDereferenceSymlink(char const*, char*)>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	ba 00 00 00 00       	mov    edx,0x0
c0011531:	83 f8 01             	cmp    eax,0x1
c0011534:	b8 00 00 00 00       	mov    eax,0x0
c0011539:	74 2f                	je     c001156a <SysSizeFromFilenameNoSymlink(regs*)+0x10d>
c001153b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011540:	74 3b                	je     c001157d <SysSizeFromFilenameNoSymlink(regs*)+0x120>
c0011542:	85 f6                	test   esi,esi
c0011544:	0f 84 5d ff ff ff    	je     c00114a7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001154a:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011550:	e9 52 ff ff ff       	jmp    c00114a7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011555:	81 c4 4c 02 00 00    	add    esp,0x24c
c001155b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011560:	5b                   	pop    ebx
c0011561:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011566:	5e                   	pop    esi
c0011567:	5f                   	pop    edi
c0011568:	5d                   	pop    ebp
c0011569:	c3                   	ret    
c001156a:	85 f6                	test   esi,esi
c001156c:	0f 84 35 ff ff ff    	je     c00114a7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011572:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011578:	e9 2a ff ff ff       	jmp    c00114a7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001157d:	85 f6                	test   esi,esi
c001157f:	0f 84 22 ff ff ff    	je     c00114a7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0011585:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001158b:	e9 17 ff ff ff       	jmp    c00114a7 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0011590 <SysClose(regs*)>:
c0011590:	57                   	push   edi
c0011591:	56                   	push   esi
c0011592:	53                   	push   ebx
c0011593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011597:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001159a:	83 f8 02             	cmp    eax,0x2
c001159d:	76 44                	jbe    c00115e3 <SysClose(regs*)+0x53>
c001159f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00115a5:	31 f6                	xor    esi,esi
c00115a7:	31 ff                	xor    edi,edi
c00115a9:	83 fa 01             	cmp    edx,0x1
c00115ac:	76 2d                	jbe    c00115db <SysClose(regs*)+0x4b>
c00115ae:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115b3:	77 2e                	ja     c00115e3 <SysClose(regs*)+0x53>
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	50                   	push   eax
c00115b9:	e8 ff 18 00 00       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c00115be:	83 c4 10             	add    esp,0x10
c00115c1:	85 c0                	test   eax,eax
c00115c3:	89 c3                	mov    ebx,eax
c00115c5:	74 1c                	je     c00115e3 <SysClose(regs*)+0x53>
c00115c7:	83 ec 0c             	sub    esp,0xc
c00115ca:	50                   	push   eax
c00115cb:	e8 34 6c ff ff       	call   c0008204 <File::close()>
c00115d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00115d8:	83 c4 10             	add    esp,0x10
c00115db:	5b                   	pop    ebx
c00115dc:	89 f0                	mov    eax,esi
c00115de:	89 fa                	mov    edx,edi
c00115e0:	5e                   	pop    esi
c00115e1:	5f                   	pop    edi
c00115e2:	c3                   	ret    
c00115e3:	5b                   	pop    ebx
c00115e4:	be ff ff ff ff       	mov    esi,0xffffffff
c00115e9:	89 f0                	mov    eax,esi
c00115eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00115f0:	89 fa                	mov    edx,edi
c00115f2:	5e                   	pop    esi
c00115f3:	5f                   	pop    edi
c00115f4:	c3                   	ret    

c00115f5 <SysOpenDir(regs*)>:
c00115f5:	56                   	push   esi
c00115f6:	53                   	push   ebx
c00115f7:	83 ec 04             	sub    esp,0x4
c00115fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115fe:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011601:	85 c9                	test   ecx,ecx
c0011603:	74 5d                	je     c0011662 <SysOpenDir(regs*)+0x6d>
c0011605:	83 ec 0c             	sub    esp,0xc
c0011608:	68 14 01 00 00       	push   0x114
c001160d:	e8 6e e0 ff ff       	call   c000f680 <malloc>
c0011612:	83 c4 0c             	add    esp,0xc
c0011615:	89 c6                	mov    esi,eax
c0011617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001161c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001161f:	50                   	push   eax
c0011620:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011623:	52                   	push   edx
c0011624:	56                   	push   esi
c0011625:	e8 3e 70 ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c001162a:	83 c4 10             	add    esp,0x10
c001162d:	85 f6                	test   esi,esi
c001162f:	74 31                	je     c0011662 <SysOpenDir(regs*)+0x6d>
c0011631:	83 ec 0c             	sub    esp,0xc
c0011634:	56                   	push   esi
c0011635:	e8 f6 70 ff ff       	call   c0008730 <Directory::open()>
c001163a:	83 c4 10             	add    esp,0x10
c001163d:	85 c0                	test   eax,eax
c001163f:	75 21                	jne    c0011662 <SysOpenDir(regs*)+0x6d>
c0011641:	83 ec 0c             	sub    esp,0xc
c0011644:	56                   	push   esi
c0011645:	e8 76 15 00 00       	call   c0012bc0 <UnixFile::getFileDescriptor()>
c001164a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	89 02                	mov    DWORD PTR [edx],eax
c0011652:	c1 f8 1f             	sar    eax,0x1f
c0011655:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011658:	83 c4 04             	add    esp,0x4
c001165b:	31 c0                	xor    eax,eax
c001165d:	5b                   	pop    ebx
c001165e:	31 d2                	xor    edx,edx
c0011660:	5e                   	pop    esi
c0011661:	c3                   	ret    
c0011662:	83 c4 04             	add    esp,0x4
c0011665:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001166a:	5b                   	pop    ebx
c001166b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011670:	5e                   	pop    esi
c0011671:	c3                   	ret    

c0011672 <SysMakeDir(regs*)>:
c0011672:	56                   	push   esi
c0011673:	53                   	push   ebx
c0011674:	83 ec 10             	sub    esp,0x10
c0011677:	68 14 01 00 00       	push   0x114
c001167c:	e8 ff df ff ff       	call   c000f680 <malloc>
c0011681:	83 c4 0c             	add    esp,0xc
c0011684:	89 c3                	mov    ebx,eax
c0011686:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001168b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001168e:	50                   	push   eax
c001168f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011693:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011696:	52                   	push   edx
c0011697:	53                   	push   ebx
c0011698:	e8 cb 6f ff ff       	call   c0008668 <Directory::Directory(char const*, Process*)>
c001169d:	83 c4 10             	add    esp,0x10
c00116a0:	85 db                	test   ebx,ebx
c00116a2:	74 2c                	je     c00116d0 <SysMakeDir(regs*)+0x5e>
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	53                   	push   ebx
c00116a8:	e8 63 72 ff ff       	call   c0008910 <Directory::create()>
c00116ad:	89 c6                	mov    esi,eax
c00116af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	31 c0                	xor    eax,eax
c00116bc:	85 f6                	test   esi,esi
c00116be:	0f 95 c0             	setne  al
c00116c1:	31 d2                	xor    edx,edx
c00116c3:	f7 d8                	neg    eax
c00116c5:	83 d2 00             	adc    edx,0x0
c00116c8:	83 c4 04             	add    esp,0x4
c00116cb:	5b                   	pop    ebx
c00116cc:	f7 da                	neg    edx
c00116ce:	5e                   	pop    esi
c00116cf:	c3                   	ret    
c00116d0:	83 c4 04             	add    esp,0x4
c00116d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116d8:	5b                   	pop    ebx
c00116d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116de:	5e                   	pop    esi
c00116df:	c3                   	ret    

c00116e0 <SysCloseDir(regs*)>:
c00116e0:	53                   	push   ebx
c00116e1:	83 ec 08             	sub    esp,0x8
c00116e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00116eb:	8d 50 fd             	lea    edx,[eax-0x3]
c00116ee:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00116f4:	77 2f                	ja     c0011725 <SysCloseDir(regs*)+0x45>
c00116f6:	83 ec 0c             	sub    esp,0xc
c00116f9:	50                   	push   eax
c00116fa:	e8 be 17 00 00       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	85 c0                	test   eax,eax
c0011704:	89 c3                	mov    ebx,eax
c0011706:	74 1d                	je     c0011725 <SysCloseDir(regs*)+0x45>
c0011708:	83 ec 0c             	sub    esp,0xc
c001170b:	50                   	push   eax
c001170c:	e8 7b 70 ff ff       	call   c000878c <Directory::close()>
c0011711:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011713:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011716:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011719:	83 c4 10             	add    esp,0x10
c001171c:	31 c0                	xor    eax,eax
c001171e:	83 c4 08             	add    esp,0x8
c0011721:	31 d2                	xor    edx,edx
c0011723:	5b                   	pop    ebx
c0011724:	c3                   	ret    
c0011725:	83 c4 08             	add    esp,0x8
c0011728:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001172d:	5b                   	pop    ebx
c001172e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011733:	c3                   	ret    

c0011734 <SysWait(regs*)>:
c0011734:	83 ec 10             	sub    esp,0x10
c0011737:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001173b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001173e:	52                   	push   edx
c001173f:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011742:	51                   	push   ecx
c0011743:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011746:	50                   	push   eax
c0011747:	e8 fc 4f 00 00       	call   c0016748 <waitTask(int, int*, int)>
c001174c:	83 c4 1c             	add    esp,0x1c
c001174f:	89 c2                	mov    edx,eax
c0011751:	c1 fa 1f             	sar    edx,0x1f
c0011754:	c3                   	ret    

c0011755 <SysNotImpl(regs*)>:
c0011755:	83 ec 18             	sub    esp,0x18
c0011758:	68 73 80 02 c0       	push   0xc0028073
c001175d:	e8 72 e3 ff ff       	call   c000fad4 <KePanic(char const*)>
c0011762:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011767:	ba ff ff ff ff       	mov    edx,0xffffffff
c001176c:	83 c4 1c             	add    esp,0x1c
c001176f:	c3                   	ret    

c0011770 <SysPanic(regs*)>:
c0011770:	83 ec 18             	sub    esp,0x18
c0011773:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011777:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001177a:	50                   	push   eax
c001177b:	e8 54 e3 ff ff       	call   c000fad4 <KePanic(char const*)>
c0011780:	b8 01 00 00 00       	mov    eax,0x1
c0011785:	31 d2                	xor    edx,edx
c0011787:	83 c4 1c             	add    esp,0x1c
c001178a:	c3                   	ret    

c001178b <SysRmdir(regs*)>:
c001178b:	56                   	push   esi
c001178c:	53                   	push   ebx
c001178d:	83 ec 10             	sub    esp,0x10
c0011790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011794:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011797:	68 14 01 00 00       	push   0x114
c001179c:	e8 df de ff ff       	call   c000f680 <malloc>
c00117a1:	6a 00                	push   0x0
c00117a3:	89 c3                	mov    ebx,eax
c00117a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117ad:	50                   	push   eax
c00117ae:	56                   	push   esi
c00117af:	53                   	push   ebx
c00117b0:	e8 d5 68 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c00117b5:	83 c4 14             	add    esp,0x14
c00117b8:	53                   	push   ebx
c00117b9:	e8 b6 6b ff ff       	call   c0008374 <File::unlink()>
c00117be:	83 c4 10             	add    esp,0x10
c00117c1:	85 db                	test   ebx,ebx
c00117c3:	89 c6                	mov    esi,eax
c00117c5:	74 0c                	je     c00117d3 <SysRmdir(regs*)+0x48>
c00117c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117c9:	83 ec 0c             	sub    esp,0xc
c00117cc:	53                   	push   ebx
c00117cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117d0:	83 c4 10             	add    esp,0x10
c00117d3:	31 c0                	xor    eax,eax
c00117d5:	85 f6                	test   esi,esi
c00117d7:	0f 95 c0             	setne  al
c00117da:	31 d2                	xor    edx,edx
c00117dc:	f7 d8                	neg    eax
c00117de:	83 d2 00             	adc    edx,0x0
c00117e1:	83 c4 04             	add    esp,0x4
c00117e4:	5b                   	pop    ebx
c00117e5:	f7 da                	neg    edx
c00117e7:	5e                   	pop    esi
c00117e8:	c3                   	ret    

c00117e9 <SysUnlink(regs*)>:
c00117e9:	56                   	push   esi
c00117ea:	53                   	push   ebx
c00117eb:	83 ec 10             	sub    esp,0x10
c00117ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117f2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00117f5:	68 14 01 00 00       	push   0x114
c00117fa:	e8 81 de ff ff       	call   c000f680 <malloc>
c00117ff:	6a 00                	push   0x0
c0011801:	89 c3                	mov    ebx,eax
c0011803:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011808:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001180b:	50                   	push   eax
c001180c:	56                   	push   esi
c001180d:	53                   	push   ebx
c001180e:	e8 77 68 ff ff       	call   c000808a <File::File(char const*, Process*, bool)>
c0011813:	83 c4 14             	add    esp,0x14
c0011816:	53                   	push   ebx
c0011817:	e8 58 6b ff ff       	call   c0008374 <File::unlink()>
c001181c:	83 c4 10             	add    esp,0x10
c001181f:	85 db                	test   ebx,ebx
c0011821:	89 c6                	mov    esi,eax
c0011823:	74 0c                	je     c0011831 <SysUnlink(regs*)+0x48>
c0011825:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011827:	83 ec 0c             	sub    esp,0xc
c001182a:	53                   	push   ebx
c001182b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001182e:	83 c4 10             	add    esp,0x10
c0011831:	31 c0                	xor    eax,eax
c0011833:	85 f6                	test   esi,esi
c0011835:	0f 95 c0             	setne  al
c0011838:	31 d2                	xor    edx,edx
c001183a:	f7 d8                	neg    eax
c001183c:	83 d2 00             	adc    edx,0x0
c001183f:	83 c4 04             	add    esp,0x4
c0011842:	5b                   	pop    ebx
c0011843:	f7 da                	neg    edx
c0011845:	5e                   	pop    esi
c0011846:	c3                   	ret    

c0011847 <SysGetArgv(regs*)>:
c0011847:	83 ec 0c             	sub    esp,0xc
c001184a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001184e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011851:	85 c0                	test   eax,eax
c0011853:	78 2c                	js     c0011881 <SysGetArgv(regs*)+0x3a>
c0011855:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001185b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001185e:	3b 81 b6 05 00 00    	cmp    eax,DWORD PTR [ecx+0x5b6]
c0011864:	7d 1b                	jge    c0011881 <SysGetArgv(regs*)+0x3a>
c0011866:	8b 84 81 ba 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x5ba]
c001186d:	85 c0                	test   eax,eax
c001186f:	74 18                	je     c0011889 <SysGetArgv(regs*)+0x42>
c0011871:	83 ec 08             	sub    esp,0x8
c0011874:	50                   	push   eax
c0011875:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011878:	50                   	push   eax
c0011879:	e8 d2 ed fe ff       	call   c0000650 <strcpy>
c001187e:	83 c4 10             	add    esp,0x10
c0011881:	31 c0                	xor    eax,eax
c0011883:	31 d2                	xor    edx,edx
c0011885:	83 c4 0c             	add    esp,0xc
c0011888:	c3                   	ret    
c0011889:	b8 01 00 00 00       	mov    eax,0x1
c001188e:	31 d2                	xor    edx,edx
c0011890:	83 c4 0c             	add    esp,0xc
c0011893:	c3                   	ret    

c0011894 <SysUSleep(regs*)>:
c0011894:	83 ec 1c             	sub    esp,0x1c
c0011897:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001189b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001189e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00118a1:	6a 00                	push   0x0
c00118a3:	6a 64                	push   0x64
c00118a5:	52                   	push   edx
c00118a6:	50                   	push   eax
c00118a7:	e8 18 04 01 00       	call   c0021cc4 <__udivdi3>
c00118ac:	83 c4 18             	add    esp,0x18
c00118af:	52                   	push   edx
c00118b0:	50                   	push   eax
c00118b1:	e8 8a 4f 00 00       	call   c0016840 <milliTenthSleep(unsigned long long)>
c00118b6:	31 c0                	xor    eax,eax
c00118b8:	31 d2                	xor    edx,edx
c00118ba:	83 c4 1c             	add    esp,0x1c
c00118bd:	c3                   	ret    

c00118be <SysSpawn(regs*)>:
c00118be:	56                   	push   esi
c00118bf:	53                   	push   ebx
c00118c0:	83 ec 04             	sub    esp,0x4
c00118c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118c7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00118ca:	85 f6                	test   esi,esi
c00118cc:	75 0a                	jne    c00118d8 <SysSpawn(regs*)+0x1a>
c00118ce:	83 c4 04             	add    esp,0x4
c00118d1:	31 c0                	xor    eax,eax
c00118d3:	5b                   	pop    ebx
c00118d4:	31 d2                	xor    edx,edx
c00118d6:	5e                   	pop    esi
c00118d7:	c3                   	ret    
c00118d8:	83 ec 0c             	sub    esp,0xc
c00118db:	68 c4 07 00 00       	push   0x7c4
c00118e0:	e8 9b dd ff ff       	call   c000f680 <malloc>
c00118e5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00118e8:	83 c4 10             	add    esp,0x10
c00118eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00118ee:	89 c6                	mov    esi,eax
c00118f0:	31 c0                	xor    eax,eax
c00118f2:	85 c9                	test   ecx,ecx
c00118f4:	74 08                	je     c00118fe <SysSpawn(regs*)+0x40>
c00118f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118fe:	52                   	push   edx
c00118ff:	50                   	push   eax
c0011900:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011903:	50                   	push   eax
c0011904:	56                   	push   esi
c0011905:	e8 16 46 00 00       	call   c0015f20 <Process::Process(char const*, Process*, char**)>
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	80 be be 07 00 00 00 	cmp    BYTE PTR [esi+0x7be],0x0
c0011914:	75 b8                	jne    c00118ce <SysSpawn(regs*)+0x10>
c0011916:	83 ec 0c             	sub    esp,0xc
c0011919:	56                   	push   esi
c001191a:	e8 c5 4b 00 00       	call   c00164e4 <Process::createUserThread()>
c001191f:	8b 06                	mov    eax,DWORD PTR [esi]
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	83 c4 04             	add    esp,0x4
c0011927:	5b                   	pop    ebx
c0011928:	89 c2                	mov    edx,eax
c001192a:	c1 fa 1f             	sar    edx,0x1f
c001192d:	5e                   	pop    esi
c001192e:	c3                   	ret    

c001192f <SysGetEnv(regs*)>:
c001192f:	57                   	push   edi
c0011930:	56                   	push   esi
c0011931:	53                   	push   ebx
c0011932:	83 ec 1c             	sub    esp,0x1c
c0011935:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001193a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001193e:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011941:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011944:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011947:	51                   	push   ecx
c0011948:	e8 24 cc ff ff       	call   c000e571 <KeGetProcessTotalEnvCount(Process*)>
c001194d:	83 c4 10             	add    esp,0x10
c0011950:	39 c7                	cmp    edi,eax
c0011952:	7c 12                	jl     c0011966 <SysGetEnv(regs*)+0x37>
c0011954:	31 c0                	xor    eax,eax
c0011956:	31 d2                	xor    edx,edx
c0011958:	85 f6                	test   esi,esi
c001195a:	74 03                	je     c001195f <SysGetEnv(regs*)+0x30>
c001195c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001195f:	83 c4 10             	add    esp,0x10
c0011962:	5b                   	pop    ebx
c0011963:	5e                   	pop    esi
c0011964:	5f                   	pop    edi
c0011965:	c3                   	ret    
c0011966:	8d 44 24 08          	lea    eax,[esp+0x8]
c001196a:	83 ec 04             	sub    esp,0x4
c001196d:	57                   	push   edi
c001196e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011974:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011977:	57                   	push   edi
c0011978:	50                   	push   eax
c0011979:	e8 13 cc ff ff       	call   c000e591 <KeGetProcessEnvPair(Process*, int)>
c001197e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011981:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011985:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011989:	83 c4 0c             	add    esp,0xc
c001198c:	85 d2                	test   edx,edx
c001198e:	75 23                	jne    c00119b3 <SysGetEnv(regs*)+0x84>
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	50                   	push   eax
c0011994:	e8 e7 eb fe ff       	call   c0000580 <strlen>
c0011999:	89 3c 24             	mov    DWORD PTR [esp],edi
c001199c:	89 c3                	mov    ebx,eax
c001199e:	e8 dd eb fe ff       	call   c0000580 <strlen>
c00119a3:	83 c4 10             	add    esp,0x10
c00119a6:	31 d2                	xor    edx,edx
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00119af:	5b                   	pop    ebx
c00119b0:	5e                   	pop    esi
c00119b1:	5f                   	pop    edi
c00119b2:	c3                   	ret    
c00119b3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00119b6:	83 ec 08             	sub    esp,0x8
c00119b9:	50                   	push   eax
c00119ba:	56                   	push   esi
c00119bb:	e8 90 ec fe ff       	call   c0000650 <strcpy>
c00119c0:	58                   	pop    eax
c00119c1:	5a                   	pop    edx
c00119c2:	68 8d 80 02 c0       	push   0xc002808d
c00119c7:	56                   	push   esi
c00119c8:	e8 a3 ee fe ff       	call   c0000870 <strcat>
c00119cd:	59                   	pop    ecx
c00119ce:	5b                   	pop    ebx
c00119cf:	57                   	push   edi
c00119d0:	56                   	push   esi
c00119d1:	e8 9a ee fe ff       	call   c0000870 <strcat>
c00119d6:	83 c4 10             	add    esp,0x10
c00119d9:	31 c0                	xor    eax,eax
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	31 d2                	xor    edx,edx
c00119e0:	5b                   	pop    ebx
c00119e1:	5e                   	pop    esi
c00119e2:	5f                   	pop    edi
c00119e3:	c3                   	ret    

c00119e4 <SysSetFatAttrib(regs*)>:
c00119e4:	57                   	push   edi
c00119e5:	56                   	push   esi
c00119e6:	53                   	push   ebx
c00119e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119eb:	83 ec 0c             	sub    esp,0xc
c00119ee:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00119f1:	68 14 01 00 00       	push   0x114
c00119f6:	e8 85 dc ff ff       	call   c000f680 <malloc>
c00119fb:	83 c4 0c             	add    esp,0xc
c00119fe:	89 c3                	mov    ebx,eax
c0011a00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a05:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a08:	50                   	push   eax
c0011a09:	57                   	push   edi
c0011a0a:	53                   	push   ebx
c0011a0b:	e8 78 67 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011a10:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011a13:	83 c4 0c             	add    esp,0xc
c0011a16:	0f b6 d4             	movzx  edx,ah
c0011a19:	0f b6 c0             	movzx  eax,al
c0011a1c:	52                   	push   edx
c0011a1d:	50                   	push   eax
c0011a1e:	53                   	push   ebx
c0011a1f:	e8 ea 69 ff ff       	call   c000840e <File::chfatattr(unsigned char, unsigned char)>
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	85 db                	test   ebx,ebx
c0011a29:	89 c6                	mov    esi,eax
c0011a2b:	74 0c                	je     c0011a39 <SysSetFatAttrib(regs*)+0x55>
c0011a2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a2f:	83 ec 0c             	sub    esp,0xc
c0011a32:	53                   	push   ebx
c0011a33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a36:	83 c4 10             	add    esp,0x10
c0011a39:	5b                   	pop    ebx
c0011a3a:	31 c0                	xor    eax,eax
c0011a3c:	85 f6                	test   esi,esi
c0011a3e:	0f 95 c0             	setne  al
c0011a41:	31 d2                	xor    edx,edx
c0011a43:	5e                   	pop    esi
c0011a44:	f7 d8                	neg    eax
c0011a46:	83 d2 00             	adc    edx,0x0
c0011a49:	f7 da                	neg    edx
c0011a4b:	5f                   	pop    edi
c0011a4c:	c3                   	ret    

c0011a4d <SysShutdown(regs*)>:
c0011a4d:	83 ec 1c             	sub    esp,0x1c
c0011a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a54:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011a57:	85 c9                	test   ecx,ecx
c0011a59:	74 18                	je     c0011a73 <SysShutdown(regs*)+0x26>
c0011a5b:	83 f9 01             	cmp    ecx,0x1
c0011a5e:	74 26                	je     c0011a86 <SysShutdown(regs*)+0x39>
c0011a60:	83 f9 02             	cmp    ecx,0x2
c0011a63:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a68:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a6d:	74 24                	je     c0011a93 <SysShutdown(regs*)+0x46>
c0011a6f:	83 c4 1c             	add    esp,0x1c
c0011a72:	c3                   	ret    
c0011a73:	e8 aa e9 ff ff       	call   c0010422 <KeShutdown()>
c0011a78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a82:	83 c4 1c             	add    esp,0x1c
c0011a85:	c3                   	ret    
c0011a86:	e8 cd e9 ff ff       	call   c0010458 <KeSleep()>
c0011a8b:	31 c0                	xor    eax,eax
c0011a8d:	31 d2                	xor    edx,edx
c0011a8f:	83 c4 1c             	add    esp,0x1c
c0011a92:	c3                   	ret    
c0011a93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a97:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a9b:	e8 e8 e9 ff ff       	call   c0010488 <KeRestart()>
c0011aa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011aa4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011aa8:	eb c5                	jmp    c0011a6f <SysShutdown(regs*)+0x22>

c0011aaa <SysPipe(regs*)>:
c0011aaa:	57                   	push   edi
c0011aab:	56                   	push   esi
c0011aac:	53                   	push   ebx
c0011aad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ab1:	83 ec 0c             	sub    esp,0xc
c0011ab4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011ab7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011aba:	6a 20                	push   0x20
c0011abc:	e8 bf db ff ff       	call   c000f680 <malloc>
c0011ac1:	89 c3                	mov    ebx,eax
c0011ac3:	58                   	pop    eax
c0011ac4:	5a                   	pop    edx
c0011ac5:	68 00 50 00 00       	push   0x5000
c0011aca:	53                   	push   ebx
c0011acb:	e8 d2 e7 ff ff       	call   c00102a2 <Pipe::Pipe(int)>
c0011ad0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ad3:	e8 e8 10 00 00       	call   c0012bc0 <UnixFile::getFileDescriptor()>
c0011ad8:	89 07                	mov    DWORD PTR [edi],eax
c0011ada:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011add:	e8 de 10 00 00       	call   c0012bc0 <UnixFile::getFileDescriptor()>
c0011ae2:	83 c4 10             	add    esp,0x10
c0011ae5:	31 d2                	xor    edx,edx
c0011ae7:	89 06                	mov    DWORD PTR [esi],eax
c0011ae9:	31 c0                	xor    eax,eax
c0011aeb:	5b                   	pop    ebx
c0011aec:	5e                   	pop    esi
c0011aed:	5f                   	pop    edi
c0011aee:	c3                   	ret    

c0011aef <SysGetUnixTime(regs*)>:
c0011aef:	53                   	push   ebx
c0011af0:	83 ec 10             	sub    esp,0x10
c0011af3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011af7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011afa:	52                   	push   edx
c0011afb:	68 8f 80 02 c0       	push   0xc002808f
c0011b00:	e8 61 54 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011b05:	83 c4 10             	add    esp,0x10
c0011b08:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0011b0c:	74 3b                	je     c0011b49 <SysGetUnixTime(regs*)+0x5a>
c0011b0e:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0011b13:	83 ec 0c             	sub    esp,0xc
c0011b16:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011b1c:	50                   	push   eax
c0011b1d:	e8 18 76 ff ff       	call   c000913a <Clock::timeInSecondsLocal()>
c0011b22:	83 c4 0c             	add    esp,0xc
c0011b25:	52                   	push   edx
c0011b26:	50                   	push   eax
c0011b27:	68 a3 80 02 c0       	push   0xc00280a3
c0011b2c:	e8 35 54 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011b31:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0011b36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011b3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011b40:	83 c4 18             	add    esp,0x18
c0011b43:	5b                   	pop    ebx
c0011b44:	e9 f1 75 ff ff       	jmp    c000913a <Clock::timeInSecondsLocal()>
c0011b49:	6b 0d 54 0b 03 c0 64 	imul   ecx,DWORD PTR ds:0xc0030b54,0x64
c0011b50:	b8 64 00 00 00       	mov    eax,0x64
c0011b55:	f7 25 50 0b 03 c0    	mul    DWORD PTR ds:0xc0030b50
c0011b5b:	83 c4 08             	add    esp,0x8
c0011b5e:	5b                   	pop    ebx
c0011b5f:	01 ca                	add    edx,ecx
c0011b61:	c3                   	ret    

c0011b62 <string_ends_with(char const*, char const*)>:
c0011b62:	57                   	push   edi
c0011b63:	56                   	push   esi
c0011b64:	53                   	push   ebx
c0011b65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b69:	83 ec 0c             	sub    esp,0xc
c0011b6c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b70:	53                   	push   ebx
c0011b71:	e8 0a ea fe ff       	call   c0000580 <strlen>
c0011b76:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b79:	89 c6                	mov    esi,eax
c0011b7b:	e8 00 ea fe ff       	call   c0000580 <strlen>
c0011b80:	83 c4 10             	add    esp,0x10
c0011b83:	31 d2                	xor    edx,edx
c0011b85:	39 c6                	cmp    esi,eax
c0011b87:	7d 06                	jge    c0011b8f <string_ends_with(char const*, char const*)+0x2d>
c0011b89:	5b                   	pop    ebx
c0011b8a:	89 d0                	mov    eax,edx
c0011b8c:	5e                   	pop    esi
c0011b8d:	5f                   	pop    edi
c0011b8e:	c3                   	ret    
c0011b8f:	83 ec 08             	sub    esp,0x8
c0011b92:	29 c6                	sub    esi,eax
c0011b94:	57                   	push   edi
c0011b95:	01 f3                	add    ebx,esi
c0011b97:	53                   	push   ebx
c0011b98:	e8 e3 eb fe ff       	call   c0000780 <strcmp>
c0011b9d:	83 c4 10             	add    esp,0x10
c0011ba0:	31 d2                	xor    edx,edx
c0011ba2:	5b                   	pop    ebx
c0011ba3:	5e                   	pop    esi
c0011ba4:	85 c0                	test   eax,eax
c0011ba6:	5f                   	pop    edi
c0011ba7:	0f 94 c2             	sete   dl
c0011baa:	89 d0                	mov    eax,edx
c0011bac:	c3                   	ret    

c0011bad <SysOpen(regs*)>:
c0011bad:	56                   	push   esi
c0011bae:	53                   	push   ebx
c0011baf:	81 ec 04 01 00 00    	sub    esp,0x104
c0011bb5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011bbc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bbf:	85 c0                	test   eax,eax
c0011bc1:	0f 84 c4 01 00 00    	je     c0011d8b <SysOpen(regs*)+0x1de>
c0011bc7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011bca:	85 c0                	test   eax,eax
c0011bcc:	0f 84 b9 01 00 00    	je     c0011d8b <SysOpen(regs*)+0x1de>
c0011bd2:	6a 00                	push   0x0
c0011bd4:	68 aa 80 02 c0       	push   0xc00280aa
c0011bd9:	50                   	push   eax
c0011bda:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011bde:	56                   	push   esi
c0011bdf:	e8 78 62 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011be4:	89 34 24             	mov    DWORD PTR [esp],esi
c0011be7:	e8 94 e9 fe ff       	call   c0000580 <strlen>
c0011bec:	83 c4 10             	add    esp,0x10
c0011bef:	83 e8 01             	sub    eax,0x1
c0011bf2:	74 29                	je     c0011c1d <SysOpen(regs*)+0x70>
c0011bf4:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011bf8:	83 fa 2e             	cmp    edx,0x2e
c0011bfb:	74 1c                	je     c0011c19 <SysOpen(regs*)+0x6c>
c0011bfd:	83 fa 3a             	cmp    edx,0x3a
c0011c00:	74 17                	je     c0011c19 <SysOpen(regs*)+0x6c>
c0011c02:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011c06:	83 e8 01             	sub    eax,0x1
c0011c09:	74 12                	je     c0011c1d <SysOpen(regs*)+0x70>
c0011c0b:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011c0f:	83 fa 3a             	cmp    edx,0x3a
c0011c12:	74 05                	je     c0011c19 <SysOpen(regs*)+0x6c>
c0011c14:	83 fa 2e             	cmp    edx,0x2e
c0011c17:	75 e9                	jne    c0011c02 <SysOpen(regs*)+0x55>
c0011c19:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011c1d:	83 ec 08             	sub    esp,0x8
c0011c20:	68 ae 80 02 c0       	push   0xc00280ae
c0011c25:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c28:	50                   	push   eax
c0011c29:	e8 34 ff ff ff       	call   c0011b62 <string_ends_with(char const*, char const*)>
c0011c2e:	83 c4 10             	add    esp,0x10
c0011c31:	85 c0                	test   eax,eax
c0011c33:	74 1d                	je     c0011c52 <SysOpen(regs*)+0xa5>
c0011c35:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c38:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011c3e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c45:	81 c4 04 01 00 00    	add    esp,0x104
c0011c4b:	31 c0                	xor    eax,eax
c0011c4d:	5b                   	pop    ebx
c0011c4e:	31 d2                	xor    edx,edx
c0011c50:	5e                   	pop    esi
c0011c51:	c3                   	ret    
c0011c52:	83 ec 08             	sub    esp,0x8
c0011c55:	68 b3 80 02 c0       	push   0xc00280b3
c0011c5a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c5d:	50                   	push   eax
c0011c5e:	e8 ff fe ff ff       	call   c0011b62 <string_ends_with(char const*, char const*)>
c0011c63:	83 c4 10             	add    esp,0x10
c0011c66:	85 c0                	test   eax,eax
c0011c68:	75 cb                	jne    c0011c35 <SysOpen(regs*)+0x88>
c0011c6a:	83 ec 08             	sub    esp,0x8
c0011c6d:	68 af 80 02 c0       	push   0xc00280af
c0011c72:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c75:	50                   	push   eax
c0011c76:	e8 05 eb fe ff       	call   c0000780 <strcmp>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	85 c0                	test   eax,eax
c0011c80:	74 b3                	je     c0011c35 <SysOpen(regs*)+0x88>
c0011c82:	83 ec 08             	sub    esp,0x8
c0011c85:	68 ae 80 02 c0       	push   0xc00280ae
c0011c8a:	56                   	push   esi
c0011c8b:	e8 d2 fe ff ff       	call   c0011b62 <string_ends_with(char const*, char const*)>
c0011c90:	83 c4 10             	add    esp,0x10
c0011c93:	85 c0                	test   eax,eax
c0011c95:	75 9e                	jne    c0011c35 <SysOpen(regs*)+0x88>
c0011c97:	83 ec 08             	sub    esp,0x8
c0011c9a:	68 b8 80 02 c0       	push   0xc00280b8
c0011c9f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ca2:	50                   	push   eax
c0011ca3:	e8 ba fe ff ff       	call   c0011b62 <string_ends_with(char const*, char const*)>
c0011ca8:	83 c4 10             	add    esp,0x10
c0011cab:	85 c0                	test   eax,eax
c0011cad:	0f 85 eb 00 00 00    	jne    c0011d9e <SysOpen(regs*)+0x1f1>
c0011cb3:	83 ec 08             	sub    esp,0x8
c0011cb6:	68 bd 80 02 c0       	push   0xc00280bd
c0011cbb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011cbe:	50                   	push   eax
c0011cbf:	e8 9e fe ff ff       	call   c0011b62 <string_ends_with(char const*, char const*)>
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	85 c0                	test   eax,eax
c0011cc9:	0f 85 cf 00 00 00    	jne    c0011d9e <SysOpen(regs*)+0x1f1>
c0011ccf:	83 ec 08             	sub    esp,0x8
c0011cd2:	68 b9 80 02 c0       	push   0xc00280b9
c0011cd7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011cda:	51                   	push   ecx
c0011cdb:	e8 a0 ea fe ff       	call   c0000780 <strcmp>
c0011ce0:	83 c4 10             	add    esp,0x10
c0011ce3:	85 c0                	test   eax,eax
c0011ce5:	0f 84 b3 00 00 00    	je     c0011d9e <SysOpen(regs*)+0x1f1>
c0011ceb:	83 ec 08             	sub    esp,0x8
c0011cee:	68 b8 80 02 c0       	push   0xc00280b8
c0011cf3:	56                   	push   esi
c0011cf4:	e8 69 fe ff ff       	call   c0011b62 <string_ends_with(char const*, char const*)>
c0011cf9:	83 c4 10             	add    esp,0x10
c0011cfc:	85 c0                	test   eax,eax
c0011cfe:	0f 85 9a 00 00 00    	jne    c0011d9e <SysOpen(regs*)+0x1f1>
c0011d04:	83 ec 0c             	sub    esp,0xc
c0011d07:	68 14 01 00 00       	push   0x114
c0011d0c:	e8 6f d9 ff ff       	call   c000f680 <malloc>
c0011d11:	83 c4 0c             	add    esp,0xc
c0011d14:	89 c6                	mov    esi,eax
c0011d16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d1e:	50                   	push   eax
c0011d1f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011d22:	52                   	push   edx
c0011d23:	56                   	push   esi
c0011d24:	e8 5f 64 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0011d29:	83 c4 10             	add    esp,0x10
c0011d2c:	85 f6                	test   esi,esi
c0011d2e:	74 5b                	je     c0011d8b <SysOpen(regs*)+0x1de>
c0011d30:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d33:	0f b6 c2             	movzx  eax,dl
c0011d36:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011d39:	89 d0                	mov    eax,edx
c0011d3b:	83 e0 01             	and    eax,0x1
c0011d3e:	f6 c2 02             	test   dl,0x2
c0011d41:	74 03                	je     c0011d46 <SysOpen(regs*)+0x199>
c0011d43:	83 c8 02             	or     eax,0x2
c0011d46:	f6 c2 04             	test   dl,0x4
c0011d49:	74 03                	je     c0011d4e <SysOpen(regs*)+0x1a1>
c0011d4b:	83 c8 04             	or     eax,0x4
c0011d4e:	f6 c2 08             	test   dl,0x8
c0011d51:	74 03                	je     c0011d56 <SysOpen(regs*)+0x1a9>
c0011d53:	83 c8 0a             	or     eax,0xa
c0011d56:	80 e2 10             	and    dl,0x10
c0011d59:	74 03                	je     c0011d5e <SysOpen(regs*)+0x1b1>
c0011d5b:	83 c8 12             	or     eax,0x12
c0011d5e:	83 ec 08             	sub    esp,0x8
c0011d61:	50                   	push   eax
c0011d62:	56                   	push   esi
c0011d63:	e8 3e 64 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0011d68:	83 c4 10             	add    esp,0x10
c0011d6b:	85 c0                	test   eax,eax
c0011d6d:	75 1c                	jne    c0011d8b <SysOpen(regs*)+0x1de>
c0011d6f:	83 ec 0c             	sub    esp,0xc
c0011d72:	56                   	push   esi
c0011d73:	e8 48 0e 00 00       	call   c0012bc0 <UnixFile::getFileDescriptor()>
c0011d78:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011d7b:	83 c4 10             	add    esp,0x10
c0011d7e:	89 02                	mov    DWORD PTR [edx],eax
c0011d80:	c1 f8 1f             	sar    eax,0x1f
c0011d83:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011d86:	e9 ba fe ff ff       	jmp    c0011c45 <SysOpen(regs*)+0x98>
c0011d8b:	81 c4 04 01 00 00    	add    esp,0x104
c0011d91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d96:	5b                   	pop    ebx
c0011d97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d9c:	5e                   	pop    esi
c0011d9d:	c3                   	ret    
c0011d9e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011da1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011da7:	e9 92 fe ff ff       	jmp    c0011c3e <SysOpen(regs*)+0x91>

c0011dac <KeSystemCall(regs*, void*)>:
c0011dac:	53                   	push   ebx
c0011dad:	83 ec 08             	sub    esp,0x8
c0011db0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011db4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011db7:	83 f8 48             	cmp    eax,0x48
c0011dba:	77 16                	ja     c0011dd2 <KeSystemCall(regs*, void*)+0x26>
c0011dbc:	8b 14 85 a0 b2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4d60]
c0011dc3:	85 d2                	test   edx,edx
c0011dc5:	74 0b                	je     c0011dd2 <KeSystemCall(regs*, void*)+0x26>
c0011dc7:	83 ec 0c             	sub    esp,0xc
c0011dca:	53                   	push   ebx
c0011dcb:	ff d2                	call   edx
c0011dcd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011dd0:	eb 0d                	jmp    c0011ddf <KeSystemCall(regs*, void*)+0x33>
c0011dd2:	52                   	push   edx
c0011dd3:	52                   	push   edx
c0011dd4:	50                   	push   eax
c0011dd5:	68 c2 80 02 c0       	push   0xc00280c2
c0011dda:	e8 87 51 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0011ddf:	83 c4 10             	add    esp,0x10
c0011de2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011de7:	83 c4 08             	add    esp,0x8
c0011dea:	31 d2                	xor    edx,edx
c0011dec:	5b                   	pop    ebx
c0011ded:	c3                   	ret    

c0011dee <VgaText::isAtty()>:
c0011dee:	b0 01                	mov    al,0x1
c0011df0:	c3                   	ret    
c0011df1:	90                   	nop

c0011df2 <VgaText::~VgaText()>:
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	ba 3c 81 02 c0       	mov    edx,0xc002813c
c0011dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dfe:	89 10                	mov    DWORD PTR [eax],edx
c0011e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e04:	83 ec 0c             	sub    esp,0xc
c0011e07:	50                   	push   eax
c0011e08:	e8 a1 0f 00 00       	call   c0012dae <UnixFile::~UnixFile()>
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	90                   	nop
c0011e11:	83 c4 0c             	add    esp,0xc
c0011e14:	c3                   	ret    
c0011e15:	90                   	nop

c0011e16 <VgaText::~VgaText()>:
c0011e16:	83 ec 0c             	sub    esp,0xc
c0011e19:	83 ec 0c             	sub    esp,0xc
c0011e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e20:	e8 cd ff ff ff       	call   c0011df2 <VgaText::~VgaText()>
c0011e25:	83 c4 10             	add    esp,0x10
c0011e28:	83 ec 08             	sub    esp,0x8
c0011e2b:	68 84 01 00 00       	push   0x184
c0011e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e34:	e8 4f b4 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0011e39:	83 c4 10             	add    esp,0x10
c0011e3c:	83 c4 0c             	add    esp,0xc
c0011e3f:	c3                   	ret    

c0011e40 <VgaText::read(unsigned long long, void*, int*)>:
c0011e40:	83 ec 10             	sub    esp,0x10
c0011e43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e47:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e4f:	e8 bf 86 ff ff       	call   c000a513 <readKeyboard(VgaText*, char*, unsigned long)>
c0011e54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e58:	89 02                	mov    DWORD PTR [edx],eax
c0011e5a:	31 c0                	xor    eax,eax
c0011e5c:	83 c4 1c             	add    esp,0x1c
c0011e5f:	c3                   	ret    

c0011e60 <setTerminalScrollLock(bool)>:
c0011e60:	c3                   	ret    

c0011e61 <doTerminalCycle()>:
c0011e61:	c3                   	ret    

c0011e62 <addToTerminalCycle(VgaText*)>:
c0011e62:	c3                   	ret    

c0011e63 <scrollTerminalScrollLock(int)>:
c0011e63:	c3                   	ret    

c0011e64 <VgaText::updateTitle()>:
c0011e64:	c3                   	ret    
c0011e65:	90                   	nop

c0011e66 <VgaText::load()>:
c0011e66:	c3                   	ret    
c0011e67:	90                   	nop

c0011e68 <VgaText::updateCursor()>:
c0011e68:	83 ec 14             	sub    esp,0x14
c0011e6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e6f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011e72:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011e75:	e8 5e 9b 00 00       	call   c001b9d8 <HalConsoleCursorUpdate(int, int)>
c0011e7a:	83 c4 1c             	add    esp,0x1c
c0011e7d:	c3                   	ret    

c0011e7e <VgaText::doANSI_SGR(int)>:
c0011e7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e86:	85 d2                	test   edx,edx
c0011e88:	75 0b                	jne    c0011e95 <VgaText::doANSI_SGR(int)+0x17>
c0011e8a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0011e8d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011e90:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011e93:	eb 59                	jmp    c0011eee <VgaText::doANSI_SGR(int)+0x70>
c0011e95:	83 fa 07             	cmp    edx,0x7
c0011e98:	75 0b                	jne    c0011ea5 <VgaText::doANSI_SGR(int)+0x27>
c0011e9a:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0011e9d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0011ea0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0011ea3:	eb 49                	jmp    c0011eee <VgaText::doANSI_SGR(int)+0x70>
c0011ea5:	83 fa 1b             	cmp    edx,0x1b
c0011ea8:	74 e0                	je     c0011e8a <VgaText::doANSI_SGR(int)+0xc>
c0011eaa:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0011ead:	83 f9 07             	cmp    ecx,0x7
c0011eb0:	77 09                	ja     c0011ebb <VgaText::doANSI_SGR(int)+0x3d>
c0011eb2:	8b 14 8d 00 b4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4c00]
c0011eb9:	eb 20                	jmp    c0011edb <VgaText::doANSI_SGR(int)+0x5d>
c0011ebb:	8d 4a d8             	lea    ecx,[edx-0x28]
c0011ebe:	83 f9 07             	cmp    ecx,0x7
c0011ec1:	77 09                	ja     c0011ecc <VgaText::doANSI_SGR(int)+0x4e>
c0011ec3:	8b 14 8d 00 b4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4c00]
c0011eca:	eb 22                	jmp    c0011eee <VgaText::doANSI_SGR(int)+0x70>
c0011ecc:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0011ecf:	83 f9 07             	cmp    ecx,0x7
c0011ed2:	77 0b                	ja     c0011edf <VgaText::doANSI_SGR(int)+0x61>
c0011ed4:	8b 14 95 b8 b2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4d48]
c0011edb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011ede:	c3                   	ret    
c0011edf:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0011ee2:	83 f9 07             	cmp    ecx,0x7
c0011ee5:	77 0a                	ja     c0011ef1 <VgaText::doANSI_SGR(int)+0x73>
c0011ee7:	8b 14 95 90 b2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4d70]
c0011eee:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011ef1:	c3                   	ret    

c0011ef2 <VgaText::setDefaultBgColour(VgaColour)>:
c0011ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011efa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011efd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011f00:	c3                   	ret    
c0011f01:	90                   	nop

c0011f02 <VgaText::setDefaultFgColour(VgaColour)>:
c0011f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f0a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011f0d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011f10:	c3                   	ret    
c0011f11:	90                   	nop

c0011f12 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0011f12:	53                   	push   ebx
c0011f13:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f17:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f1b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f1f:	51                   	push   ecx
c0011f20:	e8 cd ff ff ff       	call   c0011ef2 <VgaText::setDefaultBgColour(VgaColour)>
c0011f25:	58                   	pop    eax
c0011f26:	5a                   	pop    edx
c0011f27:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011f2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011f2f:	5b                   	pop    ebx
c0011f30:	eb d0                	jmp    c0011f02 <VgaText::setDefaultFgColour(VgaColour)>

c0011f32 <VgaText::setTitleTextColour(VgaColour)>:
c0011f32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f3a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0011f3d:	c3                   	ret    

c0011f3e <VgaText::setTitleColour(VgaColour)>:
c0011f3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011f46:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011f49:	c3                   	ret    

c0011f4a <VgaText::setTitle(char*)>:
c0011f4a:	c3                   	ret    
c0011f4b:	90                   	nop

c0011f4c <VgaText::combineColours(unsigned char, unsigned char)>:
c0011f4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f50:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0011f55:	83 e0 0f             	and    eax,0xf
c0011f58:	c1 e2 04             	shl    edx,0x4
c0011f5b:	09 d0                	or     eax,edx
c0011f5d:	c3                   	ret    

c0011f5e <VgaText::scrollScreen()>:
c0011f5e:	55                   	push   ebp
c0011f5f:	57                   	push   edi
c0011f60:	56                   	push   esi
c0011f61:	be 01 00 00 00       	mov    esi,0x1
c0011f66:	53                   	push   ebx
c0011f67:	83 ec 0c             	sub    esp,0xc
c0011f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f6e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0011f71:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0011f77:	31 ff                	xor    edi,edi
c0011f79:	01 e9                	add    ecx,ebp
c0011f7b:	8a 01                	mov    al,BYTE PTR [ecx]
c0011f7d:	83 fe 18             	cmp    esi,0x18
c0011f80:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0011f86:	75 20                	jne    c0011fa8 <VgaText::scrollScreen()+0x4a>
c0011f88:	f7 c7 01 00 00 00    	test   edi,0x1
c0011f8e:	74 15                	je     c0011fa5 <VgaText::scrollScreen()+0x47>
c0011f90:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011f94:	50                   	push   eax
c0011f95:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011f99:	50                   	push   eax
c0011f9a:	e8 ad ff ff ff       	call   c0011f4c <VgaText::combineColours(unsigned char, unsigned char)>
c0011f9f:	5a                   	pop    edx
c0011fa0:	5a                   	pop    edx
c0011fa1:	88 01                	mov    BYTE PTR [ecx],al
c0011fa3:	eb 03                	jmp    c0011fa8 <VgaText::scrollScreen()+0x4a>
c0011fa5:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011fa8:	47                   	inc    edi
c0011fa9:	41                   	inc    ecx
c0011faa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0011fb0:	75 c9                	jne    c0011f7b <VgaText::scrollScreen()+0x1d>
c0011fb2:	46                   	inc    esi
c0011fb3:	83 fe 19             	cmp    esi,0x19
c0011fb6:	75 b9                	jne    c0011f71 <VgaText::scrollScreen()+0x13>
c0011fb8:	39 1d f4 11 03 c0    	cmp    DWORD PTR ds:0xc00311f4,ebx
c0011fbe:	75 1f                	jne    c0011fdf <VgaText::scrollScreen()+0x81>
c0011fc0:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011fc4:	74 05                	je     c0011fcb <VgaText::scrollScreen()+0x6d>
c0011fc6:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0011fc9:	eb 14                	jmp    c0011fdf <VgaText::scrollScreen()+0x81>
c0011fcb:	50                   	push   eax
c0011fcc:	50                   	push   eax
c0011fcd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011fd1:	50                   	push   eax
c0011fd2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011fd6:	50                   	push   eax
c0011fd7:	e8 90 98 00 00       	call   c001b86c <HalConsoleScroll(int, int)>
c0011fdc:	83 c4 10             	add    esp,0x10
c0011fdf:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011fe3:	83 c4 0c             	add    esp,0xc
c0011fe6:	5b                   	pop    ebx
c0011fe7:	5e                   	pop    esi
c0011fe8:	5f                   	pop    edi
c0011fe9:	5d                   	pop    ebp
c0011fea:	e9 79 fe ff ff       	jmp    c0011e68 <VgaText::updateCursor()>
c0011fef:	90                   	nop

c0011ff0 <VgaText::combineCharAndColour(char, unsigned char)>:
c0011ff0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011ff5:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0011ffa:	c1 e0 08             	shl    eax,0x8
c0011ffd:	09 d0                	or     eax,edx
c0011fff:	c3                   	ret    

c0012000 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0012000:	55                   	push   ebp
c0012001:	57                   	push   edi
c0012002:	56                   	push   esi
c0012003:	53                   	push   ebx
c0012004:	83 ec 1c             	sub    esp,0x1c
c0012007:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001200b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001200f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012013:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012017:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c001201a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001201e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012022:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012026:	85 ed                	test   ebp,ebp
c0012028:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001202c:	75 14                	jne    c0012042 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001202e:	c7 44 24 30 d6 80 02 c0 	mov    DWORD PTR [esp+0x30],0xc00280d6
c0012036:	83 c4 1c             	add    esp,0x1c
c0012039:	5b                   	pop    ebx
c001203a:	5e                   	pop    esi
c001203b:	5f                   	pop    edi
c001203c:	5d                   	pop    ebp
c001203d:	e9 92 da ff ff       	jmp    c000fad4 <KePanic(char const*)>
c0012042:	50                   	push   eax
c0012043:	50                   	push   eax
c0012044:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012049:	50                   	push   eax
c001204a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001204f:	50                   	push   eax
c0012050:	e8 f7 fe ff ff       	call   c0011f4c <VgaText::combineColours(unsigned char, unsigned char)>
c0012055:	5a                   	pop    edx
c0012056:	5a                   	pop    edx
c0012057:	0f b6 c0             	movzx  eax,al
c001205a:	0f be c9             	movsx  ecx,cl
c001205d:	50                   	push   eax
c001205e:	51                   	push   ecx
c001205f:	e8 8c ff ff ff       	call   c0011ff0 <VgaText::combineCharAndColour(char, unsigned char)>
c0012064:	6b d6 50             	imul   edx,esi,0x50
c0012067:	83 c4 10             	add    esp,0x10
c001206a:	01 da                	add    edx,ebx
c001206c:	0f b7 d2             	movzx  edx,dx
c001206f:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0012074:	39 3d f4 11 03 c0    	cmp    DWORD PTR ds:0xc00311f4,edi
c001207a:	75 28                	jne    c00120a4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c001207c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0012080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012084:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012088:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001208c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012094:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012098:	83 c4 1c             	add    esp,0x1c
c001209b:	5b                   	pop    ebx
c001209c:	5e                   	pop    esi
c001209d:	5f                   	pop    edi
c001209e:	5d                   	pop    ebp
c001209f:	e9 d0 98 00 00       	jmp    c001b974 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00120a4:	83 c4 1c             	add    esp,0x1c
c00120a7:	5b                   	pop    ebx
c00120a8:	5e                   	pop    esi
c00120a9:	5f                   	pop    edi
c00120aa:	5d                   	pop    ebp
c00120ab:	c3                   	ret    

c00120ac <VgaText::getCursorX()>:
c00120ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00120b3:	c3                   	ret    

c00120b4 <VgaText::getCursorY()>:
c00120b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120b8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00120bb:	c3                   	ret    

c00120bc <VgaText::setCursor(int, int)>:
c00120bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120c4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00120c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00120ce:	e9 95 fd ff ff       	jmp    c0011e68 <VgaText::updateCursor()>

c00120d3 <setActiveTerminal(VgaText*)>:
c00120d3:	53                   	push   ebx
c00120d4:	83 ec 08             	sub    esp,0x8
c00120d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120db:	85 db                	test   ebx,ebx
c00120dd:	75 11                	jne    c00120f0 <setActiveTerminal(VgaText*)+0x1d>
c00120df:	c7 44 24 10 e6 80 02 c0 	mov    DWORD PTR [esp+0x10],0xc00280e6
c00120e7:	83 c4 08             	add    esp,0x8
c00120ea:	5b                   	pop    ebx
c00120eb:	e9 e4 d9 ff ff       	jmp    c000fad4 <KePanic(char const*)>
c00120f0:	a1 f4 11 03 c0       	mov    eax,ds:0xc00311f4
c00120f5:	85 c0                	test   eax,eax
c00120f7:	74 0c                	je     c0012105 <setActiveTerminal(VgaText*)+0x32>
c00120f9:	83 ec 0c             	sub    esp,0xc
c00120fc:	50                   	push   eax
c00120fd:	e8 66 fd ff ff       	call   c0011e68 <VgaText::updateCursor()>
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	50                   	push   eax
c0012106:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012109:	89 1d f4 11 03 c0    	mov    DWORD PTR ds:0xc00311f4,ebx
c001210f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012112:	53                   	push   ebx
c0012113:	e8 a4 ff ff ff       	call   c00120bc <VgaText::setCursor(int, int)>
c0012118:	83 c4 18             	add    esp,0x18
c001211b:	5b                   	pop    ebx
c001211c:	c3                   	ret    
c001211d:	90                   	nop

c001211e <VgaText::clearScreen()>:
c001211e:	57                   	push   edi
c001211f:	56                   	push   esi
c0012120:	31 f6                	xor    esi,esi
c0012122:	53                   	push   ebx
c0012123:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012127:	52                   	push   edx
c0012128:	6a 00                	push   0x0
c001212a:	6a 00                	push   0x0
c001212c:	53                   	push   ebx
c001212d:	e8 8a ff ff ff       	call   c00120bc <VgaText::setCursor(int, int)>
c0012132:	83 c4 10             	add    esp,0x10
c0012135:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001213c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001213f:	7e 20                	jle    c0012161 <VgaText::clearScreen()+0x43>
c0012141:	31 ff                	xor    edi,edi
c0012143:	50                   	push   eax
c0012144:	50                   	push   eax
c0012145:	56                   	push   esi
c0012146:	57                   	push   edi
c0012147:	47                   	inc    edi
c0012148:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001214b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001214e:	6a 20                	push   0x20
c0012150:	53                   	push   ebx
c0012151:	e8 aa fe ff ff       	call   c0012000 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012156:	83 c4 20             	add    esp,0x20
c0012159:	83 ff 50             	cmp    edi,0x50
c001215c:	75 e5                	jne    c0012143 <VgaText::clearScreen()+0x25>
c001215e:	46                   	inc    esi
c001215f:	eb db                	jmp    c001213c <VgaText::clearScreen()+0x1e>
c0012161:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0012168:	5b                   	pop    ebx
c0012169:	5e                   	pop    esi
c001216a:	5f                   	pop    edi
c001216b:	c3                   	ret    

c001216c <VgaText::setCursorX(int)>:
c001216c:	83 ec 10             	sub    esp,0x10
c001216f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012173:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001217a:	50                   	push   eax
c001217b:	e8 3c ff ff ff       	call   c00120bc <VgaText::setCursor(int, int)>
c0012180:	83 c4 1c             	add    esp,0x1c
c0012183:	c3                   	ret    

c0012184 <VgaText::setCursorY(int)>:
c0012184:	83 ec 10             	sub    esp,0x10
c0012187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001218b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001218f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012192:	50                   	push   eax
c0012193:	e8 24 ff ff ff       	call   c00120bc <VgaText::setCursor(int, int)>
c0012198:	83 c4 1c             	add    esp,0x1c
c001219b:	c3                   	ret    

c001219c <VgaText::incrementCursor(bool)>:
c001219c:	56                   	push   esi
c001219d:	53                   	push   ebx
c001219e:	51                   	push   ecx
c001219f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00121a7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00121aa:	40                   	inc    eax
c00121ab:	83 f8 50             	cmp    eax,0x50
c00121ae:	74 05                	je     c00121b5 <VgaText::incrementCursor(bool)+0x19>
c00121b0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00121b3:	eb 24                	jmp    c00121d9 <VgaText::incrementCursor(bool)+0x3d>
c00121b5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00121bc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00121bf:	8d 50 01             	lea    edx,[eax+0x1]
c00121c2:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00121c5:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00121c8:	75 0f                	jne    c00121d9 <VgaText::incrementCursor(bool)+0x3d>
c00121ca:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00121cd:	83 ec 0c             	sub    esp,0xc
c00121d0:	53                   	push   ebx
c00121d1:	e8 88 fd ff ff       	call   c0011f5e <VgaText::scrollScreen()>
c00121d6:	83 c4 10             	add    esp,0x10
c00121d9:	89 f0                	mov    eax,esi
c00121db:	84 c0                	test   al,al
c00121dd:	74 0c                	je     c00121eb <VgaText::incrementCursor(bool)+0x4f>
c00121df:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00121e3:	5a                   	pop    edx
c00121e4:	5b                   	pop    ebx
c00121e5:	5e                   	pop    esi
c00121e6:	e9 7d fc ff ff       	jmp    c0011e68 <VgaText::updateCursor()>
c00121eb:	58                   	pop    eax
c00121ec:	5b                   	pop    ebx
c00121ed:	5e                   	pop    esi
c00121ee:	c3                   	ret    
c00121ef:	90                   	nop

c00121f0 <VgaText::decrementCursor(bool)>:
c00121f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00121f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00121f8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00121fb:	85 c0                	test   eax,eax
c00121fd:	74 04                	je     c0012203 <VgaText::decrementCursor(bool)+0x13>
c00121ff:	48                   	dec    eax
c0012200:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0012203:	84 c9                	test   cl,cl
c0012205:	74 09                	je     c0012210 <VgaText::decrementCursor(bool)+0x20>
c0012207:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001220b:	e9 58 fc ff ff       	jmp    c0011e68 <VgaText::updateCursor()>
c0012210:	c3                   	ret    
c0012211:	90                   	nop

c0012212 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0012212:	53                   	push   ebx
c0012213:	83 ec 08             	sub    esp,0x8
c0012216:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001221b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001221f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012223:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012227:	83 f8 07             	cmp    eax,0x7
c001222a:	75 21                	jne    c001224d <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001222c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012234:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c001223c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012244:	83 c4 08             	add    esp,0x8
c0012247:	5b                   	pop    ebx
c0012248:	e9 de 67 ff ff       	jmp    c0008a2b <KeBeep(int, int, bool)>
c001224d:	83 f8 0d             	cmp    eax,0xd
c0012250:	75 09                	jne    c001225b <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0012252:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012259:	eb 2d                	jmp    c0012288 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001225b:	83 f8 0a             	cmp    eax,0xa
c001225e:	75 31                	jne    c0012291 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012260:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012267:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001226a:	8d 50 01             	lea    edx,[eax+0x1]
c001226d:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012270:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012273:	75 0f                	jne    c0012284 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0012275:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012278:	83 ec 0c             	sub    esp,0xc
c001227b:	53                   	push   ebx
c001227c:	e8 dd fc ff ff       	call   c0011f5e <VgaText::scrollScreen()>
c0012281:	83 c4 10             	add    esp,0x10
c0012284:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012288:	83 c4 08             	add    esp,0x8
c001228b:	5b                   	pop    ebx
c001228c:	e9 d7 fb ff ff       	jmp    c0011e68 <VgaText::updateCursor()>
c0012291:	83 f8 08             	cmp    eax,0x8
c0012294:	75 25                	jne    c00122bb <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0012296:	50                   	push   eax
c0012297:	50                   	push   eax
c0012298:	6a 01                	push   0x1
c001229a:	53                   	push   ebx
c001229b:	e8 50 ff ff ff       	call   c00121f0 <VgaText::decrementCursor(bool)>
c00122a0:	5a                   	pop    edx
c00122a1:	59                   	pop    ecx
c00122a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00122a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00122a8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00122ab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00122ae:	6a 20                	push   0x20
c00122b0:	53                   	push   ebx
c00122b1:	e8 4a fd ff ff       	call   c0012000 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00122b6:	83 c4 28             	add    esp,0x28
c00122b9:	5b                   	pop    ebx
c00122ba:	c3                   	ret    
c00122bb:	83 ec 08             	sub    esp,0x8
c00122be:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00122c1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00122c4:	51                   	push   ecx
c00122c5:	52                   	push   edx
c00122c6:	50                   	push   eax
c00122c7:	53                   	push   ebx
c00122c8:	e8 33 fd ff ff       	call   c0012000 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00122cd:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00122d1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00122d9:	83 c4 28             	add    esp,0x28
c00122dc:	5b                   	pop    ebx
c00122dd:	e9 ba fe ff ff       	jmp    c001219c <VgaText::incrementCursor(bool)>

c00122e2 <VgaText::putchar(char)>:
c00122e2:	57                   	push   edi
c00122e3:	56                   	push   esi
c00122e4:	53                   	push   ebx
c00122e5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00122e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00122ed:	0f be c2             	movsx  eax,dl
c00122f0:	83 f8 5b             	cmp    eax,0x5b
c00122f3:	75 18                	jne    c001230d <VgaText::putchar(char)+0x2b>
c00122f5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00122f9:	74 20                	je     c001231b <VgaText::putchar(char)+0x39>
c00122fb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012301:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012308:	e9 b8 00 00 00       	jmp    c00123c5 <VgaText::putchar(char)+0xe3>
c001230d:	83 f8 1b             	cmp    eax,0x1b
c0012310:	75 09                	jne    c001231b <VgaText::putchar(char)+0x39>
c0012312:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012316:	e9 aa 00 00 00       	jmp    c00123c5 <VgaText::putchar(char)+0xe3>
c001231b:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c001231f:	89 f9                	mov    ecx,edi
c0012321:	84 c9                	test   cl,cl
c0012323:	0f 84 8c 00 00 00    	je     c00123b5 <VgaText::putchar(char)+0xd3>
c0012329:	8d 4a c0             	lea    ecx,[edx-0x40]
c001232c:	80 f9 3e             	cmp    cl,0x3e
c001232f:	77 70                	ja     c00123a1 <VgaText::putchar(char)+0xbf>
c0012331:	83 f8 6d             	cmp    eax,0x6d
c0012334:	75 3f                	jne    c0012375 <VgaText::putchar(char)+0x93>
c0012336:	31 f6                	xor    esi,esi
c0012338:	31 d2                	xor    edx,edx
c001233a:	31 c0                	xor    eax,eax
c001233c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001233f:	7e 25                	jle    c0012366 <VgaText::putchar(char)+0x84>
c0012341:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012346:	83 fa 3b             	cmp    edx,0x3b
c0012349:	75 0f                	jne    c001235a <VgaText::putchar(char)+0x78>
c001234b:	50                   	push   eax
c001234c:	53                   	push   ebx
c001234d:	e8 2c fb ff ff       	call   c0011e7e <VgaText::doANSI_SGR(int)>
c0012352:	31 d2                	xor    edx,edx
c0012354:	59                   	pop    ecx
c0012355:	58                   	pop    eax
c0012356:	31 c0                	xor    eax,eax
c0012358:	eb 09                	jmp    c0012363 <VgaText::putchar(char)+0x81>
c001235a:	6b c0 0a             	imul   eax,eax,0xa
c001235d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012361:	89 fa                	mov    edx,edi
c0012363:	46                   	inc    esi
c0012364:	eb d6                	jmp    c001233c <VgaText::putchar(char)+0x5a>
c0012366:	84 d2                	test   dl,dl
c0012368:	74 2f                	je     c0012399 <VgaText::putchar(char)+0xb7>
c001236a:	50                   	push   eax
c001236b:	53                   	push   ebx
c001236c:	e8 0d fb ff ff       	call   c0011e7e <VgaText::doANSI_SGR(int)>
c0012371:	58                   	pop    eax
c0012372:	5a                   	pop    edx
c0012373:	eb 24                	jmp    c0012399 <VgaText::putchar(char)+0xb7>
c0012375:	83 f8 4a             	cmp    eax,0x4a
c0012378:	75 1f                	jne    c0012399 <VgaText::putchar(char)+0xb7>
c001237a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001237e:	75 19                	jne    c0012399 <VgaText::putchar(char)+0xb7>
c0012380:	83 ec 0c             	sub    esp,0xc
c0012383:	53                   	push   ebx
c0012384:	e8 95 fd ff ff       	call   c001211e <VgaText::clearScreen()>
c0012389:	83 c4 0c             	add    esp,0xc
c001238c:	6a 00                	push   0x0
c001238e:	6a 00                	push   0x0
c0012390:	53                   	push   ebx
c0012391:	e8 26 fd ff ff       	call   c00120bc <VgaText::setCursor(int, int)>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001239f:	eb 24                	jmp    c00123c5 <VgaText::putchar(char)+0xe3>
c00123a1:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00123a4:	83 f8 0e             	cmp    eax,0xe
c00123a7:	7f 1c                	jg     c00123c5 <VgaText::putchar(char)+0xe3>
c00123a9:	8d 48 01             	lea    ecx,[eax+0x1]
c00123ac:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00123af:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c00123b3:	eb 10                	jmp    c00123c5 <VgaText::putchar(char)+0xe3>
c00123b5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00123b8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00123bb:	50                   	push   eax
c00123bc:	53                   	push   ebx
c00123bd:	e8 50 fe ff ff       	call   c0012212 <VgaText::putchar(char, VgaColour, VgaColour)>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	5b                   	pop    ebx
c00123c6:	5e                   	pop    esi
c00123c7:	5f                   	pop    edi
c00123c8:	c3                   	ret    
c00123c9:	90                   	nop

c00123ca <VgaText::putx(unsigned int)>:
c00123ca:	57                   	push   edi
c00123cb:	b9 11 00 00 00       	mov    ecx,0x11
c00123d0:	56                   	push   esi
c00123d1:	be f4 80 02 c0       	mov    esi,0xc00280f4
c00123d6:	53                   	push   ebx
c00123d7:	83 ec 20             	sub    esp,0x20
c00123da:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00123de:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00123e2:	fc                   	cld    
c00123e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00123e5:	be 08 00 00 00       	mov    esi,0x8
c00123ea:	50                   	push   eax
c00123eb:	50                   	push   eax
c00123ec:	89 d8                	mov    eax,ebx
c00123ee:	c1 e8 1c             	shr    eax,0x1c
c00123f1:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00123f6:	c1 e3 04             	shl    ebx,0x4
c00123f9:	50                   	push   eax
c00123fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123fe:	e8 df fe ff ff       	call   c00122e2 <VgaText::putchar(char)>
c0012403:	83 c4 10             	add    esp,0x10
c0012406:	4e                   	dec    esi
c0012407:	75 e1                	jne    c00123ea <VgaText::putx(unsigned int)+0x20>
c0012409:	83 c4 20             	add    esp,0x20
c001240c:	5b                   	pop    ebx
c001240d:	5e                   	pop    esi
c001240e:	5f                   	pop    edi
c001240f:	c3                   	ret    

c0012410 <VgaText::puts(char const*)>:
c0012410:	53                   	push   ebx
c0012411:	83 ec 08             	sub    esp,0x8
c0012414:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012418:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001241b:	85 c0                	test   eax,eax
c001241d:	74 12                	je     c0012431 <VgaText::puts(char const*)+0x21>
c001241f:	51                   	push   ecx
c0012420:	43                   	inc    ebx
c0012421:	51                   	push   ecx
c0012422:	50                   	push   eax
c0012423:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012427:	e8 b6 fe ff ff       	call   c00122e2 <VgaText::putchar(char)>
c001242c:	83 c4 10             	add    esp,0x10
c001242f:	eb e7                	jmp    c0012418 <VgaText::puts(char const*)+0x8>
c0012431:	83 c4 08             	add    esp,0x8
c0012434:	5b                   	pop    ebx
c0012435:	c3                   	ret    

c0012436 <VgaText::write(unsigned long long, void*, int*)>:
c0012436:	55                   	push   ebp
c0012437:	57                   	push   edi
c0012438:	56                   	push   esi
c0012439:	53                   	push   ebx
c001243a:	83 ec 0c             	sub    esp,0xc
c001243d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012441:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012445:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012449:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012450:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012453:	39 eb                	cmp    ebx,ebp
c0012455:	74 13                	je     c001246a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0012457:	50                   	push   eax
c0012458:	43                   	inc    ebx
c0012459:	50                   	push   eax
c001245a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001245e:	50                   	push   eax
c001245f:	56                   	push   esi
c0012460:	e8 7d fe ff ff       	call   c00122e2 <VgaText::putchar(char)>
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	eb e9                	jmp    c0012453 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001246a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012475:	89 38                	mov    DWORD PTR [eax],edi
c0012477:	83 c4 0c             	add    esp,0xc
c001247a:	31 c0                	xor    eax,eax
c001247c:	5b                   	pop    ebx
c001247d:	5e                   	pop    esi
c001247e:	5f                   	pop    edi
c001247f:	5d                   	pop    ebp
c0012480:	c3                   	ret    
c0012481:	90                   	nop

c0012482 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012482:	55                   	push   ebp
c0012483:	57                   	push   edi
c0012484:	56                   	push   esi
c0012485:	53                   	push   ebx
c0012486:	83 ec 1c             	sub    esp,0x1c
c0012489:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001248d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012491:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012495:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0012499:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c001249c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124a0:	85 db                	test   ebx,ebx
c00124a2:	75 14                	jne    c00124b8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x36>
c00124a4:	c7 44 24 30 05 81 02 c0 	mov    DWORD PTR [esp+0x30],0xc0028105
c00124ac:	83 c4 1c             	add    esp,0x1c
c00124af:	5b                   	pop    ebx
c00124b0:	5e                   	pop    esi
c00124b1:	5f                   	pop    edi
c00124b2:	5d                   	pop    ebp
c00124b3:	e9 1c d6 ff ff       	jmp    c000fad4 <KePanic(char const*)>
c00124b8:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c00124bf:	50                   	push   eax
c00124c0:	50                   	push   eax
c00124c1:	89 e8                	mov    eax,ebp
c00124c3:	0f b6 c0             	movzx  eax,al
c00124c6:	50                   	push   eax
c00124c7:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00124cc:	50                   	push   eax
c00124cd:	e8 7a fa ff ff       	call   c0011f4c <VgaText::combineColours(unsigned char, unsigned char)>
c00124d2:	83 c4 10             	add    esp,0x10
c00124d5:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c00124d9:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c00124dc:	0f b6 c0             	movzx  eax,al
c00124df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124e3:	0f b7 c9             	movzx  ecx,cx
c00124e6:	01 c9                	add    ecx,ecx
c00124e8:	01 cb                	add    ebx,ecx
c00124ea:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00124ed:	85 c0                	test   eax,eax
c00124ef:	0f 84 ef 00 00 00    	je     c00125e4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00124f5:	83 f8 0d             	cmp    eax,0xd
c00124f8:	75 0c                	jne    c0012506 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00124fa:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012501:	e9 d8 00 00 00       	jmp    c00125de <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012506:	83 f8 0a             	cmp    eax,0xa
c0012509:	75 44                	jne    c001254f <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c001250b:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012512:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012515:	8d 48 01             	lea    ecx,[eax+0x1]
c0012518:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c001251b:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c001251e:	75 0f                	jne    c001252f <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0012520:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012523:	83 ec 0c             	sub    esp,0xc
c0012526:	57                   	push   edi
c0012527:	e8 32 fa ff ff       	call   c0011f5e <VgaText::scrollScreen()>
c001252c:	83 c4 10             	add    esp,0x10
c001252f:	83 ec 0c             	sub    esp,0xc
c0012532:	57                   	push   edi
c0012533:	e8 30 f9 ff ff       	call   c0011e68 <VgaText::updateCursor()>
c0012538:	83 c4 10             	add    esp,0x10
c001253b:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001253f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012542:	0f b7 db             	movzx  ebx,bx
c0012545:	01 db                	add    ebx,ebx
c0012547:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001254a:	e9 8f 00 00 00       	jmp    c00125de <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001254f:	83 f8 08             	cmp    eax,0x8
c0012552:	75 34                	jne    c0012588 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012554:	51                   	push   ecx
c0012555:	51                   	push   ecx
c0012556:	6a 01                	push   0x1
c0012558:	57                   	push   edi
c0012559:	e8 92 fc ff ff       	call   c00121f0 <VgaText::decrementCursor(bool)>
c001255e:	5b                   	pop    ebx
c001255f:	58                   	pop    eax
c0012560:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012563:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012566:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012569:	ff 77 34             	push   DWORD PTR [edi+0x34]
c001256c:	6a 20                	push   0x20
c001256e:	57                   	push   edi
c001256f:	e8 8c fa ff ff       	call   c0012000 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012574:	83 c4 20             	add    esp,0x20
c0012577:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c001257b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001257e:	0f b7 db             	movzx  ebx,bx
c0012581:	01 db                	add    ebx,ebx
c0012583:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012586:	eb 56                	jmp    c00125de <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012588:	52                   	push   edx
c0012589:	52                   	push   edx
c001258a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001258e:	50                   	push   eax
c001258f:	e8 5c fa ff ff       	call   c0011ff0 <VgaText::combineCharAndColour(char, unsigned char)>
c0012594:	83 c4 10             	add    esp,0x10
c0012597:	66 89 03             	mov    WORD PTR [ebx],ax
c001259a:	39 3d f4 11 03 c0    	cmp    DWORD PTR ds:0xc00311f4,edi
c00125a0:	75 1a                	jne    c00125bc <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00125a2:	83 ec 0c             	sub    esp,0xc
c00125a5:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00125a8:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00125ab:	55                   	push   ebp
c00125ac:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00125b0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00125b3:	50                   	push   eax
c00125b4:	e8 bb 93 00 00       	call   c001b974 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00125b9:	83 c4 20             	add    esp,0x20
c00125bc:	50                   	push   eax
c00125bd:	83 c3 02             	add    ebx,0x2
c00125c0:	50                   	push   eax
c00125c1:	6a 00                	push   0x0
c00125c3:	57                   	push   edi
c00125c4:	e8 d3 fb ff ff       	call   c001219c <VgaText::incrementCursor(bool)>
c00125c9:	83 c4 10             	add    esp,0x10
c00125cc:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c00125d0:	75 0c                	jne    c00125de <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00125d2:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00125d6:	0f b7 db             	movzx  ebx,bx
c00125d9:	01 db                	add    ebx,ebx
c00125db:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00125de:	46                   	inc    esi
c00125df:	e9 06 ff ff ff       	jmp    c00124ea <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00125e4:	83 ec 0c             	sub    esp,0xc
c00125e7:	57                   	push   edi
c00125e8:	e8 7b f8 ff ff       	call   c0011e68 <VgaText::updateCursor()>
c00125ed:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c00125f4:	83 c4 2c             	add    esp,0x2c
c00125f7:	5b                   	pop    ebx
c00125f8:	5e                   	pop    esi
c00125f9:	5f                   	pop    edi
c00125fa:	5d                   	pop    ebp
c00125fb:	c3                   	ret    

c00125fc <VgaText::VgaText(char const*)>:
c00125fc:	56                   	push   esi
c00125fd:	53                   	push   ebx
c00125fe:	83 ec 04             	sub    esp,0x4
c0012601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012605:	83 ec 08             	sub    esp,0x8
c0012608:	6a 00                	push   0x0
c001260a:	50                   	push   eax
c001260b:	e8 b8 05 00 00       	call   c0012bc8 <UnixFile::UnixFile(int)>
c0012610:	83 c4 10             	add    esp,0x10
c0012613:	ba 3c 81 02 c0       	mov    edx,0xc002813c
c0012618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001261c:	89 10                	mov    DWORD PTR [eax],edx
c001261e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012622:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001262d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012638:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001263c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012640:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012648:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001264f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012653:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001265a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001265e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012669:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	68 15 81 02 c0       	push   0xc0028115
c0012678:	e8 e9 48 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001267d:	83 c4 10             	add    esp,0x10
c0012680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012684:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001268b:	83 ec 0c             	sub    esp,0xc
c001268e:	6a 01                	push   0x1
c0012690:	e8 86 09 00 00       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c0012695:	83 c4 10             	add    esp,0x10
c0012698:	89 c2                	mov    edx,eax
c001269a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001269e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126a1:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c00126a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126ae:	89 c6                	mov    esi,eax
c00126b0:	e8 19 d6 ff ff       	call   c000fcce <Phys::allocatePage()>
c00126b5:	68 05 0c 00 00       	push   0xc05
c00126ba:	56                   	push   esi
c00126bb:	50                   	push   eax
c00126bc:	53                   	push   ebx
c00126bd:	e8 32 10 00 00       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c2:	83 c4 10             	add    esp,0x10
c00126c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126cc:	83 ec 04             	sub    esp,0x4
c00126cf:	68 a0 0f 00 00       	push   0xfa0
c00126d4:	6a 00                	push   0x0
c00126d6:	50                   	push   eax
c00126d7:	e8 14 de fe ff       	call   c00004f0 <memset>
c00126dc:	83 c4 10             	add    esp,0x10
c00126df:	83 ec 04             	sub    esp,0x4
c00126e2:	6a 00                	push   0x0
c00126e4:	6a 07                	push   0x7
c00126e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126ea:	e8 23 f8 ff ff       	call   c0011f12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00126ef:	83 c4 10             	add    esp,0x10
c00126f2:	83 ec 04             	sub    esp,0x4
c00126f5:	6a 00                	push   0x0
c00126f7:	6a 00                	push   0x0
c00126f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126fd:	e8 ba f9 ff ff       	call   c00120bc <VgaText::setCursor(int, int)>
c0012702:	83 c4 10             	add    esp,0x10
c0012705:	83 ec 0c             	sub    esp,0xc
c0012708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001270c:	e8 0d fa ff ff       	call   c001211e <VgaText::clearScreen()>
c0012711:	83 c4 10             	add    esp,0x10
c0012714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012718:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001271c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012720:	05 82 00 00 00       	add    eax,0x82
c0012725:	83 ec 04             	sub    esp,0x4
c0012728:	68 80 00 00 00       	push   0x80
c001272d:	6a 00                	push   0x0
c001272f:	50                   	push   eax
c0012730:	e8 bb dd fe ff       	call   c00004f0 <memset>
c0012735:	83 c4 10             	add    esp,0x10
c0012738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001273c:	05 02 01 00 00       	add    eax,0x102
c0012741:	83 ec 04             	sub    esp,0x4
c0012744:	68 80 00 00 00       	push   0x80
c0012749:	6a 00                	push   0x0
c001274b:	50                   	push   eax
c001274c:	e8 9f dd fe ff       	call   c00004f0 <memset>
c0012751:	83 c4 10             	add    esp,0x10
c0012754:	90                   	nop
c0012755:	83 c4 04             	add    esp,0x4
c0012758:	5b                   	pop    ebx
c0012759:	5e                   	pop    esi
c001275a:	c3                   	ret    
c001275b:	90                   	nop

c001275c <VgaText::receiveKey(unsigned char)>:
c001275c:	55                   	push   ebp
c001275d:	57                   	push   edi
c001275e:	56                   	push   esi
c001275f:	53                   	push   ebx
c0012760:	83 ec 2c             	sub    esp,0x2c
c0012763:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012767:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001276b:	89 fd                	mov    ebp,edi
c001276d:	81 e5 ff 00 00 00    	and    ebp,0xff
c0012773:	0f 84 48 01 00 00    	je     c00128c1 <VgaText::receiveKey(unsigned char)+0x165>
c0012779:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001277f:	83 fd 08             	cmp    ebp,0x8
c0012782:	75 6a                	jne    c00127ee <VgaText::receiveKey(unsigned char)+0x92>
c0012784:	83 ec 0c             	sub    esp,0xc
c0012787:	56                   	push   esi
c0012788:	e8 f3 dd fe ff       	call   c0000580 <strlen>
c001278d:	83 c4 10             	add    esp,0x10
c0012790:	85 c0                	test   eax,eax
c0012792:	0f 84 ef 00 00 00    	je     c0012887 <VgaText::receiveKey(unsigned char)+0x12b>
c0012798:	50                   	push   eax
c0012799:	50                   	push   eax
c001279a:	6a 08                	push   0x8
c001279c:	53                   	push   ebx
c001279d:	e8 40 fb ff ff       	call   c00122e2 <VgaText::putchar(char)>
c00127a2:	89 34 24             	mov    DWORD PTR [esp],esi
c00127a5:	e8 d6 dd fe ff       	call   c0000580 <strlen>
c00127aa:	83 c4 10             	add    esp,0x10
c00127ad:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00127b5:	83 fa 1f             	cmp    edx,0x1f
c00127b8:	89 d0                	mov    eax,edx
c00127ba:	7f 1c                	jg     c00127d8 <VgaText::receiveKey(unsigned char)+0x7c>
c00127bc:	83 e8 08             	sub    eax,0x8
c00127bf:	3c 02                	cmp    al,0x2
c00127c1:	76 15                	jbe    c00127d8 <VgaText::receiveKey(unsigned char)+0x7c>
c00127c3:	83 fa 0d             	cmp    edx,0xd
c00127c6:	74 10                	je     c00127d8 <VgaText::receiveKey(unsigned char)+0x7c>
c00127c8:	57                   	push   edi
c00127c9:	57                   	push   edi
c00127ca:	68 28 81 02 c0       	push   0xc0028128
c00127cf:	53                   	push   ebx
c00127d0:	e8 3b fc ff ff       	call   c0012410 <VgaText::puts(char const*)>
c00127d5:	83 c4 10             	add    esp,0x10
c00127d8:	83 ec 0c             	sub    esp,0xc
c00127db:	56                   	push   esi
c00127dc:	e8 9f dd fe ff       	call   c0000580 <strlen>
c00127e1:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c00127e9:	e9 96 00 00 00       	jmp    c0012884 <VgaText::receiveKey(unsigned char)+0x128>
c00127ee:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00127f4:	83 ec 0c             	sub    esp,0xc
c00127f7:	50                   	push   eax
c00127f8:	e8 83 dd fe ff       	call   c0000580 <strlen>
c00127fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012800:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012804:	e8 77 dd fe ff       	call   c0000580 <strlen>
c0012809:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012814:	3d 80 00 00 00       	cmp    eax,0x80
c0012819:	0f 87 a2 00 00 00    	ja     c00128c1 <VgaText::receiveKey(unsigned char)+0x165>
c001281f:	8d 47 ff             	lea    eax,[edi-0x1]
c0012822:	3c 1e                	cmp    al,0x1e
c0012824:	77 35                	ja     c001285b <VgaText::receiveKey(unsigned char)+0xff>
c0012826:	8d 47 f7             	lea    eax,[edi-0x9]
c0012829:	3c 01                	cmp    al,0x1
c001282b:	76 2e                	jbe    c001285b <VgaText::receiveKey(unsigned char)+0xff>
c001282d:	83 fd 0d             	cmp    ebp,0xd
c0012830:	74 29                	je     c001285b <VgaText::receiveKey(unsigned char)+0xff>
c0012832:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012835:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012838:	68 2e 81 02 c0       	push   0xc002812e
c001283d:	53                   	push   ebx
c001283e:	e8 3f fc ff ff       	call   c0012482 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012843:	8d 47 40             	lea    eax,[edi+0x40]
c0012846:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012849:	0f b6 c0             	movzx  eax,al
c001284c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001284f:	50                   	push   eax
c0012850:	53                   	push   ebx
c0012851:	e8 bc f9 ff ff       	call   c0012212 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012856:	83 c4 20             	add    esp,0x20
c0012859:	eb 11                	jmp    c001286c <VgaText::receiveKey(unsigned char)+0x110>
c001285b:	51                   	push   ecx
c001285c:	89 f8                	mov    eax,edi
c001285e:	51                   	push   ecx
c001285f:	0f be c0             	movsx  eax,al
c0012862:	50                   	push   eax
c0012863:	53                   	push   ebx
c0012864:	e8 79 fa ff ff       	call   c00122e2 <VgaText::putchar(char)>
c0012869:	83 c4 10             	add    esp,0x10
c001286c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012871:	89 f8                	mov    eax,edi
c0012873:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012877:	52                   	push   edx
c0012878:	52                   	push   edx
c0012879:	8d 44 24 26          	lea    eax,[esp+0x26]
c001287d:	50                   	push   eax
c001287e:	56                   	push   esi
c001287f:	e8 ec df fe ff       	call   c0000870 <strcat>
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c001288e:	75 0f                	jne    c001289f <VgaText::receiveKey(unsigned char)+0x143>
c0012890:	83 fd 1c             	cmp    ebp,0x1c
c0012893:	77 2c                	ja     c00128c1 <VgaText::receiveKey(unsigned char)+0x165>
c0012895:	b8 08 04 00 10       	mov    eax,0x10000408
c001289a:	0f a3 e8             	bt     eax,ebp
c001289d:	73 22                	jae    c00128c1 <VgaText::receiveKey(unsigned char)+0x165>
c001289f:	50                   	push   eax
c00128a0:	81 c3 02 01 00 00    	add    ebx,0x102
c00128a6:	50                   	push   eax
c00128a7:	56                   	push   esi
c00128a8:	53                   	push   ebx
c00128a9:	e8 c2 df fe ff       	call   c0000870 <strcat>
c00128ae:	83 c4 0c             	add    esp,0xc
c00128b1:	68 80 00 00 00       	push   0x80
c00128b6:	6a 00                	push   0x0
c00128b8:	56                   	push   esi
c00128b9:	e8 32 dc fe ff       	call   c00004f0 <memset>
c00128be:	83 c4 10             	add    esp,0x10
c00128c1:	83 c4 2c             	add    esp,0x2c
c00128c4:	5b                   	pop    ebx
c00128c5:	5e                   	pop    esi
c00128c6:	5f                   	pop    edi
c00128c7:	5d                   	pop    ebp
c00128c8:	c3                   	ret    
c00128c9:	90                   	nop

c00128ca <VgaText::doUpdate()>:
c00128ca:	c3                   	ret    
c00128cb:	90                   	nop

c00128cc <TSS::TSS()>:
c00128cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00128d7:	90                   	nop
c00128d8:	c3                   	ret    
c00128d9:	90                   	nop
c00128da:	66 90                	xchg   ax,ax

c00128dc <TSS::setESP(unsigned long)>:
c00128dc:	55                   	push   ebp
c00128dd:	89 e5                	mov    ebp,esp
c00128df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00128e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00128e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00128e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00128eb:	90                   	nop
c00128ec:	5d                   	pop    ebp
c00128ed:	c3                   	ret    
c00128ee:	66 90                	xchg   ax,ax

c00128f0 <TSS::flush()>:
c00128f0:	55                   	push   ebp
c00128f1:	89 e5                	mov    ebp,esp
c00128f3:	83 ec 10             	sub    esp,0x10
c00128f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00128f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00128fb:	83 c8 03             	or     eax,0x3
c00128fe:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012902:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012906:	66 89 d0             	mov    ax,dx
c0012909:	0f 00 d8             	ltr    ax
c001290c:	90                   	nop
c001290d:	c9                   	leave  
c001290e:	c3                   	ret    
c001290f:	90                   	nop

c0012910 <TSS::setup(unsigned long, unsigned long)>:
c0012910:	55                   	push   ebp
c0012911:	89 e5                	mov    ebp,esp
c0012913:	83 ec 18             	sub    esp,0x18
c0012916:	83 ec 0c             	sub    esp,0xc
c0012919:	6a 68                	push   0x68
c001291b:	e8 60 cd ff ff       	call   c000f680 <malloc>
c0012920:	83 c4 10             	add    esp,0x10
c0012923:	89 c2                	mov    edx,eax
c0012925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012928:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001292b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001292e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012931:	83 ec 08             	sub    esp,0x8
c0012934:	50                   	push   eax
c0012935:	68 50 81 02 c0       	push   0xc0028150
c001293a:	e8 27 46 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001293f:	83 c4 10             	add    esp,0x10
c0012942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012945:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012948:	83 ec 04             	sub    esp,0x4
c001294b:	6a 68                	push   0x68
c001294d:	6a 00                	push   0x0
c001294f:	50                   	push   eax
c0012950:	e8 9b db fe ff       	call   c00004f0 <memset>
c0012955:	83 c4 10             	add    esp,0x10
c0012958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001295b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001295e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012967:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001296a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012973:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012976:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012979:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001297c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001297f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012982:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001298b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001298e:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012997:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001299a:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00129a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129a6:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00129ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129b2:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00129b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129be:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00129c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129ca:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00129cd:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00129d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00129d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00129dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129e2:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00129e9:	83 ec 0c             	sub    esp,0xc
c00129ec:	68 67 81 02 c0       	push   0xc0028167
c00129f1:	e8 70 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00129f6:	83 c4 10             	add    esp,0x10
c00129f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00129fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129ff:	0f 20 da             	mov    edx,cr3
c0012a02:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012a05:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012a08:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012a0b:	83 ec 0c             	sub    esp,0xc
c0012a0e:	68 6a 81 02 c0       	push   0xc002816a
c0012a13:	e8 4e 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012a18:	83 c4 10             	add    esp,0x10
c0012a1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012a1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a21:	83 ec 08             	sub    esp,0x8
c0012a24:	50                   	push   eax
c0012a25:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012a28:	50                   	push   eax
c0012a29:	e8 a2 bd ff ff       	call   c000e7d0 <GDTEntry::setBase(unsigned int)>
c0012a2e:	83 c4 10             	add    esp,0x10
c0012a31:	83 ec 08             	sub    esp,0x8
c0012a34:	6a 68                	push   0x68
c0012a36:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012a39:	50                   	push   eax
c0012a3a:	e8 ad bd ff ff       	call   c000e7ec <GDTEntry::setLimit(unsigned int)>
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012a46:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012a49:	83 e0 0f             	and    eax,0xf
c0012a4c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012a4f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012a52:	83 c8 40             	or     eax,0x40
c0012a55:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	68 6d 81 02 c0       	push   0xc002816d
c0012a60:	e8 01 45 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012a65:	83 c4 10             	add    esp,0x10
c0012a68:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0012a6d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012a73:	83 ec 08             	sub    esp,0x8
c0012a76:	50                   	push   eax
c0012a77:	68 70 81 02 c0       	push   0xc0028170
c0012a7c:	e8 e5 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012a81:	83 c4 10             	add    esp,0x10
c0012a84:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0012a89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012a8f:	05 64 01 00 00       	add    eax,0x164
c0012a94:	83 ec 04             	sub    esp,0x4
c0012a97:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012a9a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012a9d:	50                   	push   eax
c0012a9e:	e8 7d bd ff ff       	call   c000e820 <GDT::addEntry(GDTEntry)>
c0012aa3:	83 c4 10             	add    esp,0x10
c0012aa6:	89 c2                	mov    edx,eax
c0012aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012aab:	89 10                	mov    DWORD PTR [eax],edx
c0012aad:	83 ec 0c             	sub    esp,0xc
c0012ab0:	68 85 81 02 c0       	push   0xc0028185
c0012ab5:	e8 ac 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012aba:	83 c4 10             	add    esp,0x10
c0012abd:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0012ac2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012ac8:	05 64 01 00 00       	add    eax,0x164
c0012acd:	83 ec 0c             	sub    esp,0xc
c0012ad0:	50                   	push   eax
c0012ad1:	e8 74 bd ff ff       	call   c000e84a <GDT::flush()>
c0012ad6:	83 c4 10             	add    esp,0x10
c0012ad9:	83 ec 0c             	sub    esp,0xc
c0012adc:	68 88 81 02 c0       	push   0xc0028188
c0012ae1:	e8 80 44 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0012ae6:	83 c4 10             	add    esp,0x10
c0012ae9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0012aee:	c9                   	leave  
c0012aef:	c3                   	ret    

c0012af0 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012af4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012af8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012afb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012b00:	75 08                	jne    c0012b0a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012b02:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012b08:	eb 38                	jmp    c0012b42 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012b0a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012b0f:	75 17                	jne    c0012b28 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012b11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012b19:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012b1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b25:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012b28:	89 c1                	mov    ecx,eax
c0012b2a:	83 e1 fd             	and    ecx,0xfffffffd
c0012b2d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012b33:	74 cd                	je     c0012b02 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012b35:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012b3a:	83 e0 ef             	and    eax,0xffffffef
c0012b3d:	83 f8 08             	cmp    eax,0x8
c0012b40:	76 c0                	jbe    c0012b02 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012b42:	31 c0                	xor    eax,eax
c0012b44:	c3                   	ret    
c0012b45:	90                   	nop

c0012b46 <ReservedFilename::isAtty()>:
c0012b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b4a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012b4d:	31 c0                	xor    eax,eax
c0012b4f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012b55:	74 09                	je     c0012b60 <ReservedFilename::isAtty()+0x1a>
c0012b57:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012b5d:	0f 94 c0             	sete   al
c0012b60:	c3                   	ret    
c0012b61:	90                   	nop

c0012b62 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012b62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012b6a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012b6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b71:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012b76:	75 08                	jne    c0012b80 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012b78:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012b7e:	eb 3d                	jmp    c0012bbd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012b80:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012b85:	75 17                	jne    c0012b9e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012b87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012b8f:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0012b95:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b9b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012b9e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012ba3:	75 04                	jne    c0012ba9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012ba5:	89 0a                	mov    DWORD PTR [edx],ecx
c0012ba7:	eb 14                	jmp    c0012bbd <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012ba9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012bae:	74 c8                	je     c0012b78 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012bb0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012bb5:	83 e0 ef             	and    eax,0xffffffef
c0012bb8:	83 f8 08             	cmp    eax,0x8
c0012bbb:	76 bb                	jbe    c0012b78 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012bbd:	31 c0                	xor    eax,eax
c0012bbf:	c3                   	ret    

c0012bc0 <UnixFile::getFileDescriptor()>:
c0012bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012bc7:	c3                   	ret    

c0012bc8 <UnixFile::UnixFile(int)>:
c0012bc8:	53                   	push   ebx
c0012bc9:	83 ec 28             	sub    esp,0x28
c0012bcc:	ba b4 81 02 c0       	mov    edx,0xc00281b4
c0012bd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bd5:	89 10                	mov    DWORD PTR [eax],edx
c0012bd7:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012bdf:	0f 8f 90 01 00 00    	jg     c0012d75 <UnixFile::UnixFile(int)+0x1ad>
c0012be5:	a1 40 b4 02 c0       	mov    eax,ds:0xc002b440
c0012bea:	8d 50 01             	lea    edx,[eax+0x1]
c0012bed:	89 15 40 b4 02 c0    	mov    DWORD PTR ds:0xc002b440,edx
c0012bf3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012bf7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012bfa:	83 ec 08             	sub    esp,0x8
c0012bfd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012c01:	68 78 12 03 c0       	push   0xc0031278
c0012c06:	e8 cb 30 01 00       	call   c0025cd6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012c0b:	83 c4 10             	add    esp,0x10
c0012c0e:	a0 74 12 03 c0       	mov    al,ds:0xc0031274
c0012c13:	83 f0 01             	xor    eax,0x1
c0012c16:	0f b6 c0             	movzx  eax,al
c0012c19:	85 c0                	test   eax,eax
c0012c1b:	0f 84 55 01 00 00    	je     c0012d76 <UnixFile::UnixFile(int)+0x1ae>
c0012c21:	c6 05 74 12 03 c0 01 	mov    BYTE PTR ds:0xc0031274,0x1
c0012c28:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012c30:	83 ec 0c             	sub    esp,0xc
c0012c33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c37:	e8 44 ca ff ff       	call   c000f680 <malloc>
c0012c3c:	83 c4 10             	add    esp,0x10
c0012c3f:	89 c3                	mov    ebx,eax
c0012c41:	83 ec 08             	sub    esp,0x8
c0012c44:	68 03 ff ff 0f       	push   0xfffff03
c0012c49:	53                   	push   ebx
c0012c4a:	e8 2d 01 00 00       	call   c0012d7c <ReservedFilename::ReservedFilename(int)>
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	89 1d 6c 12 03 c0    	mov    DWORD PTR ds:0xc003126c,ebx
c0012c58:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012c60:	83 ec 0c             	sub    esp,0xc
c0012c63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c67:	e8 14 ca ff ff       	call   c000f680 <malloc>
c0012c6c:	83 c4 10             	add    esp,0x10
c0012c6f:	89 c3                	mov    ebx,eax
c0012c71:	83 ec 08             	sub    esp,0x8
c0012c74:	68 01 ff ff 0f       	push   0xfffff01
c0012c79:	53                   	push   ebx
c0012c7a:	e8 fd 00 00 00       	call   c0012d7c <ReservedFilename::ReservedFilename(int)>
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	89 1d 70 12 03 c0    	mov    DWORD PTR ds:0xc0031270,ebx
c0012c88:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012c90:	83 ec 0c             	sub    esp,0xc
c0012c93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c97:	e8 e4 c9 ff ff       	call   c000f680 <malloc>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	89 c3                	mov    ebx,eax
c0012ca1:	83 ec 08             	sub    esp,0x8
c0012ca4:	68 00 ff ff 0f       	push   0xfffff00
c0012ca9:	53                   	push   ebx
c0012caa:	e8 cd 00 00 00       	call   c0012d7c <ReservedFilename::ReservedFilename(int)>
c0012caf:	83 c4 10             	add    esp,0x10
c0012cb2:	89 1d 64 12 03 c0    	mov    DWORD PTR ds:0xc0031264,ebx
c0012cb8:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0012cc0:	83 ec 0c             	sub    esp,0xc
c0012cc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012cc7:	e8 b4 c9 ff ff       	call   c000f680 <malloc>
c0012ccc:	83 c4 10             	add    esp,0x10
c0012ccf:	89 c3                	mov    ebx,eax
c0012cd1:	83 ec 08             	sub    esp,0x8
c0012cd4:	68 02 ff ff 0f       	push   0xfffff02
c0012cd9:	53                   	push   ebx
c0012cda:	e8 9d 00 00 00       	call   c0012d7c <ReservedFilename::ReservedFilename(int)>
c0012cdf:	83 c4 10             	add    esp,0x10
c0012ce2:	89 1d 68 12 03 c0    	mov    DWORD PTR ds:0xc0031268,ebx
c0012ce8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012cf0:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012cf5:	7f 7f                	jg     c0012d76 <UnixFile::UnixFile(int)+0x1ae>
c0012cf7:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0012cff:	83 ec 0c             	sub    esp,0xc
c0012d02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012d06:	e8 75 c9 ff ff       	call   c000f680 <malloc>
c0012d0b:	83 c4 10             	add    esp,0x10
c0012d0e:	89 c3                	mov    ebx,eax
c0012d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d14:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012d19:	83 ec 08             	sub    esp,0x8
c0012d1c:	50                   	push   eax
c0012d1d:	53                   	push   ebx
c0012d1e:	e8 59 00 00 00       	call   c0012d7c <ReservedFilename::ReservedFilename(int)>
c0012d23:	83 c4 10             	add    esp,0x10
c0012d26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d2a:	89 1c 85 40 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcedc0],ebx
c0012d31:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012d39:	83 ec 0c             	sub    esp,0xc
c0012d3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d40:	e8 3b c9 ff ff       	call   c000f680 <malloc>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	89 c3                	mov    ebx,eax
c0012d4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d4e:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012d53:	83 ec 08             	sub    esp,0x8
c0012d56:	50                   	push   eax
c0012d57:	53                   	push   ebx
c0012d58:	e8 1f 00 00 00       	call   c0012d7c <ReservedFilename::ReservedFilename(int)>
c0012d5d:	83 c4 10             	add    esp,0x10
c0012d60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d64:	89 1c 85 00 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee00],ebx
c0012d6b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012d70:	e9 7b ff ff ff       	jmp    c0012cf0 <UnixFile::UnixFile(int)+0x128>
c0012d75:	90                   	nop
c0012d76:	83 c4 28             	add    esp,0x28
c0012d79:	5b                   	pop    ebx
c0012d7a:	c3                   	ret    
c0012d7b:	90                   	nop

c0012d7c <ReservedFilename::ReservedFilename(int)>:
c0012d7c:	83 ec 0c             	sub    esp,0xc
c0012d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d83:	83 ec 08             	sub    esp,0x8
c0012d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d8a:	50                   	push   eax
c0012d8b:	e8 38 fe ff ff       	call   c0012bc8 <UnixFile::UnixFile(int)>
c0012d90:	83 c4 10             	add    esp,0x10
c0012d93:	ba d0 81 02 c0       	mov    edx,0xc00281d0
c0012d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d9c:	89 10                	mov    DWORD PTR [eax],edx
c0012d9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012da6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012da9:	90                   	nop
c0012daa:	83 c4 0c             	add    esp,0xc
c0012dad:	c3                   	ret    

c0012dae <UnixFile::~UnixFile()>:
c0012dae:	83 ec 1c             	sub    esp,0x1c
c0012db1:	ba b4 81 02 c0       	mov    edx,0xc00281b4
c0012db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dba:	89 10                	mov    DWORD PTR [eax],edx
c0012dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012dc3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0012dc8:	7f 76                	jg     c0012e40 <UnixFile::~UnixFile()+0x92>
c0012dca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012dd2:	83 ec 0c             	sub    esp,0xc
c0012dd5:	68 78 12 03 c0       	push   0xc0031278
c0012dda:	e8 cb 2f 01 00       	call   c0025daa <LinkedList<UnixFile>::getFirstElement()>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012de6:	83 ec 0c             	sub    esp,0xc
c0012de9:	68 78 12 03 c0       	push   0xc0031278
c0012dee:	e8 bf 2f 01 00       	call   c0025db2 <LinkedList<UnixFile>::removeFirst()>
c0012df3:	83 c4 10             	add    esp,0x10
c0012df6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012dfa:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0012dfe:	74 43                	je     c0012e43 <UnixFile::~UnixFile()+0x95>
c0012e00:	83 ec 08             	sub    esp,0x8
c0012e03:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e07:	68 78 12 03 c0       	push   0xc0031278
c0012e0c:	e8 c5 2e 01 00       	call   c0025cd6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012e11:	83 c4 10             	add    esp,0x10
c0012e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e18:	8d 50 01             	lea    edx,[eax+0x1]
c0012e1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012e1f:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012e24:	0f 94 c0             	sete   al
c0012e27:	0f b6 c0             	movzx  eax,al
c0012e2a:	85 c0                	test   eax,eax
c0012e2c:	74 a4                	je     c0012dd2 <UnixFile::~UnixFile()+0x24>
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	68 8c 81 02 c0       	push   0xc002818c
c0012e36:	e8 99 cc ff ff       	call   c000fad4 <KePanic(char const*)>
c0012e3b:	83 c4 10             	add    esp,0x10
c0012e3e:	eb 92                	jmp    c0012dd2 <UnixFile::~UnixFile()+0x24>
c0012e40:	90                   	nop
c0012e41:	eb 01                	jmp    c0012e44 <UnixFile::~UnixFile()+0x96>
c0012e43:	90                   	nop
c0012e44:	90                   	nop
c0012e45:	83 c4 1c             	add    esp,0x1c
c0012e48:	c3                   	ret    
c0012e49:	90                   	nop

c0012e4a <UnixFile::~UnixFile()>:
c0012e4a:	83 ec 0c             	sub    esp,0xc
c0012e4d:	83 ec 0c             	sub    esp,0xc
c0012e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e54:	e8 55 ff ff ff       	call   c0012dae <UnixFile::~UnixFile()>
c0012e59:	83 c4 10             	add    esp,0x10
c0012e5c:	83 ec 08             	sub    esp,0x8
c0012e5f:	6a 0c                	push   0xc
c0012e61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e65:	e8 1e a4 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0012e6a:	83 c4 10             	add    esp,0x10
c0012e6d:	83 c4 0c             	add    esp,0xc
c0012e70:	c3                   	ret    
c0012e71:	90                   	nop

c0012e72 <ReservedFilename::~ReservedFilename()>:
c0012e72:	83 ec 0c             	sub    esp,0xc
c0012e75:	ba d0 81 02 c0       	mov    edx,0xc00281d0
c0012e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7e:	89 10                	mov    DWORD PTR [eax],edx
c0012e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e84:	83 ec 0c             	sub    esp,0xc
c0012e87:	50                   	push   eax
c0012e88:	e8 21 ff ff ff       	call   c0012dae <UnixFile::~UnixFile()>
c0012e8d:	83 c4 10             	add    esp,0x10
c0012e90:	90                   	nop
c0012e91:	83 c4 0c             	add    esp,0xc
c0012e94:	c3                   	ret    
c0012e95:	90                   	nop

c0012e96 <ReservedFilename::~ReservedFilename()>:
c0012e96:	83 ec 0c             	sub    esp,0xc
c0012e99:	83 ec 0c             	sub    esp,0xc
c0012e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ea0:	e8 cd ff ff ff       	call   c0012e72 <ReservedFilename::~ReservedFilename()>
c0012ea5:	83 c4 10             	add    esp,0x10
c0012ea8:	83 ec 08             	sub    esp,0x8
c0012eab:	6a 0c                	push   0xc
c0012ead:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb1:	e8 d2 a3 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0012eb6:	83 c4 10             	add    esp,0x10
c0012eb9:	83 c4 0c             	add    esp,0xc
c0012ebc:	c3                   	ret    

c0012ebd <KeGetFileFromDescriptor(int)>:
c0012ebd:	53                   	push   ebx
c0012ebe:	83 ec 08             	sub    esp,0x8
c0012ec1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ec5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0012ecb:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0012ed1:	7f 30                	jg     c0012f03 <KeGetFileFromDescriptor(int)+0x46>
c0012ed3:	83 ec 0c             	sub    esp,0xc
c0012ed6:	68 78 12 03 c0       	push   0xc0031278
c0012edb:	e8 ca 2e 01 00       	call   c0025daa <LinkedList<UnixFile>::getFirstElement()>
c0012ee0:	8d 50 ff             	lea    edx,[eax-0x1]
c0012ee3:	83 c4 10             	add    esp,0x10
c0012ee6:	83 fa fd             	cmp    edx,0xfffffffd
c0012ee9:	76 04                	jbe    c0012eef <KeGetFileFromDescriptor(int)+0x32>
c0012eeb:	31 c0                	xor    eax,eax
c0012eed:	eb 6e                	jmp    c0012f5d <KeGetFileFromDescriptor(int)+0xa0>
c0012eef:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012ef2:	74 69                	je     c0012f5d <KeGetFileFromDescriptor(int)+0xa0>
c0012ef4:	52                   	push   edx
c0012ef5:	52                   	push   edx
c0012ef6:	50                   	push   eax
c0012ef7:	68 78 12 03 c0       	push   0xc0031278
c0012efc:	e8 53 2f 01 00       	call   c0025e54 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0012f01:	eb dd                	jmp    c0012ee0 <KeGetFileFromDescriptor(int)+0x23>
c0012f03:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0012f09:	a1 6c 12 03 c0       	mov    eax,ds:0xc003126c
c0012f0e:	74 4d                	je     c0012f5d <KeGetFileFromDescriptor(int)+0xa0>
c0012f10:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012f16:	a1 70 12 03 c0       	mov    eax,ds:0xc0031270
c0012f1b:	74 40                	je     c0012f5d <KeGetFileFromDescriptor(int)+0xa0>
c0012f1d:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0012f23:	a1 68 12 03 c0       	mov    eax,ds:0xc0031268
c0012f28:	74 33                	je     c0012f5d <KeGetFileFromDescriptor(int)+0xa0>
c0012f2a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0012f30:	a1 64 12 03 c0       	mov    eax,ds:0xc0031264
c0012f35:	74 26                	je     c0012f5d <KeGetFileFromDescriptor(int)+0xa0>
c0012f37:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0012f3d:	83 f8 08             	cmp    eax,0x8
c0012f40:	77 09                	ja     c0012f4b <KeGetFileFromDescriptor(int)+0x8e>
c0012f42:	8b 04 85 40 12 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcedc0]
c0012f49:	eb 12                	jmp    c0012f5d <KeGetFileFromDescriptor(int)+0xa0>
c0012f4b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0012f51:	83 fb 08             	cmp    ebx,0x8
c0012f54:	77 95                	ja     c0012eeb <KeGetFileFromDescriptor(int)+0x2e>
c0012f56:	8b 04 9d 00 12 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffcee00]
c0012f5d:	83 c4 08             	add    esp,0x8
c0012f60:	5b                   	pop    ebx
c0012f61:	c3                   	ret    

c0012f62 <__static_initialization_and_destruction_0(int, int)>:
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0012f6a:	75 34                	jne    c0012fa0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012f6c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0012f74:	75 2a                	jne    c0012fa0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0012f76:	83 ec 0c             	sub    esp,0xc
c0012f79:	68 78 12 03 c0       	push   0xc0031278
c0012f7e:	e8 11 2d 01 00       	call   c0025c94 <LinkedList<UnixFile>::LinkedList()>
c0012f83:	83 c4 10             	add    esp,0x10
c0012f86:	83 ec 04             	sub    esp,0x4
c0012f89:	68 20 ac 02 c0       	push   0xc002ac20
c0012f8e:	68 78 12 03 c0       	push   0xc0031278
c0012f93:	68 92 5c 02 c0       	push   0xc0025c92
c0012f98:	e8 9b a2 ff ff       	call   c000d238 <__cxa_atexit>
c0012f9d:	83 c4 10             	add    esp,0x10
c0012fa0:	90                   	nop
c0012fa1:	83 c4 0c             	add    esp,0xc
c0012fa4:	c3                   	ret    

c0012fa5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0012fa5:	83 ec 0c             	sub    esp,0xc
c0012fa8:	83 ec 08             	sub    esp,0x8
c0012fab:	68 ff ff 00 00       	push   0xffff
c0012fb0:	6a 01                	push   0x1
c0012fb2:	e8 ab ff ff ff       	call   c0012f62 <__static_initialization_and_destruction_0(int, int)>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	83 c4 0c             	add    esp,0xc
c0012fbd:	c3                   	ret    

c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0012fbe:	53                   	push   ebx
c0012fbf:	8b 15 48 b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b448
c0012fc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012fc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012fcd:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012fd3:	89 d8                	mov    eax,ebx
c0012fd5:	d1 e8                	shr    eax,1
c0012fd7:	01 d0                	add    eax,edx
c0012fd9:	80 e3 01             	and    bl,0x1
c0012fdc:	8a 10                	mov    dl,BYTE PTR [eax]
c0012fde:	75 09                	jne    c0012fe9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012fe0:	83 e2 f0             	and    edx,0xfffffff0
c0012fe3:	09 ca                	or     edx,ecx
c0012fe5:	88 10                	mov    BYTE PTR [eax],dl
c0012fe7:	5b                   	pop    ebx
c0012fe8:	c3                   	ret    
c0012fe9:	0f b6 c9             	movzx  ecx,cl
c0012fec:	83 e2 0f             	and    edx,0xf
c0012fef:	c1 e1 04             	shl    ecx,0x4
c0012ff2:	09 ca                	or     edx,ecx
c0012ff4:	88 10                	mov    BYTE PTR [eax],dl
c0012ff6:	5b                   	pop    ebx
c0012ff7:	c3                   	ret    

c0012ff8 <Virt::getPageState(unsigned long)>:
c0012ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ffc:	8b 0d 48 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b448
c0013002:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013008:	89 d0                	mov    eax,edx
c001300a:	d1 e8                	shr    eax,1
c001300c:	80 e2 01             	and    dl,0x1
c001300f:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0013012:	74 03                	je     c0013017 <Virt::getPageState(unsigned long)+0x1f>
c0013014:	c1 e8 04             	shr    eax,0x4
c0013017:	83 e0 0f             	and    eax,0xf
c001301a:	c3                   	ret    

c001301b <Virt::allocateKernelVirtualPages(int)>:
c001301b:	55                   	push   ebp
c001301c:	57                   	push   edi
c001301d:	56                   	push   esi
c001301e:	31 f6                	xor    esi,esi
c0013020:	53                   	push   ebx
c0013021:	31 db                	xor    ebx,ebx
c0013023:	83 ec 1c             	sub    esp,0x1c
c0013026:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001302b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001302f:	8b 2d 44 b4 02 c0    	mov    ebp,DWORD PTR ds:0xc002b444
c0013035:	55                   	push   ebp
c0013036:	e8 bd ff ff ff       	call   c0012ff8 <Virt::getPageState(unsigned long)>
c001303b:	5a                   	pop    edx
c001303c:	84 c0                	test   al,al
c001303e:	75 3d                	jne    c001307d <Virt::allocateKernelVirtualPages(int)+0x62>
c0013040:	85 db                	test   ebx,ebx
c0013042:	0f 44 f5             	cmove  esi,ebp
c0013045:	83 c3 01             	add    ebx,0x1
c0013048:	39 fb                	cmp    ebx,edi
c001304a:	74 5e                	je     c00130aa <Virt::allocateKernelVirtualPages(int)+0x8f>
c001304c:	83 c5 01             	add    ebp,0x1
c001304f:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013055:	76 33                	jbe    c001308a <Virt::allocateKernelVirtualPages(int)+0x6f>
c0013057:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001305c:	c7 05 44 b4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b444,0xc8000
c0013066:	75 2a                	jne    c0013092 <Virt::allocateKernelVirtualPages(int)+0x77>
c0013068:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001306d:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0013072:	55                   	push   ebp
c0013073:	e8 80 ff ff ff       	call   c0012ff8 <Virt::getPageState(unsigned long)>
c0013078:	5a                   	pop    edx
c0013079:	84 c0                	test   al,al
c001307b:	74 c3                	je     c0013040 <Virt::allocateKernelVirtualPages(int)+0x25>
c001307d:	83 c5 01             	add    ebp,0x1
c0013080:	31 db                	xor    ebx,ebx
c0013082:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0013088:	77 cd                	ja     c0013057 <Virt::allocateKernelVirtualPages(int)+0x3c>
c001308a:	89 2d 44 b4 02 c0    	mov    DWORD PTR ds:0xc002b444,ebp
c0013090:	eb a3                	jmp    c0013035 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	68 e4 81 02 c0       	push   0xc00281e4
c001309a:	e8 35 ca ff ff       	call   c000fad4 <KePanic(char const*)>
c001309f:	8b 2d 44 b4 02 c0    	mov    ebp,DWORD PTR ds:0xc002b444
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	eb 8b                	jmp    c0013035 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00130aa:	89 35 44 b4 02 c0    	mov    DWORD PTR ds:0xc002b444,esi
c00130b0:	83 fb 01             	cmp    ebx,0x1
c00130b3:	74 63                	je     c0013118 <Virt::allocateKernelVirtualPages(int)+0xfd>
c00130b5:	85 ff                	test   edi,edi
c00130b7:	74 41                	je     c00130fa <Virt::allocateKernelVirtualPages(int)+0xdf>
c00130b9:	89 f0                	mov    eax,esi
c00130bb:	31 db                	xor    ebx,ebx
c00130bd:	8d 6f ff             	lea    ebp,[edi-0x1]
c00130c0:	eb 16                	jmp    c00130d8 <Virt::allocateKernelVirtualPages(int)+0xbd>
c00130c2:	6a 01                	push   0x1
c00130c4:	83 c3 01             	add    ebx,0x1
c00130c7:	50                   	push   eax
c00130c8:	e8 f1 fe ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00130cd:	39 fb                	cmp    ebx,edi
c00130cf:	58                   	pop    eax
c00130d0:	5a                   	pop    edx
c00130d1:	74 27                	je     c00130fa <Virt::allocateKernelVirtualPages(int)+0xdf>
c00130d3:	a1 44 b4 02 c0       	mov    eax,ds:0xc002b444
c00130d8:	8d 50 01             	lea    edx,[eax+0x1]
c00130db:	85 db                	test   ebx,ebx
c00130dd:	89 15 44 b4 02 c0    	mov    DWORD PTR ds:0xc002b444,edx
c00130e3:	74 22                	je     c0013107 <Virt::allocateKernelVirtualPages(int)+0xec>
c00130e5:	39 dd                	cmp    ebp,ebx
c00130e7:	75 d9                	jne    c00130c2 <Virt::allocateKernelVirtualPages(int)+0xa7>
c00130e9:	6a 03                	push   0x3
c00130eb:	83 c3 01             	add    ebx,0x1
c00130ee:	50                   	push   eax
c00130ef:	e8 ca fe ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00130f4:	39 fb                	cmp    ebx,edi
c00130f6:	59                   	pop    ecx
c00130f7:	58                   	pop    eax
c00130f8:	75 d9                	jne    c00130d3 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00130fa:	83 c4 1c             	add    esp,0x1c
c00130fd:	89 f0                	mov    eax,esi
c00130ff:	5b                   	pop    ebx
c0013100:	c1 e0 0c             	shl    eax,0xc
c0013103:	5e                   	pop    esi
c0013104:	5f                   	pop    edi
c0013105:	5d                   	pop    ebp
c0013106:	c3                   	ret    
c0013107:	6a 02                	push   0x2
c0013109:	bb 01 00 00 00       	mov    ebx,0x1
c001310e:	50                   	push   eax
c001310f:	e8 aa fe ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013114:	58                   	pop    eax
c0013115:	5a                   	pop    edx
c0013116:	eb bb                	jmp    c00130d3 <Virt::allocateKernelVirtualPages(int)+0xb8>
c0013118:	6a 04                	push   0x4
c001311a:	56                   	push   esi
c001311b:	8d 46 01             	lea    eax,[esi+0x1]
c001311e:	a3 44 b4 02 c0       	mov    ds:0xc002b444,eax
c0013123:	e8 96 fe ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013128:	89 f0                	mov    eax,esi
c001312a:	59                   	pop    ecx
c001312b:	c1 e0 0c             	shl    eax,0xc
c001312e:	5b                   	pop    ebx
c001312f:	83 c4 1c             	add    esp,0x1c
c0013132:	5b                   	pop    ebx
c0013133:	5e                   	pop    esi
c0013134:	5f                   	pop    edi
c0013135:	5d                   	pop    ebp
c0013136:	c3                   	ret    

c0013137 <Virt::freeSwapfilePage(unsigned long)>:
c0013137:	53                   	push   ebx
c0013138:	8b 15 8c 12 03 c0    	mov    edx,DWORD PTR ds:0xc003128c
c001313e:	b8 01 00 00 00       	mov    eax,0x1
c0013143:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013147:	d3 e0                	shl    eax,cl
c0013149:	89 cb                	mov    ebx,ecx
c001314b:	c1 eb 05             	shr    ebx,0x5
c001314e:	f7 d0                	not    eax
c0013150:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0013153:	21 c1                	and    ecx,eax
c0013155:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013158:	5b                   	pop    ebx
c0013159:	c3                   	ret    

c001315a <Virt::swapIDToSector(unsigned long)>:
c001315a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001315e:	8b 15 4c b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b44c
c0013164:	8b 0d 54 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b454
c001316a:	0f af c2             	imul   eax,edx
c001316d:	01 c8                	add    eax,ecx
c001316f:	c3                   	ret    

c0013170 <Virt::allocateSwapfilePage()>:
c0013170:	55                   	push   ebp
c0013171:	31 d2                	xor    edx,edx
c0013173:	57                   	push   edi
c0013174:	56                   	push   esi
c0013175:	53                   	push   ebx
c0013176:	83 ec 0c             	sub    esp,0xc
c0013179:	8b 1d 50 b4 02 c0    	mov    ebx,DWORD PTR ds:0xc002b450
c001317f:	8b 0d 4c b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b44c
c0013185:	89 d8                	mov    eax,ebx
c0013187:	f7 f1                	div    ecx
c0013189:	39 cb                	cmp    ebx,ecx
c001318b:	72 2f                	jb     c00131bc <Virt::allocateSwapfilePage()+0x4c>
c001318d:	8b 35 8c 12 03 c0    	mov    esi,DWORD PTR ds:0xc003128c
c0013193:	8b 16                	mov    edx,DWORD PTR [esi]
c0013195:	f6 c2 01             	test   dl,0x1
c0013198:	74 3e                	je     c00131d8 <Virt::allocateSwapfilePage()+0x68>
c001319a:	31 c9                	xor    ecx,ecx
c001319c:	bf 01 00 00 00       	mov    edi,0x1
c00131a1:	eb 12                	jmp    c00131b5 <Virt::allocateSwapfilePage()+0x45>
c00131a3:	89 ca                	mov    edx,ecx
c00131a5:	89 fd                	mov    ebp,edi
c00131a7:	c1 ea 05             	shr    edx,0x5
c00131aa:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00131ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c00131af:	d3 e5                	shl    ebp,cl
c00131b1:	85 ea                	test   edx,ebp
c00131b3:	74 2c                	je     c00131e1 <Virt::allocateSwapfilePage()+0x71>
c00131b5:	83 c1 01             	add    ecx,0x1
c00131b8:	39 c8                	cmp    eax,ecx
c00131ba:	77 e7                	ja     c00131a3 <Virt::allocateSwapfilePage()+0x33>
c00131bc:	83 ec 0c             	sub    esp,0xc
c00131bf:	68 f7 84 02 c0       	push   0xc00284f7
c00131c4:	e8 0b c9 ff ff       	call   c000fad4 <KePanic(char const*)>
c00131c9:	83 c4 10             	add    esp,0x10
c00131cc:	31 c9                	xor    ecx,ecx
c00131ce:	83 c4 0c             	add    esp,0xc
c00131d1:	89 c8                	mov    eax,ecx
c00131d3:	5b                   	pop    ebx
c00131d4:	5e                   	pop    esi
c00131d5:	5f                   	pop    edi
c00131d6:	5d                   	pop    ebp
c00131d7:	c3                   	ret    
c00131d8:	89 f3                	mov    ebx,esi
c00131da:	bd 01 00 00 00       	mov    ebp,0x1
c00131df:	31 c9                	xor    ecx,ecx
c00131e1:	09 ea                	or     edx,ebp
c00131e3:	89 c8                	mov    eax,ecx
c00131e5:	89 13                	mov    DWORD PTR [ebx],edx
c00131e7:	83 c4 0c             	add    esp,0xc
c00131ea:	5b                   	pop    ebx
c00131eb:	5e                   	pop    esi
c00131ec:	5f                   	pop    edi
c00131ed:	5d                   	pop    ebp
c00131ee:	c3                   	ret    

c00131ef <Virt::virtualMemorySetup()>:
c00131ef:	53                   	push   ebx
c00131f0:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00131f5:	6a 0f                	push   0xf
c00131f7:	53                   	push   ebx
c00131f8:	83 c3 01             	add    ebx,0x1
c00131fb:	e8 be fd ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013200:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013206:	58                   	pop    eax
c0013207:	5a                   	pop    edx
c0013208:	75 eb                	jne    c00131f5 <Virt::virtualMemorySetup()+0x6>
c001320a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001320f:	6a 00                	push   0x0
c0013211:	53                   	push   ebx
c0013212:	83 c3 01             	add    ebx,0x1
c0013215:	e8 a4 fd ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001321a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0013220:	59                   	pop    ecx
c0013221:	58                   	pop    eax
c0013222:	75 eb                	jne    c001320f <Virt::virtualMemorySetup()+0x20>
c0013224:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013229:	6a 0f                	push   0xf
c001322b:	53                   	push   ebx
c001322c:	83 c3 01             	add    ebx,0x1
c001322f:	e8 8a fd ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013234:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001323a:	58                   	pop    eax
c001323b:	5a                   	pop    edx
c001323c:	75 eb                	jne    c0013229 <Virt::virtualMemorySetup()+0x3a>
c001323e:	5b                   	pop    ebx
c001323f:	c3                   	ret    

c0013240 <Virt::setupPageSwapping(int)>:
c0013240:	53                   	push   ebx
c0013241:	83 ec 0c             	sub    esp,0xc
c0013244:	a1 e8 0a 03 c0       	mov    eax,ds:0xc0030ae8
c0013249:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001324d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0013253:	8b 10                	mov    edx,DWORD PTR [eax]
c0013255:	53                   	push   ebx
c0013256:	68 0e 85 02 c0       	push   0xc002850e
c001325b:	50                   	push   eax
c001325c:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001325f:	c1 e3 0b             	shl    ebx,0xb
c0013262:	89 1d 50 b4 02 c0    	mov    DWORD PTR ds:0xc002b450,ebx
c0013268:	c1 eb 08             	shr    ebx,0x8
c001326b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001326e:	c6 05 58 b4 02 c0 43 	mov    BYTE PTR ds:0xc002b458,0x43
c0013275:	c7 05 4c b4 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002b44c,0x8
c001327f:	a3 54 b4 02 c0       	mov    ds:0xc002b454,eax
c0013284:	e8 f7 c3 ff ff       	call   c000f680 <malloc>
c0013289:	31 d2                	xor    edx,edx
c001328b:	83 c4 0c             	add    esp,0xc
c001328e:	a3 8c 12 03 c0       	mov    ds:0xc003128c,eax
c0013293:	89 c1                	mov    ecx,eax
c0013295:	a1 50 b4 02 c0       	mov    eax,ds:0xc002b450
c001329a:	f7 35 4c b4 02 c0    	div    DWORD PTR ds:0xc002b44c
c00132a0:	c1 e8 05             	shr    eax,0x5
c00132a3:	50                   	push   eax
c00132a4:	6a 00                	push   0x0
c00132a6:	51                   	push   ecx
c00132a7:	e8 44 d2 fe ff       	call   c00004f0 <memset>
c00132ac:	83 c4 18             	add    esp,0x18
c00132af:	5b                   	pop    ebx
c00132b0:	c3                   	ret    
c00132b1:	90                   	nop

c00132b2 <VAS::setCPUSpecific(unsigned long)>:
c00132b2:	c3                   	ret    
c00132b3:	90                   	nop

c00132b4 <VAS::VAS(VAS*)>:
c00132b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00132bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00132ca:	90                   	nop
c00132cb:	c3                   	ret    

c00132cc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00132cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132d0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00132d5:	89 c2                	mov    edx,eax
c00132d7:	c1 ea 16             	shr    edx,0x16
c00132da:	c1 e8 0a             	shr    eax,0xa
c00132dd:	83 f9 01             	cmp    ecx,0x1
c00132e0:	19 c9                	sbb    ecx,ecx
c00132e2:	25 fc 0f 00 00       	and    eax,0xffc
c00132e7:	c1 e2 0c             	shl    edx,0xc
c00132ea:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00132f0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00132f7:	01 d0                	add    eax,edx
c00132f9:	c3                   	ret    

c00132fa <VAS::getPageTableEntry(unsigned long)>:
c00132fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00132fe:	89 ca                	mov    edx,ecx
c0013300:	c1 ea 16             	shr    edx,0x16
c0013303:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013309:	c1 e9 0a             	shr    ecx,0xa
c001330c:	c1 e0 0c             	shl    eax,0xc
c001330f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013315:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013318:	c3                   	ret    

c0013319 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013319:	55                   	push   ebp
c001331a:	57                   	push   edi
c001331b:	bf 01 00 00 00       	mov    edi,0x1
c0013320:	56                   	push   esi
c0013321:	53                   	push   ebx
c0013322:	83 ec 1c             	sub    esp,0x1c
c0013325:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013329:	c1 ee 0c             	shr    esi,0xc
c001332c:	eb 48                	jmp    c0013376 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001332e:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c0013333:	83 ec 08             	sub    esp,0x8
c0013336:	55                   	push   ebp
c0013337:	50                   	push   eax
c0013338:	e8 bd ff ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c001333d:	83 c4 10             	add    esp,0x10
c0013340:	8b 10                	mov    edx,DWORD PTR [eax]
c0013342:	f6 c6 04             	test   dh,0x4
c0013345:	75 70                	jne    c00133b7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013347:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001334d:	83 fb 04             	cmp    ebx,0x4
c0013350:	0f 84 8a 00 00 00    	je     c00133e0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013356:	83 fb 02             	cmp    ebx,0x2
c0013359:	0f 84 9a 00 00 00    	je     c00133f9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001335f:	83 fb 03             	cmp    ebx,0x3
c0013362:	0f 84 be 00 00 00    	je     c0013426 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013368:	83 fb 01             	cmp    ebx,0x1
c001336b:	0f 84 a2 00 00 00    	je     c0013413 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013371:	83 c6 01             	add    esi,0x1
c0013374:	31 ff                	xor    edi,edi
c0013376:	56                   	push   esi
c0013377:	89 f5                	mov    ebp,esi
c0013379:	e8 7a fc ff ff       	call   c0012ff8 <Virt::getPageState(unsigned long)>
c001337e:	c1 e5 0c             	shl    ebp,0xc
c0013381:	5a                   	pop    edx
c0013382:	0f b6 d8             	movzx  ebx,al
c0013385:	85 db                	test   ebx,ebx
c0013387:	75 a5                	jne    c001332e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013389:	83 ec 0c             	sub    esp,0xc
c001338c:	68 25 85 02 c0       	push   0xc0028525
c0013391:	e8 3e c7 ff ff       	call   c000fad4 <KePanic(char const*)>
c0013396:	5a                   	pop    edx
c0013397:	59                   	pop    ecx
c0013398:	55                   	push   ebp
c0013399:	8b 2d 90 12 03 c0    	mov    ebp,DWORD PTR ds:0xc0031290
c001339f:	55                   	push   ebp
c00133a0:	e8 55 ff ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00133aa:	f6 c6 04             	test   dh,0x4
c00133ad:	75 08                	jne    c00133b7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00133af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00133b5:	eb ba                	jmp    c0013371 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00133b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00133bb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00133c1:	83 ec 0c             	sub    esp,0xc
c00133c4:	52                   	push   edx
c00133c5:	e8 9b c8 ff ff       	call   c000fc65 <Phys::freePage(unsigned long)>
c00133ca:	83 c4 10             	add    esp,0x10
c00133cd:	83 fb 04             	cmp    ebx,0x4
c00133d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00133d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00133da:	0f 85 76 ff ff ff    	jne    c0013356 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00133e0:	83 e7 01             	and    edi,0x1
c00133e3:	75 46                	jne    c001342b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00133e5:	c7 44 24 30 04 82 02 c0 	mov    DWORD PTR [esp+0x30],0xc0028204
c00133ed:	83 c4 1c             	add    esp,0x1c
c00133f0:	5b                   	pop    ebx
c00133f1:	5e                   	pop    esi
c00133f2:	5f                   	pop    edi
c00133f3:	5d                   	pop    ebp
c00133f4:	e9 db c6 ff ff       	jmp    c000fad4 <KePanic(char const*)>
c00133f9:	83 e7 01             	and    edi,0x1
c00133fc:	75 15                	jne    c0013413 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	68 41 85 02 c0       	push   0xc0028541
c0013406:	e8 c9 c6 ff ff       	call   c000fad4 <KePanic(char const*)>
c001340b:	83 c4 10             	add    esp,0x10
c001340e:	e9 5e ff ff ff       	jmp    c0013371 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013413:	83 ec 08             	sub    esp,0x8
c0013416:	6a 00                	push   0x0
c0013418:	56                   	push   esi
c0013419:	e8 a0 fb ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001341e:	83 c4 10             	add    esp,0x10
c0013421:	e9 4b ff ff ff       	jmp    c0013371 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013426:	83 e7 01             	and    edi,0x1
c0013429:	75 16                	jne    c0013441 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001342b:	83 ec 08             	sub    esp,0x8
c001342e:	6a 00                	push   0x0
c0013430:	56                   	push   esi
c0013431:	e8 88 fb ff ff       	call   c0012fbe <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013436:	83 c4 10             	add    esp,0x10
c0013439:	83 c4 1c             	add    esp,0x1c
c001343c:	5b                   	pop    ebx
c001343d:	5e                   	pop    esi
c001343e:	5f                   	pop    edi
c001343f:	5d                   	pop    ebp
c0013440:	c3                   	ret    
c0013441:	c7 44 24 30 5d 85 02 c0 	mov    DWORD PTR [esp+0x30],0xc002855d
c0013449:	83 c4 1c             	add    esp,0x1c
c001344c:	5b                   	pop    ebx
c001344d:	5e                   	pop    esi
c001344e:	5f                   	pop    edi
c001344f:	5d                   	pop    ebp
c0013450:	e9 7f c6 ff ff       	jmp    c000fad4 <KePanic(char const*)>
c0013455:	90                   	nop

c0013456 <VAS::freeAllocatedPages(unsigned long)>:
c0013456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001345a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001345e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0013462:	74 09                	je     c001346d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013464:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013468:	e9 ac fe ff ff       	jmp    c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c001346d:	c7 44 24 04 28 82 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028228
c0013475:	e9 ec 3a ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c001347a <VAS::virtualToPhysical(unsigned long)>:
c001347a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001347e:	50                   	push   eax
c001347f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013483:	52                   	push   edx
c0013484:	e8 71 fe ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c0013489:	59                   	pop    ecx
c001348a:	5a                   	pop    edx
c001348b:	8b 00                	mov    eax,DWORD PTR [eax]
c001348d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013492:	c3                   	ret    
c0013493:	90                   	nop

c0013494 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013494:	55                   	push   ebp
c0013495:	57                   	push   edi
c0013496:	56                   	push   esi
c0013497:	53                   	push   ebx
c0013498:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001349c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00134a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00134a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00134a8:	85 db                	test   ebx,ebx
c00134aa:	7e 24                	jle    c00134d0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00134ac:	c1 e3 0c             	shl    ebx,0xc
c00134af:	01 f3                	add    ebx,esi
c00134b1:	56                   	push   esi
c00134b2:	81 c6 00 10 00 00    	add    esi,0x1000
c00134b8:	55                   	push   ebp
c00134b9:	e8 3c fe ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c00134be:	5a                   	pop    edx
c00134bf:	59                   	pop    ecx
c00134c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00134c2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00134c6:	21 f9                	and    ecx,edi
c00134c8:	09 d1                	or     ecx,edx
c00134ca:	39 f3                	cmp    ebx,esi
c00134cc:	89 08                	mov    DWORD PTR [eax],ecx
c00134ce:	75 e1                	jne    c00134b1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00134d0:	5b                   	pop    ebx
c00134d1:	5e                   	pop    esi
c00134d2:	5f                   	pop    edi
c00134d3:	5d                   	pop    ebp
c00134d4:	c3                   	ret    
c00134d5:	90                   	nop

c00134d6 <VAS::VAS()>:
c00134d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00134e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00134ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f0:	a3 90 12 03 c0       	mov    ds:0xc0031290,eax
c00134f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134f9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00134fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013501:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013508:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001350f:	ba 7d c0 02 c0       	mov    edx,0xc002c07d
c0013514:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c0013519:	29 c2                	sub    edx,eax
c001351b:	89 d0                	mov    eax,edx
c001351d:	05 ff 0f 00 00       	add    eax,0xfff
c0013522:	c1 e8 0c             	shr    eax,0xc
c0013525:	89 c2                	mov    edx,eax
c0013527:	b8 00 c0 02 c0       	mov    eax,0xc002c000
c001352c:	6a 04                	push   0x4
c001352e:	6a ff                	push   0xffffffff
c0013530:	52                   	push   edx
c0013531:	50                   	push   eax
c0013532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013536:	e8 59 ff ff ff       	call   c0013494 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001353b:	83 c4 14             	add    esp,0x14
c001353e:	90                   	nop
c001353f:	c3                   	ret    

c0013540 <VAS::setToWriteCombining(unsigned long, int)>:
c0013540:	a1 24 14 03 c0       	mov    eax,ds:0xc0031424
c0013545:	50                   	push   eax
c0013546:	6a ff                	push   0xffffffff
c0013548:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001354c:	52                   	push   edx
c001354d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013551:	51                   	push   ecx
c0013552:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013556:	50                   	push   eax
c0013557:	e8 38 ff ff ff       	call   c0013494 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001355c:	83 c4 14             	add    esp,0x14
c001355f:	c3                   	ret    

c0013560 <VAS::mapOtherVASIn(bool, VAS*)>:
c0013560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013564:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013567:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001356b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001356e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013573:	83 f8 01             	cmp    eax,0x1
c0013576:	19 c0                	sbb    eax,eax
c0013578:	83 ca 03             	or     edx,0x3
c001357b:	83 e0 fc             	and    eax,0xfffffffc
c001357e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013585:	0f 20 d8             	mov    eax,cr3
c0013588:	0f 22 d8             	mov    cr3,eax
c001358b:	c3                   	ret    

c001358c <VAS::~VAS()>:
c001358c:	83 ec 2c             	sub    esp,0x2c
c001358f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013597:	fa                   	cli    
c0013598:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001359d:	83 c0 01             	add    eax,0x1
c00135a0:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c00135a5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00135aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00135af:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00135b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00135b9:	6a 01                	push   0x1
c00135bb:	50                   	push   eax
c00135bc:	e8 9f ff ff ff       	call   c0013560 <VAS::mapOtherVASIn(bool, VAS*)>
c00135c1:	83 c4 0c             	add    esp,0xc
c00135c4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00135cc:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00135d4:	0f 8f d8 00 00 00    	jg     c00136b2 <VAS::~VAS()+0x126>
c00135da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00135e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135e5:	c1 e2 02             	shl    edx,0x2
c00135e8:	01 d0                	add    eax,edx
c00135ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00135ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00135f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f4:	83 e0 01             	and    eax,0x1
c00135f7:	0f 84 ab 00 00 00    	je     c00136a8 <VAS::~VAS()+0x11c>
c00135fd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013605:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001360d:	7f 74                	jg     c0013683 <VAS::~VAS()+0xf7>
c001360f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013613:	c1 e0 0a             	shl    eax,0xa
c0013616:	89 c2                	mov    edx,eax
c0013618:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001361c:	01 d0                	add    eax,edx
c001361e:	c1 e0 0c             	shl    eax,0xc
c0013621:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013625:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001362a:	8b 00                	mov    eax,DWORD PTR [eax]
c001362c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001362f:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0013635:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013639:	6a 01                	push   0x1
c001363b:	50                   	push   eax
c001363c:	e8 8b fc ff ff       	call   c00132cc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013641:	83 c4 0c             	add    esp,0xc
c0013644:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001364c:	8b 00                	mov    eax,DWORD PTR [eax]
c001364e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013656:	25 01 04 00 00       	and    eax,0x401
c001365b:	3d 01 04 00 00       	cmp    eax,0x401
c0013660:	75 1a                	jne    c001367c <VAS::~VAS()+0xf0>
c0013662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013666:	25 00 f0 ff ff       	and    eax,0xfffff000
c001366b:	83 ec 0c             	sub    esp,0xc
c001366e:	50                   	push   eax
c001366f:	e8 f1 c5 ff ff       	call   c000fc65 <Phys::freePage(unsigned long)>
c0013674:	83 c4 10             	add    esp,0x10
c0013677:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001367c:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013681:	eb 82                	jmp    c0013605 <VAS::~VAS()+0x79>
c0013683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013687:	25 00 04 00 00       	and    eax,0x400
c001368c:	74 1a                	je     c00136a8 <VAS::~VAS()+0x11c>
c001368e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013692:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013697:	83 ec 0c             	sub    esp,0xc
c001369a:	50                   	push   eax
c001369b:	e8 c5 c5 ff ff       	call   c000fc65 <Phys::freePage(unsigned long)>
c00136a0:	83 c4 10             	add    esp,0x10
c00136a3:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00136a8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00136ad:	e9 1a ff ff ff       	jmp    c00135cc <VAS::~VAS()+0x40>
c00136b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136b6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00136b9:	83 ec 0c             	sub    esp,0xc
c00136bc:	50                   	push   eax
c00136bd:	e8 57 fc ff ff       	call   c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c00136c2:	83 c4 10             	add    esp,0x10
c00136c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00136c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	50                   	push   eax
c00136d0:	e8 90 c5 ff ff       	call   c000fc65 <Phys::freePage(unsigned long)>
c00136d5:	83 c4 10             	add    esp,0x10
c00136d8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00136dd:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00136e5:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00136ea:	85 c0                	test   eax,eax
c00136ec:	75 01                	jne    c00136ef <VAS::~VAS()+0x163>
c00136ee:	fb                   	sti    
c00136ef:	90                   	nop
c00136f0:	83 c4 2c             	add    esp,0x2c
c00136f3:	c3                   	ret    

c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00136f4:	55                   	push   ebp
c00136f5:	57                   	push   edi
c00136f6:	56                   	push   esi
c00136f7:	53                   	push   ebx
c00136f8:	83 ec 1c             	sub    esp,0x1c
c00136fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00136ff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013703:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013707:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001370d:	77 08                	ja     c0013717 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c001370f:	0f 20 d8             	mov    eax,cr3
c0013712:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0013715:	75 43                	jne    c001375a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0013717:	89 d8                	mov    eax,ebx
c0013719:	09 f8                	or     eax,edi
c001371b:	a9 ff 0f 00 00       	test   eax,0xfff
c0013720:	75 53                	jne    c0013775 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0013722:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0013725:	89 de                	mov    esi,ebx
c0013727:	c1 ee 16             	shr    esi,0x16
c001372a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013731:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013735:	74 50                	je     c0013787 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0013737:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001373b:	c1 eb 0a             	shr    ebx,0xa
c001373e:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013744:	c1 e6 0c             	shl    esi,0xc
c0013747:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001374d:	09 c7                	or     edi,eax
c001374f:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0013752:	83 c4 1c             	add    esp,0x1c
c0013755:	5b                   	pop    ebx
c0013756:	5e                   	pop    esi
c0013757:	5f                   	pop    edi
c0013758:	5d                   	pop    ebp
c0013759:	c3                   	ret    
c001375a:	83 ec 0c             	sub    esp,0xc
c001375d:	68 4c 82 02 c0       	push   0xc002824c
c0013762:	e8 ff 37 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013767:	89 d8                	mov    eax,ebx
c0013769:	83 c4 10             	add    esp,0x10
c001376c:	09 f8                	or     eax,edi
c001376e:	a9 ff 0f 00 00       	test   eax,0xfff
c0013773:	74 ad                	je     c0013722 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013775:	83 ec 0c             	sub    esp,0xc
c0013778:	68 b4 82 02 c0       	push   0xc00282b4
c001377d:	e8 52 c3 ff ff       	call   c000fad4 <KePanic(char const*)>
c0013782:	83 c4 10             	add    esp,0x10
c0013785:	eb 9b                	jmp    c0013722 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0013787:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001378b:	e8 3e c5 ff ff       	call   c000fcce <Phys::allocatePage()>
c0013790:	8b 0d 90 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031290
c0013796:	83 ec 0c             	sub    esp,0xc
c0013799:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001379d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137a1:	6a 01                	push   0x1
c00137a3:	e8 73 f8 ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c00137a8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00137af:	6a 01                	push   0x1
c00137b1:	50                   	push   eax
c00137b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137b6:	52                   	push   edx
c00137b7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00137bb:	51                   	push   ecx
c00137bc:	e8 2d 01 00 00       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137c1:	83 c4 1c             	add    esp,0x1c
c00137c4:	68 00 10 00 00       	push   0x1000
c00137c9:	6a 00                	push   0x0
c00137cb:	50                   	push   eax
c00137cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00137d0:	e8 1b cd fe ff       	call   c00004f0 <memset>
c00137d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00137d9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00137dc:	e8 38 fb ff ff       	call   c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c00137e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00137e9:	83 c4 10             	add    esp,0x10
c00137ec:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00137ef:	0d 07 04 00 00       	or     eax,0x407
c00137f4:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00137f7:	e9 3b ff ff ff       	jmp    c0013737 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00137fc <VAS::allocatePages(int, int)>:
c00137fc:	55                   	push   ebp
c00137fd:	57                   	push   edi
c00137fe:	56                   	push   esi
c00137ff:	53                   	push   ebx
c0013800:	83 ec 1c             	sub    esp,0x1c
c0013803:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013807:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001380b:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c001380f:	75 75                	jne    c0013886 <VAS::allocatePages(int, int)+0x8a>
c0013811:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013814:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013818:	85 c0                	test   eax,eax
c001381a:	74 49                	je     c0013865 <VAS::allocatePages(int, int)+0x69>
c001381c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013820:	89 d5                	mov    ebp,edx
c0013822:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013826:	c1 e5 0c             	shl    ebp,0xc
c0013829:	01 dd                	add    ebp,ebx
c001382b:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c001382e:	81 cf 00 04 00 00    	or     edi,0x400
c0013834:	85 d2                	test   edx,edx
c0013836:	7e 1b                	jle    c0013853 <VAS::allocatePages(int, int)+0x57>
c0013838:	e8 91 c4 ff ff       	call   c000fcce <Phys::allocatePage()>
c001383d:	57                   	push   edi
c001383e:	53                   	push   ebx
c001383f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013845:	50                   	push   eax
c0013846:	56                   	push   esi
c0013847:	e8 a8 fe ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001384c:	83 c4 10             	add    esp,0x10
c001384f:	39 dd                	cmp    ebp,ebx
c0013851:	75 e5                	jne    c0013838 <VAS::allocatePages(int, int)+0x3c>
c0013853:	0f 20 d8             	mov    eax,cr3
c0013856:	0f 22 d8             	mov    cr3,eax
c0013859:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001385d:	83 c4 1c             	add    esp,0x1c
c0013860:	5b                   	pop    ebx
c0013861:	5e                   	pop    esi
c0013862:	5f                   	pop    edi
c0013863:	5d                   	pop    ebp
c0013864:	c3                   	ret    
c0013865:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013869:	83 ec 0c             	sub    esp,0xc
c001386c:	68 d8 82 02 c0       	push   0xc00282d8
c0013871:	e8 5e c2 ff ff       	call   c000fad4 <KePanic(char const*)>
c0013876:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013879:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001387d:	83 c4 10             	add    esp,0x10
c0013880:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013884:	eb 96                	jmp    c001381c <VAS::allocatePages(int, int)+0x20>
c0013886:	83 ec 0c             	sub    esp,0xc
c0013889:	52                   	push   edx
c001388a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c001388e:	e8 88 f7 ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c0013893:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013897:	83 c4 10             	add    esp,0x10
c001389a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001389f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00138a3:	77 38                	ja     c00138dd <VAS::allocatePages(int, int)+0xe1>
c00138a5:	85 d2                	test   edx,edx
c00138a7:	7e aa                	jle    c0013853 <VAS::allocatePages(int, int)+0x57>
c00138a9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00138ad:	c1 e2 0c             	shl    edx,0xc
c00138b0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138b4:	81 cf 00 04 00 00    	or     edi,0x400
c00138ba:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c00138bd:	e8 0c c4 ff ff       	call   c000fcce <Phys::allocatePage()>
c00138c2:	57                   	push   edi
c00138c3:	53                   	push   ebx
c00138c4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00138ca:	50                   	push   eax
c00138cb:	56                   	push   esi
c00138cc:	e8 23 fe ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00138d1:	83 c4 10             	add    esp,0x10
c00138d4:	39 dd                	cmp    ebp,ebx
c00138d6:	75 e5                	jne    c00138bd <VAS::allocatePages(int, int)+0xc1>
c00138d8:	e9 76 ff ff ff       	jmp    c0013853 <VAS::allocatePages(int, int)+0x57>
c00138dd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00138e1:	a1 28 14 03 c0       	mov    eax,ds:0xc0031428
c00138e6:	09 c1                	or     ecx,eax
c00138e8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00138ec:	eb b7                	jmp    c00138a5 <VAS::allocatePages(int, int)+0xa9>

c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00138ee:	55                   	push   ebp
c00138ef:	57                   	push   edi
c00138f0:	56                   	push   esi
c00138f1:	53                   	push   ebx
c00138f2:	83 ec 1c             	sub    esp,0x1c
c00138f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00138f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00138fd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0013901:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0013905:	85 db                	test   ebx,ebx
c0013907:	7e 2c                	jle    c0013935 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0013909:	c1 e3 0c             	shl    ebx,0xc
c001390c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001390f:	89 f3                	mov    ebx,esi
c0013911:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013915:	55                   	push   ebp
c0013916:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001391a:	29 f2                	sub    edx,esi
c001391c:	01 da                	add    edx,ebx
c001391e:	52                   	push   edx
c001391f:	53                   	push   ebx
c0013920:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013926:	57                   	push   edi
c0013927:	e8 c8 fd ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001392c:	83 c4 10             	add    esp,0x10
c001392f:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0013933:	75 e0                	jne    c0013915 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0013935:	0f 20 d8             	mov    eax,cr3
c0013938:	0f 22 d8             	mov    cr3,eax
c001393b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001393f:	83 c4 1c             	add    esp,0x1c
c0013942:	5b                   	pop    ebx
c0013943:	5e                   	pop    esi
c0013944:	5f                   	pop    edi
c0013945:	5d                   	pop    ebp
c0013946:	c3                   	ret    
c0013947:	90                   	nop

c0013948 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013948:	55                   	push   ebp
c0013949:	57                   	push   edi
c001394a:	56                   	push   esi
c001394b:	53                   	push   ebx
c001394c:	83 ec 1c             	sub    esp,0x1c
c001394f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013953:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013957:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001395b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001395f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013963:	09 d8                	or     eax,ebx
c0013965:	a9 ff 0f 00 00       	test   eax,0xfff
c001396a:	75 4b                	jne    c00139b7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001396c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001396f:	89 de                	mov    esi,ebx
c0013971:	c1 ee 16             	shr    esi,0x16
c0013974:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c001397b:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c001397f:	74 48                	je     c00139c9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0013981:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0013986:	c1 eb 0a             	shr    ebx,0xa
c0013989:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001398d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013991:	83 ff 01             	cmp    edi,0x1
c0013994:	19 c0                	sbb    eax,eax
c0013996:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001399c:	c1 e6 0c             	shl    esi,0xc
c001399f:	25 00 00 c0 ff       	and    eax,0xffc00000
c00139a4:	01 f3                	add    ebx,esi
c00139a6:	09 ca                	or     edx,ecx
c00139a8:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c00139af:	83 c4 1c             	add    esp,0x1c
c00139b2:	5b                   	pop    ebx
c00139b3:	5e                   	pop    esi
c00139b4:	5f                   	pop    edi
c00139b5:	5d                   	pop    ebp
c00139b6:	c3                   	ret    
c00139b7:	83 ec 0c             	sub    esp,0xc
c00139ba:	68 04 83 02 c0       	push   0xc0028304
c00139bf:	e8 10 c1 ff ff       	call   c000fad4 <KePanic(char const*)>
c00139c4:	83 c4 10             	add    esp,0x10
c00139c7:	eb a3                	jmp    c001396c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00139c9:	e8 00 c3 ff ff       	call   c000fcce <Phys::allocatePage()>
c00139ce:	8b 0d 90 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031290
c00139d4:	83 ec 0c             	sub    esp,0xc
c00139d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00139db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139df:	6a 01                	push   0x1
c00139e1:	e8 35 f6 ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c00139e6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00139ed:	6a 01                	push   0x1
c00139ef:	50                   	push   eax
c00139f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139f4:	50                   	push   eax
c00139f5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00139f9:	51                   	push   ecx
c00139fa:	e8 ef fe ff ff       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00139ff:	83 c4 1c             	add    esp,0x1c
c0013a02:	68 00 10 00 00       	push   0x1000
c0013a07:	6a 00                	push   0x0
c0013a09:	50                   	push   eax
c0013a0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013a0e:	e8 dd ca fe ff       	call   c00004f0 <memset>
c0013a13:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013a17:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013a1a:	e8 fa f8 ff ff       	call   c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013a23:	83 c4 10             	add    esp,0x10
c0013a26:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013a29:	81 ca 07 04 00 00    	or     edx,0x407
c0013a2f:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0013a32:	e9 4a ff ff ff       	jmp    c0013981 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0013a37:	90                   	nop

c0013a38 <VAS::VAS(bool)>:
c0013a38:	53                   	push   ebx
c0013a39:	83 ec 28             	sub    esp,0x28
c0013a3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a40:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013a44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a53:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013a5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a5e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013a62:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013a65:	e8 64 c2 ff ff       	call   c000fcce <Phys::allocatePage()>
c0013a6a:	89 c2                	mov    edx,eax
c0013a6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a70:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013a73:	8b 1d 90 12 03 c0    	mov    ebx,DWORD PTR ds:0xc0031290
c0013a79:	83 ec 0c             	sub    esp,0xc
c0013a7c:	6a 01                	push   0x1
c0013a7e:	e8 98 f5 ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	89 c2                	mov    edx,eax
c0013a88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a8c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a8f:	83 ec 0c             	sub    esp,0xc
c0013a92:	6a 03                	push   0x3
c0013a94:	6a 01                	push   0x1
c0013a96:	52                   	push   edx
c0013a97:	50                   	push   eax
c0013a98:	53                   	push   ebx
c0013a99:	e8 50 fe ff ff       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013a9e:	83 c4 20             	add    esp,0x20
c0013aa1:	89 c2                	mov    edx,eax
c0013aa3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013aa7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013aaa:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ab2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013aba:	7f 1d                	jg     c0013ad9 <VAS::VAS(bool)+0xa1>
c0013abc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ac0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ac3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013ac7:	c1 e2 02             	shl    edx,0x2
c0013aca:	01 d0                	add    eax,edx
c0013acc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013ad2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013ad7:	eb d9                	jmp    c0013ab2 <VAS::VAS(bool)+0x7a>
c0013ad9:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013ae1:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013ae9:	7f 59                	jg     c0013b44 <VAS::VAS(bool)+0x10c>
c0013aeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013aef:	2d 00 02 00 00       	sub    eax,0x200
c0013af4:	c1 e0 0c             	shl    eax,0xc
c0013af7:	89 c2                	mov    edx,eax
c0013af9:	a1 28 14 03 c0       	mov    eax,ds:0xc0031428
c0013afe:	89 d1                	mov    ecx,edx
c0013b00:	09 c1                	or     ecx,eax
c0013b02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b0d:	c1 e2 02             	shl    edx,0x2
c0013b10:	01 d0                	add    eax,edx
c0013b12:	83 c9 05             	or     ecx,0x5
c0013b15:	89 ca                	mov    edx,ecx
c0013b17:	89 10                	mov    DWORD PTR [eax],edx
c0013b19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b1d:	2d 40 03 00 00       	sub    eax,0x340
c0013b22:	83 f8 7f             	cmp    eax,0x7f
c0013b25:	77 16                	ja     c0013b3d <VAS::VAS(bool)+0x105>
c0013b27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b2b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b2e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b32:	c1 e2 02             	shl    edx,0x2
c0013b35:	01 d0                	add    eax,edx
c0013b37:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013b3d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013b42:	eb 9d                	jmp    c0013ae1 <VAS::VAS(bool)+0xa9>
c0013b44:	8b 15 28 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031428
c0013b4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b51:	05 20 0c 00 00       	add    eax,0xc20
c0013b56:	81 ca 03 40 00 00    	or     edx,0x4003
c0013b5c:	89 10                	mov    DWORD PTR [eax],edx
c0013b5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b62:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013b65:	a1 28 14 03 c0       	mov    eax,ds:0xc0031428
c0013b6a:	09 c2                	or     edx,eax
c0013b6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013b73:	05 fc 0f 00 00       	add    eax,0xffc
c0013b78:	83 ca 03             	or     edx,0x3
c0013b7b:	89 10                	mov    DWORD PTR [eax],edx
c0013b7d:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0013b82:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013b88:	83 ec 0c             	sub    esp,0xc
c0013b8b:	50                   	push   eax
c0013b8c:	e8 c3 60 ff ff       	call   c0009c54 <Device::getName()>
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	83 ec 08             	sub    esp,0x8
c0013b97:	68 77 85 02 c0       	push   0xc0028577
c0013b9c:	50                   	push   eax
c0013b9d:	e8 de cb fe ff       	call   c0000780 <strcmp>
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	85 c0                	test   eax,eax
c0013ba7:	0f 94 c0             	sete   al
c0013baa:	0f b6 c0             	movzx  eax,al
c0013bad:	85 c0                	test   eax,eax
c0013baf:	74 68                	je     c0013c19 <VAS::VAS(bool)+0x1e1>
c0013bb1:	fa                   	cli    
c0013bb2:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0013bb7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013bbd:	05 68 09 00 00       	add    eax,0x968
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	50                   	push   eax
c0013bc6:	e8 93 ae ff ff       	call   c000ea5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013bd3:	89 c3                	mov    ebx,eax
c0013bd5:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0013bda:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0013be0:	05 68 09 00 00       	add    eax,0x968
c0013be5:	83 ec 0c             	sub    esp,0xc
c0013be8:	50                   	push   eax
c0013be9:	e8 70 ae ff ff       	call   c000ea5e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013bee:	83 c4 10             	add    esp,0x10
c0013bf1:	83 ec 08             	sub    esp,0x8
c0013bf4:	50                   	push   eax
c0013bf5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013bf9:	e8 fc f6 ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c0013bfe:	83 c4 10             	add    esp,0x10
c0013c01:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c03:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013c08:	6a 11                	push   0x11
c0013c0a:	53                   	push   ebx
c0013c0b:	50                   	push   eax
c0013c0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013c10:	e8 df fa ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c15:	83 c4 10             	add    esp,0x10
c0013c18:	fb                   	sti    
c0013c19:	90                   	nop
c0013c1a:	83 c4 28             	add    esp,0x28
c0013c1d:	5b                   	pop    ebx
c0013c1e:	c3                   	ret    
c0013c1f:	90                   	nop

c0013c20 <VAS::evict(unsigned long)>:
c0013c20:	55                   	push   ebp
c0013c21:	57                   	push   edi
c0013c22:	56                   	push   esi
c0013c23:	53                   	push   ebx
c0013c24:	83 ec 24             	sub    esp,0x24
c0013c27:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013c2b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013c2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c33:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0013c38:	50                   	push   eax
c0013c39:	68 85 85 02 c0       	push   0xc0028585
c0013c3e:	e8 23 33 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013c43:	e8 28 f5 ff ff       	call   c0013170 <Virt::allocateSwapfilePage()>
c0013c48:	83 c4 10             	add    esp,0x10
c0013c4b:	89 c7                	mov    edi,eax
c0013c4d:	a1 4c b4 02 c0       	mov    eax,ds:0xc002b44c
c0013c52:	85 c0                	test   eax,eax
c0013c54:	7e 40                	jle    c0013c96 <VAS::evict(unsigned long)+0x76>
c0013c56:	89 ee                	mov    esi,ebp
c0013c58:	31 db                	xor    ebx,ebx
c0013c5a:	83 ec 0c             	sub    esp,0xc
c0013c5d:	57                   	push   edi
c0013c5e:	e8 f7 f4 ff ff       	call   c001315a <Virt::swapIDToSector(unsigned long)>
c0013c63:	31 d2                	xor    edx,edx
c0013c65:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c68:	81 c6 00 02 00 00    	add    esi,0x200
c0013c6e:	6a 01                	push   0x1
c0013c70:	52                   	push   edx
c0013c71:	01 d8                	add    eax,ebx
c0013c73:	83 c3 01             	add    ebx,0x1
c0013c76:	50                   	push   eax
c0013c77:	0f be 05 58 b4 02 c0 	movsx  eax,BYTE PTR ds:0xc002b458
c0013c7e:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c0013c85:	50                   	push   eax
c0013c86:	e8 f7 6d ff ff       	call   c000aa82 <LogicalDisk::write(unsigned long long, int, void*)>
c0013c8b:	83 c4 20             	add    esp,0x20
c0013c8e:	39 1d 4c b4 02 c0    	cmp    DWORD PTR ds:0xc002b44c,ebx
c0013c94:	7f c4                	jg     c0013c5a <VAS::evict(unsigned long)+0x3a>
c0013c96:	c1 e7 0c             	shl    edi,0xc
c0013c99:	83 ec 08             	sub    esp,0x8
c0013c9c:	55                   	push   ebp
c0013c9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ca1:	50                   	push   eax
c0013ca2:	e8 53 f6 ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c0013ca7:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ca9:	89 d3                	mov    ebx,edx
c0013cab:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0013cb1:	09 d7                	or     edi,edx
c0013cb3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013cb9:	89 38                	mov    DWORD PTR [eax],edi
c0013cbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cbe:	8b 15 88 12 03 c0    	mov    edx,DWORD PTR ds:0xc0031288
c0013cc4:	83 c2 01             	add    edx,0x1
c0013cc7:	89 15 88 12 03 c0    	mov    DWORD PTR ds:0xc0031288,edx
c0013ccd:	e8 93 bf ff ff       	call   c000fc65 <Phys::freePage(unsigned long)>
c0013cd2:	0f 20 d8             	mov    eax,cr3
c0013cd5:	0f 22 d8             	mov    cr3,eax
c0013cd8:	8b 0d 88 12 03 c0    	mov    ecx,DWORD PTR ds:0xc0031288
c0013cde:	51                   	push   ecx
c0013cdf:	55                   	push   ebp
c0013ce0:	53                   	push   ebx
c0013ce1:	68 28 83 02 c0       	push   0xc0028328
c0013ce6:	e8 7b 32 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013ceb:	a1 84 12 03 c0       	mov    eax,ds:0xc0031284
c0013cf0:	83 c4 18             	add    esp,0x18
c0013cf3:	50                   	push   eax
c0013cf4:	68 9a 85 02 c0       	push   0xc002859a
c0013cf9:	8d 50 01             	lea    edx,[eax+0x1]
c0013cfc:	89 15 84 12 03 c0    	mov    DWORD PTR ds:0xc0031284,edx
c0013d02:	e8 5f 32 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013d07:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0013d0c:	c7 44 24 40 ac 85 02 c0 	mov    DWORD PTR [esp+0x40],0xc00285ac
c0013d14:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013d18:	83 c4 2c             	add    esp,0x2c
c0013d1b:	5b                   	pop    ebx
c0013d1c:	5e                   	pop    esi
c0013d1d:	5f                   	pop    edi
c0013d1e:	5d                   	pop    ebp
c0013d1f:	e9 42 32 ff ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>

c0013d24 <VAS::canLockPage(unsigned long)>:
c0013d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d28:	50                   	push   eax
c0013d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013d2d:	52                   	push   edx
c0013d2e:	e8 c7 f5 ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c0013d33:	59                   	pop    ecx
c0013d34:	5a                   	pop    edx
c0013d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d37:	c1 e8 0b             	shr    eax,0xb
c0013d3a:	83 e0 01             	and    eax,0x1
c0013d3d:	c3                   	ret    

c0013d3e <VAS::unlockPage(unsigned long)>:
c0013d3e:	83 ec 0c             	sub    esp,0xc
c0013d41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d45:	50                   	push   eax
c0013d46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d4a:	52                   	push   edx
c0013d4b:	e8 aa f5 ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c0013d50:	59                   	pop    ecx
c0013d51:	5a                   	pop    edx
c0013d52:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d54:	f6 c6 08             	test   dh,0x8
c0013d57:	75 09                	jne    c0013d62 <VAS::unlockPage(unsigned long)+0x24>
c0013d59:	80 ce 08             	or     dh,0x8
c0013d5c:	89 10                	mov    DWORD PTR [eax],edx
c0013d5e:	83 c4 0c             	add    esp,0xc
c0013d61:	c3                   	ret    
c0013d62:	c7 44 24 10 5c 83 02 c0 	mov    DWORD PTR [esp+0x10],0xc002835c
c0013d6a:	83 c4 0c             	add    esp,0xc
c0013d6d:	e9 62 bd ff ff       	jmp    c000fad4 <KePanic(char const*)>

c0013d72 <VAS::canLockPages(unsigned long, int)>:
c0013d72:	55                   	push   ebp
c0013d73:	57                   	push   edi
c0013d74:	56                   	push   esi
c0013d75:	53                   	push   ebx
c0013d76:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013d7a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013d7e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d82:	85 ff                	test   edi,edi
c0013d84:	7e 23                	jle    c0013da9 <VAS::canLockPages(unsigned long, int)+0x37>
c0013d86:	31 f6                	xor    esi,esi
c0013d88:	eb 0d                	jmp    c0013d97 <VAS::canLockPages(unsigned long, int)+0x25>
c0013d8a:	83 c6 01             	add    esi,0x1
c0013d8d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d93:	39 f7                	cmp    edi,esi
c0013d95:	74 0d                	je     c0013da4 <VAS::canLockPages(unsigned long, int)+0x32>
c0013d97:	53                   	push   ebx
c0013d98:	55                   	push   ebp
c0013d99:	e8 86 ff ff ff       	call   c0013d24 <VAS::canLockPage(unsigned long)>
c0013d9e:	5a                   	pop    edx
c0013d9f:	59                   	pop    ecx
c0013da0:	84 c0                	test   al,al
c0013da2:	75 e6                	jne    c0013d8a <VAS::canLockPages(unsigned long, int)+0x18>
c0013da4:	5b                   	pop    ebx
c0013da5:	5e                   	pop    esi
c0013da6:	5f                   	pop    edi
c0013da7:	5d                   	pop    ebp
c0013da8:	c3                   	ret    
c0013da9:	b0 01                	mov    al,0x1
c0013dab:	eb f7                	jmp    c0013da4 <VAS::canLockPages(unsigned long, int)+0x32>
c0013dad:	90                   	nop

c0013dae <VAS::unlockPages(unsigned long, int)>:
c0013dae:	55                   	push   ebp
c0013daf:	57                   	push   edi
c0013db0:	56                   	push   esi
c0013db1:	53                   	push   ebx
c0013db2:	83 ec 0c             	sub    esp,0xc
c0013db5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013db9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013dbd:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013dc1:	85 ff                	test   edi,edi
c0013dc3:	7e 1c                	jle    c0013de1 <VAS::unlockPages(unsigned long, int)+0x33>
c0013dc5:	31 f6                	xor    esi,esi
c0013dc7:	83 ec 08             	sub    esp,0x8
c0013dca:	83 c6 01             	add    esi,0x1
c0013dcd:	53                   	push   ebx
c0013dce:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013dd4:	55                   	push   ebp
c0013dd5:	e8 64 ff ff ff       	call   c0013d3e <VAS::unlockPage(unsigned long)>
c0013dda:	83 c4 10             	add    esp,0x10
c0013ddd:	39 f7                	cmp    edi,esi
c0013ddf:	75 e6                	jne    c0013dc7 <VAS::unlockPages(unsigned long, int)+0x19>
c0013de1:	83 c4 0c             	add    esp,0xc
c0013de4:	5b                   	pop    ebx
c0013de5:	5e                   	pop    esi
c0013de6:	5f                   	pop    edi
c0013de7:	5d                   	pop    ebp
c0013de8:	c3                   	ret    
c0013de9:	90                   	nop

c0013dea <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013dea:	55                   	push   ebp
c0013deb:	57                   	push   edi
c0013dec:	56                   	push   esi
c0013ded:	53                   	push   ebx
c0013dee:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0013df4:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0013dfb:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0013e01:	77 6f                	ja     c0013e72 <VAS::tryLoadBackOffDisk(unsigned long)+0x88>
c0013e03:	83 ec 08             	sub    esp,0x8
c0013e06:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0013e0c:	53                   	push   ebx
c0013e0d:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0013e14:	57                   	push   edi
c0013e15:	e8 e0 f4 ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c0013e1a:	83 c4 10             	add    esp,0x10
c0013e1d:	85 c0                	test   eax,eax
c0013e1f:	89 c5                	mov    ebp,eax
c0013e21:	0f 95 c0             	setne  al
c0013e24:	85 db                	test   ebx,ebx
c0013e26:	0f 95 c2             	setne  dl
c0013e29:	21 d0                	and    eax,edx
c0013e2b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0013e2f:	a8 01                	test   al,0x1
c0013e31:	75 0f                	jne    c0013e42 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0013e33:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013e37:	81 c4 1c 10 00 00    	add    esp,0x101c
c0013e3d:	5b                   	pop    ebx
c0013e3e:	5e                   	pop    esi
c0013e3f:	5f                   	pop    edi
c0013e40:	5d                   	pop    ebp
c0013e41:	c3                   	ret    
c0013e42:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e45:	f6 c4 02             	test   ah,0x2
c0013e48:	75 3d                	jne    c0013e87 <VAS::tryLoadBackOffDisk(unsigned long)+0x9d>
c0013e4a:	89 c1                	mov    ecx,eax
c0013e4c:	81 e1 01 04 00 00    	and    ecx,0x401
c0013e52:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0013e58:	0f 84 91 00 00 00    	je     c0013eef <VAS::tryLoadBackOffDisk(unsigned long)+0x105>
c0013e5e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0013e63:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0013e67:	81 c4 1c 10 00 00    	add    esp,0x101c
c0013e6d:	5b                   	pop    ebx
c0013e6e:	5e                   	pop    esi
c0013e6f:	5f                   	pop    edi
c0013e70:	5d                   	pop    ebp
c0013e71:	c3                   	ret    
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	68 c1 85 02 c0       	push   0xc00285c1
c0013e7a:	e8 55 bc ff ff       	call   c000fad4 <KePanic(char const*)>
c0013e7f:	83 c4 10             	add    esp,0x10
c0013e82:	e9 7c ff ff ff       	jmp    c0013e03 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0013e87:	83 ec 0c             	sub    esp,0xc
c0013e8a:	68 8c 83 02 c0       	push   0xc002838c
c0013e8f:	e8 d2 30 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013e94:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0013e97:	e8 32 be ff ff       	call   c000fcce <Phys::allocatePage()>
c0013e9c:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0013ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ea6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ea9:	83 c8 01             	or     eax,0x1
c0013eac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013eaf:	0f 20 d8             	mov    eax,cr3
c0013eb2:	0f 22 d8             	mov    cr3,eax
c0013eb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013eb9:	b8 00 10 00 00       	mov    eax,0x1000
c0013ebe:	89 d7                	mov    edi,edx
c0013ec0:	89 c1                	mov    ecx,eax
c0013ec2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ec4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ec7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ecb:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0013ed1:	09 f1                	or     ecx,esi
c0013ed3:	83 c9 02             	or     ecx,0x2
c0013ed6:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013ed9:	0f 20 d9             	mov    ecx,cr3
c0013edc:	0f 22 d9             	mov    cr3,ecx
c0013edf:	89 d6                	mov    esi,edx
c0013ee1:	89 df                	mov    edi,ebx
c0013ee3:	89 c1                	mov    ecx,eax
c0013ee5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ee7:	83 c4 10             	add    esp,0x10
c0013eea:	e9 44 ff ff ff       	jmp    c0013e33 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>
c0013eef:	c1 e8 0c             	shr    eax,0xc
c0013ef2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ef6:	e8 d3 bd ff ff       	call   c000fcce <Phys::allocatePage()>
c0013efb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013efe:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0013f04:	09 c1                	or     ecx,eax
c0013f06:	81 c9 01 08 00 00    	or     ecx,0x801
c0013f0c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013f0f:	a1 4c b4 02 c0       	mov    eax,ds:0xc002b44c
c0013f14:	85 c0                	test   eax,eax
c0013f16:	7e 51                	jle    c0013f69 <VAS::tryLoadBackOffDisk(unsigned long)+0x17f>
c0013f18:	89 dd                	mov    ebp,ebx
c0013f1a:	31 f6                	xor    esi,esi
c0013f1c:	83 ec 08             	sub    esp,0x8
c0013f1f:	55                   	push   ebp
c0013f20:	68 d3 85 02 c0       	push   0xc00285d3
c0013f25:	e8 3c 30 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013f2a:	59                   	pop    ecx
c0013f2b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f2f:	57                   	push   edi
c0013f30:	e8 25 f2 ff ff       	call   c001315a <Virt::swapIDToSector(unsigned long)>
c0013f35:	31 d2                	xor    edx,edx
c0013f37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013f3a:	81 c5 00 02 00 00    	add    ebp,0x200
c0013f40:	6a 01                	push   0x1
c0013f42:	52                   	push   edx
c0013f43:	8d 3c 06             	lea    edi,[esi+eax*1]
c0013f46:	0f be 05 58 b4 02 c0 	movsx  eax,BYTE PTR ds:0xc002b458
c0013f4d:	83 c6 01             	add    esi,0x1
c0013f50:	57                   	push   edi
c0013f51:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c0013f58:	50                   	push   eax
c0013f59:	e8 b8 6a ff ff       	call   c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>
c0013f5e:	83 c4 20             	add    esp,0x20
c0013f61:	39 35 4c b4 02 c0    	cmp    DWORD PTR ds:0xc002b44c,esi
c0013f67:	7f b3                	jg     c0013f1c <VAS::tryLoadBackOffDisk(unsigned long)+0x132>
c0013f69:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c0013f6e:	83 ec 04             	sub    esp,0x4
c0013f71:	83 e8 01             	sub    eax,0x1
c0013f74:	50                   	push   eax
c0013f75:	53                   	push   ebx
c0013f76:	68 ec 85 02 c0       	push   0xc00285ec
c0013f7b:	a3 88 12 03 c0       	mov    ds:0xc0031288,eax
c0013f80:	e8 e1 2f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0013f85:	58                   	pop    eax
c0013f86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f8a:	52                   	push   edx
c0013f8b:	e8 a7 f1 ff ff       	call   c0013137 <Virt::freeSwapfilePage(unsigned long)>
c0013f90:	0f 20 d8             	mov    eax,cr3
c0013f93:	0f 22 d8             	mov    cr3,eax
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	e9 95 fe ff ff       	jmp    c0013e33 <VAS::tryLoadBackOffDisk(unsigned long)+0x49>

c0013f9e <VAS::lockPage(unsigned long)>:
c0013f9e:	56                   	push   esi
c0013f9f:	53                   	push   ebx
c0013fa0:	83 ec 04             	sub    esp,0x4
c0013fa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fab:	50                   	push   eax
c0013fac:	56                   	push   esi
c0013fad:	e8 48 f3 ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c0013fb2:	5a                   	pop    edx
c0013fb3:	59                   	pop    ecx
c0013fb4:	89 c3                	mov    ebx,eax
c0013fb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013fb8:	a8 01                	test   al,0x1
c0013fba:	74 10                	je     c0013fcc <VAS::lockPage(unsigned long)+0x2e>
c0013fbc:	f6 c4 08             	test   ah,0x8
c0013fbf:	74 28                	je     c0013fe9 <VAS::lockPage(unsigned long)+0x4b>
c0013fc1:	80 e4 f7             	and    ah,0xf7
c0013fc4:	89 03                	mov    DWORD PTR [ebx],eax
c0013fc6:	83 c4 04             	add    esp,0x4
c0013fc9:	5b                   	pop    ebx
c0013fca:	5e                   	pop    esi
c0013fcb:	c3                   	ret    
c0013fcc:	83 ec 08             	sub    esp,0x8
c0013fcf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013fd4:	50                   	push   eax
c0013fd5:	56                   	push   esi
c0013fd6:	e8 0f fe ff ff       	call   c0013dea <VAS::tryLoadBackOffDisk(unsigned long)>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	84 c0                	test   al,al
c0013fe0:	74 19                	je     c0013ffb <VAS::lockPage(unsigned long)+0x5d>
c0013fe2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fe4:	f6 c4 08             	test   ah,0x8
c0013fe7:	75 d8                	jne    c0013fc1 <VAS::lockPage(unsigned long)+0x23>
c0013fe9:	c7 44 24 10 5c 83 02 c0 	mov    DWORD PTR [esp+0x10],0xc002835c
c0013ff1:	83 c4 04             	add    esp,0x4
c0013ff4:	5b                   	pop    ebx
c0013ff5:	5e                   	pop    esi
c0013ff6:	e9 d9 ba ff ff       	jmp    c000fad4 <KePanic(char const*)>
c0013ffb:	83 ec 0c             	sub    esp,0xc
c0013ffe:	68 ac 83 02 c0       	push   0xc00283ac
c0014003:	e8 cc ba ff ff       	call   c000fad4 <KePanic(char const*)>
c0014008:	8b 03                	mov    eax,DWORD PTR [ebx]
c001400a:	83 c4 10             	add    esp,0x10
c001400d:	eb ad                	jmp    c0013fbc <VAS::lockPage(unsigned long)+0x1e>
c001400f:	90                   	nop

c0014010 <VAS::lockPages(unsigned long, int)>:
c0014010:	55                   	push   ebp
c0014011:	57                   	push   edi
c0014012:	56                   	push   esi
c0014013:	53                   	push   ebx
c0014014:	83 ec 0c             	sub    esp,0xc
c0014017:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001401b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001401f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014023:	85 ff                	test   edi,edi
c0014025:	7e 1c                	jle    c0014043 <VAS::lockPages(unsigned long, int)+0x33>
c0014027:	31 f6                	xor    esi,esi
c0014029:	83 ec 08             	sub    esp,0x8
c001402c:	83 c6 01             	add    esi,0x1
c001402f:	53                   	push   ebx
c0014030:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014036:	55                   	push   ebp
c0014037:	e8 62 ff ff ff       	call   c0013f9e <VAS::lockPage(unsigned long)>
c001403c:	83 c4 10             	add    esp,0x10
c001403f:	39 f7                	cmp    edi,esi
c0014041:	75 e6                	jne    c0014029 <VAS::lockPages(unsigned long, int)+0x19>
c0014043:	83 c4 0c             	add    esp,0xc
c0014046:	5b                   	pop    ebx
c0014047:	5e                   	pop    esi
c0014048:	5f                   	pop    edi
c0014049:	5d                   	pop    ebp
c001404a:	c3                   	ret    
c001404b:	90                   	nop

c001404c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c001404c:	55                   	push   ebp
c001404d:	57                   	push   edi
c001404e:	56                   	push   esi
c001404f:	53                   	push   ebx
c0014050:	83 ec 28             	sub    esp,0x28
c0014053:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014057:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001405b:	50                   	push   eax
c001405c:	e8 ba ef ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c0014061:	83 c4 0c             	add    esp,0xc
c0014064:	6a 07                	push   0x7
c0014066:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001406a:	52                   	push   edx
c001406b:	89 c5                	mov    ebp,eax
c001406d:	53                   	push   ebx
c001406e:	e8 89 f7 ff ff       	call   c00137fc <VAS::allocatePages(int, int)>
c0014073:	83 c4 10             	add    esp,0x10
c0014076:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001407a:	89 c7                	mov    edi,eax
c001407c:	85 c9                	test   ecx,ecx
c001407e:	74 2f                	je     c00140af <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014080:	31 f6                	xor    esi,esi
c0014082:	e8 47 bc ff ff       	call   c000fcce <Phys::allocatePage()>
c0014087:	83 c6 01             	add    esi,0x1
c001408a:	6a 03                	push   0x3
c001408c:	55                   	push   ebp
c001408d:	50                   	push   eax
c001408e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014092:	53                   	push   ebx
c0014093:	e8 5c f6 ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014098:	6a 07                	push   0x7
c001409a:	57                   	push   edi
c001409b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001409f:	50                   	push   eax
c00140a0:	53                   	push   ebx
c00140a1:	e8 4e f6 ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00140a6:	83 c4 20             	add    esp,0x20
c00140a9:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c00140ad:	75 d3                	jne    c0014082 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00140af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00140b3:	89 28                	mov    DWORD PTR [eax],ebp
c00140b5:	83 c4 1c             	add    esp,0x1c
c00140b8:	89 f8                	mov    eax,edi
c00140ba:	5b                   	pop    ebx
c00140bb:	5e                   	pop    esi
c00140bc:	5f                   	pop    edi
c00140bd:	5d                   	pop    ebp
c00140be:	c3                   	ret    
c00140bf:	90                   	nop

c00140c0 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00140c0:	53                   	push   ebx
c00140c1:	83 ec 14             	sub    esp,0x14
c00140c4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00140c8:	68 dc 83 02 c0       	push   0xc00283dc
c00140cd:	e8 94 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00140d2:	c7 04 24 3c 84 02 c0 	mov    DWORD PTR [esp],0xc002843c
c00140d9:	e8 88 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00140de:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00140e2:	83 c4 18             	add    esp,0x18
c00140e5:	5b                   	pop    ebx
c00140e6:	e9 2e f2 ff ff       	jmp    c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c00140eb:	90                   	nop

c00140ec <VAS::scanForEviction()>:
c00140ec:	57                   	push   edi
c00140ed:	56                   	push   esi
c00140ee:	31 f6                	xor    esi,esi
c00140f0:	53                   	push   ebx
c00140f1:	83 ec 18             	sub    esp,0x18
c00140f4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00140f9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00140fd:	50                   	push   eax
c00140fe:	68 b8 84 02 c0       	push   0xc00284b8
c0014103:	e8 5e 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014108:	c7 04 24 01 86 02 c0 	mov    DWORD PTR [esp],0xc0028601
c001410f:	e8 52 2e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014114:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014117:	83 c4 10             	add    esp,0x10
c001411a:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0014120:	75 0e                	jne    c0014130 <VAS::scanForEviction()+0x44>
c0014122:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014125:	89 da                	mov    edx,ebx
c0014127:	c1 ea 16             	shr    edx,0x16
c001412a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001412e:	74 5b                	je     c001418b <VAS::scanForEviction()+0x9f>
c0014130:	83 ec 08             	sub    esp,0x8
c0014133:	53                   	push   ebx
c0014134:	57                   	push   edi
c0014135:	e8 c0 f1 ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c001413a:	83 c4 10             	add    esp,0x10
c001413d:	8b 10                	mov    edx,DWORD PTR [eax]
c001413f:	89 d1                	mov    ecx,edx
c0014141:	c1 e9 0c             	shr    ecx,0xc
c0014144:	74 10                	je     c0014156 <VAS::scanForEviction()+0x6a>
c0014146:	89 d1                	mov    ecx,edx
c0014148:	81 e1 00 0c 00 00    	and    ecx,0xc00
c001414e:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0014154:	74 40                	je     c0014196 <VAS::scanForEviction()+0xaa>
c0014156:	81 c3 00 10 00 00    	add    ebx,0x1000
c001415c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014162:	76 2d                	jbe    c0014191 <VAS::scanForEviction()+0xa5>
c0014164:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c001416b:	83 c6 01             	add    esi,0x1
c001416e:	83 fe 03             	cmp    esi,0x3
c0014171:	74 37                	je     c00141aa <VAS::scanForEviction()+0xbe>
c0014173:	31 db                	xor    ebx,ebx
c0014175:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001417b:	75 b3                	jne    c0014130 <VAS::scanForEviction()+0x44>
c001417d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014180:	89 da                	mov    edx,ebx
c0014182:	c1 ea 16             	shr    edx,0x16
c0014185:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014189:	75 a5                	jne    c0014130 <VAS::scanForEviction()+0x44>
c001418b:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014191:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014194:	eb 84                	jmp    c001411a <VAS::scanForEviction()+0x2e>
c0014196:	f6 c2 01             	test   dl,0x1
c0014199:	74 bb                	je     c0014156 <VAS::scanForEviction()+0x6a>
c001419b:	f6 c2 20             	test   dl,0x20
c001419e:	74 13                	je     c00141b3 <VAS::scanForEviction()+0xc7>
c00141a0:	83 e2 df             	and    edx,0xffffffdf
c00141a3:	89 10                	mov    DWORD PTR [eax],edx
c00141a5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00141a8:	eb ac                	jmp    c0014156 <VAS::scanForEviction()+0x6a>
c00141aa:	83 c4 10             	add    esp,0x10
c00141ad:	31 c0                	xor    eax,eax
c00141af:	5b                   	pop    ebx
c00141b0:	5e                   	pop    esi
c00141b1:	5f                   	pop    edi
c00141b2:	c3                   	ret    
c00141b3:	89 d0                	mov    eax,edx
c00141b5:	83 ec 08             	sub    esp,0x8
c00141b8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141c1:	53                   	push   ebx
c00141c2:	68 1d 86 02 c0       	push   0xc002861d
c00141c7:	e8 9a 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141cc:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00141cf:	58                   	pop    eax
c00141d0:	5a                   	pop    edx
c00141d1:	51                   	push   ecx
c00141d2:	57                   	push   edi
c00141d3:	e8 48 fa ff ff       	call   c0013c20 <VAS::evict(unsigned long)>
c00141d8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00141db:	5b                   	pop    ebx
c00141dc:	5e                   	pop    esi
c00141dd:	50                   	push   eax
c00141de:	68 31 86 02 c0       	push   0xc0028631
c00141e3:	e8 7e 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141e8:	58                   	pop    eax
c00141e9:	5a                   	pop    edx
c00141ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141ee:	50                   	push   eax
c00141ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00141f3:	68 44 86 02 c0       	push   0xc0028644
c00141f8:	e8 69 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00141fd:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014200:	81 c1 00 10 00 00    	add    ecx,0x1000
c0014206:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014209:	8b 3d 30 13 03 c0    	mov    edi,DWORD PTR ds:0xc0031330
c001420f:	5b                   	pop    ebx
c0014210:	5e                   	pop    esi
c0014211:	57                   	push   edi
c0014212:	68 d8 84 02 c0       	push   0xc00284d8
c0014217:	e8 4a 2d ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001421c:	83 c4 10             	add    esp,0x10
c001421f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014223:	83 c4 10             	add    esp,0x10
c0014226:	5b                   	pop    ebx
c0014227:	5e                   	pop    esi
c0014228:	5f                   	pop    edi
c0014229:	c3                   	ret    

c001422a <mapVASFirstTime>:
c001422a:	55                   	push   ebp
c001422b:	57                   	push   edi
c001422c:	56                   	push   esi
c001422d:	53                   	push   ebx
c001422e:	83 ec 0c             	sub    esp,0xc
c0014231:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014236:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014239:	83 fa 01             	cmp    edx,0x1
c001423c:	0f 84 cb 00 00 00    	je     c001430d <mapVASFirstTime+0xe3>
c0014242:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014245:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001424a:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001424f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0014252:	8b b2 b2 05 00 00    	mov    esi,DWORD PTR [edx+0x5b2]
c0014258:	c1 e5 15             	shl    ebp,0x15
c001425b:	29 eb                	sub    ebx,ebp
c001425d:	29 ef                	sub    edi,ebp
c001425f:	e8 6a ba ff ff       	call   c000fcce <Phys::allocatePage()>
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	68 03 04 00 00       	push   0x403
c001426c:	6a 01                	push   0x1
c001426e:	53                   	push   ebx
c001426f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014275:	50                   	push   eax
c0014276:	56                   	push   esi
c0014277:	e8 72 f6 ff ff       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001427c:	83 c4 20             	add    esp,0x20
c001427f:	39 fb                	cmp    ebx,edi
c0014281:	75 dc                	jne    c001425f <mapVASFirstTime+0x35>
c0014283:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014288:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001428d:	29 eb                	sub    ebx,ebp
c001428f:	29 ef                	sub    edi,ebp
c0014291:	e8 38 ba ff ff       	call   c000fcce <Phys::allocatePage()>
c0014296:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c001429a:	83 fa 01             	cmp    edx,0x1
c001429d:	19 d2                	sbb    edx,edx
c001429f:	83 ec 0c             	sub    esp,0xc
c00142a2:	83 e2 04             	and    edx,0x4
c00142a5:	81 c2 03 04 00 00    	add    edx,0x403
c00142ab:	52                   	push   edx
c00142ac:	6a 01                	push   0x1
c00142ae:	53                   	push   ebx
c00142af:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00142b5:	50                   	push   eax
c00142b6:	56                   	push   esi
c00142b7:	e8 32 f6 ff ff       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00142bc:	83 c4 20             	add    esp,0x20
c00142bf:	39 df                	cmp    edi,ebx
c00142c1:	75 ce                	jne    c0014291 <mapVASFirstTime+0x67>
c00142c3:	83 ec 0c             	sub    esp,0xc
c00142c6:	bb 7c d0 02 c0       	mov    ebx,0xc002d07c
c00142cb:	6a 04                	push   0x4
c00142cd:	81 eb 00 c0 02 c0    	sub    ebx,0xc002c000
c00142d3:	6a ff                	push   0xffffffff
c00142d5:	c1 eb 0c             	shr    ebx,0xc
c00142d8:	53                   	push   ebx
c00142d9:	68 00 c0 02 c0       	push   0xc002c000
c00142de:	56                   	push   esi
c00142df:	e8 b0 f1 ff ff       	call   c0013494 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00142e4:	83 c4 14             	add    esp,0x14
c00142e7:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c00142ec:	6a 04                	push   0x4
c00142ee:	6a ff                	push   0xffffffff
c00142f0:	53                   	push   ebx
c00142f1:	68 00 c0 02 c0       	push   0xc002c000
c00142f6:	50                   	push   eax
c00142f7:	e8 98 f1 ff ff       	call   c0013494 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00142fc:	0f 20 d8             	mov    eax,cr3
c00142ff:	0f 22 d8             	mov    cr3,eax
c0014302:	83 c4 20             	add    esp,0x20
c0014305:	83 c4 0c             	add    esp,0xc
c0014308:	5b                   	pop    ebx
c0014309:	5e                   	pop    esi
c001430a:	5f                   	pop    edi
c001430b:	5d                   	pop    ebp
c001430c:	c3                   	ret    
c001430d:	83 ec 0c             	sub    esp,0xc
c0014310:	68 51 86 02 c0       	push   0xc0028651
c0014315:	e8 4c 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001431a:	83 c4 10             	add    esp,0x10
c001431d:	83 c4 0c             	add    esp,0xc
c0014320:	5b                   	pop    ebx
c0014321:	5e                   	pop    esi
c0014322:	5f                   	pop    edi
c0014323:	5d                   	pop    ebp
c0014324:	c3                   	ret    

c0014325 <SysAlarm(regs*)>:
c0014325:	53                   	push   ebx
c0014326:	83 ec 10             	sub    esp,0x10
c0014329:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001432d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014330:	68 6a 86 02 c0       	push   0xc002866a
c0014335:	e8 2c 2c ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001433a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001433d:	83 c4 0c             	add    esp,0xc
c0014340:	31 d2                	xor    edx,edx
c0014342:	52                   	push   edx
c0014343:	50                   	push   eax
c0014344:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001434a:	e8 c5 09 00 00       	call   c0014d14 <KeAlarm(ThreadControlBlock*, unsigned long long)>
c001434f:	83 c4 18             	add    esp,0x18
c0014352:	5b                   	pop    ebx
c0014353:	c3                   	ret    

c0014354 <SysEject(regs*)>:
c0014354:	83 ec 0c             	sub    esp,0xc
c0014357:	83 ca ff             	or     edx,0xffffffff
c001435a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001435e:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014361:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014366:	83 e9 41             	sub    ecx,0x41
c0014369:	83 f9 19             	cmp    ecx,0x19
c001436c:	77 18                	ja     c0014386 <SysEject(regs*)+0x32>
c001436e:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c0014375:	85 c9                	test   ecx,ecx
c0014377:	74 0d                	je     c0014386 <SysEject(regs*)+0x32>
c0014379:	83 ec 0c             	sub    esp,0xc
c001437c:	51                   	push   ecx
c001437d:	e8 2a 66 ff ff       	call   c000a9ac <LogicalDisk::eject()>
c0014382:	83 c4 10             	add    esp,0x10
c0014385:	99                   	cdq    
c0014386:	83 c4 0c             	add    esp,0xc
c0014389:	c3                   	ret    

c001438a <SysExit(regs*)>:
c001438a:	83 ec 18             	sub    esp,0x18
c001438d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014391:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014394:	e8 a7 2a 00 00       	call   c0016e40 <KeTerminateCurrentThread(int)>
c0014399:	83 c8 ff             	or     eax,0xffffffff
c001439c:	83 c4 1c             	add    esp,0x1c
c001439f:	89 c2                	mov    edx,eax
c00143a1:	c3                   	ret    

c00143a2 <SysGetCwd(regs*)>:
c00143a2:	83 ec 10             	sub    esp,0x10
c00143a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143a9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00143ac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143b4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00143b7:	e8 4c 3a ff ff       	call   c0007e08 <Fs::getcwd(Process*, char*, int)>
c00143bc:	83 c4 1c             	add    esp,0x1c
c00143bf:	99                   	cdq    
c00143c0:	c3                   	ret    

c00143c1 <SysGetPID(regs*)>:
c00143c1:	83 ec 14             	sub    esp,0x14
c00143c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00143cc:	ff 30                	push   DWORD PTR [eax]
c00143ce:	68 7f 86 02 c0       	push   0xc002867f
c00143d3:	e8 8e 2b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00143d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00143e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00143e2:	83 c4 1c             	add    esp,0x1c
c00143e5:	99                   	cdq    
c00143e6:	c3                   	ret    

c00143e7 <SysGetRAMData(regs*)>:
c00143e7:	a1 88 12 03 c0       	mov    eax,ds:0xc0031288
c00143ec:	03 05 78 11 03 c0    	add    eax,DWORD PTR ds:0xc0031178
c00143f2:	8b 0d 7c 11 03 c0    	mov    ecx,DWORD PTR ds:0xc003117c
c00143f8:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c00143fe:	99                   	cdq    
c00143ff:	f7 f9                	idiv   ecx
c0014401:	c1 e0 18             	shl    eax,0x18
c0014404:	09 c8                	or     eax,ecx
c0014406:	99                   	cdq    
c0014407:	c3                   	ret    

c0014408 <SysGetVGAPtr(regs*)>:
c0014408:	55                   	push   ebp
c0014409:	57                   	push   edi
c001440a:	56                   	push   esi
c001440b:	53                   	push   ebx
c001440c:	83 ec 1c             	sub    esp,0x1c
c001440f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014413:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014416:	83 f8 ff             	cmp    eax,0xffffffff
c0014419:	74 23                	je     c001443e <SysGetVGAPtr(regs*)+0x36>
c001441b:	83 ec 0c             	sub    esp,0xc
c001441e:	50                   	push   eax
c001441f:	e8 d4 24 00 00       	call   c00168f8 <KeProcessFromPID(int)>
c0014424:	31 d2                	xor    edx,edx
c0014426:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001442a:	83 c4 10             	add    esp,0x10
c001442d:	b8 01 00 00 00       	mov    eax,0x1
c0014432:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014437:	75 11                	jne    c001444a <SysGetVGAPtr(regs*)+0x42>
c0014439:	e9 80 00 00 00       	jmp    c00144be <SysGetVGAPtr(regs*)+0xb6>
c001443e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014443:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014446:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001444a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001444e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014452:	8b a8 a6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5a6]
c0014458:	74 0c                	je     c0014466 <SysGetVGAPtr(regs*)+0x5e>
c001445a:	83 ec 0c             	sub    esp,0xc
c001445d:	55                   	push   ebp
c001445e:	e8 70 dc ff ff       	call   c00120d3 <setActiveTerminal(VgaText*)>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014469:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001446e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014471:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014473:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0014476:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014479:	89 88 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],ecx
c001447f:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0014482:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014485:	89 88 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],ecx
c001448b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001448f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0014492:	0f b6 80 76 02 00 00 	movzx  eax,BYTE PTR [eax+0x276]
c0014499:	c1 e8 07             	shr    eax,0x7
c001449c:	89 81 a8 0f 00 00    	mov    DWORD PTR [ecx+0xfa8],eax
c00144a2:	50                   	push   eax
c00144a3:	50                   	push   eax
c00144a4:	68 8e 86 02 c0       	push   0xc002868e
c00144a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00144ac:	05 ac 0f 00 00       	add    eax,0xfac
c00144b1:	50                   	push   eax
c00144b2:	e8 99 c1 fe ff       	call   c0000650 <strcpy>
c00144b7:	83 c4 10             	add    esp,0x10
c00144ba:	31 c0                	xor    eax,eax
c00144bc:	31 d2                	xor    edx,edx
c00144be:	83 c4 1c             	add    esp,0x1c
c00144c1:	5b                   	pop    ebx
c00144c2:	5e                   	pop    esi
c00144c3:	5f                   	pop    edi
c00144c4:	5d                   	pop    ebp
c00144c5:	c3                   	ret    
c00144c6:	66 90                	xchg   ax,ax

c00144c8 <SysKill(regs*)>:
c00144c8:	53                   	push   ebx
c00144c9:	83 ec 08             	sub    esp,0x8
c00144cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144d0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00144d4:	75 16                	jne    c00144ec <SysKill(regs*)+0x24>
c00144d6:	83 ec 0c             	sub    esp,0xc
c00144d9:	68 98 86 02 c0       	push   0xc0028698
c00144de:	e8 f1 b5 ff ff       	call   c000fad4 <KePanic(char const*)>
c00144e3:	83 c4 10             	add    esp,0x10
c00144e6:	e9 89 00 00 00       	jmp    c0014574 <SysKill(regs*)+0xac>
c00144eb:	90                   	nop
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	68 4c 13 03 c0       	push   0xc003134c
c00144f4:	e8 57 14 01 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00144f9:	8d 76 00             	lea    esi,[esi+0x0]
c00144fc:	83 c4 10             	add    esp,0x10
c00144ff:	85 c0                	test   eax,eax
c0014501:	74 19                	je     c001451c <SysKill(regs*)+0x54>
c0014503:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014506:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014509:	39 0a                	cmp    DWORD PTR [edx],ecx
c001450b:	74 33                	je     c0014540 <SysKill(regs*)+0x78>
c001450d:	52                   	push   edx
c001450e:	52                   	push   edx
c001450f:	50                   	push   eax
c0014510:	68 4c 13 03 c0       	push   0xc003134c
c0014515:	e8 42 19 01 00       	call   c0025e5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001451a:	eb e0                	jmp    c00144fc <SysKill(regs*)+0x34>
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	68 40 13 03 c0       	push   0xc0031340
c0014524:	e8 27 14 01 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014529:	8d 76 00             	lea    esi,[esi+0x0]
c001452c:	83 c4 10             	add    esp,0x10
c001452f:	85 c0                	test   eax,eax
c0014531:	74 41                	je     c0014574 <SysKill(regs*)+0xac>
c0014533:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014536:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014539:	39 0a                	cmp    DWORD PTR [edx],ecx
c001453b:	75 27                	jne    c0014564 <SysKill(regs*)+0x9c>
c001453d:	8d 76 00             	lea    esi,[esi+0x0]
c0014540:	51                   	push   ecx
c0014541:	51                   	push   ecx
c0014542:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001454a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001454d:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014553:	e8 8b c7 ff ff       	call   c0010ce3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014558:	83 c4 10             	add    esp,0x10
c001455b:	31 c0                	xor    eax,eax
c001455d:	31 d2                	xor    edx,edx
c001455f:	eb 1b                	jmp    c001457c <SysKill(regs*)+0xb4>
c0014561:	8d 76 00             	lea    esi,[esi+0x0]
c0014564:	52                   	push   edx
c0014565:	52                   	push   edx
c0014566:	50                   	push   eax
c0014567:	68 40 13 03 c0       	push   0xc0031340
c001456c:	e8 eb 18 01 00       	call   c0025e5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014571:	eb b9                	jmp    c001452c <SysKill(regs*)+0x64>
c0014573:	90                   	nop
c0014574:	83 c8 ff             	or     eax,0xffffffff
c0014577:	89 c2                	mov    edx,eax
c0014579:	8d 76 00             	lea    esi,[esi+0x0]
c001457c:	83 c4 08             	add    esp,0x8
c001457f:	5b                   	pop    ebx
c0014580:	c3                   	ret    

c0014581 <SysLoadDLL(regs*)>:
c0014581:	56                   	push   esi
c0014582:	31 d2                	xor    edx,edx
c0014584:	53                   	push   ebx
c0014585:	b8 01 00 00 00       	mov    eax,0x1
c001458a:	53                   	push   ebx
c001458b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001458f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014593:	0f 84 82 00 00 00    	je     c001461b <SysLoadDLL(regs*)+0x9a>
c0014599:	83 ec 0c             	sub    esp,0xc
c001459c:	68 14 01 00 00       	push   0x114
c00145a1:	e8 da b0 ff ff       	call   c000f680 <malloc>
c00145a6:	83 c4 0c             	add    esp,0xc
c00145a9:	89 c3                	mov    ebx,eax
c00145ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00145b3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00145b6:	53                   	push   ebx
c00145b7:	e8 cc 3b ff ff       	call   c0008188 <File::File(char const*, Process*)>
c00145bc:	83 c4 10             	add    esp,0x10
c00145bf:	31 d2                	xor    edx,edx
c00145c1:	85 db                	test   ebx,ebx
c00145c3:	b8 02 00 00 00       	mov    eax,0x2
c00145c8:	74 51                	je     c001461b <SysLoadDLL(regs*)+0x9a>
c00145ca:	83 ec 0c             	sub    esp,0xc
c00145cd:	53                   	push   ebx
c00145ce:	e8 97 3e ff ff       	call   c000846a <File::exists()>
c00145d3:	83 c4 10             	add    esp,0x10
c00145d6:	84 c0                	test   al,al
c00145d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145da:	75 11                	jne    c00145ed <SysLoadDLL(regs*)+0x6c>
c00145dc:	83 ec 0c             	sub    esp,0xc
c00145df:	53                   	push   ebx
c00145e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145e3:	83 c4 10             	add    esp,0x10
c00145e6:	b8 03 00 00 00       	mov    eax,0x3
c00145eb:	eb 2c                	jmp    c0014619 <SysLoadDLL(regs*)+0x98>
c00145ed:	83 ec 0c             	sub    esp,0xc
c00145f0:	53                   	push   ebx
c00145f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00145f4:	83 c4 0c             	add    esp,0xc
c00145f7:	6a 00                	push   0x0
c00145f9:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c00145ff:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014602:	e8 c4 16 00 00       	call   c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>
c0014607:	83 c4 10             	add    esp,0x10
c001460a:	31 d2                	xor    edx,edx
c001460c:	88 c1                	mov    cl,al
c001460e:	31 c0                	xor    eax,eax
c0014610:	84 c9                	test   cl,cl
c0014612:	75 07                	jne    c001461b <SysLoadDLL(regs*)+0x9a>
c0014614:	b8 04 00 00 00       	mov    eax,0x4
c0014619:	31 d2                	xor    edx,edx
c001461b:	59                   	pop    ecx
c001461c:	5b                   	pop    ebx
c001461d:	5e                   	pop    esi
c001461e:	c3                   	ret    

c001461f <SysPause(regs*)>:
c001461f:	83 ec 18             	sub    esp,0x18
c0014622:	6a 08                	push   0x8
c0014624:	e8 e3 20 00 00       	call   c001670c <blockTask(TaskState)>
c0014629:	31 c0                	xor    eax,eax
c001462b:	31 d2                	xor    edx,edx
c001462d:	83 c4 1c             	add    esp,0x1c
c0014630:	c3                   	ret    

c0014631 <SysPthreadCreate(regs*)>:
c0014631:	83 ec 18             	sub    esp,0x18
c0014634:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014639:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001463c:	e8 a3 1e 00 00       	call   c00164e4 <Process::createUserThread()>
c0014641:	31 c0                	xor    eax,eax
c0014643:	31 d2                	xor    edx,edx
c0014645:	83 c4 1c             	add    esp,0x1c
c0014648:	c3                   	ret    

c0014649 <SysPthreadGetTID(regs*)>:
c0014649:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001464e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014651:	99                   	cdq    
c0014652:	c3                   	ret    

c0014653 <SysInternalPthreadGetContext(regs*)>:
c0014653:	31 c0                	xor    eax,eax
c0014655:	31 d2                	xor    edx,edx
c0014657:	c3                   	ret    

c0014658 <SysInternalPthreadGetStartLocation(regs*)>:
c0014658:	31 c0                	xor    eax,eax
c001465a:	31 d2                	xor    edx,edx
c001465c:	c3                   	ret    

c001465d <SysPthreadJoin(regs*)>:
c001465d:	31 c0                	xor    eax,eax
c001465f:	31 d2                	xor    edx,edx
c0014661:	c3                   	ret    

c0014662 <SysPthreadExit(regs*)>:
c0014662:	83 ec 18             	sub    esp,0x18
c0014665:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014669:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001466c:	e8 cf 27 00 00       	call   c0016e40 <KeTerminateCurrentThread(int)>
c0014671:	83 c8 ff             	or     eax,0xffffffff
c0014674:	83 c4 1c             	add    esp,0x1c
c0014677:	89 c2                	mov    edx,eax
c0014679:	c3                   	ret    

c001467a <SysRead(regs*)>:
c001467a:	57                   	push   edi
c001467b:	56                   	push   esi
c001467c:	53                   	push   ebx
c001467d:	83 ec 10             	sub    esp,0x10
c0014680:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014684:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014687:	83 f8 02             	cmp    eax,0x2
c001468a:	77 10                	ja     c001469c <SysRead(regs*)+0x22>
c001468c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014691:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014694:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c001469a:	eb 0e                	jmp    c00146aa <SysRead(regs*)+0x30>
c001469c:	83 ec 0c             	sub    esp,0xc
c001469f:	50                   	push   eax
c00146a0:	e8 18 e8 ff ff       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c00146a5:	83 c4 10             	add    esp,0x10
c00146a8:	89 c1                	mov    ecx,eax
c00146aa:	83 c8 ff             	or     eax,0xffffffff
c00146ad:	85 c9                	test   ecx,ecx
c00146af:	89 c2                	mov    edx,eax
c00146b1:	74 28                	je     c00146db <SysRead(regs*)+0x61>
c00146b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146bb:	83 ec 0c             	sub    esp,0xc
c00146be:	31 ff                	xor    edi,edi
c00146c0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00146c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00146c6:	52                   	push   edx
c00146c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00146ca:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00146cd:	57                   	push   edi
c00146ce:	56                   	push   esi
c00146cf:	51                   	push   ecx
c00146d0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00146d7:	83 c4 20             	add    esp,0x20
c00146da:	99                   	cdq    
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	5b                   	pop    ebx
c00146df:	5e                   	pop    esi
c00146e0:	5f                   	pop    edi
c00146e1:	c3                   	ret    

c00146e2 <SysRegisterSignal(regs*)>:
c00146e2:	83 ec 18             	sub    esp,0x18
c00146e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146e9:	6a 00                	push   0x0
c00146eb:	6a 00                	push   0x0
c00146ed:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00146f0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00146f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00146fb:	ff b0 c0 07 00 00    	push   DWORD PTR [eax+0x7c0]
c0014701:	e8 a7 c5 ff ff       	call   c0010cad <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014706:	83 c4 2c             	add    esp,0x2c
c0014709:	99                   	cdq    
c001470a:	c3                   	ret    

c001470b <SysRegistryGetTypeFromPath(regs*)>:
c001470b:	53                   	push   ebx
c001470c:	81 ec 40 01 00 00    	sub    esp,0x140
c0014712:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014719:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001471c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001471f:	e8 b3 97 ff ff       	call   c000ded7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	85 c0                	test   eax,eax
c0014729:	89 c1                	mov    ecx,eax
c001472b:	74 15                	je     c0014742 <SysRegistryGetTypeFromPath(regs*)+0x37>
c001472d:	50                   	push   eax
c001472e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014732:	50                   	push   eax
c0014733:	51                   	push   ecx
c0014734:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014737:	e8 80 93 ff ff       	call   c000dabc <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001473c:	83 c4 10             	add    esp,0x10
c001473f:	99                   	cdq    
c0014740:	eb 05                	jmp    c0014747 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014742:	83 c8 ff             	or     eax,0xffffffff
c0014745:	89 c2                	mov    edx,eax
c0014747:	81 c4 38 01 00 00    	add    esp,0x138
c001474d:	5b                   	pop    ebx
c001474e:	c3                   	ret    

c001474f <SysRegistryReadExtent(regs*)>:
c001474f:	83 ec 1c             	sub    esp,0x1c
c0014752:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014756:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014759:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001475c:	85 c0                	test   eax,eax
c001475e:	79 1f                	jns    c001477f <SysRegistryReadExtent(regs*)+0x30>
c0014760:	52                   	push   edx
c0014761:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014766:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001476a:	52                   	push   edx
c001476b:	50                   	push   eax
c001476c:	51                   	push   ecx
c001476d:	e8 3c 92 ff ff       	call   c000d9ae <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014776:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	eb 14                	jmp    c0014793 <SysRegistryReadExtent(regs*)+0x44>
c001477f:	83 ec 04             	sub    esp,0x4
c0014782:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014785:	50                   	push   eax
c0014786:	51                   	push   ecx
c0014787:	e8 c0 8c ff ff       	call   c000d44c <CmGetString(Reghive_Tag*, int, char*)>
c001478c:	83 c4 10             	add    esp,0x10
c001478f:	31 c0                	xor    eax,eax
c0014791:	31 d2                	xor    edx,edx
c0014793:	83 c4 1c             	add    esp,0x1c
c0014796:	c3                   	ret    

c0014797 <SysRegistryPathToExtentLookup(regs*)>:
c0014797:	83 ec 14             	sub    esp,0x14
c001479a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001479e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00147a1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147a4:	e8 2e 97 ff ff       	call   c000ded7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00147a9:	83 c4 1c             	add    esp,0x1c
c00147ac:	99                   	cdq    
c00147ad:	c3                   	ret    

c00147ae <SysRegistryEnterDirectory(regs*)>:
c00147ae:	83 ec 14             	sub    esp,0x14
c00147b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147b5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00147b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147bb:	e8 03 8d ff ff       	call   c000d4c3 <CmEnterDirectory(Reghive_Tag*, int)>
c00147c0:	83 c4 1c             	add    esp,0x1c
c00147c3:	99                   	cdq    
c00147c4:	c3                   	ret    

c00147c5 <SysRegistryGetNext(regs*)>:
c00147c5:	83 ec 14             	sub    esp,0x14
c00147c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147cc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00147cf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00147d2:	e8 2b 8d ff ff       	call   c000d502 <CmGetNext(Reghive_Tag*, int)>
c00147d7:	83 c4 1c             	add    esp,0x1c
c00147da:	99                   	cdq    
c00147db:	c3                   	ret    

c00147dc <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00147dc:	57                   	push   edi
c00147dd:	56                   	push   esi
c00147de:	53                   	push   ebx
c00147df:	81 ec 34 01 00 00    	sub    esp,0x134
c00147e5:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00147ec:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00147f0:	57                   	push   edi
c00147f1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00147f4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00147f7:	e8 c0 92 ff ff       	call   c000dabc <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00147fc:	89 c3                	mov    ebx,eax
c00147fe:	58                   	pop    eax
c00147ff:	5a                   	pop    edx
c0014800:	57                   	push   edi
c0014801:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014804:	e8 47 be fe ff       	call   c0000650 <strcpy>
c0014809:	81 c4 40 01 00 00    	add    esp,0x140
c001480f:	89 d8                	mov    eax,ebx
c0014811:	5b                   	pop    ebx
c0014812:	99                   	cdq    
c0014813:	5e                   	pop    esi
c0014814:	5f                   	pop    edi
c0014815:	c3                   	ret    

c0014816 <SysRegistryOpen(regs*)>:
c0014816:	83 ec 18             	sub    esp,0x18
c0014819:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001481d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014820:	e8 b7 8a ff ff       	call   c000d2dc <CmOpen(char const*)>
c0014825:	83 c4 1c             	add    esp,0x1c
c0014828:	99                   	cdq    
c0014829:	c3                   	ret    

c001482a <SysRegistryClose(regs*)>:
c001482a:	83 ec 18             	sub    esp,0x18
c001482d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014831:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014834:	e8 c1 8b ff ff       	call   c000d3fa <CmClose(Reghive_Tag*)>
c0014839:	31 c0                	xor    eax,eax
c001483b:	31 d2                	xor    edx,edx
c001483d:	83 c4 1c             	add    esp,0x1c
c0014840:	c3                   	ret    

c0014841 <SysRegistryEasyReadString(regs*)>:
c0014841:	57                   	push   edi
c0014842:	56                   	push   esi
c0014843:	53                   	push   ebx
c0014844:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014848:	83 ec 0c             	sub    esp,0xc
c001484b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001484e:	e8 89 8a ff ff       	call   c000d2dc <CmOpen(char const*)>
c0014853:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014856:	5a                   	pop    edx
c0014857:	59                   	pop    ecx
c0014858:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001485b:	89 c3                	mov    ebx,eax
c001485d:	50                   	push   eax
c001485e:	e8 74 96 ff ff       	call   c000ded7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014863:	83 c4 10             	add    esp,0x10
c0014866:	89 c1                	mov    ecx,eax
c0014868:	b8 01 00 00 00       	mov    eax,0x1
c001486d:	85 c9                	test   ecx,ecx
c001486f:	7e 16                	jle    c0014887 <SysRegistryEasyReadString(regs*)+0x46>
c0014871:	50                   	push   eax
c0014872:	57                   	push   edi
c0014873:	51                   	push   ecx
c0014874:	53                   	push   ebx
c0014875:	e8 d2 8b ff ff       	call   c000d44c <CmGetString(Reghive_Tag*, int, char*)>
c001487a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001487d:	e8 78 8b ff ff       	call   c000d3fa <CmClose(Reghive_Tag*)>
c0014882:	83 c4 10             	add    esp,0x10
c0014885:	31 c0                	xor    eax,eax
c0014887:	5b                   	pop    ebx
c0014888:	31 d2                	xor    edx,edx
c001488a:	5e                   	pop    esi
c001488b:	5f                   	pop    edi
c001488c:	c3                   	ret    

c001488d <SysRegistryEasyReadInteger(regs*)>:
c001488d:	56                   	push   esi
c001488e:	53                   	push   ebx
c001488f:	83 ec 10             	sub    esp,0x10
c0014892:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014896:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014899:	e8 3e 8a ff ff       	call   c000d2dc <CmOpen(char const*)>
c001489e:	5a                   	pop    edx
c001489f:	59                   	pop    ecx
c00148a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00148a3:	89 c3                	mov    ebx,eax
c00148a5:	50                   	push   eax
c00148a6:	e8 2c 96 ff ff       	call   c000ded7 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00148ab:	83 c4 10             	add    esp,0x10
c00148ae:	89 c1                	mov    ecx,eax
c00148b0:	b8 01 00 00 00       	mov    eax,0x1
c00148b5:	85 c9                	test   ecx,ecx
c00148b7:	7e 18                	jle    c00148d1 <SysRegistryEasyReadInteger(regs*)+0x44>
c00148b9:	50                   	push   eax
c00148ba:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00148bd:	51                   	push   ecx
c00148be:	53                   	push   ebx
c00148bf:	e8 ea 90 ff ff       	call   c000d9ae <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00148c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148c7:	e8 2e 8b ff ff       	call   c000d3fa <CmClose(Reghive_Tag*)>
c00148cc:	83 c4 10             	add    esp,0x10
c00148cf:	31 c0                	xor    eax,eax
c00148d1:	59                   	pop    ecx
c00148d2:	31 d2                	xor    edx,edx
c00148d4:	5b                   	pop    ebx
c00148d5:	5e                   	pop    esi
c00148d6:	c3                   	ret    

c00148d7 <SysSbrk(regs*)>:
c00148d7:	56                   	push   esi
c00148d8:	53                   	push   ebx
c00148d9:	50                   	push   eax
c00148da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00148e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148e6:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00148e9:	8b 88 b2 05 00 00    	mov    ecx,DWORD PTR [eax+0x5b2]
c00148ef:	85 db                	test   ebx,ebx
c00148f1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00148f4:	74 02                	je     c00148f8 <SysSbrk(regs*)+0x21>
c00148f6:	79 06                	jns    c00148fe <SysSbrk(regs*)+0x27>
c00148f8:	89 f0                	mov    eax,esi
c00148fa:	31 d2                	xor    edx,edx
c00148fc:	eb 2a                	jmp    c0014928 <SysSbrk(regs*)+0x51>
c00148fe:	83 c8 ff             	or     eax,0xffffffff
c0014901:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014907:	89 c2                	mov    edx,eax
c0014909:	77 1d                	ja     c0014928 <SysSbrk(regs*)+0x51>
c001490b:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014911:	50                   	push   eax
c0014912:	68 07 0c 00 00       	push   0xc07
c0014917:	c1 ea 0c             	shr    edx,0xc
c001491a:	52                   	push   edx
c001491b:	51                   	push   ecx
c001491c:	e8 db ee ff ff       	call   c00137fc <VAS::allocatePages(int, int)>
c0014921:	89 f0                	mov    eax,esi
c0014923:	31 d2                	xor    edx,edx
c0014925:	83 c4 10             	add    esp,0x10
c0014928:	59                   	pop    ecx
c0014929:	5b                   	pop    ebx
c001492a:	5e                   	pop    esi
c001492b:	c3                   	ret    

c001492c <SysSetCwd(regs*)>:
c001492c:	83 ec 14             	sub    esp,0x14
c001492f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014933:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014936:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001493b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001493e:	e8 c6 3b ff ff       	call   c0008509 <Fs::setcwd(Process*, char*)>
c0014943:	83 c4 1c             	add    esp,0x1c
c0014946:	99                   	cdq    
c0014947:	c3                   	ret    

c0014948 <SysSetTime(regs*)>:
c0014948:	55                   	push   ebp
c0014949:	31 d2                	xor    edx,edx
c001494b:	57                   	push   edi
c001494c:	56                   	push   esi
c001494d:	53                   	push   ebx
c001494e:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014953:	83 ec 30             	sub    esp,0x30
c0014956:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001495a:	8b 71 20             	mov    esi,DWORD PTR [ecx+0x20]
c001495d:	89 f0                	mov    eax,esi
c001495f:	f7 f3                	div    ebx
c0014961:	89 d7                	mov    edi,edx
c0014963:	31 d2                	xor    edx,edx
c0014965:	f7 f3                	div    ebx
c0014967:	bb 10 0e 00 00       	mov    ebx,0xe10
c001496c:	89 f0                	mov    eax,esi
c001496e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014972:	31 d2                	xor    edx,edx
c0014974:	f7 f3                	div    ebx
c0014976:	bb 18 00 00 00       	mov    ebx,0x18
c001497b:	31 d2                	xor    edx,edx
c001497d:	f7 f3                	div    ebx
c001497f:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014982:	bb 0c 00 00 00       	mov    ebx,0xc
c0014987:	89 c6                	mov    esi,eax
c0014989:	c1 e8 05             	shr    eax,0x5
c001498c:	83 e6 1f             	and    esi,0x1f
c001498f:	46                   	inc    esi
c0014990:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014994:	31 d2                	xor    edx,edx
c0014996:	f7 f3                	div    ebx
c0014998:	31 db                	xor    ebx,ebx
c001499a:	57                   	push   edi
c001499b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001499f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149a3:	0f b7 69 24          	movzx  ebp,WORD PTR [ecx+0x24]
c00149a7:	55                   	push   ebp
c00149a8:	52                   	push   edx
c00149a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00149ad:	56                   	push   esi
c00149ae:	68 b9 86 02 c0       	push   0xc00286b9
c00149b3:	e8 ae 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00149b8:	83 c4 1c             	add    esp,0x1c
c00149bb:	57                   	push   edi
c00149bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149c4:	55                   	push   ebp
c00149c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00149c9:	52                   	push   edx
c00149ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00149ce:	56                   	push   esi
c00149cf:	68 db 86 02 c0       	push   0xc00286db
c00149d4:	e8 8d 25 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00149d9:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c00149de:	31 c9                	xor    ecx,ecx
c00149e0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00149e4:	8a 5c 24 30          	mov    bl,BYTE PTR [esp+0x30]
c00149e8:	8a 7c 24 2c          	mov    bh,BYTE PTR [esp+0x2c]
c00149ec:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00149f2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00149f6:	89 f0                	mov    eax,esi
c00149f8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00149fc:	88 c1                	mov    cl,al
c00149fe:	89 e8                	mov    eax,ebp
c0014a00:	88 d5                	mov    ch,dl
c0014a02:	83 c4 1c             	add    esp,0x1c
c0014a05:	c1 e0 10             	shl    eax,0x10
c0014a08:	0f b7 d1             	movzx  edx,cx
c0014a0b:	09 c2                	or     edx,eax
c0014a0d:	89 f8                	mov    eax,edi
c0014a0f:	c1 e0 10             	shl    eax,0x10
c0014a12:	89 d1                	mov    ecx,edx
c0014a14:	89 da                	mov    edx,ebx
c0014a16:	81 e2 ff ff 00 ff    	and    edx,0xff00ffff
c0014a1c:	09 c2                	or     edx,eax
c0014a1e:	52                   	push   edx
c0014a1f:	51                   	push   ecx
c0014a20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a24:	e8 29 4b ff ff       	call   c0009552 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014a29:	83 c4 3c             	add    esp,0x3c
c0014a2c:	31 d2                	xor    edx,edx
c0014a2e:	5b                   	pop    ebx
c0014a2f:	5e                   	pop    esi
c0014a30:	83 f0 01             	xor    eax,0x1
c0014a33:	5f                   	pop    edi
c0014a34:	0f b6 c0             	movzx  eax,al
c0014a37:	5d                   	pop    ebp
c0014a38:	c3                   	ret    

c0014a39 <SysSymlink(regs*)>:
c0014a39:	56                   	push   esi
c0014a3a:	83 c8 ff             	or     eax,0xffffffff
c0014a3d:	53                   	push   ebx
c0014a3e:	89 c2                	mov    edx,eax
c0014a40:	81 ec 34 02 00 00    	sub    esp,0x234
c0014a46:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014a4d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014a51:	74 50                	je     c0014aa3 <SysSymlink(regs*)+0x6a>
c0014a53:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014a56:	85 c9                	test   ecx,ecx
c0014a58:	74 49                	je     c0014aa3 <SysSymlink(regs*)+0x6a>
c0014a5a:	6a 01                	push   0x1
c0014a5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a61:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a64:	05 0c 01 00 00       	add    eax,0x10c
c0014a69:	50                   	push   eax
c0014a6a:	51                   	push   ecx
c0014a6b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014a6f:	56                   	push   esi
c0014a70:	e8 e7 33 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014a75:	6a 01                	push   0x1
c0014a77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a7f:	05 0c 01 00 00       	add    eax,0x10c
c0014a84:	50                   	push   eax
c0014a85:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014a88:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014a8f:	53                   	push   ebx
c0014a90:	e8 c7 33 ff ff       	call   c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014a95:	83 c4 18             	add    esp,0x18
c0014a98:	56                   	push   esi
c0014a99:	53                   	push   ebx
c0014a9a:	e8 eb 2f ff ff       	call   c0007a8a <KeCreateSymlink(char const*, char const*)>
c0014a9f:	83 c4 10             	add    esp,0x10
c0014aa2:	99                   	cdq    
c0014aa3:	81 c4 34 02 00 00    	add    esp,0x234
c0014aa9:	5b                   	pop    ebx
c0014aaa:	5e                   	pop    esi
c0014aab:	c3                   	ret    

c0014aac <SysTimezone(regs*)>:
c0014aac:	83 ec 0c             	sub    esp,0xc
c0014aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ab3:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014ab7:	75 17                	jne    c0014ad0 <SysTimezone(regs*)+0x24>
c0014ab9:	83 ec 0c             	sub    esp,0xc
c0014abc:	68 fd 86 02 c0       	push   0xc00286fd
c0014ac1:	e8 a0 24 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014ac6:	83 c8 ff             	or     eax,0xffffffff
c0014ac9:	83 c4 10             	add    esp,0x10
c0014acc:	89 c2                	mov    edx,eax
c0014ace:	eb 16                	jmp    c0014ae6 <SysTimezone(regs*)+0x3a>
c0014ad0:	83 ec 0c             	sub    esp,0xc
c0014ad3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ad6:	e8 2e 45 ff ff       	call   c0009009 <KeSetTimezone(int)>
c0014adb:	31 d2                	xor    edx,edx
c0014add:	83 c4 10             	add    esp,0x10
c0014ae0:	83 f0 01             	xor    eax,0x1
c0014ae3:	0f b6 c0             	movzx  eax,al
c0014ae6:	83 c4 0c             	add    esp,0xc
c0014ae9:	c3                   	ret    

c0014aea <SysTruncate(regs*)>:
c0014aea:	55                   	push   ebp
c0014aeb:	57                   	push   edi
c0014aec:	31 ff                	xor    edi,edi
c0014aee:	56                   	push   esi
c0014aef:	53                   	push   ebx
c0014af0:	83 ec 0c             	sub    esp,0xc
c0014af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014afa:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014afe:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014b01:	89 ce                	mov    esi,ecx
c0014b03:	0f 84 9a 00 00 00    	je     c0014ba3 <SysTruncate(regs*)+0xb9>
c0014b09:	83 ec 0c             	sub    esp,0xc
c0014b0c:	68 14 01 00 00       	push   0x114
c0014b11:	e8 6a ab ff ff       	call   c000f680 <malloc>
c0014b16:	83 c4 0c             	add    esp,0xc
c0014b19:	89 c3                	mov    ebx,eax
c0014b1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b20:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014b23:	55                   	push   ebp
c0014b24:	53                   	push   ebx
c0014b25:	e8 5e 36 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	31 d2                	xor    edx,edx
c0014b2f:	85 db                	test   ebx,ebx
c0014b31:	b8 03 00 00 00       	mov    eax,0x3
c0014b36:	0f 84 a2 00 00 00    	je     c0014bde <SysTruncate(regs*)+0xf4>
c0014b3c:	51                   	push   ecx
c0014b3d:	51                   	push   ecx
c0014b3e:	6a 02                	push   0x2
c0014b40:	53                   	push   ebx
c0014b41:	e8 60 36 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0014b46:	83 c4 10             	add    esp,0x10
c0014b49:	85 c0                	test   eax,eax
c0014b4b:	74 13                	je     c0014b60 <SysTruncate(regs*)+0x76>
c0014b4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b4f:	83 ec 0c             	sub    esp,0xc
c0014b52:	53                   	push   ebx
c0014b53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b56:	83 c4 10             	add    esp,0x10
c0014b59:	b8 04 00 00 00       	mov    eax,0x4
c0014b5e:	eb 7c                	jmp    c0014bdc <SysTruncate(regs*)+0xf2>
c0014b60:	52                   	push   edx
c0014b61:	57                   	push   edi
c0014b62:	56                   	push   esi
c0014b63:	53                   	push   ebx
c0014b64:	e8 51 37 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014b69:	83 c4 10             	add    esp,0x10
c0014b6c:	85 c0                	test   eax,eax
c0014b6e:	74 1b                	je     c0014b8b <SysTruncate(regs*)+0xa1>
c0014b70:	83 ec 0c             	sub    esp,0xc
c0014b73:	53                   	push   ebx
c0014b74:	e8 8b 36 ff ff       	call   c0008204 <File::close()>
c0014b79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b81:	83 c4 10             	add    esp,0x10
c0014b84:	b8 05 00 00 00       	mov    eax,0x5
c0014b89:	eb 51                	jmp    c0014bdc <SysTruncate(regs*)+0xf2>
c0014b8b:	83 ec 0c             	sub    esp,0xc
c0014b8e:	53                   	push   ebx
c0014b8f:	e8 70 36 ff ff       	call   c0008204 <File::close()>
c0014b94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014b9c:	83 c4 10             	add    esp,0x10
c0014b9f:	31 c0                	xor    eax,eax
c0014ba1:	eb 39                	jmp    c0014bdc <SysTruncate(regs*)+0xf2>
c0014ba3:	31 d2                	xor    edx,edx
c0014ba5:	83 fd 02             	cmp    ebp,0x2
c0014ba8:	b8 01 00 00 00       	mov    eax,0x1
c0014bad:	7e 2f                	jle    c0014bde <SysTruncate(regs*)+0xf4>
c0014baf:	83 ec 0c             	sub    esp,0xc
c0014bb2:	51                   	push   ecx
c0014bb3:	e8 05 e3 ff ff       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c0014bb8:	83 c4 10             	add    esp,0x10
c0014bbb:	31 d2                	xor    edx,edx
c0014bbd:	89 c1                	mov    ecx,eax
c0014bbf:	b8 02 00 00 00       	mov    eax,0x2
c0014bc4:	85 c9                	test   ecx,ecx
c0014bc6:	74 16                	je     c0014bde <SysTruncate(regs*)+0xf4>
c0014bc8:	50                   	push   eax
c0014bc9:	57                   	push   edi
c0014bca:	56                   	push   esi
c0014bcb:	51                   	push   ecx
c0014bcc:	e8 e9 36 ff ff       	call   c00082ba <File::truncate(unsigned long long)>
c0014bd1:	83 c4 10             	add    esp,0x10
c0014bd4:	85 c0                	test   eax,eax
c0014bd6:	0f 95 c0             	setne  al
c0014bd9:	0f b6 c0             	movzx  eax,al
c0014bdc:	31 d2                	xor    edx,edx
c0014bde:	83 c4 0c             	add    esp,0xc
c0014be1:	5b                   	pop    ebx
c0014be2:	5e                   	pop    esi
c0014be3:	5f                   	pop    edi
c0014be4:	5d                   	pop    ebp
c0014be5:	c3                   	ret    

c0014be6 <SysWrite(regs*)>:
c0014be6:	57                   	push   edi
c0014be7:	56                   	push   esi
c0014be8:	53                   	push   ebx
c0014be9:	83 ec 10             	sub    esp,0x10
c0014bec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014bf0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014bf3:	83 f8 02             	cmp    eax,0x2
c0014bf6:	77 10                	ja     c0014c08 <SysWrite(regs*)+0x22>
c0014bf8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bfd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c00:	8b 88 a6 05 00 00    	mov    ecx,DWORD PTR [eax+0x5a6]
c0014c06:	eb 0e                	jmp    c0014c16 <SysWrite(regs*)+0x30>
c0014c08:	83 ec 0c             	sub    esp,0xc
c0014c0b:	50                   	push   eax
c0014c0c:	e8 ac e2 ff ff       	call   c0012ebd <KeGetFileFromDescriptor(int)>
c0014c11:	83 c4 10             	add    esp,0x10
c0014c14:	89 c1                	mov    ecx,eax
c0014c16:	83 c8 ff             	or     eax,0xffffffff
c0014c19:	85 c9                	test   ecx,ecx
c0014c1b:	89 c2                	mov    edx,eax
c0014c1d:	74 28                	je     c0014c47 <SysWrite(regs*)+0x61>
c0014c1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c27:	83 ec 0c             	sub    esp,0xc
c0014c2a:	31 ff                	xor    edi,edi
c0014c2c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014c30:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014c32:	52                   	push   edx
c0014c33:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c36:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014c39:	57                   	push   edi
c0014c3a:	56                   	push   esi
c0014c3b:	51                   	push   ecx
c0014c3c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014c3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c43:	83 c4 20             	add    esp,0x20
c0014c46:	99                   	cdq    
c0014c47:	83 c4 10             	add    esp,0x10
c0014c4a:	5b                   	pop    ebx
c0014c4b:	5e                   	pop    esi
c0014c4c:	5f                   	pop    edi
c0014c4d:	c3                   	ret    

c0014c4e <SysWsbe(regs*)>:
c0014c4e:	55                   	push   ebp
c0014c4f:	57                   	push   edi
c0014c50:	56                   	push   esi
c0014c51:	53                   	push   ebx
c0014c52:	83 ec 3c             	sub    esp,0x3c
c0014c55:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014c59:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014c60:	75 2d                	jne    c0014c8f <SysWsbe(regs*)+0x41>
c0014c62:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0014c69:	75 24                	jne    c0014c8f <SysWsbe(regs*)+0x41>
c0014c6b:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014c72:	75 1b                	jne    c0014c8f <SysWsbe(regs*)+0x41>
c0014c74:	6a 01                	push   0x1
c0014c76:	6a 00                	push   0x0
c0014c78:	68 02 9f 00 c0       	push   0xc0009f02
c0014c7d:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0014c83:	e8 10 17 00 00       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c0014c88:	83 c4 10             	add    esp,0x10
c0014c8b:	31 c0                	xor    eax,eax
c0014c8d:	eb 52                	jmp    c0014ce1 <SysWsbe(regs*)+0x93>
c0014c8f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014c93:	be 12 87 02 c0       	mov    esi,0xc0028712
c0014c98:	b9 0b 00 00 00       	mov    ecx,0xb
c0014c9d:	fc                   	cld    
c0014c9e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014ca0:	83 ec 0c             	sub    esp,0xc
c0014ca3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014ca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014caf:	8b b0 a6 05 00 00    	mov    esi,DWORD PTR [eax+0x5a6]
c0014cb5:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cb7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0014cba:	57                   	push   edi
c0014cbb:	e8 c0 b8 fe ff       	call   c0000580 <strlen>
c0014cc0:	5a                   	pop    edx
c0014cc1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014cc5:	52                   	push   edx
c0014cc6:	31 d2                	xor    edx,edx
c0014cc8:	57                   	push   edi
c0014cc9:	52                   	push   edx
c0014cca:	50                   	push   eax
c0014ccb:	56                   	push   esi
c0014ccc:	ff d5                	call   ebp
c0014cce:	83 c4 14             	add    esp,0x14
c0014cd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014cd4:	e8 67 21 00 00       	call   c0016e40 <KeTerminateCurrentThread(int)>
c0014cd9:	83 c4 10             	add    esp,0x10
c0014cdc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014ce1:	83 c4 3c             	add    esp,0x3c
c0014ce4:	31 d2                	xor    edx,edx
c0014ce6:	5b                   	pop    ebx
c0014ce7:	5e                   	pop    esi
c0014ce8:	5f                   	pop    edi
c0014ce9:	5d                   	pop    ebp
c0014cea:	c3                   	ret    

c0014ceb <SysYield(regs*)>:
c0014ceb:	83 ec 0c             	sub    esp,0xc
c0014cee:	fa                   	cli    
c0014cef:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0014cf5:	e8 52 19 00 00       	call   c001664c <schedule()>
c0014cfa:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0014d01:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0014d08:	75 01                	jne    c0014d0b <SysYield(regs*)+0x20>
c0014d0a:	fb                   	sti    
c0014d0b:	31 c0                	xor    eax,eax
c0014d0d:	31 d2                	xor    edx,edx
c0014d0f:	83 c4 0c             	add    esp,0xc
c0014d12:	c3                   	ret    
c0014d13:	90                   	nop

c0014d14 <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c0014d14:	55                   	push   ebp
c0014d15:	57                   	push   edi
c0014d16:	56                   	push   esi
c0014d17:	53                   	push   ebx
c0014d18:	83 ec 2c             	sub    esp,0x2c
c0014d1b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0014d1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d23:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0014d27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d2b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014d2f:	8b 7a 63             	mov    edi,DWORD PTR [edx+0x63]
c0014d32:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014d36:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014d3a:	c1 e0 08             	shl    eax,0x8
c0014d3d:	09 c6                	or     esi,eax
c0014d3f:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014d43:	c1 e0 10             	shl    eax,0x10
c0014d46:	09 c6                	or     esi,eax
c0014d48:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014d4c:	83 e0 7f             	and    eax,0x7f
c0014d4f:	c1 e0 18             	shl    eax,0x18
c0014d52:	09 f0                	or     eax,esi
c0014d54:	89 c5                	mov    ebp,eax
c0014d56:	89 f8                	mov    eax,edi
c0014d58:	80 f4 00             	xor    ah,0x0
c0014d5b:	89 c1                	mov    ecx,eax
c0014d5d:	89 e8                	mov    eax,ebp
c0014d5f:	80 f4 00             	xor    ah,0x0
c0014d62:	89 c3                	mov    ebx,eax
c0014d64:	89 d8                	mov    eax,ebx
c0014d66:	09 c8                	or     eax,ecx
c0014d68:	74 42                	je     c0014dac <KeAlarm(ThreadControlBlock*, unsigned long long)+0x98>
c0014d6a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0014d6e:	8b 4a 63             	mov    ecx,DWORD PTR [edx+0x63]
c0014d71:	0f b6 72 67          	movzx  esi,BYTE PTR [edx+0x67]
c0014d75:	0f b6 42 68          	movzx  eax,BYTE PTR [edx+0x68]
c0014d79:	c1 e0 08             	shl    eax,0x8
c0014d7c:	09 c6                	or     esi,eax
c0014d7e:	0f b6 42 69          	movzx  eax,BYTE PTR [edx+0x69]
c0014d82:	c1 e0 10             	shl    eax,0x10
c0014d85:	09 c6                	or     esi,eax
c0014d87:	0f b6 42 6a          	movzx  eax,BYTE PTR [edx+0x6a]
c0014d8b:	83 e0 7f             	and    eax,0x7f
c0014d8e:	c1 e0 18             	shl    eax,0x18
c0014d91:	09 f0                	or     eax,esi
c0014d93:	89 c3                	mov    ebx,eax
c0014d95:	a1 50 0b 03 c0       	mov    eax,ds:0xc0030b50
c0014d9a:	8b 15 54 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b54
c0014da0:	29 c1                	sub    ecx,eax
c0014da2:	19 d3                	sbb    ebx,edx
c0014da4:	89 c8                	mov    eax,ecx
c0014da6:	89 da                	mov    edx,ebx
c0014da8:	eb 0e                	jmp    c0014db8 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xa4>
c0014daa:	66 90                	xchg   ax,ax
c0014dac:	b8 00 00 00 00       	mov    eax,0x0
c0014db1:	ba 00 00 00 00       	mov    edx,0x0
c0014db6:	66 90                	xchg   ax,ax
c0014db8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014dbc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dc4:	80 f4 00             	xor    ah,0x0
c0014dc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014dcb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014dcf:	80 f4 00             	xor    ah,0x0
c0014dd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014dd6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014dda:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0014dde:	89 e8                	mov    eax,ebp
c0014de0:	09 f8                	or     eax,edi
c0014de2:	74 30                	je     c0014e14 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x100>
c0014de4:	8b 0d 50 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b50
c0014dea:	8b 1d 54 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b54
c0014df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014df4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014df8:	01 c8                	add    eax,ecx
c0014dfa:	11 da                	adc    edx,ebx
c0014dfc:	89 c7                	mov    edi,eax
c0014dfe:	83 e7 ff             	and    edi,0xffffffff
c0014e01:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e04:	89 d0                	mov    eax,edx
c0014e06:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014e0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e0f:	eb 13                	jmp    c0014e24 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x110>
c0014e11:	8d 76 00             	lea    esi,[esi+0x0]
c0014e14:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014e1b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014e23:	90                   	nop
c0014e24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014e28:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014e2b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0014e2f:	89 cf                	mov    edi,ecx
c0014e31:	89 78 63             	mov    DWORD PTR [eax+0x63],edi
c0014e34:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0014e37:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0014e3b:	0f b6 5c 24 04       	movzx  ebx,BYTE PTR [esp+0x4]
c0014e40:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0014e43:	83 e2 00             	and    edx,0x0
c0014e46:	88 d1                	mov    cl,dl
c0014e48:	88 da                	mov    dl,bl
c0014e4a:	09 ca                	or     edx,ecx
c0014e4c:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0014e4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e53:	c1 ea 08             	shr    edx,0x8
c0014e56:	0f b6 da             	movzx  ebx,dl
c0014e59:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0014e5c:	83 e2 00             	and    edx,0x0
c0014e5f:	88 d1                	mov    cl,dl
c0014e61:	88 da                	mov    dl,bl
c0014e63:	09 ca                	or     edx,ecx
c0014e65:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0014e68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e6c:	c1 ea 10             	shr    edx,0x10
c0014e6f:	0f b6 da             	movzx  ebx,dl
c0014e72:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0014e75:	83 e2 00             	and    edx,0x0
c0014e78:	88 d1                	mov    cl,dl
c0014e7a:	88 da                	mov    dl,bl
c0014e7c:	09 ca                	or     edx,ecx
c0014e7e:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0014e81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e85:	c1 ea 18             	shr    edx,0x18
c0014e88:	83 e2 7f             	and    edx,0x7f
c0014e8b:	89 d3                	mov    ebx,edx
c0014e8d:	83 e3 7f             	and    ebx,0x7f
c0014e90:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0014e93:	83 e2 80             	and    edx,0xffffff80
c0014e96:	88 d1                	mov    cl,dl
c0014e98:	88 da                	mov    dl,bl
c0014e9a:	09 ca                	or     edx,ecx
c0014e9c:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0014e9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ea3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014ea7:	83 c4 2c             	add    esp,0x2c
c0014eaa:	5b                   	pop    ebx
c0014eab:	5e                   	pop    esi
c0014eac:	5f                   	pop    edi
c0014ead:	5d                   	pop    ebp
c0014eae:	c3                   	ret    
c0014eaf:	90                   	nop

c0014eb0 <KeCheckAlarm(ThreadControlBlock*)>:
c0014eb0:	55                   	push   ebp
c0014eb1:	57                   	push   edi
c0014eb2:	56                   	push   esi
c0014eb3:	53                   	push   ebx
c0014eb4:	83 ec 0c             	sub    esp,0xc
c0014eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ebb:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0014ebe:	0f b6 78 67          	movzx  edi,BYTE PTR [eax+0x67]
c0014ec2:	0f b6 68 68          	movzx  ebp,BYTE PTR [eax+0x68]
c0014ec6:	c1 e5 08             	shl    ebp,0x8
c0014ec9:	09 fd                	or     ebp,edi
c0014ecb:	0f b6 78 69          	movzx  edi,BYTE PTR [eax+0x69]
c0014ecf:	c1 e7 10             	shl    edi,0x10
c0014ed2:	09 ef                	or     edi,ebp
c0014ed4:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0014ed8:	83 e0 7f             	and    eax,0x7f
c0014edb:	c1 e0 18             	shl    eax,0x18
c0014ede:	09 f8                	or     eax,edi
c0014ee0:	89 c1                	mov    ecx,eax
c0014ee2:	89 d0                	mov    eax,edx
c0014ee4:	80 f4 00             	xor    ah,0x0
c0014ee7:	89 c3                	mov    ebx,eax
c0014ee9:	89 c8                	mov    eax,ecx
c0014eeb:	80 f4 00             	xor    ah,0x0
c0014eee:	89 c6                	mov    esi,eax
c0014ef0:	89 f0                	mov    eax,esi
c0014ef2:	09 d8                	or     eax,ebx
c0014ef4:	0f 84 9e 00 00 00    	je     c0014f98 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0014efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014efe:	8b 50 63             	mov    edx,DWORD PTR [eax+0x63]
c0014f01:	0f b6 58 67          	movzx  ebx,BYTE PTR [eax+0x67]
c0014f05:	0f b6 70 68          	movzx  esi,BYTE PTR [eax+0x68]
c0014f09:	c1 e6 08             	shl    esi,0x8
c0014f0c:	09 de                	or     esi,ebx
c0014f0e:	0f b6 58 69          	movzx  ebx,BYTE PTR [eax+0x69]
c0014f12:	c1 e3 10             	shl    ebx,0x10
c0014f15:	09 f3                	or     ebx,esi
c0014f17:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
c0014f1b:	83 e0 7f             	and    eax,0x7f
c0014f1e:	c1 e0 18             	shl    eax,0x18
c0014f21:	09 d8                	or     eax,ebx
c0014f23:	89 c1                	mov    ecx,eax
c0014f25:	89 cb                	mov    ebx,ecx
c0014f27:	89 d1                	mov    ecx,edx
c0014f29:	a1 50 0b 03 c0       	mov    eax,ds:0xc0030b50
c0014f2e:	8b 15 54 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b54
c0014f34:	39 c8                	cmp    eax,ecx
c0014f36:	89 d0                	mov    eax,edx
c0014f38:	19 d8                	sbb    eax,ebx
c0014f3a:	72 5c                	jb     c0014f98 <KeCheckAlarm(ThreadControlBlock*)+0xe8>
c0014f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f40:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0014f47:	8a 50 67             	mov    dl,BYTE PTR [eax+0x67]
c0014f4a:	83 e2 00             	and    edx,0x0
c0014f4d:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
c0014f50:	8a 50 68             	mov    dl,BYTE PTR [eax+0x68]
c0014f53:	83 e2 00             	and    edx,0x0
c0014f56:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
c0014f59:	8a 50 69             	mov    dl,BYTE PTR [eax+0x69]
c0014f5c:	83 e2 00             	and    edx,0x0
c0014f5f:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
c0014f62:	8a 50 6a             	mov    dl,BYTE PTR [eax+0x6a]
c0014f65:	83 e2 80             	and    edx,0xffffff80
c0014f68:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
c0014f6b:	83 ec 0c             	sub    esp,0xc
c0014f6e:	68 3e 87 02 c0       	push   0xc002873e
c0014f73:	e8 ee 1f ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0014f78:	83 c4 10             	add    esp,0x10
c0014f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f7f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f82:	8b 80 c0 07 00 00    	mov    eax,DWORD PTR [eax+0x7c0]
c0014f88:	83 ec 08             	sub    esp,0x8
c0014f8b:	6a 0e                	push   0xe
c0014f8d:	50                   	push   eax
c0014f8e:	e8 50 bd ff ff       	call   c0010ce3 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014f93:	83 c4 10             	add    esp,0x10
c0014f96:	66 90                	xchg   ax,ax
c0014f98:	90                   	nop
c0014f99:	83 c4 0c             	add    esp,0xc
c0014f9c:	5b                   	pop    ebx
c0014f9d:	5e                   	pop    esi
c0014f9e:	5f                   	pop    edi
c0014f9f:	5d                   	pop    ebp
c0014fa0:	c3                   	ret    

c0014fa1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0014fa1:	55                   	push   ebp
c0014fa2:	57                   	push   edi
c0014fa3:	56                   	push   esi
c0014fa4:	53                   	push   ebx
c0014fa5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014fab:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014fb6:	74 3b                	je     c0014ff3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014fb8:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014fc0:	74 31                	je     c0014ff3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014fc2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014fca:	75 27                	jne    c0014ff3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014fcc:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014fd3:	05 00 10 00 00       	add    eax,0x1000
c0014fd8:	89 c2                	mov    edx,eax
c0014fda:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014fdf:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014fe6:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0014fec:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0014ff3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014ffa:	83 ec 0c             	sub    esp,0xc
c0014ffd:	6a 01                	push   0x1
c0014fff:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015005:	e8 11 e0 ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c001500a:	83 c4 10             	add    esp,0x10
c001500d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015013:	89 c3                	mov    ebx,eax
c0015015:	0f 86 27 01 00 00    	jbe    c0015142 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c001501b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015023:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001502a:	c1 ee 0c             	shr    esi,0xc
c001502d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015031:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015038:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001503f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015043:	29 ef                	sub    edi,ebp
c0015045:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0015049:	0f 83 fa 00 00 00    	jae    c0015149 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c001504f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015055:	b8 00 10 00 00       	mov    eax,0x1000
c001505a:	0f 47 f8             	cmova  edi,eax
c001505d:	83 ec 0c             	sub    esp,0xc
c0015060:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015067:	31 d2                	xor    edx,edx
c0015069:	8b 08                	mov    ecx,DWORD PTR [eax]
c001506b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001506f:	50                   	push   eax
c0015070:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015074:	56                   	push   esi
c0015075:	52                   	push   edx
c0015076:	57                   	push   edi
c0015077:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001507e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015081:	83 c4 20             	add    esp,0x20
c0015084:	85 c0                	test   eax,eax
c0015086:	75 06                	jne    c001508e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0015088:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001508c:	74 13                	je     c00150a1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c001508e:	83 ec 0c             	sub    esp,0xc
c0015091:	53                   	push   ebx
c0015092:	e8 82 e2 ff ff       	call   c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c0015097:	83 c4 10             	add    esp,0x10
c001509a:	31 c0                	xor    eax,eax
c001509c:	e9 80 01 00 00       	jmp    c0015221 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c00150a1:	fa                   	cli    
c00150a2:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c00150a8:	e8 21 ac ff ff       	call   c000fcce <Phys::allocatePage()>
c00150ad:	6a 07                	push   0x7
c00150af:	53                   	push   ebx
c00150b0:	50                   	push   eax
c00150b1:	89 c7                	mov    edi,eax
c00150b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150b8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150bb:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00150c1:	e8 2e e6 ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00150c6:	83 c4 0c             	add    esp,0xc
c00150c9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00150d0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00150d6:	6a 00                	push   0x0
c00150d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150e0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00150e6:	e8 75 e4 ff ff       	call   c0013560 <VAS::mapOtherVASIn(bool, VAS*)>
c00150eb:	58                   	pop    eax
c00150ec:	5a                   	pop    edx
c00150ed:	68 07 0c 00 00       	push   0xc07
c00150f2:	55                   	push   ebp
c00150f3:	57                   	push   edi
c00150f4:	89 df                	mov    edi,ebx
c00150f6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00150fd:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015103:	6a 00                	push   0x0
c0015105:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001510a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001510d:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c0015113:	e8 30 e8 ff ff       	call   c0013948 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015118:	b9 00 10 00 00       	mov    ecx,0x1000
c001511d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001511f:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0015126:	83 c4 20             	add    esp,0x20
c0015129:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0015130:	75 01                	jne    c0015133 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0015132:	fb                   	sti    
c0015133:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015137:	81 c5 00 10 00 00    	add    ebp,0x1000
c001513d:	e9 ef fe ff ff       	jmp    c0015031 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0015142:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015149:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015150:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0015156:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001515c:	0f 86 b1 00 00 00    	jbe    c0015213 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015162:	fa                   	cli    
c0015163:	51                   	push   ecx
c0015164:	31 ff                	xor    edi,edi
c0015166:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001516d:	c1 ee 0c             	shr    esi,0xc
c0015170:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0015176:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001517c:	6a 00                	push   0x0
c001517e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015183:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015186:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c001518c:	e8 cf e3 ff ff       	call   c0013560 <VAS::mapOtherVASIn(bool, VAS*)>
c0015191:	83 c4 10             	add    esp,0x10
c0015194:	e8 35 ab ff ff       	call   c000fcce <Phys::allocatePage()>
c0015199:	47                   	inc    edi
c001519a:	6a 07                	push   0x7
c001519c:	53                   	push   ebx
c001519d:	50                   	push   eax
c001519e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00151a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00151a8:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00151ab:	ff b2 b2 05 00 00    	push   DWORD PTR [edx+0x5b2]
c00151b1:	e8 3e e5 ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00151b6:	58                   	pop    eax
c00151b7:	5a                   	pop    edx
c00151b8:	68 07 0c 00 00       	push   0xc07
c00151bd:	55                   	push   ebp
c00151be:	81 c5 00 10 00 00    	add    ebp,0x1000
c00151c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00151c8:	50                   	push   eax
c00151c9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00151d0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00151d6:	6a 00                	push   0x0
c00151d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151e0:	ff b0 b2 05 00 00    	push   DWORD PTR [eax+0x5b2]
c00151e6:	e8 5d e7 ff ff       	call   c0013948 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00151eb:	83 c4 1c             	add    esp,0x1c
c00151ee:	68 00 10 00 00       	push   0x1000
c00151f3:	6a 00                	push   0x0
c00151f5:	53                   	push   ebx
c00151f6:	e8 f5 b2 fe ff       	call   c00004f0 <memset>
c00151fb:	83 c4 10             	add    esp,0x10
c00151fe:	39 fe                	cmp    esi,edi
c0015200:	77 92                	ja     c0015194 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0015202:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0015209:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0015210:	75 01                	jne    c0015213 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0015212:	fb                   	sti    
c0015213:	83 ec 0c             	sub    esp,0xc
c0015216:	53                   	push   ebx
c0015217:	e8 fd e0 ff ff       	call   c0013319 <Virt::freeKernelVirtualPages(unsigned long)>
c001521c:	83 c4 10             	add    esp,0x10
c001521f:	b0 01                	mov    al,0x1
c0015221:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015227:	5b                   	pop    ebx
c0015228:	5e                   	pop    esi
c0015229:	5f                   	pop    edi
c001522a:	5d                   	pop    ebp
c001522b:	c3                   	ret    

c001522c <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001522c:	55                   	push   ebp
c001522d:	57                   	push   edi
c001522e:	56                   	push   esi
c001522f:	53                   	push   ebx
c0015230:	83 ec 68             	sub    esp,0x68
c0015233:	68 14 01 00 00       	push   0x114
c0015238:	e8 43 a4 ff ff       	call   c000f680 <malloc>
c001523d:	83 c4 0c             	add    esp,0xc
c0015240:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0015244:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0015248:	89 c3                	mov    ebx,eax
c001524a:	50                   	push   eax
c001524b:	e8 38 2f ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015250:	5e                   	pop    esi
c0015251:	5f                   	pop    edi
c0015252:	6a 01                	push   0x1
c0015254:	53                   	push   ebx
c0015255:	e8 4c 2f ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c001525a:	83 c4 10             	add    esp,0x10
c001525d:	85 c0                	test   eax,eax
c001525f:	0f 85 cb 01 00 00    	jne    c0015430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015265:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001526d:	83 ec 0c             	sub    esp,0xc
c0015270:	6a 34                	push   0x34
c0015272:	e8 09 a4 ff ff       	call   c000f680 <malloc>
c0015277:	59                   	pop    ecx
c0015278:	8d 74 24 34          	lea    esi,[esp+0x34]
c001527c:	89 c7                	mov    edi,eax
c001527e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015280:	56                   	push   esi
c0015281:	57                   	push   edi
c0015282:	6a 00                	push   0x0
c0015284:	6a 34                	push   0x34
c0015286:	53                   	push   ebx
c0015287:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001528a:	83 c4 20             	add    esp,0x20
c001528d:	85 c0                	test   eax,eax
c001528f:	0f 85 9b 01 00 00    	jne    c0015430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015295:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001529b:	0f 85 8f 01 00 00    	jne    c0015430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c00152a1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00152a4:	85 c0                	test   eax,eax
c00152a6:	0f 84 84 01 00 00    	je     c0015430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c00152ac:	52                   	push   edx
c00152ad:	31 d2                	xor    edx,edx
c00152af:	52                   	push   edx
c00152b0:	50                   	push   eax
c00152b1:	53                   	push   ebx
c00152b2:	e8 ad 2f ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00152b7:	83 c4 10             	add    esp,0x10
c00152ba:	85 c0                	test   eax,eax
c00152bc:	0f 85 6e 01 00 00    	jne    c0015430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c00152c2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00152c5:	83 ec 0c             	sub    esp,0xc
c00152c8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00152cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00152d0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00152d4:	0f af c2             	imul   eax,edx
c00152d7:	50                   	push   eax
c00152d8:	e8 a3 a3 ff ff       	call   c000f680 <malloc>
c00152dd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00152df:	89 34 24             	mov    DWORD PTR [esp],esi
c00152e2:	31 f6                	xor    esi,esi
c00152e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152ec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00152f0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00152f4:	0f af c2             	imul   eax,edx
c00152f7:	99                   	cdq    
c00152f8:	52                   	push   edx
c00152f9:	50                   	push   eax
c00152fa:	53                   	push   ebx
c00152fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152fe:	83 c4 20             	add    esp,0x20
c0015301:	66 3b 77 30          	cmp    si,WORD PTR [edi+0x30]
c0015305:	0f b7 c6             	movzx  eax,si
c0015308:	73 71                	jae    c001537b <Thr::loadProgramIntoMemory(Process*, char const*)+0x14f>
c001530a:	55                   	push   ebp
c001530b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001530f:	6b c0 28             	imul   eax,eax,0x28
c0015312:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015316:	6b d2 28             	imul   edx,edx,0x28
c0015319:	8b 04 01             	mov    eax,DWORD PTR [ecx+eax*1]
c001531c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015320:	31 d2                	xor    edx,edx
c0015322:	52                   	push   edx
c0015323:	50                   	push   eax
c0015324:	53                   	push   ebx
c0015325:	e8 3a 2f ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001532a:	83 c4 0c             	add    esp,0xc
c001532d:	6a 20                	push   0x20
c001532f:	6a 00                	push   0x0
c0015331:	8d 6c 24 3c          	lea    ebp,[esp+0x3c]
c0015335:	55                   	push   ebp
c0015336:	e8 b5 b1 fe ff       	call   c00004f0 <memset>
c001533b:	58                   	pop    eax
c001533c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001533e:	8d 54 24 38          	lea    edx,[esp+0x38]
c0015342:	52                   	push   edx
c0015343:	55                   	push   ebp
c0015344:	6a 00                	push   0x0
c0015346:	6a 1f                	push   0x1f
c0015348:	53                   	push   ebx
c0015349:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001534c:	83 c4 18             	add    esp,0x18
c001534f:	55                   	push   ebp
c0015350:	68 4f 87 02 c0       	push   0xc002874f
c0015355:	e8 26 b4 fe ff       	call   c0000780 <strcmp>
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	85 c0                	test   eax,eax
c001535f:	75 17                	jne    c0015378 <Thr::loadProgramIntoMemory(Process*, char const*)+0x14c>
c0015361:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0015365:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015369:	8a 80 76 02 00 00    	mov    al,BYTE PTR [eax+0x276]
c001536f:	83 c8 80             	or     eax,0xffffff80
c0015372:	88 82 76 02 00 00    	mov    BYTE PTR [edx+0x276],al
c0015378:	46                   	inc    esi
c0015379:	eb 86                	jmp    c0015301 <Thr::loadProgramIntoMemory(Process*, char const*)+0xd5>
c001537b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001537e:	85 c0                	test   eax,eax
c0015380:	0f 84 aa 00 00 00    	je     c0015430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c0015386:	31 d2                	xor    edx,edx
c0015388:	56                   	push   esi
c0015389:	52                   	push   edx
c001538a:	50                   	push   eax
c001538b:	53                   	push   ebx
c001538c:	e8 d3 2e ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	85 c0                	test   eax,eax
c0015396:	0f 85 94 00 00 00    	jne    c0015430 <Thr::loadProgramIntoMemory(Process*, char const*)+0x204>
c001539c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00153a0:	83 ec 0c             	sub    esp,0xc
c00153a3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00153a7:	0f af c2             	imul   eax,edx
c00153aa:	50                   	push   eax
c00153ab:	e8 d0 a2 ff ff       	call   c000f680 <malloc>
c00153b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00153b4:	59                   	pop    ecx
c00153b5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00153b7:	8d 44 24 34          	lea    eax,[esp+0x34]
c00153bb:	50                   	push   eax
c00153bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00153c0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00153c4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00153c8:	0f af c2             	imul   eax,edx
c00153cb:	99                   	cdq    
c00153cc:	52                   	push   edx
c00153cd:	50                   	push   eax
c00153ce:	53                   	push   ebx
c00153cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153d2:	83 c4 20             	add    esp,0x20
c00153d5:	31 c9                	xor    ecx,ecx
c00153d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00153df:	66 3b 4f 2c          	cmp    cx,WORD PTR [edi+0x2c]
c00153e3:	0f b7 e9             	movzx  ebp,cx
c00153e6:	0f 83 89 00 00 00    	jae    c0015475 <Thr::loadProgramIntoMemory(Process*, char const*)+0x249>
c00153ec:	c1 e5 05             	shl    ebp,0x5
c00153ef:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c00153f3:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c00153f7:	75 76                	jne    c001546f <Thr::loadProgramIntoMemory(Process*, char const*)+0x243>
c00153f9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00153fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015400:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0015403:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015407:	52                   	push   edx
c0015408:	31 d2                	xor    edx,edx
c001540a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001540d:	52                   	push   edx
c001540e:	50                   	push   eax
c001540f:	53                   	push   ebx
c0015410:	e8 4f 2e ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015415:	83 c4 10             	add    esp,0x10
c0015418:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001541c:	85 c0                	test   eax,eax
c001541e:	74 17                	je     c0015437 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20b>
c0015420:	83 ec 0c             	sub    esp,0xc
c0015423:	68 5e 87 02 c0       	push   0xc002875e
c0015428:	e8 39 1b ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001542d:	83 c4 10             	add    esp,0x10
c0015430:	31 c0                	xor    eax,eax
c0015432:	e9 8e 00 00 00       	jmp    c00154c5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x299>
c0015437:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001543b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001543e:	83 ec 0c             	sub    esp,0xc
c0015441:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0015444:	50                   	push   eax
c0015445:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015449:	56                   	push   esi
c001544a:	53                   	push   ebx
c001544b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0015452:	e8 4a fb ff ff       	call   c0014fa1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015457:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001545b:	83 c4 20             	add    esp,0x20
c001545e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0015462:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015466:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001546b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001546f:	41                   	inc    ecx
c0015470:	e9 6a ff ff ff       	jmp    c00153df <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b3>
c0015475:	8b 4c 24 70          	mov    ecx,DWORD PTR [esp+0x70]
c0015479:	83 ec 0c             	sub    esp,0xc
c001547c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015480:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015484:	8b 91 b2 05 00 00    	mov    edx,DWORD PTR [ecx+0x5b2]
c001548a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001548f:	89 b1 ae 05 00 00    	mov    DWORD PTR [ecx+0x5ae],esi
c0015495:	05 00 10 00 00       	add    eax,0x1000
c001549a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001549d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154a1:	e8 ea a1 ff ff       	call   c000f690 <free>
c00154a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154a9:	e8 e2 a1 ff ff       	call   c000f690 <free>
c00154ae:	58                   	pop    eax
c00154af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154b3:	e8 d8 a1 ff ff       	call   c000f690 <free>
c00154b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154bb:	e8 44 2d ff ff       	call   c0008204 <File::close()>
c00154c0:	83 c4 10             	add    esp,0x10
c00154c3:	b0 01                	mov    al,0x1
c00154c5:	83 c4 5c             	add    esp,0x5c
c00154c8:	5b                   	pop    ebx
c00154c9:	5e                   	pop    esi
c00154ca:	5f                   	pop    edi
c00154cb:	5d                   	pop    ebp
c00154cc:	c3                   	ret    

c00154cd <Thr::runtimeReferenceHelper()>:
c00154cd:	83 ec 18             	sub    esp,0x18
c00154d0:	68 66 87 02 c0       	push   0xc0028766
c00154d5:	e8 8c 1a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00154da:	fa                   	cli    
c00154db:	83 c4 10             	add    esp,0x10
c00154de:	eb fe                	jmp    c00154de <Thr::runtimeReferenceHelper()+0x11>

c00154e0 <Thr::getAddressOfKernelSymbol(char const*)>:
c00154e0:	57                   	push   edi
c00154e1:	56                   	push   esi
c00154e2:	53                   	push   ebx
c00154e3:	31 db                	xor    ebx,ebx
c00154e5:	39 1d 00 13 03 c0    	cmp    DWORD PTR ds:0xc0031300,ebx
c00154eb:	7e 3c                	jle    c0015529 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00154ed:	8b 34 9d e0 12 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffced20]
c00154f4:	31 ff                	xor    edi,edi
c00154f6:	39 3c 9d a0 12 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffced60],edi
c00154fd:	7e 27                	jle    c0015526 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00154ff:	50                   	push   eax
c0015500:	50                   	push   eax
c0015501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015505:	8b 06                	mov    eax,DWORD PTR [esi]
c0015507:	03 04 9d c0 12 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffced40]
c001550e:	50                   	push   eax
c001550f:	e8 6c b2 fe ff       	call   c0000780 <strcmp>
c0015514:	83 c4 10             	add    esp,0x10
c0015517:	85 c0                	test   eax,eax
c0015519:	75 05                	jne    c0015520 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001551b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001551e:	eb 0b                	jmp    c001552b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015520:	83 c6 10             	add    esi,0x10
c0015523:	47                   	inc    edi
c0015524:	eb d0                	jmp    c00154f6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015526:	43                   	inc    ebx
c0015527:	eb bc                	jmp    c00154e5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015529:	31 c0                	xor    eax,eax
c001552b:	5b                   	pop    ebx
c001552c:	5e                   	pop    esi
c001552d:	5f                   	pop    edi
c001552e:	c3                   	ret    

c001552f <Thr::loadKernelSymbolTable(char const*)>:
c001552f:	55                   	push   ebp
c0015530:	57                   	push   edi
c0015531:	56                   	push   esi
c0015532:	53                   	push   ebx
c0015533:	83 ec 68             	sub    esp,0x68
c0015536:	68 14 01 00 00       	push   0x114
c001553b:	8b 35 58 13 03 c0    	mov    esi,DWORD PTR ds:0xc0031358
c0015541:	e8 3a a1 ff ff       	call   c000f680 <malloc>
c0015546:	83 c4 0c             	add    esp,0xc
c0015549:	56                   	push   esi
c001554a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001554e:	89 c3                	mov    ebx,eax
c0015550:	50                   	push   eax
c0015551:	e8 32 2c ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015556:	5e                   	pop    esi
c0015557:	5f                   	pop    edi
c0015558:	6a 01                	push   0x1
c001555a:	53                   	push   ebx
c001555b:	e8 46 2c ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015560:	83 c4 10             	add    esp,0x10
c0015563:	85 c0                	test   eax,eax
c0015565:	74 0a                	je     c0015571 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0015567:	83 ec 0c             	sub    esp,0xc
c001556a:	68 88 87 02 c0       	push   0xc0028788
c001556f:	eb 34                	jmp    c00155a5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015571:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015579:	83 ec 0c             	sub    esp,0xc
c001557c:	6a 34                	push   0x34
c001557e:	e8 fd a0 ff ff       	call   c000f680 <malloc>
c0015583:	59                   	pop    ecx
c0015584:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015588:	89 c7                	mov    edi,eax
c001558a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001558c:	56                   	push   esi
c001558d:	57                   	push   edi
c001558e:	6a 00                	push   0x0
c0015590:	6a 34                	push   0x34
c0015592:	53                   	push   ebx
c0015593:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015596:	83 c4 20             	add    esp,0x20
c0015599:	85 c0                	test   eax,eax
c001559b:	74 17                	je     c00155b4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001559d:	83 ec 0c             	sub    esp,0xc
c00155a0:	68 9f 87 02 c0       	push   0xc002879f
c00155a5:	e8 2a a5 ff ff       	call   c000fad4 <KePanic(char const*)>
c00155aa:	83 c4 10             	add    esp,0x10
c00155ad:	31 c0                	xor    eax,eax
c00155af:	e9 31 02 00 00       	jmp    c00157e5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00155b4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00155ba:	75 e1                	jne    c001559d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00155bc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00155bf:	85 c0                	test   eax,eax
c00155c1:	74 da                	je     c001559d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00155c3:	52                   	push   edx
c00155c4:	31 d2                	xor    edx,edx
c00155c6:	52                   	push   edx
c00155c7:	50                   	push   eax
c00155c8:	53                   	push   ebx
c00155c9:	e8 96 2c ff ff       	call   c0008264 <File::seek(unsigned long long)>
c00155ce:	83 c4 10             	add    esp,0x10
c00155d1:	85 c0                	test   eax,eax
c00155d3:	75 c8                	jne    c001559d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00155d5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00155d9:	83 ec 0c             	sub    esp,0xc
c00155dc:	31 ed                	xor    ebp,ebp
c00155de:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00155e2:	0f af c2             	imul   eax,edx
c00155e5:	50                   	push   eax
c00155e6:	e8 95 a0 ff ff       	call   c000f680 <malloc>
c00155eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00155ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00155f0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00155f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155f8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00155fc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015600:	0f af c2             	imul   eax,edx
c0015603:	99                   	cdq    
c0015604:	52                   	push   edx
c0015605:	50                   	push   eax
c0015606:	53                   	push   ebx
c0015607:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001560a:	83 c4 20             	add    esp,0x20
c001560d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015615:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001561d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015625:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001562d:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015631:	0f b7 f5             	movzx  esi,bp
c0015634:	0f 83 a7 00 00 00    	jae    c00156e1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001563a:	6b f6 28             	imul   esi,esi,0x28
c001563d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015641:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015644:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015648:	50                   	push   eax
c0015649:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001564d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015651:	8b 16                	mov    edx,DWORD PTR [esi]
c0015653:	6b c0 28             	imul   eax,eax,0x28
c0015656:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001565a:	89 d0                	mov    eax,edx
c001565c:	31 d2                	xor    edx,edx
c001565e:	52                   	push   edx
c001565f:	50                   	push   eax
c0015660:	53                   	push   ebx
c0015661:	e8 fe 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015666:	83 c4 0c             	add    esp,0xc
c0015669:	6a 20                	push   0x20
c001566b:	6a 00                	push   0x0
c001566d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015671:	52                   	push   edx
c0015672:	e8 79 ae fe ff       	call   c00004f0 <memset>
c0015677:	58                   	pop    eax
c0015678:	8b 03                	mov    eax,DWORD PTR [ebx]
c001567a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001567e:	51                   	push   ecx
c001567f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015683:	52                   	push   edx
c0015684:	6a 00                	push   0x0
c0015686:	6a 1f                	push   0x1f
c0015688:	53                   	push   ebx
c0015689:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001568c:	83 c4 18             	add    esp,0x18
c001568f:	68 b6 87 02 c0       	push   0xc00287b6
c0015694:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015698:	52                   	push   edx
c0015699:	e8 e2 b0 fe ff       	call   c0000780 <strcmp>
c001569e:	83 c4 10             	add    esp,0x10
c00156a1:	85 c0                	test   eax,eax
c00156a3:	75 0f                	jne    c00156b4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00156a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00156a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00156ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00156b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00156b4:	50                   	push   eax
c00156b5:	50                   	push   eax
c00156b6:	68 be 87 02 c0       	push   0xc00287be
c00156bb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00156bf:	50                   	push   eax
c00156c0:	e8 bb b0 fe ff       	call   c0000780 <strcmp>
c00156c5:	83 c4 10             	add    esp,0x10
c00156c8:	85 c0                	test   eax,eax
c00156ca:	75 0f                	jne    c00156db <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00156cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00156cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00156d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00156d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00156db:	45                   	inc    ebp
c00156dc:	e9 4c ff ff ff       	jmp    c001562d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00156e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00156e6:	75 10                	jne    c00156f8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00156e8:	83 ec 0c             	sub    esp,0xc
c00156eb:	68 c6 87 02 c0       	push   0xc00287c6
c00156f0:	e8 df a3 ff ff       	call   c000fad4 <KePanic(char const*)>
c00156f5:	83 c4 10             	add    esp,0x10
c00156f8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00156fd:	75 10                	jne    c001570f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00156ff:	83 ec 0c             	sub    esp,0xc
c0015702:	68 c6 87 02 c0       	push   0xc00287c6
c0015707:	e8 c8 a3 ff ff       	call   c000fad4 <KePanic(char const*)>
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	50                   	push   eax
c0015710:	31 d2                	xor    edx,edx
c0015712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015716:	52                   	push   edx
c0015717:	50                   	push   eax
c0015718:	53                   	push   ebx
c0015719:	e8 46 2b ff ff       	call   c0008264 <File::seek(unsigned long long)>
c001571e:	5a                   	pop    edx
c001571f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015723:	e8 58 9f ff ff       	call   c000f680 <malloc>
c0015728:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001572c:	31 c9                	xor    ecx,ecx
c001572e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015732:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015734:	5e                   	pop    esi
c0015735:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015739:	55                   	push   ebp
c001573a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001573e:	51                   	push   ecx
c001573f:	52                   	push   edx
c0015740:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015744:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015748:	53                   	push   ebx
c0015749:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001574c:	83 c4 14             	add    esp,0x14
c001574f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015753:	e8 28 9f ff ff       	call   c000f680 <malloc>
c0015758:	89 c6                	mov    esi,eax
c001575a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001575c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001575f:	56                   	push   esi
c0015760:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015764:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015768:	51                   	push   ecx
c0015769:	52                   	push   edx
c001576a:	53                   	push   ebx
c001576b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001576e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015772:	83 c4 1c             	add    esp,0x1c
c0015775:	8b 15 00 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031300
c001577b:	c1 e8 04             	shr    eax,0x4
c001577e:	89 04 95 a0 12 03 c0 	mov    DWORD PTR [edx*4-0x3ffced60],eax
c0015785:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015789:	31 d2                	xor    edx,edx
c001578b:	52                   	push   edx
c001578c:	50                   	push   eax
c001578d:	53                   	push   ebx
c001578e:	e8 d1 2a ff ff       	call   c0008264 <File::seek(unsigned long long)>
c0015793:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015795:	31 d2                	xor    edx,edx
c0015797:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001579a:	56                   	push   esi
c001579b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001579f:	52                   	push   edx
c00157a0:	50                   	push   eax
c00157a1:	53                   	push   ebx
c00157a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157a5:	83 c4 14             	add    esp,0x14
c00157a8:	53                   	push   ebx
c00157a9:	e8 56 2a ff ff       	call   c0008204 <File::close()>
c00157ae:	5d                   	pop    ebp
c00157af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00157b3:	e8 d8 9e ff ff       	call   c000f690 <free>
c00157b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157bb:	e8 d0 9e ff ff       	call   c000f690 <free>
c00157c0:	a1 00 13 03 c0       	mov    eax,ds:0xc0031300
c00157c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00157c9:	83 c4 10             	add    esp,0x10
c00157cc:	89 34 85 c0 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced40],esi
c00157d3:	8d 50 01             	lea    edx,[eax+0x1]
c00157d6:	89 0c 85 e0 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced20],ecx
c00157dd:	b0 01                	mov    al,0x1
c00157df:	89 15 00 13 03 c0    	mov    DWORD PTR ds:0xc0031300,edx
c00157e5:	83 c4 5c             	add    esp,0x5c
c00157e8:	5b                   	pop    ebx
c00157e9:	5e                   	pop    esi
c00157ea:	5f                   	pop    edi
c00157eb:	5d                   	pop    ebp
c00157ec:	c3                   	ret    

c00157ed <KeIsELFValid(Elf32_Ehdr*)>:
c00157ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00157f1:	31 c0                	xor    eax,eax
c00157f3:	80 3a 7f             	cmp    BYTE PTR [edx],0x7f
c00157f6:	75 13                	jne    c001580b <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00157f8:	80 7a 01 45          	cmp    BYTE PTR [edx+0x1],0x45
c00157fc:	75 0d                	jne    c001580b <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c00157fe:	80 7a 02 4c          	cmp    BYTE PTR [edx+0x2],0x4c
c0015802:	75 07                	jne    c001580b <KeIsELFValid(Elf32_Ehdr*)+0x1e>
c0015804:	80 7a 03 46          	cmp    BYTE PTR [edx+0x3],0x46
c0015808:	0f 94 c0             	sete   al
c001580b:	c3                   	ret    

c001580c <KeGetELFSectionHeader(unsigned char*, int)>:
c001580c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015810:	6b 54 24 08 28       	imul   edx,DWORD PTR [esp+0x8],0x28
c0015815:	03 50 20             	add    edx,DWORD PTR [eax+0x20]
c0015818:	01 d0                	add    eax,edx
c001581a:	c3                   	ret    

c001581b <KeGetELFProgramHeader(unsigned char*, int)>:
c001581b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001581f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015823:	c1 e0 05             	shl    eax,0x5
c0015826:	03 42 1c             	add    eax,DWORD PTR [edx+0x1c]
c0015829:	01 d0                	add    eax,edx
c001582b:	c3                   	ret    

c001582c <KeLookupELFString(unsigned char*, int)>:
c001582c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015830:	31 c0                	xor    eax,eax
c0015832:	0f b7 51 32          	movzx  edx,WORD PTR [ecx+0x32]
c0015836:	85 d2                	test   edx,edx
c0015838:	74 14                	je     c001584e <KeLookupELFString(unsigned char*, int)+0x22>
c001583a:	52                   	push   edx
c001583b:	51                   	push   ecx
c001583c:	e8 cb ff ff ff       	call   c001580c <KeGetELFSectionHeader(unsigned char*, int)>
c0015841:	5a                   	pop    edx
c0015842:	5a                   	pop    edx
c0015843:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015846:	89 c8                	mov    eax,ecx
c0015848:	74 04                	je     c001584e <KeLookupELFString(unsigned char*, int)+0x22>
c001584a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001584e:	c3                   	ret    

c001584f <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>:
c001584f:	55                   	push   ebp
c0015850:	31 ed                	xor    ebp,ebp
c0015852:	57                   	push   edi
c0015853:	56                   	push   esi
c0015854:	53                   	push   ebx
c0015855:	83 ec 1c             	sub    esp,0x1c
c0015858:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001585c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001585f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015863:	89 04 24             	mov    DWORD PTR [esp],eax
c0015866:	0f b6 44 24 34       	movzx  eax,BYTE PTR [esp+0x34]
c001586b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001586f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015873:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c0015877:	39 e8                	cmp    eax,ebp
c0015879:	7e 79                	jle    c00158f4 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0xa5>
c001587b:	55                   	push   ebp
c001587c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015880:	e8 96 ff ff ff       	call   c001581b <KeGetELFProgramHeader(unsigned char*, int)>
c0015885:	5a                   	pop    edx
c0015886:	59                   	pop    ecx
c0015887:	83 38 01             	cmp    DWORD PTR [eax],0x1
c001588a:	75 62                	jne    c00158ee <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c001588c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001588f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015894:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
c0015897:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001589a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001589e:	75 22                	jne    c00158c2 <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x73>
c00158a0:	83 ec 0c             	sub    esp,0xc
c00158a3:	01 f3                	add    ebx,esi
c00158a5:	68 e0 87 02 c0       	push   0xc00287e0
c00158aa:	e8 25 a2 ff ff       	call   c000fad4 <KePanic(char const*)>
c00158af:	03 5c 24 18          	add    ebx,DWORD PTR [esp+0x18]
c00158b3:	83 c4 10             	add    esp,0x10
c00158b6:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00158b9:	0f 43 1c 24          	cmovae ebx,DWORD PTR [esp]
c00158bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158c0:	eb 2c                	jmp    c00158ee <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x9f>
c00158c2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00158c6:	89 d9                	mov    ecx,ebx
c00158c8:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c00158cc:	01 f2                	add    edx,esi
c00158ce:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00158d2:	03 70 04             	add    esi,DWORD PTR [eax+0x4]
c00158d5:	89 d7                	mov    edi,edx
c00158d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158d9:	50                   	push   eax
c00158da:	01 da                	add    edx,ebx
c00158dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00158e0:	29 d8                	sub    eax,ebx
c00158e2:	50                   	push   eax
c00158e3:	6a 00                	push   0x0
c00158e5:	52                   	push   edx
c00158e6:	e8 05 ac fe ff       	call   c00004f0 <memset>
c00158eb:	83 c4 10             	add    esp,0x10
c00158ee:	45                   	inc    ebp
c00158ef:	e9 7b ff ff ff       	jmp    c001586f <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)+0x20>
c00158f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00158f7:	83 c4 1c             	add    esp,0x1c
c00158fa:	5b                   	pop    ebx
c00158fb:	5e                   	pop    esi
c00158fc:	5f                   	pop    edi
c00158fd:	5d                   	pop    ebp
c00158fe:	c3                   	ret    

c00158ff <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>:
c00158ff:	57                   	push   edi
c0015900:	56                   	push   esi
c0015901:	53                   	push   ebx
c0015902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015906:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001590a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001590e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015912:	85 c0                	test   eax,eax
c0015914:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015917:	74 04                	je     c001591d <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015919:	85 db                	test   ebx,ebx
c001591b:	75 05                	jne    c0015922 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x23>
c001591d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0015920:	eb 5c                	jmp    c001597e <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x7f>
c0015922:	50                   	push   eax
c0015923:	51                   	push   ecx
c0015924:	e8 e3 fe ff ff       	call   c001580c <KeGetELFSectionHeader(unsigned char*, int)>
c0015929:	5f                   	pop    edi
c001592a:	5a                   	pop    edx
c001592b:	31 d2                	xor    edx,edx
c001592d:	89 c7                	mov    edi,eax
c001592f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015932:	f7 77 24             	div    DWORD PTR [edi+0x24]
c0015935:	39 c3                	cmp    ebx,eax
c0015937:	73 e4                	jae    c001591d <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x1e>
c0015939:	c1 e3 04             	shl    ebx,0x4
c001593c:	03 5f 10             	add    ebx,DWORD PTR [edi+0x10]
c001593f:	01 cb                	add    ebx,ecx
c0015941:	0f b7 53 0e          	movzx  edx,WORD PTR [ebx+0xe]
c0015945:	85 d2                	test   edx,edx
c0015947:	75 39                	jne    c0015982 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x83>
c0015949:	ff 77 18             	push   DWORD PTR [edi+0x18]
c001594c:	51                   	push   ecx
c001594d:	e8 ba fe ff ff       	call   c001580c <KeGetELFSectionHeader(unsigned char*, int)>
c0015952:	52                   	push   edx
c0015953:	03 0b                	add    ecx,DWORD PTR [ebx]
c0015955:	03 48 10             	add    ecx,DWORD PTR [eax+0x10]
c0015958:	51                   	push   ecx
c0015959:	e8 82 fb ff ff       	call   c00154e0 <Thr::getAddressOfKernelSymbol(char const*)>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	85 c0                	test   eax,eax
c0015963:	75 32                	jne    c0015997 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015965:	f6 43 0c 20          	test   BYTE PTR [ebx+0xc],0x20
c0015969:	75 03                	jne    c001596e <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x6f>
c001596b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001596e:	83 ec 0c             	sub    esp,0xc
c0015971:	68 09 88 02 c0       	push   0xc0028809
c0015976:	e8 eb 15 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001597b:	83 c4 10             	add    esp,0x10
c001597e:	31 c0                	xor    eax,eax
c0015980:	eb 15                	jmp    c0015997 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c0015982:	81 fa f1 ff 00 00    	cmp    edx,0xfff1
c0015988:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001598b:	74 0a                	je     c0015997 <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)+0x98>
c001598d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015991:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0015995:	01 d0                	add    eax,edx
c0015997:	5b                   	pop    ebx
c0015998:	5e                   	pop    esi
c0015999:	5f                   	pop    edi
c001599a:	c3                   	ret    

c001599b <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>:
c001599b:	55                   	push   ebp
c001599c:	57                   	push   edi
c001599d:	56                   	push   esi
c001599e:	53                   	push   ebx
c001599f:	83 ec 1c             	sub    esp,0x1c
c00159a2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00159a6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00159aa:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00159ae:	8b 69 18             	mov    ebp,DWORD PTR [ecx+0x18]
c00159b1:	8b 1e                	mov    ebx,DWORD PTR [esi]
c00159b3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00159b6:	29 ef                	sub    edi,ebp
c00159b8:	01 fb                	add    ebx,edi
c00159ba:	c1 ea 08             	shr    edx,0x8
c00159bd:	74 2d                	je     c00159ec <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x51>
c00159bf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00159c4:	50                   	push   eax
c00159c5:	50                   	push   eax
c00159c6:	55                   	push   ebp
c00159c7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00159cb:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00159cf:	50                   	push   eax
c00159d0:	52                   	push   edx
c00159d1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00159d5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00159d8:	51                   	push   ecx
c00159d9:	e8 21 ff ff ff       	call   c00158ff <KeGetELFSymbolValue(unsigned char*, int, int, bool*, unsigned long, unsigned long)>
c00159de:	83 c4 20             	add    esp,0x20
c00159e1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00159e6:	74 06                	je     c00159ee <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x53>
c00159e8:	31 c0                	xor    eax,eax
c00159ea:	eb 27                	jmp    c0015a13 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c00159ec:	31 c0                	xor    eax,eax
c00159ee:	0f b6 56 04          	movzx  edx,BYTE PTR [esi+0x4]
c00159f2:	83 fa 01             	cmp    edx,0x1
c00159f5:	75 04                	jne    c00159fb <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x60>
c00159f7:	01 03                	add    DWORD PTR [ebx],eax
c00159f9:	eb 16                	jmp    c0015a11 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c00159fb:	83 fa 02             	cmp    edx,0x2
c00159fe:	75 08                	jne    c0015a08 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x6d>
c0015a00:	03 03                	add    eax,DWORD PTR [ebx]
c0015a02:	29 d8                	sub    eax,ebx
c0015a04:	89 03                	mov    DWORD PTR [ebx],eax
c0015a06:	eb 09                	jmp    c0015a11 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x76>
c0015a08:	31 c0                	xor    eax,eax
c0015a0a:	83 fa 08             	cmp    edx,0x8
c0015a0d:	75 04                	jne    c0015a13 <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)+0x78>
c0015a0f:	01 3b                	add    DWORD PTR [ebx],edi
c0015a11:	b0 01                	mov    al,0x1
c0015a13:	83 c4 1c             	add    esp,0x1c
c0015a16:	5b                   	pop    ebx
c0015a17:	5e                   	pop    esi
c0015a18:	5f                   	pop    edi
c0015a19:	5d                   	pop    ebp
c0015a1a:	c3                   	ret    

c0015a1b <KePerformRelocations(unsigned char*, unsigned long)>:
c0015a1b:	55                   	push   ebp
c0015a1c:	31 ed                	xor    ebp,ebp
c0015a1e:	57                   	push   edi
c0015a1f:	56                   	push   esi
c0015a20:	53                   	push   ebx
c0015a21:	83 ec 1c             	sub    esp,0x1c
c0015a24:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a28:	0f b7 46 30          	movzx  eax,WORD PTR [esi+0x30]
c0015a2c:	39 e8                	cmp    eax,ebp
c0015a2e:	0f 8e 92 00 00 00    	jle    c0015ac6 <KePerformRelocations(unsigned char*, unsigned long)+0xab>
c0015a34:	55                   	push   ebp
c0015a35:	56                   	push   esi
c0015a36:	e8 d1 fd ff ff       	call   c001580c <KeGetELFSectionHeader(unsigned char*, int)>
c0015a3b:	5a                   	pop    edx
c0015a3c:	59                   	pop    ecx
c0015a3d:	89 c3                	mov    ebx,eax
c0015a3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015a42:	83 f8 09             	cmp    eax,0x9
c0015a45:	75 64                	jne    c0015aab <KePerformRelocations(unsigned char*, unsigned long)+0x90>
c0015a47:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015a4a:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0015a4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a51:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015a54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a58:	ff 33                	push   DWORD PTR [ebx]
c0015a5a:	56                   	push   esi
c0015a5b:	e8 cc fd ff ff       	call   c001582c <KeLookupELFString(unsigned char*, int)>
c0015a60:	68 2a 88 02 c0       	push   0xc002882a
c0015a65:	50                   	push   eax
c0015a66:	e8 15 ad fe ff       	call   c0000780 <strcmp>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	85 c0                	test   eax,eax
c0015a70:	89 c1                	mov    ecx,eax
c0015a72:	75 4c                	jne    c0015ac0 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015a74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015a78:	31 d2                	xor    edx,edx
c0015a7a:	01 f7                	add    edi,esi
c0015a7c:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0015a80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015a84:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0015a88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a8c:	7d 32                	jge    c0015ac0 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015a8e:	57                   	push   edi
c0015a8f:	83 c7 08             	add    edi,0x8
c0015a92:	53                   	push   ebx
c0015a93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015a97:	56                   	push   esi
c0015a98:	e8 fe fe ff ff       	call   c001599b <KePerformRelocation(unsigned char*, unsigned long, Elf32_Shdr*, Elf32_Rel*)>
c0015a9d:	83 c4 10             	add    esp,0x10
c0015aa0:	84 c0                	test   al,al
c0015aa2:	74 24                	je     c0015ac8 <KePerformRelocations(unsigned char*, unsigned long)+0xad>
c0015aa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015aa8:	41                   	inc    ecx
c0015aa9:	eb d9                	jmp    c0015a84 <KePerformRelocations(unsigned char*, unsigned long)+0x69>
c0015aab:	83 f8 04             	cmp    eax,0x4
c0015aae:	75 10                	jne    c0015ac0 <KePerformRelocations(unsigned char*, unsigned long)+0xa5>
c0015ab0:	83 ec 0c             	sub    esp,0xc
c0015ab3:	68 33 88 02 c0       	push   0xc0028833
c0015ab8:	e8 17 a0 ff ff       	call   c000fad4 <KePanic(char const*)>
c0015abd:	83 c4 10             	add    esp,0x10
c0015ac0:	45                   	inc    ebp
c0015ac1:	e9 62 ff ff ff       	jmp    c0015a28 <KePerformRelocations(unsigned char*, unsigned long)+0xd>
c0015ac6:	b0 01                	mov    al,0x1
c0015ac8:	83 c4 1c             	add    esp,0x1c
c0015acb:	5b                   	pop    ebx
c0015acc:	5e                   	pop    esi
c0015acd:	5f                   	pop    edi
c0015ace:	5d                   	pop    ebp
c0015acf:	c3                   	ret    

c0015ad0 <KeLoadELF(unsigned char*, bool, unsigned long)>:
c0015ad0:	57                   	push   edi
c0015ad1:	56                   	push   esi
c0015ad2:	53                   	push   ebx
c0015ad3:	83 ec 10             	sub    esp,0x10
c0015ad6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ada:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0015ade:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015ae2:	53                   	push   ebx
c0015ae3:	e8 05 fd ff ff       	call   c00157ed <KeIsELFValid(Elf32_Ehdr*)>
c0015ae8:	59                   	pop    ecx
c0015ae9:	84 c0                	test   al,al
c0015aeb:	75 04                	jne    c0015af1 <KeLoadELF(unsigned char*, bool, unsigned long)+0x21>
c0015aed:	31 c0                	xor    eax,eax
c0015aef:	eb 4d                	jmp    c0015b3e <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015af1:	81 e6 ff 00 00 00    	and    esi,0xff
c0015af7:	74 07                	je     c0015b00 <KeLoadELF(unsigned char*, bool, unsigned long)+0x30>
c0015af9:	66 83 7b 30 00       	cmp    WORD PTR [ebx+0x30],0x0
c0015afe:	74 ed                	je     c0015aed <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015b00:	66 83 7b 2c 00       	cmp    WORD PTR [ebx+0x2c],0x0
c0015b05:	74 e6                	je     c0015aed <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015b07:	52                   	push   edx
c0015b08:	57                   	push   edi
c0015b09:	56                   	push   esi
c0015b0a:	53                   	push   ebx
c0015b0b:	e8 3f fd ff ff       	call   c001584f <KeLoadELFProgramHeaders(unsigned char*, bool, unsigned long)>
c0015b10:	59                   	pop    ecx
c0015b11:	5a                   	pop    edx
c0015b12:	50                   	push   eax
c0015b13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015b17:	68 54 88 02 c0       	push   0xc0028854
c0015b1c:	e8 45 14 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015b21:	83 c4 10             	add    esp,0x10
c0015b24:	85 f6                	test   esi,esi
c0015b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b2a:	74 12                	je     c0015b3e <KeLoadELF(unsigned char*, bool, unsigned long)+0x6e>
c0015b2c:	50                   	push   eax
c0015b2d:	50                   	push   eax
c0015b2e:	57                   	push   edi
c0015b2f:	53                   	push   ebx
c0015b30:	e8 e6 fe ff ff       	call   c0015a1b <KePerformRelocations(unsigned char*, unsigned long)>
c0015b35:	83 c4 10             	add    esp,0x10
c0015b38:	84 c0                	test   al,al
c0015b3a:	74 b1                	je     c0015aed <KeLoadELF(unsigned char*, bool, unsigned long)+0x1d>
c0015b3c:	89 f8                	mov    eax,edi
c0015b3e:	83 c4 10             	add    esp,0x10
c0015b41:	5b                   	pop    ebx
c0015b42:	5e                   	pop    esi
c0015b43:	5f                   	pop    edi
c0015b44:	c3                   	ret    

c0015b45 <KeLoadDriver(char const*)>:
c0015b45:	55                   	push   ebp
c0015b46:	57                   	push   edi
c0015b47:	56                   	push   esi
c0015b48:	53                   	push   ebx
c0015b49:	83 ec 34             	sub    esp,0x34
c0015b4c:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c0015b50:	53                   	push   ebx
c0015b51:	68 78 88 02 c0       	push   0xc0028878
c0015b56:	e8 0b 14 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0015b5b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015b62:	e8 19 9b ff ff       	call   c000f680 <malloc>
c0015b67:	83 c4 0c             	add    esp,0xc
c0015b6a:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c0015b70:	53                   	push   ebx
c0015b71:	50                   	push   eax
c0015b72:	89 c6                	mov    esi,eax
c0015b74:	e8 0f 26 ff ff       	call   c0008188 <File::File(char const*, Process*)>
c0015b79:	83 c4 10             	add    esp,0x10
c0015b7c:	85 f6                	test   esi,esi
c0015b7e:	0f 84 11 01 00 00    	je     c0015c95 <KeLoadDriver(char const*)+0x150>
c0015b84:	50                   	push   eax
c0015b85:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015b89:	50                   	push   eax
c0015b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015b8e:	50                   	push   eax
c0015b8f:	56                   	push   esi
c0015b90:	e8 13 29 ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0015b95:	83 c4 10             	add    esp,0x10
c0015b98:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015b9d:	0f 85 f2 00 00 00    	jne    c0015c95 <KeLoadDriver(char const*)+0x150>
c0015ba3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015ba7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015bab:	89 d1                	mov    ecx,edx
c0015bad:	09 c1                	or     ecx,eax
c0015baf:	0f 84 e0 00 00 00    	je     c0015c95 <KeLoadDriver(char const*)+0x150>
c0015bb5:	05 ff 0f 00 00       	add    eax,0xfff
c0015bba:	51                   	push   ecx
c0015bbb:	83 d2 00             	adc    edx,0x0
c0015bbe:	6a 03                	push   0x3
c0015bc0:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015bc4:	50                   	push   eax
c0015bc5:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c0015bcb:	e8 2c dc ff ff       	call   c00137fc <VAS::allocatePages(int, int)>
c0015bd0:	5f                   	pop    edi
c0015bd1:	5d                   	pop    ebp
c0015bd2:	89 c3                	mov    ebx,eax
c0015bd4:	6a 01                	push   0x1
c0015bd6:	56                   	push   esi
c0015bd7:	e8 ca 25 ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0015bdc:	83 c4 10             	add    esp,0x10
c0015bdf:	85 c0                	test   eax,eax
c0015be1:	74 11                	je     c0015bf4 <KeLoadDriver(char const*)+0xaf>
c0015be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0015be5:	83 ec 0c             	sub    esp,0xc
c0015be8:	56                   	push   esi
c0015be9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015bec:	83 c4 10             	add    esp,0x10
c0015bef:	e9 a1 00 00 00       	jmp    c0015c95 <KeLoadDriver(char const*)+0x150>
c0015bf4:	83 ec 0c             	sub    esp,0xc
c0015bf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015bfb:	e8 80 9a ff ff       	call   c000f680 <malloc>
c0015c00:	5d                   	pop    ebp
c0015c01:	31 ed                	xor    ebp,ebp
c0015c03:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015c07:	89 c7                	mov    edi,eax
c0015c09:	8b 06                	mov    eax,DWORD PTR [esi]
c0015c0b:	52                   	push   edx
c0015c0c:	57                   	push   edi
c0015c0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015c15:	56                   	push   esi
c0015c16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015c19:	83 c4 14             	add    esp,0x14
c0015c1c:	56                   	push   esi
c0015c1d:	e8 e2 25 ff ff       	call   c0008204 <File::close()>
c0015c22:	83 c4 0c             	add    esp,0xc
c0015c25:	53                   	push   ebx
c0015c26:	6a 01                	push   0x1
c0015c28:	57                   	push   edi
c0015c29:	e8 a2 fe ff ff       	call   c0015ad0 <KeLoadELF(unsigned char*, bool, unsigned long)>
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	89 c6                	mov    esi,eax
c0015c33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015c3b:	05 ff 0f 00 00       	add    eax,0xfff
c0015c40:	83 d2 00             	adc    edx,0x0
c0015c43:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c4b:	c1 ea 0c             	shr    edx,0xc
c0015c4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c52:	ba 00 00 00 00       	mov    edx,0x0
c0015c57:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0015c5b:	89 d0                	mov    eax,edx
c0015c5d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0015c61:	73 34                	jae    c0015c97 <KeLoadDriver(char const*)+0x152>
c0015c63:	50                   	push   eax
c0015c64:	50                   	push   eax
c0015c65:	89 e8                	mov    eax,ebp
c0015c67:	c1 e0 0c             	shl    eax,0xc
c0015c6a:	01 d8                	add    eax,ebx
c0015c6c:	50                   	push   eax
c0015c6d:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c0015c73:	e8 82 d6 ff ff       	call   c00132fa <VAS::getPageTableEntry(unsigned long)>
c0015c78:	83 c4 10             	add    esp,0x10
c0015c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7d:	a8 60                	test   al,0x60
c0015c7f:	75 11                	jne    c0015c92 <KeLoadDriver(char const*)+0x14d>
c0015c81:	83 ec 0c             	sub    esp,0xc
c0015c84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015c89:	50                   	push   eax
c0015c8a:	e8 d6 9f ff ff       	call   c000fc65 <Phys::freePage(unsigned long)>
c0015c8f:	83 c4 10             	add    esp,0x10
c0015c92:	45                   	inc    ebp
c0015c93:	eb 9e                	jmp    c0015c33 <KeLoadDriver(char const*)+0xee>
c0015c95:	31 f6                	xor    esi,esi
c0015c97:	83 c4 2c             	add    esp,0x2c
c0015c9a:	89 f0                	mov    eax,esi
c0015c9c:	5b                   	pop    ebx
c0015c9d:	5e                   	pop    esi
c0015c9e:	5f                   	pop    edi
c0015c9f:	5d                   	pop    ebp
c0015ca0:	c3                   	ret    

c0015ca1 <KeExecuteDriver(unsigned long, void*)>:
c0015ca1:	56                   	push   esi
c0015ca2:	53                   	push   ebx
c0015ca3:	51                   	push   ecx
c0015ca4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ca8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015cac:	85 db                	test   ebx,ebx
c0015cae:	75 10                	jne    c0015cc0 <KeExecuteDriver(unsigned long, void*)+0x1f>
c0015cb0:	83 ec 0c             	sub    esp,0xc
c0015cb3:	68 8e 88 02 c0       	push   0xc002888e
c0015cb8:	e8 17 9e ff ff       	call   c000fad4 <KePanic(char const*)>
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0015cc4:	89 d8                	mov    eax,ebx
c0015cc6:	5a                   	pop    edx
c0015cc7:	5b                   	pop    ebx
c0015cc8:	5e                   	pop    esi
c0015cc9:	ff e0                	jmp    eax

c0015ccb <KeLoadAndExecuteDriver(char const*, void*, bool)>:
c0015ccb:	57                   	push   edi
c0015ccc:	56                   	push   esi
c0015ccd:	53                   	push   ebx
c0015cce:	81 ec 0c 01 00 00    	sub    esp,0x10c
c0015cd4:	8b b4 24 1c 01 00 00 	mov    esi,DWORD PTR [esp+0x11c]
c0015cdb:	8b bc 24 24 01 00 00 	mov    edi,DWORD PTR [esp+0x124]
c0015ce2:	56                   	push   esi
c0015ce3:	e8 5d fe ff ff       	call   c0015b45 <KeLoadDriver(char const*)>
c0015ce8:	83 c4 10             	add    esp,0x10
c0015ceb:	85 c0                	test   eax,eax
c0015ced:	74 16                	je     c0015d05 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x3a>
c0015cef:	53                   	push   ebx
c0015cf0:	53                   	push   ebx
c0015cf1:	b3 01                	mov    bl,0x1
c0015cf3:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0015cfa:	50                   	push   eax
c0015cfb:	e8 a1 ff ff ff       	call   c0015ca1 <KeExecuteDriver(unsigned long, void*)>
c0015d00:	83 c4 10             	add    esp,0x10
c0015d03:	eb 2d                	jmp    c0015d32 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0015d05:	89 fb                	mov    ebx,edi
c0015d07:	84 db                	test   bl,bl
c0015d09:	74 27                	je     c0015d32 <KeLoadAndExecuteDriver(char const*, void*, bool)+0x67>
c0015d0b:	50                   	push   eax
c0015d0c:	50                   	push   eax
c0015d0d:	68 b8 88 02 c0       	push   0xc00288b8
c0015d12:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015d16:	53                   	push   ebx
c0015d17:	e8 34 a9 fe ff       	call   c0000650 <strcpy>
c0015d1c:	5a                   	pop    edx
c0015d1d:	59                   	pop    ecx
c0015d1e:	56                   	push   esi
c0015d1f:	53                   	push   ebx
c0015d20:	e8 4b ab fe ff       	call   c0000870 <strcat>
c0015d25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d28:	31 db                	xor    ebx,ebx
c0015d2a:	e8 a5 9d ff ff       	call   c000fad4 <KePanic(char const*)>
c0015d2f:	83 c4 10             	add    esp,0x10
c0015d32:	81 c4 00 01 00 00    	add    esp,0x100
c0015d38:	88 d8                	mov    al,bl
c0015d3a:	5b                   	pop    ebx
c0015d3b:	5e                   	pop    esi
c0015d3c:	5f                   	pop    edi
c0015d3d:	c3                   	ret    

c0015d3e <KeProcessExec(Process*, char const*)>:
c0015d3e:	56                   	push   esi
c0015d3f:	53                   	push   ebx
c0015d40:	83 ec 04             	sub    esp,0x4
c0015d43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d47:	8b b3 b2 05 00 00    	mov    esi,DWORD PTR [ebx+0x5b2]
c0015d4d:	85 f6                	test   esi,esi
c0015d4f:	74 16                	je     c0015d67 <KeProcessExec(Process*, char const*)+0x29>
c0015d51:	83 ec 0c             	sub    esp,0xc
c0015d54:	56                   	push   esi
c0015d55:	e8 32 d8 ff ff       	call   c001358c <VAS::~VAS()>
c0015d5a:	58                   	pop    eax
c0015d5b:	5a                   	pop    edx
c0015d5c:	6a 14                	push   0x14
c0015d5e:	56                   	push   esi
c0015d5f:	e8 24 75 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	83 ec 0c             	sub    esp,0xc
c0015d6a:	6a 14                	push   0x14
c0015d6c:	e8 0f 99 ff ff       	call   c000f680 <malloc>
c0015d71:	89 c6                	mov    esi,eax
c0015d73:	58                   	pop    eax
c0015d74:	5a                   	pop    edx
c0015d75:	6a 00                	push   0x0
c0015d77:	56                   	push   esi
c0015d78:	e8 bb dc ff ff       	call   c0013a38 <VAS::VAS(bool)>
c0015d7d:	89 b3 b2 05 00 00    	mov    DWORD PTR [ebx+0x5b2],esi
c0015d83:	59                   	pop    ecx
c0015d84:	5e                   	pop    esi
c0015d85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015d89:	50                   	push   eax
c0015d8a:	53                   	push   ebx
c0015d8b:	e8 9c f4 ff ff       	call   c001522c <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015d90:	83 c4 14             	add    esp,0x14
c0015d93:	31 c0                	xor    eax,eax
c0015d95:	5b                   	pop    ebx
c0015d96:	5e                   	pop    esi
c0015d97:	c3                   	ret    

c0015d98 <userModeEntryPoint(void*)>:
c0015d98:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0015da0:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0015da5:	85 c0                	test   eax,eax
c0015da7:	75 03                	jne    c0015dac <userModeEntryPoint(void*)+0x14>
c0015da9:	fb                   	sti    
c0015daa:	66 90                	xchg   ax,ax
c0015dac:	fb                   	sti    
c0015dad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015db2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015db5:	8b 80 ae 05 00 00    	mov    eax,DWORD PTR [eax+0x5ae]
c0015dbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dbf:	e9 7b a4 fe ff       	jmp    c000023f <goToUsermode>

c0015dc4 <changeTSS>:
c0015dc4:	83 ec 14             	sub    esp,0x14
c0015dc7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dcc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0015dcf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015dd4:	c1 e2 15             	shl    edx,0x15
c0015dd7:	29 d0                	sub    eax,edx
c0015dd9:	50                   	push   eax
c0015dda:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0015ddf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015de5:	05 68 11 00 00       	add    eax,0x1168
c0015dea:	50                   	push   eax
c0015deb:	e8 ec ca ff ff       	call   c00128dc <TSS::setESP(unsigned long)>
c0015df0:	83 c4 1c             	add    esp,0x1c
c0015df3:	c3                   	ret    

c0015df4 <switchToThread(ThreadControlBlock*)>:
c0015df4:	57                   	push   edi
c0015df5:	8b 0d 2c 13 03 c0    	mov    ecx,DWORD PTR ds:0xc003132c
c0015dfb:	56                   	push   esi
c0015dfc:	53                   	push   ebx
c0015dfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e01:	85 c9                	test   ecx,ecx
c0015e03:	0f 85 9b 00 00 00    	jne    c0015ea4 <switchToThread(ThreadControlBlock*)+0xb0>
c0015e09:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c0015e0d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015e13:	0f 84 87 00 00 00    	je     c0015ea0 <switchToThread(ThreadControlBlock*)+0xac>
c0015e19:	b8 00 04 00 00       	mov    eax,0x400
c0015e1e:	29 d0                	sub    eax,edx
c0015e20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0015e23:	d1 f8                	sar    eax,1
c0015e25:	01 d0                	add    eax,edx
c0015e27:	90                   	nop
c0015e28:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0015e2b:	e8 e2 48 00 00       	call   c001a712 <HalQueryPerformanceCounter()>
c0015e30:	a3 70 13 03 c0       	mov    ds:0xc0031370,eax
c0015e35:	89 c6                	mov    esi,eax
c0015e37:	89 d7                	mov    edi,edx
c0015e39:	2b 35 60 13 03 c0    	sub    esi,DWORD PTR ds:0xc0031360
c0015e3f:	a3 60 13 03 c0       	mov    ds:0xc0031360,eax
c0015e44:	1b 3d 64 13 03 c0    	sbb    edi,DWORD PTR ds:0xc0031364
c0015e4a:	89 35 68 13 03 c0    	mov    DWORD PTR ds:0xc0031368,esi
c0015e50:	89 15 74 13 03 c0    	mov    DWORD PTR ds:0xc0031374,edx
c0015e56:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e5c:	89 15 64 13 03 c0    	mov    DWORD PTR ds:0xc0031364,edx
c0015e62:	89 3d 6c 13 03 c0    	mov    DWORD PTR ds:0xc003136c,edi
c0015e68:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015e6b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015e6e:	01 c6                	add    esi,eax
c0015e70:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015e73:	11 d7                	adc    edi,edx
c0015e75:	83 ec 0c             	sub    esp,0xc
c0015e78:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015e7b:	53                   	push   ebx
c0015e7c:	e8 f6 a3 fe ff       	call   c0000277 <switchToThreadASM>
c0015e81:	0f 20 c0             	mov    eax,cr0
c0015e84:	83 c8 08             	or     eax,0x8
c0015e87:	0f 22 c0             	mov    cr0,eax
c0015e8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e8f:	83 c4 10             	add    esp,0x10
c0015e92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015e96:	5b                   	pop    ebx
c0015e97:	5e                   	pop    esi
c0015e98:	5f                   	pop    edi
c0015e99:	e9 12 f0 ff ff       	jmp    c0014eb0 <KeCheckAlarm(ThreadControlBlock*)>
c0015e9e:	66 90                	xchg   ax,ax
c0015ea0:	31 c0                	xor    eax,eax
c0015ea2:	eb 84                	jmp    c0015e28 <switchToThread(ThreadControlBlock*)+0x34>
c0015ea4:	5b                   	pop    ebx
c0015ea5:	c7 05 28 13 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x1
c0015eaf:	5e                   	pop    esi
c0015eb0:	5f                   	pop    edi
c0015eb1:	c3                   	ret    
c0015eb2:	66 90                	xchg   ax,ax

c0015eb4 <Process::addArgs(char**)>:
c0015eb4:	57                   	push   edi
c0015eb5:	56                   	push   esi
c0015eb6:	53                   	push   ebx
c0015eb7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015ebb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015ebf:	85 f6                	test   esi,esi
c0015ec1:	c7 87 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x5b6],0x0
c0015ecb:	74 4f                	je     c0015f1c <Process::addArgs(char**)+0x68>
c0015ecd:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ecf:	85 c0                	test   eax,eax
c0015ed1:	74 49                	je     c0015f1c <Process::addArgs(char**)+0x68>
c0015ed3:	31 db                	xor    ebx,ebx
c0015ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ed8:	83 ec 0c             	sub    esp,0xc
c0015edb:	50                   	push   eax
c0015edc:	e8 9f a6 fe ff       	call   c0000580 <strlen>
c0015ee1:	83 c0 01             	add    eax,0x1
c0015ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ee7:	e8 94 97 ff ff       	call   c000f680 <malloc>
c0015eec:	89 84 9f ba 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x5ba],eax
c0015ef3:	5a                   	pop    edx
c0015ef4:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0015ef7:	83 c3 01             	add    ebx,0x1
c0015efa:	59                   	pop    ecx
c0015efb:	52                   	push   edx
c0015efc:	50                   	push   eax
c0015efd:	e8 4e a7 fe ff       	call   c0000650 <strcpy>
c0015f02:	8b 8f b6 05 00 00    	mov    ecx,DWORD PTR [edi+0x5b6]
c0015f08:	83 c4 10             	add    esp,0x10
c0015f0b:	83 c1 01             	add    ecx,0x1
c0015f0e:	89 8f b6 05 00 00    	mov    DWORD PTR [edi+0x5b6],ecx
c0015f14:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0015f17:	85 c0                	test   eax,eax
c0015f19:	75 bd                	jne    c0015ed8 <Process::addArgs(char**)+0x24>
c0015f1b:	90                   	nop
c0015f1c:	5b                   	pop    ebx
c0015f1d:	5e                   	pop    esi
c0015f1e:	5f                   	pop    edi
c0015f1f:	c3                   	ret    

c0015f20 <Process::Process(char const*, Process*, char**)>:
c0015f20:	56                   	push   esi
c0015f21:	53                   	push   ebx
c0015f22:	83 ec 14             	sub    esp,0x14
c0015f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f29:	05 0c 02 00 00       	add    eax,0x20c
c0015f2e:	bb 07 00 00 00       	mov    ebx,0x7
c0015f33:	89 c6                	mov    esi,eax
c0015f35:	8d 76 00             	lea    esi,[esi+0x0]
c0015f38:	85 db                	test   ebx,ebx
c0015f3a:	78 14                	js     c0015f50 <Process::Process(char const*, Process*, char**)+0x30>
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	56                   	push   esi
c0015f40:	e8 23 ff 00 00       	call   c0025e68 <ThreadControlBlock::ThreadControlBlock()>
c0015f45:	83 c4 10             	add    esp,0x10
c0015f48:	83 c6 73             	add    esi,0x73
c0015f4b:	83 eb 01             	sub    ebx,0x1
c0015f4e:	eb e8                	jmp    c0015f38 <Process::Process(char const*, Process*, char**)+0x18>
c0015f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f54:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c0015f5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f5f:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c0015f66:	83 ec 0c             	sub    esp,0xc
c0015f69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f6d:	e8 3c 85 ff ff       	call   c000e4ae <KeNewProcessEnv(Process*)>
c0015f72:	83 c4 10             	add    esp,0x10
c0015f75:	89 c2                	mov    edx,eax
c0015f77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f7b:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c0015f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f85:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c0015f8e:	a1 5c b4 02 c0       	mov    eax,ds:0xc002b45c
c0015f93:	8d 50 01             	lea    edx,[eax+0x1]
c0015f96:	89 15 5c b4 02 c0    	mov    DWORD PTR ds:0xc002b45c,edx
c0015f9c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015fa0:	89 02                	mov    DWORD PTR [edx],eax
c0015fa2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015faa:	83 ec 0c             	sub    esp,0xc
c0015fad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015fb1:	e8 ca 96 ff ff       	call   c000f680 <malloc>
c0015fb6:	83 c4 10             	add    esp,0x10
c0015fb9:	89 c3                	mov    ebx,eax
c0015fbb:	83 ec 08             	sub    esp,0x8
c0015fbe:	6a 00                	push   0x0
c0015fc0:	53                   	push   ebx
c0015fc1:	e8 72 da ff ff       	call   c0013a38 <VAS::VAS(bool)>
c0015fc6:	83 c4 10             	add    esp,0x10
c0015fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fcd:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0015fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fd7:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0015fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fe5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015fe9:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0015fef:	e8 47 ac ff ff       	call   c0010c3b <KeInitSignals()>
c0015ff4:	89 c2                	mov    edx,eax
c0015ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ffa:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016004:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001600a:	85 c0                	test   eax,eax
c001600c:	74 42                	je     c0016050 <Process::Process(char const*, Process*, char**)+0x130>
c001600e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016012:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016018:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c001601e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016022:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c0016028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001602c:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016032:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001603c:	05 0c 01 00 00       	add    eax,0x10c
c0016041:	83 ec 08             	sub    esp,0x8
c0016044:	52                   	push   edx
c0016045:	50                   	push   eax
c0016046:	e8 05 a6 fe ff       	call   c0000650 <strcpy>
c001604b:	83 c4 10             	add    esp,0x10
c001604e:	eb 7c                	jmp    c00160cc <Process::Process(char const*, Process*, char**)+0x1ac>
c0016050:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016058:	83 ec 0c             	sub    esp,0xc
c001605b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001605f:	e8 1c 96 ff ff       	call   c000f680 <malloc>
c0016064:	83 c4 10             	add    esp,0x10
c0016067:	89 c3                	mov    ebx,eax
c0016069:	83 ec 08             	sub    esp,0x8
c001606c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016070:	53                   	push   ebx
c0016071:	e8 86 c5 ff ff       	call   c00125fc <VgaText::VgaText(char const*)>
c0016076:	83 c4 10             	add    esp,0x10
c0016079:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001607d:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c0016083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016087:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001608d:	83 ec 0c             	sub    esp,0xc
c0016090:	50                   	push   eax
c0016091:	e8 cc bd ff ff       	call   c0011e62 <addToTerminalCycle(VgaText*)>
c0016096:	83 c4 10             	add    esp,0x10
c0016099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001609d:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00160a3:	83 ec 0c             	sub    esp,0xc
c00160a6:	50                   	push   eax
c00160a7:	e8 27 c0 ff ff       	call   c00120d3 <setActiveTerminal(VgaText*)>
c00160ac:	83 c4 10             	add    esp,0x10
c00160af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b3:	05 0c 01 00 00       	add    eax,0x10c
c00160b8:	83 ec 08             	sub    esp,0x8
c00160bb:	68 cc 88 02 c0       	push   0xc00288cc
c00160c0:	50                   	push   eax
c00160c1:	e8 8a a5 fe ff       	call   c0000650 <strcpy>
c00160c6:	83 c4 10             	add    esp,0x10
c00160c9:	8d 76 00             	lea    esi,[esi+0x0]
c00160cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160d0:	83 c0 0c             	add    eax,0xc
c00160d3:	83 ec 08             	sub    esp,0x8
c00160d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160da:	50                   	push   eax
c00160db:	e8 70 a5 fe ff       	call   c0000650 <strcpy>
c00160e0:	83 c4 10             	add    esp,0x10
c00160e3:	83 ec 08             	sub    esp,0x8
c00160e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00160ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160ee:	e8 c1 fd ff ff       	call   c0015eb4 <Process::addArgs(char**)>
c00160f3:	83 c4 10             	add    esp,0x10
c00160f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160fa:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c0016100:	83 e2 7f             	and    edx,0x7f
c0016103:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c0016109:	83 ec 08             	sub    esp,0x8
c001610c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016110:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016114:	e8 13 f1 ff ff       	call   c001522c <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016119:	83 c4 10             	add    esp,0x10
c001611c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016120:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016124:	83 f0 01             	xor    eax,0x1
c0016127:	88 c2                	mov    dl,al
c0016129:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001612d:	88 90 be 07 00 00    	mov    BYTE PTR [eax+0x7be],dl
c0016133:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016137:	8b 10                	mov    edx,DWORD PTR [eax]
c0016139:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001613e:	52                   	push   edx
c001613f:	50                   	push   eax
c0016140:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016144:	68 38 89 02 c0       	push   0xc0028938
c0016149:	e8 18 0e ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	90                   	nop
c0016152:	83 c4 14             	add    esp,0x14
c0016155:	5b                   	pop    ebx
c0016156:	5e                   	pop    esi
c0016157:	c3                   	ret    

c0016158 <Process::Process(bool, char const*, Process*, char**)>:
c0016158:	56                   	push   esi
c0016159:	53                   	push   ebx
c001615a:	83 ec 24             	sub    esp,0x24
c001615d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016161:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016165:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016169:	05 0c 02 00 00       	add    eax,0x20c
c001616e:	bb 07 00 00 00       	mov    ebx,0x7
c0016173:	89 c6                	mov    esi,eax
c0016175:	8d 76 00             	lea    esi,[esi+0x0]
c0016178:	85 db                	test   ebx,ebx
c001617a:	78 14                	js     c0016190 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001617c:	83 ec 0c             	sub    esp,0xc
c001617f:	56                   	push   esi
c0016180:	e8 e3 fc 00 00       	call   c0025e68 <ThreadControlBlock::ThreadControlBlock()>
c0016185:	83 c4 10             	add    esp,0x10
c0016188:	83 c6 73             	add    esi,0x73
c001618b:	83 eb 01             	sub    ebx,0x1
c001618e:	eb e8                	jmp    c0016178 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016190:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016194:	c6 80 be 07 00 00 00 	mov    BYTE PTR [eax+0x7be],0x0
c001619b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001619f:	c6 80 bf 07 00 00 00 	mov    BYTE PTR [eax+0x7bf],0x0
c00161a6:	83 ec 0c             	sub    esp,0xc
c00161a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00161ad:	e8 fc 82 ff ff       	call   c000e4ae <KeNewProcessEnv(Process*)>
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	89 c2                	mov    edx,eax
c00161b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161bb:	89 90 ba 07 00 00    	mov    DWORD PTR [eax+0x7ba],edx
c00161c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161c5:	66 c7 80 a4 05 00 00 00 00 	mov    WORD PTR [eax+0x5a4],0x0
c00161ce:	a1 5c b4 02 c0       	mov    eax,ds:0xc002b45c
c00161d3:	8d 50 01             	lea    edx,[eax+0x1]
c00161d6:	89 15 5c b4 02 c0    	mov    DWORD PTR ds:0xc002b45c,edx
c00161dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00161e0:	89 02                	mov    DWORD PTR [edx],eax
c00161e2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00161ea:	83 ec 0c             	sub    esp,0xc
c00161ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00161f1:	e8 8a 94 ff ff       	call   c000f680 <malloc>
c00161f6:	83 c4 10             	add    esp,0x10
c00161f9:	89 c3                	mov    ebx,eax
c00161fb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016200:	83 ec 08             	sub    esp,0x8
c0016203:	50                   	push   eax
c0016204:	53                   	push   ebx
c0016205:	e8 2e d8 ff ff       	call   c0013a38 <VAS::VAS(bool)>
c001620a:	83 c4 10             	add    esp,0x10
c001620d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016211:	89 98 b2 05 00 00    	mov    DWORD PTR [eax+0x5b2],ebx
c0016217:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001621b:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016225:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016229:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001622d:	89 90 aa 05 00 00    	mov    DWORD PTR [eax+0x5aa],edx
c0016233:	e8 03 aa ff ff       	call   c0010c3b <KeInitSignals()>
c0016238:	89 c2                	mov    edx,eax
c001623a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001623e:	89 90 c0 07 00 00    	mov    DWORD PTR [eax+0x7c0],edx
c0016244:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016248:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001624e:	85 c0                	test   eax,eax
c0016250:	74 42                	je     c0016294 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016252:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016256:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c001625c:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016262:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016266:	89 90 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],edx
c001626c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016270:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016276:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001627c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016280:	05 0c 01 00 00       	add    eax,0x10c
c0016285:	83 ec 08             	sub    esp,0x8
c0016288:	52                   	push   edx
c0016289:	50                   	push   eax
c001628a:	e8 c1 a3 fe ff       	call   c0000650 <strcpy>
c001628f:	83 c4 10             	add    esp,0x10
c0016292:	eb 7c                	jmp    c0016310 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016294:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00162a3:	e8 d8 93 ff ff       	call   c000f680 <malloc>
c00162a8:	83 c4 10             	add    esp,0x10
c00162ab:	89 c3                	mov    ebx,eax
c00162ad:	83 ec 08             	sub    esp,0x8
c00162b0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00162b4:	53                   	push   ebx
c00162b5:	e8 42 c3 ff ff       	call   c00125fc <VgaText::VgaText(char const*)>
c00162ba:	83 c4 10             	add    esp,0x10
c00162bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162c1:	89 98 a6 05 00 00    	mov    DWORD PTR [eax+0x5a6],ebx
c00162c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162cb:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00162d1:	83 ec 0c             	sub    esp,0xc
c00162d4:	50                   	push   eax
c00162d5:	e8 88 bb ff ff       	call   c0011e62 <addToTerminalCycle(VgaText*)>
c00162da:	83 c4 10             	add    esp,0x10
c00162dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162e1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c00162e7:	83 ec 0c             	sub    esp,0xc
c00162ea:	50                   	push   eax
c00162eb:	e8 e3 bd ff ff       	call   c00120d3 <setActiveTerminal(VgaText*)>
c00162f0:	83 c4 10             	add    esp,0x10
c00162f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162f7:	05 0c 01 00 00       	add    eax,0x10c
c00162fc:	83 ec 08             	sub    esp,0x8
c00162ff:	68 cc 88 02 c0       	push   0xc00288cc
c0016304:	50                   	push   eax
c0016305:	e8 46 a3 fe ff       	call   c0000650 <strcpy>
c001630a:	83 c4 10             	add    esp,0x10
c001630d:	8d 76 00             	lea    esi,[esi+0x0]
c0016310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016314:	83 c0 0c             	add    eax,0xc
c0016317:	83 ec 08             	sub    esp,0x8
c001631a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001631e:	50                   	push   eax
c001631f:	e8 2c a3 fe ff       	call   c0000650 <strcpy>
c0016324:	83 c4 10             	add    esp,0x10
c0016327:	83 ec 08             	sub    esp,0x8
c001632a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001632e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016332:	e8 7d fb ff ff       	call   c0015eb4 <Process::addArgs(char**)>
c0016337:	83 c4 10             	add    esp,0x10
c001633a:	90                   	nop
c001633b:	83 c4 24             	add    esp,0x24
c001633e:	5b                   	pop    ebx
c001633f:	5e                   	pop    esi
c0016340:	c3                   	ret    
c0016341:	8d 76 00             	lea    esi,[esi+0x0]

c0016344 <taskStartupFunction>:
c0016344:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016349:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001634c:	c3                   	ret    
c001634d:	8d 76 00             	lea    esi,[esi+0x0]

c0016350 <KeDisablePreemption()>:
c0016350:	a1 0c 13 03 c0       	mov    eax,ds:0xc003130c
c0016355:	85 c0                	test   eax,eax
c0016357:	75 13                	jne    c001636c <KeDisablePreemption()+0x1c>
c0016359:	8a 15 0c 11 03 c0    	mov    dl,BYTE PTR ds:0xc003110c
c001635f:	c6 05 0c 11 03 c0 00 	mov    BYTE PTR ds:0xc003110c,0x0
c0016366:	88 15 08 13 03 c0    	mov    BYTE PTR ds:0xc0031308,dl
c001636c:	83 c0 01             	add    eax,0x1
c001636f:	a3 0c 13 03 c0       	mov    ds:0xc003130c,eax
c0016374:	c3                   	ret    
c0016375:	8d 76 00             	lea    esi,[esi+0x0]

c0016378 <KeRestorePreemption()>:
c0016378:	a1 0c 13 03 c0       	mov    eax,ds:0xc003130c
c001637d:	83 e8 01             	sub    eax,0x1
c0016380:	a3 0c 13 03 c0       	mov    ds:0xc003130c,eax
c0016385:	75 0d                	jne    c0016394 <KeRestorePreemption()+0x1c>
c0016387:	a0 08 13 03 c0       	mov    al,ds:0xc0031308
c001638c:	a2 0c 11 03 c0       	mov    ds:0xc003110c,al
c0016391:	8d 76 00             	lea    esi,[esi+0x0]
c0016394:	c3                   	ret    
c0016395:	90                   	nop
c0016396:	66 90                	xchg   ax,ax

c0016398 <Process::createThread(void (*)(void*), void*, int)>:
c0016398:	55                   	push   ebp
c0016399:	31 c9                	xor    ecx,ecx
c001639b:	57                   	push   edi
c001639c:	56                   	push   esi
c001639d:	53                   	push   ebx
c001639e:	83 ec 0c             	sub    esp,0xc
c00163a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00163a5:	66 8b b3 a4 05 00 00 	mov    si,WORD PTR [ebx+0x5a4]
c00163ac:	89 f2                	mov    edx,esi
c00163ae:	66 90                	xchg   ax,ax
c00163b0:	0f b7 c2             	movzx  eax,dx
c00163b3:	80 e2 01             	and    dl,0x1
c00163b6:	74 18                	je     c00163d0 <Process::createThread(void (*)(void*), void*, int)+0x38>
c00163b8:	d1 f8                	sar    eax,1
c00163ba:	83 c1 01             	add    ecx,0x1
c00163bd:	83 f9 10             	cmp    ecx,0x10
c00163c0:	89 c2                	mov    edx,eax
c00163c2:	75 ec                	jne    c00163b0 <Process::createThread(void (*)(void*), void*, int)+0x18>
c00163c4:	83 c4 0c             	add    esp,0xc
c00163c7:	31 db                	xor    ebx,ebx
c00163c9:	89 d8                	mov    eax,ebx
c00163cb:	5b                   	pop    ebx
c00163cc:	5e                   	pop    esi
c00163cd:	5f                   	pop    edi
c00163ce:	5d                   	pop    ebp
c00163cf:	c3                   	ret    
c00163d0:	b8 01 00 00 00       	mov    eax,0x1
c00163d5:	d3 e0                	shl    eax,cl
c00163d7:	09 c6                	or     esi,eax
c00163d9:	66 89 b3 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],si
c00163e0:	6b c1 73             	imul   eax,ecx,0x73
c00163e3:	01 d8                	add    eax,ebx
c00163e5:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c00163ec:	75 0a                	jne    c00163f8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00163ee:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c00163f8:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c00163fe:	6b f9 73             	imul   edi,ecx,0x73
c0016401:	83 ec 0c             	sub    esp,0xc
c0016404:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016407:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001640a:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0016410:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0016416:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001641c:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016423:	c7 80 44 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x244],0x0
c001642d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0016433:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016437:	c7 80 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x26f],0x0
c0016441:	c6 80 73 02 00 00 00 	mov    BYTE PTR [eax+0x273],0x0
c0016448:	c6 80 74 02 00 00 00 	mov    BYTE PTR [eax+0x274],0x0
c001644f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0016455:	89 ca                	mov    edx,ecx
c0016457:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001645b:	c6 80 75 02 00 00 00 	mov    BYTE PTR [eax+0x275],0x0
c0016462:	f7 da                	neg    edx
c0016464:	c1 e2 15             	shl    edx,0x15
c0016467:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001646d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016473:	8a 54 24 38          	mov    dl,BYTE PTR [esp+0x38]
c0016477:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016481:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c0016487:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016491:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0016497:	8a 90 76 02 00 00    	mov    dl,BYTE PTR [eax+0x276]
c001649d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00164a7:	83 e2 80             	and    edx,0xffffff80
c00164aa:	88 90 76 02 00 00    	mov    BYTE PTR [eax+0x276],dl
c00164b0:	68 00 01 00 00       	push   0x100
c00164b5:	e8 c6 91 ff ff       	call   c000f680 <malloc>
c00164ba:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00164bd:	58                   	pop    eax
c00164be:	5a                   	pop    edx
c00164bf:	53                   	push   ebx
c00164c0:	68 d0 88 02 c0       	push   0xc00288d0
c00164c5:	e8 9c 0a ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00164ca:	59                   	pop    ecx
c00164cb:	5e                   	pop    esi
c00164cc:	53                   	push   ebx
c00164cd:	68 4c 13 03 c0       	push   0xc003134c
c00164d2:	e8 3d f5 00 00       	call   c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164d7:	83 c4 10             	add    esp,0x10
c00164da:	89 d8                	mov    eax,ebx
c00164dc:	83 c4 0c             	add    esp,0xc
c00164df:	5b                   	pop    ebx
c00164e0:	5e                   	pop    esi
c00164e1:	5f                   	pop    edi
c00164e2:	5d                   	pop    ebp
c00164e3:	c3                   	ret    

c00164e4 <Process::createUserThread()>:
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	68 80 00 00 00       	push   0x80
c00164ec:	6a 00                	push   0x0
c00164ee:	68 98 5d 01 c0       	push   0xc0015d98
c00164f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164f7:	50                   	push   eax
c00164f8:	e8 9b fe ff ff       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c00164fd:	83 c4 1c             	add    esp,0x1c
c0016500:	c3                   	ret    
c0016501:	8d 76 00             	lea    esi,[esi+0x0]

c0016504 <setupMultitasking(void (*)())>:
c0016504:	56                   	push   esi
c0016505:	53                   	push   ebx
c0016506:	83 ec 04             	sub    esp,0x4
c0016509:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001650d:	eb 11                	jmp    c0016520 <setupMultitasking(void (*)())+0x1c>
c001650f:	90                   	nop
c0016510:	83 ec 0c             	sub    esp,0xc
c0016513:	68 4c 13 03 c0       	push   0xc003134c
c0016518:	e8 3b f4 00 00       	call   c0025958 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001651d:	83 c4 10             	add    esp,0x10
c0016520:	83 ec 0c             	sub    esp,0xc
c0016523:	68 4c 13 03 c0       	push   0xc003134c
c0016528:	e8 07 f4 00 00       	call   c0025934 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001652d:	83 c4 10             	add    esp,0x10
c0016530:	84 c0                	test   al,al
c0016532:	74 dc                	je     c0016510 <setupMultitasking(void (*)())+0xc>
c0016534:	83 ec 0c             	sub    esp,0xc
c0016537:	68 c4 07 00 00       	push   0x7c4
c001653c:	e8 3f 91 ff ff       	call   c000f680 <malloc>
c0016541:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016548:	6a 00                	push   0x0
c001654a:	68 e4 88 02 c0       	push   0xc00288e4
c001654f:	6a 01                	push   0x1
c0016551:	50                   	push   eax
c0016552:	89 c3                	mov    ebx,eax
c0016554:	e8 ff fb ff ff       	call   c0016158 <Process::Process(bool, char const*, Process*, char**)>
c0016559:	8b 83 a6 05 00 00    	mov    eax,DWORD PTR [ebx+0x5a6]
c001655f:	83 c4 14             	add    esp,0x14
c0016562:	89 1d 58 13 03 c0    	mov    DWORD PTR ds:0xc0031358,ebx
c0016568:	50                   	push   eax
c0016569:	e8 65 bb ff ff       	call   c00120d3 <setActiveTerminal(VgaText*)>
c001656e:	66 8b 83 a4 05 00 00 	mov    ax,WORD PTR [ebx+0x5a4]
c0016575:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001657f:	83 c8 01             	or     eax,0x1
c0016582:	66 89 83 a4 05 00 00 	mov    WORD PTR [ebx+0x5a4],ax
c0016589:	8b 83 b2 05 00 00    	mov    eax,DWORD PTR [ebx+0x5b2]
c001658f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016592:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001659c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c00165a2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00165ac:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00165b2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00165bc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00165c6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00165cc:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00165d2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00165dc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00165e6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c00165ed:	e8 8e 90 ff ff       	call   c000f680 <malloc>
c00165f2:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c00165fc:	c6 83 73 02 00 00 00 	mov    BYTE PTR [ebx+0x273],0x0
c0016603:	c6 83 74 02 00 00 00 	mov    BYTE PTR [ebx+0x274],0x0
c001660a:	c6 83 75 02 00 00 00 	mov    BYTE PTR [ebx+0x275],0x0
c0016611:	c6 83 76 02 00 00 00 	mov    BYTE PTR [ebx+0x276],0x0
c0016618:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001661e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016624:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001662a:	5a                   	pop    edx
c001662b:	59                   	pop    ecx
c001662c:	68 cc 88 02 c0       	push   0xc00288cc
c0016631:	50                   	push   eax
c0016632:	e8 19 a0 fe ff       	call   c0000650 <strcpy>
c0016637:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001663e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016642:	83 c4 14             	add    esp,0x14
c0016645:	5b                   	pop    ebx
c0016646:	5e                   	pop    esi
c0016647:	e9 1d 9c fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>

c001664c <schedule()>:
c001664c:	8b 15 2c 13 03 c0    	mov    edx,DWORD PTR ds:0xc003132c
c0016652:	85 d2                	test   edx,edx
c0016654:	74 0e                	je     c0016664 <schedule()+0x18>
c0016656:	c7 05 28 13 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x1
c0016660:	c3                   	ret    
c0016661:	8d 76 00             	lea    esi,[esi+0x0]
c0016664:	53                   	push   ebx
c0016665:	83 ec 14             	sub    esp,0x14
c0016668:	68 4c 13 03 c0       	push   0xc003134c
c001666d:	e8 c2 f2 00 00       	call   c0025934 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016672:	83 c4 10             	add    esp,0x10
c0016675:	84 c0                	test   al,al
c0016677:	75 3f                	jne    c00166b8 <schedule()+0x6c>
c0016679:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001667e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016681:	83 fa 01             	cmp    edx,0x1
c0016684:	74 3a                	je     c00166c0 <schedule()+0x74>
c0016686:	66 90                	xchg   ax,ax
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	68 4c 13 03 c0       	push   0xc003134c
c0016690:	e8 bb f2 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016695:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c001669c:	89 c3                	mov    ebx,eax
c001669e:	e8 b5 f2 00 00       	call   c0025958 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00166a3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00166aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00166ad:	e8 42 f7 ff ff       	call   c0015df4 <switchToThread(ThreadControlBlock*)>
c00166b2:	83 c4 10             	add    esp,0x10
c00166b5:	8d 76 00             	lea    esi,[esi+0x0]
c00166b8:	83 c4 08             	add    esp,0x8
c00166bb:	5b                   	pop    ebx
c00166bc:	c3                   	ret    
c00166bd:	8d 76 00             	lea    esi,[esi+0x0]
c00166c0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00166c7:	83 ec 08             	sub    esp,0x8
c00166ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166cf:	50                   	push   eax
c00166d0:	68 4c 13 03 c0       	push   0xc003134c
c00166d5:	e8 3a f3 00 00       	call   c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00166da:	83 c4 10             	add    esp,0x10
c00166dd:	eb a9                	jmp    c0016688 <schedule()+0x3c>
c00166df:	90                   	nop

c00166e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00166e0:	83 ec 0c             	sub    esp,0xc
c00166e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00166ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00166ef:	e8 58 ff ff ff       	call   c001664c <schedule()>
c00166f4:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00166fc:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016701:	85 c0                	test   eax,eax
c0016703:	75 03                	jne    c0016708 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016705:	fb                   	sti    
c0016706:	66 90                	xchg   ax,ax
c0016708:	83 c4 0c             	add    esp,0xc
c001670b:	c3                   	ret    

c001670c <blockTask(TaskState)>:
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	fa                   	cli    
c0016710:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016715:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016719:	83 c0 01             	add    eax,0x1
c001671c:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016726:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016729:	e8 1e ff ff ff       	call   c001664c <schedule()>
c001672e:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016736:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c001673c:	85 d2                	test   edx,edx
c001673e:	75 04                	jne    c0016744 <blockTask(TaskState)+0x38>
c0016740:	fb                   	sti    
c0016741:	8d 76 00             	lea    esi,[esi+0x0]
c0016744:	83 c4 0c             	add    esp,0xc
c0016747:	c3                   	ret    

c0016748 <waitTask(int, int*, int)>:
c0016748:	83 ec 18             	sub    esp,0x18
c001674b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016750:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016754:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016757:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001675b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016760:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0016763:	6a 07                	push   0x7
c0016765:	e8 a2 ff ff ff       	call   c001670c <blockTask(TaskState)>
c001676a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001676f:	83 c4 10             	add    esp,0x10
c0016772:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0016775:	85 d2                	test   edx,edx
c0016777:	74 0b                	je     c0016784 <waitTask(int, int*, int)+0x3c>
c0016779:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001677c:	89 02                	mov    DWORD PTR [edx],eax
c001677e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016783:	90                   	nop
c0016784:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0016787:	83 c4 0c             	add    esp,0xc
c001678a:	c3                   	ret    
c001678b:	90                   	nop

c001678c <milliTenthSleepUntil(unsigned long long)>:
c001678c:	83 ec 0c             	sub    esp,0xc
c001678f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016797:	3b 05 50 0b 03 c0    	cmp    eax,DWORD PTR ds:0xc0030b50
c001679d:	89 d1                	mov    ecx,edx
c001679f:	1b 0d 54 0b 03 c0    	sbb    ecx,DWORD PTR ds:0xc0030b54
c00167a5:	73 05                	jae    c00167ac <milliTenthSleepUntil(unsigned long long)+0x20>
c00167a7:	90                   	nop
c00167a8:	83 c4 0c             	add    esp,0xc
c00167ab:	c3                   	ret    
c00167ac:	fa                   	cli    
c00167ad:	8b 0d 30 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031330
c00167b3:	83 ec 08             	sub    esp,0x8
c00167b6:	83 c1 01             	add    ecx,0x1
c00167b9:	89 0d 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,ecx
c00167bf:	8b 0d 2c 13 03 c0    	mov    ecx,DWORD PTR ds:0xc003132c
c00167c5:	83 c1 01             	add    ecx,0x1
c00167c8:	89 0d 2c 13 03 c0    	mov    DWORD PTR ds:0xc003132c,ecx
c00167ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00167d4:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c00167d7:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c00167da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167df:	50                   	push   eax
c00167e0:	68 40 13 03 c0       	push   0xc0031340
c00167e5:	e8 2a f2 00 00       	call   c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00167ea:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00167f1:	e8 16 ff ff ff       	call   c001670c <blockTask(TaskState)>
c00167f6:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c00167fb:	83 c4 10             	add    esp,0x10
c00167fe:	83 e8 01             	sub    eax,0x1
c0016801:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0016806:	85 c0                	test   eax,eax
c0016808:	75 0a                	jne    c0016814 <milliTenthSleepUntil(unsigned long long)+0x88>
c001680a:	8b 15 28 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031328
c0016810:	85 d2                	test   edx,edx
c0016812:	75 18                	jne    c001682c <milliTenthSleepUntil(unsigned long long)+0xa0>
c0016814:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001681c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016821:	85 c0                	test   eax,eax
c0016823:	75 83                	jne    c00167a8 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0016825:	fb                   	sti    
c0016826:	83 c4 0c             	add    esp,0xc
c0016829:	c3                   	ret    
c001682a:	66 90                	xchg   ax,ax
c001682c:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0016836:	e8 11 fe ff ff       	call   c001664c <schedule()>
c001683b:	eb d7                	jmp    c0016814 <milliTenthSleepUntil(unsigned long long)+0x88>
c001683d:	8d 76 00             	lea    esi,[esi+0x0]

c0016840 <milliTenthSleep(unsigned long long)>:
c0016840:	a1 50 0b 03 c0       	mov    eax,ds:0xc0030b50
c0016845:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0016849:	8b 15 54 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b54
c001684f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0016853:	e9 34 ff ff ff       	jmp    c001678c <milliTenthSleepUntil(unsigned long long)>

c0016858 <sleep(unsigned long long)>:
c0016858:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c0016860:	b8 10 27 00 00       	mov    eax,0x2710
c0016865:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0016869:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001686d:	01 ca                	add    edx,ecx
c001686f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0016873:	eb cb                	jmp    c0016840 <milliTenthSleep(unsigned long long)>
c0016875:	8d 76 00             	lea    esi,[esi+0x0]

c0016878 <sleep(unsigned int)>:
c0016878:	83 ec 14             	sub    esp,0x14
c001687b:	b8 10 27 00 00       	mov    eax,0x2710
c0016880:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c0016884:	52                   	push   edx
c0016885:	50                   	push   eax
c0016886:	e8 b5 ff ff ff       	call   c0016840 <milliTenthSleep(unsigned long long)>
c001688b:	83 c4 1c             	add    esp,0x1c
c001688e:	c3                   	ret    
c001688f:	90                   	nop

c0016890 <milliTenthSleep(unsigned int)>:
c0016890:	83 ec 14             	sub    esp,0x14
c0016893:	31 d2                	xor    edx,edx
c0016895:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016899:	03 05 50 0b 03 c0    	add    eax,DWORD PTR ds:0xc0030b50
c001689f:	13 15 54 0b 03 c0    	adc    edx,DWORD PTR ds:0xc0030b54
c00168a5:	52                   	push   edx
c00168a6:	50                   	push   eax
c00168a7:	e8 e0 fe ff ff       	call   c001678c <milliTenthSleepUntil(unsigned long long)>
c00168ac:	83 c4 1c             	add    esp,0x1c
c00168af:	c3                   	ret    

c00168b0 <taskReturned>:
c00168b0:	83 ec 18             	sub    esp,0x18
c00168b3:	68 6c 89 02 c0       	push   0xc002896c
c00168b8:	e8 17 92 ff ff       	call   c000fad4 <KePanic(char const*)>
c00168bd:	83 c4 10             	add    esp,0x10
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	6a 02                	push   0x2
c00168c5:	e8 42 fe ff ff       	call   c001670c <blockTask(TaskState)>
c00168ca:	fa                   	cli    
c00168cb:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00168d0:	83 c0 01             	add    eax,0x1
c00168d3:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c00168d8:	e8 6f fd ff ff       	call   c001664c <schedule()>
c00168dd:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00168e5:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c00168eb:	83 c4 10             	add    esp,0x10
c00168ee:	85 d2                	test   edx,edx
c00168f0:	75 ce                	jne    c00168c0 <taskReturned+0x10>
c00168f2:	fb                   	sti    
c00168f3:	eb cb                	jmp    c00168c0 <taskReturned+0x10>
c00168f5:	8d 76 00             	lea    esi,[esi+0x0]

c00168f8 <KeProcessFromPID(int)>:
c00168f8:	57                   	push   edi
c00168f9:	56                   	push   esi
c00168fa:	53                   	push   ebx
c00168fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168ff:	fa                   	cli    
c0016900:	8b 0d 30 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031330
c0016906:	83 ec 0c             	sub    esp,0xc
c0016909:	68 4c 13 03 c0       	push   0xc003134c
c001690e:	83 c1 01             	add    ecx,0x1
c0016911:	89 0d 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,ecx
c0016917:	e8 34 f0 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001691c:	83 c4 10             	add    esp,0x10
c001691f:	89 c7                	mov    edi,eax
c0016921:	eb 15                	jmp    c0016938 <KeProcessFromPID(int)+0x40>
c0016923:	90                   	nop
c0016924:	83 ec 0c             	sub    esp,0xc
c0016927:	68 4c 13 03 c0       	push   0xc003134c
c001692c:	e8 1f f0 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	39 f8                	cmp    eax,edi
c0016936:	74 50                	je     c0016988 <KeProcessFromPID(int)+0x90>
c0016938:	83 ec 0c             	sub    esp,0xc
c001693b:	68 4c 13 03 c0       	push   0xc003134c
c0016940:	e8 0b f0 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016945:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c001694c:	89 c3                	mov    ebx,eax
c001694e:	e8 05 f0 00 00       	call   c0025958 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016953:	58                   	pop    eax
c0016954:	5a                   	pop    edx
c0016955:	53                   	push   ebx
c0016956:	68 4c 13 03 c0       	push   0xc003134c
c001695b:	e8 b4 f0 00 00       	call   c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016960:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016963:	83 c4 10             	add    esp,0x10
c0016966:	39 30                	cmp    DWORD PTR [eax],esi
c0016968:	75 ba                	jne    c0016924 <KeProcessFromPID(int)+0x2c>
c001696a:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016972:	8b 0d 30 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031330
c0016978:	85 c9                	test   ecx,ecx
c001697a:	74 08                	je     c0016984 <KeProcessFromPID(int)+0x8c>
c001697c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001697f:	90                   	nop
c0016980:	5b                   	pop    ebx
c0016981:	5e                   	pop    esi
c0016982:	5f                   	pop    edi
c0016983:	c3                   	ret    
c0016984:	fb                   	sti    
c0016985:	eb f5                	jmp    c001697c <KeProcessFromPID(int)+0x84>
c0016987:	90                   	nop
c0016988:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016990:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0016996:	31 c0                	xor    eax,eax
c0016998:	85 d2                	test   edx,edx
c001699a:	75 e4                	jne    c0016980 <KeProcessFromPID(int)+0x88>
c001699c:	fb                   	sti    
c001699d:	5b                   	pop    ebx
c001699e:	5e                   	pop    esi
c001699f:	5f                   	pop    edi
c00169a0:	c3                   	ret    
c00169a1:	8d 76 00             	lea    esi,[esi+0x0]

c00169a4 <unblockTask(ThreadControlBlock*)>:
c00169a4:	53                   	push   ebx
c00169a5:	83 ec 08             	sub    esp,0x8
c00169a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169ac:	fa                   	cli    
c00169ad:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c00169b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00169b6:	83 c2 01             	add    edx,0x1
c00169b9:	89 15 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,edx
c00169bf:	85 c0                	test   eax,eax
c00169c1:	74 6d                	je     c0016a30 <unblockTask(ThreadControlBlock*)+0x8c>
c00169c3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00169c6:	83 f8 01             	cmp    eax,0x1
c00169c9:	74 39                	je     c0016a04 <unblockTask(ThreadControlBlock*)+0x60>
c00169cb:	83 ec 0c             	sub    esp,0xc
c00169ce:	68 4c 13 03 c0       	push   0xc003134c
c00169d3:	e8 78 ef 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169d8:	83 c4 10             	add    esp,0x10
c00169db:	85 c0                	test   eax,eax
c00169dd:	75 1d                	jne    c00169fc <unblockTask(ThreadControlBlock*)+0x58>
c00169df:	eb 63                	jmp    c0016a44 <unblockTask(ThreadControlBlock*)+0xa0>
c00169e1:	8d 76 00             	lea    esi,[esi+0x0]
c00169e4:	83 ec 08             	sub    esp,0x8
c00169e7:	50                   	push   eax
c00169e8:	68 4c 13 03 c0       	push   0xc003134c
c00169ed:	e8 6a f4 00 00       	call   c0025e5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00169f2:	83 c4 10             	add    esp,0x10
c00169f5:	85 c0                	test   eax,eax
c00169f7:	74 4b                	je     c0016a44 <unblockTask(ThreadControlBlock*)+0xa0>
c00169f9:	8d 76 00             	lea    esi,[esi+0x0]
c00169fc:	39 c3                	cmp    ebx,eax
c00169fe:	75 e4                	jne    c00169e4 <unblockTask(ThreadControlBlock*)+0x40>
c0016a00:	eb 12                	jmp    c0016a14 <unblockTask(ThreadControlBlock*)+0x70>
c0016a02:	66 90                	xchg   ax,ax
c0016a04:	83 ec 0c             	sub    esp,0xc
c0016a07:	68 02 89 02 c0       	push   0xc0028902
c0016a0c:	e8 55 05 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016a11:	83 c4 10             	add    esp,0x10
c0016a14:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016a1c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016a21:	85 c0                	test   eax,eax
c0016a23:	75 03                	jne    c0016a28 <unblockTask(ThreadControlBlock*)+0x84>
c0016a25:	fb                   	sti    
c0016a26:	66 90                	xchg   ax,ax
c0016a28:	83 c4 08             	add    esp,0x8
c0016a2b:	5b                   	pop    ebx
c0016a2c:	c3                   	ret    
c0016a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a30:	83 ec 0c             	sub    esp,0xc
c0016a33:	68 eb 88 02 c0       	push   0xc00288eb
c0016a38:	e8 29 05 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016a3d:	83 c4 10             	add    esp,0x10
c0016a40:	eb d2                	jmp    c0016a14 <unblockTask(ThreadControlBlock*)+0x70>
c0016a42:	66 90                	xchg   ax,ax
c0016a44:	83 ec 08             	sub    esp,0x8
c0016a47:	53                   	push   ebx
c0016a48:	68 4c 13 03 c0       	push   0xc003134c
c0016a4d:	e8 c2 ef 00 00       	call   c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a52:	83 c4 10             	add    esp,0x10
c0016a55:	eb bd                	jmp    c0016a14 <unblockTask(ThreadControlBlock*)+0x70>
c0016a57:	90                   	nop

c0016a58 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016a58:	55                   	push   ebp
c0016a59:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016a5e:	57                   	push   edi
c0016a5f:	56                   	push   esi
c0016a60:	53                   	push   ebx
c0016a61:	83 ec 1c             	sub    esp,0x1c
c0016a64:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016a68:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0016a6b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016a6e:	d3 c0                	rol    eax,cl
c0016a70:	66 8b 8a a4 05 00 00 	mov    cx,WORD PTR [edx+0x5a4]
c0016a77:	21 c8                	and    eax,ecx
c0016a79:	66 89 82 a4 05 00 00 	mov    WORD PTR [edx+0x5a4],ax
c0016a80:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016a83:	66 83 b8 a4 05 00 00 00 	cmp    WORD PTR [eax+0x5a4],0x0
c0016a8b:	0f 85 af 01 00 00    	jne    c0016c40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0016a91:	8b a8 b6 05 00 00    	mov    ebp,DWORD PTR [eax+0x5b6]
c0016a97:	85 ed                	test   ebp,ebp
c0016a99:	7e 29                	jle    c0016ac4 <cleanupTerminatedTask(ThreadControlBlock*)+0x6c>
c0016a9b:	31 f6                	xor    esi,esi
c0016a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016aa0:	8b bc b0 ba 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x5ba]
c0016aa7:	83 ec 0c             	sub    esp,0xc
c0016aaa:	83 c6 01             	add    esi,0x1
c0016aad:	57                   	push   edi
c0016aae:	e8 dd 8b ff ff       	call   c000f690 <free>
c0016ab3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016ab6:	83 c4 10             	add    esp,0x10
c0016ab9:	39 b0 b6 05 00 00    	cmp    DWORD PTR [eax+0x5b6],esi
c0016abf:	7f df                	jg     c0016aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x48>
c0016ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac4:	c7 80 b6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5b6],0x0
c0016ace:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016ad1:	8b ae ba 07 00 00    	mov    ebp,DWORD PTR [esi+0x7ba]
c0016ad7:	89 f7                	mov    edi,esi
c0016ad9:	85 ed                	test   ebp,ebp
c0016adb:	74 1b                	je     c0016af8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016add:	83 ec 0c             	sub    esp,0xc
c0016ae0:	55                   	push   ebp
c0016ae1:	e8 e4 78 ff ff       	call   c000e3ca <EnvVarContainer::~EnvVarContainer()>
c0016ae6:	59                   	pop    ecx
c0016ae7:	5e                   	pop    esi
c0016ae8:	6a 0c                	push   0xc
c0016aea:	55                   	push   ebp
c0016aeb:	e8 98 67 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0016af0:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016af3:	83 c4 10             	add    esp,0x10
c0016af6:	89 f7                	mov    edi,esi
c0016af8:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016afe:	85 c0                	test   eax,eax
c0016b00:	0f 84 ae 00 00 00    	je     c0016bb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0016b06:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0016b09:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016b0d:	31 c9                	xor    ecx,ecx
c0016b0f:	eb 17                	jmp    c0016b28 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016b11:	8d 76 00             	lea    esi,[esi+0x0]
c0016b14:	83 c1 01             	add    ecx,0x1
c0016b17:	83 f9 10             	cmp    ecx,0x10
c0016b1a:	0f 84 94 00 00 00    	je     c0016bb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0016b20:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016b26:	66 90                	xchg   ax,ax
c0016b28:	0f b7 90 a4 05 00 00 	movzx  edx,WORD PTR [eax+0x5a4]
c0016b2f:	d3 fa                	sar    edx,cl
c0016b31:	80 e2 01             	and    dl,0x1
c0016b34:	74 de                	je     c0016b14 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016b36:	6b d1 73             	imul   edx,ecx,0x73
c0016b39:	01 d0                	add    eax,edx
c0016b3b:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016b41:	83 fd 07             	cmp    ebp,0x7
c0016b44:	75 ce                	jne    c0016b14 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016b46:	05 40 02 00 00       	add    eax,0x240
c0016b4b:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0016b4e:	83 fd ff             	cmp    ebp,0xffffffff
c0016b51:	0f 8c f1 00 00 00    	jl     c0016c48 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c0016b57:	0f 84 af 01 00 00    	je     c0016d0c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b4>
c0016b5d:	85 ed                	test   ebp,ebp
c0016b5f:	0f 84 93 01 00 00    	je     c0016cf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a0>
c0016b65:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016b67:	75 ab                	jne    c0016b14 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016b69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016b6d:	8b 86 aa 05 00 00    	mov    eax,DWORD PTR [esi+0x5aa]
c0016b73:	01 d0                	add    eax,edx
c0016b75:	8d 76 00             	lea    esi,[esi+0x0]
c0016b78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016b7c:	83 ec 0c             	sub    esp,0xc
c0016b7f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0016b85:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016b88:	8b 80 aa 05 00 00    	mov    eax,DWORD PTR [eax+0x5aa]
c0016b8e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016b95:	50                   	push   eax
c0016b96:	e8 09 fe ff ff       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016ba1:	89 f7                	mov    edi,esi
c0016ba3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016ba7:	83 c1 01             	add    ecx,0x1
c0016baa:	83 f9 10             	cmp    ecx,0x10
c0016bad:	0f 85 6d ff ff ff    	jne    c0016b20 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016bb3:	90                   	nop
c0016bb4:	8b 86 a6 05 00 00    	mov    eax,DWORD PTR [esi+0x5a6]
c0016bba:	85 c0                	test   eax,eax
c0016bbc:	74 62                	je     c0016c20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0016bbe:	8b 96 aa 05 00 00    	mov    edx,DWORD PTR [esi+0x5aa]
c0016bc4:	3b 82 a6 05 00 00    	cmp    eax,DWORD PTR [edx+0x5a6]
c0016bca:	74 54                	je     c0016c20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0016bcc:	83 ec 0c             	sub    esp,0xc
c0016bcf:	68 4c 13 03 c0       	push   0xc003134c
c0016bd4:	e8 77 ed 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bd9:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c0016be0:	89 c7                	mov    edi,eax
c0016be2:	e8 4d ed 00 00       	call   c0025934 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	84 c0                	test   al,al
c0016bec:	0f 84 ce 00 00 00    	je     c0016cc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c0016bf2:	66 90                	xchg   ax,ax
c0016bf4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016bf7:	8b 90 a6 05 00 00    	mov    edx,DWORD PTR [eax+0x5a6]
c0016bfd:	85 d2                	test   edx,edx
c0016bff:	74 0f                	je     c0016c10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0016c01:	8b 02                	mov    eax,DWORD PTR [edx]
c0016c03:	83 ec 0c             	sub    esp,0xc
c0016c06:	52                   	push   edx
c0016c07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c0a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016c0d:	83 c4 10             	add    esp,0x10
c0016c10:	c7 80 a6 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x5a6],0x0
c0016c1a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0016c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c20:	8b 9f b2 05 00 00    	mov    ebx,DWORD PTR [edi+0x5b2]
c0016c26:	85 db                	test   ebx,ebx
c0016c28:	74 16                	je     c0016c40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0016c2a:	83 ec 0c             	sub    esp,0xc
c0016c2d:	53                   	push   ebx
c0016c2e:	e8 59 c9 ff ff       	call   c001358c <VAS::~VAS()>
c0016c33:	58                   	pop    eax
c0016c34:	5a                   	pop    edx
c0016c35:	6a 14                	push   0x14
c0016c37:	53                   	push   ebx
c0016c38:	e8 4b 66 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0016c3d:	83 c4 10             	add    esp,0x10
c0016c40:	83 c4 1c             	add    esp,0x1c
c0016c43:	5b                   	pop    ebx
c0016c44:	5e                   	pop    esi
c0016c45:	5f                   	pop    edi
c0016c46:	5d                   	pop    ebp
c0016c47:	c3                   	ret    
c0016c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	68 a0 89 02 c0       	push   0xc00289a0
c0016c54:	e8 7b 8e ff ff       	call   c000fad4 <KePanic(char const*)>
c0016c59:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016c5c:	83 c4 10             	add    esp,0x10
c0016c5f:	89 f7                	mov    edi,esi
c0016c61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c65:	e9 aa fe ff ff       	jmp    c0016b14 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016c6a:	66 90                	xchg   ax,ax
c0016c6c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c0016c72:	39 82 a6 05 00 00    	cmp    DWORD PTR [edx+0x5a6],eax
c0016c78:	75 1e                	jne    c0016c98 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0016c7a:	83 ec 0c             	sub    esp,0xc
c0016c7d:	68 08 8a 02 c0       	push   0xc0028a08
c0016c82:	e8 df 02 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016c87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016c8e:	e8 79 fa ff ff       	call   c001670c <blockTask(TaskState)>
c0016c93:	83 c4 10             	add    esp,0x10
c0016c96:	66 90                	xchg   ax,ax
c0016c98:	83 ec 08             	sub    esp,0x8
c0016c9b:	56                   	push   esi
c0016c9c:	68 4c 13 03 c0       	push   0xc003134c
c0016ca1:	e8 6e ed 00 00       	call   c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ca6:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c0016cad:	e8 9e ec 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016cb2:	83 c4 10             	add    esp,0x10
c0016cb5:	39 f8                	cmp    eax,edi
c0016cb7:	0f 84 37 ff ff ff    	je     c0016bf4 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0016cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0016cc0:	83 ec 0c             	sub    esp,0xc
c0016cc3:	68 4c 13 03 c0       	push   0xc003134c
c0016cc8:	e8 83 ec 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ccd:	c7 04 24 4c 13 03 c0 	mov    DWORD PTR [esp],0xc003134c
c0016cd4:	89 c6                	mov    esi,eax
c0016cd6:	e8 7d ec 00 00       	call   c0025958 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016cdb:	83 c4 10             	add    esp,0x10
c0016cde:	39 f3                	cmp    ebx,esi
c0016ce0:	74 b6                	je     c0016c98 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0016ce2:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0016ce5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016ce8:	39 82 aa 05 00 00    	cmp    DWORD PTR [edx+0x5aa],eax
c0016cee:	75 a8                	jne    c0016c98 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0016cf0:	e9 77 ff ff ff       	jmp    c0016c6c <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c0016cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cf8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016cfc:	83 ec 0c             	sub    esp,0xc
c0016cff:	68 d4 89 02 c0       	push   0xc00289d4
c0016d04:	e9 4b ff ff ff       	jmp    c0016c54 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0016d09:	8d 76 00             	lea    esi,[esi+0x0]
c0016d0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016d10:	8b 36                	mov    esi,DWORD PTR [esi]
c0016d12:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0016d15:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016d18:	8b b8 aa 05 00 00    	mov    edi,DWORD PTR [eax+0x5aa]
c0016d1e:	01 d7                	add    edi,edx
c0016d20:	89 f8                	mov    eax,edi
c0016d22:	e9 51 fe ff ff       	jmp    c0016b78 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c0016d27:	90                   	nop

c0016d28 <cleanerTaskFunction(void*)>:
c0016d28:	53                   	push   ebx
c0016d29:	83 ec 08             	sub    esp,0x8
c0016d2c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016d34:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016d39:	85 c0                	test   eax,eax
c0016d3b:	75 03                	jne    c0016d40 <cleanerTaskFunction(void*)+0x18>
c0016d3d:	fb                   	sti    
c0016d3e:	66 90                	xchg   ax,ax
c0016d40:	fa                   	cli    
c0016d41:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016d46:	83 c0 01             	add    eax,0x1
c0016d49:	80 3d 14 13 03 c0 00 	cmp    BYTE PTR ds:0xc0031314,0x0
c0016d50:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016d55:	0f 85 c9 00 00 00    	jne    c0016e24 <cleanerTaskFunction(void*)+0xfc>
c0016d5b:	83 ec 0c             	sub    esp,0xc
c0016d5e:	6a 02                	push   0x2
c0016d60:	e8 7b f9 ff ff       	call   c00166e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	c6 05 14 13 03 c0 00 	mov    BYTE PTR ds:0xc0031314,0x0
c0016d6f:	fa                   	cli    
c0016d70:	8b 0d 30 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031330
c0016d76:	8b 1d 2c 13 03 c0    	mov    ebx,DWORD PTR ds:0xc003132c
c0016d7c:	83 c1 01             	add    ecx,0x1
c0016d7f:	89 0d 30 13 03 c0    	mov    DWORD PTR ds:0xc0031330,ecx
c0016d85:	83 c3 01             	add    ebx,0x1
c0016d88:	89 1d 2c 13 03 c0    	mov    DWORD PTR ds:0xc003132c,ebx
c0016d8e:	fa                   	cli    
c0016d8f:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016d94:	83 c0 01             	add    eax,0x1
c0016d97:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016d9c:	eb 2a                	jmp    c0016dc8 <cleanerTaskFunction(void*)+0xa0>
c0016d9e:	66 90                	xchg   ax,ax
c0016da0:	83 ec 0c             	sub    esp,0xc
c0016da3:	68 34 13 03 c0       	push   0xc0031334
c0016da8:	e8 a3 eb 00 00       	call   c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016dad:	c7 04 24 34 13 03 c0 	mov    DWORD PTR [esp],0xc0031334
c0016db4:	89 c3                	mov    ebx,eax
c0016db6:	e8 9d eb 00 00       	call   c0025958 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016dbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016dbe:	e8 95 fc ff ff       	call   c0016a58 <cleanupTerminatedTask(ThreadControlBlock*)>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	66 90                	xchg   ax,ax
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	68 34 13 03 c0       	push   0xc0031334
c0016dd0:	e8 5f eb 00 00       	call   c0025934 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dd5:	83 c4 10             	add    esp,0x10
c0016dd8:	84 c0                	test   al,al
c0016dda:	74 c4                	je     c0016da0 <cleanerTaskFunction(void*)+0x78>
c0016ddc:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016de4:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0016dea:	85 d2                	test   edx,edx
c0016dec:	75 02                	jne    c0016df0 <cleanerTaskFunction(void*)+0xc8>
c0016dee:	fb                   	sti    
c0016def:	90                   	nop
c0016df0:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0016df5:	83 e8 01             	sub    eax,0x1
c0016df8:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0016dfd:	0f 85 29 ff ff ff    	jne    c0016d2c <cleanerTaskFunction(void*)+0x4>
c0016e03:	a1 28 13 03 c0       	mov    eax,ds:0xc0031328
c0016e08:	85 c0                	test   eax,eax
c0016e0a:	0f 84 1c ff ff ff    	je     c0016d2c <cleanerTaskFunction(void*)+0x4>
c0016e10:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0016e1a:	e8 2d f8 ff ff       	call   c001664c <schedule()>
c0016e1f:	e9 08 ff ff ff       	jmp    c0016d2c <cleanerTaskFunction(void*)+0x4>
c0016e24:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016e2c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016e31:	85 c0                	test   eax,eax
c0016e33:	0f 85 2f ff ff ff    	jne    c0016d68 <cleanerTaskFunction(void*)+0x40>
c0016e39:	fb                   	sti    
c0016e3a:	e9 29 ff ff ff       	jmp    c0016d68 <cleanerTaskFunction(void*)+0x40>
c0016e3f:	90                   	nop

c0016e40 <KeTerminateCurrentThread(int)>:
c0016e40:	83 ec 14             	sub    esp,0x14
c0016e43:	fa                   	cli    
c0016e44:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016e49:	83 c0 01             	add    eax,0x1
c0016e4c:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016e51:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0016e56:	83 c0 01             	add    eax,0x1
c0016e59:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0016e5e:	fa                   	cli    
c0016e5f:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016e64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e68:	83 c0 01             	add    eax,0x1
c0016e6b:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e75:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0016e78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e7d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016e80:	50                   	push   eax
c0016e81:	68 34 13 03 c0       	push   0xc0031334
c0016e86:	e8 89 eb 00 00       	call   c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016e9a:	a1 10 13 03 c0       	mov    eax,ds:0xc0031310
c0016e9f:	85 c0                	test   eax,eax
c0016ea1:	0f 84 81 00 00 00    	je     c0016f28 <KeTerminateCurrentThread(int)+0xe8>
c0016ea7:	c6 05 14 13 03 c0 01 	mov    BYTE PTR ds:0xc0031314,0x1
c0016eae:	83 ec 0c             	sub    esp,0xc
c0016eb1:	50                   	push   eax
c0016eb2:	e8 ed fa ff ff       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c0016eb7:	83 c4 10             	add    esp,0x10
c0016eba:	66 90                	xchg   ax,ax
c0016ebc:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016ec4:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016ec9:	85 c0                	test   eax,eax
c0016ecb:	75 03                	jne    c0016ed0 <KeTerminateCurrentThread(int)+0x90>
c0016ecd:	fb                   	sti    
c0016ece:	66 90                	xchg   ax,ax
c0016ed0:	a1 2c 13 03 c0       	mov    eax,ds:0xc003132c
c0016ed5:	83 e8 01             	sub    eax,0x1
c0016ed8:	a3 2c 13 03 c0       	mov    ds:0xc003132c,eax
c0016edd:	75 09                	jne    c0016ee8 <KeTerminateCurrentThread(int)+0xa8>
c0016edf:	83 3d 28 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031328,0x0
c0016ee6:	75 54                	jne    c0016f3c <KeTerminateCurrentThread(int)+0xfc>
c0016ee8:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016ef0:	8b 0d 30 13 03 c0    	mov    ecx,DWORD PTR ds:0xc0031330
c0016ef6:	85 c9                	test   ecx,ecx
c0016ef8:	75 06                	jne    c0016f00 <KeTerminateCurrentThread(int)+0xc0>
c0016efa:	66 90                	xchg   ax,ax
c0016efc:	fb                   	sti    
c0016efd:	8d 76 00             	lea    esi,[esi+0x0]
c0016f00:	fa                   	cli    
c0016f01:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0016f06:	83 c0 01             	add    eax,0x1
c0016f09:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0016f0e:	e8 39 f7 ff ff       	call   c001664c <schedule()>
c0016f13:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0016f1b:	8b 15 30 13 03 c0    	mov    edx,DWORD PTR ds:0xc0031330
c0016f21:	85 d2                	test   edx,edx
c0016f23:	75 db                	jne    c0016f00 <KeTerminateCurrentThread(int)+0xc0>
c0016f25:	eb d5                	jmp    c0016efc <KeTerminateCurrentThread(int)+0xbc>
c0016f27:	90                   	nop
c0016f28:	83 ec 0c             	sub    esp,0xc
c0016f2b:	68 19 89 02 c0       	push   0xc0028919
c0016f30:	e8 31 00 ff ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0016f35:	83 c4 10             	add    esp,0x10
c0016f38:	eb 82                	jmp    c0016ebc <KeTerminateCurrentThread(int)+0x7c>
c0016f3a:	66 90                	xchg   ax,ax
c0016f3c:	c7 05 28 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031328,0x0
c0016f46:	e8 01 f7 ff ff       	call   c001664c <schedule()>
c0016f4b:	eb 9b                	jmp    c0016ee8 <KeTerminateCurrentThread(int)+0xa8>
c0016f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016f50 <__static_initialization_and_destruction_0(int, int)>:
c0016f50:	83 ec 0c             	sub    esp,0xc
c0016f53:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016f58:	0f 85 8e 00 00 00    	jne    c0016fec <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016f5e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016f66:	0f 85 80 00 00 00    	jne    c0016fec <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016f6c:	83 ec 0c             	sub    esp,0xc
c0016f6f:	68 4c 13 03 c0       	push   0xc003134c
c0016f74:	e8 3b ef 00 00       	call   c0025eb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016f79:	83 c4 10             	add    esp,0x10
c0016f7c:	83 ec 04             	sub    esp,0x4
c0016f7f:	68 20 ac 02 c0       	push   0xc002ac20
c0016f84:	68 4c 13 03 c0       	push   0xc003134c
c0016f89:	68 64 5e 02 c0       	push   0xc0025e64
c0016f8e:	e8 a5 62 ff ff       	call   c000d238 <__cxa_atexit>
c0016f93:	83 c4 10             	add    esp,0x10
c0016f96:	83 ec 0c             	sub    esp,0xc
c0016f99:	68 40 13 03 c0       	push   0xc0031340
c0016f9e:	e8 11 ef 00 00       	call   c0025eb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016fa3:	83 c4 10             	add    esp,0x10
c0016fa6:	83 ec 04             	sub    esp,0x4
c0016fa9:	68 20 ac 02 c0       	push   0xc002ac20
c0016fae:	68 40 13 03 c0       	push   0xc0031340
c0016fb3:	68 64 5e 02 c0       	push   0xc0025e64
c0016fb8:	e8 7b 62 ff ff       	call   c000d238 <__cxa_atexit>
c0016fbd:	83 c4 10             	add    esp,0x10
c0016fc0:	83 ec 0c             	sub    esp,0xc
c0016fc3:	68 34 13 03 c0       	push   0xc0031334
c0016fc8:	e8 e7 ee 00 00       	call   c0025eb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016fcd:	83 c4 10             	add    esp,0x10
c0016fd0:	83 ec 04             	sub    esp,0x4
c0016fd3:	68 20 ac 02 c0       	push   0xc002ac20
c0016fd8:	68 34 13 03 c0       	push   0xc0031334
c0016fdd:	68 64 5e 02 c0       	push   0xc0025e64
c0016fe2:	e8 51 62 ff ff       	call   c000d238 <__cxa_atexit>
c0016fe7:	83 c4 10             	add    esp,0x10
c0016fea:	66 90                	xchg   ax,ax
c0016fec:	90                   	nop
c0016fed:	83 c4 0c             	add    esp,0xc
c0016ff0:	c3                   	ret    
c0016ff1:	8d 76 00             	lea    esi,[esi+0x0]

c0016ff4 <_GLOBAL__sub_I_keNextPID>:
c0016ff4:	83 ec 0c             	sub    esp,0xc
c0016ff7:	83 ec 08             	sub    esp,0x8
c0016ffa:	68 ff ff 00 00       	push   0xffff
c0016fff:	6a 01                	push   0x1
c0017001:	e8 4a ff ff ff       	call   c0016f50 <__static_initialization_and_destruction_0(int, int)>
c0017006:	83 c4 10             	add    esp,0x10
c0017009:	83 c4 0c             	add    esp,0xc
c001700c:	c3                   	ret    

c001700d <Vm::inbv(unsigned short)>:
c001700d:	55                   	push   ebp
c001700e:	89 e5                	mov    ebp,esp
c0017010:	83 ec 14             	sub    esp,0x14
c0017013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017016:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c001701a:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c001701e:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017023:	75 07                	jne    c001702c <Vm::inbv(unsigned short)+0x1f>
c0017025:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c001702a:	eb 16                	jmp    c0017042 <Vm::inbv(unsigned short)+0x35>
c001702c:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017030:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017034:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0017038:	89 c2                	mov    edx,eax
c001703a:	ec                   	in     al,dx
c001703b:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001703e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0017041:	90                   	nop
c0017042:	c9                   	leave  
c0017043:	c3                   	ret    

c0017044 <Vm::outbv(unsigned short, unsigned char)>:
c0017044:	55                   	push   ebp
c0017045:	89 e5                	mov    ebp,esp
c0017047:	83 ec 18             	sub    esp,0x18
c001704a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001704d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017050:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
c0017054:	88 d0                	mov    al,dl
c0017056:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c0017059:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c001705d:	3d fe fe 00 00       	cmp    eax,0xfefe
c0017062:	75 2d                	jne    c0017091 <Vm::outbv(unsigned short, unsigned char)+0x4d>
c0017064:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017069:	8d 50 01             	lea    edx,[eax+0x1]
c001706c:	89 15 90 13 03 c0    	mov    DWORD PTR ds:0xc0031390,edx
c0017072:	8a 55 e8             	mov    dl,BYTE PTR [ebp-0x18]
c0017075:	88 90 a0 13 03 c0    	mov    BYTE PTR [eax-0x3ffcec60],dl
c001707b:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017080:	83 f8 20             	cmp    eax,0x20
c0017083:	75 23                	jne    c00170a8 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017085:	c7 05 90 13 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031390,0x1f
c001708f:	eb 17                	jmp    c00170a8 <Vm::outbv(unsigned short, unsigned char)+0x64>
c0017091:	0f b6 55 e8          	movzx  edx,BYTE PTR [ebp-0x18]
c0017095:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
c0017099:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001709d:	88 55 fd             	mov    BYTE PTR [ebp-0x3],dl
c00170a0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00170a3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00170a7:	ee                   	out    dx,al
c00170a8:	90                   	nop
c00170a9:	c9                   	leave  
c00170aa:	c3                   	ret    

c00170ab <Vm::realToLinear(unsigned short, unsigned short)>:
c00170ab:	55                   	push   ebp
c00170ac:	89 e5                	mov    ebp,esp
c00170ae:	83 ec 08             	sub    esp,0x8
c00170b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00170b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00170b7:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
c00170bb:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
c00170bf:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
c00170c3:	c1 e0 04             	shl    eax,0x4
c00170c6:	89 c2                	mov    edx,eax
c00170c8:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
c00170cc:	01 d0                	add    eax,edx
c00170ce:	c9                   	leave  
c00170cf:	c3                   	ret    

c00170d0 <Vm::getSegment(unsigned int)>:
c00170d0:	55                   	push   ebp
c00170d1:	89 e5                	mov    ebp,esp
c00170d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00170d6:	c1 e8 10             	shr    eax,0x10
c00170d9:	5d                   	pop    ebp
c00170da:	c3                   	ret    

c00170db <Vm::getOffset(unsigned int)>:
c00170db:	55                   	push   ebp
c00170dc:	89 e5                	mov    ebp,esp
c00170de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00170e1:	5d                   	pop    ebp
c00170e2:	c3                   	ret    

c00170e3 <Vm::mainloop2()>:
c00170e3:	55                   	push   ebp
c00170e4:	89 e5                	mov    ebp,esp
c00170e6:	53                   	push   ebx
c00170e7:	83 ec 04             	sub    esp,0x4
c00170ea:	fa                   	cli    
c00170eb:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00170f0:	83 c0 01             	add    eax,0x1
c00170f3:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c00170f8:	c6 05 89 13 03 c0 01 	mov    BYTE PTR ds:0xc0031389,0x1
c00170ff:	83 ec 0c             	sub    esp,0xc
c0017102:	6a 02                	push   0x2
c0017104:	e8 d7 f5 ff ff       	call   c00166e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017109:	83 c4 10             	add    esp,0x10
c001710c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017111:	8b 00                	mov    eax,DWORD PTR [eax]
c0017113:	66 8b 40 5f          	mov    ax,WORD PTR [eax+0x5f]
c0017117:	0f b7 d8             	movzx  ebx,ax
c001711a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001711f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017121:	66 8b 40 5d          	mov    ax,WORD PTR [eax+0x5d]
c0017125:	0f b7 c8             	movzx  ecx,ax
c0017128:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001712d:	8b 00                	mov    eax,DWORD PTR [eax]
c001712f:	66 8b 40 5b          	mov    ax,WORD PTR [eax+0x5b]
c0017133:	0f b7 d0             	movzx  edx,ax
c0017136:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001713b:	8b 00                	mov    eax,DWORD PTR [eax]
c001713d:	66 8b 40 59          	mov    ax,WORD PTR [eax+0x59]
c0017141:	0f b7 c0             	movzx  eax,ax
c0017144:	53                   	push   ebx
c0017145:	51                   	push   ecx
c0017146:	52                   	push   edx
c0017147:	50                   	push   eax
c0017148:	e8 c2 90 fe ff       	call   c000020f <goToVM86>
c001714d:	83 c4 10             	add    esp,0x10
c0017150:	90                   	nop
c0017151:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0017154:	c9                   	leave  
c0017155:	c3                   	ret    

c0017156 <Vm::mainVm8086Loop(void*)>:
c0017156:	55                   	push   ebp
c0017157:	89 e5                	mov    ebp,esp
c0017159:	83 ec 08             	sub    esp,0x8
c001715c:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017164:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017169:	85 c0                	test   eax,eax
c001716b:	75 01                	jne    c001716e <Vm::mainVm8086Loop(void*)+0x18>
c001716d:	fb                   	sti    
c001716e:	e8 70 ff ff ff       	call   c00170e3 <Vm::mainloop2()>
c0017173:	90                   	nop
c0017174:	c9                   	leave  
c0017175:	c3                   	ret    

c0017176 <Vm::mainloop3(unsigned long)>:
c0017176:	55                   	push   ebp
c0017177:	89 e5                	mov    ebp,esp
c0017179:	83 ec 08             	sub    esp,0x8
c001717c:	fa                   	cli    
c001717d:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017182:	83 c0 01             	add    eax,0x1
c0017185:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c001718a:	c6 05 88 13 03 c0 01 	mov    BYTE PTR ds:0xc0031388,0x1
c0017191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017194:	a3 84 13 03 c0       	mov    ds:0xc0031384,eax
c0017199:	83 ec 0c             	sub    esp,0xc
c001719c:	6a 02                	push   0x2
c001719e:	e8 3d f5 ff ff       	call   c00166e0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00171a3:	83 c4 10             	add    esp,0x10
c00171a6:	e8 38 ff ff ff       	call   c00170e3 <Vm::mainloop2()>
c00171ab:	90                   	nop
c00171ac:	c9                   	leave  
c00171ad:	c3                   	ret    

c00171ae <Vm::initialise8086()>:
c00171ae:	55                   	push   ebp
c00171af:	89 e5                	mov    ebp,esp
c00171b1:	83 ec 08             	sub    esp,0x8
c00171b4:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c00171b9:	68 80 00 00 00       	push   0x80
c00171be:	6a 00                	push   0x0
c00171c0:	68 56 71 01 c0       	push   0xc0017156
c00171c5:	50                   	push   eax
c00171c6:	e8 cd f1 ff ff       	call   c0016398 <Process::createThread(void (*)(void*), void*, int)>
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	a3 8c 13 03 c0       	mov    ds:0xc003138c,eax
c00171d3:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c00171d8:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	6a 07                	push   0x7
c00171e3:	68 10 01 00 00       	push   0x110
c00171e8:	6a 00                	push   0x0
c00171ea:	6a 00                	push   0x0
c00171ec:	50                   	push   eax
c00171ed:	e8 fc c6 ff ff       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171f2:	83 c4 20             	add    esp,0x20
c00171f5:	90                   	nop
c00171f6:	c9                   	leave  
c00171f7:	c3                   	ret    

c00171f8 <Vm::finish8086()>:
c00171f8:	55                   	push   ebp
c00171f9:	89 e5                	mov    ebp,esp
c00171fb:	83 ec 18             	sub    esp,0x18
c00171fe:	fa                   	cli    
c00171ff:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017204:	83 c0 01             	add    eax,0x1
c0017207:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c001720c:	a0 88 13 03 c0       	mov    al,ds:0xc0031388
c0017211:	0f b6 c0             	movzx  eax,al
c0017214:	85 c0                	test   eax,eax
c0017216:	75 19                	jne    c0017231 <Vm::finish8086()+0x39>
c0017218:	e8 2f f4 ff ff       	call   c001664c <schedule()>
c001721d:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017225:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001722a:	85 c0                	test   eax,eax
c001722c:	75 d0                	jne    c00171fe <Vm::finish8086()+0x6>
c001722e:	fb                   	sti    
c001722f:	eb cd                	jmp    c00171fe <Vm::finish8086()+0x6>
c0017231:	90                   	nop
c0017232:	a1 84 13 03 c0       	mov    eax,ds:0xc0031384
c0017237:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001723a:	c6 05 88 13 03 c0 00 	mov    BYTE PTR ds:0xc0031388,0x0
c0017241:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c0017246:	83 ec 0c             	sub    esp,0xc
c0017249:	50                   	push   eax
c001724a:	e8 55 f7 ff ff       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c001724f:	83 c4 10             	add    esp,0x10
c0017252:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001725a:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001725f:	85 c0                	test   eax,eax
c0017261:	75 01                	jne    c0017264 <Vm::finish8086()+0x6c>
c0017263:	fb                   	sti    
c0017264:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017267:	c9                   	leave  
c0017268:	c3                   	ret    

c0017269 <Vm::getOutput8086(unsigned char*)>:
c0017269:	55                   	push   ebp
c001726a:	89 e5                	mov    ebp,esp
c001726c:	57                   	push   edi
c001726d:	56                   	push   esi
c001726e:	53                   	push   ebx
c001726f:	83 ec 20             	sub    esp,0x20
c0017272:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c0017277:	89 c2                	mov    edx,eax
c0017279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001727c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001727f:	c7 45 e8 a0 13 03 c0 	mov    DWORD PTR [ebp-0x18],0xc00313a0
c0017286:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0017289:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001728c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001728f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0017292:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0017295:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0017298:	89 c6                	mov    esi,eax
c001729a:	89 d7                	mov    edi,edx
c001729c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001729e:	89 c8                	mov    eax,ecx
c00172a0:	89 fa                	mov    edx,edi
c00172a2:	89 f3                	mov    ebx,esi
c00172a4:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c00172a7:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00172aa:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00172ad:	a1 90 13 03 c0       	mov    eax,ds:0xc0031390
c00172b2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00172b5:	c7 05 90 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031390,0x0
c00172bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00172c2:	83 c4 20             	add    esp,0x20
c00172c5:	5b                   	pop    ebx
c00172c6:	5e                   	pop    esi
c00172c7:	5f                   	pop    edi
c00172c8:	5d                   	pop    ebp
c00172c9:	c3                   	ret    

c00172ca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00172ca:	55                   	push   ebp
c00172cb:	89 e5                	mov    ebp,esp
c00172cd:	57                   	push   edi
c00172ce:	56                   	push   esi
c00172cf:	53                   	push   ebx
c00172d0:	83 ec 3c             	sub    esp,0x3c
c00172d3:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00172d6:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00172d9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00172dc:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00172df:	66 89 5d c4          	mov    WORD PTR [ebp-0x3c],bx
c00172e3:	66 89 4d c0          	mov    WORD PTR [ebp-0x40],cx
c00172e7:	66 89 55 bc          	mov    WORD PTR [ebp-0x44],dx
c00172eb:	66 89 45 b8          	mov    WORD PTR [ebp-0x48],ax
c00172ef:	a0 80 13 03 c0       	mov    al,ds:0xc0031380
c00172f4:	83 f0 01             	xor    eax,0x1
c00172f7:	0f b6 c0             	movzx  eax,al
c00172fa:	85 c0                	test   eax,eax
c00172fc:	74 07                	je     c0017305 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c00172fe:	c6 05 80 13 03 c0 01 	mov    BYTE PTR ds:0xc0031380,0x1
c0017305:	fa                   	cli    
c0017306:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001730b:	83 c0 01             	add    eax,0x1
c001730e:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0017313:	a0 89 13 03 c0       	mov    al,ds:0xc0031389
c0017318:	0f b6 c0             	movzx  eax,al
c001731b:	85 c0                	test   eax,eax
c001731d:	75 19                	jne    c0017338 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x6e>
c001731f:	e8 28 f3 ff ff       	call   c001664c <schedule()>
c0017324:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001732c:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017331:	85 c0                	test   eax,eax
c0017333:	75 d0                	jne    c0017305 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017335:	fb                   	sti    
c0017336:	eb cd                	jmp    c0017305 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3b>
c0017338:	90                   	nop
c0017339:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c001733e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0017341:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0017345:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c001734a:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c001734d:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0017351:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c0017356:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0017359:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001735d:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c0017362:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0017365:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017369:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c001736e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017372:	c7 05 90 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031390,0x0
c001737c:	83 ec 04             	sub    esp,0x4
c001737f:	6a 20                	push   0x20
c0017381:	6a 00                	push   0x0
c0017383:	68 a0 13 03 c0       	push   0xc00313a0
c0017388:	e8 63 91 fe ff       	call   c00004f0 <memset>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017393:	0f b7 55 c4          	movzx  edx,WORD PTR [ebp-0x3c]
c0017397:	0f b7 45 c0          	movzx  eax,WORD PTR [ebp-0x40]
c001739b:	83 ec 08             	sub    esp,0x8
c001739e:	52                   	push   edx
c001739f:	50                   	push   eax
c00173a0:	e8 06 fd ff ff       	call   c00170ab <Vm::realToLinear(unsigned short, unsigned short)>
c00173a5:	83 c4 10             	add    esp,0x10
c00173a8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00173ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00173ae:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00173b1:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
c00173b4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00173b7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00173ba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00173bd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00173c0:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00173c3:	89 c6                	mov    esi,eax
c00173c5:	89 d7                	mov    edi,edx
c00173c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173c9:	89 c8                	mov    eax,ecx
c00173cb:	89 fa                	mov    edx,edi
c00173cd:	89 f3                	mov    ebx,esi
c00173cf:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00173d2:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00173d5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00173d8:	c6 05 89 13 03 c0 00 	mov    BYTE PTR ds:0xc0031389,0x0
c00173df:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00173e7:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00173ec:	85 c0                	test   eax,eax
c00173ee:	75 01                	jne    c00173f1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x127>
c00173f0:	fb                   	sti    
c00173f1:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c00173f6:	83 ec 0c             	sub    esp,0xc
c00173f9:	50                   	push   eax
c00173fa:	e8 a5 f5 ff ff       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c00173ff:	83 c4 10             	add    esp,0x10
c0017402:	b0 01                	mov    al,0x1
c0017404:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017407:	5b                   	pop    ebx
c0017408:	5e                   	pop    esi
c0017409:	5f                   	pop    edi
c001740a:	5d                   	pop    ebp
c001740b:	c3                   	ret    

c001740c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001740c:	55                   	push   ebp
c001740d:	89 e5                	mov    ebp,esp
c001740f:	56                   	push   esi
c0017410:	53                   	push   ebx
c0017411:	83 ec 30             	sub    esp,0x30
c0017414:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0017417:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001741a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001741d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017420:	66 89 5d d4          	mov    WORD PTR [ebp-0x2c],bx
c0017424:	66 89 4d d0          	mov    WORD PTR [ebp-0x30],cx
c0017428:	66 89 55 cc          	mov    WORD PTR [ebp-0x34],dx
c001742c:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0017430:	a0 80 13 03 c0       	mov    al,ds:0xc0031380
c0017435:	83 f0 01             	xor    eax,0x1
c0017438:	0f b6 c0             	movzx  eax,al
c001743b:	85 c0                	test   eax,eax
c001743d:	74 07                	je     c0017446 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x3a>
c001743f:	c6 05 80 13 03 c0 01 	mov    BYTE PTR ds:0xc0031380,0x1
c0017446:	83 ec 08             	sub    esp,0x8
c0017449:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001744c:	68 30 8a 02 c0       	push   0xc0028a30
c0017451:	e8 10 fb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017456:	83 c4 10             	add    esp,0x10
c0017459:	fa                   	cli    
c001745a:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001745f:	83 c0 01             	add    eax,0x1
c0017462:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c0017467:	a0 89 13 03 c0       	mov    al,ds:0xc0031389
c001746c:	0f b6 c0             	movzx  eax,al
c001746f:	85 c0                	test   eax,eax
c0017471:	75 19                	jne    c001748c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x80>
c0017473:	e8 d4 f1 ff ff       	call   c001664c <schedule()>
c0017478:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017480:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017485:	85 c0                	test   eax,eax
c0017487:	75 d0                	jne    c0017459 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c0017489:	fb                   	sti    
c001748a:	eb cd                	jmp    c0017459 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x4d>
c001748c:	90                   	nop
c001748d:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c0017492:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0017495:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0017499:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c001749e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00174a1:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00174a5:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c00174aa:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00174ad:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00174b1:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c00174b6:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00174b9:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c00174bd:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c00174c2:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00174c6:	c7 05 90 13 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031390,0x0
c00174d0:	83 ec 04             	sub    esp,0x4
c00174d3:	6a 20                	push   0x20
c00174d5:	6a 00                	push   0x0
c00174d7:	68 a0 13 03 c0       	push   0xc00313a0
c00174dc:	e8 0f 90 fe ff       	call   c00004f0 <memset>
c00174e1:	83 c4 10             	add    esp,0x10
c00174e4:	c7 45 ec 14 01 00 00 	mov    DWORD PTR [ebp-0x14],0x114
c00174eb:	83 ec 0c             	sub    esp,0xc
c00174ee:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00174f1:	e8 8a 81 ff ff       	call   c000f680 <malloc>
c00174f6:	83 c4 10             	add    esp,0x10
c00174f9:	89 c3                	mov    ebx,eax
c00174fb:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c0017500:	83 ec 04             	sub    esp,0x4
c0017503:	50                   	push   eax
c0017504:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017507:	53                   	push   ebx
c0017508:	e8 7b 0c ff ff       	call   c0008188 <File::File(char const*, Process*)>
c001750d:	83 c4 10             	add    esp,0x10
c0017510:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0017513:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0017517:	75 29                	jne    c0017542 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x136>
c0017519:	83 ec 0c             	sub    esp,0xc
c001751c:	68 52 8a 02 c0       	push   0xc0028a52
c0017521:	e8 ae 85 ff ff       	call   c000fad4 <KePanic(char const*)>
c0017526:	83 c4 10             	add    esp,0x10
c0017529:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017531:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017536:	85 c0                	test   eax,eax
c0017538:	75 01                	jne    c001753b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12f>
c001753a:	fb                   	sti    
c001753b:	b0 00                	mov    al,0x0
c001753d:	e9 fb 00 00 00       	jmp    c001763d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c0017542:	83 ec 04             	sub    esp,0x4
c0017545:	8d 45 df             	lea    eax,[ebp-0x21]
c0017548:	50                   	push   eax
c0017549:	8d 45 e0             	lea    eax,[ebp-0x20]
c001754c:	50                   	push   eax
c001754d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017550:	e8 53 0f ff ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c0017555:	83 c4 10             	add    esp,0x10
c0017558:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001755b:	0f b6 c0             	movzx  eax,al
c001755e:	85 c0                	test   eax,eax
c0017560:	74 29                	je     c001758b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17f>
c0017562:	83 ec 0c             	sub    esp,0xc
c0017565:	68 66 8a 02 c0       	push   0xc0028a66
c001756a:	e8 65 85 ff ff       	call   c000fad4 <KePanic(char const*)>
c001756f:	83 c4 10             	add    esp,0x10
c0017572:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001757a:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001757f:	85 c0                	test   eax,eax
c0017581:	75 01                	jne    c0017584 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x178>
c0017583:	fb                   	sti    
c0017584:	b0 00                	mov    al,0x0
c0017586:	e9 b2 00 00 00       	jmp    c001763d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c001758b:	83 ec 08             	sub    esp,0x8
c001758e:	6a 01                	push   0x1
c0017590:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017593:	e8 0e 0c ff ff       	call   c00081a6 <File::open(FileOpenMode)>
c0017598:	83 c4 10             	add    esp,0x10
c001759b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001759e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c00175a2:	74 26                	je     c00175ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1be>
c00175a4:	83 ec 0c             	sub    esp,0xc
c00175a7:	68 7f 8a 02 c0       	push   0xc0028a7f
c00175ac:	e8 23 85 ff ff       	call   c000fad4 <KePanic(char const*)>
c00175b1:	83 c4 10             	add    esp,0x10
c00175b4:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c00175bc:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c00175c1:	85 c0                	test   eax,eax
c00175c3:	75 01                	jne    c00175c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ba>
c00175c5:	fb                   	sti    
c00175c6:	b0 00                	mov    al,0x0
c00175c8:	eb 73                	jmp    c001763d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x231>
c00175ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00175cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00175cf:	83 c0 0c             	add    eax,0xc
c00175d2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00175d4:	0f b7 55 d4          	movzx  edx,WORD PTR [ebp-0x2c]
c00175d8:	0f b7 45 d0          	movzx  eax,WORD PTR [ebp-0x30]
c00175dc:	83 ec 08             	sub    esp,0x8
c00175df:	52                   	push   edx
c00175e0:	50                   	push   eax
c00175e1:	e8 c5 fa ff ff       	call   c00170ab <Vm::realToLinear(unsigned short, unsigned short)>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	89 c6                	mov    esi,eax
c00175eb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00175ee:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00175f1:	83 ec 0c             	sub    esp,0xc
c00175f4:	8d 4d d8             	lea    ecx,[ebp-0x28]
c00175f7:	51                   	push   ecx
c00175f8:	56                   	push   esi
c00175f9:	52                   	push   edx
c00175fa:	50                   	push   eax
c00175fb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00175fe:	ff d3                	call   ebx
c0017600:	83 c4 20             	add    esp,0x20
c0017603:	83 ec 0c             	sub    esp,0xc
c0017606:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0017609:	e8 f6 0b ff ff       	call   c0008204 <File::close()>
c001760e:	83 c4 10             	add    esp,0x10
c0017611:	c6 05 89 13 03 c0 00 	mov    BYTE PTR ds:0xc0031389,0x0
c0017618:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c0017620:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0017625:	85 c0                	test   eax,eax
c0017627:	75 01                	jne    c001762a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x21e>
c0017629:	fb                   	sti    
c001762a:	a1 8c 13 03 c0       	mov    eax,ds:0xc003138c
c001762f:	83 ec 0c             	sub    esp,0xc
c0017632:	50                   	push   eax
c0017633:	e8 6c f3 ff ff       	call   c00169a4 <unblockTask(ThreadControlBlock*)>
c0017638:	83 c4 10             	add    esp,0x10
c001763b:	b0 01                	mov    al,0x1
c001763d:	8d 65 f8             	lea    esp,[ebp-0x8]
c0017640:	5b                   	pop    ebx
c0017641:	5e                   	pop    esi
c0017642:	5d                   	pop    ebp
c0017643:	c3                   	ret    

c0017644 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017644:	55                   	push   ebp
c0017645:	89 e5                	mov    ebp,esp
c0017647:	83 ec 68             	sub    esp,0x68
c001764a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001764d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017650:	66 89 55 9c          	mov    WORD PTR [ebp-0x64],dx
c0017654:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017658:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c001765f:	8b 45 98             	mov    eax,DWORD PTR [ebp-0x68]
c0017662:	83 e8 06             	sub    eax,0x6
c0017665:	66 89 45 98          	mov    WORD PTR [ebp-0x68],ax
c0017669:	0f b7 55 98          	movzx  edx,WORD PTR [ebp-0x68]
c001766d:	0f b7 45 9c          	movzx  eax,WORD PTR [ebp-0x64]
c0017671:	52                   	push   edx
c0017672:	50                   	push   eax
c0017673:	e8 33 fa ff ff       	call   c00170ab <Vm::realToLinear(unsigned short, unsigned short)>
c0017678:	83 c4 08             	add    esp,0x8
c001767b:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001767e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017681:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017684:	83 e8 06             	sub    eax,0x6
c0017687:	0f b7 d0             	movzx  edx,ax
c001768a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001768d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017693:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017696:	83 c0 02             	add    eax,0x2
c0017699:	0f b7 c0             	movzx  eax,ax
c001769c:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001769f:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c00176a2:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
c00176a6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00176a9:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00176ac:	66 8b 45 da          	mov    ax,WORD PTR [ebp-0x26]
c00176b0:	88 c2                	mov    dl,al
c00176b2:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00176b5:	88 10                	mov    BYTE PTR [eax],dl
c00176b7:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
c00176bb:	c1 e8 08             	shr    eax,0x8
c00176be:	89 c2                	mov    edx,eax
c00176c0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c00176c3:	83 c0 01             	add    eax,0x1
c00176c6:	88 10                	mov    BYTE PTR [eax],dl
c00176c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00176cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00176ce:	0f b7 c0             	movzx  eax,ax
c00176d1:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00176d4:	83 c2 02             	add    edx,0x2
c00176d7:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
c00176da:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
c00176de:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00176e1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00176e4:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
c00176e8:	88 c2                	mov    dl,al
c00176ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00176ed:	88 10                	mov    BYTE PTR [eax],dl
c00176ef:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
c00176f3:	c1 e8 08             	shr    eax,0x8
c00176f6:	89 c2                	mov    edx,eax
c00176f8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00176fb:	83 c0 01             	add    eax,0x1
c00176fe:	88 10                	mov    BYTE PTR [eax],dl
c0017700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017703:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017706:	0f b7 c0             	movzx  eax,ax
c0017709:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c001770c:	83 c2 04             	add    edx,0x4
c001770f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017712:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
c0017716:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017719:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001771c:	66 8b 45 f2          	mov    ax,WORD PTR [ebp-0xe]
c0017720:	88 c2                	mov    dl,al
c0017722:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017725:	88 10                	mov    BYTE PTR [eax],dl
c0017727:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
c001772b:	c1 e8 08             	shr    eax,0x8
c001772e:	89 c2                	mov    edx,eax
c0017730:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0017733:	83 c0 01             	add    eax,0x1
c0017736:	88 10                	mov    BYTE PTR [eax],dl
c0017738:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001773d:	8b 00                	mov    eax,DWORD PTR [eax]
c001773f:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017742:	0f b6 c0             	movzx  eax,al
c0017745:	85 c0                	test   eax,eax
c0017747:	74 5e                	je     c00177a7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x163>
c0017749:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001774c:	83 c0 04             	add    eax,0x4
c001774f:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0017752:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017755:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0017758:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001775b:	8a 00                	mov    al,BYTE PTR [eax]
c001775d:	0f b6 c0             	movzx  eax,al
c0017760:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017763:	83 c2 01             	add    edx,0x1
c0017766:	8a 12                	mov    dl,BYTE PTR [edx]
c0017768:	0f b6 d2             	movzx  edx,dl
c001776b:	c1 e2 08             	shl    edx,0x8
c001776e:	09 d0                	or     eax,edx
c0017770:	80 cc 02             	or     ah,0x2
c0017773:	0f b7 c0             	movzx  eax,ax
c0017776:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c0017779:	83 c2 04             	add    edx,0x4
c001777c:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c001777f:	66 89 45 ce          	mov    WORD PTR [ebp-0x32],ax
c0017783:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017786:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0017789:	66 8b 45 ce          	mov    ax,WORD PTR [ebp-0x32]
c001778d:	88 c2                	mov    dl,al
c001778f:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0017792:	88 10                	mov    BYTE PTR [eax],dl
c0017794:	0f b7 45 ce          	movzx  eax,WORD PTR [ebp-0x32]
c0017798:	c1 e8 08             	shr    eax,0x8
c001779b:	89 c2                	mov    edx,eax
c001779d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00177a0:	83 c0 01             	add    eax,0x1
c00177a3:	88 10                	mov    BYTE PTR [eax],dl
c00177a5:	eb 5e                	jmp    c0017805 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x1c1>
c00177a7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00177aa:	83 c0 04             	add    eax,0x4
c00177ad:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c00177b0:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c00177b3:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c00177b6:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c00177b9:	8a 00                	mov    al,BYTE PTR [eax]
c00177bb:	0f b6 c0             	movzx  eax,al
c00177be:	8b 55 ac             	mov    edx,DWORD PTR [ebp-0x54]
c00177c1:	83 c2 01             	add    edx,0x1
c00177c4:	8a 12                	mov    dl,BYTE PTR [edx]
c00177c6:	0f b6 d2             	movzx  edx,dl
c00177c9:	c1 e2 08             	shl    edx,0x8
c00177cc:	09 d0                	or     eax,edx
c00177ce:	0f b7 c0             	movzx  eax,ax
c00177d1:	25 ff fd 00 00       	and    eax,0xfdff
c00177d6:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
c00177d9:	83 c2 04             	add    edx,0x4
c00177dc:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
c00177df:	66 89 45 ba          	mov    WORD PTR [ebp-0x46],ax
c00177e3:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c00177e6:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c00177e9:	66 8b 45 ba          	mov    ax,WORD PTR [ebp-0x46]
c00177ed:	88 c2                	mov    dl,al
c00177ef:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c00177f2:	88 10                	mov    BYTE PTR [eax],dl
c00177f4:	0f b7 45 ba          	movzx  eax,WORD PTR [ebp-0x46]
c00177f8:	c1 e8 08             	shr    eax,0x8
c00177fb:	89 c2                	mov    edx,eax
c00177fd:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017800:	83 c0 01             	add    eax,0x1
c0017803:	88 10                	mov    BYTE PTR [eax],dl
c0017805:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001780a:	8b 00                	mov    eax,DWORD PTR [eax]
c001780c:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017813:	c1 e0 02             	shl    eax,0x2
c0017816:	8d 50 02             	lea    edx,[eax+0x2]
c0017819:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001781c:	01 d0                	add    eax,edx
c001781e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017821:	0f b7 d0             	movzx  edx,ax
c0017824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017827:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001782a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001782d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017834:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0017837:	01 d0                	add    eax,edx
c0017839:	66 8b 00             	mov    ax,WORD PTR [eax]
c001783c:	0f b7 d0             	movzx  edx,ax
c001783f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017842:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017845:	90                   	nop
c0017846:	c9                   	leave  
c0017847:	c3                   	ret    

c0017848 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017848:	55                   	push   ebp
c0017849:	89 e5                	mov    ebp,esp
c001784b:	83 ec 28             	sub    esp,0x28
c001784e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017851:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017854:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017858:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001785c:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017860:	c1 e0 04             	shl    eax,0x4
c0017863:	89 c2                	mov    edx,eax
c0017865:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017869:	01 d0                	add    eax,edx
c001786b:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017870:	7e 10                	jle    c0017882 <Vm::readByteFromReal(unsigned short, unsigned short)+0x3a>
c0017872:	83 ec 0c             	sub    esp,0xc
c0017875:	68 98 8a 02 c0       	push   0xc0028a98
c001787a:	e8 55 82 ff ff       	call   c000fad4 <KePanic(char const*)>
c001787f:	83 c4 10             	add    esp,0x10
c0017882:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017886:	c1 e0 04             	shl    eax,0x4
c0017889:	89 c2                	mov    edx,eax
c001788b:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001788f:	01 d0                	add    eax,edx
c0017891:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017894:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017897:	8a 00                	mov    al,BYTE PTR [eax]
c0017899:	c9                   	leave  
c001789a:	c3                   	ret    

c001789b <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001789b:	55                   	push   ebp
c001789c:	89 e5                	mov    ebp,esp
c001789e:	83 ec 28             	sub    esp,0x28
c00178a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00178a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00178a7:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00178ab:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c00178af:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00178b3:	c1 e0 04             	shl    eax,0x4
c00178b6:	89 c2                	mov    edx,eax
c00178b8:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00178bc:	01 d0                	add    eax,edx
c00178be:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00178c3:	7e 10                	jle    c00178d5 <Vm::readWordFromReal(unsigned short, unsigned short)+0x3a>
c00178c5:	83 ec 0c             	sub    esp,0xc
c00178c8:	68 98 8a 02 c0       	push   0xc0028a98
c00178cd:	e8 02 82 ff ff       	call   c000fad4 <KePanic(char const*)>
c00178d2:	83 c4 10             	add    esp,0x10
c00178d5:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00178d9:	c1 e0 04             	shl    eax,0x4
c00178dc:	89 c2                	mov    edx,eax
c00178de:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00178e2:	01 d0                	add    eax,edx
c00178e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00178e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00178ea:	66 8b 00             	mov    ax,WORD PTR [eax]
c00178ed:	c9                   	leave  
c00178ee:	c3                   	ret    

c00178ef <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00178ef:	55                   	push   ebp
c00178f0:	89 e5                	mov    ebp,esp
c00178f2:	83 ec 28             	sub    esp,0x28
c00178f5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00178f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00178fb:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c00178ff:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017903:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017907:	c1 e0 04             	shl    eax,0x4
c001790a:	89 c2                	mov    edx,eax
c001790c:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017910:	01 d0                	add    eax,edx
c0017912:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017917:	7e 10                	jle    c0017929 <Vm::readDwordFromReal(unsigned short, unsigned short)+0x3a>
c0017919:	83 ec 0c             	sub    esp,0xc
c001791c:	68 98 8a 02 c0       	push   0xc0028a98
c0017921:	e8 ae 81 ff ff       	call   c000fad4 <KePanic(char const*)>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c001792d:	c1 e0 04             	shl    eax,0x4
c0017930:	89 c2                	mov    edx,eax
c0017932:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017936:	01 d0                	add    eax,edx
c0017938:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001793b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001793e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017940:	c9                   	leave  
c0017941:	c3                   	ret    

c0017942 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017942:	55                   	push   ebp
c0017943:	89 e5                	mov    ebp,esp
c0017945:	83 ec 28             	sub    esp,0x28
c0017948:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001794b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001794e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0017951:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017955:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017959:	88 c8                	mov    al,cl
c001795b:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
c001795e:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017962:	c1 e0 04             	shl    eax,0x4
c0017965:	89 c2                	mov    edx,eax
c0017967:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c001796b:	01 d0                	add    eax,edx
c001796d:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017972:	7e 10                	jle    c0017984 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)+0x42>
c0017974:	83 ec 0c             	sub    esp,0xc
c0017977:	68 98 8a 02 c0       	push   0xc0028a98
c001797c:	e8 53 81 ff ff       	call   c000fad4 <KePanic(char const*)>
c0017981:	83 c4 10             	add    esp,0x10
c0017984:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017988:	c1 e0 04             	shl    eax,0x4
c001798b:	89 c2                	mov    edx,eax
c001798d:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017991:	01 d0                	add    eax,edx
c0017993:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017996:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017999:	8a 55 dc             	mov    dl,BYTE PTR [ebp-0x24]
c001799c:	88 10                	mov    BYTE PTR [eax],dl
c001799e:	90                   	nop
c001799f:	c9                   	leave  
c00179a0:	c3                   	ret    

c00179a1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00179a1:	55                   	push   ebp
c00179a2:	89 e5                	mov    ebp,esp
c00179a4:	83 ec 28             	sub    esp,0x28
c00179a7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00179aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00179ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00179b0:	66 89 4d e4          	mov    WORD PTR [ebp-0x1c],cx
c00179b4:	66 89 55 e0          	mov    WORD PTR [ebp-0x20],dx
c00179b8:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c00179bc:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00179c0:	c1 e0 04             	shl    eax,0x4
c00179c3:	89 c2                	mov    edx,eax
c00179c5:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00179c9:	01 d0                	add    eax,edx
c00179cb:	3d ff ff 0f 00       	cmp    eax,0xfffff
c00179d0:	7e 10                	jle    c00179e2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)+0x41>
c00179d2:	83 ec 0c             	sub    esp,0xc
c00179d5:	68 98 8a 02 c0       	push   0xc0028a98
c00179da:	e8 f5 80 ff ff       	call   c000fad4 <KePanic(char const*)>
c00179df:	83 c4 10             	add    esp,0x10
c00179e2:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c00179e6:	c1 e0 04             	shl    eax,0x4
c00179e9:	89 c2                	mov    edx,eax
c00179eb:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c00179ef:	01 d0                	add    eax,edx
c00179f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00179f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00179f7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00179fa:	66 89 10             	mov    WORD PTR [eax],dx
c00179fd:	90                   	nop
c00179fe:	c9                   	leave  
c00179ff:	c3                   	ret    

c0017a00 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017a00:	55                   	push   ebp
c0017a01:	89 e5                	mov    ebp,esp
c0017a03:	83 ec 28             	sub    esp,0x28
c0017a06:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0017a09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0017a0c:	66 89 55 e4          	mov    WORD PTR [ebp-0x1c],dx
c0017a10:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0017a14:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017a18:	c1 e0 04             	shl    eax,0x4
c0017a1b:	89 c2                	mov    edx,eax
c0017a1d:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017a21:	01 d0                	add    eax,edx
c0017a23:	3d ff ff 0f 00       	cmp    eax,0xfffff
c0017a28:	7e 10                	jle    c0017a3a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)+0x3a>
c0017a2a:	83 ec 0c             	sub    esp,0xc
c0017a2d:	68 98 8a 02 c0       	push   0xc0028a98
c0017a32:	e8 9d 80 ff ff       	call   c000fad4 <KePanic(char const*)>
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	0f b7 45 e4          	movzx  eax,WORD PTR [ebp-0x1c]
c0017a3e:	c1 e0 04             	shl    eax,0x4
c0017a41:	89 c2                	mov    edx,eax
c0017a43:	0f b7 45 e0          	movzx  eax,WORD PTR [ebp-0x20]
c0017a47:	01 d0                	add    eax,edx
c0017a49:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0017a4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0017a4f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017a52:	89 10                	mov    DWORD PTR [eax],edx
c0017a54:	90                   	nop
c0017a55:	c9                   	leave  
c0017a56:	c3                   	ret    

c0017a57 <Vm::faultHandler(regs*)>:
c0017a57:	55                   	push   ebp
c0017a58:	89 e5                	mov    ebp,esp
c0017a5a:	57                   	push   edi
c0017a5b:	56                   	push   esi
c0017a5c:	53                   	push   ebx
c0017a5d:	81 ec ac 00 00 00    	sub    esp,0xac
c0017a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a66:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017a69:	0f b7 d0             	movzx  edx,ax
c0017a6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a72:	0f b7 c0             	movzx  eax,ax
c0017a75:	52                   	push   edx
c0017a76:	50                   	push   eax
c0017a77:	e8 2f f6 ff ff       	call   c00170ab <Vm::realToLinear(unsigned short, unsigned short)>
c0017a7c:	83 c4 08             	add    esp,0x8
c0017a7f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0017a82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a85:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017a88:	0f b7 d0             	movzx  edx,ax
c0017a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a8e:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017a91:	0f b7 c0             	movzx  eax,ax
c0017a94:	52                   	push   edx
c0017a95:	50                   	push   eax
c0017a96:	e8 10 f6 ff ff       	call   c00170ab <Vm::realToLinear(unsigned short, unsigned short)>
c0017a9b:	83 c4 08             	add    esp,0x8
c0017a9e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0017aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aa4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017aa7:	0f b7 d0             	movzx  edx,ax
c0017aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aad:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017ab0:	0f b7 c0             	movzx  eax,ax
c0017ab3:	52                   	push   edx
c0017ab4:	50                   	push   eax
c0017ab5:	e8 f1 f5 ff ff       	call   c00170ab <Vm::realToLinear(unsigned short, unsigned short)>
c0017aba:	83 c4 08             	add    esp,0x8
c0017abd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0017ac0:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0017ac7:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
c0017acb:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
c0017acf:	c6 45 e1 06          	mov    BYTE PTR [ebp-0x1f],0x6
c0017ad3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017ad6:	8a 00                	mov    al,BYTE PTR [eax]
c0017ad8:	0f b6 c0             	movzx  eax,al
c0017adb:	83 e8 26             	sub    eax,0x26
c0017ade:	3d d5 00 00 00       	cmp    eax,0xd5
c0017ae3:	0f 87 f8 0c 00 00    	ja     c00187e1 <Vm::faultHandler(regs*)+0xd8a>
c0017ae9:	8b 04 85 18 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74e8]
c0017af0:	ff e0                	jmp    eax
c0017af2:	c6 45 e1 02          	mov    BYTE PTR [ebp-0x1f],0x2
c0017af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017af9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017afc:	8d 50 01             	lea    edx,[eax+0x1]
c0017aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b05:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017b09:	e9 87 0d 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017b0e:	c6 45 e1 00          	mov    BYTE PTR [ebp-0x1f],0x0
c0017b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b18:	8d 50 01             	lea    edx,[eax+0x1]
c0017b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b1e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b21:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017b25:	e9 6b 0d 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017b2a:	c6 45 e1 01          	mov    BYTE PTR [ebp-0x1f],0x1
c0017b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b31:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b34:	8d 50 01             	lea    edx,[eax+0x1]
c0017b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b3d:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017b41:	e9 4f 0d 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017b46:	c6 45 e1 03          	mov    BYTE PTR [ebp-0x1f],0x3
c0017b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b50:	8d 50 01             	lea    edx,[eax+0x1]
c0017b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b56:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b59:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017b5d:	e9 33 0d 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017b62:	c6 45 e1 04          	mov    BYTE PTR [ebp-0x1f],0x4
c0017b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b6c:	8d 50 01             	lea    edx,[eax+0x1]
c0017b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b72:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b75:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017b79:	e9 17 0d 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017b7e:	c6 45 e1 05          	mov    BYTE PTR [ebp-0x1f],0x5
c0017b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b85:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017b88:	8d 50 01             	lea    edx,[eax+0x1]
c0017b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017b8e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017b91:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017b95:	e9 fb 0c 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017b9a:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0017b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ba1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ba4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017baa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017bad:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017bb1:	e9 df 0c 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017bb6:	c6 45 e2 01          	mov    BYTE PTR [ebp-0x1e],0x1
c0017bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bbd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017bc0:	8d 50 01             	lea    edx,[eax+0x1]
c0017bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bc6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017bc9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017bcd:	e9 c3 0c 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bd5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017bd8:	8d 50 01             	lea    edx,[eax+0x1]
c0017bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bde:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017be1:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
c0017be5:	e9 ab 0c 00 00       	jmp    c0018895 <Vm::faultHandler(regs*)+0xe3e>
c0017bea:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0017bee:	85 c0                	test   eax,eax
c0017bf0:	74 5b                	je     c0017c4d <Vm::faultHandler(regs*)+0x1f6>
c0017bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017bf5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017bf8:	83 e8 04             	sub    eax,0x4
c0017bfb:	0f b7 d0             	movzx  edx,ax
c0017bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c01:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017c04:	83 6d d0 04          	sub    DWORD PTR [ebp-0x30],0x4
c0017c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017c0e:	25 ff 0d 00 00       	and    eax,0xdff
c0017c13:	89 c2                	mov    edx,eax
c0017c15:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017c18:	89 10                	mov    DWORD PTR [eax],edx
c0017c1a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c21:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017c24:	0f b6 c0             	movzx  eax,al
c0017c27:	85 c0                	test   eax,eax
c0017c29:	74 11                	je     c0017c3c <Vm::faultHandler(regs*)+0x1e5>
c0017c2b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c30:	80 cc 02             	or     ah,0x2
c0017c33:	89 c2                	mov    edx,eax
c0017c35:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017c38:	89 10                	mov    DWORD PTR [eax],edx
c0017c3a:	eb 6a                	jmp    c0017ca6 <Vm::faultHandler(regs*)+0x24f>
c0017c3c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c41:	80 e4 fd             	and    ah,0xfd
c0017c44:	89 c2                	mov    edx,eax
c0017c46:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017c49:	89 10                	mov    DWORD PTR [eax],edx
c0017c4b:	eb 59                	jmp    c0017ca6 <Vm::faultHandler(regs*)+0x24f>
c0017c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c50:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017c53:	83 e8 02             	sub    eax,0x2
c0017c56:	0f b7 d0             	movzx  edx,ax
c0017c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c5c:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017c5f:	83 6d d4 02          	sub    DWORD PTR [ebp-0x2c],0x2
c0017c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017c66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017c69:	89 c2                	mov    edx,eax
c0017c6b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017c6e:	66 89 10             	mov    WORD PTR [eax],dx
c0017c71:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c76:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c78:	8a 40 61             	mov    al,BYTE PTR [eax+0x61]
c0017c7b:	0f b6 c0             	movzx  eax,al
c0017c7e:	85 c0                	test   eax,eax
c0017c80:	74 13                	je     c0017c95 <Vm::faultHandler(regs*)+0x23e>
c0017c82:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017c85:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017c88:	80 cc 02             	or     ah,0x2
c0017c8b:	89 c2                	mov    edx,eax
c0017c8d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017c90:	66 89 10             	mov    WORD PTR [eax],dx
c0017c93:	eb 11                	jmp    c0017ca6 <Vm::faultHandler(regs*)+0x24f>
c0017c95:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017c98:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017c9b:	80 e4 fd             	and    ah,0xfd
c0017c9e:	89 c2                	mov    edx,eax
c0017ca0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017ca3:	66 89 10             	mov    WORD PTR [eax],dx
c0017ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ca9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017cac:	8d 50 01             	lea    edx,[eax+0x1]
c0017caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cb2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017cb5:	b0 01                	mov    al,0x1
c0017cb7:	e9 de 0b 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0017cbc:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0017cc0:	85 c0                	test   eax,eax
c0017cc2:	74 46                	je     c0017d0a <Vm::faultHandler(regs*)+0x2b3>
c0017cc4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017cc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cc9:	25 ff 0d 00 00       	and    eax,0xdff
c0017cce:	0d 00 02 02 00       	or     eax,0x20200
c0017cd3:	89 c2                	mov    edx,eax
c0017cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cd8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0017cdb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0017cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ce0:	25 00 02 00 00       	and    eax,0x200
c0017ce5:	89 c2                	mov    edx,eax
c0017ce7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cec:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cee:	85 d2                	test   edx,edx
c0017cf0:	0f 95 c2             	setne  dl
c0017cf3:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0017cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017cf9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017cfc:	83 c0 04             	add    eax,0x4
c0017cff:	0f b7 d0             	movzx  edx,ax
c0017d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d05:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017d08:	eb 47                	jmp    c0017d51 <Vm::faultHandler(regs*)+0x2fa>
c0017d0a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017d0d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017d10:	0f b7 c0             	movzx  eax,ax
c0017d13:	0d 00 02 02 00       	or     eax,0x20200
c0017d18:	89 c2                	mov    edx,eax
c0017d1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d1d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0017d20:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017d23:	66 8b 00             	mov    ax,WORD PTR [eax]
c0017d26:	0f b7 c0             	movzx  eax,ax
c0017d29:	25 00 02 00 00       	and    eax,0x200
c0017d2e:	89 c2                	mov    edx,eax
c0017d30:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d35:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d37:	85 d2                	test   edx,edx
c0017d39:	0f 95 c2             	setne  dl
c0017d3c:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0017d3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d42:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d45:	83 c0 02             	add    eax,0x2
c0017d48:	0f b7 d0             	movzx  edx,ax
c0017d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d4e:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d57:	8d 50 01             	lea    edx,[eax+0x1]
c0017d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d5d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d60:	b0 01                	mov    al,0x1
c0017d62:	e9 33 0b 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0017d67:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017d6a:	83 c0 01             	add    eax,0x1
c0017d6d:	8a 00                	mov    al,BYTE PTR [eax]
c0017d6f:	0f b6 c0             	movzx  eax,al
c0017d72:	3d ee 00 00 00       	cmp    eax,0xee
c0017d77:	75 19                	jne    c0017d92 <Vm::faultHandler(regs*)+0x33b>
c0017d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d7c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0017d7f:	83 ec 0c             	sub    esp,0xc
c0017d82:	50                   	push   eax
c0017d83:	e8 ee f3 ff ff       	call   c0017176 <Vm::mainloop3(unsigned long)>
c0017d88:	83 c4 10             	add    esp,0x10
c0017d8b:	b0 01                	mov    al,0x1
c0017d8d:	e9 08 0b 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0017d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d95:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d98:	0f b7 c8             	movzx  ecx,ax
c0017d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017d9e:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c0017da1:	0f b7 d0             	movzx  edx,ax
c0017da4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017da7:	83 c0 01             	add    eax,0x1
c0017daa:	8a 00                	mov    al,BYTE PTR [eax]
c0017dac:	0f b6 c0             	movzx  eax,al
c0017daf:	83 ec 0c             	sub    esp,0xc
c0017db2:	51                   	push   ecx
c0017db3:	52                   	push   edx
c0017db4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0017db7:	50                   	push   eax
c0017db8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017dbb:	e8 84 f8 ff ff       	call   c0017644 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017dc0:	83 c4 20             	add    esp,0x20
c0017dc3:	b0 01                	mov    al,0x1
c0017dc5:	e9 d0 0a 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0017dca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017dcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dd1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017dd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ddb:	8d 50 01             	lea    edx,[eax+0x1]
c0017dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017de1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017de4:	b0 01                	mov    al,0x1
c0017de6:	e9 af 0a 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0017deb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017df0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017df2:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0017df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017df9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017dfc:	8d 50 01             	lea    edx,[eax+0x1]
c0017dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e05:	b0 01                	mov    al,0x1
c0017e07:	e9 8e 0a 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0017e0c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e0f:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
c0017e12:	8b 45 ac             	mov    eax,DWORD PTR [ebp-0x54]
c0017e15:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
c0017e18:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
c0017e1b:	8a 00                	mov    al,BYTE PTR [eax]
c0017e1d:	0f b6 c0             	movzx  eax,al
c0017e20:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
c0017e23:	83 c2 01             	add    edx,0x1
c0017e26:	8a 12                	mov    dl,BYTE PTR [edx]
c0017e28:	0f b6 d2             	movzx  edx,dl
c0017e2b:	c1 e2 08             	shl    edx,0x8
c0017e2e:	09 d0                	or     eax,edx
c0017e30:	0f b7 d0             	movzx  edx,ax
c0017e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e36:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e39:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e3c:	83 c0 02             	add    eax,0x2
c0017e3f:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
c0017e42:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
c0017e45:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
c0017e48:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
c0017e4b:	8a 00                	mov    al,BYTE PTR [eax]
c0017e4d:	0f b6 c0             	movzx  eax,al
c0017e50:	8b 55 b0             	mov    edx,DWORD PTR [ebp-0x50]
c0017e53:	83 c2 01             	add    edx,0x1
c0017e56:	8a 12                	mov    dl,BYTE PTR [edx]
c0017e58:	0f b6 d2             	movzx  edx,dl
c0017e5b:	c1 e2 08             	shl    edx,0x8
c0017e5e:	09 d0                	or     eax,edx
c0017e60:	0f b7 d0             	movzx  edx,ax
c0017e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e66:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0017e69:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017e6c:	83 c0 04             	add    eax,0x4
c0017e6f:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
c0017e72:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
c0017e75:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
c0017e78:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
c0017e7b:	8a 00                	mov    al,BYTE PTR [eax]
c0017e7d:	0f b6 c0             	movzx  eax,al
c0017e80:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
c0017e83:	83 c2 01             	add    edx,0x1
c0017e86:	8a 12                	mov    dl,BYTE PTR [edx]
c0017e88:	0f b6 d2             	movzx  edx,dl
c0017e8b:	c1 e2 08             	shl    edx,0x8
c0017e8e:	09 d0                	or     eax,edx
c0017e90:	0f b7 c0             	movzx  eax,ax
c0017e93:	0d 00 02 02 00       	or     eax,0x20200
c0017e98:	89 c2                	mov    edx,eax
c0017e9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e9d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0017ea0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0017ea3:	83 c0 04             	add    eax,0x4
c0017ea6:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0017ea9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0017eac:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c0017eaf:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0017eb2:	8a 00                	mov    al,BYTE PTR [eax]
c0017eb4:	0f b6 c0             	movzx  eax,al
c0017eb7:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
c0017eba:	83 c2 01             	add    edx,0x1
c0017ebd:	8a 12                	mov    dl,BYTE PTR [edx]
c0017ebf:	0f b6 d2             	movzx  edx,dl
c0017ec2:	c1 e2 08             	shl    edx,0x8
c0017ec5:	09 d0                	or     eax,edx
c0017ec7:	0f b7 c0             	movzx  eax,ax
c0017eca:	25 00 02 00 00       	and    eax,0x200
c0017ecf:	89 c2                	mov    edx,eax
c0017ed1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ed6:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ed8:	85 d2                	test   edx,edx
c0017eda:	0f 95 c2             	setne  dl
c0017edd:	88 50 61             	mov    BYTE PTR [eax+0x61],dl
c0017ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ee3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017ee6:	83 c0 06             	add    eax,0x6
c0017ee9:	0f b7 d0             	movzx  edx,ax
c0017eec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017eef:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0017ef2:	b0 01                	mov    al,0x1
c0017ef4:	e9 a1 09 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0017ef9:	66 c7 45 ca 00 00    	mov    WORD PTR [ebp-0x36],0x0
c0017eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f02:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0017f05:	66 89 45 ca          	mov    WORD PTR [ebp-0x36],ax
c0017f09:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0017f0d:	85 c0                	test   eax,eax
c0017f0f:	74 7a                	je     c0017f8b <Vm::faultHandler(regs*)+0x534>
c0017f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017f17:	3d ff ff 00 00       	cmp    eax,0xffff
c0017f1c:	76 6d                	jbe    c0017f8b <Vm::faultHandler(regs*)+0x534>
c0017f1e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f21:	83 c0 05             	add    eax,0x5
c0017f24:	8a 00                	mov    al,BYTE PTR [eax]
c0017f26:	0f b6 c0             	movzx  eax,al
c0017f29:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0017f2f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f32:	83 c0 04             	add    eax,0x4
c0017f35:	8a 00                	mov    al,BYTE PTR [eax]
c0017f37:	0f b6 f8             	movzx  edi,al
c0017f3a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f3d:	83 c0 03             	add    eax,0x3
c0017f40:	8a 00                	mov    al,BYTE PTR [eax]
c0017f42:	0f b6 f0             	movzx  esi,al
c0017f45:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f48:	83 c0 02             	add    eax,0x2
c0017f4b:	8a 00                	mov    al,BYTE PTR [eax]
c0017f4d:	0f b6 d8             	movzx  ebx,al
c0017f50:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f53:	83 c0 01             	add    eax,0x1
c0017f56:	8a 00                	mov    al,BYTE PTR [eax]
c0017f58:	0f b6 c8             	movzx  ecx,al
c0017f5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f5e:	8a 00                	mov    al,BYTE PTR [eax]
c0017f60:	0f b6 d0             	movzx  edx,al
c0017f63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0017f66:	8a 00                	mov    al,BYTE PTR [eax]
c0017f68:	0f b6 c0             	movzx  eax,al
c0017f6b:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0017f71:	57                   	push   edi
c0017f72:	56                   	push   esi
c0017f73:	53                   	push   ebx
c0017f74:	51                   	push   ecx
c0017f75:	52                   	push   edx
c0017f76:	50                   	push   eax
c0017f77:	68 b8 8a 02 c0       	push   0xc0028ab8
c0017f7c:	e8 e5 ef fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0017f81:	83 c4 20             	add    esp,0x20
c0017f84:	b0 00                	mov    al,0x0
c0017f86:	e9 0f 09 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0017f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017f8e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0017f91:	0f b7 c0             	movzx  eax,ax
c0017f94:	83 ec 0c             	sub    esp,0xc
c0017f97:	50                   	push   eax
c0017f98:	e8 70 f0 ff ff       	call   c001700d <Vm::inbv(unsigned short)>
c0017f9d:	83 c4 10             	add    esp,0x10
c0017fa0:	0f b6 c8             	movzx  ecx,al
c0017fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fa6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017fa9:	0f b7 d0             	movzx  edx,ax
c0017fac:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
c0017fb0:	83 ec 04             	sub    esp,0x4
c0017fb3:	51                   	push   ecx
c0017fb4:	52                   	push   edx
c0017fb5:	50                   	push   eax
c0017fb6:	e8 87 f9 ff ff       	call   c0017942 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017fbb:	83 c4 10             	add    esp,0x10
c0017fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fc1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017fc4:	25 00 04 00 00       	and    eax,0x400
c0017fc9:	85 c0                	test   eax,eax
c0017fcb:	74 14                	je     c0017fe1 <Vm::faultHandler(regs*)+0x58a>
c0017fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017fd3:	83 e8 01             	sub    eax,0x1
c0017fd6:	0f b7 d0             	movzx  edx,ax
c0017fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fdc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017fdf:	eb 12                	jmp    c0017ff3 <Vm::faultHandler(regs*)+0x59c>
c0017fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fe4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017fe7:	83 c0 01             	add    eax,0x1
c0017fea:	0f b7 d0             	movzx  edx,ax
c0017fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ff0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017ff6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017ff9:	8d 50 01             	lea    edx,[eax+0x1]
c0017ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017fff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018002:	b0 01                	mov    al,0x1
c0018004:	e9 91 08 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0018009:	66 c7 45 c8 00 00    	mov    WORD PTR [ebp-0x38],0x0
c001800f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018012:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018015:	66 89 45 c8          	mov    WORD PTR [ebp-0x38],ax
c0018019:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c001801d:	85 c0                	test   eax,eax
c001801f:	74 7a                	je     c001809b <Vm::faultHandler(regs*)+0x644>
c0018021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018024:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018027:	3d ff ff 00 00       	cmp    eax,0xffff
c001802c:	76 6d                	jbe    c001809b <Vm::faultHandler(regs*)+0x644>
c001802e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018031:	83 c0 05             	add    eax,0x5
c0018034:	8a 00                	mov    al,BYTE PTR [eax]
c0018036:	0f b6 c0             	movzx  eax,al
c0018039:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001803f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018042:	83 c0 04             	add    eax,0x4
c0018045:	8a 00                	mov    al,BYTE PTR [eax]
c0018047:	0f b6 f8             	movzx  edi,al
c001804a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001804d:	83 c0 03             	add    eax,0x3
c0018050:	8a 00                	mov    al,BYTE PTR [eax]
c0018052:	0f b6 f0             	movzx  esi,al
c0018055:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018058:	83 c0 02             	add    eax,0x2
c001805b:	8a 00                	mov    al,BYTE PTR [eax]
c001805d:	0f b6 d8             	movzx  ebx,al
c0018060:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018063:	83 c0 01             	add    eax,0x1
c0018066:	8a 00                	mov    al,BYTE PTR [eax]
c0018068:	0f b6 c8             	movzx  ecx,al
c001806b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001806e:	8a 00                	mov    al,BYTE PTR [eax]
c0018070:	0f b6 d0             	movzx  edx,al
c0018073:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018076:	8a 00                	mov    al,BYTE PTR [eax]
c0018078:	0f b6 c0             	movzx  eax,al
c001807b:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018081:	57                   	push   edi
c0018082:	56                   	push   esi
c0018083:	53                   	push   ebx
c0018084:	51                   	push   ecx
c0018085:	52                   	push   edx
c0018086:	50                   	push   eax
c0018087:	68 b8 8a 02 c0       	push   0xc0028ab8
c001808c:	e8 d5 ee fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018091:	83 c4 20             	add    esp,0x20
c0018094:	b0 00                	mov    al,0x0
c0018096:	e9 ff 07 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c001809b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001809f:	85 c0                	test   eax,eax
c00180a1:	74 6f                	je     c0018112 <Vm::faultHandler(regs*)+0x6bb>
c00180a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180a6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00180a9:	0f b7 c0             	movzx  eax,ax
c00180ac:	66 89 45 a6          	mov    WORD PTR [ebp-0x5a],ax
c00180b0:	66 8b 45 a6          	mov    ax,WORD PTR [ebp-0x5a]
c00180b4:	89 c2                	mov    edx,eax
c00180b6:	ed                   	in     eax,dx
c00180b7:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
c00180ba:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
c00180bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00180c3:	0f b7 d0             	movzx  edx,ax
c00180c6:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c00180ca:	83 ec 04             	sub    esp,0x4
c00180cd:	51                   	push   ecx
c00180ce:	52                   	push   edx
c00180cf:	50                   	push   eax
c00180d0:	e8 2b f9 ff ff       	call   c0017a00 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00180d5:	83 c4 10             	add    esp,0x10
c00180d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00180de:	25 00 04 00 00       	and    eax,0x400
c00180e3:	85 c0                	test   eax,eax
c00180e5:	74 17                	je     c00180fe <Vm::faultHandler(regs*)+0x6a7>
c00180e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00180ed:	83 e8 04             	sub    eax,0x4
c00180f0:	0f b7 d0             	movzx  edx,ax
c00180f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00180f6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00180f9:	e9 83 00 00 00       	jmp    c0018181 <Vm::faultHandler(regs*)+0x72a>
c00180fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018101:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018104:	83 c0 04             	add    eax,0x4
c0018107:	0f b7 d0             	movzx  edx,ax
c001810a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001810d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018110:	eb 6f                	jmp    c0018181 <Vm::faultHandler(regs*)+0x72a>
c0018112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018115:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018118:	0f b7 c0             	movzx  eax,ax
c001811b:	66 89 45 9e          	mov    WORD PTR [ebp-0x62],ax
c001811f:	66 8b 45 9e          	mov    ax,WORD PTR [ebp-0x62]
c0018123:	89 c2                	mov    edx,eax
c0018125:	66 ed                	in     ax,dx
c0018127:	66 89 45 9c          	mov    WORD PTR [ebp-0x64],ax
c001812b:	8b 45 9c             	mov    eax,DWORD PTR [ebp-0x64]
c001812e:	0f b7 c8             	movzx  ecx,ax
c0018131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018134:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018137:	0f b7 d0             	movzx  edx,ax
c001813a:	0f b7 45 c8          	movzx  eax,WORD PTR [ebp-0x38]
c001813e:	83 ec 04             	sub    esp,0x4
c0018141:	51                   	push   ecx
c0018142:	52                   	push   edx
c0018143:	50                   	push   eax
c0018144:	e8 58 f8 ff ff       	call   c00179a1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018149:	83 c4 10             	add    esp,0x10
c001814c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001814f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018152:	25 00 04 00 00       	and    eax,0x400
c0018157:	85 c0                	test   eax,eax
c0018159:	74 14                	je     c001816f <Vm::faultHandler(regs*)+0x718>
c001815b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001815e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018161:	83 e8 02             	sub    eax,0x2
c0018164:	0f b7 d0             	movzx  edx,ax
c0018167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001816a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001816d:	eb 12                	jmp    c0018181 <Vm::faultHandler(regs*)+0x72a>
c001816f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018172:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018175:	83 c0 02             	add    eax,0x2
c0018178:	0f b7 d0             	movzx  edx,ax
c001817b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001817e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018184:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018187:	8d 50 01             	lea    edx,[eax+0x1]
c001818a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001818d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018190:	b0 01                	mov    al,0x1
c0018192:	e9 03 07 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0018197:	66 c7 45 de 00 00    	mov    WORD PTR [ebp-0x22],0x0
c001819d:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c00181a1:	83 f8 06             	cmp    eax,0x6
c00181a4:	77 4f                	ja     c00181f5 <Vm::faultHandler(regs*)+0x79e>
c00181a6:	8b 04 85 70 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7190]
c00181ad:	ff e0                	jmp    eax
c00181af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00181b5:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00181b9:	eb 3a                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x79e>
c00181bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00181c1:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00181c5:	eb 2e                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x79e>
c00181c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00181cd:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00181d1:	eb 22                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x79e>
c00181d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00181d9:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00181dd:	eb 16                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x79e>
c00181df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00181e4:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00181e8:	eb 0b                	jmp    c00181f5 <Vm::faultHandler(regs*)+0x79e>
c00181ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00181ed:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c00181f0:	66 89 45 de          	mov    WORD PTR [ebp-0x22],ax
c00181f4:	90                   	nop
c00181f5:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c00181f9:	85 c0                	test   eax,eax
c00181fb:	74 7a                	je     c0018277 <Vm::faultHandler(regs*)+0x820>
c00181fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018200:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018203:	3d ff ff 00 00       	cmp    eax,0xffff
c0018208:	76 6d                	jbe    c0018277 <Vm::faultHandler(regs*)+0x820>
c001820a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001820d:	83 c0 05             	add    eax,0x5
c0018210:	8a 00                	mov    al,BYTE PTR [eax]
c0018212:	0f b6 c0             	movzx  eax,al
c0018215:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c001821b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001821e:	83 c0 04             	add    eax,0x4
c0018221:	8a 00                	mov    al,BYTE PTR [eax]
c0018223:	0f b6 f8             	movzx  edi,al
c0018226:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018229:	83 c0 03             	add    eax,0x3
c001822c:	8a 00                	mov    al,BYTE PTR [eax]
c001822e:	0f b6 f0             	movzx  esi,al
c0018231:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018234:	83 c0 02             	add    eax,0x2
c0018237:	8a 00                	mov    al,BYTE PTR [eax]
c0018239:	0f b6 d8             	movzx  ebx,al
c001823c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001823f:	83 c0 01             	add    eax,0x1
c0018242:	8a 00                	mov    al,BYTE PTR [eax]
c0018244:	0f b6 c8             	movzx  ecx,al
c0018247:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001824a:	8a 00                	mov    al,BYTE PTR [eax]
c001824c:	0f b6 d0             	movzx  edx,al
c001824f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018252:	8a 00                	mov    al,BYTE PTR [eax]
c0018254:	0f b6 c0             	movzx  eax,al
c0018257:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c001825d:	57                   	push   edi
c001825e:	56                   	push   esi
c001825f:	53                   	push   ebx
c0018260:	51                   	push   ecx
c0018261:	52                   	push   edx
c0018262:	50                   	push   eax
c0018263:	68 b8 8a 02 c0       	push   0xc0028ab8
c0018268:	e8 f9 ec fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001826d:	83 c4 20             	add    esp,0x20
c0018270:	b0 00                	mov    al,0x0
c0018272:	e9 23 06 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0018277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001827a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001827d:	0f b7 d0             	movzx  edx,ax
c0018280:	0f b7 45 de          	movzx  eax,WORD PTR [ebp-0x22]
c0018284:	83 ec 08             	sub    esp,0x8
c0018287:	52                   	push   edx
c0018288:	50                   	push   eax
c0018289:	e8 ba f5 ff ff       	call   c0017848 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001828e:	83 c4 10             	add    esp,0x10
c0018291:	0f b6 d0             	movzx  edx,al
c0018294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018297:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001829a:	0f b7 c0             	movzx  eax,ax
c001829d:	83 ec 08             	sub    esp,0x8
c00182a0:	52                   	push   edx
c00182a1:	50                   	push   eax
c00182a2:	e8 9d ed ff ff       	call   c0017044 <Vm::outbv(unsigned short, unsigned char)>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00182b0:	25 00 04 00 00       	and    eax,0x400
c00182b5:	85 c0                	test   eax,eax
c00182b7:	74 14                	je     c00182cd <Vm::faultHandler(regs*)+0x876>
c00182b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182bc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182bf:	83 e8 01             	sub    eax,0x1
c00182c2:	0f b7 d0             	movzx  edx,ax
c00182c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182c8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00182cb:	eb 12                	jmp    c00182df <Vm::faultHandler(regs*)+0x888>
c00182cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182d0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00182d3:	83 c0 01             	add    eax,0x1
c00182d6:	0f b7 d0             	movzx  edx,ax
c00182d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182dc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00182df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00182e5:	8d 50 01             	lea    edx,[eax+0x1]
c00182e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00182eb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00182ee:	b0 01                	mov    al,0x1
c00182f0:	e9 a5 05 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c00182f5:	66 c7 45 dc 00 00    	mov    WORD PTR [ebp-0x24],0x0
c00182fb:	0f b6 45 e1          	movzx  eax,BYTE PTR [ebp-0x1f]
c00182ff:	83 f8 06             	cmp    eax,0x6
c0018302:	77 4f                	ja     c0018353 <Vm::faultHandler(regs*)+0x8fc>
c0018304:	8b 04 85 8c 8e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7174]
c001830b:	ff e0                	jmp    eax
c001830d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018310:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018313:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018317:	eb 3a                	jmp    c0018353 <Vm::faultHandler(regs*)+0x8fc>
c0018319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001831c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001831f:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018323:	eb 2e                	jmp    c0018353 <Vm::faultHandler(regs*)+0x8fc>
c0018325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018328:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001832b:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001832f:	eb 22                	jmp    c0018353 <Vm::faultHandler(regs*)+0x8fc>
c0018331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018337:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c001833b:	eb 16                	jmp    c0018353 <Vm::faultHandler(regs*)+0x8fc>
c001833d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018340:	8b 00                	mov    eax,DWORD PTR [eax]
c0018342:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018346:	eb 0b                	jmp    c0018353 <Vm::faultHandler(regs*)+0x8fc>
c0018348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001834b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c001834e:	66 89 45 dc          	mov    WORD PTR [ebp-0x24],ax
c0018352:	90                   	nop
c0018353:	0f b6 45 e2          	movzx  eax,BYTE PTR [ebp-0x1e]
c0018357:	85 c0                	test   eax,eax
c0018359:	74 7a                	je     c00183d5 <Vm::faultHandler(regs*)+0x97e>
c001835b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001835e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018361:	3d ff ff 00 00       	cmp    eax,0xffff
c0018366:	76 6d                	jbe    c00183d5 <Vm::faultHandler(regs*)+0x97e>
c0018368:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001836b:	83 c0 05             	add    eax,0x5
c001836e:	8a 00                	mov    al,BYTE PTR [eax]
c0018370:	0f b6 c0             	movzx  eax,al
c0018373:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c0018379:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001837c:	83 c0 04             	add    eax,0x4
c001837f:	8a 00                	mov    al,BYTE PTR [eax]
c0018381:	0f b6 f8             	movzx  edi,al
c0018384:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018387:	83 c0 03             	add    eax,0x3
c001838a:	8a 00                	mov    al,BYTE PTR [eax]
c001838c:	0f b6 f0             	movzx  esi,al
c001838f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018392:	83 c0 02             	add    eax,0x2
c0018395:	8a 00                	mov    al,BYTE PTR [eax]
c0018397:	0f b6 d8             	movzx  ebx,al
c001839a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001839d:	83 c0 01             	add    eax,0x1
c00183a0:	8a 00                	mov    al,BYTE PTR [eax]
c00183a2:	0f b6 c8             	movzx  ecx,al
c00183a5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183a8:	8a 00                	mov    al,BYTE PTR [eax]
c00183aa:	0f b6 d0             	movzx  edx,al
c00183ad:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00183b0:	8a 00                	mov    al,BYTE PTR [eax]
c00183b2:	0f b6 c0             	movzx  eax,al
c00183b5:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c00183bb:	57                   	push   edi
c00183bc:	56                   	push   esi
c00183bd:	53                   	push   ebx
c00183be:	51                   	push   ecx
c00183bf:	52                   	push   edx
c00183c0:	50                   	push   eax
c00183c1:	68 b8 8a 02 c0       	push   0xc0028ab8
c00183c6:	e8 9b eb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00183cb:	83 c4 20             	add    esp,0x20
c00183ce:	b0 00                	mov    al,0x0
c00183d0:	e9 c5 04 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c00183d5:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00183d9:	85 c0                	test   eax,eax
c00183db:	74 6c                	je     c0018449 <Vm::faultHandler(regs*)+0x9f2>
c00183dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00183e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00183e3:	0f b7 d0             	movzx  edx,ax
c00183e6:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c00183ea:	83 ec 08             	sub    esp,0x8
c00183ed:	52                   	push   edx
c00183ee:	50                   	push   eax
c00183ef:	e8 fb f4 ff ff       	call   c00178ef <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00183f4:	83 c4 10             	add    esp,0x10
c00183f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00183fa:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00183fd:	0f b7 d2             	movzx  edx,dx
c0018400:	66 89 55 9a          	mov    WORD PTR [ebp-0x66],dx
c0018404:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
c0018407:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
c001840a:	66 8b 55 9a          	mov    dx,WORD PTR [ebp-0x66]
c001840e:	ef                   	out    dx,eax
c001840f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018412:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018415:	25 00 04 00 00       	and    eax,0x400
c001841a:	85 c0                	test   eax,eax
c001841c:	74 17                	je     c0018435 <Vm::faultHandler(regs*)+0x9de>
c001841e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018421:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018424:	83 e8 04             	sub    eax,0x4
c0018427:	0f b7 d0             	movzx  edx,ax
c001842a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001842d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018430:	e9 80 00 00 00       	jmp    c00184b5 <Vm::faultHandler(regs*)+0xa5e>
c0018435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018438:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001843b:	83 c0 04             	add    eax,0x4
c001843e:	0f b7 d0             	movzx  edx,ax
c0018441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018444:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0018447:	eb 6c                	jmp    c00184b5 <Vm::faultHandler(regs*)+0xa5e>
c0018449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001844c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001844f:	0f b7 d0             	movzx  edx,ax
c0018452:	0f b7 45 dc          	movzx  eax,WORD PTR [ebp-0x24]
c0018456:	83 ec 08             	sub    esp,0x8
c0018459:	52                   	push   edx
c001845a:	50                   	push   eax
c001845b:	e8 3b f4 ff ff       	call   c001789b <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018460:	83 c4 10             	add    esp,0x10
c0018463:	0f b7 c0             	movzx  eax,ax
c0018466:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018469:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001846c:	0f b7 d2             	movzx  edx,dx
c001846f:	66 89 55 92          	mov    WORD PTR [ebp-0x6e],dx
c0018473:	66 89 45 90          	mov    WORD PTR [ebp-0x70],ax
c0018477:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
c001847a:	66 8b 55 92          	mov    dx,WORD PTR [ebp-0x6e]
c001847e:	66 ef                	out    dx,ax
c0018480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018483:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018486:	25 00 04 00 00       	and    eax,0x400
c001848b:	85 c0                	test   eax,eax
c001848d:	74 14                	je     c00184a3 <Vm::faultHandler(regs*)+0xa4c>
c001848f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018492:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018495:	83 e8 02             	sub    eax,0x2
c0018498:	0f b7 d0             	movzx  edx,ax
c001849b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001849e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00184a1:	eb 12                	jmp    c00184b5 <Vm::faultHandler(regs*)+0xa5e>
c00184a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00184a9:	83 c0 02             	add    eax,0x2
c00184ac:	0f b7 d0             	movzx  edx,ax
c00184af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184b2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00184b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00184bb:	8d 50 01             	lea    edx,[eax+0x1]
c00184be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184c1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00184c4:	b0 01                	mov    al,0x1
c00184c6:	e9 cf 03 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c00184cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184ce:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00184d1:	b0 00                	mov    al,0x0
c00184d3:	89 c2                	mov    edx,eax
c00184d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184d8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00184db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00184de:	83 c0 01             	add    eax,0x1
c00184e1:	8a 00                	mov    al,BYTE PTR [eax]
c00184e3:	0f b6 c0             	movzx  eax,al
c00184e6:	83 ec 0c             	sub    esp,0xc
c00184e9:	50                   	push   eax
c00184ea:	e8 1e eb ff ff       	call   c001700d <Vm::inbv(unsigned short)>
c00184ef:	83 c4 10             	add    esp,0x10
c00184f2:	88 c1                	mov    cl,al
c00184f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00184f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00184fa:	0f b6 c1             	movzx  eax,cl
c00184fd:	09 c2                	or     edx,eax
c00184ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018502:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018508:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001850b:	8d 50 02             	lea    edx,[eax+0x2]
c001850e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018511:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018514:	b0 01                	mov    al,0x1
c0018516:	e9 7f 03 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c001851b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001851f:	85 c0                	test   eax,eax
c0018521:	74 24                	je     c0018547 <Vm::faultHandler(regs*)+0xaf0>
c0018523:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018526:	83 c0 01             	add    eax,0x1
c0018529:	8a 00                	mov    al,BYTE PTR [eax]
c001852b:	0f b6 c0             	movzx  eax,al
c001852e:	66 89 45 8e          	mov    WORD PTR [ebp-0x72],ax
c0018532:	66 8b 45 8e          	mov    ax,WORD PTR [ebp-0x72]
c0018536:	89 c2                	mov    edx,eax
c0018538:	ed                   	in     eax,dx
c0018539:	89 45 88             	mov    DWORD PTR [ebp-0x78],eax
c001853c:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
c001853f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018542:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018545:	eb 42                	jmp    c0018589 <Vm::faultHandler(regs*)+0xb32>
c0018547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001854a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001854d:	25 00 00 ff ff       	and    eax,0xffff0000
c0018552:	89 c2                	mov    edx,eax
c0018554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018557:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001855a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001855d:	83 c0 01             	add    eax,0x1
c0018560:	8a 00                	mov    al,BYTE PTR [eax]
c0018562:	0f b6 c0             	movzx  eax,al
c0018565:	66 89 45 86          	mov    WORD PTR [ebp-0x7a],ax
c0018569:	66 8b 45 86          	mov    ax,WORD PTR [ebp-0x7a]
c001856d:	89 c2                	mov    edx,eax
c001856f:	66 ed                	in     ax,dx
c0018571:	66 89 45 84          	mov    WORD PTR [ebp-0x7c],ax
c0018575:	8b 4d 84             	mov    ecx,DWORD PTR [ebp-0x7c]
c0018578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001857b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001857e:	0f b7 c1             	movzx  eax,cx
c0018581:	09 c2                	or     edx,eax
c0018583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018586:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001858c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001858f:	8d 50 02             	lea    edx,[eax+0x2]
c0018592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018595:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018598:	b0 01                	mov    al,0x1
c001859a:	e9 fb 02 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c001859f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185a2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00185a5:	0f b6 d0             	movzx  edx,al
c00185a8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00185ab:	83 c0 01             	add    eax,0x1
c00185ae:	8a 00                	mov    al,BYTE PTR [eax]
c00185b0:	0f b6 c0             	movzx  eax,al
c00185b3:	83 ec 08             	sub    esp,0x8
c00185b6:	52                   	push   edx
c00185b7:	50                   	push   eax
c00185b8:	e8 87 ea ff ff       	call   c0017044 <Vm::outbv(unsigned short, unsigned char)>
c00185bd:	83 c4 10             	add    esp,0x10
c00185c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185c3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00185c6:	8d 50 02             	lea    edx,[eax+0x2]
c00185c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185cc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00185cf:	b0 01                	mov    al,0x1
c00185d1:	e9 c4 02 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c00185d6:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c00185da:	85 c0                	test   eax,eax
c00185dc:	74 28                	je     c0018606 <Vm::faultHandler(regs*)+0xbaf>
c00185de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00185e1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00185e4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00185e7:	83 c2 01             	add    edx,0x1
c00185ea:	8a 12                	mov    dl,BYTE PTR [edx]
c00185ec:	0f b6 d2             	movzx  edx,dl
c00185ef:	66 89 55 82          	mov    WORD PTR [ebp-0x7e],dx
c00185f3:	89 85 7c ff ff ff    	mov    DWORD PTR [ebp-0x84],eax
c00185f9:	8b 85 7c ff ff ff    	mov    eax,DWORD PTR [ebp-0x84]
c00185ff:	66 8b 55 82          	mov    dx,WORD PTR [ebp-0x7e]
c0018603:	ef                   	out    dx,eax
c0018604:	eb 31                	jmp    c0018637 <Vm::faultHandler(regs*)+0xbe0>
c0018606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018609:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001860c:	0f b7 c0             	movzx  eax,ax
c001860f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018612:	83 c2 01             	add    edx,0x1
c0018615:	8a 12                	mov    dl,BYTE PTR [edx]
c0018617:	0f b6 d2             	movzx  edx,dl
c001861a:	66 89 95 7a ff ff ff 	mov    WORD PTR [ebp-0x86],dx
c0018621:	66 89 85 78 ff ff ff 	mov    WORD PTR [ebp-0x88],ax
c0018628:	8b 85 78 ff ff ff    	mov    eax,DWORD PTR [ebp-0x88]
c001862e:	66 8b 95 7a ff ff ff 	mov    dx,WORD PTR [ebp-0x86]
c0018635:	66 ef                	out    dx,ax
c0018637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001863a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001863d:	8d 50 02             	lea    edx,[eax+0x2]
c0018640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018643:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018646:	b0 01                	mov    al,0x1
c0018648:	e9 4d 02 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c001864d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018650:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018653:	b0 00                	mov    al,0x0
c0018655:	89 c2                	mov    edx,eax
c0018657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001865a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001865d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018660:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018663:	0f b7 c0             	movzx  eax,ax
c0018666:	83 ec 0c             	sub    esp,0xc
c0018669:	50                   	push   eax
c001866a:	e8 9e e9 ff ff       	call   c001700d <Vm::inbv(unsigned short)>
c001866f:	83 c4 10             	add    esp,0x10
c0018672:	88 c1                	mov    cl,al
c0018674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018677:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001867a:	0f b6 c1             	movzx  eax,cl
c001867d:	09 c2                	or     edx,eax
c001867f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018682:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0018685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018688:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001868b:	8d 50 01             	lea    edx,[eax+0x1]
c001868e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018691:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018694:	b0 01                	mov    al,0x1
c0018696:	e9 ff 01 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c001869b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001869f:	85 c0                	test   eax,eax
c00186a1:	74 2e                	je     c00186d1 <Vm::faultHandler(regs*)+0xc7a>
c00186a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186a6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00186a9:	0f b7 c0             	movzx  eax,ax
c00186ac:	66 89 85 76 ff ff ff 	mov    WORD PTR [ebp-0x8a],ax
c00186b3:	66 8b 85 76 ff ff ff 	mov    ax,WORD PTR [ebp-0x8a]
c00186ba:	89 c2                	mov    edx,eax
c00186bc:	ed                   	in     eax,dx
c00186bd:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
c00186c3:	8b 95 70 ff ff ff    	mov    edx,DWORD PTR [ebp-0x90]
c00186c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186cc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00186cf:	eb 4c                	jmp    c001871d <Vm::faultHandler(regs*)+0xcc6>
c00186d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186d4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00186d7:	25 00 00 ff ff       	and    eax,0xffff0000
c00186dc:	89 c2                	mov    edx,eax
c00186de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186e1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00186e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00186e7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00186ea:	0f b7 c0             	movzx  eax,ax
c00186ed:	66 89 85 6e ff ff ff 	mov    WORD PTR [ebp-0x92],ax
c00186f4:	66 8b 85 6e ff ff ff 	mov    ax,WORD PTR [ebp-0x92]
c00186fb:	89 c2                	mov    edx,eax
c00186fd:	66 ed                	in     ax,dx
c00186ff:	66 89 85 6c ff ff ff 	mov    WORD PTR [ebp-0x94],ax
c0018706:	8b 8d 6c ff ff ff    	mov    ecx,DWORD PTR [ebp-0x94]
c001870c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001870f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0018712:	0f b7 c1             	movzx  eax,cx
c0018715:	09 c2                	or     edx,eax
c0018717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001871a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001871d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018720:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018723:	8d 50 01             	lea    edx,[eax+0x1]
c0018726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018729:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001872c:	b0 01                	mov    al,0x1
c001872e:	e9 67 01 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0018733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018736:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018739:	0f b6 d0             	movzx  edx,al
c001873c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001873f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0018742:	0f b7 c0             	movzx  eax,ax
c0018745:	83 ec 08             	sub    esp,0x8
c0018748:	52                   	push   edx
c0018749:	50                   	push   eax
c001874a:	e8 f5 e8 ff ff       	call   c0017044 <Vm::outbv(unsigned short, unsigned char)>
c001874f:	83 c4 10             	add    esp,0x10
c0018752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018755:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018758:	8d 50 01             	lea    edx,[eax+0x1]
c001875b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001875e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018761:	b0 01                	mov    al,0x1
c0018763:	e9 32 01 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0018768:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001876c:	85 c0                	test   eax,eax
c001876e:	74 2c                	je     c001879c <Vm::faultHandler(regs*)+0xd45>
c0018770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018773:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018776:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018779:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001877c:	0f b7 d2             	movzx  edx,dx
c001877f:	66 89 95 6a ff ff ff 	mov    WORD PTR [ebp-0x96],dx
c0018786:	89 85 64 ff ff ff    	mov    DWORD PTR [ebp-0x9c],eax
c001878c:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
c0018792:	66 8b 95 6a ff ff ff 	mov    dx,WORD PTR [ebp-0x96]
c0018799:	ef                   	out    dx,eax
c001879a:	eb 2f                	jmp    c00187cb <Vm::faultHandler(regs*)+0xd74>
c001879c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001879f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00187a2:	0f b7 c0             	movzx  eax,ax
c00187a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00187a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00187ab:	0f b7 d2             	movzx  edx,dx
c00187ae:	66 89 95 62 ff ff ff 	mov    WORD PTR [ebp-0x9e],dx
c00187b5:	66 89 85 60 ff ff ff 	mov    WORD PTR [ebp-0xa0],ax
c00187bc:	8b 85 60 ff ff ff    	mov    eax,DWORD PTR [ebp-0xa0]
c00187c2:	66 8b 95 62 ff ff ff 	mov    dx,WORD PTR [ebp-0x9e]
c00187c9:	66 ef                	out    dx,ax
c00187cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00187d1:	8d 50 01             	lea    edx,[eax+0x1]
c00187d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00187d7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00187da:	b0 01                	mov    al,0x1
c00187dc:	e9 b9 00 00 00       	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c00187e1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187e4:	83 c0 05             	add    eax,0x5
c00187e7:	8a 00                	mov    al,BYTE PTR [eax]
c00187e9:	0f b6 c0             	movzx  eax,al
c00187ec:	89 85 54 ff ff ff    	mov    DWORD PTR [ebp-0xac],eax
c00187f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00187f5:	83 c0 04             	add    eax,0x4
c00187f8:	8a 00                	mov    al,BYTE PTR [eax]
c00187fa:	0f b6 f8             	movzx  edi,al
c00187fd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018800:	83 c0 03             	add    eax,0x3
c0018803:	8a 00                	mov    al,BYTE PTR [eax]
c0018805:	0f b6 f0             	movzx  esi,al
c0018808:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001880b:	83 c0 02             	add    eax,0x2
c001880e:	8a 00                	mov    al,BYTE PTR [eax]
c0018810:	0f b6 d8             	movzx  ebx,al
c0018813:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018816:	83 c0 01             	add    eax,0x1
c0018819:	8a 00                	mov    al,BYTE PTR [eax]
c001881b:	0f b6 c8             	movzx  ecx,al
c001881e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018821:	8a 00                	mov    al,BYTE PTR [eax]
c0018823:	0f b6 d0             	movzx  edx,al
c0018826:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0018829:	8a 00                	mov    al,BYTE PTR [eax]
c001882b:	0f b6 c0             	movzx  eax,al
c001882e:	ff b5 54 ff ff ff    	push   DWORD PTR [ebp-0xac]
c0018834:	57                   	push   edi
c0018835:	56                   	push   esi
c0018836:	53                   	push   ebx
c0018837:	51                   	push   ecx
c0018838:	52                   	push   edx
c0018839:	50                   	push   eax
c001883a:	68 e8 8a 02 c0       	push   0xc0028ae8
c001883f:	e8 22 e7 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0018844:	83 c4 20             	add    esp,0x20
c0018847:	83 ec 0c             	sub    esp,0xc
c001884a:	6a 60                	push   0x60
c001884c:	e8 bc e7 ff ff       	call   c001700d <Vm::inbv(unsigned short)>
c0018851:	83 c4 10             	add    esp,0x10
c0018854:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0018857:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c001885b:	83 f8 1c             	cmp    eax,0x1c
c001885e:	74 09                	je     c0018869 <Vm::faultHandler(regs*)+0xe12>
c0018860:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018864:	83 f8 5a             	cmp    eax,0x5a
c0018867:	75 24                	jne    c001888d <Vm::faultHandler(regs*)+0xe36>
c0018869:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c001886d:	83 f8 1c             	cmp    eax,0x1c
c0018870:	74 09                	je     c001887b <Vm::faultHandler(regs*)+0xe24>
c0018872:	0f b6 45 db          	movzx  eax,BYTE PTR [ebp-0x25]
c0018876:	83 f8 5a             	cmp    eax,0x5a
c0018879:	75 15                	jne    c0018890 <Vm::faultHandler(regs*)+0xe39>
c001887b:	83 ec 0c             	sub    esp,0xc
c001887e:	6a 60                	push   0x60
c0018880:	e8 88 e7 ff ff       	call   c001700d <Vm::inbv(unsigned short)>
c0018885:	83 c4 10             	add    esp,0x10
c0018888:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001888b:	eb dc                	jmp    c0018869 <Vm::faultHandler(regs*)+0xe12>
c001888d:	90                   	nop
c001888e:	eb b7                	jmp    c0018847 <Vm::faultHandler(regs*)+0xdf0>
c0018890:	90                   	nop
c0018891:	b0 00                	mov    al,0x0
c0018893:	eb 05                	jmp    c001889a <Vm::faultHandler(regs*)+0xe43>
c0018895:	e9 39 f2 ff ff       	jmp    c0017ad3 <Vm::faultHandler(regs*)+0x7c>
c001889a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001889d:	5b                   	pop    ebx
c001889e:	5e                   	pop    esi
c001889f:	5f                   	pop    edi
c00188a0:	5d                   	pop    ebp
c00188a1:	c3                   	ret    

c00188a2 <IOAPIC::close(int, int, void*)>:
c00188a2:	b8 00 00 00 00       	mov    eax,0x0
c00188a7:	c3                   	ret    

c00188a8 <apicGetBase()>:
c00188a8:	55                   	push   ebp
c00188a9:	89 e5                	mov    ebp,esp
c00188ab:	83 ec 18             	sub    esp,0x18
c00188ae:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00188b3:	83 e0 08             	and    eax,0x8
c00188b6:	0f b6 c0             	movzx  eax,al
c00188b9:	85 c0                	test   eax,eax
c00188bb:	75 07                	jne    c00188c4 <apicGetBase()+0x1c>
c00188bd:	b8 00 00 00 00       	mov    eax,0x0
c00188c2:	eb 1b                	jmp    c00188df <apicGetBase()+0x37>
c00188c4:	83 ec 0c             	sub    esp,0xc
c00188c7:	6a 1b                	push   0x1b
c00188c9:	e8 63 15 00 00       	call   c0019e31 <x86rdmsr(unsigned int)>
c00188ce:	83 c4 10             	add    esp,0x10
c00188d1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00188d4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00188d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00188da:	25 00 00 ff ff       	and    eax,0xffff0000
c00188df:	c9                   	leave  
c00188e0:	c3                   	ret    
c00188e1:	90                   	nop

c00188e2 <IOAPIC::IOAPIC()>:
c00188e2:	83 ec 0c             	sub    esp,0xc
c00188e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e9:	83 ec 08             	sub    esp,0x8
c00188ec:	68 a8 8e 02 c0       	push   0xc0028ea8
c00188f1:	50                   	push   eax
c00188f2:	e8 61 12 ff ff       	call   c0009b58 <Device::Device(char const*)>
c00188f7:	83 c4 10             	add    esp,0x10
c00188fa:	ba c8 8e 02 c0       	mov    edx,0xc0028ec8
c00188ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018903:	89 10                	mov    DWORD PTR [eax],edx
c0018905:	90                   	nop
c0018906:	83 c4 0c             	add    esp,0xc
c0018909:	c3                   	ret    

c001890a <apicOpen()>:
c001890a:	55                   	push   ebp
c001890b:	89 e5                	mov    ebp,esp
c001890d:	53                   	push   ebx
c001890e:	83 ec 34             	sub    esp,0x34
c0018911:	83 ec 0c             	sub    esp,0xc
c0018914:	68 b0 8e 02 c0       	push   0xc0028eb0
c0018919:	e8 48 e6 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001891e:	83 c4 10             	add    esp,0x10
c0018921:	a0 00 14 03 c0       	mov    al,ds:0xc0031400
c0018926:	83 f0 01             	xor    eax,0x1
c0018929:	0f b6 c0             	movzx  eax,al
c001892c:	85 c0                	test   eax,eax
c001892e:	0f 84 a3 00 00 00    	je     c00189d7 <apicOpen()+0xcd>
c0018934:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0018938:	a0 40 0e 03 c0       	mov    al,ds:0xc0030e40
c001893d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0018941:	0f b6 c0             	movzx  eax,al
c0018944:	39 c2                	cmp    edx,eax
c0018946:	0f 83 84 00 00 00    	jae    c00189d0 <apicOpen()+0xc6>
c001894c:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0018953:	83 ec 0c             	sub    esp,0xc
c0018956:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0018959:	e8 22 6d ff ff       	call   c000f680 <malloc>
c001895e:	83 c4 10             	add    esp,0x10
c0018961:	89 c3                	mov    ebx,eax
c0018963:	83 ec 0c             	sub    esp,0xc
c0018966:	53                   	push   ebx
c0018967:	e8 76 ff ff ff       	call   c00188e2 <IOAPIC::IOAPIC()>
c001896c:	83 c4 10             	add    esp,0x10
c001896f:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0018972:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0018976:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0018979:	89 14 85 e0 13 03 c0 	mov    DWORD PTR [eax*4-0x3ffcec20],edx
c0018980:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c0018985:	83 c0 01             	add    eax,0x1
c0018988:	a3 c0 13 03 c0       	mov    ds:0xc00313c0,eax
c001898d:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c0018992:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018998:	83 ec 08             	sub    esp,0x8
c001899b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001899e:	50                   	push   eax
c001899f:	e8 52 10 ff ff       	call   c00099f6 <Device::addChild(Device*)>
c00189a4:	83 c4 10             	add    esp,0x10
c00189a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00189aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00189ac:	83 c0 08             	add    eax,0x8
c00189af:	8b 00                	mov    eax,DWORD PTR [eax]
c00189b1:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00189b5:	6a 00                	push   0x0
c00189b7:	6a 00                	push   0x0
c00189b9:	52                   	push   edx
c00189ba:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00189bd:	ff d0                	call   eax
c00189bf:	83 c4 10             	add    esp,0x10
c00189c2:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c00189c5:	83 c0 01             	add    eax,0x1
c00189c8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c00189cb:	e9 68 ff ff ff       	jmp    c0018938 <apicOpen()+0x2e>
c00189d0:	c6 05 00 14 03 c0 01 	mov    BYTE PTR ds:0xc0031400,0x1
c00189d7:	e8 cc fe ff ff       	call   c00188a8 <apicGetBase()>
c00189dc:	05 f0 00 00 00       	add    eax,0xf0
c00189e1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00189e4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00189e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00189e9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00189ec:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c00189f3:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c00189fa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00189fd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0018a00:	89 10                	mov    DWORD PTR [eax],edx
c0018a02:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0018a09:	a1 8c 0d 03 c0       	mov    eax,ds:0xc0030d8c
c0018a0e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0018a11:	7d 7c                	jge    c0018a8f <apicOpen()+0x185>
c0018a13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a16:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c0018a1d:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0018a20:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a23:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c0018a2a:	c1 e8 08             	shr    eax,0x8
c0018a2d:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0018a31:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018a34:	8b 04 85 a0 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf260]
c0018a3b:	c1 e8 18             	shr    eax,0x18
c0018a3e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0018a41:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0018a45:	3d ff 00 00 00       	cmp    eax,0xff
c0018a4a:	75 3a                	jne    c0018a86 <apicOpen()+0x17c>
c0018a4c:	e8 57 fe ff ff       	call   c00188a8 <apicGetBase()>
c0018a51:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0018a55:	83 fa 01             	cmp    edx,0x1
c0018a58:	75 07                	jne    c0018a61 <apicOpen()+0x157>
c0018a5a:	ba 60 03 00 00       	mov    edx,0x360
c0018a5f:	eb 05                	jmp    c0018a66 <apicOpen()+0x15c>
c0018a61:	ba 50 03 00 00       	mov    edx,0x350
c0018a66:	01 d0                	add    eax,edx
c0018a68:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018a6b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018a6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a70:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0018a73:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0018a7a:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0018a7e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018a81:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0018a84:	89 10                	mov    DWORD PTR [eax],edx
c0018a86:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0018a8a:	e9 7a ff ff ff       	jmp    c0018a09 <apicOpen()+0xff>
c0018a8f:	90                   	nop
c0018a90:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018a93:	c9                   	leave  
c0018a94:	c3                   	ret    
c0018a95:	90                   	nop

c0018a96 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0018a96:	55                   	push   ebp
c0018a97:	89 e5                	mov    ebp,esp
c0018a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018a9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018aa2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018aa5:	72 1d                	jb     c0018ac4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018aaa:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0018ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ab3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0018ab9:	01 d0                	add    eax,edx
c0018abb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0018abe:	73 04                	jae    c0018ac4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0018ac0:	b0 01                	mov    al,0x1
c0018ac2:	eb 02                	jmp    c0018ac6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0018ac4:	b0 00                	mov    al,0x0
c0018ac6:	5d                   	pop    ebp
c0018ac7:	c3                   	ret    

c0018ac8 <IOAPIC::read(int)>:
c0018ac8:	55                   	push   ebp
c0018ac9:	89 e5                	mov    ebp,esp
c0018acb:	83 ec 10             	sub    esp,0x10
c0018ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018ad1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018ad7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018ada:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018add:	0f b6 d0             	movzx  edx,al
c0018ae0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018ae3:	89 10                	mov    DWORD PTR [eax],edx
c0018ae5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018ae8:	83 c0 10             	add    eax,0x10
c0018aeb:	8b 00                	mov    eax,DWORD PTR [eax]
c0018aed:	c9                   	leave  
c0018aee:	c3                   	ret    
c0018aef:	90                   	nop

c0018af0 <IOAPIC::open(int, int, void*)>:
c0018af0:	55                   	push   ebp
c0018af1:	89 e5                	mov    ebp,esp
c0018af3:	57                   	push   edi
c0018af4:	56                   	push   esi
c0018af5:	53                   	push   ebx
c0018af6:	83 ec 04             	sub    esp,0x4
c0018af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018afc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0018aff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b08:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018b0e:	8b 14 85 80 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf180]
c0018b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b18:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0018b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b21:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018b27:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c0018b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b31:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0018b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b3a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b43:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018b49:	0f b6 f0             	movzx  esi,al
c0018b4c:	89 d0                	mov    eax,edx
c0018b4e:	ba 00 00 00 00       	mov    edx,0x0
c0018b53:	89 c7                	mov    edi,eax
c0018b55:	83 e7 ff             	and    edi,0xffffffff
c0018b58:	89 f9                	mov    ecx,edi
c0018b5a:	0f b6 da             	movzx  ebx,dl
c0018b5d:	89 c8                	mov    eax,ecx
c0018b5f:	89 da                	mov    edx,ebx
c0018b61:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0018b64:	8d 5e 08             	lea    ebx,[esi+0x8]
c0018b67:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0018b6b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0018b6f:	83 e0 00             	and    eax,0x0
c0018b72:	09 d0                	or     eax,edx
c0018b74:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0018b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b7b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0018b81:	8d 50 01             	lea    edx,[eax+0x1]
c0018b84:	88 d1                	mov    cl,dl
c0018b86:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0018b89:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0018b8f:	0f b6 d0             	movzx  edx,al
c0018b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018b95:	83 c2 08             	add    edx,0x8
c0018b98:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0018b9c:	0f b6 c9             	movzx  ecx,cl
c0018b9f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0018ba5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0018ba9:	6a 01                	push   0x1
c0018bab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018bae:	e8 15 ff ff ff       	call   c0018ac8 <IOAPIC::read(int)>
c0018bb3:	83 c4 08             	add    esp,0x8
c0018bb6:	c1 f8 10             	sar    eax,0x10
c0018bb9:	0f b6 c0             	movzx  eax,al
c0018bbc:	8d 50 01             	lea    edx,[eax+0x1]
c0018bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bc2:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0018bc8:	b8 00 00 00 00       	mov    eax,0x0
c0018bcd:	8d 65 f4             	lea    esp,[ebp-0xc]
c0018bd0:	5b                   	pop    ebx
c0018bd1:	5e                   	pop    esi
c0018bd2:	5f                   	pop    edi
c0018bd3:	5d                   	pop    ebp
c0018bd4:	c3                   	ret    
c0018bd5:	90                   	nop

c0018bd6 <IOAPIC::write(int, int)>:
c0018bd6:	55                   	push   ebp
c0018bd7:	89 e5                	mov    ebp,esp
c0018bd9:	83 ec 10             	sub    esp,0x10
c0018bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0018bdf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018be5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0018be8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018beb:	0f b6 d0             	movzx  edx,al
c0018bee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018bf1:	89 10                	mov    DWORD PTR [eax],edx
c0018bf3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0018bf6:	8d 50 10             	lea    edx,[eax+0x10]
c0018bf9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018bfc:	89 02                	mov    DWORD PTR [edx],eax
c0018bfe:	90                   	nop
c0018bff:	c9                   	leave  
c0018c00:	c3                   	ret    
c0018c01:	90                   	nop

c0018c02 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0018c02:	55                   	push   ebp
c0018c03:	89 e5                	mov    ebp,esp
c0018c05:	53                   	push   ebx
c0018c06:	83 ec 2c             	sub    esp,0x2c
c0018c09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018c0c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0018c0f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0018c12:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0018c15:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0018c18:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0018c1b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0018c1e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0018c21:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0018c24:	88 d8                	mov    al,bl
c0018c26:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0018c29:	88 c8                	mov    al,cl
c0018c2b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0018c2e:	88 d0                	mov    al,dl
c0018c30:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0018c33:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018c37:	83 c0 08             	add    eax,0x8
c0018c3a:	d1 e0                	shl    eax,1
c0018c3c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0018c3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0018c43:	83 c0 08             	add    eax,0x8
c0018c46:	d1 e0                	shl    eax,1
c0018c48:	83 c0 01             	add    eax,0x1
c0018c4b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0018c4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018c51:	50                   	push   eax
c0018c52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018c55:	e8 6e fe ff ff       	call   c0018ac8 <IOAPIC::read(int)>
c0018c5a:	83 c4 08             	add    esp,0x8
c0018c5d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0018c60:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0018c67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0018c6a:	c1 e0 18             	shl    eax,0x18
c0018c6d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0018c70:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0018c73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0018c76:	52                   	push   edx
c0018c77:	50                   	push   eax
c0018c78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018c7b:	e8 56 ff ff ff       	call   c0018bd6 <IOAPIC::write(int, int)>
c0018c80:	83 c4 0c             	add    esp,0xc
c0018c83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018c86:	50                   	push   eax
c0018c87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018c8a:	e8 39 fe ff ff       	call   c0018ac8 <IOAPIC::read(int)>
c0018c8f:	83 c4 08             	add    esp,0x8
c0018c92:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0018c95:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0018c9c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0018ca3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0018caa:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0018cae:	85 c0                	test   eax,eax
c0018cb0:	74 09                	je     c0018cbb <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0018cb2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0018cb9:	eb 07                	jmp    c0018cc2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0018cbb:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0018cc2:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0018cc6:	85 c0                	test   eax,eax
c0018cc8:	74 09                	je     c0018cd3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0018cca:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0018cd1:	eb 07                	jmp    c0018cda <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0018cd3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0018cda:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0018ce1:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0018ce5:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0018ce8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0018ceb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0018cee:	52                   	push   edx
c0018cef:	50                   	push   eax
c0018cf0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0018cf3:	e8 de fe ff ff       	call   c0018bd6 <IOAPIC::write(int, int)>
c0018cf8:	83 c4 0c             	add    esp,0xc
c0018cfb:	90                   	nop
c0018cfc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0018cff:	c9                   	leave  
c0018d00:	c3                   	ret    
c0018d01:	90                   	nop

c0018d02 <noCopro(unsigned long)>:
c0018d02:	c3                   	ret    

c0018d03 <HalRestart()>:
c0018d03:	e4 64                	in     al,0x64
c0018d05:	a8 02                	test   al,0x2
c0018d07:	75 fa                	jne    c0018d03 <HalRestart()>
c0018d09:	b0 fe                	mov    al,0xfe
c0018d0b:	e6 64                	out    0x64,al
c0018d0d:	c3                   	ret    

c0018d0e <HalShutdown()>:
c0018d0e:	c3                   	ret    

c0018d0f <HalSleep()>:
c0018d0f:	c3                   	ret    

c0018d10 <CPU::close(int, int, void*)>:
c0018d10:	31 c0                	xor    eax,eax
c0018d12:	c3                   	ret    

c0018d13 <x86ReadCMOS(unsigned char)>:
c0018d13:	83 ec 14             	sub    esp,0x14
c0018d16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d1a:	88 04 24             	mov    BYTE PTR [esp],al
c0018d1d:	a0 2c 14 03 c0       	mov    al,ds:0xc003142c
c0018d22:	0f b6 c0             	movzx  eax,al
c0018d25:	85 c0                	test   eax,eax
c0018d27:	74 04                	je     c0018d2d <x86ReadCMOS(unsigned char)+0x1a>
c0018d29:	b2 00                	mov    dl,0x0
c0018d2b:	eb 02                	jmp    c0018d2f <x86ReadCMOS(unsigned char)+0x1c>
c0018d2d:	b2 80                	mov    dl,0x80
c0018d2f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018d32:	09 d0                	or     eax,edx
c0018d34:	0f b6 c0             	movzx  eax,al
c0018d37:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0018d3e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018d42:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018d46:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018d4b:	ee                   	out    dx,al
c0018d4c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0018d53:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018d58:	89 c2                	mov    edx,eax
c0018d5a:	ec                   	in     al,dx
c0018d5b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d5f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d63:	83 c4 14             	add    esp,0x14
c0018d66:	c3                   	ret    

c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>:
c0018d67:	83 ec 18             	sub    esp,0x18
c0018d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018d72:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018d76:	88 d0                	mov    al,dl
c0018d78:	88 04 24             	mov    BYTE PTR [esp],al
c0018d7b:	a0 2c 14 03 c0       	mov    al,ds:0xc003142c
c0018d80:	0f b6 c0             	movzx  eax,al
c0018d83:	85 c0                	test   eax,eax
c0018d85:	74 04                	je     c0018d8b <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0018d87:	b2 00                	mov    dl,0x0
c0018d89:	eb 02                	jmp    c0018d8d <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0018d8b:	b2 80                	mov    dl,0x80
c0018d8d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0018d91:	09 d0                	or     eax,edx
c0018d93:	0f b6 c0             	movzx  eax,al
c0018d96:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018d9d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018da1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018da5:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018daa:	ee                   	out    dx,al
c0018dab:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018daf:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018db6:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018dba:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018dbe:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018dc3:	ee                   	out    dx,al
c0018dc4:	90                   	nop
c0018dc5:	83 c4 18             	add    esp,0x18
c0018dc8:	c3                   	ret    

c0018dc9 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018dc9:	60                   	pusha  
c0018dca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018dd2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018dd6:	9c                   	pushf  
c0018dd7:	fa                   	cli    
c0018dd8:	0f 09                	wbinvd 
c0018dda:	0f 30                	wrmsr  
c0018ddc:	9d                   	popf   
c0018ddd:	89 c2                	mov    edx,eax
c0018ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018de3:	89 10                	mov    DWORD PTR [eax],edx
c0018de5:	61                   	popa   
c0018de6:	90                   	nop
c0018de7:	c3                   	ret    

c0018de8 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018de8:	60                   	pusha  
c0018de9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ded:	89 c1                	mov    ecx,eax
c0018def:	9c                   	pushf  
c0018df0:	fa                   	cli    
c0018df1:	0f 09                	wbinvd 
c0018df3:	31 c0                	xor    eax,eax
c0018df5:	31 d2                	xor    edx,edx
c0018df7:	0f 32                	rdmsr  
c0018df9:	9d                   	popf   
c0018dfa:	89 c2                	mov    edx,eax
c0018dfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e00:	89 10                	mov    DWORD PTR [eax],edx
c0018e02:	61                   	popa   
c0018e03:	90                   	nop
c0018e04:	c3                   	ret    

c0018e05 <AMD_K6_writeback(int, int, int)>:
c0018e05:	83 ec 20             	sub    esp,0x20
c0018e08:	a1 70 11 03 c0       	mov    eax,ds:0xc0031170
c0018e0d:	c1 e8 14             	shr    eax,0x14
c0018e10:	c1 e8 02             	shr    eax,0x2
c0018e13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e17:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018e1c:	0f 85 9e 00 00 00    	jne    c0018ec0 <AMD_K6_writeback(int, int, int)+0xbb>
c0018e22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e2a:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018e2f:	75 19                	jne    c0018e4a <AMD_K6_writeback(int, int, int)+0x45>
c0018e31:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018e36:	7f 0a                	jg     c0018e42 <AMD_K6_writeback(int, int, int)+0x3d>
c0018e38:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0018e40:	eb 08                	jmp    c0018e4a <AMD_K6_writeback(int, int, int)+0x45>
c0018e42:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018e4a:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0018e4f:	7c 6e                	jl     c0018ebf <AMD_K6_writeback(int, int, int)+0xba>
c0018e51:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0018e56:	7e 09                	jle    c0018e61 <AMD_K6_writeback(int, int, int)+0x5c>
c0018e58:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0018e5d:	74 36                	je     c0018e95 <AMD_K6_writeback(int, int, int)+0x90>
c0018e5f:	eb 5e                	jmp    c0018ebf <AMD_K6_writeback(int, int, int)+0xba>
c0018e61:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e65:	50                   	push   eax
c0018e66:	68 82 00 00 c0       	push   0xc0000082
c0018e6b:	e8 78 ff ff ff       	call   c0018de8 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018e70:	83 c4 08             	add    esp,0x8
c0018e73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018e77:	d1 e0                	shl    eax,1
c0018e79:	83 e0 7f             	and    eax,0x7f
c0018e7c:	89 c2                	mov    edx,eax
c0018e7e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e82:	50                   	push   eax
c0018e83:	6a 00                	push   0x0
c0018e85:	52                   	push   edx
c0018e86:	68 82 00 00 c0       	push   0xc0000082
c0018e8b:	e8 39 ff ff ff       	call   c0018dc9 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018e90:	83 c4 10             	add    esp,0x10
c0018e93:	eb 2b                	jmp    c0018ec0 <AMD_K6_writeback(int, int, int)+0xbb>
c0018e95:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e99:	50                   	push   eax
c0018e9a:	68 82 00 00 c0       	push   0xc0000082
c0018e9f:	e8 44 ff ff ff       	call   c0018de8 <AMD_K6_read_msr(unsigned int, REGS*)>
c0018ea4:	83 c4 08             	add    esp,0x8
c0018ea7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018eab:	50                   	push   eax
c0018eac:	6a 00                	push   0x0
c0018eae:	6a 00                	push   0x0
c0018eb0:	68 82 00 00 c0       	push   0xc0000082
c0018eb5:	e8 0f ff ff ff       	call   c0018dc9 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018eba:	83 c4 10             	add    esp,0x10
c0018ebd:	eb 01                	jmp    c0018ec0 <AMD_K6_writeback(int, int, int)+0xbb>
c0018ebf:	90                   	nop
c0018ec0:	90                   	nop
c0018ec1:	83 c4 20             	add    esp,0x20
c0018ec4:	c3                   	ret    

c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018ec5:	56                   	push   esi
c0018ec6:	53                   	push   ebx
c0018ec7:	a1 00 b7 02 c0       	mov    eax,ds:0xc002b700
c0018ecc:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0018ed0:	75 32                	jne    c0018f04 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ed2:	8b 15 20 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031420
c0018ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018edc:	89 10                	mov    DWORD PTR [eax],edx
c0018ede:	8b 15 1c 14 03 c0    	mov    edx,DWORD PTR ds:0xc003141c
c0018ee4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ee8:	89 10                	mov    DWORD PTR [eax],edx
c0018eea:	8b 15 18 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031418
c0018ef0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ef4:	89 10                	mov    DWORD PTR [eax],edx
c0018ef6:	8b 15 14 14 03 c0    	mov    edx,DWORD PTR ds:0xc0031414
c0018efc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f00:	89 10                	mov    DWORD PTR [eax],edx
c0018f02:	eb 5c                	jmp    c0018f60 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f08:	ba 00 00 00 00       	mov    edx,0x0
c0018f0d:	89 d1                	mov    ecx,edx
c0018f0f:	0f a2                	cpuid  
c0018f11:	89 c6                	mov    esi,eax
c0018f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f17:	89 30                	mov    DWORD PTR [eax],esi
c0018f19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f1d:	89 18                	mov    DWORD PTR [eax],ebx
c0018f1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f23:	89 08                	mov    DWORD PTR [eax],ecx
c0018f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f29:	89 10                	mov    DWORD PTR [eax],edx
c0018f2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f2f:	a3 00 b7 02 c0       	mov    ds:0xc002b700,eax
c0018f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f38:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f3a:	a3 20 14 03 c0       	mov    ds:0xc0031420,eax
c0018f3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f43:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f45:	a3 1c 14 03 c0       	mov    ds:0xc003141c,eax
c0018f4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f50:	a3 18 14 03 c0       	mov    ds:0xc0031418,eax
c0018f55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f5b:	a3 14 14 03 c0       	mov    ds:0xc0031414,eax
c0018f60:	5b                   	pop    ebx
c0018f61:	5e                   	pop    esi
c0018f62:	c3                   	ret    

c0018f63 <cpuidCheckEDX(unsigned int)>:
c0018f63:	83 ec 10             	sub    esp,0x10
c0018f66:	89 e0                	mov    eax,esp
c0018f68:	50                   	push   eax
c0018f69:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f6d:	50                   	push   eax
c0018f6e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f72:	50                   	push   eax
c0018f73:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f77:	50                   	push   eax
c0018f78:	6a 01                	push   0x1
c0018f7a:	e8 46 ff ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f7f:	83 c4 14             	add    esp,0x14
c0018f82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018f85:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018f89:	0f 95 c0             	setne  al
c0018f8c:	83 c4 10             	add    esp,0x10
c0018f8f:	c3                   	ret    

c0018f90 <cpuidCheckECX(unsigned int)>:
c0018f90:	83 ec 10             	sub    esp,0x10
c0018f93:	89 e0                	mov    eax,esp
c0018f95:	50                   	push   eax
c0018f96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f9a:	50                   	push   eax
c0018f9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f9f:	50                   	push   eax
c0018fa0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fa4:	50                   	push   eax
c0018fa5:	6a 01                	push   0x1
c0018fa7:	e8 19 ff ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fac:	83 c4 14             	add    esp,0x14
c0018faf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fb3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018fb7:	0f 95 c0             	setne  al
c0018fba:	83 c4 10             	add    esp,0x10
c0018fbd:	c3                   	ret    

c0018fbe <cpuidCheckExtendedEBX(unsigned int)>:
c0018fbe:	83 ec 10             	sub    esp,0x10
c0018fc1:	89 e0                	mov    eax,esp
c0018fc3:	50                   	push   eax
c0018fc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018fc8:	50                   	push   eax
c0018fc9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018fcd:	50                   	push   eax
c0018fce:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fd2:	50                   	push   eax
c0018fd3:	6a 07                	push   0x7
c0018fd5:	e8 eb fe ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fda:	83 c4 14             	add    esp,0x14
c0018fdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fe1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018fe5:	0f 95 c0             	setne  al
c0018fe8:	83 c4 10             	add    esp,0x10
c0018feb:	c3                   	ret    

c0018fec <cpuidCheckExtendedECX(unsigned int)>:
c0018fec:	83 ec 10             	sub    esp,0x10
c0018fef:	89 e0                	mov    eax,esp
c0018ff1:	50                   	push   eax
c0018ff2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018ff6:	50                   	push   eax
c0018ff7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018ffb:	50                   	push   eax
c0018ffc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019000:	50                   	push   eax
c0019001:	6a 07                	push   0x7
c0019003:	e8 bd fe ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019008:	83 c4 14             	add    esp,0x14
c001900b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001900f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019013:	0f 95 c0             	setne  al
c0019016:	83 c4 10             	add    esp,0x10
c0019019:	c3                   	ret    

c001901a <HalDetectFeatures()>:
c001901a:	57                   	push   edi
c001901b:	56                   	push   esi
c001901c:	53                   	push   ebx
c001901d:	81 ec 90 00 00 00    	sub    esp,0x90
c0019023:	83 ec 04             	sub    esp,0x4
c0019026:	6a 08                	push   0x8
c0019028:	6a 00                	push   0x0
c001902a:	68 4c 14 03 c0       	push   0xc003144c
c001902f:	e8 bc 74 fe ff       	call   c00004f0 <memset>
c0019034:	83 c4 10             	add    esp,0x10
c0019037:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001903c:	83 c8 04             	or     eax,0x4
c001903f:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019044:	83 ec 0c             	sub    esp,0xc
c0019047:	68 ec 8e 02 c0       	push   0xc0028eec
c001904c:	e8 15 df fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019051:	83 c4 10             	add    esp,0x10
c0019054:	e8 a0 71 fe ff       	call   c00001f9 <detectCPUID>
c0019059:	85 c0                	test   eax,eax
c001905b:	0f 95 c0             	setne  al
c001905e:	83 e0 01             	and    eax,0x1
c0019061:	83 e0 01             	and    eax,0x1
c0019064:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019067:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001906c:	83 e0 fd             	and    eax,0xfffffffd
c001906f:	88 c2                	mov    dl,al
c0019071:	88 c8                	mov    al,cl
c0019073:	09 d0                	or     eax,edx
c0019075:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c001907a:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001907f:	83 e0 02             	and    eax,0x2
c0019082:	0f b6 c0             	movzx  eax,al
c0019085:	85 c0                	test   eax,eax
c0019087:	0f 84 84 02 00 00    	je     c0019311 <HalDetectFeatures()+0x2f7>
c001908d:	83 ec 0c             	sub    esp,0xc
c0019090:	6a 20                	push   0x20
c0019092:	e8 cc fe ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c0019097:	83 c4 10             	add    esp,0x10
c001909a:	83 e0 01             	and    eax,0x1
c001909d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00190a4:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00190a9:	83 e0 f7             	and    eax,0xfffffff7
c00190ac:	88 c2                	mov    dl,al
c00190ae:	88 c8                	mov    al,cl
c00190b0:	09 d0                	or     eax,edx
c00190b2:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c00190b7:	83 ec 0c             	sub    esp,0xc
c00190ba:	68 00 00 00 04       	push   0x4000000
c00190bf:	e8 9f fe ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c00190c4:	83 c4 10             	add    esp,0x10
c00190c7:	89 c1                	mov    ecx,eax
c00190c9:	83 e1 01             	and    ecx,0x1
c00190cc:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c00190d1:	83 e0 fe             	and    eax,0xfffffffe
c00190d4:	88 c2                	mov    dl,al
c00190d6:	88 c8                	mov    al,cl
c00190d8:	09 d0                	or     eax,edx
c00190da:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c00190df:	83 ec 0c             	sub    esp,0xc
c00190e2:	68 80 00 00 00       	push   0x80
c00190e7:	e8 77 fe ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c00190ec:	83 c4 10             	add    esp,0x10
c00190ef:	89 c1                	mov    ecx,eax
c00190f1:	c1 e1 07             	shl    ecx,0x7
c00190f4:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c00190f9:	83 e0 7f             	and    eax,0x7f
c00190fc:	88 c2                	mov    dl,al
c00190fe:	88 c8                	mov    al,cl
c0019100:	09 d0                	or     eax,edx
c0019102:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c0019107:	83 ec 0c             	sub    esp,0xc
c001910a:	68 00 00 80 00       	push   0x800000
c001910f:	e8 4f fe ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c0019114:	83 c4 10             	add    esp,0x10
c0019117:	83 e0 01             	and    eax,0x1
c001911a:	89 c1                	mov    ecx,eax
c001911c:	c1 e1 05             	shl    ecx,0x5
c001911f:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019124:	83 e0 df             	and    eax,0xffffffdf
c0019127:	88 c2                	mov    dl,al
c0019129:	88 c8                	mov    al,cl
c001912b:	09 d0                	or     eax,edx
c001912d:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019132:	83 ec 0c             	sub    esp,0xc
c0019135:	6a 01                	push   0x1
c0019137:	e8 54 40 ff ff       	call   c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001913c:	83 c4 10             	add    esp,0x10
c001913f:	0f b6 c0             	movzx  eax,al
c0019142:	85 c0                	test   eax,eax
c0019144:	75 17                	jne    c001915d <HalDetectFeatures()+0x143>
c0019146:	83 ec 0c             	sub    esp,0xc
c0019149:	68 00 04 00 00       	push   0x400
c001914e:	e8 3d 40 ff ff       	call   c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019153:	83 c4 10             	add    esp,0x10
c0019156:	0f b6 c0             	movzx  eax,al
c0019159:	85 c0                	test   eax,eax
c001915b:	74 04                	je     c0019161 <HalDetectFeatures()+0x147>
c001915d:	b0 01                	mov    al,0x1
c001915f:	eb 02                	jmp    c0019163 <HalDetectFeatures()+0x149>
c0019161:	b0 00                	mov    al,0x0
c0019163:	0f b6 c0             	movzx  eax,al
c0019166:	85 c0                	test   eax,eax
c0019168:	74 0f                	je     c0019179 <HalDetectFeatures()+0x15f>
c001916a:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001916f:	83 e0 fe             	and    eax,0xfffffffe
c0019172:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019177:	eb 28                	jmp    c00191a1 <HalDetectFeatures()+0x187>
c0019179:	83 ec 0c             	sub    esp,0xc
c001917c:	68 00 02 00 00       	push   0x200
c0019181:	e8 dd fd ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c0019186:	83 c4 10             	add    esp,0x10
c0019189:	89 c1                	mov    ecx,eax
c001918b:	83 e1 01             	and    ecx,0x1
c001918e:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019193:	83 e0 fe             	and    eax,0xfffffffe
c0019196:	88 c2                	mov    dl,al
c0019198:	88 c8                	mov    al,cl
c001919a:	09 d0                	or     eax,edx
c001919c:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c00191a1:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00191a6:	83 e0 01             	and    eax,0x1
c00191a9:	0f b6 c0             	movzx  eax,al
c00191ac:	85 c0                	test   eax,eax
c00191ae:	74 1c                	je     c00191cc <HalDetectFeatures()+0x1b2>
c00191b0:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00191b5:	83 e0 08             	and    eax,0x8
c00191b8:	0f b6 c0             	movzx  eax,al
c00191bb:	85 c0                	test   eax,eax
c00191bd:	75 0d                	jne    c00191cc <HalDetectFeatures()+0x1b2>
c00191bf:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00191c4:	83 e0 fe             	and    eax,0xfffffffe
c00191c7:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c00191cc:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c00191d4:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c00191dc:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c00191e4:	85 c0                	test   eax,eax
c00191e6:	0f 84 ab 00 00 00    	je     c0019297 <HalDetectFeatures()+0x27d>
c00191ec:	83 ec 0c             	sub    esp,0xc
c00191ef:	6a 01                	push   0x1
c00191f1:	e8 9a fd ff ff       	call   c0018f90 <cpuidCheckECX(unsigned int)>
c00191f6:	83 c4 10             	add    esp,0x10
c00191f9:	83 e0 01             	and    eax,0x1
c00191fc:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00191ff:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019204:	83 e0 fd             	and    eax,0xfffffffd
c0019207:	88 c2                	mov    dl,al
c0019209:	88 c8                	mov    al,cl
c001920b:	09 d0                	or     eax,edx
c001920d:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c0019212:	83 ec 0c             	sub    esp,0xc
c0019215:	68 00 02 00 00       	push   0x200
c001921a:	e8 71 fd ff ff       	call   c0018f90 <cpuidCheckECX(unsigned int)>
c001921f:	83 c4 10             	add    esp,0x10
c0019222:	83 e0 01             	and    eax,0x1
c0019225:	89 c1                	mov    ecx,eax
c0019227:	c1 e1 04             	shl    ecx,0x4
c001922a:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c001922f:	83 e0 ef             	and    eax,0xffffffef
c0019232:	88 c2                	mov    dl,al
c0019234:	88 c8                	mov    al,cl
c0019236:	09 d0                	or     eax,edx
c0019238:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c001923d:	83 ec 0c             	sub    esp,0xc
c0019240:	68 00 00 08 00       	push   0x80000
c0019245:	e8 46 fd ff ff       	call   c0018f90 <cpuidCheckECX(unsigned int)>
c001924a:	83 c4 10             	add    esp,0x10
c001924d:	83 e0 01             	and    eax,0x1
c0019250:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019257:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c001925c:	83 e0 fb             	and    eax,0xfffffffb
c001925f:	88 c2                	mov    dl,al
c0019261:	88 c8                	mov    al,cl
c0019263:	09 d0                	or     eax,edx
c0019265:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c001926a:	83 ec 0c             	sub    esp,0xc
c001926d:	68 00 00 10 00       	push   0x100000
c0019272:	e8 19 fd ff ff       	call   c0018f90 <cpuidCheckECX(unsigned int)>
c0019277:	83 c4 10             	add    esp,0x10
c001927a:	83 e0 01             	and    eax,0x1
c001927d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019284:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019289:	83 e0 f7             	and    eax,0xfffffff7
c001928c:	88 c2                	mov    dl,al
c001928e:	88 c8                	mov    al,cl
c0019290:	09 d0                	or     eax,edx
c0019292:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c0019297:	83 ec 0c             	sub    esp,0xc
c001929a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001929e:	50                   	push   eax
c001929f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00192a3:	50                   	push   eax
c00192a4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00192a8:	50                   	push   eax
c00192a9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00192ad:	50                   	push   eax
c00192ae:	68 00 00 00 80       	push   0x80000000
c00192b3:	e8 0d fc ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192b8:	83 c4 20             	add    esp,0x20
c00192bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00192bf:	3d 00 00 00 80       	cmp    eax,0x80000000
c00192c4:	76 4b                	jbe    c0019311 <HalDetectFeatures()+0x2f7>
c00192c6:	83 ec 0c             	sub    esp,0xc
c00192c9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00192cd:	50                   	push   eax
c00192ce:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00192d2:	50                   	push   eax
c00192d3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00192d7:	50                   	push   eax
c00192d8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00192dc:	50                   	push   eax
c00192dd:	68 01 00 00 80       	push   0x80000001
c00192e2:	e8 de fb ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192e7:	83 c4 20             	add    esp,0x20
c00192ea:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c00192ef:	83 e0 bf             	and    eax,0xffffffbf
c00192f2:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c00192f7:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00192fc:	83 e0 fd             	and    eax,0xfffffffd
c00192ff:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019304:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c0019309:	83 e0 fe             	and    eax,0xfffffffe
c001930c:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019311:	83 ec 0c             	sub    esp,0xc
c0019314:	68 00 04 00 00       	push   0x400
c0019319:	e8 72 3e ff ff       	call   c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001931e:	83 c4 10             	add    esp,0x10
c0019321:	0f b6 c0             	movzx  eax,al
c0019324:	85 c0                	test   eax,eax
c0019326:	74 0d                	je     c0019335 <HalDetectFeatures()+0x31b>
c0019328:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001932d:	83 e0 fb             	and    eax,0xfffffffb
c0019330:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019335:	c6 05 48 14 03 c0 01 	mov    BYTE PTR ds:0xc0031448,0x1
c001933c:	83 ec 04             	sub    esp,0x4
c001933f:	6a 0d                	push   0xd
c0019341:	6a 00                	push   0x0
c0019343:	68 30 14 03 c0       	push   0xc0031430
c0019348:	e8 a3 71 fe ff       	call   c00004f0 <memset>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019355:	83 e0 02             	and    eax,0x2
c0019358:	0f b6 c0             	movzx  eax,al
c001935b:	85 c0                	test   eax,eax
c001935d:	0f 84 16 08 00 00    	je     c0019b79 <HalDetectFeatures()+0xb5f>
c0019363:	83 ec 0c             	sub    esp,0xc
c0019366:	6a 10                	push   0x10
c0019368:	e8 f6 fb ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	83 e0 01             	and    eax,0x1
c0019373:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001937a:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c001937f:	83 e0 f7             	and    eax,0xfffffff7
c0019382:	88 c2                	mov    dl,al
c0019384:	88 c8                	mov    al,cl
c0019386:	09 d0                	or     eax,edx
c0019388:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c001938d:	83 ec 0c             	sub    esp,0xc
c0019390:	6a 40                	push   0x40
c0019392:	e8 cc fb ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c0019397:	83 c4 10             	add    esp,0x10
c001939a:	83 e0 01             	and    eax,0x1
c001939d:	89 c1                	mov    ecx,eax
c001939f:	c1 e1 04             	shl    ecx,0x4
c00193a2:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00193a7:	83 e0 ef             	and    eax,0xffffffef
c00193aa:	88 c2                	mov    dl,al
c00193ac:	88 c8                	mov    al,cl
c00193ae:	09 d0                	or     eax,edx
c00193b0:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c00193b5:	83 ec 0c             	sub    esp,0xc
c00193b8:	6a 08                	push   0x8
c00193ba:	e8 a4 fb ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c00193bf:	83 c4 10             	add    esp,0x10
c00193c2:	83 e0 01             	and    eax,0x1
c00193c5:	89 c1                	mov    ecx,eax
c00193c7:	c1 e1 05             	shl    ecx,0x5
c00193ca:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00193cf:	83 e0 df             	and    eax,0xffffffdf
c00193d2:	88 c2                	mov    dl,al
c00193d4:	88 c8                	mov    al,cl
c00193d6:	09 d0                	or     eax,edx
c00193d8:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c00193dd:	83 ec 0c             	sub    esp,0xc
c00193e0:	68 00 20 00 00       	push   0x2000
c00193e5:	e8 79 fb ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c00193ea:	83 c4 10             	add    esp,0x10
c00193ed:	83 e0 01             	and    eax,0x1
c00193f0:	89 c1                	mov    ecx,eax
c00193f2:	c1 e1 06             	shl    ecx,0x6
c00193f5:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00193fa:	83 e0 bf             	and    eax,0xffffffbf
c00193fd:	88 c2                	mov    dl,al
c00193ff:	88 c8                	mov    al,cl
c0019401:	09 d0                	or     eax,edx
c0019403:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019408:	83 ec 0c             	sub    esp,0xc
c001940b:	68 00 00 01 00       	push   0x10000
c0019410:	e8 4e fb ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c0019415:	83 c4 10             	add    esp,0x10
c0019418:	89 c1                	mov    ecx,eax
c001941a:	c1 e1 07             	shl    ecx,0x7
c001941d:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c0019422:	83 e0 7f             	and    eax,0x7f
c0019425:	88 c2                	mov    dl,al
c0019427:	88 c8                	mov    al,cl
c0019429:	09 d0                	or     eax,edx
c001942b:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019430:	83 ec 0c             	sub    esp,0xc
c0019433:	6a 01                	push   0x1
c0019435:	e8 29 fb ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c001943a:	83 c4 10             	add    esp,0x10
c001943d:	83 e0 01             	and    eax,0x1
c0019440:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019447:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c001944c:	83 e0 f7             	and    eax,0xfffffff7
c001944f:	88 c2                	mov    dl,al
c0019451:	88 c8                	mov    al,cl
c0019453:	09 d0                	or     eax,edx
c0019455:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c001945a:	83 ec 0c             	sub    esp,0xc
c001945d:	68 00 08 00 00       	push   0x800
c0019462:	e8 fc fa ff ff       	call   c0018f63 <cpuidCheckEDX(unsigned int)>
c0019467:	83 c4 10             	add    esp,0x10
c001946a:	89 c1                	mov    ecx,eax
c001946c:	83 e1 01             	and    ecx,0x1
c001946f:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019474:	83 e0 fe             	and    eax,0xfffffffe
c0019477:	88 c2                	mov    dl,al
c0019479:	88 c8                	mov    al,cl
c001947b:	09 d0                	or     eax,edx
c001947d:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019482:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c0019487:	83 e0 40             	and    eax,0x40
c001948a:	0f b6 c0             	movzx  eax,al
c001948d:	85 c0                	test   eax,eax
c001948f:	74 0a                	je     c001949b <HalDetectFeatures()+0x481>
c0019491:	c7 05 28 14 03 c0 00 01 00 00 	mov    DWORD PTR ds:0xc0031428,0x100
c001949b:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c00194a0:	83 e0 80             	and    eax,0xffffff80
c00194a3:	0f b6 c0             	movzx  eax,al
c00194a6:	85 c0                	test   eax,eax
c00194a8:	74 0a                	je     c00194b4 <HalDetectFeatures()+0x49a>
c00194aa:	c7 05 24 14 03 c0 80 00 00 00 	mov    DWORD PTR ds:0xc0031424,0x80
c00194b4:	83 ec 0c             	sub    esp,0xc
c00194b7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00194bb:	50                   	push   eax
c00194bc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00194c0:	50                   	push   eax
c00194c1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00194c5:	50                   	push   eax
c00194c6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00194ca:	50                   	push   eax
c00194cb:	6a 00                	push   0x0
c00194cd:	e8 f3 f9 ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194d2:	83 c4 20             	add    esp,0x20
c00194d5:	c7 44 24 48 30 14 03 c0 	mov    DWORD PTR [esp+0x48],0xc0031430
c00194dd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00194e1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00194e5:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00194ed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00194f1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00194f5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00194f9:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00194fd:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019501:	89 c6                	mov    esi,eax
c0019503:	89 d7                	mov    edi,edx
c0019505:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019507:	89 c8                	mov    eax,ecx
c0019509:	89 fa                	mov    edx,edi
c001950b:	89 f3                	mov    ebx,esi
c001950d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0019511:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019515:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019519:	b8 34 14 03 c0       	mov    eax,0xc0031434
c001951e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0019522:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019526:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001952a:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0019532:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0019536:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001953a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001953e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0019542:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0019546:	89 c6                	mov    esi,eax
c0019548:	89 d7                	mov    edi,edx
c001954a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001954c:	89 c8                	mov    eax,ecx
c001954e:	89 fa                	mov    edx,edi
c0019550:	89 f3                	mov    ebx,esi
c0019552:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0019556:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001955a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001955e:	b8 38 14 03 c0       	mov    eax,0xc0031438
c0019563:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001956a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001956e:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0019572:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001957a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019581:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0019585:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0019589:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0019590:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0019594:	89 c6                	mov    esi,eax
c0019596:	89 d7                	mov    edi,edx
c0019598:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001959a:	89 c8                	mov    eax,ecx
c001959c:	89 fa                	mov    edx,edi
c001959e:	89 f3                	mov    ebx,esi
c00195a0:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00195a4:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00195a8:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00195ac:	83 ec 08             	sub    esp,0x8
c00195af:	68 01 8f 02 c0       	push   0xc0028f01
c00195b4:	68 30 14 03 c0       	push   0xc0031430
c00195b9:	e8 c2 71 fe ff       	call   c0000780 <strcmp>
c00195be:	83 c4 10             	add    esp,0x10
c00195c1:	85 c0                	test   eax,eax
c00195c3:	74 19                	je     c00195de <HalDetectFeatures()+0x5c4>
c00195c5:	83 ec 08             	sub    esp,0x8
c00195c8:	68 0e 8f 02 c0       	push   0xc0028f0e
c00195cd:	68 30 14 03 c0       	push   0xc0031430
c00195d2:	e8 a9 71 fe ff       	call   c0000780 <strcmp>
c00195d7:	83 c4 10             	add    esp,0x10
c00195da:	85 c0                	test   eax,eax
c00195dc:	75 04                	jne    c00195e2 <HalDetectFeatures()+0x5c8>
c00195de:	b0 01                	mov    al,0x1
c00195e0:	eb 02                	jmp    c00195e4 <HalDetectFeatures()+0x5ca>
c00195e2:	b0 00                	mov    al,0x0
c00195e4:	0f b6 c0             	movzx  eax,al
c00195e7:	85 c0                	test   eax,eax
c00195e9:	74 0f                	je     c00195fa <HalDetectFeatures()+0x5e0>
c00195eb:	c7 05 44 14 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x2
c00195f5:	e9 0d 03 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c00195fa:	83 ec 08             	sub    esp,0x8
c00195fd:	68 1b 8f 02 c0       	push   0xc0028f1b
c0019602:	68 30 14 03 c0       	push   0xc0031430
c0019607:	e8 74 71 fe ff       	call   c0000780 <strcmp>
c001960c:	83 c4 10             	add    esp,0x10
c001960f:	85 c0                	test   eax,eax
c0019611:	74 19                	je     c001962c <HalDetectFeatures()+0x612>
c0019613:	83 ec 08             	sub    esp,0x8
c0019616:	68 28 8f 02 c0       	push   0xc0028f28
c001961b:	68 30 14 03 c0       	push   0xc0031430
c0019620:	e8 5b 71 fe ff       	call   c0000780 <strcmp>
c0019625:	83 c4 10             	add    esp,0x10
c0019628:	85 c0                	test   eax,eax
c001962a:	75 04                	jne    c0019630 <HalDetectFeatures()+0x616>
c001962c:	b0 01                	mov    al,0x1
c001962e:	eb 02                	jmp    c0019632 <HalDetectFeatures()+0x618>
c0019630:	b0 00                	mov    al,0x0
c0019632:	0f b6 c0             	movzx  eax,al
c0019635:	85 c0                	test   eax,eax
c0019637:	74 0f                	je     c0019648 <HalDetectFeatures()+0x62e>
c0019639:	c7 05 44 14 03 c0 04 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x4
c0019643:	e9 bf 02 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c0019648:	83 ec 08             	sub    esp,0x8
c001964b:	68 35 8f 02 c0       	push   0xc0028f35
c0019650:	68 30 14 03 c0       	push   0xc0031430
c0019655:	e8 26 71 fe ff       	call   c0000780 <strcmp>
c001965a:	83 c4 10             	add    esp,0x10
c001965d:	85 c0                	test   eax,eax
c001965f:	74 19                	je     c001967a <HalDetectFeatures()+0x660>
c0019661:	83 ec 08             	sub    esp,0x8
c0019664:	68 42 8f 02 c0       	push   0xc0028f42
c0019669:	68 30 14 03 c0       	push   0xc0031430
c001966e:	e8 0d 71 fe ff       	call   c0000780 <strcmp>
c0019673:	83 c4 10             	add    esp,0x10
c0019676:	85 c0                	test   eax,eax
c0019678:	75 04                	jne    c001967e <HalDetectFeatures()+0x664>
c001967a:	b0 01                	mov    al,0x1
c001967c:	eb 02                	jmp    c0019680 <HalDetectFeatures()+0x666>
c001967e:	b0 00                	mov    al,0x0
c0019680:	0f b6 c0             	movzx  eax,al
c0019683:	85 c0                	test   eax,eax
c0019685:	74 0f                	je     c0019696 <HalDetectFeatures()+0x67c>
c0019687:	c7 05 44 14 03 c0 05 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x5
c0019691:	e9 71 02 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c0019696:	83 ec 08             	sub    esp,0x8
c0019699:	68 4f 8f 02 c0       	push   0xc0028f4f
c001969e:	68 30 14 03 c0       	push   0xc0031430
c00196a3:	e8 d8 70 fe ff       	call   c0000780 <strcmp>
c00196a8:	83 c4 10             	add    esp,0x10
c00196ab:	85 c0                	test   eax,eax
c00196ad:	0f 94 c0             	sete   al
c00196b0:	0f b6 c0             	movzx  eax,al
c00196b3:	85 c0                	test   eax,eax
c00196b5:	74 0f                	je     c00196c6 <HalDetectFeatures()+0x6ac>
c00196b7:	c7 05 44 14 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x1
c00196c1:	e9 41 02 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c00196c6:	83 ec 08             	sub    esp,0x8
c00196c9:	68 5c 8f 02 c0       	push   0xc0028f5c
c00196ce:	68 30 14 03 c0       	push   0xc0031430
c00196d3:	e8 a8 70 fe ff       	call   c0000780 <strcmp>
c00196d8:	83 c4 10             	add    esp,0x10
c00196db:	85 c0                	test   eax,eax
c00196dd:	0f 94 c0             	sete   al
c00196e0:	0f b6 c0             	movzx  eax,al
c00196e3:	85 c0                	test   eax,eax
c00196e5:	74 0f                	je     c00196f6 <HalDetectFeatures()+0x6dc>
c00196e7:	c7 05 44 14 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x3
c00196f1:	e9 11 02 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c00196f6:	83 ec 08             	sub    esp,0x8
c00196f9:	68 1b 8f 02 c0       	push   0xc0028f1b
c00196fe:	68 30 14 03 c0       	push   0xc0031430
c0019703:	e8 78 70 fe ff       	call   c0000780 <strcmp>
c0019708:	83 c4 10             	add    esp,0x10
c001970b:	85 c0                	test   eax,eax
c001970d:	0f 94 c0             	sete   al
c0019710:	0f b6 c0             	movzx  eax,al
c0019713:	85 c0                	test   eax,eax
c0019715:	74 0f                	je     c0019726 <HalDetectFeatures()+0x70c>
c0019717:	c7 05 44 14 03 c0 06 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x6
c0019721:	e9 e1 01 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c0019726:	83 ec 08             	sub    esp,0x8
c0019729:	68 69 8f 02 c0       	push   0xc0028f69
c001972e:	68 30 14 03 c0       	push   0xc0031430
c0019733:	e8 48 70 fe ff       	call   c0000780 <strcmp>
c0019738:	83 c4 10             	add    esp,0x10
c001973b:	85 c0                	test   eax,eax
c001973d:	0f 94 c0             	sete   al
c0019740:	0f b6 c0             	movzx  eax,al
c0019743:	85 c0                	test   eax,eax
c0019745:	74 0f                	je     c0019756 <HalDetectFeatures()+0x73c>
c0019747:	c7 05 44 14 03 c0 07 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x7
c0019751:	e9 b1 01 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c0019756:	83 ec 08             	sub    esp,0x8
c0019759:	68 76 8f 02 c0       	push   0xc0028f76
c001975e:	68 30 14 03 c0       	push   0xc0031430
c0019763:	e8 18 70 fe ff       	call   c0000780 <strcmp>
c0019768:	83 c4 10             	add    esp,0x10
c001976b:	85 c0                	test   eax,eax
c001976d:	0f 94 c0             	sete   al
c0019770:	0f b6 c0             	movzx  eax,al
c0019773:	85 c0                	test   eax,eax
c0019775:	74 0f                	je     c0019786 <HalDetectFeatures()+0x76c>
c0019777:	c7 05 44 14 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x8
c0019781:	e9 81 01 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c0019786:	83 ec 08             	sub    esp,0x8
c0019789:	68 83 8f 02 c0       	push   0xc0028f83
c001978e:	68 30 14 03 c0       	push   0xc0031430
c0019793:	e8 e8 6f fe ff       	call   c0000780 <strcmp>
c0019798:	83 c4 10             	add    esp,0x10
c001979b:	85 c0                	test   eax,eax
c001979d:	0f 94 c0             	sete   al
c00197a0:	0f b6 c0             	movzx  eax,al
c00197a3:	85 c0                	test   eax,eax
c00197a5:	74 0f                	je     c00197b6 <HalDetectFeatures()+0x79c>
c00197a7:	c7 05 44 14 03 c0 09 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x9
c00197b1:	e9 51 01 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c00197b6:	83 ec 08             	sub    esp,0x8
c00197b9:	68 90 8f 02 c0       	push   0xc0028f90
c00197be:	68 30 14 03 c0       	push   0xc0031430
c00197c3:	e8 b8 6f fe ff       	call   c0000780 <strcmp>
c00197c8:	83 c4 10             	add    esp,0x10
c00197cb:	85 c0                	test   eax,eax
c00197cd:	0f 94 c0             	sete   al
c00197d0:	0f b6 c0             	movzx  eax,al
c00197d3:	85 c0                	test   eax,eax
c00197d5:	74 0f                	je     c00197e6 <HalDetectFeatures()+0x7cc>
c00197d7:	c7 05 44 14 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xa
c00197e1:	e9 21 01 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c00197e6:	83 ec 08             	sub    esp,0x8
c00197e9:	68 9d 8f 02 c0       	push   0xc0028f9d
c00197ee:	68 30 14 03 c0       	push   0xc0031430
c00197f3:	e8 88 6f fe ff       	call   c0000780 <strcmp>
c00197f8:	83 c4 10             	add    esp,0x10
c00197fb:	85 c0                	test   eax,eax
c00197fd:	0f 94 c0             	sete   al
c0019800:	0f b6 c0             	movzx  eax,al
c0019803:	85 c0                	test   eax,eax
c0019805:	74 0f                	je     c0019816 <HalDetectFeatures()+0x7fc>
c0019807:	c7 05 44 14 03 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xb
c0019811:	e9 f1 00 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c0019816:	83 ec 08             	sub    esp,0x8
c0019819:	68 aa 8f 02 c0       	push   0xc0028faa
c001981e:	68 30 14 03 c0       	push   0xc0031430
c0019823:	e8 58 6f fe ff       	call   c0000780 <strcmp>
c0019828:	83 c4 10             	add    esp,0x10
c001982b:	85 c0                	test   eax,eax
c001982d:	0f 94 c0             	sete   al
c0019830:	0f b6 c0             	movzx  eax,al
c0019833:	85 c0                	test   eax,eax
c0019835:	74 0f                	je     c0019846 <HalDetectFeatures()+0x82c>
c0019837:	c7 05 44 14 03 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xc
c0019841:	e9 c1 00 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c0019846:	83 ec 08             	sub    esp,0x8
c0019849:	68 b7 8f 02 c0       	push   0xc0028fb7
c001984e:	68 30 14 03 c0       	push   0xc0031430
c0019853:	e8 28 6f fe ff       	call   c0000780 <strcmp>
c0019858:	83 c4 10             	add    esp,0x10
c001985b:	85 c0                	test   eax,eax
c001985d:	0f 94 c0             	sete   al
c0019860:	0f b6 c0             	movzx  eax,al
c0019863:	85 c0                	test   eax,eax
c0019865:	74 0f                	je     c0019876 <HalDetectFeatures()+0x85c>
c0019867:	c7 05 44 14 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xd
c0019871:	e9 91 00 00 00       	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c0019876:	83 ec 08             	sub    esp,0x8
c0019879:	68 c4 8f 02 c0       	push   0xc0028fc4
c001987e:	68 30 14 03 c0       	push   0xc0031430
c0019883:	e8 f8 6e fe ff       	call   c0000780 <strcmp>
c0019888:	83 c4 10             	add    esp,0x10
c001988b:	85 c0                	test   eax,eax
c001988d:	0f 94 c0             	sete   al
c0019890:	0f b6 c0             	movzx  eax,al
c0019893:	85 c0                	test   eax,eax
c0019895:	74 0c                	je     c00198a3 <HalDetectFeatures()+0x889>
c0019897:	c7 05 44 14 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xd
c00198a1:	eb 64                	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c00198a3:	83 ec 08             	sub    esp,0x8
c00198a6:	68 d1 8f 02 c0       	push   0xc0028fd1
c00198ab:	68 30 14 03 c0       	push   0xc0031430
c00198b0:	e8 cb 6e fe ff       	call   c0000780 <strcmp>
c00198b5:	83 c4 10             	add    esp,0x10
c00198b8:	85 c0                	test   eax,eax
c00198ba:	0f 94 c0             	sete   al
c00198bd:	0f b6 c0             	movzx  eax,al
c00198c0:	85 c0                	test   eax,eax
c00198c2:	74 0c                	je     c00198d0 <HalDetectFeatures()+0x8b6>
c00198c4:	c7 05 44 14 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xd
c00198ce:	eb 37                	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c00198d0:	83 ec 08             	sub    esp,0x8
c00198d3:	68 de 8f 02 c0       	push   0xc0028fde
c00198d8:	68 30 14 03 c0       	push   0xc0031430
c00198dd:	e8 9e 6e fe ff       	call   c0000780 <strcmp>
c00198e2:	83 c4 10             	add    esp,0x10
c00198e5:	85 c0                	test   eax,eax
c00198e7:	0f 94 c0             	sete   al
c00198ea:	0f b6 c0             	movzx  eax,al
c00198ed:	85 c0                	test   eax,eax
c00198ef:	74 0c                	je     c00198fd <HalDetectFeatures()+0x8e3>
c00198f1:	c7 05 44 14 03 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc0031444,0xd
c00198fb:	eb 0a                	jmp    c0019907 <HalDetectFeatures()+0x8ed>
c00198fd:	c7 05 44 14 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x0
c0019907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001990b:	83 f8 06             	cmp    eax,0x6
c001990e:	0f 86 cc 00 00 00    	jbe    c00199e0 <HalDetectFeatures()+0x9c6>
c0019914:	83 ec 0c             	sub    esp,0xc
c0019917:	68 80 00 00 00       	push   0x80
c001991c:	e8 9d f6 ff ff       	call   c0018fbe <cpuidCheckExtendedEBX(unsigned int)>
c0019921:	83 c4 10             	add    esp,0x10
c0019924:	89 c1                	mov    ecx,eax
c0019926:	83 e1 01             	and    ecx,0x1
c0019929:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c001992e:	83 e0 fe             	and    eax,0xfffffffe
c0019931:	88 c2                	mov    dl,al
c0019933:	88 c8                	mov    al,cl
c0019935:	09 d0                	or     eax,edx
c0019937:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c001993c:	83 ec 0c             	sub    esp,0xc
c001993f:	68 00 00 10 00       	push   0x100000
c0019944:	e8 75 f6 ff ff       	call   c0018fbe <cpuidCheckExtendedEBX(unsigned int)>
c0019949:	83 c4 10             	add    esp,0x10
c001994c:	83 e0 01             	and    eax,0x1
c001994f:	89 c1                	mov    ecx,eax
c0019951:	c1 e1 06             	shl    ecx,0x6
c0019954:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019959:	83 e0 bf             	and    eax,0xffffffbf
c001995c:	88 c2                	mov    dl,al
c001995e:	88 c8                	mov    al,cl
c0019960:	09 d0                	or     eax,edx
c0019962:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019967:	83 ec 0c             	sub    esp,0xc
c001996a:	68 00 00 04 00       	push   0x40000
c001996f:	e8 4a f6 ff ff       	call   c0018fbe <cpuidCheckExtendedEBX(unsigned int)>
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	83 e0 01             	and    eax,0x1
c001997a:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001997d:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019982:	83 e0 fd             	and    eax,0xfffffffd
c0019985:	88 c2                	mov    dl,al
c0019987:	88 c8                	mov    al,cl
c0019989:	09 d0                	or     eax,edx
c001998b:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019990:	83 ec 0c             	sub    esp,0xc
c0019993:	6a 04                	push   0x4
c0019995:	e8 52 f6 ff ff       	call   c0018fec <cpuidCheckExtendedECX(unsigned int)>
c001999a:	83 c4 10             	add    esp,0x10
c001999d:	83 e0 01             	and    eax,0x1
c00199a0:	89 c1                	mov    ecx,eax
c00199a2:	c1 e1 05             	shl    ecx,0x5
c00199a5:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c00199aa:	83 e0 df             	and    eax,0xffffffdf
c00199ad:	88 c2                	mov    dl,al
c00199af:	88 c8                	mov    al,cl
c00199b1:	09 d0                	or     eax,edx
c00199b3:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c00199b8:	83 ec 0c             	sub    esp,0xc
c00199bb:	6a 20                	push   0x20
c00199bd:	e8 2a f6 ff ff       	call   c0018fec <cpuidCheckExtendedECX(unsigned int)>
c00199c2:	83 c4 10             	add    esp,0x10
c00199c5:	83 e0 01             	and    eax,0x1
c00199c8:	89 c1                	mov    ecx,eax
c00199ca:	c1 e1 04             	shl    ecx,0x4
c00199cd:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c00199d2:	83 e0 ef             	and    eax,0xffffffef
c00199d5:	88 c2                	mov    dl,al
c00199d7:	88 c8                	mov    al,cl
c00199d9:	09 d0                	or     eax,edx
c00199db:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c00199e0:	83 ec 0c             	sub    esp,0xc
c00199e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199e7:	50                   	push   eax
c00199e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00199ec:	50                   	push   eax
c00199ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00199f1:	50                   	push   eax
c00199f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00199f6:	50                   	push   eax
c00199f7:	6a 01                	push   0x1
c00199f9:	e8 c7 f4 ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199fe:	83 c4 20             	add    esp,0x20
c0019a01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a05:	83 e0 0f             	and    eax,0xf
c0019a08:	a2 40 14 03 c0       	mov    ds:0xc0031440,al
c0019a0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a11:	c1 e8 04             	shr    eax,0x4
c0019a14:	83 e0 0f             	and    eax,0xf
c0019a17:	a2 3e 14 03 c0       	mov    ds:0xc003143e,al
c0019a1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a20:	c1 e8 08             	shr    eax,0x8
c0019a23:	83 e0 0f             	and    eax,0xf
c0019a26:	a2 3d 14 03 c0       	mov    ds:0xc003143d,al
c0019a2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a2f:	c1 e8 0c             	shr    eax,0xc
c0019a32:	83 e0 03             	and    eax,0x3
c0019a35:	a2 3f 14 03 c0       	mov    ds:0xc003143f,al
c0019a3a:	a0 3d 14 03 c0       	mov    al,ds:0xc003143d
c0019a3f:	0f b6 c0             	movzx  eax,al
c0019a42:	83 f8 06             	cmp    eax,0x6
c0019a45:	74 0d                	je     c0019a54 <HalDetectFeatures()+0xa3a>
c0019a47:	a0 3d 14 03 c0       	mov    al,ds:0xc003143d
c0019a4c:	0f b6 c0             	movzx  eax,al
c0019a4f:	83 f8 0f             	cmp    eax,0xf
c0019a52:	75 18                	jne    c0019a6c <HalDetectFeatures()+0xa52>
c0019a54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a58:	c1 e8 10             	shr    eax,0x10
c0019a5b:	c1 e0 04             	shl    eax,0x4
c0019a5e:	88 c2                	mov    dl,al
c0019a60:	a0 3e 14 03 c0       	mov    al,ds:0xc003143e
c0019a65:	09 d0                	or     eax,edx
c0019a67:	a2 3e 14 03 c0       	mov    ds:0xc003143e,al
c0019a6c:	a0 3d 14 03 c0       	mov    al,ds:0xc003143d
c0019a71:	0f b6 c0             	movzx  eax,al
c0019a74:	83 f8 0f             	cmp    eax,0xf
c0019a77:	75 15                	jne    c0019a8e <HalDetectFeatures()+0xa74>
c0019a79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019a7d:	c1 e8 14             	shr    eax,0x14
c0019a80:	88 c2                	mov    dl,al
c0019a82:	a0 3d 14 03 c0       	mov    al,ds:0xc003143d
c0019a87:	01 d0                	add    eax,edx
c0019a89:	a2 3d 14 03 c0       	mov    ds:0xc003143d,al
c0019a8e:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0019a96:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0019a9e:	85 c0                	test   eax,eax
c0019aa0:	74 2d                	je     c0019acf <HalDetectFeatures()+0xab5>
c0019aa2:	83 ec 0c             	sub    esp,0xc
c0019aa5:	68 00 00 00 40       	push   0x40000000
c0019aaa:	e8 e1 f4 ff ff       	call   c0018f90 <cpuidCheckECX(unsigned int)>
c0019aaf:	83 c4 10             	add    esp,0x10
c0019ab2:	83 e0 01             	and    eax,0x1
c0019ab5:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019abc:	a0 4e 14 03 c0       	mov    al,ds:0xc003144e
c0019ac1:	83 e0 fb             	and    eax,0xfffffffb
c0019ac4:	88 c2                	mov    dl,al
c0019ac6:	88 c8                	mov    al,cl
c0019ac8:	09 d0                	or     eax,edx
c0019aca:	a2 4e 14 03 c0       	mov    ds:0xc003144e,al
c0019acf:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019ad4:	83 c8 04             	or     eax,0x4
c0019ad7:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019adc:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019ae1:	83 c8 08             	or     eax,0x8
c0019ae4:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019ae9:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019aee:	83 c8 10             	or     eax,0x10
c0019af1:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019af6:	83 ec 0c             	sub    esp,0xc
c0019af9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019afd:	50                   	push   eax
c0019afe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019b02:	50                   	push   eax
c0019b03:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b07:	50                   	push   eax
c0019b08:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b0c:	50                   	push   eax
c0019b0d:	68 00 00 00 80       	push   0x80000000
c0019b12:	e8 ae f3 ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019b17:	83 c4 20             	add    esp,0x20
c0019b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b1e:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019b23:	0f 86 96 01 00 00    	jbe    c0019cbf <HalDetectFeatures()+0xca5>
c0019b29:	83 ec 0c             	sub    esp,0xc
c0019b2c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b30:	50                   	push   eax
c0019b31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019b35:	50                   	push   eax
c0019b36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b3a:	50                   	push   eax
c0019b3b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b3f:	50                   	push   eax
c0019b40:	68 01 00 00 80       	push   0x80000001
c0019b45:	e8 7b f3 ff ff       	call   c0018ec5 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019b4a:	83 c4 20             	add    esp,0x20
c0019b4d:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019b52:	83 e0 7f             	and    eax,0x7f
c0019b55:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019b5a:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019b5f:	83 e0 fb             	and    eax,0xfffffffb
c0019b62:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019b67:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019b6c:	83 e0 fd             	and    eax,0xfffffffd
c0019b6f:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019b74:	e9 46 01 00 00       	jmp    c0019cbf <HalDetectFeatures()+0xca5>
c0019b79:	83 ec 08             	sub    esp,0x8
c0019b7c:	68 4f 8f 02 c0       	push   0xc0028f4f
c0019b81:	68 30 14 03 c0       	push   0xc0031430
c0019b86:	e8 c5 6a fe ff       	call   c0000650 <strcpy>
c0019b8b:	83 c4 10             	add    esp,0x10
c0019b8e:	c7 05 44 14 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031444,0x1
c0019b98:	e8 26 66 fe ff       	call   c00001c3 <is486>
c0019b9d:	85 c0                	test   eax,eax
c0019b9f:	0f 95 c0             	setne  al
c0019ba2:	0f b6 c0             	movzx  eax,al
c0019ba5:	85 c0                	test   eax,eax
c0019ba7:	0f 84 8d 00 00 00    	je     c0019c3a <HalDetectFeatures()+0xc20>
c0019bad:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019bb2:	83 c8 04             	or     eax,0x4
c0019bb5:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019bba:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019bbf:	83 c8 08             	or     eax,0x8
c0019bc2:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019bc7:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019bcc:	83 c8 10             	or     eax,0x10
c0019bcf:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019bd4:	0f 20 c0             	mov    eax,cr0
c0019bd7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019bdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019bdf:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019be6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019bed:	83 e0 04             	and    eax,0x4
c0019bf0:	74 1e                	je     c0019c10 <HalDetectFeatures()+0xbf6>
c0019bf2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019bf9:	83 e0 10             	and    eax,0x10
c0019bfc:	75 12                	jne    c0019c10 <HalDetectFeatures()+0xbf6>
c0019bfe:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019c03:	83 e0 f7             	and    eax,0xfffffff7
c0019c06:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019c0b:	e9 af 00 00 00       	jmp    c0019cbf <HalDetectFeatures()+0xca5>
c0019c10:	e8 89 65 fe ff       	call   c000019e <hasLegacyFPU>
c0019c15:	83 e0 01             	and    eax,0x1
c0019c18:	83 e0 01             	and    eax,0x1
c0019c1b:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019c22:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019c27:	83 e0 f7             	and    eax,0xfffffff7
c0019c2a:	88 c2                	mov    dl,al
c0019c2c:	88 c8                	mov    al,cl
c0019c2e:	09 d0                	or     eax,edx
c0019c30:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019c35:	e9 85 00 00 00       	jmp    c0019cbf <HalDetectFeatures()+0xca5>
c0019c3a:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019c3f:	83 e0 fb             	and    eax,0xfffffffb
c0019c42:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019c47:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019c4c:	83 e0 f7             	and    eax,0xfffffff7
c0019c4f:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019c54:	a0 4f 14 03 c0       	mov    al,ds:0xc003144f
c0019c59:	83 e0 ef             	and    eax,0xffffffef
c0019c5c:	a2 4f 14 03 c0       	mov    ds:0xc003144f,al
c0019c61:	0f 20 c0             	mov    eax,cr0
c0019c64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019c68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019c6c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0019c73:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019c7a:	83 e0 04             	and    eax,0x4
c0019c7d:	74 1b                	je     c0019c9a <HalDetectFeatures()+0xc80>
c0019c7f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019c86:	83 e0 10             	and    eax,0x10
c0019c89:	75 0f                	jne    c0019c9a <HalDetectFeatures()+0xc80>
c0019c8b:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019c90:	83 e0 f7             	and    eax,0xfffffff7
c0019c93:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019c98:	eb 25                	jmp    c0019cbf <HalDetectFeatures()+0xca5>
c0019c9a:	e8 ff 64 fe ff       	call   c000019e <hasLegacyFPU>
c0019c9f:	83 e0 01             	and    eax,0x1
c0019ca2:	83 e0 01             	and    eax,0x1
c0019ca5:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019cac:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019cb1:	83 e0 f7             	and    eax,0xfffffff7
c0019cb4:	88 c2                	mov    dl,al
c0019cb6:	88 c8                	mov    al,cl
c0019cb8:	09 d0                	or     eax,edx
c0019cba:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019cbf:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019cc4:	83 e0 08             	and    eax,0x8
c0019cc7:	0f b6 c0             	movzx  eax,al
c0019cca:	85 c0                	test   eax,eax
c0019ccc:	75 25                	jne    c0019cf3 <HalDetectFeatures()+0xcd9>
c0019cce:	e8 cb 64 fe ff       	call   c000019e <hasLegacyFPU>
c0019cd3:	83 e0 01             	and    eax,0x1
c0019cd6:	83 e0 01             	and    eax,0x1
c0019cd9:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019ce0:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019ce5:	83 e0 f7             	and    eax,0xfffffff7
c0019ce8:	88 c2                	mov    dl,al
c0019cea:	88 c8                	mov    al,cl
c0019cec:	09 d0                	or     eax,edx
c0019cee:	a2 50 14 03 c0       	mov    ds:0xc0031450,al
c0019cf3:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c0019cf8:	83 e0 08             	and    eax,0x8
c0019cfb:	0f b6 c0             	movzx  eax,al
c0019cfe:	85 c0                	test   eax,eax
c0019d00:	74 0d                	je     c0019d0f <HalDetectFeatures()+0xcf5>
c0019d02:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019d07:	83 c8 10             	or     eax,0x10
c0019d0a:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019d0f:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019d14:	83 e0 10             	and    eax,0x10
c0019d17:	0f b6 c0             	movzx  eax,al
c0019d1a:	85 c0                	test   eax,eax
c0019d1c:	75 23                	jne    c0019d41 <HalDetectFeatures()+0xd27>
c0019d1e:	e8 63 7c 00 00       	call   c0021986 <x87Detect>
c0019d23:	83 e0 01             	and    eax,0x1
c0019d26:	83 e0 01             	and    eax,0x1
c0019d29:	89 c1                	mov    ecx,eax
c0019d2b:	c1 e1 04             	shl    ecx,0x4
c0019d2e:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019d33:	83 e0 ef             	and    eax,0xffffffef
c0019d36:	88 c2                	mov    dl,al
c0019d38:	88 c8                	mov    al,cl
c0019d3a:	09 d0                	or     eax,edx
c0019d3c:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019d41:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019d46:	83 e0 01             	and    eax,0x1
c0019d49:	0f b6 c0             	movzx  eax,al
c0019d4c:	85 c0                	test   eax,eax
c0019d4e:	75 2d                	jne    c0019d7d <HalDetectFeatures()+0xd63>
c0019d50:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019d55:	83 e0 02             	and    eax,0x2
c0019d58:	0f b6 c0             	movzx  eax,al
c0019d5b:	85 c0                	test   eax,eax
c0019d5d:	75 1e                	jne    c0019d7d <HalDetectFeatures()+0xd63>
c0019d5f:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019d64:	83 e0 04             	and    eax,0x4
c0019d67:	0f b6 c0             	movzx  eax,al
c0019d6a:	85 c0                	test   eax,eax
c0019d6c:	75 0f                	jne    c0019d7d <HalDetectFeatures()+0xd63>
c0019d6e:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019d73:	83 e0 08             	and    eax,0x8
c0019d76:	0f b6 c0             	movzx  eax,al
c0019d79:	85 c0                	test   eax,eax
c0019d7b:	74 0d                	je     c0019d8a <HalDetectFeatures()+0xd70>
c0019d7d:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019d82:	83 c8 80             	or     eax,0xffffff80
c0019d85:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019d8a:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019d8f:	83 e0 10             	and    eax,0x10
c0019d92:	0f b6 c0             	movzx  eax,al
c0019d95:	85 c0                	test   eax,eax
c0019d97:	74 2f                	je     c0019dc8 <HalDetectFeatures()+0xdae>
c0019d99:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019d9e:	83 e0 80             	and    eax,0xffffff80
c0019da1:	0f b6 c0             	movzx  eax,al
c0019da4:	85 c0                	test   eax,eax
c0019da6:	75 20                	jne    c0019dc8 <HalDetectFeatures()+0xdae>
c0019da8:	e8 93 7b 00 00       	call   c0021940 <sseDetect>
c0019dad:	83 e0 01             	and    eax,0x1
c0019db0:	89 c1                	mov    ecx,eax
c0019db2:	c1 e1 07             	shl    ecx,0x7
c0019db5:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019dba:	83 e0 7f             	and    eax,0x7f
c0019dbd:	88 c2                	mov    dl,al
c0019dbf:	88 c8                	mov    al,cl
c0019dc1:	09 d0                	or     eax,edx
c0019dc3:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019dc8:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019dcd:	83 e0 80             	and    eax,0xffffff80
c0019dd0:	0f b6 c0             	movzx  eax,al
c0019dd3:	85 c0                	test   eax,eax
c0019dd5:	74 1c                	je     c0019df3 <HalDetectFeatures()+0xdd9>
c0019dd7:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019ddc:	83 e0 20             	and    eax,0x20
c0019ddf:	0f b6 c0             	movzx  eax,al
c0019de2:	85 c0                	test   eax,eax
c0019de4:	75 0d                	jne    c0019df3 <HalDetectFeatures()+0xdd9>
c0019de6:	a0 4d 14 03 c0       	mov    al,ds:0xc003144d
c0019deb:	83 e0 df             	and    eax,0xffffffdf
c0019dee:	a2 4d 14 03 c0       	mov    ds:0xc003144d,al
c0019df3:	c6 05 48 14 03 c0 00 	mov    BYTE PTR ds:0xc0031448,0x0
c0019dfa:	90                   	nop
c0019dfb:	81 c4 90 00 00 00    	add    esp,0x90
c0019e01:	5b                   	pop    ebx
c0019e02:	5e                   	pop    esi
c0019e03:	5f                   	pop    edi
c0019e04:	c3                   	ret    

c0019e05 <HalEnableNMI()>:
c0019e05:	c6 05 2c 14 03 c0 01 	mov    BYTE PTR ds:0xc003142c,0x1
c0019e0c:	6a 10                	push   0x10
c0019e0e:	e8 00 ef ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c0019e13:	83 c4 04             	add    esp,0x4
c0019e16:	90                   	nop
c0019e17:	c3                   	ret    

c0019e18 <HalDisableNMI()>:
c0019e18:	c6 05 2c 14 03 c0 00 	mov    BYTE PTR ds:0xc003142c,0x0
c0019e1f:	6a 10                	push   0x10
c0019e21:	e8 ed ee ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c0019e26:	83 c4 04             	add    esp,0x4
c0019e29:	90                   	nop
c0019e2a:	c3                   	ret    

c0019e2b <HalGetNMIState()>:
c0019e2b:	a0 2c 14 03 c0       	mov    al,ds:0xc003142c
c0019e30:	c3                   	ret    

c0019e31 <x86rdmsr(unsigned int)>:
c0019e31:	83 ec 1c             	sub    esp,0x1c
c0019e34:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019e39:	83 e0 08             	and    eax,0x8
c0019e3c:	0f b6 c0             	movzx  eax,al
c0019e3f:	85 c0                	test   eax,eax
c0019e41:	75 10                	jne    c0019e53 <x86rdmsr(unsigned int)+0x22>
c0019e43:	83 ec 0c             	sub    esp,0xc
c0019e46:	68 ea 8f 02 c0       	push   0xc0028fea
c0019e4b:	e8 84 5c ff ff       	call   c000fad4 <KePanic(char const*)>
c0019e50:	83 c4 10             	add    esp,0x10
c0019e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e57:	89 c1                	mov    ecx,eax
c0019e59:	0f 32                	rdmsr  
c0019e5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019e67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e6b:	83 c4 1c             	add    esp,0x1c
c0019e6e:	c3                   	ret    

c0019e6f <x86wrmsr(unsigned int, unsigned long long)>:
c0019e6f:	83 ec 1c             	sub    esp,0x1c
c0019e72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019e7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e82:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019e87:	83 e0 08             	and    eax,0x8
c0019e8a:	0f b6 c0             	movzx  eax,al
c0019e8d:	85 c0                	test   eax,eax
c0019e8f:	75 10                	jne    c0019ea1 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0019e91:	83 ec 0c             	sub    esp,0xc
c0019e94:	68 f0 8f 02 c0       	push   0xc0028ff0
c0019e99:	e8 36 5c ff ff       	call   c000fad4 <KePanic(char const*)>
c0019e9e:	83 c4 10             	add    esp,0x10
c0019ea1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0019ea5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ea9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ead:	0f 30                	wrmsr  
c0019eaf:	90                   	nop
c0019eb0:	83 c4 1c             	add    esp,0x1c
c0019eb3:	c3                   	ret    

c0019eb4 <HalHandleGeneralProtectionFault(void*, void*)>:
c0019eb4:	83 ec 0c             	sub    esp,0xc
c0019eb7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019ebc:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ebe:	8a 40 62             	mov    al,BYTE PTR [eax+0x62]
c0019ec1:	0f b6 c0             	movzx  eax,al
c0019ec4:	85 c0                	test   eax,eax
c0019ec6:	74 11                	je     c0019ed9 <HalHandleGeneralProtectionFault(void*, void*)+0x25>
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ecf:	e8 83 db ff ff       	call   c0017a57 <Vm::faultHandler(regs*)>
c0019ed4:	83 c4 10             	add    esp,0x10
c0019ed7:	eb 02                	jmp    c0019edb <HalHandleGeneralProtectionFault(void*, void*)+0x27>
c0019ed9:	b0 00                	mov    al,0x0
c0019edb:	83 c4 0c             	add    esp,0xc
c0019ede:	c3                   	ret    

c0019edf <HalFindRSDP()>:
c0019edf:	83 ec 1c             	sub    esp,0x1c
c0019ee2:	a1 7c 11 03 c0       	mov    eax,ds:0xc003117c
c0019ee7:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019eec:	7e 17                	jle    c0019f05 <HalFindRSDP()+0x26>
c0019eee:	83 ec 0c             	sub    esp,0xc
c0019ef1:	68 00 04 00 00       	push   0x400
c0019ef6:	e8 95 32 ff ff       	call   c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c0019efb:	83 c4 10             	add    esp,0x10
c0019efe:	0f b6 c0             	movzx  eax,al
c0019f01:	85 c0                	test   eax,eax
c0019f03:	74 04                	je     c0019f09 <HalFindRSDP()+0x2a>
c0019f05:	b0 01                	mov    al,0x1
c0019f07:	eb 02                	jmp    c0019f0b <HalFindRSDP()+0x2c>
c0019f09:	b0 00                	mov    al,0x0
c0019f0b:	0f b6 c0             	movzx  eax,al
c0019f0e:	85 c0                	test   eax,eax
c0019f10:	74 1d                	je     c0019f2f <HalFindRSDP()+0x50>
c0019f12:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019f17:	83 e0 fb             	and    eax,0xfffffffb
c0019f1a:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019f1f:	83 ec 0c             	sub    esp,0xc
c0019f22:	68 f6 8f 02 c0       	push   0xc0028ff6
c0019f27:	e8 3a d0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019f2c:	83 c4 10             	add    esp,0x10
c0019f2f:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019f34:	83 e0 04             	and    eax,0x4
c0019f37:	0f b6 c0             	movzx  eax,al
c0019f3a:	85 c0                	test   eax,eax
c0019f3c:	75 17                	jne    c0019f55 <HalFindRSDP()+0x76>
c0019f3e:	83 ec 0c             	sub    esp,0xc
c0019f41:	68 05 90 02 c0       	push   0xc0029005
c0019f46:	e8 1b d0 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019f4b:	83 c4 10             	add    esp,0x10
c0019f4e:	b8 00 00 00 00       	mov    eax,0x0
c0019f53:	eb 63                	jmp    c0019fb8 <HalFindRSDP()+0xd9>
c0019f55:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0019f5d:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019f65:	77 2f                	ja     c0019f96 <HalFindRSDP()+0xb7>
c0019f67:	83 ec 04             	sub    esp,0x4
c0019f6a:	6a 08                	push   0x8
c0019f6c:	68 0f 90 02 c0       	push   0xc002900f
c0019f71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f75:	e8 06 64 fe ff       	call   c0000380 <memcmp>
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	85 c0                	test   eax,eax
c0019f7f:	0f 94 c0             	sete   al
c0019f82:	0f b6 c0             	movzx  eax,al
c0019f85:	85 c0                	test   eax,eax
c0019f87:	74 06                	je     c0019f8f <HalFindRSDP()+0xb0>
c0019f89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f8d:	eb 29                	jmp    c0019fb8 <HalFindRSDP()+0xd9>
c0019f8f:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019f94:	eb c7                	jmp    c0019f5d <HalFindRSDP()+0x7e>
c0019f96:	83 ec 0c             	sub    esp,0xc
c0019f99:	68 18 90 02 c0       	push   0xc0029018
c0019f9e:	e8 c3 cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0019fa3:	83 c4 10             	add    esp,0x10
c0019fa6:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c0019fab:	83 e0 fb             	and    eax,0xfffffffb
c0019fae:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c0019fb3:	b8 00 00 00 00       	mov    eax,0x0
c0019fb8:	83 c4 1c             	add    esp,0x1c
c0019fbb:	c3                   	ret    

c0019fbc <HalHandlePageFault(void*, void*)>:
c0019fbc:	83 ec 1c             	sub    esp,0x1c
c0019fbf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0019fc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fc6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019fc9:	8b 80 b2 05 00 00    	mov    eax,DWORD PTR [eax+0x5b2]
c0019fcf:	0f 20 d2             	mov    edx,cr2
c0019fd2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019fda:	83 ec 08             	sub    esp,0x8
c0019fdd:	52                   	push   edx
c0019fde:	50                   	push   eax
c0019fdf:	e8 06 9e ff ff       	call   c0013dea <VAS::tryLoadBackOffDisk(unsigned long)>
c0019fe4:	83 c4 10             	add    esp,0x10
c0019fe7:	83 c4 1c             	add    esp,0x1c
c0019fea:	c3                   	ret    

c0019feb <HalHandleOpcodeFault(void*, void*)>:
c0019feb:	83 ec 1c             	sub    esp,0x1c
c0019fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ff6:	a0 48 14 03 c0       	mov    al,ds:0xc0031448
c0019ffb:	0f b6 c0             	movzx  eax,al
c0019ffe:	85 c0                	test   eax,eax
c001a000:	74 25                	je     c001a027 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001a002:	83 ec 0c             	sub    esp,0xc
c001a005:	68 10 92 02 c0       	push   0xc0029210
c001a00a:	e8 57 cf fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a00f:	83 c4 10             	add    esp,0x10
c001a012:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a016:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a019:	8d 50 19             	lea    edx,[eax+0x19]
c001a01c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a020:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a023:	b0 01                	mov    al,0x1
c001a025:	eb 02                	jmp    c001a029 <HalHandleOpcodeFault(void*, void*)+0x3e>
c001a027:	b0 00                	mov    al,0x0
c001a029:	83 c4 1c             	add    esp,0x1c
c001a02c:	c3                   	ret    

c001a02d <HalDisplayDebugInfo(void*)>:
c001a02d:	83 ec 2c             	sub    esp,0x2c
c001a030:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a034:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a038:	0f 20 c0             	mov    eax,cr0
c001a03b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a03f:	0f 20 d0             	mov    eax,cr2
c001a042:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a046:	0f 20 d8             	mov    eax,cr3
c001a049:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a04d:	0f 20 e0             	mov    eax,cr4
c001a050:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a054:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a058:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001a05b:	83 ec 08             	sub    esp,0x8
c001a05e:	50                   	push   eax
c001a05f:	68 32 90 02 c0       	push   0xc0029032
c001a064:	e8 fd ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a069:	83 c4 10             	add    esp,0x10
c001a06c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a070:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001a073:	83 ec 08             	sub    esp,0x8
c001a076:	50                   	push   eax
c001a077:	68 23 90 02 c0       	push   0xc0029023
c001a07c:	e8 e5 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a088:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001a08b:	83 ec 08             	sub    esp,0x8
c001a08e:	50                   	push   eax
c001a08f:	68 2e 90 02 c0       	push   0xc002902e
c001a094:	e8 cd ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a099:	83 c4 10             	add    esp,0x10
c001a09c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a0a3:	83 ec 08             	sub    esp,0x8
c001a0a6:	50                   	push   eax
c001a0a7:	68 3d 90 02 c0       	push   0xc002903d
c001a0ac:	e8 b5 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0b1:	83 c4 10             	add    esp,0x10
c001a0b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0b8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001a0bb:	83 ec 08             	sub    esp,0x8
c001a0be:	50                   	push   eax
c001a0bf:	68 48 90 02 c0       	push   0xc0029048
c001a0c4:	e8 9d ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0c9:	83 c4 10             	add    esp,0x10
c001a0cc:	83 ec 08             	sub    esp,0x8
c001a0cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0d3:	68 53 90 02 c0       	push   0xc0029053
c001a0d8:	e8 89 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0dd:	83 c4 10             	add    esp,0x10
c001a0e0:	83 ec 08             	sub    esp,0x8
c001a0e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0e7:	68 5e 90 02 c0       	push   0xc002905e
c001a0ec:	e8 75 ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0f8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a0fb:	c1 e0 05             	shl    eax,0x5
c001a0fe:	8d 90 60 b4 02 c0    	lea    edx,[eax-0x3ffd4ba0]
c001a104:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a108:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a10b:	83 ec 04             	sub    esp,0x4
c001a10e:	52                   	push   edx
c001a10f:	50                   	push   eax
c001a110:	68 69 90 02 c0       	push   0xc0029069
c001a115:	e8 4c ce fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a11a:	83 c4 10             	add    esp,0x10
c001a11d:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a122:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a128:	83 ec 0c             	sub    esp,0xc
c001a12b:	50                   	push   eax
c001a12c:	e8 a2 7f ff ff       	call   c00120d3 <setActiveTerminal(VgaText*)>
c001a131:	83 c4 10             	add    esp,0x10
c001a134:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a139:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a13f:	83 ec 08             	sub    esp,0x8
c001a142:	68 78 90 02 c0       	push   0xc0029078
c001a147:	50                   	push   eax
c001a148:	e8 c3 82 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a14d:	83 c4 10             	add    esp,0x10
c001a150:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a155:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a15b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a15f:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001a162:	83 ec 08             	sub    esp,0x8
c001a165:	52                   	push   edx
c001a166:	50                   	push   eax
c001a167:	e8 5e 82 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a16c:	83 c4 10             	add    esp,0x10
c001a16f:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a174:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a17a:	83 ec 08             	sub    esp,0x8
c001a17d:	68 86 90 02 c0       	push   0xc0029086
c001a182:	50                   	push   eax
c001a183:	e8 88 82 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a188:	83 c4 10             	add    esp,0x10
c001a18b:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a190:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a196:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001a19b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a19d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a1a0:	83 c2 0c             	add    edx,0xc
c001a1a3:	83 ec 08             	sub    esp,0x8
c001a1a6:	52                   	push   edx
c001a1a7:	50                   	push   eax
c001a1a8:	e8 63 82 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a1ad:	83 c4 10             	add    esp,0x10
c001a1b0:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a1b5:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1bb:	83 ec 08             	sub    esp,0x8
c001a1be:	68 8f 90 02 c0       	push   0xc002908f
c001a1c3:	50                   	push   eax
c001a1c4:	e8 47 82 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a1c9:	83 c4 10             	add    esp,0x10
c001a1cc:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a1d1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a1db:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001a1de:	83 ec 08             	sub    esp,0x8
c001a1e1:	52                   	push   edx
c001a1e2:	50                   	push   eax
c001a1e3:	e8 e2 81 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a1e8:	83 c4 10             	add    esp,0x10
c001a1eb:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a1f0:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a1f6:	83 ec 08             	sub    esp,0x8
c001a1f9:	68 97 90 02 c0       	push   0xc0029097
c001a1fe:	50                   	push   eax
c001a1ff:	e8 0c 82 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a204:	83 c4 10             	add    esp,0x10
c001a207:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a20c:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a212:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a216:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001a219:	83 ec 08             	sub    esp,0x8
c001a21c:	52                   	push   edx
c001a21d:	50                   	push   eax
c001a21e:	e8 a7 81 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a223:	83 c4 10             	add    esp,0x10
c001a226:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a22b:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a231:	83 ec 08             	sub    esp,0x8
c001a234:	68 9f 90 02 c0       	push   0xc002909f
c001a239:	50                   	push   eax
c001a23a:	e8 d1 81 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a23f:	83 c4 10             	add    esp,0x10
c001a242:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a247:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a24d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a251:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001a254:	83 ec 08             	sub    esp,0x8
c001a257:	52                   	push   edx
c001a258:	50                   	push   eax
c001a259:	e8 6c 81 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a25e:	83 c4 10             	add    esp,0x10
c001a261:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a266:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a26c:	83 ec 08             	sub    esp,0x8
c001a26f:	68 a7 90 02 c0       	push   0xc00290a7
c001a274:	50                   	push   eax
c001a275:	e8 96 81 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a27a:	83 c4 10             	add    esp,0x10
c001a27d:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a282:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a288:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a28c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001a28f:	83 ec 08             	sub    esp,0x8
c001a292:	52                   	push   edx
c001a293:	50                   	push   eax
c001a294:	e8 31 81 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a299:	83 c4 10             	add    esp,0x10
c001a29c:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a2a1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2a7:	83 ec 08             	sub    esp,0x8
c001a2aa:	68 af 90 02 c0       	push   0xc00290af
c001a2af:	50                   	push   eax
c001a2b0:	e8 5b 81 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a2b5:	83 c4 10             	add    esp,0x10
c001a2b8:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a2bd:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2c7:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001a2ca:	83 ec 08             	sub    esp,0x8
c001a2cd:	52                   	push   edx
c001a2ce:	50                   	push   eax
c001a2cf:	e8 f6 80 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a2d4:	83 c4 10             	add    esp,0x10
c001a2d7:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a2dc:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2e2:	83 ec 08             	sub    esp,0x8
c001a2e5:	68 b7 90 02 c0       	push   0xc00290b7
c001a2ea:	50                   	push   eax
c001a2eb:	e8 20 81 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a2f0:	83 c4 10             	add    esp,0x10
c001a2f3:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a2f8:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a2fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a302:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a305:	83 ec 08             	sub    esp,0x8
c001a308:	52                   	push   edx
c001a309:	50                   	push   eax
c001a30a:	e8 bb 80 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a30f:	83 c4 10             	add    esp,0x10
c001a312:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a317:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a31d:	83 ec 08             	sub    esp,0x8
c001a320:	68 bf 90 02 c0       	push   0xc00290bf
c001a325:	50                   	push   eax
c001a326:	e8 e5 80 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a32b:	83 c4 10             	add    esp,0x10
c001a32e:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a333:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a339:	83 ec 08             	sub    esp,0x8
c001a33c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a340:	50                   	push   eax
c001a341:	e8 84 80 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a346:	83 c4 10             	add    esp,0x10
c001a349:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a34e:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a354:	83 ec 08             	sub    esp,0x8
c001a357:	68 c8 90 02 c0       	push   0xc00290c8
c001a35c:	50                   	push   eax
c001a35d:	e8 ae 80 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a36a:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a370:	83 ec 08             	sub    esp,0x8
c001a373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a377:	50                   	push   eax
c001a378:	e8 4d 80 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a37d:	83 c4 10             	add    esp,0x10
c001a380:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a385:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a38b:	83 ec 08             	sub    esp,0x8
c001a38e:	68 d0 90 02 c0       	push   0xc00290d0
c001a393:	50                   	push   eax
c001a394:	e8 77 80 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a399:	83 c4 10             	add    esp,0x10
c001a39c:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001a3a1:	8b 80 a6 05 00 00    	mov    eax,DWORD PTR [eax+0x5a6]
c001a3a7:	83 ec 08             	sub    esp,0x8
c001a3aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3ae:	50                   	push   eax
c001a3af:	e8 16 80 ff ff       	call   c00123ca <VgaText::putx(unsigned int)>
c001a3b4:	83 c4 10             	add    esp,0x10
c001a3b7:	fa                   	cli    
c001a3b8:	f4                   	hlt    
c001a3b9:	eb fe                	jmp    c001a3b9 <HalDisplayDebugInfo(void*)+0x38c>

c001a3bb <HalReceivedNMI()>:
c001a3bb:	83 ec 1c             	sub    esp,0x1c
c001a3be:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001a3c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3c9:	89 c2                	mov    edx,eax
c001a3cb:	ec                   	in     al,dx
c001a3cc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001a3d0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001a3d4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a3d8:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001a3df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3e3:	89 c2                	mov    edx,eax
c001a3e5:	ec                   	in     al,dx
c001a3e6:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a3ea:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001a3ee:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001a3f2:	83 ec 0c             	sub    esp,0xc
c001a3f5:	68 d8 90 02 c0       	push   0xc00290d8
c001a3fa:	e8 67 cb fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a3ff:	83 c4 10             	add    esp,0x10
c001a402:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a407:	83 e0 10             	and    eax,0x10
c001a40a:	74 10                	je     c001a41c <HalReceivedNMI()+0x61>
c001a40c:	83 ec 0c             	sub    esp,0xc
c001a40f:	68 e9 90 02 c0       	push   0xc00290e9
c001a414:	e8 bb 56 ff ff       	call   c000fad4 <KePanic(char const*)>
c001a419:	83 c4 10             	add    esp,0x10
c001a41c:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001a421:	83 e0 40             	and    eax,0x40
c001a424:	74 10                	je     c001a436 <HalReceivedNMI()+0x7b>
c001a426:	83 ec 0c             	sub    esp,0xc
c001a429:	68 f6 90 02 c0       	push   0xc00290f6
c001a42e:	e8 a1 56 ff ff       	call   c000fad4 <KePanic(char const*)>
c001a433:	83 c4 10             	add    esp,0x10
c001a436:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001a43a:	0f be c0             	movsx  eax,al
c001a43d:	85 c0                	test   eax,eax
c001a43f:	79 10                	jns    c001a451 <HalReceivedNMI()+0x96>
c001a441:	83 ec 0c             	sub    esp,0xc
c001a444:	68 00 91 02 c0       	push   0xc0029100
c001a449:	e8 86 56 ff ff       	call   c000fad4 <KePanic(char const*)>
c001a44e:	83 c4 10             	add    esp,0x10
c001a451:	90                   	nop
c001a452:	83 c4 1c             	add    esp,0x1c
c001a455:	c3                   	ret    

c001a456 <HalSystemIdle()>:
c001a456:	56                   	push   esi
c001a457:	53                   	push   ebx
c001a458:	83 ec 14             	sub    esp,0x14
c001a45b:	a0 50 14 03 c0       	mov    al,ds:0xc0031450
c001a460:	83 e0 10             	and    eax,0x10
c001a463:	0f b6 c0             	movzx  eax,al
c001a466:	85 c0                	test   eax,eax
c001a468:	74 43                	je     c001a4ad <HalSystemIdle()+0x57>
c001a46a:	83 ec 0c             	sub    esp,0xc
c001a46d:	68 e1 00 00 00       	push   0xe1
c001a472:	e8 ba f9 ff ff       	call   c0019e31 <x86rdmsr(unsigned int)>
c001a477:	83 c4 10             	add    esp,0x10
c001a47a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a47e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a482:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a486:	83 e0 02             	and    eax,0x2
c001a489:	89 c3                	mov    ebx,eax
c001a48b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a48f:	83 e0 00             	and    eax,0x0
c001a492:	89 c6                	mov    esi,eax
c001a494:	83 ec 04             	sub    esp,0x4
c001a497:	56                   	push   esi
c001a498:	53                   	push   ebx
c001a499:	68 e1 00 00 00       	push   0xe1
c001a49e:	e8 cc f9 ff ff       	call   c0019e6f <x86wrmsr(unsigned int, unsigned long long)>
c001a4a3:	83 c4 10             	add    esp,0x10
c001a4a6:	e8 e9 5c fe ff       	call   c0000194 <doTPAUSE>
c001a4ab:	eb 01                	jmp    c001a4ae <HalSystemIdle()+0x58>
c001a4ad:	f4                   	hlt    
c001a4ae:	90                   	nop
c001a4af:	83 c4 14             	add    esp,0x14
c001a4b2:	5b                   	pop    ebx
c001a4b3:	5e                   	pop    esi
c001a4b4:	c3                   	ret    

c001a4b5 <i386SaveCoprocessor(void*)>:
c001a4b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4b9:	83 c0 3f             	add    eax,0x3f
c001a4bc:	83 e0 c0             	and    eax,0xffffffc0
c001a4bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4c3:	ff 25 10 14 03 c0    	jmp    DWORD PTR ds:0xc0031410

c001a4c9 <i386LoadCoprocessor(void*)>:
c001a4c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4cd:	83 c0 3f             	add    eax,0x3f
c001a4d0:	83 e0 c0             	and    eax,0xffffffc0
c001a4d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4d7:	ff 25 0c 14 03 c0    	jmp    DWORD PTR ds:0xc003140c

c001a4dd <x87EmulHandler(regs*, void*)>:
c001a4dd:	53                   	push   ebx
c001a4de:	83 ec 08             	sub    esp,0x8
c001a4e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4e6:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001a4ea:	74 10                	je     c001a4fc <x87EmulHandler(regs*, void*)+0x1f>
c001a4ec:	83 ec 0c             	sub    esp,0xc
c001a4ef:	68 0d 91 02 c0       	push   0xc002910d
c001a4f4:	e8 db 55 ff ff       	call   c000fad4 <KePanic(char const*)>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	0f 20 c0             	mov    eax,cr0
c001a4ff:	a8 08                	test   al,0x8
c001a501:	74 59                	je     c001a55c <x87EmulHandler(regs*, void*)+0x7f>
c001a503:	0f 06                	clts   
c001a505:	a1 08 14 03 c0       	mov    eax,ds:0xc0031408
c001a50a:	85 c0                	test   eax,eax
c001a50c:	74 0e                	je     c001a51c <x87EmulHandler(regs*, void*)+0x3f>
c001a50e:	83 ec 0c             	sub    esp,0xc
c001a511:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a514:	e8 9c ff ff ff       	call   c001a4b5 <i386SaveCoprocessor(void*)>
c001a519:	83 c4 10             	add    esp,0x10
c001a51c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a522:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c001a526:	75 12                	jne    c001a53a <x87EmulHandler(regs*, void*)+0x5d>
c001a528:	83 ec 0c             	sub    esp,0xc
c001a52b:	68 40 02 00 00       	push   0x240
c001a530:	e8 4b 51 ff ff       	call   c000f680 <malloc>
c001a535:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c001a538:	eb 10                	jmp    c001a54a <x87EmulHandler(regs*, void*)+0x6d>
c001a53a:	a1 08 14 03 c0       	mov    eax,ds:0xc0031408
c001a53f:	83 ec 0c             	sub    esp,0xc
c001a542:	ff 70 59             	push   DWORD PTR [eax+0x59]
c001a545:	e8 7f ff ff ff       	call   c001a4c9 <i386LoadCoprocessor(void*)>
c001a54a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a54f:	83 c4 10             	add    esp,0x10
c001a552:	a3 08 14 03 c0       	mov    ds:0xc0031408,eax
c001a557:	83 c4 08             	add    esp,0x8
c001a55a:	5b                   	pop    ebx
c001a55b:	c3                   	ret    
c001a55c:	83 ec 0c             	sub    esp,0xc
c001a55f:	68 21 91 02 c0       	push   0xc0029121
c001a564:	e8 fd c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a569:	c7 44 24 20 01 00 00 00 	mov    DWORD PTR [esp+0x20],0x1
c001a571:	83 c4 18             	add    esp,0x18
c001a574:	5b                   	pop    ebx
c001a575:	e9 c6 c8 ff ff       	jmp    c0016e40 <KeTerminateCurrentThread(int)>

c001a57a <HalInitialiseCoprocessor()>:
c001a57a:	83 ec 10             	sub    esp,0x10
c001a57d:	6a 00                	push   0x0
c001a57f:	68 dd a4 01 c0       	push   0xc001a4dd
c001a584:	6a 07                	push   0x7
c001a586:	c7 05 08 14 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031408,0x0
c001a590:	e8 de 07 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a595:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a59a:	83 c4 10             	add    esp,0x10
c001a59d:	a8 80                	test   al,0x80
c001a59f:	74 1c                	je     c001a5bd <HalInitialiseCoprocessor()+0x43>
c001a5a1:	c7 05 10 14 03 c0 58 19 02 c0 	mov    DWORD PTR ds:0xc0031410,0xc0021958
c001a5ab:	c7 05 0c 14 03 c0 60 19 02 c0 	mov    DWORD PTR ds:0xc003140c,0xc0021960
c001a5b5:	83 c4 0c             	add    esp,0xc
c001a5b8:	e9 ab 73 00 00       	jmp    c0021968 <sseInit>
c001a5bd:	a8 10                	test   al,0x10
c001a5bf:	74 1c                	je     c001a5dd <HalInitialiseCoprocessor()+0x63>
c001a5c1:	c7 05 10 14 03 c0 a7 19 02 c0 	mov    DWORD PTR ds:0xc0031410,0xc00219a7
c001a5cb:	c7 05 0c 14 03 c0 ae 19 02 c0 	mov    DWORD PTR ds:0xc003140c,0xc00219ae
c001a5d5:	83 c4 0c             	add    esp,0xc
c001a5d8:	e9 d8 73 00 00       	jmp    c00219b5 <x87Init>
c001a5dd:	c7 05 10 14 03 c0 02 8d 01 c0 	mov    DWORD PTR ds:0xc0031410,0xc0018d02
c001a5e7:	c7 05 0c 14 03 c0 02 8d 01 c0 	mov    DWORD PTR ds:0xc003140c,0xc0018d02
c001a5f1:	0f 20 c0             	mov    eax,cr0
c001a5f4:	83 c8 04             	or     eax,0x4
c001a5f7:	0f 22 c0             	mov    cr0,eax
c001a5fa:	83 c4 0c             	add    esp,0xc
c001a5fd:	c3                   	ret    

c001a5fe <HalPanic(char const*)>:
c001a5fe:	53                   	push   ebx
c001a5ff:	83 ec 10             	sub    esp,0x10
c001a602:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a606:	fa                   	cli    
c001a607:	53                   	push   ebx
c001a608:	68 37 91 02 c0       	push   0xc0029137
c001a60d:	e8 54 c9 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001a612:	a1 04 14 03 c0       	mov    eax,ds:0xc0031404
c001a617:	83 c4 10             	add    esp,0x10
c001a61a:	85 c0                	test   eax,eax
c001a61c:	74 09                	je     c001a627 <HalPanic(char const*)+0x29>
c001a61e:	83 ec 0c             	sub    esp,0xc
c001a621:	53                   	push   ebx
c001a622:	ff d0                	call   eax
c001a624:	83 c4 10             	add    esp,0x10
c001a627:	a1 f4 11 03 c0       	mov    eax,ds:0xc00311f4
c001a62c:	85 c0                	test   eax,eax
c001a62e:	0f 84 dc 00 00 00    	je     c001a710 <HalPanic(char const*)+0x112>
c001a634:	52                   	push   edx
c001a635:	6a 01                	push   0x1
c001a637:	6a 0f                	push   0xf
c001a639:	50                   	push   eax
c001a63a:	e8 d3 78 ff ff       	call   c0011f12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a63f:	59                   	pop    ecx
c001a640:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a646:	e8 d3 7a ff ff       	call   c001211e <VgaText::clearScreen()>
c001a64b:	58                   	pop    eax
c001a64c:	5a                   	pop    edx
c001a64d:	68 2d 81 02 c0       	push   0xc002812d
c001a652:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a658:	e8 ed 78 ff ff       	call   c0011f4a <VgaText::setTitle(char*)>
c001a65d:	83 c4 0c             	add    esp,0xc
c001a660:	6a 01                	push   0x1
c001a662:	6a 0f                	push   0xf
c001a664:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a66a:	e8 a3 78 ff ff       	call   c0011f12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a66f:	59                   	pop    ecx
c001a670:	58                   	pop    eax
c001a671:	68 50 91 02 c0       	push   0xc0029150
c001a676:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a67c:	e8 8f 7d ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a681:	83 c4 0c             	add    esp,0xc
c001a684:	6a 0f                	push   0xf
c001a686:	6a 01                	push   0x1
c001a688:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a68e:	e8 7f 78 ff ff       	call   c0011f12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a693:	58                   	pop    eax
c001a694:	5a                   	pop    edx
c001a695:	68 59 91 02 c0       	push   0xc0029159
c001a69a:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a6a0:	e8 6b 7d ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a6a5:	83 c4 0c             	add    esp,0xc
c001a6a8:	6a 01                	push   0x1
c001a6aa:	6a 0f                	push   0xf
c001a6ac:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a6b2:	e8 5b 78 ff ff       	call   c0011f12 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6b7:	59                   	pop    ecx
c001a6b8:	58                   	pop    eax
c001a6b9:	68 9d 91 02 c0       	push   0xc002919d
c001a6be:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a6c4:	e8 47 7d ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a6c9:	58                   	pop    eax
c001a6ca:	5a                   	pop    edx
c001a6cb:	68 66 91 02 c0       	push   0xc0029166
c001a6d0:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a6d6:	e8 35 7d ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a6db:	59                   	pop    ecx
c001a6dc:	58                   	pop    eax
c001a6dd:	68 a0 91 02 c0       	push   0xc00291a0
c001a6e2:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a6e8:	e8 23 7d ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a6ed:	58                   	pop    eax
c001a6ee:	5a                   	pop    edx
c001a6ef:	53                   	push   ebx
c001a6f0:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a6f6:	e8 15 7d ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a6fb:	59                   	pop    ecx
c001a6fc:	5b                   	pop    ebx
c001a6fd:	68 9d 91 02 c0       	push   0xc002919d
c001a702:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c001a708:	e8 03 7d ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001a70d:	83 c4 10             	add    esp,0x10
c001a710:	eb fe                	jmp    c001a710 <HalPanic(char const*)+0x112>

c001a712 <HalQueryPerformanceCounter()>:
c001a712:	31 c0                	xor    eax,eax
c001a714:	31 d2                	xor    edx,edx
c001a716:	f6 05 4e 14 03 c0 08 	test   BYTE PTR ds:0xc003144e,0x8
c001a71d:	75 02                	jne    c001a721 <HalQueryPerformanceCounter()+0xf>
c001a71f:	0f 31                	rdtsc  
c001a721:	c3                   	ret    

c001a722 <HalInitialise()>:
c001a722:	53                   	push   ebx
c001a723:	83 ec 08             	sub    esp,0x8
c001a726:	e8 ef e8 ff ff       	call   c001901a <HalDetectFeatures()>
c001a72b:	83 ec 0c             	sub    esp,0xc
c001a72e:	68 03 8d 01 c0       	push   0xc0018d03
c001a733:	e8 d6 5c ff ff       	call   c001040e <KeRegisterRestartHandler(void (*)())>
c001a738:	c7 04 24 0e 8d 01 c0 	mov    DWORD PTR [esp],0xc0018d0e
c001a73f:	e8 c0 5c ff ff       	call   c0010404 <KeRegisterShutdownHandler(void (*)())>
c001a744:	c7 04 24 0f 8d 01 c0 	mov    DWORD PTR [esp],0xc0018d0f
c001a74b:	e8 c8 5c ff ff       	call   c0010418 <KeRegisterSleepHandler(void (*)())>
c001a750:	e8 1f 1c ff ff       	call   c000c374 <scanMADT()>
c001a755:	83 c4 10             	add    esp,0x10
c001a758:	80 3d 40 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e40,0x0
c001a75f:	75 0d                	jne    c001a76e <HalInitialise()+0x4c>
c001a761:	a0 4c 14 03 c0       	mov    al,ds:0xc003144c
c001a766:	83 e0 fe             	and    eax,0xfffffffe
c001a769:	a2 4c 14 03 c0       	mov    ds:0xc003144c,al
c001a76e:	e8 e5 08 00 00       	call   c001b058 <picOpen()>
c001a773:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001a77a:	74 0a                	je     c001a786 <HalInitialise()+0x64>
c001a77c:	e8 27 08 00 00       	call   c001afa8 <picDisable()>
c001a781:	e8 84 e1 ff ff       	call   c001890a <apicOpen()>
c001a786:	50                   	push   eax
c001a787:	bb 0f 00 00 00       	mov    ebx,0xf
c001a78c:	6a 00                	push   0x0
c001a78e:	68 a8 e7 00 c0       	push   0xc000e7a8
c001a793:	6a 02                	push   0x2
c001a795:	e8 d9 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a79a:	83 c4 0c             	add    esp,0xc
c001a79d:	6a 00                	push   0x0
c001a79f:	68 20 e7 00 c0       	push   0xc000e720
c001a7a4:	6a 06                	push   0x6
c001a7a6:	e8 c8 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a7ab:	83 c4 0c             	add    esp,0xc
c001a7ae:	6a 00                	push   0x0
c001a7b0:	68 b8 e7 00 c0       	push   0xc000e7b8
c001a7b5:	6a 08                	push   0x8
c001a7b7:	e8 b7 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a7bc:	83 c4 0c             	add    esp,0xc
c001a7bf:	6a 00                	push   0x0
c001a7c1:	68 78 e6 00 c0       	push   0xc000e678
c001a7c6:	6a 0d                	push   0xd
c001a7c8:	e8 a6 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a7cd:	83 c4 0c             	add    esp,0xc
c001a7d0:	6a 00                	push   0x0
c001a7d2:	68 cc e6 00 c0       	push   0xc000e6cc
c001a7d7:	6a 0e                	push   0xe
c001a7d9:	e8 95 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a7de:	83 c4 0c             	add    esp,0xc
c001a7e1:	6a 00                	push   0x0
c001a7e3:	68 74 e7 00 c0       	push   0xc000e774
c001a7e8:	6a 00                	push   0x0
c001a7ea:	e8 84 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a7ef:	83 c4 0c             	add    esp,0xc
c001a7f2:	6a 00                	push   0x0
c001a7f4:	68 74 e7 00 c0       	push   0xc000e774
c001a7f9:	6a 01                	push   0x1
c001a7fb:	e8 73 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a800:	83 c4 0c             	add    esp,0xc
c001a803:	6a 00                	push   0x0
c001a805:	68 74 e7 00 c0       	push   0xc000e774
c001a80a:	6a 03                	push   0x3
c001a80c:	e8 62 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a811:	83 c4 0c             	add    esp,0xc
c001a814:	6a 00                	push   0x0
c001a816:	68 74 e7 00 c0       	push   0xc000e774
c001a81b:	6a 04                	push   0x4
c001a81d:	e8 51 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a822:	83 c4 0c             	add    esp,0xc
c001a825:	6a 00                	push   0x0
c001a827:	68 74 e7 00 c0       	push   0xc000e774
c001a82c:	6a 05                	push   0x5
c001a82e:	e8 40 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a833:	83 c4 0c             	add    esp,0xc
c001a836:	6a 00                	push   0x0
c001a838:	68 74 e7 00 c0       	push   0xc000e774
c001a83d:	6a 00                	push   0x0
c001a83f:	e8 2f 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a844:	83 c4 0c             	add    esp,0xc
c001a847:	6a 00                	push   0x0
c001a849:	68 74 e7 00 c0       	push   0xc000e774
c001a84e:	6a 01                	push   0x1
c001a850:	e8 1e 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a855:	83 c4 0c             	add    esp,0xc
c001a858:	6a 00                	push   0x0
c001a85a:	68 74 e7 00 c0       	push   0xc000e774
c001a85f:	6a 09                	push   0x9
c001a861:	e8 0d 05 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a866:	83 c4 0c             	add    esp,0xc
c001a869:	6a 00                	push   0x0
c001a86b:	68 74 e7 00 c0       	push   0xc000e774
c001a870:	6a 0a                	push   0xa
c001a872:	e8 fc 04 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a877:	83 c4 0c             	add    esp,0xc
c001a87a:	6a 00                	push   0x0
c001a87c:	68 74 e7 00 c0       	push   0xc000e774
c001a881:	6a 0b                	push   0xb
c001a883:	e8 eb 04 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a888:	83 c4 10             	add    esp,0x10
c001a88b:	50                   	push   eax
c001a88c:	6a 00                	push   0x0
c001a88e:	68 74 e7 00 c0       	push   0xc000e774
c001a893:	53                   	push   ebx
c001a894:	43                   	inc    ebx
c001a895:	e8 d9 04 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a89a:	83 c4 10             	add    esp,0x10
c001a89d:	83 fb 1e             	cmp    ebx,0x1e
c001a8a0:	75 e9                	jne    c001a88b <HalInitialise()+0x169>
c001a8a2:	50                   	push   eax
c001a8a3:	6a 00                	push   0x0
c001a8a5:	68 ac 1d 01 c0       	push   0xc0011dac
c001a8aa:	6a 60                	push   0x60
c001a8ac:	e8 c2 04 00 00       	call   c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a8b1:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c001a8b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a8c0:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a8c7:	e8 b4 4d ff ff       	call   c000f680 <malloc>
c001a8cc:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8cf:	89 c3                	mov    ebx,eax
c001a8d1:	e8 ea 0e 00 00       	call   c001b7c0 <RTC::RTC()>
c001a8d6:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a8e0:	5a                   	pop    edx
c001a8e1:	59                   	pop    ecx
c001a8e2:	53                   	push   ebx
c001a8e3:	ff 35 08 11 03 c0    	push   DWORD PTR ds:0xc0031108
c001a8e9:	e8 08 f1 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001a8ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8f0:	6a 00                	push   0x0
c001a8f2:	6a 00                	push   0x0
c001a8f4:	6a 00                	push   0x0
c001a8f6:	53                   	push   ebx
c001a8f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8fa:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c001a8ff:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
c001a905:	83 c4 28             	add    esp,0x28
c001a908:	5b                   	pop    ebx
c001a909:	c3                   	ret    

c001a90a <HalMakeBeep(int)>:
c001a90a:	53                   	push   ebx
c001a90b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a90f:	85 db                	test   ebx,ebx
c001a911:	75 07                	jne    c001a91a <HalMakeBeep(int)+0x10>
c001a913:	e4 61                	in     al,0x61
c001a915:	83 e0 fc             	and    eax,0xfffffffc
c001a918:	eb 26                	jmp    c001a940 <HalMakeBeep(int)+0x36>
c001a91a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a91f:	99                   	cdq    
c001a920:	f7 fb                	idiv   ebx
c001a922:	89 c1                	mov    ecx,eax
c001a924:	b0 b6                	mov    al,0xb6
c001a926:	e6 43                	out    0x43,al
c001a928:	88 c8                	mov    al,cl
c001a92a:	e6 42                	out    0x42,al
c001a92c:	89 c8                	mov    eax,ecx
c001a92e:	c1 e8 08             	shr    eax,0x8
c001a931:	e6 42                	out    0x42,al
c001a933:	e4 61                	in     al,0x61
c001a935:	89 c2                	mov    edx,eax
c001a937:	83 ca 03             	or     edx,0x3
c001a93a:	38 d0                	cmp    al,dl
c001a93c:	74 04                	je     c001a942 <HalMakeBeep(int)+0x38>
c001a93e:	88 d0                	mov    al,dl
c001a940:	e6 61                	out    0x61,al
c001a942:	5b                   	pop    ebx
c001a943:	c3                   	ret    

c001a944 <HalGetRand()>:
c001a944:	31 c0                	xor    eax,eax
c001a946:	c3                   	ret    

c001a947 <HalEndOfInterrupt(int)>:
c001a947:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001a94e:	74 1d                	je     c001a96d <HalEndOfInterrupt(int)+0x26>
c001a950:	83 ec 18             	sub    esp,0x18
c001a953:	6a 1b                	push   0x1b
c001a955:	e8 d7 f4 ff ff       	call   c0019e31 <x86rdmsr(unsigned int)>
c001a95a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a95f:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a969:	83 c4 1c             	add    esp,0x1c
c001a96c:	c3                   	ret    
c001a96d:	e9 6a 08 00 00       	jmp    c001b1dc <picEOI(int)>

c001a972 <CPU::CPU()>:
c001a972:	83 ec 0c             	sub    esp,0xc
c001a975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a979:	83 ec 08             	sub    esp,0x8
c001a97c:	68 3e 8f 02 c0       	push   0xc0028f3e
c001a981:	50                   	push   eax
c001a982:	e8 d1 f1 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001a987:	83 c4 10             	add    esp,0x10
c001a98a:	ba 3c 92 02 c0       	mov    edx,0xc002923c
c001a98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a993:	89 10                	mov    DWORD PTR [eax],edx
c001a995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a999:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9a7:	05 64 01 00 00       	add    eax,0x164
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	50                   	push   eax
c001a9b0:	e8 55 3e ff ff       	call   c000e80a <GDT::GDT()>
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9bc:	05 68 09 00 00       	add    eax,0x968
c001a9c1:	83 ec 0c             	sub    esp,0xc
c001a9c4:	50                   	push   eax
c001a9c5:	e8 92 40 ff ff       	call   c000ea5c <IDT::IDT()>
c001a9ca:	83 c4 10             	add    esp,0x10
c001a9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9d1:	05 68 11 00 00       	add    eax,0x1168
c001a9d6:	83 ec 0c             	sub    esp,0xc
c001a9d9:	50                   	push   eax
c001a9da:	e8 ed 7e ff ff       	call   c00128cc <TSS::TSS()>
c001a9df:	83 c4 10             	add    esp,0x10
c001a9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e6:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a9f0:	90                   	nop
c001a9f1:	83 c4 0c             	add    esp,0xc
c001a9f4:	c3                   	ret    
c001a9f5:	90                   	nop

c001a9f6 <CPU::setupSMEP()>:
c001a9f6:	0f 20 e0             	mov    eax,cr4
c001a9f9:	0d 00 00 10 00       	or     eax,0x100000
c001a9fe:	0f 22 e0             	mov    cr4,eax
c001aa01:	c3                   	ret    

c001aa02 <CPU::setupUMIP()>:
c001aa02:	0f 20 e0             	mov    eax,cr4
c001aa05:	80 cc 08             	or     ah,0x8
c001aa08:	0f 22 e0             	mov    cr4,eax
c001aa0b:	c3                   	ret    

c001aa0c <CPU::setupTSC()>:
c001aa0c:	0f 20 e0             	mov    eax,cr4
c001aa0f:	83 c8 04             	or     eax,0x4
c001aa12:	0f 22 e0             	mov    cr4,eax
c001aa15:	c3                   	ret    

c001aa16 <CPU::setupLargePages()>:
c001aa16:	0f 20 e0             	mov    eax,cr4
c001aa19:	83 c8 10             	or     eax,0x10
c001aa1c:	0f 22 e0             	mov    cr4,eax
c001aa1f:	c3                   	ret    

c001aa20 <CPU::setupPAT()>:
c001aa20:	f6 05 4c 14 03 c0 08 	test   BYTE PTR ds:0xc003144c,0x8
c001aa27:	74 28                	je     c001aa51 <CPU::setupPAT()+0x31>
c001aa29:	53                   	push   ebx
c001aa2a:	83 ec 14             	sub    esp,0x14
c001aa2d:	68 77 02 00 00       	push   0x277
c001aa32:	e8 fa f3 ff ff       	call   c0019e31 <x86rdmsr(unsigned int)>
c001aa37:	83 c4 0c             	add    esp,0xc
c001aa3a:	83 e2 f8             	and    edx,0xfffffff8
c001aa3d:	83 ca 01             	or     edx,0x1
c001aa40:	52                   	push   edx
c001aa41:	50                   	push   eax
c001aa42:	68 77 02 00 00       	push   0x277
c001aa47:	e8 23 f4 ff ff       	call   c0019e6f <x86wrmsr(unsigned int, unsigned long long)>
c001aa4c:	83 c4 18             	add    esp,0x18
c001aa4f:	5b                   	pop    ebx
c001aa50:	c3                   	ret    
c001aa51:	c3                   	ret    

c001aa52 <CPU::setupMTRR()>:
c001aa52:	c3                   	ret    
c001aa53:	90                   	nop

c001aa54 <CPU::setupGlobalPages()>:
c001aa54:	0f 20 e0             	mov    eax,cr4
c001aa57:	0c 80                	or     al,0x80
c001aa59:	0f 22 e0             	mov    cr4,eax
c001aa5c:	c3                   	ret    
c001aa5d:	90                   	nop

c001aa5e <CPU::allowUsermodeDataAccess()>:
c001aa5e:	f6 05 4f 14 03 c0 40 	test   BYTE PTR ds:0xc003144f,0x40
c001aa65:	74 03                	je     c001aa6a <CPU::allowUsermodeDataAccess()+0xc>
c001aa67:	0f 01 cb             	stac   
c001aa6a:	c3                   	ret    
c001aa6b:	90                   	nop

c001aa6c <CPU::prohibitUsermodeDataAccess()>:
c001aa6c:	f6 05 4f 14 03 c0 40 	test   BYTE PTR ds:0xc003144f,0x40
c001aa73:	74 03                	je     c001aa78 <CPU::prohibitUsermodeDataAccess()+0xc>
c001aa75:	0f 01 ca             	clac   
c001aa78:	c3                   	ret    
c001aa79:	90                   	nop

c001aa7a <CPU::setupSMAP()>:
c001aa7a:	0f 20 e0             	mov    eax,cr4
c001aa7d:	0d 00 00 20 00       	or     eax,0x200000
c001aa82:	0f 22 e0             	mov    cr4,eax
c001aa85:	eb e5                	jmp    c001aa6c <CPU::prohibitUsermodeDataAccess()>
c001aa87:	90                   	nop

c001aa88 <CPU::setupFeatures()>:
c001aa88:	53                   	push   ebx
c001aa89:	83 ec 08             	sub    esp,0x8
c001aa8c:	f6 05 4f 14 03 c0 20 	test   BYTE PTR ds:0xc003144f,0x20
c001aa93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa97:	74 18                	je     c001aab1 <CPU::setupFeatures()+0x29>
c001aa99:	83 ec 0c             	sub    esp,0xc
c001aa9c:	68 ab 91 02 c0       	push   0xc00291ab
c001aaa1:	e8 c0 c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aaa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaa9:	e8 54 ff ff ff       	call   c001aa02 <CPU::setupUMIP()>
c001aaae:	83 c4 10             	add    esp,0x10
c001aab1:	f6 05 4e 14 03 c0 08 	test   BYTE PTR ds:0xc003144e,0x8
c001aab8:	74 18                	je     c001aad2 <CPU::setupFeatures()+0x4a>
c001aaba:	83 ec 0c             	sub    esp,0xc
c001aabd:	68 b5 91 02 c0       	push   0xc00291b5
c001aac2:	e8 9f c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aac7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaca:	e8 3d ff ff ff       	call   c001aa0c <CPU::setupTSC()>
c001aacf:	83 c4 10             	add    esp,0x10
c001aad2:	f6 05 4e 14 03 c0 20 	test   BYTE PTR ds:0xc003144e,0x20
c001aad9:	74 18                	je     c001aaf3 <CPU::setupFeatures()+0x6b>
c001aadb:	83 ec 0c             	sub    esp,0xc
c001aade:	68 be 91 02 c0       	push   0xc00291be
c001aae3:	e8 7e c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001aae8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aaeb:	e8 26 ff ff ff       	call   c001aa16 <CPU::setupLargePages()>
c001aaf0:	83 c4 10             	add    esp,0x10
c001aaf3:	f6 05 4e 14 03 c0 40 	test   BYTE PTR ds:0xc003144e,0x40
c001aafa:	74 18                	je     c001ab14 <CPU::setupFeatures()+0x8c>
c001aafc:	83 ec 0c             	sub    esp,0xc
c001aaff:	68 c7 91 02 c0       	push   0xc00291c7
c001ab04:	e8 5d c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab0c:	e8 43 ff ff ff       	call   c001aa54 <CPU::setupGlobalPages()>
c001ab11:	83 c4 10             	add    esp,0x10
c001ab14:	f6 05 4e 14 03 c0 80 	test   BYTE PTR ds:0xc003144e,0x80
c001ab1b:	74 18                	je     c001ab35 <CPU::setupFeatures()+0xad>
c001ab1d:	83 ec 0c             	sub    esp,0xc
c001ab20:	68 d9 91 02 c0       	push   0xc00291d9
c001ab25:	e8 3c c4 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab2d:	e8 ee fe ff ff       	call   c001aa20 <CPU::setupPAT()>
c001ab32:	83 c4 10             	add    esp,0x10
c001ab35:	f6 05 50 14 03 c0 04 	test   BYTE PTR ds:0xc0031450,0x4
c001ab3c:	74 11                	je     c001ab4f <CPU::setupFeatures()+0xc7>
c001ab3e:	c7 44 24 10 e2 91 02 c0 	mov    DWORD PTR [esp+0x10],0xc00291e2
c001ab46:	83 c4 08             	add    esp,0x8
c001ab49:	5b                   	pop    ebx
c001ab4a:	e9 17 c4 fe ff       	jmp    c0006f66 <Dbg::kprintf(char const*, ...)>
c001ab4f:	83 c4 08             	add    esp,0x8
c001ab52:	5b                   	pop    ebx
c001ab53:	c3                   	ret    

c001ab54 <CPU::open(int, int, void*)>:
c001ab54:	55                   	push   ebp
c001ab55:	57                   	push   edi
c001ab56:	56                   	push   esi
c001ab57:	53                   	push   ebx
c001ab58:	83 ec 18             	sub    esp,0x18
c001ab5b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ab5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab63:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ab67:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001ab6d:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001ab73:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001ab79:	50                   	push   eax
c001ab7a:	e8 ed 3c ff ff       	call   c000e86c <GDT::setup()>
c001ab7f:	83 c4 0c             	add    esp,0xc
c001ab82:	6a 00                	push   0x0
c001ab84:	68 ef be ad de       	push   0xdeadbeef
c001ab89:	55                   	push   ebp
c001ab8a:	e8 81 7d ff ff       	call   c0012910 <TSS::setup(unsigned long, unsigned long)>
c001ab8f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ab92:	e8 59 7d ff ff       	call   c00128f0 <TSS::flush()>
c001ab97:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001ab9d:	89 04 24             	mov    DWORD PTR [esp],eax
c001aba0:	e8 2d 3f ff ff       	call   c000ead2 <IDT::setup()>
c001aba5:	b8 00 04 00 00       	mov    eax,0x400
c001abaa:	0f 23 f8             	mov    dr7,eax
c001abad:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001abb7:	e8 12 51 ff ff       	call   c000fcce <Phys::allocatePage()>
c001abbc:	83 c4 10             	add    esp,0x10
c001abbf:	85 f6                	test   esi,esi
c001abc1:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001abc7:	89 38                	mov    DWORD PTR [eax],edi
c001abc9:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001abcf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001abd2:	74 10                	je     c001abe4 <CPU::open(int, int, void*)+0x90>
c001abd4:	50                   	push   eax
c001abd5:	50                   	push   eax
c001abd6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001abdc:	56                   	push   esi
c001abdd:	e8 d0 86 ff ff       	call   c00132b2 <VAS::setCPUSpecific(unsigned long)>
c001abe2:	eb 0d                	jmp    c001abf1 <CPU::open(int, int, void*)+0x9d>
c001abe4:	83 ec 0c             	sub    esp,0xc
c001abe7:	68 ec 91 02 c0       	push   0xc00291ec
c001abec:	e8 e3 4e ff ff       	call   c000fad4 <KePanic(char const*)>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	83 ec 0c             	sub    esp,0xc
c001abf7:	68 fa 91 02 c0       	push   0xc00291fa
c001abfc:	e8 dc 25 ff ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001ac01:	e8 1c fb ff ff       	call   c001a722 <HalInitialise()>
c001ac06:	c7 04 24 10 00 00 00 	mov    DWORD PTR [esp],0x10
c001ac0d:	e8 7e 25 ff ff       	call   c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ac12:	0f b6 c0             	movzx  eax,al
c001ac15:	83 f8 01             	cmp    eax,0x1
c001ac18:	19 c0                	sbb    eax,eax
c001ac1a:	83 e0 46             	and    eax,0x46
c001ac1d:	83 c0 1e             	add    eax,0x1e
c001ac20:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac23:	e8 35 04 ff ff       	call   c000b05d <setupTimer(int)>
c001ac28:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001ac2e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001ac35:	e8 56 25 ff ff       	call   c000d190 <KeGetBootConfigurationFlag(BootConfigurationFlag)>
c001ac3a:	83 c4 10             	add    esp,0x10
c001ac3d:	84 c0                	test   al,al
c001ac3f:	74 0c                	je     c001ac4d <CPU::open(int, int, void*)+0xf9>
c001ac41:	83 ec 0c             	sub    esp,0xc
c001ac44:	53                   	push   ebx
c001ac45:	e8 3e fe ff ff       	call   c001aa88 <CPU::setupFeatures()>
c001ac4a:	83 c4 10             	add    esp,0x10
c001ac4d:	83 c4 0c             	add    esp,0xc
c001ac50:	31 c0                	xor    eax,eax
c001ac52:	5b                   	pop    ebx
c001ac53:	5e                   	pop    esi
c001ac54:	5f                   	pop    edi
c001ac55:	5d                   	pop    ebp
c001ac56:	c3                   	ret    

c001ac57 <convertLegacyIRQNumber(int)>:
c001ac57:	83 ec 0c             	sub    esp,0xc
c001ac5a:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001ac61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac65:	74 0c                	je     c001ac73 <convertLegacyIRQNumber(int)+0x1c>
c001ac67:	83 f8 0f             	cmp    eax,0xf
c001ac6a:	7f 0b                	jg     c001ac77 <convertLegacyIRQNumber(int)+0x20>
c001ac6c:	0f b6 80 68 ac 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5398]
c001ac73:	83 c4 0c             	add    esp,0xc
c001ac76:	c3                   	ret    
c001ac77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac7b:	83 ec 0c             	sub    esp,0xc
c001ac7e:	68 60 92 02 c0       	push   0xc0029260
c001ac83:	e8 4c 4e ff ff       	call   c000fad4 <KePanic(char const*)>
c001ac88:	83 c4 10             	add    esp,0x10
c001ac8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8f:	83 c4 0c             	add    esp,0xc
c001ac92:	c3                   	ret    

c001ac93 <KeSetupInterrupts()>:
c001ac93:	31 c0                	xor    eax,eax
c001ac95:	c7 80 60 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba0],0x0
c001ac9f:	83 c0 10             	add    eax,0x10
c001aca2:	c7 80 50 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcebb0],0x0
c001acac:	c7 80 54 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdbac],0x0
c001acb6:	c7 80 54 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcebac],0x0
c001acc0:	c7 80 58 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba8],0x0
c001acca:	c7 80 58 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceba8],0x0
c001acd4:	c7 80 5c 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba4],0x0
c001acde:	c7 80 5c 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceba4],0x0
c001ace8:	3d 00 10 00 00       	cmp    eax,0x1000
c001aced:	75 a6                	jne    c001ac95 <KeSetupInterrupts()+0x2>
c001acef:	c3                   	ret    

c001acf0 <int_handler>:
c001acf0:	55                   	push   ebp
c001acf1:	57                   	push   edi
c001acf2:	56                   	push   esi
c001acf3:	53                   	push   ebx
c001acf4:	83 ec 0c             	sub    esp,0xc
c001acf7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001acfb:	eb 02                	jmp    c001acff <int_handler+0xf>
c001acfd:	fa                   	cli    
c001acfe:	f4                   	hlt    
c001acff:	e8 ca 4d ff ff       	call   c000face <KeIsKernelInPanic()>
c001ad04:	84 c0                	test   al,al
c001ad06:	75 f5                	jne    c001acfd <int_handler+0xd>
c001ad08:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001ad0b:	8d 46 e0             	lea    eax,[esi-0x20]
c001ad0e:	83 f8 17             	cmp    eax,0x17
c001ad11:	76 40                	jbe    c001ad53 <int_handler+0x63>
c001ad13:	c1 e6 04             	shl    esi,0x4
c001ad16:	31 db                	xor    ebx,ebx
c001ad18:	8d ae 60 24 03 c0    	lea    ebp,[esi-0x3ffcdba0]
c001ad1e:	81 c6 60 14 03 c0    	add    esi,0xc0031460
c001ad24:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001ad28:	85 c0                	test   eax,eax
c001ad2a:	74 13                	je     c001ad3f <int_handler+0x4f>
c001ad2c:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001ad30:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001ad33:	74 2c                	je     c001ad61 <int_handler+0x71>
c001ad35:	83 ec 08             	sub    esp,0x8
c001ad38:	52                   	push   edx
c001ad39:	57                   	push   edi
c001ad3a:	ff d0                	call   eax
c001ad3c:	83 c4 10             	add    esp,0x10
c001ad3f:	83 c3 01             	add    ebx,0x1
c001ad42:	83 fb 04             	cmp    ebx,0x4
c001ad45:	75 dd                	jne    c001ad24 <int_handler+0x34>
c001ad47:	83 c4 0c             	add    esp,0xc
c001ad4a:	31 c0                	xor    eax,eax
c001ad4c:	5b                   	pop    ebx
c001ad4d:	31 d2                	xor    edx,edx
c001ad4f:	5e                   	pop    esi
c001ad50:	5f                   	pop    edi
c001ad51:	5d                   	pop    ebp
c001ad52:	c3                   	ret    
c001ad53:	83 ec 0c             	sub    esp,0xc
c001ad56:	50                   	push   eax
c001ad57:	e8 eb fb ff ff       	call   c001a947 <HalEndOfInterrupt(int)>
c001ad5c:	83 c4 10             	add    esp,0x10
c001ad5f:	eb b2                	jmp    c001ad13 <int_handler+0x23>
c001ad61:	83 ec 08             	sub    esp,0x8
c001ad64:	52                   	push   edx
c001ad65:	57                   	push   edi
c001ad66:	ff d0                	call   eax
c001ad68:	83 c4 10             	add    esp,0x10
c001ad6b:	83 c4 0c             	add    esp,0xc
c001ad6e:	5b                   	pop    ebx
c001ad6f:	5e                   	pop    esi
c001ad70:	5f                   	pop    edi
c001ad71:	5d                   	pop    ebp
c001ad72:	c3                   	ret    

c001ad73 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001ad73:	56                   	push   esi
c001ad74:	31 c0                	xor    eax,eax
c001ad76:	53                   	push   ebx
c001ad77:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad7f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ad83:	89 ca                	mov    edx,ecx
c001ad85:	c1 e2 04             	shl    edx,0x4
c001ad88:	83 bc 82 60 24 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffcdba0],0x0
c001ad90:	74 17                	je     c001ada9 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001ad92:	83 c0 01             	add    eax,0x1
c001ad95:	83 f8 04             	cmp    eax,0x4
c001ad98:	75 ee                	jne    c001ad88 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001ad9a:	c7 44 24 0c c1 92 02 c0 	mov    DWORD PTR [esp+0xc],0xc00292c1
c001ada2:	5b                   	pop    ebx
c001ada3:	5e                   	pop    esi
c001ada4:	e9 2b 4d ff ff       	jmp    c000fad4 <KePanic(char const*)>
c001ada9:	8d 04 88             	lea    eax,[eax+ecx*4]
c001adac:	89 1c 85 60 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdba0],ebx
c001adb3:	5b                   	pop    ebx
c001adb4:	89 34 85 60 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceba0],esi
c001adbb:	5e                   	pop    esi
c001adbc:	c3                   	ret    

c001adbd <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001adbd:	55                   	push   ebp
c001adbe:	57                   	push   edi
c001adbf:	56                   	push   esi
c001adc0:	53                   	push   ebx
c001adc1:	83 ec 0c             	sub    esp,0xc
c001adc4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001adc8:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001adcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001add3:	8d 6e 20             	lea    ebp,[esi+0x20]
c001add6:	74 57                	je     c001ae2f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001add8:	84 c0                	test   al,al
c001adda:	89 c7                	mov    edi,eax
c001addc:	74 1d                	je     c001adfb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001adde:	83 fe 0f             	cmp    esi,0xf
c001ade1:	0f 8f d9 00 00 00    	jg     c001aec0 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001ade7:	0f b6 b6 68 ac 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd5398]
c001adee:	0f b7 bc 36 20 0e 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffcf1e0]
c001adf6:	d1 ef                	shr    edi,1
c001adf8:	83 e7 01             	and    edi,0x1
c001adfb:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c001ae00:	83 ec 08             	sub    esp,0x8
c001ae03:	31 db                	xor    ebx,ebx
c001ae05:	50                   	push   eax
c001ae06:	68 ce 92 02 c0       	push   0xc00292ce
c001ae0b:	e8 56 c1 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ae10:	a1 c0 13 03 c0       	mov    eax,ds:0xc00313c0
c001ae15:	83 c4 10             	add    esp,0x10
c001ae18:	85 c0                	test   eax,eax
c001ae1a:	7f 59                	jg     c001ae75 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c001ae1c:	8d 6e 20             	lea    ebp,[esi+0x20]
c001ae1f:	83 ec 0c             	sub    esp,0xc
c001ae22:	68 e5 92 02 c0       	push   0xc00292e5
c001ae27:	e8 a8 4c ff ff       	call   c000fad4 <KePanic(char const*)>
c001ae2c:	83 c4 10             	add    esp,0x10
c001ae2f:	89 e8                	mov    eax,ebp
c001ae31:	31 d2                	xor    edx,edx
c001ae33:	c1 e0 04             	shl    eax,0x4
c001ae36:	8b 8c 90 60 24 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffcdba0]
c001ae3d:	85 c9                	test   ecx,ecx
c001ae3f:	0f 84 92 00 00 00    	je     c001aed7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c001ae45:	83 c2 01             	add    edx,0x1
c001ae48:	83 fa 04             	cmp    edx,0x4
c001ae4b:	75 e9                	jne    c001ae36 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c001ae4d:	83 ec 0c             	sub    esp,0xc
c001ae50:	68 9c 92 02 c0       	push   0xc002929c
c001ae55:	e8 7a 4c ff ff       	call   c000fad4 <KePanic(char const*)>
c001ae5a:	83 c4 10             	add    esp,0x10
c001ae5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae62:	83 c4 0c             	add    esp,0xc
c001ae65:	5b                   	pop    ebx
c001ae66:	5e                   	pop    esi
c001ae67:	5f                   	pop    edi
c001ae68:	5d                   	pop    ebp
c001ae69:	c3                   	ret    
c001ae6a:	83 c3 01             	add    ebx,0x1
c001ae6d:	39 1d c0 13 03 c0    	cmp    DWORD PTR ds:0xc00313c0,ebx
c001ae73:	7e a7                	jle    c001ae1c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001ae75:	8b 2c 9d e0 13 03 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffcec20]
c001ae7c:	83 ec 08             	sub    esp,0x8
c001ae7f:	56                   	push   esi
c001ae80:	55                   	push   ebp
c001ae81:	e8 10 dc ff ff       	call   c0018a96 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001ae86:	83 c4 10             	add    esp,0x10
c001ae89:	84 c0                	test   al,al
c001ae8b:	74 dd                	je     c001ae6a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001ae8d:	89 f8                	mov    eax,edi
c001ae8f:	83 ec 04             	sub    esp,0x4
c001ae92:	8b 1c 9d e0 13 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcec20]
c001ae99:	8d 6e 20             	lea    ebp,[esi+0x20]
c001ae9c:	0f b6 f8             	movzx  edi,al
c001ae9f:	57                   	push   edi
c001aea0:	89 e8                	mov    eax,ebp
c001aea2:	6a 00                	push   0x0
c001aea4:	0f b6 c0             	movzx  eax,al
c001aea7:	50                   	push   eax
c001aea8:	89 f0                	mov    eax,esi
c001aeaa:	6a 00                	push   0x0
c001aeac:	0f b6 c0             	movzx  eax,al
c001aeaf:	6a 00                	push   0x0
c001aeb1:	50                   	push   eax
c001aeb2:	53                   	push   ebx
c001aeb3:	e8 4a dd ff ff       	call   c0018c02 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001aeb8:	83 c4 20             	add    esp,0x20
c001aebb:	e9 6f ff ff ff       	jmp    c001ae2f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001aec0:	83 ec 0c             	sub    esp,0xc
c001aec3:	31 ff                	xor    edi,edi
c001aec5:	68 60 92 02 c0       	push   0xc0029260
c001aeca:	e8 05 4c ff ff       	call   c000fad4 <KePanic(char const*)>
c001aecf:	83 c4 10             	add    esp,0x10
c001aed2:	e9 24 ff ff ff       	jmp    c001adfb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001aed7:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001aeda:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aede:	89 14 85 60 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdba0],edx
c001aee5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aee9:	89 14 85 60 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceba0],edx
c001aef0:	83 c4 0c             	add    esp,0xc
c001aef3:	89 f0                	mov    eax,esi
c001aef5:	5b                   	pop    ebx
c001aef6:	5e                   	pop    esi
c001aef7:	5f                   	pop    edi
c001aef8:	5d                   	pop    ebp
c001aef9:	c3                   	ret    

c001aefa <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001aefa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aefe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001af02:	c1 e0 04             	shl    eax,0x4
c001af05:	8d 50 10             	lea    edx,[eax+0x10]
c001af08:	39 88 60 24 03 c0    	cmp    DWORD PTR [eax-0x3ffcdba0],ecx
c001af0e:	74 08                	je     c001af18 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001af10:	83 c0 04             	add    eax,0x4
c001af13:	39 d0                	cmp    eax,edx
c001af15:	75 f1                	jne    c001af08 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001af17:	c3                   	ret    
c001af18:	c7 80 60 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba0],0x0
c001af22:	c7 80 60 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceba0],0x0
c001af2c:	eb e2                	jmp    c001af10 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001af2e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001af2e:	56                   	push   esi
c001af2f:	53                   	push   ebx
c001af30:	83 ec 04             	sub    esp,0x4
c001af33:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001af38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af3c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af40:	74 09                	je     c001af4b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001af42:	f6 05 4c 14 03 c0 01 	test   BYTE PTR ds:0xc003144c,0x1
c001af49:	75 34                	jne    c001af7f <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c001af4b:	8d 43 20             	lea    eax,[ebx+0x20]
c001af4e:	c1 e0 04             	shl    eax,0x4
c001af51:	8d 50 10             	lea    edx,[eax+0x10]
c001af54:	39 b0 60 24 03 c0    	cmp    DWORD PTR [eax-0x3ffcdba0],esi
c001af5a:	74 0d                	je     c001af69 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001af5c:	83 c0 04             	add    eax,0x4
c001af5f:	39 d0                	cmp    eax,edx
c001af61:	75 f1                	jne    c001af54 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c001af63:	83 c4 04             	add    esp,0x4
c001af66:	5b                   	pop    ebx
c001af67:	5e                   	pop    esi
c001af68:	c3                   	ret    
c001af69:	c7 80 60 24 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffcdba0],0x0
c001af73:	c7 80 60 14 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffceba0],0x0
c001af7d:	eb dd                	jmp    c001af5c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c001af7f:	83 fb 0f             	cmp    ebx,0xf
c001af82:	7f 09                	jg     c001af8d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c001af84:	0f b6 9b 68 ac 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd5398]
c001af8b:	eb be                	jmp    c001af4b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001af8d:	83 ec 0c             	sub    esp,0xc
c001af90:	68 f2 92 02 c0       	push   0xc00292f2
c001af95:	e8 3a 4b ff ff       	call   c000fad4 <KePanic(char const*)>
c001af9a:	83 c4 10             	add    esp,0x10
c001af9d:	eb ac                	jmp    c001af4b <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001af9f:	90                   	nop

c001afa0 <picIoWait()>:
c001afa0:	eb 00                	jmp    c001afa2 <picIoWait()+0x2>
c001afa2:	eb 00                	jmp    c001afa4 <picIoWait()+0x4>
c001afa4:	90                   	nop
c001afa5:	c3                   	ret    
c001afa6:	66 90                	xchg   ax,ax

c001afa8 <picDisable()>:
c001afa8:	83 ec 10             	sub    esp,0x10
c001afab:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001afb2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001afb7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001afbb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001afc0:	ee                   	out    dx,al
c001afc1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001afc8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001afcd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001afd1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001afd6:	ee                   	out    dx,al
c001afd7:	90                   	nop
c001afd8:	83 c4 10             	add    esp,0x10
c001afdb:	c3                   	ret    

c001afdc <picGetIRQReg(int)>:
c001afdc:	83 ec 10             	sub    esp,0x10
c001afdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afe3:	0f b6 c0             	movzx  eax,al
c001afe6:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001afed:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001aff1:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001aff5:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001affa:	ee                   	out    dx,al
c001affb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afff:	0f b6 c0             	movzx  eax,al
c001b002:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b009:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b00d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b011:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b016:	ee                   	out    dx,al
c001b017:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001b01e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001b023:	89 c2                	mov    edx,eax
c001b025:	ec                   	in     al,dx
c001b026:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b02a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b02e:	0f b6 c0             	movzx  eax,al
c001b031:	c1 e0 08             	shl    eax,0x8
c001b034:	89 c1                	mov    ecx,eax
c001b036:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001b03d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001b042:	89 c2                	mov    edx,eax
c001b044:	ec                   	in     al,dx
c001b045:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001b049:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001b04d:	0f b6 c0             	movzx  eax,al
c001b050:	09 c8                	or     eax,ecx
c001b052:	83 c4 10             	add    esp,0x10
c001b055:	c3                   	ret    
c001b056:	66 90                	xchg   ax,ax

c001b058 <picOpen()>:
c001b058:	83 ec 50             	sub    esp,0x50
c001b05b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001b062:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001b067:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b06b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b06f:	ee                   	out    dx,al
c001b070:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001b077:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b07c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b080:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b084:	ee                   	out    dx,al
c001b085:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001b08d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001b095:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001b09c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0a0:	89 c2                	mov    edx,eax
c001b0a2:	ec                   	in     al,dx
c001b0a3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001b0a7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b0ab:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001b0af:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001b0b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0ba:	89 c2                	mov    edx,eax
c001b0bc:	ec                   	in     al,dx
c001b0bd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b0c1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b0c5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001b0c9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001b0d0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001b0d5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001b0d9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b0dd:	ee                   	out    dx,al
c001b0de:	e8 bd fe ff ff       	call   c001afa0 <picIoWait()>
c001b0e3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001b0ea:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001b0ef:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001b0f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b0f7:	ee                   	out    dx,al
c001b0f8:	e8 a3 fe ff ff       	call   c001afa0 <picIoWait()>
c001b0fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b101:	0f b6 c0             	movzx  eax,al
c001b104:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001b10b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001b10f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001b113:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b117:	ee                   	out    dx,al
c001b118:	e8 83 fe ff ff       	call   c001afa0 <picIoWait()>
c001b11d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001b121:	0f b6 c0             	movzx  eax,al
c001b124:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001b12b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b12f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b133:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b137:	ee                   	out    dx,al
c001b138:	e8 63 fe ff ff       	call   c001afa0 <picIoWait()>
c001b13d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001b144:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001b149:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001b14d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b151:	ee                   	out    dx,al
c001b152:	e8 49 fe ff ff       	call   c001afa0 <picIoWait()>
c001b157:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001b15e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001b163:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001b167:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b16b:	ee                   	out    dx,al
c001b16c:	e8 2f fe ff ff       	call   c001afa0 <picIoWait()>
c001b171:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001b178:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001b17d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001b181:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b185:	ee                   	out    dx,al
c001b186:	e8 15 fe ff ff       	call   c001afa0 <picIoWait()>
c001b18b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001b192:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001b197:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001b19b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b19f:	ee                   	out    dx,al
c001b1a0:	e8 fb fd ff ff       	call   c001afa0 <picIoWait()>
c001b1a5:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001b1aa:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001b1b1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001b1b5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001b1b9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001b1bd:	ee                   	out    dx,al
c001b1be:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001b1c3:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001b1ca:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b1ce:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001b1d2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001b1d6:	ee                   	out    dx,al
c001b1d7:	90                   	nop
c001b1d8:	83 c4 50             	add    esp,0x50
c001b1db:	c3                   	ret    

c001b1dc <picEOI(int)>:
c001b1dc:	83 ec 10             	sub    esp,0x10
c001b1df:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b1e4:	75 1e                	jne    c001b204 <picEOI(int)+0x28>
c001b1e6:	6a 0b                	push   0xb
c001b1e8:	e8 ef fd ff ff       	call   c001afdc <picGetIRQReg(int)>
c001b1ed:	83 c4 04             	add    esp,0x4
c001b1f0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001b1f5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001b1fa:	25 80 00 00 00       	and    eax,0x80
c001b1ff:	74 73                	je     c001b274 <picEOI(int)+0x98>
c001b201:	8d 76 00             	lea    esi,[esi+0x0]
c001b204:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001b209:	75 31                	jne    c001b23c <picEOI(int)+0x60>
c001b20b:	6a 0b                	push   0xb
c001b20d:	e8 ca fd ff ff       	call   c001afdc <picGetIRQReg(int)>
c001b212:	83 c4 04             	add    esp,0x4
c001b215:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001b21a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b21e:	98                   	cwde   
c001b21f:	85 c0                	test   eax,eax
c001b221:	78 19                	js     c001b23c <picEOI(int)+0x60>
c001b223:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001b22a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001b22f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b233:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b238:	ee                   	out    dx,al
c001b239:	eb 3d                	jmp    c001b278 <picEOI(int)+0x9c>
c001b23b:	90                   	nop
c001b23c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001b241:	7e 19                	jle    c001b25c <picEOI(int)+0x80>
c001b243:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001b24a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001b24f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b253:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b258:	ee                   	out    dx,al
c001b259:	8d 76 00             	lea    esi,[esi+0x0]
c001b25c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001b263:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001b268:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b26c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b271:	ee                   	out    dx,al
c001b272:	eb 04                	jmp    c001b278 <picEOI(int)+0x9c>
c001b274:	90                   	nop
c001b275:	8d 76 00             	lea    esi,[esi+0x0]
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	c3                   	ret    

c001b27c <RTC::open(int, int, void*)>:
c001b27c:	31 c0                	xor    eax,eax
c001b27e:	c3                   	ret    
c001b27f:	90                   	nop

c001b280 <RTC::close(int, int, void*)>:
c001b280:	31 c0                	xor    eax,eax
c001b282:	c3                   	ret    
c001b283:	90                   	nop

c001b284 <RTC::timeInSecondsUTC()>:
c001b284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b288:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b28e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b294:	c3                   	ret    
c001b295:	90                   	nop

c001b296 <RTC::timeInDatetimeUTC()>:
c001b296:	53                   	push   ebx
c001b297:	83 ec 14             	sub    esp,0x14
c001b29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b29e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2a4:	50                   	push   eax
c001b2a5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b2a8:	83 c4 0c             	add    esp,0xc
c001b2ab:	52                   	push   edx
c001b2ac:	50                   	push   eax
c001b2ad:	53                   	push   ebx
c001b2ae:	e8 61 e3 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001b2b3:	89 d8                	mov    eax,ebx
c001b2b5:	83 c4 14             	add    esp,0x14
c001b2b8:	5b                   	pop    ebx
c001b2b9:	c2 04 00             	ret    0x4

c001b2bc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b2bc:	56                   	push   esi
c001b2bd:	53                   	push   ebx
c001b2be:	83 ec 14             	sub    esp,0x14
c001b2c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2c7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b2ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b2ce:	52                   	push   edx
c001b2cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2d7:	50                   	push   eax
c001b2d8:	e8 37 e3 fe ff       	call   c0009614 <KeSecondsToDatetime(unsigned long long)>
c001b2dd:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b2e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b2ed:	89 f0                	mov    eax,esi
c001b2ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b2f3:	83 c4 20             	add    esp,0x20
c001b2f6:	5b                   	pop    ebx
c001b2f7:	5e                   	pop    esi
c001b2f8:	ff e0                	jmp    eax

c001b2fa <RTC::~RTC()>:
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	ba 1c 93 02 c0       	mov    edx,0xc002931c
c001b302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b306:	89 10                	mov    DWORD PTR [eax],edx
c001b308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30c:	83 ec 0c             	sub    esp,0xc
c001b30f:	50                   	push   eax
c001b310:	e8 d7 dd fe ff       	call   c00090ec <Clock::~Clock()>
c001b315:	83 c4 10             	add    esp,0x10
c001b318:	90                   	nop
c001b319:	83 c4 0c             	add    esp,0xc
c001b31c:	c3                   	ret    
c001b31d:	90                   	nop

c001b31e <RTC::~RTC()>:
c001b31e:	83 ec 0c             	sub    esp,0xc
c001b321:	83 ec 0c             	sub    esp,0xc
c001b324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b328:	e8 cd ff ff ff       	call   c001b2fa <RTC::~RTC()>
c001b32d:	83 c4 10             	add    esp,0x10
c001b330:	83 ec 08             	sub    esp,0x8
c001b333:	68 60 01 00 00       	push   0x160
c001b338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b33c:	e8 47 1f ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c001b341:	83 c4 10             	add    esp,0x10
c001b344:	83 c4 0c             	add    esp,0xc
c001b347:	c3                   	ret    

c001b348 <RTC::get_update_in_progress_flag()>:
c001b348:	83 ec 18             	sub    esp,0x18
c001b34b:	6a 0a                	push   0xa
c001b34d:	e8 c1 d9 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b352:	83 c4 1c             	add    esp,0x1c
c001b355:	0f b6 c0             	movzx  eax,al
c001b358:	c1 e8 07             	shr    eax,0x7
c001b35b:	c3                   	ret    

c001b35c <RTC::completeRTCRefresh()>:
c001b35c:	55                   	push   ebp
c001b35d:	57                   	push   edi
c001b35e:	56                   	push   esi
c001b35f:	53                   	push   ebx
c001b360:	83 ec 3c             	sub    esp,0x3c
c001b363:	8b 1d 50 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b50
c001b369:	83 ec 0c             	sub    esp,0xc
c001b36c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b370:	e8 d3 ff ff ff       	call   c001b348 <RTC::get_update_in_progress_flag()>
c001b375:	83 c4 10             	add    esp,0x10
c001b378:	84 c0                	test   al,al
c001b37a:	74 0e                	je     c001b38a <RTC::completeRTCRefresh()+0x2e>
c001b37c:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b382:	3b 05 50 0b 03 c0    	cmp    eax,DWORD PTR ds:0xc0030b50
c001b388:	73 df                	jae    c001b369 <RTC::completeRTCRefresh()+0xd>
c001b38a:	83 ec 0c             	sub    esp,0xc
c001b38d:	6a 00                	push   0x0
c001b38f:	e8 7f d9 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b394:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b39b:	89 c7                	mov    edi,eax
c001b39d:	e8 71 d9 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b3a2:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b3a9:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001b3ad:	e8 61 d9 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b3b2:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b3b9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b3bd:	e8 51 d9 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b3c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b3c9:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b3cd:	e8 41 d9 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b3d2:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b3d9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b3dd:	e8 31 d9 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b3e2:	0f b6 c0             	movzx  eax,al
c001b3e5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001b3e9:	83 c4 10             	add    esp,0x10
c001b3ec:	8b 1d 50 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b50
c001b3f2:	83 ec 0c             	sub    esp,0xc
c001b3f5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b3f9:	e8 4a ff ff ff       	call   c001b348 <RTC::get_update_in_progress_flag()>
c001b3fe:	83 c4 10             	add    esp,0x10
c001b401:	84 c0                	test   al,al
c001b403:	74 0e                	je     c001b413 <RTC::completeRTCRefresh()+0xb7>
c001b405:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001b40b:	3b 05 50 0b 03 c0    	cmp    eax,DWORD PTR ds:0xc0030b50
c001b411:	73 df                	jae    c001b3f2 <RTC::completeRTCRefresh()+0x96>
c001b413:	83 ec 0c             	sub    esp,0xc
c001b416:	6a 00                	push   0x0
c001b418:	e8 f6 d8 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b41d:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001b424:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b428:	e8 e6 d8 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b42d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001b434:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b438:	e8 d6 d8 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b43d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001b444:	88 c3                	mov    bl,al
c001b446:	e8 c8 d8 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b44b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001b452:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b456:	e8 b8 d8 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b45b:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001b462:	89 c6                	mov    esi,eax
c001b464:	e8 aa d8 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b469:	89 f9                	mov    ecx,edi
c001b46b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b46f:	83 c4 10             	add    esp,0x10
c001b472:	0f b6 e8             	movzx  ebp,al
c001b475:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b47a:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001b47e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b482:	74 27                	je     c001b4ab <RTC::completeRTCRefresh()+0x14f>
c001b484:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001b488:	89 f0                	mov    eax,esi
c001b48a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001b48e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001b492:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b496:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001b49a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001b49e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b4a2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b4a6:	e9 41 ff ff ff       	jmp    c001b3ec <RTC::completeRTCRefresh()+0x90>
c001b4ab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b4b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b4b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b4b8:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c001b4bc:	75 c6                	jne    c001b484 <RTC::completeRTCRefresh()+0x128>
c001b4be:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b4c3:	89 f1                	mov    ecx,esi
c001b4c5:	0f b6 fb             	movzx  edi,bl
c001b4c8:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001b4cc:	0f b6 c9             	movzx  ecx,cl
c001b4cf:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001b4d3:	89 f1                	mov    ecx,esi
c001b4d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b4d9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b4dd:	0f 94 c2             	sete   dl
c001b4e0:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001b4e4:	0f 94 c0             	sete   al
c001b4e7:	21 d0                	and    eax,edx
c001b4e9:	31 d2                	xor    edx,edx
c001b4eb:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001b4ef:	0f 94 c2             	sete   dl
c001b4f2:	85 c2                	test   edx,eax
c001b4f4:	74 8e                	je     c001b484 <RTC::completeRTCRefresh()+0x128>
c001b4f6:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001b4fa:	75 88                	jne    c001b484 <RTC::completeRTCRefresh()+0x128>
c001b4fc:	83 ec 0c             	sub    esp,0xc
c001b4ff:	6a 0b                	push   0xb
c001b501:	e8 0d d8 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	a8 04                	test   al,0x4
c001b50b:	75 7a                	jne    c001b587 <RTC::completeRTCRefresh()+0x22b>
c001b50d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b511:	c1 ef 04             	shr    edi,0x4
c001b514:	83 e6 0f             	and    esi,0xf
c001b517:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b51b:	c1 ed 04             	shr    ebp,0x4
c001b51e:	6b ed 0a             	imul   ebp,ebp,0xa
c001b521:	c1 ea 04             	shr    edx,0x4
c001b524:	6b d2 0a             	imul   edx,edx,0xa
c001b527:	83 e1 0f             	and    ecx,0xf
c001b52a:	01 d1                	add    ecx,edx
c001b52c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b530:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001b534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b538:	c1 ea 04             	shr    edx,0x4
c001b53b:	6b d2 0a             	imul   edx,edx,0xa
c001b53e:	83 e1 0f             	and    ecx,0xf
c001b541:	01 d1                	add    ecx,edx
c001b543:	89 fa                	mov    edx,edi
c001b545:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001b549:	83 e2 07             	and    edx,0x7
c001b54c:	89 d9                	mov    ecx,ebx
c001b54e:	6b d2 0a             	imul   edx,edx,0xa
c001b551:	83 e1 0f             	and    ecx,0xf
c001b554:	83 e3 80             	and    ebx,0xffffff80
c001b557:	01 d1                	add    ecx,edx
c001b559:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b55d:	09 cb                	or     ebx,ecx
c001b55f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b563:	c1 ea 04             	shr    edx,0x4
c001b566:	6b d2 0a             	imul   edx,edx,0xa
c001b569:	83 e1 0f             	and    ecx,0xf
c001b56c:	01 d1                	add    ecx,edx
c001b56e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b572:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001b576:	c1 ea 04             	shr    edx,0x4
c001b579:	6b d2 0a             	imul   edx,edx,0xa
c001b57c:	01 d6                	add    esi,edx
c001b57e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b582:	83 e2 0f             	and    edx,0xf
c001b585:	01 d5                	add    ebp,edx
c001b587:	a8 02                	test   al,0x2
c001b589:	75 15                	jne    c001b5a0 <RTC::completeRTCRefresh()+0x244>
c001b58b:	f6 c3 80             	test   bl,0x80
c001b58e:	74 10                	je     c001b5a0 <RTC::completeRTCRefresh()+0x244>
c001b590:	83 e3 7f             	and    ebx,0x7f
c001b593:	b9 18 00 00 00       	mov    ecx,0x18
c001b598:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b59b:	99                   	cdq    
c001b59c:	f7 f9                	idiv   ecx
c001b59e:	88 d3                	mov    bl,dl
c001b5a0:	8d bd 6c 07 00 00    	lea    edi,[ebp+0x76c]
c001b5a6:	81 ff b1 07 00 00    	cmp    edi,0x7b1
c001b5ac:	77 06                	ja     c001b5b4 <RTC::completeRTCRefresh()+0x258>
c001b5ae:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001b5b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b5b9:	31 c9                	xor    ecx,ecx
c001b5bb:	31 d2                	xor    edx,edx
c001b5bd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001b5c1:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b5c5:	89 cd                	mov    ebp,ecx
c001b5c7:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c001b5cb:	c1 e7 10             	shl    edi,0x10
c001b5ce:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001b5d4:	c1 e0 10             	shl    eax,0x10
c001b5d7:	09 c5                	or     ebp,eax
c001b5d9:	89 e9                	mov    ecx,ebp
c001b5db:	0f b7 c2             	movzx  eax,dx
c001b5de:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001b5e2:	09 f8                	or     eax,edi
c001b5e4:	89 c2                	mov    edx,eax
c001b5e6:	50                   	push   eax
c001b5e7:	50                   	push   eax
c001b5e8:	88 d9                	mov    cl,bl
c001b5ea:	51                   	push   ecx
c001b5eb:	52                   	push   edx
c001b5ec:	e8 33 dc fe ff       	call   c0009224 <KeDatetimeToSeconds(datetime_t)>
c001b5f1:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001b5f5:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001b5fb:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001b601:	83 c4 4c             	add    esp,0x4c
c001b604:	5b                   	pop    ebx
c001b605:	5e                   	pop    esi
c001b606:	5f                   	pop    edi
c001b607:	5d                   	pop    ebp
c001b608:	c3                   	ret    
c001b609:	90                   	nop

c001b60a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b60a:	55                   	push   ebp
c001b60b:	57                   	push   edi
c001b60c:	56                   	push   esi
c001b60d:	53                   	push   ebx
c001b60e:	83 ec 34             	sub    esp,0x34
c001b611:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001b615:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001b619:	6a 00                	push   0x0
c001b61b:	6a 00                	push   0x0
c001b61d:	e8 45 d7 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b622:	5d                   	pop    ebp
c001b623:	89 fb                	mov    ebx,edi
c001b625:	58                   	pop    eax
c001b626:	6a 00                	push   0x0
c001b628:	6a 02                	push   0x2
c001b62a:	e8 38 d7 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b62f:	89 f8                	mov    eax,edi
c001b631:	89 f9                	mov    ecx,edi
c001b633:	0f b6 c4             	movzx  eax,ah
c001b636:	31 d2                	xor    edx,edx
c001b638:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b63c:	c1 e9 10             	shr    ecx,0x10
c001b63f:	89 f0                	mov    eax,esi
c001b641:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b645:	89 f0                	mov    eax,esi
c001b647:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001b64b:	0f b6 c4             	movzx  eax,ah
c001b64e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b652:	89 f0                	mov    eax,esi
c001b654:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b658:	c1 e8 10             	shr    eax,0x10
c001b65b:	b9 64 00 00 00       	mov    ecx,0x64
c001b660:	f7 f1                	div    ecx
c001b662:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001b669:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b66d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b671:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b675:	e8 99 d6 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b67a:	83 c4 10             	add    esp,0x10
c001b67d:	a8 04                	test   al,0x4
c001b67f:	89 c5                	mov    ebp,eax
c001b681:	75 6e                	jne    c001b6f1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001b683:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b687:	31 d2                	xor    edx,edx
c001b689:	0f b6 c1             	movzx  eax,cl
c001b68c:	b9 0a 00 00 00       	mov    ecx,0xa
c001b691:	f7 f1                	div    ecx
c001b693:	c1 e0 04             	shl    eax,0x4
c001b696:	09 d0                	or     eax,edx
c001b698:	31 d2                	xor    edx,edx
c001b69a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b69e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001b6a3:	f7 f1                	div    ecx
c001b6a5:	c1 e0 04             	shl    eax,0x4
c001b6a8:	09 d0                	or     eax,edx
c001b6aa:	31 d2                	xor    edx,edx
c001b6ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b6b0:	0f b6 c3             	movzx  eax,bl
c001b6b3:	f7 f1                	div    ecx
c001b6b5:	c1 e0 04             	shl    eax,0x4
c001b6b8:	09 d0                	or     eax,edx
c001b6ba:	31 d2                	xor    edx,edx
c001b6bc:	89 c3                	mov    ebx,eax
c001b6be:	89 f0                	mov    eax,esi
c001b6c0:	0f b6 c0             	movzx  eax,al
c001b6c3:	f7 f1                	div    ecx
c001b6c5:	c1 e0 04             	shl    eax,0x4
c001b6c8:	09 d0                	or     eax,edx
c001b6ca:	31 d2                	xor    edx,edx
c001b6cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b6d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b6d5:	f7 f1                	div    ecx
c001b6d7:	c1 e0 04             	shl    eax,0x4
c001b6da:	09 d0                	or     eax,edx
c001b6dc:	31 d2                	xor    edx,edx
c001b6de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b6e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b6e6:	f7 f1                	div    ecx
c001b6e8:	c1 e0 04             	shl    eax,0x4
c001b6eb:	09 d0                	or     eax,edx
c001b6ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b6f1:	83 e5 02             	and    ebp,0x2
c001b6f4:	75 1e                	jne    c001b714 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b6f6:	0f b6 c3             	movzx  eax,bl
c001b6f9:	83 f8 0b             	cmp    eax,0xb
c001b6fc:	76 10                	jbe    c001b70e <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001b6fe:	8d 53 f4             	lea    edx,[ebx-0xc]
c001b701:	84 d2                	test   dl,dl
c001b703:	88 d3                	mov    bl,dl
c001b705:	75 02                	jne    c001b709 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001b707:	b3 0c                	mov    bl,0xc
c001b709:	83 cb 80             	or     ebx,0xffffff80
c001b70c:	eb 06                	jmp    c001b714 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b70e:	85 c0                	test   eax,eax
c001b710:	75 02                	jne    c001b714 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001b712:	b3 0c                	mov    bl,0xc
c001b714:	50                   	push   eax
c001b715:	0f b6 db             	movzx  ebx,bl
c001b718:	50                   	push   eax
c001b719:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001b71e:	52                   	push   edx
c001b71f:	6a 00                	push   0x0
c001b721:	e8 41 d6 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b726:	5a                   	pop    edx
c001b727:	59                   	pop    ecx
c001b728:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b72d:	50                   	push   eax
c001b72e:	6a 02                	push   0x2
c001b730:	e8 32 d6 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b735:	5e                   	pop    esi
c001b736:	5f                   	pop    edi
c001b737:	53                   	push   ebx
c001b738:	6a 04                	push   0x4
c001b73a:	e8 28 d6 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b73f:	5d                   	pop    ebp
c001b740:	58                   	pop    eax
c001b741:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001b746:	52                   	push   edx
c001b747:	6a 07                	push   0x7
c001b749:	e8 19 d6 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b74e:	58                   	pop    eax
c001b74f:	5a                   	pop    edx
c001b750:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b755:	50                   	push   eax
c001b756:	6a 08                	push   0x8
c001b758:	e8 0a d6 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b75d:	59                   	pop    ecx
c001b75e:	5b                   	pop    ebx
c001b75f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b764:	55                   	push   ebp
c001b765:	6a 09                	push   0x9
c001b767:	e8 fb d5 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b76c:	5e                   	pop    esi
c001b76d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b771:	e8 e6 fb ff ff       	call   c001b35c <RTC::completeRTCRefresh()>
c001b776:	83 c4 3c             	add    esp,0x3c
c001b779:	b0 01                	mov    al,0x1
c001b77b:	5b                   	pop    ebx
c001b77c:	5e                   	pop    esi
c001b77d:	5f                   	pop    edi
c001b77e:	5d                   	pop    ebp
c001b77f:	c3                   	ret    

c001b780 <rtcIRQHandler(regs*, void*)>:
c001b780:	53                   	push   ebx
c001b781:	83 ec 14             	sub    esp,0x14
c001b784:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b788:	6a 0c                	push   0xc
c001b78a:	e8 84 d5 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b78f:	83 c4 10             	add    esp,0x10
c001b792:	a8 80                	test   al,0x80
c001b794:	74 24                	je     c001b7ba <rtcIRQHandler(regs*, void*)+0x3a>
c001b796:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001b79d:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001b7a4:	66 ff 05 60 34 03 c0 	inc    WORD PTR ds:0xc0033460
c001b7ab:	75 0d                	jne    c001b7ba <rtcIRQHandler(regs*, void*)+0x3a>
c001b7ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001b7b1:	83 c4 08             	add    esp,0x8
c001b7b4:	5b                   	pop    ebx
c001b7b5:	e9 a2 fb ff ff       	jmp    c001b35c <RTC::completeRTCRefresh()>
c001b7ba:	83 c4 08             	add    esp,0x8
c001b7bd:	5b                   	pop    ebx
c001b7be:	c3                   	ret    
c001b7bf:	90                   	nop

c001b7c0 <RTC::RTC()>:
c001b7c0:	83 ec 1c             	sub    esp,0x1c
c001b7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7c7:	83 ec 08             	sub    esp,0x8
c001b7ca:	68 ff 92 02 c0       	push   0xc00292ff
c001b7cf:	50                   	push   eax
c001b7d0:	e8 e1 d8 fe ff       	call   c00090b6 <Clock::Clock(char const*)>
c001b7d5:	83 c4 10             	add    esp,0x10
c001b7d8:	ba 1c 93 02 c0       	mov    edx,0xc002931c
c001b7dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e1:	89 10                	mov    DWORD PTR [eax],edx
c001b7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e7:	83 ec 0c             	sub    esp,0xc
c001b7ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7ee:	6a 01                	push   0x1
c001b7f0:	68 80 b7 01 c0       	push   0xc001b780
c001b7f5:	6a 08                	push   0x8
c001b7f7:	50                   	push   eax
c001b7f8:	e8 a5 e1 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b7fd:	83 c4 20             	add    esp,0x20
c001b800:	89 c2                	mov    edx,eax
c001b802:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b806:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b80c:	fa                   	cli    
c001b80d:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001b812:	83 c0 01             	add    eax,0x1
c001b815:	a3 30 13 03 c0       	mov    ds:0xc0031330,eax
c001b81a:	83 ec 0c             	sub    esp,0xc
c001b81d:	6a 0b                	push   0xb
c001b81f:	e8 ef d4 ff ff       	call   c0018d13 <x86ReadCMOS(unsigned char)>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b82b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b82f:	83 c8 10             	or     eax,0x10
c001b832:	0f b6 c0             	movzx  eax,al
c001b835:	83 ec 08             	sub    esp,0x8
c001b838:	50                   	push   eax
c001b839:	6a 0b                	push   0xb
c001b83b:	e8 27 d5 ff ff       	call   c0018d67 <x86WriteCMOS(unsigned char, unsigned char)>
c001b840:	83 c4 10             	add    esp,0x10
c001b843:	83 ec 0c             	sub    esp,0xc
c001b846:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b84a:	e8 0d fb ff ff       	call   c001b35c <RTC::completeRTCRefresh()>
c001b84f:	83 c4 10             	add    esp,0x10
c001b852:	f0 83 2d 30 13 03 c0 01 	lock sub DWORD PTR ds:0xc0031330,0x1
c001b85a:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c001b85f:	85 c0                	test   eax,eax
c001b861:	75 01                	jne    c001b864 <RTC::RTC()+0xa4>
c001b863:	fb                   	sti    
c001b864:	90                   	nop
c001b865:	83 c4 1c             	add    esp,0x1c
c001b868:	c3                   	ret    
c001b869:	66 90                	xchg   ax,ax
c001b86b:	90                   	nop

c001b86c <HalConsoleScroll(int, int)>:
c001b86c:	83 ec 10             	sub    esp,0x10
c001b86f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b877:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b87f:	90                   	nop
c001b880:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b885:	0f 8f e1 00 00 00    	jg     c001b96c <HalConsoleScroll(int, int)+0x100>
c001b88b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b893:	90                   	nop
c001b894:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b89c:	0f 8f be 00 00 00    	jg     c001b960 <HalConsoleScroll(int, int)+0xf4>
c001b8a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8a6:	89 d0                	mov    eax,edx
c001b8a8:	c1 e0 02             	shl    eax,0x2
c001b8ab:	01 d0                	add    eax,edx
c001b8ad:	c1 e0 05             	shl    eax,0x5
c001b8b0:	89 c2                	mov    edx,eax
c001b8b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8b6:	01 d0                	add    eax,edx
c001b8b8:	89 c2                	mov    edx,eax
c001b8ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8be:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b8c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8c5:	89 d0                	mov    eax,edx
c001b8c7:	c1 e0 02             	shl    eax,0x2
c001b8ca:	01 d0                	add    eax,edx
c001b8cc:	c1 e0 05             	shl    eax,0x5
c001b8cf:	89 c2                	mov    edx,eax
c001b8d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8d5:	01 d0                	add    eax,edx
c001b8d7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b8dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8e1:	01 d0                	add    eax,edx
c001b8e3:	8a 11                	mov    dl,BYTE PTR [ecx]
c001b8e5:	88 10                	mov    BYTE PTR [eax],dl
c001b8e7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b8ec:	75 66                	jne    c001b954 <HalConsoleScroll(int, int)+0xe8>
c001b8ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b8f2:	83 e0 01             	and    eax,0x1
c001b8f5:	74 39                	je     c001b930 <HalConsoleScroll(int, int)+0xc4>
c001b8f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8fb:	83 e0 0f             	and    eax,0xf
c001b8fe:	88 c2                	mov    dl,al
c001b900:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b904:	c1 e0 04             	shl    eax,0x4
c001b907:	09 d0                	or     eax,edx
c001b909:	88 c1                	mov    cl,al
c001b90b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b90f:	89 d0                	mov    eax,edx
c001b911:	c1 e0 02             	shl    eax,0x2
c001b914:	01 d0                	add    eax,edx
c001b916:	c1 e0 05             	shl    eax,0x5
c001b919:	89 c2                	mov    edx,eax
c001b91b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b91f:	01 d0                	add    eax,edx
c001b921:	89 c2                	mov    edx,eax
c001b923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b927:	01 d0                	add    eax,edx
c001b929:	88 ca                	mov    dl,cl
c001b92b:	88 10                	mov    BYTE PTR [eax],dl
c001b92d:	eb 25                	jmp    c001b954 <HalConsoleScroll(int, int)+0xe8>
c001b92f:	90                   	nop
c001b930:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b934:	89 d0                	mov    eax,edx
c001b936:	c1 e0 02             	shl    eax,0x2
c001b939:	01 d0                	add    eax,edx
c001b93b:	c1 e0 05             	shl    eax,0x5
c001b93e:	89 c2                	mov    edx,eax
c001b940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b944:	01 d0                	add    eax,edx
c001b946:	89 c2                	mov    edx,eax
c001b948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b94c:	01 d0                	add    eax,edx
c001b94e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b951:	8d 76 00             	lea    esi,[esi+0x0]
c001b954:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b959:	e9 36 ff ff ff       	jmp    c001b894 <HalConsoleScroll(int, int)+0x28>
c001b95e:	66 90                	xchg   ax,ax
c001b960:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b965:	e9 16 ff ff ff       	jmp    c001b880 <HalConsoleScroll(int, int)+0x14>
c001b96a:	66 90                	xchg   ax,ax
c001b96c:	90                   	nop
c001b96d:	83 c4 10             	add    esp,0x10
c001b970:	c3                   	ret    
c001b971:	8d 76 00             	lea    esi,[esi+0x0]

c001b974 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b974:	83 ec 14             	sub    esp,0x14
c001b977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b97b:	88 04 24             	mov    BYTE PTR [esp],al
c001b97e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b981:	0f b6 c0             	movzx  eax,al
c001b984:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b988:	89 d1                	mov    ecx,edx
c001b98a:	83 e1 0f             	and    ecx,0xf
c001b98d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b991:	c1 e2 04             	shl    edx,0x4
c001b994:	0f b6 d2             	movzx  edx,dl
c001b997:	09 ca                	or     edx,ecx
c001b999:	c1 e2 08             	shl    edx,0x8
c001b99c:	09 d0                	or     eax,edx
c001b99e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b9a3:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b9ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b9af:	89 d0                	mov    eax,edx
c001b9b1:	c1 e0 02             	shl    eax,0x2
c001b9b4:	01 d0                	add    eax,edx
c001b9b6:	c1 e0 04             	shl    eax,0x4
c001b9b9:	89 c2                	mov    edx,eax
c001b9bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9bf:	01 d0                	add    eax,edx
c001b9c1:	d1 e0                	shl    eax,1
c001b9c3:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b9c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9cb:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c001b9d0:	66 89 10             	mov    WORD PTR [eax],dx
c001b9d3:	90                   	nop
c001b9d4:	83 c4 14             	add    esp,0x14
c001b9d7:	c3                   	ret    

c001b9d8 <HalConsoleCursorUpdate(int, int)>:
c001b9d8:	83 ec 20             	sub    esp,0x20
c001b9db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b9df:	89 c2                	mov    edx,eax
c001b9e1:	c1 e2 02             	shl    edx,0x2
c001b9e4:	01 d0                	add    eax,edx
c001b9e6:	c1 e0 04             	shl    eax,0x4
c001b9e9:	89 c2                	mov    edx,eax
c001b9eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9ef:	01 d0                	add    eax,edx
c001b9f1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b9f6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b9fd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001ba02:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ba06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba0a:	ee                   	out    dx,al
c001ba0b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ba10:	0f b6 c0             	movzx  eax,al
c001ba13:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001ba1a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001ba1e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ba22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ba26:	ee                   	out    dx,al
c001ba27:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001ba2e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001ba33:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ba37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba3b:	ee                   	out    dx,al
c001ba3c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001ba41:	c1 e8 08             	shr    eax,0x8
c001ba44:	0f b6 c0             	movzx  eax,al
c001ba47:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001ba4e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ba52:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ba56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ba5a:	ee                   	out    dx,al
c001ba5b:	90                   	nop
c001ba5c:	83 c4 20             	add    esp,0x20
c001ba5f:	c3                   	ret    

c001ba60 <FAT::getName()>:
c001ba60:	b8 50 93 02 c0       	mov    eax,0xc0029350
c001ba65:	c3                   	ret    
c001ba66:	66 90                	xchg   ax,ax

c001ba68 <FAT::tell(void*, unsigned long long*)>:
c001ba68:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ba6d:	75 09                	jne    c001ba78 <FAT::tell(void*, unsigned long long*)+0x10>
c001ba6f:	b8 04 00 00 00       	mov    eax,0x4
c001ba74:	c3                   	ret    
c001ba75:	8d 76 00             	lea    esi,[esi+0x0]
c001ba78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba7d:	75 09                	jne    c001ba88 <FAT::tell(void*, unsigned long long*)+0x20>
c001ba7f:	b8 04 00 00 00       	mov    eax,0x4
c001ba84:	c3                   	ret    
c001ba85:	8d 76 00             	lea    esi,[esi+0x0]
c001ba88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba8c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ba8f:	ba 00 00 00 00       	mov    edx,0x0
c001ba94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ba98:	89 01                	mov    DWORD PTR [ecx],eax
c001ba9a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ba9d:	b8 00 00 00 00       	mov    eax,0x0
c001baa2:	c3                   	ret    
c001baa3:	90                   	nop

c001baa4 <FAT::stat(void*, unsigned long long*)>:
c001baa4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001baa9:	75 09                	jne    c001bab4 <FAT::stat(void*, unsigned long long*)+0x10>
c001baab:	b8 04 00 00 00       	mov    eax,0x4
c001bab0:	c3                   	ret    
c001bab1:	8d 76 00             	lea    esi,[esi+0x0]
c001bab4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bab9:	75 09                	jne    c001bac4 <FAT::stat(void*, unsigned long long*)+0x20>
c001babb:	b8 04 00 00 00       	mov    eax,0x4
c001bac0:	c3                   	ret    
c001bac1:	8d 76 00             	lea    esi,[esi+0x0]
c001bac4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bac8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bacb:	ba 00 00 00 00       	mov    edx,0x0
c001bad0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bad4:	89 01                	mov    DWORD PTR [ecx],eax
c001bad6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bad9:	b8 00 00 00 00       	mov    eax,0x0
c001bade:	c3                   	ret    
c001badf:	90                   	nop

c001bae0 <FAT::~FAT()>:
c001bae0:	83 ec 0c             	sub    esp,0xc
c001bae3:	ba 9c 93 02 c0       	mov    edx,0xc002939c
c001bae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baec:	89 10                	mov    DWORD PTR [eax],edx
c001baee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf2:	83 ec 0c             	sub    esp,0xc
c001baf5:	50                   	push   eax
c001baf6:	e8 db c2 fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001bafb:	83 c4 10             	add    esp,0x10
c001bafe:	90                   	nop
c001baff:	83 c4 0c             	add    esp,0xc
c001bb02:	c3                   	ret    
c001bb03:	90                   	nop

c001bb04 <FAT::~FAT()>:
c001bb04:	83 ec 0c             	sub    esp,0xc
c001bb07:	83 ec 0c             	sub    esp,0xc
c001bb0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb0e:	e8 cd ff ff ff       	call   c001bae0 <FAT::~FAT()>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	83 ec 08             	sub    esp,0x8
c001bb19:	6a 08                	push   0x8
c001bb1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb1f:	e8 64 17 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c001bb24:	83 c4 10             	add    esp,0x10
c001bb27:	83 c4 0c             	add    esp,0xc
c001bb2a:	c3                   	ret    
c001bb2b:	90                   	nop

c001bb2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001bb2c:	83 ec 1c             	sub    esp,0x1c
c001bb2f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001bb36:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001bb3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb3f:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bb46:	83 f8 ff             	cmp    eax,0xffffffff
c001bb49:	75 35                	jne    c001bb80 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001bb4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bb4f:	88 c2                	mov    dl,al
c001bb51:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bb56:	01 d0                	add    eax,edx
c001bb58:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bb5c:	8b 15 80 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033480
c001bb62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb66:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c001bb6d:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bb72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb76:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c001bb7d:	eb 19                	jmp    c001bb98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001bb7f:	90                   	nop
c001bb80:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001bb84:	88 c2                	mov    dl,al
c001bb86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bb8a:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bb91:	01 d0                	add    eax,edx
c001bb93:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001bb97:	90                   	nop
c001bb98:	83 ec 04             	sub    esp,0x4
c001bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bba3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001bba7:	50                   	push   eax
c001bba8:	e8 27 96 fe ff       	call   c00051d4 <f_getlabel>
c001bbad:	83 c4 10             	add    esp,0x10
c001bbb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbb4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bbb9:	75 09                	jne    c001bbc4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001bbbb:	b8 00 00 00 00       	mov    eax,0x0
c001bbc0:	eb 0a                	jmp    c001bbcc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001bbc2:	66 90                	xchg   ax,ax
c001bbc4:	b8 01 00 00 00       	mov    eax,0x1
c001bbc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbcc:	83 c4 1c             	add    esp,0x1c
c001bbcf:	c3                   	ret    

c001bbd0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001bbd0:	53                   	push   ebx
c001bbd1:	83 ec 58             	sub    esp,0x58
c001bbd4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001bbdc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bbe0:	b9 00 00 00 00       	mov    ecx,0x0
c001bbe5:	b8 3c 00 00 00       	mov    eax,0x3c
c001bbea:	83 e0 f8             	and    eax,0xfffffff8
c001bbed:	89 c3                	mov    ebx,eax
c001bbef:	b8 00 00 00 00       	mov    eax,0x0
c001bbf4:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c001bbf8:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c001bbfc:	83 c0 08             	add    eax,0x8
c001bbff:	39 d8                	cmp    eax,ebx
c001bc01:	72 f1                	jb     c001bbf4 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001bc03:	01 c2                	add    edx,eax
c001bc05:	89 0a                	mov    DWORD PTR [edx],ecx
c001bc07:	83 c2 04             	add    edx,0x4
c001bc0a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bc0e:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bc15:	83 f8 ff             	cmp    eax,0xffffffff
c001bc18:	75 36                	jne    c001bc50 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c001bc1a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bc1e:	88 c2                	mov    dl,al
c001bc20:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bc25:	01 d0                	add    eax,edx
c001bc27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc2b:	8b 15 80 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033480
c001bc31:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bc35:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c001bc3c:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bc41:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001bc45:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c001bc4c:	eb 1a                	jmp    c001bc68 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c001bc4e:	66 90                	xchg   ax,ax
c001bc50:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bc54:	88 c2                	mov    dl,al
c001bc56:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001bc5a:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bc61:	01 d0                	add    eax,edx
c001bc63:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bc67:	90                   	nop
c001bc68:	83 ec 08             	sub    esp,0x8
c001bc6b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001bc6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc73:	50                   	push   eax
c001bc74:	e8 f7 4b fe ff       	call   c0000870 <strcat>
c001bc79:	83 c4 10             	add    esp,0x10
c001bc7c:	83 ec 0c             	sub    esp,0xc
c001bc7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc83:	50                   	push   eax
c001bc84:	e8 9f 96 fe ff       	call   c0005328 <f_setlabel>
c001bc89:	83 c4 10             	add    esp,0x10
c001bc8c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc90:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001bc95:	75 09                	jne    c001bca0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001bc97:	b8 00 00 00 00       	mov    eax,0x0
c001bc9c:	eb 0a                	jmp    c001bca8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c001bc9e:	66 90                	xchg   ax,ax
c001bca0:	b8 01 00 00 00       	mov    eax,0x1
c001bca5:	8d 76 00             	lea    esi,[esi+0x0]
c001bca8:	83 c4 58             	add    esp,0x58
c001bcab:	5b                   	pop    ebx
c001bcac:	c3                   	ret    
c001bcad:	90                   	nop
c001bcae:	66 90                	xchg   ax,ax

c001bcb0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001bcb0:	83 ec 2c             	sub    esp,0x2c
c001bcb3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bcbb:	83 ec 08             	sub    esp,0x8
c001bcbe:	68 74 93 02 c0       	push   0xc0029374
c001bcc3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bcc7:	e8 b4 4a fe ff       	call   c0000780 <strcmp>
c001bccc:	83 c4 10             	add    esp,0x10
c001bccf:	85 c0                	test   eax,eax
c001bcd1:	0f 94 c0             	sete   al
c001bcd4:	0f b6 c0             	movzx  eax,al
c001bcd7:	85 c0                	test   eax,eax
c001bcd9:	74 0d                	je     c001bce8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001bcdb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bce3:	e9 c0 00 00 00       	jmp    c001bda8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bce8:	83 ec 08             	sub    esp,0x8
c001bceb:	68 66 93 02 c0       	push   0xc0029366
c001bcf0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bcf4:	e8 87 4a fe ff       	call   c0000780 <strcmp>
c001bcf9:	83 c4 10             	add    esp,0x10
c001bcfc:	85 c0                	test   eax,eax
c001bcfe:	0f 94 c0             	sete   al
c001bd01:	0f b6 c0             	movzx  eax,al
c001bd04:	85 c0                	test   eax,eax
c001bd06:	74 10                	je     c001bd18 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001bd08:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bd10:	e9 93 00 00 00       	jmp    c001bda8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bd15:	8d 76 00             	lea    esi,[esi+0x0]
c001bd18:	83 ec 08             	sub    esp,0x8
c001bd1b:	68 6c 93 02 c0       	push   0xc002936c
c001bd20:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bd24:	e8 57 4a fe ff       	call   c0000780 <strcmp>
c001bd29:	83 c4 10             	add    esp,0x10
c001bd2c:	85 c0                	test   eax,eax
c001bd2e:	0f 94 c0             	sete   al
c001bd31:	0f b6 c0             	movzx  eax,al
c001bd34:	85 c0                	test   eax,eax
c001bd36:	74 0c                	je     c001bd44 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001bd38:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001bd40:	eb 66                	jmp    c001bda8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bd42:	66 90                	xchg   ax,ax
c001bd44:	83 ec 08             	sub    esp,0x8
c001bd47:	68 9c 63 02 c0       	push   0xc002639c
c001bd4c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bd50:	e8 2b 4a fe ff       	call   c0000780 <strcmp>
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	85 c0                	test   eax,eax
c001bd5a:	0f 94 c0             	sete   al
c001bd5d:	0f b6 c0             	movzx  eax,al
c001bd60:	85 c0                	test   eax,eax
c001bd62:	74 0c                	je     c001bd70 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001bd64:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001bd6c:	eb 3a                	jmp    c001bda8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bd6e:	66 90                	xchg   ax,ax
c001bd70:	83 ec 08             	sub    esp,0x8
c001bd73:	68 72 93 02 c0       	push   0xc0029372
c001bd78:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001bd7c:	e8 ff 49 fe ff       	call   c0000780 <strcmp>
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	85 c0                	test   eax,eax
c001bd86:	0f 94 c0             	sete   al
c001bd89:	0f b6 c0             	movzx  eax,al
c001bd8c:	85 c0                	test   eax,eax
c001bd8e:	74 0c                	je     c001bd9c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001bd90:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001bd98:	eb 0e                	jmp    c001bda8 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001bd9a:	66 90                	xchg   ax,ax
c001bd9c:	b8 08 00 00 00       	mov    eax,0x8
c001bda1:	e9 ea 00 00 00       	jmp    c001be90 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001bda6:	66 90                	xchg   ax,ax
c001bda8:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001bdaf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001bdb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bdb8:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bdbf:	83 f8 ff             	cmp    eax,0xffffffff
c001bdc2:	75 34                	jne    c001bdf8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001bdc4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bdc8:	88 c2                	mov    dl,al
c001bdca:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bdcf:	01 d0                	add    eax,edx
c001bdd1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001bdd5:	8b 15 80 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033480
c001bddb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bddf:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c001bde6:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bdeb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bdef:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c001bdf6:	eb 18                	jmp    c001be10 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001bdf8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001bdfc:	88 c2                	mov    dl,al
c001bdfe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be02:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001be09:	01 d0                	add    eax,edx
c001be0b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001be0f:	90                   	nop
c001be10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be14:	88 04 24             	mov    BYTE PTR [esp],al
c001be17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001be1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be1f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001be27:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001be2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be34:	83 ec 0c             	sub    esp,0xc
c001be37:	68 00 20 00 00       	push   0x2000
c001be3c:	e8 3f 38 ff ff       	call   c000f680 <malloc>
c001be41:	83 c4 10             	add    esp,0x10
c001be44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001be48:	68 00 20 00 00       	push   0x2000
c001be4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be51:	8d 44 24 08          	lea    eax,[esp+0x8]
c001be55:	50                   	push   eax
c001be56:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001be5a:	50                   	push   eax
c001be5b:	e8 c5 97 fe ff       	call   c0005625 <f_mkfs>
c001be60:	83 c4 10             	add    esp,0x10
c001be63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001be67:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001be6c:	75 0a                	jne    c001be78 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001be6e:	b8 00 00 00 00       	mov    eax,0x0
c001be73:	eb 1b                	jmp    c001be90 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001be75:	8d 76 00             	lea    esi,[esi+0x0]
c001be78:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001be7d:	75 09                	jne    c001be88 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001be7f:	b8 09 00 00 00       	mov    eax,0x9
c001be84:	eb 0a                	jmp    c001be90 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001be86:	66 90                	xchg   ax,ax
c001be88:	b8 01 00 00 00       	mov    eax,0x1
c001be8d:	8d 76 00             	lea    esi,[esi+0x0]
c001be90:	83 c4 2c             	add    esp,0x2c
c001be93:	c3                   	ret    

c001be94 <FAT::tryMount(LogicalDisk*, int)>:
c001be94:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001be9a:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001be9f:	83 f8 14             	cmp    eax,0x14
c001bea2:	75 18                	jne    c001bebc <FAT::tryMount(LogicalDisk*, int)+0x28>
c001bea4:	83 ec 0c             	sub    esp,0xc
c001bea7:	68 78 93 02 c0       	push   0xc0029378
c001beac:	e8 23 3c ff ff       	call   c000fad4 <KePanic(char const*)>
c001beb1:	83 c4 10             	add    esp,0x10
c001beb4:	b0 00                	mov    al,0x0
c001beb6:	e9 ed 01 00 00       	jmp    c001c0a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bebb:	90                   	nop
c001bebc:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bec3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bec9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001becf:	3d 00 02 00 00       	cmp    eax,0x200
c001bed4:	74 0a                	je     c001bee0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001bed6:	b0 00                	mov    al,0x0
c001bed8:	e9 cb 01 00 00       	jmp    c001c0a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bedd:	8d 76 00             	lea    esi,[esi+0x0]
c001bee0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001bee8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001beef:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001bef6:	83 f8 ff             	cmp    eax,0xffffffff
c001bef9:	74 09                	je     c001bf04 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001befb:	b0 01                	mov    al,0x1
c001befd:	e9 a6 01 00 00       	jmp    c001c0a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bf02:	66 90                	xchg   ax,ax
c001bf04:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001bf0e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001bf16:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001bf1d:	88 c2                	mov    dl,al
c001bf1f:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bf24:	01 d0                	add    eax,edx
c001bf26:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001bf2d:	8b 15 80 34 03 c0    	mov    edx,DWORD PTR ds:0xc0033480
c001bf33:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001bf3a:	89 14 85 a0 34 03 c0 	mov    DWORD PTR [eax*4-0x3ffccb60],edx
c001bf41:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001bf46:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001bf4d:	89 14 85 20 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffccae0],edx
c001bf54:	83 ec 0c             	sub    esp,0xc
c001bf57:	68 34 02 00 00       	push   0x234
c001bf5c:	e8 1f 37 ff ff       	call   c000f680 <malloc>
c001bf61:	83 c4 10             	add    esp,0x10
c001bf64:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001bf6b:	83 ec 04             	sub    esp,0x4
c001bf6e:	6a 00                	push   0x0
c001bf70:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bf77:	50                   	push   eax
c001bf78:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bf7f:	e8 9b 7e fe ff       	call   c0003e1f <f_mount>
c001bf84:	83 c4 10             	add    esp,0x10
c001bf87:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001bf8e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001bf96:	74 1c                	je     c001bfb4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bf98:	83 ec 0c             	sub    esp,0xc
c001bf9b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001bfa2:	e8 f9 36 ff ff       	call   c000f6a0 <rfree>
c001bfa7:	83 c4 10             	add    esp,0x10
c001bfaa:	b0 00                	mov    al,0x0
c001bfac:	e9 f7 00 00 00       	jmp    c001c0a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001bfb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfb4:	83 ec 04             	sub    esp,0x4
c001bfb7:	68 00 01 00 00       	push   0x100
c001bfbc:	6a 00                	push   0x0
c001bfbe:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bfc5:	50                   	push   eax
c001bfc6:	e8 25 45 fe ff       	call   c00004f0 <memset>
c001bfcb:	83 c4 10             	add    esp,0x10
c001bfce:	83 ec 08             	sub    esp,0x8
c001bfd1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001bfd8:	50                   	push   eax
c001bfd9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bfe0:	50                   	push   eax
c001bfe1:	e8 8a 48 fe ff       	call   c0000870 <strcat>
c001bfe6:	83 c4 10             	add    esp,0x10
c001bfe9:	83 ec 08             	sub    esp,0x8
c001bfec:	68 86 93 02 c0       	push   0xc0029386
c001bff1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001bff8:	50                   	push   eax
c001bff9:	e8 72 48 fe ff       	call   c0000870 <strcat>
c001bffe:	83 c4 10             	add    esp,0x10
c001c001:	83 ec 04             	sub    esp,0x4
c001c004:	6a 01                	push   0x1
c001c006:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001c00d:	50                   	push   eax
c001c00e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c012:	50                   	push   eax
c001c013:	e8 69 7e fe ff       	call   c0003e81 <f_open>
c001c018:	83 c4 10             	add    esp,0x10
c001c01b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001c022:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001c029:	85 c0                	test   eax,eax
c001c02b:	74 0b                	je     c001c038 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001c02d:	78 31                	js     c001c060 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c02f:	83 e8 04             	sub    eax,0x4
c001c032:	83 f8 01             	cmp    eax,0x1
c001c035:	77 29                	ja     c001c060 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001c037:	90                   	nop
c001c038:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001c040:	83 ec 0c             	sub    esp,0xc
c001c043:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c047:	50                   	push   eax
c001c048:	e8 e4 85 fe ff       	call   c0004631 <f_close>
c001c04d:	83 c4 10             	add    esp,0x10
c001c050:	90                   	nop
c001c051:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001c059:	85 c0                	test   eax,eax
c001c05b:	74 43                	je     c001c0a0 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001c05d:	eb 31                	jmp    c001c090 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001c05f:	90                   	nop
c001c060:	83 ec 0c             	sub    esp,0xc
c001c063:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001c06a:	e8 31 36 ff ff       	call   c000f6a0 <rfree>
c001c06f:	83 c4 10             	add    esp,0x10
c001c072:	83 ec 04             	sub    esp,0x4
c001c075:	6a 00                	push   0x0
c001c077:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001c07e:	50                   	push   eax
c001c07f:	6a 00                	push   0x0
c001c081:	e8 99 7d fe ff       	call   c0003e1f <f_mount>
c001c086:	83 c4 10             	add    esp,0x10
c001c089:	b0 00                	mov    al,0x0
c001c08b:	eb 1b                	jmp    c001c0a8 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001c08d:	8d 76 00             	lea    esi,[esi+0x0]
c001c090:	a1 80 34 03 c0       	mov    eax,ds:0xc0033480
c001c095:	83 c0 01             	add    eax,0x1
c001c098:	a3 80 34 03 c0       	mov    ds:0xc0033480,eax
c001c09d:	8d 76 00             	lea    esi,[esi+0x0]
c001c0a0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001c0a7:	90                   	nop
c001c0a8:	81 c4 4c 03 00 00    	add    esp,0x34c
c001c0ae:	c3                   	ret    
c001c0af:	90                   	nop

c001c0b0 <FAT::allocateSwapfile(char const*, int)>:
c001c0b0:	55                   	push   ebp
c001c0b1:	57                   	push   edi
c001c0b2:	56                   	push   esi
c001c0b3:	53                   	push   ebx
c001c0b4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001c0ba:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001c0c5:	83 ec 0c             	sub    esp,0xc
c001c0c8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001c0cf:	e8 ac 35 ff ff       	call   c000f680 <malloc>
c001c0d4:	83 c4 10             	add    esp,0x10
c001c0d7:	89 c7                	mov    edi,eax
c001c0d9:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001c0de:	83 ec 04             	sub    esp,0x4
c001c0e1:	50                   	push   eax
c001c0e2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001c0e9:	57                   	push   edi
c001c0ea:	e8 99 c0 fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001c0ef:	83 c4 10             	add    esp,0x10
c001c0f2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001c0f9:	83 ec 04             	sub    esp,0x4
c001c0fc:	8d 44 24 13          	lea    eax,[esp+0x13]
c001c100:	50                   	push   eax
c001c101:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c105:	50                   	push   eax
c001c106:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c10d:	e8 96 c3 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001c112:	83 c4 10             	add    esp,0x10
c001c115:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c11c:	c1 e0 14             	shl    eax,0x14
c001c11f:	89 c7                	mov    edi,eax
c001c121:	89 c5                	mov    ebp,eax
c001c123:	c1 fd 1f             	sar    ebp,0x1f
c001c126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c12a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c12e:	89 f9                	mov    ecx,edi
c001c130:	31 c1                	xor    ecx,eax
c001c132:	89 cb                	mov    ebx,ecx
c001c134:	89 e9                	mov    ecx,ebp
c001c136:	31 d1                	xor    ecx,edx
c001c138:	89 ce                	mov    esi,ecx
c001c13a:	89 f0                	mov    eax,esi
c001c13c:	09 d8                	or     eax,ebx
c001c13e:	0f 84 9c 00 00 00    	je     c001c1e0 <FAT::allocateSwapfile(char const*, int)+0x130>
c001c144:	83 ec 0c             	sub    esp,0xc
c001c147:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c14e:	e8 21 c2 fe ff       	call   c0008374 <File::unlink()>
c001c153:	83 c4 10             	add    esp,0x10
c001c156:	83 ec 08             	sub    esp,0x8
c001c159:	6a 12                	push   0x12
c001c15b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c162:	e8 3f c0 fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001c167:	83 c4 10             	add    esp,0x10
c001c16a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c171:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c177:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c17e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001c185:	c1 e0 14             	shl    eax,0x14
c001c188:	83 ec 04             	sub    esp,0x4
c001c18b:	6a 01                	push   0x1
c001c18d:	50                   	push   eax
c001c18e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001c195:	e8 1e 93 fe ff       	call   c00054b8 <f_expand>
c001c19a:	83 c4 10             	add    esp,0x10
c001c19d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c1a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1a6:	83 c0 10             	add    eax,0x10
c001c1a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1ab:	83 ec 0c             	sub    esp,0xc
c001c1ae:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c1b2:	52                   	push   edx
c001c1b3:	8d 54 24 30          	lea    edx,[esp+0x30]
c001c1b7:	52                   	push   edx
c001c1b8:	6a 00                	push   0x0
c001c1ba:	68 00 04 00 00       	push   0x400
c001c1bf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c1c6:	ff d0                	call   eax
c001c1c8:	83 c4 20             	add    esp,0x20
c001c1cb:	83 ec 0c             	sub    esp,0xc
c001c1ce:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c1d5:	e8 2a c0 fe ff       	call   c0008204 <File::close()>
c001c1da:	83 c4 10             	add    esp,0x10
c001c1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c1e0:	83 ec 08             	sub    esp,0x8
c001c1e3:	6a 01                	push   0x1
c001c1e5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c1ec:	e8 b5 bf fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001c1f1:	83 c4 10             	add    esp,0x10
c001c1f4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c1fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1fd:	83 c0 0c             	add    eax,0xc
c001c200:	8b 00                	mov    eax,DWORD PTR [eax]
c001c202:	83 ec 0c             	sub    esp,0xc
c001c205:	8d 54 24 24          	lea    edx,[esp+0x24]
c001c209:	52                   	push   edx
c001c20a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001c20e:	52                   	push   edx
c001c20f:	6a 00                	push   0x0
c001c211:	6a 04                	push   0x4
c001c213:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001c21a:	ff d0                	call   eax
c001c21c:	83 c4 20             	add    esp,0x20
c001c21f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001c226:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001c22c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001c233:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001c23a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001c23d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001c244:	83 ec 0c             	sub    esp,0xc
c001c247:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001c24e:	e8 b1 bf fe ff       	call   c0008204 <File::close()>
c001c253:	83 c4 10             	add    esp,0x10
c001c256:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001c25d:	ba 00 00 00 00       	mov    edx,0x0
c001c262:	81 c4 3c 04 00 00    	add    esp,0x43c
c001c268:	5b                   	pop    ebx
c001c269:	5e                   	pop    esi
c001c26a:	5f                   	pop    edi
c001c26b:	5d                   	pop    ebp
c001c26c:	c3                   	ret    
c001c26d:	90                   	nop
c001c26e:	66 90                	xchg   ax,ax

c001c270 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001c270:	57                   	push   edi
c001c271:	56                   	push   esi
c001c272:	53                   	push   ebx
c001c273:	81 ec 50 02 00 00    	sub    esp,0x250
c001c279:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001c281:	74 0d                	je     c001c290 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001c283:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001c28b:	75 0f                	jne    c001c29c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001c28d:	8d 76 00             	lea    esi,[esi+0x0]
c001c290:	b8 04 00 00 00       	mov    eax,0x4
c001c295:	e9 3a 01 00 00       	jmp    c001c3d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c29a:	66 90                	xchg   ax,ax
c001c29c:	83 ec 08             	sub    esp,0x8
c001c29f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c2a6:	50                   	push   eax
c001c2a7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001c2ae:	e8 4a 86 fe ff       	call   c00048fd <f_readdir>
c001c2b3:	83 c4 10             	add    esp,0x10
c001c2b6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001c2bd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001c2c4:	83 ec 0c             	sub    esp,0xc
c001c2c7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c2ce:	83 c0 16             	add    eax,0x16
c001c2d1:	50                   	push   eax
c001c2d2:	e8 a9 42 fe ff       	call   c0000580 <strlen>
c001c2d7:	83 c4 10             	add    esp,0x10
c001c2da:	ba 00 00 00 00       	mov    edx,0x0
c001c2df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2e3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c2e7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001c2ee:	0f b6 c0             	movzx  eax,al
c001c2f1:	83 e0 10             	and    eax,0x10
c001c2f4:	74 0a                	je     c001c300 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001c2f6:	b8 02 00 00 00       	mov    eax,0x2
c001c2fb:	eb 0b                	jmp    c001c308 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001c2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001c300:	b8 01 00 00 00       	mov    eax,0x1
c001c305:	8d 76 00             	lea    esi,[esi+0x0]
c001c308:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c30c:	83 ec 08             	sub    esp,0x8
c001c30f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001c316:	83 c0 16             	add    eax,0x16
c001c319:	50                   	push   eax
c001c31a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c31e:	83 c0 10             	add    eax,0x10
c001c321:	50                   	push   eax
c001c322:	e8 29 43 fe ff       	call   c0000650 <strcpy>
c001c327:	83 c4 10             	add    esp,0x10
c001c32a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001c331:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001c338:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c33c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001c343:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001c34a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001c351:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001c358:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001c35f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001c366:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001c36d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001c374:	89 c6                	mov    esi,eax
c001c376:	89 d7                	mov    edi,edx
c001c378:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c37a:	89 c8                	mov    eax,ecx
c001c37c:	89 fa                	mov    edx,edi
c001c37e:	89 f3                	mov    ebx,esi
c001c380:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001c387:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001c38e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001c395:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001c39c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c3a2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001c3a9:	0f be c0             	movsx  eax,al
c001c3ac:	85 c0                	test   eax,eax
c001c3ae:	75 08                	jne    c001c3b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001c3b0:	b8 07 00 00 00       	mov    eax,0x7
c001c3b5:	eb 1d                	jmp    c001c3d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c3b7:	90                   	nop
c001c3b8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001c3bf:	85 c0                	test   eax,eax
c001c3c1:	75 09                	jne    c001c3cc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001c3c3:	b8 00 00 00 00       	mov    eax,0x0
c001c3c8:	eb 0a                	jmp    c001c3d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001c3ca:	66 90                	xchg   ax,ax
c001c3cc:	b8 01 00 00 00       	mov    eax,0x1
c001c3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3d4:	81 c4 50 02 00 00    	add    esp,0x250
c001c3da:	5b                   	pop    ebx
c001c3db:	5e                   	pop    esi
c001c3dc:	5f                   	pop    edi
c001c3dd:	c3                   	ret    
c001c3de:	66 90                	xchg   ax,ax

c001c3e0 <FAT::read(void*, unsigned long, void*, int*)>:
c001c3e0:	83 ec 1c             	sub    esp,0x1c
c001c3e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c3e8:	74 0a                	je     c001c3f4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001c3ea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c3ef:	75 0b                	jne    c001c3fc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001c3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c3f4:	b8 04 00 00 00       	mov    eax,0x4
c001c3f9:	eb 41                	jmp    c001c43c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c3fb:	90                   	nop
c001c3fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c400:	50                   	push   eax
c001c401:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c405:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c409:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c40d:	e8 32 7d fe ff       	call   c0004144 <f_read>
c001c412:	83 c4 10             	add    esp,0x10
c001c415:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c419:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c41d:	89 c2                	mov    edx,eax
c001c41f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c423:	89 10                	mov    DWORD PTR [eax],edx
c001c425:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c429:	85 c0                	test   eax,eax
c001c42b:	75 07                	jne    c001c434 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001c42d:	b8 00 00 00 00       	mov    eax,0x0
c001c432:	eb 08                	jmp    c001c43c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001c434:	b8 01 00 00 00       	mov    eax,0x1
c001c439:	8d 76 00             	lea    esi,[esi+0x0]
c001c43c:	83 c4 1c             	add    esp,0x1c
c001c43f:	c3                   	ret    

c001c440 <FAT::write(void*, unsigned long, void*, int*)>:
c001c440:	83 ec 1c             	sub    esp,0x1c
c001c443:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c448:	74 0a                	je     c001c454 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001c44a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001c44f:	75 0b                	jne    c001c45c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001c451:	8d 76 00             	lea    esi,[esi+0x0]
c001c454:	b8 04 00 00 00       	mov    eax,0x4
c001c459:	eb 41                	jmp    c001c49c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c45b:	90                   	nop
c001c45c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c460:	50                   	push   eax
c001c461:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c465:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c469:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c46d:	e8 b3 7e fe ff       	call   c0004325 <f_write>
c001c472:	83 c4 10             	add    esp,0x10
c001c475:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c479:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c47d:	89 c2                	mov    edx,eax
c001c47f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c483:	89 10                	mov    DWORD PTR [eax],edx
c001c485:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c489:	85 c0                	test   eax,eax
c001c48b:	75 07                	jne    c001c494 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c48d:	b8 00 00 00 00       	mov    eax,0x0
c001c492:	eb 08                	jmp    c001c49c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c494:	b8 01 00 00 00       	mov    eax,0x1
c001c499:	8d 76 00             	lea    esi,[esi+0x0]
c001c49c:	83 c4 1c             	add    esp,0x1c
c001c49f:	c3                   	ret    

c001c4a0 <FAT::close(void*)>:
c001c4a0:	83 ec 1c             	sub    esp,0x1c
c001c4a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c4a8:	75 0a                	jne    c001c4b4 <FAT::close(void*)+0x14>
c001c4aa:	b8 04 00 00 00       	mov    eax,0x4
c001c4af:	eb 3f                	jmp    c001c4f0 <FAT::close(void*)+0x50>
c001c4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c4b4:	83 ec 0c             	sub    esp,0xc
c001c4b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c4bb:	e8 71 81 fe ff       	call   c0004631 <f_close>
c001c4c0:	83 c4 10             	add    esp,0x10
c001c4c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4c7:	83 ec 0c             	sub    esp,0xc
c001c4ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c4ce:	e8 bd 31 ff ff       	call   c000f690 <free>
c001c4d3:	83 c4 10             	add    esp,0x10
c001c4d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4da:	85 c0                	test   eax,eax
c001c4dc:	75 0a                	jne    c001c4e8 <FAT::close(void*)+0x48>
c001c4de:	b8 00 00 00 00       	mov    eax,0x0
c001c4e3:	eb 0b                	jmp    c001c4f0 <FAT::close(void*)+0x50>
c001c4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4e8:	b8 01 00 00 00       	mov    eax,0x1
c001c4ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c4f0:	83 c4 1c             	add    esp,0x1c
c001c4f3:	c3                   	ret    

c001c4f4 <FAT::closeDir(void*)>:
c001c4f4:	83 ec 1c             	sub    esp,0x1c
c001c4f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c4fc:	75 0a                	jne    c001c508 <FAT::closeDir(void*)+0x14>
c001c4fe:	b8 04 00 00 00       	mov    eax,0x4
c001c503:	eb 3f                	jmp    c001c544 <FAT::closeDir(void*)+0x50>
c001c505:	8d 76 00             	lea    esi,[esi+0x0]
c001c508:	83 ec 0c             	sub    esp,0xc
c001c50b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c50f:	e8 c7 83 fe ff       	call   c00048db <f_closedir>
c001c514:	83 c4 10             	add    esp,0x10
c001c517:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c51b:	83 ec 0c             	sub    esp,0xc
c001c51e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c522:	e8 69 31 ff ff       	call   c000f690 <free>
c001c527:	83 c4 10             	add    esp,0x10
c001c52a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c52e:	85 c0                	test   eax,eax
c001c530:	75 0a                	jne    c001c53c <FAT::closeDir(void*)+0x48>
c001c532:	b8 00 00 00 00       	mov    eax,0x0
c001c537:	eb 0b                	jmp    c001c544 <FAT::closeDir(void*)+0x50>
c001c539:	8d 76 00             	lea    esi,[esi+0x0]
c001c53c:	b8 01 00 00 00       	mov    eax,0x1
c001c541:	8d 76 00             	lea    esi,[esi+0x0]
c001c544:	83 c4 1c             	add    esp,0x1c
c001c547:	c3                   	ret    

c001c548 <FAT::truncate(void*, unsigned long long)>:
c001c548:	83 ec 2c             	sub    esp,0x2c
c001c54b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c54f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c553:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c557:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c55b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c560:	75 0a                	jne    c001c56c <FAT::truncate(void*, unsigned long long)+0x24>
c001c562:	b8 04 00 00 00       	mov    eax,0x4
c001c567:	eb 47                	jmp    c001c5b0 <FAT::truncate(void*, unsigned long long)+0x68>
c001c569:	8d 76 00             	lea    esi,[esi+0x0]
c001c56c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c570:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c573:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c577:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001c57f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c583:	83 ec 08             	sub    esp,0x8
c001c586:	50                   	push   eax
c001c587:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c58b:	e8 d0 80 fe ff       	call   c0004660 <f_lseek>
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c597:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c59b:	85 c0                	test   eax,eax
c001c59d:	75 09                	jne    c001c5a8 <FAT::truncate(void*, unsigned long long)+0x60>
c001c59f:	b8 00 00 00 00       	mov    eax,0x0
c001c5a4:	eb 0a                	jmp    c001c5b0 <FAT::truncate(void*, unsigned long long)+0x68>
c001c5a6:	66 90                	xchg   ax,ax
c001c5a8:	b8 01 00 00 00       	mov    eax,0x1
c001c5ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c5b0:	83 c4 2c             	add    esp,0x2c
c001c5b3:	c3                   	ret    

c001c5b4 <FAT::seek(void*, unsigned long long)>:
c001c5b4:	83 ec 2c             	sub    esp,0x2c
c001c5b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c5bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c5bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5c7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c5cc:	75 0a                	jne    c001c5d8 <FAT::seek(void*, unsigned long long)+0x24>
c001c5ce:	b8 04 00 00 00       	mov    eax,0x4
c001c5d3:	eb 33                	jmp    c001c608 <FAT::seek(void*, unsigned long long)+0x54>
c001c5d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c5d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5dc:	83 ec 08             	sub    esp,0x8
c001c5df:	50                   	push   eax
c001c5e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c5e4:	e8 77 80 fe ff       	call   c0004660 <f_lseek>
c001c5e9:	83 c4 10             	add    esp,0x10
c001c5ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5f4:	85 c0                	test   eax,eax
c001c5f6:	75 08                	jne    c001c600 <FAT::seek(void*, unsigned long long)+0x4c>
c001c5f8:	b8 00 00 00 00       	mov    eax,0x0
c001c5fd:	eb 09                	jmp    c001c608 <FAT::seek(void*, unsigned long long)+0x54>
c001c5ff:	90                   	nop
c001c600:	b8 01 00 00 00       	mov    eax,0x1
c001c605:	8d 76 00             	lea    esi,[esi+0x0]
c001c608:	83 c4 2c             	add    esp,0x2c
c001c60b:	c3                   	ret    

c001c60c <fatWrapperReadDisk>:
c001c60c:	53                   	push   ebx
c001c60d:	83 ec 18             	sub    esp,0x18
c001c610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c614:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c618:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c61d:	8b 0c 85 e0 0a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf520]
c001c624:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c628:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c62c:	ba 00 00 00 00       	mov    edx,0x0
c001c631:	83 ec 0c             	sub    esp,0xc
c001c634:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c638:	53                   	push   ebx
c001c639:	52                   	push   edx
c001c63a:	50                   	push   eax
c001c63b:	51                   	push   ecx
c001c63c:	e8 d5 e3 fe ff       	call   c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>
c001c641:	83 c4 20             	add    esp,0x20
c001c644:	83 c4 18             	add    esp,0x18
c001c647:	5b                   	pop    ebx
c001c648:	c3                   	ret    
c001c649:	8d 76 00             	lea    esi,[esi+0x0]

c001c64c <fatWrapperWriteDisk>:
c001c64c:	53                   	push   ebx
c001c64d:	83 ec 18             	sub    esp,0x18
c001c650:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c654:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c658:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c65d:	8b 0c 85 e0 0a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf520]
c001c664:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c668:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c66c:	ba 00 00 00 00       	mov    edx,0x0
c001c671:	83 ec 0c             	sub    esp,0xc
c001c674:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c678:	53                   	push   ebx
c001c679:	52                   	push   edx
c001c67a:	50                   	push   eax
c001c67b:	51                   	push   ecx
c001c67c:	e8 01 e4 fe ff       	call   c000aa82 <LogicalDisk::write(unsigned long long, int, void*)>
c001c681:	83 c4 20             	add    esp,0x20
c001c684:	83 c4 18             	add    esp,0x18
c001c687:	5b                   	pop    ebx
c001c688:	c3                   	ret    
c001c689:	8d 76 00             	lea    esi,[esi+0x0]

c001c68c <fatWrapperIoctl>:
c001c68c:	53                   	push   ebx
c001c68d:	83 ec 28             	sub    esp,0x28
c001c690:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c694:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c698:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c69c:	88 d0                	mov    al,dl
c001c69e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c6a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6a7:	83 f8 02             	cmp    eax,0x2
c001c6aa:	75 34                	jne    c001c6e0 <fatWrapperIoctl+0x54>
c001c6ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c6b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6b9:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c001c6c0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c6c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c6cc:	89 c2                	mov    edx,eax
c001c6ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6d2:	66 89 10             	mov    WORD PTR [eax],dx
c001c6d5:	b8 00 00 00 00       	mov    eax,0x0
c001c6da:	e9 c5 00 00 00       	jmp    c001c7a4 <fatWrapperIoctl+0x118>
c001c6df:	90                   	nop
c001c6e0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c6e5:	83 f8 01             	cmp    eax,0x1
c001c6e8:	75 6a                	jne    c001c754 <fatWrapperIoctl+0xc8>
c001c6ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c6ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6f2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c6f7:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c001c6fe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c704:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c70a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c710:	89 c8                	mov    eax,ecx
c001c712:	89 da                	mov    edx,ebx
c001c714:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c718:	c1 e0 0a             	shl    eax,0xa
c001c71b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c720:	8b 0c 8d e0 0a 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffcf520]
c001c727:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c72d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c733:	89 cb                	mov    ebx,ecx
c001c735:	c1 fb 1f             	sar    ebx,0x1f
c001c738:	53                   	push   ebx
c001c739:	51                   	push   ecx
c001c73a:	52                   	push   edx
c001c73b:	50                   	push   eax
c001c73c:	e8 83 55 00 00       	call   c0021cc4 <__udivdi3>
c001c741:	83 c4 10             	add    esp,0x10
c001c744:	89 c2                	mov    edx,eax
c001c746:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c74a:	89 10                	mov    DWORD PTR [eax],edx
c001c74c:	b8 00 00 00 00       	mov    eax,0x0
c001c751:	eb 51                	jmp    c001c7a4 <fatWrapperIoctl+0x118>
c001c753:	90                   	nop
c001c754:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c759:	85 c0                	test   eax,eax
c001c75b:	75 07                	jne    c001c764 <fatWrapperIoctl+0xd8>
c001c75d:	b8 00 00 00 00       	mov    eax,0x0
c001c762:	eb 40                	jmp    c001c7a4 <fatWrapperIoctl+0x118>
c001c764:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c769:	83 f8 03             	cmp    eax,0x3
c001c76c:	75 1a                	jne    c001c788 <fatWrapperIoctl+0xfc>
c001c76e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c772:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c776:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c77a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c780:	b8 00 00 00 00       	mov    eax,0x0
c001c785:	eb 1d                	jmp    c001c7a4 <fatWrapperIoctl+0x118>
c001c787:	90                   	nop
c001c788:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c78d:	83 f8 04             	cmp    eax,0x4
c001c790:	75 0a                	jne    c001c79c <fatWrapperIoctl+0x110>
c001c792:	b8 00 00 00 00       	mov    eax,0x0
c001c797:	eb 0b                	jmp    c001c7a4 <fatWrapperIoctl+0x118>
c001c799:	8d 76 00             	lea    esi,[esi+0x0]
c001c79c:	b8 04 00 00 00       	mov    eax,0x4
c001c7a1:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a4:	83 c4 28             	add    esp,0x28
c001c7a7:	5b                   	pop    ebx
c001c7a8:	c3                   	ret    
c001c7a9:	90                   	nop
c001c7aa:	66 90                	xchg   ax,ax

c001c7ac <FAT::FAT()>:
c001c7ac:	83 ec 1c             	sub    esp,0x1c
c001c7af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7b3:	83 ec 0c             	sub    esp,0xc
c001c7b6:	50                   	push   eax
c001c7b7:	e8 f6 b5 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	ba 9c 93 02 c0       	mov    edx,0xc002939c
c001c7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c7c8:	89 10                	mov    DWORD PTR [eax],edx
c001c7ca:	c7 05 80 34 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0033480,0x0
c001c7d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c7dc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c7e1:	7f 19                	jg     c001c7fc <FAT::FAT()+0x50>
c001c7e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7e7:	c7 04 85 a0 34 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffccb60],0xffffffff
c001c7f2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c7f7:	eb e3                	jmp    c001c7dc <FAT::FAT()+0x30>
c001c7f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c7fc:	90                   	nop
c001c7fd:	83 c4 1c             	add    esp,0x1c
c001c800:	c3                   	ret    
c001c801:	90                   	nop
c001c802:	66 90                	xchg   ax,ax

c001c804 <FAT::fixFilepath(char*)>:
c001c804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c808:	8a 00                	mov    al,BYTE PTR [eax]
c001c80a:	0f be c0             	movsx  eax,al
c001c80d:	83 f8 40             	cmp    eax,0x40
c001c810:	7e 2e                	jle    c001c840 <FAT::fixFilepath(char*)+0x3c>
c001c812:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c816:	8a 00                	mov    al,BYTE PTR [eax]
c001c818:	83 e8 41             	sub    eax,0x41
c001c81b:	88 c2                	mov    dl,al
c001c81d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c821:	88 10                	mov    BYTE PTR [eax],dl
c001c823:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c827:	8a 00                	mov    al,BYTE PTR [eax]
c001c829:	0f be c0             	movsx  eax,al
c001c82c:	8b 04 85 a0 34 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccb60]
c001c833:	83 c0 30             	add    eax,0x30
c001c836:	88 c2                	mov    dl,al
c001c838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c83c:	88 10                	mov    BYTE PTR [eax],dl
c001c83e:	66 90                	xchg   ax,ax
c001c840:	90                   	nop
c001c841:	c3                   	ret    
c001c842:	66 90                	xchg   ax,ax

c001c844 <FAT::open(char const*, void**, FileOpenMode)>:
c001c844:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c84a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c852:	74 0c                	je     c001c860 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c854:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c85c:	75 0e                	jne    c001c86c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c85e:	66 90                	xchg   ax,ax
c001c860:	b8 04 00 00 00       	mov    eax,0x4
c001c865:	e9 46 01 00 00       	jmp    c001c9b0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c86a:	66 90                	xchg   ax,ax
c001c86c:	83 ec 08             	sub    esp,0x8
c001c86f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c876:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c87a:	50                   	push   eax
c001c87b:	e8 d0 3d fe ff       	call   c0000650 <strcpy>
c001c880:	83 c4 10             	add    esp,0x10
c001c883:	83 ec 08             	sub    esp,0x8
c001c886:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c88a:	50                   	push   eax
c001c88b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c892:	e8 6d ff ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001c897:	83 c4 10             	add    esp,0x10
c001c89a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c8a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c8a9:	83 e0 01             	and    eax,0x1
c001c8ac:	74 12                	je     c001c8c0 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c8ae:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c8b5:	83 c8 01             	or     eax,0x1
c001c8b8:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c8bf:	90                   	nop
c001c8c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c8c7:	83 e0 04             	and    eax,0x4
c001c8ca:	74 24                	je     c001c8f0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c8cc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c8d3:	83 c8 30             	or     eax,0x30
c001c8d6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c8dd:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c8e4:	83 c8 02             	or     eax,0x2
c001c8e7:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c8ee:	66 90                	xchg   ax,ax
c001c8f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c8f7:	83 e0 02             	and    eax,0x2
c001c8fa:	74 14                	je     c001c910 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c8fc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c903:	83 c8 02             	or     eax,0x2
c001c906:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c90d:	8d 76 00             	lea    esi,[esi+0x0]
c001c910:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c917:	83 e0 08             	and    eax,0x8
c001c91a:	74 14                	je     c001c930 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c91c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c923:	83 c8 04             	or     eax,0x4
c001c926:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c92d:	8d 76 00             	lea    esi,[esi+0x0]
c001c930:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c937:	83 e0 10             	and    eax,0x10
c001c93a:	74 14                	je     c001c950 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c93c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c943:	83 c8 08             	or     eax,0x8
c001c946:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c94d:	8d 76 00             	lea    esi,[esi+0x0]
c001c950:	83 ec 0c             	sub    esp,0xc
c001c953:	68 28 02 00 00       	push   0x228
c001c958:	e8 23 2d ff ff       	call   c000f680 <malloc>
c001c95d:	83 c4 10             	add    esp,0x10
c001c960:	89 c2                	mov    edx,eax
c001c962:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c969:	89 10                	mov    DWORD PTR [eax],edx
c001c96b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c973:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c97a:	8b 00                	mov    eax,DWORD PTR [eax]
c001c97c:	83 ec 04             	sub    esp,0x4
c001c97f:	52                   	push   edx
c001c980:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c984:	52                   	push   edx
c001c985:	50                   	push   eax
c001c986:	e8 f6 74 fe ff       	call   c0003e81 <f_open>
c001c98b:	83 c4 10             	add    esp,0x10
c001c98e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c995:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c99d:	74 09                	je     c001c9a8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c99f:	b8 01 00 00 00       	mov    eax,0x1
c001c9a4:	eb 0a                	jmp    c001c9b0 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c9a6:	66 90                	xchg   ax,ax
c001c9a8:	b8 00 00 00 00       	mov    eax,0x0
c001c9ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c9b6:	c3                   	ret    
c001c9b7:	90                   	nop

c001c9b8 <FAT::openDir(char const*, void**)>:
c001c9b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c9be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c9c6:	74 0c                	je     c001c9d4 <FAT::openDir(char const*, void**)+0x1c>
c001c9c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c9d0:	75 0e                	jne    c001c9e0 <FAT::openDir(char const*, void**)+0x28>
c001c9d2:	66 90                	xchg   ax,ax
c001c9d4:	b8 04 00 00 00       	mov    eax,0x4
c001c9d9:	e9 82 00 00 00       	jmp    c001ca60 <FAT::openDir(char const*, void**)+0xa8>
c001c9de:	66 90                	xchg   ax,ax
c001c9e0:	83 ec 08             	sub    esp,0x8
c001c9e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c9ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c9ee:	50                   	push   eax
c001c9ef:	e8 5c 3c fe ff       	call   c0000650 <strcpy>
c001c9f4:	83 c4 10             	add    esp,0x10
c001c9f7:	83 ec 08             	sub    esp,0x8
c001c9fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9fe:	50                   	push   eax
c001c9ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ca06:	e8 f9 fd ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001ca0b:	83 c4 10             	add    esp,0x10
c001ca0e:	83 ec 0c             	sub    esp,0xc
c001ca11:	6a 30                	push   0x30
c001ca13:	e8 68 2c ff ff       	call   c000f680 <malloc>
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	89 c2                	mov    edx,eax
c001ca1d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ca24:	89 10                	mov    DWORD PTR [eax],edx
c001ca26:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ca2d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca2f:	83 ec 08             	sub    esp,0x8
c001ca32:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ca36:	52                   	push   edx
c001ca37:	50                   	push   eax
c001ca38:	e8 d3 7d fe ff       	call   c0004810 <f_opendir>
c001ca3d:	83 c4 10             	add    esp,0x10
c001ca40:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ca47:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001ca4f:	74 07                	je     c001ca58 <FAT::openDir(char const*, void**)+0xa0>
c001ca51:	b8 01 00 00 00       	mov    eax,0x1
c001ca56:	eb 08                	jmp    c001ca60 <FAT::openDir(char const*, void**)+0xa8>
c001ca58:	b8 00 00 00 00       	mov    eax,0x0
c001ca5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ca60:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ca66:	c3                   	ret    
c001ca67:	90                   	nop

c001ca68 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001ca68:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ca6e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001ca76:	75 0c                	jne    c001ca84 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001ca78:	b8 04 00 00 00       	mov    eax,0x4
c001ca7d:	e9 d6 00 00 00       	jmp    c001cb58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ca82:	66 90                	xchg   ax,ax
c001ca84:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001ca8c:	75 0a                	jne    c001ca98 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001ca8e:	b8 04 00 00 00       	mov    eax,0x4
c001ca93:	e9 c0 00 00 00       	jmp    c001cb58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001ca98:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001caa0:	75 0a                	jne    c001caac <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001caa2:	b8 04 00 00 00       	mov    eax,0x4
c001caa7:	e9 ac 00 00 00       	jmp    c001cb58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001caac:	83 ec 08             	sub    esp,0x8
c001caaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cab6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001cabd:	50                   	push   eax
c001cabe:	e8 8d 3b fe ff       	call   c0000650 <strcpy>
c001cac3:	83 c4 10             	add    esp,0x10
c001cac6:	83 ec 08             	sub    esp,0x8
c001cac9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001cad0:	50                   	push   eax
c001cad1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cad8:	e8 27 fd ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001cadd:	83 c4 10             	add    esp,0x10
c001cae0:	83 ec 08             	sub    esp,0x8
c001cae3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cae7:	50                   	push   eax
c001cae8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001caef:	50                   	push   eax
c001caf0:	e8 9a 7e fe ff       	call   c000498f <f_stat>
c001caf5:	83 c4 10             	add    esp,0x10
c001caf8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001caff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cb06:	85 c0                	test   eax,eax
c001cb08:	74 0a                	je     c001cb14 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001cb0a:	83 f8 04             	cmp    eax,0x4
c001cb0d:	74 39                	je     c001cb48 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cb0f:	eb 3f                	jmp    c001cb50 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001cb11:	8d 76 00             	lea    esi,[esi+0x0]
c001cb14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001cb18:	0f b6 c0             	movzx  eax,al
c001cb1b:	83 e0 10             	and    eax,0x10
c001cb1e:	0f 95 c2             	setne  dl
c001cb21:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001cb28:	88 10                	mov    BYTE PTR [eax],dl
c001cb2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2e:	ba 00 00 00 00       	mov    edx,0x0
c001cb33:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001cb3a:	89 01                	mov    DWORD PTR [ecx],eax
c001cb3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001cb3f:	b8 00 00 00 00       	mov    eax,0x0
c001cb44:	eb 12                	jmp    c001cb58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cb46:	66 90                	xchg   ax,ax
c001cb48:	b8 02 00 00 00       	mov    eax,0x2
c001cb4d:	eb 09                	jmp    c001cb58 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001cb4f:	90                   	nop
c001cb50:	b8 01 00 00 00       	mov    eax,0x1
c001cb55:	8d 76 00             	lea    esi,[esi+0x0]
c001cb58:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cb5e:	c3                   	ret    
c001cb5f:	90                   	nop

c001cb60 <FAT::unlink(char const*)>:
c001cb60:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001cb66:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001cb6e:	75 08                	jne    c001cb78 <FAT::unlink(char const*)+0x18>
c001cb70:	b8 04 00 00 00       	mov    eax,0x4
c001cb75:	eb 61                	jmp    c001cbd8 <FAT::unlink(char const*)+0x78>
c001cb77:	90                   	nop
c001cb78:	83 ec 08             	sub    esp,0x8
c001cb7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb82:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb86:	50                   	push   eax
c001cb87:	e8 c4 3a fe ff       	call   c0000650 <strcpy>
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	83 ec 08             	sub    esp,0x8
c001cb92:	8d 44 24 14          	lea    eax,[esp+0x14]
c001cb96:	50                   	push   eax
c001cb97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cb9e:	e8 61 fc ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001cba3:	83 c4 10             	add    esp,0x10
c001cba6:	83 ec 0c             	sub    esp,0xc
c001cba9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cbad:	50                   	push   eax
c001cbae:	e8 4e 80 fe ff       	call   c0004c01 <f_unlink>
c001cbb3:	83 c4 10             	add    esp,0x10
c001cbb6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cbbd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cbc4:	85 c0                	test   eax,eax
c001cbc6:	75 08                	jne    c001cbd0 <FAT::unlink(char const*)+0x70>
c001cbc8:	b8 00 00 00 00       	mov    eax,0x0
c001cbcd:	eb 09                	jmp    c001cbd8 <FAT::unlink(char const*)+0x78>
c001cbcf:	90                   	nop
c001cbd0:	b8 01 00 00 00       	mov    eax,0x1
c001cbd5:	8d 76 00             	lea    esi,[esi+0x0]
c001cbd8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cbde:	c3                   	ret    
c001cbdf:	90                   	nop

c001cbe0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001cbe0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001cbe6:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001cbed:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001cbf4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cbf8:	88 d0                	mov    al,dl
c001cbfa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cbfe:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001cc06:	75 0c                	jne    c001cc14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001cc08:	b8 04 00 00 00       	mov    eax,0x4
c001cc0d:	e9 7e 01 00 00       	jmp    c001cd90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001cc12:	66 90                	xchg   ax,ax
c001cc14:	83 ec 08             	sub    esp,0x8
c001cc17:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cc22:	50                   	push   eax
c001cc23:	e8 28 3a fe ff       	call   c0000650 <strcpy>
c001cc28:	83 c4 10             	add    esp,0x10
c001cc2b:	83 ec 08             	sub    esp,0x8
c001cc2e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cc32:	50                   	push   eax
c001cc33:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001cc3a:	e8 c5 fb ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001cc3f:	83 c4 10             	add    esp,0x10
c001cc42:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001cc4a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001cc52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc57:	83 e0 01             	and    eax,0x1
c001cc5a:	74 14                	je     c001cc70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001cc5c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cc63:	83 c8 01             	or     eax,0x1
c001cc66:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cc6d:	8d 76 00             	lea    esi,[esi+0x0]
c001cc70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc75:	83 e0 02             	and    eax,0x2
c001cc78:	74 12                	je     c001cc8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001cc7a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cc81:	83 c8 20             	or     eax,0x20
c001cc84:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cc8b:	90                   	nop
c001cc8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc91:	83 e0 04             	and    eax,0x4
c001cc94:	74 12                	je     c001cca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001cc96:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cc9d:	83 c8 04             	or     eax,0x4
c001cca0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001cca7:	90                   	nop
c001cca8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ccad:	83 e0 08             	and    eax,0x8
c001ccb0:	74 12                	je     c001ccc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001ccb2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ccb9:	83 c8 02             	or     eax,0x2
c001ccbc:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001ccc3:	90                   	nop
c001ccc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ccc9:	83 e0 01             	and    eax,0x1
c001cccc:	74 12                	je     c001cce0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001ccce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ccd5:	83 c8 01             	or     eax,0x1
c001ccd8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ccdf:	90                   	nop
c001cce0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cce5:	83 e0 02             	and    eax,0x2
c001cce8:	74 12                	je     c001ccfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001ccea:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ccf1:	83 c8 20             	or     eax,0x20
c001ccf4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001ccfb:	90                   	nop
c001ccfc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cd01:	83 e0 04             	and    eax,0x4
c001cd04:	74 12                	je     c001cd18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001cd06:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cd0d:	83 c8 04             	or     eax,0x4
c001cd10:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cd17:	90                   	nop
c001cd18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cd1d:	83 e0 08             	and    eax,0x8
c001cd20:	74 12                	je     c001cd34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001cd22:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001cd29:	83 c8 02             	or     eax,0x2
c001cd2c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cd33:	90                   	nop
c001cd34:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001cd3b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001cd42:	09 d0                	or     eax,edx
c001cd44:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001cd4b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001cd53:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001cd5b:	83 ec 04             	sub    esp,0x4
c001cd5e:	52                   	push   edx
c001cd5f:	50                   	push   eax
c001cd60:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cd64:	50                   	push   eax
c001cd65:	e8 0a 83 fe ff       	call   c0005074 <f_chmod>
c001cd6a:	83 c4 10             	add    esp,0x10
c001cd6d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001cd74:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001cd7b:	85 c0                	test   eax,eax
c001cd7d:	75 09                	jne    c001cd88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001cd7f:	b8 00 00 00 00       	mov    eax,0x0
c001cd84:	eb 0a                	jmp    c001cd90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001cd86:	66 90                	xchg   ax,ax
c001cd88:	b8 01 00 00 00       	mov    eax,0x1
c001cd8d:	8d 76 00             	lea    esi,[esi+0x0]
c001cd90:	81 c4 2c 01 00 00    	add    esp,0x12c
c001cd96:	c3                   	ret    
c001cd97:	90                   	nop

c001cd98 <FAT::rename(char const*, char const*)>:
c001cd98:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001cd9e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001cda6:	74 0c                	je     c001cdb4 <FAT::rename(char const*, char const*)+0x1c>
c001cda8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001cdb0:	75 0e                	jne    c001cdc0 <FAT::rename(char const*, char const*)+0x28>
c001cdb2:	66 90                	xchg   ax,ax
c001cdb4:	b8 04 00 00 00       	mov    eax,0x4
c001cdb9:	e9 9e 00 00 00       	jmp    c001ce5c <FAT::rename(char const*, char const*)+0xc4>
c001cdbe:	66 90                	xchg   ax,ax
c001cdc0:	83 ec 08             	sub    esp,0x8
c001cdc3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cdca:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001cdd1:	50                   	push   eax
c001cdd2:	e8 79 38 fe ff       	call   c0000650 <strcpy>
c001cdd7:	83 c4 10             	add    esp,0x10
c001cdda:	83 ec 08             	sub    esp,0x8
c001cddd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001cde4:	50                   	push   eax
c001cde5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001cdec:	e8 13 fa ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001cdf1:	83 c4 10             	add    esp,0x10
c001cdf4:	83 ec 08             	sub    esp,0x8
c001cdf7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001cdfe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce02:	50                   	push   eax
c001ce03:	e8 48 38 fe ff       	call   c0000650 <strcpy>
c001ce08:	83 c4 10             	add    esp,0x10
c001ce0b:	83 ec 08             	sub    esp,0x8
c001ce0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ce12:	50                   	push   eax
c001ce13:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ce1a:	e8 e5 f9 ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001ce1f:	83 c4 10             	add    esp,0x10
c001ce22:	83 ec 08             	sub    esp,0x8
c001ce25:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ce29:	50                   	push   eax
c001ce2a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ce31:	50                   	push   eax
c001ce32:	e8 85 80 fe ff       	call   c0004ebc <f_rename>
c001ce37:	83 c4 10             	add    esp,0x10
c001ce3a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ce41:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ce48:	85 c0                	test   eax,eax
c001ce4a:	75 08                	jne    c001ce54 <FAT::rename(char const*, char const*)+0xbc>
c001ce4c:	b8 00 00 00 00       	mov    eax,0x0
c001ce51:	eb 09                	jmp    c001ce5c <FAT::rename(char const*, char const*)+0xc4>
c001ce53:	90                   	nop
c001ce54:	b8 01 00 00 00       	mov    eax,0x1
c001ce59:	8d 76 00             	lea    esi,[esi+0x0]
c001ce5c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ce62:	c3                   	ret    
c001ce63:	90                   	nop

c001ce64 <FAT::mkdir(char const*)>:
c001ce64:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ce6a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ce72:	75 08                	jne    c001ce7c <FAT::mkdir(char const*)+0x18>
c001ce74:	b8 04 00 00 00       	mov    eax,0x4
c001ce79:	eb 61                	jmp    c001cedc <FAT::mkdir(char const*)+0x78>
c001ce7b:	90                   	nop
c001ce7c:	83 ec 08             	sub    esp,0x8
c001ce7f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ce86:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ce8a:	50                   	push   eax
c001ce8b:	e8 c0 37 fe ff       	call   c0000650 <strcpy>
c001ce90:	83 c4 10             	add    esp,0x10
c001ce93:	83 ec 08             	sub    esp,0x8
c001ce96:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ce9a:	50                   	push   eax
c001ce9b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001cea2:	e8 5d f9 ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001cea7:	83 c4 10             	add    esp,0x10
c001ceaa:	83 ec 0c             	sub    esp,0xc
c001cead:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ceb1:	50                   	push   eax
c001ceb2:	e8 6a 7e fe ff       	call   c0004d21 <f_mkdir>
c001ceb7:	83 c4 10             	add    esp,0x10
c001ceba:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001cec1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001cec8:	85 c0                	test   eax,eax
c001ceca:	75 08                	jne    c001ced4 <FAT::mkdir(char const*)+0x70>
c001cecc:	b8 00 00 00 00       	mov    eax,0x0
c001ced1:	eb 09                	jmp    c001cedc <FAT::mkdir(char const*)+0x78>
c001ced3:	90                   	nop
c001ced4:	b8 01 00 00 00       	mov    eax,0x1
c001ced9:	8d 76 00             	lea    esi,[esi+0x0]
c001cedc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cee2:	c3                   	ret    
c001cee3:	90                   	nop

c001cee4 <FAT::exists(char const*)>:
c001cee4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ceea:	83 ec 08             	sub    esp,0x8
c001ceed:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cef4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cef8:	50                   	push   eax
c001cef9:	e8 52 37 fe ff       	call   c0000650 <strcpy>
c001cefe:	83 c4 10             	add    esp,0x10
c001cf01:	83 ec 08             	sub    esp,0x8
c001cf04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001cf08:	50                   	push   eax
c001cf09:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001cf10:	e8 ef f8 ff ff       	call   c001c804 <FAT::fixFilepath(char*)>
c001cf15:	83 c4 10             	add    esp,0x10
c001cf18:	83 ec 08             	sub    esp,0x8
c001cf1b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001cf22:	50                   	push   eax
c001cf23:	8d 44 24 10          	lea    eax,[esp+0x10]
c001cf27:	50                   	push   eax
c001cf28:	e8 62 7a fe ff       	call   c000498f <f_stat>
c001cf2d:	83 c4 10             	add    esp,0x10
c001cf30:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001cf37:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001cf3e:	85 c0                	test   eax,eax
c001cf40:	75 06                	jne    c001cf48 <FAT::exists(char const*)+0x64>
c001cf42:	b0 01                	mov    al,0x1
c001cf44:	eb 06                	jmp    c001cf4c <FAT::exists(char const*)+0x68>
c001cf46:	66 90                	xchg   ax,ax
c001cf48:	b0 00                	mov    al,0x0
c001cf4a:	66 90                	xchg   ax,ax
c001cf4c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001cf52:	c3                   	ret    
c001cf53:	90                   	nop

c001cf54 <isoReadDiscSectorHelper>:
c001cf54:	83 ec 2c             	sub    esp,0x2c
c001cf57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cf5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cf5f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001cf64:	83 e8 41             	sub    eax,0x41
c001cf67:	8b 0c 85 e0 0a 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffcf520]
c001cf6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf72:	ba 00 00 00 00       	mov    edx,0x0
c001cf77:	83 ec 0c             	sub    esp,0xc
c001cf7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cf7e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cf82:	52                   	push   edx
c001cf83:	50                   	push   eax
c001cf84:	51                   	push   ecx
c001cf85:	e8 8c da fe ff       	call   c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>
c001cf8a:	83 c4 20             	add    esp,0x20
c001cf8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf91:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cf96:	74 0c                	je     c001cfa4 <isoReadDiscSectorHelper+0x50>
c001cf98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf9c:	c1 e0 0b             	shl    eax,0xb
c001cf9f:	eb 0b                	jmp    c001cfac <isoReadDiscSectorHelper+0x58>
c001cfa1:	8d 76 00             	lea    esi,[esi+0x0]
c001cfa4:	b8 00 00 00 00       	mov    eax,0x0
c001cfa9:	8d 76 00             	lea    esi,[esi+0x0]
c001cfac:	83 c4 2c             	add    esp,0x2c
c001cfaf:	c3                   	ret    

c001cfb0 <iso_kprintf>:
c001cfb0:	83 ec 0c             	sub    esp,0xc
c001cfb3:	83 ec 08             	sub    esp,0x8
c001cfb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfba:	68 74 90 02 c0       	push   0xc0029074
c001cfbf:	e8 a2 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cfc4:	83 c4 10             	add    esp,0x10
c001cfc7:	90                   	nop
c001cfc8:	83 c4 0c             	add    esp,0xc
c001cfcb:	c3                   	ret    

c001cfcc <iso_kprintfd>:
c001cfcc:	83 ec 0c             	sub    esp,0xc
c001cfcf:	83 ec 08             	sub    esp,0x8
c001cfd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfd6:	68 3e 86 02 c0       	push   0xc002863e
c001cfdb:	e8 86 9f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001cfe0:	83 c4 10             	add    esp,0x10
c001cfe3:	90                   	nop
c001cfe4:	83 c4 0c             	add    esp,0xc
c001cfe7:	c3                   	ret    

c001cfe8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001cfe8:	b8 08 00 00 00       	mov    eax,0x8
c001cfed:	c3                   	ret    

c001cfee <ISO9660::truncate(void*, unsigned long long)>:
c001cfee:	b8 01 00 00 00       	mov    eax,0x1
c001cff3:	c3                   	ret    

c001cff4 <ISO9660::getName()>:
c001cff4:	b8 00 94 02 c0       	mov    eax,0xc0029400
c001cff9:	c3                   	ret    

c001cffa <ISO9660::closeDir(void*)>:
c001cffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cffe:	8b 00                	mov    eax,DWORD PTR [eax]
c001d000:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001d003:	90                   	nop

c001d004 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001d004:	b8 01 00 00 00       	mov    eax,0x1
c001d009:	c3                   	ret    

c001d00a <ISO9660::unlink(char const*)>:
c001d00a:	b8 01 00 00 00       	mov    eax,0x1
c001d00f:	c3                   	ret    

c001d010 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001d010:	b8 03 00 00 00       	mov    eax,0x3
c001d015:	c3                   	ret    

c001d016 <ISO9660::rename(char const*, char const*)>:
c001d016:	b8 01 00 00 00       	mov    eax,0x1
c001d01b:	c3                   	ret    

c001d01c <ISO9660::mkdir(char const*)>:
c001d01c:	b8 01 00 00 00       	mov    eax,0x1
c001d021:	c3                   	ret    

c001d022 <ISO9660::~ISO9660()>:
c001d022:	83 ec 0c             	sub    esp,0xc
c001d025:	ba 40 95 02 c0       	mov    edx,0xc0029540
c001d02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02e:	89 10                	mov    DWORD PTR [eax],edx
c001d030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d034:	83 ec 0c             	sub    esp,0xc
c001d037:	50                   	push   eax
c001d038:	e8 99 ad fe ff       	call   c0007dd6 <Filesystem::~Filesystem()>
c001d03d:	83 c4 10             	add    esp,0x10
c001d040:	90                   	nop
c001d041:	83 c4 0c             	add    esp,0xc
c001d044:	c3                   	ret    
c001d045:	90                   	nop

c001d046 <ISO9660::~ISO9660()>:
c001d046:	83 ec 0c             	sub    esp,0xc
c001d049:	83 ec 0c             	sub    esp,0xc
c001d04c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d050:	e8 cd ff ff ff       	call   c001d022 <ISO9660::~ISO9660()>
c001d055:	83 c4 10             	add    esp,0x10
c001d058:	83 ec 08             	sub    esp,0x8
c001d05b:	6a 08                	push   0x8
c001d05d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d061:	e8 22 02 ff ff       	call   c000d288 <operator delete(void*, unsigned long)>
c001d066:	83 c4 10             	add    esp,0x10
c001d069:	83 c4 0c             	add    esp,0xc
c001d06c:	c3                   	ret    
c001d06d:	90                   	nop

c001d06e <ISO9660::exists(char const*)>:
c001d06e:	83 ec 18             	sub    esp,0x18
c001d071:	68 1b 94 02 c0       	push   0xc002941b
c001d076:	e8 59 2a ff ff       	call   c000fad4 <KePanic(char const*)>
c001d07b:	31 c0                	xor    eax,eax
c001d07d:	83 c4 1c             	add    esp,0x1c
c001d080:	c3                   	ret    
c001d081:	90                   	nop

c001d082 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d082:	56                   	push   esi
c001d083:	53                   	push   ebx
c001d084:	53                   	push   ebx
c001d085:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d089:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d08d:	85 db                	test   ebx,ebx
c001d08f:	0f 84 ca 00 00 00    	je     c001d15f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d095:	85 f6                	test   esi,esi
c001d097:	0f 84 c2 00 00 00    	je     c001d15f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001d09d:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001d0a2:	b8 03 00 00 00       	mov    eax,0x3
c001d0a7:	0f 85 b7 00 00 00    	jne    c001d164 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d0ad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d0af:	38 0d 80 35 03 c0    	cmp    BYTE PTR ds:0xc0033580,cl
c001d0b5:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d0bc:	74 1b                	je     c001d0d9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001d0be:	85 c0                	test   eax,eax
c001d0c0:	74 10                	je     c001d0d2 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001d0c2:	83 ec 0c             	sub    esp,0xc
c001d0c5:	68 39 94 02 c0       	push   0xc0029439
c001d0ca:	e8 05 2a ff ff       	call   c000fad4 <KePanic(char const*)>
c001d0cf:	83 c4 10             	add    esp,0x10
c001d0d2:	8a 03                	mov    al,BYTE PTR [ebx]
c001d0d4:	a2 80 35 03 c0       	mov    ds:0xc0033580,al
c001d0d9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d0dc:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d0e3:	85 c0                	test   eax,eax
c001d0e5:	74 09                	je     c001d0f0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001d0e7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d0ee:	74 48                	je     c001d138 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001d0f0:	83 ec 0c             	sub    esp,0xc
c001d0f3:	68 49 94 02 c0       	push   0xc0029449
c001d0f8:	e8 69 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d0fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d100:	83 c4 10             	add    esp,0x10
c001d103:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d10a:	85 c0                	test   eax,eax
c001d10c:	74 17                	je     c001d125 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001d10e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d115:	83 ec 0c             	sub    esp,0xc
c001d118:	68 69 94 02 c0       	push   0xc0029469
c001d11d:	e8 44 9e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d122:	83 c4 10             	add    esp,0x10
c001d125:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d12c:	83 ec 0c             	sub    esp,0xc
c001d12f:	50                   	push   eax
c001d130:	e8 12 9b fe ff       	call   c0006c47 <init_percd>
c001d135:	83 c4 10             	add    esp,0x10
c001d138:	51                   	push   ecx
c001d139:	83 c3 03             	add    ebx,0x3
c001d13c:	51                   	push   ecx
c001d13d:	6a 00                	push   0x0
c001d13f:	53                   	push   ebx
c001d140:	e8 c5 95 fe ff       	call   c000670a <iso_open>
c001d145:	83 c4 10             	add    esp,0x10
c001d148:	89 c2                	mov    edx,eax
c001d14a:	b8 01 00 00 00       	mov    eax,0x1
c001d14f:	83 fa ff             	cmp    edx,0xffffffff
c001d152:	74 10                	je     c001d164 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d154:	83 c2 32             	add    edx,0x32
c001d157:	31 c0                	xor    eax,eax
c001d159:	01 d2                	add    edx,edx
c001d15b:	89 16                	mov    DWORD PTR [esi],edx
c001d15d:	eb 05                	jmp    c001d164 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001d15f:	b8 04 00 00 00       	mov    eax,0x4
c001d164:	5a                   	pop    edx
c001d165:	5b                   	pop    ebx
c001d166:	5e                   	pop    esi
c001d167:	c3                   	ret    

c001d168 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001d168:	53                   	push   ebx
c001d169:	83 ec 08             	sub    esp,0x8
c001d16c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d170:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d174:	85 c0                	test   eax,eax
c001d176:	74 2d                	je     c001d1a5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d178:	85 db                	test   ebx,ebx
c001d17a:	74 29                	je     c001d1a5 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001d17c:	52                   	push   edx
c001d17d:	b9 02 00 00 00       	mov    ecx,0x2
c001d182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d186:	99                   	cdq    
c001d187:	f7 f9                	idiv   ecx
c001d189:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d18d:	83 e8 32             	sub    eax,0x32
c001d190:	50                   	push   eax
c001d191:	e8 1c 96 fe ff       	call   c00067b2 <iso_read>
c001d196:	83 c4 10             	add    esp,0x10
c001d199:	89 03                	mov    DWORD PTR [ebx],eax
c001d19b:	09 d0                	or     eax,edx
c001d19d:	0f 94 c0             	sete   al
c001d1a0:	0f b6 c0             	movzx  eax,al
c001d1a3:	eb 05                	jmp    c001d1aa <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001d1a5:	b8 04 00 00 00       	mov    eax,0x4
c001d1aa:	83 c4 08             	add    esp,0x8
c001d1ad:	5b                   	pop    ebx
c001d1ae:	c3                   	ret    
c001d1af:	90                   	nop

c001d1b0 <ISO9660::seek(void*, unsigned long long)>:
c001d1b0:	57                   	push   edi
c001d1b1:	b8 04 00 00 00       	mov    eax,0x4
c001d1b6:	56                   	push   esi
c001d1b7:	51                   	push   ecx
c001d1b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1bc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d1c0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d1c4:	85 d2                	test   edx,edx
c001d1c6:	74 26                	je     c001d1ee <ISO9660::seek(void*, unsigned long long)+0x3e>
c001d1c8:	89 d0                	mov    eax,edx
c001d1ca:	b9 02 00 00 00       	mov    ecx,0x2
c001d1cf:	6a 00                	push   0x0
c001d1d1:	99                   	cdq    
c001d1d2:	f7 f9                	idiv   ecx
c001d1d4:	57                   	push   edi
c001d1d5:	56                   	push   esi
c001d1d6:	83 e8 32             	sub    eax,0x32
c001d1d9:	50                   	push   eax
c001d1da:	e8 e9 96 fe ff       	call   c00068c8 <iso_seek>
c001d1df:	83 c4 10             	add    esp,0x10
c001d1e2:	31 f0                	xor    eax,esi
c001d1e4:	31 fa                	xor    edx,edi
c001d1e6:	09 d0                	or     eax,edx
c001d1e8:	0f 95 c0             	setne  al
c001d1eb:	0f b6 c0             	movzx  eax,al
c001d1ee:	5a                   	pop    edx
c001d1ef:	5e                   	pop    esi
c001d1f0:	5f                   	pop    edi
c001d1f1:	c3                   	ret    

c001d1f2 <ISO9660::tell(void*, unsigned long long*)>:
c001d1f2:	53                   	push   ebx
c001d1f3:	83 ec 08             	sub    esp,0x8
c001d1f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d1fe:	85 c0                	test   eax,eax
c001d200:	74 24                	je     c001d226 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d202:	85 db                	test   ebx,ebx
c001d204:	74 20                	je     c001d226 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001d206:	b9 02 00 00 00       	mov    ecx,0x2
c001d20b:	99                   	cdq    
c001d20c:	f7 f9                	idiv   ecx
c001d20e:	83 ec 0c             	sub    esp,0xc
c001d211:	83 e8 32             	sub    eax,0x32
c001d214:	50                   	push   eax
c001d215:	e8 32 97 fe ff       	call   c000694c <iso_tell>
c001d21a:	83 c4 10             	add    esp,0x10
c001d21d:	89 03                	mov    DWORD PTR [ebx],eax
c001d21f:	31 c0                	xor    eax,eax
c001d221:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001d224:	eb 05                	jmp    c001d22b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001d226:	b8 04 00 00 00       	mov    eax,0x4
c001d22b:	83 c4 08             	add    esp,0x8
c001d22e:	5b                   	pop    ebx
c001d22f:	c3                   	ret    

c001d230 <ISO9660::stat(void*, unsigned long long*)>:
c001d230:	56                   	push   esi
c001d231:	53                   	push   ebx
c001d232:	83 ec 10             	sub    esp,0x10
c001d235:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d239:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d23d:	68 8d 94 02 c0       	push   0xc002948d
c001d242:	e8 1f 9d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d247:	83 c4 10             	add    esp,0x10
c001d24a:	85 db                	test   ebx,ebx
c001d24c:	74 2a                	je     c001d278 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d24e:	85 f6                	test   esi,esi
c001d250:	74 26                	je     c001d278 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001d252:	89 d8                	mov    eax,ebx
c001d254:	b9 02 00 00 00       	mov    ecx,0x2
c001d259:	99                   	cdq    
c001d25a:	83 ec 0c             	sub    esp,0xc
c001d25d:	f7 f9                	idiv   ecx
c001d25f:	83 e8 32             	sub    eax,0x32
c001d262:	50                   	push   eax
c001d263:	e8 15 97 fe ff       	call   c000697d <iso_total>
c001d268:	83 c4 10             	add    esp,0x10
c001d26b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001d272:	89 06                	mov    DWORD PTR [esi],eax
c001d274:	31 c0                	xor    eax,eax
c001d276:	eb 05                	jmp    c001d27d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001d278:	b8 04 00 00 00       	mov    eax,0x4
c001d27d:	5a                   	pop    edx
c001d27e:	5b                   	pop    ebx
c001d27f:	5e                   	pop    esi
c001d280:	c3                   	ret    
c001d281:	90                   	nop

c001d282 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d282:	55                   	push   ebp
c001d283:	57                   	push   edi
c001d284:	56                   	push   esi
c001d285:	53                   	push   ebx
c001d286:	83 ec 18             	sub    esp,0x18
c001d289:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d28d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d291:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d295:	68 95 94 02 c0       	push   0xc0029495
c001d29a:	e8 c7 9c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d29f:	83 c4 10             	add    esp,0x10
c001d2a2:	85 ff                	test   edi,edi
c001d2a4:	0f 94 c0             	sete   al
c001d2a7:	85 f6                	test   esi,esi
c001d2a9:	0f 94 c2             	sete   dl
c001d2ac:	09 d0                	or     eax,edx
c001d2ae:	a8 01                	test   al,0x1
c001d2b0:	0f 85 dd 00 00 00    	jne    c001d393 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d2b6:	85 db                	test   ebx,ebx
c001d2b8:	0f 84 d5 00 00 00    	je     c001d393 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001d2be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d2c1:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001d2c7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d2ce:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d2d5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001d2d7:	38 0d 80 35 03 c0    	cmp    BYTE PTR ds:0xc0033580,cl
c001d2dd:	74 1b                	je     c001d2fa <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001d2df:	85 c0                	test   eax,eax
c001d2e1:	74 10                	je     c001d2f3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001d2e3:	83 ec 0c             	sub    esp,0xc
c001d2e6:	68 39 94 02 c0       	push   0xc0029439
c001d2eb:	e8 e4 27 ff ff       	call   c000fad4 <KePanic(char const*)>
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	8a 03                	mov    al,BYTE PTR [ebx]
c001d2f5:	a2 80 35 03 c0       	mov    ds:0xc0033580,al
c001d2fa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d2fd:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d304:	85 c0                	test   eax,eax
c001d306:	74 09                	je     c001d311 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001d308:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d30f:	74 51                	je     c001d362 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001d311:	83 ec 0c             	sub    esp,0xc
c001d314:	68 9d 94 02 c0       	push   0xc002949d
c001d319:	e8 48 9c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d31e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d321:	83 c4 10             	add    esp,0x10
c001d324:	83 3c 85 dc 09 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffcf624],0x0
c001d32c:	74 21                	je     c001d34f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001d32e:	83 ec 0c             	sub    esp,0xc
c001d331:	68 bd 94 02 c0       	push   0xc00294bd
c001d336:	e8 2b 9c fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d33b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d348:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d34f:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d356:	83 ec 0c             	sub    esp,0xc
c001d359:	50                   	push   eax
c001d35a:	e8 e8 98 fe ff       	call   c0006c47 <init_percd>
c001d35f:	83 c4 10             	add    esp,0x10
c001d362:	52                   	push   edx
c001d363:	83 c3 03             	add    ebx,0x3
c001d366:	52                   	push   edx
c001d367:	6a 00                	push   0x0
c001d369:	53                   	push   ebx
c001d36a:	e8 9b 93 fe ff       	call   c000670a <iso_open>
c001d36f:	83 c4 10             	add    esp,0x10
c001d372:	83 f8 ff             	cmp    eax,0xffffffff
c001d375:	89 c5                	mov    ebp,eax
c001d377:	75 21                	jne    c001d39a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001d379:	50                   	push   eax
c001d37a:	50                   	push   eax
c001d37b:	6a 01                	push   0x1
c001d37d:	53                   	push   ebx
c001d37e:	e8 87 93 fe ff       	call   c000670a <iso_open>
c001d383:	83 c4 10             	add    esp,0x10
c001d386:	ba 02 00 00 00       	mov    edx,0x2
c001d38b:	40                   	inc    eax
c001d38c:	74 2b                	je     c001d3b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d38e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001d391:	eb 24                	jmp    c001d3b7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001d393:	ba 04 00 00 00       	mov    edx,0x4
c001d398:	eb 1f                	jmp    c001d3b9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001d39a:	83 ec 0c             	sub    esp,0xc
c001d39d:	50                   	push   eax
c001d39e:	e8 da 95 fe ff       	call   c000697d <iso_total>
c001d3a3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001d3aa:	89 07                	mov    DWORD PTR [edi],eax
c001d3ac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d3af:	e8 e0 93 fe ff       	call   c0006794 <iso_close>
c001d3b4:	83 c4 10             	add    esp,0x10
c001d3b7:	31 d2                	xor    edx,edx
c001d3b9:	83 c4 0c             	add    esp,0xc
c001d3bc:	89 d0                	mov    eax,edx
c001d3be:	5b                   	pop    ebx
c001d3bf:	5e                   	pop    esi
c001d3c0:	5f                   	pop    edi
c001d3c1:	5d                   	pop    ebp
c001d3c2:	c3                   	ret    
c001d3c3:	90                   	nop

c001d3c4 <ISO9660::close(void*)>:
c001d3c4:	83 ec 0c             	sub    esp,0xc
c001d3c7:	b8 04 00 00 00       	mov    eax,0x4
c001d3cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d3d0:	85 d2                	test   edx,edx
c001d3d2:	74 1b                	je     c001d3ef <ISO9660::close(void*)+0x2b>
c001d3d4:	89 d0                	mov    eax,edx
c001d3d6:	b9 02 00 00 00       	mov    ecx,0x2
c001d3db:	99                   	cdq    
c001d3dc:	83 ec 0c             	sub    esp,0xc
c001d3df:	f7 f9                	idiv   ecx
c001d3e1:	83 e8 32             	sub    eax,0x32
c001d3e4:	50                   	push   eax
c001d3e5:	e8 aa 93 fe ff       	call   c0006794 <iso_close>
c001d3ea:	83 c4 10             	add    esp,0x10
c001d3ed:	31 c0                	xor    eax,eax
c001d3ef:	83 c4 0c             	add    esp,0xc
c001d3f2:	c3                   	ret    
c001d3f3:	90                   	nop

c001d3f4 <ISO9660::openDir(char const*, void**)>:
c001d3f4:	56                   	push   esi
c001d3f5:	53                   	push   ebx
c001d3f6:	50                   	push   eax
c001d3f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d3fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d3ff:	85 db                	test   ebx,ebx
c001d401:	0f 84 bd 00 00 00    	je     c001d4c4 <ISO9660::openDir(char const*, void**)+0xd0>
c001d407:	85 f6                	test   esi,esi
c001d409:	0f 84 b5 00 00 00    	je     c001d4c4 <ISO9660::openDir(char const*, void**)+0xd0>
c001d40f:	8a 13                	mov    dl,BYTE PTR [ebx]
c001d411:	38 15 80 35 03 c0    	cmp    BYTE PTR ds:0xc0033580,dl
c001d417:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d41e:	74 1b                	je     c001d43b <ISO9660::openDir(char const*, void**)+0x47>
c001d420:	85 c0                	test   eax,eax
c001d422:	74 10                	je     c001d434 <ISO9660::openDir(char const*, void**)+0x40>
c001d424:	83 ec 0c             	sub    esp,0xc
c001d427:	68 39 94 02 c0       	push   0xc0029439
c001d42c:	e8 a3 26 ff ff       	call   c000fad4 <KePanic(char const*)>
c001d431:	83 c4 10             	add    esp,0x10
c001d434:	8a 03                	mov    al,BYTE PTR [ebx]
c001d436:	a2 80 35 03 c0       	mov    ds:0xc0033580,al
c001d43b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001d43e:	8b 04 85 dc 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf624]
c001d445:	85 c0                	test   eax,eax
c001d447:	74 10                	je     c001d459 <ISO9660::openDir(char const*, void**)+0x65>
c001d449:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001d450:	74 1a                	je     c001d46c <ISO9660::openDir(char const*, void**)+0x78>
c001d452:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001d459:	0f be 05 80 35 03 c0 	movsx  eax,BYTE PTR ds:0xc0033580
c001d460:	83 ec 0c             	sub    esp,0xc
c001d463:	50                   	push   eax
c001d464:	e8 de 97 fe ff       	call   c0006c47 <init_percd>
c001d469:	83 c4 10             	add    esp,0x10
c001d46c:	50                   	push   eax
c001d46d:	83 c3 03             	add    ebx,0x3
c001d470:	50                   	push   eax
c001d471:	6a 01                	push   0x1
c001d473:	53                   	push   ebx
c001d474:	e8 91 92 fe ff       	call   c000670a <iso_open>
c001d479:	83 c4 10             	add    esp,0x10
c001d47c:	83 f8 ff             	cmp    eax,0xffffffff
c001d47f:	89 c3                	mov    ebx,eax
c001d481:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001d486:	75 1c                	jne    c001d4a4 <ISO9660::openDir(char const*, void**)+0xb0>
c001d488:	53                   	push   ebx
c001d489:	53                   	push   ebx
c001d48a:	68 e1 94 02 c0       	push   0xc00294e1
c001d48f:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d495:	e8 76 4f ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001d49a:	83 c4 10             	add    esp,0x10
c001d49d:	b8 01 00 00 00       	mov    eax,0x1
c001d4a2:	eb 25                	jmp    c001d4c9 <ISO9660::openDir(char const*, void**)+0xd5>
c001d4a4:	51                   	push   ecx
c001d4a5:	01 db                	add    ebx,ebx
c001d4a7:	51                   	push   ecx
c001d4a8:	83 c3 65             	add    ebx,0x65
c001d4ab:	68 f4 94 02 c0       	push   0xc00294f4
c001d4b0:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d4b6:	e8 55 4f ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	31 c0                	xor    eax,eax
c001d4c0:	89 1e                	mov    DWORD PTR [esi],ebx
c001d4c2:	eb 05                	jmp    c001d4c9 <ISO9660::openDir(char const*, void**)+0xd5>
c001d4c4:	b8 04 00 00 00       	mov    eax,0x4
c001d4c9:	5a                   	pop    edx
c001d4ca:	5b                   	pop    ebx
c001d4cb:	5e                   	pop    esi
c001d4cc:	c3                   	ret    
c001d4cd:	90                   	nop

c001d4ce <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001d4ce:	55                   	push   ebp
c001d4cf:	57                   	push   edi
c001d4d0:	56                   	push   esi
c001d4d1:	53                   	push   ebx
c001d4d2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d4d8:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001d4df:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001d4e6:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001d4ed:	85 db                	test   ebx,ebx
c001d4ef:	0f 84 e4 00 00 00    	je     c001d5d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d4f5:	85 ed                	test   ebp,ebp
c001d4f7:	0f 84 dc 00 00 00    	je     c001d5d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001d4fd:	83 ec 0c             	sub    esp,0xc
c001d500:	68 07 95 02 c0       	push   0xc0029507
c001d505:	e8 5c 9a fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001d50a:	89 d8                	mov    eax,ebx
c001d50c:	b9 02 00 00 00       	mov    ecx,0x2
c001d511:	99                   	cdq    
c001d512:	f7 f9                	idiv   ecx
c001d514:	83 e8 32             	sub    eax,0x32
c001d517:	89 04 24             	mov    DWORD PTR [esp],eax
c001d51a:	e8 b0 94 fe ff       	call   c00069cf <iso_readdir>
c001d51f:	83 c4 10             	add    esp,0x10
c001d522:	85 c0                	test   eax,eax
c001d524:	89 c3                	mov    ebx,eax
c001d526:	75 38                	jne    c001d560 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001d528:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001d52d:	53                   	push   ebx
c001d52e:	53                   	push   ebx
c001d52f:	68 12 95 02 c0       	push   0xc0029512
c001d534:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d53a:	e8 d1 4e ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001d53f:	83 c4 0c             	add    esp,0xc
c001d542:	68 10 01 00 00       	push   0x110
c001d547:	6a 00                	push   0x0
c001d549:	57                   	push   edi
c001d54a:	e8 a1 2f fe ff       	call   c00004f0 <memset>
c001d54f:	83 c4 10             	add    esp,0x10
c001d552:	b8 01 00 00 00       	mov    eax,0x1
c001d557:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001d55e:	eb 7e                	jmp    c001d5de <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d560:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001d566:	8d 70 08             	lea    esi,[eax+0x8]
c001d569:	83 ec 0c             	sub    esp,0xc
c001d56c:	56                   	push   esi
c001d56d:	e8 0e 30 fe ff       	call   c0000580 <strlen>
c001d572:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d57a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d57e:	83 c4 10             	add    esp,0x10
c001d581:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001d585:	75 0a                	jne    c001d591 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001d587:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001d58a:	b8 02 00 00 00       	mov    eax,0x2
c001d58f:	74 05                	je     c001d596 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001d591:	b8 01 00 00 00       	mov    eax,0x1
c001d596:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d59a:	50                   	push   eax
c001d59b:	50                   	push   eax
c001d59c:	56                   	push   esi
c001d59d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d5a1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001d5a5:	50                   	push   eax
c001d5a6:	e8 a5 30 fe ff       	call   c0000650 <strcpy>
c001d5ab:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001d5b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d5b4:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001d5bb:	5a                   	pop    edx
c001d5bc:	a1 58 13 03 c0       	mov    eax,ds:0xc0031358
c001d5c1:	59                   	pop    ecx
c001d5c2:	68 25 95 02 c0       	push   0xc0029525
c001d5c7:	ff b0 a6 05 00 00    	push   DWORD PTR [eax+0x5a6]
c001d5cd:	e8 3e 4e ff ff       	call   c0012410 <VgaText::puts(char const*)>
c001d5d2:	83 c4 10             	add    esp,0x10
c001d5d5:	31 c0                	xor    eax,eax
c001d5d7:	eb 05                	jmp    c001d5de <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001d5d9:	b8 04 00 00 00       	mov    eax,0x4
c001d5de:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d5e4:	5b                   	pop    ebx
c001d5e5:	5e                   	pop    esi
c001d5e6:	5f                   	pop    edi
c001d5e7:	5d                   	pop    ebp
c001d5e8:	c3                   	ret    

c001d5e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001d5e9:	57                   	push   edi
c001d5ea:	56                   	push   esi
c001d5eb:	53                   	push   ebx
c001d5ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5f0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d5f4:	39 35 84 35 03 c0    	cmp    DWORD PTR ds:0xc0033584,esi
c001d5fa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d5fe:	0f be cb             	movsx  ecx,bl
c001d601:	75 0b                	jne    c001d60e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001d603:	0f be 05 04 b7 02 c0 	movsx  eax,BYTE PTR ds:0xc002b704
c001d60a:	39 c8                	cmp    eax,ecx
c001d60c:	74 47                	je     c001d655 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d60e:	83 ec 0c             	sub    esp,0xc
c001d611:	31 d2                	xor    edx,edx
c001d613:	68 a0 35 03 c0       	push   0xc00335a0
c001d618:	6a 01                	push   0x1
c001d61a:	52                   	push   edx
c001d61b:	56                   	push   esi
c001d61c:	ff 34 8d dc 09 03 c0 	push   DWORD PTR [ecx*4-0x3ffcf624]
c001d623:	e8 ee d3 fe ff       	call   c000aa16 <LogicalDisk::read(unsigned long long, int, void*)>
c001d628:	83 c4 20             	add    esp,0x20
c001d62b:	85 c0                	test   eax,eax
c001d62d:	75 0e                	jne    c001d63d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001d62f:	89 35 84 35 03 c0    	mov    DWORD PTR ds:0xc0033584,esi
c001d635:	88 1d 04 b7 02 c0    	mov    BYTE PTR ds:0xc002b704,bl
c001d63b:	eb 18                	jmp    c001d655 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001d63d:	50                   	push   eax
c001d63e:	68 00 08 00 00       	push   0x800
c001d643:	6a 00                	push   0x0
c001d645:	57                   	push   edi
c001d646:	e8 a5 2e fe ff       	call   c00004f0 <memset>
c001d64b:	83 c4 10             	add    esp,0x10
c001d64e:	b8 01 00 00 00       	mov    eax,0x1
c001d653:	eb 0e                	jmp    c001d663 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001d655:	be a0 35 03 c0       	mov    esi,0xc00335a0
c001d65a:	b9 00 08 00 00       	mov    ecx,0x800
c001d65f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d661:	31 c0                	xor    eax,eax
c001d663:	5b                   	pop    ebx
c001d664:	5e                   	pop    esi
c001d665:	5f                   	pop    edi
c001d666:	c3                   	ret    
c001d667:	90                   	nop

c001d668 <ISO9660::tryMount(LogicalDisk*, int)>:
c001d668:	53                   	push   ebx
c001d669:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001d66f:	c7 05 84 35 03 c0 ef be ad de 	mov    DWORD PTR ds:0xc0033584,0xdeadbeef
c001d679:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001d680:	8d 58 41             	lea    ebx,[eax+0x41]
c001d683:	0f be db             	movsx  ebx,bl
c001d686:	53                   	push   ebx
c001d687:	8d 44 24 08          	lea    eax,[esp+0x8]
c001d68b:	50                   	push   eax
c001d68c:	6a 10                	push   0x10
c001d68e:	e8 56 ff ff ff       	call   c001d5e9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d693:	83 c4 10             	add    esp,0x10
c001d696:	31 d2                	xor    edx,edx
c001d698:	85 c0                	test   eax,eax
c001d69a:	75 33                	jne    c001d6cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d69c:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001d6a1:	75 2c                	jne    c001d6cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d6a3:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001d6a8:	75 25                	jne    c001d6cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d6aa:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001d6af:	75 1e                	jne    c001d6cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d6b1:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001d6b6:	75 17                	jne    c001d6cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d6b8:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001d6bd:	75 10                	jne    c001d6cf <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001d6bf:	83 ec 0c             	sub    esp,0xc
c001d6c2:	53                   	push   ebx
c001d6c3:	e8 7f 95 fe ff       	call   c0006c47 <init_percd>
c001d6c8:	83 c4 10             	add    esp,0x10
c001d6cb:	40                   	inc    eax
c001d6cc:	0f 95 c2             	setne  dl
c001d6cf:	81 c4 08 08 00 00    	add    esp,0x808
c001d6d5:	88 d0                	mov    al,dl
c001d6d7:	5b                   	pop    ebx
c001d6d8:	c3                   	ret    
c001d6d9:	90                   	nop

c001d6da <ISO9660::ISO9660()>:
c001d6da:	83 ec 0c             	sub    esp,0xc
c001d6dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6e1:	83 ec 0c             	sub    esp,0xc
c001d6e4:	50                   	push   eax
c001d6e5:	e8 c8 a6 fe ff       	call   c0007db2 <Filesystem::Filesystem()>
c001d6ea:	83 c4 10             	add    esp,0x10
c001d6ed:	ba 40 95 02 c0       	mov    edx,0xc0029540
c001d6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f6:	89 10                	mov    DWORD PTR [eax],edx
c001d6f8:	e8 5c 96 fe ff       	call   c0006d59 <fs_iso9660_init>
c001d6fd:	90                   	nop
c001d6fe:	83 c4 0c             	add    esp,0xc
c001d701:	c3                   	ret    

c001d702 <SoundCard::beginPlayback()>:
c001d702:	c7 44 24 04 a4 95 02 c0 	mov    DWORD PTR [esp+0x4],0xc00295a4
c001d70a:	e9 c5 23 ff ff       	jmp    c000fad4 <KePanic(char const*)>
c001d70f:	90                   	nop

c001d710 <SoundCard::stopPlayback()>:
c001d710:	c7 44 24 04 a4 95 02 c0 	mov    DWORD PTR [esp+0x4],0xc00295a4
c001d718:	e9 b7 23 ff ff       	jmp    c000fad4 <KePanic(char const*)>
c001d71d:	90                   	nop

c001d71e <SoundCard::SoundCard(char const*)>:
c001d71e:	83 ec 1c             	sub    esp,0x1c
c001d721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d725:	83 ec 08             	sub    esp,0x8
c001d728:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d72c:	50                   	push   eax
c001d72d:	e8 26 c4 fe ff       	call   c0009b58 <Device::Device(char const*)>
c001d732:	83 c4 10             	add    esp,0x10
c001d735:	ba f0 95 02 c0       	mov    edx,0xc00295f0
c001d73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d73e:	89 10                	mov    DWORD PTR [eax],edx
c001d740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d744:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d74b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d74f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d75d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d767:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d76b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d779:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d783:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d78b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d790:	7f 1a                	jg     c001d7ac <SoundCard::SoundCard(char const*)+0x8e>
c001d792:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d796:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d79a:	83 c2 54             	add    edx,0x54
c001d79d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d7a5:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001d7aa:	eb df                	jmp    c001d78b <SoundCard::SoundCard(char const*)+0x6d>
c001d7ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7b0:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d7b7:	90                   	nop
c001d7b8:	83 c4 1c             	add    esp,0x1c
c001d7bb:	c3                   	ret    

c001d7bc <SoundCard::~SoundCard()>:
c001d7bc:	83 ec 0c             	sub    esp,0xc
c001d7bf:	ba f0 95 02 c0       	mov    edx,0xc00295f0
c001d7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7c8:	89 10                	mov    DWORD PTR [eax],edx
c001d7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ce:	83 ec 0c             	sub    esp,0xc
c001d7d1:	50                   	push   eax
c001d7d2:	e8 21 c1 fe ff       	call   c00098f8 <Device::~Device()>
c001d7d7:	83 c4 10             	add    esp,0x10
c001d7da:	90                   	nop
c001d7db:	83 c4 0c             	add    esp,0xc
c001d7de:	c3                   	ret    
c001d7df:	90                   	nop

c001d7e0 <SoundCard::~SoundCard()>:
c001d7e0:	83 ec 0c             	sub    esp,0xc
c001d7e3:	83 ec 0c             	sub    esp,0xc
c001d7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7ea:	e8 cd ff ff ff       	call   c001d7bc <SoundCard::~SoundCard()>
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	83 ec 08             	sub    esp,0x8
c001d7f5:	68 e8 01 00 00       	push   0x1e8
c001d7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d7fe:	e8 85 fa fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c001d803:	83 c4 10             	add    esp,0x10
c001d806:	83 c4 0c             	add    esp,0xc
c001d809:	c3                   	ret    

c001d80a <SoundCard::configureRates(int, int, int)>:
c001d80a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d80e:	31 c0                	xor    eax,eax
c001d810:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d817:	75 20                	jne    c001d839 <SoundCard::configureRates(int, int, int)+0x2f>
c001d819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d81d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d823:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d827:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d831:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d837:	b0 01                	mov    al,0x1
c001d839:	c3                   	ret    

c001d83a <SoundCard::getSamples16(int, short*)>:
c001d83a:	55                   	push   ebp
c001d83b:	57                   	push   edi
c001d83c:	31 ff                	xor    edi,edi
c001d83e:	56                   	push   esi
c001d83f:	53                   	push   ebx
c001d840:	31 db                	xor    ebx,ebx
c001d842:	83 ec 10             	sub    esp,0x10
c001d845:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d849:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d84d:	8d 04 36             	lea    eax,[esi+esi*1]
c001d850:	50                   	push   eax
c001d851:	6a 00                	push   0x0
c001d853:	55                   	push   ebp
c001d854:	e8 97 2c fe ff       	call   c00004f0 <memset>
c001d859:	83 c4 10             	add    esp,0x10
c001d85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d860:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001d867:	85 c0                	test   eax,eax
c001d869:	74 1a                	je     c001d885 <SoundCard::getSamples16(int, short*)+0x4b>
c001d86b:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d86f:	75 14                	jne    c001d885 <SoundCard::getSamples16(int, short*)+0x4b>
c001d871:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d875:	55                   	push   ebp
c001d876:	56                   	push   esi
c001d877:	50                   	push   eax
c001d878:	e8 8f 03 00 00       	call   c001dc0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d87d:	83 c4 10             	add    esp,0x10
c001d880:	39 c3                	cmp    ebx,eax
c001d882:	0f 4c d8             	cmovl  ebx,eax
c001d885:	47                   	inc    edi
c001d886:	83 ff 20             	cmp    edi,0x20
c001d889:	75 d1                	jne    c001d85c <SoundCard::getSamples16(int, short*)+0x22>
c001d88b:	83 c4 0c             	add    esp,0xc
c001d88e:	89 d8                	mov    eax,ebx
c001d890:	5b                   	pop    ebx
c001d891:	5e                   	pop    esi
c001d892:	5f                   	pop    edi
c001d893:	5d                   	pop    ebp
c001d894:	c3                   	ret    
c001d895:	90                   	nop

c001d896 <SoundCard::getSamples32(int, int*)>:
c001d896:	55                   	push   ebp
c001d897:	57                   	push   edi
c001d898:	31 ff                	xor    edi,edi
c001d89a:	56                   	push   esi
c001d89b:	31 f6                	xor    esi,esi
c001d89d:	53                   	push   ebx
c001d89e:	83 ec 10             	sub    esp,0x10
c001d8a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8a5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d8a9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8ad:	c1 e0 02             	shl    eax,0x2
c001d8b0:	50                   	push   eax
c001d8b1:	6a 00                	push   0x0
c001d8b3:	55                   	push   ebp
c001d8b4:	e8 37 2c fe ff       	call   c00004f0 <memset>
c001d8b9:	83 c4 10             	add    esp,0x10
c001d8bc:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d8c3:	85 c0                	test   eax,eax
c001d8c5:	74 1a                	je     c001d8e1 <SoundCard::getSamples32(int, int*)+0x4b>
c001d8c7:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d8cb:	75 14                	jne    c001d8e1 <SoundCard::getSamples32(int, int*)+0x4b>
c001d8cd:	53                   	push   ebx
c001d8ce:	55                   	push   ebp
c001d8cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8d3:	50                   	push   eax
c001d8d4:	e8 03 04 00 00       	call   c001dcdc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d8d9:	83 c4 10             	add    esp,0x10
c001d8dc:	39 c6                	cmp    esi,eax
c001d8de:	0f 4c f0             	cmovl  esi,eax
c001d8e1:	47                   	inc    edi
c001d8e2:	83 ff 20             	cmp    edi,0x20
c001d8e5:	75 d5                	jne    c001d8bc <SoundCard::getSamples32(int, int*)+0x26>
c001d8e7:	85 f6                	test   esi,esi
c001d8e9:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d8f0:	75 0f                	jne    c001d901 <SoundCard::getSamples32(int, int*)+0x6b>
c001d8f2:	85 c0                	test   eax,eax
c001d8f4:	74 1b                	je     c001d911 <SoundCard::getSamples32(int, int*)+0x7b>
c001d8f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d8f8:	83 ec 0c             	sub    esp,0xc
c001d8fb:	53                   	push   ebx
c001d8fc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d8ff:	eb 0d                	jmp    c001d90e <SoundCard::getSamples32(int, int*)+0x78>
c001d901:	85 c0                	test   eax,eax
c001d903:	75 0c                	jne    c001d911 <SoundCard::getSamples32(int, int*)+0x7b>
c001d905:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d907:	83 ec 0c             	sub    esp,0xc
c001d90a:	53                   	push   ebx
c001d90b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d90e:	83 c4 10             	add    esp,0x10
c001d911:	83 c4 0c             	add    esp,0xc
c001d914:	89 f0                	mov    eax,esi
c001d916:	5b                   	pop    ebx
c001d917:	5e                   	pop    esi
c001d918:	5f                   	pop    edi
c001d919:	5d                   	pop    ebp
c001d91a:	c3                   	ret    
c001d91b:	90                   	nop

c001d91c <SoundCard::addChannel(SoundPort*)>:
c001d91c:	83 ec 0c             	sub    esp,0xc
c001d91f:	31 c0                	xor    eax,eax
c001d921:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d925:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d92d:	74 1b                	je     c001d94a <SoundCard::addChannel(SoundPort*)+0x2e>
c001d92f:	40                   	inc    eax
c001d930:	83 f8 20             	cmp    eax,0x20
c001d933:	75 f0                	jne    c001d925 <SoundCard::addChannel(SoundPort*)+0x9>
c001d935:	83 ec 0c             	sub    esp,0xc
c001d938:	68 c9 95 02 c0       	push   0xc00295c9
c001d93d:	e8 92 21 ff ff       	call   c000fad4 <KePanic(char const*)>
c001d942:	83 c4 10             	add    esp,0x10
c001d945:	83 c8 ff             	or     eax,0xffffffff
c001d948:	eb 0b                	jmp    c001d955 <SoundCard::addChannel(SoundPort*)+0x39>
c001d94a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d94e:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d955:	83 c4 0c             	add    esp,0xc
c001d958:	c3                   	ret    
c001d959:	90                   	nop

c001d95a <SoundCard::removeChannel(int)>:
c001d95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d95e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d962:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d96d:	c3                   	ret    
c001d96e:	66 90                	xchg   ax,ax

c001d970 <SoundPort::SoundPort(int, int, int, int)>:
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d977:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d982:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d98a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d98e:	89 10                	mov    DWORD PTR [eax],edx
c001d990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d994:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d998:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d99f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9a3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d9a6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d9ab:	75 13                	jne    c001d9c0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9b3:	05 a0 0f 00 00       	add    eax,0xfa0
c001d9b8:	d1 e0                	shl    eax,1
c001d9ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d9be:	66 90                	xchg   ax,ax
c001d9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9c4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d9c8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d9cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9cf:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d9dd:	c1 e0 02             	shl    eax,0x2
c001d9e0:	83 ec 0c             	sub    esp,0xc
c001d9e3:	50                   	push   eax
c001d9e4:	e8 97 1c ff ff       	call   c000f680 <malloc>
c001d9e9:	83 c4 10             	add    esp,0x10
c001d9ec:	89 c2                	mov    edx,eax
c001d9ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9f2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d9f5:	90                   	nop
c001d9f6:	83 c4 0c             	add    esp,0xc
c001d9f9:	c3                   	ret    
c001d9fa:	66 90                	xchg   ax,ax

c001d9fc <SoundPort::~SoundPort()>:
c001d9fc:	83 ec 0c             	sub    esp,0xc
c001d9ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001da06:	85 c0                	test   eax,eax
c001da08:	74 1e                	je     c001da28 <SoundPort::~SoundPort()+0x2c>
c001da0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da0e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001da11:	83 ec 0c             	sub    esp,0xc
c001da14:	50                   	push   eax
c001da15:	e8 76 1c ff ff       	call   c000f690 <free>
c001da1a:	83 c4 10             	add    esp,0x10
c001da1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da21:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001da28:	90                   	nop
c001da29:	83 c4 0c             	add    esp,0xc
c001da2c:	c3                   	ret    
c001da2d:	90                   	nop
c001da2e:	66 90                	xchg   ax,ax

c001da30 <SoundPort::unpause()>:
c001da30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da34:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001da38:	c3                   	ret    
c001da39:	90                   	nop
c001da3a:	66 90                	xchg   ax,ax

c001da3c <SoundPort::pause()>:
c001da3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da40:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001da44:	c3                   	ret    
c001da45:	90                   	nop
c001da46:	66 90                	xchg   ax,ax

c001da48 <SoundPort::getBufferUsed()>:
c001da48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da4c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001da4f:	c3                   	ret    

c001da50 <SoundPort::getBufferSize()>:
c001da50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da54:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001da57:	c3                   	ret    

c001da58 <SoundPort::buffer8(signed char*, int)>:
c001da58:	55                   	push   ebp
c001da59:	57                   	push   edi
c001da5a:	56                   	push   esi
c001da5b:	53                   	push   ebx
c001da5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da60:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001da64:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001da67:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001da6a:	74 70                	je     c001dadc <SoundPort::buffer8(signed char*, int)+0x84>
c001da6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001da70:	85 c9                	test   ecx,ecx
c001da72:	7e 68                	jle    c001dadc <SoundPort::buffer8(signed char*, int)+0x84>
c001da74:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001da78:	8d 48 01             	lea    ecx,[eax+0x1]
c001da7b:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001da7e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001da81:	89 f1                	mov    ecx,esi
c001da83:	c1 e1 18             	shl    ecx,0x18
c001da86:	29 f1                	sub    ecx,esi
c001da88:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001da8b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001da8e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001da91:	74 51                	je     c001dae4 <SoundPort::buffer8(signed char*, int)+0x8c>
c001da93:	31 ff                	xor    edi,edi
c001da95:	eb 25                	jmp    c001dabc <SoundPort::buffer8(signed char*, int)+0x64>
c001da97:	90                   	nop
c001da98:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001da9d:	8d 59 01             	lea    ebx,[ecx+0x1]
c001daa0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001daa3:	89 f3                	mov    ebx,esi
c001daa5:	c1 e3 18             	shl    ebx,0x18
c001daa8:	29 f3                	sub    ebx,esi
c001daaa:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001daad:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001dab0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dab3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dab6:	74 1c                	je     c001dad4 <SoundPort::buffer8(signed char*, int)+0x7c>
c001dab8:	89 c7                	mov    edi,eax
c001daba:	66 90                	xchg   ax,ax
c001dabc:	8d 47 01             	lea    eax,[edi+0x1]
c001dabf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001dac3:	75 d3                	jne    c001da98 <SoundPort::buffer8(signed char*, int)+0x40>
c001dac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dac9:	8d 76 00             	lea    esi,[esi+0x0]
c001dacc:	5b                   	pop    ebx
c001dacd:	5e                   	pop    esi
c001dace:	5f                   	pop    edi
c001dacf:	5d                   	pop    ebp
c001dad0:	c3                   	ret    
c001dad1:	8d 76 00             	lea    esi,[esi+0x0]
c001dad4:	5b                   	pop    ebx
c001dad5:	8d 47 02             	lea    eax,[edi+0x2]
c001dad8:	5e                   	pop    esi
c001dad9:	5f                   	pop    edi
c001dada:	5d                   	pop    ebp
c001dadb:	c3                   	ret    
c001dadc:	5b                   	pop    ebx
c001dadd:	31 c0                	xor    eax,eax
c001dadf:	5e                   	pop    esi
c001dae0:	5f                   	pop    edi
c001dae1:	5d                   	pop    ebp
c001dae2:	c3                   	ret    
c001dae3:	90                   	nop
c001dae4:	b8 01 00 00 00       	mov    eax,0x1
c001dae9:	eb e1                	jmp    c001dacc <SoundPort::buffer8(signed char*, int)+0x74>
c001daeb:	90                   	nop

c001daec <SoundPort::buffer16(short*, int)>:
c001daec:	55                   	push   ebp
c001daed:	57                   	push   edi
c001daee:	56                   	push   esi
c001daef:	53                   	push   ebx
c001daf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001daf4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001daf8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001dafb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001dafe:	74 70                	je     c001db70 <SoundPort::buffer16(short*, int)+0x84>
c001db00:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001db04:	85 c9                	test   ecx,ecx
c001db06:	7e 68                	jle    c001db70 <SoundPort::buffer16(short*, int)+0x84>
c001db08:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001db0c:	8d 48 01             	lea    ecx,[eax+0x1]
c001db0f:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001db12:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001db15:	89 f1                	mov    ecx,esi
c001db17:	c1 e1 10             	shl    ecx,0x10
c001db1a:	29 f1                	sub    ecx,esi
c001db1c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001db1f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db22:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db25:	74 51                	je     c001db78 <SoundPort::buffer16(short*, int)+0x8c>
c001db27:	31 ff                	xor    edi,edi
c001db29:	eb 25                	jmp    c001db50 <SoundPort::buffer16(short*, int)+0x64>
c001db2b:	90                   	nop
c001db2c:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001db31:	8d 59 01             	lea    ebx,[ecx+0x1]
c001db34:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001db37:	89 f3                	mov    ebx,esi
c001db39:	c1 e3 10             	shl    ebx,0x10
c001db3c:	29 f3                	sub    ebx,esi
c001db3e:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001db41:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001db44:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db47:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db4a:	74 1c                	je     c001db68 <SoundPort::buffer16(short*, int)+0x7c>
c001db4c:	89 c7                	mov    edi,eax
c001db4e:	66 90                	xchg   ax,ax
c001db50:	8d 47 01             	lea    eax,[edi+0x1]
c001db53:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001db57:	75 d3                	jne    c001db2c <SoundPort::buffer16(short*, int)+0x40>
c001db59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db5d:	8d 76 00             	lea    esi,[esi+0x0]
c001db60:	5b                   	pop    ebx
c001db61:	5e                   	pop    esi
c001db62:	5f                   	pop    edi
c001db63:	5d                   	pop    ebp
c001db64:	c3                   	ret    
c001db65:	8d 76 00             	lea    esi,[esi+0x0]
c001db68:	5b                   	pop    ebx
c001db69:	8d 47 02             	lea    eax,[edi+0x2]
c001db6c:	5e                   	pop    esi
c001db6d:	5f                   	pop    edi
c001db6e:	5d                   	pop    ebp
c001db6f:	c3                   	ret    
c001db70:	5b                   	pop    ebx
c001db71:	31 c0                	xor    eax,eax
c001db73:	5e                   	pop    esi
c001db74:	5f                   	pop    edi
c001db75:	5d                   	pop    ebp
c001db76:	c3                   	ret    
c001db77:	90                   	nop
c001db78:	b8 01 00 00 00       	mov    eax,0x1
c001db7d:	eb e1                	jmp    c001db60 <SoundPort::buffer16(short*, int)+0x74>
c001db7f:	90                   	nop

c001db80 <SoundPort::buffer32(int*, int)>:
c001db80:	55                   	push   ebp
c001db81:	57                   	push   edi
c001db82:	56                   	push   esi
c001db83:	53                   	push   ebx
c001db84:	83 ec 04             	sub    esp,0x4
c001db87:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001db93:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001db96:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001db99:	89 04 24             	mov    DWORD PTR [esp],eax
c001db9c:	74 5a                	je     c001dbf8 <SoundPort::buffer32(int*, int)+0x78>
c001db9e:	85 c0                	test   eax,eax
c001dba0:	7e 56                	jle    c001dbf8 <SoundPort::buffer32(int*, int)+0x78>
c001dba2:	8d 71 01             	lea    esi,[ecx+0x1]
c001dba5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001dba8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001dbab:	8b 37                	mov    esi,DWORD PTR [edi]
c001dbad:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001dbb0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dbb3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dbb6:	74 4c                	je     c001dc04 <SoundPort::buffer32(int*, int)+0x84>
c001dbb8:	31 f6                	xor    esi,esi
c001dbba:	eb 1c                	jmp    c001dbd8 <SoundPort::buffer32(int*, int)+0x58>
c001dbbc:	8d 69 01             	lea    ebp,[ecx+0x1]
c001dbbf:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001dbc2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001dbc5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dbc8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001dbcc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001dbcf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001dbd2:	74 18                	je     c001dbec <SoundPort::buffer32(int*, int)+0x6c>
c001dbd4:	89 de                	mov    esi,ebx
c001dbd6:	66 90                	xchg   ax,ax
c001dbd8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001dbdb:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001dbde:	75 dc                	jne    c001dbbc <SoundPort::buffer32(int*, int)+0x3c>
c001dbe0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dbe3:	90                   	nop
c001dbe4:	83 c4 04             	add    esp,0x4
c001dbe7:	5b                   	pop    ebx
c001dbe8:	5e                   	pop    esi
c001dbe9:	5f                   	pop    edi
c001dbea:	5d                   	pop    ebp
c001dbeb:	c3                   	ret    
c001dbec:	8d 46 02             	lea    eax,[esi+0x2]
c001dbef:	83 c4 04             	add    esp,0x4
c001dbf2:	5b                   	pop    ebx
c001dbf3:	5e                   	pop    esi
c001dbf4:	5f                   	pop    edi
c001dbf5:	5d                   	pop    ebp
c001dbf6:	c3                   	ret    
c001dbf7:	90                   	nop
c001dbf8:	83 c4 04             	add    esp,0x4
c001dbfb:	31 c0                	xor    eax,eax
c001dbfd:	5b                   	pop    ebx
c001dbfe:	5e                   	pop    esi
c001dbff:	5f                   	pop    edi
c001dc00:	5d                   	pop    ebp
c001dc01:	c3                   	ret    
c001dc02:	66 90                	xchg   ax,ax
c001dc04:	b8 01 00 00 00       	mov    eax,0x1
c001dc09:	eb d9                	jmp    c001dbe4 <SoundPort::buffer32(int*, int)+0x64>
c001dc0b:	90                   	nop

c001dc0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001dc0c:	55                   	push   ebp
c001dc0d:	57                   	push   edi
c001dc0e:	56                   	push   esi
c001dc0f:	53                   	push   ebx
c001dc10:	83 ec 0c             	sub    esp,0xc
c001dc13:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dc17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dc1b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001dc1f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001dc23:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001dc29:	39 03                	cmp    DWORD PTR [ebx],eax
c001dc2b:	74 13                	je     c001dc40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001dc2d:	83 ec 0c             	sub    esp,0xc
c001dc30:	68 1c 96 02 c0       	push   0xc002961c
c001dc35:	e8 9a 1e ff ff       	call   c000fad4 <KePanic(char const*)>
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	8d 76 00             	lea    esi,[esi+0x0]
c001dc40:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001dc46:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001dc49:	74 11                	je     c001dc5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001dc4b:	83 ec 0c             	sub    esp,0xc
c001dc4e:	68 5b 96 02 c0       	push   0xc002965b
c001dc53:	e8 7c 1e ff ff       	call   c000fad4 <KePanic(char const*)>
c001dc58:	83 c4 10             	add    esp,0x10
c001dc5b:	90                   	nop
c001dc5c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001dc62:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dc65:	74 11                	je     c001dc78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001dc67:	83 ec 0c             	sub    esp,0xc
c001dc6a:	68 5b 96 02 c0       	push   0xc002965b
c001dc6f:	e8 60 1e ff ff       	call   c000fad4 <KePanic(char const*)>
c001dc74:	83 c4 10             	add    esp,0x10
c001dc77:	90                   	nop
c001dc78:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001dc7b:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001dc7f:	85 f6                	test   esi,esi
c001dc81:	7e 2d                	jle    c001dcb0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001dc83:	31 c0                	xor    eax,eax
c001dc85:	8d 76 00             	lea    esi,[esi+0x0]
c001dc88:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dc8b:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001dc8e:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001dc94:	85 c9                	test   ecx,ecx
c001dc96:	0f 49 d1             	cmovns edx,ecx
c001dc99:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001dc9d:	c1 fa 0f             	sar    edx,0xf
c001dca0:	01 d1                	add    ecx,edx
c001dca2:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001dca6:	83 c0 01             	add    eax,0x1
c001dca9:	39 f0                	cmp    eax,esi
c001dcab:	75 db                	jne    c001dc88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001dcad:	8d 76 00             	lea    esi,[esi+0x0]
c001dcb0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dcb3:	83 ec 04             	sub    esp,0x4
c001dcb6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dcb9:	29 f0                	sub    eax,esi
c001dcbb:	c1 e0 02             	shl    eax,0x2
c001dcbe:	50                   	push   eax
c001dcbf:	8d 04 b2             	lea    eax,[edx+esi*4]
c001dcc2:	50                   	push   eax
c001dcc3:	52                   	push   edx
c001dcc4:	e8 07 27 fe ff       	call   c00003d0 <memmove>
c001dcc9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dccc:	29 f0                	sub    eax,esi
c001dcce:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001dcd1:	83 c4 1c             	add    esp,0x1c
c001dcd4:	89 f0                	mov    eax,esi
c001dcd6:	5b                   	pop    ebx
c001dcd7:	5e                   	pop    esi
c001dcd8:	5f                   	pop    edi
c001dcd9:	5d                   	pop    ebp
c001dcda:	c3                   	ret    
c001dcdb:	90                   	nop

c001dcdc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001dcdc:	55                   	push   ebp
c001dcdd:	57                   	push   edi
c001dcde:	56                   	push   esi
c001dcdf:	53                   	push   ebx
c001dce0:	83 ec 0c             	sub    esp,0xc
c001dce3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001dce7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dceb:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001dcef:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001dcf3:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001dcf9:	39 03                	cmp    DWORD PTR [ebx],eax
c001dcfb:	74 13                	je     c001dd10 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001dcfd:	83 ec 0c             	sub    esp,0xc
c001dd00:	68 3c 96 02 c0       	push   0xc002963c
c001dd05:	e8 ca 1d ff ff       	call   c000fad4 <KePanic(char const*)>
c001dd0a:	83 c4 10             	add    esp,0x10
c001dd0d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd10:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001dd16:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001dd19:	74 11                	je     c001dd2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001dd1b:	83 ec 0c             	sub    esp,0xc
c001dd1e:	68 77 96 02 c0       	push   0xc0029677
c001dd23:	e8 ac 1d ff ff       	call   c000fad4 <KePanic(char const*)>
c001dd28:	83 c4 10             	add    esp,0x10
c001dd2b:	90                   	nop
c001dd2c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001dd32:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dd35:	74 11                	je     c001dd48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001dd37:	83 ec 0c             	sub    esp,0xc
c001dd3a:	68 77 96 02 c0       	push   0xc0029677
c001dd3f:	e8 90 1d ff ff       	call   c000fad4 <KePanic(char const*)>
c001dd44:	83 c4 10             	add    esp,0x10
c001dd47:	90                   	nop
c001dd48:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001dd4b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001dd4f:	85 ff                	test   edi,edi
c001dd51:	7e 21                	jle    c001dd74 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001dd53:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001dd5a:	31 c0                	xor    eax,eax
c001dd5c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dd5f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001dd62:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dd65:	01 d5                	add    ebp,edx
c001dd67:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001dd6a:	83 c0 04             	add    eax,0x4
c001dd6d:	39 c1                	cmp    ecx,eax
c001dd6f:	75 eb                	jne    c001dd5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001dd71:	8d 76 00             	lea    esi,[esi+0x0]
c001dd74:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001dd77:	83 ec 04             	sub    esp,0x4
c001dd7a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001dd7d:	29 f8                	sub    eax,edi
c001dd7f:	c1 e0 02             	shl    eax,0x2
c001dd82:	50                   	push   eax
c001dd83:	8d 04 ba             	lea    eax,[edx+edi*4]
c001dd86:	50                   	push   eax
c001dd87:	52                   	push   edx
c001dd88:	e8 43 26 fe ff       	call   c00003d0 <memmove>
c001dd8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dd90:	29 f8                	sub    eax,edi
c001dd92:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001dd95:	83 c4 1c             	add    esp,0x1c
c001dd98:	89 f8                	mov    eax,edi
c001dd9a:	5b                   	pop    ebx
c001dd9b:	5e                   	pop    esi
c001dd9c:	5f                   	pop    edi
c001dd9d:	5d                   	pop    ebp
c001dd9e:	c3                   	ret    
c001dd9f:	90                   	nop

c001dda0 <PCI::open(int, int, void*)>:
c001dda0:	83 ec 18             	sub    esp,0x18
c001dda3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dda7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ddab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ddb1:	8b 10                	mov    edx,DWORD PTR [eax]
c001ddb3:	50                   	push   eax
c001ddb4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ddb7:	31 c0                	xor    eax,eax
c001ddb9:	83 c4 1c             	add    esp,0x1c
c001ddbc:	c3                   	ret    
c001ddbd:	90                   	nop

c001ddbe <PCI::close(int, int, void*)>:
c001ddbe:	31 c0                	xor    eax,eax
c001ddc0:	c3                   	ret    
c001ddc1:	90                   	nop

c001ddc2 <PCI::PCI()>:
c001ddc2:	83 ec 0c             	sub    esp,0xc
c001ddc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc9:	83 ec 08             	sub    esp,0x8
c001ddcc:	68 93 96 02 c0       	push   0xc0029693
c001ddd1:	50                   	push   eax
c001ddd2:	e8 8d ab fe ff       	call   c0008964 <Bus::Bus(char const*)>
c001ddd7:	83 c4 10             	add    esp,0x10
c001ddda:	ba a0 97 02 c0       	mov    edx,0xc00297a0
c001dddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde3:	89 10                	mov    DWORD PTR [eax],edx
c001dde5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ddf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf7:	a3 a0 3d 03 c0       	mov    ds:0xc0033da0,eax
c001ddfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de06:	0f b6 d0             	movzx  edx,al
c001de09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001de14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de18:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de1e:	0f b6 d0             	movzx  edx,al
c001de21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de25:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001de2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de34:	8d 50 01             	lea    edx,[eax+0x1]
c001de37:	88 d1                	mov    cl,dl
c001de39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de3d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001de43:	0f b6 d0             	movzx  edx,al
c001de46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001de4e:	83 c9 c0             	or     ecx,0xffffffc0
c001de51:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001de55:	90                   	nop
c001de56:	83 c4 0c             	add    esp,0xc
c001de59:	c3                   	ret    

c001de5a <PCI::readBAR8(unsigned int, int)>:
c001de5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de62:	f6 c2 01             	test   dl,0x1
c001de65:	74 07                	je     c001de6e <PCI::readBAR8(unsigned int, int)+0x14>
c001de67:	83 e2 fc             	and    edx,0xfffffffc
c001de6a:	01 c2                	add    edx,eax
c001de6c:	ec                   	in     al,dx
c001de6d:	c3                   	ret    
c001de6e:	83 e2 f0             	and    edx,0xfffffff0
c001de71:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001de74:	c3                   	ret    
c001de75:	90                   	nop

c001de76 <PCI::readBAR16(unsigned int, int)>:
c001de76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de7e:	f6 c2 01             	test   dl,0x1
c001de81:	74 08                	je     c001de8b <PCI::readBAR16(unsigned int, int)+0x15>
c001de83:	83 e2 fc             	and    edx,0xfffffffc
c001de86:	01 c2                	add    edx,eax
c001de88:	66 ed                	in     ax,dx
c001de8a:	c3                   	ret    
c001de8b:	83 e2 f0             	and    edx,0xfffffff0
c001de8e:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001de92:	c3                   	ret    
c001de93:	90                   	nop

c001de94 <PCI::readBAR32(unsigned int, int)>:
c001de94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de9c:	f6 c2 01             	test   dl,0x1
c001de9f:	74 07                	je     c001dea8 <PCI::readBAR32(unsigned int, int)+0x14>
c001dea1:	83 e2 fc             	and    edx,0xfffffffc
c001dea4:	01 c2                	add    edx,eax
c001dea6:	ed                   	in     eax,dx
c001dea7:	c3                   	ret    
c001dea8:	83 e2 f0             	and    edx,0xfffffff0
c001deab:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001deae:	c3                   	ret    
c001deaf:	90                   	nop

c001deb0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001deb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001deb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001deb8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001debc:	f6 c2 01             	test   dl,0x1
c001debf:	74 07                	je     c001dec8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dec1:	83 e2 fc             	and    edx,0xfffffffc
c001dec4:	01 ca                	add    edx,ecx
c001dec6:	ee                   	out    dx,al
c001dec7:	c3                   	ret    
c001dec8:	83 e2 f0             	and    edx,0xfffffff0
c001decb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dece:	c3                   	ret    
c001decf:	90                   	nop

c001ded0 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ded0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ded4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ded8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dedc:	f6 c2 01             	test   dl,0x1
c001dedf:	74 08                	je     c001dee9 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dee1:	83 e2 fc             	and    edx,0xfffffffc
c001dee4:	01 ca                	add    edx,ecx
c001dee6:	66 ef                	out    dx,ax
c001dee8:	c3                   	ret    
c001dee9:	83 e2 f0             	and    edx,0xfffffff0
c001deec:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001def0:	c3                   	ret    
c001def1:	90                   	nop

c001def2 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001def2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001def6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001defa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001defe:	f6 c2 01             	test   dl,0x1
c001df01:	74 07                	je     c001df0a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001df03:	83 e2 fc             	and    edx,0xfffffffc
c001df06:	01 ca                	add    edx,ecx
c001df08:	ef                   	out    dx,eax
c001df09:	c3                   	ret    
c001df0a:	83 e2 f0             	and    edx,0xfffffff0
c001df0d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001df10:	c3                   	ret    
c001df11:	90                   	nop

c001df12 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001df12:	55                   	push   ebp
c001df13:	57                   	push   edi
c001df14:	56                   	push   esi
c001df15:	53                   	push   ebx
c001df16:	83 ec 0c             	sub    esp,0xc
c001df19:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001df1e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001df22:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001df26:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001df2a:	83 fe 07             	cmp    esi,0x7
c001df2d:	76 10                	jbe    c001df3f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001df2f:	83 ec 0c             	sub    esp,0xc
c001df32:	68 9b 96 02 c0       	push   0xc002969b
c001df37:	e8 98 1b ff ff       	call   c000fad4 <KePanic(char const*)>
c001df3c:	83 c4 10             	add    esp,0x10
c001df3f:	0f b6 db             	movzx  ebx,bl
c001df42:	83 fb 0f             	cmp    ebx,0xf
c001df45:	76 10                	jbe    c001df57 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001df47:	83 ec 0c             	sub    esp,0xc
c001df4a:	68 cb 96 02 c0       	push   0xc00296cb
c001df4f:	e8 80 1b ff ff       	call   c000fad4 <KePanic(char const*)>
c001df54:	83 c4 10             	add    esp,0x10
c001df57:	8d 04 36             	lea    eax,[esi+esi*1]
c001df5a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001df5f:	83 c8 f0             	or     eax,0xfffffff0
c001df62:	ee                   	out    dx,al
c001df63:	ba fa 0c 00 00       	mov    edx,0xcfa
c001df68:	89 e8                	mov    eax,ebp
c001df6a:	ee                   	out    dx,al
c001df6b:	89 f9                	mov    ecx,edi
c001df6d:	89 d8                	mov    eax,ebx
c001df6f:	0f b6 d9             	movzx  ebx,cl
c001df72:	83 c4 0c             	add    esp,0xc
c001df75:	c1 e0 08             	shl    eax,0x8
c001df78:	83 e3 fc             	and    ebx,0xfffffffc
c001df7b:	09 d8                	or     eax,ebx
c001df7d:	5b                   	pop    ebx
c001df7e:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001df83:	5e                   	pop    esi
c001df84:	5f                   	pop    edi
c001df85:	5d                   	pop    ebp
c001df86:	c3                   	ret    
c001df87:	90                   	nop

c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001df88:	57                   	push   edi
c001df89:	56                   	push   esi
c001df8a:	53                   	push   ebx
c001df8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001df97:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df9b:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001dfa1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001dfa5:	83 ff 01             	cmp    edi,0x1
c001dfa8:	75 3f                	jne    c001dfe9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001dfaa:	89 de                	mov    esi,ebx
c001dfac:	0f b6 c0             	movzx  eax,al
c001dfaf:	c1 e0 10             	shl    eax,0x10
c001dfb2:	81 e6 fc 00 00 00    	and    esi,0xfc
c001dfb8:	0f b6 c9             	movzx  ecx,cl
c001dfbb:	09 f0                	or     eax,esi
c001dfbd:	c1 e1 08             	shl    ecx,0x8
c001dfc0:	0f b6 d2             	movzx  edx,dl
c001dfc3:	c1 e2 0b             	shl    edx,0xb
c001dfc6:	09 c8                	or     eax,ecx
c001dfc8:	09 d0                	or     eax,edx
c001dfca:	ba f8 0c 00 00       	mov    edx,0xcf8
c001dfcf:	0d 00 00 00 80       	or     eax,0x80000000
c001dfd4:	ef                   	out    dx,eax
c001dfd5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001dfda:	ed                   	in     eax,dx
c001dfdb:	83 e3 02             	and    ebx,0x2
c001dfde:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001dfe5:	d3 e8                	shr    eax,cl
c001dfe7:	eb 44                	jmp    c001e02d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001dfe9:	83 ff 02             	cmp    edi,0x2
c001dfec:	75 2d                	jne    c001e01b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001dfee:	83 ec 0c             	sub    esp,0xc
c001dff1:	0f b6 fb             	movzx  edi,bl
c001dff4:	57                   	push   edi
c001dff5:	0f b6 c9             	movzx  ecx,cl
c001dff8:	51                   	push   ecx
c001dff9:	0f b6 d2             	movzx  edx,dl
c001dffc:	52                   	push   edx
c001dffd:	0f b6 c0             	movzx  eax,al
c001e000:	50                   	push   eax
c001e001:	56                   	push   esi
c001e002:	e8 0b ff ff ff       	call   c001df12 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e007:	89 c2                	mov    edx,eax
c001e009:	ed                   	in     eax,dx
c001e00a:	83 e3 02             	and    ebx,0x2
c001e00d:	83 c4 20             	add    esp,0x20
c001e010:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001e017:	d3 e8                	shr    eax,cl
c001e019:	eb 12                	jmp    c001e02d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001e01b:	83 ec 0c             	sub    esp,0xc
c001e01e:	68 fb 96 02 c0       	push   0xc00296fb
c001e023:	e8 ac 1a ff ff       	call   c000fad4 <KePanic(char const*)>
c001e028:	83 c4 10             	add    esp,0x10
c001e02b:	31 c0                	xor    eax,eax
c001e02d:	5b                   	pop    ebx
c001e02e:	5e                   	pop    esi
c001e02f:	5f                   	pop    edi
c001e030:	c3                   	ret    
c001e031:	90                   	nop

c001e032 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001e032:	83 ec 18             	sub    esp,0x18
c001e035:	6a 00                	push   0x0
c001e037:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e03c:	50                   	push   eax
c001e03d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e042:	50                   	push   eax
c001e043:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e048:	50                   	push   eax
c001e049:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e04d:	e8 36 ff ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e052:	83 c4 2c             	add    esp,0x2c
c001e055:	c3                   	ret    

c001e056 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001e056:	83 ec 18             	sub    esp,0x18
c001e059:	6a 0e                	push   0xe
c001e05b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e060:	50                   	push   eax
c001e061:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e066:	50                   	push   eax
c001e067:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e06c:	50                   	push   eax
c001e06d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e071:	e8 12 ff ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e076:	83 c4 2c             	add    esp,0x2c
c001e079:	0f b6 c0             	movzx  eax,al
c001e07c:	c3                   	ret    
c001e07d:	90                   	nop

c001e07e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001e07e:	55                   	push   ebp
c001e07f:	57                   	push   edi
c001e080:	56                   	push   esi
c001e081:	53                   	push   ebx
c001e082:	83 ec 18             	sub    esp,0x18
c001e085:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001e08a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001e08f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001e094:	6a 0a                	push   0xa
c001e096:	56                   	push   esi
c001e097:	55                   	push   ebp
c001e098:	57                   	push   edi
c001e099:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e09d:	e8 e6 fe ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0a2:	83 c4 14             	add    esp,0x14
c001e0a5:	6a 0a                	push   0xa
c001e0a7:	56                   	push   esi
c001e0a8:	55                   	push   ebp
c001e0a9:	57                   	push   edi
c001e0aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0ae:	89 c3                	mov    ebx,eax
c001e0b0:	0f b6 db             	movzx  ebx,bl
c001e0b3:	e8 d0 fe ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0b8:	83 c4 2c             	add    esp,0x2c
c001e0bb:	25 00 ff 00 00       	and    eax,0xff00
c001e0c0:	09 d8                	or     eax,ebx
c001e0c2:	5b                   	pop    ebx
c001e0c3:	5e                   	pop    esi
c001e0c4:	5f                   	pop    edi
c001e0c5:	5d                   	pop    ebp
c001e0c6:	c3                   	ret    
c001e0c7:	90                   	nop

c001e0c8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001e0c8:	83 ec 18             	sub    esp,0x18
c001e0cb:	6a 08                	push   0x8
c001e0cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0d2:	50                   	push   eax
c001e0d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0d8:	50                   	push   eax
c001e0d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0de:	50                   	push   eax
c001e0df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0e3:	e8 a0 fe ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0e8:	83 c4 2c             	add    esp,0x2c
c001e0eb:	0f b6 c4             	movzx  eax,ah
c001e0ee:	c3                   	ret    
c001e0ef:	90                   	nop

c001e0f0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001e0f0:	83 ec 18             	sub    esp,0x18
c001e0f3:	6a 08                	push   0x8
c001e0f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e0fa:	50                   	push   eax
c001e0fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e100:	50                   	push   eax
c001e101:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e106:	50                   	push   eax
c001e107:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e10b:	e8 78 fe ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e110:	83 c4 2c             	add    esp,0x2c
c001e113:	c3                   	ret    

c001e114 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001e114:	83 ec 18             	sub    esp,0x18
c001e117:	6a 3c                	push   0x3c
c001e119:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e11e:	50                   	push   eax
c001e11f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e124:	50                   	push   eax
c001e125:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e12a:	50                   	push   eax
c001e12b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e12f:	e8 54 fe ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e134:	83 c4 2c             	add    esp,0x2c
c001e137:	c3                   	ret    

c001e138 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001e138:	83 ec 18             	sub    esp,0x18
c001e13b:	6a 18                	push   0x18
c001e13d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e142:	50                   	push   eax
c001e143:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e148:	50                   	push   eax
c001e149:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e14e:	50                   	push   eax
c001e14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e153:	e8 30 fe ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e158:	83 c4 2c             	add    esp,0x2c
c001e15b:	0f b6 c4             	movzx  eax,ah
c001e15e:	c3                   	ret    
c001e15f:	90                   	nop

c001e160 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001e160:	55                   	push   ebp
c001e161:	57                   	push   edi
c001e162:	56                   	push   esi
c001e163:	53                   	push   ebx
c001e164:	83 ec 28             	sub    esp,0x28
c001e167:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e16b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001e170:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001e175:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001e17a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001e181:	8d 43 12             	lea    eax,[ebx+0x12]
c001e184:	83 c3 10             	add    ebx,0x10
c001e187:	0f b6 c0             	movzx  eax,al
c001e18a:	0f b6 db             	movzx  ebx,bl
c001e18d:	50                   	push   eax
c001e18e:	51                   	push   ecx
c001e18f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e193:	57                   	push   edi
c001e194:	55                   	push   ebp
c001e195:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e199:	e8 ea fd ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e19e:	83 c4 14             	add    esp,0x14
c001e1a1:	53                   	push   ebx
c001e1a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e1a6:	51                   	push   ecx
c001e1a7:	89 c6                	mov    esi,eax
c001e1a9:	57                   	push   edi
c001e1aa:	55                   	push   ebp
c001e1ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e1af:	c1 e6 10             	shl    esi,0x10
c001e1b2:	e8 d1 fd ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e1b7:	83 c4 3c             	add    esp,0x3c
c001e1ba:	5b                   	pop    ebx
c001e1bb:	0f b7 c0             	movzx  eax,ax
c001e1be:	09 f0                	or     eax,esi
c001e1c0:	5e                   	pop    esi
c001e1c1:	5f                   	pop    edi
c001e1c2:	5d                   	pop    ebp
c001e1c3:	c3                   	ret    

c001e1c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e1c4:	55                   	push   ebp
c001e1c5:	57                   	push   edi
c001e1c6:	56                   	push   esi
c001e1c7:	53                   	push   ebx
c001e1c8:	83 ec 0c             	sub    esp,0xc
c001e1cb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e1cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e1d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1d7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001e1db:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001e1e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e1e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e1e9:	83 f9 01             	cmp    ecx,0x1
c001e1ec:	75 5d                	jne    c001e24b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001e1ee:	0f b6 c8             	movzx  ecx,al
c001e1f1:	89 f0                	mov    eax,esi
c001e1f3:	25 fc 00 00 00       	and    eax,0xfc
c001e1f8:	0f b6 d2             	movzx  edx,dl
c001e1fb:	c1 e1 10             	shl    ecx,0x10
c001e1fe:	c1 e2 0b             	shl    edx,0xb
c001e201:	09 c1                	or     ecx,eax
c001e203:	89 f8                	mov    eax,edi
c001e205:	0f b6 f8             	movzx  edi,al
c001e208:	c1 e7 08             	shl    edi,0x8
c001e20b:	09 f9                	or     ecx,edi
c001e20d:	09 d1                	or     ecx,edx
c001e20f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e214:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e21a:	89 c8                	mov    eax,ecx
c001e21c:	ef                   	out    dx,eax
c001e21d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e222:	ed                   	in     eax,dx
c001e223:	83 e6 02             	and    esi,0x2
c001e226:	0f b7 db             	movzx  ebx,bx
c001e229:	74 0a                	je     c001e235 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001e22b:	c1 e3 10             	shl    ebx,0x10
c001e22e:	0f b7 d0             	movzx  edx,ax
c001e231:	09 d3                	or     ebx,edx
c001e233:	eb 05                	jmp    c001e23a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001e235:	66 31 c0             	xor    ax,ax
c001e238:	09 c3                	or     ebx,eax
c001e23a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e23f:	89 c8                	mov    eax,ecx
c001e241:	ef                   	out    dx,eax
c001e242:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e247:	89 d8                	mov    eax,ebx
c001e249:	eb 41                	jmp    c001e28c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e24b:	83 f9 02             	cmp    ecx,0x2
c001e24e:	75 45                	jne    c001e295 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001e250:	89 f1                	mov    ecx,esi
c001e252:	83 ec 0c             	sub    esp,0xc
c001e255:	0f b6 f1             	movzx  esi,cl
c001e258:	89 f9                	mov    ecx,edi
c001e25a:	56                   	push   esi
c001e25b:	0f b6 f9             	movzx  edi,cl
c001e25e:	57                   	push   edi
c001e25f:	0f b6 d2             	movzx  edx,dl
c001e262:	52                   	push   edx
c001e263:	0f b6 c0             	movzx  eax,al
c001e266:	50                   	push   eax
c001e267:	55                   	push   ebp
c001e268:	e8 a5 fc ff ff       	call   c001df12 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e26d:	89 c2                	mov    edx,eax
c001e26f:	ed                   	in     eax,dx
c001e270:	83 c4 20             	add    esp,0x20
c001e273:	f6 c2 02             	test   dl,0x2
c001e276:	0f b7 db             	movzx  ebx,bx
c001e279:	74 0c                	je     c001e287 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001e27b:	0f b7 c8             	movzx  ecx,ax
c001e27e:	89 d8                	mov    eax,ebx
c001e280:	c1 e0 10             	shl    eax,0x10
c001e283:	09 c8                	or     eax,ecx
c001e285:	eb 05                	jmp    c001e28c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001e287:	66 31 c0             	xor    ax,ax
c001e28a:	09 d8                	or     eax,ebx
c001e28c:	ef                   	out    dx,eax
c001e28d:	83 c4 0c             	add    esp,0xc
c001e290:	5b                   	pop    ebx
c001e291:	5e                   	pop    esi
c001e292:	5f                   	pop    edi
c001e293:	5d                   	pop    ebp
c001e294:	c3                   	ret    
c001e295:	c7 44 24 20 fb 96 02 c0 	mov    DWORD PTR [esp+0x20],0xc00296fb
c001e29d:	83 c4 0c             	add    esp,0xc
c001e2a0:	5b                   	pop    ebx
c001e2a1:	5e                   	pop    esi
c001e2a2:	5f                   	pop    edi
c001e2a3:	5d                   	pop    ebp
c001e2a4:	e9 2b 18 ff ff       	jmp    c000fad4 <KePanic(char const*)>
c001e2a9:	90                   	nop

c001e2aa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e2aa:	55                   	push   ebp
c001e2ab:	57                   	push   edi
c001e2ac:	56                   	push   esi
c001e2ad:	53                   	push   ebx
c001e2ae:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001e2b4:	80 3d ac 3d 03 c0 00 	cmp    BYTE PTR ds:0xc0033dac,0x0
c001e2bb:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001e2c2:	0f 85 bd 00 00 00    	jne    c001e385 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001e2c8:	83 ec 0c             	sub    esp,0xc
c001e2cb:	68 14 01 00 00       	push   0x114
c001e2d0:	e8 ab 13 ff ff       	call   c000f680 <malloc>
c001e2d5:	83 c4 0c             	add    esp,0xc
c001e2d8:	ff 35 58 13 03 c0    	push   DWORD PTR ds:0xc0031358
c001e2de:	68 01 97 02 c0       	push   0xc0029701
c001e2e3:	50                   	push   eax
c001e2e4:	89 c3                	mov    ebx,eax
c001e2e6:	e8 9d 9e fe ff       	call   c0008188 <File::File(char const*, Process*)>
c001e2eb:	83 c4 10             	add    esp,0x10
c001e2ee:	85 db                	test   ebx,ebx
c001e2f0:	0f 84 6b 02 00 00    	je     c001e561 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e2f6:	57                   	push   edi
c001e2f7:	57                   	push   edi
c001e2f8:	6a 01                	push   0x1
c001e2fa:	53                   	push   ebx
c001e2fb:	e8 a6 9e fe ff       	call   c00081a6 <File::open(FileOpenMode)>
c001e300:	83 c4 10             	add    esp,0x10
c001e303:	85 c0                	test   eax,eax
c001e305:	0f 85 56 02 00 00    	jne    c001e561 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e30b:	52                   	push   edx
c001e30c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001e310:	50                   	push   eax
c001e311:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e315:	50                   	push   eax
c001e316:	53                   	push   ebx
c001e317:	e8 8c a1 fe ff       	call   c00084a8 <File::stat(unsigned long long*, bool*)>
c001e31c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e320:	40                   	inc    eax
c001e321:	89 04 24             	mov    DWORD PTR [esp],eax
c001e324:	e8 57 13 ff ff       	call   c000f680 <malloc>
c001e329:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001e32d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e331:	59                   	pop    ecx
c001e332:	a3 a8 3d 03 c0       	mov    ds:0xc0033da8,eax
c001e337:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e339:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001e33d:	51                   	push   ecx
c001e33e:	50                   	push   eax
c001e33f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e343:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e347:	53                   	push   ebx
c001e348:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e34b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001e34f:	83 c4 20             	add    esp,0x20
c001e352:	89 c8                	mov    eax,ecx
c001e354:	99                   	cdq    
c001e355:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001e359:	0f 85 02 02 00 00    	jne    c001e561 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e35f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001e363:	0f 85 f8 01 00 00    	jne    c001e561 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e369:	83 ec 0c             	sub    esp,0xc
c001e36c:	53                   	push   ebx
c001e36d:	e8 92 9e fe ff       	call   c0008204 <File::close()>
c001e372:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e376:	83 c4 10             	add    esp,0x10
c001e379:	c6 05 ac 3d 03 c0 01 	mov    BYTE PTR ds:0xc0033dac,0x1
c001e380:	a3 a4 3d 03 c0       	mov    ds:0xc0033da4,eax
c001e385:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001e38d:	31 c9                	xor    ecx,ecx
c001e38f:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001e396:	8b 2d a4 3d 03 c0    	mov    ebp,DWORD PTR ds:0xc0033da4
c001e39c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001e3a3:	8b 15 a8 3d 03 c0    	mov    edx,DWORD PTR ds:0xc0033da8
c001e3a9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001e3ae:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001e3b6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001e3bb:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001e3c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e3c7:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001e3cf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e3d3:	39 cd                	cmp    ebp,ecx
c001e3d5:	0f 8e 86 01 00 00    	jle    c001e561 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001e3db:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001e3de:	d4 40                	aam    0x40
c001e3e0:	d5 39                	aad    0x39
c001e3e2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e3e6:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001e3ea:	d4 40                	aam    0x40
c001e3ec:	d5 39                	aad    0x39
c001e3ee:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e3f2:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001e3f6:	d4 40                	aam    0x40
c001e3f8:	d5 39                	aad    0x39
c001e3fa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e3fe:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001e402:	d4 40                	aam    0x40
c001e404:	d5 39                	aad    0x39
c001e406:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e40a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001e40e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001e412:	3c 56                	cmp    al,0x56
c001e414:	74 47                	je     c001e45d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001e416:	d4 40                	aam    0x40
c001e418:	d5 39                	aad    0x39
c001e41a:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e41d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001e421:	0f b6 db             	movzx  ebx,bl
c001e424:	c1 e3 04             	shl    ebx,0x4
c001e427:	d4 40                	aam    0x40
c001e429:	d5 39                	aad    0x39
c001e42b:	83 e8 30             	sub    eax,0x30
c001e42e:	0f b6 c0             	movzx  eax,al
c001e431:	09 c3                	or     ebx,eax
c001e433:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001e437:	c1 e3 04             	shl    ebx,0x4
c001e43a:	d4 40                	aam    0x40
c001e43c:	d5 39                	aad    0x39
c001e43e:	83 e8 30             	sub    eax,0x30
c001e441:	0f b6 c0             	movzx  eax,al
c001e444:	09 c3                	or     ebx,eax
c001e446:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001e44a:	c1 e3 04             	shl    ebx,0x4
c001e44d:	d4 40                	aam    0x40
c001e44f:	d5 39                	aad    0x39
c001e451:	83 e8 30             	sub    eax,0x30
c001e454:	0f b6 c0             	movzx  eax,al
c001e457:	09 c3                	or     ebx,eax
c001e459:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e45d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001e461:	80 fb 58             	cmp    bl,0x58
c001e464:	74 49                	je     c001e4af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001e466:	88 d8                	mov    al,bl
c001e468:	d4 40                	aam    0x40
c001e46a:	d5 39                	aad    0x39
c001e46c:	83 e8 30             	sub    eax,0x30
c001e46f:	0f b6 f8             	movzx  edi,al
c001e472:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001e476:	c1 e7 04             	shl    edi,0x4
c001e479:	d4 40                	aam    0x40
c001e47b:	d5 39                	aad    0x39
c001e47d:	83 e8 30             	sub    eax,0x30
c001e480:	0f b6 c0             	movzx  eax,al
c001e483:	09 c7                	or     edi,eax
c001e485:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001e489:	c1 e7 04             	shl    edi,0x4
c001e48c:	d4 40                	aam    0x40
c001e48e:	d5 39                	aad    0x39
c001e490:	83 e8 30             	sub    eax,0x30
c001e493:	0f b6 c0             	movzx  eax,al
c001e496:	09 c7                	or     edi,eax
c001e498:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001e49c:	c1 e7 04             	shl    edi,0x4
c001e49f:	d4 40                	aam    0x40
c001e4a1:	d5 39                	aad    0x39
c001e4a3:	83 e8 30             	sub    eax,0x30
c001e4a6:	0f b6 c0             	movzx  eax,al
c001e4a9:	09 c7                	or     edi,eax
c001e4ab:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001e4af:	8d 41 10             	lea    eax,[ecx+0x10]
c001e4b2:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001e4b6:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001e4ba:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e4be:	83 f9 0a             	cmp    ecx,0xa
c001e4c1:	74 07                	je     c001e4ca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001e4c3:	47                   	inc    edi
c001e4c4:	39 c5                	cmp    ebp,eax
c001e4c6:	75 16                	jne    c001e4de <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001e4c8:	89 e8                	mov    eax,ebp
c001e4ca:	83 f9 0a             	cmp    ecx,0xa
c001e4cd:	0f 94 c1             	sete   cl
c001e4d0:	0f b6 c9             	movzx  ecx,cl
c001e4d3:	01 c1                	add    ecx,eax
c001e4d5:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001e4da:	75 0f                	jne    c001e4eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001e4dc:	eb 1c                	jmp    c001e4fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001e4de:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e4e1:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001e4e5:	40                   	inc    eax
c001e4e6:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001e4e9:	eb cb                	jmp    c001e4b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001e4eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e4ef:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001e4f4:	0f 85 d9 fe ff ff    	jne    c001e3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e4fa:	80 fb 58             	cmp    bl,0x58
c001e4fd:	74 10                	je     c001e50f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001e4ff:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001e504:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001e509:	0f 85 c4 fe ff ff    	jne    c001e3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e50f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e513:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e517:	83 e8 30             	sub    eax,0x30
c001e51a:	c1 e0 04             	shl    eax,0x4
c001e51d:	83 eb 30             	sub    ebx,0x30
c001e520:	09 d8                	or     eax,ebx
c001e522:	0f b6 c0             	movzx  eax,al
c001e525:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001e529:	0f 85 a4 fe ff ff    	jne    c001e3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e52f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e533:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001e537:	83 e8 30             	sub    eax,0x30
c001e53a:	c1 e0 04             	shl    eax,0x4
c001e53d:	83 eb 30             	sub    ebx,0x30
c001e540:	09 d8                	or     eax,ebx
c001e542:	0f b6 c0             	movzx  eax,al
c001e545:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e549:	0f 85 84 fe ff ff    	jne    c001e3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001e54f:	50                   	push   eax
c001e550:	50                   	push   eax
c001e551:	8d 44 24 48          	lea    eax,[esp+0x48]
c001e555:	50                   	push   eax
c001e556:	56                   	push   esi
c001e557:	e8 f4 20 fe ff       	call   c0000650 <strcpy>
c001e55c:	83 c4 10             	add    esp,0x10
c001e55f:	eb 05                	jmp    c001e566 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001e561:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001e564:	31 f6                	xor    esi,esi
c001e566:	81 c4 4c 01 00 00    	add    esp,0x14c
c001e56c:	89 f0                	mov    eax,esi
c001e56e:	5b                   	pop    ebx
c001e56f:	5e                   	pop    esi
c001e570:	5f                   	pop    edi
c001e571:	5d                   	pop    ebp
c001e572:	c3                   	ret    
c001e573:	90                   	nop

c001e574 <PCI::checkBus(unsigned char)>:
c001e574:	56                   	push   esi
c001e575:	53                   	push   ebx
c001e576:	31 db                	xor    ebx,ebx
c001e578:	51                   	push   ecx
c001e579:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e57e:	52                   	push   edx
c001e57f:	53                   	push   ebx
c001e580:	43                   	inc    ebx
c001e581:	56                   	push   esi
c001e582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e586:	e8 6f 03 00 00       	call   c001e8fa <PCI::checkDevice(unsigned char, unsigned char)>
c001e58b:	83 c4 10             	add    esp,0x10
c001e58e:	83 fb 20             	cmp    ebx,0x20
c001e591:	75 eb                	jne    c001e57e <PCI::checkBus(unsigned char)+0xa>
c001e593:	58                   	pop    eax
c001e594:	5b                   	pop    ebx
c001e595:	5e                   	pop    esi
c001e596:	c3                   	ret    
c001e597:	90                   	nop

c001e598 <PCI::foundDevice(PCIDeviceInfo)>:
c001e598:	55                   	push   ebp
c001e599:	57                   	push   edi
c001e59a:	56                   	push   esi
c001e59b:	53                   	push   ebx
c001e59c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001e5a2:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001e5aa:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001e5b1:	3d ff ff 00 00       	cmp    eax,0xffff
c001e5b6:	0f 84 b6 01 00 00    	je     c001e772 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e5bc:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001e5c4:	66 81 fd 06 04       	cmp    bp,0x406
c001e5c9:	75 32                	jne    c001e5fd <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001e5cb:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001e5d3:	50                   	push   eax
c001e5d4:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001e5dc:	50                   	push   eax
c001e5dd:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e5e5:	50                   	push   eax
c001e5e6:	53                   	push   ebx
c001e5e7:	e8 4c fb ff ff       	call   c001e138 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e5ec:	59                   	pop    ecx
c001e5ed:	5e                   	pop    esi
c001e5ee:	0f b6 c0             	movzx  eax,al
c001e5f1:	50                   	push   eax
c001e5f2:	53                   	push   ebx
c001e5f3:	e8 7c ff ff ff       	call   c001e574 <PCI::checkBus(unsigned char)>
c001e5f8:	e9 15 01 00 00       	jmp    c001e712 <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001e5fd:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001e605:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e60b:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001e612:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001e619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e61d:	85 c0                	test   eax,eax
c001e61f:	74 34                	je     c001e655 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001e621:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e624:	85 d2                	test   edx,edx
c001e626:	74 29                	je     c001e651 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e628:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e62e:	31 cf                	xor    edi,ecx
c001e630:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e636:	75 19                	jne    c001e651 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e638:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e63e:	75 11                	jne    c001e651 <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001e640:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001e647:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001e64b:	0f 84 21 01 00 00    	je     c001e772 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e651:	8b 00                	mov    eax,DWORD PTR [eax]
c001e653:	eb c8                	jmp    c001e61d <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001e655:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e659:	be 34 97 02 c0       	mov    esi,0xc0029734
c001e65e:	b9 07 00 00 00       	mov    ecx,0x7
c001e663:	fc                   	cld    
c001e664:	31 d2                	xor    edx,edx
c001e666:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e668:	b9 12 00 00 00       	mov    ecx,0x12
c001e66d:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001e674:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001e678:	83 ec 0c             	sub    esp,0xc
c001e67b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e67d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001e685:	b9 0a 00 00 00       	mov    ecx,0xa
c001e68a:	f7 f1                	div    ecx
c001e68c:	83 c0 30             	add    eax,0x30
c001e68f:	83 c2 30             	add    edx,0x30
c001e692:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001e696:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001e69e:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001e6a2:	31 d2                	xor    edx,edx
c001e6a4:	f7 f1                	div    ecx
c001e6a6:	83 c0 30             	add    eax,0x30
c001e6a9:	83 c2 30             	add    edx,0x30
c001e6ac:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e6b0:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001e6b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e6b8:	50                   	push   eax
c001e6b9:	e8 1f eb fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001e6be:	83 c4 10             	add    esp,0x10
c001e6c1:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001e6c7:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001e6ce:	75 47                	jne    c001e717 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	68 64 01 00 00       	push   0x164
c001e6d8:	e8 a3 0f ff ff       	call   c000f680 <malloc>
c001e6dd:	89 04 24             	mov    DWORD PTR [esp],eax
c001e6e0:	89 c5                	mov    ebp,eax
c001e6e2:	e8 37 11 00 00       	call   c001f81e <SATABus::SATABus()>
c001e6e7:	58                   	pop    eax
c001e6e8:	5a                   	pop    edx
c001e6e9:	55                   	push   ebp
c001e6ea:	53                   	push   ebx
c001e6eb:	e8 06 b3 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e6f0:	83 ec 1c             	sub    esp,0x1c
c001e6f3:	b9 09 00 00 00       	mov    ecx,0x9
c001e6f8:	89 e7                	mov    edi,esp
c001e6fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6fc:	55                   	push   ebp
c001e6fd:	e8 3a b2 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e702:	83 c4 30             	add    esp,0x30
c001e705:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e708:	6a 00                	push   0x0
c001e70a:	6a 00                	push   0x0
c001e70c:	6a 00                	push   0x0
c001e70e:	55                   	push   ebp
c001e70f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e712:	83 c4 10             	add    esp,0x10
c001e715:	eb 5b                	jmp    c001e772 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e717:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001e71d:	75 19                	jne    c001e738 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001e71f:	83 ec 0c             	sub    esp,0xc
c001e722:	68 70 02 00 00       	push   0x270
c001e727:	e8 54 0f ff ff       	call   c000f680 <malloc>
c001e72c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e72f:	89 c5                	mov    ebp,eax
c001e731:	e8 94 02 00 00       	call   c001e9ca <IDE::IDE()>
c001e736:	eb af                	jmp    c001e6e7 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001e738:	83 ec 0c             	sub    esp,0xc
c001e73b:	68 58 01 00 00       	push   0x158
c001e740:	e8 3b 0f ff ff       	call   c000f680 <malloc>
c001e745:	89 c5                	mov    ebp,eax
c001e747:	58                   	pop    eax
c001e748:	5a                   	pop    edx
c001e749:	68 1a 97 02 c0       	push   0xc002971a
c001e74e:	55                   	push   ebp
c001e74f:	e8 56 b5 fe ff       	call   c0009caa <DriverlessDevice::DriverlessDevice(char const*)>
c001e754:	59                   	pop    ecx
c001e755:	5f                   	pop    edi
c001e756:	55                   	push   ebp
c001e757:	53                   	push   ebx
c001e758:	e8 99 b2 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001e75d:	83 ec 1c             	sub    esp,0x1c
c001e760:	b9 09 00 00 00       	mov    ecx,0x9
c001e765:	89 e7                	mov    edi,esp
c001e767:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e769:	55                   	push   ebp
c001e76a:	e8 cd b1 fe ff       	call   c000993c <Device::preOpenPCI(PCIDeviceInfo)>
c001e76f:	83 c4 30             	add    esp,0x30
c001e772:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e778:	5b                   	pop    ebx
c001e779:	5e                   	pop    esi
c001e77a:	5f                   	pop    edi
c001e77b:	5d                   	pop    ebp
c001e77c:	c3                   	ret    
c001e77d:	90                   	nop

c001e77e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e77e:	55                   	push   ebp
c001e77f:	57                   	push   edi
c001e780:	56                   	push   esi
c001e781:	53                   	push   ebx
c001e782:	83 ec 68             	sub    esp,0x68
c001e785:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001e78c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001e790:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e794:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001e79b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001e7a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e7a4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001e7ab:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001e7b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e7b4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001e7b9:	6a 0c                	push   0xc
c001e7bb:	57                   	push   edi
c001e7bc:	53                   	push   ebx
c001e7bd:	56                   	push   esi
c001e7be:	55                   	push   ebp
c001e7bf:	e8 c4 f7 ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7c4:	83 c4 20             	add    esp,0x20
c001e7c7:	57                   	push   edi
c001e7c8:	53                   	push   ebx
c001e7c9:	56                   	push   esi
c001e7ca:	55                   	push   ebp
c001e7cb:	e8 ae f8 ff ff       	call   c001e07e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e7d0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001e7d5:	57                   	push   edi
c001e7d6:	53                   	push   ebx
c001e7d7:	56                   	push   esi
c001e7d8:	55                   	push   ebp
c001e7d9:	e8 36 f9 ff ff       	call   c001e114 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e7de:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001e7e2:	83 c4 14             	add    esp,0x14
c001e7e5:	6a 3c                	push   0x3c
c001e7e7:	57                   	push   edi
c001e7e8:	53                   	push   ebx
c001e7e9:	56                   	push   esi
c001e7ea:	55                   	push   ebp
c001e7eb:	e8 98 f7 ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e7f0:	0f b6 c4             	movzx  eax,ah
c001e7f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e7f7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e7fb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e7ff:	a1 08 11 03 c0       	mov    eax,ds:0xc0031108
c001e804:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001e80a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e810:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e814:	83 c4 20             	add    esp,0x20
c001e817:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e81c:	74 30                	je     c001e84e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e81e:	31 c0                	xor    eax,eax
c001e820:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e824:	7e 28                	jle    c001e84e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e826:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e82e:	39 cb                	cmp    ebx,ecx
c001e830:	75 19                	jne    c001e84b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e832:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e83a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e83e:	75 0b                	jne    c001e84b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e840:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e847:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e84b:	40                   	inc    eax
c001e84c:	eb d2                	jmp    c001e820 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e84e:	31 d2                	xor    edx,edx
c001e850:	83 ec 0c             	sub    esp,0xc
c001e853:	57                   	push   edi
c001e854:	53                   	push   ebx
c001e855:	56                   	push   esi
c001e856:	52                   	push   edx
c001e857:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e85b:	55                   	push   ebp
c001e85c:	e8 ff f8 ff ff       	call   c001e160 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e861:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e865:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e869:	42                   	inc    edx
c001e86a:	83 c4 20             	add    esp,0x20
c001e86d:	83 fa 06             	cmp    edx,0x6
c001e870:	75 de                	jne    c001e850 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e876:	83 ec 0c             	sub    esp,0xc
c001e879:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e87d:	c1 e2 08             	shl    edx,0x8
c001e880:	0f b6 c4             	movzx  eax,ah
c001e883:	09 d0                	or     eax,edx
c001e885:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e88a:	6a 02                	push   0x2
c001e88c:	57                   	push   edi
c001e88d:	53                   	push   ebx
c001e88e:	56                   	push   esi
c001e88f:	55                   	push   ebp
c001e890:	e8 f3 f6 ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e895:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e89a:	83 c4 20             	add    esp,0x20
c001e89d:	57                   	push   edi
c001e89e:	53                   	push   ebx
c001e89f:	56                   	push   esi
c001e8a0:	55                   	push   ebp
c001e8a1:	e8 22 f8 ff ff       	call   c001e0c8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e8a6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e8aa:	57                   	push   edi
c001e8ab:	53                   	push   ebx
c001e8ac:	56                   	push   esi
c001e8ad:	55                   	push   ebp
c001e8ae:	e8 7f f7 ff ff       	call   c001e032 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e8b3:	b9 09 00 00 00       	mov    ecx,0x9
c001e8b8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e8bd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e8c1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e8c5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e8c9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e8cd:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e8d1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e8d5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e8d9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e8dd:	83 ec 0c             	sub    esp,0xc
c001e8e0:	fc                   	cld    
c001e8e1:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e8e5:	89 e7                	mov    edi,esp
c001e8e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e8e9:	55                   	push   ebp
c001e8ea:	e8 a9 fc ff ff       	call   c001e598 <PCI::foundDevice(PCIDeviceInfo)>
c001e8ef:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e8f5:	5b                   	pop    ebx
c001e8f6:	5e                   	pop    esi
c001e8f7:	5f                   	pop    edi
c001e8f8:	5d                   	pop    ebp
c001e8f9:	c3                   	ret    

c001e8fa <PCI::checkDevice(unsigned char, unsigned char)>:
c001e8fa:	55                   	push   ebp
c001e8fb:	57                   	push   edi
c001e8fc:	56                   	push   esi
c001e8fd:	53                   	push   ebx
c001e8fe:	83 ec 0c             	sub    esp,0xc
c001e901:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e906:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e90b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e90f:	6a 00                	push   0x0
c001e911:	56                   	push   esi
c001e912:	57                   	push   edi
c001e913:	55                   	push   ebp
c001e914:	e8 19 f7 ff ff       	call   c001e032 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e919:	6a 00                	push   0x0
c001e91b:	56                   	push   esi
c001e91c:	57                   	push   edi
c001e91d:	55                   	push   ebp
c001e91e:	e8 5b fe ff ff       	call   c001e77e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e923:	83 c4 20             	add    esp,0x20
c001e926:	6a 00                	push   0x0
c001e928:	56                   	push   esi
c001e929:	57                   	push   edi
c001e92a:	55                   	push   ebp
c001e92b:	e8 26 f7 ff ff       	call   c001e056 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e930:	83 c4 10             	add    esp,0x10
c001e933:	a8 80                	test   al,0x80
c001e935:	74 2d                	je     c001e964 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e937:	bb 01 00 00 00       	mov    ebx,0x1
c001e93c:	53                   	push   ebx
c001e93d:	56                   	push   esi
c001e93e:	57                   	push   edi
c001e93f:	55                   	push   ebp
c001e940:	e8 ed f6 ff ff       	call   c001e032 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e945:	83 c4 10             	add    esp,0x10
c001e948:	0f b7 c0             	movzx  eax,ax
c001e94b:	3d ff ff 00 00       	cmp    eax,0xffff
c001e950:	74 0c                	je     c001e95e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e952:	53                   	push   ebx
c001e953:	56                   	push   esi
c001e954:	57                   	push   edi
c001e955:	55                   	push   ebp
c001e956:	e8 23 fe ff ff       	call   c001e77e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e95b:	83 c4 10             	add    esp,0x10
c001e95e:	43                   	inc    ebx
c001e95f:	83 fb 08             	cmp    ebx,0x8
c001e962:	75 d8                	jne    c001e93c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e964:	83 c4 0c             	add    esp,0xc
c001e967:	5b                   	pop    ebx
c001e968:	5e                   	pop    esi
c001e969:	5f                   	pop    edi
c001e96a:	5d                   	pop    ebp
c001e96b:	c3                   	ret    

c001e96c <PCI::detect()>:
c001e96c:	56                   	push   esi
c001e96d:	53                   	push   ebx
c001e96e:	53                   	push   ebx
c001e96f:	31 db                	xor    ebx,ebx
c001e971:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e975:	6a 00                	push   0x0
c001e977:	6a 00                	push   0x0
c001e979:	6a 00                	push   0x0
c001e97b:	56                   	push   esi
c001e97c:	e8 d5 f6 ff ff       	call   c001e056 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e981:	83 c4 10             	add    esp,0x10
c001e984:	a8 80                	test   al,0x80
c001e986:	75 21                	jne    c001e9a9 <PCI::detect()+0x3d>
c001e988:	51                   	push   ecx
c001e989:	51                   	push   ecx
c001e98a:	6a 00                	push   0x0
c001e98c:	56                   	push   esi
c001e98d:	e8 e2 fb ff ff       	call   c001e574 <PCI::checkBus(unsigned char)>
c001e992:	83 c4 10             	add    esp,0x10
c001e995:	eb 2a                	jmp    c001e9c1 <PCI::detect()+0x55>
c001e997:	52                   	push   edx
c001e998:	52                   	push   edx
c001e999:	53                   	push   ebx
c001e99a:	43                   	inc    ebx
c001e99b:	56                   	push   esi
c001e99c:	e8 d3 fb ff ff       	call   c001e574 <PCI::checkBus(unsigned char)>
c001e9a1:	83 c4 10             	add    esp,0x10
c001e9a4:	83 fb 08             	cmp    ebx,0x8
c001e9a7:	74 18                	je     c001e9c1 <PCI::detect()+0x55>
c001e9a9:	53                   	push   ebx
c001e9aa:	6a 00                	push   0x0
c001e9ac:	6a 00                	push   0x0
c001e9ae:	56                   	push   esi
c001e9af:	e8 7e f6 ff ff       	call   c001e032 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e9b4:	83 c4 10             	add    esp,0x10
c001e9b7:	0f b7 c0             	movzx  eax,ax
c001e9ba:	3d ff ff 00 00       	cmp    eax,0xffff
c001e9bf:	74 d6                	je     c001e997 <PCI::detect()+0x2b>
c001e9c1:	58                   	pop    eax
c001e9c2:	5b                   	pop    ebx
c001e9c3:	5e                   	pop    esi
c001e9c4:	c3                   	ret    
c001e9c5:	90                   	nop

c001e9c6 <IDE::close(int, int, void*)>:
c001e9c6:	83 c8 ff             	or     eax,0xffffffff
c001e9c9:	c3                   	ret    

c001e9ca <IDE::IDE()>:
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d1:	83 ec 08             	sub    esp,0x8
c001e9d4:	68 c4 97 02 c0       	push   0xc00297c4
c001e9d9:	50                   	push   eax
c001e9da:	e8 71 b3 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	ba f0 98 02 c0       	mov    edx,0xc00298f0
c001e9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9eb:	89 10                	mov    DWORD PTR [eax],edx
c001e9ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e9f8:	90                   	nop
c001e9f9:	83 c4 0c             	add    esp,0xc
c001e9fc:	c3                   	ret    
c001e9fd:	90                   	nop

c001e9fe <IDE::prepareInterrupt(unsigned char)>:
c001e9fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ea03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea07:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ea0f:	c3                   	ret    

c001ea10 <selectDrive(unsigned char, unsigned char)>:
c001ea10:	c3                   	ret    
c001ea11:	90                   	nop

c001ea12 <IDE::getBase(unsigned char)>:
c001ea12:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ea17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea1b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ea23:	c3                   	ret    

c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ea24:	55                   	push   ebp
c001ea25:	57                   	push   edi
c001ea26:	56                   	push   esi
c001ea27:	53                   	push   ebx
c001ea28:	83 ec 1c             	sub    esp,0x1c
c001ea2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea2f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ea37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ea3b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ea3e:	80 f9 03             	cmp    cl,0x3
c001ea41:	77 4f                	ja     c001ea92 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ea43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea47:	0f b6 f2             	movzx  esi,dl
c001ea4a:	0f b6 db             	movzx  ebx,bl
c001ea4d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ea50:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ea55:	80 ca 80             	or     dl,0x80
c001ea58:	52                   	push   edx
c001ea59:	6a 0c                	push   0xc
c001ea5b:	56                   	push   esi
c001ea5c:	57                   	push   edi
c001ea5d:	e8 c2 ff ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea62:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ea67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea6b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ea6f:	ee                   	out    dx,al
c001ea70:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ea75:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ea79:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ea7d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ea85:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ea89:	83 c4 2c             	add    esp,0x2c
c001ea8c:	5b                   	pop    ebx
c001ea8d:	5e                   	pop    esi
c001ea8e:	5f                   	pop    edi
c001ea8f:	5d                   	pop    ebp
c001ea90:	eb 92                	jmp    c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea92:	0f b6 cb             	movzx  ecx,bl
c001ea95:	83 f9 07             	cmp    ecx,0x7
c001ea98:	77 12                	ja     c001eaac <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ea9a:	0f b6 d2             	movzx  edx,dl
c001ea9d:	0f b6 db             	movzx  ebx,bl
c001eaa0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001eaa8:	01 da                	add    edx,ebx
c001eaaa:	eb 2f                	jmp    c001eadb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001eaac:	83 f9 0d             	cmp    ecx,0xd
c001eaaf:	77 13                	ja     c001eac4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001eab1:	0f b6 d2             	movzx  edx,dl
c001eab4:	0f b6 db             	movzx  ebx,bl
c001eab7:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001eabe:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001eac2:	eb 17                	jmp    c001eadb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001eac4:	83 f9 15             	cmp    ecx,0x15
c001eac7:	77 13                	ja     c001eadc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001eac9:	0f b6 d2             	movzx  edx,dl
c001eacc:	0f b6 db             	movzx  ebx,bl
c001eacf:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ead7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001eadb:	ee                   	out    dx,al
c001eadc:	83 c4 1c             	add    esp,0x1c
c001eadf:	5b                   	pop    ebx
c001eae0:	5e                   	pop    esi
c001eae1:	5f                   	pop    edi
c001eae2:	5d                   	pop    ebp
c001eae3:	c3                   	ret    

c001eae4 <IDE::read(unsigned char, unsigned char)>:
c001eae4:	57                   	push   edi
c001eae5:	56                   	push   esi
c001eae6:	53                   	push   ebx
c001eae7:	83 ec 10             	sub    esp,0x10
c001eaea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001eaee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001eaf2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001eaf6:	8d 42 f8             	lea    eax,[edx-0x8]
c001eaf9:	3c 03                	cmp    al,0x3
c001eafb:	77 48                	ja     c001eb45 <IDE::read(unsigned char, unsigned char)+0x61>
c001eafd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001eb01:	0f b6 f1             	movzx  esi,cl
c001eb04:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001eb07:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001eb0c:	0c 80                	or     al,0x80
c001eb0e:	50                   	push   eax
c001eb0f:	6a 0c                	push   0xc
c001eb11:	56                   	push   esi
c001eb12:	53                   	push   ebx
c001eb13:	e8 0c ff ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb1c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001eb21:	0f b6 d2             	movzx  edx,dl
c001eb24:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001eb28:	ec                   	in     al,dx
c001eb29:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001eb2d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001eb32:	52                   	push   edx
c001eb33:	6a 0c                	push   0xc
c001eb35:	56                   	push   esi
c001eb36:	53                   	push   ebx
c001eb37:	e8 e8 fe ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb3c:	83 c4 20             	add    esp,0x20
c001eb3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001eb43:	eb 4c                	jmp    c001eb91 <IDE::read(unsigned char, unsigned char)+0xad>
c001eb45:	0f b6 f2             	movzx  esi,dl
c001eb48:	83 fe 07             	cmp    esi,0x7
c001eb4b:	77 12                	ja     c001eb5f <IDE::read(unsigned char, unsigned char)+0x7b>
c001eb4d:	0f b6 c9             	movzx  ecx,cl
c001eb50:	0f b6 d2             	movzx  edx,dl
c001eb53:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001eb5b:	01 c2                	add    edx,eax
c001eb5d:	eb 31                	jmp    c001eb90 <IDE::read(unsigned char, unsigned char)+0xac>
c001eb5f:	83 fe 0d             	cmp    esi,0xd
c001eb62:	77 13                	ja     c001eb77 <IDE::read(unsigned char, unsigned char)+0x93>
c001eb64:	0f b6 c9             	movzx  ecx,cl
c001eb67:	0f b6 d2             	movzx  edx,dl
c001eb6a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001eb71:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eb75:	eb 19                	jmp    c001eb90 <IDE::read(unsigned char, unsigned char)+0xac>
c001eb77:	31 c0                	xor    eax,eax
c001eb79:	83 fe 15             	cmp    esi,0x15
c001eb7c:	77 13                	ja     c001eb91 <IDE::read(unsigned char, unsigned char)+0xad>
c001eb7e:	0f b6 c9             	movzx  ecx,cl
c001eb81:	0f b6 d2             	movzx  edx,dl
c001eb84:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001eb8c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001eb90:	ec                   	in     al,dx
c001eb91:	83 c4 10             	add    esp,0x10
c001eb94:	5b                   	pop    ebx
c001eb95:	5e                   	pop    esi
c001eb96:	5f                   	pop    edi
c001eb97:	c3                   	ret    

c001eb98 <IDE::waitInterrupt(unsigned char)>:
c001eb98:	55                   	push   ebp
c001eb99:	57                   	push   edi
c001eb9a:	56                   	push   esi
c001eb9b:	53                   	push   ebx
c001eb9c:	31 db                	xor    ebx,ebx
c001eb9e:	83 ec 0c             	sub    esp,0xc
c001eba1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001eba5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ebaa:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ebb2:	89 e8                	mov    eax,ebp
c001ebb4:	84 c0                	test   al,al
c001ebb6:	75 31                	jne    c001ebe9 <IDE::waitInterrupt(unsigned char)+0x51>
c001ebb8:	52                   	push   edx
c001ebb9:	6a 0c                	push   0xc
c001ebbb:	56                   	push   esi
c001ebbc:	57                   	push   edi
c001ebbd:	e8 22 ff ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001ebc2:	83 c4 10             	add    esp,0x10
c001ebc5:	a8 01                	test   al,0x1
c001ebc7:	75 28                	jne    c001ebf1 <IDE::waitInterrupt(unsigned char)+0x59>
c001ebc9:	f6 c3 04             	test   bl,0x4
c001ebcc:	75 13                	jne    c001ebe1 <IDE::waitInterrupt(unsigned char)+0x49>
c001ebce:	83 fb 32             	cmp    ebx,0x32
c001ebd1:	7e 0e                	jle    c001ebe1 <IDE::waitInterrupt(unsigned char)+0x49>
c001ebd3:	50                   	push   eax
c001ebd4:	50                   	push   eax
c001ebd5:	6a 00                	push   0x0
c001ebd7:	6a 64                	push   0x64
c001ebd9:	e8 62 7c ff ff       	call   c0016840 <milliTenthSleep(unsigned long long)>
c001ebde:	83 c4 10             	add    esp,0x10
c001ebe1:	83 fb 3c             	cmp    ebx,0x3c
c001ebe4:	74 0b                	je     c001ebf1 <IDE::waitInterrupt(unsigned char)+0x59>
c001ebe6:	43                   	inc    ebx
c001ebe7:	eb c1                	jmp    c001ebaa <IDE::waitInterrupt(unsigned char)+0x12>
c001ebe9:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ebf1:	83 c4 0c             	add    esp,0xc
c001ebf4:	89 e8                	mov    eax,ebp
c001ebf6:	5b                   	pop    ebx
c001ebf7:	5e                   	pop    esi
c001ebf8:	5f                   	pop    edi
c001ebf9:	5d                   	pop    ebp
c001ebfa:	c3                   	ret    

c001ebfb <ideChannel0IRQHandler(regs*, void*)>:
c001ebfb:	83 ec 10             	sub    esp,0x10
c001ebfe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec02:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ec09:	6a 07                	push   0x7
c001ec0b:	6a 00                	push   0x0
c001ec0d:	50                   	push   eax
c001ec0e:	e8 d1 fe ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001ec13:	83 c4 1c             	add    esp,0x1c
c001ec16:	c3                   	ret    

c001ec17 <ideChannel1IRQHandler(regs*, void*)>:
c001ec17:	83 ec 10             	sub    esp,0x10
c001ec1a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ec1e:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ec25:	6a 07                	push   0x7
c001ec27:	6a 01                	push   0x1
c001ec29:	50                   	push   eax
c001ec2a:	e8 b5 fe ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001ec2f:	83 c4 1c             	add    esp,0x1c
c001ec32:	c3                   	ret    
c001ec33:	90                   	nop

c001ec34 <IDE::enableIRQs(unsigned char, bool)>:
c001ec34:	57                   	push   edi
c001ec35:	b8 02 00 00 00       	mov    eax,0x2
c001ec3a:	56                   	push   esi
c001ec3b:	53                   	push   ebx
c001ec3c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ec41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ec45:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec49:	74 02                	je     c001ec4d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ec4b:	31 c0                	xor    eax,eax
c001ec4d:	0f b6 db             	movzx  ebx,bl
c001ec50:	bf 04 00 00 00       	mov    edi,0x4
c001ec55:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ec5c:	50                   	push   eax
c001ec5d:	6a 0c                	push   0xc
c001ec5f:	53                   	push   ebx
c001ec60:	56                   	push   esi
c001ec61:	e8 be fd ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec66:	83 c4 10             	add    esp,0x10
c001ec69:	50                   	push   eax
c001ec6a:	6a 0c                	push   0xc
c001ec6c:	53                   	push   ebx
c001ec6d:	56                   	push   esi
c001ec6e:	e8 71 fe ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001ec73:	83 c4 10             	add    esp,0x10
c001ec76:	4f                   	dec    edi
c001ec77:	75 f0                	jne    c001ec69 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ec79:	5b                   	pop    ebx
c001ec7a:	5e                   	pop    esi
c001ec7b:	5f                   	pop    edi
c001ec7c:	c3                   	ret    
c001ec7d:	90                   	nop

c001ec7e <IDE::open(int, int, void*)>:
c001ec7e:	55                   	push   ebp
c001ec7f:	57                   	push   edi
c001ec80:	56                   	push   esi
c001ec81:	53                   	push   ebx
c001ec82:	83 ec 1c             	sub    esp,0x1c
c001ec85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec89:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ec90:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ec99:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001eca2:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001eca9:	0f 85 80 02 00 00    	jne    c001ef2f <IDE::open(int, int, void*)+0x2b1>
c001ecaf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ecb5:	a8 70                	test   al,0x70
c001ecb7:	75 44                	jne    c001ecfd <IDE::open(int, int, void*)+0x7f>
c001ecb9:	ba 20 84 00 00       	mov    edx,0x8420
c001ecbe:	0f a3 c2             	bt     edx,eax
c001ecc1:	73 3a                	jae    c001ecfd <IDE::open(int, int, void*)+0x7f>
c001ecc3:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ecc9:	83 ec 0c             	sub    esp,0xc
c001eccc:	83 e0 fc             	and    eax,0xfffffffc
c001eccf:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ecd6:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ecdc:	83 e0 fc             	and    eax,0xfffffffc
c001ecdf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ece6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ecec:	83 e0 fc             	and    eax,0xfffffffc
c001ecef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ecf6:	68 7d 6e 02 c0       	push   0xc0026e7d
c001ecfb:	eb 60                	jmp    c001ed5d <IDE::open(int, int, void*)+0xdf>
c001ecfd:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ed07:	be 64 00 00 00       	mov    esi,0x64
c001ed0c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ed16:	57                   	push   edi
c001ed17:	57                   	push   edi
c001ed18:	68 dc 97 02 c0       	push   0xc00297dc
c001ed1d:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001ed21:	57                   	push   edi
c001ed22:	e8 29 19 fe ff       	call   c0000650 <strcpy>
c001ed27:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001ed2e:	31 d2                	xor    edx,edx
c001ed30:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ed33:	89 c8                	mov    eax,ecx
c001ed35:	f7 f6                	div    esi
c001ed37:	be 0a 00 00 00       	mov    esi,0xa
c001ed3c:	31 d2                	xor    edx,edx
c001ed3e:	83 c0 30             	add    eax,0x30
c001ed41:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ed45:	89 c8                	mov    eax,ecx
c001ed47:	f7 f6                	div    esi
c001ed49:	89 d1                	mov    ecx,edx
c001ed4b:	31 d2                	xor    edx,edx
c001ed4d:	f7 f6                	div    esi
c001ed4f:	83 c1 30             	add    ecx,0x30
c001ed52:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001ed56:	83 c2 30             	add    edx,0x30
c001ed59:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001ed5d:	e8 7b e4 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001ed62:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ed69:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ed6e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ed75:	83 c4 10             	add    esp,0x10
c001ed78:	89 fa                	mov    edx,edi
c001ed7a:	c1 e1 10             	shl    ecx,0x10
c001ed7d:	c1 e0 0b             	shl    eax,0xb
c001ed80:	09 c1                	or     ecx,eax
c001ed82:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ed89:	c1 e0 08             	shl    eax,0x8
c001ed8c:	09 c1                	or     ecx,eax
c001ed8e:	89 c8                	mov    eax,ecx
c001ed90:	0d 08 00 00 80       	or     eax,0x80000008
c001ed95:	ef                   	out    dx,eax
c001ed96:	be fc 0c 00 00       	mov    esi,0xcfc
c001ed9b:	89 f2                	mov    edx,esi
c001ed9d:	ed                   	in     eax,dx
c001ed9e:	c1 e8 10             	shr    eax,0x10
c001eda1:	3d ff ff 00 00       	cmp    eax,0xffff
c001eda6:	0f 84 e1 00 00 00    	je     c001ee8d <IDE::open(int, int, void*)+0x20f>
c001edac:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001edb2:	89 fa                	mov    edx,edi
c001edb4:	89 c8                	mov    eax,ecx
c001edb6:	ef                   	out    dx,eax
c001edb7:	b0 fe                	mov    al,0xfe
c001edb9:	89 f2                	mov    edx,esi
c001edbb:	ee                   	out    dx,al
c001edbc:	89 c8                	mov    eax,ecx
c001edbe:	89 fa                	mov    edx,edi
c001edc0:	ef                   	out    dx,eax
c001edc1:	89 f2                	mov    edx,esi
c001edc3:	ed                   	in     eax,dx
c001edc4:	3c fe                	cmp    al,0xfe
c001edc6:	0f 85 83 00 00 00    	jne    c001ee4f <IDE::open(int, int, void*)+0x1d1>
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	68 b3 6e 02 c0       	push   0xc0026eb3
c001edd4:	e8 04 e4 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001edd9:	c7 04 24 e2 97 02 c0 	mov    DWORD PTR [esp],0xc00297e2
c001ede0:	e8 81 81 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001ede5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001edef:	c7 04 24 a8 71 02 c0 	mov    DWORD PTR [esp],0xc00271a8
c001edf6:	e8 e2 e3 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001edfb:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ee02:	89 fa                	mov    edx,edi
c001ee04:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ee0b:	c1 e1 10             	shl    ecx,0x10
c001ee0e:	c1 e0 08             	shl    eax,0x8
c001ee11:	09 c1                	or     ecx,eax
c001ee13:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ee1a:	c1 e0 0b             	shl    eax,0xb
c001ee1d:	09 c1                	or     ecx,eax
c001ee1f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ee25:	89 c8                	mov    eax,ecx
c001ee27:	ef                   	out    dx,eax
c001ee28:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001ee2e:	89 f2                	mov    edx,esi
c001ee30:	89 e8                	mov    eax,ebp
c001ee32:	ee                   	out    dx,al
c001ee33:	89 c8                	mov    eax,ecx
c001ee35:	89 fa                	mov    edx,edi
c001ee37:	ef                   	out    dx,eax
c001ee38:	89 f2                	mov    edx,esi
c001ee3a:	ed                   	in     eax,dx
c001ee3b:	0f b6 c0             	movzx  eax,al
c001ee3e:	83 c4 10             	add    esp,0x10
c001ee41:	39 e8                	cmp    eax,ebp
c001ee43:	74 58                	je     c001ee9d <IDE::open(int, int, void*)+0x21f>
c001ee45:	83 ec 0c             	sub    esp,0xc
c001ee48:	68 f7 97 02 c0       	push   0xc00297f7
c001ee4d:	eb 46                	jmp    c001ee95 <IDE::open(int, int, void*)+0x217>
c001ee4f:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001ee58:	75 29                	jne    c001ee83 <IDE::open(int, int, void*)+0x205>
c001ee5a:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001ee61:	3d 8a 00 00 00       	cmp    eax,0x8a
c001ee66:	74 05                	je     c001ee6d <IDE::open(int, int, void*)+0x1ef>
c001ee68:	83 c0 80             	add    eax,0xffffff80
c001ee6b:	75 16                	jne    c001ee83 <IDE::open(int, int, void*)+0x205>
c001ee6d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ee74:	83 ec 0c             	sub    esp,0xc
c001ee77:	68 03 81 02 c0       	push   0xc0028103
c001ee7c:	e8 5c e3 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001ee81:	eb 17                	jmp    c001ee9a <IDE::open(int, int, void*)+0x21c>
c001ee83:	83 ec 0c             	sub    esp,0xc
c001ee86:	68 ff 97 02 c0       	push   0xc00297ff
c001ee8b:	eb 08                	jmp    c001ee95 <IDE::open(int, int, void*)+0x217>
c001ee8d:	83 ec 0c             	sub    esp,0xc
c001ee90:	68 30 98 02 c0       	push   0xc0029830
c001ee95:	e8 3a 0c ff ff       	call   c000fad4 <KePanic(char const*)>
c001ee9a:	83 c4 10             	add    esp,0x10
c001ee9d:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001eea4:	0f 84 bf 00 00 00    	je     c001ef69 <IDE::open(int, int, void*)+0x2eb>
c001eeaa:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	83 e0 fc             	and    eax,0xfffffffc
c001eeb6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001eebd:	83 c0 08             	add    eax,0x8
c001eec0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001eec7:	68 5a 98 02 c0       	push   0xc002985a
c001eecc:	e8 95 80 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001eed1:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001eed8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001eedf:	50                   	push   eax
c001eee0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001eee7:	50                   	push   eax
c001eee8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001eeef:	50                   	push   eax
c001eef0:	ff 35 a0 3d 03 c0    	push   DWORD PTR ds:0xc0033da0
c001eef6:	e8 8d f0 ff ff       	call   c001df88 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eefb:	83 c4 18             	add    esp,0x18
c001eefe:	83 c8 07             	or     eax,0x7
c001ef01:	0f b7 c0             	movzx  eax,ax
c001ef04:	50                   	push   eax
c001ef05:	6a 04                	push   0x4
c001ef07:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ef0e:	50                   	push   eax
c001ef0f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ef16:	50                   	push   eax
c001ef17:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ef1e:	50                   	push   eax
c001ef1f:	ff 35 a0 3d 03 c0    	push   DWORD PTR ds:0xc0033da0
c001ef25:	e8 9a f2 ff ff       	call   c001e1c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001ef2a:	83 c4 20             	add    esp,0x20
c001ef2d:	eb 3a                	jmp    c001ef69 <IDE::open(int, int, void*)+0x2eb>
c001ef2f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ef36:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ef3c:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ef43:	05 06 02 00 00       	add    eax,0x206
c001ef48:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ef4f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ef56:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ef5d:	05 06 02 00 00       	add    eax,0x206
c001ef62:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ef69:	83 ec 0c             	sub    esp,0xc
c001ef6c:	68 60 77 02 c0       	push   0xc0027760
c001ef71:	e8 67 e2 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001ef76:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ef7c:	83 c4 10             	add    esp,0x10
c001ef7f:	89 c2                	mov    edx,eax
c001ef81:	83 e2 0f             	and    edx,0xf
c001ef84:	83 fa 08             	cmp    edx,0x8
c001ef87:	75 0a                	jne    c001ef93 <IDE::open(int, int, void*)+0x315>
c001ef89:	83 e8 02             	sub    eax,0x2
c001ef8c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ef93:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ef99:	89 c2                	mov    edx,eax
c001ef9b:	83 e2 0f             	and    edx,0xf
c001ef9e:	83 fa 08             	cmp    edx,0x8
c001efa1:	75 0a                	jne    c001efad <IDE::open(int, int, void*)+0x32f>
c001efa3:	83 e8 02             	sub    eax,0x2
c001efa6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001efad:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001efb4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001efbb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001efbe:	89 d0                	mov    eax,edx
c001efc0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001efc4:	8d 7a 01             	lea    edi,[edx+0x1]
c001efc7:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001efcb:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001efcf:	83 e1 3f             	and    ecx,0x3f
c001efd2:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001efd6:	89 f9                	mov    ecx,edi
c001efd8:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001efdf:	8d 78 02             	lea    edi,[eax+0x2]
c001efe2:	0f b6 c9             	movzx  ecx,cl
c001efe5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001efe8:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001efec:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001eff0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001eff4:	83 e2 3f             	and    edx,0x3f
c001eff7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001effb:	89 f9                	mov    ecx,edi
c001effd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f003:	8d 78 03             	lea    edi,[eax+0x3]
c001f006:	0f b6 d1             	movzx  edx,cl
c001f009:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f00c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f010:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f014:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001f018:	83 e1 3f             	and    ecx,0x3f
c001f01b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001f01f:	89 fa                	mov    edx,edi
c001f021:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f027:	8d 78 04             	lea    edi,[eax+0x4]
c001f02a:	0f b6 ca             	movzx  ecx,dl
c001f02d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f030:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f034:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f038:	89 fa                	mov    edx,edi
c001f03a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f040:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001f044:	83 e2 3f             	and    edx,0x3f
c001f047:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001f04b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f052:	66 85 f6             	test   si,si
c001f055:	74 24                	je     c001f07b <IDE::open(int, int, void*)+0x3fd>
c001f057:	89 f9                	mov    ecx,edi
c001f059:	83 c0 05             	add    eax,0x5
c001f05c:	0f b6 d1             	movzx  edx,cl
c001f05f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f062:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f066:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f06a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f070:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001f074:	83 e0 3f             	and    eax,0x3f
c001f077:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001f07b:	83 ec 0c             	sub    esp,0xc
c001f07e:	68 72 98 02 c0       	push   0xc0029872
c001f083:	e8 55 e1 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f088:	58                   	pop    eax
c001f089:	5a                   	pop    edx
c001f08a:	6a 00                	push   0x0
c001f08c:	53                   	push   ebx
c001f08d:	e8 6c f9 ff ff       	call   c001e9fe <IDE::prepareInterrupt(unsigned char)>
c001f092:	59                   	pop    ecx
c001f093:	5e                   	pop    esi
c001f094:	6a 01                	push   0x1
c001f096:	53                   	push   ebx
c001f097:	e8 62 f9 ff ff       	call   c001e9fe <IDE::prepareInterrupt(unsigned char)>
c001f09c:	c7 04 24 f4 90 02 c0 	mov    DWORD PTR [esp],0xc00290f4
c001f0a3:	e8 35 e1 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f0a8:	83 c4 0c             	add    esp,0xc
c001f0ab:	6a 00                	push   0x0
c001f0ad:	6a 00                	push   0x0
c001f0af:	53                   	push   ebx
c001f0b0:	e8 7f fb ff ff       	call   c001ec34 <IDE::enableIRQs(unsigned char, bool)>
c001f0b5:	83 c4 0c             	add    esp,0xc
c001f0b8:	6a 00                	push   0x0
c001f0ba:	6a 01                	push   0x1
c001f0bc:	53                   	push   ebx
c001f0bd:	e8 72 fb ff ff       	call   c001ec34 <IDE::enableIRQs(unsigned char, bool)>
c001f0c2:	c7 04 24 74 98 02 c0 	mov    DWORD PTR [esp],0xc0029874
c001f0c9:	e8 0f e1 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f0ce:	83 c4 10             	add    esp,0x10
c001f0d1:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f0d8:	74 3c                	je     c001f116 <IDE::open(int, int, void*)+0x498>
c001f0da:	83 ec 0c             	sub    esp,0xc
c001f0dd:	53                   	push   ebx
c001f0de:	6a 01                	push   0x1
c001f0e0:	68 fb eb 01 c0       	push   0xc001ebfb
c001f0e5:	6a 0e                	push   0xe
c001f0e7:	53                   	push   ebx
c001f0e8:	e8 b5 a8 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0ed:	83 c4 14             	add    esp,0x14
c001f0f0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f0f6:	53                   	push   ebx
c001f0f7:	6a 01                	push   0x1
c001f0f9:	68 17 ec 01 c0       	push   0xc001ec17
c001f0fe:	6a 0f                	push   0xf
c001f100:	53                   	push   ebx
c001f101:	e8 9c a8 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f106:	83 c4 14             	add    esp,0x14
c001f109:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f10f:	68 ae 73 02 c0       	push   0xc00273ae
c001f114:	eb 40                	jmp    c001f156 <IDE::open(int, int, void*)+0x4d8>
c001f116:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f120:	83 ec 0c             	sub    esp,0xc
c001f123:	53                   	push   ebx
c001f124:	6a 00                	push   0x0
c001f126:	68 fb eb 01 c0       	push   0xc001ebfb
c001f12b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f131:	53                   	push   ebx
c001f132:	e8 6b a8 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f137:	83 c4 14             	add    esp,0x14
c001f13a:	53                   	push   ebx
c001f13b:	6a 00                	push   0x0
c001f13d:	68 17 ec 01 c0       	push   0xc001ec17
c001f142:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f148:	53                   	push   ebx
c001f149:	e8 54 a8 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f14e:	83 c4 14             	add    esp,0x14
c001f151:	68 f2 80 02 c0       	push   0xc00280f2
c001f156:	e8 82 e0 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f15b:	83 c4 10             	add    esp,0x10
c001f15e:	83 ec 0c             	sub    esp,0xc
c001f161:	68 76 98 02 c0       	push   0xc0029876
c001f166:	e8 72 e0 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f16b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f16d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f170:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f173:	c7 04 24 75 85 02 c0 	mov    DWORD PTR [esp],0xc0028575
c001f17a:	e8 5e e0 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f17f:	83 c4 0c             	add    esp,0xc
c001f182:	6a 07                	push   0x7
c001f184:	6a 00                	push   0x0
c001f186:	53                   	push   ebx
c001f187:	e8 58 f9 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f18c:	83 c4 0c             	add    esp,0xc
c001f18f:	6a 07                	push   0x7
c001f191:	6a 01                	push   0x1
c001f193:	53                   	push   ebx
c001f194:	e8 4b f9 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f199:	c7 04 24 fc 7d 02 c0 	mov    DWORD PTR [esp],0xc0027dfc
c001f1a0:	e8 38 e0 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f1a5:	83 c4 0c             	add    esp,0xc
c001f1a8:	6a 01                	push   0x1
c001f1aa:	6a 00                	push   0x0
c001f1ac:	53                   	push   ebx
c001f1ad:	e8 82 fa ff ff       	call   c001ec34 <IDE::enableIRQs(unsigned char, bool)>
c001f1b2:	83 c4 0c             	add    esp,0xc
c001f1b5:	6a 01                	push   0x1
c001f1b7:	6a 01                	push   0x1
c001f1b9:	53                   	push   ebx
c001f1ba:	e8 75 fa ff ff       	call   c001ec34 <IDE::enableIRQs(unsigned char, bool)>
c001f1bf:	c7 04 24 79 98 02 c0 	mov    DWORD PTR [esp],0xc0029879
c001f1c6:	e8 12 e0 fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f1cb:	83 c4 2c             	add    esp,0x2c
c001f1ce:	31 c0                	xor    eax,eax
c001f1d0:	5b                   	pop    ebx
c001f1d1:	5e                   	pop    esi
c001f1d2:	5f                   	pop    edi
c001f1d3:	5d                   	pop    ebp
c001f1d4:	c3                   	ret    
c001f1d5:	90                   	nop

c001f1d6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f1d6:	55                   	push   ebp
c001f1d7:	57                   	push   edi
c001f1d8:	56                   	push   esi
c001f1d9:	53                   	push   ebx
c001f1da:	83 ec 1c             	sub    esp,0x1c
c001f1dd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f1e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f1e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f1e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f1ed:	8d 42 f8             	lea    eax,[edx-0x8]
c001f1f0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f1f4:	3c 03                	cmp    al,0x3
c001f1f6:	77 5a                	ja     c001f252 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001f1f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f1fc:	0f b6 db             	movzx  ebx,bl
c001f1ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f203:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f206:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f20b:	0c 80                	or     al,0x80
c001f20d:	50                   	push   eax
c001f20e:	6a 0c                	push   0xc
c001f210:	53                   	push   ebx
c001f211:	56                   	push   esi
c001f212:	e8 0d f8 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f217:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f21b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001f220:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f224:	0f b6 d2             	movzx  edx,dl
c001f227:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001f22b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f22d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f232:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f236:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f23a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f242:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f246:	83 c4 2c             	add    esp,0x2c
c001f249:	5b                   	pop    ebx
c001f24a:	5e                   	pop    esi
c001f24b:	5f                   	pop    edi
c001f24c:	5d                   	pop    ebp
c001f24d:	e9 d2 f7 ff ff       	jmp    c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f252:	0f b6 c2             	movzx  eax,dl
c001f255:	83 f8 07             	cmp    eax,0x7
c001f258:	77 12                	ja     c001f26c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001f25a:	0f b6 db             	movzx  ebx,bl
c001f25d:	0f b6 c2             	movzx  eax,dl
c001f260:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001f268:	01 c2                	add    edx,eax
c001f26a:	eb 2f                	jmp    c001f29b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f26c:	83 f8 0d             	cmp    eax,0xd
c001f26f:	77 13                	ja     c001f284 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001f271:	0f b6 db             	movzx  ebx,bl
c001f274:	0f b6 d2             	movzx  edx,dl
c001f277:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001f27e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001f282:	eb 17                	jmp    c001f29b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001f284:	83 f8 15             	cmp    eax,0x15
c001f287:	77 14                	ja     c001f29d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001f289:	0f b6 db             	movzx  ebx,bl
c001f28c:	0f b6 d2             	movzx  edx,dl
c001f28f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001f297:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001f29b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f29d:	83 c4 1c             	add    esp,0x1c
c001f2a0:	5b                   	pop    ebx
c001f2a1:	5e                   	pop    esi
c001f2a2:	5f                   	pop    edi
c001f2a3:	5d                   	pop    ebp
c001f2a4:	c3                   	ret    
c001f2a5:	90                   	nop

c001f2a6 <IDE::detect()>:
c001f2a6:	55                   	push   ebp
c001f2a7:	57                   	push   edi
c001f2a8:	56                   	push   esi
c001f2a9:	53                   	push   ebx
c001f2aa:	81 ec 28 02 00 00    	sub    esp,0x228
c001f2b0:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001f2b7:	68 7b 98 02 c0       	push   0xc002987b
c001f2bc:	e8 1c df fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f2c1:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001f2c7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001f2cb:	83 c4 10             	add    esp,0x10
c001f2ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001f2d3:	0f 85 26 04 00 00    	jne    c001f6ff <IDE::detect()+0x459>
c001f2d9:	83 ec 0c             	sub    esp,0xc
c001f2dc:	31 f6                	xor    esi,esi
c001f2de:	68 7e 98 02 c0       	push   0xc002987e
c001f2e3:	31 ff                	xor    edi,edi
c001f2e5:	e8 f3 de fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f2ea:	83 c4 10             	add    esp,0x10
c001f2ed:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f2f4:	83 ec 0c             	sub    esp,0xc
c001f2f7:	68 81 98 02 c0       	push   0xc0029881
c001f2fc:	e8 dc de fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f301:	83 c4 10             	add    esp,0x10
c001f304:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f30b:	83 ec 0c             	sub    esp,0xc
c001f30e:	31 ed                	xor    ebp,ebp
c001f310:	68 84 98 02 c0       	push   0xc0029884
c001f315:	e8 c3 de fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f31a:	89 f8                	mov    eax,edi
c001f31c:	c1 e0 06             	shl    eax,0x6
c001f31f:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f327:	c7 04 24 87 98 02 c0 	mov    DWORD PTR [esp],0xc0029887
c001f32e:	e8 aa de fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f333:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f337:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f33f:	c1 e0 04             	shl    eax,0x4
c001f342:	83 c8 a0             	or     eax,0xffffffa0
c001f345:	0f b6 c0             	movzx  eax,al
c001f348:	50                   	push   eax
c001f349:	6a 06                	push   0x6
c001f34b:	56                   	push   esi
c001f34c:	53                   	push   ebx
c001f34d:	e8 d2 f6 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f352:	83 c4 1c             	add    esp,0x1c
c001f355:	6a 0c                	push   0xc
c001f357:	56                   	push   esi
c001f358:	53                   	push   ebx
c001f359:	e8 86 f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f35e:	83 c4 0c             	add    esp,0xc
c001f361:	6a 0c                	push   0xc
c001f363:	56                   	push   esi
c001f364:	53                   	push   ebx
c001f365:	e8 7a f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f36a:	83 c4 0c             	add    esp,0xc
c001f36d:	6a 0c                	push   0xc
c001f36f:	56                   	push   esi
c001f370:	53                   	push   ebx
c001f371:	e8 6e f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f376:	83 c4 0c             	add    esp,0xc
c001f379:	6a 0c                	push   0xc
c001f37b:	56                   	push   esi
c001f37c:	53                   	push   ebx
c001f37d:	e8 62 f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f382:	c7 04 24 8a 98 02 c0 	mov    DWORD PTR [esp],0xc002988a
c001f389:	e8 4f de fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f38e:	68 ec 00 00 00       	push   0xec
c001f393:	6a 07                	push   0x7
c001f395:	56                   	push   esi
c001f396:	53                   	push   ebx
c001f397:	e8 88 f6 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f39c:	83 c4 1c             	add    esp,0x1c
c001f39f:	6a 0c                	push   0xc
c001f3a1:	56                   	push   esi
c001f3a2:	53                   	push   ebx
c001f3a3:	e8 3c f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f3a8:	83 c4 0c             	add    esp,0xc
c001f3ab:	6a 0c                	push   0xc
c001f3ad:	56                   	push   esi
c001f3ae:	53                   	push   ebx
c001f3af:	e8 30 f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f3b4:	83 c4 0c             	add    esp,0xc
c001f3b7:	6a 0c                	push   0xc
c001f3b9:	56                   	push   esi
c001f3ba:	53                   	push   ebx
c001f3bb:	e8 24 f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f3c0:	83 c4 0c             	add    esp,0xc
c001f3c3:	6a 0c                	push   0xc
c001f3c5:	56                   	push   esi
c001f3c6:	53                   	push   ebx
c001f3c7:	e8 18 f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f3cc:	c7 04 24 8d 98 02 c0 	mov    DWORD PTR [esp],0xc002988d
c001f3d3:	e8 05 de fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f3d8:	83 c4 0c             	add    esp,0xc
c001f3db:	6a 0c                	push   0xc
c001f3dd:	56                   	push   esi
c001f3de:	53                   	push   ebx
c001f3df:	e8 00 f7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f3e4:	83 c4 10             	add    esp,0x10
c001f3e7:	84 c0                	test   al,al
c001f3e9:	75 1f                	jne    c001f40a <IDE::detect()+0x164>
c001f3eb:	83 ec 0c             	sub    esp,0xc
c001f3ee:	68 90 98 02 c0       	push   0xc0029890
c001f3f3:	e8 e5 dd fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f3f8:	e9 e0 02 00 00       	jmp    c001f6dd <IDE::detect()+0x437>
c001f3fd:	a8 80                	test   al,0x80
c001f3ff:	74 21                	je     c001f422 <IDE::detect()+0x17c>
c001f401:	45                   	inc    ebp
c001f402:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001f408:	7f 1e                	jg     c001f428 <IDE::detect()+0x182>
c001f40a:	50                   	push   eax
c001f40b:	6a 0c                	push   0xc
c001f40d:	56                   	push   esi
c001f40e:	53                   	push   ebx
c001f40f:	e8 d0 f6 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f414:	83 c4 10             	add    esp,0x10
c001f417:	a8 01                	test   al,0x1
c001f419:	74 e2                	je     c001f3fd <IDE::detect()+0x157>
c001f41b:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001f420:	eb 23                	jmp    c001f445 <IDE::detect()+0x19f>
c001f422:	a8 08                	test   al,0x8
c001f424:	74 db                	je     c001f401 <IDE::detect()+0x15b>
c001f426:	eb 18                	jmp    c001f440 <IDE::detect()+0x19a>
c001f428:	50                   	push   eax
c001f429:	50                   	push   eax
c001f42a:	6a 00                	push   0x0
c001f42c:	6a 32                	push   0x32
c001f42e:	e8 0d 74 ff ff       	call   c0016840 <milliTenthSleep(unsigned long long)>
c001f433:	83 c4 10             	add    esp,0x10
c001f436:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001f43c:	75 cc                	jne    c001f40a <IDE::detect()+0x164>
c001f43e:	eb db                	jmp    c001f41b <IDE::detect()+0x175>
c001f440:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001f445:	83 ec 0c             	sub    esp,0xc
c001f448:	68 93 98 02 c0       	push   0xc0029893
c001f44d:	e8 8b dd fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f452:	83 c4 10             	add    esp,0x10
c001f455:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f45a:	74 56                	je     c001f4b2 <IDE::detect()+0x20c>
c001f45c:	51                   	push   ecx
c001f45d:	6a 04                	push   0x4
c001f45f:	56                   	push   esi
c001f460:	53                   	push   ebx
c001f461:	e8 7e f6 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f466:	83 c4 0c             	add    esp,0xc
c001f469:	6a 05                	push   0x5
c001f46b:	56                   	push   esi
c001f46c:	53                   	push   ebx
c001f46d:	89 c5                	mov    ebp,eax
c001f46f:	e8 70 f6 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f474:	89 e9                	mov    ecx,ebp
c001f476:	83 c4 10             	add    esp,0x10
c001f479:	0f b6 e9             	movzx  ebp,cl
c001f47c:	83 fd 14             	cmp    ebp,0x14
c001f47f:	75 04                	jne    c001f485 <IDE::detect()+0x1df>
c001f481:	3c eb                	cmp    al,0xeb
c001f483:	74 11                	je     c001f496 <IDE::detect()+0x1f0>
c001f485:	83 fd 69             	cmp    ebp,0x69
c001f488:	0f 85 52 02 00 00    	jne    c001f6e0 <IDE::detect()+0x43a>
c001f48e:	3c 96                	cmp    al,0x96
c001f490:	0f 85 4a 02 00 00    	jne    c001f6e0 <IDE::detect()+0x43a>
c001f496:	68 a1 00 00 00       	push   0xa1
c001f49b:	6a 07                	push   0x7
c001f49d:	56                   	push   esi
c001f49e:	53                   	push   ebx
c001f49f:	e8 80 f5 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4a4:	58                   	pop    eax
c001f4a5:	5a                   	pop    edx
c001f4a6:	6a 00                	push   0x0
c001f4a8:	6a 0a                	push   0xa
c001f4aa:	e8 91 73 ff ff       	call   c0016840 <milliTenthSleep(unsigned long long)>
c001f4af:	83 c4 10             	add    esp,0x10
c001f4b2:	83 ec 0c             	sub    esp,0xc
c001f4b5:	89 fd                	mov    ebp,edi
c001f4b7:	68 96 98 02 c0       	push   0xc0029896
c001f4bc:	e8 1c dd fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f4c1:	8d 54 24 20          	lea    edx,[esp+0x20]
c001f4c5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001f4cc:	c1 e5 06             	shl    ebp,0x6
c001f4cf:	52                   	push   edx
c001f4d0:	01 dd                	add    ebp,ebx
c001f4d2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001f4d6:	6a 00                	push   0x0
c001f4d8:	56                   	push   esi
c001f4d9:	53                   	push   ebx
c001f4da:	e8 f7 fc ff ff       	call   c001f1d6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f4df:	83 c4 14             	add    esp,0x14
c001f4e2:	68 9a 98 02 c0       	push   0xc002989a
c001f4e7:	e8 f1 dc fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f4ec:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f4f1:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001f4f8:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001f4ff:	89 f0                	mov    eax,esi
c001f501:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001f507:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f50b:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001f511:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f515:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001f51c:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001f524:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001f52b:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001f533:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001f539:	c7 04 24 9e 98 02 c0 	mov    DWORD PTR [esp],0xc002989e
c001f540:	e8 98 dc fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f545:	83 c4 10             	add    esp,0x10
c001f548:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001f54f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f553:	74 09                	je     c001f55e <IDE::detect()+0x2b8>
c001f555:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001f55c:	eb 07                	jmp    c001f565 <IDE::detect()+0x2bf>
c001f55e:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001f565:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f569:	89 f8                	mov    eax,edi
c001f56b:	83 ec 0c             	sub    esp,0xc
c001f56e:	c1 e0 06             	shl    eax,0x6
c001f571:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001f574:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001f57a:	68 a2 98 02 c0       	push   0xc00298a2
c001f57f:	e8 59 dc fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f584:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f588:	89 e8                	mov    eax,ebp
c001f58a:	83 c4 10             	add    esp,0x10
c001f58d:	8d 6a 28             	lea    ebp,[edx+0x28]
c001f590:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001f593:	83 c2 02             	add    edx,0x2
c001f596:	83 c0 02             	add    eax,0x2
c001f599:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001f59f:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001f5a2:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001f5a8:	39 d5                	cmp    ebp,edx
c001f5aa:	75 e4                	jne    c001f590 <IDE::detect()+0x2ea>
c001f5ac:	89 f8                	mov    eax,edi
c001f5ae:	c1 e0 06             	shl    eax,0x6
c001f5b1:	01 d8                	add    eax,ebx
c001f5b3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f5ba:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001f5c1:	c1 ea 09             	shr    edx,0x9
c001f5c4:	83 e2 01             	and    edx,0x1
c001f5c7:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001f5ce:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f5d4:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001f5d8:	74 0c                	je     c001f5e6 <IDE::detect()+0x340>
c001f5da:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001f5e3:	0f 95 c2             	setne  dl
c001f5e6:	89 fd                	mov    ebp,edi
c001f5e8:	83 ec 0c             	sub    esp,0xc
c001f5eb:	c1 e5 06             	shl    ebp,0x6
c001f5ee:	01 dd                	add    ebp,ebx
c001f5f0:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001f5f6:	68 a6 98 02 c0       	push   0xc00298a6
c001f5fb:	e8 dd db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f600:	83 c4 10             	add    esp,0x10
c001f603:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001f608:	75 66                	jne    c001f670 <IDE::detect()+0x3ca>
c001f60a:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001f611:	0f 84 b8 00 00 00    	je     c001f6cf <IDE::detect()+0x429>
c001f617:	83 ec 0c             	sub    esp,0xc
c001f61a:	68 aa 98 02 c0       	push   0xc00298aa
c001f61f:	e8 b9 db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f624:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001f62b:	e8 50 00 ff ff       	call   c000f680 <malloc>
c001f630:	89 04 24             	mov    DWORD PTR [esp],eax
c001f633:	89 c5                	mov    ebp,eax
c001f635:	e8 44 05 00 00       	call   c001fb7e <ATA::ATA()>
c001f63a:	c7 04 24 ae 98 02 c0 	mov    DWORD PTR [esp],0xc00298ae
c001f641:	e8 97 db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f646:	59                   	pop    ecx
c001f647:	58                   	pop    eax
c001f648:	55                   	push   ebp
c001f649:	53                   	push   ebx
c001f64a:	e8 a7 a3 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f64f:	c7 04 24 b3 98 02 c0 	mov    DWORD PTR [esp],0xc00298b3
c001f656:	e8 82 db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f65b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f65e:	53                   	push   ebx
c001f65f:	57                   	push   edi
c001f660:	6a 00                	push   0x0
c001f662:	55                   	push   ebp
c001f663:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f666:	83 c4 14             	add    esp,0x14
c001f669:	68 b8 98 02 c0       	push   0xc00298b8
c001f66e:	eb 57                	jmp    c001f6c7 <IDE::detect()+0x421>
c001f670:	83 ec 0c             	sub    esp,0xc
c001f673:	68 bd 98 02 c0       	push   0xc00298bd
c001f678:	e8 60 db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f67d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f684:	e8 f7 ff fe ff       	call   c000f680 <malloc>
c001f689:	89 04 24             	mov    DWORD PTR [esp],eax
c001f68c:	89 c5                	mov    ebp,eax
c001f68e:	e8 b1 0c 00 00       	call   c0020344 <ATAPI::ATAPI()>
c001f693:	c7 04 24 c3 98 02 c0 	mov    DWORD PTR [esp],0xc00298c3
c001f69a:	e8 3e db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f69f:	58                   	pop    eax
c001f6a0:	5a                   	pop    edx
c001f6a1:	55                   	push   ebp
c001f6a2:	53                   	push   ebx
c001f6a3:	e8 4e a3 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001f6a8:	c7 04 24 ca 98 02 c0 	mov    DWORD PTR [esp],0xc00298ca
c001f6af:	e8 29 db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f6b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001f6b7:	53                   	push   ebx
c001f6b8:	57                   	push   edi
c001f6b9:	6a 00                	push   0x0
c001f6bb:	55                   	push   ebp
c001f6bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f6bf:	83 c4 14             	add    esp,0x14
c001f6c2:	68 d1 98 02 c0       	push   0xc00298d1
c001f6c7:	e8 11 db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f6cc:	83 c4 10             	add    esp,0x10
c001f6cf:	83 ec 0c             	sub    esp,0xc
c001f6d2:	47                   	inc    edi
c001f6d3:	68 d8 98 02 c0       	push   0xc00298d8
c001f6d8:	e8 00 db fe ff       	call   c000d1dd <KeSetBootMessage(char const*)>
c001f6dd:	83 c4 10             	add    esp,0x10
c001f6e0:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001f6e4:	74 0c                	je     c001f6f2 <IDE::detect()+0x44c>
c001f6e6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f6ed:	e9 19 fc ff ff       	jmp    c001f30b <IDE::detect()+0x65>
c001f6f2:	4e                   	dec    esi
c001f6f3:	74 0a                	je     c001f6ff <IDE::detect()+0x459>
c001f6f5:	be 01 00 00 00       	mov    esi,0x1
c001f6fa:	e9 f5 fb ff ff       	jmp    c001f2f4 <IDE::detect()+0x4e>
c001f6ff:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f705:	5b                   	pop    ebx
c001f706:	5e                   	pop    esi
c001f707:	5f                   	pop    edi
c001f708:	5d                   	pop    ebp
c001f709:	c3                   	ret    

c001f70a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f70a:	55                   	push   ebp
c001f70b:	57                   	push   edi
c001f70c:	56                   	push   esi
c001f70d:	53                   	push   ebx
c001f70e:	83 ec 1c             	sub    esp,0x1c
c001f711:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001f715:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f719:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f71d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f721:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f725:	88 c3                	mov    bl,al
c001f727:	25 ff 00 00 00       	and    eax,0xff
c001f72c:	0f 84 88 00 00 00    	je     c001f7ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f732:	83 ec 0c             	sub    esp,0xc
c001f735:	89 c7                	mov    edi,eax
c001f737:	68 dc 98 02 c0       	push   0xc00298dc
c001f73c:	e8 25 78 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c001f741:	83 c4 10             	add    esp,0x10
c001f744:	83 ff 01             	cmp    edi,0x1
c001f747:	74 6b                	je     c001f7b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001f749:	83 ff 02             	cmp    edi,0x2
c001f74c:	75 58                	jne    c001f7a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001f74e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001f753:	50                   	push   eax
c001f754:	6a 01                	push   0x1
c001f756:	01 ff                	add    edi,edi
c001f758:	09 fe                	or     esi,edi
c001f75a:	89 f0                	mov    eax,esi
c001f75c:	0f b6 f0             	movzx  esi,al
c001f75f:	c1 e6 06             	shl    esi,0x6
c001f762:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001f76a:	50                   	push   eax
c001f76b:	55                   	push   ebp
c001f76c:	e8 73 f3 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f771:	83 c4 10             	add    esp,0x10
c001f774:	a8 01                	test   al,0x1
c001f776:	74 02                	je     c001f77a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001f778:	b3 07                	mov    bl,0x7
c001f77a:	a8 02                	test   al,0x2
c001f77c:	74 02                	je     c001f780 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001f77e:	b3 03                	mov    bl,0x3
c001f780:	a8 04                	test   al,0x4
c001f782:	74 02                	je     c001f786 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001f784:	b3 14                	mov    bl,0x14
c001f786:	a8 08                	test   al,0x8
c001f788:	74 02                	je     c001f78c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001f78a:	b3 03                	mov    bl,0x3
c001f78c:	a8 10                	test   al,0x10
c001f78e:	74 02                	je     c001f792 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001f790:	b3 15                	mov    bl,0x15
c001f792:	a8 20                	test   al,0x20
c001f794:	74 02                	je     c001f798 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001f796:	b3 03                	mov    bl,0x3
c001f798:	a8 40                	test   al,0x40
c001f79a:	74 02                	je     c001f79e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f79c:	b3 16                	mov    bl,0x16
c001f79e:	a8 80                	test   al,0x80
c001f7a0:	74 18                	je     c001f7ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f7a2:	b3 0d                	mov    bl,0xd
c001f7a4:	eb 14                	jmp    c001f7ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f7a6:	83 ff 03             	cmp    edi,0x3
c001f7a9:	74 0d                	je     c001f7b8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001f7ab:	83 ff 04             	cmp    edi,0x4
c001f7ae:	75 0a                	jne    c001f7ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f7b0:	b3 08                	mov    bl,0x8
c001f7b2:	eb 06                	jmp    c001f7ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f7b4:	b3 13                	mov    bl,0x13
c001f7b6:	eb 02                	jmp    c001f7ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001f7b8:	b3 17                	mov    bl,0x17
c001f7ba:	83 c4 1c             	add    esp,0x1c
c001f7bd:	88 d8                	mov    al,bl
c001f7bf:	5b                   	pop    ebx
c001f7c0:	5e                   	pop    esi
c001f7c1:	5f                   	pop    edi
c001f7c2:	5d                   	pop    ebp
c001f7c3:	c3                   	ret    

c001f7c4 <IDE::polling(unsigned char, unsigned int)>:
c001f7c4:	57                   	push   edi
c001f7c5:	56                   	push   esi
c001f7c6:	53                   	push   ebx
c001f7c7:	bb 04 00 00 00       	mov    ebx,0x4
c001f7cc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f7d0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f7d5:	52                   	push   edx
c001f7d6:	6a 0c                	push   0xc
c001f7d8:	56                   	push   esi
c001f7d9:	57                   	push   edi
c001f7da:	e8 05 f3 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f7df:	83 c4 10             	add    esp,0x10
c001f7e2:	4b                   	dec    ebx
c001f7e3:	75 f0                	jne    c001f7d5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f7e5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f7ea:	50                   	push   eax
c001f7eb:	6a 0c                	push   0xc
c001f7ed:	56                   	push   esi
c001f7ee:	57                   	push   edi
c001f7ef:	e8 f0 f2 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001f7f4:	83 c4 10             	add    esp,0x10
c001f7f7:	a8 01                	test   al,0x1
c001f7f9:	75 17                	jne    c001f812 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f7fb:	a8 20                	test   al,0x20
c001f7fd:	75 0f                	jne    c001f80e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f7ff:	4b                   	dec    ebx
c001f800:	74 10                	je     c001f812 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f802:	a8 80                	test   al,0x80
c001f804:	75 e4                	jne    c001f7ea <IDE::polling(unsigned char, unsigned int)+0x26>
c001f806:	a8 08                	test   al,0x8
c001f808:	74 e0                	je     c001f7ea <IDE::polling(unsigned char, unsigned int)+0x26>
c001f80a:	31 c0                	xor    eax,eax
c001f80c:	eb 06                	jmp    c001f814 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f80e:	b0 01                	mov    al,0x1
c001f810:	eb 02                	jmp    c001f814 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f812:	b0 02                	mov    al,0x2
c001f814:	5b                   	pop    ebx
c001f815:	5e                   	pop    esi
c001f816:	5f                   	pop    edi
c001f817:	c3                   	ret    

c001f818 <SATABus::close(int, int, void*)>:
c001f818:	31 c0                	xor    eax,eax
c001f81a:	c3                   	ret    
c001f81b:	90                   	nop

c001f81c <SATABus::detect()>:
c001f81c:	c3                   	ret    
c001f81d:	90                   	nop

c001f81e <SATABus::SATABus()>:
c001f81e:	83 ec 0c             	sub    esp,0xc
c001f821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f825:	83 ec 08             	sub    esp,0x8
c001f828:	68 14 99 02 c0       	push   0xc0029914
c001f82d:	50                   	push   eax
c001f82e:	e8 1d a5 fe ff       	call   c0009d50 <HardDiskController::HardDiskController(char const*)>
c001f833:	83 c4 10             	add    esp,0x10
c001f836:	ba 40 99 02 c0       	mov    edx,0xc0029940
c001f83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83f:	89 10                	mov    DWORD PTR [eax],edx
c001f841:	83 ec 0c             	sub    esp,0xc
c001f844:	6a 50                	push   0x50
c001f846:	e8 6a 05 ff ff       	call   c000fdb5 <Phys::allocateContiguousPages(int)>
c001f84b:	83 c4 10             	add    esp,0x10
c001f84e:	89 c2                	mov    edx,eax
c001f850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f854:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f85a:	83 ec 0c             	sub    esp,0xc
c001f85d:	6a 50                	push   0x50
c001f85f:	e8 b7 37 ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c001f864:	83 c4 10             	add    esp,0x10
c001f867:	89 c2                	mov    edx,eax
c001f869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f86d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f873:	a1 90 12 03 c0       	mov    eax,ds:0xc0031290
c001f878:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f87c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f886:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f88c:	83 ec 0c             	sub    esp,0xc
c001f88f:	6a 03                	push   0x3
c001f891:	6a 50                	push   0x50
c001f893:	51                   	push   ecx
c001f894:	52                   	push   edx
c001f895:	50                   	push   eax
c001f896:	e8 53 40 ff ff       	call   c00138ee <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f89b:	83 c4 20             	add    esp,0x20
c001f89e:	90                   	nop
c001f89f:	83 c4 0c             	add    esp,0xc
c001f8a2:	c3                   	ret    
c001f8a3:	90                   	nop

c001f8a4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f8a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8a8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f8ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f8ae:	09 c2                	or     edx,eax
c001f8b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f8ba:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f8bc:	31 c0                	xor    eax,eax
c001f8be:	c1 e9 08             	shr    ecx,0x8
c001f8c1:	83 e1 0f             	and    ecx,0xf
c001f8c4:	39 c8                	cmp    eax,ecx
c001f8c6:	74 0a                	je     c001f8d2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f8c8:	f6 c2 01             	test   dl,0x1
c001f8cb:	74 08                	je     c001f8d5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f8cd:	d1 ea                	shr    edx,1
c001f8cf:	40                   	inc    eax
c001f8d0:	eb f2                	jmp    c001f8c4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f8d2:	83 c8 ff             	or     eax,0xffffffff
c001f8d5:	c3                   	ret    

c001f8d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f8d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8da:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f8dd:	89 c2                	mov    edx,eax
c001f8df:	c1 ea 08             	shr    edx,0x8
c001f8e2:	83 e2 0f             	and    edx,0xf
c001f8e5:	4a                   	dec    edx
c001f8e6:	75 32                	jne    c001f91a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f8e8:	83 e0 0f             	and    eax,0xf
c001f8eb:	83 f8 03             	cmp    eax,0x3
c001f8ee:	75 2a                	jne    c001f91a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f8f0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f8f3:	b8 02 00 00 00       	mov    eax,0x2
c001f8f8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f8fe:	74 1c                	je     c001f91c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f900:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f906:	b8 04 00 00 00       	mov    eax,0x4
c001f90b:	74 0f                	je     c001f91c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f90d:	31 c0                	xor    eax,eax
c001f90f:	83 fa 03             	cmp    edx,0x3
c001f912:	0f 94 c0             	sete   al
c001f915:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f919:	c3                   	ret    
c001f91a:	31 c0                	xor    eax,eax
c001f91c:	c3                   	ret    
c001f91d:	90                   	nop

c001f91e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f91e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f922:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f925:	0f ba e2 0f          	bt     edx,0xf
c001f929:	72 f7                	jb     c001f922 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f92b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f92e:	83 ca 10             	or     edx,0x10
c001f931:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f934:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f937:	83 ca 01             	or     edx,0x1
c001f93a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f93d:	c3                   	ret    

c001f93e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f93e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f942:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f945:	83 e2 fe             	and    edx,0xfffffffe
c001f948:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f94b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f94e:	83 e2 ef             	and    edx,0xffffffef
c001f951:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f954:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f957:	0f ba e2 0e          	bt     edx,0xe
c001f95b:	72 f7                	jb     c001f954 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f95d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f960:	0f ba e2 0f          	bt     edx,0xf
c001f964:	72 ee                	jb     c001f954 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f966:	c3                   	ret    
c001f967:	90                   	nop

c001f968 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f968:	55                   	push   ebp
c001f969:	57                   	push   edi
c001f96a:	56                   	push   esi
c001f96b:	53                   	push   ebx
c001f96c:	83 ec 1c             	sub    esp,0x1c
c001f96f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f973:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f977:	53                   	push   ebx
c001f978:	57                   	push   edi
c001f979:	e8 c0 ff ff ff       	call   c001f93e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f97e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f982:	83 ec 0c             	sub    esp,0xc
c001f985:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f98b:	c1 e5 0a             	shl    ebp,0xa
c001f98e:	01 e8                	add    eax,ebp
c001f990:	89 03                	mov    DWORD PTR [ebx],eax
c001f992:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f994:	68 00 04 00 00       	push   0x400
c001f999:	6a 00                	push   0x0
c001f99b:	50                   	push   eax
c001f99c:	e8 4f 0b fe ff       	call   c00004f0 <memset>
c001f9a1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f9a7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001f9ab:	83 c4 1c             	add    esp,0x1c
c001f9ae:	01 e8                	add    eax,ebp
c001f9b0:	89 03                	mov    DWORD PTR [ebx],eax
c001f9b2:	c1 e6 08             	shl    esi,0x8
c001f9b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f9bc:	81 c6 00 80 00 00    	add    esi,0x8000
c001f9c2:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001f9c8:	01 f0                	add    eax,esi
c001f9ca:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f9cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f9d0:	68 00 01 00 00       	push   0x100
c001f9d5:	6a 00                	push   0x0
c001f9d7:	50                   	push   eax
c001f9d8:	e8 13 0b fe ff       	call   c00004f0 <memset>
c001f9dd:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001f9e3:	31 d2                	xor    edx,edx
c001f9e5:	01 f0                	add    eax,esi
c001f9e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f9ea:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f9f1:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001f9f7:	01 ee                	add    esi,ebp
c001f9f9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f9fd:	83 c4 10             	add    esp,0x10
c001fa00:	c1 e5 0d             	shl    ebp,0xd
c001fa03:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001fa09:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001fa0f:	83 c6 20             	add    esi,0x20
c001fa12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fa16:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001fa1c:	01 e8                	add    eax,ebp
c001fa1e:	01 d0                	add    eax,edx
c001fa20:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001fa23:	52                   	push   edx
c001fa24:	68 00 01 00 00       	push   0x100
c001fa29:	6a 00                	push   0x0
c001fa2b:	50                   	push   eax
c001fa2c:	e8 bf 0a fe ff       	call   c00004f0 <memset>
c001fa31:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001fa37:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001fa3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa42:	83 c4 10             	add    esp,0x10
c001fa45:	01 e8                	add    eax,ebp
c001fa47:	01 d0                	add    eax,edx
c001fa49:	81 c2 00 01 00 00    	add    edx,0x100
c001fa4f:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001fa52:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001fa58:	75 af                	jne    c001fa09 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001fa5a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fa61:	50                   	push   eax
c001fa62:	50                   	push   eax
c001fa63:	53                   	push   ebx
c001fa64:	57                   	push   edi
c001fa65:	e8 b4 fe ff ff       	call   c001f91e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fa6a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001fa71:	83 c4 2c             	add    esp,0x2c
c001fa74:	5b                   	pop    ebx
c001fa75:	5e                   	pop    esi
c001fa76:	5f                   	pop    edi
c001fa77:	5d                   	pop    ebp
c001fa78:	c3                   	ret    
c001fa79:	90                   	nop

c001fa7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fa7a:	55                   	push   ebp
c001fa7b:	57                   	push   edi
c001fa7c:	56                   	push   esi
c001fa7d:	53                   	push   ebx
c001fa7e:	31 db                	xor    ebx,ebx
c001fa80:	83 ec 0c             	sub    esp,0xc
c001fa83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fa87:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fa8b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001fa8e:	f7 c7 01 00 00 00    	test   edi,0x1
c001fa94:	74 7a                	je     c001fb10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fa96:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001fa9a:	89 d8                	mov    eax,ebx
c001fa9c:	c1 e0 07             	shl    eax,0x7
c001fa9f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001faa6:	55                   	push   ebp
c001faa7:	56                   	push   esi
c001faa8:	e8 29 fe ff ff       	call   c001f8d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001faad:	5a                   	pop    edx
c001faae:	59                   	pop    ecx
c001faaf:	83 f8 01             	cmp    eax,0x1
c001fab2:	75 21                	jne    c001fad5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001fab4:	50                   	push   eax
c001fab5:	53                   	push   ebx
c001fab6:	55                   	push   ebp
c001fab7:	56                   	push   esi
c001fab8:	e8 ab fe ff ff       	call   c001f968 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fabd:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001fac4:	e8 b7 fb fe ff       	call   c000f680 <malloc>
c001fac9:	89 04 24             	mov    DWORD PTR [esp],eax
c001facc:	89 c5                	mov    ebp,eax
c001face:	e8 37 0f 00 00       	call   c0020a0a <SATA::SATA()>
c001fad3:	eb 24                	jmp    c001faf9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001fad5:	83 f8 04             	cmp    eax,0x4
c001fad8:	75 36                	jne    c001fb10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001fada:	51                   	push   ecx
c001fadb:	53                   	push   ebx
c001fadc:	55                   	push   ebp
c001fadd:	56                   	push   esi
c001fade:	e8 85 fe ff ff       	call   c001f968 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fae3:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001faea:	e8 91 fb fe ff       	call   c000f680 <malloc>
c001faef:	89 04 24             	mov    DWORD PTR [esp],eax
c001faf2:	89 c5                	mov    ebp,eax
c001faf4:	e8 a7 12 00 00       	call   c0020da0 <SATAPI::SATAPI()>
c001faf9:	58                   	pop    eax
c001fafa:	5a                   	pop    edx
c001fafb:	55                   	push   ebp
c001fafc:	56                   	push   esi
c001fafd:	e8 f4 9e fe ff       	call   c00099f6 <Device::addChild(Device*)>
c001fb02:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fb05:	56                   	push   esi
c001fb06:	6a 00                	push   0x0
c001fb08:	53                   	push   ebx
c001fb09:	55                   	push   ebp
c001fb0a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001fb0d:	83 c4 20             	add    esp,0x20
c001fb10:	d1 ef                	shr    edi,1
c001fb12:	43                   	inc    ebx
c001fb13:	83 fb 20             	cmp    ebx,0x20
c001fb16:	0f 85 72 ff ff ff    	jne    c001fa8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001fb1c:	83 c4 0c             	add    esp,0xc
c001fb1f:	5b                   	pop    ebx
c001fb20:	5e                   	pop    esi
c001fb21:	5f                   	pop    edi
c001fb22:	5d                   	pop    ebp
c001fb23:	c3                   	ret    

c001fb24 <SATABus::open(int, int, void*)>:
c001fb24:	53                   	push   ebx
c001fb25:	83 ec 08             	sub    esp,0x8
c001fb28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb2c:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001fb32:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fb38:	e8 13 68 ff ff       	call   c0016350 <KeDisablePreemption()>
c001fb3d:	52                   	push   edx
c001fb3e:	52                   	push   edx
c001fb3f:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001fb45:	53                   	push   ebx
c001fb46:	e8 2f ff ff ff       	call   c001fa7a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fb4b:	e8 28 68 ff ff       	call   c0016378 <KeRestorePreemption()>
c001fb50:	83 c4 18             	add    esp,0x18
c001fb53:	31 c0                	xor    eax,eax
c001fb55:	5b                   	pop    ebx
c001fb56:	c3                   	ret    
c001fb57:	90                   	nop

c001fb58 <ATA::close(int, int, void*)>:
c001fb58:	83 ec 0c             	sub    esp,0xc
c001fb5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fb65:	85 c0                	test   eax,eax
c001fb67:	74 0c                	je     c001fb75 <ATA::close(int, int, void*)+0x1d>
c001fb69:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb6b:	83 ec 0c             	sub    esp,0xc
c001fb6e:	50                   	push   eax
c001fb6f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fb72:	83 c4 10             	add    esp,0x10
c001fb75:	31 c0                	xor    eax,eax
c001fb77:	83 c4 0c             	add    esp,0xc
c001fb7a:	c3                   	ret    
c001fb7b:	90                   	nop

c001fb7c <ATA::powerSaving(PowerSavingLevel)>:
c001fb7c:	c3                   	ret    
c001fb7d:	90                   	nop

c001fb7e <ATA::ATA()>:
c001fb7e:	83 ec 0c             	sub    esp,0xc
c001fb81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb85:	83 ec 04             	sub    esp,0x4
c001fb88:	68 00 02 00 00       	push   0x200
c001fb8d:	68 c1 9a 02 c0       	push   0xc0029ac1
c001fb92:	50                   	push   eax
c001fb93:	e8 42 a2 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb98:	83 c4 10             	add    esp,0x10
c001fb9b:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c001fba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fba4:	89 10                	mov    DWORD PTR [eax],edx
c001fba6:	90                   	nop
c001fba7:	83 c4 0c             	add    esp,0xc
c001fbaa:	c3                   	ret    
c001fbab:	90                   	nop

c001fbac <ATA::flush(bool)>:
c001fbac:	53                   	push   ebx
c001fbad:	83 ec 08             	sub    esp,0x8
c001fbb0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001fbb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fbb9:	83 f8 01             	cmp    eax,0x1
c001fbbc:	19 c0                	sbb    eax,eax
c001fbbe:	83 e0 fd             	and    eax,0xfffffffd
c001fbc1:	05 ea 00 00 00       	add    eax,0xea
c001fbc6:	50                   	push   eax
c001fbc7:	6a 07                	push   0x7
c001fbc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbd0:	50                   	push   eax
c001fbd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbd7:	e8 48 ee ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbdc:	83 c4 0c             	add    esp,0xc
c001fbdf:	6a 00                	push   0x0
c001fbe1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbe8:	50                   	push   eax
c001fbe9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbef:	e8 d0 fb ff ff       	call   c001f7c4 <IDE::polling(unsigned char, unsigned int)>
c001fbf4:	83 c4 18             	add    esp,0x18
c001fbf7:	5b                   	pop    ebx
c001fbf8:	c3                   	ret    
c001fbf9:	90                   	nop

c001fbfa <ATA::readyForCommand()>:
c001fbfa:	56                   	push   esi
c001fbfb:	53                   	push   ebx
c001fbfc:	31 db                	xor    ebx,ebx
c001fbfe:	50                   	push   eax
c001fbff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc03:	50                   	push   eax
c001fc04:	6a 0c                	push   0xc
c001fc06:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fc0d:	50                   	push   eax
c001fc0e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fc14:	e8 cb ee ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c001fc19:	83 c4 10             	add    esp,0x10
c001fc1c:	a8 88                	test   al,0x88
c001fc1e:	74 20                	je     c001fc40 <ATA::readyForCommand()+0x46>
c001fc20:	43                   	inc    ebx
c001fc21:	83 fb 63             	cmp    ebx,0x63
c001fc24:	7e dd                	jle    c001fc03 <ATA::readyForCommand()+0x9>
c001fc26:	51                   	push   ecx
c001fc27:	51                   	push   ecx
c001fc28:	6a 00                	push   0x0
c001fc2a:	6a 0a                	push   0xa
c001fc2c:	e8 0f 6c ff ff       	call   c0016840 <milliTenthSleep(unsigned long long)>
c001fc31:	83 c4 10             	add    esp,0x10
c001fc34:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fc3a:	75 c7                	jne    c001fc03 <ATA::readyForCommand()+0x9>
c001fc3c:	31 c0                	xor    eax,eax
c001fc3e:	eb 02                	jmp    c001fc42 <ATA::readyForCommand()+0x48>
c001fc40:	b0 01                	mov    al,0x1
c001fc42:	5a                   	pop    edx
c001fc43:	5b                   	pop    ebx
c001fc44:	5e                   	pop    esi
c001fc45:	c3                   	ret    

c001fc46 <ATA::access(unsigned long long, int, void*, bool)>:
c001fc46:	55                   	push   ebp
c001fc47:	57                   	push   edi
c001fc48:	56                   	push   esi
c001fc49:	53                   	push   ebx
c001fc4a:	83 ec 2c             	sub    esp,0x2c
c001fc4d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fc51:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fc55:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fc59:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001fc5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fc61:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001fc65:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001fc69:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fc6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc73:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fc79:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc7d:	c1 e0 06             	shl    eax,0x6
c001fc80:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fc88:	74 5b                	je     c001fce5 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001fc8a:	89 fa                	mov    edx,edi
c001fc8c:	89 f0                	mov    eax,esi
c001fc8e:	c1 ea 1c             	shr    edx,0x1c
c001fc91:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001fc95:	89 d1                	mov    ecx,edx
c001fc97:	09 c1                	or     ecx,eax
c001fc99:	74 25                	je     c001fcc0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001fc9b:	31 ed                	xor    ebp,ebp
c001fc9d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fca4:	89 fa                	mov    edx,edi
c001fca6:	89 f0                	mov    eax,esi
c001fca8:	0f ad d0             	shrd   eax,edx,cl
c001fcab:	d3 ea                	shr    edx,cl
c001fcad:	f6 c1 20             	test   cl,0x20
c001fcb0:	74 02                	je     c001fcb4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001fcb2:	89 d0                	mov    eax,edx
c001fcb4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fcb8:	45                   	inc    ebp
c001fcb9:	83 fd 06             	cmp    ebp,0x6
c001fcbc:	75 df                	jne    c001fc9d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001fcbe:	eb 71                	jmp    c001fd31 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001fcc0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fcc5:	89 f0                	mov    eax,esi
c001fcc7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fcce:	0f ac f8 10          	shrd   eax,edi,0x10
c001fcd2:	bf 01 00 00 00       	mov    edi,0x1
c001fcd7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fcdb:	c1 ee 18             	shr    esi,0x18
c001fcde:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fce3:	eb 53                	jmp    c001fd38 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001fce5:	6a 00                	push   0x0
c001fce7:	6a 3f                	push   0x3f
c001fce9:	57                   	push   edi
c001fcea:	56                   	push   esi
c001fceb:	e8 d4 20 00 00       	call   c0021dc4 <__umoddi3>
c001fcf0:	83 c4 10             	add    esp,0x10
c001fcf3:	40                   	inc    eax
c001fcf4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fcf8:	6a 00                	push   0x0
c001fcfa:	68 f0 03 00 00       	push   0x3f0
c001fcff:	57                   	push   edi
c001fd00:	56                   	push   esi
c001fd01:	e8 be 1f 00 00       	call   c0021cc4 <__udivdi3>
c001fd06:	83 c4 10             	add    esp,0x10
c001fd09:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fd0e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fd15:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fd1a:	6a 00                	push   0x0
c001fd1c:	6a 3f                	push   0x3f
c001fd1e:	57                   	push   edi
c001fd1f:	31 ff                	xor    edi,edi
c001fd21:	56                   	push   esi
c001fd22:	e8 9d 1f 00 00       	call   c0021cc4 <__udivdi3>
c001fd27:	83 c4 10             	add    esp,0x10
c001fd2a:	83 e0 0f             	and    eax,0xf
c001fd2d:	89 c6                	mov    esi,eax
c001fd2f:	eb 07                	jmp    c001fd38 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001fd31:	31 f6                	xor    esi,esi
c001fd33:	bf 02 00 00 00       	mov    edi,0x2
c001fd38:	55                   	push   ebp
c001fd39:	6a 00                	push   0x0
c001fd3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd42:	50                   	push   eax
c001fd43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fd47:	e8 e8 ee ff ff       	call   c001ec34 <IDE::enableIRQs(unsigned char, bool)>
c001fd4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd4f:	e8 a6 fe ff ff       	call   c001fbfa <ATA::readyForCommand()>
c001fd54:	83 c4 10             	add    esp,0x10
c001fd57:	84 c0                	test   al,al
c001fd59:	75 0a                	jne    c001fd65 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001fd5b:	be 01 00 00 00       	mov    esi,0x1
c001fd60:	e9 df 02 00 00       	jmp    c0020044 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c001fd65:	fa                   	cli    
c001fd66:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c001fd6c:	f7 c7 03 00 00 00    	test   edi,0x3
c001fd72:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fd78:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fd7e:	75 0a                	jne    c001fd8a <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001fd80:	c1 e0 04             	shl    eax,0x4
c001fd83:	09 c6                	or     esi,eax
c001fd85:	83 ce a0             	or     esi,0xffffffa0
c001fd88:	eb 08                	jmp    c001fd92 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001fd8a:	c1 e0 04             	shl    eax,0x4
c001fd8d:	09 c6                	or     esi,eax
c001fd8f:	83 ce e0             	or     esi,0xffffffe0
c001fd92:	89 f0                	mov    eax,esi
c001fd94:	0f b6 d2             	movzx  edx,dl
c001fd97:	0f b6 f0             	movzx  esi,al
c001fd9a:	56                   	push   esi
c001fd9b:	6a 06                	push   0x6
c001fd9d:	52                   	push   edx
c001fd9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fda4:	e8 7b ec ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fda9:	83 c4 10             	add    esp,0x10
c001fdac:	6a 00                	push   0x0
c001fdae:	6a 01                	push   0x1
c001fdb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdb7:	50                   	push   eax
c001fdb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdbe:	e8 61 ec ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdc3:	89 f8                	mov    eax,edi
c001fdc5:	83 c4 10             	add    esp,0x10
c001fdc8:	0f b6 f0             	movzx  esi,al
c001fdcb:	83 fe 02             	cmp    esi,0x2
c001fdce:	75 6e                	jne    c001fe3e <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fdd0:	6a 00                	push   0x0
c001fdd2:	6a 08                	push   0x8
c001fdd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fddb:	50                   	push   eax
c001fddc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fde2:	e8 3d ec ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fde7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fdec:	50                   	push   eax
c001fded:	6a 09                	push   0x9
c001fdef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdf6:	50                   	push   eax
c001fdf7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdfd:	e8 22 ec ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe02:	83 c4 20             	add    esp,0x20
c001fe05:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fe0a:	50                   	push   eax
c001fe0b:	6a 0a                	push   0xa
c001fe0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe14:	50                   	push   eax
c001fe15:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe1b:	e8 04 ec ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe20:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fe25:	50                   	push   eax
c001fe26:	6a 0b                	push   0xb
c001fe28:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe2f:	50                   	push   eax
c001fe30:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe36:	e8 e9 eb ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe3b:	83 c4 20             	add    esp,0x20
c001fe3e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fe43:	50                   	push   eax
c001fe44:	6a 02                	push   0x2
c001fe46:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe4d:	50                   	push   eax
c001fe4e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe54:	e8 cb eb ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe59:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fe5e:	50                   	push   eax
c001fe5f:	6a 03                	push   0x3
c001fe61:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe68:	50                   	push   eax
c001fe69:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe6f:	e8 b0 eb ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe74:	83 c4 20             	add    esp,0x20
c001fe77:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fe7c:	50                   	push   eax
c001fe7d:	6a 04                	push   0x4
c001fe7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe86:	50                   	push   eax
c001fe87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe8d:	e8 92 eb ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe92:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fe97:	50                   	push   eax
c001fe98:	6a 05                	push   0x5
c001fe9a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fea1:	50                   	push   eax
c001fea2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fea8:	e8 77 eb ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fead:	83 c4 20             	add    esp,0x20
c001feb0:	83 fe 02             	cmp    esi,0x2
c001feb3:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001feb8:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001febd:	85 c9                	test   ecx,ecx
c001febf:	74 07                	je     c001fec8 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fec1:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fec6:	75 45                	jne    c001ff0d <ATA::access(unsigned long long, int, void*, bool)+0x2c7>
c001fec8:	89 f8                	mov    eax,edi
c001feca:	0f b6 f8             	movzx  edi,al
c001fecd:	31 c0                	xor    eax,eax
c001fecf:	4f                   	dec    edi
c001fed0:	0f 94 c0             	sete   al
c001fed3:	89 c6                	mov    esi,eax
c001fed5:	75 0c                	jne    c001fee3 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001fed7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fedc:	b8 30 00 00 00       	mov    eax,0x30
c001fee1:	75 2f                	jne    c001ff12 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fee3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fee7:	83 f2 01             	xor    edx,0x1
c001feea:	85 c9                	test   ecx,ecx
c001feec:	74 09                	je     c001fef7 <ATA::access(unsigned long long, int, void*, bool)+0x2b1>
c001feee:	84 d2                	test   dl,dl
c001fef0:	b8 24 00 00 00       	mov    eax,0x24
c001fef5:	75 1b                	jne    c001ff12 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001fef7:	85 f6                	test   esi,esi
c001fef9:	0f 84 5c fe ff ff    	je     c001fd5b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001feff:	84 d2                	test   dl,dl
c001ff01:	b8 20 00 00 00       	mov    eax,0x20
c001ff06:	75 0a                	jne    c001ff12 <ATA::access(unsigned long long, int, void*, bool)+0x2cc>
c001ff08:	e9 4e fe ff ff       	jmp    c001fd5b <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001ff0d:	b8 34 00 00 00       	mov    eax,0x34
c001ff12:	50                   	push   eax
c001ff13:	6a 07                	push   0x7
c001ff15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff1c:	50                   	push   eax
c001ff1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff23:	e8 fc ea ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff28:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c001ff2f:	83 c4 10             	add    esp,0x10
c001ff32:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c001ff39:	75 01                	jne    c001ff3c <ATA::access(unsigned long long, int, void*, bool)+0x2f6>
c001ff3b:	fb                   	sti    
c001ff3c:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ff40:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001ff45:	85 f6                	test   esi,esi
c001ff47:	0f 84 dd 00 00 00    	je     c002002a <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001ff4d:	57                   	push   edi
c001ff4e:	6a 01                	push   0x1
c001ff50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff57:	50                   	push   eax
c001ff58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff5e:	e8 61 f8 ff ff       	call   c001f7c4 <IDE::polling(unsigned char, unsigned int)>
c001ff63:	83 c4 10             	add    esp,0x10
c001ff66:	0f b6 c0             	movzx  eax,al
c001ff69:	85 c0                	test   eax,eax
c001ff6b:	74 23                	je     c001ff90 <ATA::access(unsigned long long, int, void*, bool)+0x34a>
c001ff6d:	50                   	push   eax
c001ff6e:	89 c6                	mov    esi,eax
c001ff70:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ff77:	50                   	push   eax
c001ff78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff7f:	50                   	push   eax
c001ff80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff86:	e8 7f f7 ff ff       	call   c001f70a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ff8b:	e9 b1 00 00 00       	jmp    c0020041 <ATA::access(unsigned long long, int, void*, bool)+0x3fb>
c001ff90:	85 ed                	test   ebp,ebp
c001ff92:	74 49                	je     c001ffdd <ATA::access(unsigned long long, int, void*, bool)+0x397>
c001ff94:	fa                   	cli    
c001ff95:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c001ff9b:	31 ff                	xor    edi,edi
c001ff9d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ffa1:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001ffa5:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001ffaa:	51                   	push   ecx
c001ffab:	51                   	push   ecx
c001ffac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffb3:	50                   	push   eax
c001ffb4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffba:	e8 53 ea ff ff       	call   c001ea12 <IDE::getBase(unsigned char)>
c001ffbf:	89 c2                	mov    edx,eax
c001ffc1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ffc6:	66 ef                	out    dx,ax
c001ffc8:	47                   	inc    edi
c001ffc9:	83 c4 10             	add    esp,0x10
c001ffcc:	81 ff 00 01 00 00    	cmp    edi,0x100
c001ffd2:	75 c9                	jne    c001ff9d <ATA::access(unsigned long long, int, void*, bool)+0x357>
c001ffd4:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c001ffdb:	eb 35                	jmp    c0020012 <ATA::access(unsigned long long, int, void*, bool)+0x3cc>
c001ffdd:	fa                   	cli    
c001ffde:	52                   	push   edx
c001ffdf:	52                   	push   edx
c001ffe0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffe7:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c001ffed:	50                   	push   eax
c001ffee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fff4:	e8 19 ea ff ff       	call   c001ea12 <IDE::getBase(unsigned char)>
c001fff9:	b9 00 01 00 00       	mov    ecx,0x100
c001fffe:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0020002:	89 c2                	mov    edx,eax
c0020004:	fc                   	cld    
c0020005:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0020008:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0020019:	75 01                	jne    c002001c <ATA::access(unsigned long long, int, void*, bool)+0x3d6>
c002001b:	fb                   	sti    
c002001c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0020024:	4e                   	dec    esi
c0020025:	e9 1b ff ff ff       	jmp    c001ff45 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002002a:	31 f6                	xor    esi,esi
c002002c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0020031:	74 11                	je     c0020044 <ATA::access(unsigned long long, int, void*, bool)+0x3fe>
c0020033:	50                   	push   eax
c0020034:	50                   	push   eax
c0020035:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002003a:	50                   	push   eax
c002003b:	53                   	push   ebx
c002003c:	e8 6b fb ff ff       	call   c001fbac <ATA::flush(bool)>
c0020041:	83 c4 10             	add    esp,0x10
c0020044:	83 c4 2c             	add    esp,0x2c
c0020047:	89 f0                	mov    eax,esi
c0020049:	5b                   	pop    ebx
c002004a:	5e                   	pop    esi
c002004b:	5f                   	pop    edi
c002004c:	5d                   	pop    ebp
c002004d:	c3                   	ret    

c002004e <ATA::read(unsigned long long, int, void*)>:
c002004e:	57                   	push   edi
c002004f:	b8 04 00 00 00       	mov    eax,0x4
c0020054:	56                   	push   esi
c0020055:	53                   	push   ebx
c0020056:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002005a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002005e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020062:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020066:	8d 7a ff             	lea    edi,[edx-0x1]
c0020069:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002006f:	77 25                	ja     c0020096 <ATA::read(unsigned long long, int, void*)+0x48>
c0020071:	85 f6                	test   esi,esi
c0020073:	b8 06 00 00 00       	mov    eax,0x6
c0020078:	74 1c                	je     c0020096 <ATA::read(unsigned long long, int, void*)+0x48>
c002007a:	50                   	push   eax
c002007b:	50                   	push   eax
c002007c:	6a 00                	push   0x0
c002007e:	56                   	push   esi
c002007f:	52                   	push   edx
c0020080:	53                   	push   ebx
c0020081:	51                   	push   ecx
c0020082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020086:	e8 bb fb ff ff       	call   c001fc46 <ATA::access(unsigned long long, int, void*, bool)>
c002008b:	83 c4 20             	add    esp,0x20
c002008e:	85 c0                	test   eax,eax
c0020090:	0f 95 c0             	setne  al
c0020093:	0f b6 c0             	movzx  eax,al
c0020096:	5b                   	pop    ebx
c0020097:	5e                   	pop    esi
c0020098:	5f                   	pop    edi
c0020099:	c3                   	ret    

c002009a <ATA::write(unsigned long long, int, void*)>:
c002009a:	57                   	push   edi
c002009b:	b8 04 00 00 00       	mov    eax,0x4
c00200a0:	56                   	push   esi
c00200a1:	53                   	push   ebx
c00200a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00200a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00200aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00200ae:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00200b2:	8d 7a ff             	lea    edi,[edx-0x1]
c00200b5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00200bb:	77 25                	ja     c00200e2 <ATA::write(unsigned long long, int, void*)+0x48>
c00200bd:	85 f6                	test   esi,esi
c00200bf:	b8 06 00 00 00       	mov    eax,0x6
c00200c4:	74 1c                	je     c00200e2 <ATA::write(unsigned long long, int, void*)+0x48>
c00200c6:	50                   	push   eax
c00200c7:	50                   	push   eax
c00200c8:	6a 01                	push   0x1
c00200ca:	56                   	push   esi
c00200cb:	52                   	push   edx
c00200cc:	53                   	push   ebx
c00200cd:	51                   	push   ecx
c00200ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00200d2:	e8 6f fb ff ff       	call   c001fc46 <ATA::access(unsigned long long, int, void*, bool)>
c00200d7:	83 c4 20             	add    esp,0x20
c00200da:	85 c0                	test   eax,eax
c00200dc:	0f 95 c0             	setne  al
c00200df:	0f b6 c0             	movzx  eax,al
c00200e2:	5b                   	pop    ebx
c00200e3:	5e                   	pop    esi
c00200e4:	5f                   	pop    edi
c00200e5:	c3                   	ret    

c00200e6 <ATA::detectCHS()>:
c00200e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00200ea:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00200f0:	c1 e0 06             	shl    eax,0x6
c00200f3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00200f9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0020103:	c7 44 24 04 64 99 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029964
c002010b:	e9 c4 f9 fe ff       	jmp    c000fad4 <KePanic(char const*)>

c0020110 <ATA::open(int, int, void*)>:
c0020110:	53                   	push   ebx
c0020111:	83 ec 08             	sub    esp,0x8
c0020114:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020118:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002011c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020120:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020126:	c1 e0 06             	shl    eax,0x6
c0020129:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002012f:	01 d0                	add    eax,edx
c0020131:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0020138:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002013e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0020145:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002014f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020156:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002015c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0020163:	75 0c                	jne    c0020171 <ATA::open(int, int, void*)+0x61>
c0020165:	83 ec 0c             	sub    esp,0xc
c0020168:	53                   	push   ebx
c0020169:	e8 78 ff ff ff       	call   c00200e6 <ATA::detectCHS()>
c002016e:	83 c4 10             	add    esp,0x10
c0020171:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020177:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002017d:	c1 e0 06             	shl    eax,0x6
c0020180:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0020187:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020191:	d1 e8                	shr    eax,1
c0020193:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020199:	6a 04                	push   0x4
c002019b:	6a 0c                	push   0xc
c002019d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201a4:	50                   	push   eax
c00201a5:	52                   	push   edx
c00201a6:	e8 79 e8 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201ab:	90                   	nop
c00201ac:	90                   	nop
c00201ad:	6a 00                	push   0x0
c00201af:	6a 0c                	push   0xc
c00201b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201b8:	50                   	push   eax
c00201b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201bf:	e8 60 e8 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00201c4:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00201ca:	83 c4 20             	add    esp,0x20
c00201cd:	c1 e0 06             	shl    eax,0x6
c00201d0:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c00201d6:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c00201dd:	0f 84 00 01 00 00    	je     c00202e3 <ATA::open(int, int, void*)+0x1d3>
c00201e3:	83 ec 0c             	sub    esp,0xc
c00201e6:	6a 08                	push   0x8
c00201e8:	e8 c8 fb fe ff       	call   c000fdb5 <Phys::allocateContiguousPages(int)>
c00201ed:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00201f3:	c7 04 24 76 99 02 c0 	mov    DWORD PTR [esp],0xc0029976
c00201fa:	e8 67 6d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c00201ff:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0020206:	e8 10 2e ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c002020b:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0020211:	6a 03                	push   0x3
c0020213:	50                   	push   eax
c0020214:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002021a:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c0020220:	e8 cf 34 ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020225:	83 c4 20             	add    esp,0x20
c0020228:	e8 a1 fa fe ff       	call   c000fcce <Phys::allocatePage()>
c002022d:	83 ec 0c             	sub    esp,0xc
c0020230:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c0020236:	6a 01                	push   0x1
c0020238:	e8 de 2d ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c002023d:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c0020243:	6a 03                	push   0x3
c0020245:	50                   	push   eax
c0020246:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c002024c:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c0020252:	e8 9d 34 ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020257:	83 c4 14             	add    esp,0x14
c002025a:	68 af 99 02 c0       	push   0xc00299af
c002025f:	e8 02 6d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020264:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c002026b:	50                   	push   eax
c002026c:	6a 12                	push   0x12
c002026e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020275:	50                   	push   eax
c0020276:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002027c:	e8 a3 e7 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020281:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c0020287:	83 c4 20             	add    esp,0x20
c002028a:	0f b6 c4             	movzx  eax,ah
c002028d:	50                   	push   eax
c002028e:	6a 13                	push   0x13
c0020290:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020297:	50                   	push   eax
c0020298:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002029e:	e8 81 e7 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202a3:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c00202aa:	50                   	push   eax
c00202ab:	6a 14                	push   0x14
c00202ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202b4:	50                   	push   eax
c00202b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202bb:	e8 64 e7 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202c0:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c00202c7:	83 c4 20             	add    esp,0x20
c00202ca:	50                   	push   eax
c00202cb:	6a 15                	push   0x15
c00202cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00202d4:	50                   	push   eax
c00202d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00202db:	e8 44 e7 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202e0:	83 c4 10             	add    esp,0x10
c00202e3:	83 ec 0c             	sub    esp,0xc
c00202e6:	53                   	push   ebx
c00202e7:	e8 56 9b fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c00202ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00202ef:	e8 ba a9 fe ff       	call   c000acae <createPartitionsForDisk(PhysicalDisk*)>
c00202f4:	83 c4 18             	add    esp,0x18
c00202f7:	31 c0                	xor    eax,eax
c00202f9:	5b                   	pop    ebx
c00202fa:	c3                   	ret    

c00202fb <combineCharAndColour(char, unsigned char)>:
c00202fb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020300:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c0020306:	c1 e0 08             	shl    eax,0x8
c0020309:	09 d0                	or     eax,edx
c002030b:	c3                   	ret    

c002030c <combineColours(unsigned char, unsigned char)>:
c002030c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020311:	c1 e0 04             	shl    eax,0x4
c0020314:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c0020318:	c3                   	ret    
c0020319:	90                   	nop

c002031a <ATAPI::write(unsigned long long, int, void*)>:
c002031a:	b8 03 00 00 00       	mov    eax,0x3
c002031f:	c3                   	ret    

c0020320 <ATAPI::close(int, int, void*)>:
c0020320:	83 ec 0c             	sub    esp,0xc
c0020323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020327:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002032d:	85 c0                	test   eax,eax
c002032f:	74 0c                	je     c002033d <ATAPI::close(int, int, void*)+0x1d>
c0020331:	8b 10                	mov    edx,DWORD PTR [eax]
c0020333:	83 ec 0c             	sub    esp,0xc
c0020336:	50                   	push   eax
c0020337:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002033a:	83 c4 10             	add    esp,0x10
c002033d:	31 c0                	xor    eax,eax
c002033f:	83 c4 0c             	add    esp,0xc
c0020342:	c3                   	ret    
c0020343:	90                   	nop

c0020344 <ATAPI::ATAPI()>:
c0020344:	83 ec 0c             	sub    esp,0xc
c0020347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002034b:	83 ec 04             	sub    esp,0x4
c002034e:	68 00 08 00 00       	push   0x800
c0020353:	68 61 9b 02 c0       	push   0xc0029b61
c0020358:	50                   	push   eax
c0020359:	e8 7c 9a fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c002035e:	83 c4 10             	add    esp,0x10
c0020361:	ba 70 9a 02 c0       	mov    edx,0xc0029a70
c0020366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002036a:	89 10                	mov    DWORD PTR [eax],edx
c002036c:	90                   	nop
c002036d:	83 c4 0c             	add    esp,0xc
c0020370:	c3                   	ret    
c0020371:	90                   	nop

c0020372 <ATAPI::readyForCommand()>:
c0020372:	56                   	push   esi
c0020373:	53                   	push   ebx
c0020374:	31 db                	xor    ebx,ebx
c0020376:	50                   	push   eax
c0020377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002037b:	50                   	push   eax
c002037c:	6a 0c                	push   0xc
c002037e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0020385:	50                   	push   eax
c0020386:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002038c:	e8 53 e7 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c0020391:	83 c4 10             	add    esp,0x10
c0020394:	a8 88                	test   al,0x88
c0020396:	74 26                	je     c00203be <ATAPI::readyForCommand()+0x4c>
c0020398:	43                   	inc    ebx
c0020399:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002039f:	7e da                	jle    c002037b <ATAPI::readyForCommand()+0x9>
c00203a1:	51                   	push   ecx
c00203a2:	51                   	push   ecx
c00203a3:	6a 00                	push   0x0
c00203a5:	68 5e 01 00 00       	push   0x15e
c00203aa:	e8 91 64 ff ff       	call   c0016840 <milliTenthSleep(unsigned long long)>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c00203b8:	75 c1                	jne    c002037b <ATAPI::readyForCommand()+0x9>
c00203ba:	31 c0                	xor    eax,eax
c00203bc:	eb 02                	jmp    c00203c0 <ATAPI::readyForCommand()+0x4e>
c00203be:	b0 01                	mov    al,0x1
c00203c0:	5a                   	pop    edx
c00203c1:	5b                   	pop    ebx
c00203c2:	5e                   	pop    esi
c00203c3:	c3                   	ret    

c00203c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00203c4:	55                   	push   ebp
c00203c5:	57                   	push   edi
c00203c6:	56                   	push   esi
c00203c7:	53                   	push   ebx
c00203c8:	83 ec 20             	sub    esp,0x20
c00203cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00203cf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00203d3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00203d7:	6a 01                	push   0x1
c00203d9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203e0:	50                   	push   eax
c00203e1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203e7:	e8 48 e8 ff ff       	call   c001ec34 <IDE::enableIRQs(unsigned char, bool)>
c00203ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203f3:	59                   	pop    ecx
c00203f4:	5e                   	pop    esi
c00203f5:	50                   	push   eax
c00203f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203fc:	e8 fd e5 ff ff       	call   c001e9fe <IDE::prepareInterrupt(unsigned char)>
c0020401:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020404:	e8 69 ff ff ff       	call   c0020372 <ATAPI::readyForCommand()>
c0020409:	83 c4 10             	add    esp,0x10
c002040c:	84 c0                	test   al,al
c002040e:	75 0a                	jne    c002041a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c0020410:	bb 01 00 00 00       	mov    ebx,0x1
c0020415:	e9 5f 02 00 00       	jmp    c0020679 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002041a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c0020420:	c1 e0 04             	shl    eax,0x4
c0020423:	0f b6 c0             	movzx  eax,al
c0020426:	50                   	push   eax
c0020427:	6a 06                	push   0x6
c0020429:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020430:	50                   	push   eax
c0020431:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020437:	e8 e8 e5 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002043c:	6a 00                	push   0x0
c002043e:	6a 01                	push   0x1
c0020440:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020447:	50                   	push   eax
c0020448:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002044e:	e8 d1 e5 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020453:	83 c4 20             	add    esp,0x20
c0020456:	0f b6 c3             	movzx  eax,bl
c0020459:	50                   	push   eax
c002045a:	0f b6 df             	movzx  ebx,bh
c002045d:	6a 04                	push   0x4
c002045f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020466:	50                   	push   eax
c0020467:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002046d:	e8 b2 e5 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020472:	53                   	push   ebx
c0020473:	6a 05                	push   0x5
c0020475:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002047c:	50                   	push   eax
c002047d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020483:	e8 9c e5 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020488:	83 c4 20             	add    esp,0x20
c002048b:	68 a0 00 00 00       	push   0xa0
c0020490:	6a 07                	push   0x7
c0020492:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020499:	50                   	push   eax
c002049a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204a0:	e8 7f e5 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204a5:	83 c4 0c             	add    esp,0xc
c00204a8:	6a 01                	push   0x1
c00204aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204b1:	50                   	push   eax
c00204b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204b8:	e8 07 f3 ff ff       	call   c001f7c4 <IDE::polling(unsigned char, unsigned int)>
c00204bd:	83 c4 10             	add    esp,0x10
c00204c0:	0f b6 d8             	movzx  ebx,al
c00204c3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c00204c9:	85 db                	test   ebx,ebx
c00204cb:	74 20                	je     c00204ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c00204cd:	53                   	push   ebx
c00204ce:	0f b6 c0             	movzx  eax,al
c00204d1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c00204d8:	52                   	push   edx
c00204d9:	50                   	push   eax
c00204da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204e0:	e8 25 f2 ff ff       	call   c001f70a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00204e5:	83 c4 10             	add    esp,0x10
c00204e8:	e9 8c 01 00 00       	jmp    c0020679 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00204ed:	52                   	push   edx
c00204ee:	0f b6 c0             	movzx  eax,al
c00204f1:	52                   	push   edx
c00204f2:	50                   	push   eax
c00204f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204f9:	e8 14 e5 ff ff       	call   c001ea12 <IDE::getBase(unsigned char)>
c00204fe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020502:	b9 06 00 00 00       	mov    ecx,0x6
c0020507:	89 c2                	mov    edx,eax
c0020509:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002050c:	89 e8                	mov    eax,ebp
c002050e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020512:	83 c4 10             	add    esp,0x10
c0020515:	0f b6 c0             	movzx  eax,al
c0020518:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002051c:	85 db                	test   ebx,ebx
c002051e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020524:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002052b:	0f 84 eb 00 00 00    	je     c002061c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020531:	55                   	push   ebp
c0020532:	55                   	push   ebp
c0020533:	52                   	push   edx
c0020534:	50                   	push   eax
c0020535:	e8 5e e6 ff ff       	call   c001eb98 <IDE::waitInterrupt(unsigned char)>
c002053a:	83 c4 10             	add    esp,0x10
c002053d:	84 c0                	test   al,al
c002053f:	0f 84 cb fe ff ff    	je     c0020410 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020545:	56                   	push   esi
c0020546:	56                   	push   esi
c0020547:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002054e:	50                   	push   eax
c002054f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020555:	e8 a4 e4 ff ff       	call   c001e9fe <IDE::prepareInterrupt(unsigned char)>
c002055a:	83 c4 0c             	add    esp,0xc
c002055d:	6a 04                	push   0x4
c002055f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020566:	50                   	push   eax
c0020567:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002056d:	e8 72 e5 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c0020572:	83 c4 0c             	add    esp,0xc
c0020575:	6a 05                	push   0x5
c0020577:	89 c6                	mov    esi,eax
c0020579:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020580:	50                   	push   eax
c0020581:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020587:	e8 58 e5 ff ff       	call   c001eae4 <IDE::read(unsigned char, unsigned char)>
c002058c:	83 c4 10             	add    esp,0x10
c002058f:	0f b6 e8             	movzx  ebp,al
c0020592:	89 f0                	mov    eax,esi
c0020594:	c1 e5 08             	shl    ebp,0x8
c0020597:	0f b6 f0             	movzx  esi,al
c002059a:	09 f5                	or     ebp,esi
c002059c:	31 f6                	xor    esi,esi
c002059e:	d1 fd                	sar    ebp,1
c00205a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205a5:	74 5c                	je     c0020603 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c00205a7:	39 ee                	cmp    esi,ebp
c00205a9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00205af:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00205b6:	75 0d                	jne    c00205c5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c00205b8:	8d 0c 36             	lea    ecx,[esi+esi*1]
c00205bb:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c00205bf:	4b                   	dec    ebx
c00205c0:	e9 57 ff ff ff       	jmp    c002051c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c00205c5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00205c9:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c00205cd:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c00205d2:	51                   	push   ecx
c00205d3:	51                   	push   ecx
c00205d4:	52                   	push   edx
c00205d5:	50                   	push   eax
c00205d6:	e8 37 e4 ff ff       	call   c001ea12 <IDE::getBase(unsigned char)>
c00205db:	89 c2                	mov    edx,eax
c00205dd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00205e2:	66 ef                	out    dx,ax
c00205e4:	46                   	inc    esi
c00205e5:	83 c4 10             	add    esp,0x10
c00205e8:	eb bd                	jmp    c00205a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c00205ea:	51                   	push   ecx
c00205eb:	51                   	push   ecx
c00205ec:	52                   	push   edx
c00205ed:	50                   	push   eax
c00205ee:	e8 1f e4 ff ff       	call   c001ea12 <IDE::getBase(unsigned char)>
c00205f3:	89 c2                	mov    edx,eax
c00205f5:	66 ed                	in     ax,dx
c00205f7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00205fb:	83 c4 10             	add    esp,0x10
c00205fe:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0020602:	46                   	inc    esi
c0020603:	39 ee                	cmp    esi,ebp
c0020605:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002060b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020612:	75 d6                	jne    c00205ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c0020614:	01 f6                	add    esi,esi
c0020616:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002061a:	eb a3                	jmp    c00205bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002061c:	51                   	push   ecx
c002061d:	51                   	push   ecx
c002061e:	52                   	push   edx
c002061f:	50                   	push   eax
c0020620:	e8 73 e5 ff ff       	call   c001eb98 <IDE::waitInterrupt(unsigned char)>
c0020625:	83 c4 10             	add    esp,0x10
c0020628:	84 c0                	test   al,al
c002062a:	0f 84 e0 fd ff ff    	je     c0020410 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c0020630:	52                   	push   edx
c0020631:	bb a0 86 01 00       	mov    ebx,0x186a0
c0020636:	52                   	push   edx
c0020637:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002063e:	50                   	push   eax
c002063f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020645:	e8 b4 e3 ff ff       	call   c001e9fe <IDE::prepareInterrupt(unsigned char)>
c002064a:	83 c4 10             	add    esp,0x10
c002064d:	50                   	push   eax
c002064e:	50                   	push   eax
c002064f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020656:	50                   	push   eax
c0020657:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002065d:	e8 b0 e3 ff ff       	call   c001ea12 <IDE::getBase(unsigned char)>
c0020662:	8d 50 07             	lea    edx,[eax+0x7]
c0020665:	ec                   	in     al,dx
c0020666:	83 c4 10             	add    esp,0x10
c0020669:	a8 88                	test   al,0x88
c002066b:	74 0a                	je     c0020677 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002066d:	4b                   	dec    ebx
c002066e:	75 dd                	jne    c002064d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020670:	bb 02 00 00 00       	mov    ebx,0x2
c0020675:	eb 02                	jmp    c0020679 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0020677:	31 db                	xor    ebx,ebx
c0020679:	83 c4 1c             	add    esp,0x1c
c002067c:	89 d8                	mov    eax,ebx
c002067e:	5b                   	pop    ebx
c002067f:	5e                   	pop    esi
c0020680:	5f                   	pop    edi
c0020681:	5d                   	pop    ebp
c0020682:	c3                   	ret    
c0020683:	90                   	nop

c0020684 <ATAPI::diskRemoved()>:
c0020684:	53                   	push   ebx
c0020685:	83 ec 14             	sub    esp,0x14
c0020688:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002068c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020693:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020699:	e8 fe a2 fe ff       	call   c000a99c <LogicalDisk::unmount()>
c002069e:	58                   	pop    eax
c002069f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00206a5:	e8 ea ac fe ff       	call   c000b394 <VCache::writeWriteBuffer()>
c00206aa:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00206b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00206b4:	83 c4 18             	add    esp,0x18
c00206b7:	5b                   	pop    ebx
c00206b8:	e9 c7 ac fe ff       	jmp    c000b384 <VCache::invalidateReadBuffer()>
c00206bd:	90                   	nop

c00206be <ATAPI::eject()>:
c00206be:	57                   	push   edi
c00206bf:	b9 03 00 00 00       	mov    ecx,0x3
c00206c4:	53                   	push   ebx
c00206c5:	83 ec 14             	sub    esp,0x14
c00206c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00206cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00206d0:	fc                   	cld    
c00206d1:	31 c0                	xor    eax,eax
c00206d3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206d5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00206da:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00206df:	50                   	push   eax
c00206e0:	50                   	push   eax
c00206e1:	6a 00                	push   0x0
c00206e3:	6a 00                	push   0x0
c00206e5:	6a 00                	push   0x0
c00206e7:	6a 02                	push   0x2
c00206e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00206ed:	50                   	push   eax
c00206ee:	53                   	push   ebx
c00206ef:	e8 d0 fc ff ff       	call   c00203c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00206f4:	83 c4 14             	add    esp,0x14
c00206f7:	53                   	push   ebx
c00206f8:	e8 87 ff ff ff       	call   c0020684 <ATAPI::diskRemoved()>
c00206fd:	83 c4 24             	add    esp,0x24
c0020700:	31 c0                	xor    eax,eax
c0020702:	5b                   	pop    ebx
c0020703:	5f                   	pop    edi
c0020704:	c3                   	ret    
c0020705:	90                   	nop

c0020706 <ATAPI::diskInserted()>:
c0020706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002070a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020711:	c3                   	ret    

c0020712 <ATAPI::detectMedia()>:
c0020712:	56                   	push   esi
c0020713:	53                   	push   ebx
c0020714:	83 ec 28             	sub    esp,0x28
c0020717:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002071b:	6a 0c                	push   0xc
c002071d:	6a 00                	push   0x0
c002071f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020723:	56                   	push   esi
c0020724:	e8 c7 fd fd ff       	call   c00004f0 <memset>
c0020729:	58                   	pop    eax
c002072a:	5a                   	pop    edx
c002072b:	6a 00                	push   0x0
c002072d:	6a 00                	push   0x0
c002072f:	6a 00                	push   0x0
c0020731:	6a 00                	push   0x0
c0020733:	56                   	push   esi
c0020734:	53                   	push   ebx
c0020735:	e8 8a fc ff ff       	call   c00203c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002073a:	83 c4 1c             	add    esp,0x1c
c002073d:	6a 0c                	push   0xc
c002073f:	6a 00                	push   0x0
c0020741:	56                   	push   esi
c0020742:	e8 a9 fd fd ff       	call   c00004f0 <memset>
c0020747:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002074c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020751:	59                   	pop    ecx
c0020752:	58                   	pop    eax
c0020753:	6a 01                	push   0x1
c0020755:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020759:	50                   	push   eax
c002075a:	6a 00                	push   0x0
c002075c:	6a 12                	push   0x12
c002075e:	56                   	push   esi
c002075f:	53                   	push   ebx
c0020760:	e8 5f fc ff ff       	call   c00203c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020765:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020769:	83 c4 20             	add    esp,0x20
c002076c:	83 e0 7f             	and    eax,0x7f
c002076f:	83 f8 70             	cmp    eax,0x70
c0020772:	74 15                	je     c0020789 <ATAPI::detectMedia()+0x77>
c0020774:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002077b:	75 0c                	jne    c0020789 <ATAPI::detectMedia()+0x77>
c002077d:	83 ec 0c             	sub    esp,0xc
c0020780:	53                   	push   ebx
c0020781:	e8 80 ff ff ff       	call   c0020706 <ATAPI::diskInserted()>
c0020786:	83 c4 10             	add    esp,0x10
c0020789:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002078d:	83 e0 0f             	and    eax,0xf
c0020790:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020795:	0f b6 c0             	movzx  eax,al
c0020798:	75 19                	jne    c00207b3 <ATAPI::detectMedia()+0xa1>
c002079a:	83 f8 02             	cmp    eax,0x2
c002079d:	75 14                	jne    c00207b3 <ATAPI::detectMedia()+0xa1>
c002079f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00207a6:	74 24                	je     c00207cc <ATAPI::detectMedia()+0xba>
c00207a8:	83 ec 0c             	sub    esp,0xc
c00207ab:	53                   	push   ebx
c00207ac:	e8 d3 fe ff ff       	call   c0020684 <ATAPI::diskRemoved()>
c00207b1:	eb 16                	jmp    c00207c9 <ATAPI::detectMedia()+0xb7>
c00207b3:	85 c0                	test   eax,eax
c00207b5:	75 15                	jne    c00207cc <ATAPI::detectMedia()+0xba>
c00207b7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00207be:	75 0c                	jne    c00207cc <ATAPI::detectMedia()+0xba>
c00207c0:	83 ec 0c             	sub    esp,0xc
c00207c3:	53                   	push   ebx
c00207c4:	e8 3d ff ff ff       	call   c0020706 <ATAPI::diskInserted()>
c00207c9:	83 c4 10             	add    esp,0x10
c00207cc:	83 c4 24             	add    esp,0x24
c00207cf:	5b                   	pop    ebx
c00207d0:	5e                   	pop    esi
c00207d1:	c3                   	ret    

c00207d2 <ATAPI::open(int, int, void*)>:
c00207d2:	56                   	push   esi
c00207d3:	53                   	push   ebx
c00207d4:	50                   	push   eax
c00207d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00207d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00207dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00207e1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00207e7:	c1 e0 06             	shl    eax,0x6
c00207ea:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00207f0:	01 d0                	add    eax,edx
c00207f2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00207f9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00207ff:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0020806:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020810:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020817:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002081d:	6a 04                	push   0x4
c002081f:	6a 0c                	push   0xc
c0020821:	51                   	push   ecx
c0020822:	52                   	push   edx
c0020823:	e8 fc e1 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020828:	90                   	nop
c0020829:	90                   	nop
c002082a:	6a 00                	push   0x0
c002082c:	6a 0c                	push   0xc
c002082e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020835:	50                   	push   eax
c0020836:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002083c:	e8 e3 e1 ff ff       	call   c001ea24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020841:	83 c4 14             	add    esp,0x14
c0020844:	68 78 01 00 00       	push   0x178
c0020849:	e8 32 ee fe ff       	call   c000f680 <malloc>
c002084e:	83 c4 0c             	add    esp,0xc
c0020851:	6a 00                	push   0x0
c0020853:	68 ff ff ff 7f       	push   0x7fffffff
c0020858:	6a 00                	push   0x0
c002085a:	6a 00                	push   0x0
c002085c:	53                   	push   ebx
c002085d:	68 13 9c 02 c0       	push   0xc0029c13
c0020862:	89 c6                	mov    esi,eax
c0020864:	50                   	push   eax
c0020865:	e8 70 9f fe ff       	call   c000a7da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002086a:	83 c4 14             	add    esp,0x14
c002086d:	56                   	push   esi
c002086e:	e8 27 a0 fe ff       	call   c000a89a <LogicalDisk::assignDriveLetter()>
c0020873:	5a                   	pop    edx
c0020874:	59                   	pop    ecx
c0020875:	0f be c0             	movsx  eax,al
c0020878:	50                   	push   eax
c0020879:	68 58 9a 02 c0       	push   0xc0029a58
c002087e:	e8 e3 66 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020883:	58                   	pop    eax
c0020884:	5a                   	pop    edx
c0020885:	56                   	push   esi
c0020886:	53                   	push   ebx
c0020887:	e8 6a 91 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c002088c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020892:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020895:	e8 a8 95 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c002089a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00208a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00208a4:	e8 69 fe ff ff       	call   c0020712 <ATAPI::detectMedia()>
c00208a9:	83 c4 14             	add    esp,0x14
c00208ac:	31 c0                	xor    eax,eax
c00208ae:	5b                   	pop    ebx
c00208af:	5e                   	pop    esi
c00208b0:	c3                   	ret    
c00208b1:	90                   	nop

c00208b2 <ATAPI::read(unsigned long long, int, void*)>:
c00208b2:	55                   	push   ebp
c00208b3:	57                   	push   edi
c00208b4:	56                   	push   esi
c00208b5:	53                   	push   ebx
c00208b6:	83 ec 1c             	sub    esp,0x1c
c00208b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00208bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00208c1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00208c5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00208cc:	74 3c                	je     c002090a <ATAPI::read(unsigned long long, int, void*)+0x58>
c00208ce:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00208d2:	b9 03 00 00 00       	mov    ecx,0x3
c00208d7:	fc                   	cld    
c00208d8:	31 c0                	xor    eax,eax
c00208da:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00208dc:	89 e8                	mov    eax,ebp
c00208de:	0f ce                	bswap  esi
c00208e0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00208e4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00208e9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c00208ed:	50                   	push   eax
c00208ee:	50                   	push   eax
c00208ef:	55                   	push   ebp
c00208f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00208f4:	c1 e5 0b             	shl    ebp,0xb
c00208f7:	6a 00                	push   0x0
c00208f9:	55                   	push   ebp
c00208fa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00208fe:	50                   	push   eax
c00208ff:	53                   	push   ebx
c0020900:	e8 bf fa ff ff       	call   c00203c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020905:	83 c4 20             	add    esp,0x20
c0020908:	eb 1a                	jmp    c0020924 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002090a:	83 ec 0c             	sub    esp,0xc
c002090d:	53                   	push   ebx
c002090e:	e8 ff fd ff ff       	call   c0020712 <ATAPI::detectMedia()>
c0020913:	83 c4 10             	add    esp,0x10
c0020916:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002091d:	75 af                	jne    c00208ce <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002091f:	b8 02 00 00 00       	mov    eax,0x2
c0020924:	83 c4 1c             	add    esp,0x1c
c0020927:	5b                   	pop    ebx
c0020928:	5e                   	pop    esi
c0020929:	5f                   	pop    edi
c002092a:	5d                   	pop    ebp
c002092b:	c3                   	ret    

c002092c <SATA::close(int, int, void*)>:
c002092c:	83 ec 0c             	sub    esp,0xc
c002092f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020933:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020939:	85 c0                	test   eax,eax
c002093b:	74 0c                	je     c0020949 <SATA::close(int, int, void*)+0x1d>
c002093d:	8b 10                	mov    edx,DWORD PTR [eax]
c002093f:	83 ec 0c             	sub    esp,0xc
c0020942:	50                   	push   eax
c0020943:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020946:	83 c4 10             	add    esp,0x10
c0020949:	31 c0                	xor    eax,eax
c002094b:	83 c4 0c             	add    esp,0xc
c002094e:	c3                   	ret    
c002094f:	90                   	nop

c0020950 <SATA::powerSaving(PowerSavingLevel)>:
c0020950:	c3                   	ret    
c0020951:	90                   	nop

c0020952 <SATA::open(int, int, void*)>:
c0020952:	56                   	push   esi
c0020953:	53                   	push   ebx
c0020954:	83 ec 10             	sub    esp,0x10
c0020957:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002095b:	68 a0 9a 02 c0       	push   0xc0029aa0
c0020960:	e8 01 66 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020965:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020969:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020973:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002097d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020983:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020987:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020991:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020998:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002099e:	e8 2b f3 fe ff       	call   c000fcce <Phys::allocatePage()>
c00209a3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00209a9:	89 c6                	mov    esi,eax
c00209ab:	e8 1e f3 fe ff       	call   c000fcce <Phys::allocatePage()>
c00209b0:	81 c6 00 10 00 00    	add    esi,0x1000
c00209b6:	83 c4 10             	add    esp,0x10
c00209b9:	39 c6                	cmp    esi,eax
c00209bb:	74 10                	je     c00209cd <SATA::open(int, int, void*)+0x7b>
c00209bd:	83 ec 0c             	sub    esp,0xc
c00209c0:	68 ac 9a 02 c0       	push   0xc0029aac
c00209c5:	e8 0a f1 fe ff       	call   c000fad4 <KePanic(char const*)>
c00209ca:	83 c4 10             	add    esp,0x10
c00209cd:	83 ec 0c             	sub    esp,0xc
c00209d0:	6a 02                	push   0x2
c00209d2:	e8 44 26 ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c00209d7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00209dd:	6a 03                	push   0x3
c00209df:	50                   	push   eax
c00209e0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00209e6:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c00209ec:	e8 03 2d ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00209f1:	83 c4 14             	add    esp,0x14
c00209f4:	53                   	push   ebx
c00209f5:	e8 48 94 fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c00209fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00209fd:	e8 ac a2 fe ff       	call   c000acae <createPartitionsForDisk(PhysicalDisk*)>
c0020a02:	83 c4 14             	add    esp,0x14
c0020a05:	31 c0                	xor    eax,eax
c0020a07:	5b                   	pop    ebx
c0020a08:	5e                   	pop    esi
c0020a09:	c3                   	ret    

c0020a0a <SATA::SATA()>:
c0020a0a:	83 ec 0c             	sub    esp,0xc
c0020a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a11:	83 ec 04             	sub    esp,0x4
c0020a14:	68 00 02 00 00       	push   0x200
c0020a19:	68 c0 9a 02 c0       	push   0xc0029ac0
c0020a1e:	50                   	push   eax
c0020a1f:	e8 b6 93 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020a24:	83 c4 10             	add    esp,0x10
c0020a27:	ba 30 9b 02 c0       	mov    edx,0xc0029b30
c0020a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a30:	89 10                	mov    DWORD PTR [eax],edx
c0020a32:	90                   	nop
c0020a33:	83 c4 0c             	add    esp,0xc
c0020a36:	c3                   	ret    
c0020a37:	90                   	nop

c0020a38 <SATA::access(unsigned long long, int, void*, bool)>:
c0020a38:	55                   	push   ebp
c0020a39:	57                   	push   edi
c0020a3a:	56                   	push   esi
c0020a3b:	53                   	push   ebx
c0020a3c:	83 ec 2c             	sub    esp,0x2c
c0020a3f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020a43:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020a47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020a4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020a4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020a53:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020a57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a5b:	fa                   	cli    
c0020a5c:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0020a62:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020a67:	7e 10                	jle    c0020a79 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c0020a69:	83 ec 0c             	sub    esp,0xc
c0020a6c:	68 d0 9a 02 c0       	push   0xc0029ad0
c0020a71:	e8 5e f0 fe ff       	call   c000fad4 <KePanic(char const*)>
c0020a76:	83 c4 10             	add    esp,0x10
c0020a79:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020a7f:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020a85:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020a8b:	89 e8                	mov    eax,ebp
c0020a8d:	c1 e0 07             	shl    eax,0x7
c0020a90:	01 d0                	add    eax,edx
c0020a92:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020a9c:	8d 45 02             	lea    eax,[ebp+0x2]
c0020a9f:	51                   	push   ecx
c0020aa0:	c1 e0 07             	shl    eax,0x7
c0020aa3:	51                   	push   ecx
c0020aa4:	01 d0                	add    eax,edx
c0020aa6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0020aaa:	50                   	push   eax
c0020aab:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020ab1:	e8 ee ed ff ff       	call   c001f8a4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020ab6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020aba:	83 c4 10             	add    esp,0x10
c0020abd:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0020ac2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020ac6:	0f 84 a6 01 00 00    	je     c0020c72 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c0020acc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020ad0:	c1 e0 09             	shl    eax,0x9
c0020ad3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ad8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020adc:	74 0e                	je     c0020aec <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c0020ade:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020ae4:	89 c1                	mov    ecx,eax
c0020ae6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020aea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020aec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020af0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020af6:	8d 45 02             	lea    eax,[ebp+0x2]
c0020af9:	c1 e0 07             	shl    eax,0x7
c0020afc:	01 d0                	add    eax,edx
c0020afe:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b00:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020b06:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020b0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020b10:	c1 e1 05             	shl    ecx,0x5
c0020b13:	01 c8                	add    eax,ecx
c0020b15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020b19:	83 e1 01             	and    ecx,0x1
c0020b1c:	89 ce                	mov    esi,ecx
c0020b1e:	8a 08                	mov    cl,BYTE PTR [eax]
c0020b20:	c1 e6 06             	shl    esi,0x6
c0020b23:	83 e1 bf             	and    ecx,0xffffffbf
c0020b26:	09 f1                	or     ecx,esi
c0020b28:	88 08                	mov    BYTE PTR [eax],cl
c0020b2a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020b2c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020b32:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020b38:	89 08                	mov    DWORD PTR [eax],ecx
c0020b3a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020b40:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020b46:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0020b4c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0020b4f:	50                   	push   eax
c0020b50:	68 90 00 00 00       	push   0x90
c0020b55:	6a 00                	push   0x0
c0020b57:	56                   	push   esi
c0020b58:	e8 93 f9 fd ff       	call   c00004f0 <memset>
c0020b5d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020b63:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b6d:	83 c4 10             	add    esp,0x10
c0020b70:	48                   	dec    eax
c0020b71:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020b76:	89 c1                	mov    ecx,eax
c0020b78:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020b7e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020b83:	09 c8                	or     eax,ecx
c0020b85:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020b8b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020b91:	83 c8 80             	or     eax,0xffffff80
c0020b94:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c0020b9a:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020b9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ba1:	25 00 7f 00 00       	and    eax,0x7f00
c0020ba6:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020bab:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020bb0:	66 89 06             	mov    WORD PTR [esi],ax
c0020bb3:	b0 35                	mov    al,0x35
c0020bb5:	75 02                	jne    c0020bb9 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c0020bb7:	b0 25                	mov    al,0x25
c0020bb9:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020bbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bc0:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020bc4:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020bc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bcc:	c1 e8 10             	shr    eax,0x10
c0020bcf:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020bd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bd6:	c1 e8 18             	shr    eax,0x18
c0020bd9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020bdc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020be0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020be3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020be7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020bea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020bee:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020bf2:	89 ee                	mov    esi,ebp
c0020bf4:	31 c0                	xor    eax,eax
c0020bf6:	c1 e6 07             	shl    esi,0x7
c0020bf9:	01 d6                	add    esi,edx
c0020bfb:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0020c01:	80 e1 88             	and    cl,0x88
c0020c04:	74 0a                	je     c0020c10 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c0020c06:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020c0b:	74 0a                	je     c0020c17 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0020c0d:	40                   	inc    eax
c0020c0e:	eb eb                	jmp    c0020bfb <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c0020c10:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020c15:	75 0a                	jne    c0020c21 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020c17:	83 ec 0c             	sub    esp,0xc
c0020c1a:	68 09 9b 02 c0       	push   0xc0029b09
c0020c1f:	eb 34                	jmp    c0020c55 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020c21:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0020c25:	c1 e5 07             	shl    ebp,0x7
c0020c28:	b8 01 00 00 00       	mov    eax,0x1
c0020c2d:	01 ea                	add    edx,ebp
c0020c2f:	d3 e0                	shl    eax,cl
c0020c31:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020c37:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020c3d:	85 c8                	test   eax,ecx
c0020c3f:	74 25                	je     c0020c66 <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c0020c41:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020c47:	0f ba e1 1e          	bt     ecx,0x1e
c0020c4b:	73 ea                	jae    c0020c37 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c0020c4d:	83 ec 0c             	sub    esp,0xc
c0020c50:	68 17 9b 02 c0       	push   0xc0029b17
c0020c55:	e8 0c 63 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020c5a:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0020c61:	83 c4 10             	add    esp,0x10
c0020c64:	eb 13                	jmp    c0020c79 <SATA::access(unsigned long long, int, void*, bool)+0x241>
c0020c66:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020c6c:	0f ba e0 1e          	bt     eax,0x1e
c0020c70:	73 18                	jae    c0020c8a <SATA::access(unsigned long long, int, void*, bool)+0x252>
c0020c72:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0020c79:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0020c80:	75 01                	jne    c0020c83 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c0020c82:	fb                   	sti    
c0020c83:	b8 01 00 00 00       	mov    eax,0x1
c0020c88:	eb 2c                	jmp    c0020cb6 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020c8a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020c8f:	75 10                	jne    c0020ca1 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c0020c91:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020c97:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ca1:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0020ca8:	a1 30 13 03 c0       	mov    eax,ds:0xc0031330
c0020cad:	85 c0                	test   eax,eax
c0020caf:	75 03                	jne    c0020cb4 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020cb1:	fb                   	sti    
c0020cb2:	eb 02                	jmp    c0020cb6 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c0020cb4:	31 c0                	xor    eax,eax
c0020cb6:	83 c4 2c             	add    esp,0x2c
c0020cb9:	5b                   	pop    ebx
c0020cba:	5e                   	pop    esi
c0020cbb:	5f                   	pop    edi
c0020cbc:	5d                   	pop    ebp
c0020cbd:	c3                   	ret    

c0020cbe <SATA::read(unsigned long long, int, void*)>:
c0020cbe:	57                   	push   edi
c0020cbf:	b8 04 00 00 00       	mov    eax,0x4
c0020cc4:	56                   	push   esi
c0020cc5:	53                   	push   ebx
c0020cc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020cca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020cce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020cd2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020cd6:	8d 7a ff             	lea    edi,[edx-0x1]
c0020cd9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020cdf:	77 25                	ja     c0020d06 <SATA::read(unsigned long long, int, void*)+0x48>
c0020ce1:	85 f6                	test   esi,esi
c0020ce3:	b8 06 00 00 00       	mov    eax,0x6
c0020ce8:	74 1c                	je     c0020d06 <SATA::read(unsigned long long, int, void*)+0x48>
c0020cea:	50                   	push   eax
c0020ceb:	50                   	push   eax
c0020cec:	6a 00                	push   0x0
c0020cee:	56                   	push   esi
c0020cef:	52                   	push   edx
c0020cf0:	53                   	push   ebx
c0020cf1:	51                   	push   ecx
c0020cf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cf6:	e8 3d fd ff ff       	call   c0020a38 <SATA::access(unsigned long long, int, void*, bool)>
c0020cfb:	83 c4 20             	add    esp,0x20
c0020cfe:	85 c0                	test   eax,eax
c0020d00:	0f 95 c0             	setne  al
c0020d03:	0f b6 c0             	movzx  eax,al
c0020d06:	5b                   	pop    ebx
c0020d07:	5e                   	pop    esi
c0020d08:	5f                   	pop    edi
c0020d09:	c3                   	ret    

c0020d0a <SATA::write(unsigned long long, int, void*)>:
c0020d0a:	55                   	push   ebp
c0020d0b:	b8 04 00 00 00       	mov    eax,0x4
c0020d10:	57                   	push   edi
c0020d11:	56                   	push   esi
c0020d12:	53                   	push   ebx
c0020d13:	83 ec 0c             	sub    esp,0xc
c0020d16:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020d1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020d1e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020d22:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020d26:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020d29:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020d2f:	77 3d                	ja     c0020d6e <SATA::write(unsigned long long, int, void*)+0x64>
c0020d31:	85 ed                	test   ebp,ebp
c0020d33:	b8 06 00 00 00       	mov    eax,0x6
c0020d38:	74 34                	je     c0020d6e <SATA::write(unsigned long long, int, void*)+0x64>
c0020d3a:	c1 e3 09             	shl    ebx,0x9
c0020d3d:	01 eb                	add    ebx,ebp
c0020d3f:	50                   	push   eax
c0020d40:	89 d6                	mov    esi,edx
c0020d42:	50                   	push   eax
c0020d43:	83 c6 01             	add    esi,0x1
c0020d46:	6a 01                	push   0x1
c0020d48:	89 cf                	mov    edi,ecx
c0020d4a:	55                   	push   ebp
c0020d4b:	83 d7 00             	adc    edi,0x0
c0020d4e:	6a 01                	push   0x1
c0020d50:	81 c5 00 02 00 00    	add    ebp,0x200
c0020d56:	51                   	push   ecx
c0020d57:	52                   	push   edx
c0020d58:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020d5c:	e8 d7 fc ff ff       	call   c0020a38 <SATA::access(unsigned long long, int, void*, bool)>
c0020d61:	83 c4 20             	add    esp,0x20
c0020d64:	39 dd                	cmp    ebp,ebx
c0020d66:	89 f2                	mov    edx,esi
c0020d68:	89 f9                	mov    ecx,edi
c0020d6a:	75 d3                	jne    c0020d3f <SATA::write(unsigned long long, int, void*)+0x35>
c0020d6c:	31 c0                	xor    eax,eax
c0020d6e:	83 c4 0c             	add    esp,0xc
c0020d71:	5b                   	pop    ebx
c0020d72:	5e                   	pop    esi
c0020d73:	5f                   	pop    edi
c0020d74:	5d                   	pop    ebp
c0020d75:	c3                   	ret    

c0020d76 <SATAPI::write(unsigned long long, int, void*)>:
c0020d76:	b8 03 00 00 00       	mov    eax,0x3
c0020d7b:	c3                   	ret    

c0020d7c <SATAPI::close(int, int, void*)>:
c0020d7c:	83 ec 0c             	sub    esp,0xc
c0020d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d83:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020d89:	85 c0                	test   eax,eax
c0020d8b:	74 0c                	je     c0020d99 <SATAPI::close(int, int, void*)+0x1d>
c0020d8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0020d8f:	83 ec 0c             	sub    esp,0xc
c0020d92:	50                   	push   eax
c0020d93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020d96:	83 c4 10             	add    esp,0x10
c0020d99:	31 c0                	xor    eax,eax
c0020d9b:	83 c4 0c             	add    esp,0xc
c0020d9e:	c3                   	ret    
c0020d9f:	90                   	nop

c0020da0 <SATAPI::SATAPI()>:
c0020da0:	83 ec 0c             	sub    esp,0xc
c0020da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020da7:	83 ec 04             	sub    esp,0x4
c0020daa:	68 00 08 00 00       	push   0x800
c0020daf:	68 60 9b 02 c0       	push   0xc0029b60
c0020db4:	50                   	push   eax
c0020db5:	e8 20 90 fe ff       	call   c0009dda <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020dba:	83 c4 10             	add    esp,0x10
c0020dbd:	ba 54 9c 02 c0       	mov    edx,0xc0029c54
c0020dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dc6:	89 10                	mov    DWORD PTR [eax],edx
c0020dc8:	90                   	nop
c0020dc9:	83 c4 0c             	add    esp,0xc
c0020dcc:	c3                   	ret    
c0020dcd:	90                   	nop

c0020dce <SATAPI::diskRemoved()>:
c0020dce:	c3                   	ret    
c0020dcf:	90                   	nop

c0020dd0 <SATAPI::diskInserted()>:
c0020dd0:	83 ec 18             	sub    esp,0x18
c0020dd3:	68 6c 9b 02 c0       	push   0xc0029b6c
c0020dd8:	e8 89 61 fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020de1:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020de8:	83 c4 1c             	add    esp,0x1c
c0020deb:	c3                   	ret    

c0020dec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020dec:	55                   	push   ebp
c0020ded:	57                   	push   edi
c0020dee:	56                   	push   esi
c0020def:	53                   	push   ebx
c0020df0:	83 ec 34             	sub    esp,0x34
c0020df3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020df7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0020dfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020dff:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020e03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020e07:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020e0d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020e13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020e17:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020e1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020e21:	83 c0 02             	add    eax,0x2
c0020e24:	c1 e0 07             	shl    eax,0x7
c0020e27:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020e33:	c1 e0 07             	shl    eax,0x7
c0020e36:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020e3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e3e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020e48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020e4c:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020e52:	e8 4d ea ff ff       	call   c001f8a4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020e57:	83 c4 10             	add    esp,0x10
c0020e5a:	89 c2                	mov    edx,eax
c0020e5c:	b8 01 00 00 00       	mov    eax,0x1
c0020e61:	83 fa ff             	cmp    edx,0xffffffff
c0020e64:	0f 84 63 02 00 00    	je     c00210cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0020e6a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020e6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020e72:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020e78:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e7a:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020e80:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020e86:	89 d1                	mov    ecx,edx
c0020e88:	c1 e1 05             	shl    ecx,0x5
c0020e8b:	01 c8                	add    eax,ecx
c0020e8d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020e8f:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020e95:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020e9b:	89 08                	mov    DWORD PTR [eax],ecx
c0020e9d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020ea3:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020ea9:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020eaf:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020eb2:	50                   	push   eax
c0020eb3:	68 90 00 00 00       	push   0x90
c0020eb8:	6a 00                	push   0x0
c0020eba:	53                   	push   ebx
c0020ebb:	e8 30 f6 fd ff       	call   c00004f0 <memset>
c0020ec0:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020ec3:	b9 0c 00 00 00       	mov    ecx,0xc
c0020ec8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020ecc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ece:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020ed4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020ed8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020edc:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020ee2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020ee6:	48                   	dec    eax
c0020ee7:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020eec:	89 c1                	mov    ecx,eax
c0020eee:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020ef4:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020ef9:	09 c8                	or     eax,ecx
c0020efb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020f01:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c0020f07:	83 c8 80             	or     eax,0xffffff80
c0020f0a:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c0020f10:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020f13:	25 00 7f 00 00       	and    eax,0x7f00
c0020f18:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020f1d:	66 89 03             	mov    WORD PTR [ebx],ax
c0020f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f24:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0020f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f2c:	c1 e8 10             	shr    eax,0x10
c0020f2f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f36:	c1 e8 18             	shr    eax,0x18
c0020f39:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0020f3c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020f40:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f47:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020f4a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f4e:	83 c4 10             	add    esp,0x10
c0020f51:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f55:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020f59:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0020f5d:	31 c0                	xor    eax,eax
c0020f5f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0020f65:	80 e1 88             	and    cl,0x88
c0020f68:	74 0a                	je     c0020f74 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020f6a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020f6f:	74 0a                	je     c0020f7b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c0020f71:	40                   	inc    eax
c0020f72:	eb eb                	jmp    c0020f5f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c0020f74:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020f79:	75 43                	jne    c0020fbe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c0020f7b:	83 ec 0c             	sub    esp,0xc
c0020f7e:	68 84 9b 02 c0       	push   0xc0029b84
c0020f83:	e8 de 5f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0020f88:	58                   	pop    eax
c0020f89:	5a                   	pop    edx
c0020f8a:	68 99 9b 02 c0       	push   0xc0029b99
c0020f8f:	ff 35 f4 11 03 c0    	push   DWORD PTR ds:0xc00311f4
c0020f95:	e8 76 14 ff ff       	call   c0012410 <VgaText::puts(char const*)>
c0020f9a:	59                   	pop    ecx
c0020f9b:	5b                   	pop    ebx
c0020f9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020fa0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020fa6:	e8 93 e9 ff ff       	call   c001f93e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020fab:	5e                   	pop    esi
c0020fac:	5f                   	pop    edi
c0020fad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020fb1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020fb7:	e8 62 e9 ff ff       	call   c001f91e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020fbc:	eb 48                	jmp    c0021006 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c0020fbe:	b8 01 00 00 00       	mov    eax,0x1
c0020fc3:	88 d1                	mov    cl,dl
c0020fc5:	d3 e0                	shl    eax,cl
c0020fc7:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c0020fcc:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0020fd2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020fd6:	89 c7                	mov    edi,eax
c0020fd8:	c1 e3 07             	shl    ebx,0x7
c0020fdb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0020fdf:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0020fe5:	85 c7                	test   edi,eax
c0020fe7:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0020fed:	0f 84 a7 00 00 00    	je     c002109a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ae>
c0020ff3:	0f ba e0 1e          	bt     eax,0x1e
c0020ff7:	73 1a                	jae    c0021013 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c0020ff9:	83 ec 0c             	sub    esp,0xc
c0020ffc:	68 ab 9b 02 c0       	push   0xc0029bab
c0021001:	e8 60 5f fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c0021006:	83 c4 10             	add    esp,0x10
c0021009:	b8 01 00 00 00       	mov    eax,0x1
c002100e:	e9 ba 00 00 00       	jmp    c00210cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2e1>
c0021013:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c0021019:	83 f8 0d             	cmp    eax,0xd
c002101c:	77 0b                	ja     c0021029 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23d>
c002101e:	50                   	push   eax
c002101f:	50                   	push   eax
c0021020:	6a 00                	push   0x0
c0021022:	68 c8 00 00 00       	push   0xc8
c0021027:	eb 2a                	jmp    c0021053 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c0021029:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002102f:	83 f8 0d             	cmp    eax,0xd
c0021032:	77 0b                	ja     c002103f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0021034:	51                   	push   ecx
c0021035:	51                   	push   ecx
c0021036:	6a 00                	push   0x0
c0021038:	68 58 02 00 00       	push   0x258
c002103d:	eb 14                	jmp    c0021053 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c002103f:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c0021045:	83 f8 06             	cmp    eax,0x6
c0021048:	77 11                	ja     c002105b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26f>
c002104a:	52                   	push   edx
c002104b:	52                   	push   edx
c002104c:	6a 00                	push   0x0
c002104e:	68 dc 05 00 00       	push   0x5dc
c0021053:	e8 e8 57 ff ff       	call   c0016840 <milliTenthSleep(unsigned long long)>
c0021058:	83 c4 10             	add    esp,0x10
c002105b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002105f:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0021062:	75 06                	jne    c002106a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c0021064:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c0021068:	74 16                	je     c0021080 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c002106a:	83 fe 06             	cmp    esi,0x6
c002106d:	77 11                	ja     c0021080 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c002106f:	50                   	push   eax
c0021070:	50                   	push   eax
c0021071:	6a 00                	push   0x0
c0021073:	68 c4 09 00 00       	push   0x9c4
c0021078:	e8 c3 57 ff ff       	call   c0016840 <milliTenthSleep(unsigned long long)>
c002107d:	83 c4 10             	add    esp,0x10
c0021080:	46                   	inc    esi
c0021081:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c0021087:	0f 85 52 ff ff ff    	jne    c0020fdf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002108d:	83 ec 0c             	sub    esp,0xc
c0021090:	68 be 9b 02 c0       	push   0xc0029bbe
c0021095:	e9 67 ff ff ff       	jmp    c0021001 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002109a:	0f ba e0 1e          	bt     eax,0x1e
c002109e:	73 0d                	jae    c00210ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c1>
c00210a0:	83 ec 0c             	sub    esp,0xc
c00210a3:	68 d2 9b 02 c0       	push   0xc0029bd2
c00210a8:	e9 54 ff ff ff       	jmp    c0021001 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c00210ad:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00210b2:	74 17                	je     c00210cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00210b4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00210b9:	74 10                	je     c00210cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2df>
c00210bb:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00210c1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00210c5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00210c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00210cb:	31 c0                	xor    eax,eax
c00210cd:	83 c4 2c             	add    esp,0x2c
c00210d0:	5b                   	pop    ebx
c00210d1:	5e                   	pop    esi
c00210d2:	5f                   	pop    edi
c00210d3:	5d                   	pop    ebp
c00210d4:	c3                   	ret    
c00210d5:	90                   	nop

c00210d6 <SATAPI::eject()>:
c00210d6:	57                   	push   edi
c00210d7:	b9 03 00 00 00       	mov    ecx,0x3
c00210dc:	83 ec 18             	sub    esp,0x18
c00210df:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00210e3:	fc                   	cld    
c00210e4:	31 c0                	xor    eax,eax
c00210e6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00210e8:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00210ed:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00210f2:	50                   	push   eax
c00210f3:	6a 00                	push   0x0
c00210f5:	6a 00                	push   0x0
c00210f7:	6a 00                	push   0x0
c00210f9:	6a 00                	push   0x0
c00210fb:	6a 02                	push   0x2
c00210fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021101:	50                   	push   eax
c0021102:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021106:	e8 e1 fc ff ff       	call   c0020dec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002110b:	83 c4 38             	add    esp,0x38
c002110e:	31 c0                	xor    eax,eax
c0021110:	5f                   	pop    edi
c0021111:	c3                   	ret    

c0021112 <SATAPI::detectMedia()>:
c0021112:	53                   	push   ebx
c0021113:	83 ec 14             	sub    esp,0x14
c0021116:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002111a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0021120:	e8 6f a2 fe ff       	call   c000b394 <VCache::writeWriteBuffer()>
c0021125:	59                   	pop    ecx
c0021126:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002112c:	e8 53 a2 fe ff       	call   c000b384 <VCache::invalidateReadBuffer()>
c0021131:	c7 04 24 e7 9b 02 c0 	mov    DWORD PTR [esp],0xc0029be7
c0021138:	e8 29 5e fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002113d:	83 c4 10             	add    esp,0x10
c0021140:	31 c0                	xor    eax,eax
c0021142:	8b 14 85 e0 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf520]
c0021149:	85 d2                	test   edx,edx
c002114b:	74 0f                	je     c002115c <SATAPI::detectMedia()+0x4a>
c002114d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0021153:	75 07                	jne    c002115c <SATAPI::detectMedia()+0x4a>
c0021155:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002115c:	40                   	inc    eax
c002115d:	83 f8 1a             	cmp    eax,0x1a
c0021160:	75 e0                	jne    c0021142 <SATAPI::detectMedia()+0x30>
c0021162:	83 c4 08             	add    esp,0x8
c0021165:	5b                   	pop    ebx
c0021166:	c3                   	ret    
c0021167:	90                   	nop

c0021168 <SATAPI::open(int, int, void*)>:
c0021168:	56                   	push   esi
c0021169:	53                   	push   ebx
c002116a:	51                   	push   ecx
c002116b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002116f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021173:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002117d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021183:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021187:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021191:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002119b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00211a2:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00211a8:	e8 21 eb fe ff       	call   c000fcce <Phys::allocatePage()>
c00211ad:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00211b3:	89 c6                	mov    esi,eax
c00211b5:	e8 14 eb fe ff       	call   c000fcce <Phys::allocatePage()>
c00211ba:	81 c6 00 10 00 00    	add    esi,0x1000
c00211c0:	39 c6                	cmp    esi,eax
c00211c2:	74 10                	je     c00211d4 <SATAPI::open(int, int, void*)+0x6c>
c00211c4:	83 ec 0c             	sub    esp,0xc
c00211c7:	68 fc 9b 02 c0       	push   0xc0029bfc
c00211cc:	e8 03 e9 fe ff       	call   c000fad4 <KePanic(char const*)>
c00211d1:	83 c4 10             	add    esp,0x10
c00211d4:	83 ec 0c             	sub    esp,0xc
c00211d7:	6a 02                	push   0x2
c00211d9:	e8 3d 1e ff ff       	call   c001301b <Virt::allocateKernelVirtualPages(int)>
c00211de:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00211e4:	6a 03                	push   0x3
c00211e6:	50                   	push   eax
c00211e7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00211ed:	ff 35 90 12 03 c0    	push   DWORD PTR ds:0xc0031290
c00211f3:	e8 fc 24 ff ff       	call   c00136f4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00211f8:	83 c4 14             	add    esp,0x14
c00211fb:	68 78 01 00 00       	push   0x178
c0021200:	e8 7b e4 fe ff       	call   c000f680 <malloc>
c0021205:	83 c4 0c             	add    esp,0xc
c0021208:	6a 00                	push   0x0
c002120a:	68 ff ff ff 7f       	push   0x7fffffff
c002120f:	6a 00                	push   0x0
c0021211:	6a 00                	push   0x0
c0021213:	53                   	push   ebx
c0021214:	68 12 9c 02 c0       	push   0xc0029c12
c0021219:	89 c6                	mov    esi,eax
c002121b:	50                   	push   eax
c002121c:	e8 b9 95 fe ff       	call   c000a7da <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021221:	83 c4 14             	add    esp,0x14
c0021224:	56                   	push   esi
c0021225:	e8 70 96 fe ff       	call   c000a89a <LogicalDisk::assignDriveLetter()>
c002122a:	5a                   	pop    edx
c002122b:	59                   	pop    ecx
c002122c:	0f be c0             	movsx  eax,al
c002122f:	50                   	push   eax
c0021230:	68 58 9a 02 c0       	push   0xc0029a58
c0021235:	e8 2c 5d fe ff       	call   c0006f66 <Dbg::kprintf(char const*, ...)>
c002123a:	58                   	pop    eax
c002123b:	5a                   	pop    edx
c002123c:	56                   	push   esi
c002123d:	53                   	push   ebx
c002123e:	e8 b3 87 fe ff       	call   c00099f6 <Device::addChild(Device*)>
c0021243:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021249:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002124c:	e8 f1 8b fe ff       	call   c0009e42 <PhysicalDisk::startCache()>
c0021251:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021258:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002125b:	e8 b2 fe ff ff       	call   c0021112 <SATAPI::detectMedia()>
c0021260:	83 c4 14             	add    esp,0x14
c0021263:	31 c0                	xor    eax,eax
c0021265:	5b                   	pop    ebx
c0021266:	5e                   	pop    esi
c0021267:	c3                   	ret    

c0021268 <SATAPI::read(unsigned long long, int, void*)>:
c0021268:	55                   	push   ebp
c0021269:	57                   	push   edi
c002126a:	56                   	push   esi
c002126b:	53                   	push   ebx
c002126c:	83 ec 3c             	sub    esp,0x3c
c002126f:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0021273:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0021277:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002127b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002127f:	83 fd 04             	cmp    ebp,0x4
c0021282:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002128a:	7e 10                	jle    c002129c <SATAPI::read(unsigned long long, int, void*)+0x34>
c002128c:	83 ec 0c             	sub    esp,0xc
c002128f:	68 20 9c 02 c0       	push   0xc0029c20
c0021294:	e8 3b e8 fe ff       	call   c000fad4 <KePanic(char const*)>
c0021299:	83 c4 10             	add    esp,0x10
c002129c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00212a2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00212a8:	51                   	push   ecx
c00212a9:	50                   	push   eax
c00212aa:	83 c0 02             	add    eax,0x2
c00212ad:	c1 e0 07             	shl    eax,0x7
c00212b0:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c00212b6:	50                   	push   eax
c00212b7:	52                   	push   edx
c00212b8:	e8 ab e6 ff ff       	call   c001f968 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00212bd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00212c1:	b9 03 00 00 00       	mov    ecx,0x3
c00212c6:	fc                   	cld    
c00212c7:	31 c0                	xor    eax,eax
c00212c9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00212cb:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c00212d0:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00212d5:	83 c4 0c             	add    esp,0xc
c00212d8:	6a 00                	push   0x0
c00212da:	6a 00                	push   0x0
c00212dc:	6a 00                	push   0x0
c00212de:	6a 00                	push   0x0
c00212e0:	6a 02                	push   0x2
c00212e2:	8d 44 24 30          	lea    eax,[esp+0x30]
c00212e6:	50                   	push   eax
c00212e7:	53                   	push   ebx
c00212e8:	e8 ff fa ff ff       	call   c0020dec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00212ed:	83 c4 20             	add    esp,0x20
c00212f0:	85 c0                	test   eax,eax
c00212f2:	89 c6                	mov    esi,eax
c00212f4:	75 46                	jne    c002133c <SATAPI::read(unsigned long long, int, void*)+0xd4>
c00212f6:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00212fa:	b9 03 00 00 00       	mov    ecx,0x3
c00212ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021301:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021305:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002130a:	0f c8                	bswap  eax
c002130c:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0021310:	89 e8                	mov    eax,ebp
c0021312:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021316:	50                   	push   eax
c0021317:	55                   	push   ebp
c0021318:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002131c:	c1 e5 0b             	shl    ebp,0xb
c002131f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021323:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021327:	55                   	push   ebp
c0021328:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002132c:	50                   	push   eax
c002132d:	53                   	push   ebx
c002132e:	e8 b9 fa ff ff       	call   c0020dec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021333:	83 c4 20             	add    esp,0x20
c0021336:	85 c0                	test   eax,eax
c0021338:	89 c6                	mov    esi,eax
c002133a:	74 0c                	je     c0021348 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002133c:	83 ec 0c             	sub    esp,0xc
c002133f:	53                   	push   ebx
c0021340:	e8 cd fd ff ff       	call   c0021112 <SATAPI::detectMedia()>
c0021345:	83 c4 10             	add    esp,0x10
c0021348:	83 c4 3c             	add    esp,0x3c
c002134b:	89 f0                	mov    eax,esi
c002134d:	5b                   	pop    ebx
c002134e:	5e                   	pop    esi
c002134f:	5f                   	pop    edi
c0021350:	5d                   	pop    ebp
c0021351:	c3                   	ret    
c0021352:	66 90                	xchg   ax,ax

c0021354 <APICTimer::close(int, int, void*)>:
c0021354:	b8 00 00 00 00       	mov    eax,0x0
c0021359:	c3                   	ret    
c002135a:	66 90                	xchg   ax,ax

c002135c <apicTimerHandler(regs*, void*)>:
c002135c:	83 ec 0c             	sub    esp,0xc
c002135f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021363:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021365:	b8 10 27 00 00       	mov    eax,0x2710
c002136a:	ba 00 00 00 00       	mov    edx,0x0
c002136f:	f7 f1                	div    ecx
c0021371:	83 ec 0c             	sub    esp,0xc
c0021374:	50                   	push   eax
c0021375:	e8 1e 9d fe ff       	call   c000b098 <timerHandler(unsigned int)>
c002137a:	83 c4 10             	add    esp,0x10
c002137d:	90                   	nop
c002137e:	83 c4 0c             	add    esp,0xc
c0021381:	c3                   	ret    
c0021382:	66 90                	xchg   ax,ax

c0021384 <APICTimer::open(int, int, void*)>:
c0021384:	83 ec 0c             	sub    esp,0xc
c0021387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002138b:	8b 00                	mov    eax,DWORD PTR [eax]
c002138d:	83 c0 24             	add    eax,0x24
c0021390:	8b 00                	mov    eax,DWORD PTR [eax]
c0021392:	83 ec 08             	sub    esp,0x8
c0021395:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002139d:	ff d0                	call   eax
c002139f:	83 c4 10             	add    esp,0x10
c00213a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00213aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00213b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00213b8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00213be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00213c2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00213c8:	83 ec 0c             	sub    esp,0xc
c00213cb:	51                   	push   ecx
c00213cc:	6a 01                	push   0x1
c00213ce:	68 5c 13 02 c0       	push   0xc002135c
c00213d3:	52                   	push   edx
c00213d4:	50                   	push   eax
c00213d5:	e8 c8 85 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00213da:	83 c4 20             	add    esp,0x20
c00213dd:	89 c2                	mov    edx,eax
c00213df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00213e9:	b8 00 00 00 00       	mov    eax,0x0
c00213ee:	83 c4 0c             	add    esp,0xc
c00213f1:	c3                   	ret    
c00213f2:	66 90                	xchg   ax,ax

c00213f4 <APICTimer::write(int)>:
c00213f4:	83 ec 0c             	sub    esp,0xc
c00213f7:	83 ec 0c             	sub    esp,0xc
c00213fa:	68 84 9c 02 c0       	push   0xc0029c84
c00213ff:	e8 d0 e6 fe ff       	call   c000fad4 <KePanic(char const*)>
c0021404:	83 c4 10             	add    esp,0x10
c0021407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002140b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002140f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021415:	90                   	nop
c0021416:	83 c4 0c             	add    esp,0xc
c0021419:	c3                   	ret    
c002141a:	66 90                	xchg   ax,ax

c002141c <APICTimer::APICTimer()>:
c002141c:	83 ec 0c             	sub    esp,0xc
c002141f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021423:	83 ec 08             	sub    esp,0x8
c0021426:	68 94 9c 02 c0       	push   0xc0029c94
c002142b:	50                   	push   eax
c002142c:	e8 9b 9b fe ff       	call   c000afcc <Timer::Timer(char const*)>
c0021431:	83 c4 10             	add    esp,0x10
c0021434:	ba a8 9c 02 c0       	mov    edx,0xc0029ca8
c0021439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002143d:	89 10                	mov    DWORD PTR [eax],edx
c002143f:	90                   	nop
c0021440:	83 c4 0c             	add    esp,0xc
c0021443:	c3                   	ret    

c0021444 <PIT::write(int)>:
c0021444:	83 ec 10             	sub    esp,0x10
c0021447:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002144b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002144f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021455:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021459:	a3 b8 3d 03 c0       	mov    ds:0xc0033db8,eax
c002145e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0021463:	89 c2                	mov    edx,eax
c0021465:	c1 fa 1f             	sar    edx,0x1f
c0021468:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002146c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021470:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0021477:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002147c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021480:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0021485:	ee                   	out    dx,al
c0021486:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002148a:	0f b6 c0             	movzx  eax,al
c002148d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0021494:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021498:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002149c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00214a1:	ee                   	out    dx,al
c00214a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214a6:	c1 f8 08             	sar    eax,0x8
c00214a9:	0f b6 c0             	movzx  eax,al
c00214ac:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00214b3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00214b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00214bb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00214c0:	ee                   	out    dx,al
c00214c1:	90                   	nop
c00214c2:	83 c4 10             	add    esp,0x10
c00214c5:	c3                   	ret    
c00214c6:	66 90                	xchg   ax,ax

c00214c8 <pitHandler(regs*, void*)>:
c00214c8:	83 ec 0c             	sub    esp,0xc
c00214cb:	8b 0d b8 3d 03 c0    	mov    ecx,DWORD PTR ds:0xc0033db8
c00214d1:	b8 10 27 00 00       	mov    eax,0x2710
c00214d6:	89 c2                	mov    edx,eax
c00214d8:	c1 fa 1f             	sar    edx,0x1f
c00214db:	f7 f9                	idiv   ecx
c00214dd:	83 ec 0c             	sub    esp,0xc
c00214e0:	50                   	push   eax
c00214e1:	e8 b2 9b fe ff       	call   c000b098 <timerHandler(unsigned int)>
c00214e6:	83 c4 10             	add    esp,0x10
c00214e9:	90                   	nop
c00214ea:	83 c4 0c             	add    esp,0xc
c00214ed:	c3                   	ret    
c00214ee:	66 90                	xchg   ax,ax

c00214f0 <PIT::open(int, int, void*)>:
c00214f0:	83 ec 0c             	sub    esp,0xc
c00214f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00214f9:	83 c0 24             	add    eax,0x24
c00214fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00214fe:	83 ec 08             	sub    esp,0x8
c0021501:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021505:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021509:	ff d0                	call   eax
c002150b:	83 c4 10             	add    esp,0x10
c002150e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021512:	83 ec 0c             	sub    esp,0xc
c0021515:	6a 00                	push   0x0
c0021517:	6a 01                	push   0x1
c0021519:	68 c8 14 02 c0       	push   0xc00214c8
c002151e:	6a 00                	push   0x0
c0021520:	50                   	push   eax
c0021521:	e8 7c 84 fe ff       	call   c00099a2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021526:	83 c4 20             	add    esp,0x20
c0021529:	89 c2                	mov    edx,eax
c002152b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002152f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021535:	b8 00 00 00 00       	mov    eax,0x0
c002153a:	83 c4 0c             	add    esp,0xc
c002153d:	c3                   	ret    
c002153e:	66 90                	xchg   ax,ax

c0021540 <PIT::close(int, int, void*)>:
c0021540:	83 ec 0c             	sub    esp,0xc
c0021543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021547:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021555:	6a 01                	push   0x1
c0021557:	68 c8 14 02 c0       	push   0xc00214c8
c002155c:	6a 00                	push   0x0
c002155e:	50                   	push   eax
c002155f:	e8 74 84 fe ff       	call   c00099d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021564:	83 c4 10             	add    esp,0x10
c0021567:	b8 00 00 00 00       	mov    eax,0x0
c002156c:	83 c4 0c             	add    esp,0xc
c002156f:	c3                   	ret    

c0021570 <PIT::PIT()>:
c0021570:	83 ec 0c             	sub    esp,0xc
c0021573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021577:	83 ec 08             	sub    esp,0x8
c002157a:	68 d0 9c 02 c0       	push   0xc0029cd0
c002157f:	50                   	push   eax
c0021580:	e8 47 9a fe ff       	call   c000afcc <Timer::Timer(char const*)>
c0021585:	83 c4 10             	add    esp,0x10
c0021588:	ba f8 9c 02 c0       	mov    edx,0xc0029cf8
c002158d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021591:	89 10                	mov    DWORD PTR [eax],edx
c0021593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021597:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002159d:	0f b6 d0             	movzx  edx,al
c00215a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00215ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00215b5:	0f b6 d0             	movzx  edx,al
c00215b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215bc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00215c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00215cb:	8d 50 01             	lea    edx,[eax+0x1]
c00215ce:	88 d1                	mov    cl,dl
c00215d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00215d4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00215da:	0f b6 d0             	movzx  edx,al
c00215dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00215e5:	83 e1 3f             	and    ecx,0x3f
c00215e8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00215ec:	90                   	nop
c00215ed:	83 c4 0c             	add    esp,0xc
c00215f0:	c3                   	ret    
c00215f1:	66 90                	xchg   ax,ax
c00215f3:	66 90                	xchg   ax,ax
c00215f5:	66 90                	xchg   ax,ax
c00215f7:	66 90                	xchg   ax,ax
c00215f9:	66 90                	xchg   ax,ax
c00215fb:	66 90                	xchg   ax,ax
c00215fd:	66 90                	xchg   ax,ax
c00215ff:	90                   	nop

c0021600 <avxDetect>:
c0021600:	b8 01 00 00 00       	mov    eax,0x1
c0021605:	0f a2                	cpuid  
c0021607:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002160d:	74 15                	je     c0021624 <avxDetect.noAVX>
c002160f:	b8 01 00 00 00       	mov    eax,0x1
c0021614:	0f a2                	cpuid  
c0021616:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002161c:	74 06                	je     c0021624 <avxDetect.noAVX>
c002161e:	b8 01 00 00 00       	mov    eax,0x1
c0021623:	c3                   	ret    

c0021624 <avxDetect.noAVX>:
c0021624:	b8 00 00 00 00       	mov    eax,0x0
c0021629:	c3                   	ret    

c002162a <avxSave>:
c002162a:	53                   	push   ebx
c002162b:	52                   	push   edx
c002162c:	31 c0                	xor    eax,eax
c002162e:	48                   	dec    eax
c002162f:	89 c2                	mov    edx,eax
c0021631:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021635:	0f ae 23             	xsave  [ebx]
c0021638:	5a                   	pop    edx
c0021639:	5b                   	pop    ebx
c002163a:	c3                   	ret    

c002163b <avxLoad>:
c002163b:	53                   	push   ebx
c002163c:	52                   	push   edx
c002163d:	31 c0                	xor    eax,eax
c002163f:	48                   	dec    eax
c0021640:	89 c2                	mov    edx,eax
c0021642:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021646:	0f ae 2b             	xrstor [ebx]
c0021649:	5a                   	pop    edx
c002164a:	5b                   	pop    ebx
c002164b:	c3                   	ret    

c002164c <avxInit>:
c002164c:	e8 17 03 00 00       	call   c0021968 <sseInit>
c0021651:	50                   	push   eax
c0021652:	51                   	push   ecx
c0021653:	0f 20 e0             	mov    eax,cr4
c0021656:	0d 00 00 04 00       	or     eax,0x40000
c002165b:	0f 22 e0             	mov    cr4,eax
c002165e:	31 c9                	xor    ecx,ecx
c0021660:	0f 01 d0             	xgetbv 
c0021663:	0d 07 00 00 00       	or     eax,0x7
c0021668:	0f 01 d1             	xsetbv 
c002166b:	59                   	pop    ecx
c002166c:	58                   	pop    eax
c002166d:	c3                   	ret    

c002166e <avxClose>:
c002166e:	c3                   	ret    
c002166f:	90                   	nop

c0021670 <isr0>:
c0021670:	fa                   	cli    
c0021671:	68 00 00 00 00       	push   0x0
c0021676:	68 00 00 00 00       	push   0x0
c002167b:	e9 56 01 00 00       	jmp    c00217d6 <int_common_stub>

c0021680 <isr1>:
c0021680:	fa                   	cli    
c0021681:	6a 00                	push   0x0
c0021683:	6a 01                	push   0x1
c0021685:	e9 4c 01 00 00       	jmp    c00217d6 <int_common_stub>

c002168a <isr2>:
c002168a:	fa                   	cli    
c002168b:	6a 00                	push   0x0
c002168d:	6a 02                	push   0x2
c002168f:	e9 42 01 00 00       	jmp    c00217d6 <int_common_stub>

c0021694 <isr3>:
c0021694:	fa                   	cli    
c0021695:	6a 00                	push   0x0
c0021697:	6a 03                	push   0x3
c0021699:	e9 38 01 00 00       	jmp    c00217d6 <int_common_stub>

c002169e <isr4>:
c002169e:	fa                   	cli    
c002169f:	6a 00                	push   0x0
c00216a1:	6a 04                	push   0x4
c00216a3:	e9 2e 01 00 00       	jmp    c00217d6 <int_common_stub>

c00216a8 <isr5>:
c00216a8:	fa                   	cli    
c00216a9:	6a 00                	push   0x0
c00216ab:	6a 05                	push   0x5
c00216ad:	e9 24 01 00 00       	jmp    c00217d6 <int_common_stub>

c00216b2 <isr6>:
c00216b2:	fa                   	cli    
c00216b3:	6a 00                	push   0x0
c00216b5:	6a 06                	push   0x6
c00216b7:	e9 1a 01 00 00       	jmp    c00217d6 <int_common_stub>

c00216bc <isr7>:
c00216bc:	fa                   	cli    
c00216bd:	6a 00                	push   0x0
c00216bf:	6a 07                	push   0x7
c00216c1:	e9 10 01 00 00       	jmp    c00217d6 <int_common_stub>

c00216c6 <isr8>:
c00216c6:	fa                   	cli    
c00216c7:	6a 08                	push   0x8
c00216c9:	e9 08 01 00 00       	jmp    c00217d6 <int_common_stub>

c00216ce <isr9>:
c00216ce:	fa                   	cli    
c00216cf:	6a 00                	push   0x0
c00216d1:	6a 09                	push   0x9
c00216d3:	e9 fe 00 00 00       	jmp    c00217d6 <int_common_stub>

c00216d8 <isr10>:
c00216d8:	fa                   	cli    
c00216d9:	6a 0a                	push   0xa
c00216db:	e9 f6 00 00 00       	jmp    c00217d6 <int_common_stub>

c00216e0 <isr11>:
c00216e0:	fa                   	cli    
c00216e1:	6a 0b                	push   0xb
c00216e3:	e9 ee 00 00 00       	jmp    c00217d6 <int_common_stub>

c00216e8 <isr12>:
c00216e8:	fa                   	cli    
c00216e9:	6a 0c                	push   0xc
c00216eb:	e9 e6 00 00 00       	jmp    c00217d6 <int_common_stub>

c00216f0 <isr13>:
c00216f0:	fa                   	cli    
c00216f1:	6a 0d                	push   0xd
c00216f3:	53                   	push   ebx
c00216f4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00216f8:	81 fb 9b 18 02 c0    	cmp    ebx,0xc002189b
c00216fe:	5b                   	pop    ebx
c00216ff:	0f 84 98 01 00 00    	je     c002189d <finishSignal2>
c0021705:	e9 cc 00 00 00       	jmp    c00217d6 <int_common_stub>

c002170a <isr14>:
c002170a:	fa                   	cli    
c002170b:	6a 0e                	push   0xe
c002170d:	e9 c4 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021712 <isr15>:
c0021712:	fa                   	cli    
c0021713:	6a 00                	push   0x0
c0021715:	6a 0f                	push   0xf
c0021717:	e9 ba 00 00 00       	jmp    c00217d6 <int_common_stub>

c002171c <isr16>:
c002171c:	fa                   	cli    
c002171d:	6a 00                	push   0x0
c002171f:	6a 10                	push   0x10
c0021721:	e9 b0 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021726 <isr17>:
c0021726:	fa                   	cli    
c0021727:	6a 00                	push   0x0
c0021729:	6a 11                	push   0x11
c002172b:	e9 a6 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021730 <isr18>:
c0021730:	fa                   	cli    
c0021731:	6a 00                	push   0x0
c0021733:	6a 12                	push   0x12
c0021735:	e9 9c 00 00 00       	jmp    c00217d6 <int_common_stub>

c002173a <irq3>:
c002173a:	fa                   	cli    
c002173b:	6a 00                	push   0x0
c002173d:	6a 23                	push   0x23
c002173f:	e9 92 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021744 <irq4>:
c0021744:	fa                   	cli    
c0021745:	6a 00                	push   0x0
c0021747:	6a 24                	push   0x24
c0021749:	e9 88 00 00 00       	jmp    c00217d6 <int_common_stub>

c002174e <irq5>:
c002174e:	fa                   	cli    
c002174f:	6a 00                	push   0x0
c0021751:	6a 25                	push   0x25
c0021753:	e9 7e 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021758 <irq6>:
c0021758:	fa                   	cli    
c0021759:	6a 00                	push   0x0
c002175b:	6a 26                	push   0x26
c002175d:	e9 74 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021762 <irq7>:
c0021762:	fa                   	cli    
c0021763:	6a 00                	push   0x0
c0021765:	6a 27                	push   0x27
c0021767:	e9 6a 00 00 00       	jmp    c00217d6 <int_common_stub>

c002176c <irq8>:
c002176c:	fa                   	cli    
c002176d:	6a 00                	push   0x0
c002176f:	6a 28                	push   0x28
c0021771:	e9 60 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021776 <irq9>:
c0021776:	fa                   	cli    
c0021777:	6a 00                	push   0x0
c0021779:	6a 29                	push   0x29
c002177b:	e9 56 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021780 <irq10>:
c0021780:	fa                   	cli    
c0021781:	6a 00                	push   0x0
c0021783:	6a 2a                	push   0x2a
c0021785:	e9 4c 00 00 00       	jmp    c00217d6 <int_common_stub>

c002178a <irq11>:
c002178a:	fa                   	cli    
c002178b:	6a 00                	push   0x0
c002178d:	6a 2b                	push   0x2b
c002178f:	e9 42 00 00 00       	jmp    c00217d6 <int_common_stub>

c0021794 <irq12>:
c0021794:	fa                   	cli    
c0021795:	6a 00                	push   0x0
c0021797:	6a 2c                	push   0x2c
c0021799:	e9 38 00 00 00       	jmp    c00217d6 <int_common_stub>

c002179e <irq13>:
c002179e:	fa                   	cli    
c002179f:	6a 00                	push   0x0
c00217a1:	6a 2d                	push   0x2d
c00217a3:	e9 2e 00 00 00       	jmp    c00217d6 <int_common_stub>

c00217a8 <irq14>:
c00217a8:	fa                   	cli    
c00217a9:	6a 00                	push   0x0
c00217ab:	6a 2e                	push   0x2e
c00217ad:	e9 24 00 00 00       	jmp    c00217d6 <int_common_stub>

c00217b2 <irq15>:
c00217b2:	fa                   	cli    
c00217b3:	6a 00                	push   0x0
c00217b5:	6a 2f                	push   0x2f
c00217b7:	e9 1a 00 00 00       	jmp    c00217d6 <int_common_stub>

c00217bc <irq1>:
c00217bc:	fa                   	cli    
c00217bd:	6a 00                	push   0x0
c00217bf:	6a 21                	push   0x21
c00217c1:	eb 13                	jmp    c00217d6 <int_common_stub>

c00217c3 <irq2>:
c00217c3:	fa                   	cli    
c00217c4:	6a 00                	push   0x0
c00217c6:	6a 22                	push   0x22
c00217c8:	eb 0c                	jmp    c00217d6 <int_common_stub>

c00217ca <isr96>:
c00217ca:	6a 00                	push   0x0
c00217cc:	6a 60                	push   0x60
c00217ce:	fb                   	sti    
c00217cf:	eb 05                	jmp    c00217d6 <int_common_stub>

c00217d1 <irq0>:
c00217d1:	fa                   	cli    
c00217d2:	6a 00                	push   0x0
c00217d4:	6a 20                	push   0x20

c00217d6 <int_common_stub>:
c00217d6:	60                   	pusha  
c00217d7:	1e                   	push   ds
c00217d8:	06                   	push   es
c00217d9:	0f a0                	push   fs
c00217db:	0f a8                	push   gs
c00217dd:	66 b8 10 00          	mov    ax,0x10
c00217e1:	66 8e d8             	mov    ds,ax
c00217e4:	66 8e c0             	mov    es,ax
c00217e7:	66 8e e0             	mov    fs,ax
c00217ea:	66 8e e8             	mov    gs,ax
c00217ed:	54                   	push   esp
c00217ee:	fc                   	cld    
c00217ef:	e8 fc 94 ff ff       	call   c001acf0 <int_handler>
c00217f4:	81 c4 04 00 00 00    	add    esp,0x4
c00217fa:	e8 94 f6 fe ff       	call   c0010e93 <KiCheckSignalZ>
c00217ff:	85 c0                	test   eax,eax
c0021801:	75 0e                	jne    c0021811 <doSignals>
c0021803:	0f a9                	pop    gs
c0021805:	0f a1                	pop    fs
c0021807:	07                   	pop    es
c0021808:	1f                   	pop    ds
c0021809:	61                   	popa   
c002180a:	81 c4 08 00 00 00    	add    esp,0x8
c0021810:	cf                   	iret   

c0021811 <doSignals>:
c0021811:	0f a9                	pop    gs
c0021813:	0f a1                	pop    fs
c0021815:	07                   	pop    es
c0021816:	1f                   	pop    ds
c0021817:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002181c:	61                   	popa   
c002181d:	53                   	push   ebx
c002181e:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c0021824:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021827:	5b                   	pop    ebx
c0021828:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002182d:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c0021830:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c0021833:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021836:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021839:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002183c:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002183f:	81 c4 08 00 00 00    	add    esp,0x8
c0021845:	5e                   	pop    esi
c0021846:	5b                   	pop    ebx
c0021847:	59                   	pop    ecx
c0021848:	5a                   	pop    edx
c0021849:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002184c:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002184f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021852:	52                   	push   edx
c0021853:	51                   	push   ecx
c0021854:	53                   	push   ebx
c0021855:	56                   	push   esi
c0021856:	81 ec 08 00 00 00    	sub    esp,0x8
c002185c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002185f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0021862:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0021865:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021868:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002186b:	60                   	pusha  
c002186c:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c0021872:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0021875:	89 e3                	mov    ebx,esp
c0021877:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002187a:	52                   	push   edx
c002187b:	68 9b 18 02 c0       	push   0xc002189b
c0021880:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c0021883:	89 dc                	mov    esp,ebx
c0021885:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0021888:	68 23 00 00 00       	push   0x23
c002188d:	51                   	push   ecx
c002188e:	68 02 02 00 00       	push   0x202
c0021893:	68 1b 00 00 00       	push   0x1b
c0021898:	ff 36                	push   DWORD PTR [esi]
c002189a:	cf                   	iret   

c002189b <finishSignal>:
c002189b:	cd 0f                	int    0xf

c002189d <finishSignal2>:
c002189d:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00218a3:	e8 77 f6 fe ff       	call   c0010f1f <KiFinishSignalZ>
c00218a8:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00218ae:	68 23 00 00 00       	push   0x23
c00218b3:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00218b6:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00218b9:	68 1b 00 00 00       	push   0x1b
c00218be:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00218c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00218c4:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00218c7:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00218ca:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00218cd:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00218d0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00218d3:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00218d6:	cf                   	iret   
c00218d7:	90                   	nop

c00218d8 <irq16>:
c00218d8:	fa                   	cli    
c00218d9:	6a 00                	push   0x0
c00218db:	6a 30                	push   0x30
c00218dd:	e9 f4 fe ff ff       	jmp    c00217d6 <int_common_stub>

c00218e2 <irq17>:
c00218e2:	fa                   	cli    
c00218e3:	6a 00                	push   0x0
c00218e5:	6a 31                	push   0x31
c00218e7:	e9 ea fe ff ff       	jmp    c00217d6 <int_common_stub>

c00218ec <irq18>:
c00218ec:	fa                   	cli    
c00218ed:	6a 00                	push   0x0
c00218ef:	6a 32                	push   0x32
c00218f1:	e9 e0 fe ff ff       	jmp    c00217d6 <int_common_stub>

c00218f6 <irq19>:
c00218f6:	fa                   	cli    
c00218f7:	6a 00                	push   0x0
c00218f9:	6a 33                	push   0x33
c00218fb:	e9 d6 fe ff ff       	jmp    c00217d6 <int_common_stub>

c0021900 <irq20>:
c0021900:	fa                   	cli    
c0021901:	6a 00                	push   0x0
c0021903:	6a 34                	push   0x34
c0021905:	e9 cc fe ff ff       	jmp    c00217d6 <int_common_stub>

c002190a <irq21>:
c002190a:	fa                   	cli    
c002190b:	6a 00                	push   0x0
c002190d:	6a 35                	push   0x35
c002190f:	e9 c2 fe ff ff       	jmp    c00217d6 <int_common_stub>

c0021914 <irq22>:
c0021914:	fa                   	cli    
c0021915:	6a 00                	push   0x0
c0021917:	6a 36                	push   0x36
c0021919:	e9 b8 fe ff ff       	jmp    c00217d6 <int_common_stub>

c002191e <irq23>:
c002191e:	fa                   	cli    
c002191f:	6a 00                	push   0x0
c0021921:	6a 37                	push   0x37
c0021923:	e9 ae fe ff ff       	jmp    c00217d6 <int_common_stub>
c0021928:	66 90                	xchg   ax,ax
c002192a:	66 90                	xchg   ax,ax
c002192c:	66 90                	xchg   ax,ax
c002192e:	66 90                	xchg   ax,ax

c0021930 <i386GetRDRAND>:
c0021930:	b9 64 00 00 00       	mov    ecx,0x64

c0021935 <retry>:
c0021935:	0f c7 f0             	rdrand eax
c0021938:	72 05                	jb     c002193f <retry.done>
c002193a:	e2 f9                	loop   c0021935 <retry>

c002193c <retry.fail>:
c002193c:	31 c0                	xor    eax,eax
c002193e:	c3                   	ret    

c002193f <retry.done>:
c002193f:	c3                   	ret    

c0021940 <sseDetect>:
c0021940:	b8 01 00 00 00       	mov    eax,0x1
c0021945:	0f a2                	cpuid  
c0021947:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002194d:	74 06                	je     c0021955 <sseDetect.noSSE>
c002194f:	b8 01 00 00 00       	mov    eax,0x1
c0021954:	c3                   	ret    

c0021955 <sseDetect.noSSE>:
c0021955:	31 c0                	xor    eax,eax
c0021957:	c3                   	ret    

c0021958 <sseSave>:
c0021958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002195c:	0f ae 00             	fxsave [eax]
c002195f:	c3                   	ret    

c0021960 <sseLoad>:
c0021960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021964:	0f ae 08             	fxrstor [eax]
c0021967:	c3                   	ret    

c0021968 <sseInit>:
c0021968:	e8 48 00 00 00       	call   c00219b5 <x87Init>
c002196d:	0f 20 e0             	mov    eax,cr4
c0021970:	66 0d 00 06          	or     ax,0x600
c0021974:	0f 22 e0             	mov    cr4,eax
c0021977:	c3                   	ret    

c0021978 <sseClose>:
c0021978:	c3                   	ret    
c0021979:	66 90                	xchg   ax,ax
c002197b:	66 90                	xchg   ax,ax
c002197d:	66 90                	xchg   ax,ax
c002197f:	90                   	nop

c0021980 <value_37F>:
c0021980:	7f 03                	jg     c0021985 <value_37A+0x1>

c0021982 <value_37E>:
c0021982:	7e 03                	jle    c0021987 <x87Detect+0x1>

c0021984 <value_37A>:
c0021984:	7a 03                	jp     c0021989 <x87Detect+0x3>

c0021986 <x87Detect>:
c0021986:	53                   	push   ebx
c0021987:	51                   	push   ecx
c0021988:	52                   	push   edx
c0021989:	b8 01 00 00 00       	mov    eax,0x1
c002198e:	0f a2                	cpuid  
c0021990:	f7 c2 01 00 00 00    	test   edx,0x1
c0021996:	74 06                	je     c002199e <x87Detect.nox87>
c0021998:	b8 01 00 00 00       	mov    eax,0x1
c002199d:	c3                   	ret    

c002199e <x87Detect.nox87>:
c002199e:	b8 00 00 00 00       	mov    eax,0x0
c00219a3:	5a                   	pop    edx
c00219a4:	59                   	pop    ecx
c00219a5:	5b                   	pop    ebx
c00219a6:	c3                   	ret    

c00219a7 <x87Save>:
c00219a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219ab:	dd 30                	fnsave [eax]
c00219ad:	c3                   	ret    

c00219ae <x87Load>:
c00219ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00219b2:	dd 20                	frstor [eax]
c00219b4:	c3                   	ret    

c00219b5 <x87Init>:
c00219b5:	0f 20 c0             	mov    eax,cr0
c00219b8:	66 25 fb ff          	and    ax,0xfffb
c00219bc:	66 0d 22 00          	or     ax,0x22
c00219c0:	0f 22 c0             	mov    cr0,eax
c00219c3:	db e3                	fninit 
c00219c5:	0f 06                	clts   
c00219c7:	d9 2d 84 19 02 c0    	fldcw  WORD PTR ds:0xc0021984
c00219cd:	c3                   	ret    

c00219ce <x87Close>:
c00219ce:	c3                   	ret    
c00219cf:	90                   	nop

c00219d0 <__do_global_ctors_aux>:
c00219d0:	a1 5c 62 02 c0       	mov    eax,ds:0xc002625c
c00219d5:	83 f8 ff             	cmp    eax,0xffffffff
c00219d8:	74 1a                	je     c00219f4 <__do_global_ctors_aux+0x24>
c00219da:	55                   	push   ebp
c00219db:	89 e5                	mov    ebp,esp
c00219dd:	53                   	push   ebx
c00219de:	52                   	push   edx
c00219df:	bb 5c 62 02 c0       	mov    ebx,0xc002625c
c00219e4:	ff d0                	call   eax
c00219e6:	83 eb 04             	sub    ebx,0x4
c00219e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00219eb:	83 f8 ff             	cmp    eax,0xffffffff
c00219ee:	75 f4                	jne    c00219e4 <__do_global_ctors_aux+0x14>
c00219f0:	58                   	pop    eax
c00219f1:	5b                   	pop    ebx
c00219f2:	5d                   	pop    ebp
c00219f3:	c3                   	ret    
c00219f4:	c3                   	ret    
c00219f5:	66 90                	xchg   ax,ax
c00219f7:	90                   	nop

c00219f8 <__divdi3>:
c00219f8:	55                   	push   ebp
c00219f9:	57                   	push   edi
c00219fa:	56                   	push   esi
c00219fb:	53                   	push   ebx
c00219fc:	83 ec 1c             	sub    esp,0x1c
c00219ff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021a03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021a07:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021a0a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021a0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021a12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021a16:	85 db                	test   ebx,ebx
c0021a18:	0f 88 8e 00 00 00    	js     c0021aac <__divdi3+0xb4>
c0021a1e:	89 dd                	mov    ebp,ebx
c0021a20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021a28:	89 d3                	mov    ebx,edx
c0021a2a:	85 d2                	test   edx,edx
c0021a2c:	79 0d                	jns    c0021a3b <__divdi3+0x43>
c0021a2e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021a32:	f7 d8                	neg    eax
c0021a34:	83 d2 00             	adc    edx,0x0
c0021a37:	f7 da                	neg    edx
c0021a39:	89 d3                	mov    ebx,edx
c0021a3b:	89 c7                	mov    edi,eax
c0021a3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a40:	85 db                	test   ebx,ebx
c0021a42:	75 48                	jne    c0021a8c <__divdi3+0x94>
c0021a44:	39 ef                	cmp    edi,ebp
c0021a46:	76 24                	jbe    c0021a6c <__divdi3+0x74>
c0021a48:	89 ea                	mov    edx,ebp
c0021a4a:	f7 f7                	div    edi
c0021a4c:	89 c1                	mov    ecx,eax
c0021a4e:	31 f6                	xor    esi,esi
c0021a50:	89 c8                	mov    eax,ecx
c0021a52:	89 f2                	mov    edx,esi
c0021a54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a58:	85 c9                	test   ecx,ecx
c0021a5a:	74 07                	je     c0021a63 <__divdi3+0x6b>
c0021a5c:	f7 d8                	neg    eax
c0021a5e:	83 d2 00             	adc    edx,0x0
c0021a61:	f7 da                	neg    edx
c0021a63:	83 c4 1c             	add    esp,0x1c
c0021a66:	5b                   	pop    ebx
c0021a67:	5e                   	pop    esi
c0021a68:	5f                   	pop    edi
c0021a69:	5d                   	pop    ebp
c0021a6a:	c3                   	ret    
c0021a6b:	90                   	nop
c0021a6c:	85 ff                	test   edi,edi
c0021a6e:	75 0b                	jne    c0021a7b <__divdi3+0x83>
c0021a70:	b8 01 00 00 00       	mov    eax,0x1
c0021a75:	31 d2                	xor    edx,edx
c0021a77:	f7 f3                	div    ebx
c0021a79:	89 c7                	mov    edi,eax
c0021a7b:	31 d2                	xor    edx,edx
c0021a7d:	89 e8                	mov    eax,ebp
c0021a7f:	f7 f7                	div    edi
c0021a81:	89 c6                	mov    esi,eax
c0021a83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a86:	f7 f7                	div    edi
c0021a88:	89 c1                	mov    ecx,eax
c0021a8a:	eb c4                	jmp    c0021a50 <__divdi3+0x58>
c0021a8c:	39 eb                	cmp    ebx,ebp
c0021a8e:	77 3c                	ja     c0021acc <__divdi3+0xd4>
c0021a90:	0f bd f3             	bsr    esi,ebx
c0021a93:	83 f6 1f             	xor    esi,0x1f
c0021a96:	75 40                	jne    c0021ad8 <__divdi3+0xe0>
c0021a98:	39 eb                	cmp    ebx,ebp
c0021a9a:	72 09                	jb     c0021aa5 <__divdi3+0xad>
c0021a9c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021a9f:	0f 87 97 00 00 00    	ja     c0021b3c <__divdi3+0x144>
c0021aa5:	b9 01 00 00 00       	mov    ecx,0x1
c0021aaa:	eb a4                	jmp    c0021a50 <__divdi3+0x58>
c0021aac:	f7 d9                	neg    ecx
c0021aae:	83 d3 00             	adc    ebx,0x0
c0021ab1:	f7 db                	neg    ebx
c0021ab3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021ab6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021aba:	89 dd                	mov    ebp,ebx
c0021abc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021ac4:	e9 5f ff ff ff       	jmp    c0021a28 <__divdi3+0x30>
c0021ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0021acc:	31 f6                	xor    esi,esi
c0021ace:	31 c9                	xor    ecx,ecx
c0021ad0:	e9 7b ff ff ff       	jmp    c0021a50 <__divdi3+0x58>
c0021ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ad8:	b8 20 00 00 00       	mov    eax,0x20
c0021add:	29 f0                	sub    eax,esi
c0021adf:	89 f1                	mov    ecx,esi
c0021ae1:	d3 e3                	shl    ebx,cl
c0021ae3:	89 fa                	mov    edx,edi
c0021ae5:	88 c1                	mov    cl,al
c0021ae7:	d3 ea                	shr    edx,cl
c0021ae9:	09 da                	or     edx,ebx
c0021aeb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021aef:	89 f1                	mov    ecx,esi
c0021af1:	d3 e7                	shl    edi,cl
c0021af3:	89 eb                	mov    ebx,ebp
c0021af5:	88 c1                	mov    cl,al
c0021af7:	d3 eb                	shr    ebx,cl
c0021af9:	89 f1                	mov    ecx,esi
c0021afb:	d3 e5                	shl    ebp,cl
c0021afd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021b00:	88 c1                	mov    cl,al
c0021b02:	d3 ea                	shr    edx,cl
c0021b04:	09 d5                	or     ebp,edx
c0021b06:	89 e8                	mov    eax,ebp
c0021b08:	89 da                	mov    edx,ebx
c0021b0a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021b0e:	89 d3                	mov    ebx,edx
c0021b10:	89 c5                	mov    ebp,eax
c0021b12:	f7 e7                	mul    edi
c0021b14:	39 d3                	cmp    ebx,edx
c0021b16:	72 18                	jb     c0021b30 <__divdi3+0x138>
c0021b18:	74 0a                	je     c0021b24 <__divdi3+0x12c>
c0021b1a:	89 e9                	mov    ecx,ebp
c0021b1c:	31 f6                	xor    esi,esi
c0021b1e:	e9 2d ff ff ff       	jmp    c0021a50 <__divdi3+0x58>
c0021b23:	90                   	nop
c0021b24:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021b27:	89 f1                	mov    ecx,esi
c0021b29:	d3 e7                	shl    edi,cl
c0021b2b:	39 c7                	cmp    edi,eax
c0021b2d:	73 eb                	jae    c0021b1a <__divdi3+0x122>
c0021b2f:	90                   	nop
c0021b30:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021b33:	31 f6                	xor    esi,esi
c0021b35:	e9 16 ff ff ff       	jmp    c0021a50 <__divdi3+0x58>
c0021b3a:	66 90                	xchg   ax,ax
c0021b3c:	31 c9                	xor    ecx,ecx
c0021b3e:	e9 0d ff ff ff       	jmp    c0021a50 <__divdi3+0x58>
c0021b43:	90                   	nop

c0021b44 <__moddi3>:
c0021b44:	55                   	push   ebp
c0021b45:	57                   	push   edi
c0021b46:	56                   	push   esi
c0021b47:	53                   	push   ebx
c0021b48:	83 ec 2c             	sub    esp,0x2c
c0021b4b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021b4f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021b53:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021b57:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021b5b:	85 db                	test   ebx,ebx
c0021b5d:	0f 88 85 00 00 00    	js     c0021be8 <__moddi3+0xa4>
c0021b63:	89 de                	mov    esi,ebx
c0021b65:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021b6d:	89 d7                	mov    edi,edx
c0021b6f:	85 d2                	test   edx,edx
c0021b71:	79 09                	jns    c0021b7c <__moddi3+0x38>
c0021b73:	f7 d8                	neg    eax
c0021b75:	83 d2 00             	adc    edx,0x0
c0021b78:	f7 da                	neg    edx
c0021b7a:	89 d7                	mov    edi,edx
c0021b7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021b80:	89 cd                	mov    ebp,ecx
c0021b82:	85 ff                	test   edi,edi
c0021b84:	75 52                	jne    c0021bd8 <__moddi3+0x94>
c0021b86:	89 c3                	mov    ebx,eax
c0021b88:	39 f0                	cmp    eax,esi
c0021b8a:	76 24                	jbe    c0021bb0 <__moddi3+0x6c>
c0021b8c:	89 c8                	mov    eax,ecx
c0021b8e:	89 f2                	mov    edx,esi
c0021b90:	f7 f3                	div    ebx
c0021b92:	89 d6                	mov    esi,edx
c0021b94:	89 f0                	mov    eax,esi
c0021b96:	31 d2                	xor    edx,edx
c0021b98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021b9c:	85 c9                	test   ecx,ecx
c0021b9e:	74 07                	je     c0021ba7 <__moddi3+0x63>
c0021ba0:	f7 d8                	neg    eax
c0021ba2:	83 d2 00             	adc    edx,0x0
c0021ba5:	f7 da                	neg    edx
c0021ba7:	83 c4 2c             	add    esp,0x2c
c0021baa:	5b                   	pop    ebx
c0021bab:	5e                   	pop    esi
c0021bac:	5f                   	pop    edi
c0021bad:	5d                   	pop    ebp
c0021bae:	c3                   	ret    
c0021baf:	90                   	nop
c0021bb0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021bb4:	85 db                	test   ebx,ebx
c0021bb6:	75 0d                	jne    c0021bc5 <__moddi3+0x81>
c0021bb8:	b8 01 00 00 00       	mov    eax,0x1
c0021bbd:	31 d2                	xor    edx,edx
c0021bbf:	f7 f7                	div    edi
c0021bc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021bc5:	89 f0                	mov    eax,esi
c0021bc7:	31 d2                	xor    edx,edx
c0021bc9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021bcd:	f7 f7                	div    edi
c0021bcf:	89 e8                	mov    eax,ebp
c0021bd1:	f7 f7                	div    edi
c0021bd3:	89 d6                	mov    esi,edx
c0021bd5:	eb bd                	jmp    c0021b94 <__moddi3+0x50>
c0021bd7:	90                   	nop
c0021bd8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021bdc:	39 f7                	cmp    edi,esi
c0021bde:	76 20                	jbe    c0021c00 <__moddi3+0xbc>
c0021be0:	89 c8                	mov    eax,ecx
c0021be2:	89 f2                	mov    edx,esi
c0021be4:	eb b2                	jmp    c0021b98 <__moddi3+0x54>
c0021be6:	66 90                	xchg   ax,ax
c0021be8:	f7 d9                	neg    ecx
c0021bea:	83 d3 00             	adc    ebx,0x0
c0021bed:	f7 db                	neg    ebx
c0021bef:	89 de                	mov    esi,ebx
c0021bf1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021bf9:	e9 6f ff ff ff       	jmp    c0021b6d <__moddi3+0x29>
c0021bfe:	66 90                	xchg   ax,ax
c0021c00:	0f bd c7             	bsr    eax,edi
c0021c03:	83 f0 1f             	xor    eax,0x1f
c0021c06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c0a:	75 24                	jne    c0021c30 <__moddi3+0xec>
c0021c0c:	39 f7                	cmp    edi,esi
c0021c0e:	72 06                	jb     c0021c16 <__moddi3+0xd2>
c0021c10:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021c14:	77 0c                	ja     c0021c22 <__moddi3+0xde>
c0021c16:	89 e9                	mov    ecx,ebp
c0021c18:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021c1c:	19 fe                	sbb    esi,edi
c0021c1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021c22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c26:	89 f2                	mov    edx,esi
c0021c28:	e9 6b ff ff ff       	jmp    c0021b98 <__moddi3+0x54>
c0021c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0021c30:	b8 20 00 00 00       	mov    eax,0x20
c0021c35:	89 c2                	mov    edx,eax
c0021c37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021c3b:	29 da                	sub    edx,ebx
c0021c3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021c41:	88 d9                	mov    cl,bl
c0021c43:	d3 e7                	shl    edi,cl
c0021c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c49:	88 d1                	mov    cl,dl
c0021c4b:	d3 e8                	shr    eax,cl
c0021c4d:	09 c7                	or     edi,eax
c0021c4f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021c53:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021c57:	89 d8                	mov    eax,ebx
c0021c59:	88 d9                	mov    cl,bl
c0021c5b:	d3 e7                	shl    edi,cl
c0021c5d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021c61:	89 f3                	mov    ebx,esi
c0021c63:	88 d1                	mov    cl,dl
c0021c65:	d3 eb                	shr    ebx,cl
c0021c67:	89 c7                	mov    edi,eax
c0021c69:	88 c1                	mov    cl,al
c0021c6b:	d3 e6                	shl    esi,cl
c0021c6d:	89 e8                	mov    eax,ebp
c0021c6f:	88 d1                	mov    cl,dl
c0021c71:	d3 e8                	shr    eax,cl
c0021c73:	09 f0                	or     eax,esi
c0021c75:	89 f9                	mov    ecx,edi
c0021c77:	d3 e5                	shl    ebp,cl
c0021c79:	89 da                	mov    edx,ebx
c0021c7b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021c7f:	89 d3                	mov    ebx,edx
c0021c81:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021c85:	89 c6                	mov    esi,eax
c0021c87:	89 d1                	mov    ecx,edx
c0021c89:	39 d3                	cmp    ebx,edx
c0021c8b:	72 27                	jb     c0021cb4 <__moddi3+0x170>
c0021c8d:	74 21                	je     c0021cb0 <__moddi3+0x16c>
c0021c8f:	29 f5                	sub    ebp,esi
c0021c91:	19 cb                	sbb    ebx,ecx
c0021c93:	89 de                	mov    esi,ebx
c0021c95:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021c99:	d3 e6                	shl    esi,cl
c0021c9b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021c9f:	89 f9                	mov    ecx,edi
c0021ca1:	d3 ed                	shr    ebp,cl
c0021ca3:	09 ee                	or     esi,ebp
c0021ca5:	89 f0                	mov    eax,esi
c0021ca7:	d3 eb                	shr    ebx,cl
c0021ca9:	89 da                	mov    edx,ebx
c0021cab:	e9 e8 fe ff ff       	jmp    c0021b98 <__moddi3+0x54>
c0021cb0:	39 c5                	cmp    ebp,eax
c0021cb2:	73 db                	jae    c0021c8f <__moddi3+0x14b>
c0021cb4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021cb8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021cbc:	89 d1                	mov    ecx,edx
c0021cbe:	89 c6                	mov    esi,eax
c0021cc0:	eb cd                	jmp    c0021c8f <__moddi3+0x14b>
c0021cc2:	66 90                	xchg   ax,ax

c0021cc4 <__udivdi3>:
c0021cc4:	55                   	push   ebp
c0021cc5:	57                   	push   edi
c0021cc6:	56                   	push   esi
c0021cc7:	53                   	push   ebx
c0021cc8:	83 ec 1c             	sub    esp,0x1c
c0021ccb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021ccf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021cd3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021cd7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021cdb:	85 d2                	test   edx,edx
c0021cdd:	75 41                	jne    c0021d20 <__udivdi3+0x5c>
c0021cdf:	39 f7                	cmp    edi,esi
c0021ce1:	76 15                	jbe    c0021cf8 <__udivdi3+0x34>
c0021ce3:	89 e8                	mov    eax,ebp
c0021ce5:	89 f2                	mov    edx,esi
c0021ce7:	f7 f7                	div    edi
c0021ce9:	31 db                	xor    ebx,ebx
c0021ceb:	89 da                	mov    edx,ebx
c0021ced:	83 c4 1c             	add    esp,0x1c
c0021cf0:	5b                   	pop    ebx
c0021cf1:	5e                   	pop    esi
c0021cf2:	5f                   	pop    edi
c0021cf3:	5d                   	pop    ebp
c0021cf4:	c3                   	ret    
c0021cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0021cf8:	89 f9                	mov    ecx,edi
c0021cfa:	85 ff                	test   edi,edi
c0021cfc:	75 0b                	jne    c0021d09 <__udivdi3+0x45>
c0021cfe:	b8 01 00 00 00       	mov    eax,0x1
c0021d03:	31 d2                	xor    edx,edx
c0021d05:	f7 f7                	div    edi
c0021d07:	89 c1                	mov    ecx,eax
c0021d09:	31 d2                	xor    edx,edx
c0021d0b:	89 f0                	mov    eax,esi
c0021d0d:	f7 f1                	div    ecx
c0021d0f:	89 c3                	mov    ebx,eax
c0021d11:	89 e8                	mov    eax,ebp
c0021d13:	f7 f1                	div    ecx
c0021d15:	89 da                	mov    edx,ebx
c0021d17:	83 c4 1c             	add    esp,0x1c
c0021d1a:	5b                   	pop    ebx
c0021d1b:	5e                   	pop    esi
c0021d1c:	5f                   	pop    edi
c0021d1d:	5d                   	pop    ebp
c0021d1e:	c3                   	ret    
c0021d1f:	90                   	nop
c0021d20:	39 f2                	cmp    edx,esi
c0021d22:	77 1c                	ja     c0021d40 <__udivdi3+0x7c>
c0021d24:	0f bd da             	bsr    ebx,edx
c0021d27:	83 f3 1f             	xor    ebx,0x1f
c0021d2a:	75 24                	jne    c0021d50 <__udivdi3+0x8c>
c0021d2c:	39 f2                	cmp    edx,esi
c0021d2e:	72 08                	jb     c0021d38 <__udivdi3+0x74>
c0021d30:	39 ef                	cmp    edi,ebp
c0021d32:	0f 87 84 00 00 00    	ja     c0021dbc <__udivdi3+0xf8>
c0021d38:	b8 01 00 00 00       	mov    eax,0x1
c0021d3d:	eb ac                	jmp    c0021ceb <__udivdi3+0x27>
c0021d3f:	90                   	nop
c0021d40:	31 db                	xor    ebx,ebx
c0021d42:	31 c0                	xor    eax,eax
c0021d44:	89 da                	mov    edx,ebx
c0021d46:	83 c4 1c             	add    esp,0x1c
c0021d49:	5b                   	pop    ebx
c0021d4a:	5e                   	pop    esi
c0021d4b:	5f                   	pop    edi
c0021d4c:	5d                   	pop    ebp
c0021d4d:	c3                   	ret    
c0021d4e:	66 90                	xchg   ax,ax
c0021d50:	b8 20 00 00 00       	mov    eax,0x20
c0021d55:	29 d8                	sub    eax,ebx
c0021d57:	88 d9                	mov    cl,bl
c0021d59:	d3 e2                	shl    edx,cl
c0021d5b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d5f:	89 fa                	mov    edx,edi
c0021d61:	88 c1                	mov    cl,al
c0021d63:	d3 ea                	shr    edx,cl
c0021d65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021d69:	09 d1                	or     ecx,edx
c0021d6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021d6f:	88 d9                	mov    cl,bl
c0021d71:	d3 e7                	shl    edi,cl
c0021d73:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021d77:	89 f7                	mov    edi,esi
c0021d79:	88 c1                	mov    cl,al
c0021d7b:	d3 ef                	shr    edi,cl
c0021d7d:	88 d9                	mov    cl,bl
c0021d7f:	d3 e6                	shl    esi,cl
c0021d81:	89 ea                	mov    edx,ebp
c0021d83:	88 c1                	mov    cl,al
c0021d85:	d3 ea                	shr    edx,cl
c0021d87:	09 d6                	or     esi,edx
c0021d89:	89 f0                	mov    eax,esi
c0021d8b:	89 fa                	mov    edx,edi
c0021d8d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021d91:	89 d7                	mov    edi,edx
c0021d93:	89 c6                	mov    esi,eax
c0021d95:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021d99:	39 d7                	cmp    edi,edx
c0021d9b:	72 13                	jb     c0021db0 <__udivdi3+0xec>
c0021d9d:	74 09                	je     c0021da8 <__udivdi3+0xe4>
c0021d9f:	89 f0                	mov    eax,esi
c0021da1:	31 db                	xor    ebx,ebx
c0021da3:	e9 43 ff ff ff       	jmp    c0021ceb <__udivdi3+0x27>
c0021da8:	88 d9                	mov    cl,bl
c0021daa:	d3 e5                	shl    ebp,cl
c0021dac:	39 c5                	cmp    ebp,eax
c0021dae:	73 ef                	jae    c0021d9f <__udivdi3+0xdb>
c0021db0:	8d 46 ff             	lea    eax,[esi-0x1]
c0021db3:	31 db                	xor    ebx,ebx
c0021db5:	e9 31 ff ff ff       	jmp    c0021ceb <__udivdi3+0x27>
c0021dba:	66 90                	xchg   ax,ax
c0021dbc:	31 c0                	xor    eax,eax
c0021dbe:	e9 28 ff ff ff       	jmp    c0021ceb <__udivdi3+0x27>
c0021dc3:	90                   	nop

c0021dc4 <__umoddi3>:
c0021dc4:	55                   	push   ebp
c0021dc5:	57                   	push   edi
c0021dc6:	56                   	push   esi
c0021dc7:	53                   	push   ebx
c0021dc8:	83 ec 1c             	sub    esp,0x1c
c0021dcb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021dcf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021dd3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021dd7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021ddb:	89 da                	mov    edx,ebx
c0021ddd:	85 c0                	test   eax,eax
c0021ddf:	75 37                	jne    c0021e18 <__umoddi3+0x54>
c0021de1:	39 df                	cmp    edi,ebx
c0021de3:	76 13                	jbe    c0021df8 <__umoddi3+0x34>
c0021de5:	89 f0                	mov    eax,esi
c0021de7:	f7 f7                	div    edi
c0021de9:	89 d0                	mov    eax,edx
c0021deb:	31 d2                	xor    edx,edx
c0021ded:	83 c4 1c             	add    esp,0x1c
c0021df0:	5b                   	pop    ebx
c0021df1:	5e                   	pop    esi
c0021df2:	5f                   	pop    edi
c0021df3:	5d                   	pop    ebp
c0021df4:	c3                   	ret    
c0021df5:	8d 76 00             	lea    esi,[esi+0x0]
c0021df8:	89 fd                	mov    ebp,edi
c0021dfa:	85 ff                	test   edi,edi
c0021dfc:	75 0b                	jne    c0021e09 <__umoddi3+0x45>
c0021dfe:	b8 01 00 00 00       	mov    eax,0x1
c0021e03:	31 d2                	xor    edx,edx
c0021e05:	f7 f7                	div    edi
c0021e07:	89 c5                	mov    ebp,eax
c0021e09:	89 d8                	mov    eax,ebx
c0021e0b:	31 d2                	xor    edx,edx
c0021e0d:	f7 f5                	div    ebp
c0021e0f:	89 f0                	mov    eax,esi
c0021e11:	f7 f5                	div    ebp
c0021e13:	89 d0                	mov    eax,edx
c0021e15:	eb d4                	jmp    c0021deb <__umoddi3+0x27>
c0021e17:	90                   	nop
c0021e18:	89 f1                	mov    ecx,esi
c0021e1a:	39 d8                	cmp    eax,ebx
c0021e1c:	76 0a                	jbe    c0021e28 <__umoddi3+0x64>
c0021e1e:	89 f0                	mov    eax,esi
c0021e20:	83 c4 1c             	add    esp,0x1c
c0021e23:	5b                   	pop    ebx
c0021e24:	5e                   	pop    esi
c0021e25:	5f                   	pop    edi
c0021e26:	5d                   	pop    ebp
c0021e27:	c3                   	ret    
c0021e28:	0f bd e8             	bsr    ebp,eax
c0021e2b:	83 f5 1f             	xor    ebp,0x1f
c0021e2e:	75 1c                	jne    c0021e4c <__umoddi3+0x88>
c0021e30:	39 d8                	cmp    eax,ebx
c0021e32:	72 04                	jb     c0021e38 <__umoddi3+0x74>
c0021e34:	39 f7                	cmp    edi,esi
c0021e36:	77 08                	ja     c0021e40 <__umoddi3+0x7c>
c0021e38:	89 da                	mov    edx,ebx
c0021e3a:	29 fe                	sub    esi,edi
c0021e3c:	19 c2                	sbb    edx,eax
c0021e3e:	89 f1                	mov    ecx,esi
c0021e40:	89 c8                	mov    eax,ecx
c0021e42:	83 c4 1c             	add    esp,0x1c
c0021e45:	5b                   	pop    ebx
c0021e46:	5e                   	pop    esi
c0021e47:	5f                   	pop    edi
c0021e48:	5d                   	pop    ebp
c0021e49:	c3                   	ret    
c0021e4a:	66 90                	xchg   ax,ax
c0021e4c:	ba 20 00 00 00       	mov    edx,0x20
c0021e51:	29 ea                	sub    edx,ebp
c0021e53:	89 e9                	mov    ecx,ebp
c0021e55:	d3 e0                	shl    eax,cl
c0021e57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021e5b:	89 f8                	mov    eax,edi
c0021e5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021e61:	88 d1                	mov    cl,dl
c0021e63:	d3 e8                	shr    eax,cl
c0021e65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e69:	09 c1                	or     ecx,eax
c0021e6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021e6f:	89 e9                	mov    ecx,ebp
c0021e71:	d3 e7                	shl    edi,cl
c0021e73:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021e77:	89 d8                	mov    eax,ebx
c0021e79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e7d:	88 d1                	mov    cl,dl
c0021e7f:	d3 e8                	shr    eax,cl
c0021e81:	89 c7                	mov    edi,eax
c0021e83:	89 e9                	mov    ecx,ebp
c0021e85:	d3 e3                	shl    ebx,cl
c0021e87:	89 f0                	mov    eax,esi
c0021e89:	88 d1                	mov    cl,dl
c0021e8b:	d3 e8                	shr    eax,cl
c0021e8d:	09 d8                	or     eax,ebx
c0021e8f:	89 e9                	mov    ecx,ebp
c0021e91:	d3 e6                	shl    esi,cl
c0021e93:	89 f3                	mov    ebx,esi
c0021e95:	89 fa                	mov    edx,edi
c0021e97:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021e9b:	89 d1                	mov    ecx,edx
c0021e9d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021ea1:	89 c6                	mov    esi,eax
c0021ea3:	89 d7                	mov    edi,edx
c0021ea5:	39 d1                	cmp    ecx,edx
c0021ea7:	72 27                	jb     c0021ed0 <__umoddi3+0x10c>
c0021ea9:	74 21                	je     c0021ecc <__umoddi3+0x108>
c0021eab:	89 ca                	mov    edx,ecx
c0021ead:	29 f3                	sub    ebx,esi
c0021eaf:	19 fa                	sbb    edx,edi
c0021eb1:	89 d0                	mov    eax,edx
c0021eb3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021eb7:	d3 e0                	shl    eax,cl
c0021eb9:	89 e9                	mov    ecx,ebp
c0021ebb:	d3 eb                	shr    ebx,cl
c0021ebd:	09 d8                	or     eax,ebx
c0021ebf:	d3 ea                	shr    edx,cl
c0021ec1:	83 c4 1c             	add    esp,0x1c
c0021ec4:	5b                   	pop    ebx
c0021ec5:	5e                   	pop    esi
c0021ec6:	5f                   	pop    edi
c0021ec7:	5d                   	pop    ebp
c0021ec8:	c3                   	ret    
c0021ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0021ecc:	39 c3                	cmp    ebx,eax
c0021ece:	73 db                	jae    c0021eab <__umoddi3+0xe7>
c0021ed0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021ed4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021ed8:	89 d7                	mov    edi,edx
c0021eda:	89 c6                	mov    esi,eax
c0021edc:	eb cd                	jmp    c0021eab <__umoddi3+0xe7>
c0021ede:	66 90                	xchg   ax,ax

c0021ee0 <acos>:
c0021ee0:	83 ec 4c             	sub    esp,0x4c
c0021ee3:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0021ee7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0021eeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021eef:	89 d0                	mov    eax,edx
c0021ef1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0021ef6:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c0021efb:	7e 23                	jle    c0021f20 <acos+0x40>
c0021efd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021f01:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0021f06:	09 c8                	or     eax,ecx
c0021f08:	0f 85 32 01 00 00    	jne    c0022040 <acos+0x160>
c0021f0e:	85 d2                	test   edx,edx
c0021f10:	0f 8e 4a 01 00 00    	jle    c0022060 <acos+0x180>
c0021f16:	d9 ee                	fldz   
c0021f18:	83 c4 4c             	add    esp,0x4c
c0021f1b:	c3                   	ret    
c0021f1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0021f20:	3d ff ff df 3f       	cmp    eax,0x3fdfffff
c0021f25:	7f 29                	jg     c0021f50 <acos+0x70>
c0021f27:	3d 00 00 60 3c       	cmp    eax,0x3c600000
c0021f2c:	0f 8f 4e 01 00 00    	jg     c0022080 <acos+0x1a0>
c0021f32:	dd 05 08 b7 02 c0    	fld    QWORD PTR ds:0xc002b708
c0021f38:	dc 05 28 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d28
c0021f3e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0021f42:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0021f46:	83 c4 4c             	add    esp,0x4c
c0021f49:	c3                   	ret    
c0021f4a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0021f50:	85 d2                	test   edx,edx
c0021f52:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0021f56:	0f 88 d4 01 00 00    	js     c0022130 <acos+0x250>
c0021f5c:	d9 e8                	fld1   
c0021f5e:	de e1                	fsubrp st(1),st
c0021f60:	d8 0d 84 9d 02 c0    	fmul   DWORD PTR ds:0xc0029d84
c0021f66:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0021f6a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0021f6e:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0021f72:	dd 1c 24             	fstp   QWORD PTR [esp]
c0021f75:	e8 36 27 00 00       	call   c00246b0 <sqrt>
c0021f7a:	31 c0                	xor    eax,eax
c0021f7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0021f80:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0021f84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0021f8c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0021f90:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0021f94:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0021f98:	d9 c1                	fld    st(1)
c0021f9a:	dc 0d 30 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d30
c0021fa0:	dc 05 38 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d38
c0021fa6:	d8 ca                	fmul   st,st(2)
c0021fa8:	dc 25 40 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d40
c0021fae:	d8 ca                	fmul   st,st(2)
c0021fb0:	dc 05 48 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d48
c0021fb6:	d8 ca                	fmul   st,st(2)
c0021fb8:	dc 25 50 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d50
c0021fbe:	d8 ca                	fmul   st,st(2)
c0021fc0:	dc 05 58 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d58
c0021fc6:	d8 ca                	fmul   st,st(2)
c0021fc8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0021fcc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0021fd0:	d9 c2                	fld    st(2)
c0021fd2:	dc 0d 60 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d60
c0021fd8:	dc 25 68 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d68
c0021fde:	d8 cb                	fmul   st,st(3)
c0021fe0:	dc 05 70 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d70
c0021fe6:	d8 cb                	fmul   st,st(3)
c0021fe8:	dc 25 78 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d78
c0021fee:	d8 cb                	fmul   st,st(3)
c0021ff0:	d9 e8                	fld1   
c0021ff2:	de c1                	faddp  st(1),st
c0021ff4:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0021ff8:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0021ffc:	de f9                	fdivp  st(1),st
c0021ffe:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022002:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022006:	d8 c9                	fmul   st,st(1)
c0022008:	d9 c3                	fld    st(3)
c002200a:	d8 cc                	fmul   st,st(4)
c002200c:	de eb                	fsubp  st(3),st
c002200e:	d9 c9                	fxch   st(1)
c0022010:	d8 c3                	fadd   st,st(3)
c0022012:	de fa                	fdivp  st(2),st
c0022014:	d9 c9                	fxch   st(1)
c0022016:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002201a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002201e:	de c1                	faddp  st(1),st
c0022020:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022024:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022028:	de c1                	faddp  st(1),st
c002202a:	d8 c0                	fadd   st,st(0)
c002202c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022030:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022034:	83 c4 4c             	add    esp,0x4c
c0022037:	c3                   	ret    
c0022038:	90                   	nop
c0022039:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022040:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022044:	d8 e0                	fsub   st,st(0)
c0022046:	d8 f0                	fdiv   st,st(0)
c0022048:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002204c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022050:	83 c4 4c             	add    esp,0x4c
c0022053:	c3                   	ret    
c0022054:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002205a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022060:	dd 05 08 b7 02 c0    	fld    QWORD PTR ds:0xc002b708
c0022066:	d8 c0                	fadd   st,st(0)
c0022068:	dc 05 20 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d20
c002206e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022072:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022076:	83 c4 4c             	add    esp,0x4c
c0022079:	c3                   	ret    
c002207a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022080:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022084:	d9 c0                	fld    st(0)
c0022086:	d8 c9                	fmul   st,st(1)
c0022088:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002208c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022090:	dd 05 08 b7 02 c0    	fld    QWORD PTR ds:0xc002b708
c0022096:	d9 c1                	fld    st(1)
c0022098:	dc 0d 30 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d30
c002209e:	dc 05 38 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d38
c00220a4:	d8 ca                	fmul   st,st(2)
c00220a6:	dc 25 40 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d40
c00220ac:	d8 ca                	fmul   st,st(2)
c00220ae:	dc 05 48 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d48
c00220b4:	d8 ca                	fmul   st,st(2)
c00220b6:	dc 25 50 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d50
c00220bc:	d8 ca                	fmul   st,st(2)
c00220be:	dc 05 58 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d58
c00220c4:	d8 ca                	fmul   st,st(2)
c00220c6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00220ca:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00220ce:	d9 c2                	fld    st(2)
c00220d0:	dc 0d 60 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d60
c00220d6:	dc 25 68 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d68
c00220dc:	d8 cb                	fmul   st,st(3)
c00220de:	dc 05 70 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d70
c00220e4:	d8 cb                	fmul   st,st(3)
c00220e6:	dc 25 78 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d78
c00220ec:	de cb                	fmulp  st(3),st
c00220ee:	d9 ca                	fxch   st(2)
c00220f0:	d8 05 80 9d 02 c0    	fadd   DWORD PTR ds:0xc0029d80
c00220f6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00220fa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00220fe:	de fa                	fdivp  st(2),st
c0022100:	d9 c9                	fxch   st(1)
c0022102:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022106:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002210a:	d8 ca                	fmul   st,st(2)
c002210c:	de e9                	fsubp  st(1),st
c002210e:	de e9                	fsubp  st(1),st
c0022110:	dc 2d 28 9d 02 c0    	fsubr  QWORD PTR ds:0xc0029d28
c0022116:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002211a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002211e:	83 c4 4c             	add    esp,0x4c
c0022121:	c3                   	ret    
c0022122:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022129:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022130:	d9 e8                	fld1   
c0022132:	de c1                	faddp  st(1),st
c0022134:	d8 0d 84 9d 02 c0    	fmul   DWORD PTR ds:0xc0029d84
c002213a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002213e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022142:	d9 c0                	fld    st(0)
c0022144:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0022148:	dd 1c 24             	fstp   QWORD PTR [esp]
c002214b:	e8 60 25 00 00       	call   c00246b0 <sqrt>
c0022150:	dd 05 08 b7 02 c0    	fld    QWORD PTR ds:0xc002b708
c0022156:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c002215a:	d9 c0                	fld    st(0)
c002215c:	dc 0d 30 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d30
c0022162:	dc 05 38 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d38
c0022168:	d8 c9                	fmul   st,st(1)
c002216a:	dc 25 40 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d40
c0022170:	d8 c9                	fmul   st,st(1)
c0022172:	dc 05 48 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d48
c0022178:	d8 c9                	fmul   st,st(1)
c002217a:	dc 25 50 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d50
c0022180:	d8 c9                	fmul   st,st(1)
c0022182:	dc 05 58 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d58
c0022188:	d8 c9                	fmul   st,st(1)
c002218a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002218e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022192:	d9 c1                	fld    st(1)
c0022194:	dc 0d 60 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d60
c002219a:	dc 25 68 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d68
c00221a0:	d8 ca                	fmul   st,st(2)
c00221a2:	dc 05 70 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d70
c00221a8:	d8 ca                	fmul   st,st(2)
c00221aa:	dc 25 78 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d78
c00221b0:	de ca                	fmulp  st(2),st
c00221b2:	d9 e8                	fld1   
c00221b4:	de c2                	faddp  st(2),st
c00221b6:	d9 c9                	fxch   st(1)
c00221b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221bc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221c0:	de f9                	fdivp  st(1),st
c00221c2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221c6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221ca:	d8 ca                	fmul   st,st(2)
c00221cc:	de e1                	fsubrp st(1),st
c00221ce:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221d6:	de c1                	faddp  st(1),st
c00221d8:	d8 c0                	fadd   st,st(0)
c00221da:	dc 2d 20 9d 02 c0    	fsubr  QWORD PTR ds:0xc0029d20
c00221e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00221e4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00221e8:	83 c4 4c             	add    esp,0x4c
c00221eb:	c3                   	ret    
c00221ec:	66 90                	xchg   ax,ax
c00221ee:	66 90                	xchg   ax,ax

c00221f0 <asin>:
c00221f0:	56                   	push   esi
c00221f1:	53                   	push   ebx
c00221f2:	83 ec 44             	sub    esp,0x44
c00221f5:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00221f9:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00221fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022201:	89 f3                	mov    ebx,esi
c0022203:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022209:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002220f:	7e 4f                	jle    c0022260 <asin+0x70>
c0022211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022215:	81 eb 00 00 f0 3f    	sub    ebx,0x3ff00000
c002221b:	09 c3                	or     ebx,eax
c002221d:	74 21                	je     c0022240 <asin+0x50>
c002221f:	d8 e0                	fsub   st,st(0)
c0022221:	d8 f0                	fdiv   st,st(0)
c0022223:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022227:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002222b:	eb 05                	jmp    c0022232 <asin+0x42>
c002222d:	8d 76 00             	lea    esi,[esi+0x0]
c0022230:	dd d9                	fstp   st(1)
c0022232:	83 c4 44             	add    esp,0x44
c0022235:	5b                   	pop    ebx
c0022236:	5e                   	pop    esi
c0022237:	c3                   	ret    
c0022238:	90                   	nop
c0022239:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022240:	d9 c0                	fld    st(0)
c0022242:	dc 0d 28 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d28
c0022248:	d9 c9                	fxch   st(1)
c002224a:	dc 0d 88 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d88
c0022250:	de c1                	faddp  st(1),st
c0022252:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022256:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002225a:	83 c4 44             	add    esp,0x44
c002225d:	5b                   	pop    ebx
c002225e:	5e                   	pop    esi
c002225f:	c3                   	ret    
c0022260:	dd d8                	fstp   st(0)
c0022262:	81 fb ff ff df 3f    	cmp    ebx,0x3fdfffff
c0022268:	0f 8f b2 00 00 00    	jg     c0022320 <asin+0x130>
c002226e:	81 fb ff ff 4f 3e    	cmp    ebx,0x3e4fffff
c0022274:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022278:	7f 16                	jg     c0022290 <asin+0xa0>
c002227a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002227e:	d9 e8                	fld1   
c0022280:	d9 c2                	fld    st(2)
c0022282:	dc 05 90 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d90
c0022288:	df f1                	fcomip st,st(1)
c002228a:	dd d8                	fstp   st(0)
c002228c:	77 a2                	ja     c0022230 <asin+0x40>
c002228e:	dd d8                	fstp   st(0)
c0022290:	d9 c0                	fld    st(0)
c0022292:	d8 c9                	fmul   st,st(1)
c0022294:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022298:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002229c:	d9 c0                	fld    st(0)
c002229e:	dc 0d 30 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d30
c00222a4:	dc 05 38 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d38
c00222aa:	d8 c9                	fmul   st,st(1)
c00222ac:	dc 25 40 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d40
c00222b2:	d8 c9                	fmul   st,st(1)
c00222b4:	dc 05 48 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d48
c00222ba:	d8 c9                	fmul   st,st(1)
c00222bc:	dc 25 50 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d50
c00222c2:	d8 c9                	fmul   st,st(1)
c00222c4:	dc 05 58 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d58
c00222ca:	d8 c9                	fmul   st,st(1)
c00222cc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00222d0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00222d4:	d9 c1                	fld    st(1)
c00222d6:	dc 0d 60 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d60
c00222dc:	dc 25 68 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d68
c00222e2:	d8 ca                	fmul   st,st(2)
c00222e4:	dc 05 70 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d70
c00222ea:	d8 ca                	fmul   st,st(2)
c00222ec:	dc 25 78 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d78
c00222f2:	de ca                	fmulp  st(2),st
c00222f4:	d9 c9                	fxch   st(1)
c00222f6:	d8 05 80 9d 02 c0    	fadd   DWORD PTR ds:0xc0029d80
c00222fc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022300:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022304:	de f9                	fdivp  st(1),st
c0022306:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002230a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002230e:	d8 c9                	fmul   st,st(1)
c0022310:	de c1                	faddp  st(1),st
c0022312:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022316:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002231a:	83 c4 44             	add    esp,0x44
c002231d:	5b                   	pop    ebx
c002231e:	5e                   	pop    esi
c002231f:	c3                   	ret    
c0022320:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022324:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022327:	e8 34 1d 00 00       	call   c0024060 <fabs>
c002232c:	d9 e8                	fld1   
c002232e:	dc e1                	fsubr  st(1),st
c0022330:	d9 c9                	fxch   st(1)
c0022332:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022336:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002233a:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c0022340:	de c9                	fmulp  st(1),st
c0022342:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022346:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002234a:	d9 c0                	fld    st(0)
c002234c:	d9 c0                	fld    st(0)
c002234e:	dc 0d 30 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d30
c0022354:	dc 05 38 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d38
c002235a:	d8 c9                	fmul   st,st(1)
c002235c:	dc 25 40 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d40
c0022362:	d8 c9                	fmul   st,st(1)
c0022364:	dc 05 48 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d48
c002236a:	d8 c9                	fmul   st,st(1)
c002236c:	dc 25 50 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d50
c0022372:	d8 c9                	fmul   st,st(1)
c0022374:	dc 05 58 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d58
c002237a:	d8 c9                	fmul   st,st(1)
c002237c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022380:	d9 c0                	fld    st(0)
c0022382:	dc 0d 60 9d 02 c0    	fmul   QWORD PTR ds:0xc0029d60
c0022388:	dc 25 68 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d68
c002238e:	d8 c9                	fmul   st,st(1)
c0022390:	dc 05 70 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d70
c0022396:	d8 c9                	fmul   st,st(1)
c0022398:	dc 25 78 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d78
c002239e:	d8 c9                	fmul   st,st(1)
c00223a0:	d9 c9                	fxch   st(1)
c00223a2:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00223a6:	de c2                	faddp  st(2),st
c00223a8:	d9 c9                	fxch   st(1)
c00223aa:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00223ae:	dd 1c 24             	fstp   QWORD PTR [esp]
c00223b1:	e8 fa 22 00 00       	call   c00246b0 <sqrt>
c00223b6:	81 fb 32 33 ef 3f    	cmp    ebx,0x3fef3332
c00223bc:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00223c0:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00223c4:	7e 4a                	jle    c0022410 <asin+0x220>
c00223c6:	dd d8                	fstp   st(0)
c00223c8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00223cc:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c00223d0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00223d4:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00223d8:	d8 c9                	fmul   st,st(1)
c00223da:	de c1                	faddp  st(1),st
c00223dc:	d8 c0                	fadd   st,st(0)
c00223de:	dc 25 88 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d88
c00223e4:	dc 2d 28 9d 02 c0    	fsubr  QWORD PTR ds:0xc0029d28
c00223ea:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00223ee:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00223f2:	85 f6                	test   esi,esi
c00223f4:	0f 8f 38 fe ff ff    	jg     c0022232 <asin+0x42>
c00223fa:	d9 e0                	fchs   
c00223fc:	e9 31 fe ff ff       	jmp    c0022232 <asin+0x42>
c0022401:	eb 0d                	jmp    c0022410 <asin+0x220>
c0022403:	90                   	nop
c0022404:	90                   	nop
c0022405:	90                   	nop
c0022406:	90                   	nop
c0022407:	90                   	nop
c0022408:	90                   	nop
c0022409:	90                   	nop
c002240a:	90                   	nop
c002240b:	90                   	nop
c002240c:	90                   	nop
c002240d:	90                   	nop
c002240e:	90                   	nop
c002240f:	90                   	nop
c0022410:	dd d9                	fstp   st(1)
c0022412:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022416:	31 c0                	xor    eax,eax
c0022418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002241c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022420:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022424:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022428:	d9 c0                	fld    st(0)
c002242a:	d8 c1                	fadd   st,st(1)
c002242c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022430:	dc 74 24 30          	fdiv   QWORD PTR [esp+0x30]
c0022434:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022438:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002243c:	de c9                	fmulp  st(1),st
c002243e:	d9 c2                	fld    st(2)
c0022440:	d8 cb                	fmul   st,st(3)
c0022442:	de ec                	fsubp  st(4),st
c0022444:	d9 c9                	fxch   st(1)
c0022446:	d8 c2                	fadd   st,st(2)
c0022448:	de fb                	fdivp  st(3),st
c002244a:	d9 ca                	fxch   st(2)
c002244c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022450:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022454:	d8 c0                	fadd   st,st(0)
c0022456:	dc 2d 88 9d 02 c0    	fsubr  QWORD PTR ds:0xc0029d88
c002245c:	de ea                	fsubp  st(2),st
c002245e:	d9 c9                	fxch   st(1)
c0022460:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022464:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0022468:	d9 c9                	fxch   st(1)
c002246a:	d8 c0                	fadd   st,st(0)
c002246c:	dd 05 98 9d 02 c0    	fld    QWORD PTR ds:0xc0029d98
c0022472:	dc e1                	fsubr  st(1),st
c0022474:	d9 c9                	fxch   st(1)
c0022476:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002247a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002247e:	de ea                	fsubp  st(2),st
c0022480:	de e1                	fsubrp st(1),st
c0022482:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0022486:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002248a:	e9 63 ff ff ff       	jmp    c00223f2 <asin+0x202>
c002248f:	90                   	nop

c0022490 <atan2>:
c0022490:	83 ec 4c             	sub    esp,0x4c
c0022493:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0022497:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002249b:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002249f:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c00224a3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00224a7:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c00224ab:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00224af:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00224b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224bb:	89 c1                	mov    ecx,eax
c00224bd:	f7 d9                	neg    ecx
c00224bf:	89 d3                	mov    ebx,edx
c00224c1:	09 c1                	or     ecx,eax
c00224c3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00224c9:	c1 e9 1f             	shr    ecx,0x1f
c00224cc:	09 d9                	or     ecx,ebx
c00224ce:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c00224d4:	77 7a                	ja     c0022550 <atan2+0xc0>
c00224d6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00224da:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00224de:	89 f1                	mov    ecx,esi
c00224e0:	f7 d9                	neg    ecx
c00224e2:	89 ef                	mov    edi,ebp
c00224e4:	09 f1                	or     ecx,esi
c00224e6:	81 e7 ff ff ff 7f    	and    edi,0x7fffffff
c00224ec:	c1 e9 1f             	shr    ecx,0x1f
c00224ef:	09 f9                	or     ecx,edi
c00224f1:	81 f9 00 00 f0 7f    	cmp    ecx,0x7ff00000
c00224f7:	77 57                	ja     c0022550 <atan2+0xc0>
c00224f9:	81 fa 00 00 f0 3f    	cmp    edx,0x3ff00000
c00224ff:	75 08                	jne    c0022509 <atan2+0x79>
c0022501:	85 c0                	test   eax,eax
c0022503:	0f 84 f7 00 00 00    	je     c0022600 <atan2+0x170>
c0022509:	89 d1                	mov    ecx,edx
c002250b:	c1 f9 1e             	sar    ecx,0x1e
c002250e:	83 e1 02             	and    ecx,0x2
c0022511:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0022515:	89 e9                	mov    ecx,ebp
c0022517:	c1 e9 1f             	shr    ecx,0x1f
c002251a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c002251e:	09 fe                	or     esi,edi
c0022520:	75 5e                	jne    c0022580 <atan2+0xf0>
c0022522:	83 f9 02             	cmp    ecx,0x2
c0022525:	0f 84 65 01 00 00    	je     c0022690 <atan2+0x200>
c002252b:	83 f9 03             	cmp    ecx,0x3
c002252e:	0f 85 1c 01 00 00    	jne    c0022650 <atan2+0x1c0>
c0022534:	dd 05 18 b7 02 c0    	fld    QWORD PTR ds:0xc002b718
c002253a:	dd 05 a0 9d 02 c0    	fld    QWORD PTR ds:0xc0029da0
c0022540:	de e1                	fsubrp st(1),st
c0022542:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022546:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002254a:	eb 14                	jmp    c0022560 <atan2+0xd0>
c002254c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022550:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022554:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0022558:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002255c:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022560:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022564:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0022568:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002256c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022570:	83 c4 4c             	add    esp,0x4c
c0022573:	c3                   	ret    
c0022574:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002257a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022580:	09 d8                	or     eax,ebx
c0022582:	0f 84 98 00 00 00    	je     c0022620 <atan2+0x190>
c0022588:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c002258e:	0f 84 1c 01 00 00    	je     c00226b0 <atan2+0x220>
c0022594:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c002259a:	0f 84 80 00 00 00    	je     c0022620 <atan2+0x190>
c00225a0:	29 df                	sub    edi,ebx
c00225a2:	c1 ff 14             	sar    edi,0x14
c00225a5:	83 ff 3c             	cmp    edi,0x3c
c00225a8:	0f 8f b2 00 00 00    	jg     c0022660 <atan2+0x1d0>
c00225ae:	c1 ea 1f             	shr    edx,0x1f
c00225b1:	84 d2                	test   dl,dl
c00225b3:	0f 84 97 01 00 00    	je     c0022750 <atan2+0x2c0>
c00225b9:	83 ff c4             	cmp    edi,0xffffffc4
c00225bc:	0f 8d 8e 01 00 00    	jge    c0022750 <atan2+0x2c0>
c00225c2:	d9 ee                	fldz   
c00225c4:	83 f9 01             	cmp    ecx,0x1
c00225c7:	0f 84 02 01 00 00    	je     c00226cf <atan2+0x23f>
c00225cd:	83 f9 02             	cmp    ecx,0x2
c00225d0:	0f 84 2a 01 00 00    	je     c0022700 <atan2+0x270>
c00225d6:	85 c9                	test   ecx,ecx
c00225d8:	74 86                	je     c0022560 <atan2+0xd0>
c00225da:	dd 05 10 b7 02 c0    	fld    QWORD PTR ds:0xc002b710
c00225e0:	de e9                	fsubp  st(1),st
c00225e2:	dc 25 20 9d 02 c0    	fsub   QWORD PTR ds:0xc0029d20
c00225e8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00225ec:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00225f0:	e9 6b ff ff ff       	jmp    c0022560 <atan2+0xd0>
c00225f5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00225f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022600:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022604:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0022608:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002260c:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0022610:	83 c4 4c             	add    esp,0x4c
c0022613:	e9 a8 11 00 00       	jmp    c00237c0 <atan>
c0022618:	90                   	nop
c0022619:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022620:	85 ed                	test   ebp,ebp
c0022622:	0f 88 b8 00 00 00    	js     c00226e0 <atan2+0x250>
c0022628:	dd 05 18 b7 02 c0    	fld    QWORD PTR ds:0xc002b718
c002262e:	dc 05 28 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d28
c0022634:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022638:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002263c:	e9 1f ff ff ff       	jmp    c0022560 <atan2+0xd0>
c0022641:	eb 0d                	jmp    c0022650 <atan2+0x1c0>
c0022643:	90                   	nop
c0022644:	90                   	nop
c0022645:	90                   	nop
c0022646:	90                   	nop
c0022647:	90                   	nop
c0022648:	90                   	nop
c0022649:	90                   	nop
c002264a:	90                   	nop
c002264b:	90                   	nop
c002264c:	90                   	nop
c002264d:	90                   	nop
c002264e:	90                   	nop
c002264f:	90                   	nop
c0022650:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022654:	e9 07 ff ff ff       	jmp    c0022560 <atan2+0xd0>
c0022659:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022660:	dd 05 10 b7 02 c0    	fld    QWORD PTR ds:0xc002b710
c0022666:	83 e1 01             	and    ecx,0x1
c0022669:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c002266f:	de c9                	fmulp  st(1),st
c0022671:	dc 05 28 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d28
c0022677:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002267b:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002267f:	e9 40 ff ff ff       	jmp    c00225c4 <atan2+0x134>
c0022684:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002268a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022690:	dd 05 18 b7 02 c0    	fld    QWORD PTR ds:0xc002b718
c0022696:	dc 05 20 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d20
c002269c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00226a0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00226a4:	e9 b7 fe ff ff       	jmp    c0022560 <atan2+0xd0>
c00226a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00226b0:	81 ff 00 00 f0 7f    	cmp    edi,0x7ff00000
c00226b6:	74 68                	je     c0022720 <atan2+0x290>
c00226b8:	83 f9 02             	cmp    ecx,0x2
c00226bb:	74 d3                	je     c0022690 <atan2+0x200>
c00226bd:	83 f9 03             	cmp    ecx,0x3
c00226c0:	0f 84 6e fe ff ff    	je     c0022534 <atan2+0xa4>
c00226c6:	d9 ee                	fldz   
c00226c8:	49                   	dec    ecx
c00226c9:	0f 85 91 fe ff ff    	jne    c0022560 <atan2+0xd0>
c00226cf:	d9 e0                	fchs   
c00226d1:	e9 8a fe ff ff       	jmp    c0022560 <atan2+0xd0>
c00226d6:	8d 76 00             	lea    esi,[esi+0x0]
c00226d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00226e0:	dd 05 18 b7 02 c0    	fld    QWORD PTR ds:0xc002b718
c00226e6:	dd 05 a8 9d 02 c0    	fld    QWORD PTR ds:0xc0029da8
c00226ec:	de e1                	fsubrp st(1),st
c00226ee:	e9 41 ff ff ff       	jmp    c0022634 <atan2+0x1a4>
c00226f3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00226f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022700:	dd 05 10 b7 02 c0    	fld    QWORD PTR ds:0xc002b710
c0022706:	de e9                	fsubp  st(1),st
c0022708:	dc 2d 20 9d 02 c0    	fsubr  QWORD PTR ds:0xc0029d20
c002270e:	e9 21 ff ff ff       	jmp    c0022634 <atan2+0x1a4>
c0022713:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022720:	83 f9 02             	cmp    ecx,0x2
c0022723:	0f 84 82 00 00 00    	je     c00227ab <atan2+0x31b>
c0022729:	83 f9 03             	cmp    ecx,0x3
c002272c:	74 62                	je     c0022790 <atan2+0x300>
c002272e:	49                   	dec    ecx
c002272f:	90                   	nop
c0022730:	74 43                	je     c0022775 <atan2+0x2e5>
c0022732:	dd 05 18 b7 02 c0    	fld    QWORD PTR ds:0xc002b718
c0022738:	dc 05 98 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d98
c002273e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022742:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022746:	e9 15 fe ff ff       	jmp    c0022560 <atan2+0xd0>
c002274b:	90                   	nop
c002274c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022750:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0022754:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022758:	dc 74 24 10          	fdiv   QWORD PTR [esp+0x10]
c002275c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002275f:	e8 fc 18 00 00       	call   c0024060 <fabs>
c0022764:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022767:	e8 54 10 00 00       	call   c00237c0 <atan>
c002276c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022770:	e9 4f fe ff ff       	jmp    c00225c4 <atan2+0x134>
c0022775:	dd 05 18 b7 02 c0    	fld    QWORD PTR ds:0xc002b718
c002277b:	dd 05 b0 9d 02 c0    	fld    QWORD PTR ds:0xc0029db0
c0022781:	de e1                	fsubrp st(1),st
c0022783:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022787:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002278b:	e9 d0 fd ff ff       	jmp    c0022560 <atan2+0xd0>
c0022790:	dd 05 18 b7 02 c0    	fld    QWORD PTR ds:0xc002b718
c0022796:	dd 05 c0 9d 02 c0    	fld    QWORD PTR ds:0xc0029dc0
c002279c:	de e1                	fsubrp st(1),st
c002279e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00227a2:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00227a6:	e9 b5 fd ff ff       	jmp    c0022560 <atan2+0xd0>
c00227ab:	dd 05 18 b7 02 c0    	fld    QWORD PTR ds:0xc002b718
c00227b1:	dc 05 b8 9d 02 c0    	fadd   QWORD PTR ds:0xc0029db8
c00227b7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00227bb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00227bf:	e9 9c fd ff ff       	jmp    c0022560 <atan2+0xd0>
c00227c4:	66 90                	xchg   ax,ax
c00227c6:	66 90                	xchg   ax,ax
c00227c8:	66 90                	xchg   ax,ax
c00227ca:	66 90                	xchg   ax,ax
c00227cc:	66 90                	xchg   ax,ax
c00227ce:	66 90                	xchg   ax,ax

c00227d0 <cosh>:
c00227d0:	53                   	push   ebx
c00227d1:	83 ec 28             	sub    esp,0x28
c00227d4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00227d8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00227dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00227e0:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00227e6:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c00227ec:	0f 8f 9e 00 00 00    	jg     c0022890 <cosh+0xc0>
c00227f2:	dd d8                	fstp   st(0)
c00227f4:	81 fb 42 2e d6 3f    	cmp    ebx,0x3fd62e42
c00227fa:	7e 44                	jle    c0022840 <cosh+0x70>
c00227fc:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0022802:	0f 8e a8 00 00 00    	jle    c00228b0 <cosh+0xe0>
c0022808:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c002280e:	0f 8e dc 00 00 00    	jle    c00228f0 <cosh+0x120>
c0022814:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c002281a:	0f 8e 00 01 00 00    	jle    c0022920 <cosh+0x150>
c0022820:	d9 05 c8 9d 02 c0    	fld    DWORD PTR ds:0xc0029dc8
c0022826:	eb 0c                	jmp    c0022834 <cosh+0x64>
c0022828:	90                   	nop
c0022829:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022830:	dd d9                	fstp   st(1)
c0022832:	dd d9                	fstp   st(1)
c0022834:	83 c4 28             	add    esp,0x28
c0022837:	5b                   	pop    ebx
c0022838:	c3                   	ret    
c0022839:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022840:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022844:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022847:	e8 14 18 00 00       	call   c0024060 <fabs>
c002284c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002284f:	e8 7c 13 00 00       	call   c0023bd0 <expm1>
c0022854:	81 fb ff ff 7f 3c    	cmp    ebx,0x3c7fffff
c002285a:	d9 e8                	fld1   
c002285c:	d9 c1                	fld    st(1)
c002285e:	d8 c1                	fadd   st,st(1)
c0022860:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022864:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022868:	7e c6                	jle    c0022830 <cosh+0x60>
c002286a:	d9 ca                	fxch   st(2)
c002286c:	d8 c8                	fmul   st,st(0)
c002286e:	d9 ca                	fxch   st(2)
c0022870:	d8 c0                	fadd   st,st(0)
c0022872:	de fa                	fdivp  st(2),st
c0022874:	de c1                	faddp  st(1),st
c0022876:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002287a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002287e:	83 c4 28             	add    esp,0x28
c0022881:	5b                   	pop    ebx
c0022882:	c3                   	ret    
c0022883:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022889:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022890:	d9 c0                	fld    st(0)
c0022892:	de c9                	fmulp  st(1),st
c0022894:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022898:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002289c:	83 c4 28             	add    esp,0x28
c002289f:	5b                   	pop    ebx
c00228a0:	c3                   	ret    
c00228a1:	eb 0d                	jmp    c00228b0 <cosh+0xe0>
c00228a3:	90                   	nop
c00228a4:	90                   	nop
c00228a5:	90                   	nop
c00228a6:	90                   	nop
c00228a7:	90                   	nop
c00228a8:	90                   	nop
c00228a9:	90                   	nop
c00228aa:	90                   	nop
c00228ab:	90                   	nop
c00228ac:	90                   	nop
c00228ad:	90                   	nop
c00228ae:	90                   	nop
c00228af:	90                   	nop
c00228b0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00228b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00228b7:	e8 a4 17 00 00       	call   c0024060 <fabs>
c00228bc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00228bf:	e8 54 1d 00 00       	call   c0024618 <exp>
c00228c4:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c00228ca:	d9 c1                	fld    st(1)
c00228cc:	d8 c9                	fmul   st,st(1)
c00228ce:	d9 c9                	fxch   st(1)
c00228d0:	de f2                	fdivrp st(2),st
c00228d2:	de c1                	faddp  st(1),st
c00228d4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00228d8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00228dc:	e9 53 ff ff ff       	jmp    c0022834 <cosh+0x64>
c00228e1:	eb 0d                	jmp    c00228f0 <cosh+0x120>
c00228e3:	90                   	nop
c00228e4:	90                   	nop
c00228e5:	90                   	nop
c00228e6:	90                   	nop
c00228e7:	90                   	nop
c00228e8:	90                   	nop
c00228e9:	90                   	nop
c00228ea:	90                   	nop
c00228eb:	90                   	nop
c00228ec:	90                   	nop
c00228ed:	90                   	nop
c00228ee:	90                   	nop
c00228ef:	90                   	nop
c00228f0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00228f4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00228f7:	e8 64 17 00 00       	call   c0024060 <fabs>
c00228fc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00228ff:	e8 14 1d 00 00       	call   c0024618 <exp>
c0022904:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c002290a:	de c9                	fmulp  st(1),st
c002290c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022910:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022914:	e9 1b ff ff ff       	jmp    c0022834 <cosh+0x64>
c0022919:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0022920:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022924:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022927:	e8 34 17 00 00       	call   c0024060 <fabs>
c002292c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0022931:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022935:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022938:	e8 d3 0c 00 00       	call   c0023610 <__ldexp_exp>
c002293d:	e9 f2 fe ff ff       	jmp    c0022834 <cosh+0x64>
c0022942:	66 90                	xchg   ax,ax
c0022944:	66 90                	xchg   ax,ax
c0022946:	66 90                	xchg   ax,ax
c0022948:	66 90                	xchg   ax,ax
c002294a:	66 90                	xchg   ax,ax
c002294c:	66 90                	xchg   ax,ax
c002294e:	66 90                	xchg   ax,ax

c0022950 <pow>:
c0022950:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0022956:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
c002295d:	dd 84 24 a0 00 00 00 	fld    QWORD PTR [esp+0xa0]
c0022964:	89 9c 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],ebx
c002296b:	89 bc 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],edi
c0022972:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0022976:	89 ac 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],ebp
c002297d:	dd 84 24 a8 00 00 00 	fld    QWORD PTR [esp+0xa8]
c0022984:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0022988:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002298c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022990:	89 f3                	mov    ebx,esi
c0022992:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0022998:	89 d9                	mov    ecx,ebx
c002299a:	09 c1                	or     ecx,eax
c002299c:	0f 84 9e 00 00 00    	je     c0022a40 <pow+0xf0>
c00229a2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00229a6:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00229aa:	81 ff 00 00 f0 3f    	cmp    edi,0x3ff00000
c00229b0:	75 3e                	jne    c00229f0 <pow+0xa0>
c00229b2:	85 ed                	test   ebp,ebp
c00229b4:	75 3a                	jne    c00229f0 <pow+0xa0>
c00229b6:	d9 e8                	fld1   
c00229b8:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00229bc:	eb 02                	jmp    c00229c0 <pow+0x70>
c00229be:	dd d8                	fstp   st(0)
c00229c0:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00229c4:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c00229cb:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c00229d2:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c00229d9:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c00229e0:	81 c4 9c 00 00 00    	add    esp,0x9c
c00229e6:	c3                   	ret    
c00229e7:	89 f6                	mov    esi,esi
c00229e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00229f0:	89 fa                	mov    edx,edi
c00229f2:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00229f8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00229fc:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c0022a02:	7f 1c                	jg     c0022a20 <pow+0xd0>
c0022a04:	0f 94 c1             	sete   cl
c0022a07:	85 ed                	test   ebp,ebp
c0022a09:	0f 95 c2             	setne  dl
c0022a0c:	84 ca                	test   dl,cl
c0022a0e:	75 10                	jne    c0022a20 <pow+0xd0>
c0022a10:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0022a16:	7f 08                	jg     c0022a20 <pow+0xd0>
c0022a18:	75 36                	jne    c0022a50 <pow+0x100>
c0022a1a:	85 c0                	test   eax,eax
c0022a1c:	74 32                	je     c0022a50 <pow+0x100>
c0022a1e:	66 90                	xchg   ax,ax
c0022a20:	d9 ee                	fldz   
c0022a22:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022a26:	d8 c1                	fadd   st,st(1)
c0022a28:	d9 c9                	fxch   st(1)
c0022a2a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0022a2e:	de c1                	faddp  st(1),st
c0022a30:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022a34:	eb 8a                	jmp    c00229c0 <pow+0x70>
c0022a36:	8d 76 00             	lea    esi,[esi+0x0]
c0022a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022a40:	d9 e8                	fld1   
c0022a42:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022a46:	e9 75 ff ff ff       	jmp    c00229c0 <pow+0x70>
c0022a4b:	90                   	nop
c0022a4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022a50:	31 c9                	xor    ecx,ecx
c0022a52:	85 ff                	test   edi,edi
c0022a54:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0022a58:	0f 88 22 01 00 00    	js     c0022b80 <pow+0x230>
c0022a5e:	85 c0                	test   eax,eax
c0022a60:	75 5e                	jne    c0022ac0 <pow+0x170>
c0022a62:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c0022a68:	0f 84 72 01 00 00    	je     c0022be0 <pow+0x290>
c0022a6e:	81 fb 00 00 f0 3f    	cmp    ebx,0x3ff00000
c0022a74:	0f 84 b6 01 00 00    	je     c0022c30 <pow+0x2e0>
c0022a7a:	81 fe 00 00 00 40    	cmp    esi,0x40000000
c0022a80:	0f 84 38 07 00 00    	je     c00231be <pow+0x86e>
c0022a86:	81 fe 00 00 08 40    	cmp    esi,0x40080000
c0022a8c:	0f 84 33 08 00 00    	je     c00232c5 <pow+0x975>
c0022a92:	81 fe 00 00 10 40    	cmp    esi,0x40100000
c0022a98:	0f 84 4f 08 00 00    	je     c00232ed <pow+0x99d>
c0022a9e:	81 fe 00 00 e0 3f    	cmp    esi,0x3fe00000
c0022aa4:	75 1a                	jne    c0022ac0 <pow+0x170>
c0022aa6:	89 f8                	mov    eax,edi
c0022aa8:	f7 d0                	not    eax
c0022aaa:	c1 e8 1f             	shr    eax,0x1f
c0022aad:	84 c0                	test   al,al
c0022aaf:	0f 85 f1 08 00 00    	jne    c00233a6 <pow+0xa56>
c0022ab5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0022ab9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022ac0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022ac4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0022ac7:	e8 94 15 00 00       	call   c0024060 <fabs>
c0022acc:	85 ed                	test   ebp,ebp
c0022ace:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022ad2:	75 1e                	jne    c0022af2 <pow+0x1a2>
c0022ad4:	89 f8                	mov    eax,edi
c0022ad6:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0022adb:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0022ae0:	0f 84 33 06 00 00    	je     c0023119 <pow+0x7c9>
c0022ae6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022aea:	85 c0                	test   eax,eax
c0022aec:	0f 84 27 06 00 00    	je     c0023119 <pow+0x7c9>
c0022af2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022af6:	89 f8                	mov    eax,edi
c0022af8:	c1 e8 1f             	shr    eax,0x1f
c0022afb:	48                   	dec    eax
c0022afc:	09 c1                	or     ecx,eax
c0022afe:	0f 84 49 01 00 00    	je     c0022c4d <pow+0x2fd>
c0022b04:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022b08:	d9 ee                	fldz   
c0022b0a:	49                   	dec    ecx
c0022b0b:	09 c1                	or     ecx,eax
c0022b0d:	0f 85 4b 01 00 00    	jne    c0022c5e <pow+0x30e>
c0022b13:	d9 e0                	fchs   
c0022b15:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0022b19:	d9 05 cc 9d 02 c0    	fld    DWORD PTR ds:0xc0029dcc
c0022b1f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0022b23:	db 2d 20 9e 02 c0    	fld    TBYTE PTR ds:0xc0029e20
c0022b29:	db 2d 30 9e 02 c0    	fld    TBYTE PTR ds:0xc0029e30
c0022b2f:	d9 e8                	fld1   
c0022b31:	d9 e0                	fchs   
c0022b33:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0022b37:	81 fb 00 00 e0 41    	cmp    ebx,0x41e00000
c0022b3d:	0f 8e 40 01 00 00    	jle    c0022c83 <pow+0x333>
c0022b43:	81 fb 00 00 f0 43    	cmp    ebx,0x43f00000
c0022b49:	0f 8e 93 06 00 00    	jle    c00231e2 <pow+0x892>
c0022b4f:	dd d8                	fstp   st(0)
c0022b51:	dd d8                	fstp   st(0)
c0022b53:	81 7c 24 30 ff ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3fefffff
c0022b5b:	0f 8f c9 07 00 00    	jg     c002332a <pow+0x9da>
c0022b61:	85 f6                	test   esi,esi
c0022b63:	0f 88 94 08 00 00    	js     c00233fd <pow+0xaad>
c0022b69:	d9 ee                	fldz   
c0022b6b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022b6f:	e9 4c fe ff ff       	jmp    c00229c0 <pow+0x70>
c0022b74:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022b7a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0022b80:	81 fb ff ff 3f 43    	cmp    ebx,0x433fffff
c0022b86:	0f 8f 94 00 00 00    	jg     c0022c20 <pow+0x2d0>
c0022b8c:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c0022b92:	0f 8e c6 fe ff ff    	jle    c0022a5e <pow+0x10e>
c0022b98:	89 d9                	mov    ecx,ebx
c0022b9a:	c1 f9 14             	sar    ecx,0x14
c0022b9d:	81 e9 ff 03 00 00    	sub    ecx,0x3ff
c0022ba3:	83 f9 14             	cmp    ecx,0x14
c0022ba6:	0f 8e e5 06 00 00    	jle    c0023291 <pow+0x941>
c0022bac:	ba 34 00 00 00       	mov    edx,0x34
c0022bb1:	29 ca                	sub    edx,ecx
c0022bb3:	89 d1                	mov    ecx,edx
c0022bb5:	89 c2                	mov    edx,eax
c0022bb7:	d3 ea                	shr    edx,cl
c0022bb9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022bbd:	d3 e2                	shl    edx,cl
c0022bbf:	39 c2                	cmp    edx,eax
c0022bc1:	0f 85 97 fe ff ff    	jne    c0022a5e <pow+0x10e>
c0022bc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022bcb:	b9 02 00 00 00       	mov    ecx,0x2
c0022bd0:	83 e2 01             	and    edx,0x1
c0022bd3:	29 d1                	sub    ecx,edx
c0022bd5:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0022bd9:	e9 80 fe ff ff       	jmp    c0022a5e <pow+0x10e>
c0022bde:	66 90                	xchg   ax,ax
c0022be0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022be4:	8d 87 00 00 10 c0    	lea    eax,[edi-0x3ff00000]
c0022bea:	09 e8                	or     eax,ebp
c0022bec:	0f 84 61 05 00 00    	je     c0023153 <pow+0x803>
c0022bf2:	81 ff ff ff ef 3f    	cmp    edi,0x3fefffff
c0022bf8:	0f 8e 60 05 00 00    	jle    c002315e <pow+0x80e>
c0022bfe:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022c02:	85 f6                	test   esi,esi
c0022c04:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c08:	0f 89 b2 fd ff ff    	jns    c00229c0 <pow+0x70>
c0022c0e:	e9 56 ff ff ff       	jmp    c0022b69 <pow+0x219>
c0022c13:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0022c19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0022c20:	ba 02 00 00 00       	mov    edx,0x2
c0022c25:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0022c29:	e9 30 fe ff ff       	jmp    c0022a5e <pow+0x10e>
c0022c2e:	66 90                	xchg   ax,ax
c0022c30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022c34:	85 f6                	test   esi,esi
c0022c36:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0022c3a:	0f 89 7e fd ff ff    	jns    c00229be <pow+0x6e>
c0022c40:	d9 e8                	fld1   
c0022c42:	de f1                	fdivrp st(1),st
c0022c44:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c48:	e9 73 fd ff ff       	jmp    c00229c0 <pow+0x70>
c0022c4d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022c51:	d8 e0                	fsub   st,st(0)
c0022c53:	d8 f0                	fdiv   st,st(0)
c0022c55:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c59:	e9 62 fd ff ff       	jmp    c00229c0 <pow+0x70>
c0022c5e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0022c62:	d9 05 c8 9d 02 c0    	fld    DWORD PTR ds:0xc0029dc8
c0022c68:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0022c6c:	db 2d 00 9e 02 c0    	fld    TBYTE PTR ds:0xc0029e00
c0022c72:	db 2d 10 9e 02 c0    	fld    TBYTE PTR ds:0xc0029e10
c0022c78:	d9 e8                	fld1   
c0022c7a:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0022c7e:	e9 b4 fe ff ff       	jmp    c0022b37 <pow+0x1e7>
c0022c83:	dd d8                	fstp   st(0)
c0022c85:	dd d8                	fstp   st(0)
c0022c87:	31 c0                	xor    eax,eax
c0022c89:	81 e7 00 00 f0 7f    	and    edi,0x7ff00000
c0022c8f:	75 1b                	jne    c0022cac <pow+0x35c>
c0022c91:	d9 05 e0 9d 02 c0    	fld    DWORD PTR ds:0xc0029de0
c0022c97:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0022c9b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0022ca3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022ca7:	b8 cb ff ff ff       	mov    eax,0xffffffcb
c0022cac:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022cb0:	89 f9                	mov    ecx,edi
c0022cb2:	81 e7 ff ff 0f 00    	and    edi,0xfffff
c0022cb8:	c1 f9 14             	sar    ecx,0x14
c0022cbb:	8d 8c 08 01 fc ff ff 	lea    ecx,[eax+ecx*1-0x3ff]
c0022cc2:	89 f8                	mov    eax,edi
c0022cc4:	0d 00 00 f0 3f       	or     eax,0x3ff00000
c0022cc9:	81 ff 8e 98 03 00    	cmp    edi,0x3988e
c0022ccf:	0f 8e f8 04 00 00    	jle    c00231cd <pow+0x87d>
c0022cd5:	81 ff 79 b6 0b 00    	cmp    edi,0xbb679
c0022cdb:	0f 8e 25 06 00 00    	jle    c0023306 <pow+0x9b6>
c0022ce1:	d9 ee                	fldz   
c0022ce3:	41                   	inc    ecx
c0022ce4:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0022ce8:	2d 00 00 10 00       	sub    eax,0x100000
c0022ced:	31 d2                	xor    edx,edx
c0022cef:	d9 ee                	fldz   
c0022cf1:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c0022cf5:	d9 e8                	fld1   
c0022cf7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022cfb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022cff:	d1 f8                	sar    eax,1
c0022d01:	31 f6                	xor    esi,esi
c0022d03:	0d 00 00 00 20       	or     eax,0x20000000
c0022d08:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022d0c:	8d 84 02 00 00 08 00 	lea    eax,[edx+eax*1+0x80000]
c0022d13:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0022d17:	31 ff                	xor    edi,edi
c0022d19:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022d1d:	d9 c0                	fld    st(0)
c0022d1f:	d8 e2                	fsub   st,st(2)
c0022d21:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022d25:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022d29:	d9 c1                	fld    st(1)
c0022d2b:	d8 c3                	fadd   st,st(3)
c0022d2d:	d8 3d 80 9d 02 c0    	fdivr  DWORD PTR ds:0xc0029d80
c0022d33:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022d37:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022d3b:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0022d3f:	d9 c0                	fld    st(0)
c0022d41:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0022d45:	de ca                	fmulp  st(2),st
c0022d47:	d9 c9                	fxch   st(1)
c0022d49:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0022d4d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0022d51:	89 6c 24 34          	mov    DWORD PTR [esp+0x34],ebp
c0022d55:	31 ed                	xor    ebp,ebp
c0022d57:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022d5b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0022d5f:	31 c0                	xor    eax,eax
c0022d61:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0022d65:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0022d69:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0022d6d:	d9 c0                	fld    st(0)
c0022d6f:	d8 c9                	fmul   st,st(1)
c0022d71:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022d75:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022d79:	d9 c2                	fld    st(2)
c0022d7b:	d8 cc                	fmul   st,st(4)
c0022d7d:	de ed                	fsubp  st(5),st
c0022d7f:	d9 ca                	fxch   st(2)
c0022d81:	de e6                	fsubrp st(6),st
c0022d83:	d9 cc                	fxch   st(4)
c0022d85:	de e5                	fsubrp st(5),st
c0022d87:	d9 cc                	fxch   st(4)
c0022d89:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022d8d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022d91:	d8 c9                	fmul   st,st(1)
c0022d93:	de ea                	fsubp  st(2),st
c0022d95:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0022d99:	de ca                	fmulp  st(2),st
c0022d9b:	d9 c9                	fxch   st(1)
c0022d9d:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022da1:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022da5:	d9 c3                	fld    st(3)
c0022da7:	dc 0d 68 9e 02 c0    	fmul   QWORD PTR ds:0xc0029e68
c0022dad:	dc 05 70 9e 02 c0    	fadd   QWORD PTR ds:0xc0029e70
c0022db3:	d8 cc                	fmul   st,st(4)
c0022db5:	dc 05 78 9e 02 c0    	fadd   QWORD PTR ds:0xc0029e78
c0022dbb:	d8 cc                	fmul   st,st(4)
c0022dbd:	dc 05 80 9e 02 c0    	fadd   QWORD PTR ds:0xc0029e80
c0022dc3:	d8 cc                	fmul   st,st(4)
c0022dc5:	dc 05 88 9e 02 c0    	fadd   QWORD PTR ds:0xc0029e88
c0022dcb:	d8 cc                	fmul   st,st(4)
c0022dcd:	dc 05 90 9e 02 c0    	fadd   QWORD PTR ds:0xc0029e90
c0022dd3:	d9 cc                	fxch   st(4)
c0022dd5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0022dd9:	d8 c8                	fmul   st,st(0)
c0022ddb:	de cc                	fmulp  st(4),st
c0022ddd:	d9 cb                	fxch   st(3)
c0022ddf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022de3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022de7:	d9 c1                	fld    st(1)
c0022de9:	d8 c3                	fadd   st,st(3)
c0022deb:	d8 cc                	fmul   st,st(4)
c0022ded:	de c1                	faddp  st(1),st
c0022def:	d9 c1                	fld    st(1)
c0022df1:	d8 ca                	fmul   st,st(2)
c0022df3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022df7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022dfb:	d9 c9                	fxch   st(1)
c0022dfd:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022e01:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022e05:	d9 05 e4 9d 02 c0    	fld    DWORD PTR ds:0xc0029de4
c0022e0b:	d9 c2                	fld    st(2)
c0022e0d:	d8 c1                	fadd   st,st(1)
c0022e0f:	d8 c2                	fadd   st,st(2)
c0022e11:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022e15:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0022e19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022e1d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022e21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e25:	31 c0                	xor    eax,eax
c0022e27:	dc cc                	fmul   st(4),st
c0022e29:	d9 cc                	fxch   st(4)
c0022e2b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022e2f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022e33:	d9 c9                	fxch   st(1)
c0022e35:	d8 ec                	fsubr  st,st(4)
c0022e37:	de e3                	fsubrp st(3),st
c0022e39:	d9 c9                	fxch   st(1)
c0022e3b:	de e2                	fsubrp st(2),st
c0022e3d:	d9 c9                	fxch   st(1)
c0022e3f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022e43:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022e47:	de cb                	fmulp  st(3),st
c0022e49:	d9 cb                	fxch   st(3)
c0022e4b:	de c9                	fmulp  st(1),st
c0022e4d:	de c1                	faddp  st(1),st
c0022e4f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022e53:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022e57:	d9 c1                	fld    st(1)
c0022e59:	d8 c1                	fadd   st,st(1)
c0022e5b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022e5f:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0022e63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022e67:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022e6b:	d9 c0                	fld    st(0)
c0022e6d:	d8 0d e8 9d 02 c0    	fmul   DWORD PTR ds:0xc0029de8
c0022e73:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022e77:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022e7b:	d9 cb                	fxch   st(3)
c0022e7d:	d8 e9                	fsubr  st,st(1)
c0022e7f:	de ea                	fsubp  st(2),st
c0022e81:	d9 c9                	fxch   st(1)
c0022e83:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022e87:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022e8b:	dc 0d 98 9e 02 c0    	fmul   QWORD PTR ds:0xc0029e98
c0022e91:	d9 c9                	fxch   st(1)
c0022e93:	dc 0d a0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ea0
c0022e99:	de c1                	faddp  st(1),st
c0022e9b:	db 6c 24 58          	fld    TBYTE PTR [esp+0x58]
c0022e9f:	de c1                	faddp  st(1),st
c0022ea1:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022ea5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0022ea9:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022ead:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0022eb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022eb5:	d9 c2                	fld    st(2)
c0022eb7:	d8 c2                	fadd   st,st(2)
c0022eb9:	db 6c 24 68          	fld    TBYTE PTR [esp+0x68]
c0022ebd:	dc c1                	fadd   st(1),st
c0022ebf:	d9 c9                	fxch   st(1)
c0022ec1:	d8 c2                	fadd   st,st(2)
c0022ec3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022ec7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0022ecb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022ecf:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022ed3:	dc e2                	fsubr  st(2),st
c0022ed5:	d9 ca                	fxch   st(2)
c0022ed7:	de e1                	fsubrp st(1),st
c0022ed9:	de e3                	fsubrp st(3),st
c0022edb:	d9 ca                	fxch   st(2)
c0022edd:	de e9                	fsubp  st(1),st
c0022edf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022ee3:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022ee7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022eeb:	31 db                	xor    ebx,ebx
c0022eed:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0022ef1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022ef5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0022ef9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022efd:	d9 c0                	fld    st(0)
c0022eff:	d8 e2                	fsub   st,st(2)
c0022f01:	d8 cc                	fmul   st,st(4)
c0022f03:	d9 c9                	fxch   st(1)
c0022f05:	de cb                	fmulp  st(3),st
c0022f07:	de c2                	faddp  st(2),st
c0022f09:	d9 c9                	fxch   st(1)
c0022f0b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022f0f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022f13:	d9 ca                	fxch   st(2)
c0022f15:	de c9                	fmulp  st(1),st
c0022f17:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022f1b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022f1f:	d9 c1                	fld    st(1)
c0022f21:	d8 c1                	fadd   st,st(1)
c0022f23:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022f27:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0022f2b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022f2f:	81 fa ff ff 8f 40    	cmp    edx,0x408fffff
c0022f35:	89 d3                	mov    ebx,edx
c0022f37:	0f 8e 38 02 00 00    	jle    c0023175 <pow+0x825>
c0022f3d:	8d 8a 00 00 70 bf    	lea    ecx,[edx-0x40900000]
c0022f43:	09 c1                	or     ecx,eax
c0022f45:	0f 85 f6 03 00 00    	jne    c0023341 <pow+0x9f1>
c0022f4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022f4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022f53:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022f57:	d8 e1                	fsub   st,st(1)
c0022f59:	d9 c2                	fld    st(2)
c0022f5b:	dc 05 a8 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ea8
c0022f61:	df f1                	fcomip st,st(1)
c0022f63:	dd d8                	fstp   st(0)
c0022f65:	0f 87 2a 04 00 00    	ja     c0023395 <pow+0xa45>
c0022f6b:	89 d9                	mov    ecx,ebx
c0022f6d:	c1 f9 14             	sar    ecx,0x14
c0022f70:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0022f76:	81 e9 fe 03 00 00    	sub    ecx,0x3fe
c0022f7c:	b8 00 00 10 00       	mov    eax,0x100000
c0022f81:	d3 f8                	sar    eax,cl
c0022f83:	31 c9                	xor    ecx,ecx
c0022f85:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0022f89:	01 d8                	add    eax,ebx
c0022f8b:	be ff ff 0f 00       	mov    esi,0xfffff
c0022f90:	89 c2                	mov    edx,eax
c0022f92:	c1 fa 14             	sar    edx,0x14
c0022f95:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022f9b:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0022fa1:	88 d1                	mov    cl,dl
c0022fa3:	d3 fe                	sar    esi,cl
c0022fa5:	b9 14 00 00 00       	mov    ecx,0x14
c0022faa:	f7 d6                	not    esi
c0022fac:	29 d1                	sub    ecx,edx
c0022fae:	21 c6                	and    esi,eax
c0022fb0:	25 ff ff 0f 00       	and    eax,0xfffff
c0022fb5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0022fb9:	0d 00 00 10 00       	or     eax,0x100000
c0022fbe:	d3 f8                	sar    eax,cl
c0022fc0:	85 db                	test   ebx,ebx
c0022fc2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022fc6:	89 c1                	mov    ecx,eax
c0022fc8:	79 02                	jns    c0022fcc <pow+0x67c>
c0022fca:	f7 d9                	neg    ecx
c0022fcc:	de e9                	fsubp  st(1),st
c0022fce:	89 ce                	mov    esi,ecx
c0022fd0:	c1 e6 14             	shl    esi,0x14
c0022fd3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022fd7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0022fdb:	d9 c1                	fld    st(1)
c0022fdd:	d8 c1                	fadd   st,st(1)
c0022fdf:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0022fe3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0022fe7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022feb:	31 c0                	xor    eax,eax
c0022fed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ff1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0022ff5:	d9 c0                	fld    st(0)
c0022ff7:	d8 0d ec 9d 02 c0    	fmul   DWORD PTR ds:0xc0029dec
c0022ffd:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023001:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023005:	d9 ca                	fxch   st(2)
c0023007:	d8 e9                	fsubr  st,st(1)
c0023009:	de eb                	fsubp  st(3),st
c002300b:	d9 ca                	fxch   st(2)
c002300d:	dc 0d b0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029eb0
c0023013:	d9 ca                	fxch   st(2)
c0023015:	dc 0d b8 9e 02 c0    	fmul   QWORD PTR ds:0xc0029eb8
c002301b:	de c2                	faddp  st(2),st
c002301d:	d9 c9                	fxch   st(1)
c002301f:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023023:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023027:	d9 c1                	fld    st(1)
c0023029:	d8 c1                	fadd   st,st(1)
c002302b:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002302f:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023033:	d9 c0                	fld    st(0)
c0023035:	d8 c9                	fmul   st,st(1)
c0023037:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002303b:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002303f:	d9 c0                	fld    st(0)
c0023041:	dc 0d c0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ec0
c0023047:	dc 25 c8 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ec8
c002304d:	d8 c9                	fmul   st,st(1)
c002304f:	dc 05 d0 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ed0
c0023055:	d8 c9                	fmul   st,st(1)
c0023057:	dc 25 d8 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ed8
c002305d:	d8 c9                	fmul   st,st(1)
c002305f:	dc 05 e0 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ee0
c0023065:	de c9                	fmulp  st(1),st
c0023067:	d8 e9                	fsubr  st,st(1)
c0023069:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002306d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023071:	d9 cb                	fxch   st(3)
c0023073:	d8 e9                	fsubr  st,st(1)
c0023075:	de ea                	fsubp  st(2),st
c0023077:	d9 c9                	fxch   st(1)
c0023079:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002307d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023081:	d9 c1                	fld    st(1)
c0023083:	d8 cb                	fmul   st,st(3)
c0023085:	d9 cb                	fxch   st(3)
c0023087:	d8 25 f0 9d 02 c0    	fsub   DWORD PTR ds:0xc0029df0
c002308d:	de fb                	fdivp  st(3),st
c002308f:	d9 c1                	fld    st(1)
c0023091:	d8 c9                	fmul   st,st(1)
c0023093:	de c1                	faddp  st(1),st
c0023095:	de ea                	fsubp  st(2),st
c0023097:	d9 c9                	fxch   st(1)
c0023099:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c002309d:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00230a1:	de e1                	fsubrp st(1),st
c00230a3:	d8 2d 80 9d 02 c0    	fsubr  DWORD PTR ds:0xc0029d80
c00230a9:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00230ad:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00230b1:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00230b5:	89 d3                	mov    ebx,edx
c00230b7:	01 f3                	add    ebx,esi
c00230b9:	81 fb ff ff 0f 00    	cmp    ebx,0xfffff
c00230bf:	0f 8e a7 02 00 00    	jle    c002336c <pow+0xa1c>
c00230c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00230c9:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00230cd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00230d1:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c00230d5:	de c9                	fmulp  st(1),st
c00230d7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00230db:	e9 e0 f8 ff ff       	jmp    c00229c0 <pow+0x70>
c00230e0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00230e4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00230e7:	e8 74 0f 00 00       	call   c0024060 <fabs>
c00230ec:	85 ed                	test   ebp,ebp
c00230ee:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00230f2:	0f 85 55 fb ff ff    	jne    c0022c4d <pow+0x2fd>
c00230f8:	89 f8                	mov    eax,edi
c00230fa:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00230ff:	3d 00 00 f0 3f       	cmp    eax,0x3ff00000
c0023104:	74 0b                	je     c0023111 <pow+0x7c1>
c0023106:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002310b:	0f 85 3c fb ff ff    	jne    c0022c4d <pow+0x2fd>
c0023111:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0023119:	85 f6                	test   esi,esi
c002311b:	79 0a                	jns    c0023127 <pow+0x7d7>
c002311d:	d9 e8                	fld1   
c002311f:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0023123:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023127:	85 ff                	test   edi,edi
c0023129:	0f 89 91 f8 ff ff    	jns    c00229c0 <pow+0x70>
c002312f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023133:	2d 00 00 f0 3f       	sub    eax,0x3ff00000
c0023138:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c002313c:	0f 85 10 02 00 00    	jne    c0023352 <pow+0xa02>
c0023142:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023146:	d8 e0                	fsub   st,st(0)
c0023148:	d8 f0                	fdiv   st,st(0)
c002314a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002314e:	e9 6d f8 ff ff       	jmp    c00229c0 <pow+0x70>
c0023153:	d9 e8                	fld1   
c0023155:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023159:	e9 62 f8 ff ff       	jmp    c00229c0 <pow+0x70>
c002315e:	85 f6                	test   esi,esi
c0023160:	0f 89 03 fa ff ff    	jns    c0022b69 <pow+0x219>
c0023166:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002316a:	d9 e0                	fchs   
c002316c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023170:	e9 4b f8 ff ff       	jmp    c00229c0 <pow+0x70>
c0023175:	89 d1                	mov    ecx,edx
c0023177:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
c002317d:	81 f9 ff cb 90 40    	cmp    ecx,0x4090cbff
c0023183:	0f 8e 4f 01 00 00    	jle    c00232d8 <pow+0x988>
c0023189:	8d 8a 00 34 6f 3f    	lea    ecx,[edx+0x3f6f3400]
c002318f:	09 c1                	or     ecx,eax
c0023191:	0f 85 55 02 00 00    	jne    c00233ec <pow+0xa9c>
c0023197:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002319b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002319f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00231a3:	d8 e1                	fsub   st,st(1)
c00231a5:	df f2                	fcomip st,st(2)
c00231a7:	0f 82 be fd ff ff    	jb     c0022f6b <pow+0x61b>
c00231ad:	dd d8                	fstp   st(0)
c00231af:	dd d8                	fstp   st(0)
c00231b1:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00231b5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00231b9:	e9 02 f8 ff ff       	jmp    c00229c0 <pow+0x70>
c00231be:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00231c2:	d8 c8                	fmul   st,st(0)
c00231c4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00231c8:	e9 f3 f7 ff ff       	jmp    c00229c0 <pow+0x70>
c00231cd:	d9 ee                	fldz   
c00231cf:	31 d2                	xor    edx,edx
c00231d1:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c00231d5:	d9 ee                	fldz   
c00231d7:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c00231db:	d9 e8                	fld1   
c00231dd:	e9 15 fb ff ff       	jmp    c0022cf7 <pow+0x3a7>
c00231e2:	81 7c 24 30 fe ff ef 3f 	cmp    DWORD PTR [esp+0x30],0x3feffffe
c00231ea:	0f 8e 91 01 00 00    	jle    c0023381 <pow+0xa31>
c00231f0:	81 7c 24 30 00 00 f0 3f 	cmp    DWORD PTR [esp+0x30],0x3ff00000
c00231f8:	0f 8f da 01 00 00    	jg     c00233d8 <pow+0xa88>
c00231fe:	dd d8                	fstp   st(0)
c0023200:	dd d8                	fstp   st(0)
c0023202:	d9 e8                	fld1   
c0023204:	31 c0                	xor    eax,eax
c0023206:	dc 6c 24 28          	fsubr  QWORD PTR [esp+0x28]
c002320a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002320e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023212:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023216:	d9 c0                	fld    st(0)
c0023218:	d8 0d d8 9d 02 c0    	fmul   DWORD PTR ds:0xc0029dd8
c002321e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023222:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023226:	d9 c1                	fld    st(1)
c0023228:	dc 0d 58 9e 02 c0    	fmul   QWORD PTR ds:0xc0029e58
c002322e:	d9 c2                	fld    st(2)
c0023230:	d8 0d dc 9d 02 c0    	fmul   DWORD PTR ds:0xc0029ddc
c0023236:	db 2d 40 9e 02 c0    	fld    TBYTE PTR ds:0xc0029e40
c002323c:	de e1                	fsubrp st(1),st
c002323e:	d8 cb                	fmul   st,st(3)
c0023240:	d8 2d 84 9d 02 c0    	fsubr  DWORD PTR ds:0xc0029d84
c0023246:	d9 cb                	fxch   st(3)
c0023248:	d8 c8                	fmul   st,st(0)
c002324a:	de cb                	fmulp  st(3),st
c002324c:	d9 ca                	fxch   st(2)
c002324e:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023252:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023256:	dc 0d 60 9e 02 c0    	fmul   QWORD PTR ds:0xc0029e60
c002325c:	de ea                	fsubp  st(2),st
c002325e:	d9 c9                	fxch   st(1)
c0023260:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023264:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c0023268:	d9 c1                	fld    st(1)
c002326a:	d8 c1                	fadd   st,st(1)
c002326c:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023270:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0023274:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0023278:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002327c:	dc e2                	fsubr  st(2),st
c002327e:	d9 c9                	fxch   st(1)
c0023280:	de e2                	fsubrp st(2),st
c0023282:	d9 c9                	fxch   st(1)
c0023284:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c0023288:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c002328c:	e9 56 fc ff ff       	jmp    c0022ee7 <pow+0x597>
c0023291:	85 c0                	test   eax,eax
c0023293:	0f 85 47 fe ff ff    	jne    c00230e0 <pow+0x790>
c0023299:	b8 14 00 00 00       	mov    eax,0x14
c002329e:	29 c8                	sub    eax,ecx
c00232a0:	89 c1                	mov    ecx,eax
c00232a2:	89 d8                	mov    eax,ebx
c00232a4:	d3 f8                	sar    eax,cl
c00232a6:	89 c2                	mov    edx,eax
c00232a8:	d3 e2                	shl    edx,cl
c00232aa:	39 da                	cmp    edx,ebx
c00232ac:	0f 85 bc f7 ff ff    	jne    c0022a6e <pow+0x11e>
c00232b2:	83 e0 01             	and    eax,0x1
c00232b5:	b9 02 00 00 00       	mov    ecx,0x2
c00232ba:	29 c1                	sub    ecx,eax
c00232bc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00232c0:	e9 a9 f7 ff ff       	jmp    c0022a6e <pow+0x11e>
c00232c5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00232c9:	d9 c0                	fld    st(0)
c00232cb:	d8 c9                	fmul   st,st(1)
c00232cd:	de c9                	fmulp  st(1),st
c00232cf:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00232d3:	e9 e8 f6 ff ff       	jmp    c00229c0 <pow+0x70>
c00232d8:	81 f9 00 00 e0 3f    	cmp    ecx,0x3fe00000
c00232de:	0f 8f 28 01 00 00    	jg     c002340c <pow+0xabc>
c00232e4:	31 f6                	xor    esi,esi
c00232e6:	31 c9                	xor    ecx,ecx
c00232e8:	e9 fa fc ff ff       	jmp    c0022fe7 <pow+0x697>
c00232ed:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00232f1:	d8 c8                	fmul   st,st(0)
c00232f3:	dd 5c 24 78          	fstp   QWORD PTR [esp+0x78]
c00232f7:	dd 44 24 78          	fld    QWORD PTR [esp+0x78]
c00232fb:	d8 c8                	fmul   st,st(0)
c00232fd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023301:	e9 ba f6 ff ff       	jmp    c00229c0 <pow+0x70>
c0023306:	d9 05 d0 9d 02 c0    	fld    DWORD PTR ds:0xc0029dd0
c002330c:	ba 00 00 04 00       	mov    edx,0x40000
c0023311:	db 7c 24 68          	fstp   TBYTE PTR [esp+0x68]
c0023315:	dd 05 50 9e 02 c0    	fld    QWORD PTR ds:0xc0029e50
c002331b:	db 7c 24 58          	fstp   TBYTE PTR [esp+0x58]
c002331f:	d9 05 d4 9d 02 c0    	fld    DWORD PTR ds:0xc0029dd4
c0023325:	e9 cd f9 ff ff       	jmp    c0022cf7 <pow+0x3a7>
c002332a:	85 f6                	test   esi,esi
c002332c:	0f 8e 37 f8 ff ff    	jle    c0022b69 <pow+0x219>
c0023332:	d9 05 c8 9d 02 c0    	fld    DWORD PTR ds:0xc0029dc8
c0023338:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002333c:	e9 7f f6 ff ff       	jmp    c00229c0 <pow+0x70>
c0023341:	dd d8                	fstp   st(0)
c0023343:	dd d8                	fstp   st(0)
c0023345:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023349:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002334d:	e9 6e f6 ff ff       	jmp    c00229c0 <pow+0x70>
c0023352:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0023357:	0f 85 63 f6 ff ff    	jne    c00229c0 <pow+0x70>
c002335d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023361:	d9 e0                	fchs   
c0023363:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023367:	e9 54 f6 ff ff       	jmp    c00229c0 <pow+0x70>
c002336c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023370:	89 04 24             	mov    DWORD PTR [esp],eax
c0023373:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023377:	e8 c0 13 00 00       	call   c002473c <ldexp>
c002337c:	e9 50 fd ff ff       	jmp    c00230d1 <pow+0x781>
c0023381:	85 f6                	test   esi,esi
c0023383:	0f 99 c0             	setns  al
c0023386:	84 c0                	test   al,al
c0023388:	db c9                	fcmovne st,st(1)
c002338a:	dd d9                	fstp   st(1)
c002338c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023390:	e9 2b f6 ff ff       	jmp    c00229c0 <pow+0x70>
c0023395:	dd d8                	fstp   st(0)
c0023397:	dd d8                	fstp   st(0)
c0023399:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002339d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00233a1:	e9 1a f6 ff ff       	jmp    c00229c0 <pow+0x70>
c00233a6:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c00233ad:	8b b4 24 90 00 00 00 	mov    esi,DWORD PTR [esp+0x90]
c00233b4:	8b bc 24 94 00 00 00 	mov    edi,DWORD PTR [esp+0x94]
c00233bb:	8b ac 24 98 00 00 00 	mov    ebp,DWORD PTR [esp+0x98]
c00233c2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00233c6:	dd 9c 24 a0 00 00 00 	fstp   QWORD PTR [esp+0xa0]
c00233cd:	81 c4 9c 00 00 00    	add    esp,0x9c
c00233d3:	e9 d8 12 00 00       	jmp    c00246b0 <sqrt>
c00233d8:	85 f6                	test   esi,esi
c00233da:	0f 9e c0             	setle  al
c00233dd:	84 c0                	test   al,al
c00233df:	db c9                	fcmovne st,st(1)
c00233e1:	dd d9                	fstp   st(1)
c00233e3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00233e7:	e9 d4 f5 ff ff       	jmp    c00229c0 <pow+0x70>
c00233ec:	dd d8                	fstp   st(0)
c00233ee:	dd d8                	fstp   st(0)
c00233f0:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c00233f4:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00233f8:	e9 c3 f5 ff ff       	jmp    c00229c0 <pow+0x70>
c00233fd:	d9 05 c8 9d 02 c0    	fld    DWORD PTR ds:0xc0029dc8
c0023403:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023407:	e9 b4 f5 ff ff       	jmp    c00229c0 <pow+0x70>
c002340c:	c1 f9 14             	sar    ecx,0x14
c002340f:	e9 62 fb ff ff       	jmp    c0022f76 <pow+0x626>
c0023414:	66 90                	xchg   ax,ax
c0023416:	66 90                	xchg   ax,ax
c0023418:	66 90                	xchg   ax,ax
c002341a:	66 90                	xchg   ax,ax
c002341c:	66 90                	xchg   ax,ax
c002341e:	66 90                	xchg   ax,ax

c0023420 <sinh>:
c0023420:	53                   	push   ebx
c0023421:	83 ec 38             	sub    esp,0x38
c0023424:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023428:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c002342c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023430:	89 c3                	mov    ebx,eax
c0023432:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0023438:	81 fb ff ff ef 7f    	cmp    ebx,0x7fefffff
c002343e:	0f 8f ec 00 00 00    	jg     c0023530 <sinh+0x110>
c0023444:	dd d8                	fstp   st(0)
c0023446:	d9 e8                	fld1   
c0023448:	85 c0                	test   eax,eax
c002344a:	0f 88 90 00 00 00    	js     c00234e0 <sinh+0xc0>
c0023450:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c0023456:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c002345c:	0f 8f 8e 00 00 00    	jg     c00234f0 <sinh+0xd0>
c0023462:	dd d9                	fstp   st(1)
c0023464:	eb 0c                	jmp    c0023472 <sinh+0x52>
c0023466:	8d 76 00             	lea    esi,[esi+0x0]
c0023469:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023470:	dd d9                	fstp   st(1)
c0023472:	81 fb ff ff 2f 3e    	cmp    ebx,0x3e2fffff
c0023478:	0f 8f d2 00 00 00    	jg     c0023550 <sinh+0x130>
c002347e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023482:	d9 e8                	fld1   
c0023484:	d9 c1                	fld    st(1)
c0023486:	dc 05 f0 9e 02 c0    	fadd   QWORD PTR ds:0xc0029ef0
c002348c:	df f1                	fcomip st,st(1)
c002348e:	dd d8                	fstp   st(0)
c0023490:	77 3e                	ja     c00234d0 <sinh+0xb0>
c0023492:	dd d8                	fstp   st(0)
c0023494:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023498:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002349c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002349f:	e8 bc 0b 00 00       	call   c0024060 <fabs>
c00234a4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00234a7:	e8 24 07 00 00       	call   c0023bd0 <expm1>
c00234ac:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00234b0:	d9 c1                	fld    st(1)
c00234b2:	d8 c2                	fadd   st,st(2)
c00234b4:	d9 c2                	fld    st(2)
c00234b6:	d8 cb                	fmul   st,st(3)
c00234b8:	d9 cb                	fxch   st(3)
c00234ba:	d8 05 80 9d 02 c0    	fadd   DWORD PTR ds:0xc0029d80
c00234c0:	de fb                	fdivp  st(3),st
c00234c2:	de e2                	fsubrp st(2),st
c00234c4:	de c9                	fmulp  st(1),st
c00234c6:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00234ca:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00234ce:	eb 02                	jmp    c00234d2 <sinh+0xb2>
c00234d0:	dd d9                	fstp   st(1)
c00234d2:	83 c4 38             	add    esp,0x38
c00234d5:	5b                   	pop    ebx
c00234d6:	c3                   	ret    
c00234d7:	89 f6                	mov    esi,esi
c00234d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00234e0:	d9 e0                	fchs   
c00234e2:	81 fb ff ff 35 40    	cmp    ebx,0x4035ffff
c00234e8:	d9 05 e8 9e 02 c0    	fld    DWORD PTR ds:0xc0029ee8
c00234ee:	7e 80                	jle    c0023470 <sinh+0x50>
c00234f0:	81 fb 41 2e 86 40    	cmp    ebx,0x40862e41
c00234f6:	0f 8e a4 00 00 00    	jle    c00235a0 <sinh+0x180>
c00234fc:	dd d8                	fstp   st(0)
c00234fe:	81 fb ce 33 86 40    	cmp    ebx,0x408633ce
c0023504:	0f 8e c6 00 00 00    	jle    c00235d0 <sinh+0x1b0>
c002350a:	dd d8                	fstp   st(0)
c002350c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023510:	dc 0d f0 9e 02 c0    	fmul   QWORD PTR ds:0xc0029ef0
c0023516:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002351a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002351e:	83 c4 38             	add    esp,0x38
c0023521:	5b                   	pop    ebx
c0023522:	c3                   	ret    
c0023523:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023530:	d9 c0                	fld    st(0)
c0023532:	de c1                	faddp  st(1),st
c0023534:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0023538:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002353c:	83 c4 38             	add    esp,0x38
c002353f:	5b                   	pop    ebx
c0023540:	c3                   	ret    
c0023541:	eb 0d                	jmp    c0023550 <sinh+0x130>
c0023543:	90                   	nop
c0023544:	90                   	nop
c0023545:	90                   	nop
c0023546:	90                   	nop
c0023547:	90                   	nop
c0023548:	90                   	nop
c0023549:	90                   	nop
c002354a:	90                   	nop
c002354b:	90                   	nop
c002354c:	90                   	nop
c002354d:	90                   	nop
c002354e:	90                   	nop
c002354f:	90                   	nop
c0023550:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c0023554:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023558:	dd 1c 24             	fstp   QWORD PTR [esp]
c002355b:	e8 00 0b 00 00       	call   c0024060 <fabs>
c0023560:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023563:	e8 68 06 00 00       	call   c0023bd0 <expm1>
c0023568:	81 fb ff ff ef 3f    	cmp    ebx,0x3fefffff
c002356e:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c0023572:	0f 8e 38 ff ff ff    	jle    c00234b0 <sinh+0x90>
c0023578:	d9 c1                	fld    st(1)
c002357a:	d8 05 80 9d 02 c0    	fadd   DWORD PTR ds:0xc0029d80
c0023580:	d8 fa                	fdivr  st,st(2)
c0023582:	de c2                	faddp  st(2),st
c0023584:	de c9                	fmulp  st(1),st
c0023586:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c002358a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002358e:	83 c4 38             	add    esp,0x38
c0023591:	5b                   	pop    ebx
c0023592:	c3                   	ret    
c0023593:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023599:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00235a0:	dd d9                	fstp   st(1)
c00235a2:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00235a6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00235aa:	dd 1c 24             	fstp   QWORD PTR [esp]
c00235ad:	e8 ae 0a 00 00       	call   c0024060 <fabs>
c00235b2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00235b5:	e8 5e 10 00 00       	call   c0024618 <exp>
c00235ba:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00235be:	de c9                	fmulp  st(1),st
c00235c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00235c4:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00235c8:	e9 05 ff ff ff       	jmp    c00234d2 <sinh+0xb2>
c00235cd:	8d 76 00             	lea    esi,[esi+0x0]
c00235d0:	db 7c 24 18          	fstp   TBYTE PTR [esp+0x18]
c00235d4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00235d8:	dd 1c 24             	fstp   QWORD PTR [esp]
c00235db:	e8 80 0a 00 00       	call   c0024060 <fabs>
c00235e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00235e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00235e9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00235ec:	e8 1f 00 00 00       	call   c0023610 <__ldexp_exp>
c00235f1:	db 6c 24 18          	fld    TBYTE PTR [esp+0x18]
c00235f5:	de c9                	fmulp  st(1),st
c00235f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00235fb:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00235ff:	e9 ce fe ff ff       	jmp    c00234d2 <sinh+0xb2>
c0023604:	66 90                	xchg   ax,ax
c0023606:	66 90                	xchg   ax,ax
c0023608:	66 90                	xchg   ax,ax
c002360a:	66 90                	xchg   ax,ax
c002360c:	66 90                	xchg   ax,ax
c002360e:	66 90                	xchg   ax,ax

c0023610 <__ldexp_exp>:
c0023610:	53                   	push   ebx
c0023611:	83 ec 28             	sub    esp,0x28
c0023614:	dd 05 f8 9e 02 c0    	fld    QWORD PTR ds:0xc0029ef8
c002361a:	dc 6c 24 30          	fsubr  QWORD PTR [esp+0x30]
c002361e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023621:	e8 f2 0f 00 00       	call   c0024618 <exp>
c0023626:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002362a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002362e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023632:	89 da                	mov    edx,ebx
c0023634:	89 d8                	mov    eax,ebx
c0023636:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002363a:	c1 e8 14             	shr    eax,0x14
c002363d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0023643:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c0023649:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002364d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0023651:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023655:	8d 84 02 08 03 00 00 	lea    eax,[edx+eax*1+0x308]
c002365c:	c1 e0 14             	shl    eax,0x14
c002365f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023663:	31 c0                	xor    eax,eax
c0023665:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023669:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002366d:	de c9                	fmulp  st(1),st
c002366f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023673:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023677:	83 c4 28             	add    esp,0x28
c002367a:	5b                   	pop    ebx
c002367b:	c3                   	ret    
c002367c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0023680 <__ldexp_cexp>:
c0023680:	57                   	push   edi
c0023681:	56                   	push   esi
c0023682:	53                   	push   ebx
c0023683:	83 ec 60             	sub    esp,0x60
c0023686:	dd 44 24 7c          	fld    QWORD PTR [esp+0x7c]
c002368a:	dd 44 24 74          	fld    QWORD PTR [esp+0x74]
c002368e:	dd 14 24             	fst    QWORD PTR [esp]
c0023691:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0023695:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0023699:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c002369d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00236a1:	e8 6a 0f 00 00       	call   c0024610 <creal>
c00236a6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00236aa:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00236ae:	dd 1c 24             	fstp   QWORD PTR [esp]
c00236b1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00236b5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00236b9:	e8 42 0f 00 00       	call   c0024600 <cimag>
c00236be:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00236c2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00236c6:	dc 25 f8 9e 02 c0    	fsub   QWORD PTR ds:0xc0029ef8
c00236cc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00236cf:	e8 44 0f 00 00       	call   c0024618 <exp>
c00236d4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00236d8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00236dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00236e0:	89 fa                	mov    edx,edi
c00236e2:	89 f8                	mov    eax,edi
c00236e4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00236e8:	c1 e8 14             	shr    eax,0x14
c00236eb:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c00236f1:	81 ca 00 00 e0 7f    	or     edx,0x7fe00000
c00236f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00236fb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0023702:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023706:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002370a:	8d 94 02 09 ff ff ff 	lea    edx,[edx+eax*1-0xf7]
c0023711:	89 d1                	mov    ecx,edx
c0023713:	c1 e9 1f             	shr    ecx,0x1f
c0023716:	01 d1                	add    ecx,edx
c0023718:	d1 f9                	sar    ecx,1
c002371a:	8d 81 ff 03 00 00    	lea    eax,[ecx+0x3ff]
c0023720:	29 ca                	sub    edx,ecx
c0023722:	c1 e0 14             	shl    eax,0x14
c0023725:	81 c2 ff 03 00 00    	add    edx,0x3ff
c002372b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002372f:	c1 e2 14             	shl    edx,0x14
c0023732:	31 c0                	xor    eax,eax
c0023734:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023738:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002373c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0023740:	31 d2                	xor    edx,edx
c0023742:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0023746:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c002374a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002374e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0023752:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023756:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023759:	e8 12 03 00 00       	call   c0023a70 <cos>
c002375e:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0023762:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023766:	db 7c 24 48          	fstp   TBYTE PTR [esp+0x48]
c002376a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c002376e:	db 7c 24 38          	fstp   TBYTE PTR [esp+0x38]
c0023772:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0023776:	db 7c 24 20          	fstp   TBYTE PTR [esp+0x20]
c002377a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002377e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023781:	e8 fa 0b 00 00       	call   c0024380 <sin>
c0023786:	89 d8                	mov    eax,ebx
c0023788:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002378c:	db 6c 24 48          	fld    TBYTE PTR [esp+0x48]
c0023790:	dc c9                	fmul   st(1),st
c0023792:	db 6c 24 38          	fld    TBYTE PTR [esp+0x38]
c0023796:	dc ca                	fmul   st(2),st
c0023798:	db 6c 24 20          	fld    TBYTE PTR [esp+0x20]
c002379c:	dc cb                	fmul   st(3),st
c002379e:	d9 cb                	fxch   st(3)
c00237a0:	dd 1b                	fstp   QWORD PTR [ebx]
c00237a2:	d9 cb                	fxch   st(3)
c00237a4:	de c9                	fmulp  st(1),st
c00237a6:	de ca                	fmulp  st(2),st
c00237a8:	de c9                	fmulp  st(1),st
c00237aa:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00237ad:	83 c4 60             	add    esp,0x60
c00237b0:	5b                   	pop    ebx
c00237b1:	5e                   	pop    esi
c00237b2:	5f                   	pop    edi
c00237b3:	c2 04 00             	ret    0x4
c00237b6:	66 90                	xchg   ax,ax
c00237b8:	66 90                	xchg   ax,ax
c00237ba:	66 90                	xchg   ax,ax
c00237bc:	66 90                	xchg   ax,ax
c00237be:	66 90                	xchg   ax,ax

c00237c0 <atan>:
c00237c0:	56                   	push   esi
c00237c1:	53                   	push   ebx
c00237c2:	83 ec 24             	sub    esp,0x24
c00237c5:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00237c9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00237cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00237d1:	89 f3                	mov    ebx,esi
c00237d3:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00237d9:	81 fb ff ff 0f 44    	cmp    ebx,0x440fffff
c00237df:	7e 5f                	jle    c0023840 <atan+0x80>
c00237e1:	81 fb 00 00 f0 7f    	cmp    ebx,0x7ff00000
c00237e7:	7f 0a                	jg     c00237f3 <atan+0x33>
c00237e9:	75 25                	jne    c0023810 <atan+0x50>
c00237eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237ef:	85 c0                	test   eax,eax
c00237f1:	74 1d                	je     c0023810 <atan+0x50>
c00237f3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00237f7:	d8 c0                	fadd   st,st(0)
c00237f9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00237fd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023801:	83 c4 24             	add    esp,0x24
c0023804:	5b                   	pop    ebx
c0023805:	5e                   	pop    esi
c0023806:	c3                   	ret    
c0023807:	89 f6                	mov    esi,esi
c0023809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023810:	85 f6                	test   esi,esi
c0023812:	dd 05 18 9f 02 c0    	fld    QWORD PTR ds:0xc0029f18
c0023818:	0f 8e 22 01 00 00    	jle    c0023940 <atan+0x180>
c002381e:	dc 05 28 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d28
c0023824:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023828:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002382c:	83 c4 24             	add    esp,0x24
c002382f:	5b                   	pop    ebx
c0023830:	5e                   	pop    esi
c0023831:	c3                   	ret    
c0023832:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023840:	81 fb ff ff db 3f    	cmp    ebx,0x3fdbffff
c0023846:	0f 8f 34 01 00 00    	jg     c0023980 <atan+0x1c0>
c002384c:	81 fb ff ff 3f 3e    	cmp    ebx,0x3e3fffff
c0023852:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023856:	0f 8e c4 00 00 00    	jle    c0023920 <atan+0x160>
c002385c:	eb 04                	jmp    c0023862 <atan+0xa2>
c002385e:	66 90                	xchg   ax,ax
c0023860:	dd d8                	fstp   st(0)
c0023862:	d9 ee                	fldz   
c0023864:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0023869:	d9 ee                	fldz   
c002386b:	d9 c2                	fld    st(2)
c002386d:	40                   	inc    eax
c002386e:	d8 cb                	fmul   st,st(3)
c0023870:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023874:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023878:	d9 c0                	fld    st(0)
c002387a:	d8 c9                	fmul   st,st(1)
c002387c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023880:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023884:	d9 c0                	fld    st(0)
c0023886:	dc 0d 48 9f 02 c0    	fmul   QWORD PTR ds:0xc0029f48
c002388c:	dc 05 50 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f50
c0023892:	d8 c9                	fmul   st,st(1)
c0023894:	dc 05 58 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f58
c002389a:	d8 c9                	fmul   st,st(1)
c002389c:	dc 05 60 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f60
c00238a2:	d8 c9                	fmul   st,st(1)
c00238a4:	dc 05 68 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f68
c00238aa:	d8 c9                	fmul   st,st(1)
c00238ac:	dc 05 70 9f 02 c0    	fadd   QWORD PTR ds:0xc0029f70
c00238b2:	de ca                	fmulp  st(2),st
c00238b4:	d9 c9                	fxch   st(1)
c00238b6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00238ba:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00238be:	d9 c1                	fld    st(1)
c00238c0:	dc 0d 78 9f 02 c0    	fmul   QWORD PTR ds:0xc0029f78
c00238c6:	dc 25 80 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f80
c00238cc:	d8 ca                	fmul   st,st(2)
c00238ce:	dc 25 88 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f88
c00238d4:	d8 ca                	fmul   st,st(2)
c00238d6:	dc 25 90 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f90
c00238dc:	d8 ca                	fmul   st,st(2)
c00238de:	dc 25 98 9f 02 c0    	fsub   QWORD PTR ds:0xc0029f98
c00238e4:	de ca                	fmulp  st(2),st
c00238e6:	d9 c9                	fxch   st(1)
c00238e8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00238ec:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00238f0:	de c1                	faddp  st(1),st
c00238f2:	d8 cb                	fmul   st,st(3)
c00238f4:	74 6a                	je     c0023960 <atan+0x1a0>
c00238f6:	85 f6                	test   esi,esi
c00238f8:	de e2                	fsubrp st(2),st
c00238fa:	d9 c9                	fxch   st(1)
c00238fc:	de e2                	fsubrp st(2),st
c00238fe:	de e1                	fsubrp st(1),st
c0023900:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023904:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023908:	0f 89 f3 fe ff ff    	jns    c0023801 <atan+0x41>
c002390e:	d9 e0                	fchs   
c0023910:	83 c4 24             	add    esp,0x24
c0023913:	5b                   	pop    ebx
c0023914:	5e                   	pop    esi
c0023915:	c3                   	ret    
c0023916:	8d 76 00             	lea    esi,[esi+0x0]
c0023919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023920:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023924:	d9 e8                	fld1   
c0023926:	d9 c2                	fld    st(2)
c0023928:	dc 05 90 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d90
c002392e:	df f1                	fcomip st,st(1)
c0023930:	dd d8                	fstp   st(0)
c0023932:	0f 86 28 ff ff ff    	jbe    c0023860 <atan+0xa0>
c0023938:	dd d9                	fstp   st(1)
c002393a:	e9 c2 fe ff ff       	jmp    c0023801 <atan+0x41>
c002393f:	90                   	nop
c0023940:	dd 05 a8 9d 02 c0    	fld    QWORD PTR ds:0xc0029da8
c0023946:	de e1                	fsubrp st(1),st
c0023948:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002394c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023950:	e9 ac fe ff ff       	jmp    c0023801 <atan+0x41>
c0023955:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023960:	dd da                	fstp   st(2)
c0023962:	dd d8                	fstp   st(0)
c0023964:	de e9                	fsubp  st(1),st
c0023966:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002396a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002396e:	83 c4 24             	add    esp,0x24
c0023971:	5b                   	pop    ebx
c0023972:	5e                   	pop    esi
c0023973:	c3                   	ret    
c0023974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002397a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023980:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0023984:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023987:	e8 d4 06 00 00       	call   c0024060 <fabs>
c002398c:	81 fb ff ff f2 3f    	cmp    ebx,0x3ff2ffff
c0023992:	7f 3c                	jg     c00239d0 <atan+0x210>
c0023994:	81 fb ff ff e5 3f    	cmp    ebx,0x3fe5ffff
c002399a:	0f 8f a0 00 00 00    	jg     c0023a40 <atan+0x280>
c00239a0:	d9 c0                	fld    st(0)
c00239a2:	31 c0                	xor    eax,eax
c00239a4:	d8 c1                	fadd   st,st(1)
c00239a6:	d8 25 80 9d 02 c0    	fsub   DWORD PTR ds:0xc0029d80
c00239ac:	d9 c9                	fxch   st(1)
c00239ae:	d8 05 f0 9d 02 c0    	fadd   DWORD PTR ds:0xc0029df0
c00239b4:	de f9                	fdivp  st(1),st
c00239b6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00239ba:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00239be:	dd 05 38 9f 02 c0    	fld    QWORD PTR ds:0xc0029f38
c00239c4:	dd 05 40 9f 02 c0    	fld    QWORD PTR ds:0xc0029f40
c00239ca:	e9 9c fe ff ff       	jmp    c002386b <atan+0xab>
c00239cf:	90                   	nop
c00239d0:	81 fb ff 7f 03 40    	cmp    ebx,0x40037fff
c00239d6:	7f 38                	jg     c0023a10 <atan+0x250>
c00239d8:	d9 05 d4 9d 02 c0    	fld    DWORD PTR ds:0xc0029dd4
c00239de:	b8 02 00 00 00       	mov    eax,0x2
c00239e3:	d9 c1                	fld    st(1)
c00239e5:	d8 e1                	fsub   st,st(1)
c00239e7:	d9 ca                	fxch   st(2)
c00239e9:	de c9                	fmulp  st(1),st
c00239eb:	d8 05 80 9d 02 c0    	fadd   DWORD PTR ds:0xc0029d80
c00239f1:	de f9                	fdivp  st(1),st
c00239f3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00239f7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00239fb:	dd 05 28 9f 02 c0    	fld    QWORD PTR ds:0xc0029f28
c0023a01:	dd 05 30 9f 02 c0    	fld    QWORD PTR ds:0xc0029f30
c0023a07:	e9 5f fe ff ff       	jmp    c002386b <atan+0xab>
c0023a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023a10:	d8 3d a0 9f 02 c0    	fdivr  DWORD PTR ds:0xc0029fa0
c0023a16:	b8 03 00 00 00       	mov    eax,0x3
c0023a1b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a1f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a23:	dd 05 88 9d 02 c0    	fld    QWORD PTR ds:0xc0029d88
c0023a29:	dd 05 28 9d 02 c0    	fld    QWORD PTR ds:0xc0029d28
c0023a2f:	e9 37 fe ff ff       	jmp    c002386b <atan+0xab>
c0023a34:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023a3a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023a40:	d9 e8                	fld1   
c0023a42:	b8 01 00 00 00       	mov    eax,0x1
c0023a47:	d9 c1                	fld    st(1)
c0023a49:	d8 e1                	fsub   st,st(1)
c0023a4b:	d9 ca                	fxch   st(2)
c0023a4d:	de c1                	faddp  st(1),st
c0023a4f:	de f9                	fdivp  st(1),st
c0023a51:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023a55:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023a59:	dd 05 20 9f 02 c0    	fld    QWORD PTR ds:0xc0029f20
c0023a5f:	dd 05 98 9d 02 c0    	fld    QWORD PTR ds:0xc0029d98
c0023a65:	e9 01 fe ff ff       	jmp    c002386b <atan+0xab>
c0023a6a:	66 90                	xchg   ax,ax
c0023a6c:	66 90                	xchg   ax,ax
c0023a6e:	66 90                	xchg   ax,ax

c0023a70 <cos>:
c0023a70:	83 ec 5c             	sub    esp,0x5c
c0023a73:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0023a77:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0023a7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023a7f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023a84:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0023a89:	7f 55                	jg     c0023ae0 <cos+0x70>
c0023a8b:	3d 9d a0 46 3e       	cmp    eax,0x3e46a09d
c0023a90:	7f 2e                	jg     c0023ac0 <cos+0x50>
c0023a92:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c0023a96:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c0023a9b:	66 0d 00 0c          	or     ax,0xc00
c0023a9f:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0023aa4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0023aa8:	db 5c 24 30          	fistp  DWORD PTR [esp+0x30]
c0023aac:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0023ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023ab4:	85 c0                	test   eax,eax
c0023ab6:	0f 84 94 00 00 00    	je     c0023b50 <cos+0xe0>
c0023abc:	eb 04                	jmp    c0023ac2 <cos+0x52>
c0023abe:	66 90                	xchg   ax,ax
c0023ac0:	dd d8                	fstp   st(0)
c0023ac2:	d9 ee                	fldz   
c0023ac4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023ac8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023acc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023acf:	e8 ac 11 00 00       	call   c0024c80 <__kernel_cos>
c0023ad4:	83 c4 5c             	add    esp,0x5c
c0023ad7:	c3                   	ret    
c0023ad8:	90                   	nop
c0023ad9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023ae0:	dd d8                	fstp   st(0)
c0023ae2:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0023ae7:	7e 17                	jle    c0023b00 <cos+0x90>
c0023ae9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023aed:	d8 e0                	fsub   st,st(0)
c0023aef:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0023af3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0023af7:	83 c4 5c             	add    esp,0x5c
c0023afa:	c3                   	ret    
c0023afb:	90                   	nop
c0023afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023b00:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023b04:	8d 44 24 40          	lea    eax,[esp+0x40]
c0023b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023b0c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023b0f:	e8 3c 0c 00 00       	call   c0024750 <__ieee754_rem_pio2>
c0023b14:	83 e0 03             	and    eax,0x3
c0023b17:	83 f8 01             	cmp    eax,0x1
c0023b1a:	0f 84 80 00 00 00    	je     c0023ba0 <cos+0x130>
c0023b20:	83 f8 02             	cmp    eax,0x2
c0023b23:	74 5b                	je     c0023b80 <cos+0x110>
c0023b25:	85 c0                	test   eax,eax
c0023b27:	74 37                	je     c0023b60 <cos+0xf0>
c0023b29:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023b2d:	b8 01 00 00 00       	mov    eax,0x1
c0023b32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023b36:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023b3a:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023b3e:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023b41:	e8 ba 1b 00 00       	call   c0025700 <__kernel_sin>
c0023b46:	eb 8c                	jmp    c0023ad4 <cos+0x64>
c0023b48:	90                   	nop
c0023b49:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023b50:	d9 e8                	fld1   
c0023b52:	83 c4 5c             	add    esp,0x5c
c0023b55:	c3                   	ret    
c0023b56:	8d 76 00             	lea    esi,[esi+0x0]
c0023b59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023b60:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023b64:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023b68:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023b6c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023b6f:	e8 0c 11 00 00       	call   c0024c80 <__kernel_cos>
c0023b74:	e9 5b ff ff ff       	jmp    c0023ad4 <cos+0x64>
c0023b79:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023b80:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023b84:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023b88:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023b8c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023b8f:	e8 ec 10 00 00       	call   c0024c80 <__kernel_cos>
c0023b94:	d9 e0                	fchs   
c0023b96:	e9 39 ff ff ff       	jmp    c0023ad4 <cos+0x64>
c0023b9b:	90                   	nop
c0023b9c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023ba0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0023ba4:	ba 01 00 00 00       	mov    edx,0x1
c0023ba9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0023bad:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0023bb1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0023bb5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023bb8:	e8 43 1b 00 00       	call   c0025700 <__kernel_sin>
c0023bbd:	d9 e0                	fchs   
c0023bbf:	e9 10 ff ff ff       	jmp    c0023ad4 <cos+0x64>
c0023bc4:	66 90                	xchg   ax,ax
c0023bc6:	66 90                	xchg   ax,ax
c0023bc8:	66 90                	xchg   ax,ax
c0023bca:	66 90                	xchg   ax,ax
c0023bcc:	66 90                	xchg   ax,ax
c0023bce:	66 90                	xchg   ax,ax

c0023bd0 <expm1>:
c0023bd0:	d9 05 b0 9f 02 c0    	fld    DWORD PTR ds:0xc0029fb0
c0023bd6:	83 ec 24             	sub    esp,0x24
c0023bd9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0023bdd:	dd 14 24             	fst    QWORD PTR [esp]
c0023be0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023be4:	89 d0                	mov    eax,edx
c0023be6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023beb:	3d 79 68 43 40       	cmp    eax,0x40436879
c0023bf0:	0f 86 ea 00 00 00    	jbe    c0023ce0 <expm1+0x110>
c0023bf6:	dd d9                	fstp   st(1)
c0023bf8:	3d 41 2e 86 40       	cmp    eax,0x40862e41
c0023bfd:	76 51                	jbe    c0023c50 <expm1+0x80>
c0023bff:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0023c04:	76 2a                	jbe    c0023c30 <expm1+0x60>
c0023c06:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0023c09:	89 d1                	mov    ecx,edx
c0023c0b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0023c11:	09 c1                	or     ecx,eax
c0023c13:	0f 84 b7 03 00 00    	je     c0023fd0 <expm1+0x400>
c0023c19:	d9 c0                	fld    st(0)
c0023c1b:	de c1                	faddp  st(1),st
c0023c1d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023c21:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023c25:	e9 0a 02 00 00       	jmp    c0023e34 <expm1+0x264>
c0023c2a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023c30:	dd d8                	fstp   st(0)
c0023c32:	dd 05 c8 9f 02 c0    	fld    QWORD PTR ds:0xc0029fc8
c0023c38:	dd 04 24             	fld    QWORD PTR [esp]
c0023c3b:	df f1                	fcomip st,st(1)
c0023c3d:	dd d8                	fstp   st(0)
c0023c3f:	0f 87 cb 03 00 00    	ja     c0024010 <expm1+0x440>
c0023c45:	eb 0b                	jmp    c0023c52 <expm1+0x82>
c0023c47:	89 f6                	mov    esi,esi
c0023c49:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023c50:	dd d8                	fstp   st(0)
c0023c52:	85 d2                	test   edx,edx
c0023c54:	dd 04 24             	fld    QWORD PTR [esp]
c0023c57:	0f 88 e3 01 00 00    	js     c0023e40 <expm1+0x270>
c0023c5d:	d9 c0                	fld    st(0)
c0023c5f:	dc 0d 60 9e 02 c0    	fmul   QWORD PTR ds:0xc0029e60
c0023c65:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c0023c6b:	d9 7c 24 16          	fnstcw WORD PTR [esp+0x16]
c0023c6f:	de c1                	faddp  st(1),st
c0023c71:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0023c76:	66 0d 00 0c          	or     ax,0xc00
c0023c7a:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0023c7f:	d9 6c 24 14          	fldcw  WORD PTR [esp+0x14]
c0023c83:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0023c87:	d9 6c 24 16          	fldcw  WORD PTR [esp+0x16]
c0023c8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023c8f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0023c92:	db 04 24             	fild   DWORD PTR [esp]
c0023c95:	d9 c0                	fld    st(0)
c0023c97:	dc 0d d8 9f 02 c0    	fmul   QWORD PTR ds:0xc0029fd8
c0023c9d:	de ea                	fsubp  st(2),st
c0023c9f:	d9 c9                	fxch   st(1)
c0023ca1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ca5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ca9:	d9 c9                	fxch   st(1)
c0023cab:	dc 0d c0 9f 02 c0    	fmul   QWORD PTR ds:0xc0029fc0
c0023cb1:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023cb5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023cb9:	d9 c1                	fld    st(1)
c0023cbb:	d8 e1                	fsub   st,st(1)
c0023cbd:	dd 1c 24             	fstp   QWORD PTR [esp]
c0023cc0:	dd 04 24             	fld    QWORD PTR [esp]
c0023cc3:	dc ea                	fsub   st(2),st
c0023cc5:	d9 ca                	fxch   st(2)
c0023cc7:	de e1                	fsubrp st(1),st
c0023cc9:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ccd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023cd1:	eb 2c                	jmp    c0023cff <expm1+0x12f>
c0023cd3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023cd9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023ce0:	dd d8                	fstp   st(0)
c0023ce2:	3d 42 2e d6 3f       	cmp    eax,0x3fd62e42
c0023ce7:	dd 04 24             	fld    QWORD PTR [esp]
c0023cea:	0f 87 c0 01 00 00    	ja     c0023eb0 <expm1+0x2e0>
c0023cf0:	31 c9                	xor    ecx,ecx
c0023cf2:	3d ff ff 8f 3c       	cmp    eax,0x3c8fffff
c0023cf7:	0f 86 f3 01 00 00    	jbe    c0023ef0 <expm1+0x320>
c0023cfd:	d9 c9                	fxch   st(1)
c0023cff:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c0023d05:	85 c9                	test   ecx,ecx
c0023d07:	d9 c2                	fld    st(2)
c0023d09:	d8 c9                	fmul   st,st(1)
c0023d0b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d0f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d13:	d9 c0                	fld    st(0)
c0023d15:	d8 cc                	fmul   st,st(4)
c0023d17:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d1b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d1f:	d9 c0                	fld    st(0)
c0023d21:	dc 0d e0 9f 02 c0    	fmul   QWORD PTR ds:0xc0029fe0
c0023d27:	dc 05 e8 9f 02 c0    	fadd   QWORD PTR ds:0xc0029fe8
c0023d2d:	d8 c9                	fmul   st,st(1)
c0023d2f:	dc 25 f0 9f 02 c0    	fsub   QWORD PTR ds:0xc0029ff0
c0023d35:	d8 c9                	fmul   st,st(1)
c0023d37:	dc 05 f8 9f 02 c0    	fadd   QWORD PTR ds:0xc0029ff8
c0023d3d:	d8 c9                	fmul   st,st(1)
c0023d3f:	dc 25 00 a0 02 c0    	fsub   QWORD PTR ds:0xc002a000
c0023d45:	d8 c9                	fmul   st,st(1)
c0023d47:	d9 e8                	fld1   
c0023d49:	dc c1                	fadd   st(1),st
c0023d4b:	d9 c9                	fxch   st(1)
c0023d4d:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d51:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d55:	dc cb                	fmul   st(3),st
c0023d57:	d9 cb                	fxch   st(3)
c0023d59:	d8 2d e4 9d 02 c0    	fsubr  DWORD PTR ds:0xc0029de4
c0023d5f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d63:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d67:	dc eb                	fsub   st(3),st
c0023d69:	d8 ce                	fmul   st,st(6)
c0023d6b:	d8 2d a4 9f 02 c0    	fsubr  DWORD PTR ds:0xc0029fa4
c0023d71:	de fb                	fdivp  st(3),st
c0023d73:	d9 ca                	fxch   st(2)
c0023d75:	d8 c9                	fmul   st,st(1)
c0023d77:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023d7b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023d7f:	0f 84 9b 00 00 00    	je     c0023e20 <expm1+0x250>
c0023d85:	89 c8                	mov    eax,ecx
c0023d87:	c1 e0 14             	shl    eax,0x14
c0023d8a:	05 00 00 f0 3f       	add    eax,0x3ff00000
c0023d8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d93:	31 c0                	xor    eax,eax
c0023d95:	83 f9 ff             	cmp    ecx,0xffffffff
c0023d98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023d9c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0023da0:	d9 c9                	fxch   st(1)
c0023da2:	d8 e5                	fsub   st,st(5)
c0023da4:	d8 ce                	fmul   st,st(6)
c0023da6:	de e5                	fsubrp st(5),st
c0023da8:	d9 cc                	fxch   st(4)
c0023daa:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023dae:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023db2:	de e1                	fsubrp st(1),st
c0023db4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023db8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023dbc:	0f 84 9e 01 00 00    	je     c0023f60 <expm1+0x390>
c0023dc2:	83 f9 01             	cmp    ecx,0x1
c0023dc5:	0f 84 55 01 00 00    	je     c0023f20 <expm1+0x350>
c0023dcb:	dd da                	fstp   st(2)
c0023dcd:	d9 c9                	fxch   st(1)
c0023dcf:	8d 41 01             	lea    eax,[ecx+0x1]
c0023dd2:	83 f8 39             	cmp    eax,0x39
c0023dd5:	0f 87 95 00 00 00    	ja     c0023e70 <expm1+0x2a0>
c0023ddb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0023de2:	83 f9 13             	cmp    ecx,0x13
c0023de5:	0f 8f b5 01 00 00    	jg     c0023fa0 <expm1+0x3d0>
c0023deb:	dd d9                	fstp   st(1)
c0023ded:	b8 00 00 20 00       	mov    eax,0x200000
c0023df2:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0023df7:	d3 f8                	sar    eax,cl
c0023df9:	29 c2                	sub    edx,eax
c0023dfb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0023dff:	dd 04 24             	fld    QWORD PTR [esp]
c0023e02:	d9 cb                	fxch   st(3)
c0023e04:	de e9                	fsubp  st(1),st
c0023e06:	de ea                	fsubp  st(2),st
c0023e08:	d9 c9                	fxch   st(1)
c0023e0a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e0e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e12:	de c9                	fmulp  st(1),st
c0023e14:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e18:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e1c:	83 c4 24             	add    esp,0x24
c0023e1f:	c3                   	ret    
c0023e20:	dd db                	fstp   st(3)
c0023e22:	dd db                	fstp   st(3)
c0023e24:	dd d8                	fstp   st(0)
c0023e26:	d8 ca                	fmul   st,st(2)
c0023e28:	de e1                	fsubrp st(1),st
c0023e2a:	de e9                	fsubp  st(1),st
c0023e2c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e30:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e34:	83 c4 24             	add    esp,0x24
c0023e37:	c3                   	ret    
c0023e38:	90                   	nop
c0023e39:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023e40:	d9 ee                	fldz   
c0023e42:	d9 c1                	fld    st(1)
c0023e44:	dc 05 d0 9f 02 c0    	fadd   QWORD PTR ds:0xc0029fd0
c0023e4a:	d9 c9                	fxch   st(1)
c0023e4c:	df f1                	fcomip st,st(1)
c0023e4e:	dd d8                	fstp   st(0)
c0023e50:	0f 87 8a 01 00 00    	ja     c0023fe0 <expm1+0x410>
c0023e56:	d9 c0                	fld    st(0)
c0023e58:	dc 0d 60 9e 02 c0    	fmul   QWORD PTR ds:0xc0029e60
c0023e5e:	d9 05 e8 9e 02 c0    	fld    DWORD PTR ds:0xc0029ee8
c0023e64:	e9 02 fe ff ff       	jmp    c0023c6b <expm1+0x9b>
c0023e69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023e70:	de e3                	fsubrp st(3),st
c0023e72:	81 f9 00 04 00 00    	cmp    ecx,0x400
c0023e78:	de e2                	fsubrp st(2),st
c0023e7a:	d9 c9                	fxch   st(1)
c0023e7c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e80:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e84:	0f 84 96 01 00 00    	je     c0024020 <expm1+0x450>
c0023e8a:	de c9                	fmulp  st(1),st
c0023e8c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e90:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023e94:	d9 e8                	fld1   
c0023e96:	de e9                	fsubp  st(1),st
c0023e98:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023e9c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ea0:	eb 92                	jmp    c0023e34 <expm1+0x264>
c0023ea2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023ea9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023eb0:	dd d9                	fstp   st(1)
c0023eb2:	3d b1 a2 f0 3f       	cmp    eax,0x3ff0a2b1
c0023eb7:	0f 87 7a 01 00 00    	ja     c0024037 <expm1+0x467>
c0023ebd:	85 d2                	test   edx,edx
c0023ebf:	0f 88 bb 00 00 00    	js     c0023f80 <expm1+0x3b0>
c0023ec5:	dc 25 d8 9f 02 c0    	fsub   QWORD PTR ds:0xc0029fd8
c0023ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0023ed0:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023ed4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023ed8:	dd 05 c0 9f 02 c0    	fld    QWORD PTR ds:0xc0029fc0
c0023ede:	e9 d6 fd ff ff       	jmp    c0023cb9 <expm1+0xe9>
c0023ee3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023ee9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023ef0:	dd d9                	fstp   st(1)
c0023ef2:	d9 c0                	fld    st(0)
c0023ef4:	dc 05 90 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d90
c0023efa:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c0023efe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f02:	de e1                	fsubrp st(1),st
c0023f04:	de e9                	fsubp  st(1),st
c0023f06:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f0e:	83 c4 24             	add    esp,0x24
c0023f11:	c3                   	ret    
c0023f12:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023f19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0023f20:	dd db                	fstp   st(3)
c0023f22:	d9 c9                	fxch   st(1)
c0023f24:	d9 ca                	fxch   st(2)
c0023f26:	dd 04 24             	fld    QWORD PTR [esp]
c0023f29:	d9 05 a8 9f 02 c0    	fld    DWORD PTR ds:0xc0029fa8
c0023f2f:	df f1                	fcomip st,st(1)
c0023f31:	dd d8                	fstp   st(0)
c0023f33:	0f 86 b7 00 00 00    	jbe    c0023ff0 <expm1+0x420>
c0023f39:	dd d9                	fstp   st(1)
c0023f3b:	d9 ca                	fxch   st(2)
c0023f3d:	de c1                	faddp  st(1),st
c0023f3f:	de e9                	fsubp  st(1),st
c0023f41:	d8 0d ac 9f 02 c0    	fmul   DWORD PTR ds:0xc0029fac
c0023f47:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f4b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f4f:	e9 e0 fe ff ff       	jmp    c0023e34 <expm1+0x264>
c0023f54:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0023f5a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0023f60:	dd db                	fstp   st(3)
c0023f62:	dd d8                	fstp   st(0)
c0023f64:	d9 c9                	fxch   st(1)
c0023f66:	de ea                	fsubp  st(2),st
c0023f68:	dc c9                	fmul   st(1),st
c0023f6a:	de e9                	fsubp  st(1),st
c0023f6c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f70:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f74:	e9 bb fe ff ff       	jmp    c0023e34 <expm1+0x264>
c0023f79:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023f80:	dc 05 d8 9f 02 c0    	fadd   QWORD PTR ds:0xc0029fd8
c0023f86:	b9 ff ff ff ff       	mov    ecx,0xffffffff
c0023f8b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023f8f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023f93:	dd 05 b8 9f 02 c0    	fld    QWORD PTR ds:0xc0029fb8
c0023f99:	e9 1b fd ff ff       	jmp    c0023cb9 <expm1+0xe9>
c0023f9e:	66 90                	xchg   ax,ax
c0023fa0:	b8 ff 03 00 00       	mov    eax,0x3ff
c0023fa5:	29 c8                	sub    eax,ecx
c0023fa7:	c1 e0 14             	shl    eax,0x14
c0023faa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023fae:	dd 04 24             	fld    QWORD PTR [esp]
c0023fb1:	de c1                	faddp  st(1),st
c0023fb3:	de eb                	fsubp  st(3),st
c0023fb5:	d9 ca                	fxch   st(2)
c0023fb7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0023fbb:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0023fbf:	de c2                	faddp  st(2),st
c0023fc1:	d9 c9                	fxch   st(1)
c0023fc3:	e9 42 fe ff ff       	jmp    c0023e0a <expm1+0x23a>
c0023fc8:	90                   	nop
c0023fc9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0023fd0:	dd d8                	fstp   st(0)
c0023fd2:	85 d2                	test   edx,edx
c0023fd4:	78 0c                	js     c0023fe2 <expm1+0x412>
c0023fd6:	dd 04 24             	fld    QWORD PTR [esp]
c0023fd9:	e9 56 fe ff ff       	jmp    c0023e34 <expm1+0x264>
c0023fde:	66 90                	xchg   ax,ax
c0023fe0:	dd d8                	fstp   st(0)
c0023fe2:	d9 e8                	fld1   
c0023fe4:	d9 e0                	fchs   
c0023fe6:	e9 49 fe ff ff       	jmp    c0023e34 <expm1+0x264>
c0023feb:	90                   	nop
c0023fec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0023ff0:	dd da                	fstp   st(2)
c0023ff2:	d9 c9                	fxch   st(1)
c0023ff4:	de ea                	fsubp  st(2),st
c0023ff6:	d9 c9                	fxch   st(1)
c0023ff8:	d8 c0                	fadd   st,st(0)
c0023ffa:	de c1                	faddp  st(1),st
c0023ffc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024000:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024004:	e9 2b fe ff ff       	jmp    c0023e34 <expm1+0x264>
c0024009:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024010:	d9 05 c8 9d 02 c0    	fld    DWORD PTR ds:0xc0029dc8
c0024016:	e9 19 fe ff ff       	jmp    c0023e34 <expm1+0x264>
c002401b:	90                   	nop
c002401c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024020:	dd d9                	fstp   st(1)
c0024022:	d8 c0                	fadd   st,st(0)
c0024024:	dc 0d 08 a0 02 c0    	fmul   QWORD PTR ds:0xc002a008
c002402a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002402e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024032:	e9 5d fe ff ff       	jmp    c0023e94 <expm1+0x2c4>
c0024037:	d9 c0                	fld    st(0)
c0024039:	85 d2                	test   edx,edx
c002403b:	dc 0d 60 9e 02 c0    	fmul   QWORD PTR ds:0xc0029e60
c0024041:	0f 88 17 fe ff ff    	js     c0023e5e <expm1+0x28e>
c0024047:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c002404d:	e9 19 fc ff ff       	jmp    c0023c6b <expm1+0x9b>
c0024052:	66 90                	xchg   ax,ax
c0024054:	66 90                	xchg   ax,ax
c0024056:	66 90                	xchg   ax,ax
c0024058:	66 90                	xchg   ax,ax
c002405a:	66 90                	xchg   ax,ax
c002405c:	66 90                	xchg   ax,ax
c002405e:	66 90                	xchg   ax,ax

c0024060 <fabs>:
c0024060:	83 ec 0c             	sub    esp,0xc
c0024063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024067:	89 04 24             	mov    DWORD PTR [esp],eax
c002406a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002406e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024073:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024077:	dd 04 24             	fld    QWORD PTR [esp]
c002407a:	83 c4 0c             	add    esp,0xc
c002407d:	c3                   	ret    
c002407e:	66 90                	xchg   ax,ax

c0024080 <frexp>:
c0024080:	53                   	push   ebx
c0024081:	83 ec 10             	sub    esp,0x10
c0024084:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024088:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002408c:	dd 14 24             	fst    QWORD PTR [esp]
c002408f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024093:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c0024099:	89 d0                	mov    eax,edx
c002409b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00240a0:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c00240a5:	7f 59                	jg     c0024100 <frexp+0x80>
c00240a7:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00240aa:	09 c3                	or     ebx,eax
c00240ac:	74 62                	je     c0024110 <frexp+0x90>
c00240ae:	31 db                	xor    ebx,ebx
c00240b0:	f7 c2 00 00 f0 7f    	test   edx,0x7ff00000
c00240b6:	75 28                	jne    c00240e0 <frexp+0x60>
c00240b8:	d9 05 10 a0 02 c0    	fld    DWORD PTR ds:0xc002a010
c00240be:	bb ca ff ff ff       	mov    ebx,0xffffffca
c00240c3:	de c9                	fmulp  st(1),st
c00240c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00240c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00240cc:	89 d0                	mov    eax,edx
c00240ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00240d3:	eb 0d                	jmp    c00240e2 <frexp+0x62>
c00240d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00240d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00240e0:	dd d8                	fstp   st(0)
c00240e2:	c1 f8 14             	sar    eax,0x14
c00240e5:	81 e2 ff ff 0f 80    	and    edx,0x800fffff
c00240eb:	8d 84 03 02 fc ff ff 	lea    eax,[ebx+eax*1-0x3fe]
c00240f2:	81 ca 00 00 e0 3f    	or     edx,0x3fe00000
c00240f8:	89 01                	mov    DWORD PTR [ecx],eax
c00240fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00240fe:	eb 12                	jmp    c0024112 <frexp+0x92>
c0024100:	dd d8                	fstp   st(0)
c0024102:	eb 0e                	jmp    c0024112 <frexp+0x92>
c0024104:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002410a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024110:	dd d8                	fstp   st(0)
c0024112:	dd 04 24             	fld    QWORD PTR [esp]
c0024115:	83 c4 10             	add    esp,0x10
c0024118:	5b                   	pop    ebx
c0024119:	c3                   	ret    
c002411a:	66 90                	xchg   ax,ax
c002411c:	66 90                	xchg   ax,ax
c002411e:	66 90                	xchg   ax,ax

c0024120 <modf>:
c0024120:	53                   	push   ebx
c0024121:	83 ec 18             	sub    esp,0x18
c0024124:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024128:	dd 14 24             	fst    QWORD PTR [esp]
c002412b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002412f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0024132:	89 d0                	mov    eax,edx
c0024134:	c1 f8 14             	sar    eax,0x14
c0024137:	25 ff 07 00 00       	and    eax,0x7ff
c002413c:	8d 88 01 fc ff ff    	lea    ecx,[eax-0x3ff]
c0024142:	83 f9 13             	cmp    ecx,0x13
c0024145:	7f 49                	jg     c0024190 <modf+0x70>
c0024147:	85 c9                	test   ecx,ecx
c0024149:	0f 88 f1 00 00 00    	js     c0024240 <modf+0x120>
c002414f:	dd d8                	fstp   st(0)
c0024151:	b8 ff ff 0f 00       	mov    eax,0xfffff
c0024156:	d3 f8                	sar    eax,cl
c0024158:	89 d1                	mov    ecx,edx
c002415a:	21 c1                	and    ecx,eax
c002415c:	09 d9                	or     ecx,ebx
c002415e:	0f 84 ac 00 00 00    	je     c0024210 <modf+0xf0>
c0024164:	f7 d0                	not    eax
c0024166:	21 d0                	and    eax,edx
c0024168:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002416c:	31 c0                	xor    eax,eax
c002416e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024172:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024176:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c002417a:	dd 10                	fst    QWORD PTR [eax]
c002417c:	dd 04 24             	fld    QWORD PTR [esp]
c002417f:	de e1                	fsubrp st(1),st
c0024181:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0024185:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024189:	83 c4 18             	add    esp,0x18
c002418c:	5b                   	pop    ebx
c002418d:	c3                   	ret    
c002418e:	66 90                	xchg   ax,ax
c0024190:	dd d8                	fstp   st(0)
c0024192:	83 f9 33             	cmp    ecx,0x33
c0024195:	7e 39                	jle    c00241d0 <modf+0xb0>
c0024197:	81 f9 00 04 00 00    	cmp    ecx,0x400
c002419d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00241a1:	0f 84 e9 00 00 00    	je     c0024290 <modf+0x170>
c00241a7:	dd 04 24             	fld    QWORD PTR [esp]
c00241aa:	81 e2 00 00 00 80    	and    edx,0x80000000
c00241b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00241b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00241bb:	dd 18                	fstp   QWORD PTR [eax]
c00241bd:	dd 04 24             	fld    QWORD PTR [esp]
c00241c0:	83 c4 18             	add    esp,0x18
c00241c3:	5b                   	pop    ebx
c00241c4:	c3                   	ret    
c00241c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00241c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00241d0:	8d 88 ed fb ff ff    	lea    ecx,[eax-0x413]
c00241d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00241db:	d3 e8                	shr    eax,cl
c00241dd:	85 d8                	test   eax,ebx
c00241df:	75 7f                	jne    c0024260 <modf+0x140>
c00241e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00241e5:	81 e2 00 00 00 80    	and    edx,0x80000000
c00241eb:	dd 04 24             	fld    QWORD PTR [esp]
c00241ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00241f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00241f9:	dd 18                	fstp   QWORD PTR [eax]
c00241fb:	dd 04 24             	fld    QWORD PTR [esp]
c00241fe:	83 c4 18             	add    esp,0x18
c0024201:	5b                   	pop    ebx
c0024202:	c3                   	ret    
c0024203:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024209:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024210:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024214:	81 e2 00 00 00 80    	and    edx,0x80000000
c002421a:	dd 04 24             	fld    QWORD PTR [esp]
c002421d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0024224:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0024228:	dd 18                	fstp   QWORD PTR [eax]
c002422a:	dd 04 24             	fld    QWORD PTR [esp]
c002422d:	83 c4 18             	add    esp,0x18
c0024230:	5b                   	pop    ebx
c0024231:	c3                   	ret    
c0024232:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024239:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024240:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024246:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002424a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002424e:	31 d2                	xor    edx,edx
c0024250:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0024254:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024258:	dd 18                	fstp   QWORD PTR [eax]
c002425a:	83 c4 18             	add    esp,0x18
c002425d:	5b                   	pop    ebx
c002425e:	c3                   	ret    
c002425f:	90                   	nop
c0024260:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024264:	f7 d0                	not    eax
c0024266:	21 d8                	and    eax,ebx
c0024268:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002426c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024270:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0024274:	dd 10                	fst    QWORD PTR [eax]
c0024276:	dd 04 24             	fld    QWORD PTR [esp]
c0024279:	de e1                	fsubrp st(1),st
c002427b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002427f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024283:	83 c4 18             	add    esp,0x18
c0024286:	5b                   	pop    ebx
c0024287:	c3                   	ret    
c0024288:	90                   	nop
c0024289:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024290:	dd 04 24             	fld    QWORD PTR [esp]
c0024293:	dd 10                	fst    QWORD PTR [eax]
c0024295:	d9 ee                	fldz   
c0024297:	de f1                	fdivrp st(1),st
c0024299:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c002429d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00242a1:	e9 e3 fe ff ff       	jmp    c0024189 <modf+0x69>
c00242a6:	66 90                	xchg   ax,ax
c00242a8:	66 90                	xchg   ax,ax
c00242aa:	66 90                	xchg   ax,ax
c00242ac:	66 90                	xchg   ax,ax
c00242ae:	66 90                	xchg   ax,ax

c00242b0 <round>:
c00242b0:	83 ec 2c             	sub    esp,0x2c
c00242b3:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00242b7:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00242bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00242bf:	89 c2                	mov    edx,eax
c00242c1:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00242c7:	81 fa 00 00 f0 7f    	cmp    edx,0x7ff00000
c00242cd:	0f 84 9d 00 00 00    	je     c0024370 <round+0xc0>
c00242d3:	dd d8                	fstp   st(0)
c00242d5:	85 c0                	test   eax,eax
c00242d7:	78 47                	js     c0024320 <round+0x70>
c00242d9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00242dd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00242e0:	e8 ff 03 00 00       	call   c00246e4 <floor>
c00242e5:	d9 c0                	fld    st(0)
c00242e7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00242eb:	d8 e9                	fsubr  st,st(1)
c00242ed:	d9 05 e8 9e 02 c0    	fld    DWORD PTR ds:0xc0029ee8
c00242f3:	df f1                	fcomip st,st(1)
c00242f5:	dd d8                	fstp   st(0)
c00242f7:	72 17                	jb     c0024310 <round+0x60>
c00242f9:	dd d9                	fstp   st(1)
c00242fb:	d8 05 80 9d 02 c0    	fadd   DWORD PTR ds:0xc0029d80
c0024301:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024305:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024309:	eb 07                	jmp    c0024312 <round+0x62>
c002430b:	90                   	nop
c002430c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024310:	dd d8                	fstp   st(0)
c0024312:	83 c4 2c             	add    esp,0x2c
c0024315:	c3                   	ret    
c0024316:	8d 76 00             	lea    esi,[esi+0x0]
c0024319:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024320:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024324:	d9 e0                	fchs   
c0024326:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024329:	e8 b6 03 00 00       	call   c00246e4 <floor>
c002432e:	d9 c0                	fld    st(0)
c0024330:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024334:	d8 c1                	fadd   st,st(1)
c0024336:	d9 05 e8 9e 02 c0    	fld    DWORD PTR ds:0xc0029ee8
c002433c:	df f1                	fcomip st,st(1)
c002433e:	dd d8                	fstp   st(0)
c0024340:	72 1e                	jb     c0024360 <round+0xb0>
c0024342:	dd d9                	fstp   st(1)
c0024344:	d8 05 80 9d 02 c0    	fadd   DWORD PTR ds:0xc0029d80
c002434a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002434e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024352:	eb 0e                	jmp    c0024362 <round+0xb2>
c0024354:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002435a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024360:	dd d8                	fstp   st(0)
c0024362:	d9 e0                	fchs   
c0024364:	83 c4 2c             	add    esp,0x2c
c0024367:	c3                   	ret    
c0024368:	90                   	nop
c0024369:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024370:	d9 c0                	fld    st(0)
c0024372:	de c1                	faddp  st(1),st
c0024374:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024378:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002437c:	83 c4 2c             	add    esp,0x2c
c002437f:	c3                   	ret    

c0024380 <sin>:
c0024380:	83 ec 5c             	sub    esp,0x5c
c0024383:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0024387:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c002438b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002438f:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024394:	3d fb 21 e9 3f       	cmp    eax,0x3fe921fb
c0024399:	7f 65                	jg     c0024400 <sin+0x80>
c002439b:	3d ff ff 4f 3e       	cmp    eax,0x3e4fffff
c00243a0:	7f 2e                	jg     c00243d0 <sin+0x50>
c00243a2:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00243a6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00243ab:	66 0d 00 0c          	or     ax,0xc00
c00243af:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c00243b4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00243b8:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c00243bc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00243c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00243c4:	85 c0                	test   eax,eax
c00243c6:	75 18                	jne    c00243e0 <sin+0x60>
c00243c8:	83 c4 5c             	add    esp,0x5c
c00243cb:	c3                   	ret    
c00243cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00243d0:	dd d8                	fstp   st(0)
c00243d2:	eb 0e                	jmp    c00243e2 <sin+0x62>
c00243d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00243da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00243e0:	dd d8                	fstp   st(0)
c00243e2:	d9 ee                	fldz   
c00243e4:	31 c9                	xor    ecx,ecx
c00243e6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00243ea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00243ee:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00243f2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00243f5:	e8 06 13 00 00       	call   c0025700 <__kernel_sin>
c00243fa:	83 c4 5c             	add    esp,0x5c
c00243fd:	c3                   	ret    
c00243fe:	66 90                	xchg   ax,ax
c0024400:	dd d8                	fstp   st(0)
c0024402:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c0024407:	7e 17                	jle    c0024420 <sin+0xa0>
c0024409:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c002440d:	d8 e0                	fsub   st,st(0)
c002440f:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024413:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024417:	83 c4 5c             	add    esp,0x5c
c002441a:	c3                   	ret    
c002441b:	90                   	nop
c002441c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024420:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024424:	8d 44 24 40          	lea    eax,[esp+0x40]
c0024428:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002442c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002442f:	e8 1c 03 00 00       	call   c0024750 <__ieee754_rem_pio2>
c0024434:	83 e0 03             	and    eax,0x3
c0024437:	83 f8 01             	cmp    eax,0x1
c002443a:	0f 84 90 00 00 00    	je     c00244d0 <sin+0x150>
c0024440:	83 f8 02             	cmp    eax,0x2
c0024443:	74 2b                	je     c0024470 <sin+0xf0>
c0024445:	85 c0                	test   eax,eax
c0024447:	74 57                	je     c00244a0 <sin+0x120>
c0024449:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002444d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024451:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024455:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024458:	e8 23 08 00 00       	call   c0024c80 <__kernel_cos>
c002445d:	d9 e0                	fchs   
c002445f:	e9 64 ff ff ff       	jmp    c00243c8 <sin+0x48>
c0024464:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002446a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024470:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024474:	b8 01 00 00 00       	mov    eax,0x1
c0024479:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002447d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0024481:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0024485:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024488:	e8 73 12 00 00       	call   c0025700 <__kernel_sin>
c002448d:	d9 e0                	fchs   
c002448f:	e9 34 ff ff ff       	jmp    c00243c8 <sin+0x48>
c0024494:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c002449a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00244a0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00244a4:	ba 01 00 00 00       	mov    edx,0x1
c00244a9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00244ad:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00244b1:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00244b5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00244b8:	e8 43 12 00 00       	call   c0025700 <__kernel_sin>
c00244bd:	e9 06 ff ff ff       	jmp    c00243c8 <sin+0x48>
c00244c2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00244c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00244d0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00244d4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00244d8:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00244dc:	dd 1c 24             	fstp   QWORD PTR [esp]
c00244df:	e8 9c 07 00 00       	call   c0024c80 <__kernel_cos>
c00244e4:	e9 df fe ff ff       	jmp    c00243c8 <sin+0x48>
c00244e9:	66 90                	xchg   ax,ax
c00244eb:	66 90                	xchg   ax,ax
c00244ed:	66 90                	xchg   ax,ax
c00244ef:	90                   	nop

c00244f0 <tanh>:
c00244f0:	53                   	push   ebx
c00244f1:	83 ec 28             	sub    esp,0x28
c00244f4:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00244f8:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00244fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024500:	89 d8                	mov    eax,ebx
c0024502:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024507:	3d ff ff ef 7f       	cmp    eax,0x7fefffff
c002450c:	7e 32                	jle    c0024540 <tanh+0x50>
c002450e:	d9 e8                	fld1   
c0024510:	85 db                	test   ebx,ebx
c0024512:	dc f1                	fdivr  st(1),st
c0024514:	78 1a                	js     c0024530 <tanh+0x40>
c0024516:	de c1                	faddp  st(1),st
c0024518:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c002451c:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024520:	83 c4 28             	add    esp,0x28
c0024523:	5b                   	pop    ebx
c0024524:	c3                   	ret    
c0024525:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024530:	de e9                	fsubp  st(1),st
c0024532:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024536:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c002453a:	83 c4 28             	add    esp,0x28
c002453d:	5b                   	pop    ebx
c002453e:	c3                   	ret    
c002453f:	90                   	nop
c0024540:	dd d8                	fstp   st(0)
c0024542:	3d ff ff 35 40       	cmp    eax,0x4035ffff
c0024547:	7f 57                	jg     c00245a0 <tanh+0xb0>
c0024549:	3d ff ff 2f 3e       	cmp    eax,0x3e2fffff
c002454e:	7f 70                	jg     c00245c0 <tanh+0xd0>
c0024550:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024554:	d9 e8                	fld1   
c0024556:	d9 c1                	fld    st(1)
c0024558:	dc 05 90 9d 02 c0    	fadd   QWORD PTR ds:0xc0029d90
c002455e:	df f1                	fcomip st,st(1)
c0024560:	dd d8                	fstp   st(0)
c0024562:	77 bc                	ja     c0024520 <tanh+0x30>
c0024564:	dd d8                	fstp   st(0)
c0024566:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002456a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002456d:	e8 ee fa ff ff       	call   c0024060 <fabs>
c0024572:	d9 05 ac 9f 02 c0    	fld    DWORD PTR ds:0xc0029fac
c0024578:	de c9                	fmulp  st(1),st
c002457a:	dd 1c 24             	fstp   QWORD PTR [esp]
c002457d:	e8 4e f6 ff ff       	call   c0023bd0 <expm1>
c0024582:	d9 c0                	fld    st(0)
c0024584:	d9 e0                	fchs   
c0024586:	d9 05 f0 9d 02 c0    	fld    DWORD PTR ds:0xc0029df0
c002458c:	de c2                	faddp  st(2),st
c002458e:	de f1                	fdivrp st(1),st
c0024590:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0024594:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0024598:	eb 08                	jmp    c00245a2 <tanh+0xb2>
c002459a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00245a0:	d9 e8                	fld1   
c00245a2:	85 db                	test   ebx,ebx
c00245a4:	0f 89 76 ff ff ff    	jns    c0024520 <tanh+0x30>
c00245aa:	d9 e0                	fchs   
c00245ac:	83 c4 28             	add    esp,0x28
c00245af:	5b                   	pop    ebx
c00245b0:	c3                   	ret    
c00245b1:	eb 0d                	jmp    c00245c0 <tanh+0xd0>
c00245b3:	90                   	nop
c00245b4:	90                   	nop
c00245b5:	90                   	nop
c00245b6:	90                   	nop
c00245b7:	90                   	nop
c00245b8:	90                   	nop
c00245b9:	90                   	nop
c00245ba:	90                   	nop
c00245bb:	90                   	nop
c00245bc:	90                   	nop
c00245bd:	90                   	nop
c00245be:	90                   	nop
c00245bf:	90                   	nop
c00245c0:	3d ff ff ef 3f       	cmp    eax,0x3fefffff
c00245c5:	7e 9f                	jle    c0024566 <tanh+0x76>
c00245c7:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00245cb:	dd 1c 24             	fstp   QWORD PTR [esp]
c00245ce:	e8 8d fa ff ff       	call   c0024060 <fabs>
c00245d3:	d8 c0                	fadd   st,st(0)
c00245d5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00245d8:	e8 f3 f5 ff ff       	call   c0023bd0 <expm1>
c00245dd:	d9 05 f0 9d 02 c0    	fld    DWORD PTR ds:0xc0029df0
c00245e3:	dc c1                	fadd   st(1),st
c00245e5:	de f1                	fdivrp st(1),st
c00245e7:	d8 2d 80 9d 02 c0    	fsubr  DWORD PTR ds:0xc0029d80
c00245ed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00245f1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00245f5:	eb ab                	jmp    c00245a2 <tanh+0xb2>
c00245f7:	66 90                	xchg   ax,ax
c00245f9:	66 90                	xchg   ax,ax
c00245fb:	66 90                	xchg   ax,ax
c00245fd:	66 90                	xchg   ax,ax
c00245ff:	90                   	nop

c0024600 <cimag>:
c0024600:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0024604:	c3                   	ret    
c0024605:	66 90                	xchg   ax,ax
c0024607:	66 90                	xchg   ax,ax
c0024609:	66 90                	xchg   ax,ax
c002460b:	66 90                	xchg   ax,ax
c002460d:	66 90                	xchg   ax,ax
c002460f:	90                   	nop

c0024610 <creal>:
c0024610:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024614:	c3                   	ret    
c0024615:	66 90                	xchg   ax,ax
c0024617:	90                   	nop

c0024618 <exp>:
c0024618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002461c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024621:	3d 00 00 f0 7f       	cmp    eax,0x7ff00000
c0024626:	73 42                	jae    c002466a <x_Inf_or_NaN>
c0024628:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002462c:	9b d9 7c 24 04       	fstcw  WORD PTR [esp+0x4]
c0024631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024635:	25 00 03 00 00       	and    eax,0x300
c002463a:	3d 00 03 00 00       	cmp    eax,0x300
c002463f:	74 0c                	je     c002464d <exp+0x35>
c0024641:	c7 44 24 08 7f 13 00 00 	mov    DWORD PTR [esp+0x8],0x137f
c0024649:	d9 6c 24 08          	fldcw  WORD PTR [esp+0x8]
c002464d:	d9 ea                	fldl2e 
c002464f:	de c9                	fmulp  st(1),st
c0024651:	dd d1                	fst    st(1)
c0024653:	d9 fc                	frndint 
c0024655:	dd d2                	fst    st(2)
c0024657:	de e9                	fsubp  st(1),st
c0024659:	d9 f0                	f2xm1  
c002465b:	d9 e8                	fld1   
c002465d:	de c1                	faddp  st(1),st
c002465f:	d9 fd                	fscale 
c0024661:	dd d9                	fstp   st(1)
c0024663:	74 04                	je     c0024669 <exp+0x51>
c0024665:	d9 6c 24 04          	fldcw  WORD PTR [esp+0x4]
c0024669:	c3                   	ret    

c002466a <x_Inf_or_NaN>:
c002466a:	81 7c 24 08 00 00 f0 ff 	cmp    DWORD PTR [esp+0x8],0xfff00000
c0024672:	75 0a                	jne    c002467e <x_not_minus_Inf>
c0024674:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0024679:	75 03                	jne    c002467e <x_not_minus_Inf>
c002467b:	d9 ee                	fldz   
c002467d:	c3                   	ret    

c002467e <x_not_minus_Inf>:
c002467e:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024682:	c3                   	ret    
c0024683:	90                   	nop

c0024684 <fmod>:
c0024684:	dd 44 24 0c          	fld    QWORD PTR [esp+0xc]
c0024688:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002468c:	d9 f8                	fprem  
c002468e:	9b df e0             	fstsw  ax
c0024691:	9e                   	sahf   
c0024692:	7a f8                	jp     c002468c <fmod+0x8>
c0024694:	dd d9                	fstp   st(1)
c0024696:	c3                   	ret    
c0024697:	90                   	nop

c0024698 <log>:
c0024698:	d9 ed                	fldln2 
c002469a:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c002469e:	d9 f1                	fyl2x  
c00246a0:	c3                   	ret    
c00246a1:	66 90                	xchg   ax,ax
c00246a3:	90                   	nop

c00246a4 <log10>:
c00246a4:	d9 ec                	fldlg2 
c00246a6:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00246aa:	d9 f1                	fyl2x  
c00246ac:	c3                   	ret    
c00246ad:	66 90                	xchg   ax,ax
c00246af:	90                   	nop

c00246b0 <sqrt>:
c00246b0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00246b4:	d9 fa                	fsqrt  
c00246b6:	c3                   	ret    
c00246b7:	90                   	nop

c00246b8 <ceil>:
c00246b8:	55                   	push   ebp
c00246b9:	89 e5                	mov    ebp,esp
c00246bb:	83 ec 08             	sub    esp,0x8
c00246be:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c00246c2:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c00246c6:	66 81 ca 00 08       	or     dx,0x800
c00246cb:	66 81 e2 ff fb       	and    dx,0xfbff
c00246d0:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c00246d4:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c00246d7:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c00246da:	d9 fc                	frndint 
c00246dc:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c00246df:	c9                   	leave  
c00246e0:	c3                   	ret    
c00246e1:	66 90                	xchg   ax,ax
c00246e3:	90                   	nop

c00246e4 <floor>:
c00246e4:	55                   	push   ebp
c00246e5:	89 e5                	mov    ebp,esp
c00246e7:	83 ec 08             	sub    esp,0x8
c00246ea:	9b d9 7d fc          	fstcw  WORD PTR [ebp-0x4]
c00246ee:	66 8b 55 fc          	mov    dx,WORD PTR [ebp-0x4]
c00246f2:	66 81 ca 00 04       	or     dx,0x400
c00246f7:	66 81 e2 ff f7       	and    dx,0xf7ff
c00246fc:	66 89 55 f8          	mov    WORD PTR [ebp-0x8],dx
c0024700:	d9 6d f8             	fldcw  WORD PTR [ebp-0x8]
c0024703:	dd 45 08             	fld    QWORD PTR [ebp+0x8]
c0024706:	d9 fc                	frndint 
c0024708:	d9 6d fc             	fldcw  WORD PTR [ebp-0x4]
c002470b:	c9                   	leave  
c002470c:	c3                   	ret    
c002470d:	66 90                	xchg   ax,ax
c002470f:	90                   	nop

c0024710 <tan>:
c0024710:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024714:	d9 f2                	fptan  
c0024716:	df e0                	fnstsw ax
c0024718:	66 25 00 04          	and    ax,0x400
c002471c:	75 03                	jne    c0024721 <tan+0x11>
c002471e:	dd d8                	fstp   st(0)
c0024720:	c3                   	ret    
c0024721:	d9 eb                	fldpi  
c0024723:	d8 c0                	fadd   st,st(0)
c0024725:	d9 c9                	fxch   st(1)
c0024727:	d9 f5                	fprem1 
c0024729:	9b df e0             	fstsw  ax
c002472c:	66 25 00 04          	and    ax,0x400
c0024730:	75 f5                	jne    c0024727 <tan+0x17>
c0024732:	dd d9                	fstp   st(1)
c0024734:	d9 f2                	fptan  
c0024736:	dd d8                	fstp   st(0)
c0024738:	c3                   	ret    
c0024739:	66 90                	xchg   ax,ax
c002473b:	90                   	nop

c002473c <ldexp>:
c002473c:	db 44 24 0c          	fild   DWORD PTR [esp+0xc]
c0024740:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024744:	d9 fd                	fscale 
c0024746:	dd d9                	fstp   st(1)
c0024748:	c3                   	ret    
c0024749:	66 90                	xchg   ax,ax
c002474b:	66 90                	xchg   ax,ax
c002474d:	66 90                	xchg   ax,ax
c002474f:	90                   	nop

c0024750 <__ieee754_rem_pio2>:
c0024750:	56                   	push   esi
c0024751:	53                   	push   ebx
c0024752:	83 ec 74             	sub    esp,0x74
c0024755:	dd 84 24 80 00 00 00 	fld    QWORD PTR [esp+0x80]
c002475c:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0024763:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c0024767:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002476b:	89 f2                	mov    edx,esi
c002476d:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024773:	81 fa 7a 6a 0f 40    	cmp    edx,0x400f6a7a
c0024779:	7f 65                	jg     c00247e0 <__ieee754_rem_pio2+0x90>
c002477b:	89 f0                	mov    eax,esi
c002477d:	25 ff ff 0f 00       	and    eax,0xfffff
c0024782:	3d fb 21 09 00       	cmp    eax,0x921fb
c0024787:	0f 84 57 02 00 00    	je     c00249e4 <__ieee754_rem_pio2+0x294>
c002478d:	81 fa 7c d9 02 40    	cmp    edx,0x4002d97c
c0024793:	0f 8f b7 01 00 00    	jg     c0024950 <__ieee754_rem_pio2+0x200>
c0024799:	85 f6                	test   esi,esi
c002479b:	0f 8e 3a 04 00 00    	jle    c0024bdb <__ieee754_rem_pio2+0x48b>
c00247a1:	dc 25 18 a0 02 c0    	fsub   QWORD PTR ds:0xc002a018
c00247a7:	b8 01 00 00 00       	mov    eax,0x1
c00247ac:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247b0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247b4:	dd 05 20 a0 02 c0    	fld    QWORD PTR ds:0xc002a020
c00247ba:	d9 c1                	fld    st(1)
c00247bc:	d8 e1                	fsub   st,st(1)
c00247be:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00247c2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00247c6:	dd 13                	fst    QWORD PTR [ebx]
c00247c8:	de ea                	fsubp  st(2),st
c00247ca:	de e9                	fsubp  st(1),st
c00247cc:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00247cf:	83 c4 74             	add    esp,0x74
c00247d2:	5b                   	pop    ebx
c00247d3:	5e                   	pop    esi
c00247d4:	c3                   	ret    
c00247d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00247d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00247e0:	dd d8                	fstp   st(0)
c00247e2:	81 fa 3b 46 1c 40    	cmp    edx,0x401c463b
c00247e8:	7f 66                	jg     c0024850 <__ieee754_rem_pio2+0x100>
c00247ea:	81 fa bc fd 15 40    	cmp    edx,0x4015fdbc
c00247f0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00247f4:	0f 8f 96 01 00 00    	jg     c0024990 <__ieee754_rem_pio2+0x240>
c00247fa:	81 fa 7c d9 12 40    	cmp    edx,0x4012d97c
c0024800:	0f 84 de 01 00 00    	je     c00249e4 <__ieee754_rem_pio2+0x294>
c0024806:	85 f6                	test   esi,esi
c0024808:	0f 8e 00 04 00 00    	jle    c0024c0e <__ieee754_rem_pio2+0x4be>
c002480e:	dc 25 38 a0 02 c0    	fsub   QWORD PTR ds:0xc002a038
c0024814:	b8 03 00 00 00       	mov    eax,0x3
c0024819:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002481d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024821:	db 2d 80 a0 02 c0    	fld    TBYTE PTR ds:0xc002a080
c0024827:	d9 c1                	fld    st(1)
c0024829:	d8 e1                	fsub   st,st(1)
c002482b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002482f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024833:	dd 13                	fst    QWORD PTR [ebx]
c0024835:	de ea                	fsubp  st(2),st
c0024837:	de e9                	fsubp  st(1),st
c0024839:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c002483c:	83 c4 74             	add    esp,0x74
c002483f:	5b                   	pop    ebx
c0024840:	5e                   	pop    esi
c0024841:	c3                   	ret    
c0024842:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024850:	81 fa fa 21 39 41    	cmp    edx,0x413921fa
c0024856:	0f 8e 84 01 00 00    	jle    c00249e0 <__ieee754_rem_pio2+0x290>
c002485c:	81 fa ff ff ef 7f    	cmp    edx,0x7fefffff
c0024862:	0f 8f d8 02 00 00    	jg     c0024b40 <__ieee754_rem_pio2+0x3f0>
c0024868:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c002486c:	89 d1                	mov    ecx,edx
c002486e:	c1 f9 14             	sar    ecx,0x14
c0024871:	81 e9 16 04 00 00    	sub    ecx,0x416
c0024877:	89 c8                	mov    eax,ecx
c0024879:	c1 e0 14             	shl    eax,0x14
c002487c:	29 c2                	sub    edx,eax
c002487e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024882:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024886:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002488a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002488f:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0024893:	66 0d 00 0c          	or     ax,0xc00
c0024897:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c002489c:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00248a0:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c00248a4:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00248a8:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c00248ac:	dd 54 24 58          	fst    QWORD PTR [esp+0x58]
c00248b0:	de e9                	fsubp  st(1),st
c00248b2:	d9 05 94 a0 02 c0    	fld    DWORD PTR ds:0xc002a094
c00248b8:	dc c9                	fmul   st(1),st
c00248ba:	d9 c9                	fxch   st(1)
c00248bc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00248c0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00248c4:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c00248c8:	db 54 24 20          	fist   DWORD PTR [esp+0x20]
c00248cc:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c00248d0:	db 44 24 20          	fild   DWORD PTR [esp+0x20]
c00248d4:	dd 54 24 60          	fst    QWORD PTR [esp+0x60]
c00248d8:	de e9                	fsubp  st(1),st
c00248da:	de c9                	fmulp  st(1),st
c00248dc:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00248e0:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00248e4:	dd 54 24 68          	fst    QWORD PTR [esp+0x68]
c00248e8:	d9 ee                	fldz   
c00248ea:	d9 c9                	fxch   st(1)
c00248ec:	df e9                	fucomip st,st(1)
c00248ee:	dd d8                	fstp   st(0)
c00248f0:	0f 8a 8a 02 00 00    	jp     c0024b80 <__ieee754_rem_pio2+0x430>
c00248f6:	0f 85 84 02 00 00    	jne    c0024b80 <__ieee754_rem_pio2+0x430>
c00248fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024900:	31 c0                	xor    eax,eax
c0024902:	85 d2                	test   edx,edx
c0024904:	0f 95 c0             	setne  al
c0024907:	40                   	inc    eax
c0024908:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002490c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0024910:	ba 01 00 00 00       	mov    edx,0x1
c0024915:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024919:	8d 44 24 58          	lea    eax,[esp+0x58]
c002491d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024921:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0024925:	89 04 24             	mov    DWORD PTR [esp],eax
c0024928:	e8 f3 03 00 00       	call   c0024d20 <__kernel_rem_pio2>
c002492d:	85 f6                	test   esi,esi
c002492f:	0f 88 5b 02 00 00    	js     c0024b90 <__ieee754_rem_pio2+0x440>
c0024935:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024939:	dd 1b                	fstp   QWORD PTR [ebx]
c002493b:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c002493f:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024942:	e9 88 fe ff ff       	jmp    c00247cf <__ieee754_rem_pio2+0x7f>
c0024947:	89 f6                	mov    esi,esi
c0024949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024950:	85 f6                	test   esi,esi
c0024952:	0f 8e 50 02 00 00    	jle    c0024ba8 <__ieee754_rem_pio2+0x458>
c0024958:	dc 25 28 a0 02 c0    	fsub   QWORD PTR ds:0xc002a028
c002495e:	b8 02 00 00 00       	mov    eax,0x2
c0024963:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024967:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002496b:	dd 05 30 a0 02 c0    	fld    QWORD PTR ds:0xc002a030
c0024971:	d9 c1                	fld    st(1)
c0024973:	d8 e1                	fsub   st,st(1)
c0024975:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024979:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c002497d:	dd 13                	fst    QWORD PTR [ebx]
c002497f:	de ea                	fsubp  st(2),st
c0024981:	de e9                	fsubp  st(1),st
c0024983:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024986:	83 c4 74             	add    esp,0x74
c0024989:	5b                   	pop    ebx
c002498a:	5e                   	pop    esi
c002498b:	c3                   	ret    
c002498c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0024990:	81 fa fb 21 19 40    	cmp    edx,0x401921fb
c0024996:	74 4c                	je     c00249e4 <__ieee754_rem_pio2+0x294>
c0024998:	85 f6                	test   esi,esi
c002499a:	0f 8e a1 02 00 00    	jle    c0024c41 <__ieee754_rem_pio2+0x4f1>
c00249a0:	dc 25 40 a0 02 c0    	fsub   QWORD PTR ds:0xc002a040
c00249a6:	b8 04 00 00 00       	mov    eax,0x4
c00249ab:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249af:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00249b3:	dd 05 48 a0 02 c0    	fld    QWORD PTR ds:0xc002a048
c00249b9:	d9 c1                	fld    st(1)
c00249bb:	d8 e1                	fsub   st,st(1)
c00249bd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00249c1:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00249c5:	dd 13                	fst    QWORD PTR [ebx]
c00249c7:	de ea                	fsubp  st(2),st
c00249c9:	de e9                	fsubp  st(1),st
c00249cb:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c00249ce:	83 c4 74             	add    esp,0x74
c00249d1:	5b                   	pop    ebx
c00249d2:	5e                   	pop    esi
c00249d3:	c3                   	ret    
c00249d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00249da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00249e0:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00249e4:	d9 7c 24 36          	fnstcw WORD PTR [esp+0x36]
c00249e8:	d9 c0                	fld    st(0)
c00249ea:	dc 0d 50 a0 02 c0    	fmul   QWORD PTR ds:0xc002a050
c00249f0:	c1 fa 14             	sar    edx,0x14
c00249f3:	89 d6                	mov    esi,edx
c00249f5:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c00249fa:	d9 05 90 a0 02 c0    	fld    DWORD PTR ds:0xc002a090
c0024a00:	dc c1                	fadd   st(1),st
c0024a02:	d9 c9                	fxch   st(1)
c0024a04:	66 0d 00 0c          	or     ax,0xc00
c0024a08:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c0024a0d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a11:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a15:	de e1                	fsubrp st(1),st
c0024a17:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a1b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a1f:	d9 6c 24 34          	fldcw  WORD PTR [esp+0x34]
c0024a23:	db 54 24 30          	fist   DWORD PTR [esp+0x30]
c0024a27:	d9 6c 24 36          	fldcw  WORD PTR [esp+0x36]
c0024a2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024a2f:	d9 c0                	fld    st(0)
c0024a31:	dc 0d 18 a0 02 c0    	fmul   QWORD PTR ds:0xc002a018
c0024a37:	de ea                	fsubp  st(2),st
c0024a39:	d9 c9                	fxch   st(1)
c0024a3b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a3f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a43:	d9 c1                	fld    st(1)
c0024a45:	dc 0d 20 a0 02 c0    	fmul   QWORD PTR ds:0xc002a020
c0024a4b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a4f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024a53:	d9 c1                	fld    st(1)
c0024a55:	d8 e1                	fsub   st,st(1)
c0024a57:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024a5b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024a5f:	c1 e9 14             	shr    ecx,0x14
c0024a62:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024a68:	29 ce                	sub    esi,ecx
c0024a6a:	83 fe 10             	cmp    esi,0x10
c0024a6d:	7f 21                	jg     c0024a90 <__ieee754_rem_pio2+0x340>
c0024a6f:	dd da                	fstp   st(2)
c0024a71:	d9 c9                	fxch   st(1)
c0024a73:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024a77:	dd 1b                	fstp   QWORD PTR [ebx]
c0024a79:	d9 c9                	fxch   st(1)
c0024a7b:	dc 64 24 20          	fsub   QWORD PTR [esp+0x20]
c0024a7f:	de e1                	fsubrp st(1),st
c0024a81:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024a84:	83 c4 74             	add    esp,0x74
c0024a87:	5b                   	pop    ebx
c0024a88:	5e                   	pop    esi
c0024a89:	c3                   	ret    
c0024a8a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024a90:	dd d8                	fstp   st(0)
c0024a92:	d9 c1                	fld    st(1)
c0024a94:	dc 0d 58 a0 02 c0    	fmul   QWORD PTR ds:0xc002a058
c0024a9a:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024a9e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024aa2:	d9 c1                	fld    st(1)
c0024aa4:	d8 e1                	fsub   st,st(1)
c0024aa6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024aaa:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024aae:	d9 c0                	fld    st(0)
c0024ab0:	dc eb                	fsub   st(3),st
c0024ab2:	d9 cb                	fxch   st(3)
c0024ab4:	de e2                	fsubrp st(2),st
c0024ab6:	d9 c3                	fld    st(3)
c0024ab8:	dc 0d 60 a0 02 c0    	fmul   QWORD PTR ds:0xc002a060
c0024abe:	de e2                	fsubrp st(2),st
c0024ac0:	d9 c9                	fxch   st(1)
c0024ac2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024ac6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024aca:	d9 c2                	fld    st(2)
c0024acc:	d8 e1                	fsub   st,st(1)
c0024ace:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024ad2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0024ad6:	c1 e9 14             	shr    ecx,0x14
c0024ad9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024adf:	29 ca                	sub    edx,ecx
c0024ae1:	83 fa 31             	cmp    edx,0x31
c0024ae4:	7e 7a                	jle    c0024b60 <__ieee754_rem_pio2+0x410>
c0024ae6:	dd d8                	fstp   st(0)
c0024ae8:	dd d8                	fstp   st(0)
c0024aea:	d9 c1                	fld    st(1)
c0024aec:	dc 0d 68 a0 02 c0    	fmul   QWORD PTR ds:0xc002a068
c0024af2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024af6:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024afa:	d9 c1                	fld    st(1)
c0024afc:	d8 e1                	fsub   st,st(1)
c0024afe:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b02:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b06:	d9 cb                	fxch   st(3)
c0024b08:	dc 0d 70 a0 02 c0    	fmul   QWORD PTR ds:0xc002a070
c0024b0e:	d9 ca                	fxch   st(2)
c0024b10:	d8 e3                	fsub   st,st(3)
c0024b12:	de e1                	fsubrp st(1),st
c0024b14:	de e9                	fsubp  st(1),st
c0024b16:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b1a:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b1e:	d9 c1                	fld    st(1)
c0024b20:	d8 e1                	fsub   st,st(1)
c0024b22:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0024b26:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024b2a:	dd 1b                	fstp   QWORD PTR [ebx]
c0024b2c:	d9 c9                	fxch   st(1)
c0024b2e:	e9 48 ff ff ff       	jmp    c0024a7b <__ieee754_rem_pio2+0x32b>
c0024b33:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0024b40:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024b44:	31 c0                	xor    eax,eax
c0024b46:	d8 e0                	fsub   st,st(0)
c0024b48:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024b4c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024b50:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0024b53:	dd 1b                	fstp   QWORD PTR [ebx]
c0024b55:	e9 75 fc ff ff       	jmp    c00247cf <__ieee754_rem_pio2+0x7f>
c0024b5a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024b60:	dd da                	fstp   st(2)
c0024b62:	dd da                	fstp   st(2)
c0024b64:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0024b68:	dd 1b                	fstp   QWORD PTR [ebx]
c0024b6a:	d9 c9                	fxch   st(1)
c0024b6c:	e9 0a ff ff ff       	jmp    c0024a7b <__ieee754_rem_pio2+0x32b>
c0024b71:	eb 0d                	jmp    c0024b80 <__ieee754_rem_pio2+0x430>
c0024b73:	90                   	nop
c0024b74:	90                   	nop
c0024b75:	90                   	nop
c0024b76:	90                   	nop
c0024b77:	90                   	nop
c0024b78:	90                   	nop
c0024b79:	90                   	nop
c0024b7a:	90                   	nop
c0024b7b:	90                   	nop
c0024b7c:	90                   	nop
c0024b7d:	90                   	nop
c0024b7e:	90                   	nop
c0024b7f:	90                   	nop
c0024b80:	b8 03 00 00 00       	mov    eax,0x3
c0024b85:	e9 7e fd ff ff       	jmp    c0024908 <__ieee754_rem_pio2+0x1b8>
c0024b8a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024b90:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024b94:	f7 d8                	neg    eax
c0024b96:	d9 e0                	fchs   
c0024b98:	dd 1b                	fstp   QWORD PTR [ebx]
c0024b9a:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0024b9e:	d9 e0                	fchs   
c0024ba0:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024ba3:	e9 27 fc ff ff       	jmp    c00247cf <__ieee754_rem_pio2+0x7f>
c0024ba8:	dc 05 28 a0 02 c0    	fadd   QWORD PTR ds:0xc002a028
c0024bae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0024bb3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bb7:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024bbb:	dd 05 30 a0 02 c0    	fld    QWORD PTR ds:0xc002a030
c0024bc1:	d9 c1                	fld    st(1)
c0024bc3:	d8 c1                	fadd   st,st(1)
c0024bc5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bc9:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024bcd:	dd 13                	fst    QWORD PTR [ebx]
c0024bcf:	de ea                	fsubp  st(2),st
c0024bd1:	de c1                	faddp  st(1),st
c0024bd3:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024bd6:	e9 f4 fb ff ff       	jmp    c00247cf <__ieee754_rem_pio2+0x7f>
c0024bdb:	dc 05 18 a0 02 c0    	fadd   QWORD PTR ds:0xc002a018
c0024be1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024be6:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bea:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024bee:	dd 05 20 a0 02 c0    	fld    QWORD PTR ds:0xc002a020
c0024bf4:	d9 c1                	fld    st(1)
c0024bf6:	d8 c1                	fadd   st,st(1)
c0024bf8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024bfc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c00:	dd 13                	fst    QWORD PTR [ebx]
c0024c02:	de ea                	fsubp  st(2),st
c0024c04:	de c1                	faddp  st(1),st
c0024c06:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024c09:	e9 c1 fb ff ff       	jmp    c00247cf <__ieee754_rem_pio2+0x7f>
c0024c0e:	dc 05 38 a0 02 c0    	fadd   QWORD PTR ds:0xc002a038
c0024c14:	b8 fd ff ff ff       	mov    eax,0xfffffffd
c0024c19:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c1d:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c21:	db 2d 80 a0 02 c0    	fld    TBYTE PTR ds:0xc002a080
c0024c27:	d9 c1                	fld    st(1)
c0024c29:	d8 c1                	fadd   st,st(1)
c0024c2b:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c2f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c33:	dd 13                	fst    QWORD PTR [ebx]
c0024c35:	de ea                	fsubp  st(2),st
c0024c37:	de c1                	faddp  st(1),st
c0024c39:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024c3c:	e9 8e fb ff ff       	jmp    c00247cf <__ieee754_rem_pio2+0x7f>
c0024c41:	dc 05 40 a0 02 c0    	fadd   QWORD PTR ds:0xc002a040
c0024c47:	b8 fc ff ff ff       	mov    eax,0xfffffffc
c0024c4c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c50:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c54:	dd 05 48 a0 02 c0    	fld    QWORD PTR ds:0xc002a048
c0024c5a:	d9 c1                	fld    st(1)
c0024c5c:	d8 c1                	fadd   st,st(1)
c0024c5e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0024c62:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0024c66:	dd 13                	fst    QWORD PTR [ebx]
c0024c68:	de ea                	fsubp  st(2),st
c0024c6a:	de c1                	faddp  st(1),st
c0024c6c:	dd 5b 08             	fstp   QWORD PTR [ebx+0x8]
c0024c6f:	e9 5b fb ff ff       	jmp    c00247cf <__ieee754_rem_pio2+0x7f>
c0024c74:	66 90                	xchg   ax,ax
c0024c76:	66 90                	xchg   ax,ax
c0024c78:	66 90                	xchg   ax,ax
c0024c7a:	66 90                	xchg   ax,ax
c0024c7c:	66 90                	xchg   ax,ax
c0024c7e:	66 90                	xchg   ax,ax

c0024c80 <__kernel_cos>:
c0024c80:	83 ec 0c             	sub    esp,0xc
c0024c83:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0024c87:	d9 c0                	fld    st(0)
c0024c89:	d8 c9                	fmul   st,st(1)
c0024c8b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024c8e:	dd 04 24             	fld    QWORD PTR [esp]
c0024c91:	d9 c0                	fld    st(0)
c0024c93:	d8 c9                	fmul   st,st(1)
c0024c95:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024c98:	dd 04 24             	fld    QWORD PTR [esp]
c0024c9b:	d9 c1                	fld    st(1)
c0024c9d:	d8 0d 84 9d 02 c0    	fmul   DWORD PTR ds:0xc0029d84
c0024ca3:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024ca6:	dd 04 24             	fld    QWORD PTR [esp]
c0024ca9:	d9 e8                	fld1   
c0024cab:	d9 c0                	fld    st(0)
c0024cad:	d8 e2                	fsub   st,st(2)
c0024caf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024cb2:	dd 04 24             	fld    QWORD PTR [esp]
c0024cb5:	d9 c4                	fld    st(4)
c0024cb7:	dc 0d 98 a0 02 c0    	fmul   QWORD PTR ds:0xc002a098
c0024cbd:	dc 05 a0 a0 02 c0    	fadd   QWORD PTR ds:0xc002a0a0
c0024cc3:	d8 cd                	fmul   st,st(5)
c0024cc5:	dc 25 a8 a0 02 c0    	fsub   QWORD PTR ds:0xc002a0a8
c0024ccb:	d9 cc                	fxch   st(4)
c0024ccd:	d8 c8                	fmul   st,st(0)
c0024ccf:	de cc                	fmulp  st(4),st
c0024cd1:	d9 c4                	fld    st(4)
c0024cd3:	dc 0d b0 a0 02 c0    	fmul   QWORD PTR ds:0xc002a0b0
c0024cd9:	dc 25 b8 a0 02 c0    	fsub   QWORD PTR ds:0xc002a0b8
c0024cdf:	d8 cd                	fmul   st,st(5)
c0024ce1:	dc 05 c0 a0 02 c0    	fadd   QWORD PTR ds:0xc002a0c0
c0024ce7:	d8 cd                	fmul   st,st(5)
c0024ce9:	de c4                	faddp  st(4),st
c0024ceb:	d9 cb                	fxch   st(3)
c0024ced:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024cf0:	dd 04 24             	fld    QWORD PTR [esp]
c0024cf3:	de cc                	fmulp  st(4),st
c0024cf5:	d9 cc                	fxch   st(4)
c0024cf7:	dc 4c 24 18          	fmul   QWORD PTR [esp+0x18]
c0024cfb:	de eb                	fsubp  st(3),st
c0024cfd:	d9 cb                	fxch   st(3)
c0024cff:	d8 e1                	fsub   st,st(1)
c0024d01:	de e3                	fsubrp st(3),st
c0024d03:	d9 c9                	fxch   st(1)
c0024d05:	de c2                	faddp  st(2),st
c0024d07:	de c1                	faddp  st(1),st
c0024d09:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024d0c:	dd 04 24             	fld    QWORD PTR [esp]
c0024d0f:	83 c4 0c             	add    esp,0xc
c0024d12:	c3                   	ret    
c0024d13:	66 90                	xchg   ax,ax
c0024d15:	66 90                	xchg   ax,ax
c0024d17:	66 90                	xchg   ax,ax
c0024d19:	66 90                	xchg   ax,ax
c0024d1b:	66 90                	xchg   ax,ax
c0024d1d:	66 90                	xchg   ax,ax
c0024d1f:	90                   	nop

c0024d20 <__kernel_rem_pio2>:
c0024d20:	55                   	push   ebp
c0024d21:	57                   	push   edi
c0024d22:	56                   	push   esi
c0024d23:	53                   	push   ebx
c0024d24:	81 ec 8c 02 00 00    	sub    esp,0x28c
c0024d2a:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0024d31:	8b 9c 24 a8 02 00 00 	mov    ebx,DWORD PTR [esp+0x2a8]
c0024d38:	8b 04 85 a8 ab 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5458]
c0024d3f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0024d43:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0024d4a:	48                   	dec    eax
c0024d4b:	83 fb ec             	cmp    ebx,0xffffffec
c0024d4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d52:	0f 8c 44 08 00 00    	jl     c002559c <__kernel_rem_pio2+0x87c>
c0024d58:	8d 4b fd             	lea    ecx,[ebx-0x3]
c0024d5b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
c0024d60:	89 c8                	mov    eax,ecx
c0024d62:	f7 ea                	imul   edx
c0024d64:	c1 f9 1f             	sar    ecx,0x1f
c0024d67:	c1 fa 02             	sar    edx,0x2
c0024d6a:	29 ca                	sub    edx,ecx
c0024d6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024d70:	8d 42 01             	lea    eax,[edx+0x1]
c0024d73:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0024d7a:	29 d0                	sub    eax,edx
c0024d7c:	c1 e0 03             	shl    eax,0x3
c0024d7f:	01 d8                	add    eax,ebx
c0024d81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024d85:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024d89:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0024d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d91:	29 c2                	sub    edx,eax
c0024d93:	01 c6                	add    esi,eax
c0024d95:	78 58                	js     c0024def <__kernel_rem_pio2+0xcf>
c0024d97:	85 d2                	test   edx,edx
c0024d99:	0f 89 f4 04 00 00    	jns    c0025293 <__kernel_rem_pio2+0x573>
c0024d9f:	8d 5c 16 01          	lea    ebx,[esi+edx*1+0x1]
c0024da3:	b8 00 00 00 00       	mov    eax,0x0
c0024da8:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c0024daf:	85 db                	test   ebx,ebx
c0024db1:	0f 4f d8             	cmovg  ebx,eax
c0024db4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024dba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024dc0:	d9 ee                	fldz   
c0024dc2:	42                   	inc    edx
c0024dc3:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0024dc6:	40                   	inc    eax
c0024dc7:	39 da                	cmp    edx,ebx
c0024dc9:	7c f5                	jl     c0024dc0 <__kernel_rem_pio2+0xa0>
c0024dcb:	39 c6                	cmp    esi,eax
c0024dcd:	7c 20                	jl     c0024def <__kernel_rem_pio2+0xcf>
c0024dcf:	29 c2                	sub    edx,eax
c0024dd1:	c1 e2 02             	shl    edx,0x2
c0024dd4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0024dda:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0024de0:	db 84 82 e0 a0 02 c0 	fild   DWORD PTR [edx+eax*4-0x3ffd5f20]
c0024de7:	dd 1c c1             	fstp   QWORD PTR [ecx+eax*8]
c0024dea:	40                   	inc    eax
c0024deb:	39 c6                	cmp    esi,eax
c0024ded:	7d f1                	jge    c0024de0 <__kernel_rem_pio2+0xc0>
c0024def:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024df3:	85 c0                	test   eax,eax
c0024df5:	78 7c                	js     c0024e73 <__kernel_rem_pio2+0x153>
c0024df7:	8d 2c c5 08 00 00 00 	lea    ebp,[eax*8+0x8]
c0024dfe:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0024e05:	31 db                	xor    ebx,ebx
c0024e07:	8b 8c 24 a0 02 00 00 	mov    ecx,DWORD PTR [esp+0x2a0]
c0024e0e:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c0024e15:	c1 e0 03             	shl    eax,0x3
c0024e18:	8d bc 04 98 00 00 00 	lea    edi,[esp+eax*1+0x98]
c0024e1f:	01 c1                	add    ecx,eax
c0024e21:	eb 0d                	jmp    c0024e30 <__kernel_rem_pio2+0x110>
c0024e23:	90                   	nop
c0024e24:	90                   	nop
c0024e25:	90                   	nop
c0024e26:	90                   	nop
c0024e27:	90                   	nop
c0024e28:	90                   	nop
c0024e29:	90                   	nop
c0024e2a:	90                   	nop
c0024e2b:	90                   	nop
c0024e2c:	90                   	nop
c0024e2d:	90                   	nop
c0024e2e:	90                   	nop
c0024e2f:	90                   	nop
c0024e30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024e34:	85 c0                	test   eax,eax
c0024e36:	0f 88 65 04 00 00    	js     c00252a1 <__kernel_rem_pio2+0x581>
c0024e3c:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0024e43:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0024e46:	d9 ee                	fldz   
c0024e48:	90                   	nop
c0024e49:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024e50:	dd 02                	fld    QWORD PTR [edx]
c0024e52:	83 c0 08             	add    eax,0x8
c0024e55:	83 ea 08             	sub    edx,0x8
c0024e58:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c0024e5b:	39 c1                	cmp    ecx,eax
c0024e5d:	de c1                	faddp  st(1),st
c0024e5f:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0024e63:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024e67:	75 e7                	jne    c0024e50 <__kernel_rem_pio2+0x130>
c0024e69:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c0024e6c:	83 c3 08             	add    ebx,0x8
c0024e6f:	39 dd                	cmp    ebp,ebx
c0024e71:	75 bd                	jne    c0024e30 <__kernel_rem_pio2+0x110>
c0024e73:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0024e77:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0024e7b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
c0024e82:	8d 7c 04 4c          	lea    edi,[esp+eax*1+0x4c]
c0024e86:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
c0024e8a:	8d 44 04 48          	lea    eax,[esp+eax*1+0x48]
c0024e8e:	8b bc 24 ac 02 00 00 	mov    edi,DWORD PTR [esp+0x2ac]
c0024e95:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0024e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e9d:	c1 e0 02             	shl    eax,0x2
c0024ea0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024ea4:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c0024eab:	8d 1c f8             	lea    ebx,[eax+edi*8]
c0024eae:	b8 18 00 00 00       	mov    eax,0x18
c0024eb3:	29 e8                	sub    eax,ebp
c0024eb5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024eb9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0024ec0:	85 f6                	test   esi,esi
c0024ec2:	dd 84 f4 e0 01 00 00 	fld    QWORD PTR [esp+esi*8+0x1e0]
c0024ec9:	7e 6a                	jle    c0024f35 <__kernel_rem_pio2+0x215>
c0024ecb:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0024ecf:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c0024ed6:	8d 44 f5 f8          	lea    eax,[ebp+esi*8-0x8]
c0024eda:	8d 54 24 50          	lea    edx,[esp+0x50]
c0024ede:	0f b7 4c 24 46       	movzx  ecx,WORD PTR [esp+0x46]
c0024ee3:	66 81 c9 00 0c       	or     cx,0xc00
c0024ee8:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
c0024eed:	eb 03                	jmp    c0024ef2 <__kernel_rem_pio2+0x1d2>
c0024eef:	90                   	nop
c0024ef0:	89 c8                	mov    eax,ecx
c0024ef2:	83 c2 04             	add    edx,0x4
c0024ef5:	d9 c0                	fld    st(0)
c0024ef7:	d8 0d bc ab 02 c0    	fmul   DWORD PTR ds:0xc002abbc
c0024efd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0024f00:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0024f04:	db 5c 24 10          	fistp  DWORD PTR [esp+0x10]
c0024f08:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0024f0c:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0024f10:	d9 c0                	fld    st(0)
c0024f12:	d8 0d 94 a0 02 c0    	fmul   DWORD PTR ds:0xc002a094
c0024f18:	de ea                	fsubp  st(2),st
c0024f1a:	d9 c9                	fxch   st(1)
c0024f1c:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0024f20:	db 5a fc             	fistp  DWORD PTR [edx-0x4]
c0024f23:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0024f27:	39 c5                	cmp    ebp,eax
c0024f29:	dc 00                	fadd   QWORD PTR [eax]
c0024f2b:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0024f2f:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024f33:	75 bb                	jne    c0024ef0 <__kernel_rem_pio2+0x1d0>
c0024f35:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0024f39:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024f3c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0024f40:	e8 f7 f7 ff ff       	call   c002473c <ldexp>
c0024f45:	d9 c0                	fld    st(0)
c0024f47:	db 7c 24 10          	fstp   TBYTE PTR [esp+0x10]
c0024f4b:	d8 0d c0 ab 02 c0    	fmul   DWORD PTR ds:0xc002abc0
c0024f51:	dd 1c 24             	fstp   QWORD PTR [esp]
c0024f54:	e8 8b f7 ff ff       	call   c00246e4 <floor>
c0024f59:	d9 05 c4 ab 02 c0    	fld    DWORD PTR ds:0xc002abc4
c0024f5f:	de c9                	fmulp  st(1),st
c0024f61:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0024f65:	db 6c 24 10          	fld    TBYTE PTR [esp+0x10]
c0024f69:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c0024f6e:	de e1                	fsubrp st(1),st
c0024f70:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0024f74:	66 0d 00 0c          	or     ax,0xc00
c0024f78:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0024f7d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024f81:	85 ff                	test   edi,edi
c0024f83:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0024f87:	db 54 24 40          	fist   DWORD PTR [esp+0x40]
c0024f8b:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0024f8f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024f93:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0024f97:	db 44 24 24          	fild   DWORD PTR [esp+0x24]
c0024f9b:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0024f9f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0024fa3:	de e9                	fsubp  st(1),st
c0024fa5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0024fa9:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0024fad:	0f 8e 2d 01 00 00    	jle    c00250e0 <__kernel_rem_pio2+0x3c0>
c0024fb3:	8d 7e ff             	lea    edi,[esi-0x1]
c0024fb6:	0f b6 4c 24 2c       	movzx  ecx,BYTE PTR [esp+0x2c]
c0024fbb:	8b 44 bc 50          	mov    eax,DWORD PTR [esp+edi*4+0x50]
c0024fbf:	89 c2                	mov    edx,eax
c0024fc1:	d3 fa                	sar    edx,cl
c0024fc3:	01 d5                	add    ebp,edx
c0024fc5:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0024fc9:	d3 e2                	shl    edx,cl
c0024fcb:	b9 17 00 00 00       	mov    ecx,0x17
c0024fd0:	29 d0                	sub    eax,edx
c0024fd2:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0024fd6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0024fda:	29 f9                	sub    ecx,edi
c0024fdc:	d3 f8                	sar    eax,cl
c0024fde:	89 c5                	mov    ebp,eax
c0024fe0:	85 ed                	test   ebp,ebp
c0024fe2:	0f 8f 0e 01 00 00    	jg     c00250f6 <__kernel_rem_pio2+0x3d6>
c0024fe8:	d9 ee                	fldz   
c0024fea:	d9 c9                	fxch   st(1)
c0024fec:	db e9                	fucomi st,st(1)
c0024fee:	dd d9                	fstp   st(1)
c0024ff0:	0f 8a a2 01 00 00    	jp     c0025198 <__kernel_rem_pio2+0x478>
c0024ff6:	0f 85 9c 01 00 00    	jne    c0025198 <__kernel_rem_pio2+0x478>
c0024ffc:	dd d8                	fstp   st(0)
c0024ffe:	8d 7e ff             	lea    edi,[esi-0x1]
c0025001:	39 7c 24 28          	cmp    DWORD PTR [esp+0x28],edi
c0025005:	7f 2a                	jg     c0025031 <__kernel_rem_pio2+0x311>
c0025007:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002500b:	8d 44 b4 4c          	lea    eax,[esp+esi*4+0x4c]
c002500f:	31 d2                	xor    edx,edx
c0025011:	eb 0d                	jmp    c0025020 <__kernel_rem_pio2+0x300>
c0025013:	90                   	nop
c0025014:	90                   	nop
c0025015:	90                   	nop
c0025016:	90                   	nop
c0025017:	90                   	nop
c0025018:	90                   	nop
c0025019:	90                   	nop
c002501a:	90                   	nop
c002501b:	90                   	nop
c002501c:	90                   	nop
c002501d:	90                   	nop
c002501e:	90                   	nop
c002501f:	90                   	nop
c0025020:	0b 10                	or     edx,DWORD PTR [eax]
c0025022:	83 e8 04             	sub    eax,0x4
c0025025:	39 c1                	cmp    ecx,eax
c0025027:	75 f7                	jne    c0025020 <__kernel_rem_pio2+0x300>
c0025029:	85 d2                	test   edx,edx
c002502b:	0f 85 85 02 00 00    	jne    c00252b6 <__kernel_rem_pio2+0x596>
c0025031:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025035:	8b 4c 84 4c          	mov    ecx,DWORD PTR [esp+eax*4+0x4c]
c0025039:	85 c9                	test   ecx,ecx
c002503b:	0f 85 48 02 00 00    	jne    c0025289 <__kernel_rem_pio2+0x569>
c0025041:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0025045:	bf 01 00 00 00       	mov    edi,0x1
c002504a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0025050:	83 e8 04             	sub    eax,0x4
c0025053:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0025056:	47                   	inc    edi
c0025057:	85 d2                	test   edx,edx
c0025059:	74 f5                	je     c0025050 <__kernel_rem_pio2+0x330>
c002505b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002505e:	01 f7                	add    edi,esi
c0025060:	8b 84 24 ac 02 00 00 	mov    eax,DWORD PTR [esp+0x2ac]
c0025067:	8d ac 24 e0 01 00 00 	lea    ebp,[esp+0x1e0]
c002506e:	01 c6                	add    esi,eax
c0025070:	8d b4 f4 a0 00 00 00 	lea    esi,[esp+esi*8+0xa0]
c0025077:	89 f6                	mov    esi,esi
c0025079:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025080:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025084:	db 84 88 e0 a0 02 c0 	fild   DWORD PTR [eax+ecx*4-0x3ffd5f20]
c002508b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002508f:	85 c0                	test   eax,eax
c0025091:	dd 1e                	fstp   QWORD PTR [esi]
c0025093:	78 3b                	js     c00250d0 <__kernel_rem_pio2+0x3b0>
c0025095:	8b 84 24 a0 02 00 00 	mov    eax,DWORD PTR [esp+0x2a0]
c002509c:	d9 ee                	fldz   
c002509e:	89 f2                	mov    edx,esi
c00250a0:	dd 02                	fld    QWORD PTR [edx]
c00250a2:	83 c0 08             	add    eax,0x8
c00250a5:	83 ea 08             	sub    edx,0x8
c00250a8:	dc 48 f8             	fmul   QWORD PTR [eax-0x8]
c00250ab:	39 c3                	cmp    ebx,eax
c00250ad:	de c1                	faddp  st(1),st
c00250af:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00250b3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00250b7:	75 e7                	jne    c00250a0 <__kernel_rem_pio2+0x380>
c00250b9:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00250bd:	41                   	inc    ecx
c00250be:	83 c6 08             	add    esi,0x8
c00250c1:	39 cf                	cmp    edi,ecx
c00250c3:	7d bb                	jge    c0025080 <__kernel_rem_pio2+0x360>
c00250c5:	89 fe                	mov    esi,edi
c00250c7:	e9 f4 fd ff ff       	jmp    c0024ec0 <__kernel_rem_pio2+0x1a0>
c00250cc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00250d0:	d9 ee                	fldz   
c00250d2:	83 c6 08             	add    esi,0x8
c00250d5:	dd 5c cd 00          	fstp   QWORD PTR [ebp+ecx*8+0x0]
c00250d9:	41                   	inc    ecx
c00250da:	39 cf                	cmp    edi,ecx
c00250dc:	7d a2                	jge    c0025080 <__kernel_rem_pio2+0x360>
c00250de:	eb e5                	jmp    c00250c5 <__kernel_rem_pio2+0x3a5>
c00250e0:	0f 85 8a 01 00 00    	jne    c0025270 <__kernel_rem_pio2+0x550>
c00250e6:	8b 6c b4 4c          	mov    ebp,DWORD PTR [esp+esi*4+0x4c]
c00250ea:	c1 fd 17             	sar    ebp,0x17
c00250ed:	85 ed                	test   ebp,ebp
c00250ef:	90                   	nop
c00250f0:	0f 8e f2 fe ff ff    	jle    c0024fe8 <__kernel_rem_pio2+0x2c8>
c00250f6:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00250fa:	85 f6                	test   esi,esi
c00250fc:	0f 8e d3 04 00 00    	jle    c00255d5 <__kernel_rem_pio2+0x8b5>
c0025102:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0025106:	85 d2                	test   edx,edx
c0025108:	0f 85 12 01 00 00    	jne    c0025220 <__kernel_rem_pio2+0x500>
c002510e:	83 fe 01             	cmp    esi,0x1
c0025111:	b9 01 00 00 00       	mov    ecx,0x1
c0025116:	74 15                	je     c002512d <__kernel_rem_pio2+0x40d>
c0025118:	8b 54 8c 50          	mov    edx,DWORD PTR [esp+ecx*4+0x50]
c002511c:	8d 41 01             	lea    eax,[ecx+0x1]
c002511f:	85 d2                	test   edx,edx
c0025121:	0f 85 00 01 00 00    	jne    c0025227 <__kernel_rem_pio2+0x507>
c0025127:	39 c6                	cmp    esi,eax
c0025129:	89 c1                	mov    ecx,eax
c002512b:	75 eb                	jne    c0025118 <__kernel_rem_pio2+0x3f8>
c002512d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025131:	85 c0                	test   eax,eax
c0025133:	7e 16                	jle    c002514b <__kernel_rem_pio2+0x42b>
c0025135:	83 f8 01             	cmp    eax,0x1
c0025138:	0f 84 51 04 00 00    	je     c002558f <__kernel_rem_pio2+0x86f>
c002513e:	83 f8 02             	cmp    eax,0x2
c0025141:	75 08                	jne    c002514b <__kernel_rem_pio2+0x42b>
c0025143:	81 64 b4 4c ff ff 3f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x3fffff
c002514b:	83 fd 02             	cmp    ebp,0x2
c002514e:	0f 85 94 fe ff ff    	jne    c0024fe8 <__kernel_rem_pio2+0x2c8>
c0025154:	d9 e8                	fld1   
c0025156:	85 d2                	test   edx,edx
c0025158:	de e1                	fsubrp st(1),st
c002515a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002515e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025162:	0f 84 80 fe ff ff    	je     c0024fe8 <__kernel_rem_pio2+0x2c8>
c0025168:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c002516c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025170:	d9 e8                	fld1   
c0025172:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025179:	e8 be f5 ff ff       	call   c002473c <ldexp>
c002517e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0025182:	de e1                	fsubrp st(1),st
c0025184:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025188:	d9 ee                	fldz   
c002518a:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002518e:	db e9                	fucomi st,st(1)
c0025190:	dd d9                	fstp   st(1)
c0025192:	0f 8b 5e fe ff ff    	jnp    c0024ff6 <__kernel_rem_pio2+0x2d6>
c0025198:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002519c:	dd 1c 24             	fstp   QWORD PTR [esp]
c002519f:	89 d8                	mov    eax,ebx
c00251a1:	f7 d8                	neg    eax
c00251a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00251a7:	e8 90 f5 ff ff       	call   c002473c <ldexp>
c00251ac:	d9 05 94 a0 02 c0    	fld    DWORD PTR ds:0xc002a094
c00251b2:	d9 c9                	fxch   st(1)
c00251b4:	db f1                	fcomi  st,st(1)
c00251b6:	dd d9                	fstp   st(1)
c00251b8:	0f 82 94 04 00 00    	jb     c0025652 <__kernel_rem_pio2+0x932>
c00251be:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c00251c2:	83 c3 18             	add    ebx,0x18
c00251c5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00251c9:	d9 c0                	fld    st(0)
c00251cb:	d8 0d bc ab 02 c0    	fmul   DWORD PTR ds:0xc002abbc
c00251d1:	8d 7e 01             	lea    edi,[esi+0x1]
c00251d4:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c00251d9:	66 0d 00 0c          	or     ax,0xc00
c00251dd:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c00251e2:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c00251e6:	db 5c 24 40          	fistp  DWORD PTR [esp+0x40]
c00251ea:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c00251ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00251f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00251f6:	db 44 24 1c          	fild   DWORD PTR [esp+0x1c]
c00251fa:	d8 0d 94 a0 02 c0    	fmul   DWORD PTR ds:0xc002a094
c0025200:	de e9                	fsubp  st(1),st
c0025202:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c0025206:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c002520a:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c002520e:	89 44 bc 50          	mov    DWORD PTR [esp+edi*4+0x50],eax
c0025212:	89 d8                	mov    eax,ebx
c0025214:	e9 be 00 00 00       	jmp    c00252d7 <__kernel_rem_pio2+0x5b7>
c0025219:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0025220:	b8 01 00 00 00       	mov    eax,0x1
c0025225:	31 c9                	xor    ecx,ecx
c0025227:	bf 00 00 00 01       	mov    edi,0x1000000
c002522c:	29 d7                	sub    edi,edx
c002522e:	39 c6                	cmp    esi,eax
c0025230:	89 7c 8c 50          	mov    DWORD PTR [esp+ecx*4+0x50],edi
c0025234:	7e 30                	jle    c0025266 <__kernel_rem_pio2+0x546>
c0025236:	8b 4c 84 50          	mov    ecx,DWORD PTR [esp+eax*4+0x50]
c002523a:	ba ff ff ff 00       	mov    edx,0xffffff
c002523f:	29 ca                	sub    edx,ecx
c0025241:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0025245:	40                   	inc    eax
c0025246:	39 c6                	cmp    esi,eax
c0025248:	7e 1c                	jle    c0025266 <__kernel_rem_pio2+0x546>
c002524a:	8d 44 84 50          	lea    eax,[esp+eax*4+0x50]
c002524e:	b9 ff ff ff 00       	mov    ecx,0xffffff
c0025253:	8d 7c b4 50          	lea    edi,[esp+esi*4+0x50]
c0025257:	89 ca                	mov    edx,ecx
c0025259:	83 c0 04             	add    eax,0x4
c002525c:	2b 50 fc             	sub    edx,DWORD PTR [eax-0x4]
c002525f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0025262:	39 c7                	cmp    edi,eax
c0025264:	75 f1                	jne    c0025257 <__kernel_rem_pio2+0x537>
c0025266:	ba 01 00 00 00       	mov    edx,0x1
c002526b:	e9 bd fe ff ff       	jmp    c002512d <__kernel_rem_pio2+0x40d>
c0025270:	d9 05 84 9d 02 c0    	fld    DWORD PTR ds:0xc0029d84
c0025276:	d9 c9                	fxch   st(1)
c0025278:	db f1                	fcomi  st,st(1)
c002527a:	dd d9                	fstp   st(1)
c002527c:	0f 83 2a 03 00 00    	jae    c00255ac <__kernel_rem_pio2+0x88c>
c0025282:	31 ed                	xor    ebp,ebp
c0025284:	e9 5f fd ff ff       	jmp    c0024fe8 <__kernel_rem_pio2+0x2c8>
c0025289:	8d 4e 01             	lea    ecx,[esi+0x1]
c002528c:	89 cf                	mov    edi,ecx
c002528e:	e9 cd fd ff ff       	jmp    c0025060 <__kernel_rem_pio2+0x340>
c0025293:	8d 8c 24 a0 00 00 00 	lea    ecx,[esp+0xa0]
c002529a:	31 c0                	xor    eax,eax
c002529c:	e9 2e fb ff ff       	jmp    c0024dcf <__kernel_rem_pio2+0xaf>
c00252a1:	d9 ee                	fldz   
c00252a3:	dd 1c 1e             	fstp   QWORD PTR [esi+ebx*1]
c00252a6:	83 c3 08             	add    ebx,0x8
c00252a9:	39 dd                	cmp    ebp,ebx
c00252ab:	0f 85 7f fb ff ff    	jne    c0024e30 <__kernel_rem_pio2+0x110>
c00252b1:	e9 bd fb ff ff       	jmp    c0024e73 <__kernel_rem_pio2+0x153>
c00252b6:	8b 5c bc 50          	mov    ebx,DWORD PTR [esp+edi*4+0x50]
c00252ba:	83 6c 24 24 18       	sub    DWORD PTR [esp+0x24],0x18
c00252bf:	85 db                	test   ebx,ebx
c00252c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00252c5:	75 10                	jne    c00252d7 <__kernel_rem_pio2+0x5b7>
c00252c7:	4f                   	dec    edi
c00252c8:	83 e8 18             	sub    eax,0x18
c00252cb:	8b 4c bc 50          	mov    ecx,DWORD PTR [esp+edi*4+0x50]
c00252cf:	85 c9                	test   ecx,ecx
c00252d1:	74 f4                	je     c00252c7 <__kernel_rem_pio2+0x5a7>
c00252d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00252d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00252db:	d9 e8                	fld1   
c00252dd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00252e0:	e8 57 f4 ff ff       	call   c002473c <ldexp>
c00252e5:	85 ff                	test   edi,edi
c00252e7:	0f 88 d2 03 00 00    	js     c00256bf <__kernel_rem_pio2+0x99f>
c00252ed:	8d b4 24 e0 01 00 00 	lea    esi,[esp+0x1e0]
c00252f4:	89 f8                	mov    eax,edi
c00252f6:	8d 76 00             	lea    esi,[esi+0x0]
c00252f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0025300:	db 44 84 50          	fild   DWORD PTR [esp+eax*4+0x50]
c0025304:	d8 c9                	fmul   st,st(1)
c0025306:	dd 1c c6             	fstp   QWORD PTR [esi+eax*8]
c0025309:	48                   	dec    eax
c002530a:	d8 0d bc ab 02 c0    	fmul   DWORD PTR ds:0xc002abbc
c0025310:	83 f8 ff             	cmp    eax,0xffffffff
c0025313:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025317:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002531b:	75 e3                	jne    c0025300 <__kernel_rem_pio2+0x5e0>
c002531d:	dd d8                	fstp   st(0)
c002531f:	8d 04 fd 00 00 00 00 	lea    eax,[edi*8+0x0]
c0025326:	31 d2                	xor    edx,edx
c0025328:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002532c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025330:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c0025337:	01 f0                	add    eax,esi
c0025339:	89 6c 24 20          	mov    DWORD PTR [esp+0x20],ebp
c002533d:	eb 03                	jmp    c0025342 <__kernel_rem_pio2+0x622>
c002533f:	90                   	nop
c0025340:	89 e8                	mov    eax,ebp
c0025342:	85 db                	test   ebx,ebx
c0025344:	0f 88 84 02 00 00    	js     c00255ce <__kernel_rem_pio2+0x8ae>
c002534a:	d9 05 dc ab 02 c0    	fld    DWORD PTR ds:0xc002abdc
c0025350:	dc 08                	fmul   QWORD PTR [eax]
c0025352:	d8 05 b8 ab 02 c0    	fadd   DWORD PTR ds:0xc002abb8
c0025358:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002535c:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025360:	0f 84 d9 00 00 00    	je     c002543f <__kernel_rem_pio2+0x71f>
c0025366:	85 d2                	test   edx,edx
c0025368:	0f 84 d1 00 00 00    	je     c002543f <__kernel_rem_pio2+0x71f>
c002536e:	d9 05 c8 ab 02 c0    	fld    DWORD PTR ds:0xc002abc8
c0025374:	83 fb 01             	cmp    ebx,0x1
c0025377:	dc 48 08             	fmul   QWORD PTR [eax+0x8]
c002537a:	de c1                	faddp  st(1),st
c002537c:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025380:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025384:	0f 84 b5 00 00 00    	je     c002543f <__kernel_rem_pio2+0x71f>
c002538a:	83 fa 01             	cmp    edx,0x1
c002538d:	0f 84 ac 00 00 00    	je     c002543f <__kernel_rem_pio2+0x71f>
c0025393:	d9 05 cc ab 02 c0    	fld    DWORD PTR ds:0xc002abcc
c0025399:	83 fb 02             	cmp    ebx,0x2
c002539c:	dc 48 10             	fmul   QWORD PTR [eax+0x10]
c002539f:	de c1                	faddp  st(1),st
c00253a1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00253a5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00253a9:	0f 84 90 00 00 00    	je     c002543f <__kernel_rem_pio2+0x71f>
c00253af:	83 fa 02             	cmp    edx,0x2
c00253b2:	0f 84 87 00 00 00    	je     c002543f <__kernel_rem_pio2+0x71f>
c00253b8:	d9 05 d0 ab 02 c0    	fld    DWORD PTR ds:0xc002abd0
c00253be:	83 fb 03             	cmp    ebx,0x3
c00253c1:	dc 48 18             	fmul   QWORD PTR [eax+0x18]
c00253c4:	de c1                	faddp  st(1),st
c00253c6:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00253ca:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00253ce:	74 6f                	je     c002543f <__kernel_rem_pio2+0x71f>
c00253d0:	83 fa 03             	cmp    edx,0x3
c00253d3:	74 6a                	je     c002543f <__kernel_rem_pio2+0x71f>
c00253d5:	d9 05 d4 ab 02 c0    	fld    DWORD PTR ds:0xc002abd4
c00253db:	83 fb 04             	cmp    ebx,0x4
c00253de:	dc 48 20             	fmul   QWORD PTR [eax+0x20]
c00253e1:	de c1                	faddp  st(1),st
c00253e3:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00253e7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00253eb:	74 52                	je     c002543f <__kernel_rem_pio2+0x71f>
c00253ed:	83 fa 04             	cmp    edx,0x4
c00253f0:	74 4d                	je     c002543f <__kernel_rem_pio2+0x71f>
c00253f2:	d9 05 d8 ab 02 c0    	fld    DWORD PTR ds:0xc002abd8
c00253f8:	83 fb 05             	cmp    ebx,0x5
c00253fb:	dc 48 28             	fmul   QWORD PTR [eax+0x28]
c00253fe:	de c1                	faddp  st(1),st
c0025400:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025404:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025408:	74 35                	je     c002543f <__kernel_rem_pio2+0x71f>
c002540a:	83 fa 05             	cmp    edx,0x5
c002540d:	74 30                	je     c002543f <__kernel_rem_pio2+0x71f>
c002540f:	dd 05 e0 ab 02 c0    	fld    QWORD PTR ds:0xc002abe0
c0025415:	83 fb 06             	cmp    ebx,0x6
c0025418:	dc 48 30             	fmul   QWORD PTR [eax+0x30]
c002541b:	de c1                	faddp  st(1),st
c002541d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025421:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025425:	74 18                	je     c002543f <__kernel_rem_pio2+0x71f>
c0025427:	83 fa 06             	cmp    edx,0x6
c002542a:	74 13                	je     c002543f <__kernel_rem_pio2+0x71f>
c002542c:	dd 05 e8 ab 02 c0    	fld    QWORD PTR ds:0xc002abe8
c0025432:	dc 48 38             	fmul   QWORD PTR [eax+0x38]
c0025435:	de c1                	faddp  st(1),st
c0025437:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002543b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002543f:	dd 1c d1             	fstp   QWORD PTR [ecx+edx*8]
c0025442:	42                   	inc    edx
c0025443:	8d 68 f8             	lea    ebp,[eax-0x8]
c0025446:	39 c6                	cmp    esi,eax
c0025448:	0f 85 f2 fe ff ff    	jne    c0025340 <__kernel_rem_pio2+0x620>
c002544e:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c0025456:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002545a:	7f 4f                	jg     c00254ab <__kernel_rem_pio2+0x78b>
c002545c:	8b 84 24 b0 02 00 00 	mov    eax,DWORD PTR [esp+0x2b0]
c0025463:	85 c0                	test   eax,eax
c0025465:	0f 8f 71 01 00 00    	jg     c00255dc <__kernel_rem_pio2+0x8bc>
c002546b:	75 2c                	jne    c0025499 <__kernel_rem_pio2+0x779>
c002546d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025471:	d9 ee                	fldz   
c0025473:	01 c8                	add    eax,ecx
c0025475:	eb 02                	jmp    c0025479 <__kernel_rem_pio2+0x759>
c0025477:	89 d0                	mov    eax,edx
c0025479:	39 c8                	cmp    eax,ecx
c002547b:	dc 00                	fadd   QWORD PTR [eax]
c002547d:	8d 50 f8             	lea    edx,[eax-0x8]
c0025480:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025484:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025488:	75 ed                	jne    c0025477 <__kernel_rem_pio2+0x757>
c002548a:	85 ed                	test   ebp,ebp
c002548c:	74 02                	je     c0025490 <__kernel_rem_pio2+0x770>
c002548e:	d9 e0                	fchs   
c0025490:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025497:	dd 18                	fstp   QWORD PTR [eax]
c0025499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549d:	81 c4 8c 02 00 00    	add    esp,0x28c
c00254a3:	5b                   	pop    ebx
c00254a4:	5e                   	pop    esi
c00254a5:	83 e0 07             	and    eax,0x7
c00254a8:	5f                   	pop    edi
c00254a9:	5d                   	pop    ebp
c00254aa:	c3                   	ret    
c00254ab:	83 bc 24 b0 02 00 00 03 	cmp    DWORD PTR [esp+0x2b0],0x3
c00254b3:	75 e4                	jne    c0025499 <__kernel_rem_pio2+0x779>
c00254b5:	85 ff                	test   edi,edi
c00254b7:	0f 8e 38 02 00 00    	jle    c00256f5 <__kernel_rem_pio2+0x9d5>
c00254bd:	8d 14 fd 00 00 00 00 	lea    edx,[edi*8+0x0]
c00254c4:	8d 8c 24 40 01 00 00 	lea    ecx,[esp+0x140]
c00254cb:	dd 84 14 40 01 00 00 	fld    QWORD PTR [esp+edx*1+0x140]
c00254d2:	8d 44 11 f8          	lea    eax,[ecx+edx*1-0x8]
c00254d6:	eb 02                	jmp    c00254da <__kernel_rem_pio2+0x7ba>
c00254d8:	89 d0                	mov    eax,edx
c00254da:	dd 00                	fld    QWORD PTR [eax]
c00254dc:	8d 50 f8             	lea    edx,[eax-0x8]
c00254df:	39 c1                	cmp    ecx,eax
c00254e1:	d9 c1                	fld    st(1)
c00254e3:	d9 c1                	fld    st(1)
c00254e5:	de c3                	faddp  st(3),st
c00254e7:	d9 ca                	fxch   st(2)
c00254e9:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00254ed:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00254f1:	d9 c0                	fld    st(0)
c00254f3:	dc ea                	fsub   st(2),st
c00254f5:	d9 ca                	fxch   st(2)
c00254f7:	de c3                	faddp  st(3),st
c00254f9:	d9 ca                	fxch   st(2)
c00254fb:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c00254fe:	d9 c9                	fxch   st(1)
c0025500:	dd 18                	fstp   QWORD PTR [eax]
c0025502:	75 d4                	jne    c00254d8 <__kernel_rem_pio2+0x7b8>
c0025504:	dd d8                	fstp   st(0)
c0025506:	83 ff 01             	cmp    edi,0x1
c0025509:	0f 8e e6 01 00 00    	jle    c00256f5 <__kernel_rem_pio2+0x9d5>
c002550f:	c1 e7 03             	shl    edi,0x3
c0025512:	8d 44 39 f8          	lea    eax,[ecx+edi*1-0x8]
c0025516:	dd 84 3c 40 01 00 00 	fld    QWORD PTR [esp+edi*1+0x140]
c002551d:	eb 02                	jmp    c0025521 <__kernel_rem_pio2+0x801>
c002551f:	89 d0                	mov    eax,edx
c0025521:	dd 00                	fld    QWORD PTR [eax]
c0025523:	8d 50 f8             	lea    edx,[eax-0x8]
c0025526:	d9 c1                	fld    st(1)
c0025528:	39 d1                	cmp    ecx,edx
c002552a:	d9 c1                	fld    st(1)
c002552c:	de c3                	faddp  st(3),st
c002552e:	d9 ca                	fxch   st(2)
c0025530:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025534:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025538:	d9 c0                	fld    st(0)
c002553a:	dc ea                	fsub   st(2),st
c002553c:	d9 ca                	fxch   st(2)
c002553e:	de c3                	faddp  st(3),st
c0025540:	d9 ca                	fxch   st(2)
c0025542:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025545:	d9 c9                	fxch   st(1)
c0025547:	dd 18                	fstp   QWORD PTR [eax]
c0025549:	75 d4                	jne    c002551f <__kernel_rem_pio2+0x7ff>
c002554b:	dd d8                	fstp   st(0)
c002554d:	d9 ee                	fldz   
c002554f:	01 f9                	add    ecx,edi
c0025551:	83 e9 08             	sub    ecx,0x8
c0025554:	dc 41 08             	fadd   QWORD PTR [ecx+0x8]
c0025557:	39 c8                	cmp    eax,ecx
c0025559:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002555d:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0025561:	75 ee                	jne    c0025551 <__kernel_rem_pio2+0x831>
c0025563:	dd 84 24 40 01 00 00 	fld    QWORD PTR [esp+0x140]
c002556a:	85 ed                	test   ebp,ebp
c002556c:	dd 84 24 48 01 00 00 	fld    QWORD PTR [esp+0x148]
c0025573:	0f 85 02 01 00 00    	jne    c002567b <__kernel_rem_pio2+0x95b>
c0025579:	d9 c9                	fxch   st(1)
c002557b:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025582:	dd 18                	fstp   QWORD PTR [eax]
c0025584:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c0025587:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c002558a:	e9 0a ff ff ff       	jmp    c0025499 <__kernel_rem_pio2+0x779>
c002558f:	81 64 b4 4c ff ff 7f 00 	and    DWORD PTR [esp+esi*4+0x4c],0x7fffff
c0025597:	e9 af fb ff ff       	jmp    c002514b <__kernel_rem_pio2+0x42b>
c002559c:	31 d2                	xor    edx,edx
c002559e:	b8 e8 ff ff ff       	mov    eax,0xffffffe8
c00255a3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00255a7:	e9 d3 f7 ff ff       	jmp    c0024d7f <__kernel_rem_pio2+0x5f>
c00255ac:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00255b0:	85 f6                	test   esi,esi
c00255b2:	bd 02 00 00 00       	mov    ebp,0x2
c00255b7:	0f 8f 45 fb ff ff    	jg     c0025102 <__kernel_rem_pio2+0x3e2>
c00255bd:	d9 e8                	fld1   
c00255bf:	de e1                	fsubrp st(1),st
c00255c1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00255c5:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00255c9:	e9 1a fa ff ff       	jmp    c0024fe8 <__kernel_rem_pio2+0x2c8>
c00255ce:	d9 ee                	fldz   
c00255d0:	e9 6a fe ff ff       	jmp    c002543f <__kernel_rem_pio2+0x71f>
c00255d5:	31 d2                	xor    edx,edx
c00255d7:	e9 51 fb ff ff       	jmp    c002512d <__kernel_rem_pio2+0x40d>
c00255dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00255e0:	d9 ee                	fldz   
c00255e2:	01 c8                	add    eax,ecx
c00255e4:	eb 02                	jmp    c00255e8 <__kernel_rem_pio2+0x8c8>
c00255e6:	89 d0                	mov    eax,edx
c00255e8:	39 c8                	cmp    eax,ecx
c00255ea:	dc 00                	fadd   QWORD PTR [eax]
c00255ec:	8d 50 f8             	lea    edx,[eax-0x8]
c00255ef:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00255f3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00255f7:	75 ed                	jne    c00255e6 <__kernel_rem_pio2+0x8c6>
c00255f9:	d9 c0                	fld    st(0)
c00255fb:	85 ed                	test   ebp,ebp
c00255fd:	0f 85 94 00 00 00    	jne    c0025697 <__kernel_rem_pio2+0x977>
c0025603:	d9 c9                	fxch   st(1)
c0025605:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c002560c:	85 ff                	test   edi,edi
c002560e:	dd 18                	fstp   QWORD PTR [eax]
c0025610:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c0025617:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c002561b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002561f:	7e 22                	jle    c0025643 <__kernel_rem_pio2+0x923>
c0025621:	8d 84 24 48 01 00 00 	lea    eax,[esp+0x148]
c0025628:	8d 14 f8             	lea    edx,[eax+edi*8]
c002562b:	83 c0 08             	add    eax,0x8
c002562e:	dc 40 f8             	fadd   QWORD PTR [eax-0x8]
c0025631:	39 d0                	cmp    eax,edx
c0025633:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0025637:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c002563b:	75 ee                	jne    c002562b <__kernel_rem_pio2+0x90b>
c002563d:	85 ed                	test   ebp,ebp
c002563f:	74 02                	je     c0025643 <__kernel_rem_pio2+0x923>
c0025641:	d9 e0                	fchs   
c0025643:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c002564a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002564d:	e9 47 fe ff ff       	jmp    c0025499 <__kernel_rem_pio2+0x779>
c0025652:	d9 7c 24 46          	fnstcw WORD PTR [esp+0x46]
c0025656:	89 f7                	mov    edi,esi
c0025658:	0f b7 44 24 46       	movzx  eax,WORD PTR [esp+0x46]
c002565d:	66 0d 00 0c          	or     ax,0xc00
c0025661:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
c0025666:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002566a:	d9 6c 24 44          	fldcw  WORD PTR [esp+0x44]
c002566e:	db 5c b4 50          	fistp  DWORD PTR [esp+esi*4+0x50]
c0025672:	d9 6c 24 46          	fldcw  WORD PTR [esp+0x46]
c0025676:	e9 5c fc ff ff       	jmp    c00252d7 <__kernel_rem_pio2+0x5b7>
c002567b:	d9 c9                	fxch   st(1)
c002567d:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c0025684:	d9 e0                	fchs   
c0025686:	dd 18                	fstp   QWORD PTR [eax]
c0025688:	d9 e0                	fchs   
c002568a:	dd 58 08             	fstp   QWORD PTR [eax+0x8]
c002568d:	d9 e0                	fchs   
c002568f:	dd 58 10             	fstp   QWORD PTR [eax+0x10]
c0025692:	e9 02 fe ff ff       	jmp    c0025499 <__kernel_rem_pio2+0x779>
c0025697:	d9 c9                	fxch   st(1)
c0025699:	8b 84 24 a4 02 00 00 	mov    eax,DWORD PTR [esp+0x2a4]
c00256a0:	d9 e0                	fchs   
c00256a2:	85 ff                	test   edi,edi
c00256a4:	dd 18                	fstp   QWORD PTR [eax]
c00256a6:	dc ac 24 40 01 00 00 	fsubr  QWORD PTR [esp+0x140]
c00256ad:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00256b1:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00256b5:	0f 8f 66 ff ff ff    	jg     c0025621 <__kernel_rem_pio2+0x901>
c00256bb:	d9 e0                	fchs   
c00256bd:	eb 84                	jmp    c0025643 <__kernel_rem_pio2+0x923>
c00256bf:	dd d8                	fstp   st(0)
c00256c1:	83 bc 24 b0 02 00 00 02 	cmp    DWORD PTR [esp+0x2b0],0x2
c00256c9:	0f 8f dc fd ff ff    	jg     c00254ab <__kernel_rem_pio2+0x78b>
c00256cf:	8b 94 24 b0 02 00 00 	mov    edx,DWORD PTR [esp+0x2b0]
c00256d6:	85 d2                	test   edx,edx
c00256d8:	7f 0d                	jg     c00256e7 <__kernel_rem_pio2+0x9c7>
c00256da:	0f 85 b9 fd ff ff    	jne    c0025499 <__kernel_rem_pio2+0x779>
c00256e0:	d9 ee                	fldz   
c00256e2:	e9 a3 fd ff ff       	jmp    c002548a <__kernel_rem_pio2+0x76a>
c00256e7:	d9 ee                	fldz   
c00256e9:	d9 ee                	fldz   
c00256eb:	90                   	nop
c00256ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00256f0:	e9 06 ff ff ff       	jmp    c00255fb <__kernel_rem_pio2+0x8db>
c00256f5:	d9 ee                	fldz   
c00256f7:	e9 67 fe ff ff       	jmp    c0025563 <__kernel_rem_pio2+0x843>
c00256fc:	66 90                	xchg   ax,ax
c00256fe:	66 90                	xchg   ax,ax

c0025700 <__kernel_sin>:
c0025700:	83 ec 0c             	sub    esp,0xc
c0025703:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0025707:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c002570b:	d9 c0                	fld    st(0)
c002570d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025711:	d8 c9                	fmul   st,st(1)
c0025713:	85 c0                	test   eax,eax
c0025715:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025718:	dd 04 24             	fld    QWORD PTR [esp]
c002571b:	d9 c1                	fld    st(1)
c002571d:	d8 c9                	fmul   st,st(1)
c002571f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0025722:	dd 04 24             	fld    QWORD PTR [esp]
c0025725:	d9 c1                	fld    st(1)
c0025727:	d8 ca                	fmul   st,st(2)
c0025729:	dd 1c 24             	fstp   QWORD PTR [esp]
c002572c:	dd 04 24             	fld    QWORD PTR [esp]
c002572f:	d8 ca                	fmul   st,st(2)
c0025731:	d9 c2                	fld    st(2)
c0025733:	dc 0d f0 ab 02 c0    	fmul   QWORD PTR ds:0xc002abf0
c0025739:	dc 25 f8 ab 02 c0    	fsub   QWORD PTR ds:0xc002abf8
c002573f:	de c9                	fmulp  st(1),st
c0025741:	d9 c2                	fld    st(2)
c0025743:	dc 0d 00 ac 02 c0    	fmul   QWORD PTR ds:0xc002ac00
c0025749:	dc 25 08 ac 02 c0    	fsub   QWORD PTR ds:0xc002ac08
c002574f:	d8 cb                	fmul   st,st(3)
c0025751:	dc 05 10 ac 02 c0    	fadd   QWORD PTR ds:0xc002ac10
c0025757:	de c1                	faddp  st(1),st
c0025759:	dd 1c 24             	fstp   QWORD PTR [esp]
c002575c:	dd 04 24             	fld    QWORD PTR [esp]
c002575f:	75 2f                	jne    c0025790 <__kernel_sin+0x90>
c0025761:	dd dc                	fstp   st(4)
c0025763:	d9 c9                	fxch   st(1)
c0025765:	d9 ca                	fxch   st(2)
c0025767:	d9 cb                	fxch   st(3)
c0025769:	de ca                	fmulp  st(2),st
c002576b:	d9 c9                	fxch   st(1)
c002576d:	dc 25 18 ac 02 c0    	fsub   QWORD PTR ds:0xc002ac18
c0025773:	de c9                	fmulp  st(1),st
c0025775:	de c1                	faddp  st(1),st
c0025777:	dd 1c 24             	fstp   QWORD PTR [esp]
c002577a:	dd 04 24             	fld    QWORD PTR [esp]
c002577d:	83 c4 0c             	add    esp,0xc
c0025780:	c3                   	ret    
c0025781:	eb 0d                	jmp    c0025790 <__kernel_sin+0x90>
c0025783:	90                   	nop
c0025784:	90                   	nop
c0025785:	90                   	nop
c0025786:	90                   	nop
c0025787:	90                   	nop
c0025788:	90                   	nop
c0025789:	90                   	nop
c002578a:	90                   	nop
c002578b:	90                   	nop
c002578c:	90                   	nop
c002578d:	90                   	nop
c002578e:	90                   	nop
c002578f:	90                   	nop
c0025790:	d9 c4                	fld    st(4)
c0025792:	d8 0d 84 9d 02 c0    	fmul   DWORD PTR ds:0xc0029d84
c0025798:	d9 c9                	fxch   st(1)
c002579a:	d8 ca                	fmul   st,st(2)
c002579c:	de e9                	fsubp  st(1),st
c002579e:	de ca                	fmulp  st(2),st
c00257a0:	d9 c9                	fxch   st(1)
c00257a2:	de e3                	fsubrp st(3),st
c00257a4:	dc 0d 18 ac 02 c0    	fmul   QWORD PTR ds:0xc002ac18
c00257aa:	de c2                	faddp  st(2),st
c00257ac:	de e1                	fsubrp st(1),st
c00257ae:	dd 1c 24             	fstp   QWORD PTR [esp]
c00257b1:	dd 04 24             	fld    QWORD PTR [esp]
c00257b4:	83 c4 0c             	add    esp,0xc
c00257b7:	c3                   	ret    

Disassembly of section .init:

c00257b8 <_init>:
c00257b8:	55                   	push   ebp
c00257b9:	89 e5                	mov    ebp,esp
c00257bb:	e8 34 a9 fd ff       	call   c00000f4 <frame_dummy>
c00257c0:	e8 0b c2 ff ff       	call   c00219d0 <__do_global_ctors_aux>
c00257c5:	5d                   	pop    ebp
c00257c6:	c3                   	ret    

Disassembly of section .fini:

c00257c7 <_fini>:
c00257c7:	55                   	push   ebp
c00257c8:	89 e5                	mov    ebp,esp
c00257ca:	e8 b5 a8 fd ff       	call   c0000084 <__do_global_dtors_aux>
c00257cf:	5d                   	pop    ebp
c00257d0:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00257d2 <DriverlessDevice::~DriverlessDevice()>:
c00257d2:	ba 5c 72 02 c0       	mov    edx,0xc002725c
c00257d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00257db:	89 10                	mov    DWORD PTR [eax],edx
c00257dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00257e1:	50                   	push   eax
c00257e2:	e8 11 41 fe ff       	call   c00098f8 <Device::~Device()>
c00257e7:	83 c4 04             	add    esp,0x4
c00257ea:	90                   	nop
c00257eb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00257ec <DriverlessDevice::~DriverlessDevice()>:
c00257ec:	83 ec 0c             	sub    esp,0xc
c00257ef:	83 ec 0c             	sub    esp,0xc
c00257f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257f6:	e8 d7 ff ff ff       	call   c00257d2 <DriverlessDevice::~DriverlessDevice()>
c00257fb:	83 c4 10             	add    esp,0x10
c00257fe:	83 ec 08             	sub    esp,0x8
c0025801:	68 58 01 00 00       	push   0x158
c0025806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002580a:	e8 79 7a fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c002580f:	83 c4 10             	add    esp,0x10
c0025812:	83 c4 0c             	add    esp,0xc
c0025815:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0025816 <LinkedList<Device>::addElement(Device*)>:
c0025816:	83 ec 0c             	sub    esp,0xc
c0025819:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002581e:	75 10                	jne    c0025830 <LinkedList<Device>::addElement(Device*)+0x1a>
c0025820:	83 ec 0c             	sub    esp,0xc
c0025823:	68 f0 71 02 c0       	push   0xc00271f0
c0025828:	e8 a7 a2 fe ff       	call   c000fad4 <KePanic(char const*)>
c002582d:	83 c4 10             	add    esp,0x10
c0025830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025834:	8b 00                	mov    eax,DWORD PTR [eax]
c0025836:	85 c0                	test   eax,eax
c0025838:	74 3a                	je     c0025874 <LinkedList<Device>::addElement(Device*)+0x5e>
c002583a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025841:	85 c0                	test   eax,eax
c0025843:	74 2f                	je     c0025874 <LinkedList<Device>::addElement(Device*)+0x5e>
c0025845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025849:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002584c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025850:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0025856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002585a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002585e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025865:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025868:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025872:	eb 68                	jmp    c00258dc <LinkedList<Device>::addElement(Device*)+0xc6>
c0025874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025878:	8b 00                	mov    eax,DWORD PTR [eax]
c002587a:	85 c0                	test   eax,eax
c002587c:	75 4e                	jne    c00258cc <LinkedList<Device>::addElement(Device*)+0xb6>
c002587e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025882:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025885:	85 c0                	test   eax,eax
c0025887:	75 43                	jne    c00258cc <LinkedList<Device>::addElement(Device*)+0xb6>
c0025889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002588d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025891:	89 10                	mov    DWORD PTR [eax],edx
c0025893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025897:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002589b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002589e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00258a5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00258af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00258b6:	85 c0                	test   eax,eax
c00258b8:	74 22                	je     c00258dc <LinkedList<Device>::addElement(Device*)+0xc6>
c00258ba:	83 ec 0c             	sub    esp,0xc
c00258bd:	68 12 72 02 c0       	push   0xc0027212
c00258c2:	e8 0d a2 fe ff       	call   c000fad4 <KePanic(char const*)>
c00258c7:	83 c4 10             	add    esp,0x10
c00258ca:	eb 10                	jmp    c00258dc <LinkedList<Device>::addElement(Device*)+0xc6>
c00258cc:	83 ec 0c             	sub    esp,0xc
c00258cf:	68 1c 72 02 c0       	push   0xc002721c
c00258d4:	e8 fb a1 fe ff       	call   c000fad4 <KePanic(char const*)>
c00258d9:	83 c4 10             	add    esp,0x10
c00258dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00258e3:	8d 50 01             	lea    edx,[eax+0x1]
c00258e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00258ed:	90                   	nop
c00258ee:	83 c4 0c             	add    esp,0xc
c00258f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00258f2 <LinkedList<Device>::LinkedList()>:
c00258f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00258f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00258fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025900:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002590b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025916:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002591c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025920:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025927:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002592b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025932:	90                   	nop
c0025933:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025934 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025938:	8b 00                	mov    eax,DWORD PTR [eax]
c002593a:	85 c0                	test   eax,eax
c002593c:	75 0e                	jne    c002594c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002593e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025942:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025945:	85 c0                	test   eax,eax
c0025947:	75 03                	jne    c002594c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025949:	b0 01                	mov    al,0x1
c002594b:	c3                   	ret    
c002594c:	b0 00                	mov    al,0x0
c002594e:	90                   	nop
c002594f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025950 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025954:	8b 00                	mov    eax,DWORD PTR [eax]
c0025956:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025958 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025958:	83 ec 0c             	sub    esp,0xc
c002595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002595f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025961:	85 c0                	test   eax,eax
c0025963:	75 17                	jne    c002597c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0025965:	83 ec 0c             	sub    esp,0xc
c0025968:	68 8c 74 02 c0       	push   0xc002748c
c002596d:	e8 62 a1 fe ff       	call   c000fad4 <KePanic(char const*)>
c0025972:	83 c4 10             	add    esp,0x10
c0025975:	e9 96 00 00 00       	jmp    c0025a10 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002597a:	66 90                	xchg   ax,ax
c002597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025983:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025986:	85 c0                	test   eax,eax
c0025988:	0f 95 c0             	setne  al
c002598b:	0f b6 c0             	movzx  eax,al
c002598e:	85 c0                	test   eax,eax
c0025990:	74 12                	je     c00259a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0025992:	83 ec 0c             	sub    esp,0xc
c0025995:	68 d7 74 02 c0       	push   0xc00274d7
c002599a:	e8 35 a1 fe ff       	call   c000fad4 <KePanic(char const*)>
c002599f:	83 c4 10             	add    esp,0x10
c00259a2:	66 90                	xchg   ax,ax
c00259a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00259aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00259ad:	85 c0                	test   eax,eax
c00259af:	0f 94 c0             	sete   al
c00259b2:	0f b6 c0             	movzx  eax,al
c00259b5:	85 c0                	test   eax,eax
c00259b7:	74 33                	je     c00259ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c00259b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00259c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00259ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00259d5:	83 f8 01             	cmp    eax,0x1
c00259d8:	74 22                	je     c00259fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00259da:	83 ec 0c             	sub    esp,0xc
c00259dd:	68 b0 74 02 c0       	push   0xc00274b0
c00259e2:	e8 ed a0 fe ff       	call   c000fad4 <KePanic(char const*)>
c00259e7:	83 c4 10             	add    esp,0x10
c00259ea:	eb 10                	jmp    c00259fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c00259ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00259f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00259f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f9:	89 10                	mov    DWORD PTR [eax],edx
c00259fb:	90                   	nop
c00259fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025a03:	8d 50 ff             	lea    edx,[eax-0x1]
c0025a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a0a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0025a10:	83 c4 0c             	add    esp,0xc
c0025a13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025a14 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025a14:	83 ec 0c             	sub    esp,0xc
c0025a17:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025a1c:	75 12                	jne    c0025a30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0025a1e:	83 ec 0c             	sub    esp,0xc
c0025a21:	68 f0 71 02 c0       	push   0xc00271f0
c0025a26:	e8 a9 a0 fe ff       	call   c000fad4 <KePanic(char const*)>
c0025a2b:	83 c4 10             	add    esp,0x10
c0025a2e:	66 90                	xchg   ax,ax
c0025a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a36:	85 c0                	test   eax,eax
c0025a38:	74 36                	je     c0025a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0025a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a41:	85 c0                	test   eax,eax
c0025a43:	74 2b                	je     c0025a70 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0025a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a50:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0025a53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a65:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025a6c:	eb 6a                	jmp    c0025ad8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0025a6e:	66 90                	xchg   ax,ax
c0025a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a74:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a76:	85 c0                	test   eax,eax
c0025a78:	75 4e                	jne    c0025ac8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0025a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025a81:	85 c0                	test   eax,eax
c0025a83:	75 43                	jne    c0025ac8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0025a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a8d:	89 10                	mov    DWORD PTR [eax],edx
c0025a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025a97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025aa1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025aaf:	85 c0                	test   eax,eax
c0025ab1:	74 25                	je     c0025ad8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0025ab3:	83 ec 0c             	sub    esp,0xc
c0025ab6:	68 12 72 02 c0       	push   0xc0027212
c0025abb:	e8 14 a0 fe ff       	call   c000fad4 <KePanic(char const*)>
c0025ac0:	83 c4 10             	add    esp,0x10
c0025ac3:	eb 13                	jmp    c0025ad8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0025ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0025ac8:	83 ec 0c             	sub    esp,0xc
c0025acb:	68 1c 72 02 c0       	push   0xc002721c
c0025ad0:	e8 ff 9f fe ff       	call   c000fad4 <KePanic(char const*)>
c0025ad5:	83 c4 10             	add    esp,0x10
c0025ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025adc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025adf:	8d 50 01             	lea    edx,[eax+0x1]
c0025ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025ae9:	90                   	nop
c0025aea:	83 c4 0c             	add    esp,0xc
c0025aed:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025af0 <ACPI::~ACPI()>:
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	ba 0c 79 02 c0       	mov    edx,0xc002790c
c0025af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afc:	89 10                	mov    DWORD PTR [eax],edx
c0025afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b02:	83 ec 0c             	sub    esp,0xc
c0025b05:	50                   	push   eax
c0025b06:	e8 ed 3d fe ff       	call   c00098f8 <Device::~Device()>
c0025b0b:	83 c4 10             	add    esp,0x10
c0025b0e:	90                   	nop
c0025b0f:	83 c4 0c             	add    esp,0xc
c0025b12:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0025b14 <ACPI::~ACPI()>:
c0025b14:	83 ec 0c             	sub    esp,0xc
c0025b17:	83 ec 0c             	sub    esp,0xc
c0025b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b1e:	e8 cd ff ff ff       	call   c0025af0 <ACPI::~ACPI()>
c0025b23:	83 c4 10             	add    esp,0x10
c0025b26:	83 ec 08             	sub    esp,0x8
c0025b29:	68 64 12 00 00       	push   0x1264
c0025b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b32:	e8 51 77 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0025b37:	83 c4 10             	add    esp,0x10
c0025b3a:	83 c4 0c             	add    esp,0xc
c0025b3d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0025b40 <LinkedList<Device>::~LinkedList()>:
c0025b40:	90                   	nop
c0025b41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0025b44 <LinkedList<Device>::isEmpty()>:
c0025b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b48:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b4a:	85 c0                	test   eax,eax
c0025b4c:	75 0e                	jne    c0025b5c <LinkedList<Device>::isEmpty()+0x18>
c0025b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b55:	85 c0                	test   eax,eax
c0025b57:	75 03                	jne    c0025b5c <LinkedList<Device>::isEmpty()+0x18>
c0025b59:	b0 01                	mov    al,0x1
c0025b5b:	c3                   	ret    
c0025b5c:	b0 00                	mov    al,0x0
c0025b5e:	90                   	nop
c0025b5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0025b60 <LinkedList<Device>::getFirstElement()>:
c0025b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b66:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0025b68 <LinkedList<Device>::removeFirst()>:
c0025b68:	83 ec 0c             	sub    esp,0xc
c0025b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b71:	85 c0                	test   eax,eax
c0025b73:	75 17                	jne    c0025b8c <LinkedList<Device>::removeFirst()+0x24>
c0025b75:	83 ec 0c             	sub    esp,0xc
c0025b78:	68 8c 74 02 c0       	push   0xc002748c
c0025b7d:	e8 52 9f fe ff       	call   c000fad4 <KePanic(char const*)>
c0025b82:	83 c4 10             	add    esp,0x10
c0025b85:	e9 92 00 00 00       	jmp    c0025c1c <LinkedList<Device>::removeFirst()+0xb4>
c0025b8a:	66 90                	xchg   ax,ax
c0025b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025b93:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0025b99:	85 c0                	test   eax,eax
c0025b9b:	74 13                	je     c0025bb0 <LinkedList<Device>::removeFirst()+0x48>
c0025b9d:	83 ec 0c             	sub    esp,0xc
c0025ba0:	68 d7 74 02 c0       	push   0xc00274d7
c0025ba5:	e8 2a 9f fe ff       	call   c000fad4 <KePanic(char const*)>
c0025baa:	83 c4 10             	add    esp,0x10
c0025bad:	8d 76 00             	lea    esi,[esi+0x0]
c0025bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bb6:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0025bbc:	85 c0                	test   eax,eax
c0025bbe:	75 34                	jne    c0025bf4 <LinkedList<Device>::removeFirst()+0x8c>
c0025bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bce:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bd9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025bdc:	83 f8 01             	cmp    eax,0x1
c0025bdf:	74 27                	je     c0025c08 <LinkedList<Device>::removeFirst()+0xa0>
c0025be1:	83 ec 0c             	sub    esp,0xc
c0025be4:	68 b0 74 02 c0       	push   0xc00274b0
c0025be9:	e8 e6 9e fe ff       	call   c000fad4 <KePanic(char const*)>
c0025bee:	83 c4 10             	add    esp,0x10
c0025bf1:	eb 15                	jmp    c0025c08 <LinkedList<Device>::removeFirst()+0xa0>
c0025bf3:	90                   	nop
c0025bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bfa:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0025c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c04:	89 10                	mov    DWORD PTR [eax],edx
c0025c06:	66 90                	xchg   ax,ax
c0025c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025c0f:	8d 50 ff             	lea    edx,[eax-0x1]
c0025c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025c19:	8d 76 00             	lea    esi,[esi+0x0]
c0025c1c:	83 c4 0c             	add    esp,0xc
c0025c1f:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025c20 <Computer::~Computer()>:
c0025c20:	83 ec 0c             	sub    esp,0xc
c0025c23:	ba 84 7a 02 c0       	mov    edx,0xc0027a84
c0025c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2c:	89 10                	mov    DWORD PTR [eax],edx
c0025c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c32:	83 ec 0c             	sub    esp,0xc
c0025c35:	50                   	push   eax
c0025c36:	e8 bd 3c fe ff       	call   c00098f8 <Device::~Device()>
c0025c3b:	83 c4 10             	add    esp,0x10
c0025c3e:	90                   	nop
c0025c3f:	83 c4 0c             	add    esp,0xc
c0025c42:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025c44 <Computer::~Computer()>:
c0025c44:	83 ec 0c             	sub    esp,0xc
c0025c47:	83 ec 0c             	sub    esp,0xc
c0025c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c4e:	e8 cd ff ff ff       	call   c0025c20 <Computer::~Computer()>
c0025c53:	83 c4 10             	add    esp,0x10
c0025c56:	83 ec 08             	sub    esp,0x8
c0025c59:	68 68 01 00 00       	push   0x168
c0025c5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c62:	e8 21 76 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0025c67:	83 c4 10             	add    esp,0x10
c0025c6a:	83 c4 0c             	add    esp,0xc
c0025c6d:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025c6e <idleCommon()>:
c0025c6e:	83 ec 0c             	sub    esp,0xc
c0025c71:	fa                   	cli    
c0025c72:	ff 05 30 13 03 c0    	inc    DWORD PTR ds:0xc0031330
c0025c78:	e8 cf 09 ff ff       	call   c001664c <schedule()>
c0025c7d:	f0 ff 0d 30 13 03 c0 	lock dec DWORD PTR ds:0xc0031330
c0025c84:	83 3d 30 13 03 c0 00 	cmp    DWORD PTR ds:0xc0031330,0x0
c0025c8b:	75 01                	jne    c0025c8e <idleCommon()+0x20>
c0025c8d:	fb                   	sti    
c0025c8e:	83 c4 0c             	add    esp,0xc
c0025c91:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025c92 <LinkedList<UnixFile>::~LinkedList()>:
c0025c92:	90                   	nop
c0025c93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025c94 <LinkedList<UnixFile>::LinkedList()>:
c0025c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025c9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ca2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025ca9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025cad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025cb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025cc2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025cc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ccd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025cd4:	90                   	nop
c0025cd5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0025cd6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0025cd6:	83 ec 0c             	sub    esp,0xc
c0025cd9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0025cde:	75 10                	jne    c0025cf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0025ce0:	83 ec 0c             	sub    esp,0xc
c0025ce3:	68 f0 71 02 c0       	push   0xc00271f0
c0025ce8:	e8 e7 9d fe ff       	call   c000fad4 <KePanic(char const*)>
c0025ced:	83 c4 10             	add    esp,0x10
c0025cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0025cf6:	85 c0                	test   eax,eax
c0025cf8:	74 34                	je     c0025d2e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d01:	85 c0                	test   eax,eax
c0025d03:	74 29                	je     c0025d2e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d09:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025d10:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025d1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d25:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025d2c:	eb 65                	jmp    c0025d93 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d34:	85 c0                	test   eax,eax
c0025d36:	75 4b                	jne    c0025d83 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d3f:	85 c0                	test   eax,eax
c0025d41:	75 40                	jne    c0025d83 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025d4b:	89 10                	mov    DWORD PTR [eax],edx
c0025d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025d55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025d5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d6d:	85 c0                	test   eax,eax
c0025d6f:	74 22                	je     c0025d93 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025d71:	83 ec 0c             	sub    esp,0xc
c0025d74:	68 12 72 02 c0       	push   0xc0027212
c0025d79:	e8 56 9d fe ff       	call   c000fad4 <KePanic(char const*)>
c0025d7e:	83 c4 10             	add    esp,0x10
c0025d81:	eb 10                	jmp    c0025d93 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025d83:	83 ec 0c             	sub    esp,0xc
c0025d86:	68 1c 72 02 c0       	push   0xc002721c
c0025d8b:	e8 44 9d fe ff       	call   c000fad4 <KePanic(char const*)>
c0025d90:	83 c4 10             	add    esp,0x10
c0025d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025d9a:	8d 50 01             	lea    edx,[eax+0x1]
c0025d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025da4:	90                   	nop
c0025da5:	83 c4 0c             	add    esp,0xc
c0025da8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0025daa <LinkedList<UnixFile>::getFirstElement()>:
c0025daa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0025db0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0025db2 <LinkedList<UnixFile>::removeFirst()>:
c0025db2:	83 ec 0c             	sub    esp,0xc
c0025db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dbb:	85 c0                	test   eax,eax
c0025dbd:	75 12                	jne    c0025dd1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0025dbf:	83 ec 0c             	sub    esp,0xc
c0025dc2:	68 8c 74 02 c0       	push   0xc002748c
c0025dc7:	e8 08 9d fe ff       	call   c000fad4 <KePanic(char const*)>
c0025dcc:	83 c4 10             	add    esp,0x10
c0025dcf:	eb 7e                	jmp    c0025e4f <LinkedList<UnixFile>::removeFirst()+0x9d>
c0025dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025dd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025ddb:	85 c0                	test   eax,eax
c0025ddd:	74 10                	je     c0025def <LinkedList<UnixFile>::removeFirst()+0x3d>
c0025ddf:	83 ec 0c             	sub    esp,0xc
c0025de2:	68 d7 74 02 c0       	push   0xc00274d7
c0025de7:	e8 e8 9c fe ff       	call   c000fad4 <KePanic(char const*)>
c0025dec:	83 c4 10             	add    esp,0x10
c0025def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025df5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025df8:	85 c0                	test   eax,eax
c0025dfa:	75 33                	jne    c0025e2f <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e15:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025e18:	83 f8 01             	cmp    eax,0x1
c0025e1b:	74 21                	je     c0025e3e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025e1d:	83 ec 0c             	sub    esp,0xc
c0025e20:	68 b0 74 02 c0       	push   0xc00274b0
c0025e25:	e8 aa 9c fe ff       	call   c000fad4 <KePanic(char const*)>
c0025e2a:	83 c4 10             	add    esp,0x10
c0025e2d:	eb 0f                	jmp    c0025e3e <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e33:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e35:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0025e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e3c:	89 10                	mov    DWORD PTR [eax],edx
c0025e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025e45:	8d 50 ff             	lea    edx,[eax-0x1]
c0025e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e4c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025e4f:	83 c4 0c             	add    esp,0xc
c0025e52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0025e54 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0025e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025e5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025e5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025e60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025e63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0025e64 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0025e64:	90                   	nop
c0025e65:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0025e68 <ThreadControlBlock::ThreadControlBlock()>:
c0025e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e6c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025e73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e77:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025e7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e82:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0025e89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e8d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025e94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025e98:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0025e9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ea3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0025ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025eab:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025eaf:	90                   	nop
c0025eb0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025eb4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025eb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025ebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ec2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025ec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ecd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ed8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025ede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025ee2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025ee9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025eed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025ef4:	90                   	nop
c0025ef5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025ef6 <IOAPIC::~IOAPIC()>:
c0025ef6:	83 ec 0c             	sub    esp,0xc
c0025ef9:	ba c8 8e 02 c0       	mov    edx,0xc0028ec8
c0025efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f02:	89 10                	mov    DWORD PTR [eax],edx
c0025f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f08:	83 ec 0c             	sub    esp,0xc
c0025f0b:	50                   	push   eax
c0025f0c:	e8 e7 39 fe ff       	call   c00098f8 <Device::~Device()>
c0025f11:	83 c4 10             	add    esp,0x10
c0025f14:	90                   	nop
c0025f15:	83 c4 0c             	add    esp,0xc
c0025f18:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025f1a <IOAPIC::~IOAPIC()>:
c0025f1a:	83 ec 0c             	sub    esp,0xc
c0025f1d:	83 ec 0c             	sub    esp,0xc
c0025f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f24:	e8 cd ff ff ff       	call   c0025ef6 <IOAPIC::~IOAPIC()>
c0025f29:	83 c4 10             	add    esp,0x10
c0025f2c:	83 ec 08             	sub    esp,0x8
c0025f2f:	68 68 01 00 00       	push   0x168
c0025f34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f38:	e8 4b 73 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0025f3d:	83 c4 10             	add    esp,0x10
c0025f40:	83 c4 0c             	add    esp,0xc
c0025f43:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025f44 <CPU::~CPU()>:
c0025f44:	83 ec 0c             	sub    esp,0xc
c0025f47:	ba 3c 92 02 c0       	mov    edx,0xc002923c
c0025f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f50:	89 10                	mov    DWORD PTR [eax],edx
c0025f52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f56:	83 ec 0c             	sub    esp,0xc
c0025f59:	50                   	push   eax
c0025f5a:	e8 99 39 fe ff       	call   c00098f8 <Device::~Device()>
c0025f5f:	83 c4 10             	add    esp,0x10
c0025f62:	90                   	nop
c0025f63:	83 c4 0c             	add    esp,0xc
c0025f66:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025f68 <CPU::~CPU()>:
c0025f68:	83 ec 0c             	sub    esp,0xc
c0025f6b:	83 ec 0c             	sub    esp,0xc
c0025f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f72:	e8 cd ff ff ff       	call   c0025f44 <CPU::~CPU()>
c0025f77:	83 c4 10             	add    esp,0x10
c0025f7a:	83 ec 08             	sub    esp,0x8
c0025f7d:	68 78 11 00 00       	push   0x1178
c0025f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f86:	e8 fd 72 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0025f8b:	83 c4 10             	add    esp,0x10
c0025f8e:	83 c4 0c             	add    esp,0xc
c0025f91:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025f92 <PCI::~PCI()>:
c0025f92:	83 ec 0c             	sub    esp,0xc
c0025f95:	ba a0 97 02 c0       	mov    edx,0xc00297a0
c0025f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f9e:	89 10                	mov    DWORD PTR [eax],edx
c0025fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa4:	83 ec 0c             	sub    esp,0xc
c0025fa7:	50                   	push   eax
c0025fa8:	e8 ef 29 fe ff       	call   c000899c <Bus::~Bus()>
c0025fad:	83 c4 10             	add    esp,0x10
c0025fb0:	90                   	nop
c0025fb1:	83 c4 0c             	add    esp,0xc
c0025fb4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0025fb6 <PCI::~PCI()>:
c0025fb6:	83 ec 0c             	sub    esp,0xc
c0025fb9:	83 ec 0c             	sub    esp,0xc
c0025fbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fc0:	e8 cd ff ff ff       	call   c0025f92 <PCI::~PCI()>
c0025fc5:	83 c4 10             	add    esp,0x10
c0025fc8:	83 ec 08             	sub    esp,0x8
c0025fcb:	68 5c 01 00 00       	push   0x15c
c0025fd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025fd4:	e8 af 72 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0025fd9:	83 c4 10             	add    esp,0x10
c0025fdc:	83 c4 0c             	add    esp,0xc
c0025fdf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0025fe0 <IDE::~IDE()>:
c0025fe0:	83 ec 0c             	sub    esp,0xc
c0025fe3:	ba f0 98 02 c0       	mov    edx,0xc00298f0
c0025fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fec:	89 10                	mov    DWORD PTR [eax],edx
c0025fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff2:	83 ec 0c             	sub    esp,0xc
c0025ff5:	50                   	push   eax
c0025ff6:	e8 8d 3d fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0025ffb:	83 c4 10             	add    esp,0x10
c0025ffe:	90                   	nop
c0025fff:	83 c4 0c             	add    esp,0xc
c0026002:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0026004 <IDE::~IDE()>:
c0026004:	83 ec 0c             	sub    esp,0xc
c0026007:	83 ec 0c             	sub    esp,0xc
c002600a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002600e:	e8 cd ff ff ff       	call   c0025fe0 <IDE::~IDE()>
c0026013:	83 c4 10             	add    esp,0x10
c0026016:	83 ec 08             	sub    esp,0x8
c0026019:	68 70 02 00 00       	push   0x270
c002601e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026022:	e8 61 72 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0026027:	83 c4 10             	add    esp,0x10
c002602a:	83 c4 0c             	add    esp,0xc
c002602d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002602e <SATABus::~SATABus()>:
c002602e:	83 ec 0c             	sub    esp,0xc
c0026031:	ba 40 99 02 c0       	mov    edx,0xc0029940
c0026036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603a:	89 10                	mov    DWORD PTR [eax],edx
c002603c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026040:	83 ec 0c             	sub    esp,0xc
c0026043:	50                   	push   eax
c0026044:	e8 3f 3d fe ff       	call   c0009d88 <HardDiskController::~HardDiskController()>
c0026049:	83 c4 10             	add    esp,0x10
c002604c:	90                   	nop
c002604d:	83 c4 0c             	add    esp,0xc
c0026050:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0026052 <SATABus::~SATABus()>:
c0026052:	83 ec 0c             	sub    esp,0xc
c0026055:	83 ec 0c             	sub    esp,0xc
c0026058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002605c:	e8 cd ff ff ff       	call   c002602e <SATABus::~SATABus()>
c0026061:	83 c4 10             	add    esp,0x10
c0026064:	83 ec 08             	sub    esp,0x8
c0026067:	68 64 01 00 00       	push   0x164
c002606c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026070:	e8 13 72 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0026075:	83 c4 10             	add    esp,0x10
c0026078:	83 c4 0c             	add    esp,0xc
c002607b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002607c <ATA::~ATA()>:
c002607c:	83 ec 0c             	sub    esp,0xc
c002607f:	ba 28 9a 02 c0       	mov    edx,0xc0029a28
c0026084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026088:	89 10                	mov    DWORD PTR [eax],edx
c002608a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002608e:	83 ec 0c             	sub    esp,0xc
c0026091:	50                   	push   eax
c0026092:	e8 d3 3d fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0026097:	83 c4 10             	add    esp,0x10
c002609a:	90                   	nop
c002609b:	83 c4 0c             	add    esp,0xc
c002609e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00260a0 <ATA::~ATA()>:
c00260a0:	83 ec 0c             	sub    esp,0xc
c00260a3:	83 ec 0c             	sub    esp,0xc
c00260a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260aa:	e8 cd ff ff ff       	call   c002607c <ATA::~ATA()>
c00260af:	83 c4 10             	add    esp,0x10
c00260b2:	83 ec 08             	sub    esp,0x8
c00260b5:	68 8c 01 00 00       	push   0x18c
c00260ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260be:	e8 c5 71 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c00260c3:	83 c4 10             	add    esp,0x10
c00260c6:	83 c4 0c             	add    esp,0xc
c00260c9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00260ca <ATAPI::~ATAPI()>:
c00260ca:	83 ec 0c             	sub    esp,0xc
c00260cd:	ba 70 9a 02 c0       	mov    edx,0xc0029a70
c00260d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260d6:	89 10                	mov    DWORD PTR [eax],edx
c00260d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260dc:	83 ec 0c             	sub    esp,0xc
c00260df:	50                   	push   eax
c00260e0:	e8 85 3d fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c00260e5:	83 c4 10             	add    esp,0x10
c00260e8:	90                   	nop
c00260e9:	83 c4 0c             	add    esp,0xc
c00260ec:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00260ee <ATAPI::~ATAPI()>:
c00260ee:	83 ec 0c             	sub    esp,0xc
c00260f1:	83 ec 0c             	sub    esp,0xc
c00260f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260f8:	e8 cd ff ff ff       	call   c00260ca <ATAPI::~ATAPI()>
c00260fd:	83 c4 10             	add    esp,0x10
c0026100:	83 ec 08             	sub    esp,0x8
c0026103:	68 84 01 00 00       	push   0x184
c0026108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002610c:	e8 77 71 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c0026111:	83 c4 10             	add    esp,0x10
c0026114:	83 c4 0c             	add    esp,0xc
c0026117:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0026118 <SATA::~SATA()>:
c0026118:	83 ec 0c             	sub    esp,0xc
c002611b:	ba 30 9b 02 c0       	mov    edx,0xc0029b30
c0026120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026124:	89 10                	mov    DWORD PTR [eax],edx
c0026126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612a:	83 ec 0c             	sub    esp,0xc
c002612d:	50                   	push   eax
c002612e:	e8 37 3d fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0026133:	83 c4 10             	add    esp,0x10
c0026136:	90                   	nop
c0026137:	83 c4 0c             	add    esp,0xc
c002613a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002613c <SATA::~SATA()>:
c002613c:	83 ec 0c             	sub    esp,0xc
c002613f:	83 ec 0c             	sub    esp,0xc
c0026142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026146:	e8 cd ff ff ff       	call   c0026118 <SATA::~SATA()>
c002614b:	83 c4 10             	add    esp,0x10
c002614e:	83 ec 08             	sub    esp,0x8
c0026151:	68 7c 01 00 00       	push   0x17c
c0026156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002615a:	e8 29 71 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c002615f:	83 c4 10             	add    esp,0x10
c0026162:	83 c4 0c             	add    esp,0xc
c0026165:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0026166 <SATAPI::~SATAPI()>:
c0026166:	83 ec 0c             	sub    esp,0xc
c0026169:	ba 54 9c 02 c0       	mov    edx,0xc0029c54
c002616e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026172:	89 10                	mov    DWORD PTR [eax],edx
c0026174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026178:	83 ec 0c             	sub    esp,0xc
c002617b:	50                   	push   eax
c002617c:	e8 e9 3c fe ff       	call   c0009e6a <PhysicalDisk::~PhysicalDisk()>
c0026181:	83 c4 10             	add    esp,0x10
c0026184:	90                   	nop
c0026185:	83 c4 0c             	add    esp,0xc
c0026188:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002618a <SATAPI::~SATAPI()>:
c002618a:	83 ec 0c             	sub    esp,0xc
c002618d:	83 ec 0c             	sub    esp,0xc
c0026190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026194:	e8 cd ff ff ff       	call   c0026166 <SATAPI::~SATAPI()>
c0026199:	83 c4 10             	add    esp,0x10
c002619c:	83 ec 08             	sub    esp,0x8
c002619f:	68 84 01 00 00       	push   0x184
c00261a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261a8:	e8 db 70 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c00261ad:	83 c4 10             	add    esp,0x10
c00261b0:	83 c4 0c             	add    esp,0xc
c00261b3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00261b4 <APICTimer::~APICTimer()>:
c00261b4:	83 ec 0c             	sub    esp,0xc
c00261b7:	ba a8 9c 02 c0       	mov    edx,0xc0029ca8
c00261bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c0:	89 10                	mov    DWORD PTR [eax],edx
c00261c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261c6:	83 ec 0c             	sub    esp,0xc
c00261c9:	50                   	push   eax
c00261ca:	e8 35 4e fe ff       	call   c000b004 <Timer::~Timer()>
c00261cf:	83 c4 10             	add    esp,0x10
c00261d2:	90                   	nop
c00261d3:	83 c4 0c             	add    esp,0xc
c00261d6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00261d8 <APICTimer::~APICTimer()>:
c00261d8:	83 ec 0c             	sub    esp,0xc
c00261db:	83 ec 0c             	sub    esp,0xc
c00261de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261e2:	e8 cd ff ff ff       	call   c00261b4 <APICTimer::~APICTimer()>
c00261e7:	83 c4 10             	add    esp,0x10
c00261ea:	83 ec 08             	sub    esp,0x8
c00261ed:	68 60 01 00 00       	push   0x160
c00261f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261f6:	e8 8d 70 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c00261fb:	83 c4 10             	add    esp,0x10
c00261fe:	83 c4 0c             	add    esp,0xc
c0026201:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0026204 <PIT::~PIT()>:
c0026204:	83 ec 0c             	sub    esp,0xc
c0026207:	ba f8 9c 02 c0       	mov    edx,0xc0029cf8
c002620c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026210:	89 10                	mov    DWORD PTR [eax],edx
c0026212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026216:	83 ec 0c             	sub    esp,0xc
c0026219:	50                   	push   eax
c002621a:	e8 e5 4d fe ff       	call   c000b004 <Timer::~Timer()>
c002621f:	83 c4 10             	add    esp,0x10
c0026222:	90                   	nop
c0026223:	83 c4 0c             	add    esp,0xc
c0026226:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0026228 <PIT::~PIT()>:
c0026228:	83 ec 0c             	sub    esp,0xc
c002622b:	83 ec 0c             	sub    esp,0xc
c002622e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026232:	e8 cd ff ff ff       	call   c0026204 <PIT::~PIT()>
c0026237:	83 c4 10             	add    esp,0x10
c002623a:	83 ec 08             	sub    esp,0x8
c002623d:	68 5c 01 00 00       	push   0x15c
c0026242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026246:	e8 3d 70 fe ff       	call   c000d288 <operator delete(void*, unsigned long)>
c002624b:	83 c4 10             	add    esp,0x10
c002624e:	83 c4 0c             	add    esp,0xc
c0026251:	c3                   	ret    

Disassembly of section userkernel:

c002c000 <KiDefaultSignalHandlerAbort(int)>:
c002c000:	57                   	push   edi
c002c001:	b9 07 00 00 00       	mov    ecx,0x7
c002c006:	56                   	push   esi
c002c007:	be 6b 7f 02 c0       	mov    esi,0xc0027f6b
c002c00c:	83 ec 24             	sub    esp,0x24
c002c00f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c013:	fc                   	cld    
c002c014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002c016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002c01a:	50                   	push   eax
c002c01b:	6a 00                	push   0x0
c002c01d:	6a 38                	push   0x38
c002c01f:	6a 01                	push   0x1
c002c021:	e8 2c 00 00 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002c026:	83 c4 34             	add    esp,0x34
c002c029:	5e                   	pop    esi
c002c02a:	5f                   	pop    edi
c002c02b:	c3                   	ret    

c002c02c <KiDefaultSignalHandlerTerminate(int)>:
c002c02c:	57                   	push   edi
c002c02d:	b9 08 00 00 00       	mov    ecx,0x8
c002c032:	56                   	push   esi
c002c033:	be 87 7f 02 c0       	mov    esi,0xc0027f87
c002c038:	83 ec 24             	sub    esp,0x24
c002c03b:	89 e7                	mov    edi,esp
c002c03d:	fc                   	cld    
c002c03e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002c040:	54                   	push   esp
c002c041:	6a 00                	push   0x0
c002c043:	6a 37                	push   0x37
c002c045:	6a 01                	push   0x1
c002c047:	e8 06 00 00 00       	call   c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002c04c:	83 c4 34             	add    esp,0x34
c002c04f:	5e                   	pop    esi
c002c050:	5f                   	pop    edi
c002c051:	c3                   	ret    

c002c052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c002c052:	53                   	push   ebx
c002c053:	83 ec 10             	sub    esp,0x10
c002c056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c05a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002c05e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002c062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c066:	cd 60                	int    0x60
c002c068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002c06c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002c074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002c078:	83 c4 10             	add    esp,0x10
c002c07b:	5b                   	pop    ebx
c002c07c:	c3                   	ret    

Disassembly of section align_previous:

c002d000 <DO_NOT_DELETE()>:
c002d000:	c3                   	ret    
