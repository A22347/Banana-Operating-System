
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 df ea 00 00       	call   c000eaff <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c8 44 02 c0       	mov    eax,0xc00244c8
c0000025:	3d c8 44 02 c0       	cmp    eax,0xc00244c8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c8 44 02 c0       	push   0xc00244c8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c8 44 02 c0       	mov    eax,0xc00244c8
c0000051:	2d c8 44 02 c0       	sub    eax,0xc00244c8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c8 44 02 c0       	push   0xc00244c8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 40 07 02 c0       	mov    ebx,0xc0020740
c0000097:	81 eb 3c 07 02 c0    	sub    ebx,0xc002073c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 3c 07 02 c0       	mov    esi,0xc002073c
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c8 44 02 c0       	push   0xc00244c8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 c8 44 02 c0       	push   0xc00244c8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 37 49 01 00       	call   c0014be4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 bc 2c 01 00       	call   c0012f81 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 15 49 01 00       	call   c0014be4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 22 4e 01 00       	call   c0015110 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 c5 52 01 00       	call   c00155bc <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 92 e3 00 00       	jmp    c000e711 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 60 07 02 c0 02 	test   BYTE PTR [edx-0x3ffdf8a0],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 60 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf8a0],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 60 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf8a0],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 60 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf8a0],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 60 07 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf8a0],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 60 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf8a0],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d8d:	85 c9                	test   ecx,ecx
c0000d8f:	0f 84 01 01 00 00    	je     c0000e96 <dlfree+0x110>
c0000d95:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d98:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d9b:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c3                	cmp    ebx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 cb 03             	or     ebx,0x3
c0000db0:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000dc0:	89 19                	mov    DWORD PTR [ecx],ebx
c0000dc2:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000dc9:	e9 c8 00 00 00       	jmp    c0000e96 <dlfree+0x110>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 cb 01             	or     ebx,0x1
c0000ddd:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000de3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000de6:	83 e3 fc             	and    ebx,0xfffffffc
c0000de9:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000df2:	29 ca                	sub    edx,ecx
c0000df4:	01 c8                	add    eax,ecx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dfc:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dff:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e02:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000e0e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e11:	80 e1 01             	and    cl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 d8                	add    eax,ebx
c0000e1b:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000e1e:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000e21:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000e24:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000e2a:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 d8                	add    eax,ebx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 35                	jbe    c0000e96 <dlfree+0x110>
c0000e61:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e68:	74 2c                	je     c0000e96 <dlfree+0x110>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e7a:	53                   	push   ebx
c0000e7b:	53                   	push   ebx
c0000e7c:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e82:	01 c8                	add    eax,ecx
c0000e84:	29 ca                	sub    edx,ecx
c0000e86:	50                   	push   eax
c0000e87:	52                   	push   edx
c0000e88:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e8e:	e8 bb d9 00 00       	call   c000e84e <munmap>
c0000e93:	83 c4 10             	add    esp,0x10
c0000e96:	5b                   	pop    ebx
c0000e97:	5e                   	pop    esi
c0000e98:	5f                   	pop    edi
c0000e99:	c3                   	ret    

c0000e9a <sYSMALLOc>:
c0000e9a:	55                   	push   ebp
c0000e9b:	57                   	push   edi
c0000e9c:	56                   	push   esi
c0000e9d:	53                   	push   ebx
c0000e9e:	89 d3                	mov    ebx,edx
c0000ea0:	83 ec 2c             	sub    esp,0x2c
c0000ea3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000ea7:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ead:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000eb0:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000eb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000eb7:	74 1f                	je     c0000ed8 <sYSMALLOc+0x3e>
c0000eb9:	89 d0                	mov    eax,edx
c0000ebb:	e8 df fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ec0:	83 ec 0c             	sub    esp,0xc
c0000ec3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ec7:	83 e8 07             	sub    eax,0x7
c0000eca:	50                   	push   eax
c0000ecb:	e8 78 03 00 00       	call   c0001248 <dlmalloc>
c0000ed0:	83 c4 10             	add    esp,0x10
c0000ed3:	e9 68 03 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0000ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000edc:	f7 d9                	neg    ecx
c0000ede:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000ee4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0000ee8:	0f 87 be 00 00 00    	ja     c0000fac <sYSMALLOc+0x112>
c0000eee:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ef4:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000efa:	0f 8d ac 00 00 00    	jge    c0000fac <sYSMALLOc+0x112>
c0000f00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000f08:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000f0c:	21 ce                	and    esi,ecx
c0000f0e:	39 fe                	cmp    esi,edi
c0000f10:	0f 86 96 00 00 00    	jbe    c0000fac <sYSMALLOc+0x112>
c0000f16:	52                   	push   edx
c0000f17:	52                   	push   edx
c0000f18:	6a 00                	push   0x0
c0000f1a:	6a ff                	push   0xffffffff
c0000f1c:	6a 0c                	push   0xc
c0000f1e:	6a 03                	push   0x3
c0000f20:	56                   	push   esi
c0000f21:	6a 00                	push   0x0
c0000f23:	e8 c8 d8 00 00       	call   c000e7f0 <mmap>
c0000f28:	83 c4 20             	add    esp,0x20
c0000f2b:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2e:	74 7c                	je     c0000fac <sYSMALLOc+0x112>
c0000f30:	89 c1                	mov    ecx,eax
c0000f32:	83 e1 07             	and    ecx,0x7
c0000f35:	74 13                	je     c0000f4a <sYSMALLOc+0xb0>
c0000f37:	ba 08 00 00 00       	mov    edx,0x8
c0000f3c:	89 f7                	mov    edi,esi
c0000f3e:	29 ca                	sub    edx,ecx
c0000f40:	01 d0                	add    eax,edx
c0000f42:	29 d7                	sub    edi,edx
c0000f44:	89 10                	mov    DWORD PTR [eax],edx
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	eb 08                	jmp    c0000f52 <sYSMALLOc+0xb8>
c0000f4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f50:	89 f2                	mov    edx,esi
c0000f52:	83 ca 02             	or     edx,0x2
c0000f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f58:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f5e:	8d 57 01             	lea    edx,[edi+0x1]
c0000f61:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f67:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f6d:	7e 06                	jle    c0000f75 <sYSMALLOc+0xdb>
c0000f6f:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f75:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f7b:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f81:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f87:	76 06                	jbe    c0000f8f <sYSMALLOc+0xf5>
c0000f89:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f8f:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f95:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f9b:	0f 83 41 01 00 00    	jae    c00010e2 <sYSMALLOc+0x248>
c0000fa1:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000fa7:	e9 36 01 00 00       	jmp    c00010e2 <sYSMALLOc+0x248>
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000fbc:	83 e0 fc             	and    eax,0xfffffffc
c0000fbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000fc7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fcb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fcf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fd3:	83 c0 10             	add    eax,0x10
c0000fd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fda:	01 c5                	add    ebp,eax
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 04                	je     c0000fe9 <sYSMALLOc+0x14f>
c0000fe5:	2b 6c 24 04          	sub    ebp,DWORD PTR [esp+0x4]
c0000fe9:	03 6c 24 10          	add    ebp,DWORD PTR [esp+0x10]
c0000fed:	23 6c 24 14          	and    ebp,DWORD PTR [esp+0x14]
c0000ff1:	89 ee                	mov    esi,ebp
c0000ff3:	7f 19                	jg     c000100e <sYSMALLOc+0x174>
c0000ff5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ffc:	74 28                	je     c0001026 <sYSMALLOc+0x18c>
c0000ffe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001002:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001006:	01 ee                	add    esi,ebp
c0001008:	23 74 24 14          	and    esi,DWORD PTR [esp+0x14]
c000100c:	eb 18                	jmp    c0001026 <sYSMALLOc+0x18c>
c000100e:	83 ec 0c             	sub    esp,0xc
c0001011:	55                   	push   ebp
c0001012:	e8 a3 d7 00 00       	call   c000e7ba <sbrk_thunk>
c0001017:	83 c4 10             	add    esp,0x10
c000101a:	89 c7                	mov    edi,eax
c000101c:	83 c8 ff             	or     eax,0xffffffff
c000101f:	83 ff ff             	cmp    edi,0xffffffff
c0001022:	75 42                	jne    c0001066 <sYSMALLOc+0x1cc>
c0001024:	eb cf                	jmp    c0000ff5 <sYSMALLOc+0x15b>
c0001026:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c000102c:	77 05                	ja     c0001033 <sYSMALLOc+0x199>
c000102e:	be 00 c0 00 00       	mov    esi,0xc000
c0001033:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0001037:	77 07                	ja     c0001040 <sYSMALLOc+0x1a6>
c0001039:	31 c0                	xor    eax,eax
c000103b:	e9 00 02 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c0001040:	50                   	push   eax
c0001041:	50                   	push   eax
c0001042:	6a 00                	push   0x0
c0001044:	6a ff                	push   0xffffffff
c0001046:	6a 0c                	push   0xc
c0001048:	6a 03                	push   0x3
c000104a:	56                   	push   esi
c000104b:	6a 00                	push   0x0
c000104d:	e8 9e d7 00 00       	call   c000e7f0 <mmap>
c0001052:	83 c4 20             	add    esp,0x20
c0001055:	83 f8 ff             	cmp    eax,0xffffffff
c0001058:	89 c7                	mov    edi,eax
c000105a:	74 dd                	je     c0001039 <sYSMALLOc+0x19f>
c000105c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001063:	8d 04 30             	lea    eax,[eax+esi*1]
c0001066:	8b 8b 68 03 00 00    	mov    ecx,DWORD PTR [ebx+0x368]
c000106c:	01 f1                	add    ecx,esi
c000106e:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001072:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001078:	75 70                	jne    c00010ea <sYSMALLOc+0x250>
c000107a:	83 f8 ff             	cmp    eax,0xffffffff
c000107d:	75 6b                	jne    c00010ea <sYSMALLOc+0x250>
c000107f:	03 74 24 04          	add    esi,DWORD PTR [esp+0x4]
c0001083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001087:	83 ce 01             	or     esi,0x1
c000108a:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c000108d:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001093:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001099:	73 06                	jae    c00010a1 <sYSMALLOc+0x207>
c000109b:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a1:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a7:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010ad:	73 06                	jae    c00010b5 <sYSMALLOc+0x21b>
c00010af:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bb:	83 e2 fc             	and    edx,0xfffffffc
c00010be:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
c00010c2:	0f 87 71 ff ff ff    	ja     c0001039 <sYSMALLOc+0x19f>
c00010c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010cc:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010cf:	29 fa                	sub    edx,edi
c00010d1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d4:	89 fb                	mov    ebx,edi
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	83 cb 01             	or     ebx,0x1
c00010dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010df:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e2:	83 c0 08             	add    eax,0x8
c00010e5:	e9 56 01 00 00       	jmp    c0001240 <sYSMALLOc+0x3a6>
c00010ea:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010f0:	f6 c2 01             	test   dl,0x1
c00010f3:	74 1e                	je     c0001113 <sYSMALLOc+0x279>
c00010f5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010fa:	0f 84 bb 00 00 00    	je     c00011bb <sYSMALLOc+0x321>
c0001100:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c0001104:	0f 86 b1 00 00 00    	jbe    c00011bb <sYSMALLOc+0x321>
c000110a:	83 e2 fe             	and    edx,0xfffffffe
c000110d:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001113:	83 f8 ff             	cmp    eax,0xffffffff
c0001116:	89 fd                	mov    ebp,edi
c0001118:	75 24                	jne    c000113e <sYSMALLOc+0x2a4>
c000111a:	83 ec 0c             	sub    esp,0xc
c000111d:	89 fd                	mov    ebp,edi
c000111f:	6a 00                	push   0x0
c0001121:	e8 94 d6 00 00       	call   c000e7ba <sbrk_thunk>
c0001126:	83 c4 10             	add    esp,0x10
c0001129:	89 c2                	mov    edx,eax
c000112b:	29 fa                	sub    edx,edi
c000112d:	29 f2                	sub    edx,esi
c000112f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001135:	83 f8 ff             	cmp    eax,0xffffffff
c0001138:	0f 84 4f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000113e:	31 c9                	xor    ecx,ecx
c0001140:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001143:	29 e8                	sub    eax,ebp
c0001145:	01 c8                	add    eax,ecx
c0001147:	83 c8 01             	or     eax,0x1
c000114a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000114d:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001153:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001158:	0f 84 2f ff ff ff    	je     c000108d <sYSMALLOc+0x1f3>
c000115e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0001162:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001166:	83 ee 0c             	sub    esi,0xc
c0001169:	83 e6 f8             	and    esi,0xfffffff8
c000116c:	89 f0                	mov    eax,esi
c000116e:	83 c8 01             	or     eax,0x1
c0001171:	83 fe 0f             	cmp    esi,0xf
c0001174:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001177:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c000117f:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c0001187:	0f 86 00 ff ff ff    	jbe    c000108d <sYSMALLOc+0x1f3>
c000118d:	83 ec 0c             	sub    esp,0xc
c0001190:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001196:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00011a4:	83 c0 08             	add    eax,0x8
c00011a7:	50                   	push   eax
c00011a8:	e8 d9 fb ff ff       	call   c0000d86 <dlfree>
c00011ad:	83 c4 10             	add    esp,0x10
c00011b0:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011b6:	e9 d2 fe ff ff       	jmp    c000108d <sYSMALLOc+0x1f3>
c00011bb:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00011c0:	74 0e                	je     c00011d0 <sYSMALLOc+0x336>
c00011c2:	89 f8                	mov    eax,edi
c00011c4:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00011c8:	01 c1                	add    ecx,eax
c00011ca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00011d0:	89 fa                	mov    edx,edi
c00011d2:	83 e2 07             	and    edx,0x7
c00011d5:	74 0c                	je     c00011e3 <sYSMALLOc+0x349>
c00011d7:	b8 08 00 00 00       	mov    eax,0x8
c00011dc:	29 d0                	sub    eax,edx
c00011de:	8d 2c 07             	lea    ebp,[edi+eax*1]
c00011e1:	eb 04                	jmp    c00011e7 <sYSMALLOc+0x34d>
c00011e3:	89 fd                	mov    ebp,edi
c00011e5:	31 c0                	xor    eax,eax
c00011e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00011eb:	83 ec 0c             	sub    esp,0xc
c00011ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00011f2:	8d 14 06             	lea    edx,[esi+eax*1]
c00011f5:	01 fa                	add    edx,edi
c00011f7:	01 d1                	add    ecx,edx
c00011f9:	29 d0                	sub    eax,edx
c00011fb:	23 4c 24 20          	and    ecx,DWORD PTR [esp+0x20]
c00011ff:	01 c1                	add    ecx,eax
c0001201:	51                   	push   ecx
c0001202:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0001206:	e8 af d5 00 00       	call   c000e7ba <sbrk_thunk>
c000120b:	83 c4 10             	add    esp,0x10
c000120e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001212:	83 f8 ff             	cmp    eax,0xffffffff
c0001215:	75 12                	jne    c0001229 <sYSMALLOc+0x38f>
c0001217:	83 ec 0c             	sub    esp,0xc
c000121a:	6a 00                	push   0x0
c000121c:	e8 99 d5 00 00       	call   c000e7ba <sbrk_thunk>
c0001221:	83 c4 10             	add    esp,0x10
c0001224:	e9 0c ff ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001229:	39 f8                	cmp    eax,edi
c000122b:	0f 83 0f ff ff ff    	jae    c0001140 <sYSMALLOc+0x2a6>
c0001231:	8d 04 37             	lea    eax,[edi+esi*1]
c0001234:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000123b:	e9 f5 fe ff ff       	jmp    c0001135 <sYSMALLOc+0x29b>
c0001240:	83 c4 2c             	add    esp,0x2c
c0001243:	5b                   	pop    ebx
c0001244:	5e                   	pop    esi
c0001245:	5f                   	pop    edi
c0001246:	5d                   	pop    ebp
c0001247:	c3                   	ret    

c0001248 <dlmalloc>:
c0001248:	55                   	push   ebp
c0001249:	57                   	push   edi
c000124a:	56                   	push   esi
c000124b:	53                   	push   ebx
c000124c:	83 ec 1c             	sub    esp,0x1c
c000124f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001253:	83 f8 df             	cmp    eax,0xffffffdf
c0001256:	0f 87 70 03 00 00    	ja     c00015cc <dlmalloc+0x384>
c000125c:	83 c0 0b             	add    eax,0xb
c000125f:	be 10 00 00 00       	mov    esi,0x10
c0001264:	83 f8 0f             	cmp    eax,0xf
c0001267:	76 05                	jbe    c000126e <dlmalloc+0x26>
c0001269:	83 e0 f8             	and    eax,0xfffffff8
c000126c:	89 c6                	mov    esi,eax
c000126e:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001274:	f7 c7 01 00 00 00    	test   edi,0x1
c000127a:	75 17                	jne    c0001293 <dlmalloc+0x4b>
c000127c:	85 ff                	test   edi,edi
c000127e:	0f 85 05 03 00 00    	jne    c0001589 <dlmalloc+0x341>
c0001284:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001289:	e8 11 fa ff ff       	call   c0000c9f <malloc_consolidate>
c000128e:	e9 f6 02 00 00       	jmp    c0001589 <dlmalloc+0x341>
c0001293:	39 f7                	cmp    edi,esi
c0001295:	72 1f                	jb     c00012b6 <dlmalloc+0x6e>
c0001297:	89 f2                	mov    edx,esi
c0001299:	c1 ea 03             	shr    edx,0x3
c000129c:	83 ea 02             	sub    edx,0x2
c000129f:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c00012a6:	85 c0                	test   eax,eax
c00012a8:	74 0c                	je     c00012b6 <dlmalloc+0x6e>
c00012aa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00012ad:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c00012b4:	eb 30                	jmp    c00012e6 <dlmalloc+0x9e>
c00012b6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012bc:	89 f0                	mov    eax,esi
c00012be:	77 2e                	ja     c00012ee <dlmalloc+0xa6>
c00012c0:	c1 e8 03             	shr    eax,0x3
c00012c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012c7:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c00012ce:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012d1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012d4:	39 c3                	cmp    ebx,eax
c00012d6:	74 2e                	je     c0001306 <dlmalloc+0xbe>
c00012d8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012db:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012e0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012e3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012e6:	83 c0 08             	add    eax,0x8
c00012e9:	e9 e0 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00012ee:	e8 28 f9 ff ff       	call   c0000c1b <largebin_index>
c00012f3:	83 e7 02             	and    edi,0x2
c00012f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012fa:	74 0a                	je     c0001306 <dlmalloc+0xbe>
c00012fc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001301:	e8 99 f9 ff ff       	call   c0000c9f <malloc_consolidate>
c0001306:	8d 46 10             	lea    eax,[esi+0x10]
c0001309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000130d:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001313:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c0001319:	0f 84 13 01 00 00    	je     c0001432 <dlmalloc+0x1ea>
c000131f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001325:	83 e7 fc             	and    edi,0xfffffffc
c0001328:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132e:	77 4c                	ja     c000137c <dlmalloc+0x134>
c0001330:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001335:	75 45                	jne    c000137c <dlmalloc+0x134>
c0001337:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000133d:	75 3d                	jne    c000137c <dlmalloc+0x134>
c000133f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001343:	73 37                	jae    c000137c <dlmalloc+0x134>
c0001345:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001348:	89 fa                	mov    edx,edi
c000134a:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c000134f:	29 f2                	sub    edx,esi
c0001351:	83 ce 01             	or     esi,0x1
c0001354:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001359:	89 d1                	mov    ecx,edx
c000135b:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c0001360:	83 c9 01             	or     ecx,0x1
c0001363:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000136a:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c0001371:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001374:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001377:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000137a:	eb 15                	jmp    c0001391 <dlmalloc+0x149>
c000137c:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001381:	39 fe                	cmp    esi,edi
c0001383:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000138a:	75 0d                	jne    c0001399 <dlmalloc+0x151>
c000138c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001391:	8d 43 08             	lea    eax,[ebx+0x8]
c0001394:	e9 35 02 00 00       	jmp    c00015ce <dlmalloc+0x386>
c0001399:	81 ff ff 00 00 00    	cmp    edi,0xff
c000139f:	89 f8                	mov    eax,edi
c00013a1:	77 19                	ja     c00013bc <dlmalloc+0x174>
c00013a3:	c1 e8 03             	shr    eax,0x3
c00013a6:	8d 14 00             	lea    edx,[eax+eax*1]
c00013a9:	83 c2 0d             	add    edx,0xd
c00013ac:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c00013b3:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013ba:	eb 46                	jmp    c0001402 <dlmalloc+0x1ba>
c00013bc:	e8 5a f8 ff ff       	call   c0000c1b <largebin_index>
c00013c1:	8d 14 00             	lea    edx,[eax+eax*1]
c00013c4:	83 c2 0d             	add    edx,0xd
c00013c7:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013ce:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013d5:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013d8:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013dc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013e0:	89 d5                	mov    ebp,edx
c00013e2:	74 1e                	je     c0001402 <dlmalloc+0x1ba>
c00013e4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013e7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013ea:	77 12                	ja     c00013fe <dlmalloc+0x1b6>
c00013ec:	83 cf 01             	or     edi,0x1
c00013ef:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013f2:	76 05                	jbe    c00013f9 <dlmalloc+0x1b1>
c00013f4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013f7:	eb f6                	jmp    c00013ef <dlmalloc+0x1a7>
c00013f9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013fc:	eb 04                	jmp    c0001402 <dlmalloc+0x1ba>
c00013fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001402:	89 c7                	mov    edi,eax
c0001404:	88 c1                	mov    cl,al
c0001406:	c1 ff 05             	sar    edi,0x5
c0001409:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000140d:	bf 01 00 00 00       	mov    edi,0x1
c0001412:	d3 e7                	shl    edi,cl
c0001414:	89 f8                	mov    eax,edi
c0001416:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000141a:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001421:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001424:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001427:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000142a:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000142d:	e9 db fe ff ff       	jmp    c000130d <dlmalloc+0xc5>
c0001432:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001438:	76 78                	jbe    c00014b2 <dlmalloc+0x26a>
c000143a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000143e:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001445:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001448:	8d 48 f8             	lea    ecx,[eax-0x8]
c000144b:	39 ca                	cmp    edx,ecx
c000144d:	74 63                	je     c00014b2 <dlmalloc+0x26a>
c000144f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001452:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001455:	83 e3 fc             	and    ebx,0xfffffffc
c0001458:	39 de                	cmp    esi,ebx
c000145a:	77 52                	ja     c00014ae <dlmalloc+0x266>
c000145c:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000145f:	89 df                	mov    edi,ebx
c0001461:	01 d3                	add    ebx,edx
c0001463:	29 f7                	sub    edi,esi
c0001465:	83 ff 0f             	cmp    edi,0xf
c0001468:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000146b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000146e:	8d 42 08             	lea    eax,[edx+0x8]
c0001471:	77 09                	ja     c000147c <dlmalloc+0x234>
c0001473:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001477:	e9 52 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000147c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000147f:	83 ce 01             	or     esi,0x1
c0001482:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c0001488:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c000148e:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001495:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000149c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000149f:	89 fa                	mov    edx,edi
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	89 3b                	mov    DWORD PTR [ebx],edi
c00014a9:	e9 20 01 00 00       	jmp    c00015ce <dlmalloc+0x386>
c00014ae:	89 c2                	mov    edx,eax
c00014b0:	eb 99                	jmp    c000144b <dlmalloc+0x203>
c00014b2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00014b6:	b8 01 00 00 00       	mov    eax,0x1
c00014bb:	41                   	inc    ecx
c00014bc:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c00014c3:	89 cb                	mov    ebx,ecx
c00014c5:	c1 eb 05             	shr    ebx,0x5
c00014c8:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014cf:	d3 e0                	shl    eax,cl
c00014d1:	39 f8                	cmp    eax,edi
c00014d3:	77 04                	ja     c00014d9 <dlmalloc+0x291>
c00014d5:	85 c0                	test   eax,eax
c00014d7:	75 26                	jne    c00014ff <dlmalloc+0x2b7>
c00014d9:	43                   	inc    ebx
c00014da:	83 fb 02             	cmp    ebx,0x2
c00014dd:	0f 87 a6 00 00 00    	ja     c0001589 <dlmalloc+0x341>
c00014e3:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014ea:	85 ff                	test   edi,edi
c00014ec:	74 eb                	je     c00014d9 <dlmalloc+0x291>
c00014ee:	89 d8                	mov    eax,ebx
c00014f0:	c1 e0 06             	shl    eax,0x6
c00014f3:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014fa:	b8 01 00 00 00       	mov    eax,0x1
c00014ff:	85 f8                	test   eax,edi
c0001501:	75 07                	jne    c000150a <dlmalloc+0x2c2>
c0001503:	83 c2 08             	add    edx,0x8
c0001506:	01 c0                	add    eax,eax
c0001508:	eb f5                	jmp    c00014ff <dlmalloc+0x2b7>
c000150a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000150d:	39 ca                	cmp    edx,ecx
c000150f:	75 14                	jne    c0001525 <dlmalloc+0x2dd>
c0001511:	89 c1                	mov    ecx,eax
c0001513:	83 c2 08             	add    edx,0x8
c0001516:	f7 d1                	not    ecx
c0001518:	01 c0                	add    eax,eax
c000151a:	21 cf                	and    edi,ecx
c000151c:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001523:	eb ac                	jmp    c00014d1 <dlmalloc+0x289>
c0001525:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001528:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000152b:	83 e0 fc             	and    eax,0xfffffffc
c000152e:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001531:	89 c3                	mov    ebx,eax
c0001533:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001536:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001539:	29 f3                	sub    ebx,esi
c000153b:	8d 41 08             	lea    eax,[ecx+0x8]
c000153e:	83 fb 0f             	cmp    ebx,0xf
c0001541:	77 09                	ja     c000154c <dlmalloc+0x304>
c0001543:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001547:	e9 82 00 00 00       	jmp    c00015ce <dlmalloc+0x386>
c000154c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000154f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001555:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000155b:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001561:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c0001568:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c000156f:	77 06                	ja     c0001577 <dlmalloc+0x32f>
c0001571:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001577:	83 ce 01             	or     esi,0x1
c000157a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000157d:	89 d9                	mov    ecx,ebx
c000157f:	83 c9 01             	or     ecx,0x1
c0001582:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001585:	89 1a                	mov    DWORD PTR [edx],ebx
c0001587:	eb 45                	jmp    c00015ce <dlmalloc+0x386>
c0001589:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c000158e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001591:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001594:	83 e2 fc             	and    edx,0xfffffffc
c0001597:	39 d1                	cmp    ecx,edx
c0001599:	77 1e                	ja     c00015b9 <dlmalloc+0x371>
c000159b:	89 f3                	mov    ebx,esi
c000159d:	29 f2                	sub    edx,esi
c000159f:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015a2:	83 cb 01             	or     ebx,0x1
c00015a5:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c00015ab:	83 ca 01             	or     edx,0x1
c00015ae:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015b1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00015b4:	e9 2d fd ff ff       	jmp    c00012e6 <dlmalloc+0x9e>
c00015b9:	83 c4 1c             	add    esp,0x1c
c00015bc:	89 f0                	mov    eax,esi
c00015be:	5b                   	pop    ebx
c00015bf:	ba 00 61 02 c0       	mov    edx,0xc0026100
c00015c4:	5e                   	pop    esi
c00015c5:	5f                   	pop    edi
c00015c6:	5d                   	pop    ebp
c00015c7:	e9 ce f8 ff ff       	jmp    c0000e9a <sYSMALLOc>
c00015cc:	31 c0                	xor    eax,eax
c00015ce:	83 c4 1c             	add    esp,0x1c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	c3                   	ret    

c00015d6 <iALLOc>:
c00015d6:	55                   	push   ebp
c00015d7:	89 c5                	mov    ebp,eax
c00015d9:	57                   	push   edi
c00015da:	56                   	push   esi
c00015db:	53                   	push   ebx
c00015dc:	83 ec 2c             	sub    esp,0x2c
c00015df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015e7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015f2:	75 12                	jne    c0001606 <iALLOc+0x30>
c00015f4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015f8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015fd:	e8 9d f6 ff ff       	call   c0000c9f <malloc_consolidate>
c0001602:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001606:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000160b:	74 12                	je     c000161f <iALLOc+0x49>
c000160d:	85 ed                	test   ebp,ebp
c000160f:	0f 84 64 01 00 00    	je     c0001779 <iALLOc+0x1a3>
c0001615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000161d:	eb 33                	jmp    c0001652 <iALLOc+0x7c>
c000161f:	85 ed                	test   ebp,ebp
c0001621:	75 14                	jne    c0001637 <iALLOc+0x61>
c0001623:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000162b:	83 c4 2c             	add    esp,0x2c
c000162e:	5b                   	pop    ebx
c000162f:	5e                   	pop    esi
c0001630:	5f                   	pop    edi
c0001631:	5d                   	pop    ebp
c0001632:	e9 11 fc ff ff       	jmp    c0001248 <dlmalloc>
c0001637:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000163f:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001646:	83 f8 0f             	cmp    eax,0xf
c0001649:	76 07                	jbe    c0001652 <iALLOc+0x7c>
c000164b:	83 e0 f8             	and    eax,0xfffffff8
c000164e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001652:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001657:	75 09                	jne    c0001662 <iALLOc+0x8c>
c0001659:	89 d0                	mov    eax,edx
c000165b:	31 f6                	xor    esi,esi
c000165d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001660:	eb 3b                	jmp    c000169d <iALLOc+0xc7>
c0001662:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000166a:	8b 02                	mov    eax,DWORD PTR [edx]
c000166c:	83 c0 0b             	add    eax,0xb
c000166f:	83 f8 0f             	cmp    eax,0xf
c0001672:	76 07                	jbe    c000167b <iALLOc+0xa5>
c0001674:	83 e0 f8             	and    eax,0xfffffff8
c0001677:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000167b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000167f:	0f af f5             	imul   esi,ebp
c0001682:	eb 25                	jmp    c00016a9 <iALLOc+0xd3>
c0001684:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001686:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001689:	bb 10 00 00 00       	mov    ebx,0x10
c000168e:	83 f9 0f             	cmp    ecx,0xf
c0001691:	76 05                	jbe    c0001698 <iALLOc+0xc2>
c0001693:	83 e1 f8             	and    ecx,0xfffffff8
c0001696:	89 cb                	mov    ebx,ecx
c0001698:	01 de                	add    esi,ebx
c000169a:	83 c0 04             	add    eax,0x4
c000169d:	39 c7                	cmp    edi,eax
c000169f:	75 e3                	jne    c0001684 <iALLOc+0xae>
c00016a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00016ad:	83 ec 0c             	sub    esp,0xc
c00016b0:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c00016b6:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c00016c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016c4:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00016c8:	50                   	push   eax
c00016c9:	e8 7a fb ff ff       	call   c0001248 <dlmalloc>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016d7:	85 c0                	test   eax,eax
c00016d9:	0f 84 92 00 00 00    	je     c0001771 <iALLOc+0x19b>
c00016df:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016e2:	8d 78 f8             	lea    edi,[eax-0x8]
c00016e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016e9:	83 e3 fc             	and    ebx,0xfffffffc
c00016ec:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016f1:	74 1e                	je     c0001711 <iALLOc+0x13b>
c00016f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016f7:	89 d9                	mov    ecx,ebx
c00016f9:	52                   	push   edx
c00016fa:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016fe:	83 e9 04             	sub    ecx,0x4
c0001701:	51                   	push   ecx
c0001702:	6a 00                	push   0x0
c0001704:	50                   	push   eax
c0001705:	e8 e6 ed ff ff       	call   c00004f0 <memset>
c000170a:	83 c4 10             	add    esp,0x10
c000170d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001711:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001716:	75 14                	jne    c000172c <iALLOc+0x156>
c0001718:	8d 04 37             	lea    eax,[edi+esi*1]
c000171b:	29 f3                	sub    ebx,esi
c000171d:	8d 48 08             	lea    ecx,[eax+0x8]
c0001720:	83 cb 01             	or     ebx,0x1
c0001723:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001726:	89 f3                	mov    ebx,esi
c0001728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000172c:	31 c0                	xor    eax,eax
c000172e:	4d                   	dec    ebp
c000172f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001733:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001736:	39 c5                	cmp    ebp,eax
c0001738:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000173b:	74 2c                	je     c0001769 <iALLOc+0x193>
c000173d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001741:	85 c9                	test   ecx,ecx
c0001743:	75 15                	jne    c000175a <iALLOc+0x184>
c0001745:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001748:	8d 71 0b             	lea    esi,[ecx+0xb]
c000174b:	b9 10 00 00 00       	mov    ecx,0x10
c0001750:	83 fe 0f             	cmp    esi,0xf
c0001753:	76 05                	jbe    c000175a <iALLOc+0x184>
c0001755:	83 e6 f8             	and    esi,0xfffffff8
c0001758:	89 f1                	mov    ecx,esi
c000175a:	89 ce                	mov    esi,ecx
c000175c:	29 cb                	sub    ebx,ecx
c000175e:	83 ce 01             	or     esi,0x1
c0001761:	40                   	inc    eax
c0001762:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001765:	01 cf                	add    edi,ecx
c0001767:	eb c6                	jmp    c000172f <iALLOc+0x159>
c0001769:	83 cb 01             	or     ebx,0x1
c000176c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000176f:	eb 08                	jmp    c0001779 <iALLOc+0x1a3>
c0001771:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177d:	83 c4 2c             	add    esp,0x2c
c0001780:	5b                   	pop    ebx
c0001781:	5e                   	pop    esi
c0001782:	5f                   	pop    edi
c0001783:	5d                   	pop    ebp
c0001784:	c3                   	ret    

c0001785 <dlrealloc>:
c0001785:	55                   	push   ebp
c0001786:	57                   	push   edi
c0001787:	56                   	push   esi
c0001788:	53                   	push   ebx
c0001789:	83 ec 1c             	sub    esp,0x1c
c000178c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001790:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001794:	85 db                	test   ebx,ebx
c0001796:	75 10                	jne    c00017a8 <dlrealloc+0x23>
c0001798:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000179c:	83 c4 1c             	add    esp,0x1c
c000179f:	5b                   	pop    ebx
c00017a0:	5e                   	pop    esi
c00017a1:	5f                   	pop    edi
c00017a2:	5d                   	pop    ebp
c00017a3:	e9 a0 fa ff ff       	jmp    c0001248 <dlmalloc>
c00017a8:	83 f8 df             	cmp    eax,0xffffffdf
c00017ab:	0f 87 a6 01 00 00    	ja     c0001957 <dlrealloc+0x1d2>
c00017b1:	83 c0 0b             	add    eax,0xb
c00017b4:	bd 10 00 00 00       	mov    ebp,0x10
c00017b9:	83 f8 0f             	cmp    eax,0xf
c00017bc:	76 05                	jbe    c00017c3 <dlrealloc+0x3e>
c00017be:	83 e0 f8             	and    eax,0xfffffff8
c00017c1:	89 c5                	mov    ebp,eax
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	89 ce                	mov    esi,ecx
c00017c8:	83 e6 fc             	and    esi,0xfffffffc
c00017cb:	f6 c1 02             	test   cl,0x2
c00017ce:	0f 85 4e 01 00 00    	jne    c0001922 <dlrealloc+0x19d>
c00017d4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017d7:	39 f5                	cmp    ebp,esi
c00017d9:	0f 86 04 01 00 00    	jbe    c00018e3 <dlrealloc+0x15e>
c00017df:	8d 14 37             	lea    edx,[edi+esi*1]
c00017e2:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017e8:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00017eb:	75 33                	jne    c0001820 <dlrealloc+0x9b>
c00017ed:	83 e0 fc             	and    eax,0xfffffffc
c00017f0:	01 f0                	add    eax,esi
c00017f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00017f6:	8d 45 10             	lea    eax,[ebp+0x10]
c00017f9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00017fd:	77 49                	ja     c0001848 <dlrealloc+0xc3>
c00017ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001803:	83 e1 01             	and    ecx,0x1
c0001806:	01 ef                	add    edi,ebp
c0001808:	09 e9                	or     ecx,ebp
c000180a:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000180d:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001813:	29 e8                	sub    eax,ebp
c0001815:	83 c8 01             	or     eax,0x1
c0001818:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000181b:	e9 39 01 00 00       	jmp    c0001959 <dlrealloc+0x1d4>
c0001820:	89 c1                	mov    ecx,eax
c0001822:	83 e1 fe             	and    ecx,0xfffffffe
c0001825:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000182a:	75 1c                	jne    c0001848 <dlrealloc+0xc3>
c000182c:	83 e0 fc             	and    eax,0xfffffffc
c000182f:	01 f0                	add    eax,esi
c0001831:	39 c5                	cmp    ebp,eax
c0001833:	77 13                	ja     c0001848 <dlrealloc+0xc3>
c0001835:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001838:	89 c6                	mov    esi,eax
c000183a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000183d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001840:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001843:	e9 9b 00 00 00       	jmp    c00018e3 <dlrealloc+0x15e>
c0001848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000184c:	8d 45 f9             	lea    eax,[ebp-0x7]
c000184f:	83 ec 0c             	sub    esp,0xc
c0001852:	50                   	push   eax
c0001853:	e8 f0 f9 ff ff       	call   c0001248 <dlmalloc>
c0001858:	83 c4 10             	add    esp,0x10
c000185b:	85 c0                	test   eax,eax
c000185d:	0f 84 f4 00 00 00    	je     c0001957 <dlrealloc+0x1d2>
c0001863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001867:	8d 48 f8             	lea    ecx,[eax-0x8]
c000186a:	39 ca                	cmp    edx,ecx
c000186c:	75 0a                	jne    c0001878 <dlrealloc+0xf3>
c000186e:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001871:	83 e0 fc             	and    eax,0xfffffffc
c0001874:	01 c6                	add    esi,eax
c0001876:	eb 6b                	jmp    c00018e3 <dlrealloc+0x15e>
c0001878:	8d 4e fc             	lea    ecx,[esi-0x4]
c000187b:	83 f9 27             	cmp    ecx,0x27
c000187e:	76 08                	jbe    c0001888 <dlrealloc+0x103>
c0001880:	89 de                	mov    esi,ebx
c0001882:	89 c7                	mov    edi,eax
c0001884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001886:	eb 43                	jmp    c00018cb <dlrealloc+0x146>
c0001888:	8b 13                	mov    edx,DWORD PTR [ebx]
c000188a:	83 f9 13             	cmp    ecx,0x13
c000188d:	89 10                	mov    DWORD PTR [eax],edx
c000188f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001892:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001895:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001898:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000189b:	76 2e                	jbe    c00018cb <dlrealloc+0x146>
c000189d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018a0:	83 f9 1b             	cmp    ecx,0x1b
c00018a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018a6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018a9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018ac:	76 1d                	jbe    c00018cb <dlrealloc+0x146>
c00018ae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00018b1:	83 f9 23             	cmp    ecx,0x23
c00018b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00018b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00018ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00018bd:	76 0c                	jbe    c00018cb <dlrealloc+0x146>
c00018bf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00018c2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00018c5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00018c8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00018cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018cf:	83 ec 0c             	sub    esp,0xc
c00018d2:	53                   	push   ebx
c00018d3:	e8 ae f4 ff ff       	call   c0000d86 <dlfree>
c00018d8:	83 c4 10             	add    esp,0x10
c00018db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018df:	89 c3                	mov    ebx,eax
c00018e1:	eb 76                	jmp    c0001959 <dlrealloc+0x1d4>
c00018e3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018e6:	8d 04 37             	lea    eax,[edi+esi*1]
c00018e9:	89 f2                	mov    edx,esi
c00018eb:	29 ea                	sub    edx,ebp
c00018ed:	83 e1 01             	and    ecx,0x1
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	77 0b                	ja     c0001900 <dlrealloc+0x17b>
c00018f5:	09 f1                	or     ecx,esi
c00018f7:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018fa:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018fe:	eb 59                	jmp    c0001959 <dlrealloc+0x1d4>
c0001900:	01 ef                	add    edi,ebp
c0001902:	83 ca 01             	or     edx,0x1
c0001905:	09 cd                	or     ebp,ecx
c0001907:	83 ec 0c             	sub    esp,0xc
c000190a:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000190d:	83 c7 08             	add    edi,0x8
c0001910:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001913:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001917:	57                   	push   edi
c0001918:	e8 69 f4 ff ff       	call   c0000d86 <dlfree>
c000191d:	83 c4 10             	add    esp,0x10
c0001920:	eb 37                	jmp    c0001959 <dlrealloc+0x1d4>
c0001922:	8d 45 04             	lea    eax,[ebp+0x4]
c0001925:	39 f0                	cmp    eax,esi
c0001927:	76 30                	jbe    c0001959 <dlrealloc+0x1d4>
c0001929:	83 ec 0c             	sub    esp,0xc
c000192c:	83 ed 07             	sub    ebp,0x7
c000192f:	55                   	push   ebp
c0001930:	e8 13 f9 ff ff       	call   c0001248 <dlmalloc>
c0001935:	83 c4 10             	add    esp,0x10
c0001938:	85 c0                	test   eax,eax
c000193a:	89 c5                	mov    ebp,eax
c000193c:	74 19                	je     c0001957 <dlrealloc+0x1d2>
c000193e:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001941:	89 c7                	mov    edi,eax
c0001943:	89 de                	mov    esi,ebx
c0001945:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001947:	83 ec 0c             	sub    esp,0xc
c000194a:	53                   	push   ebx
c000194b:	89 eb                	mov    ebx,ebp
c000194d:	e8 34 f4 ff ff       	call   c0000d86 <dlfree>
c0001952:	83 c4 10             	add    esp,0x10
c0001955:	eb 02                	jmp    c0001959 <dlrealloc+0x1d4>
c0001957:	31 db                	xor    ebx,ebx
c0001959:	83 c4 1c             	add    esp,0x1c
c000195c:	89 d8                	mov    eax,ebx
c000195e:	5b                   	pop    ebx
c000195f:	5e                   	pop    esi
c0001960:	5f                   	pop    edi
c0001961:	5d                   	pop    ebp
c0001962:	c3                   	ret    

c0001963 <dlmemalign>:
c0001963:	55                   	push   ebp
c0001964:	57                   	push   edi
c0001965:	56                   	push   esi
c0001966:	53                   	push   ebx
c0001967:	83 ec 0c             	sub    esp,0xc
c000196a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000196e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001972:	83 fa 08             	cmp    edx,0x8
c0001975:	77 10                	ja     c0001987 <dlmemalign+0x24>
c0001977:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000197b:	83 c4 0c             	add    esp,0xc
c000197e:	5b                   	pop    ebx
c000197f:	5e                   	pop    esi
c0001980:	5f                   	pop    edi
c0001981:	5d                   	pop    ebp
c0001982:	e9 c1 f8 ff ff       	jmp    c0001248 <dlmalloc>
c0001987:	83 fa 0f             	cmp    edx,0xf
c000198a:	bf 10 00 00 00       	mov    edi,0x10
c000198f:	76 13                	jbe    c00019a4 <dlmemalign+0x41>
c0001991:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001994:	85 d1                	test   ecx,edx
c0001996:	75 04                	jne    c000199c <dlmemalign+0x39>
c0001998:	89 d7                	mov    edi,edx
c000199a:	eb 08                	jmp    c00019a4 <dlmemalign+0x41>
c000199c:	39 d7                	cmp    edi,edx
c000199e:	73 04                	jae    c00019a4 <dlmemalign+0x41>
c00019a0:	01 ff                	add    edi,edi
c00019a2:	eb f8                	jmp    c000199c <dlmemalign+0x39>
c00019a4:	83 f8 df             	cmp    eax,0xffffffdf
c00019a7:	76 07                	jbe    c00019b0 <dlmemalign+0x4d>
c00019a9:	31 c0                	xor    eax,eax
c00019ab:	e9 ce 00 00 00       	jmp    c0001a7e <dlmemalign+0x11b>
c00019b0:	83 c0 0b             	add    eax,0xb
c00019b3:	bd 10 00 00 00       	mov    ebp,0x10
c00019b8:	83 f8 0f             	cmp    eax,0xf
c00019bb:	76 05                	jbe    c00019c2 <dlmemalign+0x5f>
c00019bd:	83 e0 f8             	and    eax,0xfffffff8
c00019c0:	89 c5                	mov    ebp,eax
c00019c2:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019c6:	83 ec 0c             	sub    esp,0xc
c00019c9:	50                   	push   eax
c00019ca:	e8 79 f8 ff ff       	call   c0001248 <dlmalloc>
c00019cf:	83 c4 10             	add    esp,0x10
c00019d2:	85 c0                	test   eax,eax
c00019d4:	89 c1                	mov    ecx,eax
c00019d6:	74 d1                	je     c00019a9 <dlmemalign+0x46>
c00019d8:	8d 70 f8             	lea    esi,[eax-0x8]
c00019db:	31 d2                	xor    edx,edx
c00019dd:	f7 f7                	div    edi
c00019df:	85 d2                	test   edx,edx
c00019e1:	74 62                	je     c0001a45 <dlmemalign+0xe2>
c00019e3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019e7:	89 f8                	mov    eax,edi
c00019e9:	f7 d8                	neg    eax
c00019eb:	21 c3                	and    ebx,eax
c00019ed:	83 eb 08             	sub    ebx,0x8
c00019f0:	89 d8                	mov    eax,ebx
c00019f2:	29 f0                	sub    eax,esi
c00019f4:	83 f8 0f             	cmp    eax,0xf
c00019f7:	77 02                	ja     c00019fb <dlmemalign+0x98>
c00019f9:	01 fb                	add    ebx,edi
c00019fb:	89 d8                	mov    eax,ebx
c00019fd:	29 f0                	sub    eax,esi
c00019ff:	89 c6                	mov    esi,eax
c0001a01:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a04:	89 c2                	mov    edx,eax
c0001a06:	83 e2 fc             	and    edx,0xfffffffc
c0001a09:	29 f2                	sub    edx,esi
c0001a0b:	a8 02                	test   al,0x2
c0001a0d:	74 10                	je     c0001a1f <dlmemalign+0xbc>
c0001a0f:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a12:	83 ca 02             	or     edx,0x2
c0001a15:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a18:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a1b:	89 33                	mov    DWORD PTR [ebx],esi
c0001a1d:	eb 5f                	jmp    c0001a7e <dlmemalign+0x11b>
c0001a1f:	89 d0                	mov    eax,edx
c0001a21:	83 ec 0c             	sub    esp,0xc
c0001a24:	83 c8 01             	or     eax,0x1
c0001a27:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a2a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a2f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a32:	83 e0 01             	and    eax,0x1
c0001a35:	09 f0                	or     eax,esi
c0001a37:	89 de                	mov    esi,ebx
c0001a39:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a3c:	51                   	push   ecx
c0001a3d:	e8 44 f3 ff ff       	call   c0000d86 <dlfree>
c0001a42:	83 c4 10             	add    esp,0x10
c0001a45:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a48:	a8 02                	test   al,0x2
c0001a4a:	75 2f                	jne    c0001a7b <dlmemalign+0x118>
c0001a4c:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a4f:	83 e0 fc             	and    eax,0xfffffffc
c0001a52:	39 c2                	cmp    edx,eax
c0001a54:	73 25                	jae    c0001a7b <dlmemalign+0x118>
c0001a56:	29 e8                	sub    eax,ebp
c0001a58:	83 ec 0c             	sub    esp,0xc
c0001a5b:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a5e:	83 c8 01             	or     eax,0x1
c0001a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a64:	83 c2 08             	add    edx,0x8
c0001a67:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a6a:	83 e0 01             	and    eax,0x1
c0001a6d:	09 c5                	or     ebp,eax
c0001a6f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a72:	52                   	push   edx
c0001a73:	e8 0e f3 ff ff       	call   c0000d86 <dlfree>
c0001a78:	83 c4 10             	add    esp,0x10
c0001a7b:	8d 46 08             	lea    eax,[esi+0x8]
c0001a7e:	83 c4 0c             	add    esp,0xc
c0001a81:	5b                   	pop    ebx
c0001a82:	5e                   	pop    esi
c0001a83:	5f                   	pop    edi
c0001a84:	5d                   	pop    ebp
c0001a85:	c3                   	ret    

c0001a86 <dlcalloc>:
c0001a86:	53                   	push   ebx
c0001a87:	83 ec 14             	sub    esp,0x14
c0001a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a8e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a93:	50                   	push   eax
c0001a94:	e8 af f7 ff ff       	call   c0001248 <dlmalloc>
c0001a99:	83 c4 10             	add    esp,0x10
c0001a9c:	85 c0                	test   eax,eax
c0001a9e:	89 c3                	mov    ebx,eax
c0001aa0:	74 6e                	je     c0001b10 <dlcalloc+0x8a>
c0001aa2:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001aa5:	a8 02                	test   al,0x2
c0001aa7:	75 67                	jne    c0001b10 <dlcalloc+0x8a>
c0001aa9:	83 e0 fc             	and    eax,0xfffffffc
c0001aac:	83 e8 04             	sub    eax,0x4
c0001aaf:	83 f8 27             	cmp    eax,0x27
c0001ab2:	76 0f                	jbe    c0001ac3 <dlcalloc+0x3d>
c0001ab4:	52                   	push   edx
c0001ab5:	50                   	push   eax
c0001ab6:	6a 00                	push   0x0
c0001ab8:	53                   	push   ebx
c0001ab9:	e8 32 ea ff ff       	call   c00004f0 <memset>
c0001abe:	83 c4 10             	add    esp,0x10
c0001ac1:	eb 4d                	jmp    c0001b10 <dlcalloc+0x8a>
c0001ac3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ac9:	83 f8 13             	cmp    eax,0x13
c0001acc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ad3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001ada:	76 34                	jbe    c0001b10 <dlcalloc+0x8a>
c0001adc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ae3:	83 f8 1b             	cmp    eax,0x1b
c0001ae6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001aed:	76 21                	jbe    c0001b10 <dlcalloc+0x8a>
c0001aef:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001af6:	83 f8 23             	cmp    eax,0x23
c0001af9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b00:	76 0e                	jbe    c0001b10 <dlcalloc+0x8a>
c0001b02:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b09:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b10:	83 c4 08             	add    esp,0x8
c0001b13:	89 d8                	mov    eax,ebx
c0001b15:	5b                   	pop    ebx
c0001b16:	c3                   	ret    

c0001b17 <dlcfree>:
c0001b17:	e9 6a f2 ff ff       	jmp    c0000d86 <dlfree>

c0001b1c <dlindependent_calloc>:
c0001b1c:	83 ec 28             	sub    esp,0x28
c0001b1f:	b9 03 00 00 00       	mov    ecx,0x3
c0001b24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b34:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b38:	e8 99 fa ff ff       	call   c00015d6 <iALLOc>
c0001b3d:	83 c4 2c             	add    esp,0x2c
c0001b40:	c3                   	ret    

c0001b41 <dlindependent_comalloc>:
c0001b41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b45:	31 c9                	xor    ecx,ecx
c0001b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b4b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b53:	e9 7e fa ff ff       	jmp    c00015d6 <iALLOc>

c0001b58 <dlvalloc>:
c0001b58:	83 ec 0c             	sub    esp,0xc
c0001b5b:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b62:	75 0a                	jne    c0001b6e <dlvalloc+0x16>
c0001b64:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b69:	e8 31 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b6e:	50                   	push   eax
c0001b6f:	50                   	push   eax
c0001b70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b74:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b7a:	e8 e4 fd ff ff       	call   c0001963 <dlmemalign>
c0001b7f:	83 c4 1c             	add    esp,0x1c
c0001b82:	c3                   	ret    

c0001b83 <dlpvalloc>:
c0001b83:	83 ec 0c             	sub    esp,0xc
c0001b86:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b8d:	75 0a                	jne    c0001b99 <dlpvalloc+0x16>
c0001b8f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b94:	e8 06 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b99:	52                   	push   edx
c0001b9a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b9f:	52                   	push   edx
c0001ba0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ba4:	89 c1                	mov    ecx,eax
c0001ba6:	f7 d9                	neg    ecx
c0001ba8:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bac:	21 ca                	and    edx,ecx
c0001bae:	52                   	push   edx
c0001baf:	50                   	push   eax
c0001bb0:	e8 ae fd ff ff       	call   c0001963 <dlmemalign>
c0001bb5:	83 c4 1c             	add    esp,0x1c
c0001bb8:	c3                   	ret    

c0001bb9 <dlmalloc_trim>:
c0001bb9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001bbe:	e8 dc f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001bc3:	31 c0                	xor    eax,eax
c0001bc5:	c3                   	ret    

c0001bc6 <dlmalloc_usable_size>:
c0001bc6:	53                   	push   ebx
c0001bc7:	31 c0                	xor    eax,eax
c0001bc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bcd:	85 c9                	test   ecx,ecx
c0001bcf:	74 24                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bd1:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bd4:	f6 c2 02             	test   dl,0x2
c0001bd7:	74 08                	je     c0001be1 <dlmalloc_usable_size+0x1b>
c0001bd9:	83 e2 fc             	and    edx,0xfffffffc
c0001bdc:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bdf:	eb 14                	jmp    c0001bf5 <dlmalloc_usable_size+0x2f>
c0001be1:	89 d3                	mov    ebx,edx
c0001be3:	31 c0                	xor    eax,eax
c0001be5:	83 e3 fe             	and    ebx,0xfffffffe
c0001be8:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bed:	74 06                	je     c0001bf5 <dlmalloc_usable_size+0x2f>
c0001bef:	83 e2 fc             	and    edx,0xfffffffc
c0001bf2:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bf5:	5b                   	pop    ebx
c0001bf6:	c3                   	ret    

c0001bf7 <dlmallinfo>:
c0001bf7:	55                   	push   ebp
c0001bf8:	57                   	push   edi
c0001bf9:	56                   	push   esi
c0001bfa:	53                   	push   ebx
c0001bfb:	83 ec 08             	sub    esp,0x8
c0001bfe:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001c05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c09:	75 0a                	jne    c0001c15 <dlmallinfo+0x1e>
c0001c0b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001c10:	e8 8a f0 ff ff       	call   c0000c9f <malloc_consolidate>
c0001c15:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001c1a:	31 ed                	xor    ebp,ebp
c0001c1c:	31 c9                	xor    ecx,ecx
c0001c1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c21:	83 e0 fc             	and    eax,0xfffffffc
c0001c24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c31:	85 d2                	test   edx,edx
c0001c33:	74 0e                	je     c0001c43 <dlmallinfo+0x4c>
c0001c35:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c38:	45                   	inc    ebp
c0001c39:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c3c:	83 e6 fc             	and    esi,0xfffffffc
c0001c3f:	01 f1                	add    ecx,esi
c0001c41:	eb ee                	jmp    c0001c31 <dlmallinfo+0x3a>
c0001c43:	40                   	inc    eax
c0001c44:	83 f8 0a             	cmp    eax,0xa
c0001c47:	75 e1                	jne    c0001c2a <dlmallinfo+0x33>
c0001c49:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c54:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c57:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c5c:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c5f:	39 f0                	cmp    eax,esi
c0001c61:	74 10                	je     c0001c73 <dlmallinfo+0x7c>
c0001c63:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c66:	ff 04 24             	inc    DWORD PTR [esp]
c0001c69:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c6c:	83 e7 fc             	and    edi,0xfffffffc
c0001c6f:	01 fa                	add    edx,edi
c0001c71:	eb ec                	jmp    c0001c5f <dlmallinfo+0x68>
c0001c73:	83 c0 08             	add    eax,0x8
c0001c76:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c7b:	75 df                	jne    c0001c5c <dlmallinfo+0x65>
c0001c7d:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c83:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c86:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c8b:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c8e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c91:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c97:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c9d:	89 03                	mov    DWORD PTR [ebx],eax
c0001c9f:	29 d0                	sub    eax,edx
c0001ca1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ca8:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001cab:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cae:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001cb4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cb7:	89 d8                	mov    eax,ebx
c0001cb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cbc:	83 c4 08             	add    esp,0x8
c0001cbf:	5b                   	pop    ebx
c0001cc0:	5e                   	pop    esi
c0001cc1:	5f                   	pop    edi
c0001cc2:	5d                   	pop    ebp
c0001cc3:	c2 04 00             	ret    0x4

c0001cc6 <dlmalloc_stats>:
c0001cc6:	83 ec 30             	sub    esp,0x30
c0001cc9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ccd:	50                   	push   eax
c0001cce:	e8 24 ff ff ff       	call   c0001bf7 <dlmallinfo>
c0001cd3:	83 c4 30             	add    esp,0x30
c0001cd6:	c3                   	ret    

c0001cd7 <dlmallopt>:
c0001cd7:	56                   	push   esi
c0001cd8:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cdd:	53                   	push   ebx
c0001cde:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001ce6:	e8 b4 ef ff ff       	call   c0000c9f <malloc_consolidate>
c0001ceb:	8d 46 04             	lea    eax,[esi+0x4]
c0001cee:	83 f8 05             	cmp    eax,0x5
c0001cf1:	77 5d                	ja     c0001d50 <dlmallopt+0x79>
c0001cf3:	ff 24 85 64 08 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf79c]
c0001cfa:	83 fb 50             	cmp    ebx,0x50
c0001cfd:	77 51                	ja     c0001d50 <dlmallopt+0x79>
c0001cff:	85 db                	test   ebx,ebx
c0001d01:	ba 08 00 00 00       	mov    edx,0x8
c0001d06:	74 12                	je     c0001d1a <dlmallopt+0x43>
c0001d08:	83 c3 0b             	add    ebx,0xb
c0001d0b:	ba 10 00 00 00       	mov    edx,0x10
c0001d10:	83 fb 0f             	cmp    ebx,0xf
c0001d13:	76 05                	jbe    c0001d1a <dlmallopt+0x43>
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	83 e2 f8             	and    edx,0xfffffff8
c0001d1a:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001d1f:	83 e0 03             	and    eax,0x3
c0001d22:	09 d0                	or     eax,edx
c0001d24:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001d29:	eb 27                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d2b:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d31:	eb 16                	jmp    c0001d49 <dlmallopt+0x72>
c0001d33:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d39:	eb 0e                	jmp    c0001d49 <dlmallopt+0x72>
c0001d3b:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d41:	eb 06                	jmp    c0001d49 <dlmallopt+0x72>
c0001d43:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d49:	be 01 00 00 00       	mov    esi,0x1
c0001d4e:	eb 02                	jmp    c0001d52 <dlmallopt+0x7b>
c0001d50:	31 f6                	xor    esi,esi
c0001d52:	5b                   	pop    ebx
c0001d53:	89 f0                	mov    eax,esi
c0001d55:	5e                   	pop    esi
c0001d56:	c3                   	ret    
c0001d57:	90                   	nop

c0001d58 <isblank>:
c0001d58:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5d:	74 09                	je     c0001d68 <isblank+0x10>
c0001d5f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d64:	75 0a                	jne    c0001d70 <isblank+0x18>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <iscntrl>:
c0001d78:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d7d:	7e 09                	jle    c0001d88 <iscntrl+0x10>
c0001d7f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d84:	75 0a                	jne    c0001d90 <iscntrl+0x18>
c0001d86:	66 90                	xchg   ax,ax
c0001d88:	b8 01 00 00 00       	mov    eax,0x1
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax
c0001d90:	b8 00 00 00 00       	mov    eax,0x0
c0001d95:	c3                   	ret    
c0001d96:	66 90                	xchg   ax,ax

c0001d98 <isdigit>:
c0001d98:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d9d:	7e 0d                	jle    c0001dac <isdigit+0x14>
c0001d9f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001da4:	7f 06                	jg     c0001dac <isdigit+0x14>
c0001da6:	b8 01 00 00 00       	mov    eax,0x1
c0001dab:	c3                   	ret    
c0001dac:	b8 00 00 00 00       	mov    eax,0x0
c0001db1:	c3                   	ret    
c0001db2:	66 90                	xchg   ax,ax

c0001db4 <islower>:
c0001db4:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001db9:	7e 0d                	jle    c0001dc8 <islower+0x14>
c0001dbb:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dc0:	7f 06                	jg     c0001dc8 <islower+0x14>
c0001dc2:	b8 01 00 00 00       	mov    eax,0x1
c0001dc7:	c3                   	ret    
c0001dc8:	b8 00 00 00 00       	mov    eax,0x0
c0001dcd:	c3                   	ret    
c0001dce:	66 90                	xchg   ax,ax

c0001dd0 <isspace>:
c0001dd0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001dd5:	7c 19                	jl     c0001df0 <isspace+0x20>
c0001dd7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001ddc:	7e 0a                	jle    c0001de8 <isspace+0x18>
c0001dde:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001de3:	75 0b                	jne    c0001df0 <isspace+0x20>
c0001de5:	8d 76 00             	lea    esi,[esi+0x0]
c0001de8:	b8 01 00 00 00       	mov    eax,0x1
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax
c0001df0:	b8 00 00 00 00       	mov    eax,0x0
c0001df5:	c3                   	ret    
c0001df6:	66 90                	xchg   ax,ax

c0001df8 <isupper>:
c0001df8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dfd:	7e 0d                	jle    c0001e0c <isupper+0x14>
c0001dff:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e04:	7f 06                	jg     c0001e0c <isupper+0x14>
c0001e06:	b8 01 00 00 00       	mov    eax,0x1
c0001e0b:	c3                   	ret    
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalpha>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 db ff ff ff       	call   c0001df8 <isupper>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalpha+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 87 ff ff ff       	call   c0001db4 <islower>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalpha+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <isalnum>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalpha>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 10                	jne    c0001e64 <isalnum+0x20>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 3b ff ff ff       	call   c0001d98 <isdigit>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	74 08                	je     c0001e6c <isalnum+0x28>
c0001e64:	b8 01 00 00 00       	mov    eax,0x1
c0001e69:	c3                   	ret    
c0001e6a:	66 90                	xchg   ax,ax
c0001e6c:	b8 00 00 00 00       	mov    eax,0x0
c0001e71:	c3                   	ret    
c0001e72:	66 90                	xchg   ax,ax

c0001e74 <ispunct>:
c0001e74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e78:	e8 c7 ff ff ff       	call   c0001e44 <isalnum>
c0001e7d:	83 c4 04             	add    esp,0x4
c0001e80:	85 c0                	test   eax,eax
c0001e82:	75 28                	jne    c0001eac <ispunct+0x38>
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 43 ff ff ff       	call   c0001dd0 <isspace>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 18                	jne    c0001eac <ispunct+0x38>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 db fe ff ff       	call   c0001d78 <iscntrl>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	75 08                	jne    c0001eac <ispunct+0x38>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isgraph>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 87 ff ff ff       	call   c0001e44 <isalnum>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 10                	jne    c0001ed4 <isgraph+0x20>
c0001ec4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec8:	e8 a7 ff ff ff       	call   c0001e74 <ispunct>
c0001ecd:	83 c4 04             	add    esp,0x4
c0001ed0:	85 c0                	test   eax,eax
c0001ed2:	74 08                	je     c0001edc <isgraph+0x28>
c0001ed4:	b8 01 00 00 00       	mov    eax,0x1
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax
c0001edc:	b8 00 00 00 00       	mov    eax,0x0
c0001ee1:	c3                   	ret    
c0001ee2:	66 90                	xchg   ax,ax

c0001ee4 <isprint>:
c0001ee4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee8:	e8 c7 ff ff ff       	call   c0001eb4 <isgraph>
c0001eed:	83 c4 04             	add    esp,0x4
c0001ef0:	85 c0                	test   eax,eax
c0001ef2:	75 08                	jne    c0001efc <isprint+0x18>
c0001ef4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ef9:	75 09                	jne    c0001f04 <isprint+0x20>
c0001efb:	90                   	nop
c0001efc:	b8 01 00 00 00       	mov    eax,0x1
c0001f01:	c3                   	ret    
c0001f02:	66 90                	xchg   ax,ax
c0001f04:	b8 00 00 00 00       	mov    eax,0x0
c0001f09:	c3                   	ret    
c0001f0a:	66 90                	xchg   ax,ax

c0001f0c <isxdigit>:
c0001f0c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f10:	e8 83 fe ff ff       	call   c0001d98 <isdigit>
c0001f15:	83 c4 04             	add    esp,0x4
c0001f18:	85 c0                	test   eax,eax
c0001f1a:	75 20                	jne    c0001f3c <isxdigit+0x30>
c0001f1c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f21:	7e 09                	jle    c0001f2c <isxdigit+0x20>
c0001f23:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f28:	7e 12                	jle    c0001f3c <isxdigit+0x30>
c0001f2a:	66 90                	xchg   ax,ax
c0001f2c:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f31:	7e 11                	jle    c0001f44 <isxdigit+0x38>
c0001f33:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f38:	7f 0a                	jg     c0001f44 <isxdigit+0x38>
c0001f3a:	66 90                	xchg   ax,ax
c0001f3c:	b8 01 00 00 00       	mov    eax,0x1
c0001f41:	c3                   	ret    
c0001f42:	66 90                	xchg   ax,ax
c0001f44:	b8 00 00 00 00       	mov    eax,0x0
c0001f49:	c3                   	ret    
c0001f4a:	66 90                	xchg   ax,ax

c0001f4c <LWIP_PLATFORM_HTONS>:
c0001f4c:	83 ec 04             	sub    esp,0x4
c0001f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f53:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f57:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f5b:	c1 e8 08             	shr    eax,0x8
c0001f5e:	89 c2                	mov    edx,eax
c0001f60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f64:	c1 e0 08             	shl    eax,0x8
c0001f67:	09 d0                	or     eax,edx
c0001f69:	83 c4 04             	add    esp,0x4
c0001f6c:	c3                   	ret    
c0001f6d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f70 <LWIP_PLATFORM_HTONL>:
c0001f70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f74:	c1 e8 18             	shr    eax,0x18
c0001f77:	89 c2                	mov    edx,eax
c0001f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f7d:	c1 e8 08             	shr    eax,0x8
c0001f80:	25 00 ff 00 00       	and    eax,0xff00
c0001f85:	09 c2                	or     edx,eax
c0001f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f8b:	c1 e0 08             	shl    eax,0x8
c0001f8e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f93:	09 c2                	or     edx,eax
c0001f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f99:	c1 e0 18             	shl    eax,0x18
c0001f9c:	09 d0                	or     eax,edx
c0001f9e:	c3                   	ret    

c0001f9f <disk_status>:
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <disk_initialize>:
c0001fa2:	31 c0                	xor    eax,eax
c0001fa4:	c3                   	ret    

c0001fa5 <disk_read>:
c0001fa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faa:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fb6:	e9 e9 81 01 00       	jmp    c001a1a4 <fatWrapperReadDisk>

c0001fbb <disk_write>:
c0001fbb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fc0:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fcc:	e9 13 82 01 00       	jmp    c001a1e4 <fatWrapperWriteDisk>

c0001fd1 <disk_ioctl>:
c0001fd1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fdf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001feb:	e9 34 82 01 00       	jmp    c001a224 <fatWrapperIoctl>

c0001ff0 <ld_word>:
c0001ff0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ff4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff7:	c1 e2 08             	shl    edx,0x8
c0001ffa:	09 d0                	or     eax,edx
c0001ffc:	c3                   	ret    

c0001ffd <ld_dword>:
c0001ffd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0002001:	89 d1                	mov    ecx,edx
c0002003:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0002007:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000200a:	c1 e1 08             	shl    ecx,0x8
c000200d:	09 ca                	or     edx,ecx
c000200f:	c1 e2 08             	shl    edx,0x8
c0002012:	09 d0                	or     eax,edx
c0002014:	c3                   	ret    

c0002015 <st_word>:
c0002015:	66 89 10             	mov    WORD PTR [eax],dx
c0002018:	c3                   	ret    

c0002019 <st_dword>:
c0002019:	89 10                	mov    DWORD PTR [eax],edx
c000201b:	c3                   	ret    

c000201c <mem_cpy>:
c000201c:	85 c9                	test   ecx,ecx
c000201e:	74 10                	je     c0002030 <mem_cpy+0x14>
c0002020:	57                   	push   edi
c0002021:	01 c1                	add    ecx,eax
c0002023:	56                   	push   esi
c0002024:	89 c7                	mov    edi,eax
c0002026:	89 d6                	mov    esi,edx
c0002028:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002029:	39 f9                	cmp    ecx,edi
c000202b:	75 fb                	jne    c0002028 <mem_cpy+0xc>
c000202d:	5e                   	pop    esi
c000202e:	5f                   	pop    edi
c000202f:	c3                   	ret    
c0002030:	c3                   	ret    

c0002031 <mem_set>:
c0002031:	01 c1                	add    ecx,eax
c0002033:	88 10                	mov    BYTE PTR [eax],dl
c0002035:	40                   	inc    eax
c0002036:	39 c8                	cmp    eax,ecx
c0002038:	75 f9                	jne    c0002033 <mem_set+0x2>
c000203a:	c3                   	ret    

c000203b <mem_cmp>:
c000203b:	57                   	push   edi
c000203c:	56                   	push   esi
c000203d:	89 c6                	mov    esi,eax
c000203f:	53                   	push   ebx
c0002040:	46                   	inc    esi
c0002041:	42                   	inc    edx
c0002042:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0002046:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c000204a:	29 fb                	sub    ebx,edi
c000204c:	89 cf                	mov    edi,ecx
c000204e:	29 f7                	sub    edi,esi
c0002050:	01 c7                	add    edi,eax
c0002052:	74 04                	je     c0002058 <mem_cmp+0x1d>
c0002054:	85 db                	test   ebx,ebx
c0002056:	74 e8                	je     c0002040 <mem_cmp+0x5>
c0002058:	89 d8                	mov    eax,ebx
c000205a:	5b                   	pop    ebx
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	c3                   	ret    

c000205e <chk_chr>:
c000205e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002061:	85 c9                	test   ecx,ecx
c0002063:	74 07                	je     c000206c <chk_chr+0xe>
c0002065:	39 d1                	cmp    ecx,edx
c0002067:	74 03                	je     c000206c <chk_chr+0xe>
c0002069:	40                   	inc    eax
c000206a:	eb f2                	jmp    c000205e <chk_chr>
c000206c:	89 c8                	mov    eax,ecx
c000206e:	c3                   	ret    

c000206f <dbc_1st>:
c000206f:	31 c0                	xor    eax,eax
c0002071:	c3                   	ret    

c0002072 <dbc_2nd>:
c0002072:	31 c0                	xor    eax,eax
c0002074:	c3                   	ret    

c0002075 <tchar2uni>:
c0002075:	57                   	push   edi
c0002076:	56                   	push   esi
c0002077:	53                   	push   ebx
c0002078:	8b 18                	mov    ebx,DWORD PTR [eax]
c000207a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000207c:	8d 73 01             	lea    esi,[ebx+0x1]
c000207f:	f6 c1 80             	test   cl,0x80
c0002082:	75 0a                	jne    c000208e <tchar2uni+0x19>
c0002084:	0f b6 d1             	movzx  edx,cl
c0002087:	89 f3                	mov    ebx,esi
c0002089:	e9 b2 00 00 00       	jmp    c0002140 <tchar2uni+0xcb>
c000208e:	89 ca                	mov    edx,ecx
c0002090:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002096:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000209c:	89 ca                	mov    edx,ecx
c000209e:	75 0a                	jne    c00020aa <tchar2uni+0x35>
c00020a0:	83 e2 1f             	and    edx,0x1f
c00020a3:	b9 01 00 00 00       	mov    ecx,0x1
c00020a8:	eb 37                	jmp    c00020e1 <tchar2uni+0x6c>
c00020aa:	81 e2 f0 00 00 00    	and    edx,0xf0
c00020b0:	81 fa e0 00 00 00    	cmp    edx,0xe0
c00020b6:	75 0c                	jne    c00020c4 <tchar2uni+0x4f>
c00020b8:	89 ca                	mov    edx,ecx
c00020ba:	b9 02 00 00 00       	mov    ecx,0x2
c00020bf:	83 e2 0f             	and    edx,0xf
c00020c2:	eb 1d                	jmp    c00020e1 <tchar2uni+0x6c>
c00020c4:	89 cf                	mov    edi,ecx
c00020c6:	83 ca ff             	or     edx,0xffffffff
c00020c9:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020cf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020d5:	75 70                	jne    c0002147 <tchar2uni+0xd2>
c00020d7:	89 ca                	mov    edx,ecx
c00020d9:	b9 03 00 00 00       	mov    ecx,0x3
c00020de:	83 e2 07             	and    edx,0x7
c00020e1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020e5:	46                   	inc    esi
c00020e6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020e9:	89 cf                	mov    edi,ecx
c00020eb:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020f1:	83 c7 80             	add    edi,0xffffff80
c00020f4:	75 4e                	jne    c0002144 <tchar2uni+0xcf>
c00020f6:	c1 e2 06             	shl    edx,0x6
c00020f9:	83 e1 3f             	and    ecx,0x3f
c00020fc:	09 ca                	or     edx,ecx
c00020fe:	39 de                	cmp    esi,ebx
c0002100:	75 e3                	jne    c00020e5 <tchar2uni+0x70>
c0002102:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0002108:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000210e:	76 34                	jbe    c0002144 <tchar2uni+0xcf>
c0002110:	8d 4a 80             	lea    ecx,[edx-0x80]
c0002113:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002119:	77 29                	ja     c0002144 <tchar2uni+0xcf>
c000211b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002121:	76 1d                	jbe    c0002140 <tchar2uni+0xcb>
c0002123:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002129:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000212f:	c1 e1 06             	shl    ecx,0x6
c0002132:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002138:	09 ca                	or     edx,ecx
c000213a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002140:	89 18                	mov    DWORD PTR [eax],ebx
c0002142:	eb 03                	jmp    c0002147 <tchar2uni+0xd2>
c0002144:	83 ca ff             	or     edx,0xffffffff
c0002147:	5b                   	pop    ebx
c0002148:	89 d0                	mov    eax,edx
c000214a:	5e                   	pop    esi
c000214b:	5f                   	pop    edi
c000214c:	c3                   	ret    

c000214d <put_utf>:
c000214d:	53                   	push   ebx
c000214e:	83 f8 7f             	cmp    eax,0x7f
c0002151:	89 c3                	mov    ebx,eax
c0002153:	b0 00                	mov    al,0x0
c0002155:	77 11                	ja     c0002168 <put_utf+0x1b>
c0002157:	85 c9                	test   ecx,ecx
c0002159:	0f 84 e5 00 00 00    	je     c0002244 <put_utf+0xf7>
c000215f:	88 1a                	mov    BYTE PTR [edx],bl
c0002161:	b0 01                	mov    al,0x1
c0002163:	e9 dc 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002168:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000216e:	77 23                	ja     c0002193 <put_utf+0x46>
c0002170:	83 f9 01             	cmp    ecx,0x1
c0002173:	0f 86 cb 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c0002179:	89 d8                	mov    eax,ebx
c000217b:	83 e3 3f             	and    ebx,0x3f
c000217e:	c1 e8 06             	shr    eax,0x6
c0002181:	83 cb 80             	or     ebx,0xffffff80
c0002184:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0002187:	83 c8 c0             	or     eax,0xffffffc0
c000218a:	88 02                	mov    BYTE PTR [edx],al
c000218c:	b0 02                	mov    al,0x2
c000218e:	e9 b1 00 00 00       	jmp    c0002244 <put_utf+0xf7>
c0002193:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002199:	77 40                	ja     c00021db <put_utf+0x8e>
c000219b:	83 f9 02             	cmp    ecx,0x2
c000219e:	0f 86 a0 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021a4:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00021aa:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00021b0:	0f 86 8e 00 00 00    	jbe    c0002244 <put_utf+0xf7>
c00021b6:	89 d8                	mov    eax,ebx
c00021b8:	c1 e8 0c             	shr    eax,0xc
c00021bb:	83 c8 e0             	or     eax,0xffffffe0
c00021be:	88 02                	mov    BYTE PTR [edx],al
c00021c0:	89 d8                	mov    eax,ebx
c00021c2:	83 e3 3f             	and    ebx,0x3f
c00021c5:	c1 e8 06             	shr    eax,0x6
c00021c8:	83 cb 80             	or     ebx,0xffffff80
c00021cb:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021ce:	83 e0 3f             	and    eax,0x3f
c00021d1:	83 c8 80             	or     eax,0xffffff80
c00021d4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021d7:	b0 03                	mov    al,0x3
c00021d9:	eb 69                	jmp    c0002244 <put_utf+0xf7>
c00021db:	83 f9 03             	cmp    ecx,0x3
c00021de:	76 64                	jbe    c0002244 <put_utf+0xf7>
c00021e0:	89 d9                	mov    ecx,ebx
c00021e2:	0f b7 c3             	movzx  eax,bx
c00021e5:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021eb:	66 31 c9             	xor    cx,cx
c00021ee:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021f4:	c1 e9 06             	shr    ecx,0x6
c00021f7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021fd:	77 43                	ja     c0002242 <put_utf+0xf5>
c00021ff:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002205:	77 3b                	ja     c0002242 <put_utf+0xf5>
c0002207:	09 cb                	or     ebx,ecx
c0002209:	81 c3 00 00 01 00    	add    ebx,0x10000
c000220f:	89 d8                	mov    eax,ebx
c0002211:	c1 e8 12             	shr    eax,0x12
c0002214:	83 c8 f0             	or     eax,0xfffffff0
c0002217:	88 02                	mov    BYTE PTR [edx],al
c0002219:	89 d8                	mov    eax,ebx
c000221b:	c1 e8 0c             	shr    eax,0xc
c000221e:	83 e0 3f             	and    eax,0x3f
c0002221:	83 c8 80             	or     eax,0xffffff80
c0002224:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002227:	89 d8                	mov    eax,ebx
c0002229:	83 e3 3f             	and    ebx,0x3f
c000222c:	c1 e8 06             	shr    eax,0x6
c000222f:	83 cb 80             	or     ebx,0xffffff80
c0002232:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002235:	83 e0 3f             	and    eax,0x3f
c0002238:	83 c8 80             	or     eax,0xffffff80
c000223b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000223e:	b0 04                	mov    al,0x4
c0002240:	eb 02                	jmp    c0002244 <put_utf+0xf7>
c0002242:	31 c0                	xor    eax,eax
c0002244:	5b                   	pop    ebx
c0002245:	c3                   	ret    

c0002246 <clst2sect>:
c0002246:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002249:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000224c:	83 ea 02             	sub    edx,0x2
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	76 0d                	jbe    c0002260 <clst2sect+0x1a>
c0002253:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002257:	0f af d1             	imul   edx,ecx
c000225a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000225d:	89 d0                	mov    eax,edx
c000225f:	c3                   	ret    
c0002260:	31 c0                	xor    eax,eax
c0002262:	c3                   	ret    

c0002263 <pick_lfn>:
c0002263:	55                   	push   ebp
c0002264:	57                   	push   edi
c0002265:	89 c7                	mov    edi,eax
c0002267:	56                   	push   esi
c0002268:	53                   	push   ebx
c0002269:	89 d3                	mov    ebx,edx
c000226b:	8d 42 1a             	lea    eax,[edx+0x1a]
c000226e:	e8 7d fd ff ff       	call   c0001ff0 <ld_word>
c0002273:	66 85 c0             	test   ax,ax
c0002276:	74 04                	je     c000227c <pick_lfn+0x19>
c0002278:	31 c0                	xor    eax,eax
c000227a:	eb 62                	jmp    c00022de <pick_lfn+0x7b>
c000227c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000227f:	bd 01 00 00 00       	mov    ebp,0x1
c0002284:	31 f6                	xor    esi,esi
c0002286:	83 e1 bf             	and    ecx,0xffffffbf
c0002289:	49                   	dec    ecx
c000228a:	6b c9 0d             	imul   ecx,ecx,0xd
c000228d:	0f b6 86 c0 09 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf640]
c0002294:	01 d8                	add    eax,ebx
c0002296:	e8 55 fd ff ff       	call   c0001ff0 <ld_word>
c000229b:	66 85 ed             	test   bp,bp
c000229e:	74 11                	je     c00022b1 <pick_lfn+0x4e>
c00022a0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a6:	77 d0                	ja     c0002278 <pick_lfn+0x15>
c00022a8:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00022ac:	89 c5                	mov    ebp,eax
c00022ae:	41                   	inc    ecx
c00022af:	eb 0a                	jmp    c00022bb <pick_lfn+0x58>
c00022b1:	0f b7 c0             	movzx  eax,ax
c00022b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00022b9:	75 bd                	jne    c0002278 <pick_lfn+0x15>
c00022bb:	46                   	inc    esi
c00022bc:	83 fe 0d             	cmp    esi,0xd
c00022bf:	75 cc                	jne    c000228d <pick_lfn+0x2a>
c00022c1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00022c4:	74 13                	je     c00022d9 <pick_lfn+0x76>
c00022c6:	66 85 ed             	test   bp,bp
c00022c9:	74 0e                	je     c00022d9 <pick_lfn+0x76>
c00022cb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022d1:	77 a5                	ja     c0002278 <pick_lfn+0x15>
c00022d3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022d9:	b8 01 00 00 00       	mov    eax,0x1
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	5f                   	pop    edi
c00022e1:	5d                   	pop    ebp
c00022e2:	c3                   	ret    

c00022e3 <put_lfn>:
c00022e3:	55                   	push   ebp
c00022e4:	57                   	push   edi
c00022e5:	89 d7                	mov    edi,edx
c00022e7:	56                   	push   esi
c00022e8:	31 f6                	xor    esi,esi
c00022ea:	53                   	push   ebx
c00022eb:	83 ec 0c             	sub    esp,0xc
c00022ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022f6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022fc:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002300:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002303:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002306:	31 d2                	xor    edx,edx
c0002308:	e8 08 fd ff ff       	call   c0002015 <st_word>
c000230d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002314:	0f b6 d9             	movzx  ebx,cl
c0002317:	4b                   	dec    ebx
c0002318:	6b db 0d             	imul   ebx,ebx,0xd
c000231b:	0f b7 c6             	movzx  eax,si
c000231e:	3d ff ff 00 00       	cmp    eax,0xffff
c0002323:	74 09                	je     c000232e <put_lfn+0x4b>
c0002325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002329:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000232d:	43                   	inc    ebx
c000232e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002331:	0f b7 ee             	movzx  ebp,si
c0002334:	89 ea                	mov    edx,ebp
c0002336:	0f b6 80 c0 09 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf640]
c000233d:	01 f8                	add    eax,edi
c000233f:	e8 d1 fc ff ff       	call   c0002015 <st_word>
c0002344:	85 ed                	test   ebp,ebp
c0002346:	75 05                	jne    c000234d <put_lfn+0x6a>
c0002348:	be ff ff 00 00       	mov    esi,0xffff
c000234d:	ff 04 24             	inc    DWORD PTR [esp]
c0002350:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002354:	75 c5                	jne    c000231b <put_lfn+0x38>
c0002356:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000235c:	74 0b                	je     c0002369 <put_lfn+0x86>
c000235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002362:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002367:	75 07                	jne    c0002370 <put_lfn+0x8d>
c0002369:	83 c9 40             	or     ecx,0x40
c000236c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002370:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002374:	88 07                	mov    BYTE PTR [edi],al
c0002376:	83 c4 0c             	add    esp,0xc
c0002379:	5b                   	pop    ebx
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <gen_numname>:
c000237e:	57                   	push   edi
c000237f:	89 cf                	mov    edi,ecx
c0002381:	56                   	push   esi
c0002382:	b9 0b 00 00 00       	mov    ecx,0xb
c0002387:	53                   	push   ebx
c0002388:	89 c6                	mov    esi,eax
c000238a:	83 ec 10             	sub    esp,0x10
c000238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002391:	e8 86 fc ff ff       	call   c000201c <mem_cpy>
c0002396:	83 fb 05             	cmp    ebx,0x5
c0002399:	76 30                	jbe    c00023cb <gen_numname+0x4d>
c000239b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000239e:	66 85 c0             	test   ax,ax
c00023a1:	74 28                	je     c00023cb <gen_numname+0x4d>
c00023a3:	83 c7 02             	add    edi,0x2
c00023a6:	ba 10 00 00 00       	mov    edx,0x10
c00023ab:	89 c1                	mov    ecx,eax
c00023ad:	01 db                	add    ebx,ebx
c00023af:	c1 e0 10             	shl    eax,0x10
c00023b2:	83 e1 01             	and    ecx,0x1
c00023b5:	c1 e8 11             	shr    eax,0x11
c00023b8:	01 cb                	add    ebx,ecx
c00023ba:	0f ba e3 10          	bt     ebx,0x10
c00023be:	73 06                	jae    c00023c6 <gen_numname+0x48>
c00023c0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00023c6:	4a                   	dec    edx
c00023c7:	75 e2                	jne    c00023ab <gen_numname+0x2d>
c00023c9:	eb d0                	jmp    c000239b <gen_numname+0x1d>
c00023cb:	b8 07 00 00 00       	mov    eax,0x7
c00023d0:	89 d9                	mov    ecx,ebx
c00023d2:	83 e1 0f             	and    ecx,0xf
c00023d5:	8d 79 30             	lea    edi,[ecx+0x30]
c00023d8:	83 ff 39             	cmp    edi,0x39
c00023db:	89 fa                	mov    edx,edi
c00023dd:	76 03                	jbe    c00023e2 <gen_numname+0x64>
c00023df:	8d 51 37             	lea    edx,[ecx+0x37]
c00023e2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023e5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023e9:	89 da                	mov    edx,ebx
c00023eb:	c1 ea 04             	shr    edx,0x4
c00023ee:	83 fb 0f             	cmp    ebx,0xf
c00023f1:	76 06                	jbe    c00023f9 <gen_numname+0x7b>
c00023f3:	89 c8                	mov    eax,ecx
c00023f5:	89 d3                	mov    ebx,edx
c00023f7:	eb d7                	jmp    c00023d0 <gen_numname+0x52>
c00023f9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023fe:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002401:	31 d2                	xor    edx,edx
c0002403:	8d 04 16             	lea    eax,[esi+edx*1]
c0002406:	39 ca                	cmp    edx,ecx
c0002408:	73 19                	jae    c0002423 <gen_numname+0xa5>
c000240a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000240d:	83 f8 20             	cmp    eax,0x20
c0002410:	74 11                	je     c0002423 <gen_numname+0xa5>
c0002412:	e8 58 fc ff ff       	call   c000206f <dbc_1st>
c0002417:	85 c0                	test   eax,eax
c0002419:	74 05                	je     c0002420 <gen_numname+0xa2>
c000241b:	39 d3                	cmp    ebx,edx
c000241d:	74 04                	je     c0002423 <gen_numname+0xa5>
c000241f:	42                   	inc    edx
c0002420:	42                   	inc    edx
c0002421:	eb e0                	jmp    c0002403 <gen_numname+0x85>
c0002423:	83 f9 07             	cmp    ecx,0x7
c0002426:	b0 20                	mov    al,0x20
c0002428:	77 05                	ja     c000242f <gen_numname+0xb1>
c000242a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000242e:	41                   	inc    ecx
c000242f:	42                   	inc    edx
c0002430:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002434:	83 fa 07             	cmp    edx,0x7
c0002437:	76 ea                	jbe    c0002423 <gen_numname+0xa5>
c0002439:	83 c4 10             	add    esp,0x10
c000243c:	5b                   	pop    ebx
c000243d:	5e                   	pop    esi
c000243e:	5f                   	pop    edi
c000243f:	c3                   	ret    

c0002440 <sum_sfn>:
c0002440:	53                   	push   ebx
c0002441:	31 c9                	xor    ecx,ecx
c0002443:	31 db                	xor    ebx,ebx
c0002445:	0f b6 d1             	movzx  edx,cl
c0002448:	d1 ea                	shr    edx,1
c000244a:	c1 e1 07             	shl    ecx,0x7
c000244d:	09 ca                	or     edx,ecx
c000244f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002452:	43                   	inc    ebx
c0002453:	01 ca                	add    edx,ecx
c0002455:	83 fb 0b             	cmp    ebx,0xb
c0002458:	88 d1                	mov    cl,dl
c000245a:	75 e9                	jne    c0002445 <sum_sfn+0x5>
c000245c:	5b                   	pop    ebx
c000245d:	88 d0                	mov    al,dl
c000245f:	c3                   	ret    

c0002460 <get_ldnumber>:
c0002460:	55                   	push   ebp
c0002461:	57                   	push   edi
c0002462:	56                   	push   esi
c0002463:	83 ce ff             	or     esi,0xffffffff
c0002466:	53                   	push   ebx
c0002467:	8b 10                	mov    edx,DWORD PTR [eax]
c0002469:	85 d2                	test   edx,edx
c000246b:	74 38                	je     c00024a5 <get_ldnumber+0x45>
c000246d:	89 c5                	mov    ebp,eax
c000246f:	89 d1                	mov    ecx,edx
c0002471:	41                   	inc    ecx
c0002472:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002476:	80 fb 1f             	cmp    bl,0x1f
c0002479:	76 05                	jbe    c0002480 <get_ldnumber+0x20>
c000247b:	83 fb 3a             	cmp    ebx,0x3a
c000247e:	75 f1                	jne    c0002471 <get_ldnumber+0x11>
c0002480:	31 f6                	xor    esi,esi
c0002482:	83 fb 3a             	cmp    ebx,0x3a
c0002485:	75 1e                	jne    c00024a5 <get_ldnumber+0x45>
c0002487:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002489:	83 ce ff             	or     esi,0xffffffff
c000248c:	8d 7b d0             	lea    edi,[ebx-0x30]
c000248f:	89 f8                	mov    eax,edi
c0002491:	3c 09                	cmp    al,0x9
c0002493:	77 10                	ja     c00024a5 <get_ldnumber+0x45>
c0002495:	83 c2 02             	add    edx,0x2
c0002498:	39 d1                	cmp    ecx,edx
c000249a:	75 09                	jne    c00024a5 <get_ldnumber+0x45>
c000249c:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000249f:	0f be f3             	movsx  esi,bl
c00024a2:	83 ee 30             	sub    esi,0x30
c00024a5:	5b                   	pop    ebx
c00024a6:	89 f0                	mov    eax,esi
c00024a8:	5e                   	pop    esi
c00024a9:	5f                   	pop    edi
c00024aa:	5d                   	pop    ebp
c00024ab:	c3                   	ret    

c00024ac <validate>:
c00024ac:	56                   	push   esi
c00024ad:	85 c0                	test   eax,eax
c00024af:	53                   	push   ebx
c00024b0:	89 d6                	mov    esi,edx
c00024b2:	51                   	push   ecx
c00024b3:	75 09                	jne    c00024be <validate+0x12>
c00024b5:	b8 09 00 00 00       	mov    eax,0x9
c00024ba:	31 c9                	xor    ecx,ecx
c00024bc:	eb 2e                	jmp    c00024ec <validate+0x40>
c00024be:	89 c3                	mov    ebx,eax
c00024c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00024c2:	85 c0                	test   eax,eax
c00024c4:	74 ef                	je     c00024b5 <validate+0x9>
c00024c6:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024c9:	74 ea                	je     c00024b5 <validate+0x9>
c00024cb:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024ce:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024d2:	75 e1                	jne    c00024b5 <validate+0x9>
c00024d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	50                   	push   eax
c00024dc:	e8 be fa ff ff       	call   c0001f9f <disk_status>
c00024e1:	83 c4 10             	add    esp,0x10
c00024e4:	a8 01                	test   al,0x1
c00024e6:	75 cd                	jne    c00024b5 <validate+0x9>
c00024e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024ea:	31 c0                	xor    eax,eax
c00024ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00024ee:	5a                   	pop    edx
c00024ef:	5b                   	pop    ebx
c00024f0:	5e                   	pop    esi
c00024f1:	c3                   	ret    

c00024f2 <sync_window>:
c00024f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024f6:	74 58                	je     c0002550 <sync_window+0x5e>
c00024f8:	56                   	push   esi
c00024f9:	53                   	push   ebx
c00024fa:	89 c3                	mov    ebx,eax
c00024fc:	51                   	push   ecx
c00024fd:	6a 01                	push   0x1
c00024ff:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002502:	8d 70 34             	lea    esi,[eax+0x34]
c0002505:	56                   	push   esi
c0002506:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000250a:	50                   	push   eax
c000250b:	e8 ab fa ff ff       	call   c0001fbb <disk_write>
c0002510:	83 c4 10             	add    esp,0x10
c0002513:	ba 01 00 00 00       	mov    edx,0x1
c0002518:	85 c0                	test   eax,eax
c000251a:	75 2e                	jne    c000254a <sync_window+0x58>
c000251c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002520:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002523:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002526:	89 c1                	mov    ecx,eax
c0002528:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000252b:	39 d1                	cmp    ecx,edx
c000252d:	73 19                	jae    c0002548 <sync_window+0x56>
c000252f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002533:	75 13                	jne    c0002548 <sync_window+0x56>
c0002535:	6a 01                	push   0x1
c0002537:	01 d0                	add    eax,edx
c0002539:	50                   	push   eax
c000253a:	56                   	push   esi
c000253b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000253f:	50                   	push   eax
c0002540:	e8 76 fa ff ff       	call   c0001fbb <disk_write>
c0002545:	83 c4 10             	add    esp,0x10
c0002548:	31 d2                	xor    edx,edx
c000254a:	89 d0                	mov    eax,edx
c000254c:	5a                   	pop    edx
c000254d:	5b                   	pop    ebx
c000254e:	5e                   	pop    esi
c000254f:	c3                   	ret    
c0002550:	31 d2                	xor    edx,edx
c0002552:	89 d0                	mov    eax,edx
c0002554:	c3                   	ret    

c0002555 <move_window>:
c0002555:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002558:	74 3a                	je     c0002594 <move_window+0x3f>
c000255a:	56                   	push   esi
c000255b:	89 d6                	mov    esi,edx
c000255d:	53                   	push   ebx
c000255e:	89 c3                	mov    ebx,eax
c0002560:	51                   	push   ecx
c0002561:	e8 8c ff ff ff       	call   c00024f2 <sync_window>
c0002566:	85 c0                	test   eax,eax
c0002568:	75 2d                	jne    c0002597 <move_window+0x42>
c000256a:	6a 01                	push   0x1
c000256c:	56                   	push   esi
c000256d:	8d 43 34             	lea    eax,[ebx+0x34]
c0002570:	50                   	push   eax
c0002571:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002575:	50                   	push   eax
c0002576:	e8 2a fa ff ff       	call   c0001fa5 <disk_read>
c000257b:	83 c4 10             	add    esp,0x10
c000257e:	89 c2                	mov    edx,eax
c0002580:	31 c0                	xor    eax,eax
c0002582:	85 d2                	test   edx,edx
c0002584:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002589:	0f 45 f2             	cmovne esi,edx
c000258c:	0f 95 c0             	setne  al
c000258f:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002592:	eb 03                	jmp    c0002597 <move_window+0x42>
c0002594:	31 c0                	xor    eax,eax
c0002596:	c3                   	ret    
c0002597:	5a                   	pop    edx
c0002598:	5b                   	pop    ebx
c0002599:	5e                   	pop    esi
c000259a:	c3                   	ret    

c000259b <check_fs>:
c000259b:	53                   	push   ebx
c000259c:	89 c3                	mov    ebx,eax
c000259e:	83 ec 08             	sub    esp,0x8
c00025a1:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00025a5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00025ac:	e8 a4 ff ff ff       	call   c0002555 <move_window>
c00025b1:	ba 04 00 00 00       	mov    edx,0x4
c00025b6:	85 c0                	test   eax,eax
c00025b8:	75 68                	jne    c0002622 <check_fs+0x87>
c00025ba:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00025c0:	e8 2b fa ff ff       	call   c0001ff0 <ld_word>
c00025c5:	ba 03 00 00 00       	mov    edx,0x3
c00025ca:	66 3d 55 aa          	cmp    ax,0xaa55
c00025ce:	75 52                	jne    c0002622 <check_fs+0x87>
c00025d0:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025d3:	8d 50 18             	lea    edx,[eax+0x18]
c00025d6:	80 fa 01             	cmp    dl,0x1
c00025d9:	76 09                	jbe    c00025e4 <check_fs+0x49>
c00025db:	3c eb                	cmp    al,0xeb
c00025dd:	ba 02 00 00 00       	mov    edx,0x2
c00025e2:	75 3e                	jne    c0002622 <check_fs+0x87>
c00025e4:	ba 20 31 02 c0       	mov    edx,0xc0023120
c00025e9:	b9 03 00 00 00       	mov    ecx,0x3
c00025ee:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025f1:	e8 45 fa ff ff       	call   c000203b <mem_cmp>
c00025f6:	31 d2                	xor    edx,edx
c00025f8:	85 c0                	test   eax,eax
c00025fa:	74 26                	je     c0002622 <check_fs+0x87>
c00025fc:	ba 7c 08 02 c0       	mov    edx,0xc002087c
c0002601:	b9 05 00 00 00       	mov    ecx,0x5
c0002606:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000260c:	e8 2a fa ff ff       	call   c000203b <mem_cmp>
c0002611:	31 d2                	xor    edx,edx
c0002613:	85 c0                	test   eax,eax
c0002615:	74 0b                	je     c0002622 <check_fs+0x87>
c0002617:	31 d2                	xor    edx,edx
c0002619:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000261d:	0f 95 c2             	setne  dl
c0002620:	01 d2                	add    edx,edx
c0002622:	83 c4 08             	add    esp,0x8
c0002625:	89 d0                	mov    eax,edx
c0002627:	5b                   	pop    ebx
c0002628:	c3                   	ret    

c0002629 <find_volume>:
c0002629:	55                   	push   ebp
c000262a:	57                   	push   edi
c000262b:	56                   	push   esi
c000262c:	89 c6                	mov    esi,eax
c000262e:	53                   	push   ebx
c000262f:	89 d3                	mov    ebx,edx
c0002631:	83 ec 2c             	sub    esp,0x2c
c0002634:	31 d2                	xor    edx,edx
c0002636:	e8 60 ff ff ff       	call   c000259b <check_fs>
c000263b:	85 db                	test   ebx,ebx
c000263d:	0f 94 c2             	sete   dl
c0002640:	83 f8 02             	cmp    eax,0x2
c0002643:	74 07                	je     c000264c <find_volume+0x23>
c0002645:	77 63                	ja     c00026aa <find_volume+0x81>
c0002647:	f6 c2 01             	test   dl,0x1
c000264a:	75 5e                	jne    c00026aa <find_volume+0x81>
c000264c:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002652:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002656:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000265c:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002660:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002664:	89 f8                	mov    eax,edi
c0002666:	83 c7 10             	add    edi,0x10
c0002669:	e8 8f f9 ff ff       	call   c0001ffd <ld_dword>
c000266e:	83 c5 04             	add    ebp,0x4
c0002671:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002675:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002678:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000267c:	75 e2                	jne    c0002660 <find_volume+0x37>
c000267e:	83 fb 01             	cmp    ebx,0x1
c0002681:	0f b6 fa             	movzx  edi,dl
c0002684:	83 d3 ff             	adc    ebx,0xffffffff
c0002687:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c000268b:	b8 03 00 00 00       	mov    eax,0x3
c0002690:	85 d2                	test   edx,edx
c0002692:	74 07                	je     c000269b <find_volume+0x72>
c0002694:	89 f0                	mov    eax,esi
c0002696:	e8 00 ff ff ff       	call   c000259b <check_fs>
c000269b:	83 f8 01             	cmp    eax,0x1
c000269e:	76 0a                	jbe    c00026aa <find_volume+0x81>
c00026a0:	85 ff                	test   edi,edi
c00026a2:	74 06                	je     c00026aa <find_volume+0x81>
c00026a4:	43                   	inc    ebx
c00026a5:	83 fb 03             	cmp    ebx,0x3
c00026a8:	76 dd                	jbe    c0002687 <find_volume+0x5e>
c00026aa:	83 c4 2c             	add    esp,0x2c
c00026ad:	5b                   	pop    ebx
c00026ae:	5e                   	pop    esi
c00026af:	5f                   	pop    edi
c00026b0:	5d                   	pop    ebp
c00026b1:	c3                   	ret    

c00026b2 <mount_volume>:
c00026b2:	55                   	push   ebp
c00026b3:	89 d5                	mov    ebp,edx
c00026b5:	57                   	push   edi
c00026b6:	89 cf                	mov    edi,ecx
c00026b8:	56                   	push   esi
c00026b9:	53                   	push   ebx
c00026ba:	bb 0b 00 00 00       	mov    ebx,0xb
c00026bf:	83 ec 2c             	sub    esp,0x2c
c00026c2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026c8:	e8 93 fd ff ff       	call   c0002460 <get_ldnumber>
c00026cd:	85 c0                	test   eax,eax
c00026cf:	0f 88 d0 02 00 00    	js     c00029a5 <mount_volume+0x2f3>
c00026d5:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026dc:	89 c2                	mov    edx,eax
c00026de:	bb 0c 00 00 00       	mov    ebx,0xc
c00026e3:	85 f6                	test   esi,esi
c00026e5:	0f 84 ba 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c00026eb:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026ee:	83 e7 fe             	and    edi,0xfffffffe
c00026f1:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026f4:	74 3c                	je     c0002732 <mount_volume+0x80>
c00026f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026fa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026fe:	83 ec 0c             	sub    esp,0xc
c0002701:	50                   	push   eax
c0002702:	e8 98 f8 ff ff       	call   c0001f9f <disk_status>
c0002707:	83 c4 10             	add    esp,0x10
c000270a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000270e:	a8 01                	test   al,0x1
c0002710:	75 20                	jne    c0002732 <mount_volume+0x80>
c0002712:	31 db                	xor    ebx,ebx
c0002714:	81 e7 fe 00 00 00    	and    edi,0xfe
c000271a:	0f 84 85 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002720:	a8 04                	test   al,0x4
c0002722:	0f 84 7d 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002728:	bb 0a 00 00 00       	mov    ebx,0xa
c000272d:	e9 73 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002732:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002735:	83 ec 0c             	sub    esp,0xc
c0002738:	0f b6 c2             	movzx  eax,dl
c000273b:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000273e:	bb 03 00 00 00       	mov    ebx,0x3
c0002743:	50                   	push   eax
c0002744:	e8 59 f8 ff ff       	call   c0001fa2 <disk_initialize>
c0002749:	83 c4 10             	add    esp,0x10
c000274c:	a8 01                	test   al,0x1
c000274e:	0f 85 51 02 00 00    	jne    c00029a5 <mount_volume+0x2f3>
c0002754:	81 e7 fe 00 00 00    	and    edi,0xfe
c000275a:	74 04                	je     c0002760 <mount_volume+0xae>
c000275c:	a8 04                	test   al,0x4
c000275e:	75 c8                	jne    c0002728 <mount_volume+0x76>
c0002760:	31 d2                	xor    edx,edx
c0002762:	89 f0                	mov    eax,esi
c0002764:	e8 c0 fe ff ff       	call   c0002629 <find_volume>
c0002769:	bb 01 00 00 00       	mov    ebx,0x1
c000276e:	83 f8 04             	cmp    eax,0x4
c0002771:	0f 84 2e 02 00 00    	je     c00029a5 <mount_volume+0x2f3>
c0002777:	83 f8 01             	cmp    eax,0x1
c000277a:	76 0a                	jbe    c0002786 <mount_volume+0xd4>
c000277c:	bb 0d 00 00 00       	mov    ebx,0xd
c0002781:	e9 1f 02 00 00       	jmp    c00029a5 <mount_volume+0x2f3>
c0002786:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002789:	e8 62 f8 ff ff       	call   c0001ff0 <ld_word>
c000278e:	66 3d 00 02          	cmp    ax,0x200
c0002792:	75 e8                	jne    c000277c <mount_volume+0xca>
c0002794:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002797:	e8 54 f8 ff ff       	call   c0001ff0 <ld_word>
c000279c:	0f b7 c0             	movzx  eax,ax
c000279f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027a3:	85 c0                	test   eax,eax
c00027a5:	75 0c                	jne    c00027b3 <mount_volume+0x101>
c00027a7:	8d 46 58             	lea    eax,[esi+0x58]
c00027aa:	e8 4e f8 ff ff       	call   c0001ffd <ld_dword>
c00027af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027b3:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00027b6:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00027b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00027c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00027c4:	89 e8                	mov    eax,ebp
c00027c6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027c9:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027cc:	3c 01                	cmp    al,0x1
c00027ce:	77 ac                	ja     c000277c <mount_volume+0xca>
c00027d0:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027d4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027d8:	66 85 c0             	test   ax,ax
c00027db:	89 c3                	mov    ebx,eax
c00027dd:	74 9d                	je     c000277c <mount_volume+0xca>
c00027df:	8d 40 ff             	lea    eax,[eax-0x1]
c00027e2:	85 d8                	test   eax,ebx
c00027e4:	75 96                	jne    c000277c <mount_volume+0xca>
c00027e6:	8d 46 45             	lea    eax,[esi+0x45]
c00027e9:	e8 02 f8 ff ff       	call   c0001ff0 <ld_word>
c00027ee:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027f2:	a8 0f                	test   al,0xf
c00027f4:	89 c7                	mov    edi,eax
c00027f6:	75 84                	jne    c000277c <mount_volume+0xca>
c00027f8:	8d 46 47             	lea    eax,[esi+0x47]
c00027fb:	e8 f0 f7 ff ff       	call   c0001ff0 <ld_word>
c0002800:	0f b7 d0             	movzx  edx,ax
c0002803:	85 d2                	test   edx,edx
c0002805:	75 0a                	jne    c0002811 <mount_volume+0x15f>
c0002807:	8d 46 54             	lea    eax,[esi+0x54]
c000280a:	e8 ee f7 ff ff       	call   c0001ffd <ld_dword>
c000280f:	89 c2                	mov    edx,eax
c0002811:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002815:	8d 46 42             	lea    eax,[esi+0x42]
c0002818:	e8 d3 f7 ff ff       	call   c0001ff0 <ld_word>
c000281d:	0f b7 c8             	movzx  ecx,ax
c0002820:	85 c9                	test   ecx,ecx
c0002822:	0f 84 54 ff ff ff    	je     c000277c <mount_volume+0xca>
c0002828:	89 e8                	mov    eax,ebp
c000282a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000282e:	0f b6 e8             	movzx  ebp,al
c0002831:	0f b7 c7             	movzx  eax,di
c0002834:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002839:	c1 e8 04             	shr    eax,0x4
c000283c:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002840:	01 e8                	add    eax,ebp
c0002842:	01 c8                	add    eax,ecx
c0002844:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002848:	39 c2                	cmp    edx,eax
c000284a:	0f 82 2c ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002850:	29 c2                	sub    edx,eax
c0002852:	89 d5                	mov    ebp,edx
c0002854:	89 d0                	mov    eax,edx
c0002856:	31 d2                	xor    edx,edx
c0002858:	f7 f3                	div    ebx
c000285a:	39 dd                	cmp    ebp,ebx
c000285c:	0f 82 1a ff ff ff    	jb     c000277c <mount_volume+0xca>
c0002862:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002867:	0f 87 0f ff ff ff    	ja     c000277c <mount_volume+0xca>
c000286d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002872:	0f 86 1e 01 00 00    	jbe    c0002996 <mount_volume+0x2e4>
c0002878:	bb 03 00 00 00       	mov    ebx,0x3
c000287d:	8d 68 02             	lea    ebp,[eax+0x2]
c0002880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002884:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000288b:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c000288f:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002892:	01 c8                	add    eax,ecx
c0002894:	83 fb 03             	cmp    ebx,0x3
c0002897:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000289a:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000289d:	75 23                	jne    c00028c2 <mount_volume+0x210>
c000289f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00028a2:	e8 49 f7 ff ff       	call   c0001ff0 <ld_word>
c00028a7:	09 c7                	or     edi,eax
c00028a9:	66 85 ff             	test   di,di
c00028ac:	0f 85 ca fe ff ff    	jne    c000277c <mount_volume+0xca>
c00028b2:	8d 46 60             	lea    eax,[esi+0x60]
c00028b5:	e8 43 f7 ff ff       	call   c0001ffd <ld_dword>
c00028ba:	c1 e5 02             	shl    ebp,0x2
c00028bd:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028c0:	eb 25                	jmp    c00028e7 <mount_volume+0x235>
c00028c2:	66 85 ff             	test   di,di
c00028c5:	0f 84 b1 fe ff ff    	je     c000277c <mount_volume+0xca>
c00028cb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028cf:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028d3:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028d7:	83 e5 01             	and    ebp,0x1
c00028da:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028dd:	d1 ea                	shr    edx,1
c00028df:	01 d5                	add    ebp,edx
c00028e1:	83 fb 02             	cmp    ebx,0x2
c00028e4:	0f 44 ef             	cmove  ebp,edi
c00028e7:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028ed:	c1 ed 09             	shr    ebp,0x9
c00028f0:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028f4:	0f 87 82 fe ff ff    	ja     c000277c <mount_volume+0xca>
c00028fa:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002901:	83 fb 03             	cmp    ebx,0x3
c0002904:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000290b:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000290f:	75 6e                	jne    c000297f <mount_volume+0x2cd>
c0002911:	8d 46 64             	lea    eax,[esi+0x64]
c0002914:	e8 d7 f6 ff ff       	call   c0001ff0 <ld_word>
c0002919:	66 48                	dec    ax
c000291b:	75 62                	jne    c000297f <mount_volume+0x2cd>
c000291d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002921:	89 f0                	mov    eax,esi
c0002923:	42                   	inc    edx
c0002924:	e8 2c fc ff ff       	call   c0002555 <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	75 52                	jne    c000297f <mount_volume+0x2cd>
c000292d:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002931:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002937:	e8 b4 f6 ff ff       	call   c0001ff0 <ld_word>
c000293c:	66 3d 55 aa          	cmp    ax,0xaa55
c0002940:	75 3d                	jne    c000297f <mount_volume+0x2cd>
c0002942:	8d 46 34             	lea    eax,[esi+0x34]
c0002945:	e8 b3 f6 ff ff       	call   c0001ffd <ld_dword>
c000294a:	3d 52 52 61 41       	cmp    eax,0x41615252
c000294f:	75 2e                	jne    c000297f <mount_volume+0x2cd>
c0002951:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002957:	e8 a1 f6 ff ff       	call   c0001ffd <ld_dword>
c000295c:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002961:	75 1c                	jne    c000297f <mount_volume+0x2cd>
c0002963:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002969:	e8 8f f6 ff ff       	call   c0001ffd <ld_dword>
c000296e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002971:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002977:	e8 81 f6 ff ff       	call   c0001ffd <ld_dword>
c000297c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000297f:	88 1e                	mov    BYTE PTR [esi],bl
c0002981:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002987:	31 db                	xor    ebx,ebx
c0002989:	40                   	inc    eax
c000298a:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002990:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002994:	eb 0f                	jmp    c00029a5 <mount_volume+0x2f3>
c0002996:	3d f6 0f 00 00       	cmp    eax,0xff6
c000299b:	19 db                	sbb    ebx,ebx
c000299d:	83 c3 02             	add    ebx,0x2
c00029a0:	e9 d8 fe ff ff       	jmp    c000287d <mount_volume+0x1cb>
c00029a5:	83 c4 2c             	add    esp,0x2c
c00029a8:	89 d8                	mov    eax,ebx
c00029aa:	5b                   	pop    ebx
c00029ab:	5e                   	pop    esi
c00029ac:	5f                   	pop    edi
c00029ad:	5d                   	pop    ebp
c00029ae:	c3                   	ret    

c00029af <put_fat>:
c00029af:	55                   	push   ebp
c00029b0:	bd 02 00 00 00       	mov    ebp,0x2
c00029b5:	57                   	push   edi
c00029b6:	56                   	push   esi
c00029b7:	53                   	push   ebx
c00029b8:	83 ec 1c             	sub    esp,0x1c
c00029bb:	83 fa 01             	cmp    edx,0x1
c00029be:	0f 86 38 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029c4:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00029c7:	0f 86 2f 01 00 00    	jbe    c0002afc <put_fat+0x14d>
c00029cd:	89 c6                	mov    esi,eax
c00029cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029d2:	89 cf                	mov    edi,ecx
c00029d4:	89 d3                	mov    ebx,edx
c00029d6:	83 f8 02             	cmp    eax,0x2
c00029d9:	0f 84 b1 00 00 00    	je     c0002a90 <put_fat+0xe1>
c00029df:	83 f8 03             	cmp    eax,0x3
c00029e2:	0f 84 d5 00 00 00    	je     c0002abd <put_fat+0x10e>
c00029e8:	48                   	dec    eax
c00029e9:	0f 85 0d 01 00 00    	jne    c0002afc <put_fat+0x14d>
c00029ef:	89 d1                	mov    ecx,edx
c00029f1:	89 f0                	mov    eax,esi
c00029f3:	d1 e9                	shr    ecx,1
c00029f5:	01 d1                	add    ecx,edx
c00029f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029fb:	89 ca                	mov    edx,ecx
c00029fd:	c1 ea 09             	shr    edx,0x9
c0002a00:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a03:	e8 4d fb ff ff       	call   c0002555 <move_window>
c0002a08:	85 c0                	test   eax,eax
c0002a0a:	89 c5                	mov    ebp,eax
c0002a0c:	0f 85 ea 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a16:	8d 46 34             	lea    eax,[esi+0x34]
c0002a19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002a1d:	8d 41 01             	lea    eax,[ecx+0x1]
c0002a20:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002a26:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2a:	83 e3 01             	and    ebx,0x1
c0002a2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a31:	89 f8                	mov    eax,edi
c0002a33:	74 11                	je     c0002a46 <put_fat+0x97>
c0002a35:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a37:	89 f8                	mov    eax,edi
c0002a39:	c1 e0 04             	shl    eax,0x4
c0002a3c:	25 f0 0f 00 00       	and    eax,0xff0
c0002a41:	83 e2 0f             	and    edx,0xf
c0002a44:	09 d0                	or     eax,edx
c0002a46:	88 01                	mov    BYTE PTR [ecx],al
c0002a48:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4c:	89 f0                	mov    eax,esi
c0002a4e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a52:	c1 ea 09             	shr    edx,0x9
c0002a55:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a58:	e8 f8 fa ff ff       	call   c0002555 <move_window>
c0002a5d:	85 c0                	test   eax,eax
c0002a5f:	89 c5                	mov    ebp,eax
c0002a61:	0f 85 95 00 00 00    	jne    c0002afc <put_fat+0x14d>
c0002a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a6b:	25 ff 01 00 00       	and    eax,0x1ff
c0002a70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	74 07                	je     c0002a7f <put_fat+0xd0>
c0002a78:	c1 ef 04             	shr    edi,0x4
c0002a7b:	89 f9                	mov    ecx,edi
c0002a7d:	eb 0d                	jmp    c0002a8c <put_fat+0xdd>
c0002a7f:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a81:	c1 ef 08             	shr    edi,0x8
c0002a84:	83 e7 0f             	and    edi,0xf
c0002a87:	83 e1 f0             	and    ecx,0xfffffff0
c0002a8a:	09 f9                	or     ecx,edi
c0002a8c:	88 08                	mov    BYTE PTR [eax],cl
c0002a8e:	eb 27                	jmp    c0002ab7 <put_fat+0x108>
c0002a90:	c1 ea 08             	shr    edx,0x8
c0002a93:	89 f0                	mov    eax,esi
c0002a95:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a98:	e8 b8 fa ff ff       	call   c0002555 <move_window>
c0002a9d:	85 c0                	test   eax,eax
c0002a9f:	89 c5                	mov    ebp,eax
c0002aa1:	75 59                	jne    c0002afc <put_fat+0x14d>
c0002aa3:	01 db                	add    ebx,ebx
c0002aa5:	0f b7 d7             	movzx  edx,di
c0002aa8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002aae:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002ab2:	e8 5e f5 ff ff       	call   c0002015 <st_word>
c0002ab7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002abb:	eb 3f                	jmp    c0002afc <put_fat+0x14d>
c0002abd:	c1 ea 07             	shr    edx,0x7
c0002ac0:	89 f0                	mov    eax,esi
c0002ac2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002ac5:	e8 8b fa ff ff       	call   c0002555 <move_window>
c0002aca:	85 c0                	test   eax,eax
c0002acc:	89 c5                	mov    ebp,eax
c0002ace:	75 2c                	jne    c0002afc <put_fat+0x14d>
c0002ad0:	c1 e3 02             	shl    ebx,0x2
c0002ad3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ad9:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002adf:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002ae3:	89 d8                	mov    eax,ebx
c0002ae5:	e8 13 f5 ff ff       	call   c0001ffd <ld_dword>
c0002aea:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aef:	09 f8                	or     eax,edi
c0002af1:	89 c2                	mov    edx,eax
c0002af3:	89 d8                	mov    eax,ebx
c0002af5:	e8 1f f5 ff ff       	call   c0002019 <st_dword>
c0002afa:	eb bb                	jmp    c0002ab7 <put_fat+0x108>
c0002afc:	83 c4 1c             	add    esp,0x1c
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	5b                   	pop    ebx
c0002b02:	5e                   	pop    esi
c0002b03:	5f                   	pop    edi
c0002b04:	5d                   	pop    ebp
c0002b05:	c3                   	ret    

c0002b06 <dir_clear>:
c0002b06:	55                   	push   ebp
c0002b07:	57                   	push   edi
c0002b08:	56                   	push   esi
c0002b09:	89 c6                	mov    esi,eax
c0002b0b:	53                   	push   ebx
c0002b0c:	83 ec 1c             	sub    esp,0x1c
c0002b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002b13:	e8 da f9 ff ff       	call   c00024f2 <sync_window>
c0002b18:	85 c0                	test   eax,eax
c0002b1a:	0f 85 c1 00 00 00    	jne    c0002be1 <dir_clear+0xdb>
c0002b20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b24:	89 f0                	mov    eax,esi
c0002b26:	e8 1b f7 ff ff       	call   c0002246 <clst2sect>
c0002b2b:	31 d2                	xor    edx,edx
c0002b2d:	b9 00 02 00 00       	mov    ecx,0x200
c0002b32:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b35:	89 c5                	mov    ebp,eax
c0002b37:	8d 46 34             	lea    eax,[esi+0x34]
c0002b3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b3e:	e8 ee f4 ff ff       	call   c0002031 <mem_set>
c0002b43:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b47:	b8 00 80 00 00       	mov    eax,0x8000
c0002b4c:	c1 e3 09             	shl    ebx,0x9
c0002b4f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b55:	0f 47 d8             	cmova  ebx,eax
c0002b58:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b5e:	76 16                	jbe    c0002b76 <dir_clear+0x70>
c0002b60:	83 ec 0c             	sub    esp,0xc
c0002b63:	53                   	push   ebx
c0002b64:	e8 cb 32 00 00       	call   c0005e34 <ff_memalloc>
c0002b69:	83 c4 10             	add    esp,0x10
c0002b6c:	85 c0                	test   eax,eax
c0002b6e:	89 c7                	mov    edi,eax
c0002b70:	75 76                	jne    c0002be8 <dir_clear+0xe2>
c0002b72:	d1 eb                	shr    ebx,1
c0002b74:	eb e2                	jmp    c0002b58 <dir_clear+0x52>
c0002b76:	31 db                	xor    ebx,ebx
c0002b78:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7c:	39 d8                	cmp    eax,ebx
c0002b7e:	76 53                	jbe    c0002bd3 <dir_clear+0xcd>
c0002b80:	6a 01                	push   0x1
c0002b82:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b85:	50                   	push   eax
c0002b86:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b8e:	50                   	push   eax
c0002b8f:	e8 27 f4 ff ff       	call   c0001fbb <disk_write>
c0002b94:	83 c4 10             	add    esp,0x10
c0002b97:	85 c0                	test   eax,eax
c0002b99:	75 38                	jne    c0002bd3 <dir_clear+0xcd>
c0002b9b:	43                   	inc    ebx
c0002b9c:	eb da                	jmp    c0002b78 <dir_clear+0x72>
c0002b9e:	52                   	push   edx
c0002b9f:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002ba6:	50                   	push   eax
c0002ba7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002bab:	57                   	push   edi
c0002bac:	50                   	push   eax
c0002bad:	e8 09 f4 ff ff       	call   c0001fbb <disk_write>
c0002bb2:	83 c4 10             	add    esp,0x10
c0002bb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002bb9:	85 c0                	test   eax,eax
c0002bbb:	75 0a                	jne    c0002bc7 <dir_clear+0xc1>
c0002bbd:	01 d3                	add    ebx,edx
c0002bbf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bc3:	39 d8                	cmp    eax,ebx
c0002bc5:	77 d7                	ja     c0002b9e <dir_clear+0x98>
c0002bc7:	83 ec 0c             	sub    esp,0xc
c0002bca:	57                   	push   edi
c0002bcb:	e8 7c 32 00 00       	call   c0005e4c <ff_memfree>
c0002bd0:	83 c4 10             	add    esp,0x10
c0002bd3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bd7:	39 d8                	cmp    eax,ebx
c0002bd9:	0f 95 c0             	setne  al
c0002bdc:	0f b6 c0             	movzx  eax,al
c0002bdf:	eb 19                	jmp    c0002bfa <dir_clear+0xf4>
c0002be1:	b8 01 00 00 00       	mov    eax,0x1
c0002be6:	eb 12                	jmp    c0002bfa <dir_clear+0xf4>
c0002be8:	89 d9                	mov    ecx,ebx
c0002bea:	31 d2                	xor    edx,edx
c0002bec:	e8 40 f4 ff ff       	call   c0002031 <mem_set>
c0002bf1:	89 da                	mov    edx,ebx
c0002bf3:	31 db                	xor    ebx,ebx
c0002bf5:	c1 ea 09             	shr    edx,0x9
c0002bf8:	eb c5                	jmp    c0002bbf <dir_clear+0xb9>
c0002bfa:	83 c4 1c             	add    esp,0x1c
c0002bfd:	5b                   	pop    ebx
c0002bfe:	5e                   	pop    esi
c0002bff:	5f                   	pop    edi
c0002c00:	5d                   	pop    ebp
c0002c01:	c3                   	ret    

c0002c02 <create_name>:
c0002c02:	55                   	push   ebp
c0002c03:	89 c5                	mov    ebp,eax
c0002c05:	57                   	push   edi
c0002c06:	89 d7                	mov    edi,edx
c0002c08:	56                   	push   esi
c0002c09:	31 f6                	xor    esi,esi
c0002c0b:	53                   	push   ebx
c0002c0c:	83 ec 3c             	sub    esp,0x3c
c0002c0f:	8b 02                	mov    eax,DWORD PTR [edx]
c0002c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002c1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c1f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002c23:	e8 4d f4 ff ff       	call   c0002075 <tchar2uni>
c0002c28:	83 f8 ff             	cmp    eax,0xffffffff
c0002c2b:	89 c3                	mov    ebx,eax
c0002c2d:	75 0a                	jne    c0002c39 <create_name+0x37>
c0002c2f:	b8 06 00 00 00       	mov    eax,0x6
c0002c34:	e9 7c 02 00 00       	jmp    c0002eb5 <create_name+0x2b3>
c0002c39:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c3e:	76 0c                	jbe    c0002c4c <create_name+0x4a>
c0002c40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c44:	c1 e8 10             	shr    eax,0x10
c0002c47:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c4b:	46                   	inc    esi
c0002c4c:	0f b7 d3             	movzx  edx,bx
c0002c4f:	89 d8                	mov    eax,ebx
c0002c51:	83 fa 1f             	cmp    edx,0x1f
c0002c54:	76 30                	jbe    c0002c86 <create_name+0x84>
c0002c56:	83 fa 2f             	cmp    edx,0x2f
c0002c59:	74 2b                	je     c0002c86 <create_name+0x84>
c0002c5b:	83 fa 5c             	cmp    edx,0x5c
c0002c5e:	74 35                	je     c0002c95 <create_name+0x93>
c0002c60:	83 fa 7f             	cmp    edx,0x7f
c0002c63:	77 0e                	ja     c0002c73 <create_name+0x71>
c0002c65:	b8 82 08 02 c0       	mov    eax,0xc0020882
c0002c6a:	e8 ef f3 ff ff       	call   c000205e <chk_chr>
c0002c6f:	85 c0                	test   eax,eax
c0002c71:	75 bc                	jne    c0002c2f <create_name+0x2d>
c0002c73:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c79:	77 b4                	ja     c0002c2f <create_name+0x2d>
c0002c7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c7f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c83:	46                   	inc    esi
c0002c84:	eb 99                	jmp    c0002c1f <create_name+0x1d>
c0002c86:	66 83 f8 1f          	cmp    ax,0x1f
c0002c8a:	b3 04                	mov    bl,0x4
c0002c8c:	76 1a                	jbe    c0002ca8 <create_name+0xa6>
c0002c8e:	eb 05                	jmp    c0002c95 <create_name+0x93>
c0002c90:	40                   	inc    eax
c0002c91:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c95:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c99:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c9c:	83 fa 2f             	cmp    edx,0x2f
c0002c9f:	74 ef                	je     c0002c90 <create_name+0x8e>
c0002ca1:	83 fa 5c             	cmp    edx,0x5c
c0002ca4:	74 ea                	je     c0002c90 <create_name+0x8e>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002cac:	89 07                	mov    DWORD PTR [edi],eax
c0002cae:	85 f6                	test   esi,esi
c0002cb0:	74 16                	je     c0002cc8 <create_name+0xc6>
c0002cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb6:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002cbb:	83 f8 20             	cmp    eax,0x20
c0002cbe:	74 05                	je     c0002cc5 <create_name+0xc3>
c0002cc0:	83 f8 2e             	cmp    eax,0x2e
c0002cc3:	75 03                	jne    c0002cc8 <create_name+0xc6>
c0002cc5:	4e                   	dec    esi
c0002cc6:	eb e6                	jmp    c0002cae <create_name+0xac>
c0002cc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ccc:	31 ff                	xor    edi,edi
c0002cce:	85 f6                	test   esi,esi
c0002cd0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cd6:	0f 84 53 ff ff ff    	je     c0002c2f <create_name+0x2d>
c0002cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ce0:	8d 57 01             	lea    edx,[edi+0x1]
c0002ce3:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ce7:	83 f8 20             	cmp    eax,0x20
c0002cea:	75 04                	jne    c0002cf0 <create_name+0xee>
c0002cec:	89 d7                	mov    edi,edx
c0002cee:	eb ec                	jmp    c0002cdc <create_name+0xda>
c0002cf0:	85 ff                	test   edi,edi
c0002cf2:	75 05                	jne    c0002cf9 <create_name+0xf7>
c0002cf4:	83 f8 2e             	cmp    eax,0x2e
c0002cf7:	75 08                	jne    c0002d01 <create_name+0xff>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	eb 03                	jmp    c0002d01 <create_name+0xff>
c0002cfe:	4e                   	dec    esi
c0002cff:	74 0c                	je     c0002d0d <create_name+0x10b>
c0002d01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d05:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002d0b:	75 f1                	jne    c0002cfe <create_name+0xfc>
c0002d0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d12:	ba 20 00 00 00       	mov    edx,0x20
c0002d17:	8d 45 20             	lea    eax,[ebp+0x20]
c0002d1a:	e8 12 f3 ff ff       	call   c0002031 <mem_set>
c0002d1f:	31 c9                	xor    ecx,ecx
c0002d21:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d29:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d2e:	8d 47 01             	lea    eax,[edi+0x1]
c0002d31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d39:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d3d:	85 c0                	test   eax,eax
c0002d3f:	89 c7                	mov    edi,eax
c0002d41:	0f 84 1d 01 00 00    	je     c0002e64 <create_name+0x262>
c0002d47:	83 f8 20             	cmp    eax,0x20
c0002d4a:	74 0b                	je     c0002d57 <create_name+0x155>
c0002d4c:	83 f8 2e             	cmp    eax,0x2e
c0002d4f:	75 0f                	jne    c0002d60 <create_name+0x15e>
c0002d51:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d55:	74 09                	je     c0002d60 <create_name+0x15e>
c0002d57:	83 cb 03             	or     ebx,0x3
c0002d5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d5e:	eb ce                	jmp    c0002d2e <create_name+0x12c>
c0002d60:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d64:	73 06                	jae    c0002d6c <create_name+0x16a>
c0002d66:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d6a:	75 3a                	jne    c0002da6 <create_name+0x1a4>
c0002d6c:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d71:	75 08                	jne    c0002d7b <create_name+0x179>
c0002d73:	83 cb 03             	or     ebx,0x3
c0002d76:	e9 e9 00 00 00       	jmp    c0002e64 <create_name+0x262>
c0002d7b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d7f:	74 0d                	je     c0002d8e <create_name+0x18c>
c0002d81:	83 cb 03             	or     ebx,0x3
c0002d84:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d88:	0f 87 d6 00 00 00    	ja     c0002e64 <create_name+0x262>
c0002d8e:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d93:	b9 08 00 00 00       	mov    ecx,0x8
c0002d98:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d9c:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002da4:	eb b4                	jmp    c0002d5a <create_name+0x158>
c0002da6:	0f b7 c7             	movzx  eax,di
c0002da9:	83 f8 7f             	cmp    eax,0x7f
c0002dac:	76 66                	jbe    c0002e14 <create_name+0x212>
c0002dae:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002db2:	89 d9                	mov    ecx,ebx
c0002db4:	83 c9 02             	or     ecx,0x2
c0002db7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dbb:	52                   	push   edx
c0002dbc:	52                   	push   edx
c0002dbd:	68 b5 01 00 00       	push   0x1b5
c0002dc2:	50                   	push   eax
c0002dc3:	e8 9c 30 00 00       	call   c0005e64 <ff_uni2oem>
c0002dc8:	83 c4 10             	add    esp,0x10
c0002dcb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002dcf:	a8 80                	test   al,0x80
c0002dd1:	89 c7                	mov    edi,eax
c0002dd3:	74 0c                	je     c0002de1 <create_name+0x1df>
c0002dd5:	83 e7 7f             	and    edi,0x7f
c0002dd8:	0f b6 bf 40 09 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf6c0]
c0002ddf:	eb 2a                	jmp    c0002e0b <create_name+0x209>
c0002de1:	0f b7 c0             	movzx  eax,ax
c0002de4:	3d ff 00 00 00       	cmp    eax,0xff
c0002de9:	76 20                	jbe    c0002e0b <create_name+0x209>
c0002deb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002def:	4a                   	dec    edx
c0002df0:	39 ca                	cmp    edx,ecx
c0002df2:	77 0c                	ja     c0002e00 <create_name+0x1fe>
c0002df4:	83 cb 03             	or     ebx,0x3
c0002df7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dfb:	e9 5a ff ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e00:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002e04:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e08:	41                   	inc    ecx
c0002e09:	eb 4d                	jmp    c0002e58 <create_name+0x256>
c0002e0b:	66 85 ff             	test   di,di
c0002e0e:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002e12:	74 19                	je     c0002e2d <create_name+0x22b>
c0002e14:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002e18:	0f b7 d7             	movzx  edx,di
c0002e1b:	b8 8b 08 02 c0       	mov    eax,0xc002088b
c0002e20:	e8 39 f2 ff ff       	call   c000205e <chk_chr>
c0002e25:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	74 0a                	je     c0002e37 <create_name+0x235>
c0002e2d:	83 cb 03             	or     ebx,0x3
c0002e30:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e35:	eb 21                	jmp    c0002e58 <create_name+0x256>
c0002e37:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e3a:	66 83 f8 19          	cmp    ax,0x19
c0002e3e:	77 07                	ja     c0002e47 <create_name+0x245>
c0002e40:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e45:	eb 11                	jmp    c0002e58 <create_name+0x256>
c0002e47:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e4a:	66 83 f8 19          	cmp    ax,0x19
c0002e4e:	77 08                	ja     c0002e58 <create_name+0x256>
c0002e50:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e55:	83 ef 20             	sub    edi,0x20
c0002e58:	89 f8                	mov    eax,edi
c0002e5a:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e5e:	41                   	inc    ecx
c0002e5f:	e9 f6 fe ff ff       	jmp    c0002d5a <create_name+0x158>
c0002e64:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e68:	75 04                	jne    c0002e6e <create_name+0x26c>
c0002e6a:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e6e:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e73:	75 05                	jne    c0002e7a <create_name+0x278>
c0002e75:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e7e:	83 e0 0c             	and    eax,0xc
c0002e81:	83 f8 0c             	cmp    eax,0xc
c0002e84:	74 0c                	je     c0002e92 <create_name+0x290>
c0002e86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e8a:	83 e0 03             	and    eax,0x3
c0002e8d:	83 f8 03             	cmp    eax,0x3
c0002e90:	75 05                	jne    c0002e97 <create_name+0x295>
c0002e92:	83 cb 02             	or     ebx,0x2
c0002e95:	eb 19                	jmp    c0002eb0 <create_name+0x2ae>
c0002e97:	f6 c3 02             	test   bl,0x2
c0002e9a:	75 14                	jne    c0002eb0 <create_name+0x2ae>
c0002e9c:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002ea1:	74 03                	je     c0002ea6 <create_name+0x2a4>
c0002ea3:	83 cb 10             	or     ebx,0x10
c0002ea6:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002eab:	74 03                	je     c0002eb0 <create_name+0x2ae>
c0002ead:	83 cb 08             	or     ebx,0x8
c0002eb0:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002eb3:	31 c0                	xor    eax,eax
c0002eb5:	83 c4 3c             	add    esp,0x3c
c0002eb8:	5b                   	pop    ebx
c0002eb9:	5e                   	pop    esi
c0002eba:	5f                   	pop    edi
c0002ebb:	5d                   	pop    ebp
c0002ebc:	c3                   	ret    

c0002ebd <cmp_lfn>:
c0002ebd:	55                   	push   ebp
c0002ebe:	57                   	push   edi
c0002ebf:	89 d7                	mov    edi,edx
c0002ec1:	56                   	push   esi
c0002ec2:	53                   	push   ebx
c0002ec3:	83 ec 1c             	sub    esp,0x1c
c0002ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002eca:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ecd:	e8 1e f1 ff ff       	call   c0001ff0 <ld_word>
c0002ed2:	66 85 c0             	test   ax,ax
c0002ed5:	74 07                	je     c0002ede <cmp_lfn+0x21>
c0002ed7:	31 c0                	xor    eax,eax
c0002ed9:	e9 a4 00 00 00       	jmp    c0002f82 <cmp_lfn+0xc5>
c0002ede:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002ee0:	bd 01 00 00 00       	mov    ebp,0x1
c0002ee5:	31 c9                	xor    ecx,ecx
c0002ee7:	83 e3 3f             	and    ebx,0x3f
c0002eea:	4b                   	dec    ebx
c0002eeb:	6b db 0d             	imul   ebx,ebx,0xd
c0002eee:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef2:	0f b6 81 c0 09 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdf640]
c0002ef9:	01 f8                	add    eax,edi
c0002efb:	e8 f0 f0 ff ff       	call   c0001ff0 <ld_word>
c0002f00:	66 85 ed             	test   bp,bp
c0002f03:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f07:	0f b7 f0             	movzx  esi,ax
c0002f0a:	74 44                	je     c0002f50 <cmp_lfn+0x93>
c0002f0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002f10:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002f16:	77 bf                	ja     c0002ed7 <cmp_lfn+0x1a>
c0002f18:	83 ec 0c             	sub    esp,0xc
c0002f1b:	0f b7 c6             	movzx  eax,si
c0002f1e:	50                   	push   eax
c0002f1f:	e8 54 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f24:	89 c5                	mov    ebp,eax
c0002f26:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f31:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f35:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f38:	e8 3b 30 00 00       	call   c0005f78 <ff_wtoupper>
c0002f3d:	83 c4 10             	add    esp,0x10
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	75 93                	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f44:	89 f5                	mov    ebp,esi
c0002f46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f4e:	eb 0c                	jmp    c0002f5c <cmp_lfn+0x9f>
c0002f50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f56:	0f 85 7b ff ff ff    	jne    c0002ed7 <cmp_lfn+0x1a>
c0002f5c:	41                   	inc    ecx
c0002f5d:	83 f9 0d             	cmp    ecx,0xd
c0002f60:	75 8c                	jne    c0002eee <cmp_lfn+0x31>
c0002f62:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f65:	74 16                	je     c0002f7d <cmp_lfn+0xc0>
c0002f67:	66 85 ed             	test   bp,bp
c0002f6a:	74 11                	je     c0002f7d <cmp_lfn+0xc0>
c0002f6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f75:	0f 94 c0             	sete   al
c0002f78:	0f b6 c0             	movzx  eax,al
c0002f7b:	eb 05                	jmp    c0002f82 <cmp_lfn+0xc5>
c0002f7d:	b8 01 00 00 00       	mov    eax,0x1
c0002f82:	83 c4 1c             	add    esp,0x1c
c0002f85:	5b                   	pop    ebx
c0002f86:	5e                   	pop    esi
c0002f87:	5f                   	pop    edi
c0002f88:	5d                   	pop    ebp
c0002f89:	c3                   	ret    

c0002f8a <sync_fs>:
c0002f8a:	56                   	push   esi
c0002f8b:	53                   	push   ebx
c0002f8c:	53                   	push   ebx
c0002f8d:	89 c3                	mov    ebx,eax
c0002f8f:	e8 5e f5 ff ff       	call   c00024f2 <sync_window>
c0002f94:	85 c0                	test   eax,eax
c0002f96:	0f 85 9a 00 00 00    	jne    c0003036 <sync_fs+0xac>
c0002f9c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f9f:	75 7b                	jne    c000301c <sync_fs+0x92>
c0002fa1:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002fa5:	75 75                	jne    c000301c <sync_fs+0x92>
c0002fa7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002faa:	b9 00 02 00 00       	mov    ecx,0x200
c0002faf:	31 d2                	xor    edx,edx
c0002fb1:	89 f0                	mov    eax,esi
c0002fb3:	e8 79 f0 ff ff       	call   c0002031 <mem_set>
c0002fb8:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002fbe:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fc3:	e8 4d f0 ff ff       	call   c0002015 <st_word>
c0002fc8:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fcd:	89 f0                	mov    eax,esi
c0002fcf:	e8 45 f0 ff ff       	call   c0002019 <st_dword>
c0002fd4:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fda:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fdf:	e8 35 f0 ff ff       	call   c0002019 <st_dword>
c0002fe4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fe7:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fed:	e8 27 f0 ff ff       	call   c0002019 <st_dword>
c0002ff2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff5:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ffb:	e8 19 f0 ff ff       	call   c0002019 <st_dword>
c0003000:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0003003:	6a 01                	push   0x1
c0003005:	40                   	inc    eax
c0003006:	50                   	push   eax
c0003007:	56                   	push   esi
c0003008:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000300b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000300f:	50                   	push   eax
c0003010:	e8 a6 ef ff ff       	call   c0001fbb <disk_write>
c0003015:	83 c4 10             	add    esp,0x10
c0003018:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000301c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0003020:	51                   	push   ecx
c0003021:	6a 00                	push   0x0
c0003023:	6a 00                	push   0x0
c0003025:	50                   	push   eax
c0003026:	e8 a6 ef ff ff       	call   c0001fd1 <disk_ioctl>
c000302b:	83 c4 10             	add    esp,0x10
c000302e:	85 c0                	test   eax,eax
c0003030:	0f 95 c0             	setne  al
c0003033:	0f b6 c0             	movzx  eax,al
c0003036:	5a                   	pop    edx
c0003037:	5b                   	pop    ebx
c0003038:	5e                   	pop    esi
c0003039:	c3                   	ret    

c000303a <create_partition>:
c000303a:	55                   	push   ebp
c000303b:	0f b6 c0             	movzx  eax,al
c000303e:	57                   	push   edi
c000303f:	56                   	push   esi
c0003040:	53                   	push   ebx
c0003041:	83 ec 40             	sub    esp,0x40
c0003044:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003048:	8d 44 24 30          	lea    eax,[esp+0x30]
c000304c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003050:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003054:	50                   	push   eax
c0003055:	6a 01                	push   0x1
c0003057:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000305b:	e8 71 ef ff ff       	call   c0001fd1 <disk_ioctl>
c0003060:	83 c4 10             	add    esp,0x10
c0003063:	85 c0                	test   eax,eax
c0003065:	0f 85 68 01 00 00    	jne    c00031d3 <create_partition+0x199>
c000306b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000306f:	b9 05 00 00 00       	mov    ecx,0x5
c0003074:	be 08 00 00 00       	mov    esi,0x8
c0003079:	89 f0                	mov    eax,esi
c000307b:	31 d2                	xor    edx,edx
c000307d:	0f b6 d8             	movzx  ebx,al
c0003080:	89 e8                	mov    eax,ebp
c0003082:	f7 f3                	div    ebx
c0003084:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003089:	76 0a                	jbe    c0003095 <create_partition+0x5b>
c000308b:	d1 e6                	shl    esi,1
c000308d:	49                   	dec    ecx
c000308e:	75 e9                	jne    c0003079 <create_partition+0x3f>
c0003090:	be ff ff ff ff       	mov    esi,0xffffffff
c0003095:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003099:	b9 00 02 00 00       	mov    ecx,0x200
c000309e:	31 d2                	xor    edx,edx
c00030a0:	e8 8c ef ff ff       	call   c0002031 <mem_set>
c00030a5:	b9 64 00 00 00       	mov    ecx,0x64
c00030aa:	89 e8                	mov    eax,ebp
c00030ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00030b4:	31 d2                	xor    edx,edx
c00030b6:	f7 f1                	div    ecx
c00030b8:	b9 3f 00 00 00       	mov    ecx,0x3f
c00030bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00030c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030c5:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030cb:	89 f0                	mov    eax,esi
c00030cd:	0f b6 c0             	movzx  eax,al
c00030d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030d4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030d9:	0f 96 c0             	setbe  al
c00030dc:	31 d2                	xor    edx,edx
c00030de:	85 c9                	test   ecx,ecx
c00030e0:	0f 95 c2             	setne  dl
c00030e3:	85 c2                	test   edx,eax
c00030e5:	0f 84 b7 00 00 00    	je     c00031a2 <create_partition+0x168>
c00030eb:	39 e9                	cmp    ecx,ebp
c00030ed:	0f 83 af 00 00 00    	jae    c00031a2 <create_partition+0x168>
c00030f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030fb:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030fe:	83 fe 64             	cmp    esi,0x64
c0003101:	77 0b                	ja     c000310e <create_partition+0xd4>
c0003103:	74 07                	je     c000310c <create_partition+0xd2>
c0003105:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c000310a:	eb 02                	jmp    c000310e <create_partition+0xd4>
c000310c:	89 ee                	mov    esi,ebp
c000310e:	89 ca                	mov    edx,ecx
c0003110:	31 c0                	xor    eax,eax
c0003112:	01 f2                	add    edx,esi
c0003114:	0f 92 c0             	setb   al
c0003117:	39 ea                	cmp    edx,ebp
c0003119:	77 04                	ja     c000311f <create_partition+0xe5>
c000311b:	85 c0                	test   eax,eax
c000311d:	74 06                	je     c0003125 <create_partition+0xeb>
c000311f:	89 ee                	mov    esi,ebp
c0003121:	29 ce                	sub    esi,ecx
c0003123:	eb 04                	jmp    c0003129 <create_partition+0xef>
c0003125:	85 f6                	test   esi,esi
c0003127:	74 79                	je     c00031a2 <create_partition+0x168>
c0003129:	89 ca                	mov    edx,ecx
c000312b:	89 d8                	mov    eax,ebx
c000312d:	e8 e7 ee ff ff       	call   c0002019 <st_dword>
c0003132:	8d 43 04             	lea    eax,[ebx+0x4]
c0003135:	89 f2                	mov    edx,esi
c0003137:	e8 dd ee ff ff       	call   c0002019 <st_dword>
c000313c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003140:	bf 3f 00 00 00       	mov    edi,0x3f
c0003145:	31 d2                	xor    edx,edx
c0003147:	83 c3 10             	add    ebx,0x10
c000314a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000314e:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003151:	89 c8                	mov    eax,ecx
c0003153:	01 f1                	add    ecx,esi
c0003155:	f7 f7                	div    edi
c0003157:	89 d7                	mov    edi,edx
c0003159:	31 d2                	xor    edx,edx
c000315b:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315f:	47                   	inc    edi
c0003160:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003163:	89 c2                	mov    edx,eax
c0003165:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003168:	c1 ea 02             	shr    edx,0x2
c000316b:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316e:	83 e2 c0             	and    edx,0xffffffc0
c0003171:	09 fa                	or     edx,edi
c0003173:	bf 3f 00 00 00       	mov    edi,0x3f
c0003178:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c000317b:	31 d2                	xor    edx,edx
c000317d:	f7 f7                	div    edi
c000317f:	89 d6                	mov    esi,edx
c0003181:	31 d2                	xor    edx,edx
c0003183:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003187:	46                   	inc    esi
c0003188:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c000318b:	89 c7                	mov    edi,eax
c000318d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003190:	c1 ef 02             	shr    edi,0x2
c0003193:	83 e7 c0             	and    edi,0xffffffc0
c0003196:	09 fe                	or     esi,edi
c0003198:	89 f2                	mov    edx,esi
c000319a:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c000319d:	e9 32 ff ff ff       	jmp    c00030d4 <create_partition+0x9a>
c00031a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00031a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00031ab:	05 fe 01 00 00       	add    eax,0x1fe
c00031b0:	e8 60 ee ff ff       	call   c0002015 <st_word>
c00031b5:	6a 01                	push   0x1
c00031b7:	6a 00                	push   0x0
c00031b9:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00031bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00031c1:	e8 f5 ed ff ff       	call   c0001fbb <disk_write>
c00031c6:	83 c4 10             	add    esp,0x10
c00031c9:	85 c0                	test   eax,eax
c00031cb:	0f 95 c0             	setne  al
c00031ce:	0f b6 c0             	movzx  eax,al
c00031d1:	eb 05                	jmp    c00031d8 <create_partition+0x19e>
c00031d3:	b8 01 00 00 00       	mov    eax,0x1
c00031d8:	83 c4 3c             	add    esp,0x3c
c00031db:	5b                   	pop    ebx
c00031dc:	5e                   	pop    esi
c00031dd:	5f                   	pop    edi
c00031de:	5d                   	pop    ebp
c00031df:	c3                   	ret    

c00031e0 <get_fileinfo>:
c00031e0:	55                   	push   ebp
c00031e1:	57                   	push   edi
c00031e2:	56                   	push   esi
c00031e3:	53                   	push   ebx
c00031e4:	83 ec 1c             	sub    esp,0x1c
c00031e7:	8b 30                	mov    esi,DWORD PTR [eax]
c00031e9:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031ed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031f1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031f5:	0f 84 de 01 00 00    	je     c00033d9 <get_fileinfo+0x1f9>
c00031fb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031ff:	89 d3                	mov    ebx,edx
c0003201:	89 c6                	mov    esi,eax
c0003203:	74 7d                	je     c0003282 <get_fileinfo+0xa2>
c0003205:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000320d:	31 ff                	xor    edi,edi
c000320f:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003216:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000321a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000321e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003221:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003225:	85 c0                	test   eax,eax
c0003227:	89 c2                	mov    edx,eax
c0003229:	74 44                	je     c000326f <get_fileinfo+0x8f>
c000322b:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003230:	85 ed                	test   ebp,ebp
c0003232:	75 0d                	jne    c0003241 <get_fileinfo+0x61>
c0003234:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000323a:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000323f:	76 20                	jbe    c0003261 <get_fileinfo+0x81>
c0003241:	c1 e5 10             	shl    ebp,0x10
c0003244:	b9 ff 00 00 00       	mov    ecx,0xff
c0003249:	29 f9                	sub    ecx,edi
c000324b:	09 e8                	or     eax,ebp
c000324d:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003251:	e8 f7 ee ff ff       	call   c000214d <put_utf>
c0003256:	0f b6 c0             	movzx  eax,al
c0003259:	85 c0                	test   eax,eax
c000325b:	74 10                	je     c000326d <get_fileinfo+0x8d>
c000325d:	01 c7                	add    edi,eax
c000325f:	31 d2                	xor    edx,edx
c0003261:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003266:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000326b:	eb a9                	jmp    c0003216 <get_fileinfo+0x36>
c000326d:	31 ff                	xor    edi,edi
c000326f:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003275:	b8 00 00 00 00       	mov    eax,0x0
c000327a:	0f 45 f8             	cmovne edi,eax
c000327d:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003282:	31 ff                	xor    edi,edi
c0003284:	31 c9                	xor    ecx,ecx
c0003286:	83 f9 0a             	cmp    ecx,0xa
c0003289:	0f 87 ac 00 00 00    	ja     c000333b <get_fileinfo+0x15b>
c000328f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003292:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003295:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003299:	83 f8 20             	cmp    eax,0x20
c000329c:	89 c2                	mov    edx,eax
c000329e:	0f 84 90 00 00 00    	je     c0003334 <get_fileinfo+0x154>
c00032a4:	83 f8 05             	cmp    eax,0x5
c00032a7:	75 05                	jne    c00032ae <get_fileinfo+0xce>
c00032a9:	ba e5 00 00 00       	mov    edx,0xe5
c00032ae:	83 fd 09             	cmp    ebp,0x9
c00032b1:	75 0b                	jne    c00032be <get_fileinfo+0xde>
c00032b3:	83 ff 0b             	cmp    edi,0xb
c00032b6:	77 06                	ja     c00032be <get_fileinfo+0xde>
c00032b8:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00032bd:	47                   	inc    edi
c00032be:	0f b7 c2             	movzx  eax,dx
c00032c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00032c5:	e8 a5 ed ff ff       	call   c000206f <dbc_1st>
c00032ca:	85 c0                	test   eax,eax
c00032cc:	74 2f                	je     c00032fd <get_fileinfo+0x11d>
c00032ce:	83 fd 08             	cmp    ebp,0x8
c00032d1:	74 2a                	je     c00032fd <get_fileinfo+0x11d>
c00032d3:	83 fd 0b             	cmp    ebp,0xb
c00032d6:	74 25                	je     c00032fd <get_fileinfo+0x11d>
c00032d8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032db:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032df:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032e3:	e8 8a ed ff ff       	call   c0002072 <dbc_2nd>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 11                	je     c00032fd <get_fileinfo+0x11d>
c00032ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032f0:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032f3:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032f8:	c1 e0 08             	shl    eax,0x8
c00032fb:	09 c2                	or     edx,eax
c00032fd:	50                   	push   eax
c00032fe:	0f b7 d2             	movzx  edx,dx
c0003301:	50                   	push   eax
c0003302:	68 b5 01 00 00       	push   0x1b5
c0003307:	52                   	push   edx
c0003308:	e8 f3 2b 00 00       	call   c0005f00 <ff_oem2uni>
c000330d:	83 c4 10             	add    esp,0x10
c0003310:	0f b7 c0             	movzx  eax,ax
c0003313:	85 c0                	test   eax,eax
c0003315:	75 04                	jne    c000331b <get_fileinfo+0x13b>
c0003317:	31 ff                	xor    edi,edi
c0003319:	eb 20                	jmp    c000333b <get_fileinfo+0x15b>
c000331b:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000331f:	b9 0c 00 00 00       	mov    ecx,0xc
c0003324:	29 f9                	sub    ecx,edi
c0003326:	e8 22 ee ff ff       	call   c000214d <put_utf>
c000332b:	0f b6 c0             	movzx  eax,al
c000332e:	85 c0                	test   eax,eax
c0003330:	74 e5                	je     c0003317 <get_fileinfo+0x137>
c0003332:	01 c7                	add    edi,eax
c0003334:	89 e9                	mov    ecx,ebp
c0003336:	e9 4b ff ff ff       	jmp    c0003286 <get_fileinfo+0xa6>
c000333b:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003340:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003344:	75 5f                	jne    c00033a5 <get_fileinfo+0x1c5>
c0003346:	85 ff                	test   edi,edi
c0003348:	75 0b                	jne    c0003355 <get_fileinfo+0x175>
c000334a:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000334e:	ba 01 00 00 00       	mov    edx,0x1
c0003353:	eb 3e                	jmp    c0003393 <get_fileinfo+0x1b3>
c0003355:	bf 08 00 00 00       	mov    edi,0x8
c000335a:	31 d2                	xor    edx,edx
c000335c:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003362:	84 c0                	test   al,al
c0003364:	74 2d                	je     c0003393 <get_fileinfo+0x1b3>
c0003366:	66 83 f8 2e          	cmp    ax,0x2e
c000336a:	74 1b                	je     c0003387 <get_fileinfo+0x1a7>
c000336c:	8d 48 bf             	lea    ecx,[eax-0x41]
c000336f:	66 83 f9 19          	cmp    cx,0x19
c0003373:	77 17                	ja     c000338c <get_fileinfo+0x1ac>
c0003375:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003378:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000337b:	21 f9                	and    ecx,edi
c000337d:	80 e1 18             	and    cl,0x18
c0003380:	74 0a                	je     c000338c <get_fileinfo+0x1ac>
c0003382:	83 c0 20             	add    eax,0x20
c0003385:	eb 05                	jmp    c000338c <get_fileinfo+0x1ac>
c0003387:	bf 10 00 00 00       	mov    edi,0x10
c000338c:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003390:	42                   	inc    edx
c0003391:	eb c9                	jmp    c000335c <get_fileinfo+0x17c>
c0003393:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003398:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000339b:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000339f:	75 04                	jne    c00033a5 <get_fileinfo+0x1c5>
c00033a1:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00033a5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a8:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00033ab:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00033ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033b1:	83 c0 1c             	add    eax,0x1c
c00033b4:	e8 44 ec ff ff       	call   c0001ffd <ld_dword>
c00033b9:	89 03                	mov    DWORD PTR [ebx],eax
c00033bb:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033be:	83 c0 16             	add    eax,0x16
c00033c1:	e8 2a ec ff ff       	call   c0001ff0 <ld_word>
c00033c6:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033ca:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033cd:	83 c0 18             	add    eax,0x18
c00033d0:	e8 1b ec ff ff       	call   c0001ff0 <ld_word>
c00033d5:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033d9:	83 c4 1c             	add    esp,0x1c
c00033dc:	5b                   	pop    ebx
c00033dd:	5e                   	pop    esi
c00033de:	5f                   	pop    edi
c00033df:	5d                   	pop    ebp
c00033e0:	c3                   	ret    

c00033e1 <ld_clust.isra.0>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033ea:	e8 01 ec ff ff       	call   c0001ff0 <ld_word>
c00033ef:	0f b7 c8             	movzx  ecx,ax
c00033f2:	89 f0                	mov    eax,esi
c00033f4:	3c 03                	cmp    al,0x3
c00033f6:	75 0d                	jne    c0003405 <ld_clust.isra.0+0x24>
c00033f8:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fb:	e8 f0 eb ff ff       	call   c0001ff0 <ld_word>
c0003400:	c1 e0 10             	shl    eax,0x10
c0003403:	09 c1                	or     ecx,eax
c0003405:	5b                   	pop    ebx
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5e                   	pop    esi
c0003409:	c3                   	ret    

c000340a <st_clust.isra.1>:
c000340a:	56                   	push   esi
c000340b:	89 c6                	mov    esi,eax
c000340d:	53                   	push   ebx
c000340e:	89 d3                	mov    ebx,edx
c0003410:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003413:	0f b7 d1             	movzx  edx,cx
c0003416:	e8 fa eb ff ff       	call   c0002015 <st_word>
c000341b:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000341e:	75 0f                	jne    c000342f <st_clust.isra.1+0x25>
c0003420:	8d 43 14             	lea    eax,[ebx+0x14]
c0003423:	5b                   	pop    ebx
c0003424:	c1 e9 10             	shr    ecx,0x10
c0003427:	89 ca                	mov    edx,ecx
c0003429:	5e                   	pop    esi
c000342a:	e9 e6 eb ff ff       	jmp    c0002015 <st_word>
c000342f:	5b                   	pop    ebx
c0003430:	5e                   	pop    esi
c0003431:	c3                   	ret    

c0003432 <get_fat.isra.2>:
c0003432:	83 fa 01             	cmp    edx,0x1
c0003435:	b9 01 00 00 00       	mov    ecx,0x1
c000343a:	0f 86 f4 00 00 00    	jbe    c0003534 <get_fat.isra.2+0x102>
c0003440:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003443:	0f 83 eb 00 00 00    	jae    c0003534 <get_fat.isra.2+0x102>
c0003449:	55                   	push   ebp
c000344a:	57                   	push   edi
c000344b:	56                   	push   esi
c000344c:	89 c6                	mov    esi,eax
c000344e:	53                   	push   ebx
c000344f:	89 d3                	mov    ebx,edx
c0003451:	83 ec 0c             	sub    esp,0xc
c0003454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003457:	83 f8 02             	cmp    eax,0x2
c000345a:	74 79                	je     c00034d5 <get_fat.isra.2+0xa3>
c000345c:	83 f8 03             	cmp    eax,0x3
c000345f:	0f 84 97 00 00 00    	je     c00034fc <get_fat.isra.2+0xca>
c0003465:	48                   	dec    eax
c0003466:	0f 85 be 00 00 00    	jne    c000352a <get_fat.isra.2+0xf8>
c000346c:	89 d7                	mov    edi,edx
c000346e:	89 f0                	mov    eax,esi
c0003470:	d1 ef                	shr    edi,1
c0003472:	01 d7                	add    edi,edx
c0003474:	89 fa                	mov    edx,edi
c0003476:	c1 ea 09             	shr    edx,0x9
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 d4 f0 ff ff       	call   c0002555 <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	74 08                	je     c000348d <get_fat.isra.2+0x5b>
c0003485:	83 c9 ff             	or     ecx,0xffffffff
c0003488:	e9 9d 00 00 00       	jmp    c000352a <get_fat.isra.2+0xf8>
c000348d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003490:	89 f0                	mov    eax,esi
c0003492:	89 ea                	mov    edx,ebp
c0003494:	81 e7 ff 01 00 00    	and    edi,0x1ff
c000349a:	c1 ea 09             	shr    edx,0x9
c000349d:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00034a2:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034a5:	e8 ab f0 ff ff       	call   c0002555 <move_window>
c00034aa:	85 c0                	test   eax,eax
c00034ac:	75 d7                	jne    c0003485 <get_fat.isra.2+0x53>
c00034ae:	89 f8                	mov    eax,edi
c00034b0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00034b6:	0f b6 f8             	movzx  edi,al
c00034b9:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00034be:	c1 e0 08             	shl    eax,0x8
c00034c1:	09 f8                	or     eax,edi
c00034c3:	89 c1                	mov    ecx,eax
c00034c5:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034cb:	80 e3 01             	and    bl,0x1
c00034ce:	74 5a                	je     c000352a <get_fat.isra.2+0xf8>
c00034d0:	c1 e8 04             	shr    eax,0x4
c00034d3:	eb 53                	jmp    c0003528 <get_fat.isra.2+0xf6>
c00034d5:	c1 ea 08             	shr    edx,0x8
c00034d8:	89 f0                	mov    eax,esi
c00034da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034dd:	e8 73 f0 ff ff       	call   c0002555 <move_window>
c00034e2:	85 c0                	test   eax,eax
c00034e4:	75 9f                	jne    c0003485 <get_fat.isra.2+0x53>
c00034e6:	01 db                	add    ebx,ebx
c00034e8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034ee:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f2:	e8 f9 ea ff ff       	call   c0001ff0 <ld_word>
c00034f7:	0f b7 c8             	movzx  ecx,ax
c00034fa:	eb 2e                	jmp    c000352a <get_fat.isra.2+0xf8>
c00034fc:	c1 ea 07             	shr    edx,0x7
c00034ff:	89 f0                	mov    eax,esi
c0003501:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003504:	e8 4c f0 ff ff       	call   c0002555 <move_window>
c0003509:	85 c0                	test   eax,eax
c000350b:	0f 85 74 ff ff ff    	jne    c0003485 <get_fat.isra.2+0x53>
c0003511:	c1 e3 02             	shl    ebx,0x2
c0003514:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c000351a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000351e:	e8 da ea ff ff       	call   c0001ffd <ld_dword>
c0003523:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003528:	89 c1                	mov    ecx,eax
c000352a:	83 c4 0c             	add    esp,0xc
c000352d:	89 c8                	mov    eax,ecx
c000352f:	5b                   	pop    ebx
c0003530:	5e                   	pop    esi
c0003531:	5f                   	pop    edi
c0003532:	5d                   	pop    ebp
c0003533:	c3                   	ret    
c0003534:	89 c8                	mov    eax,ecx
c0003536:	c3                   	ret    

c0003537 <dir_sdi>:
c0003537:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000353d:	0f 87 b6 00 00 00    	ja     c00035f9 <dir_sdi+0xc2>
c0003543:	55                   	push   ebp
c0003544:	57                   	push   edi
c0003545:	56                   	push   esi
c0003546:	53                   	push   ebx
c0003547:	89 d3                	mov    ebx,edx
c0003549:	83 ec 1c             	sub    esp,0x1c
c000354c:	f6 c2 1f             	test   dl,0x1f
c000354f:	74 0a                	je     c000355b <dir_sdi+0x24>
c0003551:	b8 02 00 00 00       	mov    eax,0x2
c0003556:	e9 96 00 00 00       	jmp    c00035f1 <dir_sdi+0xba>
c000355b:	89 c6                	mov    esi,eax
c000355d:	8b 28                	mov    ebp,DWORD PTR [eax]
c000355f:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003562:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003565:	85 ff                	test   edi,edi
c0003567:	75 21                	jne    c000358a <dir_sdi+0x53>
c0003569:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000356d:	76 07                	jbe    c0003576 <dir_sdi+0x3f>
c000356f:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003572:	85 c0                	test   eax,eax
c0003574:	75 12                	jne    c0003588 <dir_sdi+0x51>
c0003576:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000357a:	89 da                	mov    edx,ebx
c000357c:	c1 ea 05             	shr    edx,0x5
c000357f:	39 c2                	cmp    edx,eax
c0003581:	73 ce                	jae    c0003551 <dir_sdi+0x1a>
c0003583:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003586:	eb 3c                	jmp    c00035c4 <dir_sdi+0x8d>
c0003588:	89 c7                	mov    edi,eax
c000358a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000358e:	c1 e1 09             	shl    ecx,0x9
c0003591:	39 cb                	cmp    ebx,ecx
c0003593:	72 26                	jb     c00035bb <dir_sdi+0x84>
c0003595:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003599:	8b 06                	mov    eax,DWORD PTR [esi]
c000359b:	89 fa                	mov    edx,edi
c000359d:	e8 90 fe ff ff       	call   c0003432 <get_fat.isra.2>
c00035a2:	83 f8 ff             	cmp    eax,0xffffffff
c00035a5:	89 c7                	mov    edi,eax
c00035a7:	74 43                	je     c00035ec <dir_sdi+0xb5>
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	76 a3                	jbe    c0003551 <dir_sdi+0x1a>
c00035ae:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00035b1:	76 9e                	jbe    c0003551 <dir_sdi+0x1a>
c00035b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b7:	29 cb                	sub    ebx,ecx
c00035b9:	eb d6                	jmp    c0003591 <dir_sdi+0x5a>
c00035bb:	89 fa                	mov    edx,edi
c00035bd:	89 e8                	mov    eax,ebp
c00035bf:	e8 82 ec ff ff       	call   c0002246 <clst2sect>
c00035c4:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035c7:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035ca:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035cd:	85 d2                	test   edx,edx
c00035cf:	74 80                	je     c0003551 <dir_sdi+0x1a>
c00035d1:	89 d8                	mov    eax,ebx
c00035d3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035d9:	c1 e8 09             	shr    eax,0x9
c00035dc:	01 d0                	add    eax,edx
c00035de:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035e1:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035e5:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035e8:	31 c0                	xor    eax,eax
c00035ea:	eb 05                	jmp    c00035f1 <dir_sdi+0xba>
c00035ec:	b8 01 00 00 00       	mov    eax,0x1
c00035f1:	83 c4 1c             	add    esp,0x1c
c00035f4:	5b                   	pop    ebx
c00035f5:	5e                   	pop    esi
c00035f6:	5f                   	pop    edi
c00035f7:	5d                   	pop    ebp
c00035f8:	c3                   	ret    
c00035f9:	b8 02 00 00 00       	mov    eax,0x2
c00035fe:	c3                   	ret    

c00035ff <create_chain>:
c00035ff:	55                   	push   ebp
c0003600:	89 c5                	mov    ebp,eax
c0003602:	57                   	push   edi
c0003603:	89 d7                	mov    edi,edx
c0003605:	56                   	push   esi
c0003606:	53                   	push   ebx
c0003607:	83 ec 1c             	sub    esp,0x1c
c000360a:	85 d2                	test   edx,edx
c000360c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000360e:	75 0e                	jne    c000361e <create_chain+0x1f>
c0003610:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003613:	85 c9                	test   ecx,ecx
c0003615:	74 32                	je     c0003649 <create_chain+0x4a>
c0003617:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000361a:	77 32                	ja     c000364e <create_chain+0x4f>
c000361c:	eb 2b                	jmp    c0003649 <create_chain+0x4a>
c000361e:	89 d8                	mov    eax,ebx
c0003620:	e8 0d fe ff ff       	call   c0003432 <get_fat.isra.2>
c0003625:	83 f8 01             	cmp    eax,0x1
c0003628:	77 0a                	ja     c0003634 <create_chain+0x35>
c000362a:	b8 01 00 00 00       	mov    eax,0x1
c000362f:	e9 fd 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003634:	83 f8 ff             	cmp    eax,0xffffffff
c0003637:	0f 84 f1 00 00 00    	je     c000372e <create_chain+0x12f>
c000363d:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003640:	89 f9                	mov    ecx,edi
c0003642:	76 0a                	jbe    c000364e <create_chain+0x4f>
c0003644:	e9 e8 00 00 00       	jmp    c0003731 <create_chain+0x132>
c0003649:	b9 01 00 00 00       	mov    ecx,0x1
c000364e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003652:	75 07                	jne    c000365b <create_chain+0x5c>
c0003654:	31 c0                	xor    eax,eax
c0003656:	e9 d6 00 00 00       	jmp    c0003731 <create_chain+0x132>
c000365b:	39 f9                	cmp    ecx,edi
c000365d:	75 49                	jne    c00036a8 <create_chain+0xa9>
c000365f:	8d 71 01             	lea    esi,[ecx+0x1]
c0003662:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003665:	77 05                	ja     c000366c <create_chain+0x6d>
c0003667:	be 02 00 00 00       	mov    esi,0x2
c000366c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003670:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003673:	89 f2                	mov    edx,esi
c0003675:	e8 b8 fd ff ff       	call   c0003432 <get_fat.isra.2>
c000367a:	83 f8 01             	cmp    eax,0x1
c000367d:	0f 84 ae 00 00 00    	je     c0003731 <create_chain+0x132>
c0003683:	83 f8 ff             	cmp    eax,0xffffffff
c0003686:	0f 84 a5 00 00 00    	je     c0003731 <create_chain+0x132>
c000368c:	85 c0                	test   eax,eax
c000368e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003692:	74 10                	je     c00036a4 <create_chain+0xa5>
c0003694:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003697:	83 f8 01             	cmp    eax,0x1
c000369a:	76 0c                	jbe    c00036a8 <create_chain+0xa9>
c000369c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000369f:	0f 47 c8             	cmova  ecx,eax
c00036a2:	eb 04                	jmp    c00036a8 <create_chain+0xa9>
c00036a4:	85 f6                	test   esi,esi
c00036a6:	75 3b                	jne    c00036e3 <create_chain+0xe4>
c00036a8:	89 ce                	mov    esi,ecx
c00036aa:	46                   	inc    esi
c00036ab:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00036ae:	77 0a                	ja     c00036ba <create_chain+0xbb>
c00036b0:	83 f9 01             	cmp    ecx,0x1
c00036b3:	76 9f                	jbe    c0003654 <create_chain+0x55>
c00036b5:	be 02 00 00 00       	mov    esi,0x2
c00036ba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00036be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00036c1:	89 f2                	mov    edx,esi
c00036c3:	e8 6a fd ff ff       	call   c0003432 <get_fat.isra.2>
c00036c8:	85 c0                	test   eax,eax
c00036ca:	74 17                	je     c00036e3 <create_chain+0xe4>
c00036cc:	83 f8 01             	cmp    eax,0x1
c00036cf:	74 60                	je     c0003731 <create_chain+0x132>
c00036d1:	83 f8 ff             	cmp    eax,0xffffffff
c00036d4:	74 5b                	je     c0003731 <create_chain+0x132>
c00036d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036da:	39 ce                	cmp    esi,ecx
c00036dc:	75 cc                	jne    c00036aa <create_chain+0xab>
c00036de:	e9 71 ff ff ff       	jmp    c0003654 <create_chain+0x55>
c00036e3:	83 c9 ff             	or     ecx,0xffffffff
c00036e6:	89 f2                	mov    edx,esi
c00036e8:	89 d8                	mov    eax,ebx
c00036ea:	e8 c0 f2 ff ff       	call   c00029af <put_fat>
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 0f                	jne    c0003702 <create_chain+0x103>
c00036f3:	85 ff                	test   edi,edi
c00036f5:	74 0b                	je     c0003702 <create_chain+0x103>
c00036f7:	89 f1                	mov    ecx,esi
c00036f9:	89 fa                	mov    edx,edi
c00036fb:	89 d8                	mov    eax,ebx
c00036fd:	e8 ad f2 ff ff       	call   c00029af <put_fat>
c0003702:	85 c0                	test   eax,eax
c0003704:	75 21                	jne    c0003727 <create_chain+0x128>
c0003706:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003709:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000370c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000370f:	8d 57 fe             	lea    edx,[edi-0x2]
c0003712:	39 d0                	cmp    eax,edx
c0003714:	77 04                	ja     c000371a <create_chain+0x11b>
c0003716:	48                   	dec    eax
c0003717:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000371a:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000371d:	83 c8 01             	or     eax,0x1
c0003720:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003723:	89 f0                	mov    eax,esi
c0003725:	eb 0a                	jmp    c0003731 <create_chain+0x132>
c0003727:	48                   	dec    eax
c0003728:	0f 85 fc fe ff ff    	jne    c000362a <create_chain+0x2b>
c000372e:	83 c8 ff             	or     eax,0xffffffff
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <remove_chain>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 d6                	mov    esi,edx
c000373e:	53                   	push   ebx
c000373f:	83 ec 0c             	sub    esp,0xc
c0003742:	83 fa 01             	cmp    edx,0x1
c0003745:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003747:	76 6a                	jbe    c00037b3 <remove_chain+0x7a>
c0003749:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000374c:	76 65                	jbe    c00037b3 <remove_chain+0x7a>
c000374e:	85 c9                	test   ecx,ecx
c0003750:	89 c5                	mov    ebp,eax
c0003752:	89 ca                	mov    edx,ecx
c0003754:	74 0e                	je     c0003764 <remove_chain+0x2b>
c0003756:	83 c9 ff             	or     ecx,0xffffffff
c0003759:	89 d8                	mov    eax,ebx
c000375b:	e8 4f f2 ff ff       	call   c00029af <put_fat>
c0003760:	85 c0                	test   eax,eax
c0003762:	75 5b                	jne    c00037bf <remove_chain+0x86>
c0003764:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003767:	89 f2                	mov    edx,esi
c0003769:	e8 c4 fc ff ff       	call   c0003432 <get_fat.isra.2>
c000376e:	85 c0                	test   eax,eax
c0003770:	89 c7                	mov    edi,eax
c0003772:	75 04                	jne    c0003778 <remove_chain+0x3f>
c0003774:	31 c0                	xor    eax,eax
c0003776:	eb 47                	jmp    c00037bf <remove_chain+0x86>
c0003778:	83 f8 01             	cmp    eax,0x1
c000377b:	74 36                	je     c00037b3 <remove_chain+0x7a>
c000377d:	83 f8 ff             	cmp    eax,0xffffffff
c0003780:	74 38                	je     c00037ba <remove_chain+0x81>
c0003782:	31 c9                	xor    ecx,ecx
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 22 f2 ff ff       	call   c00029af <put_fat>
c000378d:	85 c0                	test   eax,eax
c000378f:	75 2e                	jne    c00037bf <remove_chain+0x86>
c0003791:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003794:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003797:	8d 4a fe             	lea    ecx,[edx-0x2]
c000379a:	39 c8                	cmp    eax,ecx
c000379c:	73 0d                	jae    c00037ab <remove_chain+0x72>
c000379e:	40                   	inc    eax
c000379f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00037a2:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00037a5:	83 c8 01             	or     eax,0x1
c00037a8:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00037ab:	39 fa                	cmp    edx,edi
c00037ad:	89 fe                	mov    esi,edi
c00037af:	77 b3                	ja     c0003764 <remove_chain+0x2b>
c00037b1:	eb c1                	jmp    c0003774 <remove_chain+0x3b>
c00037b3:	b8 02 00 00 00       	mov    eax,0x2
c00037b8:	eb 05                	jmp    c00037bf <remove_chain+0x86>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	83 c4 0c             	add    esp,0xc
c00037c2:	5b                   	pop    ebx
c00037c3:	5e                   	pop    esi
c00037c4:	5f                   	pop    edi
c00037c5:	5d                   	pop    ebp
c00037c6:	c3                   	ret    

c00037c7 <dir_next>:
c00037c7:	55                   	push   ebp
c00037c8:	57                   	push   edi
c00037c9:	56                   	push   esi
c00037ca:	53                   	push   ebx
c00037cb:	83 ec 1c             	sub    esp,0x1c
c00037ce:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037d1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037d3:	83 c7 20             	add    edi,0x20
c00037d6:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037dc:	76 07                	jbe    c00037e5 <dir_next+0x1e>
c00037de:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037e5:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037e8:	b9 04 00 00 00       	mov    ecx,0x4
c00037ed:	85 f6                	test   esi,esi
c00037ef:	0f 84 cd 00 00 00    	je     c00038c2 <dir_next+0xfb>
c00037f5:	89 c3                	mov    ebx,eax
c00037f7:	89 f8                	mov    eax,edi
c00037f9:	25 ff 01 00 00       	and    eax,0x1ff
c00037fe:	89 d1                	mov    ecx,edx
c0003800:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003804:	0f 85 a8 00 00 00    	jne    c00038b2 <dir_next+0xeb>
c000380a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000380d:	46                   	inc    esi
c000380e:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003811:	85 d2                	test   edx,edx
c0003813:	75 22                	jne    c0003837 <dir_next+0x70>
c0003815:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003819:	89 fa                	mov    edx,edi
c000381b:	c1 ea 05             	shr    edx,0x5
c000381e:	39 c2                	cmp    edx,eax
c0003820:	0f 82 8c 00 00 00    	jb     c00038b2 <dir_next+0xeb>
c0003826:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000382d:	b9 04 00 00 00       	mov    ecx,0x4
c0003832:	e9 8b 00 00 00       	jmp    c00038c2 <dir_next+0xfb>
c0003837:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000383b:	89 fe                	mov    esi,edi
c000383d:	c1 ee 09             	shr    esi,0x9
c0003840:	48                   	dec    eax
c0003841:	85 f0                	test   eax,esi
c0003843:	75 6d                	jne    c00038b2 <dir_next+0xeb>
c0003845:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003849:	89 e8                	mov    eax,ebp
c000384b:	e8 e2 fb ff ff       	call   c0003432 <get_fat.isra.2>
c0003850:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003854:	83 f8 01             	cmp    eax,0x1
c0003857:	89 c6                	mov    esi,eax
c0003859:	77 07                	ja     c0003862 <dir_next+0x9b>
c000385b:	b9 02 00 00 00       	mov    ecx,0x2
c0003860:	eb 60                	jmp    c00038c2 <dir_next+0xfb>
c0003862:	83 f8 ff             	cmp    eax,0xffffffff
c0003865:	75 07                	jne    c000386e <dir_next+0xa7>
c0003867:	b9 01 00 00 00       	mov    ecx,0x1
c000386c:	eb 54                	jmp    c00038c2 <dir_next+0xfb>
c000386e:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003871:	77 30                	ja     c00038a3 <dir_next+0xdc>
c0003873:	85 c9                	test   ecx,ecx
c0003875:	74 af                	je     c0003826 <dir_next+0x5f>
c0003877:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000387a:	89 d8                	mov    eax,ebx
c000387c:	e8 7e fd ff ff       	call   c00035ff <create_chain>
c0003881:	b9 07 00 00 00       	mov    ecx,0x7
c0003886:	85 c0                	test   eax,eax
c0003888:	89 c6                	mov    esi,eax
c000388a:	74 36                	je     c00038c2 <dir_next+0xfb>
c000388c:	83 f8 01             	cmp    eax,0x1
c000388f:	74 ca                	je     c000385b <dir_next+0x94>
c0003891:	83 f8 ff             	cmp    eax,0xffffffff
c0003894:	74 d1                	je     c0003867 <dir_next+0xa0>
c0003896:	89 c2                	mov    edx,eax
c0003898:	89 e8                	mov    eax,ebp
c000389a:	e8 67 f2 ff ff       	call   c0002b06 <dir_clear>
c000389f:	85 c0                	test   eax,eax
c00038a1:	75 c4                	jne    c0003867 <dir_next+0xa0>
c00038a3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00038a6:	89 f2                	mov    edx,esi
c00038a8:	89 e8                	mov    eax,ebp
c00038aa:	e8 97 e9 ff ff       	call   c0002246 <clst2sect>
c00038af:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00038b2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00038b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00038b9:	31 c9                	xor    ecx,ecx
c00038bb:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00038bf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00038c2:	83 c4 1c             	add    esp,0x1c
c00038c5:	89 c8                	mov    eax,ecx
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	5d                   	pop    ebp
c00038cb:	c3                   	ret    

c00038cc <dir_alloc>:
c00038cc:	55                   	push   ebp
c00038cd:	89 c5                	mov    ebp,eax
c00038cf:	57                   	push   edi
c00038d0:	89 d7                	mov    edi,edx
c00038d2:	56                   	push   esi
c00038d3:	31 d2                	xor    edx,edx
c00038d5:	53                   	push   ebx
c00038d6:	83 ec 0c             	sub    esp,0xc
c00038d9:	8b 30                	mov    esi,DWORD PTR [eax]
c00038db:	e8 57 fc ff ff       	call   c0003537 <dir_sdi>
c00038e0:	85 c0                	test   eax,eax
c00038e2:	75 3b                	jne    c000391f <dir_alloc+0x53>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 65 ec ff ff       	call   c0002555 <move_window>
c00038f0:	85 c0                	test   eax,eax
c00038f2:	75 2b                	jne    c000391f <dir_alloc+0x53>
c00038f4:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038f7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038fa:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003900:	74 04                	je     c0003906 <dir_alloc+0x3a>
c0003902:	85 d2                	test   edx,edx
c0003904:	75 07                	jne    c000390d <dir_alloc+0x41>
c0003906:	43                   	inc    ebx
c0003907:	39 fb                	cmp    ebx,edi
c0003909:	75 04                	jne    c000390f <dir_alloc+0x43>
c000390b:	eb 1c                	jmp    c0003929 <dir_alloc+0x5d>
c000390d:	31 db                	xor    ebx,ebx
c000390f:	ba 01 00 00 00       	mov    edx,0x1
c0003914:	89 e8                	mov    eax,ebp
c0003916:	e8 ac fe ff ff       	call   c00037c7 <dir_next>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c7                	je     c00038e6 <dir_alloc+0x1a>
c000391f:	83 f8 04             	cmp    eax,0x4
c0003922:	75 05                	jne    c0003929 <dir_alloc+0x5d>
c0003924:	b8 07 00 00 00       	mov    eax,0x7
c0003929:	83 c4 0c             	add    esp,0xc
c000392c:	5b                   	pop    ebx
c000392d:	5e                   	pop    esi
c000392e:	5f                   	pop    edi
c000392f:	5d                   	pop    ebp
c0003930:	c3                   	ret    

c0003931 <dir_read>:
c0003931:	55                   	push   ebp
c0003932:	57                   	push   edi
c0003933:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003938:	56                   	push   esi
c0003939:	be 04 00 00 00       	mov    esi,0x4
c000393e:	53                   	push   ebx
c000393f:	89 c3                	mov    ebx,eax
c0003941:	83 ec 1c             	sub    esp,0x1c
c0003944:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003948:	8b 28                	mov    ebp,DWORD PTR [eax]
c000394a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000394f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003952:	85 d2                	test   edx,edx
c0003954:	0f 84 e3 00 00 00    	je     c0003a3d <dir_read+0x10c>
c000395a:	89 e8                	mov    eax,ebp
c000395c:	e8 f4 eb ff ff       	call   c0002555 <move_window>
c0003961:	85 c0                	test   eax,eax
c0003963:	89 c6                	mov    esi,eax
c0003965:	0f 85 dd 00 00 00    	jne    c0003a48 <dir_read+0x117>
c000396b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000396e:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003971:	88 04 24             	mov    BYTE PTR [esp],al
c0003974:	85 c0                	test   eax,eax
c0003976:	0f 84 c7 00 00 00    	je     c0003a43 <dir_read+0x112>
c000397c:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000397f:	83 e1 3f             	and    ecx,0x3f
c0003982:	3d e5 00 00 00       	cmp    eax,0xe5
c0003987:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000398a:	0f 84 93 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003990:	83 f8 2e             	cmp    eax,0x2e
c0003993:	0f 84 8a 00 00 00    	je     c0003a23 <dir_read+0xf2>
c0003999:	0f b6 c9             	movzx  ecx,cl
c000399c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00039a0:	83 e1 df             	and    ecx,0xffffffdf
c00039a3:	83 f9 08             	cmp    ecx,0x8
c00039a6:	0f 94 c1             	sete   cl
c00039a9:	0f b6 c9             	movzx  ecx,cl
c00039ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00039b0:	75 71                	jne    c0003a23 <dir_read+0xf2>
c00039b2:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00039b7:	75 4a                	jne    c0003a03 <dir_read+0xd2>
c00039b9:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00039bd:	74 16                	je     c00039d5 <dir_read+0xa4>
c00039bf:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039c2:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039c9:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039d3:	eb 0e                	jmp    c00039e3 <dir_read+0xb2>
c00039d5:	89 f9                	mov    ecx,edi
c00039d7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039dc:	0f b6 c9             	movzx  ecx,cl
c00039df:	39 c1                	cmp    ecx,eax
c00039e1:	75 45                	jne    c0003a28 <dir_read+0xf7>
c00039e3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039e7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ec:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039ef:	75 37                	jne    c0003a28 <dir_read+0xf7>
c00039f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039f4:	e8 6a e8 ff ff       	call   c0002263 <pick_lfn>
c00039f9:	85 c0                	test   eax,eax
c00039fb:	74 2b                	je     c0003a28 <dir_read+0xf7>
c00039fd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003a00:	4f                   	dec    edi
c0003a01:	eb 25                	jmp    c0003a28 <dir_read+0xf7>
c0003a03:	89 f8                	mov    eax,edi
c0003a05:	84 c0                	test   al,al
c0003a07:	75 11                	jne    c0003a1a <dir_read+0xe9>
c0003a09:	89 d0                	mov    eax,edx
c0003a0b:	e8 30 ea ff ff       	call   c0002440 <sum_sfn>
c0003a10:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003a14:	75 04                	jne    c0003a1a <dir_read+0xe9>
c0003a16:	31 f6                	xor    esi,esi
c0003a18:	eb 35                	jmp    c0003a4f <dir_read+0x11e>
c0003a1a:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003a21:	eb 2c                	jmp    c0003a4f <dir_read+0x11e>
c0003a23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a28:	31 d2                	xor    edx,edx
c0003a2a:	89 d8                	mov    eax,ebx
c0003a2c:	e8 96 fd ff ff       	call   c00037c7 <dir_next>
c0003a31:	85 c0                	test   eax,eax
c0003a33:	89 c6                	mov    esi,eax
c0003a35:	0f 84 14 ff ff ff    	je     c000394f <dir_read+0x1e>
c0003a3b:	eb 0b                	jmp    c0003a48 <dir_read+0x117>
c0003a3d:	85 f6                	test   esi,esi
c0003a3f:	74 d5                	je     c0003a16 <dir_read+0xe5>
c0003a41:	eb 05                	jmp    c0003a48 <dir_read+0x117>
c0003a43:	be 04 00 00 00       	mov    esi,0x4
c0003a48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a4f:	83 c4 1c             	add    esp,0x1c
c0003a52:	89 f0                	mov    eax,esi
c0003a54:	5b                   	pop    ebx
c0003a55:	5e                   	pop    esi
c0003a56:	5f                   	pop    edi
c0003a57:	5d                   	pop    ebp
c0003a58:	c3                   	ret    

c0003a59 <dir_remove>:
c0003a59:	57                   	push   edi
c0003a5a:	56                   	push   esi
c0003a5b:	53                   	push   ebx
c0003a5c:	89 c3                	mov    ebx,eax
c0003a5e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a61:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a63:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a66:	83 fa ff             	cmp    edx,0xffffffff
c0003a69:	74 09                	je     c0003a74 <dir_remove+0x1b>
c0003a6b:	e8 c7 fa ff ff       	call   c0003537 <dir_sdi>
c0003a70:	85 c0                	test   eax,eax
c0003a72:	75 34                	jne    c0003aa8 <dir_remove+0x4f>
c0003a74:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a77:	89 f0                	mov    eax,esi
c0003a79:	e8 d7 ea ff ff       	call   c0002555 <move_window>
c0003a7e:	85 c0                	test   eax,eax
c0003a80:	75 1c                	jne    c0003a9e <dir_remove+0x45>
c0003a82:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a85:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a88:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a8c:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a8f:	73 17                	jae    c0003aa8 <dir_remove+0x4f>
c0003a91:	31 d2                	xor    edx,edx
c0003a93:	89 d8                	mov    eax,ebx
c0003a95:	e8 2d fd ff ff       	call   c00037c7 <dir_next>
c0003a9a:	85 c0                	test   eax,eax
c0003a9c:	74 d6                	je     c0003a74 <dir_remove+0x1b>
c0003a9e:	83 f8 04             	cmp    eax,0x4
c0003aa1:	75 05                	jne    c0003aa8 <dir_remove+0x4f>
c0003aa3:	b8 02 00 00 00       	mov    eax,0x2
c0003aa8:	5b                   	pop    ebx
c0003aa9:	5e                   	pop    esi
c0003aaa:	5f                   	pop    edi
c0003aab:	c3                   	ret    

c0003aac <dir_find>:
c0003aac:	55                   	push   ebp
c0003aad:	31 d2                	xor    edx,edx
c0003aaf:	57                   	push   edi
c0003ab0:	56                   	push   esi
c0003ab1:	53                   	push   ebx
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 ec 1c             	sub    esp,0x1c
c0003ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abd:	89 d8                	mov    eax,ebx
c0003abf:	e8 73 fa ff ff       	call   c0003537 <dir_sdi>
c0003ac4:	85 c0                	test   eax,eax
c0003ac6:	89 c6                	mov    esi,eax
c0003ac8:	0f 85 22 01 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003ace:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ad5:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ada:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003adf:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae6:	e8 6a ea ff ff       	call   c0002555 <move_window>
c0003aeb:	85 c0                	test   eax,eax
c0003aed:	89 c6                	mov    esi,eax
c0003aef:	0f 85 fb 00 00 00    	jne    c0003bf0 <dir_find+0x144>
c0003af5:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003af8:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003afb:	85 d2                	test   edx,edx
c0003afd:	89 d1                	mov    ecx,edx
c0003aff:	0f 84 e6 00 00 00    	je     c0003beb <dir_find+0x13f>
c0003b05:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003b08:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003b0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b10:	83 e0 3f             	and    eax,0x3f
c0003b13:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003b19:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003b1c:	0f 84 a8 00 00 00    	je     c0003bca <dir_find+0x11e>
c0003b22:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003b27:	0f b6 c0             	movzx  eax,al
c0003b2a:	74 0b                	je     c0003b37 <dir_find+0x8b>
c0003b2c:	83 f8 0f             	cmp    eax,0xf
c0003b2f:	0f 85 95 00 00 00    	jne    c0003bca <dir_find+0x11e>
c0003b35:	eb 05                	jmp    c0003b3c <dir_find+0x90>
c0003b37:	83 f8 0f             	cmp    eax,0xf
c0003b3a:	75 62                	jne    c0003b9e <dir_find+0xf2>
c0003b3c:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b40:	0f 85 90 00 00 00    	jne    c0003bd6 <dir_find+0x12a>
c0003b46:	f6 c1 40             	test   cl,0x40
c0003b49:	74 15                	je     c0003b60 <dir_find+0xb4>
c0003b4b:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b4e:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b54:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b5e:	eb 11                	jmp    c0003b71 <dir_find+0xc5>
c0003b60:	89 e8                	mov    eax,ebp
c0003b62:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b67:	0f b6 d0             	movzx  edx,al
c0003b6a:	0f b6 c1             	movzx  eax,cl
c0003b6d:	39 c2                	cmp    edx,eax
c0003b6f:	75 65                	jne    c0003bd6 <dir_find+0x12a>
c0003b71:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b75:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b7a:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b7d:	75 57                	jne    c0003bd6 <dir_find+0x12a>
c0003b7f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b87:	89 fa                	mov    edx,edi
c0003b89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b8c:	e8 2c f3 ff ff       	call   c0002ebd <cmp_lfn>
c0003b91:	85 c0                	test   eax,eax
c0003b93:	74 41                	je     c0003bd6 <dir_find+0x12a>
c0003b95:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b99:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b9c:	eb 38                	jmp    c0003bd6 <dir_find+0x12a>
c0003b9e:	89 e8                	mov    eax,ebp
c0003ba0:	84 c0                	test   al,al
c0003ba2:	75 0d                	jne    c0003bb1 <dir_find+0x105>
c0003ba4:	89 f8                	mov    eax,edi
c0003ba6:	e8 95 e8 ff ff       	call   c0002440 <sum_sfn>
c0003bab:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003baf:	74 3f                	je     c0003bf0 <dir_find+0x144>
c0003bb1:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003bb5:	75 13                	jne    c0003bca <dir_find+0x11e>
c0003bb7:	8d 53 20             	lea    edx,[ebx+0x20]
c0003bba:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bbf:	89 f8                	mov    eax,edi
c0003bc1:	e8 75 e4 ff ff       	call   c000203b <mem_cmp>
c0003bc6:	85 c0                	test   eax,eax
c0003bc8:	74 26                	je     c0003bf0 <dir_find+0x144>
c0003bca:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003bd1:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bd6:	31 d2                	xor    edx,edx
c0003bd8:	89 d8                	mov    eax,ebx
c0003bda:	e8 e8 fb ff ff       	call   c00037c7 <dir_next>
c0003bdf:	85 c0                	test   eax,eax
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	0f 84 f6 fe ff ff    	je     c0003adf <dir_find+0x33>
c0003be9:	eb 05                	jmp    c0003bf0 <dir_find+0x144>
c0003beb:	be 04 00 00 00       	mov    esi,0x4
c0003bf0:	83 c4 1c             	add    esp,0x1c
c0003bf3:	89 f0                	mov    eax,esi
c0003bf5:	5b                   	pop    ebx
c0003bf6:	5e                   	pop    esi
c0003bf7:	5f                   	pop    edi
c0003bf8:	5d                   	pop    ebp
c0003bf9:	c3                   	ret    

c0003bfa <follow_path>:
c0003bfa:	56                   	push   esi
c0003bfb:	53                   	push   ebx
c0003bfc:	89 c3                	mov    ebx,eax
c0003bfe:	83 ec 14             	sub    esp,0x14
c0003c01:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003c05:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c0b:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003c0e:	83 fa 2f             	cmp    edx,0x2f
c0003c11:	75 07                	jne    c0003c1a <follow_path+0x20>
c0003c13:	40                   	inc    eax
c0003c14:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c18:	eb ed                	jmp    c0003c07 <follow_path+0xd>
c0003c1a:	83 fa 5c             	cmp    edx,0x5c
c0003c1d:	74 f4                	je     c0003c13 <follow_path+0x19>
c0003c1f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003c26:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c29:	77 3e                	ja     c0003c69 <follow_path+0x6f>
c0003c2b:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c2f:	31 d2                	xor    edx,edx
c0003c31:	89 d8                	mov    eax,ebx
c0003c33:	e8 ff f8 ff ff       	call   c0003537 <dir_sdi>
c0003c38:	eb 57                	jmp    c0003c91 <follow_path+0x97>
c0003c3a:	89 d8                	mov    eax,ebx
c0003c3c:	e8 6b fe ff ff       	call   c0003aac <dir_find>
c0003c41:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c44:	85 c0                	test   eax,eax
c0003c46:	75 32                	jne    c0003c7a <follow_path+0x80>
c0003c48:	80 e2 04             	and    dl,0x4
c0003c4b:	75 44                	jne    c0003c91 <follow_path+0x97>
c0003c4d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c51:	74 39                	je     c0003c8c <follow_path+0x92>
c0003c53:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c56:	25 ff 01 00 00       	and    eax,0x1ff
c0003c5b:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c5f:	8a 06                	mov    al,BYTE PTR [esi]
c0003c61:	e8 7b f7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003c66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c69:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c6d:	89 d8                	mov    eax,ebx
c0003c6f:	e8 8e ef ff ff       	call   c0002c02 <create_name>
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 c2                	je     c0003c3a <follow_path+0x40>
c0003c78:	eb 17                	jmp    c0003c91 <follow_path+0x97>
c0003c7a:	83 f8 04             	cmp    eax,0x4
c0003c7d:	75 12                	jne    c0003c91 <follow_path+0x97>
c0003c7f:	80 e2 04             	and    dl,0x4
c0003c82:	ba 05 00 00 00       	mov    edx,0x5
c0003c87:	0f 44 c2             	cmove  eax,edx
c0003c8a:	eb 05                	jmp    c0003c91 <follow_path+0x97>
c0003c8c:	b8 05 00 00 00       	mov    eax,0x5
c0003c91:	83 c4 14             	add    esp,0x14
c0003c94:	5b                   	pop    ebx
c0003c95:	5e                   	pop    esi
c0003c96:	c3                   	ret    

c0003c97 <dir_register>:
c0003c97:	55                   	push   ebp
c0003c98:	57                   	push   edi
c0003c99:	56                   	push   esi
c0003c9a:	be 06 00 00 00       	mov    esi,0x6
c0003c9f:	53                   	push   ebx
c0003ca0:	83 ec 2c             	sub    esp,0x2c
c0003ca3:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ca6:	80 e2 a0             	and    dl,0xa0
c0003ca9:	0f 85 66 01 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003caf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003cb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0003cb9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003cbc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cc0:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003cc5:	74 06                	je     c0003ccd <dir_register+0x36>
c0003cc7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ccb:	eb ef                	jmp    c0003cbc <dir_register+0x25>
c0003ccd:	89 c3                	mov    ebx,eax
c0003ccf:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cd4:	8d 40 20             	lea    eax,[eax+0x20]
c0003cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cdb:	89 c2                	mov    edx,eax
c0003cdd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ce1:	e8 36 e3 ff ff       	call   c000201c <mem_cpy>
c0003ce6:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ceb:	74 48                	je     c0003d35 <dir_register+0x9e>
c0003ced:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cf1:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf6:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cf9:	55                   	push   ebp
c0003cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cfe:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003d02:	e8 77 e6 ff ff       	call   c000237e <gen_numname>
c0003d07:	58                   	pop    eax
c0003d08:	89 d8                	mov    eax,ebx
c0003d0a:	e8 9d fd ff ff       	call   c0003aac <dir_find>
c0003d0f:	85 c0                	test   eax,eax
c0003d11:	89 c6                	mov    esi,eax
c0003d13:	75 10                	jne    c0003d25 <dir_register+0x8e>
c0003d15:	45                   	inc    ebp
c0003d16:	83 fd 64             	cmp    ebp,0x64
c0003d19:	75 db                	jne    c0003cf6 <dir_register+0x5f>
c0003d1b:	be 07 00 00 00       	mov    esi,0x7
c0003d20:	e9 f0 00 00 00       	jmp    c0003e15 <dir_register+0x17e>
c0003d25:	83 f8 04             	cmp    eax,0x4
c0003d28:	0f 85 e7 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d2e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d32:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d35:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d3a:	bd 01 00 00 00       	mov    ebp,0x1
c0003d3f:	74 13                	je     c0003d54 <dir_register+0xbd>
c0003d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d45:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d4a:	31 d2                	xor    edx,edx
c0003d4c:	83 c0 0c             	add    eax,0xc
c0003d4f:	f7 f1                	div    ecx
c0003d51:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d54:	89 ea                	mov    edx,ebp
c0003d56:	89 d8                	mov    eax,ebx
c0003d58:	e8 6f fb ff ff       	call   c00038cc <dir_alloc>
c0003d5d:	85 c0                	test   eax,eax
c0003d5f:	89 c6                	mov    esi,eax
c0003d61:	0f 85 ae 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d67:	4d                   	dec    ebp
c0003d68:	74 6b                	je     c0003dd5 <dir_register+0x13e>
c0003d6a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d6d:	89 e8                	mov    eax,ebp
c0003d6f:	c1 e0 05             	shl    eax,0x5
c0003d72:	29 c2                	sub    edx,eax
c0003d74:	89 d8                	mov    eax,ebx
c0003d76:	e8 bc f7 ff ff       	call   c0003537 <dir_sdi>
c0003d7b:	85 c0                	test   eax,eax
c0003d7d:	89 c6                	mov    esi,eax
c0003d7f:	0f 85 90 00 00 00    	jne    c0003e15 <dir_register+0x17e>
c0003d85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d89:	e8 b2 e6 ff ff       	call   c0002440 <sum_sfn>
c0003d8e:	0f b6 c0             	movzx  eax,al
c0003d91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d95:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d98:	89 f8                	mov    eax,edi
c0003d9a:	e8 b6 e7 ff ff       	call   c0002555 <move_window>
c0003d9f:	85 c0                	test   eax,eax
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	75 70                	jne    c0003e15 <dir_register+0x17e>
c0003da5:	83 ec 0c             	sub    esp,0xc
c0003da8:	89 e8                	mov    eax,ebp
c0003daa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dad:	0f b6 c8             	movzx  ecx,al
c0003db0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003db3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003db7:	e8 27 e5 ff ff       	call   c00022e3 <put_lfn>
c0003dbc:	31 d2                	xor    edx,edx
c0003dbe:	89 d8                	mov    eax,ebx
c0003dc0:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dc4:	e8 fe f9 ff ff       	call   c00037c7 <dir_next>
c0003dc9:	83 c4 10             	add    esp,0x10
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	89 c6                	mov    esi,eax
c0003dd0:	75 43                	jne    c0003e15 <dir_register+0x17e>
c0003dd2:	4d                   	dec    ebp
c0003dd3:	75 c0                	jne    c0003d95 <dir_register+0xfe>
c0003dd5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003dd8:	89 f8                	mov    eax,edi
c0003dda:	e8 76 e7 ff ff       	call   c0002555 <move_window>
c0003ddf:	85 c0                	test   eax,eax
c0003de1:	89 c6                	mov    esi,eax
c0003de3:	75 30                	jne    c0003e15 <dir_register+0x17e>
c0003de5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003de8:	b9 20 00 00 00       	mov    ecx,0x20
c0003ded:	31 d2                	xor    edx,edx
c0003def:	e8 3d e2 ff ff       	call   c0002031 <mem_set>
c0003df4:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e00:	e8 17 e2 ff ff       	call   c000201c <mem_cpy>
c0003e05:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003e08:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003e0b:	83 e0 18             	and    eax,0x18
c0003e0e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003e11:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003e15:	83 c4 2c             	add    esp,0x2c
c0003e18:	89 f0                	mov    eax,esi
c0003e1a:	5b                   	pop    ebx
c0003e1b:	5e                   	pop    esi
c0003e1c:	5f                   	pop    edi
c0003e1d:	5d                   	pop    ebp
c0003e1e:	c3                   	ret    

c0003e1f <f_mount>:
c0003e1f:	53                   	push   ebx
c0003e20:	83 ec 18             	sub    esp,0x18
c0003e23:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e2f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e33:	e8 28 e6 ff ff       	call   c0002460 <get_ldnumber>
c0003e38:	89 c2                	mov    edx,eax
c0003e3a:	b8 0b 00 00 00       	mov    eax,0xb
c0003e3f:	85 d2                	test   edx,edx
c0003e41:	78 39                	js     c0003e7c <f_mount+0x5d>
c0003e43:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e4a:	85 c0                	test   eax,eax
c0003e4c:	74 03                	je     c0003e51 <f_mount+0x32>
c0003e4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e55:	85 c0                	test   eax,eax
c0003e57:	74 03                	je     c0003e5c <f_mount+0x3d>
c0003e59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e60:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e67:	31 c0                	xor    eax,eax
c0003e69:	84 db                	test   bl,bl
c0003e6b:	74 0f                	je     c0003e7c <f_mount+0x5d>
c0003e6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e71:	31 c9                	xor    ecx,ecx
c0003e73:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e77:	e8 36 e8 ff ff       	call   c00026b2 <mount_volume>
c0003e7c:	83 c4 18             	add    esp,0x18
c0003e7f:	5b                   	pop    ebx
c0003e80:	c3                   	ret    

c0003e81 <f_open>:
c0003e81:	55                   	push   ebp
c0003e82:	b8 09 00 00 00       	mov    eax,0x9
c0003e87:	57                   	push   edi
c0003e88:	56                   	push   esi
c0003e89:	53                   	push   ebx
c0003e8a:	83 ec 5c             	sub    esp,0x5c
c0003e8d:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e95:	85 db                	test   ebx,ebx
c0003e97:	0f 84 9f 02 00 00    	je     c000413c <f_open+0x2bb>
c0003e9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ea1:	89 fd                	mov    ebp,edi
c0003ea3:	83 e5 3f             	and    ebp,0x3f
c0003ea6:	89 e8                	mov    eax,ebp
c0003ea8:	89 ee                	mov    esi,ebp
c0003eaa:	0f b6 c8             	movzx  ecx,al
c0003ead:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003eb1:	e8 fc e7 ff ff       	call   c00026b2 <mount_volume>
c0003eb6:	85 c0                	test   eax,eax
c0003eb8:	0f 85 78 02 00 00    	jne    c0004136 <f_open+0x2b5>
c0003ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec2:	83 ec 0c             	sub    esp,0xc
c0003ec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ec9:	68 00 02 00 00       	push   0x200
c0003ece:	e8 61 1f 00 00       	call   c0005e34 <ff_memalloc>
c0003ed3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003ed7:	83 c4 10             	add    esp,0x10
c0003eda:	b8 11 00 00 00       	mov    eax,0x11
c0003edf:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ee4:	0f 84 52 02 00 00    	je     c000413c <f_open+0x2bb>
c0003eea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef2:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ef6:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ef9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003efd:	e8 f8 fc ff ff       	call   c0003bfa <follow_path>
c0003f02:	85 c0                	test   eax,eax
c0003f04:	75 0d                	jne    c0003f13 <f_open+0x92>
c0003f06:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003f0b:	ba 06 00 00 00       	mov    edx,0x6
c0003f10:	0f 45 c2             	cmovne eax,edx
c0003f13:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003f19:	0f 84 d5 00 00 00    	je     c0003ff4 <f_open+0x173>
c0003f1f:	85 c0                	test   eax,eax
c0003f21:	74 21                	je     c0003f44 <f_open+0xc3>
c0003f23:	83 f8 04             	cmp    eax,0x4
c0003f26:	0f 85 ef 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f2c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f30:	e8 62 fd ff ff       	call   c0003c97 <dir_register>
c0003f35:	85 c0                	test   eax,eax
c0003f37:	0f 85 de 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f3d:	83 cd 08             	or     ebp,0x8
c0003f40:	89 ee                	mov    esi,ebp
c0003f42:	eb 2c                	jmp    c0003f70 <f_open+0xef>
c0003f44:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f48:	b8 07 00 00 00       	mov    eax,0x7
c0003f4d:	80 e2 11             	and    dl,0x11
c0003f50:	0f 85 c5 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f56:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f5c:	b8 08 00 00 00       	mov    eax,0x8
c0003f61:	0f 85 b4 01 00 00    	jne    c000411b <f_open+0x29a>
c0003f67:	83 e7 08             	and    edi,0x8
c0003f6a:	0f 84 b1 00 00 00    	je     c0004021 <f_open+0x1a0>
c0003f70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f74:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f78:	8a 00                	mov    al,BYTE PTR [eax]
c0003f7a:	89 ea                	mov    edx,ebp
c0003f7c:	e8 60 f4 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0003f81:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f86:	89 c7                	mov    edi,eax
c0003f88:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f8b:	e8 89 e0 ff ff       	call   c0002019 <st_dword>
c0003f90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f94:	31 c9                	xor    ecx,ecx
c0003f96:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003fa2:	e8 63 f4 ff ff       	call   c000340a <st_clust.isra.1>
c0003fa7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003fab:	31 d2                	xor    edx,edx
c0003fad:	83 c0 1c             	add    eax,0x1c
c0003fb0:	e8 64 e0 ff ff       	call   c0002019 <st_dword>
c0003fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb9:	85 ff                	test   edi,edi
c0003fbb:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003fbf:	74 60                	je     c0004021 <f_open+0x1a0>
c0003fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	89 fa                	mov    edx,edi
c0003fc9:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fd0:	e8 64 f7 ff ff       	call   c0003739 <remove_chain>
c0003fd5:	85 c0                	test   eax,eax
c0003fd7:	0f 85 3e 01 00 00    	jne    c000411b <f_open+0x29a>
c0003fdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fe1:	89 ea                	mov    edx,ebp
c0003fe3:	4f                   	dec    edi
c0003fe4:	e8 6c e5 ff ff       	call   c0002555 <move_window>
c0003fe9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fed:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ff0:	85 c0                	test   eax,eax
c0003ff2:	eb 27                	jmp    c000401b <f_open+0x19a>
c0003ff4:	85 c0                	test   eax,eax
c0003ff6:	0f 85 1f 01 00 00    	jne    c000411b <f_open+0x29a>
c0003ffc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0004000:	b8 04 00 00 00       	mov    eax,0x4
c0004005:	f6 c2 10             	test   dl,0x10
c0004008:	0f 85 0d 01 00 00    	jne    c000411b <f_open+0x29a>
c000400e:	83 e7 02             	and    edi,0x2
c0004011:	74 0e                	je     c0004021 <f_open+0x1a0>
c0004013:	b8 07 00 00 00       	mov    eax,0x7
c0004018:	80 e2 01             	and    dl,0x1
c000401b:	0f 85 fa 00 00 00    	jne    c000411b <f_open+0x29a>
c0004021:	f7 c6 08 00 00 00    	test   esi,0x8
c0004027:	74 03                	je     c000402c <f_open+0x1ab>
c0004029:	83 ce 40             	or     esi,0x40
c000402c:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004030:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0004034:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0004037:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000403a:	89 fa                	mov    edx,edi
c000403c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000403f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004042:	e8 9a f3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004047:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000404a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000404d:	e8 ab df ff ff       	call   c0001ffd <ld_dword>
c0004052:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004055:	31 d2                	xor    edx,edx
c0004057:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004059:	b9 00 02 00 00       	mov    ecx,0x200
c000405e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004061:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004065:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004069:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004070:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004077:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000407b:	89 f0                	mov    eax,esi
c000407d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004080:	89 f8                	mov    eax,edi
c0004082:	e8 aa df ff ff       	call   c0002031 <mem_set>
c0004087:	83 e6 20             	and    esi,0x20
c000408a:	75 07                	jne    c0004093 <f_open+0x212>
c000408c:	31 c0                	xor    eax,eax
c000408e:	e9 88 00 00 00       	jmp    c000411b <f_open+0x29a>
c0004093:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0004096:	85 f6                	test   esi,esi
c0004098:	74 f2                	je     c000408c <f_open+0x20b>
c000409a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000409d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00040a1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00040a4:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00040a8:	31 c0                	xor    eax,eax
c00040aa:	c1 e5 09             	shl    ebp,0x9
c00040ad:	85 c0                	test   eax,eax
c00040af:	75 23                	jne    c00040d4 <f_open+0x253>
c00040b1:	39 ee                	cmp    esi,ebp
c00040b3:	76 1f                	jbe    c00040d4 <f_open+0x253>
c00040b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040b7:	e8 76 f3 ff ff       	call   c0003432 <get_fat.isra.2>
c00040bc:	89 c2                	mov    edx,eax
c00040be:	b8 02 00 00 00       	mov    eax,0x2
c00040c3:	83 fa 01             	cmp    edx,0x1
c00040c6:	76 08                	jbe    c00040d0 <f_open+0x24f>
c00040c8:	31 c0                	xor    eax,eax
c00040ca:	83 fa ff             	cmp    edx,0xffffffff
c00040cd:	0f 94 c0             	sete   al
c00040d0:	29 ee                	sub    esi,ebp
c00040d2:	eb d9                	jmp    c00040ad <f_open+0x22c>
c00040d4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040d7:	85 c0                	test   eax,eax
c00040d9:	75 40                	jne    c000411b <f_open+0x29a>
c00040db:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040e1:	74 a9                	je     c000408c <f_open+0x20b>
c00040e3:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040e7:	89 e8                	mov    eax,ebp
c00040e9:	e8 58 e1 ff ff       	call   c0002246 <clst2sect>
c00040ee:	89 c2                	mov    edx,eax
c00040f0:	b8 02 00 00 00       	mov    eax,0x2
c00040f5:	85 d2                	test   edx,edx
c00040f7:	74 22                	je     c000411b <f_open+0x29a>
c00040f9:	c1 ee 09             	shr    esi,0x9
c00040fc:	8d 04 16             	lea    eax,[esi+edx*1]
c00040ff:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004102:	6a 01                	push   0x1
c0004104:	50                   	push   eax
c0004105:	57                   	push   edi
c0004106:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000410a:	50                   	push   eax
c000410b:	e8 95 de ff ff       	call   c0001fa5 <disk_read>
c0004110:	83 c4 10             	add    esp,0x10
c0004113:	85 c0                	test   eax,eax
c0004115:	0f 95 c0             	setne  al
c0004118:	0f b6 c0             	movzx  eax,al
c000411b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000411f:	83 ec 0c             	sub    esp,0xc
c0004122:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0004126:	e8 21 1d 00 00       	call   c0005e4c <ff_memfree>
c000412b:	83 c4 10             	add    esp,0x10
c000412e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004132:	85 c0                	test   eax,eax
c0004134:	74 06                	je     c000413c <f_open+0x2bb>
c0004136:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000413c:	83 c4 5c             	add    esp,0x5c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_read>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000415b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004161:	89 d8                	mov    eax,ebx
c0004163:	e8 44 e3 ff ff       	call   c00024ac <validate>
c0004168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000416c:	85 c0                	test   eax,eax
c000416e:	0f 85 a5 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004174:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0004178:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000417c:	85 c0                	test   eax,eax
c000417e:	0f 85 95 01 00 00    	jne    c0004319 <f_read+0x1d5>
c0004184:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004188:	0f 84 83 01 00 00    	je     c0004311 <f_read+0x1cd>
c000418e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004191:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004194:	39 f8                	cmp    eax,edi
c0004196:	0f 46 f8             	cmovbe edi,eax
c0004199:	85 ff                	test   edi,edi
c000419b:	0f 84 78 01 00 00    	je     c0004319 <f_read+0x1d5>
c00041a1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a4:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a9:	0f 85 2b 01 00 00    	jne    c00042da <f_read+0x196>
c00041af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b3:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b7:	89 c2                	mov    edx,eax
c00041b9:	c1 ea 09             	shr    edx,0x9
c00041bc:	4d                   	dec    ebp
c00041bd:	21 d5                	and    ebp,edx
c00041bf:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c3:	75 42                	jne    c0004207 <f_read+0xc3>
c00041c5:	85 c0                	test   eax,eax
c00041c7:	75 05                	jne    c00041ce <f_read+0x8a>
c00041c9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041cc:	eb 0a                	jmp    c00041d8 <f_read+0x94>
c00041ce:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041d3:	e8 5a f2 ff ff       	call   c0003432 <get_fat.isra.2>
c00041d8:	83 f8 01             	cmp    eax,0x1
c00041db:	77 11                	ja     c00041ee <f_read+0xaa>
c00041dd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041e1:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041e9:	e9 2b 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c00041ee:	83 f8 ff             	cmp    eax,0xffffffff
c00041f1:	75 11                	jne    c0004204 <f_read+0xc0>
c00041f3:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041f7:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041ff:	e9 15 01 00 00       	jmp    c0004319 <f_read+0x1d5>
c0004204:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004207:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000420b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000420e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004212:	89 c8                	mov    eax,ecx
c0004214:	e8 2d e0 ff ff       	call   c0002246 <clst2sect>
c0004219:	85 c0                	test   eax,eax
c000421b:	74 c0                	je     c00041dd <f_read+0x99>
c000421d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004221:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004227:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c000422a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000422e:	76 58                	jbe    c0004288 <f_read+0x144>
c0004230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004234:	89 fe                	mov    esi,edi
c0004236:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000423a:	c1 ee 09             	shr    esi,0x9
c000423d:	01 f2                	add    edx,esi
c000423f:	39 c2                	cmp    edx,eax
c0004241:	76 06                	jbe    c0004249 <f_read+0x105>
c0004243:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004247:	89 c6                	mov    esi,eax
c0004249:	56                   	push   esi
c000424a:	55                   	push   ebp
c000424b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000424f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004253:	50                   	push   eax
c0004254:	e8 4c dd ff ff       	call   c0001fa5 <disk_read>
c0004259:	83 c4 10             	add    esp,0x10
c000425c:	85 c0                	test   eax,eax
c000425e:	75 93                	jne    c00041f3 <f_read+0xaf>
c0004260:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004264:	74 1d                	je     c0004283 <f_read+0x13f>
c0004266:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004269:	29 e8                	sub    eax,ebp
c000426b:	39 f0                	cmp    eax,esi
c000426d:	73 14                	jae    c0004283 <f_read+0x13f>
c000426f:	c1 e0 09             	shl    eax,0x9
c0004272:	b9 00 02 00 00       	mov    ecx,0x200
c0004277:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000427b:	8d 53 28             	lea    edx,[ebx+0x28]
c000427e:	e8 99 dd ff ff       	call   c000201c <mem_cpy>
c0004283:	c1 e6 09             	shl    esi,0x9
c0004286:	eb 75                	jmp    c00042fd <f_read+0x1b9>
c0004288:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000428b:	39 e8                	cmp    eax,ebp
c000428d:	74 48                	je     c00042d7 <f_read+0x193>
c000428f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004293:	8d 73 28             	lea    esi,[ebx+0x28]
c0004296:	74 22                	je     c00042ba <f_read+0x176>
c0004298:	6a 01                	push   0x1
c000429a:	50                   	push   eax
c000429b:	56                   	push   esi
c000429c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042a0:	50                   	push   eax
c00042a1:	e8 15 dd ff ff       	call   c0001fbb <disk_write>
c00042a6:	83 c4 10             	add    esp,0x10
c00042a9:	85 c0                	test   eax,eax
c00042ab:	0f 85 42 ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042b1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042b4:	83 e0 7f             	and    eax,0x7f
c00042b7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ba:	6a 01                	push   0x1
c00042bc:	55                   	push   ebp
c00042bd:	56                   	push   esi
c00042be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042c2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042c6:	50                   	push   eax
c00042c7:	e8 d9 dc ff ff       	call   c0001fa5 <disk_read>
c00042cc:	83 c4 10             	add    esp,0x10
c00042cf:	85 c0                	test   eax,eax
c00042d1:	0f 85 1c ff ff ff    	jne    c00041f3 <f_read+0xaf>
c00042d7:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042dd:	be 00 02 00 00       	mov    esi,0x200
c00042e2:	25 ff 01 00 00       	and    eax,0x1ff
c00042e7:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042eb:	29 c6                	sub    esi,eax
c00042ed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042f1:	39 f7                	cmp    edi,esi
c00042f3:	0f 46 f7             	cmovbe esi,edi
c00042f6:	89 f1                	mov    ecx,esi
c00042f8:	e8 1f dd ff ff       	call   c000201c <mem_cpy>
c00042fd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004301:	29 f7                	sub    edi,esi
c0004303:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004307:	01 30                	add    DWORD PTR [eax],esi
c0004309:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000430c:	e9 88 fe ff ff       	jmp    c0004199 <f_read+0x55>
c0004311:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000431d:	83 c4 2c             	add    esp,0x2c
c0004320:	5b                   	pop    ebx
c0004321:	5e                   	pop    esi
c0004322:	5f                   	pop    edi
c0004323:	5d                   	pop    ebp
c0004324:	c3                   	ret    

c0004325 <f_write>:
c0004325:	55                   	push   ebp
c0004326:	57                   	push   edi
c0004327:	56                   	push   esi
c0004328:	53                   	push   ebx
c0004329:	83 ec 2c             	sub    esp,0x2c
c000432c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004330:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004334:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004338:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000433e:	89 d8                	mov    eax,ebx
c0004340:	e8 67 e1 ff ff       	call   c00024ac <validate>
c0004345:	85 c0                	test   eax,eax
c0004347:	89 c7                	mov    edi,eax
c0004349:	0f 85 13 02 00 00    	jne    c0004562 <f_write+0x23d>
c000434f:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004353:	85 ff                	test   edi,edi
c0004355:	0f 85 07 02 00 00    	jne    c0004562 <f_write+0x23d>
c000435b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435f:	0f 84 f8 01 00 00    	je     c000455d <f_write+0x238>
c0004365:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004368:	89 c1                	mov    ecx,eax
c000436a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000436e:	0f 83 ed 00 00 00    	jae    c0004461 <f_write+0x13c>
c0004374:	f7 d0                	not    eax
c0004376:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000437a:	e9 e2 00 00 00       	jmp    c0004461 <f_write+0x13c>
c000437f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004382:	a9 ff 01 00 00       	test   eax,0x1ff
c0004387:	0f 85 9b 01 00 00    	jne    c0004528 <f_write+0x203>
c000438d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004391:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0004395:	89 c2                	mov    edx,eax
c0004397:	c1 ea 09             	shr    edx,0x9
c000439a:	4d                   	dec    ebp
c000439b:	21 d5                	and    ebp,edx
c000439d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00043a1:	0f 84 c7 00 00 00    	je     c000446e <f_write+0x149>
c00043a7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00043ab:	0f 85 23 01 00 00    	jne    c00044d4 <f_write+0x1af>
c00043b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043bc:	89 c8                	mov    eax,ecx
c00043be:	e8 83 de ff ff       	call   c0002246 <clst2sect>
c00043c3:	85 c0                	test   eax,eax
c00043c5:	0f 84 d3 00 00 00    	je     c000449e <f_write+0x179>
c00043cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043cf:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043d7:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043de:	0f 86 1c 01 00 00    	jbe    c0004500 <f_write+0x1db>
c00043e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043ec:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043f0:	c1 ee 09             	shr    esi,0x9
c00043f3:	01 f2                	add    edx,esi
c00043f5:	39 c2                	cmp    edx,eax
c00043f7:	76 06                	jbe    c00043ff <f_write+0xda>
c00043f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043fd:	89 c6                	mov    esi,eax
c00043ff:	56                   	push   esi
c0004400:	55                   	push   ebp
c0004401:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004405:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004409:	50                   	push   eax
c000440a:	e8 ac db ff ff       	call   c0001fbb <disk_write>
c000440f:	83 c4 10             	add    esp,0x10
c0004412:	85 c0                	test   eax,eax
c0004414:	0f 85 97 00 00 00    	jne    c00044b1 <f_write+0x18c>
c000441a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000441d:	29 ea                	sub    edx,ebp
c000441f:	39 f2                	cmp    edx,esi
c0004421:	73 1d                	jae    c0004440 <f_write+0x11b>
c0004423:	c1 e2 09             	shl    edx,0x9
c0004426:	b9 00 02 00 00       	mov    ecx,0x200
c000442b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000442f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004432:	e8 e5 db ff ff       	call   c000201c <mem_cpy>
c0004437:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000443a:	83 e0 7f             	and    eax,0x7f
c000443d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004440:	c1 e6 09             	shl    esi,0x9
c0004443:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004447:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000444b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000444f:	01 30                	add    DWORD PTR [eax],esi
c0004451:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004454:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004457:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000445a:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000445e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004461:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004466:	0f 85 13 ff ff ff    	jne    c000437f <f_write+0x5a>
c000446c:	eb 1d                	jmp    c000448b <f_write+0x166>
c000446e:	85 c0                	test   eax,eax
c0004470:	75 0b                	jne    c000447d <f_write+0x158>
c0004472:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004475:	31 d2                	xor    edx,edx
c0004477:	85 c0                	test   eax,eax
c0004479:	75 1e                	jne    c0004499 <f_write+0x174>
c000447b:	eb 03                	jmp    c0004480 <f_write+0x15b>
c000447d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004480:	89 d8                	mov    eax,ebx
c0004482:	e8 78 f1 ff ff       	call   c00035ff <create_chain>
c0004487:	85 c0                	test   eax,eax
c0004489:	75 0e                	jne    c0004499 <f_write+0x174>
c000448b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000448e:	83 c8 40             	or     eax,0x40
c0004491:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004494:	e9 c9 00 00 00       	jmp    c0004562 <f_write+0x23d>
c0004499:	83 f8 01             	cmp    eax,0x1
c000449c:	75 0e                	jne    c00044ac <f_write+0x187>
c000449e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044a2:	bf 02 00 00 00       	mov    edi,0x2
c00044a7:	e9 b6 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044ac:	83 f8 ff             	cmp    eax,0xffffffff
c00044af:	75 0e                	jne    c00044bf <f_write+0x19a>
c00044b1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00044b5:	bf 01 00 00 00       	mov    edi,0x1
c00044ba:	e9 a3 00 00 00       	jmp    c0004562 <f_write+0x23d>
c00044bf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044c6:	0f 85 db fe ff ff    	jne    c00043a7 <f_write+0x82>
c00044cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044cf:	e9 d3 fe ff ff       	jmp    c00043a7 <f_write+0x82>
c00044d4:	6a 01                	push   0x1
c00044d6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044d9:	8d 43 28             	lea    eax,[ebx+0x28]
c00044dc:	50                   	push   eax
c00044dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044e5:	50                   	push   eax
c00044e6:	e8 d0 da ff ff       	call   c0001fbb <disk_write>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 bf                	jne    c00044b1 <f_write+0x18c>
c00044f2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044f5:	83 e0 7f             	and    eax,0x7f
c00044f8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044fb:	e9 b1 fe ff ff       	jmp    c00043b1 <f_write+0x8c>
c0004500:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004503:	74 20                	je     c0004525 <f_write+0x200>
c0004505:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004508:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000450b:	76 18                	jbe    c0004525 <f_write+0x200>
c000450d:	6a 01                	push   0x1
c000450f:	55                   	push   ebp
c0004510:	8d 43 28             	lea    eax,[ebx+0x28]
c0004513:	50                   	push   eax
c0004514:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004518:	50                   	push   eax
c0004519:	e8 87 da ff ff       	call   c0001fa5 <disk_read>
c000451e:	83 c4 10             	add    esp,0x10
c0004521:	85 c0                	test   eax,eax
c0004523:	75 8c                	jne    c00044b1 <f_write+0x18c>
c0004525:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004528:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000452b:	be 00 02 00 00       	mov    esi,0x200
c0004530:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004534:	25 ff 01 00 00       	and    eax,0x1ff
c0004539:	29 c6                	sub    esi,eax
c000453b:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000453f:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004543:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004548:	89 f1                	mov    ecx,esi
c000454a:	e8 cd da ff ff       	call   c000201c <mem_cpy>
c000454f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004552:	83 c8 80             	or     eax,0xffffff80
c0004555:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004558:	e9 e6 fe ff ff       	jmp    c0004443 <f_write+0x11e>
c000455d:	bf 07 00 00 00       	mov    edi,0x7
c0004562:	83 c4 2c             	add    esp,0x2c
c0004565:	89 f8                	mov    eax,edi
c0004567:	5b                   	pop    ebx
c0004568:	5e                   	pop    esi
c0004569:	5f                   	pop    edi
c000456a:	5d                   	pop    ebp
c000456b:	c3                   	ret    

c000456c <f_sync>:
c000456c:	56                   	push   esi
c000456d:	53                   	push   ebx
c000456e:	83 ec 14             	sub    esp,0x14
c0004571:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004575:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004579:	89 d8                	mov    eax,ebx
c000457b:	e8 2c df ff ff       	call   c00024ac <validate>
c0004580:	85 c0                	test   eax,eax
c0004582:	0f 85 a3 00 00 00    	jne    c000462b <f_sync+0xbf>
c0004588:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000458b:	f6 c2 40             	test   dl,0x40
c000458e:	0f 84 97 00 00 00    	je     c000462b <f_sync+0xbf>
c0004594:	80 e2 80             	and    dl,0x80
c0004597:	74 2e                	je     c00045c7 <f_sync+0x5b>
c0004599:	6a 01                	push   0x1
c000459b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000459e:	8d 43 28             	lea    eax,[ebx+0x28]
c00045a1:	50                   	push   eax
c00045a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045aa:	50                   	push   eax
c00045ab:	e8 0b da ff ff       	call   c0001fbb <disk_write>
c00045b0:	83 c4 10             	add    esp,0x10
c00045b3:	89 c2                	mov    edx,eax
c00045b5:	b8 01 00 00 00       	mov    eax,0x1
c00045ba:	85 d2                	test   edx,edx
c00045bc:	75 6d                	jne    c000462b <f_sync+0xbf>
c00045be:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045c1:	83 e0 7f             	and    eax,0x7f
c00045c4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045c7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ce:	e8 82 df ff ff       	call   c0002555 <move_window>
c00045d3:	85 c0                	test   eax,eax
c00045d5:	75 54                	jne    c000462b <f_sync+0xbf>
c00045d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045da:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045dd:	89 f2                	mov    edx,esi
c00045df:	83 c8 20             	or     eax,0x20
c00045e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045e5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045ea:	e8 1b ee ff ff       	call   c000340a <st_clust.isra.1>
c00045ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045f2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045f5:	e8 1f da ff ff       	call   c0002019 <st_dword>
c00045fa:	8d 46 16             	lea    eax,[esi+0x16]
c00045fd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004602:	e8 12 da ff ff       	call   c0002019 <st_dword>
c0004607:	8d 46 12             	lea    eax,[esi+0x12]
c000460a:	31 d2                	xor    edx,edx
c000460c:	e8 04 da ff ff       	call   c0002015 <st_word>
c0004611:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004615:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004619:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461d:	e8 68 e9 ff ff       	call   c0002f8a <sync_fs>
c0004622:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004625:	83 e2 bf             	and    edx,0xffffffbf
c0004628:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000462b:	83 c4 14             	add    esp,0x14
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <f_close>:
c0004631:	53                   	push   ebx
c0004632:	83 ec 24             	sub    esp,0x24
c0004635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004639:	53                   	push   ebx
c000463a:	e8 2d ff ff ff       	call   c000456c <f_sync>
c000463f:	83 c4 10             	add    esp,0x10
c0004642:	85 c0                	test   eax,eax
c0004644:	75 15                	jne    c000465b <f_close+0x2a>
c0004646:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 5b de ff ff       	call   c00024ac <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	75 06                	jne    c000465b <f_close+0x2a>
c0004655:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000465b:	83 c4 18             	add    esp,0x18
c000465e:	5b                   	pop    ebx
c000465f:	c3                   	ret    

c0004660 <f_lseek>:
c0004660:	55                   	push   ebp
c0004661:	57                   	push   edi
c0004662:	56                   	push   esi
c0004663:	53                   	push   ebx
c0004664:	83 ec 2c             	sub    esp,0x2c
c0004667:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000466b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000466f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004673:	89 d8                	mov    eax,ebx
c0004675:	e8 32 de ff ff       	call   c00024ac <validate>
c000467a:	85 c0                	test   eax,eax
c000467c:	89 c5                	mov    ebp,eax
c000467e:	0f 85 82 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004684:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004688:	85 ed                	test   ebp,ebp
c000468a:	0f 85 76 01 00 00    	jne    c0004806 <f_lseek+0x1a6>
c0004690:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004693:	39 f0                	cmp    eax,esi
c0004695:	73 07                	jae    c000469e <f_lseek+0x3e>
c0004697:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000469b:	0f 44 f0             	cmove  esi,eax
c000469e:	85 f6                	test   esi,esi
c00046a0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00046a3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00046aa:	75 07                	jne    c00046b3 <f_lseek+0x53>
c00046ac:	31 f6                	xor    esi,esi
c00046ae:	e9 e2 00 00 00       	jmp    c0004795 <f_lseek+0x135>
c00046b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b7:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00046bb:	c1 e7 09             	shl    edi,0x9
c00046be:	85 c9                	test   ecx,ecx
c00046c0:	74 28                	je     c00046ea <f_lseek+0x8a>
c00046c2:	31 d2                	xor    edx,edx
c00046c4:	49                   	dec    ecx
c00046c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00046c8:	f7 f7                	div    edi
c00046ca:	31 d2                	xor    edx,edx
c00046cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046d0:	89 c8                	mov    eax,ecx
c00046d2:	f7 f7                	div    edi
c00046d4:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046d8:	72 10                	jb     c00046ea <f_lseek+0x8a>
c00046da:	89 f8                	mov    eax,edi
c00046dc:	f7 d8                	neg    eax
c00046de:	21 c1                	and    ecx,eax
c00046e0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046e3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046e6:	29 ce                	sub    esi,ecx
c00046e8:	eb 3c                	jmp    c0004726 <f_lseek+0xc6>
c00046ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046ed:	85 c0                	test   eax,eax
c00046ef:	75 32                	jne    c0004723 <f_lseek+0xc3>
c00046f1:	31 d2                	xor    edx,edx
c00046f3:	89 d8                	mov    eax,ebx
c00046f5:	e8 05 ef ff ff       	call   c00035ff <create_chain>
c00046fa:	83 f8 01             	cmp    eax,0x1
c00046fd:	75 0e                	jne    c000470d <f_lseek+0xad>
c00046ff:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004703:	bd 02 00 00 00       	mov    ebp,0x2
c0004708:	e9 f9 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c000470d:	83 f8 ff             	cmp    eax,0xffffffff
c0004710:	75 0e                	jne    c0004720 <f_lseek+0xc0>
c0004712:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004716:	bd 01 00 00 00       	mov    ebp,0x1
c000471b:	e9 e6 00 00 00       	jmp    c0004806 <f_lseek+0x1a6>
c0004720:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004723:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004726:	85 c0                	test   eax,eax
c0004728:	74 82                	je     c00046ac <f_lseek+0x4c>
c000472a:	39 fe                	cmp    esi,edi
c000472c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000472f:	76 3d                	jbe    c000476e <f_lseek+0x10e>
c0004731:	01 fa                	add    edx,edi
c0004733:	29 fe                	sub    esi,edi
c0004735:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004739:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000473c:	89 c2                	mov    edx,eax
c000473e:	74 0d                	je     c000474d <f_lseek+0xed>
c0004740:	89 d8                	mov    eax,ebx
c0004742:	e8 b8 ee ff ff       	call   c00035ff <create_chain>
c0004747:	85 c0                	test   eax,eax
c0004749:	75 09                	jne    c0004754 <f_lseek+0xf4>
c000474b:	eb 1f                	jmp    c000476c <f_lseek+0x10c>
c000474d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000474f:	e8 de ec ff ff       	call   c0003432 <get_fat.isra.2>
c0004754:	83 f8 ff             	cmp    eax,0xffffffff
c0004757:	74 b9                	je     c0004712 <f_lseek+0xb2>
c0004759:	83 f8 01             	cmp    eax,0x1
c000475c:	76 a1                	jbe    c00046ff <f_lseek+0x9f>
c000475e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004762:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004765:	76 98                	jbe    c00046ff <f_lseek+0x9f>
c0004767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000476a:	eb be                	jmp    c000472a <f_lseek+0xca>
c000476c:	31 f6                	xor    esi,esi
c000476e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004771:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004777:	0f 84 2f ff ff ff    	je     c00046ac <f_lseek+0x4c>
c000477d:	89 c2                	mov    edx,eax
c000477f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004783:	e8 be da ff ff       	call   c0002246 <clst2sect>
c0004788:	85 c0                	test   eax,eax
c000478a:	0f 84 6f ff ff ff    	je     c00046ff <f_lseek+0x9f>
c0004790:	c1 ee 09             	shr    esi,0x9
c0004793:	01 c6                	add    esi,eax
c0004795:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004798:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000479b:	76 0c                	jbe    c00047a9 <f_lseek+0x149>
c000479d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00047a0:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00047a3:	83 ca 40             	or     edx,0x40
c00047a6:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00047a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00047ae:	74 56                	je     c0004806 <f_lseek+0x1a6>
c00047b0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00047b3:	39 f0                	cmp    eax,esi
c00047b5:	74 4f                	je     c0004806 <f_lseek+0x1a6>
c00047b7:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047bb:	8d 7b 28             	lea    edi,[ebx+0x28]
c00047be:	74 26                	je     c00047e6 <f_lseek+0x186>
c00047c0:	6a 01                	push   0x1
c00047c2:	50                   	push   eax
c00047c3:	57                   	push   edi
c00047c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047cc:	50                   	push   eax
c00047cd:	e8 e9 d7 ff ff       	call   c0001fbb <disk_write>
c00047d2:	83 c4 10             	add    esp,0x10
c00047d5:	85 c0                	test   eax,eax
c00047d7:	0f 85 35 ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c00047dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047e0:	83 e0 7f             	and    eax,0x7f
c00047e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047e6:	6a 01                	push   0x1
c00047e8:	56                   	push   esi
c00047e9:	57                   	push   edi
c00047ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047f2:	50                   	push   eax
c00047f3:	e8 ad d7 ff ff       	call   c0001fa5 <disk_read>
c00047f8:	83 c4 10             	add    esp,0x10
c00047fb:	85 c0                	test   eax,eax
c00047fd:	0f 85 0f ff ff ff    	jne    c0004712 <f_lseek+0xb2>
c0004803:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004806:	83 c4 2c             	add    esp,0x2c
c0004809:	89 e8                	mov    eax,ebp
c000480b:	5b                   	pop    ebx
c000480c:	5e                   	pop    esi
c000480d:	5f                   	pop    edi
c000480e:	5d                   	pop    ebp
c000480f:	c3                   	ret    

c0004810 <f_opendir>:
c0004810:	56                   	push   esi
c0004811:	b8 09 00 00 00       	mov    eax,0x9
c0004816:	53                   	push   ebx
c0004817:	83 ec 24             	sub    esp,0x24
c000481a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000481e:	85 db                	test   ebx,ebx
c0004820:	0f 84 af 00 00 00    	je     c00048d5 <f_opendir+0xc5>
c0004826:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000482a:	31 c9                	xor    ecx,ecx
c000482c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004830:	e8 7d de ff ff       	call   c00026b2 <mount_volume>
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 92 00 00 00    	jne    c00048cf <f_opendir+0xbf>
c000483d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004841:	83 ec 0c             	sub    esp,0xc
c0004844:	89 03                	mov    DWORD PTR [ebx],eax
c0004846:	68 00 02 00 00       	push   0x200
c000484b:	e8 e4 15 00 00       	call   c0005e34 <ff_memalloc>
c0004850:	83 c4 10             	add    esp,0x10
c0004853:	89 c6                	mov    esi,eax
c0004855:	b8 11 00 00 00       	mov    eax,0x11
c000485a:	85 f6                	test   esi,esi
c000485c:	74 77                	je     c00048d5 <f_opendir+0xc5>
c000485e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004866:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004869:	89 d8                	mov    eax,ebx
c000486b:	e8 8a f3 ff ff       	call   c0003bfa <follow_path>
c0004870:	85 c0                	test   eax,eax
c0004872:	75 37                	jne    c00048ab <f_opendir+0x9b>
c0004874:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004878:	75 1c                	jne    c0004896 <f_opendir+0x86>
c000487a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000487e:	b8 05 00 00 00       	mov    eax,0x5
c0004883:	74 26                	je     c00048ab <f_opendir+0x9b>
c0004885:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004889:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000488c:	8a 00                	mov    al,BYTE PTR [eax]
c000488e:	e8 4e eb ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004893:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004896:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000489a:	31 d2                	xor    edx,edx
c000489c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00048a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00048a4:	89 d8                	mov    eax,ebx
c00048a6:	e8 8c ec ff ff       	call   c0003537 <dir_sdi>
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	56                   	push   esi
c00048b3:	e8 94 15 00 00       	call   c0005e4c <ff_memfree>
c00048b8:	83 c4 10             	add    esp,0x10
c00048bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048bf:	83 f8 04             	cmp    eax,0x4
c00048c2:	74 06                	je     c00048ca <f_opendir+0xba>
c00048c4:	85 c0                	test   eax,eax
c00048c6:	74 0d                	je     c00048d5 <f_opendir+0xc5>
c00048c8:	eb 05                	jmp    c00048cf <f_opendir+0xbf>
c00048ca:	b8 05 00 00 00       	mov    eax,0x5
c00048cf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048d5:	83 c4 24             	add    esp,0x24
c00048d8:	5b                   	pop    ebx
c00048d9:	5e                   	pop    esi
c00048da:	c3                   	ret    

c00048db <f_closedir>:
c00048db:	53                   	push   ebx
c00048dc:	83 ec 18             	sub    esp,0x18
c00048df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048e3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048e7:	89 d8                	mov    eax,ebx
c00048e9:	e8 be db ff ff       	call   c00024ac <validate>
c00048ee:	85 c0                	test   eax,eax
c00048f0:	75 06                	jne    c00048f8 <f_closedir+0x1d>
c00048f2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048f8:	83 c4 18             	add    esp,0x18
c00048fb:	5b                   	pop    ebx
c00048fc:	c3                   	ret    

c00048fd <f_readdir>:
c00048fd:	57                   	push   edi
c00048fe:	56                   	push   esi
c00048ff:	53                   	push   ebx
c0004900:	83 ec 20             	sub    esp,0x20
c0004903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004907:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000490f:	89 d8                	mov    eax,ebx
c0004911:	e8 96 db ff ff       	call   c00024ac <validate>
c0004916:	85 c0                	test   eax,eax
c0004918:	75 6e                	jne    c0004988 <f_readdir+0x8b>
c000491a:	85 ff                	test   edi,edi
c000491c:	75 0b                	jne    c0004929 <f_readdir+0x2c>
c000491e:	31 d2                	xor    edx,edx
c0004920:	89 d8                	mov    eax,ebx
c0004922:	e8 10 ec ff ff       	call   c0003537 <dir_sdi>
c0004927:	eb 5f                	jmp    c0004988 <f_readdir+0x8b>
c0004929:	83 ec 0c             	sub    esp,0xc
c000492c:	68 00 02 00 00       	push   0x200
c0004931:	e8 fe 14 00 00       	call   c0005e34 <ff_memalloc>
c0004936:	83 c4 10             	add    esp,0x10
c0004939:	89 c6                	mov    esi,eax
c000493b:	b8 11 00 00 00       	mov    eax,0x11
c0004940:	85 f6                	test   esi,esi
c0004942:	74 44                	je     c0004988 <f_readdir+0x8b>
c0004944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004948:	31 d2                	xor    edx,edx
c000494a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000494d:	89 d8                	mov    eax,ebx
c000494f:	e8 dd ef ff ff       	call   c0003931 <dir_read>
c0004954:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004959:	75 19                	jne    c0004974 <f_readdir+0x77>
c000495b:	89 fa                	mov    edx,edi
c000495d:	89 d8                	mov    eax,ebx
c000495f:	e8 7c e8 ff ff       	call   c00031e0 <get_fileinfo>
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 d8                	mov    eax,ebx
c0004968:	e8 5a ee ff ff       	call   c00037c7 <dir_next>
c000496d:	83 f8 04             	cmp    eax,0x4
c0004970:	75 02                	jne    c0004974 <f_readdir+0x77>
c0004972:	31 c0                	xor    eax,eax
c0004974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004978:	83 ec 0c             	sub    esp,0xc
c000497b:	56                   	push   esi
c000497c:	e8 cb 14 00 00       	call   c0005e4c <ff_memfree>
c0004981:	83 c4 10             	add    esp,0x10
c0004984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004988:	83 c4 20             	add    esp,0x20
c000498b:	5b                   	pop    ebx
c000498c:	5e                   	pop    esi
c000498d:	5f                   	pop    edi
c000498e:	c3                   	ret    

c000498f <f_stat>:
c000498f:	57                   	push   edi
c0004990:	31 c9                	xor    ecx,ecx
c0004992:	56                   	push   esi
c0004993:	53                   	push   ebx
c0004994:	83 ec 30             	sub    esp,0x30
c0004997:	8d 44 24 40          	lea    eax,[esp+0x40]
c000499b:	89 e2                	mov    edx,esp
c000499d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00049a1:	e8 0c dd ff ff       	call   c00026b2 <mount_volume>
c00049a6:	85 c0                	test   eax,eax
c00049a8:	89 c3                	mov    ebx,eax
c00049aa:	75 59                	jne    c0004a05 <f_stat+0x76>
c00049ac:	83 ec 0c             	sub    esp,0xc
c00049af:	bb 11 00 00 00       	mov    ebx,0x11
c00049b4:	68 00 02 00 00       	push   0x200
c00049b9:	e8 76 14 00 00       	call   c0005e34 <ff_memalloc>
c00049be:	83 c4 10             	add    esp,0x10
c00049c1:	85 c0                	test   eax,eax
c00049c3:	89 c6                	mov    esi,eax
c00049c5:	74 3e                	je     c0004a05 <f_stat+0x76>
c00049c7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ca:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049ce:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049d1:	89 e0                	mov    eax,esp
c00049d3:	e8 22 f2 ff ff       	call   c0003bfa <follow_path>
c00049d8:	85 c0                	test   eax,eax
c00049da:	89 c3                	mov    ebx,eax
c00049dc:	75 1b                	jne    c00049f9 <f_stat+0x6a>
c00049de:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049e3:	75 0f                	jne    c00049f4 <f_stat+0x65>
c00049e5:	85 ff                	test   edi,edi
c00049e7:	74 10                	je     c00049f9 <f_stat+0x6a>
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	89 e0                	mov    eax,esp
c00049ed:	e8 ee e7 ff ff       	call   c00031e0 <get_fileinfo>
c00049f2:	eb 05                	jmp    c00049f9 <f_stat+0x6a>
c00049f4:	bb 06 00 00 00       	mov    ebx,0x6
c00049f9:	83 ec 0c             	sub    esp,0xc
c00049fc:	56                   	push   esi
c00049fd:	e8 4a 14 00 00       	call   c0005e4c <ff_memfree>
c0004a02:	83 c4 10             	add    esp,0x10
c0004a05:	83 c4 30             	add    esp,0x30
c0004a08:	89 d8                	mov    eax,ebx
c0004a0a:	5b                   	pop    ebx
c0004a0b:	5e                   	pop    esi
c0004a0c:	5f                   	pop    edi
c0004a0d:	c3                   	ret    

c0004a0e <f_getfree>:
c0004a0e:	55                   	push   ebp
c0004a0f:	31 c9                	xor    ecx,ecx
c0004a11:	57                   	push   edi
c0004a12:	56                   	push   esi
c0004a13:	53                   	push   ebx
c0004a14:	83 ec 2c             	sub    esp,0x2c
c0004a17:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a1b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a1f:	e8 8e dc ff ff       	call   c00026b2 <mount_volume>
c0004a24:	85 c0                	test   eax,eax
c0004a26:	89 c6                	mov    esi,eax
c0004a28:	0f 85 df 00 00 00    	jne    c0004b0d <f_getfree+0xff>
c0004a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a32:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a36:	89 18                	mov    DWORD PTR [eax],ebx
c0004a38:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3e:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a41:	39 d0                	cmp    eax,edx
c0004a43:	77 0b                	ja     c0004a50 <f_getfree+0x42>
c0004a45:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a49:	89 01                	mov    DWORD PTR [ecx],eax
c0004a4b:	e9 bd 00 00 00       	jmp    c0004b0d <f_getfree+0xff>
c0004a50:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a53:	75 29                	jne    c0004a7e <f_getfree+0x70>
c0004a55:	bf 02 00 00 00       	mov    edi,0x2
c0004a5a:	31 ed                	xor    ebp,ebp
c0004a5c:	89 fa                	mov    edx,edi
c0004a5e:	89 d8                	mov    eax,ebx
c0004a60:	e8 cd e9 ff ff       	call   c0003432 <get_fat.isra.2>
c0004a65:	83 f8 ff             	cmp    eax,0xffffffff
c0004a68:	74 7d                	je     c0004ae7 <f_getfree+0xd9>
c0004a6a:	83 f8 01             	cmp    eax,0x1
c0004a6d:	74 7f                	je     c0004aee <f_getfree+0xe0>
c0004a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a73:	83 d5 00             	adc    ebp,0x0
c0004a76:	47                   	inc    edi
c0004a77:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a7a:	77 e0                	ja     c0004a5c <f_getfree+0x4e>
c0004a7c:	eb 79                	jmp    c0004af7 <f_getfree+0xe9>
c0004a7e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a81:	31 ed                	xor    ebp,ebp
c0004a83:	31 db                	xor    ebx,ebx
c0004a85:	85 db                	test   ebx,ebx
c0004a87:	75 18                	jne    c0004aa1 <f_getfree+0x93>
c0004a89:	8d 42 01             	lea    eax,[edx+0x1]
c0004a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a94:	e8 bc da ff ff       	call   c0002555 <move_window>
c0004a99:	85 c0                	test   eax,eax
c0004a9b:	75 58                	jne    c0004af5 <f_getfree+0xe7>
c0004a9d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004aa5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004aa9:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004aac:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004ab0:	75 13                	jne    c0004ac5 <f_getfree+0xb7>
c0004ab2:	e8 39 d5 ff ff       	call   c0001ff0 <ld_word>
c0004ab7:	0f b7 c0             	movzx  eax,ax
c0004aba:	83 f8 01             	cmp    eax,0x1
c0004abd:	83 d5 00             	adc    ebp,0x0
c0004ac0:	83 c3 02             	add    ebx,0x2
c0004ac3:	eb 13                	jmp    c0004ad8 <f_getfree+0xca>
c0004ac5:	e8 33 d5 ff ff       	call   c0001ffd <ld_dword>
c0004aca:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004acf:	83 f8 01             	cmp    eax,0x1
c0004ad2:	83 d5 00             	adc    ebp,0x0
c0004ad5:	83 c3 04             	add    ebx,0x4
c0004ad8:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ade:	4f                   	dec    edi
c0004adf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ae3:	75 a0                	jne    c0004a85 <f_getfree+0x77>
c0004ae5:	eb 10                	jmp    c0004af7 <f_getfree+0xe9>
c0004ae7:	be 01 00 00 00       	mov    esi,0x1
c0004aec:	eb 09                	jmp    c0004af7 <f_getfree+0xe9>
c0004aee:	be 02 00 00 00       	mov    esi,0x2
c0004af3:	eb 02                	jmp    c0004af7 <f_getfree+0xe9>
c0004af5:	89 c6                	mov    esi,eax
c0004af7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004afb:	89 28                	mov    DWORD PTR [eax],ebp
c0004afd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b01:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004b04:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004b07:	83 ca 01             	or     edx,0x1
c0004b0a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004b0d:	83 c4 2c             	add    esp,0x2c
c0004b10:	89 f0                	mov    eax,esi
c0004b12:	5b                   	pop    ebx
c0004b13:	5e                   	pop    esi
c0004b14:	5f                   	pop    edi
c0004b15:	5d                   	pop    ebp
c0004b16:	c3                   	ret    

c0004b17 <f_truncate>:
c0004b17:	56                   	push   esi
c0004b18:	53                   	push   ebx
c0004b19:	83 ec 14             	sub    esp,0x14
c0004b1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b20:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b24:	89 d8                	mov    eax,ebx
c0004b26:	e8 81 d9 ff ff       	call   c00024ac <validate>
c0004b2b:	85 c0                	test   eax,eax
c0004b2d:	89 c6                	mov    esi,eax
c0004b2f:	0f 85 c4 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b35:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b39:	85 f6                	test   esi,esi
c0004b3b:	0f 85 b8 00 00 00    	jne    c0004bf9 <f_truncate+0xe2>
c0004b41:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b45:	0f 84 a9 00 00 00    	je     c0004bf4 <f_truncate+0xdd>
c0004b4b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b4e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b51:	0f 83 a2 00 00 00    	jae    c0004bf9 <f_truncate+0xe2>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	75 15                	jne    c0004b70 <f_truncate+0x59>
c0004b5b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b5e:	31 c9                	xor    ecx,ecx
c0004b60:	89 d8                	mov    eax,ebx
c0004b62:	e8 d2 eb ff ff       	call   c0003739 <remove_chain>
c0004b67:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b6e:	eb 35                	jmp    c0004ba5 <f_truncate+0x8e>
c0004b70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b75:	e8 b8 e8 ff ff       	call   c0003432 <get_fat.isra.2>
c0004b7a:	89 c2                	mov    edx,eax
c0004b7c:	b8 01 00 00 00       	mov    eax,0x1
c0004b81:	83 fa ff             	cmp    edx,0xffffffff
c0004b84:	74 1f                	je     c0004ba5 <f_truncate+0x8e>
c0004b86:	83 fa 01             	cmp    edx,0x1
c0004b89:	b8 02 00 00 00       	mov    eax,0x2
c0004b8e:	74 15                	je     c0004ba5 <f_truncate+0x8e>
c0004b90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b94:	31 c0                	xor    eax,eax
c0004b96:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b99:	76 0a                	jbe    c0004ba5 <f_truncate+0x8e>
c0004b9b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b9e:	89 d8                	mov    eax,ebx
c0004ba0:	e8 94 eb ff ff       	call   c0003739 <remove_chain>
c0004ba5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004ba8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004bab:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004bae:	83 ca 40             	or     edx,0x40
c0004bb1:	85 c0                	test   eax,eax
c0004bb3:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004bb6:	75 35                	jne    c0004bed <f_truncate+0xd6>
c0004bb8:	80 e2 80             	and    dl,0x80
c0004bbb:	74 3c                	je     c0004bf9 <f_truncate+0xe2>
c0004bbd:	6a 01                	push   0x1
c0004bbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004bc2:	8d 43 28             	lea    eax,[ebx+0x28]
c0004bc5:	50                   	push   eax
c0004bc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bce:	50                   	push   eax
c0004bcf:	e8 e7 d3 ff ff       	call   c0001fbb <disk_write>
c0004bd4:	83 c4 10             	add    esp,0x10
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	75 0d                	jne    c0004be8 <f_truncate+0xd1>
c0004bdb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bde:	31 f6                	xor    esi,esi
c0004be0:	83 e0 7f             	and    eax,0x7f
c0004be3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004be6:	eb 11                	jmp    c0004bf9 <f_truncate+0xe2>
c0004be8:	b8 01 00 00 00       	mov    eax,0x1
c0004bed:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bf0:	89 c6                	mov    esi,eax
c0004bf2:	eb 05                	jmp    c0004bf9 <f_truncate+0xe2>
c0004bf4:	be 07 00 00 00       	mov    esi,0x7
c0004bf9:	83 c4 14             	add    esp,0x14
c0004bfc:	89 f0                	mov    eax,esi
c0004bfe:	5b                   	pop    ebx
c0004bff:	5e                   	pop    esi
c0004c00:	c3                   	ret    

c0004c01 <f_unlink>:
c0004c01:	55                   	push   ebp
c0004c02:	b9 02 00 00 00       	mov    ecx,0x2
c0004c07:	57                   	push   edi
c0004c08:	56                   	push   esi
c0004c09:	53                   	push   ebx
c0004c0a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004c10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004c14:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004c1b:	e8 92 da ff ff       	call   c00026b2 <mount_volume>
c0004c20:	85 c0                	test   eax,eax
c0004c22:	0f 85 ee 00 00 00    	jne    c0004d16 <f_unlink+0x115>
c0004c28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2c:	83 ec 0c             	sub    esp,0xc
c0004c2f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c33:	68 00 02 00 00       	push   0x200
c0004c38:	e8 f7 11 00 00       	call   c0005e34 <ff_memalloc>
c0004c3d:	83 c4 10             	add    esp,0x10
c0004c40:	89 c3                	mov    ebx,eax
c0004c42:	b8 11 00 00 00       	mov    eax,0x11
c0004c47:	85 db                	test   ebx,ebx
c0004c49:	0f 84 c7 00 00 00    	je     c0004d16 <f_unlink+0x115>
c0004c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c53:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c5a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c5d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c61:	e8 94 ef ff ff       	call   c0003bfa <follow_path>
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 94 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c6e:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c73:	b8 06 00 00 00       	mov    eax,0x6
c0004c78:	0f 85 84 00 00 00    	jne    c0004d02 <f_unlink+0x101>
c0004c7e:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c83:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c89:	74 07                	je     c0004c92 <f_unlink+0x91>
c0004c8b:	b8 07 00 00 00       	mov    eax,0x7
c0004c90:	eb 70                	jmp    c0004d02 <f_unlink+0x101>
c0004c92:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c96:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c9a:	8a 07                	mov    al,BYTE PTR [edi]
c0004c9c:	e8 40 e7 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0004ca1:	83 e5 10             	and    ebp,0x10
c0004ca4:	89 c6                	mov    esi,eax
c0004ca6:	75 20                	jne    c0004cc8 <f_unlink+0xc7>
c0004ca8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cac:	e8 a8 ed ff ff       	call   c0003a59 <dir_remove>
c0004cb1:	85 c0                	test   eax,eax
c0004cb3:	75 40                	jne    c0004cf5 <f_unlink+0xf4>
c0004cb5:	85 f6                	test   esi,esi
c0004cb7:	74 3c                	je     c0004cf5 <f_unlink+0xf4>
c0004cb9:	31 c9                	xor    ecx,ecx
c0004cbb:	89 f2                	mov    edx,esi
c0004cbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cc1:	e8 73 ea ff ff       	call   c0003739 <remove_chain>
c0004cc6:	eb 2d                	jmp    c0004cf5 <f_unlink+0xf4>
c0004cc8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ccc:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cd0:	31 d2                	xor    edx,edx
c0004cd2:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cd6:	e8 5c e8 ff ff       	call   c0003537 <dir_sdi>
c0004cdb:	85 c0                	test   eax,eax
c0004cdd:	75 23                	jne    c0004d02 <f_unlink+0x101>
c0004cdf:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ce3:	31 d2                	xor    edx,edx
c0004ce5:	e8 47 ec ff ff       	call   c0003931 <dir_read>
c0004cea:	85 c0                	test   eax,eax
c0004cec:	74 9d                	je     c0004c8b <f_unlink+0x8a>
c0004cee:	83 f8 04             	cmp    eax,0x4
c0004cf1:	75 0f                	jne    c0004d02 <f_unlink+0x101>
c0004cf3:	eb b3                	jmp    c0004ca8 <f_unlink+0xa7>
c0004cf5:	85 c0                	test   eax,eax
c0004cf7:	75 09                	jne    c0004d02 <f_unlink+0x101>
c0004cf9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfd:	e8 88 e2 ff ff       	call   c0002f8a <sync_fs>
c0004d02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d06:	83 ec 0c             	sub    esp,0xc
c0004d09:	53                   	push   ebx
c0004d0a:	e8 3d 11 00 00       	call   c0005e4c <ff_memfree>
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d16:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	5f                   	pop    edi
c0004d1f:	5d                   	pop    ebp
c0004d20:	c3                   	ret    

c0004d21 <f_mkdir>:
c0004d21:	57                   	push   edi
c0004d22:	b9 02 00 00 00       	mov    ecx,0x2
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	83 ec 50             	sub    esp,0x50
c0004d2c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d30:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d34:	e8 79 d9 ff ff       	call   c00026b2 <mount_volume>
c0004d39:	85 c0                	test   eax,eax
c0004d3b:	89 c3                	mov    ebx,eax
c0004d3d:	0f 85 70 01 00 00    	jne    c0004eb3 <f_mkdir+0x192>
c0004d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d47:	83 ec 0c             	sub    esp,0xc
c0004d4a:	bb 11 00 00 00       	mov    ebx,0x11
c0004d4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d53:	68 00 02 00 00       	push   0x200
c0004d58:	e8 d7 10 00 00       	call   c0005e34 <ff_memalloc>
c0004d5d:	83 c4 10             	add    esp,0x10
c0004d60:	85 c0                	test   eax,eax
c0004d62:	89 c7                	mov    edi,eax
c0004d64:	0f 84 49 01 00 00    	je     c0004eb3 <f_mkdir+0x192>
c0004d6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d72:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d75:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d79:	e8 7c ee ff ff       	call   c0003bfa <follow_path>
c0004d7e:	85 c0                	test   eax,eax
c0004d80:	89 c3                	mov    ebx,eax
c0004d82:	74 3e                	je     c0004dc2 <f_mkdir+0xa1>
c0004d84:	83 f8 04             	cmp    eax,0x4
c0004d87:	75 3e                	jne    c0004dc7 <f_mkdir+0xa6>
c0004d89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8d:	31 d2                	xor    edx,edx
c0004d8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d93:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d97:	e8 63 e8 ff ff       	call   c00035ff <create_chain>
c0004d9c:	85 c0                	test   eax,eax
c0004d9e:	89 c6                	mov    esi,eax
c0004da0:	74 0c                	je     c0004dae <f_mkdir+0x8d>
c0004da2:	83 f8 01             	cmp    eax,0x1
c0004da5:	bb 02 00 00 00       	mov    ebx,0x2
c0004daa:	74 07                	je     c0004db3 <f_mkdir+0x92>
c0004dac:	eb 2a                	jmp    c0004dd8 <f_mkdir+0xb7>
c0004dae:	bb 07 00 00 00       	mov    ebx,0x7
c0004db3:	31 c9                	xor    ecx,ecx
c0004db5:	89 f2                	mov    edx,esi
c0004db7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004dbb:	e8 79 e9 ff ff       	call   c0003739 <remove_chain>
c0004dc0:	eb 05                	jmp    c0004dc7 <f_mkdir+0xa6>
c0004dc2:	bb 08 00 00 00       	mov    ebx,0x8
c0004dc7:	83 ec 0c             	sub    esp,0xc
c0004dca:	57                   	push   edi
c0004dcb:	e8 7c 10 00 00       	call   c0005e4c <ff_memfree>
c0004dd0:	83 c4 10             	add    esp,0x10
c0004dd3:	e9 db 00 00 00       	jmp    c0004eb3 <f_mkdir+0x192>
c0004dd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004ddb:	bb 01 00 00 00       	mov    ebx,0x1
c0004de0:	74 d1                	je     c0004db3 <f_mkdir+0x92>
c0004de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de6:	89 f2                	mov    edx,esi
c0004de8:	e8 19 dd ff ff       	call   c0002b06 <dir_clear>
c0004ded:	85 c0                	test   eax,eax
c0004def:	89 c3                	mov    ebx,eax
c0004df1:	75 c0                	jne    c0004db3 <f_mkdir+0x92>
c0004df3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dfc:	ba 20 00 00 00       	mov    edx,0x20
c0004e01:	83 c0 34             	add    eax,0x34
c0004e04:	e8 28 d2 ff ff       	call   c0002031 <mem_set>
c0004e09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e12:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004e16:	83 c0 4a             	add    eax,0x4a
c0004e19:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004e1d:	e8 f7 d1 ff ff       	call   c0002019 <st_dword>
c0004e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e26:	89 f1                	mov    ecx,esi
c0004e28:	8d 50 34             	lea    edx,[eax+0x34]
c0004e2b:	e8 da e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e34:	b9 20 00 00 00       	mov    ecx,0x20
c0004e39:	8d 50 34             	lea    edx,[eax+0x34]
c0004e3c:	83 c0 54             	add    eax,0x54
c0004e3f:	e8 d8 d1 ff ff       	call   c000201c <mem_cpy>
c0004e44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e48:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e4c:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e50:	8d 50 54             	lea    edx,[eax+0x54]
c0004e53:	e8 b2 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e60:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e64:	e8 2e ee ff ff       	call   c0003c97 <dir_register>
c0004e69:	85 c0                	test   eax,eax
c0004e6b:	89 c3                	mov    ebx,eax
c0004e6d:	0f 85 40 ff ff ff    	jne    c0004db3 <f_mkdir+0x92>
c0004e73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e77:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e7c:	83 c0 16             	add    eax,0x16
c0004e7f:	e8 95 d1 ff ff       	call   c0002019 <st_dword>
c0004e84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e88:	89 f1                	mov    ecx,esi
c0004e8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8e:	e8 77 e5 ff ff       	call   c000340a <st_clust.isra.1>
c0004e93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e97:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ea3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ea7:	e8 de e0 ff ff       	call   c0002f8a <sync_fs>
c0004eac:	89 c3                	mov    ebx,eax
c0004eae:	e9 14 ff ff ff       	jmp    c0004dc7 <f_mkdir+0xa6>
c0004eb3:	83 c4 50             	add    esp,0x50
c0004eb6:	89 d8                	mov    eax,ebx
c0004eb8:	5b                   	pop    ebx
c0004eb9:	5e                   	pop    esi
c0004eba:	5f                   	pop    edi
c0004ebb:	c3                   	ret    

c0004ebc <f_rename>:
c0004ebc:	57                   	push   edi
c0004ebd:	56                   	push   esi
c0004ebe:	53                   	push   ebx
c0004ebf:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ec5:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ecc:	e8 8f d5 ff ff       	call   c0002460 <get_ldnumber>
c0004ed1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ed5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eda:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ee1:	e8 cc d7 ff ff       	call   c00026b2 <mount_volume>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	0f 85 7c 01 00 00    	jne    c000506a <f_rename+0x1ae>
c0004eee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef2:	83 ec 0c             	sub    esp,0xc
c0004ef5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ef9:	68 00 02 00 00       	push   0x200
c0004efe:	e8 31 0f 00 00       	call   c0005e34 <ff_memalloc>
c0004f03:	83 c4 10             	add    esp,0x10
c0004f06:	89 c6                	mov    esi,eax
c0004f08:	b8 11 00 00 00       	mov    eax,0x11
c0004f0d:	85 f6                	test   esi,esi
c0004f0f:	0f 84 55 01 00 00    	je     c000506a <f_rename+0x1ae>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f20:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f23:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f27:	e8 ce ec ff ff       	call   c0003bfa <follow_path>
c0004f2c:	85 c0                	test   eax,eax
c0004f2e:	0f 85 22 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f34:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f38:	b8 06 00 00 00       	mov    eax,0x6
c0004f3d:	80 e2 a0             	and    dl,0xa0
c0004f40:	0f 85 10 01 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f4e:	b9 20 00 00 00       	mov    ecx,0x20
c0004f53:	e8 c4 d0 ff ff       	call   c000201c <mem_cpy>
c0004f58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f5c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f65:	e8 b2 d0 ff ff       	call   c000201c <mem_cpy>
c0004f6a:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f75:	e8 80 ec ff ff       	call   c0003bfa <follow_path>
c0004f7a:	85 c0                	test   eax,eax
c0004f7c:	75 20                	jne    c0004f9e <f_rename+0xe2>
c0004f7e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f82:	b8 08 00 00 00       	mov    eax,0x8
c0004f87:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f8b:	0f 85 c5 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004f91:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f95:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f9c:	eb 03                	jmp    c0004fa1 <f_rename+0xe5>
c0004f9e:	83 f8 04             	cmp    eax,0x4
c0004fa1:	0f 85 af 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fa7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fab:	e8 e7 ec ff ff       	call   c0003c97 <dir_register>
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 9e 00 00 00    	jne    c0005056 <f_rename+0x19a>
c0004fb8:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fbf:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004fc3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fc8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fcb:	e8 4c d0 ff ff       	call   c000201c <mem_cpy>
c0004fd0:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fd4:	a8 10                	test   al,0x10
c0004fd6:	75 03                	jne    c0004fdb <f_rename+0x11f>
c0004fd8:	83 c8 20             	or     eax,0x20
c0004fdb:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fe2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fe6:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fea:	74 54                	je     c0005040 <f_rename+0x184>
c0004fec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ff0:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ff4:	74 4a                	je     c0005040 <f_rename+0x184>
c0004ff6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ffa:	89 da                	mov    edx,ebx
c0004ffc:	8a 07                	mov    al,BYTE PTR [edi]
c0004ffe:	e8 de e3 ff ff       	call   c00033e1 <ld_clust.isra.0>
c0005003:	89 c2                	mov    edx,eax
c0005005:	89 f8                	mov    eax,edi
c0005007:	e8 3a d2 ff ff       	call   c0002246 <clst2sect>
c000500c:	89 c2                	mov    edx,eax
c000500e:	b8 02 00 00 00       	mov    eax,0x2
c0005013:	85 d2                	test   edx,edx
c0005015:	74 3f                	je     c0005056 <f_rename+0x19a>
c0005017:	89 f8                	mov    eax,edi
c0005019:	e8 37 d5 ff ff       	call   c0002555 <move_window>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 34                	jne    c0005056 <f_rename+0x19a>
c0005022:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005026:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000502a:	75 14                	jne    c0005040 <f_rename+0x184>
c000502c:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005030:	8d 50 54             	lea    edx,[eax+0x54]
c0005033:	e8 d2 e3 ff ff       	call   c000340a <st_clust.isra.1>
c0005038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005040:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005044:	e8 10 ea ff ff       	call   c0003a59 <dir_remove>
c0005049:	85 c0                	test   eax,eax
c000504b:	75 09                	jne    c0005056 <f_rename+0x19a>
c000504d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005051:	e8 34 df ff ff       	call   c0002f8a <sync_fs>
c0005056:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000505a:	83 ec 0c             	sub    esp,0xc
c000505d:	56                   	push   esi
c000505e:	e8 e9 0d 00 00       	call   c0005e4c <ff_memfree>
c0005063:	83 c4 10             	add    esp,0x10
c0005066:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000506a:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005070:	5b                   	pop    ebx
c0005071:	5e                   	pop    esi
c0005072:	5f                   	pop    edi
c0005073:	c3                   	ret    

c0005074 <f_chmod>:
c0005074:	57                   	push   edi
c0005075:	b9 02 00 00 00       	mov    ecx,0x2
c000507a:	56                   	push   esi
c000507b:	53                   	push   ebx
c000507c:	83 ec 50             	sub    esp,0x50
c000507f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005083:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005087:	8d 44 24 60          	lea    eax,[esp+0x60]
c000508b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000508f:	e8 1e d6 ff ff       	call   c00026b2 <mount_volume>
c0005094:	85 c0                	test   eax,eax
c0005096:	0f 85 81 00 00 00    	jne    c000511d <f_chmod+0xa9>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	83 ec 0c             	sub    esp,0xc
c00050a3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00050a7:	68 00 02 00 00       	push   0x200
c00050ac:	e8 83 0d 00 00       	call   c0005e34 <ff_memalloc>
c00050b1:	83 c4 10             	add    esp,0x10
c00050b4:	89 c6                	mov    esi,eax
c00050b6:	b8 11 00 00 00       	mov    eax,0x11
c00050bb:	85 f6                	test   esi,esi
c00050bd:	74 5e                	je     c000511d <f_chmod+0xa9>
c00050bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050c3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ca:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ce:	e8 27 eb ff ff       	call   c0003bfa <follow_path>
c00050d3:	85 c0                	test   eax,eax
c00050d5:	75 32                	jne    c0005109 <f_chmod+0x95>
c00050d7:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050db:	b8 06 00 00 00       	mov    eax,0x6
c00050e0:	80 e2 a0             	and    dl,0xa0
c00050e3:	75 24                	jne    c0005109 <f_chmod+0x95>
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050ec:	31 d7                	xor    edi,edx
c00050ee:	21 fb                	and    ebx,edi
c00050f0:	83 e3 27             	and    ebx,0x27
c00050f3:	31 d3                	xor    ebx,edx
c00050f5:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050fc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005104:	e8 81 de ff ff       	call   c0002f8a <sync_fs>
c0005109:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000510d:	83 ec 0c             	sub    esp,0xc
c0005110:	56                   	push   esi
c0005111:	e8 36 0d 00 00       	call   c0005e4c <ff_memfree>
c0005116:	83 c4 10             	add    esp,0x10
c0005119:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000511d:	83 c4 50             	add    esp,0x50
c0005120:	5b                   	pop    ebx
c0005121:	5e                   	pop    esi
c0005122:	5f                   	pop    edi
c0005123:	c3                   	ret    

c0005124 <f_utime>:
c0005124:	56                   	push   esi
c0005125:	b9 02 00 00 00       	mov    ecx,0x2
c000512a:	53                   	push   ebx
c000512b:	83 ec 54             	sub    esp,0x54
c000512e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005136:	8d 44 24 60          	lea    eax,[esp+0x60]
c000513a:	e8 73 d5 ff ff       	call   c00026b2 <mount_volume>
c000513f:	85 c0                	test   eax,eax
c0005141:	0f 85 87 00 00 00    	jne    c00051ce <f_utime+0xaa>
c0005147:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000514b:	83 ec 0c             	sub    esp,0xc
c000514e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005152:	68 00 02 00 00       	push   0x200
c0005157:	e8 d8 0c 00 00       	call   c0005e34 <ff_memalloc>
c000515c:	83 c4 10             	add    esp,0x10
c000515f:	89 c3                	mov    ebx,eax
c0005161:	b8 11 00 00 00       	mov    eax,0x11
c0005166:	85 db                	test   ebx,ebx
c0005168:	74 64                	je     c00051ce <f_utime+0xaa>
c000516a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000516e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005172:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005175:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005179:	e8 7c ea ff ff       	call   c0003bfa <follow_path>
c000517e:	85 c0                	test   eax,eax
c0005180:	75 38                	jne    c00051ba <f_utime+0x96>
c0005182:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005186:	b8 06 00 00 00       	mov    eax,0x6
c000518b:	80 e2 a0             	and    dl,0xa0
c000518e:	75 2a                	jne    c00051ba <f_utime+0x96>
c0005190:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0005194:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005198:	c1 e2 10             	shl    edx,0x10
c000519b:	09 c2                	or     edx,eax
c000519d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00051a1:	83 c0 16             	add    eax,0x16
c00051a4:	e8 70 ce ff ff       	call   c0002019 <st_dword>
c00051a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051ad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051b5:	e8 d0 dd ff ff       	call   c0002f8a <sync_fs>
c00051ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051be:	83 ec 0c             	sub    esp,0xc
c00051c1:	53                   	push   ebx
c00051c2:	e8 85 0c 00 00       	call   c0005e4c <ff_memfree>
c00051c7:	83 c4 10             	add    esp,0x10
c00051ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051ce:	83 c4 54             	add    esp,0x54
c00051d1:	5b                   	pop    ebx
c00051d2:	5e                   	pop    esi
c00051d3:	c3                   	ret    

c00051d4 <f_getlabel>:
c00051d4:	55                   	push   ebp
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	57                   	push   edi
c00051d8:	56                   	push   esi
c00051d9:	53                   	push   ebx
c00051da:	83 ec 5c             	sub    esp,0x5c
c00051dd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051e1:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051e5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051e9:	e8 c4 d4 ff ff       	call   c00026b2 <mount_volume>
c00051ee:	85 c0                	test   eax,eax
c00051f0:	89 c3                	mov    ebx,eax
c00051f2:	0f 85 d9 00 00 00    	jne    c00052d1 <f_getlabel+0xfd>
c00051f8:	85 ff                	test   edi,edi
c00051fa:	0f 84 d1 00 00 00    	je     c00052d1 <f_getlabel+0xfd>
c0005200:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000520c:	31 d2                	xor    edx,edx
c000520e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005212:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005216:	e8 1c e3 ff ff       	call   c0003537 <dir_sdi>
c000521b:	85 c0                	test   eax,eax
c000521d:	89 c3                	mov    ebx,eax
c000521f:	0f 85 a2 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c0005225:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005229:	ba 01 00 00 00       	mov    edx,0x1
c000522e:	e8 fe e6 ff ff       	call   c0003931 <dir_read>
c0005233:	85 c0                	test   eax,eax
c0005235:	89 c3                	mov    ebx,eax
c0005237:	0f 85 8a 00 00 00    	jne    c00052c7 <f_getlabel+0xf3>
c000523d:	31 f6                	xor    esi,esi
c000523f:	31 d2                	xor    edx,edx
c0005241:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005245:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000524c:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005250:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005255:	89 c8                	mov    eax,ecx
c0005257:	e8 13 ce ff ff       	call   c000206f <dbc_1st>
c000525c:	85 c0                	test   eax,eax
c000525e:	74 19                	je     c0005279 <f_getlabel+0xa5>
c0005260:	83 fd 0b             	cmp    ebp,0xb
c0005263:	74 14                	je     c0005279 <f_getlabel+0xa5>
c0005265:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005269:	c1 e1 08             	shl    ecx,0x8
c000526c:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005270:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005273:	09 c1                	or     ecx,eax
c0005275:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005279:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000527e:	52                   	push   edx
c000527f:	52                   	push   edx
c0005280:	68 b5 01 00 00       	push   0x1b5
c0005285:	50                   	push   eax
c0005286:	e8 75 0c 00 00       	call   c0005f00 <ff_oem2uni>
c000528b:	83 c4 10             	add    esp,0x10
c000528e:	0f b7 c0             	movzx  eax,ax
c0005291:	85 c0                	test   eax,eax
c0005293:	74 1f                	je     c00052b4 <f_getlabel+0xe0>
c0005295:	8d 14 37             	lea    edx,[edi+esi*1]
c0005298:	b9 04 00 00 00       	mov    ecx,0x4
c000529d:	e8 ab ce ff ff       	call   c000214d <put_utf>
c00052a2:	0f b6 c0             	movzx  eax,al
c00052a5:	85 c0                	test   eax,eax
c00052a7:	74 0b                	je     c00052b4 <f_getlabel+0xe0>
c00052a9:	01 c6                	add    esi,eax
c00052ab:	83 fd 0b             	cmp    ebp,0xb
c00052ae:	74 06                	je     c00052b6 <f_getlabel+0xe2>
c00052b0:	89 ea                	mov    edx,ebp
c00052b2:	eb 8d                	jmp    c0005241 <f_getlabel+0x6d>
c00052b4:	31 f6                	xor    esi,esi
c00052b6:	01 fe                	add    esi,edi
c00052b8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00052bb:	39 f7                	cmp    edi,esi
c00052bd:	74 12                	je     c00052d1 <f_getlabel+0xfd>
c00052bf:	4e                   	dec    esi
c00052c0:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00052c3:	74 f3                	je     c00052b8 <f_getlabel+0xe4>
c00052c5:	eb 0a                	jmp    c00052d1 <f_getlabel+0xfd>
c00052c7:	83 fb 04             	cmp    ebx,0x4
c00052ca:	75 05                	jne    c00052d1 <f_getlabel+0xfd>
c00052cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052cf:	31 db                	xor    ebx,ebx
c00052d1:	85 db                	test   ebx,ebx
c00052d3:	75 49                	jne    c000531e <f_getlabel+0x14a>
c00052d5:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052da:	74 42                	je     c000531e <f_getlabel+0x14a>
c00052dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052e3:	e8 6d d2 ff ff       	call   c0002555 <move_window>
c00052e8:	85 c0                	test   eax,eax
c00052ea:	89 c3                	mov    ebx,eax
c00052ec:	75 30                	jne    c000531e <f_getlabel+0x14a>
c00052ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052f2:	b8 43 00 00 00       	mov    eax,0x43
c00052f7:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052fa:	83 f9 03             	cmp    ecx,0x3
c00052fd:	74 10                	je     c000530f <f_getlabel+0x13b>
c00052ff:	83 f9 04             	cmp    ecx,0x4
c0005302:	b8 64 00 00 00       	mov    eax,0x64
c0005307:	b9 27 00 00 00       	mov    ecx,0x27
c000530c:	0f 45 c1             	cmovne eax,ecx
c000530f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005313:	e8 e5 cc ff ff       	call   c0001ffd <ld_dword>
c0005318:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000531c:	89 07                	mov    DWORD PTR [edi],eax
c000531e:	83 c4 5c             	add    esp,0x5c
c0005321:	89 d8                	mov    eax,ebx
c0005323:	5b                   	pop    ebx
c0005324:	5e                   	pop    esi
c0005325:	5f                   	pop    edi
c0005326:	5d                   	pop    ebp
c0005327:	c3                   	ret    

c0005328 <f_setlabel>:
c0005328:	57                   	push   edi
c0005329:	b9 02 00 00 00       	mov    ecx,0x2
c000532e:	56                   	push   esi
c000532f:	53                   	push   ebx
c0005330:	83 ec 50             	sub    esp,0x50
c0005333:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005337:	8d 44 24 60          	lea    eax,[esp+0x60]
c000533b:	e8 72 d3 ff ff       	call   c00026b2 <mount_volume>
c0005340:	85 c0                	test   eax,eax
c0005342:	89 c6                	mov    esi,eax
c0005344:	0f 85 65 01 00 00    	jne    c00054af <f_setlabel+0x187>
c000534a:	b9 0b 00 00 00       	mov    ecx,0xb
c000534f:	ba 20 00 00 00       	mov    edx,0x20
c0005354:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005358:	31 db                	xor    ebx,ebx
c000535a:	e8 d2 cc ff ff       	call   c0002031 <mem_set>
c000535f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005363:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005366:	76 5d                	jbe    c00053c5 <f_setlabel+0x9d>
c0005368:	8d 44 24 60          	lea    eax,[esp+0x60]
c000536c:	e8 04 cd ff ff       	call   c0002075 <tchar2uni>
c0005371:	3d ff ff 00 00       	cmp    eax,0xffff
c0005376:	76 0a                	jbe    c0005382 <f_setlabel+0x5a>
c0005378:	be 06 00 00 00       	mov    esi,0x6
c000537d:	e9 2d 01 00 00       	jmp    c00054af <f_setlabel+0x187>
c0005382:	83 ec 0c             	sub    esp,0xc
c0005385:	50                   	push   eax
c0005386:	e8 ed 0b 00 00       	call   c0005f78 <ff_wtoupper>
c000538b:	5a                   	pop    edx
c000538c:	59                   	pop    ecx
c000538d:	68 b5 01 00 00       	push   0x1b5
c0005392:	50                   	push   eax
c0005393:	e8 cc 0a 00 00       	call   c0005e64 <ff_uni2oem>
c0005398:	83 c4 10             	add    esp,0x10
c000539b:	0f b7 f0             	movzx  esi,ax
c000539e:	85 f6                	test   esi,esi
c00053a0:	89 f7                	mov    edi,esi
c00053a2:	74 d4                	je     c0005378 <f_setlabel+0x50>
c00053a4:	89 f2                	mov    edx,esi
c00053a6:	b8 10 09 02 c0       	mov    eax,0xc0020910
c00053ab:	e8 ae cc ff ff       	call   c000205e <chk_chr>
c00053b0:	85 c0                	test   eax,eax
c00053b2:	75 c4                	jne    c0005378 <f_setlabel+0x50>
c00053b4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00053ba:	0f 87 c9 00 00 00    	ja     c0005489 <f_setlabel+0x161>
c00053c0:	e9 e0 00 00 00       	jmp    c00054a5 <f_setlabel+0x17d>
c00053c5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ca:	74 ac                	je     c0005378 <f_setlabel+0x50>
c00053cc:	85 db                	test   ebx,ebx
c00053ce:	74 0e                	je     c00053de <f_setlabel+0xb6>
c00053d0:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053d5:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053d8:	75 04                	jne    c00053de <f_setlabel+0xb6>
c00053da:	89 c3                	mov    ebx,eax
c00053dc:	eb ee                	jmp    c00053cc <f_setlabel+0xa4>
c00053de:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053ea:	31 d2                	xor    edx,edx
c00053ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053f4:	e8 3e e1 ff ff       	call   c0003537 <dir_sdi>
c00053f9:	85 c0                	test   eax,eax
c00053fb:	89 c6                	mov    esi,eax
c00053fd:	0f 85 ac 00 00 00    	jne    c00054af <f_setlabel+0x187>
c0005403:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005407:	ba 01 00 00 00       	mov    edx,0x1
c000540c:	e8 20 e5 ff ff       	call   c0003931 <dir_read>
c0005411:	85 c0                	test   eax,eax
c0005413:	75 18                	jne    c000542d <f_setlabel+0x105>
c0005415:	85 db                	test   ebx,ebx
c0005417:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000541b:	74 0b                	je     c0005428 <f_setlabel+0x100>
c000541d:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005421:	b9 0b 00 00 00       	mov    ecx,0xb
c0005426:	eb 47                	jmp    c000546f <f_setlabel+0x147>
c0005428:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000542b:	eb 47                	jmp    c0005474 <f_setlabel+0x14c>
c000542d:	83 f8 04             	cmp    eax,0x4
c0005430:	75 53                	jne    c0005485 <f_setlabel+0x15d>
c0005432:	85 db                	test   ebx,ebx
c0005434:	74 79                	je     c00054af <f_setlabel+0x187>
c0005436:	8d 44 24 20          	lea    eax,[esp+0x20]
c000543a:	ba 01 00 00 00       	mov    edx,0x1
c000543f:	e8 88 e4 ff ff       	call   c00038cc <dir_alloc>
c0005444:	85 c0                	test   eax,eax
c0005446:	89 c6                	mov    esi,eax
c0005448:	75 65                	jne    c00054af <f_setlabel+0x187>
c000544a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000544e:	b9 20 00 00 00       	mov    ecx,0x20
c0005453:	31 d2                	xor    edx,edx
c0005455:	e8 d7 cb ff ff       	call   c0002031 <mem_set>
c000545a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000545e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005463:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005467:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000546b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000546f:	e8 a8 cb ff ff       	call   c000201c <mem_cpy>
c0005474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005478:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000547c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005480:	e8 05 db ff ff       	call   c0002f8a <sync_fs>
c0005485:	89 c6                	mov    esi,eax
c0005487:	eb 26                	jmp    c00054af <f_setlabel+0x187>
c0005489:	83 fb 09             	cmp    ebx,0x9
c000548c:	0f 87 e6 fe ff ff    	ja     c0005378 <f_setlabel+0x50>
c0005492:	89 f0                	mov    eax,esi
c0005494:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005498:	43                   	inc    ebx
c0005499:	89 f8                	mov    eax,edi
c000549b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000549f:	43                   	inc    ebx
c00054a0:	e9 ba fe ff ff       	jmp    c000535f <f_setlabel+0x37>
c00054a5:	83 fb 0a             	cmp    ebx,0xa
c00054a8:	76 ef                	jbe    c0005499 <f_setlabel+0x171>
c00054aa:	e9 c9 fe ff ff       	jmp    c0005378 <f_setlabel+0x50>
c00054af:	83 c4 50             	add    esp,0x50
c00054b2:	89 f0                	mov    eax,esi
c00054b4:	5b                   	pop    ebx
c00054b5:	5e                   	pop    esi
c00054b6:	5f                   	pop    edi
c00054b7:	c3                   	ret    

c00054b8 <f_expand>:
c00054b8:	55                   	push   ebp
c00054b9:	57                   	push   edi
c00054ba:	56                   	push   esi
c00054bb:	53                   	push   ebx
c00054bc:	83 ec 2c             	sub    esp,0x2c
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054c7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054cf:	89 d8                	mov    eax,ebx
c00054d1:	e8 d6 cf ff ff       	call   c00024ac <validate>
c00054d6:	85 c0                	test   eax,eax
c00054d8:	89 c6                	mov    esi,eax
c00054da:	0f 85 3b 01 00 00    	jne    c000561b <f_expand+0x163>
c00054e0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054e4:	85 f6                	test   esi,esi
c00054e6:	0f 85 2f 01 00 00    	jne    c000561b <f_expand+0x163>
c00054ec:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054f1:	75 0a                	jne    c00054fd <f_expand+0x45>
c00054f3:	be 07 00 00 00       	mov    esi,0x7
c00054f8:	e9 1e 01 00 00       	jmp    c000561b <f_expand+0x163>
c00054fd:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005501:	75 f0                	jne    c00054f3 <f_expand+0x3b>
c0005503:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005507:	74 ea                	je     c00054f3 <f_expand+0x3b>
c0005509:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000550d:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005511:	c1 e7 09             	shl    edi,0x9
c0005514:	8d 47 ff             	lea    eax,[edi-0x1]
c0005517:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000551b:	0f 95 c0             	setne  al
c000551e:	31 d2                	xor    edx,edx
c0005520:	0f b6 c0             	movzx  eax,al
c0005523:	89 c5                	mov    ebp,eax
c0005525:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005529:	f7 f7                	div    edi
c000552b:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000552e:	01 e8                	add    eax,ebp
c0005530:	83 ff 01             	cmp    edi,0x1
c0005533:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005537:	76 05                	jbe    c000553e <f_expand+0x86>
c0005539:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000553c:	77 05                	ja     c0005543 <f_expand+0x8b>
c000553e:	bf 02 00 00 00       	mov    edi,0x2
c0005543:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005546:	89 fd                	mov    ebp,edi
c0005548:	31 c9                	xor    ecx,ecx
c000554a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000554e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005550:	89 ea                	mov    edx,ebp
c0005552:	45                   	inc    ebp
c0005553:	e8 da de ff ff       	call   c0003432 <get_fat.isra.2>
c0005558:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000555c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005560:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005563:	77 05                	ja     c000556a <f_expand+0xb2>
c0005565:	bd 02 00 00 00       	mov    ebp,0x2
c000556a:	83 f8 01             	cmp    eax,0x1
c000556d:	74 20                	je     c000558f <f_expand+0xd7>
c000556f:	83 f8 ff             	cmp    eax,0xffffffff
c0005572:	74 25                	je     c0005599 <f_expand+0xe1>
c0005574:	85 c0                	test   eax,eax
c0005576:	75 09                	jne    c0005581 <f_expand+0xc9>
c0005578:	41                   	inc    ecx
c0005579:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000557d:	75 07                	jne    c0005586 <f_expand+0xce>
c000557f:	eb 1f                	jmp    c00055a0 <f_expand+0xe8>
c0005581:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005584:	31 c9                	xor    ecx,ecx
c0005586:	39 fd                	cmp    ebp,edi
c0005588:	75 c0                	jne    c000554a <f_expand+0x92>
c000558a:	e9 64 ff ff ff       	jmp    c00054f3 <f_expand+0x3b>
c000558f:	be 02 00 00 00       	mov    esi,0x2
c0005594:	e9 82 00 00 00       	jmp    c000561b <f_expand+0x163>
c0005599:	be 01 00 00 00       	mov    esi,0x1
c000559e:	eb 7b                	jmp    c000561b <f_expand+0x163>
c00055a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055a5:	74 2b                	je     c00055d2 <f_expand+0x11a>
c00055a7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00055aa:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00055ae:	85 ed                	test   ebp,ebp
c00055b0:	74 24                	je     c00055d6 <f_expand+0x11e>
c00055b2:	83 c9 ff             	or     ecx,0xffffffff
c00055b5:	83 fd 01             	cmp    ebp,0x1
c00055b8:	74 03                	je     c00055bd <f_expand+0x105>
c00055ba:	8d 4f 01             	lea    ecx,[edi+0x1]
c00055bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c1:	89 fa                	mov    edx,edi
c00055c3:	e8 e7 d3 ff ff       	call   c00029af <put_fat>
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 4d                	jne    c0005619 <f_expand+0x161>
c00055cc:	89 f8                	mov    eax,edi
c00055ce:	4d                   	dec    ebp
c00055cf:	47                   	inc    edi
c00055d0:	eb dc                	jmp    c00055ae <f_expand+0xf6>
c00055d2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055d5:	48                   	dec    eax
c00055d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055da:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055df:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055e2:	74 37                	je     c000561b <f_expand+0x163>
c00055e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055ea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ee:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055f1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055f4:	83 c8 40             	or     eax,0x40
c00055f7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055fa:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055fd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005600:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005603:	39 c8                	cmp    eax,ecx
c0005605:	77 14                	ja     c000561b <f_expand+0x163>
c0005607:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000560b:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000560e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005611:	83 c8 01             	or     eax,0x1
c0005614:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005617:	eb 02                	jmp    c000561b <f_expand+0x163>
c0005619:	89 c6                	mov    esi,eax
c000561b:	83 c4 2c             	add    esp,0x2c
c000561e:	89 f0                	mov    eax,esi
c0005620:	5b                   	pop    ebx
c0005621:	5e                   	pop    esi
c0005622:	5f                   	pop    edi
c0005623:	5d                   	pop    ebp
c0005624:	c3                   	ret    

c0005625 <f_mkfs>:
c0005625:	55                   	push   ebp
c0005626:	57                   	push   edi
c0005627:	56                   	push   esi
c0005628:	be 0b 00 00 00       	mov    esi,0xb
c000562d:	53                   	push   ebx
c000562e:	83 ec 5c             	sub    esp,0x5c
c0005631:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005639:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000563d:	e8 1e ce ff ff       	call   c0002460 <get_ldnumber>
c0005642:	85 c0                	test   eax,eax
c0005644:	0f 88 e0 07 00 00    	js     c0005e2a <f_mkfs+0x805>
c000564a:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005651:	85 d2                	test   edx,edx
c0005653:	74 03                	je     c0005658 <f_mkfs+0x33>
c0005655:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005658:	85 db                	test   ebx,ebx
c000565a:	75 05                	jne    c0005661 <f_mkfs+0x3c>
c000565c:	bb 00 09 02 c0       	mov    ebx,0xc0020900
c0005661:	0f b6 c0             	movzx  eax,al
c0005664:	83 ec 0c             	sub    esp,0xc
c0005667:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000566b:	be 03 00 00 00       	mov    esi,0x3
c0005670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005674:	e8 29 c9 ff ff       	call   c0001fa2 <disk_initialize>
c0005679:	83 c4 10             	add    esp,0x10
c000567c:	a8 01                	test   al,0x1
c000567e:	0f 85 a6 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005684:	a8 04                	test   al,0x4
c0005686:	be 0a 00 00 00       	mov    esi,0xa
c000568b:	0f 85 99 07 00 00    	jne    c0005e2a <f_mkfs+0x805>
c0005691:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005694:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005698:	85 c0                	test   eax,eax
c000569a:	75 20                	jne    c00056bc <f_mkfs+0x97>
c000569c:	51                   	push   ecx
c000569d:	8d 44 24 44          	lea    eax,[esp+0x44]
c00056a1:	50                   	push   eax
c00056a2:	6a 03                	push   0x3
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 24 c9 ff ff       	call   c0001fd1 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	74 08                	je     c00056bc <f_mkfs+0x97>
c00056b4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056c0:	8d 42 ff             	lea    eax,[edx-0x1]
c00056c3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056c8:	77 04                	ja     c00056ce <f_mkfs+0xa9>
c00056ca:	85 c2                	test   edx,eax
c00056cc:	74 08                	je     c00056d6 <f_mkfs+0xb1>
c00056ce:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056d9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056e1:	48                   	dec    eax
c00056e2:	3c 01                	cmp    al,0x1
c00056e4:	76 05                	jbe    c00056eb <f_mkfs+0xc6>
c00056e6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056eb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056f2:	48                   	dec    eax
c00056f3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056f8:	77 15                	ja     c000570f <f_mkfs+0xea>
c00056fa:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056ff:	b8 00 02 00 00       	mov    eax,0x200
c0005704:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005709:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000570d:	eb 08                	jmp    c0005717 <f_mkfs+0xf2>
c000570f:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005717:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000571a:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005720:	77 0f                	ja     c0005731 <f_mkfs+0x10c>
c0005722:	8d 47 ff             	lea    eax,[edi-0x1]
c0005725:	85 f8                	test   eax,edi
c0005727:	b8 00 00 00 00       	mov    eax,0x0
c000572c:	0f 45 f8             	cmovne edi,eax
c000572f:	eb 02                	jmp    c0005733 <f_mkfs+0x10e>
c0005731:	31 ff                	xor    edi,edi
c0005733:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000573b:	77 0a                	ja     c0005747 <f_mkfs+0x122>
c000573d:	be 11 00 00 00       	mov    esi,0x11
c0005742:	e9 e3 06 00 00       	jmp    c0005e2a <f_mkfs+0x805>
c0005747:	85 ed                	test   ebp,ebp
c0005749:	8b 33                	mov    esi,DWORD PTR [ebx]
c000574b:	89 eb                	mov    ebx,ebp
c000574d:	75 1e                	jne    c000576d <f_mkfs+0x148>
c000574f:	83 ec 0c             	sub    esp,0xc
c0005752:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005759:	25 00 fe ff ff       	and    eax,0xfffffe00
c000575e:	50                   	push   eax
c000575f:	e8 d0 06 00 00       	call   c0005e34 <ff_memalloc>
c0005764:	83 c4 10             	add    esp,0x10
c0005767:	85 c0                	test   eax,eax
c0005769:	89 c3                	mov    ebx,eax
c000576b:	74 d0                	je     c000573d <f_mkfs+0x118>
c000576d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005775:	52                   	push   edx
c0005776:	8d 44 24 48          	lea    eax,[esp+0x48]
c000577a:	50                   	push   eax
c000577b:	6a 01                	push   0x1
c000577d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005781:	e8 4b c8 ff ff       	call   c0001fd1 <disk_ioctl>
c0005786:	83 c4 10             	add    esp,0x10
c0005789:	85 c0                	test   eax,eax
c000578b:	0f 85 42 06 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005791:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005799:	89 f0                	mov    eax,esi
c000579b:	83 e0 08             	and    eax,0x8
c000579e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00057a2:	75 18                	jne    c00057bc <f_mkfs+0x197>
c00057a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057a8:	83 f8 3f             	cmp    eax,0x3f
c00057ab:	76 0f                	jbe    c00057bc <f_mkfs+0x197>
c00057ad:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00057b5:	83 e8 3f             	sub    eax,0x3f
c00057b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00057bc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00057c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00057c4:	83 f8 7f             	cmp    eax,0x7f
c00057c7:	0f 86 5f 02 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c00057cd:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057d3:	b9 80 00 00 00       	mov    ecx,0x80
c00057d8:	77 05                	ja     c00057df <f_mkfs+0x1ba>
c00057da:	c1 ef 09             	shr    edi,0x9
c00057dd:	89 f9                	mov    ecx,edi
c00057df:	89 f0                	mov    eax,esi
c00057e1:	89 f7                	mov    edi,esi
c00057e3:	83 e0 01             	and    eax,0x1
c00057e6:	83 e7 02             	and    edi,0x2
c00057e9:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057ed:	0f b6 c0             	movzx  eax,al
c00057f0:	74 0a                	je     c00057fc <f_mkfs+0x1d7>
c00057f2:	85 c0                	test   eax,eax
c00057f4:	0f 84 53 01 00 00    	je     c000594d <f_mkfs+0x328>
c00057fa:	eb 37                	jmp    c0005833 <f_mkfs+0x20e>
c00057fc:	85 c0                	test   eax,eax
c00057fe:	be 13 00 00 00       	mov    esi,0x13
c0005803:	75 2e                	jne    c0005833 <f_mkfs+0x20e>
c0005805:	e9 e0 05 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c000580a:	83 f8 02             	cmp    eax,0x2
c000580d:	0f 85 11 02 00 00    	jne    c0005a24 <f_mkfs+0x3ff>
c0005813:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005819:	0f 86 e8 01 00 00    	jbe    c0005a07 <f_mkfs+0x3e2>
c000581f:	85 c9                	test   ecx,ecx
c0005821:	0f 85 d5 05 00 00    	jne    c0005dfc <f_mkfs+0x7d7>
c0005827:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000582a:	83 f9 40             	cmp    ecx,0x40
c000582d:	0f 87 d9 05 00 00    	ja     c0005e0c <f_mkfs+0x7e7>
c0005833:	85 c9                	test   ecx,ecx
c0005835:	89 cf                	mov    edi,ecx
c0005837:	75 1c                	jne    c0005855 <f_mkfs+0x230>
c0005839:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000583d:	b8 e0 08 02 c0       	mov    eax,0xc00208e0
c0005842:	bf 01 00 00 00       	mov    edi,0x1
c0005847:	c1 ee 0c             	shr    esi,0xc
c000584a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000584d:	85 d2                	test   edx,edx
c000584f:	0f 85 67 01 00 00    	jne    c00059bc <f_mkfs+0x397>
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	31 d2                	xor    edx,edx
c000585b:	f7 f7                	div    edi
c000585d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005862:	0f 86 66 01 00 00    	jbe    c00059ce <f_mkfs+0x3a9>
c0005868:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000586d:	83 c0 02             	add    eax,0x2
c0005870:	01 c0                	add    eax,eax
c0005872:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000587a:	05 ff 01 00 00       	add    eax,0x1ff
c000587f:	c1 e8 09             	shr    eax,0x9
c0005882:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000588a:	c1 e0 05             	shl    eax,0x5
c000588d:	c1 e8 09             	shr    eax,0x9
c0005890:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005894:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005899:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000589d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058a1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00058a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00058a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058ad:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058b2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00058b6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00058ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00058be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00058c2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00058c6:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058ca:	f7 d8                	neg    eax
c00058cc:	21 c6                	and    esi,eax
c00058ce:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058d3:	29 d6                	sub    esi,edx
c00058d5:	83 f8 03             	cmp    eax,0x3
c00058d8:	0f 85 03 01 00 00    	jne    c00059e1 <f_mkfs+0x3bc>
c00058de:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058e2:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058e6:	89 f8                	mov    eax,edi
c00058e8:	c1 e0 04             	shl    eax,0x4
c00058eb:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058ef:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058f7:	0f 82 2f 01 00 00    	jb     c0005a2c <f_mkfs+0x407>
c00058fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005901:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005905:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005909:	89 c2                	mov    edx,eax
c000590b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000590f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005914:	29 c2                	sub    edx,eax
c0005916:	89 d0                	mov    eax,edx
c0005918:	31 d2                	xor    edx,edx
c000591a:	f7 f7                	div    edi
c000591c:	89 c6                	mov    esi,eax
c000591e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005923:	83 f8 03             	cmp    eax,0x3
c0005926:	0f 85 de fe ff ff    	jne    c000580a <f_mkfs+0x1e5>
c000592c:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005932:	0f 87 03 01 00 00    	ja     c0005a3b <f_mkfs+0x416>
c0005938:	85 c9                	test   ecx,ecx
c000593a:	0f 85 ec 00 00 00    	jne    c0005a2c <f_mkfs+0x407>
c0005940:	83 ff 01             	cmp    edi,0x1
c0005943:	0f 86 e3 00 00 00    	jbe    c0005a2c <f_mkfs+0x407>
c0005949:	d1 ef                	shr    edi,1
c000594b:	89 f9                	mov    ecx,edi
c000594d:	85 c9                	test   ecx,ecx
c000594f:	89 ce                	mov    esi,ecx
c0005951:	75 25                	jne    c0005978 <f_mkfs+0x353>
c0005953:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005957:	b8 f0 08 02 c0       	mov    eax,0xc00208f0
c000595c:	b9 01 00 00 00       	mov    ecx,0x1
c0005961:	c1 ee 11             	shr    esi,0x11
c0005964:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005967:	85 d2                	test   edx,edx
c0005969:	74 0b                	je     c0005976 <f_mkfs+0x351>
c000596b:	83 c0 02             	add    eax,0x2
c000596e:	39 f2                	cmp    edx,esi
c0005970:	77 04                	ja     c0005976 <f_mkfs+0x351>
c0005972:	01 c9                	add    ecx,ecx
c0005974:	eb ee                	jmp    c0005964 <f_mkfs+0x33f>
c0005976:	31 f6                	xor    esi,esi
c0005978:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000597c:	31 d2                	xor    edx,edx
c000597e:	f7 f1                	div    ecx
c0005980:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005987:	2d f6 ff 00 00       	sub    eax,0xfff6
c000598c:	c1 ea 09             	shr    edx,0x9
c000598f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005994:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005998:	0f 87 8e 00 00 00    	ja     c0005a2c <f_mkfs+0x407>
c000599e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00059a6:	89 cf                	mov    edi,ecx
c00059a8:	89 f1                	mov    ecx,esi
c00059aa:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00059b2:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00059b7:	e9 d8 fe ff ff       	jmp    c0005894 <f_mkfs+0x26f>
c00059bc:	83 c0 02             	add    eax,0x2
c00059bf:	39 f2                	cmp    edx,esi
c00059c1:	0f 87 8e fe ff ff    	ja     c0005855 <f_mkfs+0x230>
c00059c7:	01 ff                	add    edi,edi
c00059c9:	e9 7c fe ff ff       	jmp    c000584a <f_mkfs+0x225>
c00059ce:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059d3:	8d 04 40             	lea    eax,[eax+eax*2]
c00059d6:	40                   	inc    eax
c00059d7:	d1 e8                	shr    eax,1
c00059d9:	83 c0 03             	add    eax,0x3
c00059dc:	e9 91 fe ff ff       	jmp    c0005872 <f_mkfs+0x24d>
c00059e1:	31 d2                	xor    edx,edx
c00059e3:	89 f0                	mov    eax,esi
c00059e5:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059e9:	85 d2                	test   edx,edx
c00059eb:	74 09                	je     c00059f6 <f_mkfs+0x3d1>
c00059ed:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059f1:	4e                   	dec    esi
c00059f2:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059f6:	89 f0                	mov    eax,esi
c00059f8:	31 d2                	xor    edx,edx
c00059fa:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059fe:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005a02:	e9 df fe ff ff       	jmp    c00058e6 <f_mkfs+0x2c1>
c0005a07:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a0d:	77 2c                	ja     c0005a3b <f_mkfs+0x416>
c0005a0f:	85 c9                	test   ecx,ecx
c0005a11:	75 19                	jne    c0005a2c <f_mkfs+0x407>
c0005a13:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005a16:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a1c:	0f 86 11 fe ff ff    	jbe    c0005833 <f_mkfs+0x20e>
c0005a22:	eb 08                	jmp    c0005a2c <f_mkfs+0x407>
c0005a24:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a2a:	76 0a                	jbe    c0005a36 <f_mkfs+0x411>
c0005a2c:	be 0e 00 00 00       	mov    esi,0xe
c0005a31:	e9 b4 03 00 00       	jmp    c0005dea <f_mkfs+0x7c5>
c0005a36:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a3b:	31 d2                	xor    edx,edx
c0005a3d:	b9 00 02 00 00       	mov    ecx,0x200
c0005a42:	89 d8                	mov    eax,ebx
c0005a44:	e8 e8 c5 ff ff       	call   c0002031 <mem_set>
c0005a49:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a4e:	ba 92 08 02 c0       	mov    edx,0xc0020892
c0005a53:	89 d8                	mov    eax,ebx
c0005a55:	e8 c2 c5 ff ff       	call   c000201c <mem_cpy>
c0005a5a:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a5d:	ba 00 02 00 00       	mov    edx,0x200
c0005a62:	e8 ae c5 ff ff       	call   c0002015 <st_word>
c0005a67:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a6c:	89 f8                	mov    eax,edi
c0005a6e:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a71:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a74:	e8 9c c5 ff ff       	call   c0002015 <st_word>
c0005a79:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a7d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	b8 00 00 00 00       	mov    eax,0x0
c0005a8d:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a96:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a9d:	e8 73 c5 ff ff       	call   c0002015 <st_word>
c0005aa2:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005aa6:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005aac:	77 0a                	ja     c0005ab8 <f_mkfs+0x493>
c0005aae:	8d 43 13             	lea    eax,[ebx+0x13]
c0005ab1:	e8 5f c5 ff ff       	call   c0002015 <st_word>
c0005ab6:	eb 08                	jmp    c0005ac0 <f_mkfs+0x49b>
c0005ab8:	8d 43 20             	lea    eax,[ebx+0x20]
c0005abb:	e8 59 c5 ff ff       	call   c0002019 <st_dword>
c0005ac0:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005ac4:	8d 43 18             	lea    eax,[ebx+0x18]
c0005ac7:	ba 3f 00 00 00       	mov    edx,0x3f
c0005acc:	e8 44 c5 ff ff       	call   c0002015 <st_word>
c0005ad1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005ad4:	ba ff 00 00 00       	mov    edx,0xff
c0005ad9:	e8 37 c5 ff ff       	call   c0002015 <st_word>
c0005ade:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ae2:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005ae5:	e8 2f c5 ff ff       	call   c0002019 <st_dword>
c0005aea:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005aef:	83 f8 03             	cmp    eax,0x3
c0005af2:	75 57                	jne    c0005b4b <f_mkfs+0x526>
c0005af4:	8d 43 43             	lea    eax,[ebx+0x43]
c0005af7:	ba 00 00 21 50       	mov    edx,0x50210000
c0005afc:	e8 18 c5 ff ff       	call   c0002019 <st_dword>
c0005b01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005b05:	8d 43 24             	lea    eax,[ebx+0x24]
c0005b08:	e8 0c c5 ff ff       	call   c0002019 <st_dword>
c0005b0d:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005b10:	ba 02 00 00 00       	mov    edx,0x2
c0005b15:	e8 ff c4 ff ff       	call   c0002019 <st_dword>
c0005b1a:	8d 43 30             	lea    eax,[ebx+0x30]
c0005b1d:	ba 01 00 00 00       	mov    edx,0x1
c0005b22:	e8 ee c4 ff ff       	call   c0002015 <st_word>
c0005b27:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b2a:	ba 06 00 00 00       	mov    edx,0x6
c0005b2f:	e8 e1 c4 ff ff       	call   c0002015 <st_word>
c0005b34:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b37:	b9 13 00 00 00       	mov    ecx,0x13
c0005b3c:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b40:	ba 9e 08 02 c0       	mov    edx,0xc002089e
c0005b45:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b49:	eb 2f                	jmp    c0005b7a <f_mkfs+0x555>
c0005b4b:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b53:	e8 c1 c4 ff ff       	call   c0002019 <st_dword>
c0005b58:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b5d:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b60:	e8 b0 c4 ff ff       	call   c0002015 <st_word>
c0005b65:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b68:	b9 13 00 00 00       	mov    ecx,0x13
c0005b6d:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b71:	ba b2 08 02 c0       	mov    edx,0xc00208b2
c0005b76:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b7a:	e8 9d c4 ff ff       	call   c000201c <mem_cpy>
c0005b7f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b85:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8e:	e8 82 c4 ff ff       	call   c0002015 <st_word>
c0005b93:	6a 01                	push   0x1
c0005b95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b99:	53                   	push   ebx
c0005b9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b9e:	e8 18 c4 ff ff       	call   c0001fbb <disk_write>
c0005ba3:	83 c4 10             	add    esp,0x10
c0005ba6:	85 c0                	test   eax,eax
c0005ba8:	0f 85 25 02 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005bae:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005bb3:	83 f8 03             	cmp    eax,0x3
c0005bb6:	0f 85 98 00 00 00    	jne    c0005c54 <f_mkfs+0x62f>
c0005bbc:	6a 01                	push   0x1
c0005bbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bc2:	83 c0 06             	add    eax,0x6
c0005bc5:	50                   	push   eax
c0005bc6:	53                   	push   ebx
c0005bc7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bcb:	e8 eb c3 ff ff       	call   c0001fbb <disk_write>
c0005bd0:	b9 00 02 00 00       	mov    ecx,0x200
c0005bd5:	31 d2                	xor    edx,edx
c0005bd7:	89 d8                	mov    eax,ebx
c0005bd9:	e8 53 c4 ff ff       	call   c0002031 <mem_set>
c0005bde:	ba 52 52 61 41       	mov    edx,0x41615252
c0005be3:	89 d8                	mov    eax,ebx
c0005be5:	e8 2f c4 ff ff       	call   c0002019 <st_dword>
c0005bea:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bf0:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bf5:	e8 1f c4 ff ff       	call   c0002019 <st_dword>
c0005bfa:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bfd:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005c03:	e8 11 c4 ff ff       	call   c0002019 <st_dword>
c0005c08:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005c0e:	ba 02 00 00 00       	mov    edx,0x2
c0005c13:	e8 01 c4 ff ff       	call   c0002019 <st_dword>
c0005c18:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005c1e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005c23:	e8 ed c3 ff ff       	call   c0002015 <st_word>
c0005c28:	6a 01                	push   0x1
c0005c2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c2e:	83 c0 07             	add    eax,0x7
c0005c31:	50                   	push   eax
c0005c32:	53                   	push   ebx
c0005c33:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c37:	e8 7f c3 ff ff       	call   c0001fbb <disk_write>
c0005c3c:	83 c4 20             	add    esp,0x20
c0005c3f:	6a 01                	push   0x1
c0005c41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c45:	40                   	inc    eax
c0005c46:	50                   	push   eax
c0005c47:	53                   	push   ebx
c0005c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c4c:	e8 6a c3 ff ff       	call   c0001fbb <disk_write>
c0005c51:	83 c4 10             	add    esp,0x10
c0005c54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c5e:	c1 e8 09             	shr    eax,0x9
c0005c61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c65:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c6b:	89 d8                	mov    eax,ebx
c0005c6d:	e8 bf c3 ff ff       	call   c0002031 <mem_set>
c0005c72:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c77:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c7c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c89:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c8d:	83 f8 01             	cmp    eax,0x1
c0005c90:	0f 44 d1             	cmove  edx,ecx
c0005c93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c97:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c9c:	75 21                	jne    c0005cbf <f_mkfs+0x69a>
c0005c9e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ca3:	89 d8                	mov    eax,ebx
c0005ca5:	e8 6f c3 ff ff       	call   c0002019 <st_dword>
c0005caa:	8d 43 04             	lea    eax,[ebx+0x4]
c0005cad:	83 ca ff             	or     edx,0xffffffff
c0005cb0:	e8 64 c3 ff ff       	call   c0002019 <st_dword>
c0005cb5:	8d 43 08             	lea    eax,[ebx+0x8]
c0005cb8:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005cbd:	eb 06                	jmp    c0005cc5 <f_mkfs+0x6a0>
c0005cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005cc3:	89 d8                	mov    eax,ebx
c0005cc5:	e8 4f c3 ff ff       	call   c0002019 <st_dword>
c0005cca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005cd2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cd6:	0f 46 c6             	cmovbe eax,esi
c0005cd9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cdd:	50                   	push   eax
c0005cde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005ce2:	53                   	push   ebx
c0005ce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ce7:	e8 cf c2 ff ff       	call   c0001fbb <disk_write>
c0005cec:	83 c4 10             	add    esp,0x10
c0005cef:	85 c0                	test   eax,eax
c0005cf1:	0f 85 dc 00 00 00    	jne    c0005dd3 <f_mkfs+0x7ae>
c0005cf7:	b9 00 02 00 00       	mov    ecx,0x200
c0005cfc:	31 d2                	xor    edx,edx
c0005cfe:	89 d8                	mov    eax,ebx
c0005d00:	e8 2c c3 ff ff       	call   c0002031 <mem_set>
c0005d05:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005d09:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005d0d:	29 ce                	sub    esi,ecx
c0005d0f:	75 bd                	jne    c0005cce <f_mkfs+0x6a9>
c0005d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005d1d:	40                   	inc    eax
c0005d1e:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005d22:	0f 87 6f ff ff ff    	ja     c0005c97 <f_mkfs+0x672>
c0005d28:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d2d:	83 f8 03             	cmp    eax,0x3
c0005d30:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d39:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d3d:	0f 46 f7             	cmovbe esi,edi
c0005d40:	56                   	push   esi
c0005d41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d45:	53                   	push   ebx
c0005d46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d4a:	e8 6c c2 ff ff       	call   c0001fbb <disk_write>
c0005d4f:	83 c4 10             	add    esp,0x10
c0005d52:	85 c0                	test   eax,eax
c0005d54:	75 7d                	jne    c0005dd3 <f_mkfs+0x7ae>
c0005d56:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d5a:	29 f7                	sub    edi,esi
c0005d5c:	75 d7                	jne    c0005d35 <f_mkfs+0x710>
c0005d5e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d63:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d68:	83 f8 03             	cmp    eax,0x3
c0005d6b:	74 1e                	je     c0005d8b <f_mkfs+0x766>
c0005d6d:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d75:	b9 06 00 00 00       	mov    ecx,0x6
c0005d7a:	77 0f                	ja     c0005d8b <f_mkfs+0x766>
c0005d7c:	83 f8 02             	cmp    eax,0x2
c0005d7f:	b9 04 00 00 00       	mov    ecx,0x4
c0005d84:	74 05                	je     c0005d8b <f_mkfs+0x766>
c0005d86:	b9 01 00 00 00       	mov    ecx,0x1
c0005d8b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d90:	75 2a                	jne    c0005dbc <f_mkfs+0x797>
c0005d92:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d9a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d9e:	83 ec 0c             	sub    esp,0xc
c0005da1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005da5:	53                   	push   ebx
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005dae:	e8 87 d2 ff ff       	call   c000303a <create_partition>
c0005db3:	83 c4 10             	add    esp,0x10
c0005db6:	85 c0                	test   eax,eax
c0005db8:	89 c6                	mov    esi,eax
c0005dba:	75 2e                	jne    c0005dea <f_mkfs+0x7c5>
c0005dbc:	50                   	push   eax
c0005dbd:	31 f6                	xor    esi,esi
c0005dbf:	6a 00                	push   0x0
c0005dc1:	6a 00                	push   0x0
c0005dc3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005dc7:	e8 05 c2 ff ff       	call   c0001fd1 <disk_ioctl>
c0005dcc:	83 c4 10             	add    esp,0x10
c0005dcf:	85 c0                	test   eax,eax
c0005dd1:	74 17                	je     c0005dea <f_mkfs+0x7c5>
c0005dd3:	85 ed                	test   ebp,ebp
c0005dd5:	75 0c                	jne    c0005de3 <f_mkfs+0x7be>
c0005dd7:	83 ec 0c             	sub    esp,0xc
c0005dda:	53                   	push   ebx
c0005ddb:	e8 6c 00 00 00       	call   c0005e4c <ff_memfree>
c0005de0:	83 c4 10             	add    esp,0x10
c0005de3:	be 01 00 00 00       	mov    esi,0x1
c0005de8:	eb 40                	jmp    c0005e2a <f_mkfs+0x805>
c0005dea:	85 ed                	test   ebp,ebp
c0005dec:	75 3c                	jne    c0005e2a <f_mkfs+0x805>
c0005dee:	83 ec 0c             	sub    esp,0xc
c0005df1:	53                   	push   ebx
c0005df2:	e8 55 00 00 00       	call   c0005e4c <ff_memfree>
c0005df7:	83 c4 10             	add    esp,0x10
c0005dfa:	eb 2e                	jmp    c0005e2a <f_mkfs+0x805>
c0005dfc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e01:	0f 85 46 fb ff ff    	jne    c000594d <f_mkfs+0x328>
c0005e07:	e9 20 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e0c:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005e11:	0f 85 3c fb ff ff    	jne    c0005953 <f_mkfs+0x32e>
c0005e17:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005e1d:	89 cf                	mov    edi,ecx
c0005e1f:	0f 86 30 fa ff ff    	jbe    c0005855 <f_mkfs+0x230>
c0005e25:	e9 02 fc ff ff       	jmp    c0005a2c <f_mkfs+0x407>
c0005e2a:	83 c4 5c             	add    esp,0x5c
c0005e2d:	89 f0                	mov    eax,esi
c0005e2f:	5b                   	pop    ebx
c0005e30:	5e                   	pop    esi
c0005e31:	5f                   	pop    edi
c0005e32:	5d                   	pop    ebp
c0005e33:	c3                   	ret    

c0005e34 <ff_memalloc>:
c0005e34:	83 ec 0c             	sub    esp,0xc
c0005e37:	83 ec 0c             	sub    esp,0xc
c0005e3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e3e:	e8 8d 8a 00 00       	call   c000e8d0 <malloc>
c0005e43:	83 c4 10             	add    esp,0x10
c0005e46:	83 c4 0c             	add    esp,0xc
c0005e49:	c3                   	ret    
c0005e4a:	66 90                	xchg   ax,ax

c0005e4c <ff_memfree>:
c0005e4c:	83 ec 0c             	sub    esp,0xc
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e56:	e8 85 8a 00 00       	call   c000e8e0 <free>
c0005e5b:	83 c4 10             	add    esp,0x10
c0005e5e:	90                   	nop
c0005e5f:	83 c4 0c             	add    esp,0xc
c0005e62:	c3                   	ret    
c0005e63:	90                   	nop

c0005e64 <ff_uni2oem>:
c0005e64:	83 ec 14             	sub    esp,0x14
c0005e67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e6b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e6f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e76:	c7 44 24 0c e0 0c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020ce0
c0005e7e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e83:	77 0b                	ja     c0005e90 <ff_uni2oem+0x2c>
c0005e85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e89:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e8e:	eb 64                	jmp    c0005ef4 <ff_uni2oem+0x90>
c0005e90:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e98:	77 5a                	ja     c0005ef4 <ff_uni2oem+0x90>
c0005e9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e9e:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005ea3:	75 4f                	jne    c0005ef4 <ff_uni2oem+0x90>
c0005ea5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005eac:	eb 12                	jmp    c0005ec0 <ff_uni2oem+0x5c>
c0005eae:	66 90                	xchg   ax,ax
c0005eb0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005eb5:	83 c0 01             	add    eax,0x1
c0005eb8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ec0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ec5:	83 f8 7f             	cmp    eax,0x7f
c0005ec8:	77 1a                	ja     c0005ee4 <ff_uni2oem+0x80>
c0005eca:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ecf:	8d 14 00             	lea    edx,[eax+eax*1]
c0005ed2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed6:	01 d0                	add    eax,edx
c0005ed8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edb:	0f b7 c0             	movzx  eax,ax
c0005ede:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ee2:	75 cc                	jne    c0005eb0 <ff_uni2oem+0x4c>
c0005ee4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ee9:	83 e8 80             	sub    eax,0xffffff80
c0005eec:	0f b6 c0             	movzx  eax,al
c0005eef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ef4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ef9:	83 c4 14             	add    esp,0x14
c0005efc:	c3                   	ret    
c0005efd:	8d 76 00             	lea    esi,[esi+0x0]

c0005f00 <ff_oem2uni>:
c0005f00:	83 ec 18             	sub    esp,0x18
c0005f03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005f07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005f0b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005f10:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005f14:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005f1b:	c7 44 24 10 e0 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ce0
c0005f23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f28:	83 f8 7f             	cmp    eax,0x7f
c0005f2b:	77 0b                	ja     c0005f38 <ff_oem2uni+0x38>
c0005f2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f31:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f36:	eb 34                	jmp    c0005f6c <ff_oem2uni+0x6c>
c0005f38:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f3c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f41:	75 29                	jne    c0005f6c <ff_oem2uni+0x6c>
c0005f43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f48:	3d ff 00 00 00       	cmp    eax,0xff
c0005f4d:	77 1d                	ja     c0005f6c <ff_oem2uni+0x6c>
c0005f4f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f54:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f59:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f60:	01 d0                	add    eax,edx
c0005f62:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f65:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f6a:	66 90                	xchg   ax,ax
c0005f6c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f71:	83 c4 18             	add    esp,0x18
c0005f74:	c3                   	ret    
c0005f75:	8d 76 00             	lea    esi,[esi+0x0]

c0005f78 <ff_wtoupper>:
c0005f78:	83 ec 10             	sub    esp,0x10
c0005f7b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f83:	0f 87 a7 01 00 00    	ja     c0006130 <ff_wtoupper+0x1b8>
c0005f89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f8d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f92:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f97:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f9c:	77 0a                	ja     c0005fa8 <ff_wtoupper+0x30>
c0005f9e:	b8 e0 0a 02 c0       	mov    eax,0xc0020ae0
c0005fa3:	eb 0b                	jmp    c0005fb0 <ff_wtoupper+0x38>
c0005fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0005fa8:	b8 20 0a 02 c0       	mov    eax,0xc0020a20
c0005fad:	8d 76 00             	lea    esi,[esi+0x0]
c0005fb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb8:	8d 50 02             	lea    edx,[eax+0x2]
c0005fbb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fbf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fc2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005fc7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fcc:	85 c0                	test   eax,eax
c0005fce:	0f 84 50 01 00 00    	je     c0006124 <ff_wtoupper+0x1ac>
c0005fd4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fd9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fde:	39 c2                	cmp    edx,eax
c0005fe0:	0f 82 3e 01 00 00    	jb     c0006124 <ff_wtoupper+0x1ac>
c0005fe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fea:	8d 50 02             	lea    edx,[eax+0x2]
c0005fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ff1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ff4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	c1 e8 08             	shr    eax,0x8
c0006001:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0006006:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000600b:	0f b6 c0             	movzx  eax,al
c000600e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0006013:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006018:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000601d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0006022:	01 ca                	add    edx,ecx
c0006024:	39 d0                	cmp    eax,edx
c0006026:	0f 8d d4 00 00 00    	jge    c0006100 <ff_wtoupper+0x188>
c000602c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006031:	83 f8 08             	cmp    eax,0x8
c0006034:	0f 87 e6 00 00 00    	ja     c0006120 <ff_wtoupper+0x1a8>
c000603a:	8b 04 85 e0 09 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf620]
c0006041:	ff e0                	jmp    eax
c0006043:	90                   	nop
c0006044:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006049:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000604e:	29 c2                	sub    edx,eax
c0006050:	89 d0                	mov    eax,edx
c0006052:	8d 14 00             	lea    edx,[eax+eax*1]
c0006055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006059:	01 d0                	add    eax,edx
c000605b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000605e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006063:	e9 94 00 00 00       	jmp    c00060fc <ff_wtoupper+0x184>
c0006068:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c000606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006071:	89 d1                	mov    ecx,edx
c0006073:	29 c1                	sub    ecx,eax
c0006075:	89 c8                	mov    eax,ecx
c0006077:	83 e0 01             	and    eax,0x1
c000607a:	89 c2                	mov    edx,eax
c000607c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006081:	29 d0                	sub    eax,edx
c0006083:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006088:	eb 72                	jmp    c00060fc <ff_wtoupper+0x184>
c000608a:	66 90                	xchg   ax,ax
c000608c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006091:	83 e8 10             	sub    eax,0x10
c0006094:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006099:	eb 61                	jmp    c00060fc <ff_wtoupper+0x184>
c000609b:	90                   	nop
c000609c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a1:	83 e8 20             	sub    eax,0x20
c00060a4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a9:	eb 51                	jmp    c00060fc <ff_wtoupper+0x184>
c00060ab:	90                   	nop
c00060ac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b1:	83 e8 30             	sub    eax,0x30
c00060b4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b9:	eb 41                	jmp    c00060fc <ff_wtoupper+0x184>
c00060bb:	90                   	nop
c00060bc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c1:	83 e8 1a             	sub    eax,0x1a
c00060c4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c9:	eb 31                	jmp    c00060fc <ff_wtoupper+0x184>
c00060cb:	90                   	nop
c00060cc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060d1:	83 c0 08             	add    eax,0x8
c00060d4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d9:	eb 21                	jmp    c00060fc <ff_wtoupper+0x184>
c00060db:	90                   	nop
c00060dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060e1:	83 e8 50             	sub    eax,0x50
c00060e4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060e9:	eb 11                	jmp    c00060fc <ff_wtoupper+0x184>
c00060eb:	90                   	nop
c00060ec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060f1:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060fb:	90                   	nop
c00060fc:	eb 22                	jmp    c0006120 <ff_wtoupper+0x1a8>
c00060fe:	66 90                	xchg   ax,ax
c0006100:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006105:	85 c0                	test   eax,eax
c0006107:	0f 85 a7 fe ff ff    	jne    c0005fb4 <ff_wtoupper+0x3c>
c000610d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0006112:	d1 e0                	shl    eax,1
c0006114:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006118:	e9 97 fe ff ff       	jmp    c0005fb4 <ff_wtoupper+0x3c>
c000611d:	8d 76 00             	lea    esi,[esi+0x0]
c0006120:	90                   	nop
c0006121:	8d 76 00             	lea    esi,[esi+0x0]
c0006124:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006129:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000612d:	8d 76 00             	lea    esi,[esi+0x0]
c0006130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006134:	83 c4 10             	add    esp,0x10
c0006137:	c3                   	ret    

c0006138 <utf2ucs>:
c0006138:	57                   	push   edi
c0006139:	31 c9                	xor    ecx,ecx
c000613b:	56                   	push   esi
c000613c:	89 d7                	mov    edi,edx
c000613e:	53                   	push   ebx
c000613f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0006143:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006147:	89 de                	mov    esi,ebx
c0006149:	c1 fe 08             	sar    esi,0x8
c000614c:	89 f2                	mov    edx,esi
c000614e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006151:	41                   	inc    ecx
c0006152:	85 db                	test   ebx,ebx
c0006154:	75 e9                	jne    c000613f <utf2ucs+0x7>
c0006156:	5b                   	pop    ebx
c0006157:	5e                   	pop    esi
c0006158:	5f                   	pop    edi
c0006159:	c3                   	ret    

c000615a <ucs2utfn>:
c000615a:	83 e1 fe             	and    ecx,0xfffffffe
c000615d:	01 d1                	add    ecx,edx
c000615f:	39 d1                	cmp    ecx,edx
c0006161:	75 04                	jne    c0006167 <ucs2utfn+0xd>
c0006163:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006166:	c3                   	ret    
c0006167:	57                   	push   edi
c0006168:	56                   	push   esi
c0006169:	53                   	push   ebx
c000616a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c000616d:	83 c2 02             	add    edx,0x2
c0006170:	89 de                	mov    esi,ebx
c0006172:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006176:	c1 e6 08             	shl    esi,0x8
c0006179:	09 f3                	or     ebx,esi
c000617b:	83 fb 3b             	cmp    ebx,0x3b
c000617e:	74 50                	je     c00061d0 <ucs2utfn+0x76>
c0006180:	83 fb 7f             	cmp    ebx,0x7f
c0006183:	7f 05                	jg     c000618a <ucs2utfn+0x30>
c0006185:	88 18                	mov    BYTE PTR [eax],bl
c0006187:	40                   	inc    eax
c0006188:	eb 42                	jmp    c00061cc <ucs2utfn+0x72>
c000618a:	89 df                	mov    edi,ebx
c000618c:	89 de                	mov    esi,ebx
c000618e:	c1 fe 06             	sar    esi,0x6
c0006191:	83 e7 3f             	and    edi,0x3f
c0006194:	83 cf 80             	or     edi,0xffffff80
c0006197:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000619d:	7f 12                	jg     c00061b1 <ucs2utfn+0x57>
c000619f:	83 ce c0             	or     esi,0xffffffc0
c00061a2:	83 c0 02             	add    eax,0x2
c00061a5:	89 f3                	mov    ebx,esi
c00061a7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061aa:	89 fb                	mov    ebx,edi
c00061ac:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061af:	eb 1b                	jmp    c00061cc <ucs2utfn+0x72>
c00061b1:	c1 fb 0c             	sar    ebx,0xc
c00061b4:	83 e6 3f             	and    esi,0x3f
c00061b7:	83 cb e0             	or     ebx,0xffffffe0
c00061ba:	83 ce 80             	or     esi,0xffffff80
c00061bd:	88 18                	mov    BYTE PTR [eax],bl
c00061bf:	89 f3                	mov    ebx,esi
c00061c1:	83 c0 03             	add    eax,0x3
c00061c4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061c7:	89 fb                	mov    ebx,edi
c00061c9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061cc:	39 d1                	cmp    ecx,edx
c00061ce:	75 9a                	jne    c000616a <ucs2utfn+0x10>
c00061d0:	5b                   	pop    ebx
c00061d1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061d4:	5e                   	pop    esi
c00061d5:	5f                   	pop    edi
c00061d6:	c3                   	ret    

c00061d7 <isjoliet>:
c00061d7:	31 d2                	xor    edx,edx
c00061d9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061dc:	75 26                	jne    c0006204 <isjoliet+0x2d>
c00061de:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061e2:	75 20                	jne    c0006204 <isjoliet+0x2d>
c00061e4:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061e8:	ba 02 00 00 00       	mov    edx,0x2
c00061ed:	83 f8 43             	cmp    eax,0x43
c00061f0:	74 12                	je     c0006204 <isjoliet+0x2d>
c00061f2:	83 f8 45             	cmp    eax,0x45
c00061f5:	ba 03 00 00 00       	mov    edx,0x3
c00061fa:	74 08                	je     c0006204 <isjoliet+0x2d>
c00061fc:	31 d2                	xor    edx,edx
c00061fe:	83 f8 40             	cmp    eax,0x40
c0006201:	0f 94 c2             	sete   dl
c0006204:	89 d0                	mov    eax,edx
c0006206:	c3                   	ret    

c0006207 <htohl_32>:
c0006207:	8b 00                	mov    eax,DWORD PTR [eax]
c0006209:	c3                   	ret    

c000620a <iso_733>:
c000620a:	eb fb                	jmp    c0006207 <htohl_32>

c000620c <bgrad_cache>:
c000620c:	83 fa 0e             	cmp    edx,0xe
c000620f:	77 16                	ja     c0006227 <bgrad_cache+0x1b>
c0006211:	53                   	push   ebx
c0006212:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006215:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006219:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000621c:	42                   	inc    edx
c000621d:	83 fa 0f             	cmp    edx,0xf
c0006220:	75 f3                	jne    c0006215 <bgrad_cache+0x9>
c0006222:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006225:	5b                   	pop    ebx
c0006226:	c3                   	ret    
c0006227:	c3                   	ret    

c0006228 <ucscompare>:
c0006228:	55                   	push   ebp
c0006229:	57                   	push   edi
c000622a:	89 c7                	mov    edi,eax
c000622c:	56                   	push   esi
c000622d:	89 d6                	mov    esi,edx
c000622f:	53                   	push   ebx
c0006230:	31 d2                	xor    edx,edx
c0006232:	83 ec 1c             	sub    esp,0x1c
c0006235:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006239:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000623e:	c1 e3 08             	shl    ebx,0x8
c0006241:	09 c3                	or     ebx,eax
c0006243:	39 ca                	cmp    edx,ecx
c0006245:	7d 42                	jge    c0006289 <ucscompare+0x61>
c0006247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000624b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000624f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006253:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006258:	c1 e0 08             	shl    eax,0x8
c000625b:	09 e8                	or     eax,ebp
c000625d:	83 f8 3b             	cmp    eax,0x3b
c0006260:	74 27                	je     c0006289 <ucscompare+0x61>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	50                   	push   eax
c0006266:	e8 15 a7 ff ff       	call   c0000980 <tolower>
c000626b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000626e:	89 c5                	mov    ebp,eax
c0006270:	e8 0b a7 ff ff       	call   c0000980 <tolower>
c0006275:	83 c4 10             	add    esp,0x10
c0006278:	39 c5                	cmp    ebp,eax
c000627a:	75 20                	jne    c000629c <ucscompare+0x74>
c000627c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006280:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006284:	83 c2 02             	add    edx,0x2
c0006287:	eb ac                	jmp    c0006235 <ucscompare+0xd>
c0006289:	83 fb 2f             	cmp    ebx,0x2f
c000628c:	0f 95 c2             	setne  dl
c000628f:	31 c0                	xor    eax,eax
c0006291:	85 db                	test   ebx,ebx
c0006293:	0f 95 c0             	setne  al
c0006296:	21 d0                	and    eax,edx
c0006298:	f7 d8                	neg    eax
c000629a:	eb 03                	jmp    c000629f <ucscompare+0x77>
c000629c:	83 c8 ff             	or     eax,0xffffffff
c000629f:	83 c4 1c             	add    esp,0x1c
c00062a2:	5b                   	pop    ebx
c00062a3:	5e                   	pop    esi
c00062a4:	5f                   	pop    edi
c00062a5:	5d                   	pop    ebp
c00062a6:	c3                   	ret    

c00062a7 <fncompare>:
c00062a7:	55                   	push   ebp
c00062a8:	57                   	push   edi
c00062a9:	89 c7                	mov    edi,eax
c00062ab:	56                   	push   esi
c00062ac:	89 ce                	mov    esi,ecx
c00062ae:	53                   	push   ebx
c00062af:	31 db                	xor    ebx,ebx
c00062b1:	83 ec 1c             	sub    esp,0x1c
c00062b4:	39 d3                	cmp    ebx,edx
c00062b6:	7d 45                	jge    c00062fd <fncompare+0x56>
c00062b8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00062bc:	83 f8 3b             	cmp    eax,0x3b
c00062bf:	74 3c                	je     c00062fd <fncompare+0x56>
c00062c1:	83 f8 2e             	cmp    eax,0x2e
c00062c4:	75 0e                	jne    c00062d4 <fncompare+0x2d>
c00062c6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062c9:	39 d9                	cmp    ecx,ebx
c00062cb:	74 30                	je     c00062fd <fncompare+0x56>
c00062cd:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062d2:	74 29                	je     c00062fd <fncompare+0x56>
c00062d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	50                   	push   eax
c00062dc:	e8 9f a6 ff ff       	call   c0000980 <tolower>
c00062e1:	89 c5                	mov    ebp,eax
c00062e3:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ea:	e8 91 a6 ff ff       	call   c0000980 <tolower>
c00062ef:	83 c4 10             	add    esp,0x10
c00062f2:	39 c5                	cmp    ebp,eax
c00062f4:	75 1e                	jne    c0006314 <fncompare+0x6d>
c00062f6:	43                   	inc    ebx
c00062f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062fb:	eb b7                	jmp    c00062b4 <fncompare+0xd>
c00062fd:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006301:	83 fa 2f             	cmp    edx,0x2f
c0006304:	0f 95 c1             	setne  cl
c0006307:	31 c0                	xor    eax,eax
c0006309:	85 d2                	test   edx,edx
c000630b:	0f 95 c0             	setne  al
c000630e:	21 c8                	and    eax,ecx
c0006310:	f7 d8                	neg    eax
c0006312:	eb 03                	jmp    c0006317 <fncompare+0x70>
c0006314:	83 c8 ff             	or     eax,0xffffffff
c0006317:	83 c4 1c             	add    esp,0x1c
c000631a:	5b                   	pop    ebx
c000631b:	5e                   	pop    esi
c000631c:	5f                   	pop    edi
c000631d:	5d                   	pop    ebp
c000631e:	c3                   	ret    

c000631f <bclear_cache>:
c000631f:	83 ec 18             	sub    esp,0x18
c0006322:	68 e0 0d 02 c0       	push   0xc0020de0
c0006327:	e8 1c 48 01 00       	call   c001ab48 <iso_kprintf>
c000632c:	83 c4 10             	add    esp,0x10
c000632f:	31 c0                	xor    eax,eax
c0006331:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006338:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000633e:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006345:	40                   	inc    eax
c0006346:	83 f8 10             	cmp    eax,0x10
c0006349:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000634f:	75 e0                	jne    c0006331 <bclear_cache+0x12>
c0006351:	83 c4 0c             	add    esp,0xc
c0006354:	c3                   	ret    

c0006355 <bclear>:
c0006355:	eb c8                	jmp    c000631f <bclear_cache>

c0006357 <iso_break_all>:
c0006357:	83 ec 18             	sub    esp,0x18
c000635a:	68 ee 0d 02 c0       	push   0xc0020dee
c000635f:	e8 e4 47 01 00       	call   c001ab48 <iso_kprintf>
c0006364:	83 c4 10             	add    esp,0x10
c0006367:	31 c0                	xor    eax,eax
c0006369:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006373:	05 94 00 00 00       	add    eax,0x94
c0006378:	3d 40 09 00 00       	cmp    eax,0x940
c000637d:	75 ea                	jne    c0006369 <iso_break_all+0x12>
c000637f:	83 c4 0c             	add    esp,0xc
c0006382:	c3                   	ret    

c0006383 <isoReadDiscSector>:
c0006383:	83 ec 0c             	sub    esp,0xc
c0006386:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c000638d:	50                   	push   eax
c000638e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000639a:	e8 4d 47 01 00       	call   c001aaec <isoReadDiscSectorHelper>
c000639f:	83 c4 1c             	add    esp,0x1c
c00063a2:	c3                   	ret    

c00063a3 <bread_cache>:
c00063a3:	55                   	push   ebp
c00063a4:	57                   	push   edi
c00063a5:	89 d7                	mov    edi,edx
c00063a7:	56                   	push   esi
c00063a8:	ba 0f 00 00 00       	mov    edx,0xf
c00063ad:	53                   	push   ebx
c00063ae:	89 c6                	mov    esi,eax
c00063b0:	83 ec 0c             	sub    esp,0xc
c00063b3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00063b6:	39 38                	cmp    DWORD PTR [eax],edi
c00063b8:	74 3c                	je     c00063f6 <bread_cache+0x53>
c00063ba:	4a                   	dec    edx
c00063bb:	83 fa ff             	cmp    edx,0xffffffff
c00063be:	75 f3                	jne    c00063b3 <bread_cache+0x10>
c00063c0:	31 db                	xor    ebx,ebx
c00063c2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063c5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063c8:	74 08                	je     c00063d2 <bread_cache+0x2f>
c00063ca:	43                   	inc    ebx
c00063cb:	83 fb 10             	cmp    ebx,0x10
c00063ce:	75 f2                	jne    c00063c2 <bread_cache+0x1f>
c00063d0:	31 db                	xor    ebx,ebx
c00063d2:	50                   	push   eax
c00063d3:	6a 01                	push   0x1
c00063d5:	57                   	push   edi
c00063d6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063dc:	83 c0 04             	add    eax,0x4
c00063df:	50                   	push   eax
c00063e0:	e8 9e ff ff ff       	call   c0006383 <isoReadDiscSector>
c00063e5:	83 c4 10             	add    esp,0x10
c00063e8:	83 c9 ff             	or     ecx,0xffffffff
c00063eb:	85 c0                	test   eax,eax
c00063ed:	78 13                	js     c0006402 <bread_cache+0x5f>
c00063ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063f2:	89 da                	mov    edx,ebx
c00063f4:	89 38                	mov    DWORD PTR [eax],edi
c00063f6:	89 f0                	mov    eax,esi
c00063f8:	e8 0f fe ff ff       	call   c000620c <bgrad_cache>
c00063fd:	b9 0f 00 00 00       	mov    ecx,0xf
c0006402:	83 c4 0c             	add    esp,0xc
c0006405:	89 c8                	mov    eax,ecx
c0006407:	5b                   	pop    ebx
c0006408:	5e                   	pop    esi
c0006409:	5f                   	pop    edi
c000640a:	5d                   	pop    ebp
c000640b:	c3                   	ret    

c000640c <biread>:
c000640c:	89 c2                	mov    edx,eax
c000640e:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006413:	eb 8e                	jmp    c00063a3 <bread_cache>

c0006415 <bdread>:
c0006415:	89 c2                	mov    edx,eax
c0006417:	b8 20 60 02 c0       	mov    eax,0xc0026020
c000641c:	eb 85                	jmp    c00063a3 <bread_cache>

c000641e <strnicmp>:
c000641e:	55                   	push   ebp
c000641f:	57                   	push   edi
c0006420:	31 ff                	xor    edi,edi
c0006422:	56                   	push   esi
c0006423:	53                   	push   ebx
c0006424:	83 ec 0c             	sub    esp,0xc
c0006427:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000642b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000642f:	74 43                	je     c0006474 <strnicmp+0x56>
c0006431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006435:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006439:	85 c0                	test   eax,eax
c000643b:	74 37                	je     c0006474 <strnicmp+0x56>
c000643d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006441:	85 d2                	test   edx,edx
c0006443:	74 2f                	je     c0006474 <strnicmp+0x56>
c0006445:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006448:	39 d0                	cmp    eax,edx
c000644a:	75 04                	jne    c0006450 <strnicmp+0x32>
c000644c:	89 ef                	mov    edi,ebp
c000644e:	eb db                	jmp    c000642b <strnicmp+0xd>
c0006450:	83 ec 0c             	sub    esp,0xc
c0006453:	50                   	push   eax
c0006454:	e8 27 a5 ff ff       	call   c0000980 <tolower>
c0006459:	89 c3                	mov    ebx,eax
c000645b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000645f:	89 ef                	mov    edi,ebp
c0006461:	89 04 24             	mov    DWORD PTR [esp],eax
c0006464:	e8 17 a5 ff ff       	call   c0000980 <tolower>
c0006469:	83 c4 10             	add    esp,0x10
c000646c:	29 c3                	sub    ebx,eax
c000646e:	89 d8                	mov    eax,ebx
c0006470:	74 b9                	je     c000642b <strnicmp+0xd>
c0006472:	eb 02                	jmp    c0006476 <strnicmp+0x58>
c0006474:	31 c0                	xor    eax,eax
c0006476:	83 c4 0c             	add    esp,0xc
c0006479:	5b                   	pop    ebx
c000647a:	5e                   	pop    esi
c000647b:	5f                   	pop    edi
c000647c:	5d                   	pop    ebp
c000647d:	c3                   	ret    

c000647e <find_object>:
c000647e:	55                   	push   ebp
c000647f:	57                   	push   edi
c0006480:	89 c7                	mov    edi,eax
c0006482:	56                   	push   esi
c0006483:	53                   	push   ebx
c0006484:	89 d3                	mov    ebx,edx
c0006486:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000648c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006490:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006497:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000649e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00064a2:	74 0b                	je     c00064af <find_object+0x31>
c00064a4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00064a8:	89 fa                	mov    edx,edi
c00064aa:	e8 89 fc ff ff       	call   c0006138 <utf2ucs>
c00064af:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00064b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064b6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00064bb:	7e 11                	jle    c00064ce <find_object+0x50>
c00064bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064c1:	e8 46 ff ff ff       	call   c000640c <biread>
c00064c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064ca:	85 c0                	test   eax,eax
c00064cc:	79 07                	jns    c00064d5 <find_object+0x57>
c00064ce:	31 db                	xor    ebx,ebx
c00064d0:	e9 47 01 00 00       	jmp    c000661c <find_object+0x19e>
c00064d5:	31 ed                	xor    ebp,ebp
c00064d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064db:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064e2:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064e6:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064e9:	85 f6                	test   esi,esi
c00064eb:	75 0e                	jne    c00064fb <find_object+0x7d>
c00064ed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064f1:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064f9:	eb bb                	jmp    c00064b6 <find_object+0x38>
c00064fb:	8b 0d b4 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026eb4
c0006501:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006505:	85 c9                	test   ecx,ecx
c0006507:	89 d0                	mov    eax,edx
c0006509:	74 2b                	je     c0006536 <find_object+0xb8>
c000650b:	8d 43 21             	lea    eax,[ebx+0x21]
c000650e:	89 d1                	mov    ecx,edx
c0006510:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006514:	e8 0f fd ff ff       	call   c0006228 <ucscompare>
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 84 cd 00 00 00    	je     c00065ee <find_object+0x170>
c0006521:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006524:	01 c5                	add    ebp,eax
c0006526:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000652c:	7f bf                	jg     c00064ed <find_object+0x6f>
c000652e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006532:	7f a3                	jg     c00064d7 <find_object+0x59>
c0006534:	eb b7                	jmp    c00064ed <find_object+0x6f>
c0006536:	29 d6                	sub    esi,edx
c0006538:	a8 01                	test   al,0x1
c000653a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000653e:	74 05                	je     c0006545 <find_object+0xc7>
c0006540:	83 ee 21             	sub    esi,0x21
c0006543:	eb 6a                	jmp    c00065af <find_object+0x131>
c0006545:	42                   	inc    edx
c0006546:	83 ee 22             	sub    esi,0x22
c0006549:	eb 64                	jmp    c00065af <find_object+0x131>
c000654b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000654e:	48                   	dec    eax
c000654f:	3c 01                	cmp    al,0x1
c0006551:	77 61                	ja     c00065b4 <find_object+0x136>
c0006553:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006557:	50                   	push   eax
c0006558:	6a 02                	push   0x2
c000655a:	68 fd 0d 02 c0       	push   0xc0020dfd
c000655f:	52                   	push   edx
c0006560:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006564:	e8 a7 a2 ff ff       	call   c0000810 <strncmp>
c0006569:	83 c4 10             	add    esp,0x10
c000656c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006570:	85 c0                	test   eax,eax
c0006572:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006576:	75 2f                	jne    c00065a7 <find_object+0x129>
c0006578:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000657c:	50                   	push   eax
c000657d:	8d 42 05             	lea    eax,[edx+0x5]
c0006580:	83 e9 05             	sub    ecx,0x5
c0006583:	51                   	push   ecx
c0006584:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006588:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000658c:	50                   	push   eax
c000658d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006591:	50                   	push   eax
c0006592:	e8 f9 a0 ff ff       	call   c0000690 <strncpy>
c0006597:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000659b:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00065a0:	83 c4 10             	add    esp,0x10
c00065a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00065a7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00065ab:	29 c6                	sub    esi,eax
c00065ad:	01 c2                	add    edx,eax
c00065af:	83 fe 03             	cmp    esi,0x3
c00065b2:	7f 97                	jg     c000654b <find_object+0xcd>
c00065b4:	85 c9                	test   ecx,ecx
c00065b6:	7e 40                	jle    c00065f8 <find_object+0x17a>
c00065b8:	51                   	push   ecx
c00065b9:	51                   	push   ecx
c00065ba:	6a 2f                	push   0x2f
c00065bc:	57                   	push   edi
c00065bd:	e8 0e a2 ff ff       	call   c00007d0 <strchr>
c00065c2:	83 c4 10             	add    esp,0x10
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 04                	je     c00065cd <find_object+0x14f>
c00065c9:	29 f8                	sub    eax,edi
c00065cb:	eb 0c                	jmp    c00065d9 <find_object+0x15b>
c00065cd:	83 ec 0c             	sub    esp,0xc
c00065d0:	57                   	push   edi
c00065d1:	e8 aa 9f ff ff       	call   c0000580 <strlen>
c00065d6:	83 c4 10             	add    esp,0x10
c00065d9:	52                   	push   edx
c00065da:	50                   	push   eax
c00065db:	57                   	push   edi
c00065dc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065e0:	50                   	push   eax
c00065e1:	e8 38 fe ff ff       	call   c000641e <strnicmp>
c00065e6:	83 c4 10             	add    esp,0x10
c00065e9:	e9 2b ff ff ff       	jmp    c0006519 <find_object+0x9b>
c00065ee:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065f2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065f6:	eb 1e                	jmp    c0006616 <find_object+0x198>
c00065f8:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065fc:	8d 43 21             	lea    eax,[ebx+0x21]
c00065ff:	89 f9                	mov    ecx,edi
c0006601:	e8 a1 fc ff ff       	call   c00062a7 <fncompare>
c0006606:	85 c0                	test   eax,eax
c0006608:	0f 85 13 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000660e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006612:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006616:	0f 85 05 ff ff ff    	jne    c0006521 <find_object+0xa3>
c000661c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006622:	89 d8                	mov    eax,ebx
c0006624:	5b                   	pop    ebx
c0006625:	5e                   	pop    esi
c0006626:	5f                   	pop    edi
c0006627:	5d                   	pop    ebp
c0006628:	c3                   	ret    

c0006629 <find_object_path>:
c0006629:	55                   	push   ebp
c000662a:	57                   	push   edi
c000662b:	89 d7                	mov    edi,edx
c000662d:	56                   	push   esi
c000662e:	89 c6                	mov    esi,eax
c0006630:	53                   	push   ebx
c0006631:	89 cb                	mov    ebx,ecx
c0006633:	83 ec 0c             	sub    esp,0xc
c0006636:	50                   	push   eax
c0006637:	50                   	push   eax
c0006638:	6a 2f                	push   0x2f
c000663a:	56                   	push   esi
c000663b:	e8 90 a1 ff ff       	call   c00007d0 <strchr>
c0006640:	83 c4 10             	add    esp,0x10
c0006643:	85 c0                	test   eax,eax
c0006645:	89 c5                	mov    ebp,eax
c0006647:	74 3a                	je     c0006683 <find_object_path+0x5a>
c0006649:	39 ee                	cmp    esi,ebp
c000664b:	74 31                	je     c000667e <find_object_path+0x55>
c000664d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006650:	e8 b5 fb ff ff       	call   c000620a <iso_733>
c0006655:	89 c2                	mov    edx,eax
c0006657:	8d 43 02             	lea    eax,[ebx+0x2]
c000665a:	e8 ab fb ff ff       	call   c000620a <iso_733>
c000665f:	83 ec 0c             	sub    esp,0xc
c0006662:	52                   	push   edx
c0006663:	89 c1                	mov    ecx,eax
c0006665:	ba 01 00 00 00       	mov    edx,0x1
c000666a:	89 f0                	mov    eax,esi
c000666c:	e8 0d fe ff ff       	call   c000647e <find_object>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	85 c0                	test   eax,eax
c0006676:	89 c3                	mov    ebx,eax
c0006678:	75 04                	jne    c000667e <find_object_path+0x55>
c000667a:	31 db                	xor    ebx,ebx
c000667c:	eb 36                	jmp    c00066b4 <find_object_path+0x8b>
c000667e:	8d 75 01             	lea    esi,[ebp+0x1]
c0006681:	eb b3                	jmp    c0006636 <find_object_path+0xd>
c0006683:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006686:	74 28                	je     c00066b0 <find_object_path+0x87>
c0006688:	8d 43 0a             	lea    eax,[ebx+0xa]
c000668b:	e8 7a fb ff ff       	call   c000620a <iso_733>
c0006690:	89 c2                	mov    edx,eax
c0006692:	8d 43 02             	lea    eax,[ebx+0x2]
c0006695:	e8 70 fb ff ff       	call   c000620a <iso_733>
c000669a:	83 ec 0c             	sub    esp,0xc
c000669d:	52                   	push   edx
c000669e:	89 c1                	mov    ecx,eax
c00066a0:	89 fa                	mov    edx,edi
c00066a2:	89 f0                	mov    eax,esi
c00066a4:	e8 d5 fd ff ff       	call   c000647e <find_object>
c00066a9:	83 c4 10             	add    esp,0x10
c00066ac:	89 c3                	mov    ebx,eax
c00066ae:	eb 04                	jmp    c00066b4 <find_object_path+0x8b>
c00066b0:	85 ff                	test   edi,edi
c00066b2:	74 c6                	je     c000667a <find_object_path+0x51>
c00066b4:	83 c4 0c             	add    esp,0xc
c00066b7:	89 d8                	mov    eax,ebx
c00066b9:	5b                   	pop    ebx
c00066ba:	5e                   	pop    esi
c00066bb:	5f                   	pop    edi
c00066bc:	5d                   	pop    ebp
c00066bd:	c3                   	ret    

c00066be <stricmp>:
c00066be:	57                   	push   edi
c00066bf:	56                   	push   esi
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	53                   	push   ebx
c00066c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c7:	83 ec 0c             	sub    esp,0xc
c00066ca:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066d2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066d6:	46                   	inc    esi
c00066d7:	50                   	push   eax
c00066d8:	e8 83 a2 ff ff       	call   c0000960 <toupper>
c00066dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00066e0:	e8 9b a2 ff ff       	call   c0000980 <tolower>
c00066e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066e8:	89 c3                	mov    ebx,eax
c00066ea:	e8 71 a2 ff ff       	call   c0000960 <toupper>
c00066ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00066f2:	e8 89 a2 ff ff       	call   c0000980 <tolower>
c00066f7:	83 c4 10             	add    esp,0x10
c00066fa:	39 c3                	cmp    ebx,eax
c00066fc:	75 04                	jne    c0006702 <stricmp+0x44>
c00066fe:	85 db                	test   ebx,ebx
c0006700:	75 c1                	jne    c00066c3 <stricmp+0x5>
c0006702:	29 c3                	sub    ebx,eax
c0006704:	89 d8                	mov    eax,ebx
c0006706:	5b                   	pop    ebx
c0006707:	5e                   	pop    esi
c0006708:	5f                   	pop    edi
c0006709:	c3                   	ret    

c000670a <iso_open>:
c000670a:	57                   	push   edi
c000670b:	31 c0                	xor    eax,eax
c000670d:	56                   	push   esi
c000670e:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006713:	53                   	push   ebx
c0006714:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006719:	0f 95 c0             	setne  al
c000671c:	89 c2                	mov    edx,eax
c000671e:	89 c6                	mov    esi,eax
c0006720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006724:	e8 00 ff ff ff       	call   c0006629 <find_object_path>
c0006729:	83 ca ff             	or     edx,0xffffffff
c000672c:	85 c0                	test   eax,eax
c000672e:	74 5e                	je     c000678e <iso_open+0x84>
c0006730:	89 c1                	mov    ecx,eax
c0006732:	31 d2                	xor    edx,edx
c0006734:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000673a:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006741:	75 42                	jne    c0006785 <iso_open+0x7b>
c0006743:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000674d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006750:	e8 b5 fa ff ff       	call   c000620a <iso_733>
c0006755:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000675b:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006765:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000676b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000676e:	e8 97 fa ff ff       	call   c000620a <iso_733>
c0006773:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c000677d:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006783:	eb 09                	jmp    c000678e <iso_open+0x84>
c0006785:	42                   	inc    edx
c0006786:	83 fa 10             	cmp    edx,0x10
c0006789:	75 a9                	jne    c0006734 <iso_open+0x2a>
c000678b:	83 ca ff             	or     edx,0xffffffff
c000678e:	5b                   	pop    ebx
c000678f:	89 d0                	mov    eax,edx
c0006791:	5e                   	pop    esi
c0006792:	5f                   	pop    edi
c0006793:	c3                   	ret    

c0006794 <iso_close>:
c0006794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006798:	83 f8 0f             	cmp    eax,0xf
c000679b:	7f 10                	jg     c00067ad <iso_close+0x19>
c000679d:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00067a3:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067ad:	e9 6d fb ff ff       	jmp    c000631f <bclear_cache>

c00067b2 <iso_read>:
c00067b2:	55                   	push   ebp
c00067b3:	57                   	push   edi
c00067b4:	56                   	push   esi
c00067b5:	53                   	push   ebx
c00067b6:	83 ec 1c             	sub    esp,0x1c
c00067b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067bd:	83 fd 0f             	cmp    ebp,0xf
c00067c0:	7e 0a                	jle    c00067cc <iso_read+0x1a>
c00067c2:	83 c8 ff             	or     eax,0xffffffff
c00067c5:	89 c2                	mov    edx,eax
c00067c7:	e9 f4 00 00 00       	jmp    c00068c0 <iso_read+0x10e>
c00067cc:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067d2:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067d9:	74 e7                	je     c00067c2 <iso_read+0x10>
c00067db:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067e1:	85 d2                	test   edx,edx
c00067e3:	75 dd                	jne    c00067c2 <iso_read+0x10>
c00067e5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067ea:	0f 84 cd 00 00 00    	je     c00068bd <iso_read+0x10b>
c00067f0:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067f6:	8b 9d 4c 65 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffd9ab4]
c00067fc:	29 c3                	sub    ebx,eax
c00067fe:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006802:	89 d9                	mov    ecx,ebx
c0006804:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006809:	85 c9                	test   ecx,ecx
c000680b:	0f 84 ac 00 00 00    	je     c00068bd <iso_read+0x10b>
c0006811:	89 c6                	mov    esi,eax
c0006813:	bb 00 08 00 00       	mov    ebx,0x800
c0006818:	c1 e8 0b             	shr    eax,0xb
c000681b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006821:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006827:	29 f3                	sub    ebx,esi
c0006829:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000682f:	75 3f                	jne    c0006870 <iso_read+0xbe>
c0006831:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006837:	7e 37                	jle    c0006870 <iso_read+0xbe>
c0006839:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000683f:	be 20 00 00 00       	mov    esi,0x20
c0006844:	7f 05                	jg     c000684b <iso_read+0x99>
c0006846:	89 ce                	mov    esi,ecx
c0006848:	c1 fe 0b             	sar    esi,0xb
c000684b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684f:	89 f3                	mov    ebx,esi
c0006851:	52                   	push   edx
c0006852:	56                   	push   esi
c0006853:	50                   	push   eax
c0006854:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006858:	c1 e3 0b             	shl    ebx,0xb
c000685b:	e8 23 fb ff ff       	call   c0006383 <isoReadDiscSector>
c0006860:	83 c4 10             	add    esp,0x10
c0006863:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006867:	85 c0                	test   eax,eax
c0006869:	7f 3d                	jg     c00068a8 <iso_read+0xf6>
c000686b:	e9 52 ff ff ff       	jmp    c00067c2 <iso_read+0x10>
c0006870:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006874:	39 d9                	cmp    ecx,ebx
c0006876:	0f 4e d9             	cmovle ebx,ecx
c0006879:	e8 97 fb ff ff       	call   c0006415 <bdread>
c000687e:	85 c0                	test   eax,eax
c0006880:	0f 88 3c ff ff ff    	js     c00067c2 <iso_read+0x10>
c0006886:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c000688d:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006893:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006897:	25 ff 07 00 00       	and    eax,0x7ff
c000689c:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00068a0:	89 d9                	mov    ecx,ebx
c00068a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00068a8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00068ac:	01 da                	add    edx,ebx
c00068ae:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00068b4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068b8:	e9 28 ff ff ff       	jmp    c00067e5 <iso_read+0x33>
c00068bd:	89 d0                	mov    eax,edx
c00068bf:	99                   	cdq    
c00068c0:	83 c4 1c             	add    esp,0x1c
c00068c3:	5b                   	pop    ebx
c00068c4:	5e                   	pop    esi
c00068c5:	5f                   	pop    edi
c00068c6:	5d                   	pop    ebp
c00068c7:	c3                   	ret    

c00068c8 <iso_seek>:
c00068c8:	55                   	push   ebp
c00068c9:	83 c8 ff             	or     eax,0xffffffff
c00068cc:	57                   	push   edi
c00068cd:	89 c2                	mov    edx,eax
c00068cf:	56                   	push   esi
c00068d0:	53                   	push   ebx
c00068d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068dd:	83 fe 0f             	cmp    esi,0xf
c00068e0:	7f 65                	jg     c0006947 <iso_seek+0x7f>
c00068e2:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068e8:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068ef:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068f5:	74 50                	je     c0006947 <iso_seek+0x7f>
c00068f7:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068fe:	75 47                	jne    c0006947 <iso_seek+0x7f>
c0006900:	83 fb 01             	cmp    ebx,0x1
c0006903:	74 0e                	je     c0006913 <iso_seek+0x4b>
c0006905:	83 fb 02             	cmp    ebx,0x2
c0006908:	74 0e                	je     c0006918 <iso_seek+0x50>
c000690a:	85 db                	test   ebx,ebx
c000690c:	75 39                	jne    c0006947 <iso_seek+0x7f>
c000690e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006911:	eb 0d                	jmp    c0006920 <iso_seek+0x58>
c0006913:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006916:	eb 08                	jmp    c0006920 <iso_seek+0x58>
c0006918:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000691b:	01 f8                	add    eax,edi
c000691d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006920:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006926:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000692c:	05 40 65 02 c0       	add    eax,0xc0026540
c0006931:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006934:	76 03                	jbe    c0006939 <iso_seek+0x71>
c0006936:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006939:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000693f:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006945:	31 d2                	xor    edx,edx
c0006947:	5b                   	pop    ebx
c0006948:	5e                   	pop    esi
c0006949:	5f                   	pop    edi
c000694a:	5d                   	pop    ebp
c000694b:	c3                   	ret    

c000694c <iso_tell>:
c000694c:	53                   	push   ebx
c000694d:	83 c8 ff             	or     eax,0xffffffff
c0006950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006954:	89 c2                	mov    edx,eax
c0006956:	83 f9 0f             	cmp    ecx,0xf
c0006959:	7f 20                	jg     c000697b <iso_tell+0x2f>
c000695b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006961:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006968:	74 11                	je     c000697b <iso_tell+0x2f>
c000696a:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006971:	75 08                	jne    c000697b <iso_tell+0x2f>
c0006973:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006979:	31 d2                	xor    edx,edx
c000697b:	5b                   	pop    ebx
c000697c:	c3                   	ret    

c000697d <iso_total>:
c000697d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006981:	83 c8 ff             	or     eax,0xffffffff
c0006984:	83 fa 0f             	cmp    edx,0xf
c0006987:	7f 1e                	jg     c00069a7 <iso_total+0x2a>
c0006989:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000698f:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006996:	74 0f                	je     c00069a7 <iso_total+0x2a>
c0006998:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000699f:	75 06                	jne    c00069a7 <iso_total+0x2a>
c00069a1:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00069a7:	c3                   	ret    

c00069a8 <fn_postprocess>:
c00069a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00069ac:	89 d0                	mov    eax,edx
c00069ae:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00069b1:	85 c9                	test   ecx,ecx
c00069b3:	74 08                	je     c00069bd <fn_postprocess+0x15>
c00069b5:	83 f9 3b             	cmp    ecx,0x3b
c00069b8:	74 03                	je     c00069bd <fn_postprocess+0x15>
c00069ba:	40                   	inc    eax
c00069bb:	eb f1                	jmp    c00069ae <fn_postprocess+0x6>
c00069bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069c0:	39 d0                	cmp    eax,edx
c00069c2:	76 0a                	jbe    c00069ce <fn_postprocess+0x26>
c00069c4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069c8:	75 04                	jne    c00069ce <fn_postprocess+0x26>
c00069ca:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069ce:	c3                   	ret    

c00069cf <iso_readdir>:
c00069cf:	55                   	push   ebp
c00069d0:	57                   	push   edi
c00069d1:	56                   	push   esi
c00069d2:	53                   	push   ebx
c00069d3:	83 ec 1c             	sub    esp,0x1c
c00069d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069da:	83 fb 0f             	cmp    ebx,0xf
c00069dd:	7f 28                	jg     c0006a07 <iso_readdir+0x38>
c00069df:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069e5:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069ec:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069f2:	74 13                	je     c0006a07 <iso_readdir+0x38>
c00069f4:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069f8:	74 0d                	je     c0006a07 <iso_readdir+0x38>
c00069fa:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006a01:	0f 84 b1 00 00 00    	je     c0006ab8 <iso_readdir+0xe9>
c0006a07:	83 ec 0c             	sub    esp,0xc
c0006a0a:	68 00 0e 02 c0       	push   0xc0020e00
c0006a0f:	e8 34 41 01 00       	call   c001ab48 <iso_kprintf>
c0006a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a17:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a1d:	e8 42 41 01 00       	call   c001ab64 <iso_kprintfd>
c0006a22:	c7 04 24 05 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e05
c0006a29:	e8 1a 41 01 00       	call   c001ab48 <iso_kprintf>
c0006a2e:	58                   	pop    eax
c0006a2f:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a35:	e8 2a 41 01 00       	call   c001ab64 <iso_kprintfd>
c0006a3a:	c7 04 24 0b 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e0b
c0006a41:	e8 02 41 01 00       	call   c001ab48 <iso_kprintf>
c0006a46:	58                   	pop    eax
c0006a47:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a4d:	e8 12 41 01 00       	call   c001ab64 <iso_kprintfd>
c0006a52:	c7 04 24 11 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e11
c0006a59:	e8 ea 40 01 00       	call   c001ab48 <iso_kprintf>
c0006a5e:	58                   	pop    eax
c0006a5f:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a65:	e8 fa 40 01 00       	call   c001ab64 <iso_kprintfd>
c0006a6a:	83 c4 10             	add    esp,0x10
c0006a6d:	eb 42                	jmp    c0006ab1 <iso_readdir+0xe2>
c0006a6f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a72:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a79:	89 d1                	mov    ecx,edx
c0006a7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a81:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a85:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a88:	75 35                	jne    c0006abf <iso_readdir+0xf0>
c0006a8a:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a90:	81 c2 00 08 00 00    	add    edx,0x800
c0006a96:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a99:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a9c:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a9f:	73 1e                	jae    c0006abf <iso_readdir+0xf0>
c0006aa1:	8b 07                	mov    eax,DWORD PTR [edi]
c0006aa3:	c1 ea 0b             	shr    edx,0xb
c0006aa6:	01 d0                	add    eax,edx
c0006aa8:	e8 5f f9 ff ff       	call   c000640c <biread>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	79 be                	jns    c0006a6f <iso_readdir+0xa0>
c0006ab1:	31 c0                	xor    eax,eax
c0006ab3:	e9 6a 01 00 00       	jmp    c0006c22 <iso_readdir+0x253>
c0006ab8:	31 f6                	xor    esi,esi
c0006aba:	83 c8 ff             	or     eax,0xffffffff
c0006abd:	eb da                	jmp    c0006a99 <iso_readdir+0xca>
c0006abf:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ac5:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006acb:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006ad1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006ad4:	73 db                	jae    c0006ab1 <iso_readdir+0xe2>
c0006ad6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ada:	75 34                	jne    c0006b10 <iso_readdir+0x141>
c0006adc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ae0:	75 2e                	jne    c0006b10 <iso_readdir+0x141>
c0006ae2:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ae5:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006aec:	01 f9                	add    ecx,edi
c0006aee:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006af1:	89 c8                	mov    eax,ecx
c0006af3:	25 ff 07 00 00       	and    eax,0x7ff
c0006af8:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006afd:	01 c8                	add    eax,ecx
c0006aff:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006b02:	25 ff 07 00 00       	and    eax,0x7ff
c0006b07:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006b0b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006b0e:	74 a1                	je     c0006ab1 <iso_readdir+0xe2>
c0006b10:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006b16:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b1a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b21:	8d 56 21             	lea    edx,[esi+0x21]
c0006b24:	8d af 58 65 02 c0    	lea    ebp,[edi-0x3ffd9aa8]
c0006b2a:	74 0c                	je     c0006b38 <iso_readdir+0x169>
c0006b2c:	89 e8                	mov    eax,ebp
c0006b2e:	e8 27 f6 ff ff       	call   c000615a <ucs2utfn>
c0006b33:	e9 b1 00 00 00       	jmp    c0006be9 <iso_readdir+0x21a>
c0006b38:	50                   	push   eax
c0006b39:	51                   	push   ecx
c0006b3a:	52                   	push   edx
c0006b3b:	55                   	push   ebp
c0006b3c:	e8 4f 9b ff ff       	call   c0000690 <strncpy>
c0006b41:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b48:	c6 84 07 58 65 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffd9aa8],0x0
c0006b50:	e8 53 fe ff ff       	call   c00069a8 <fn_postprocess>
c0006b55:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b59:	83 c4 10             	add    esp,0x10
c0006b5c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b5f:	89 d1                	mov    ecx,edx
c0006b61:	29 d0                	sub    eax,edx
c0006b63:	80 e1 01             	and    cl,0x1
c0006b66:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b6a:	74 05                	je     c0006b71 <iso_readdir+0x1a2>
c0006b6c:	83 e8 21             	sub    eax,0x21
c0006b6f:	eb 04                	jmp    c0006b75 <iso_readdir+0x1a6>
c0006b71:	42                   	inc    edx
c0006b72:	83 e8 22             	sub    eax,0x22
c0006b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b79:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b83:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b88:	7e 5f                	jle    c0006be9 <iso_readdir+0x21a>
c0006b8a:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b8d:	48                   	dec    eax
c0006b8e:	3c 01                	cmp    al,0x1
c0006b90:	77 57                	ja     c0006be9 <iso_readdir+0x21a>
c0006b92:	51                   	push   ecx
c0006b93:	6a 02                	push   0x2
c0006b95:	68 fd 0d 02 c0       	push   0xc0020dfd
c0006b9a:	52                   	push   edx
c0006b9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b9f:	e8 6c 9c ff ff       	call   c0000810 <strncmp>
c0006ba4:	83 c4 10             	add    esp,0x10
c0006ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006bab:	85 c0                	test   eax,eax
c0006bad:	75 2e                	jne    c0006bdd <iso_readdir+0x20e>
c0006baf:	50                   	push   eax
c0006bb0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb4:	83 e8 05             	sub    eax,0x5
c0006bb7:	50                   	push   eax
c0006bb8:	8d 42 05             	lea    eax,[edx+0x5]
c0006bbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006bbf:	50                   	push   eax
c0006bc0:	55                   	push   ebp
c0006bc1:	e8 ca 9a ff ff       	call   c0000690 <strncpy>
c0006bc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006bca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006bce:	83 c4 10             	add    esp,0x10
c0006bd1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bd5:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bdd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006be1:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006be5:	01 c2                	add    edx,eax
c0006be7:	eb 9a                	jmp    c0006b83 <iso_readdir+0x1b4>
c0006be9:	83 c8 ff             	or     eax,0xffffffff
c0006bec:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bf0:	89 c2                	mov    edx,eax
c0006bf2:	75 0a                	jne    c0006bfe <iso_readdir+0x22f>
c0006bf4:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bf7:	e8 0e f6 ff ff       	call   c000620a <iso_733>
c0006bfc:	31 d2                	xor    edx,edx
c0006bfe:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006c04:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006c0a:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006c10:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006c16:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006c19:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c1c:	8d 87 50 65 02 c0    	lea    eax,[edi-0x3ffd9ab0]
c0006c22:	83 c4 1c             	add    esp,0x1c
c0006c25:	5b                   	pop    ebx
c0006c26:	5e                   	pop    esi
c0006c27:	5f                   	pop    edi
c0006c28:	5d                   	pop    ebp
c0006c29:	c3                   	ret    

c0006c2a <iso_reset>:
c0006c2a:	83 ec 18             	sub    esp,0x18
c0006c2d:	68 1a 0e 02 c0       	push   0xc0020e1a
c0006c32:	e8 11 3f 01 00       	call   c001ab48 <iso_kprintf>
c0006c37:	e8 1b f7 ff ff       	call   c0006357 <iso_break_all>
c0006c3c:	e8 14 f7 ff ff       	call   c0006355 <bclear>
c0006c41:	31 c0                	xor    eax,eax
c0006c43:	83 c4 1c             	add    esp,0x1c
c0006c46:	c3                   	ret    

c0006c47 <init_percd>:
c0006c47:	57                   	push   edi
c0006c48:	56                   	push   esi
c0006c49:	53                   	push   ebx
c0006c4a:	bb 01 00 00 00       	mov    ebx,0x1
c0006c4f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c53:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c58:	e8 cd ff ff ff       	call   c0006c2a <iso_reset>
c0006c5d:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c67:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c6c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c70:	e8 97 f7 ff ff       	call   c000640c <biread>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	89 c6                	mov    esi,eax
c0006c79:	0f 88 ba 00 00 00    	js     c0006d39 <init_percd+0xf2>
c0006c7f:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c86:	52                   	push   edx
c0006c87:	6a 06                	push   0x6
c0006c89:	68 25 0e 02 c0       	push   0xc0020e25
c0006c8e:	83 c0 04             	add    eax,0x4
c0006c91:	50                   	push   eax
c0006c92:	e8 e9 96 ff ff       	call   c0000380 <memcmp>
c0006c97:	83 c4 10             	add    esp,0x10
c0006c9a:	85 c0                	test   eax,eax
c0006c9c:	74 08                	je     c0006ca6 <init_percd+0x5f>
c0006c9e:	43                   	inc    ebx
c0006c9f:	83 fb 04             	cmp    ebx,0x4
c0006ca2:	75 c3                	jne    c0006c67 <init_percd+0x20>
c0006ca4:	eb 1a                	jmp    c0006cc0 <init_percd+0x79>
c0006ca6:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cad:	83 c0 5c             	add    eax,0x5c
c0006cb0:	e8 22 f5 ff ff       	call   c00061d7 <isjoliet>
c0006cb5:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006cba:	85 c0                	test   eax,eax
c0006cbc:	74 e0                	je     c0006c9e <init_percd+0x57>
c0006cbe:	eb 3e                	jmp    c0006cfe <init_percd+0xb7>
c0006cc0:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cc7:	75 35                	jne    c0006cfe <init_percd+0xb7>
c0006cc9:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cce:	83 c0 10             	add    eax,0x10
c0006cd1:	e8 36 f7 ff ff       	call   c000640c <biread>
c0006cd6:	85 c0                	test   eax,eax
c0006cd8:	89 c6                	mov    esi,eax
c0006cda:	78 5f                	js     c0006d3b <init_percd+0xf4>
c0006cdc:	50                   	push   eax
c0006cdd:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ce4:	83 cb ff             	or     ebx,0xffffffff
c0006ce7:	6a 06                	push   0x6
c0006ce9:	68 2c 0e 02 c0       	push   0xc0020e2c
c0006cee:	83 c0 04             	add    eax,0x4
c0006cf1:	50                   	push   eax
c0006cf2:	e8 89 96 ff ff       	call   c0000380 <memcmp>
c0006cf7:	83 c4 10             	add    esp,0x10
c0006cfa:	85 c0                	test   eax,eax
c0006cfc:	75 3d                	jne    c0006d3b <init_percd+0xf4>
c0006cfe:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006d05:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006d0a:	b9 22 00 00 00       	mov    ecx,0x22
c0006d0f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006d15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006d17:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d1c:	31 db                	xor    ebx,ebx
c0006d1e:	e8 e7 f4 ff ff       	call   c000620a <iso_733>
c0006d23:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d28:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d2d:	e8 d8 f4 ff ff       	call   c000620a <iso_733>
c0006d32:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d37:	eb 02                	jmp    c0006d3b <init_percd+0xf4>
c0006d39:	89 c3                	mov    ebx,eax
c0006d3b:	89 d8                	mov    eax,ebx
c0006d3d:	5b                   	pop    ebx
c0006d3e:	5e                   	pop    esi
c0006d3f:	5f                   	pop    edi
c0006d40:	c3                   	ret    

c0006d41 <iso_ioctl>:
c0006d41:	83 ec 18             	sub    esp,0x18
c0006d44:	68 33 0e 02 c0       	push   0xc0020e33
c0006d49:	e8 fa 3d 01 00       	call   c001ab48 <iso_kprintf>
c0006d4e:	e8 d7 fe ff ff       	call   c0006c2a <iso_reset>
c0006d53:	31 c0                	xor    eax,eax
c0006d55:	83 c4 1c             	add    esp,0x1c
c0006d58:	c3                   	ret    

c0006d59 <fs_iso9660_init>:
c0006d59:	53                   	push   ebx
c0006d5a:	31 db                	xor    ebx,ebx
c0006d5c:	83 ec 14             	sub    esp,0x14
c0006d5f:	68 3e 0e 02 c0       	push   0xc0020e3e
c0006d64:	e8 df 3d 01 00       	call   c001ab48 <iso_kprintf>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	68 40 09 00 00       	push   0x940
c0006d71:	6a 00                	push   0x0
c0006d73:	68 40 65 02 c0       	push   0xc0026540
c0006d78:	e8 73 97 ff ff       	call   c00004f0 <memset>
c0006d7d:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d87:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d8e:	e8 3d 7b 00 00       	call   c000e8d0 <malloc>
c0006d93:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d9a:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d9f:	e8 2c 7b 00 00       	call   c000e8d0 <malloc>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006dac:	83 ec 0c             	sub    esp,0xc
c0006daf:	68 04 08 00 00       	push   0x804
c0006db4:	e8 17 7b 00 00       	call   c000e8d0 <malloc>
c0006db9:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006dc0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dc6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006dcd:	e8 fe 7a 00 00       	call   c000e8d0 <malloc>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006ddc:	43                   	inc    ebx
c0006ddd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006de3:	83 fb 10             	cmp    ebx,0x10
c0006de6:	75 c4                	jne    c0006dac <fs_iso9660_init+0x53>
c0006de8:	83 c4 08             	add    esp,0x8
c0006deb:	31 c0                	xor    eax,eax
c0006ded:	5b                   	pop    ebx
c0006dee:	c3                   	ret    

c0006def <fs_iso9660_shutdown>:
c0006def:	53                   	push   ebx
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	83 ec 08             	sub    esp,0x8
c0006df5:	83 ec 0c             	sub    esp,0xc
c0006df8:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006dff:	e8 dc 7a 00 00       	call   c000e8e0 <free>
c0006e04:	58                   	pop    eax
c0006e05:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006e0c:	43                   	inc    ebx
c0006e0d:	e8 ce 7a 00 00       	call   c000e8e0 <free>
c0006e12:	83 c4 10             	add    esp,0x10
c0006e15:	83 fb 10             	cmp    ebx,0x10
c0006e18:	75 db                	jne    c0006df5 <fs_iso9660_shutdown+0x6>
c0006e1a:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e1f:	85 c0                	test   eax,eax
c0006e21:	74 0c                	je     c0006e2f <fs_iso9660_shutdown+0x40>
c0006e23:	83 ec 0c             	sub    esp,0xc
c0006e26:	50                   	push   eax
c0006e27:	e8 b4 7a 00 00       	call   c000e8e0 <free>
c0006e2c:	83 c4 10             	add    esp,0x10
c0006e2f:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e34:	85 c0                	test   eax,eax
c0006e36:	74 0c                	je     c0006e44 <fs_iso9660_shutdown+0x55>
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	50                   	push   eax
c0006e3c:	e8 9f 7a 00 00       	call   c000e8e0 <free>
c0006e41:	83 c4 10             	add    esp,0x10
c0006e44:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e4e:	31 c0                	xor    eax,eax
c0006e50:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e5a:	83 c4 08             	add    esp,0x8
c0006e5d:	5b                   	pop    ebx
c0006e5e:	c3                   	ret    

c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e5f:	55                   	push   ebp
c0006e60:	57                   	push   edi
c0006e61:	56                   	push   esi
c0006e62:	53                   	push   ebx
c0006e63:	83 ec 20             	sub    esp,0x20
c0006e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0006e6a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0006e72:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0006e76:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0006e7e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006e82:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0006e8a:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0006e92:	89 f7                	mov    edi,esi
c0006e94:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0006e99:	89 eb                	mov    ebx,ebp
c0006e9b:	eb 02                	jmp    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0006e9d:	89 c7                	mov    edi,eax
c0006e9f:	31 d2                	xor    edx,edx
c0006ea1:	89 f8                	mov    eax,edi
c0006ea3:	f7 f1                	div    ecx
c0006ea5:	83 c3 01             	add    ebx,0x1
c0006ea8:	39 cf                	cmp    edi,ecx
c0006eaa:	73 f1                	jae    c0006e9d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0006eac:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006eaf:	eb 02                	jmp    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0006eb1:	89 c6                	mov    esi,eax
c0006eb3:	31 d2                	xor    edx,edx
c0006eb5:	89 f0                	mov    eax,esi
c0006eb7:	f7 f1                	div    ecx
c0006eb9:	83 eb 01             	sub    ebx,0x1
c0006ebc:	39 ce                	cmp    esi,ecx
c0006ebe:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec2:	88 13                	mov    BYTE PTR [ebx],dl
c0006ec4:	73 eb                	jae    c0006eb1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0006ec6:	83 c4 20             	add    esp,0x20
c0006ec9:	89 e8                	mov    eax,ebp
c0006ecb:	5b                   	pop    ebx
c0006ecc:	5e                   	pop    esi
c0006ecd:	5f                   	pop    edi
c0006ece:	5d                   	pop    ebp
c0006ecf:	c3                   	ret    

c0006ed0 <Dbg::logc(char)>:
c0006ed0:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ed7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006edb:	75 12                	jne    c0006eef <Dbg::logc(char)+0x1f>
c0006edd:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ee2:	ec                   	in     al,dx
c0006ee3:	a8 20                	test   al,0x20
c0006ee5:	74 fb                	je     c0006ee2 <Dbg::logc(char)+0x12>
c0006ee7:	ba f8 03 00 00       	mov    edx,0x3f8
c0006eec:	88 c8                	mov    al,cl
c0006eee:	ee                   	out    dx,al
c0006eef:	c3                   	ret    

c0006ef0 <Dbg::logs(char*)>:
c0006ef0:	53                   	push   ebx
c0006ef1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006ef5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006ef8:	85 c0                	test   eax,eax
c0006efa:	74 11                	je     c0006f0d <Dbg::logs(char*)+0x1d>
c0006efc:	50                   	push   eax
c0006efd:	83 c3 01             	add    ebx,0x1
c0006f00:	e8 cb ff ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006f05:	58                   	pop    eax
c0006f06:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f09:	85 c0                	test   eax,eax
c0006f0b:	75 ef                	jne    c0006efc <Dbg::logs(char*)+0xc>
c0006f0d:	5b                   	pop    ebx
c0006f0e:	c3                   	ret    

c0006f0f <Dbg::logWriteInt(unsigned int)>:
c0006f0f:	83 ec 10             	sub    esp,0x10
c0006f12:	6a 0a                	push   0xa
c0006f14:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f18:	50                   	push   eax
c0006f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f1d:	50                   	push   eax
c0006f1e:	e8 3c ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f23:	50                   	push   eax
c0006f24:	e8 c7 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	c3                   	ret    

c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f2d:	83 ec 10             	sub    esp,0x10
c0006f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f34:	50                   	push   eax
c0006f35:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f39:	50                   	push   eax
c0006f3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f3e:	52                   	push   edx
c0006f3f:	e8 1b ff ff ff       	call   c0006e5f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f44:	50                   	push   eax
c0006f45:	e8 a6 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006f4a:	83 c4 20             	add    esp,0x20
c0006f4d:	c3                   	ret    

c0006f4e <Dbg::kprintf(char const*, ...)>:
c0006f4e:	55                   	push   ebp
c0006f4f:	57                   	push   edi
c0006f50:	56                   	push   esi
c0006f51:	53                   	push   ebx
c0006f52:	83 ec 0c             	sub    esp,0xc
c0006f55:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f60:	74 08                	je     c0006f6a <Dbg::kprintf(char const*, ...)+0x1c>
c0006f62:	83 c4 0c             	add    esp,0xc
c0006f65:	5b                   	pop    ebx
c0006f66:	5e                   	pop    esi
c0006f67:	5f                   	pop    edi
c0006f68:	5d                   	pop    ebp
c0006f69:	c3                   	ret    
c0006f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f6e:	31 ff                	xor    edi,edi
c0006f70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f74:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f77:	85 c0                	test   eax,eax
c0006f79:	74 e7                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006f7b:	8d 77 01             	lea    esi,[edi+0x1]
c0006f7e:	83 f8 25             	cmp    eax,0x25
c0006f81:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f84:	75 47                	jne    c0006fcd <Dbg::kprintf(char const*, ...)+0x7f>
c0006f86:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006f89:	83 c7 02             	add    edi,0x2
c0006f8c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006f8f:	83 e8 25             	sub    eax,0x25
c0006f92:	0f b6 c0             	movzx  eax,al
c0006f95:	83 f8 53             	cmp    eax,0x53
c0006f98:	0f 87 ce 00 00 00    	ja     c000706c <Dbg::kprintf(char const*, ...)+0x11e>
c0006f9e:	ff 24 85 50 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf1b0]
c0006fa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fa9:	89 c8                	mov    eax,ecx
c0006fab:	83 c1 04             	add    ecx,0x4
c0006fae:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fb2:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fb4:	55                   	push   ebp
c0006fb5:	e8 55 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0006fba:	58                   	pop    eax
c0006fbb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fbe:	85 c0                	test   eax,eax
c0006fc0:	74 a0                	je     c0006f62 <Dbg::kprintf(char const*, ...)+0x14>
c0006fc2:	8d 77 01             	lea    esi,[edi+0x1]
c0006fc5:	83 f8 25             	cmp    eax,0x25
c0006fc8:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fcb:	74 b9                	je     c0006f86 <Dbg::kprintf(char const*, ...)+0x38>
c0006fcd:	50                   	push   eax
c0006fce:	89 f7                	mov    edi,esi
c0006fd0:	e8 fb fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0006fd5:	89 ee                	mov    esi,ebp
c0006fd7:	58                   	pop    eax
c0006fd8:	eb e1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006fda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fde:	89 c8                	mov    eax,ecx
c0006fe0:	83 c1 04             	add    ecx,0x4
c0006fe3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fe7:	8b 00                	mov    eax,DWORD PTR [eax]
c0006fe9:	50                   	push   eax
c0006fea:	e8 01 ff ff ff       	call   c0006ef0 <Dbg::logs(char*)>
c0006fef:	58                   	pop    eax
c0006ff0:	eb c9                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006ff6:	89 d0                	mov    eax,edx
c0006ff8:	83 c2 04             	add    edx,0x4
c0006ffb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0006fff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007001:	50                   	push   eax
c0007002:	e8 08 ff ff ff       	call   c0006f0f <Dbg::logWriteInt(unsigned int)>
c0007007:	58                   	pop    eax
c0007008:	eb b1                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000700a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700e:	89 d0                	mov    eax,edx
c0007010:	83 c2 04             	add    edx,0x4
c0007013:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007017:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000701a:	50                   	push   eax
c000701b:	e8 b0 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007020:	58                   	pop    eax
c0007021:	eb 98                	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007023:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007027:	89 c8                	mov    eax,ecx
c0007029:	83 c1 04             	add    ecx,0x4
c000702c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007030:	6a 10                	push   0x10
c0007032:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007034:	51                   	push   ecx
c0007035:	e8 f3 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c000703a:	5d                   	pop    ebp
c000703b:	58                   	pop    eax
c000703c:	e9 7a ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c0007041:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007045:	89 d0                	mov    eax,edx
c0007047:	83 c2 08             	add    edx,0x8
c000704a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000704e:	6a 10                	push   0x10
c0007050:	8b 00                	mov    eax,DWORD PTR [eax]
c0007052:	50                   	push   eax
c0007053:	e8 d5 fe ff ff       	call   c0006f2d <Dbg::logWriteIntBase(unsigned int, int)>
c0007058:	58                   	pop    eax
c0007059:	5a                   	pop    edx
c000705a:	e9 5c ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000705f:	6a 25                	push   0x25
c0007061:	e8 6a fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007066:	5a                   	pop    edx
c0007067:	e9 4f ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>
c000706c:	6a 25                	push   0x25
c000706e:	e8 5d fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c0007073:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007077:	50                   	push   eax
c0007078:	e8 53 fe ff ff       	call   c0006ed0 <Dbg::logc(char)>
c000707d:	5a                   	pop    edx
c000707e:	59                   	pop    ecx
c000707f:	e9 37 ff ff ff       	jmp    c0006fbb <Dbg::kprintf(char const*, ...)+0x6d>

c0007084 <KiUbsanPrintDetails(char const*, void*)>:
c0007084:	83 ec 1c             	sub    esp,0x1c
c0007087:	83 ec 08             	sub    esp,0x8
c000708a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000708e:	68 a0 0f 02 c0       	push   0xc0020fa0
c0007093:	e8 b6 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000709f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00070a9:	83 ec 08             	sub    esp,0x8
c00070ac:	50                   	push   eax
c00070ad:	68 b4 0f 02 c0       	push   0xc0020fb4
c00070b2:	e8 97 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070b7:	83 c4 10             	add    esp,0x10
c00070ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 be 0f 02 c0       	push   0xc0020fbe
c00070ca:	e8 7f fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 c8 0f 02 c0       	push   0xc0020fc8
c00070e2:	e8 67 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	90                   	nop
c00070eb:	83 c4 1c             	add    esp,0x1c
c00070ee:	c3                   	ret    
c00070ef:	90                   	nop

c00070f0 <__ubsan_handle_type_mismatch_v1>:
c00070f0:	83 ec 0c             	sub    esp,0xc
c00070f3:	83 ec 08             	sub    esp,0x8
c00070f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070fa:	68 0c 11 02 c0       	push   0xc002110c
c00070ff:	e8 80 ff ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007104:	83 c4 10             	add    esp,0x10
c0007107:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000710c:	75 16                	jne    c0007124 <__ubsan_handle_type_mismatch_v1+0x34>
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 d2 0f 02 c0       	push   0xc0020fd2
c0007116:	e8 33 fe ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	e9 91 00 00 00       	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007123:	90                   	nop
c0007124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007128:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000712b:	85 c0                	test   eax,eax
c000712d:	74 29                	je     c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000712f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007136:	83 e8 01             	sub    eax,0x1
c0007139:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000713d:	75 19                	jne    c0007158 <__ubsan_handle_type_mismatch_v1+0x68>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007146:	68 2c 11 02 c0       	push   0xc002112c
c000714b:	e8 fe fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007150:	83 c4 10             	add    esp,0x10
c0007153:	eb 5f                	jmp    c00071b4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0007155:	8d 76 00             	lea    esi,[esi+0x0]
c0007158:	83 ec 0c             	sub    esp,0xc
c000715b:	68 e7 0f 02 c0       	push   0xc0020fe7
c0007160:	e8 e9 fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007165:	83 c4 10             	add    esp,0x10
c0007168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000716c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000716f:	0f b6 c0             	movzx  eax,al
c0007172:	83 ec 08             	sub    esp,0x8
c0007175:	50                   	push   eax
c0007176:	68 01 10 02 c0       	push   0xc0021001
c000717b:	e8 ce fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007180:	83 c4 10             	add    esp,0x10
c0007183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007187:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000718a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000718d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007195:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007198:	0f b6 c0             	movzx  eax,al
c000719b:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c00071a2:	51                   	push   ecx
c00071a3:	52                   	push   edx
c00071a4:	50                   	push   eax
c00071a5:	68 54 11 02 c0       	push   0xc0021154
c00071aa:	e8 9f fd ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00071af:	83 c4 10             	add    esp,0x10
c00071b2:	66 90                	xchg   ax,ax
c00071b4:	83 ec 0c             	sub    esp,0xc
c00071b7:	68 0c 11 02 c0       	push   0xc002110c
c00071bc:	e8 55 7a 00 00       	call   c000ec16 <KePanic(char const*)>
c00071c1:	83 c4 10             	add    esp,0x10
c00071c4:	90                   	nop
c00071c5:	83 c4 0c             	add    esp,0xc
c00071c8:	c3                   	ret    
c00071c9:	8d 76 00             	lea    esi,[esi+0x0]

c00071cc <__ubsan_handle_pointer_overflow>:
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	83 ec 08             	sub    esp,0x8
c00071d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071d6:	68 9c 11 02 c0       	push   0xc002119c
c00071db:	e8 a4 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00071e0:	83 c4 10             	add    esp,0x10
c00071e3:	83 ec 0c             	sub    esp,0xc
c00071e6:	68 9c 11 02 c0       	push   0xc002119c
c00071eb:	e8 26 7a 00 00       	call   c000ec16 <KePanic(char const*)>
c00071f0:	83 c4 10             	add    esp,0x10
c00071f3:	90                   	nop
c00071f4:	83 c4 0c             	add    esp,0xc
c00071f7:	c3                   	ret    

c00071f8 <__ubsan_handle_out_of_bounds>:
c00071f8:	83 ec 0c             	sub    esp,0xc
c00071fb:	83 ec 08             	sub    esp,0x8
c00071fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007202:	68 0c 10 02 c0       	push   0xc002100c
c0007207:	e8 78 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	68 0c 10 02 c0       	push   0xc002100c
c0007217:	e8 fa 79 00 00       	call   c000ec16 <KePanic(char const*)>
c000721c:	83 c4 10             	add    esp,0x10
c000721f:	90                   	nop
c0007220:	83 c4 0c             	add    esp,0xc
c0007223:	c3                   	ret    

c0007224 <__ubsan_handle_add_overflow>:
c0007224:	83 ec 0c             	sub    esp,0xc
c0007227:	83 ec 08             	sub    esp,0x8
c000722a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000722e:	68 29 10 02 c0       	push   0xc0021029
c0007233:	e8 4c fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007238:	83 c4 10             	add    esp,0x10
c000723b:	83 ec 0c             	sub    esp,0xc
c000723e:	68 29 10 02 c0       	push   0xc0021029
c0007243:	e8 ce 79 00 00       	call   c000ec16 <KePanic(char const*)>
c0007248:	83 c4 10             	add    esp,0x10
c000724b:	90                   	nop
c000724c:	83 c4 0c             	add    esp,0xc
c000724f:	c3                   	ret    

c0007250 <__ubsan_handle_load_invalid_value>:
c0007250:	83 ec 0c             	sub    esp,0xc
c0007253:	83 ec 08             	sub    esp,0x8
c0007256:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000725a:	68 bc 11 02 c0       	push   0xc00211bc
c000725f:	e8 20 fe ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007264:	83 c4 10             	add    esp,0x10
c0007267:	83 ec 0c             	sub    esp,0xc
c000726a:	68 bc 11 02 c0       	push   0xc00211bc
c000726f:	e8 a2 79 00 00       	call   c000ec16 <KePanic(char const*)>
c0007274:	83 c4 10             	add    esp,0x10
c0007277:	90                   	nop
c0007278:	83 c4 0c             	add    esp,0xc
c000727b:	c3                   	ret    

c000727c <__ubsan_handle_divrem_overflow>:
c000727c:	83 ec 0c             	sub    esp,0xc
c000727f:	83 ec 08             	sub    esp,0x8
c0007282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007286:	68 e0 11 02 c0       	push   0xc00211e0
c000728b:	e8 f4 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007290:	83 c4 10             	add    esp,0x10
c0007293:	83 ec 0c             	sub    esp,0xc
c0007296:	68 e0 11 02 c0       	push   0xc00211e0
c000729b:	e8 76 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072a0:	83 c4 10             	add    esp,0x10
c00072a3:	90                   	nop
c00072a4:	83 c4 0c             	add    esp,0xc
c00072a7:	c3                   	ret    

c00072a8 <__ubsan_handle_mul_overflow>:
c00072a8:	83 ec 0c             	sub    esp,0xc
c00072ab:	83 ec 08             	sub    esp,0x8
c00072ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b2:	68 45 10 02 c0       	push   0xc0021045
c00072b7:	e8 c8 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072bc:	83 c4 10             	add    esp,0x10
c00072bf:	83 ec 0c             	sub    esp,0xc
c00072c2:	68 45 10 02 c0       	push   0xc0021045
c00072c7:	e8 4a 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	90                   	nop
c00072d0:	83 c4 0c             	add    esp,0xc
c00072d3:	c3                   	ret    

c00072d4 <__ubsan_handle_sub_overflow>:
c00072d4:	83 ec 0c             	sub    esp,0xc
c00072d7:	83 ec 08             	sub    esp,0x8
c00072da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072de:	68 61 10 02 c0       	push   0xc0021061
c00072e3:	e8 9c fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c00072e8:	83 c4 10             	add    esp,0x10
c00072eb:	83 ec 0c             	sub    esp,0xc
c00072ee:	68 61 10 02 c0       	push   0xc0021061
c00072f3:	e8 1e 79 00 00       	call   c000ec16 <KePanic(char const*)>
c00072f8:	83 c4 10             	add    esp,0x10
c00072fb:	90                   	nop
c00072fc:	83 c4 0c             	add    esp,0xc
c00072ff:	c3                   	ret    

c0007300 <__ubsan_handle_shift_out_of_bounds>:
c0007300:	83 ec 0c             	sub    esp,0xc
c0007303:	83 ec 08             	sub    esp,0x8
c0007306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000730a:	68 00 12 02 c0       	push   0xc0021200
c000730f:	e8 70 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007314:	83 c4 10             	add    esp,0x10
c0007317:	83 ec 0c             	sub    esp,0xc
c000731a:	68 00 12 02 c0       	push   0xc0021200
c000731f:	e8 f2 78 00 00       	call   c000ec16 <KePanic(char const*)>
c0007324:	83 c4 10             	add    esp,0x10
c0007327:	90                   	nop
c0007328:	83 c4 0c             	add    esp,0xc
c000732b:	c3                   	ret    

c000732c <__ubsan_handle_negate_overflow>:
c000732c:	83 ec 0c             	sub    esp,0xc
c000732f:	83 ec 08             	sub    esp,0x8
c0007332:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007336:	68 24 12 02 c0       	push   0xc0021224
c000733b:	e8 44 fd ff ff       	call   c0007084 <KiUbsanPrintDetails(char const*, void*)>
c0007340:	83 c4 10             	add    esp,0x10
c0007343:	83 ec 0c             	sub    esp,0xc
c0007346:	68 24 12 02 c0       	push   0xc0021224
c000734b:	e8 c6 78 00 00       	call   c000ec16 <KePanic(char const*)>
c0007350:	83 c4 10             	add    esp,0x10
c0007353:	90                   	nop
c0007354:	83 c4 0c             	add    esp,0xc
c0007357:	c3                   	ret    

c0007358 <KiIsHashInTable(unsigned short)>:
c0007358:	0f b7 d0             	movzx  edx,ax
c000735b:	83 e0 07             	and    eax,0x7
c000735e:	c1 fa 03             	sar    edx,0x3
c0007361:	88 c1                	mov    cl,al
c0007363:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c000736a:	d3 fa                	sar    edx,cl
c000736c:	89 d0                	mov    eax,edx
c000736e:	83 e0 01             	and    eax,0x1
c0007371:	c3                   	ret    

c0007372 <KiSetHashInTable(unsigned short, bool)>:
c0007372:	56                   	push   esi
c0007373:	53                   	push   ebx
c0007374:	0f b7 d8             	movzx  ebx,ax
c0007377:	c1 fb 03             	sar    ebx,0x3
c000737a:	83 e0 07             	and    eax,0x7
c000737d:	89 c1                	mov    ecx,eax
c000737f:	b8 01 00 00 00       	mov    eax,0x1
c0007384:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000738b:	d3 e0                	shl    eax,cl
c000738d:	84 d2                	test   dl,dl
c000738f:	74 04                	je     c0007395 <KiSetHashInTable(unsigned short, bool)+0x23>
c0007391:	09 f0                	or     eax,esi
c0007393:	eb 04                	jmp    c0007399 <KiSetHashInTable(unsigned short, bool)+0x27>
c0007395:	f7 d0                	not    eax
c0007397:	21 f0                	and    eax,esi
c0007399:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c000739f:	5b                   	pop    ebx
c00073a0:	5e                   	pop    esi
c00073a1:	c3                   	ret    

c00073a2 <KiFlushSymlinkChanges()>:
c00073a2:	57                   	push   edi
c00073a3:	56                   	push   esi
c00073a4:	53                   	push   ebx
c00073a5:	83 ec 1c             	sub    esp,0x1c
c00073a8:	68 14 01 00 00       	push   0x114
c00073ad:	e8 1e 75 00 00       	call   c000e8d0 <malloc>
c00073b2:	83 c4 0c             	add    esp,0xc
c00073b5:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073bb:	68 43 12 02 c0       	push   0xc0021243
c00073c0:	50                   	push   eax
c00073c1:	89 c3                	mov    ebx,eax
c00073c3:	e8 44 0d 00 00       	call   c000810c <File::File(char const*, Process*)>
c00073c8:	83 c4 10             	add    esp,0x10
c00073cb:	85 db                	test   ebx,ebx
c00073cd:	75 10                	jne    c00073df <KiFlushSymlinkChanges()+0x3d>
c00073cf:	83 ec 0c             	sub    esp,0xc
c00073d2:	68 61 12 02 c0       	push   0xc0021261
c00073d7:	e8 3a 78 00 00       	call   c000ec16 <KePanic(char const*)>
c00073dc:	83 c4 10             	add    esp,0x10
c00073df:	50                   	push   eax
c00073e0:	50                   	push   eax
c00073e1:	6a 06                	push   0x6
c00073e3:	53                   	push   ebx
c00073e4:	e8 41 0d 00 00       	call   c000812a <File::open(FileOpenMode)>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	85 c0                	test   eax,eax
c00073ee:	74 10                	je     c0007400 <KiFlushSymlinkChanges()+0x5e>
c00073f0:	83 ec 0c             	sub    esp,0xc
c00073f3:	68 7b 12 02 c0       	push   0xc002127b
c00073f8:	e8 19 78 00 00       	call   c000ec16 <KePanic(char const*)>
c00073fd:	83 c4 10             	add    esp,0x10
c0007400:	31 f6                	xor    esi,esi
c0007402:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007408:	7e 70                	jle    c000747a <KiFlushSymlinkChanges()+0xd8>
c000740a:	83 ec 0c             	sub    esp,0xc
c000740d:	89 f0                	mov    eax,esi
c000740f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007411:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0007415:	c1 e0 08             	shl    eax,0x8
c0007418:	57                   	push   edi
c0007419:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000741e:	50                   	push   eax
c000741f:	6a 00                	push   0x0
c0007421:	68 00 01 00 00       	push   0x100
c0007426:	53                   	push   ebx
c0007427:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0007435:	74 10                	je     c0007447 <KiFlushSymlinkChanges()+0xa5>
c0007437:	83 ec 0c             	sub    esp,0xc
c000743a:	68 95 12 02 c0       	push   0xc0021295
c000743f:	e8 d2 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007444:	83 c4 10             	add    esp,0x10
c0007447:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007449:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c0007450:	83 ec 0c             	sub    esp,0xc
c0007453:	57                   	push   edi
c0007454:	52                   	push   edx
c0007455:	6a 00                	push   0x0
c0007457:	6a 08                	push   0x8
c0007459:	53                   	push   ebx
c000745a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000745d:	83 c4 20             	add    esp,0x20
c0007460:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007465:	74 10                	je     c0007477 <KiFlushSymlinkChanges()+0xd5>
c0007467:	83 ec 0c             	sub    esp,0xc
c000746a:	68 af 12 02 c0       	push   0xc00212af
c000746f:	e8 a2 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007474:	83 c4 10             	add    esp,0x10
c0007477:	46                   	inc    esi
c0007478:	eb 88                	jmp    c0007402 <KiFlushSymlinkChanges()+0x60>
c000747a:	83 ec 0c             	sub    esp,0xc
c000747d:	53                   	push   ebx
c000747e:	e8 05 0d 00 00       	call   c0008188 <File::close()>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	85 db                	test   ebx,ebx
c0007488:	74 0c                	je     c0007496 <KiFlushSymlinkChanges()+0xf4>
c000748a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000748c:	83 ec 0c             	sub    esp,0xc
c000748f:	53                   	push   ebx
c0007490:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074a0:	83 c4 10             	add    esp,0x10
c00074a3:	5b                   	pop    ebx
c00074a4:	5e                   	pop    esi
c00074a5:	5f                   	pop    edi
c00074a6:	c3                   	ret    

c00074a7 <KiDeinitialiseSymlinks(void*)>:
c00074a7:	e9 f6 fe ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>

c00074ac <KiGetSymlinkHash(char const*)>:
c00074ac:	53                   	push   ebx
c00074ad:	89 c3                	mov    ebx,eax
c00074af:	83 ec 14             	sub    esp,0x14
c00074b2:	50                   	push   eax
c00074b3:	e8 c8 90 ff ff       	call   c0000580 <strlen>
c00074b8:	5a                   	pop    edx
c00074b9:	59                   	pop    ecx
c00074ba:	50                   	push   eax
c00074bb:	53                   	push   ebx
c00074bc:	e8 24 62 00 00       	call   c000d6e5 <KeCalculateCRC32(unsigned char*, int)>
c00074c1:	83 c4 18             	add    esp,0x18
c00074c4:	5b                   	pop    ebx
c00074c5:	89 c2                	mov    edx,eax
c00074c7:	c1 ea 10             	shr    edx,0x10
c00074ca:	31 d0                	xor    eax,edx
c00074cc:	c3                   	ret    

c00074cd <KiCreateSymlinkID()>:
c00074cd:	55                   	push   ebp
c00074ce:	57                   	push   edi
c00074cf:	56                   	push   esi
c00074d0:	53                   	push   ebx
c00074d1:	31 db                	xor    ebx,ebx
c00074d3:	83 ec 1c             	sub    esp,0x1c
c00074d6:	e8 0b 81 00 00       	call   c000f5e6 <KeRand()>
c00074db:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074e1:	31 d2                	xor    edx,edx
c00074e3:	43                   	inc    ebx
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074e9:	89 ee                	mov    esi,ebp
c00074eb:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c00074f1:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00074f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00074f9:	c1 e0 1f             	shl    eax,0x1f
c00074fc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007502:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007506:	75 10                	jne    c0007518 <KiCreateSymlinkID()+0x4b>
c0007508:	83 ec 0c             	sub    esp,0xc
c000750b:	68 c9 12 02 c0       	push   0xc00212c9
c0007510:	e8 01 77 00 00       	call   c000ec16 <KePanic(char const*)>
c0007515:	83 c4 10             	add    esp,0x10
c0007518:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000751c:	75 06                	jne    c0007524 <KiCreateSymlinkID()+0x57>
c000751e:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0007522:	74 b2                	je     c00074d6 <KiCreateSymlinkID()+0x9>
c0007524:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007528:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000752c:	83 c4 1c             	add    esp,0x1c
c000752f:	5b                   	pop    ebx
c0007530:	31 f0                	xor    eax,esi
c0007532:	5e                   	pop    esi
c0007533:	31 fa                	xor    edx,edi
c0007535:	5f                   	pop    edi
c0007536:	5d                   	pop    ebp
c0007537:	c3                   	ret    

c0007538 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007538:	53                   	push   ebx
c0007539:	83 ec 0c             	sub    esp,0xc
c000753c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007544:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007549:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000754d:	68 00 01 00 00       	push   0x100
c0007552:	6a 00                	push   0x0
c0007554:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c000755b:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c0007562:	c1 e0 08             	shl    eax,0x8
c0007565:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000756a:	50                   	push   eax
c000756b:	e8 80 8f ff ff       	call   c00004f0 <memset>
c0007570:	58                   	pop    eax
c0007571:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007576:	5a                   	pop    edx
c0007577:	c1 e0 08             	shl    eax,0x8
c000757a:	53                   	push   ebx
c000757b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007580:	50                   	push   eax
c0007581:	e8 ca 90 ff ff       	call   c0000650 <strcpy>
c0007586:	89 d8                	mov    eax,ebx
c0007588:	e8 1f ff ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c000758d:	ba 01 00 00 00       	mov    edx,0x1
c0007592:	0f b7 c0             	movzx  eax,ax
c0007595:	e8 d8 fd ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c000759a:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c000759f:	83 c4 10             	add    esp,0x10
c00075a2:	40                   	inc    eax
c00075a3:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075a8:	83 f8 03             	cmp    eax,0x3
c00075ab:	7e 09                	jle    c00075b6 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075ad:	83 c4 08             	add    esp,0x8
c00075b0:	5b                   	pop    ebx
c00075b1:	e9 ec fd ff ff       	jmp    c00073a2 <KiFlushSymlinkChanges()>
c00075b6:	83 c4 08             	add    esp,0x8
c00075b9:	5b                   	pop    ebx
c00075ba:	c3                   	ret    

c00075bb <KeInitialiseSymlinks()>:
c00075bb:	57                   	push   edi
c00075bc:	56                   	push   esi
c00075bd:	53                   	push   ebx
c00075be:	81 ec 14 01 00 00    	sub    esp,0x114
c00075c4:	68 00 20 00 00       	push   0x2000
c00075c9:	6a 00                	push   0x0
c00075cb:	68 00 73 02 c0       	push   0xc0027300
c00075d0:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075da:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075e4:	e8 07 8f ff ff       	call   c00004f0 <memset>
c00075e9:	59                   	pop    ecx
c00075ea:	5b                   	pop    ebx
c00075eb:	6a 00                	push   0x0
c00075ed:	68 a7 74 00 c0       	push   0xc00074a7
c00075f2:	e8 de 4e 00 00       	call   c000c4d5 <KeRegisterAtexit(void (*)(void*), void*)>
c00075f7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00075fe:	e8 cd 72 00 00       	call   c000e8d0 <malloc>
c0007603:	83 c4 0c             	add    esp,0xc
c0007606:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000760c:	68 43 12 02 c0       	push   0xc0021243
c0007611:	50                   	push   eax
c0007612:	89 c3                	mov    ebx,eax
c0007614:	e8 f3 0a 00 00       	call   c000810c <File::File(char const*, Process*)>
c0007619:	83 c4 10             	add    esp,0x10
c000761c:	85 db                	test   ebx,ebx
c000761e:	75 10                	jne    c0007630 <KeInitialiseSymlinks()+0x75>
c0007620:	83 ec 0c             	sub    esp,0xc
c0007623:	68 d2 12 02 c0       	push   0xc00212d2
c0007628:	e8 e9 75 00 00       	call   c000ec16 <KePanic(char const*)>
c000762d:	83 c4 10             	add    esp,0x10
c0007630:	83 ec 0c             	sub    esp,0xc
c0007633:	53                   	push   ebx
c0007634:	e8 b5 0d 00 00       	call   c00083ee <File::exists()>
c0007639:	83 c4 10             	add    esp,0x10
c000763c:	84 c0                	test   al,al
c000763e:	75 3a                	jne    c000767a <KeInitialiseSymlinks()+0xbf>
c0007640:	52                   	push   edx
c0007641:	52                   	push   edx
c0007642:	6a 12                	push   0x12
c0007644:	53                   	push   ebx
c0007645:	e8 e0 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c000764a:	83 c4 10             	add    esp,0x10
c000764d:	85 c0                	test   eax,eax
c000764f:	74 10                	je     c0007661 <KeInitialiseSymlinks()+0xa6>
c0007651:	83 ec 0c             	sub    esp,0xc
c0007654:	68 ef 12 02 c0       	push   0xc00212ef
c0007659:	e8 b8 75 00 00       	call   c000ec16 <KePanic(char const*)>
c000765e:	83 c4 10             	add    esp,0x10
c0007661:	83 ec 0c             	sub    esp,0xc
c0007664:	53                   	push   ebx
c0007665:	e8 1e 0b 00 00       	call   c0008188 <File::close()>
c000766a:	83 c4 10             	add    esp,0x10
c000766d:	85 db                	test   ebx,ebx
c000766f:	0f 84 9e 00 00 00    	je     c0007713 <KeInitialiseSymlinks()+0x158>
c0007675:	e9 8d 00 00 00       	jmp    c0007707 <KeInitialiseSymlinks()+0x14c>
c000767a:	50                   	push   eax
c000767b:	50                   	push   eax
c000767c:	6a 01                	push   0x1
c000767e:	53                   	push   ebx
c000767f:	e8 a6 0a 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 c0                	test   eax,eax
c0007689:	74 10                	je     c000769b <KeInitialiseSymlinks()+0xe0>
c000768b:	83 ec 0c             	sub    esp,0xc
c000768e:	68 0c 13 02 c0       	push   0xc002130c
c0007693:	e8 7e 75 00 00       	call   c000ec16 <KePanic(char const*)>
c0007698:	83 c4 10             	add    esp,0x10
c000769b:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076a1:	83 ec 0c             	sub    esp,0xc
c00076a4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076aa:	57                   	push   edi
c00076ab:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076af:	56                   	push   esi
c00076b0:	6a 00                	push   0x0
c00076b2:	68 00 01 00 00       	push   0x100
c00076b7:	53                   	push   ebx
c00076b8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076bb:	83 c4 20             	add    esp,0x20
c00076be:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076c6:	75 33                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076c8:	83 ec 0c             	sub    esp,0xc
c00076cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076cd:	57                   	push   edi
c00076ce:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076d2:	52                   	push   edx
c00076d3:	6a 00                	push   0x0
c00076d5:	6a 08                	push   0x8
c00076d7:	53                   	push   ebx
c00076d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076db:	83 c4 20             	add    esp,0x20
c00076de:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076e3:	75 16                	jne    c00076fb <KeInitialiseSymlinks()+0x140>
c00076e5:	89 f0                	mov    eax,esi
c00076e7:	e8 c0 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c00076ec:	ba 01 00 00 00       	mov    edx,0x1
c00076f1:	0f b7 c0             	movzx  eax,ax
c00076f4:	e8 79 fc ff ff       	call   c0007372 <KiSetHashInTable(unsigned short, bool)>
c00076f9:	eb a0                	jmp    c000769b <KeInitialiseSymlinks()+0xe0>
c00076fb:	83 ec 0c             	sub    esp,0xc
c00076fe:	53                   	push   ebx
c00076ff:	e8 84 0a 00 00       	call   c0008188 <File::close()>
c0007704:	83 c4 10             	add    esp,0x10
c0007707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007709:	83 ec 0c             	sub    esp,0xc
c000770c:	53                   	push   ebx
c000770d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007710:	83 c4 10             	add    esp,0x10
c0007713:	81 c4 10 01 00 00    	add    esp,0x110
c0007719:	5b                   	pop    ebx
c000771a:	5e                   	pop    esi
c000771b:	5f                   	pop    edi
c000771c:	c3                   	ret    

c000771d <KiIsSymlinkRegistered(char const*)>:
c000771d:	55                   	push   ebp
c000771e:	57                   	push   edi
c000771f:	56                   	push   esi
c0007720:	53                   	push   ebx
c0007721:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007727:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000772e:	89 f0                	mov    eax,esi
c0007730:	e8 77 fd ff ff       	call   c00074ac <KiGetSymlinkHash(char const*)>
c0007735:	0f b7 c0             	movzx  eax,ax
c0007738:	e8 1b fc ff ff       	call   c0007358 <KiIsHashInTable(unsigned short)>
c000773d:	31 d2                	xor    edx,edx
c000773f:	88 c1                	mov    cl,al
c0007741:	31 c0                	xor    eax,eax
c0007743:	84 c9                	test   cl,cl
c0007745:	0f 84 31 01 00 00    	je     c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c000774b:	31 db                	xor    ebx,ebx
c000774d:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c0007753:	7e 30                	jle    c0007785 <KiIsSymlinkRegistered(char const*)+0x68>
c0007755:	89 d8                	mov    eax,ebx
c0007757:	c1 e0 08             	shl    eax,0x8
c000775a:	51                   	push   ecx
c000775b:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007760:	51                   	push   ecx
c0007761:	50                   	push   eax
c0007762:	56                   	push   esi
c0007763:	e8 18 90 ff ff       	call   c0000780 <strcmp>
c0007768:	83 c4 10             	add    esp,0x10
c000776b:	85 c0                	test   eax,eax
c000776d:	75 13                	jne    c0007782 <KiIsSymlinkRegistered(char const*)+0x65>
c000776f:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007776:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c000777d:	e9 fa 00 00 00       	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007782:	43                   	inc    ebx
c0007783:	eb c8                	jmp    c000774d <KiIsSymlinkRegistered(char const*)+0x30>
c0007785:	83 ec 0c             	sub    esp,0xc
c0007788:	68 14 01 00 00       	push   0x114
c000778d:	e8 3e 71 00 00       	call   c000e8d0 <malloc>
c0007792:	83 c4 0c             	add    esp,0xc
c0007795:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000779b:	68 43 12 02 c0       	push   0xc0021243
c00077a0:	50                   	push   eax
c00077a1:	89 c3                	mov    ebx,eax
c00077a3:	e8 64 09 00 00       	call   c000810c <File::File(char const*, Process*)>
c00077a8:	83 c4 10             	add    esp,0x10
c00077ab:	85 db                	test   ebx,ebx
c00077ad:	75 12                	jne    c00077c1 <KiIsSymlinkRegistered(char const*)+0xa4>
c00077af:	83 ec 0c             	sub    esp,0xc
c00077b2:	68 27 13 02 c0       	push   0xc0021327
c00077b7:	e8 5a 74 00 00       	call   c000ec16 <KePanic(char const*)>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	eb 10                	jmp    c00077d1 <KiIsSymlinkRegistered(char const*)+0xb4>
c00077c1:	83 ec 0c             	sub    esp,0xc
c00077c4:	53                   	push   ebx
c00077c5:	e8 24 0c 00 00       	call   c00083ee <File::exists()>
c00077ca:	83 c4 10             	add    esp,0x10
c00077cd:	84 c0                	test   al,al
c00077cf:	74 de                	je     c00077af <KiIsSymlinkRegistered(char const*)+0x92>
c00077d1:	52                   	push   edx
c00077d2:	52                   	push   edx
c00077d3:	6a 01                	push   0x1
c00077d5:	53                   	push   ebx
c00077d6:	e8 4f 09 00 00       	call   c000812a <File::open(FileOpenMode)>
c00077db:	83 c4 10             	add    esp,0x10
c00077de:	85 c0                	test   eax,eax
c00077e0:	74 10                	je     c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c00077e2:	83 ec 0c             	sub    esp,0xc
c00077e5:	68 42 13 02 c0       	push   0xc0021342
c00077ea:	e8 27 74 00 00       	call   c000ec16 <KePanic(char const*)>
c00077ef:	83 c4 10             	add    esp,0x10
c00077f2:	83 ec 0c             	sub    esp,0xc
c00077f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00077f7:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c00077fb:	55                   	push   ebp
c00077fc:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0007800:	57                   	push   edi
c0007801:	6a 00                	push   0x0
c0007803:	68 00 01 00 00       	push   0x100
c0007808:	53                   	push   ebx
c0007809:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000780c:	83 c4 20             	add    esp,0x20
c000780f:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007817:	75 4b                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007819:	83 ec 0c             	sub    esp,0xc
c000781c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000781e:	55                   	push   ebp
c000781f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007823:	52                   	push   edx
c0007824:	6a 00                	push   0x0
c0007826:	6a 08                	push   0x8
c0007828:	53                   	push   ebx
c0007829:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000782c:	83 c4 20             	add    esp,0x20
c000782f:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007834:	75 2e                	jne    c0007864 <KiIsSymlinkRegistered(char const*)+0x147>
c0007836:	50                   	push   eax
c0007837:	50                   	push   eax
c0007838:	57                   	push   edi
c0007839:	56                   	push   esi
c000783a:	e8 41 8f ff ff       	call   c0000780 <strcmp>
c000783f:	83 c4 10             	add    esp,0x10
c0007842:	85 c0                	test   eax,eax
c0007844:	75 ac                	jne    c00077f2 <KiIsSymlinkRegistered(char const*)+0xd5>
c0007846:	83 ec 0c             	sub    esp,0xc
c0007849:	53                   	push   ebx
c000784a:	e8 39 09 00 00       	call   c0008188 <File::close()>
c000784f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000785b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785f:	83 c4 10             	add    esp,0x10
c0007862:	eb 18                	jmp    c000787c <KiIsSymlinkRegistered(char const*)+0x15f>
c0007864:	83 ec 0c             	sub    esp,0xc
c0007867:	53                   	push   ebx
c0007868:	e8 1b 09 00 00       	call   c0008188 <File::close()>
c000786d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007875:	83 c4 10             	add    esp,0x10
c0007878:	31 c0                	xor    eax,eax
c000787a:	31 d2                	xor    edx,edx
c000787c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0007882:	5b                   	pop    ebx
c0007883:	5e                   	pop    esi
c0007884:	5f                   	pop    edi
c0007885:	5d                   	pop    ebp
c0007886:	c3                   	ret    

c0007887 <KeDereferenceSymlink(char const*, char*)>:
c0007887:	55                   	push   ebp
c0007888:	57                   	push   edi
c0007889:	56                   	push   esi
c000788a:	53                   	push   ebx
c000788b:	83 ec 48             	sub    esp,0x48
c000788e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0007892:	56                   	push   esi
c0007893:	e8 85 fe ff ff       	call   c000771d <KiIsSymlinkRegistered(char const*)>
c0007898:	83 c4 10             	add    esp,0x10
c000789b:	89 c7                	mov    edi,eax
c000789d:	89 d0                	mov    eax,edx
c000789f:	09 f8                	or     eax,edi
c00078a1:	75 07                	jne    c00078aa <KeDereferenceSymlink(char const*, char*)+0x23>
c00078a3:	31 c0                	xor    eax,eax
c00078a5:	e9 7c 01 00 00       	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078aa:	83 ec 0c             	sub    esp,0xc
c00078ad:	89 d5                	mov    ebp,edx
c00078af:	68 14 01 00 00       	push   0x114
c00078b4:	e8 17 70 00 00       	call   c000e8d0 <malloc>
c00078b9:	83 c4 0c             	add    esp,0xc
c00078bc:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078c2:	56                   	push   esi
c00078c3:	50                   	push   eax
c00078c4:	89 c3                	mov    ebx,eax
c00078c6:	e8 41 08 00 00       	call   c000810c <File::File(char const*, Process*)>
c00078cb:	83 c4 10             	add    esp,0x10
c00078ce:	85 db                	test   ebx,ebx
c00078d0:	0f 84 32 01 00 00    	je     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078d6:	56                   	push   esi
c00078d7:	56                   	push   esi
c00078d8:	6a 01                	push   0x1
c00078da:	53                   	push   ebx
c00078db:	e8 4a 08 00 00       	call   c000812a <File::open(FileOpenMode)>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	85 c0                	test   eax,eax
c00078e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00078e7:	74 09                	je     c00078f2 <KeDereferenceSymlink(char const*, char*)+0x6b>
c00078e9:	83 ec 0c             	sub    esp,0xc
c00078ec:	53                   	push   ebx
c00078ed:	e9 10 01 00 00       	jmp    c0007a02 <KeDereferenceSymlink(char const*, char*)+0x17b>
c00078f2:	83 ec 0c             	sub    esp,0xc
c00078f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c00078f9:	56                   	push   esi
c00078fa:	8d 54 24 37          	lea    edx,[esp+0x37]
c00078fe:	52                   	push   edx
c00078ff:	6a 00                	push   0x0
c0007901:	6a 08                	push   0x8
c0007903:	53                   	push   ebx
c0007904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007907:	83 c4 20             	add    esp,0x20
c000790a:	85 c0                	test   eax,eax
c000790c:	0f 85 e2 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007912:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007917:	0f 85 d7 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007922:	56                   	push   esi
c0007923:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007927:	52                   	push   edx
c0007928:	6a 00                	push   0x0
c000792a:	6a 08                	push   0x8
c000792c:	53                   	push   ebx
c000792d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007930:	83 c4 20             	add    esp,0x20
c0007933:	85 c0                	test   eax,eax
c0007935:	0f 85 b9 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000793b:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007940:	0f 85 ae 00 00 00    	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007946:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000794a:	0f 85 53 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007950:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0007954:	0f 85 49 ff ff ff    	jne    c00078a3 <KeDereferenceSymlink(char const*, char*)+0x1c>
c000795a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0007962:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000796a:	51                   	push   ecx
c000796b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000796f:	50                   	push   eax
c0007970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0007974:	50                   	push   eax
c0007975:	53                   	push   ebx
c0007976:	e8 b1 0a 00 00       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000797b:	83 c4 10             	add    esp,0x10
c000797e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0007983:	75 6f                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007989:	31 c9                	xor    ecx,ecx
c000798b:	bf 0f 00 00 00       	mov    edi,0xf
c0007990:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007994:	39 c7                	cmp    edi,eax
c0007996:	89 cf                	mov    edi,ecx
c0007998:	19 d7                	sbb    edi,edx
c000799a:	73 58                	jae    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799c:	83 c0 f0             	add    eax,0xfffffff0
c000799f:	bf ff 00 00 00       	mov    edi,0xff
c00079a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079a8:	83 d2 ff             	adc    edx,0xffffffff
c00079ab:	39 c7                	cmp    edi,eax
c00079ad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079b1:	19 d1                	sbb    ecx,edx
c00079b3:	72 53                	jb     c0007a08 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079b5:	40                   	inc    eax
c00079b6:	52                   	push   edx
c00079b7:	50                   	push   eax
c00079b8:	6a 00                	push   0x0
c00079ba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079be:	e8 2d 8b ff ff       	call   c00004f0 <memset>
c00079c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079c5:	89 34 24             	mov    DWORD PTR [esp],esi
c00079c8:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079d4:	53                   	push   ebx
c00079d5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079d8:	83 c4 20             	add    esp,0x20
c00079db:	85 c0                	test   eax,eax
c00079dd:	75 15                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079e3:	89 c7                	mov    edi,eax
c00079e5:	c1 ff 1f             	sar    edi,0x1f
c00079e8:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00079ec:	75 06                	jne    c00079f4 <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079ee:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00079f2:	74 19                	je     c0007a0d <KeDereferenceSymlink(char const*, char*)+0x186>
c00079f4:	83 ec 0c             	sub    esp,0xc
c00079f7:	53                   	push   ebx
c00079f8:	e8 8b 07 00 00       	call   c0008188 <File::close()>
c00079fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a05:	83 c4 10             	add    esp,0x10
c0007a08:	83 c8 ff             	or     eax,0xffffffff
c0007a0b:	eb 19                	jmp    c0007a26 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a0d:	83 ec 0c             	sub    esp,0xc
c0007a10:	53                   	push   ebx
c0007a11:	e8 72 07 00 00       	call   c0008188 <File::close()>
c0007a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1e:	83 c4 10             	add    esp,0x10
c0007a21:	b8 01 00 00 00       	mov    eax,0x1
c0007a26:	83 c4 3c             	add    esp,0x3c
c0007a29:	5b                   	pop    ebx
c0007a2a:	5e                   	pop    esi
c0007a2b:	5f                   	pop    edi
c0007a2c:	5d                   	pop    ebp
c0007a2d:	c3                   	ret    

c0007a2e <KeCreateSymlink(char const*, char const*)>:
c0007a2e:	55                   	push   ebp
c0007a2f:	57                   	push   edi
c0007a30:	56                   	push   esi
c0007a31:	53                   	push   ebx
c0007a32:	83 ec 38             	sub    esp,0x38
c0007a35:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a39:	68 14 01 00 00       	push   0x114
c0007a3e:	e8 8d 6e 00 00       	call   c000e8d0 <malloc>
c0007a43:	6a 00                	push   0x0
c0007a45:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a4b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a4f:	89 c3                	mov    ebx,eax
c0007a51:	50                   	push   eax
c0007a52:	e8 d7 05 00 00       	call   c000802e <File::File(char const*, Process*, bool)>
c0007a57:	83 c4 20             	add    esp,0x20
c0007a5a:	85 db                	test   ebx,ebx
c0007a5c:	b8 01 00 00 00       	mov    eax,0x1
c0007a61:	0f 84 fb 00 00 00    	je     c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007a67:	52                   	push   edx
c0007a68:	52                   	push   edx
c0007a69:	6a 12                	push   0x12
c0007a6b:	53                   	push   ebx
c0007a6c:	e8 b9 06 00 00       	call   c000812a <File::open(FileOpenMode)>
c0007a71:	83 c4 10             	add    esp,0x10
c0007a74:	85 c0                	test   eax,eax
c0007a76:	74 0b                	je     c0007a83 <KeCreateSymlink(char const*, char const*)+0x55>
c0007a78:	83 ec 0c             	sub    esp,0xc
c0007a7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a7d:	53                   	push   ebx
c0007a7e:	e9 d4 00 00 00       	jmp    c0007b57 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a83:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007a87:	be 5d 13 02 c0       	mov    esi,0xc002135d
c0007a8c:	b9 09 00 00 00       	mov    ecx,0x9
c0007a91:	fc                   	cld    
c0007a92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007a9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a9d:	56                   	push   esi
c0007a9e:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007aa2:	52                   	push   edx
c0007aa3:	6a 00                	push   0x0
c0007aa5:	6a 08                	push   0x8
c0007aa7:	53                   	push   ebx
c0007aa8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007aab:	83 c4 20             	add    esp,0x20
c0007aae:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ab3:	0f 85 90 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ab9:	85 c0                	test   eax,eax
c0007abb:	0f 85 88 00 00 00    	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ac1:	e8 07 fa ff ff       	call   c00074cd <KiCreateSymlinkID()>
c0007ac6:	83 ec 0c             	sub    esp,0xc
c0007ac9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007acd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007ad1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ad3:	56                   	push   esi
c0007ad4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007ad8:	52                   	push   edx
c0007ad9:	6a 00                	push   0x0
c0007adb:	6a 08                	push   0x8
c0007add:	53                   	push   ebx
c0007ade:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ae1:	83 c4 20             	add    esp,0x20
c0007ae4:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007ae9:	75 5e                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aeb:	85 c0                	test   eax,eax
c0007aed:	75 5a                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007aef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007af7:	55                   	push   ebp
c0007af8:	e8 83 8a ff ff       	call   c0000580 <strlen>
c0007afd:	31 d2                	xor    edx,edx
c0007aff:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b02:	55                   	push   ebp
c0007b03:	52                   	push   edx
c0007b04:	50                   	push   eax
c0007b05:	53                   	push   ebx
c0007b06:	ff d7                	call   edi
c0007b08:	83 c4 14             	add    esp,0x14
c0007b0b:	55                   	push   ebp
c0007b0c:	89 c6                	mov    esi,eax
c0007b0e:	e8 6d 8a ff ff       	call   c0000580 <strlen>
c0007b13:	83 c4 10             	add    esp,0x10
c0007b16:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b1a:	75 2d                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b1c:	85 f6                	test   esi,esi
c0007b1e:	75 29                	jne    c0007b49 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b20:	50                   	push   eax
c0007b21:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b29:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b2d:	e8 06 fa ff ff       	call   c0007538 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b35:	e8 4e 06 00 00       	call   c0008188 <File::close()>
c0007b3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b42:	83 c4 10             	add    esp,0x10
c0007b45:	31 c0                	xor    eax,eax
c0007b47:	eb 19                	jmp    c0007b62 <KeCreateSymlink(char const*, char const*)+0x134>
c0007b49:	83 ec 0c             	sub    esp,0xc
c0007b4c:	53                   	push   ebx
c0007b4d:	e8 36 06 00 00       	call   c0008188 <File::close()>
c0007b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b57:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	b8 01 00 00 00       	mov    eax,0x1
c0007b62:	83 c4 2c             	add    esp,0x2c
c0007b65:	5b                   	pop    ebx
c0007b66:	5e                   	pop    esi
c0007b67:	5f                   	pop    edi
c0007b68:	5d                   	pop    ebp
c0007b69:	c3                   	ret    

c0007b6a <File::read(unsigned long long, void*, int*)>:
c0007b6a:	53                   	push   ebx
c0007b6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b6f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b73:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b7a:	83 f8 19             	cmp    eax,0x19
c0007b7d:	77 35                	ja     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b7f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007b86:	85 c0                	test   eax,eax
c0007b88:	74 2a                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b8a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007b90:	85 c0                	test   eax,eax
c0007b92:	74 20                	je     c0007bb4 <File::read(unsigned long long, void*, int*)+0x4a>
c0007b94:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007b98:	74 21                	je     c0007bbb <File::read(unsigned long long, void*, int*)+0x51>
c0007b9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007b9c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007ba0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007ba6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007baa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bae:	5b                   	pop    ebx
c0007baf:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bb2:	ff e0                	jmp    eax
c0007bb4:	b8 0b 00 00 00       	mov    eax,0xb
c0007bb9:	eb 05                	jmp    c0007bc0 <File::read(unsigned long long, void*, int*)+0x56>
c0007bbb:	b8 05 00 00 00       	mov    eax,0x5
c0007bc0:	5b                   	pop    ebx
c0007bc1:	c3                   	ret    

c0007bc2 <File::write(unsigned long long, void*, int*)>:
c0007bc2:	53                   	push   ebx
c0007bc3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bc7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007bcb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bd2:	83 f8 19             	cmp    eax,0x19
c0007bd5:	77 35                	ja     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bd7:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bde:	85 c0                	test   eax,eax
c0007be0:	74 2a                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007be2:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007be8:	85 c0                	test   eax,eax
c0007bea:	74 20                	je     c0007c0c <File::write(unsigned long long, void*, int*)+0x4a>
c0007bec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bf0:	74 21                	je     c0007c13 <File::write(unsigned long long, void*, int*)+0x51>
c0007bf2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bf4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bf8:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c06:	5b                   	pop    ebx
c0007c07:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c0a:	ff e0                	jmp    eax
c0007c0c:	b8 0b 00 00 00       	mov    eax,0xb
c0007c11:	eb 05                	jmp    c0007c18 <File::write(unsigned long long, void*, int*)+0x56>
c0007c13:	b8 05 00 00 00       	mov    eax,0x5
c0007c18:	5b                   	pop    ebx
c0007c19:	c3                   	ret    

c0007c1a <Directory::read(unsigned long long, void*, int*)>:
c0007c1a:	53                   	push   ebx
c0007c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c1f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c23:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c2a:	83 f8 19             	cmp    eax,0x19
c0007c2d:	77 35                	ja     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c2f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c36:	85 c0                	test   eax,eax
c0007c38:	74 2a                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c3a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c40:	85 c0                	test   eax,eax
c0007c42:	74 20                	je     c0007c64 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c48:	74 21                	je     c0007c6b <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c4c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c50:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c5e:	5b                   	pop    ebx
c0007c5f:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c62:	ff e0                	jmp    eax
c0007c64:	b8 0b 00 00 00       	mov    eax,0xb
c0007c69:	eb 05                	jmp    c0007c70 <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c6b:	b8 05 00 00 00       	mov    eax,0x5
c0007c70:	5b                   	pop    ebx
c0007c71:	c3                   	ret    

c0007c72 <Directory::write(unsigned long long, void*, int*)>:
c0007c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c76:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0007c82:	83 fa 19             	cmp    edx,0x19
c0007c85:	77 18                	ja     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c87:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007c8e:	85 d2                	test   edx,edx
c0007c90:	74 0d                	je     c0007c9f <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007c92:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007c99:	19 c0                	sbb    eax,eax
c0007c9b:	83 e0 0a             	and    eax,0xa
c0007c9e:	40                   	inc    eax
c0007c9f:	c3                   	ret    

c0007ca0 <File::isAtty()>:
c0007ca0:	31 c0                	xor    eax,eax
c0007ca2:	c3                   	ret    
c0007ca3:	90                   	nop

c0007ca4 <Directory::isAtty()>:
c0007ca4:	31 c0                	xor    eax,eax
c0007ca6:	c3                   	ret    
c0007ca7:	90                   	nop

c0007ca8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007ca8:	b8 0a 00 00 00       	mov    eax,0xa
c0007cad:	c3                   	ret    

c0007cae <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cae:	b8 0a 00 00 00       	mov    eax,0xa
c0007cb3:	c3                   	ret    

c0007cb4 <Filesystem::allocateSwapfile(char const*, int)>:
c0007cb4:	31 c0                	xor    eax,eax
c0007cb6:	31 d2                	xor    edx,edx
c0007cb8:	c3                   	ret    
c0007cb9:	90                   	nop

c0007cba <File::~File()>:
c0007cba:	83 ec 0c             	sub    esp,0xc
c0007cbd:	ba 1c 14 02 c0       	mov    edx,0xc002141c
c0007cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc6:	89 10                	mov    DWORD PTR [eax],edx
c0007cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ccc:	83 ec 0c             	sub    esp,0xc
c0007ccf:	50                   	push   eax
c0007cd0:	e8 05 a0 00 00       	call   c0011cda <UnixFile::~UnixFile()>
c0007cd5:	83 c4 10             	add    esp,0x10
c0007cd8:	90                   	nop
c0007cd9:	83 c4 0c             	add    esp,0xc
c0007cdc:	c3                   	ret    
c0007cdd:	90                   	nop

c0007cde <File::~File()>:
c0007cde:	83 ec 0c             	sub    esp,0xc
c0007ce1:	83 ec 0c             	sub    esp,0xc
c0007ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ce8:	e8 cd ff ff ff       	call   c0007cba <File::~File()>
c0007ced:	83 c4 10             	add    esp,0x10
c0007cf0:	83 ec 08             	sub    esp,0x8
c0007cf3:	68 14 01 00 00       	push   0x114
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	e8 5a 49 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007d01:	83 c4 10             	add    esp,0x10
c0007d04:	83 c4 0c             	add    esp,0xc
c0007d07:	c3                   	ret    

c0007d08 <Directory::~Directory()>:
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ba 38 14 02 c0       	mov    edx,0xc0021438
c0007d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d14:	89 10                	mov    DWORD PTR [eax],edx
c0007d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d1a:	83 ec 0c             	sub    esp,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	e8 b7 9f 00 00       	call   c0011cda <UnixFile::~UnixFile()>
c0007d23:	83 c4 10             	add    esp,0x10
c0007d26:	90                   	nop
c0007d27:	83 c4 0c             	add    esp,0xc
c0007d2a:	c3                   	ret    
c0007d2b:	90                   	nop

c0007d2c <Directory::~Directory()>:
c0007d2c:	83 ec 0c             	sub    esp,0xc
c0007d2f:	83 ec 0c             	sub    esp,0xc
c0007d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d36:	e8 cd ff ff ff       	call   c0007d08 <Directory::~Directory()>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 ec 08             	sub    esp,0x8
c0007d41:	68 14 01 00 00       	push   0x114
c0007d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d4a:	e8 0c 49 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007d4f:	83 c4 10             	add    esp,0x10
c0007d52:	83 c4 0c             	add    esp,0xc
c0007d55:	c3                   	ret    

c0007d56 <Filesystem::Filesystem()>:
c0007d56:	ba b0 13 02 c0       	mov    edx,0xc00213b0
c0007d5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d5f:	89 10                	mov    DWORD PTR [eax],edx
c0007d61:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d6b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d72:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d77:	90                   	nop
c0007d78:	c3                   	ret    
c0007d79:	90                   	nop

c0007d7a <Filesystem::~Filesystem()>:
c0007d7a:	ba b0 13 02 c0       	mov    edx,0xc00213b0
c0007d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d83:	89 10                	mov    DWORD PTR [eax],edx
c0007d85:	90                   	nop
c0007d86:	c3                   	ret    
c0007d87:	90                   	nop

c0007d88 <Filesystem::~Filesystem()>:
c0007d88:	83 ec 0c             	sub    esp,0xc
c0007d8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007d8f:	e8 e6 ff ff ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0007d94:	83 c4 04             	add    esp,0x4
c0007d97:	83 ec 08             	sub    esp,0x8
c0007d9a:	6a 08                	push   0x8
c0007d9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da0:	e8 b6 48 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0007da5:	83 c4 10             	add    esp,0x10
c0007da8:	83 c4 0c             	add    esp,0xc
c0007dab:	c3                   	ret    

c0007dac <Fs::getcwd(Process*, char*, int)>:
c0007dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007db0:	31 c0                	xor    eax,eax
c0007db2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007db6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007db9:	7d 15                	jge    c0007dd0 <Fs::getcwd(Process*, char*, int)+0x24>
c0007dbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dbf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007dc6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007dc9:	84 c9                	test   cl,cl
c0007dcb:	74 06                	je     c0007dd3 <Fs::getcwd(Process*, char*, int)+0x27>
c0007dcd:	40                   	inc    eax
c0007dce:	eb e2                	jmp    c0007db2 <Fs::getcwd(Process*, char*, int)+0x6>
c0007dd0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007dd3:	31 c0                	xor    eax,eax
c0007dd5:	c3                   	ret    

c0007dd6 <Fs::initVFS()>:
c0007dd6:	83 ec 18             	sub    esp,0x18
c0007dd9:	6a 08                	push   0x8
c0007ddb:	e8 f0 6a 00 00       	call   c000e8d0 <malloc>
c0007de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0007de3:	e8 5c 25 01 00       	call   c001a344 <FAT::FAT()>
c0007de8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007def:	e8 dc 6a 00 00       	call   c000e8d0 <malloc>
c0007df4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007df7:	e8 76 34 01 00       	call   c001b272 <ISO9660::ISO9660()>
c0007dfc:	83 c4 1c             	add    esp,0x1c
c0007dff:	c3                   	ret    

c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e00:	55                   	push   ebp
c0007e01:	57                   	push   edi
c0007e02:	56                   	push   esi
c0007e03:	53                   	push   ebx
c0007e04:	81 ec 20 04 00 00    	sub    esp,0x420
c0007e0a:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c0007e11:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c0007e18:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c0007e1f:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c0007e26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0007e2a:	68 00 04 00 00       	push   0x400
c0007e2f:	6a 00                	push   0x0
c0007e31:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0007e35:	57                   	push   edi
c0007e36:	e8 b5 86 ff ff       	call   c00004f0 <memset>
c0007e3b:	83 c4 10             	add    esp,0x10
c0007e3e:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c0007e42:	75 0b                	jne    c0007e4f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c0007e44:	50                   	push   eax
c0007e45:	50                   	push   eax
c0007e46:	56                   	push   esi
c0007e47:	57                   	push   edi
c0007e48:	e8 03 88 ff ff       	call   c0000650 <strcpy>
c0007e4d:	eb 45                	jmp    c0007e94 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c0007e4f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0007e52:	83 f8 2f             	cmp    eax,0x2f
c0007e55:	74 05                	je     c0007e5c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c0007e57:	83 f8 5c             	cmp    eax,0x5c
c0007e5a:	75 19                	jne    c0007e75 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c0007e5c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0007e5f:	3c 60                	cmp    al,0x60
c0007e61:	7e 03                	jle    c0007e66 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c0007e63:	83 e8 20             	sub    eax,0x20
c0007e66:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007e6a:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007e71:	50                   	push   eax
c0007e72:	50                   	push   eax
c0007e73:	eb 18                	jmp    c0007e8d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c0007e75:	50                   	push   eax
c0007e76:	50                   	push   eax
c0007e77:	55                   	push   ebp
c0007e78:	57                   	push   edi
c0007e79:	e8 d2 87 ff ff       	call   c0000650 <strcpy>
c0007e7e:	58                   	pop    eax
c0007e7f:	5a                   	pop    edx
c0007e80:	68 55 2a 02 c0       	push   0xc0022a55
c0007e85:	57                   	push   edi
c0007e86:	e8 e5 89 ff ff       	call   c0000870 <strcat>
c0007e8b:	59                   	pop    ecx
c0007e8c:	5d                   	pop    ebp
c0007e8d:	56                   	push   esi
c0007e8e:	57                   	push   edi
c0007e8f:	e8 dc 89 ff ff       	call   c0000870 <strcat>
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0007e9b:	3c 60                	cmp    al,0x60
c0007e9d:	7e 03                	jle    c0007ea2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c0007e9f:	83 e8 20             	sub    eax,0x20
c0007ea2:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0007ea6:	be 03 00 00 00       	mov    esi,0x3
c0007eab:	88 03                	mov    BYTE PTR [ebx],al
c0007ead:	b8 03 00 00 00       	mov    eax,0x3
c0007eb2:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c0007eb9:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0007ebf:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0007ec3:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c0007ec8:	89 fa                	mov    edx,edi
c0007eca:	0f be ea             	movsx  ebp,dl
c0007ecd:	85 ed                	test   ebp,ebp
c0007ecf:	0f 84 a1 00 00 00    	je     c0007f76 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c0007ed5:	8d 56 01             	lea    edx,[esi+0x1]
c0007ed8:	83 fd 2f             	cmp    ebp,0x2f
c0007edb:	74 05                	je     c0007ee2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c0007edd:	83 fd 5c             	cmp    ebp,0x5c
c0007ee0:	75 12                	jne    c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007ee2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007ee7:	89 c5                	mov    ebp,eax
c0007ee9:	74 09                	je     c0007ef4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c0007eeb:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0007eef:	40                   	inc    eax
c0007ef0:	89 d6                	mov    esi,edx
c0007ef2:	eb cf                	jmp    c0007ec3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007ef4:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c0007ef9:	89 f9                	mov    ecx,edi
c0007efb:	0f be e9             	movsx  ebp,cl
c0007efe:	75 61                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f00:	83 fd 2e             	cmp    ebp,0x2e
c0007f03:	75 5c                	jne    c0007f61 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c0007f05:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c0007f0a:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c0007f0f:	74 19                	je     c0007f2a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c0007f11:	83 fd 2e             	cmp    ebp,0x2e
c0007f14:	74 55                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f16:	89 f2                	mov    edx,esi
c0007f18:	42                   	inc    edx
c0007f19:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f1e:	83 f9 2f             	cmp    ecx,0x2f
c0007f21:	74 f5                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f23:	83 f9 5c             	cmp    ecx,0x5c
c0007f26:	74 f0                	je     c0007f18 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c0007f28:	eb c6                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f2a:	83 fd 2e             	cmp    ebp,0x2e
c0007f2d:	74 3c                	je     c0007f6b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c0007f2f:	83 f8 03             	cmp    eax,0x3
c0007f32:	74 bc                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f34:	42                   	inc    edx
c0007f35:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c0007f3a:	83 f9 2f             	cmp    ecx,0x2f
c0007f3d:	74 f5                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f3f:	83 f9 5c             	cmp    ecx,0x5c
c0007f42:	74 f0                	je     c0007f34 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c0007f44:	48                   	dec    eax
c0007f45:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f49:	75 06                	jne    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f4b:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f4f:	eb f3                	jmp    c0007f44 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c0007f51:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0007f55:	74 07                	je     c0007f5e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c0007f57:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f5b:	48                   	dec    eax
c0007f5c:	eb f3                	jmp    c0007f51 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c0007f5e:	40                   	inc    eax
c0007f5f:	eb 8f                	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f61:	83 fd 2f             	cmp    ebp,0x2f
c0007f64:	74 8a                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f66:	83 fd 5c             	cmp    ebp,0x5c
c0007f69:	74 85                	je     c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f6b:	89 f9                	mov    ecx,edi
c0007f6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0007f70:	40                   	inc    eax
c0007f71:	e9 7a ff ff ff       	jmp    c0007ef0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f76:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0007f7a:	83 ec 0c             	sub    esp,0xc
c0007f7d:	53                   	push   ebx
c0007f7e:	e8 fd 85 ff ff       	call   c0000580 <strlen>
c0007f83:	83 c4 10             	add    esp,0x10
c0007f86:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0007f8b:	74 1c                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007f8d:	83 ec 0c             	sub    esp,0xc
c0007f90:	53                   	push   ebx
c0007f91:	e8 ea 85 ff ff       	call   c0000580 <strlen>
c0007f96:	83 c4 10             	add    esp,0x10
c0007f99:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0007f9e:	74 09                	je     c0007fa9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c0007fa0:	31 ff                	xor    edi,edi
c0007fa2:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c0007fa7:	eb 5c                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0007fa9:	83 ec 0c             	sub    esp,0xc
c0007fac:	53                   	push   ebx
c0007fad:	e8 ce 85 ff ff       	call   c0000580 <strlen>
c0007fb2:	83 c4 10             	add    esp,0x10
c0007fb5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0007fba:	74 e4                	je     c0007fa0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c0007fbc:	83 ec 0c             	sub    esp,0xc
c0007fbf:	53                   	push   ebx
c0007fc0:	e8 bb 85 ff ff       	call   c0000580 <strlen>
c0007fc5:	83 c4 10             	add    esp,0x10
c0007fc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0007fcd:	eb ab                	jmp    c0007f7a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c0007fcf:	52                   	push   edx
c0007fd0:	52                   	push   edx
c0007fd1:	53                   	push   ebx
c0007fd2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0007fd6:	55                   	push   ebp
c0007fd7:	e8 74 86 ff ff       	call   c0000650 <strcpy>
c0007fdc:	59                   	pop    ecx
c0007fdd:	58                   	pop    eax
c0007fde:	53                   	push   ebx
c0007fdf:	55                   	push   ebp
c0007fe0:	e8 a2 f8 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0007fe5:	83 c4 10             	add    esp,0x10
c0007fe8:	48                   	dec    eax
c0007fe9:	75 37                	jne    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c0007feb:	50                   	push   eax
c0007fec:	53                   	push   ebx
c0007fed:	55                   	push   ebp
c0007fee:	68 66 13 02 c0       	push   0xc0021366
c0007ff3:	e8 56 ef ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0007ff8:	8d 47 01             	lea    eax,[edi+0x1]
c0007ffb:	83 c4 10             	add    esp,0x10
c0007ffe:	83 ff 14             	cmp    edi,0x14
c0008001:	74 08                	je     c000800b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c0008003:	89 c7                	mov    edi,eax
c0008005:	85 f6                	test   esi,esi
c0008007:	75 c6                	jne    c0007fcf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c0008009:	eb 17                	jmp    c0008022 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c000800b:	83 ec 0c             	sub    esp,0xc
c000800e:	bf 15 00 00 00       	mov    edi,0x15
c0008013:	68 81 13 02 c0       	push   0xc0021381
c0008018:	e8 f9 6b 00 00       	call   c000ec16 <KePanic(char const*)>
c000801d:	83 c4 10             	add    esp,0x10
c0008020:	eb e3                	jmp    c0008005 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c0008022:	81 c4 1c 04 00 00    	add    esp,0x41c
c0008028:	5b                   	pop    ebx
c0008029:	5e                   	pop    esi
c000802a:	5f                   	pop    edi
c000802b:	5d                   	pop    ebp
c000802c:	c3                   	ret    
c000802d:	90                   	nop

c000802e <File::File(char const*, Process*, bool)>:
c000802e:	83 ec 1c             	sub    esp,0x1c
c0008031:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008035:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0008039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000803d:	83 ec 08             	sub    esp,0x8
c0008040:	6a 00                	push   0x0
c0008042:	50                   	push   eax
c0008043:	e8 ac 9a 00 00       	call   c0011af4 <UnixFile::UnixFile(int)>
c0008048:	83 c4 10             	add    esp,0x10
c000804b:	ba 1c 14 02 c0       	mov    edx,0xc002141c
c0008050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008054:	89 10                	mov    DWORD PTR [eax],edx
c0008056:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000805b:	85 c0                	test   eax,eax
c000805d:	74 0f                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000805f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008064:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0008068:	74 04                	je     c000806e <File::File(char const*, Process*, bool)+0x40>
c000806a:	b0 01                	mov    al,0x1
c000806c:	eb 02                	jmp    c0008070 <File::File(char const*, Process*, bool)+0x42>
c000806e:	b0 00                	mov    al,0x0
c0008070:	0f b6 c0             	movzx  eax,al
c0008073:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008077:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000807d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008081:	83 c2 0d             	add    edx,0xd
c0008084:	50                   	push   eax
c0008085:	51                   	push   ecx
c0008086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000808a:	52                   	push   edx
c000808b:	e8 70 fd ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008090:	83 c4 10             	add    esp,0x10
c0008093:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008097:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000809a:	83 e8 41             	sub    eax,0x41
c000809d:	88 c2                	mov    dl,al
c000809f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080ad:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080bb:	0f b6 c0             	movzx  eax,al
c00080be:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080c5:	85 c0                	test   eax,eax
c00080c7:	74 3e                	je     c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080cd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d3:	0f b6 c0             	movzx  eax,al
c00080d6:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080dd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e3:	85 c0                	test   eax,eax
c00080e5:	75 20                	jne    c0008107 <File::File(char const*, Process*, bool)+0xd9>
c00080e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080eb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f1:	0f b6 c0             	movzx  eax,al
c00080f4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080fb:	83 ec 0c             	sub    esp,0xc
c00080fe:	50                   	push   eax
c00080ff:	e8 0a 1f 00 00       	call   c000a00e <LogicalDisk::mount()>
c0008104:	83 c4 10             	add    esp,0x10
c0008107:	90                   	nop
c0008108:	83 c4 1c             	add    esp,0x1c
c000810b:	c3                   	ret    

c000810c <File::File(char const*, Process*)>:
c000810c:	83 ec 0c             	sub    esp,0xc
c000810f:	6a 01                	push   0x1
c0008111:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008115:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811d:	e8 0c ff ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0008122:	83 c4 10             	add    esp,0x10
c0008125:	90                   	nop
c0008126:	83 c4 0c             	add    esp,0xc
c0008129:	c3                   	ret    

c000812a <File::open(FileOpenMode)>:
c000812a:	53                   	push   ebx
c000812b:	b8 0b 00 00 00       	mov    eax,0xb
c0008130:	83 ec 08             	sub    esp,0x8
c0008133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008137:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000813e:	83 fa 19             	cmp    edx,0x19
c0008141:	77 40                	ja     c0008183 <File::open(FileOpenMode)+0x59>
c0008143:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000814a:	85 d2                	test   edx,edx
c000814c:	74 35                	je     c0008183 <File::open(FileOpenMode)+0x59>
c000814e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008154:	85 d2                	test   edx,edx
c0008156:	74 2b                	je     c0008183 <File::open(FileOpenMode)+0x59>
c0008158:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000815c:	b8 06 00 00 00       	mov    eax,0x6
c0008161:	75 20                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c0008163:	8b 02                	mov    eax,DWORD PTR [edx]
c0008165:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000816b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000816f:	51                   	push   ecx
c0008170:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008173:	51                   	push   ecx
c0008174:	52                   	push   edx
c0008175:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0008178:	83 c4 10             	add    esp,0x10
c000817b:	85 c0                	test   eax,eax
c000817d:	75 04                	jne    c0008183 <File::open(FileOpenMode)+0x59>
c000817f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008183:	83 c4 08             	add    esp,0x8
c0008186:	5b                   	pop    ebx
c0008187:	c3                   	ret    

c0008188 <File::close()>:
c0008188:	53                   	push   ebx
c0008189:	b8 0b 00 00 00       	mov    eax,0xb
c000818e:	83 ec 08             	sub    esp,0x8
c0008191:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008195:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000819c:	83 f9 19             	cmp    ecx,0x19
c000819f:	77 41                	ja     c00081e2 <File::close()+0x5a>
c00081a1:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081a8:	85 db                	test   ebx,ebx
c00081aa:	74 36                	je     c00081e2 <File::close()+0x5a>
c00081ac:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b3:	74 2d                	je     c00081e2 <File::close()+0x5a>
c00081b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081b9:	b8 05 00 00 00       	mov    eax,0x5
c00081be:	74 22                	je     c00081e2 <File::close()+0x5a>
c00081c0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081c4:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d1:	53                   	push   ebx
c00081d2:	53                   	push   ebx
c00081d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081d5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081db:	50                   	push   eax
c00081dc:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081df:	83 c4 10             	add    esp,0x10
c00081e2:	83 c4 08             	add    esp,0x8
c00081e5:	5b                   	pop    ebx
c00081e6:	c3                   	ret    
c00081e7:	90                   	nop

c00081e8 <File::seek(unsigned long long)>:
c00081e8:	56                   	push   esi
c00081e9:	b8 0b 00 00 00       	mov    eax,0xb
c00081ee:	53                   	push   ebx
c00081ef:	51                   	push   ecx
c00081f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081f4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00081fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008203:	83 fa 19             	cmp    edx,0x19
c0008206:	77 31                	ja     c0008239 <File::seek(unsigned long long)+0x51>
c0008208:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000820f:	85 d2                	test   edx,edx
c0008211:	74 26                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008213:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008219:	85 d2                	test   edx,edx
c000821b:	74 1c                	je     c0008239 <File::seek(unsigned long long)+0x51>
c000821d:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008221:	b8 05 00 00 00       	mov    eax,0x5
c0008226:	74 11                	je     c0008239 <File::seek(unsigned long long)+0x51>
c0008228:	8b 02                	mov    eax,DWORD PTR [edx]
c000822a:	53                   	push   ebx
c000822b:	51                   	push   ecx
c000822c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008232:	52                   	push   edx
c0008233:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0008236:	83 c4 10             	add    esp,0x10
c0008239:	5a                   	pop    edx
c000823a:	5b                   	pop    ebx
c000823b:	5e                   	pop    esi
c000823c:	c3                   	ret    
c000823d:	90                   	nop

c000823e <File::truncate(unsigned long long)>:
c000823e:	56                   	push   esi
c000823f:	b8 0b 00 00 00       	mov    eax,0xb
c0008244:	53                   	push   ebx
c0008245:	51                   	push   ecx
c0008246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000824a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000824e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008252:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008259:	83 fa 19             	cmp    edx,0x19
c000825c:	77 31                	ja     c000828f <File::truncate(unsigned long long)+0x51>
c000825e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008265:	85 d2                	test   edx,edx
c0008267:	74 26                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008269:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000826f:	85 d2                	test   edx,edx
c0008271:	74 1c                	je     c000828f <File::truncate(unsigned long long)+0x51>
c0008273:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008277:	b8 05 00 00 00       	mov    eax,0x5
c000827c:	74 11                	je     c000828f <File::truncate(unsigned long long)+0x51>
c000827e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008280:	53                   	push   ebx
c0008281:	51                   	push   ecx
c0008282:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008288:	52                   	push   edx
c0008289:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	5a                   	pop    edx
c0008290:	5b                   	pop    ebx
c0008291:	5e                   	pop    esi
c0008292:	c3                   	ret    
c0008293:	90                   	nop

c0008294 <File::tell(unsigned long long*)>:
c0008294:	83 ec 0c             	sub    esp,0xc
c0008297:	b8 0b 00 00 00       	mov    eax,0xb
c000829c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082a7:	83 fa 19             	cmp    edx,0x19
c00082aa:	77 34                	ja     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082ac:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b3:	85 d2                	test   edx,edx
c00082b5:	74 29                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082b7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082bd:	85 d2                	test   edx,edx
c00082bf:	74 1f                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082c1:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082c5:	b8 05 00 00 00       	mov    eax,0x5
c00082ca:	74 14                	je     c00082e0 <File::tell(unsigned long long*)+0x4c>
c00082cc:	50                   	push   eax
c00082cd:	8b 02                	mov    eax,DWORD PTR [edx]
c00082cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082d9:	52                   	push   edx
c00082da:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082dd:	83 c4 10             	add    esp,0x10
c00082e0:	83 c4 0c             	add    esp,0xc
c00082e3:	c3                   	ret    

c00082e4 <File::rewind()>:
c00082e4:	83 ec 10             	sub    esp,0x10
c00082e7:	6a 00                	push   0x0
c00082e9:	6a 00                	push   0x0
c00082eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082ef:	e8 f4 fe ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00082f4:	83 c4 1c             	add    esp,0x1c
c00082f7:	c3                   	ret    

c00082f8 <File::unlink()>:
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	b8 0b 00 00 00       	mov    eax,0xb
c0008300:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008304:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000830b:	83 f9 19             	cmp    ecx,0x19
c000830e:	77 2f                	ja     c000833f <File::unlink()+0x47>
c0008310:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008317:	85 c9                	test   ecx,ecx
c0008319:	74 24                	je     c000833f <File::unlink()+0x47>
c000831b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008321:	85 c9                	test   ecx,ecx
c0008323:	74 1a                	je     c000833f <File::unlink()+0x47>
c0008325:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008329:	b8 06 00 00 00       	mov    eax,0x6
c000832e:	75 0f                	jne    c000833f <File::unlink()+0x47>
c0008330:	50                   	push   eax
c0008331:	83 c2 0d             	add    edx,0xd
c0008334:	50                   	push   eax
c0008335:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008337:	52                   	push   edx
c0008338:	51                   	push   ecx
c0008339:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000833c:	83 c4 10             	add    esp,0x10
c000833f:	83 c4 0c             	add    esp,0xc
c0008342:	c3                   	ret    
c0008343:	90                   	nop

c0008344 <File::rename(char const*)>:
c0008344:	83 ec 0c             	sub    esp,0xc
c0008347:	b8 0b 00 00 00       	mov    eax,0xb
c000834c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008350:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008357:	83 f9 19             	cmp    ecx,0x19
c000835a:	77 32                	ja     c000838e <File::rename(char const*)+0x4a>
c000835c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008363:	85 c9                	test   ecx,ecx
c0008365:	74 27                	je     c000838e <File::rename(char const*)+0x4a>
c0008367:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000836d:	85 c9                	test   ecx,ecx
c000836f:	74 1d                	je     c000838e <File::rename(char const*)+0x4a>
c0008371:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008375:	b8 06 00 00 00       	mov    eax,0x6
c000837a:	75 12                	jne    c000838e <File::rename(char const*)+0x4a>
c000837c:	50                   	push   eax
c000837d:	83 c2 0d             	add    edx,0xd
c0008380:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008386:	52                   	push   edx
c0008387:	51                   	push   ecx
c0008388:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000838b:	83 c4 10             	add    esp,0x10
c000838e:	83 c4 0c             	add    esp,0xc
c0008391:	c3                   	ret    

c0008392 <File::chfatattr(unsigned char, unsigned char)>:
c0008392:	57                   	push   edi
c0008393:	b8 0b 00 00 00       	mov    eax,0xb
c0008398:	56                   	push   esi
c0008399:	53                   	push   ebx
c000839a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000839e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083ad:	83 f9 19             	cmp    ecx,0x19
c00083b0:	77 37                	ja     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083b9:	85 c9                	test   ecx,ecx
c00083bb:	74 2c                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c3:	85 c9                	test   ecx,ecx
c00083c5:	74 22                	je     c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083cb:	b8 06 00 00 00       	mov    eax,0x6
c00083d0:	75 17                	jne    c00083e9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d2:	89 f0                	mov    eax,esi
c00083d4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083d6:	0f b6 db             	movzx  ebx,bl
c00083d9:	0f b6 f0             	movzx  esi,al
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	56                   	push   esi
c00083e0:	53                   	push   ebx
c00083e1:	52                   	push   edx
c00083e2:	51                   	push   ecx
c00083e3:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083e6:	83 c4 10             	add    esp,0x10
c00083e9:	5b                   	pop    ebx
c00083ea:	5e                   	pop    esi
c00083eb:	5f                   	pop    edi
c00083ec:	c3                   	ret    
c00083ed:	90                   	nop

c00083ee <File::exists()>:
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	31 c0                	xor    eax,eax
c00083f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083f7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083fe:	83 f9 19             	cmp    ecx,0x19
c0008401:	77 24                	ja     c0008427 <File::exists()+0x39>
c0008403:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000840a:	85 c9                	test   ecx,ecx
c000840c:	74 19                	je     c0008427 <File::exists()+0x39>
c000840e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008414:	85 c9                	test   ecx,ecx
c0008416:	74 0f                	je     c0008427 <File::exists()+0x39>
c0008418:	50                   	push   eax
c0008419:	83 c2 0d             	add    edx,0xd
c000841c:	50                   	push   eax
c000841d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000841f:	52                   	push   edx
c0008420:	51                   	push   ecx
c0008421:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008424:	83 c4 10             	add    esp,0x10
c0008427:	83 c4 0c             	add    esp,0xc
c000842a:	c3                   	ret    
c000842b:	90                   	nop

c000842c <File::stat(unsigned long long*, bool*)>:
c000842c:	56                   	push   esi
c000842d:	53                   	push   ebx
c000842e:	50                   	push   eax
c000842f:	b8 0b 00 00 00       	mov    eax,0xb
c0008434:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008438:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000843c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008440:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008447:	83 f9 19             	cmp    ecx,0x19
c000844a:	77 3d                	ja     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c000844c:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008453:	85 c9                	test   ecx,ecx
c0008455:	74 32                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008457:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000845d:	85 c9                	test   ecx,ecx
c000845f:	74 28                	je     c0008489 <File::stat(unsigned long long*, bool*)+0x5d>
c0008461:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008465:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008467:	74 13                	je     c000847c <File::stat(unsigned long long*, bool*)+0x50>
c0008469:	83 ec 04             	sub    esp,0x4
c000846c:	56                   	push   esi
c000846d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008473:	51                   	push   ecx
c0008474:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0008477:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000847a:	eb 0a                	jmp    c0008486 <File::stat(unsigned long long*, bool*)+0x5a>
c000847c:	53                   	push   ebx
c000847d:	83 c2 0d             	add    edx,0xd
c0008480:	56                   	push   esi
c0008481:	52                   	push   edx
c0008482:	51                   	push   ecx
c0008483:	ff 50 34             	call   DWORD PTR [eax+0x34]
c0008486:	83 c4 10             	add    esp,0x10
c0008489:	5a                   	pop    edx
c000848a:	5b                   	pop    ebx
c000848b:	5e                   	pop    esi
c000848c:	c3                   	ret    

c000848d <Fs::setcwd(Process*, char*)>:
c000848d:	55                   	push   ebp
c000848e:	57                   	push   edi
c000848f:	56                   	push   esi
c0008490:	53                   	push   ebx
c0008491:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0008497:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000849e:	6a 00                	push   0x0
c00084a0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084a6:	57                   	push   edi
c00084a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084ae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b2:	56                   	push   esi
c00084b3:	e8 48 f9 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00084bb:	e8 c0 80 ff ff       	call   c0000580 <strlen>
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	83 f8 02             	cmp    eax,0x2
c00084c6:	77 15                	ja     c00084dd <Fs::setcwd(Process*, char*)+0x50>
c00084c8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084cd:	83 eb 41             	sub    ebx,0x41
c00084d0:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084d7:	85 c0                	test   eax,eax
c00084d9:	75 1c                	jne    c00084f7 <Fs::setcwd(Process*, char*)+0x6a>
c00084db:	eb 2f                	jmp    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c00084dd:	83 ec 0c             	sub    esp,0xc
c00084e0:	56                   	push   esi
c00084e1:	e8 9a 80 ff ff       	call   c0000580 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 03             	cmp    eax,0x3
c00084ec:	75 57                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084ee:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f3:	75 50                	jne    c0008545 <Fs::setcwd(Process*, char*)+0xb8>
c00084f5:	eb d1                	jmp    c00084c8 <Fs::setcwd(Process*, char*)+0x3b>
c00084f7:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c00084fe:	75 0c                	jne    c000850c <Fs::setcwd(Process*, char*)+0x7f>
c0008500:	83 ec 0c             	sub    esp,0xc
c0008503:	50                   	push   eax
c0008504:	e8 05 1b 00 00       	call   c000a00e <LogicalDisk::mount()>
c0008509:	83 c4 10             	add    esp,0x10
c000850c:	83 fb 19             	cmp    ebx,0x19
c000850f:	b8 03 00 00 00       	mov    eax,0x3
c0008514:	0f 87 c6 00 00 00    	ja     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000851a:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008521:	b8 05 00 00 00       	mov    eax,0x5
c0008526:	85 d2                	test   edx,edx
c0008528:	0f 84 b2 00 00 00    	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000852e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008535:	b8 06 00 00 00       	mov    eax,0x6
c000853a:	0f 85 92 00 00 00    	jne    c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c0008540:	e9 9b 00 00 00       	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c0008545:	83 ec 0c             	sub    esp,0xc
c0008548:	68 14 01 00 00       	push   0x114
c000854d:	e8 7e 63 00 00       	call   c000e8d0 <malloc>
c0008552:	83 c4 0c             	add    esp,0xc
c0008555:	55                   	push   ebp
c0008556:	56                   	push   esi
c0008557:	50                   	push   eax
c0008558:	89 c3                	mov    ebx,eax
c000855a:	e8 ad fb ff ff       	call   c000810c <File::File(char const*, Process*)>
c000855f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0008564:	83 c4 0c             	add    esp,0xc
c0008567:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000856b:	50                   	push   eax
c000856c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008570:	50                   	push   eax
c0008571:	53                   	push   ebx
c0008572:	e8 b5 fe ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0008577:	83 c4 10             	add    esp,0x10
c000857a:	83 f8 02             	cmp    eax,0x2
c000857d:	74 27                	je     c00085a6 <Fs::setcwd(Process*, char*)+0x119>
c000857f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0008584:	75 1c                	jne    c00085a2 <Fs::setcwd(Process*, char*)+0x115>
c0008586:	85 db                	test   ebx,ebx
c0008588:	b8 02 00 00 00       	mov    eax,0x2
c000858d:	74 51                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c000858f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0008591:	83 ec 0c             	sub    esp,0xc
c0008594:	53                   	push   ebx
c0008595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	b8 02 00 00 00       	mov    eax,0x2
c00085a0:	eb 3e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085a2:	85 c0                	test   eax,eax
c00085a4:	74 1c                	je     c00085c2 <Fs::setcwd(Process*, char*)+0x135>
c00085a6:	85 db                	test   ebx,ebx
c00085a8:	b8 01 00 00 00       	mov    eax,0x1
c00085ad:	74 31                	je     c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085b1:	83 ec 0c             	sub    esp,0xc
c00085b4:	53                   	push   ebx
c00085b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085b8:	83 c4 10             	add    esp,0x10
c00085bb:	b8 01 00 00 00       	mov    eax,0x1
c00085c0:	eb 1e                	jmp    c00085e0 <Fs::setcwd(Process*, char*)+0x153>
c00085c2:	85 db                	test   ebx,ebx
c00085c4:	74 0c                	je     c00085d2 <Fs::setcwd(Process*, char*)+0x145>
c00085c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085c8:	83 ec 0c             	sub    esp,0xc
c00085cb:	53                   	push   ebx
c00085cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085cf:	83 c4 10             	add    esp,0x10
c00085d2:	50                   	push   eax
c00085d3:	50                   	push   eax
c00085d4:	56                   	push   esi
c00085d5:	57                   	push   edi
c00085d6:	e8 75 80 ff ff       	call   c0000650 <strcpy>
c00085db:	83 c4 10             	add    esp,0x10
c00085de:	31 c0                	xor    eax,eax
c00085e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085e6:	5b                   	pop    ebx
c00085e7:	5e                   	pop    esi
c00085e8:	5f                   	pop    edi
c00085e9:	5d                   	pop    ebp
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <Directory::Directory(char const*, Process*)>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f3:	83 ec 08             	sub    esp,0x8
c00085f6:	6a 00                	push   0x0
c00085f8:	50                   	push   eax
c00085f9:	e8 f6 94 00 00       	call   c0011af4 <UnixFile::UnixFile(int)>
c00085fe:	83 c4 10             	add    esp,0x10
c0008601:	ba 38 14 02 c0       	mov    edx,0xc0021438
c0008606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000860a:	89 10                	mov    DWORD PTR [eax],edx
c000860c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008611:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008615:	0f 95 c0             	setne  al
c0008618:	0f b6 c0             	movzx  eax,al
c000861b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000861f:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008625:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008629:	83 c2 0d             	add    edx,0xd
c000862c:	50                   	push   eax
c000862d:	51                   	push   ecx
c000862e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008632:	52                   	push   edx
c0008633:	e8 c8 f7 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008638:	83 c4 10             	add    esp,0x10
c000863b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000863f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008642:	83 e8 41             	sub    eax,0x41
c0008645:	88 c2                	mov    dl,al
c0008647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000864b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008655:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0008659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008663:	0f b6 c0             	movzx  eax,al
c0008666:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000866d:	85 c0                	test   eax,eax
c000866f:	74 3e                	je     c00086af <Directory::Directory(char const*, Process*)+0xc3>
c0008671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008675:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000867b:	0f b6 c0             	movzx  eax,al
c000867e:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008685:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000868b:	85 c0                	test   eax,eax
c000868d:	75 20                	jne    c00086af <Directory::Directory(char const*, Process*)+0xc3>
c000868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008693:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008699:	0f b6 c0             	movzx  eax,al
c000869c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a3:	83 ec 0c             	sub    esp,0xc
c00086a6:	50                   	push   eax
c00086a7:	e8 62 19 00 00       	call   c000a00e <LogicalDisk::mount()>
c00086ac:	83 c4 10             	add    esp,0x10
c00086af:	90                   	nop
c00086b0:	83 c4 0c             	add    esp,0xc
c00086b3:	c3                   	ret    

c00086b4 <Directory::open()>:
c00086b4:	53                   	push   ebx
c00086b5:	b8 0b 00 00 00       	mov    eax,0xb
c00086ba:	83 ec 08             	sub    esp,0x8
c00086bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086c8:	83 fa 19             	cmp    edx,0x19
c00086cb:	77 3d                	ja     c000870a <Directory::open()+0x56>
c00086cd:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086d4:	85 d2                	test   edx,edx
c00086d6:	74 32                	je     c000870a <Directory::open()+0x56>
c00086d8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086de:	85 d2                	test   edx,edx
c00086e0:	74 28                	je     c000870a <Directory::open()+0x56>
c00086e2:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086e6:	b8 06 00 00 00       	mov    eax,0x6
c00086eb:	75 1d                	jne    c000870a <Directory::open()+0x56>
c00086ed:	50                   	push   eax
c00086ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00086f0:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f6:	51                   	push   ecx
c00086f7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00086fa:	51                   	push   ecx
c00086fb:	52                   	push   edx
c00086fc:	ff 50 50             	call   DWORD PTR [eax+0x50]
c00086ff:	83 c4 10             	add    esp,0x10
c0008702:	85 c0                	test   eax,eax
c0008704:	75 04                	jne    c000870a <Directory::open()+0x56>
c0008706:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000870a:	83 c4 08             	add    esp,0x8
c000870d:	5b                   	pop    ebx
c000870e:	c3                   	ret    
c000870f:	90                   	nop

c0008710 <Directory::close()>:
c0008710:	53                   	push   ebx
c0008711:	b8 0b 00 00 00       	mov    eax,0xb
c0008716:	83 ec 08             	sub    esp,0x8
c0008719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000871d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008724:	83 f9 19             	cmp    ecx,0x19
c0008727:	77 41                	ja     c000876a <Directory::close()+0x5a>
c0008729:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008730:	85 db                	test   ebx,ebx
c0008732:	74 36                	je     c000876a <Directory::close()+0x5a>
c0008734:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000873b:	74 2d                	je     c000876a <Directory::close()+0x5a>
c000873d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008741:	b8 05 00 00 00       	mov    eax,0x5
c0008746:	74 22                	je     c000876a <Directory::close()+0x5a>
c0008748:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000874c:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008753:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008759:	53                   	push   ebx
c000875a:	53                   	push   ebx
c000875b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000875d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008763:	50                   	push   eax
c0008764:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c0008767:	83 c4 10             	add    esp,0x10
c000876a:	83 c4 08             	add    esp,0x8
c000876d:	5b                   	pop    ebx
c000876e:	c3                   	ret    
c000876f:	90                   	nop

c0008770 <Directory::unlink()>:
c0008770:	83 ec 0c             	sub    esp,0xc
c0008773:	b8 0b 00 00 00       	mov    eax,0xb
c0008778:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000877c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008783:	83 f9 19             	cmp    ecx,0x19
c0008786:	77 2f                	ja     c00087b7 <Directory::unlink()+0x47>
c0008788:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000878f:	85 c9                	test   ecx,ecx
c0008791:	74 24                	je     c00087b7 <Directory::unlink()+0x47>
c0008793:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008799:	85 c9                	test   ecx,ecx
c000879b:	74 1a                	je     c00087b7 <Directory::unlink()+0x47>
c000879d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087a1:	b8 06 00 00 00       	mov    eax,0x6
c00087a6:	75 0f                	jne    c00087b7 <Directory::unlink()+0x47>
c00087a8:	50                   	push   eax
c00087a9:	83 c2 0d             	add    edx,0xd
c00087ac:	50                   	push   eax
c00087ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087af:	52                   	push   edx
c00087b0:	51                   	push   ecx
c00087b1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087b4:	83 c4 10             	add    esp,0x10
c00087b7:	83 c4 0c             	add    esp,0xc
c00087ba:	c3                   	ret    
c00087bb:	90                   	nop

c00087bc <Directory::rename(char const*)>:
c00087bc:	83 ec 0c             	sub    esp,0xc
c00087bf:	b8 0b 00 00 00       	mov    eax,0xb
c00087c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087cf:	83 f9 19             	cmp    ecx,0x19
c00087d2:	77 32                	ja     c0008806 <Directory::rename(char const*)+0x4a>
c00087d4:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087db:	85 c9                	test   ecx,ecx
c00087dd:	74 27                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087e5:	85 c9                	test   ecx,ecx
c00087e7:	74 1d                	je     c0008806 <Directory::rename(char const*)+0x4a>
c00087e9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ed:	b8 06 00 00 00       	mov    eax,0x6
c00087f2:	75 12                	jne    c0008806 <Directory::rename(char const*)+0x4a>
c00087f4:	50                   	push   eax
c00087f5:	83 c2 0d             	add    edx,0xd
c00087f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087fe:	52                   	push   edx
c00087ff:	51                   	push   ecx
c0008800:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008803:	83 c4 10             	add    esp,0x10
c0008806:	83 c4 0c             	add    esp,0xc
c0008809:	c3                   	ret    

c000880a <Directory::exists()>:
c000880a:	83 ec 0c             	sub    esp,0xc
c000880d:	31 c0                	xor    eax,eax
c000880f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008813:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000881a:	83 f9 19             	cmp    ecx,0x19
c000881d:	77 24                	ja     c0008843 <Directory::exists()+0x39>
c000881f:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008826:	85 c9                	test   ecx,ecx
c0008828:	74 19                	je     c0008843 <Directory::exists()+0x39>
c000882a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008830:	85 c9                	test   ecx,ecx
c0008832:	74 0f                	je     c0008843 <Directory::exists()+0x39>
c0008834:	50                   	push   eax
c0008835:	83 c2 0d             	add    edx,0xd
c0008838:	50                   	push   eax
c0008839:	8b 01                	mov    eax,DWORD PTR [ecx]
c000883b:	52                   	push   edx
c000883c:	51                   	push   ecx
c000883d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008840:	83 c4 10             	add    esp,0x10
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	c3                   	ret    
c0008847:	90                   	nop

c0008848 <Directory::read(dirent*)>:
c0008848:	83 ec 1c             	sub    esp,0x1c
c000884b:	b8 0b 00 00 00       	mov    eax,0xb
c0008850:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008854:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000885b:	83 f9 19             	cmp    ecx,0x19
c000885e:	77 30                	ja     c0008890 <Directory::read(dirent*)+0x48>
c0008860:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008867:	85 c9                	test   ecx,ecx
c0008869:	74 25                	je     c0008890 <Directory::read(dirent*)+0x48>
c000886b:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008872:	74 1c                	je     c0008890 <Directory::read(dirent*)+0x48>
c0008874:	83 ec 0c             	sub    esp,0xc
c0008877:	8b 02                	mov    eax,DWORD PTR [edx]
c0008879:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000887d:	51                   	push   ecx
c000887e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008882:	6a 00                	push   0x0
c0008884:	68 10 01 00 00       	push   0x110
c0008889:	52                   	push   edx
c000888a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000888d:	83 c4 20             	add    esp,0x20
c0008890:	83 c4 1c             	add    esp,0x1c
c0008893:	c3                   	ret    

c0008894 <Directory::create()>:
c0008894:	83 ec 0c             	sub    esp,0xc
c0008897:	b8 0b 00 00 00       	mov    eax,0xb
c000889c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088a7:	83 f9 19             	cmp    ecx,0x19
c00088aa:	77 2f                	ja     c00088db <Directory::create()+0x47>
c00088ac:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b3:	85 c9                	test   ecx,ecx
c00088b5:	74 24                	je     c00088db <Directory::create()+0x47>
c00088b7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088bd:	85 c9                	test   ecx,ecx
c00088bf:	74 1a                	je     c00088db <Directory::create()+0x47>
c00088c1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088c5:	b8 06 00 00 00       	mov    eax,0x6
c00088ca:	75 0f                	jne    c00088db <Directory::create()+0x47>
c00088cc:	50                   	push   eax
c00088cd:	83 c2 0d             	add    edx,0xd
c00088d0:	50                   	push   eax
c00088d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d3:	52                   	push   edx
c00088d4:	51                   	push   ecx
c00088d5:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088d8:	83 c4 10             	add    esp,0x10
c00088db:	83 c4 0c             	add    esp,0xc
c00088de:	c3                   	ret    
c00088df:	90                   	nop

c00088e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e0:	b8 0a 00 00 00       	mov    eax,0xa
c00088e5:	c3                   	ret    
c00088e6:	66 90                	xchg   ax,ax

c00088e8 <Bus::Bus(char const*)>:
c00088e8:	83 ec 0c             	sub    esp,0xc
c00088eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088ef:	83 ec 08             	sub    esp,0x8
c00088f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088f6:	50                   	push   eax
c00088f7:	e8 ac 08 00 00       	call   c00091a8 <Device::Device(char const*)>
c00088fc:	83 c4 10             	add    esp,0x10
c00088ff:	ba 54 14 02 c0       	mov    edx,0xc0021454
c0008904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008908:	89 10                	mov    DWORD PTR [eax],edx
c000890a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008918:	90                   	nop
c0008919:	83 c4 0c             	add    esp,0xc
c000891c:	c3                   	ret    
c000891d:	90                   	nop
c000891e:	66 90                	xchg   ax,ax

c0008920 <Bus::~Bus()>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	ba 54 14 02 c0       	mov    edx,0xc0021454
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	83 ec 0c             	sub    esp,0xc
c0008935:	50                   	push   eax
c0008936:	e8 0d 06 00 00       	call   c0008f48 <Device::~Device()>
c000893b:	83 c4 10             	add    esp,0x10
c000893e:	90                   	nop
c000893f:	83 c4 0c             	add    esp,0xc
c0008942:	c3                   	ret    
c0008943:	90                   	nop

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	83 ec 0c             	sub    esp,0xc
c000894a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000894e:	e8 cd ff ff ff       	call   c0008920 <Bus::~Bus()>
c0008953:	83 c4 10             	add    esp,0x10
c0008956:	83 ec 08             	sub    esp,0x8
c0008959:	68 58 01 00 00       	push   0x158
c000895e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008962:	e8 f4 3c 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008967:	83 c4 10             	add    esp,0x10
c000896a:	83 c4 0c             	add    esp,0xc
c000896d:	c3                   	ret    

c000896e <KeBeepThread(void*)>:
c000896e:	83 ec 0c             	sub    esp,0xc
c0008971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008975:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000897c:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0008983:	75 01                	jne    c0008986 <KeBeepThread(void*)+0x18>
c0008985:	fb                   	sti    
c0008986:	6b c0 0a             	imul   eax,eax,0xa
c0008989:	83 ec 0c             	sub    esp,0xc
c000898c:	50                   	push   eax
c000898d:	e8 06 cc 00 00       	call   c0015598 <milliTenthSleep(unsigned int)>
c0008992:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008999:	e8 ee fb 00 00       	call   c001858c <HalMakeBeep(int)>
c000899e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089a6:	83 c4 1c             	add    esp,0x1c
c00089a9:	e9 c2 ca 00 00       	jmp    c0015470 <blockTask(TaskState)>

c00089ae <KeBeep(int, int, bool)>:
c00089ae:	56                   	push   esi
c00089af:	53                   	push   ebx
c00089b0:	83 ec 10             	sub    esp,0x10
c00089b3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bf:	e8 c8 fb 00 00       	call   c001858c <HalMakeBeep(int)>
c00089c4:	89 f0                	mov    eax,esi
c00089c6:	83 c4 10             	add    esp,0x10
c00089c9:	84 c0                	test   al,al
c00089cb:	74 1e                	je     c00089eb <KeBeep(int, int, bool)+0x3d>
c00089cd:	6b db 0a             	imul   ebx,ebx,0xa
c00089d0:	83 ec 0c             	sub    esp,0xc
c00089d3:	53                   	push   ebx
c00089d4:	e8 bf cb 00 00       	call   c0015598 <milliTenthSleep(unsigned int)>
c00089d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089e1:	83 c4 14             	add    esp,0x14
c00089e4:	5b                   	pop    ebx
c00089e5:	5e                   	pop    esi
c00089e6:	e9 a1 fb 00 00       	jmp    c001858c <HalMakeBeep(int)>
c00089eb:	68 e6 00 00 00       	push   0xe6
c00089f0:	53                   	push   ebx
c00089f1:	68 6e 89 00 c0       	push   0xc000896e
c00089f6:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00089fc:	e8 63 c7 00 00       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c0008a01:	83 c4 14             	add    esp,0x14
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	c3                   	ret    
c0008a07:	90                   	nop

c0008a08 <KeLoadClockSettings()>:
c0008a08:	57                   	push   edi
c0008a09:	56                   	push   esi
c0008a0a:	53                   	push   ebx
c0008a0b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a11:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a16:	68 78 14 02 c0       	push   0xc0021478
c0008a1b:	e8 90 3c 00 00       	call   c000c6b0 <CmOpen(char const*)>
c0008a20:	59                   	pop    ecx
c0008a21:	5e                   	pop    esi
c0008a22:	89 c3                	mov    ebx,eax
c0008a24:	68 9d 14 02 c0       	push   0xc002149d
c0008a29:	50                   	push   eax
c0008a2a:	e8 7c 48 00 00       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a2f:	5f                   	pop    edi
c0008a30:	5a                   	pop    edx
c0008a31:	89 c6                	mov    esi,eax
c0008a33:	50                   	push   eax
c0008a34:	68 b2 14 02 c0       	push   0xc00214b2
c0008a39:	e8 10 e5 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a3e:	83 c4 10             	add    esp,0x10
c0008a41:	85 f6                	test   esi,esi
c0008a43:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a47:	7e 0c                	jle    c0008a55 <KeLoadClockSettings()+0x4d>
c0008a49:	52                   	push   edx
c0008a4a:	57                   	push   edi
c0008a4b:	56                   	push   esi
c0008a4c:	53                   	push   ebx
c0008a4d:	e8 ce 3d 00 00       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	53                   	push   ebx
c0008a59:	e8 70 3d 00 00       	call   c000c7ce <CmClose(Reghive_Tag*)>
c0008a5e:	83 c4 0c             	add    esp,0xc
c0008a61:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a66:	50                   	push   eax
c0008a67:	57                   	push   edi
c0008a68:	68 c0 14 02 c0       	push   0xc00214c0
c0008a6d:	e8 dc e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008a72:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a80:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a83:	a8 fd                	test   al,0xfd
c0008a85:	75 51                	jne    c0008ad8 <KeLoadClockSettings()+0xd0>
c0008a87:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a8c:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a91:	83 fb 2e             	cmp    ebx,0x2e
c0008a94:	75 07                	jne    c0008a9d <KeLoadClockSettings()+0x95>
c0008a96:	83 fa 35             	cmp    edx,0x35
c0008a99:	b0 01                	mov    al,0x1
c0008a9b:	74 0f                	je     c0008aac <KeLoadClockSettings()+0xa4>
c0008a9d:	31 c0                	xor    eax,eax
c0008a9f:	83 fa 2e             	cmp    edx,0x2e
c0008aa2:	75 08                	jne    c0008aac <KeLoadClockSettings()+0xa4>
c0008aa4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aa9:	0f 94 c0             	sete   al
c0008aac:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008ab1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ab6:	83 e8 30             	sub    eax,0x30
c0008ab9:	6b f0 0a             	imul   esi,eax,0xa
c0008abc:	83 fa 2e             	cmp    edx,0x2e
c0008abf:	8d 5c 33 d0          	lea    ebx,[ebx+esi*1-0x30]
c0008ac3:	0f 44 c3             	cmove  eax,ebx
c0008ac6:	80 f9 2d             	cmp    cl,0x2d
c0008ac9:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008ace:	75 19                	jne    c0008ae9 <KeLoadClockSettings()+0xe1>
c0008ad0:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad6:	eb 11                	jmp    c0008ae9 <KeLoadClockSettings()+0xe1>
c0008ad8:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008adf:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008ae9:	50                   	push   eax
c0008aea:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008af1:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af4:	50                   	push   eax
c0008af5:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008afb:	68 d7 14 02 c0       	push   0xc00214d7
c0008b00:	e8 49 e4 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0008b05:	81 c4 70 02 00 00    	add    esp,0x270
c0008b0b:	5b                   	pop    ebx
c0008b0c:	5e                   	pop    esi
c0008b0d:	5f                   	pop    edi
c0008b0e:	c3                   	ret    
c0008b0f:	90                   	nop

c0008b10 <Clock::Clock(char const*)>:
c0008b10:	83 ec 0c             	sub    esp,0xc
c0008b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b17:	83 ec 08             	sub    esp,0x8
c0008b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1e:	50                   	push   eax
c0008b1f:	e8 84 06 00 00       	call   c00091a8 <Device::Device(char const*)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	ba f0 14 02 c0       	mov    edx,0xc00214f0
c0008b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b30:	89 10                	mov    DWORD PTR [eax],edx
c0008b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b36:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b40:	90                   	nop
c0008b41:	83 c4 0c             	add    esp,0xc
c0008b44:	c3                   	ret    
c0008b45:	90                   	nop

c0008b46 <Clock::~Clock()>:
c0008b46:	83 ec 0c             	sub    esp,0xc
c0008b49:	ba f0 14 02 c0       	mov    edx,0xc00214f0
c0008b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b52:	89 10                	mov    DWORD PTR [eax],edx
c0008b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b58:	83 ec 0c             	sub    esp,0xc
c0008b5b:	50                   	push   eax
c0008b5c:	e8 e7 03 00 00       	call   c0008f48 <Device::~Device()>
c0008b61:	83 c4 10             	add    esp,0x10
c0008b64:	90                   	nop
c0008b65:	83 c4 0c             	add    esp,0xc
c0008b68:	c3                   	ret    
c0008b69:	90                   	nop

c0008b6a <Clock::~Clock()>:
c0008b6a:	83 ec 0c             	sub    esp,0xc
c0008b6d:	83 ec 0c             	sub    esp,0xc
c0008b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b74:	e8 cd ff ff ff       	call   c0008b46 <Clock::~Clock()>
c0008b79:	83 c4 10             	add    esp,0x10
c0008b7c:	83 ec 08             	sub    esp,0x8
c0008b7f:	68 58 01 00 00       	push   0x158
c0008b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b88:	e8 ce 3a 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008b8d:	83 c4 10             	add    esp,0x10
c0008b90:	83 c4 0c             	add    esp,0xc
c0008b93:	c3                   	ret    

c0008b94 <Clock::timeInSecondsLocal()>:
c0008b94:	53                   	push   ebx
c0008b95:	83 ec 14             	sub    esp,0x14
c0008b98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b9e:	50                   	push   eax
c0008b9f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008ba2:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008ba9:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008baf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb5:	89 cb                	mov    ebx,ecx
c0008bb7:	c1 fb 1f             	sar    ebx,0x1f
c0008bba:	01 c8                	add    eax,ecx
c0008bbc:	11 da                	adc    edx,ebx
c0008bbe:	83 c4 10             	add    esp,0x10
c0008bc1:	31 c9                	xor    ecx,ecx
c0008bc3:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bca:	74 05                	je     c0008bd1 <Clock::timeInSecondsLocal()+0x3d>
c0008bcc:	b9 08 07 00 00       	mov    ecx,0x708
c0008bd1:	31 db                	xor    ebx,ebx
c0008bd3:	01 c8                	add    eax,ecx
c0008bd5:	11 da                	adc    edx,ebx
c0008bd7:	83 c4 08             	add    esp,0x8
c0008bda:	5b                   	pop    ebx
c0008bdb:	c3                   	ret    

c0008bdc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bdc:	57                   	push   edi
c0008bdd:	56                   	push   esi
c0008bde:	53                   	push   ebx
c0008bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008be3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008beb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008bed:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bf0:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf7:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bfd:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c03:	99                   	cdq    
c0008c04:	29 c6                	sub    esi,eax
c0008c06:	19 d7                	sbb    edi,edx
c0008c08:	89 f0                	mov    eax,esi
c0008c0a:	31 f6                	xor    esi,esi
c0008c0c:	89 fa                	mov    edx,edi
c0008c0e:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c15:	74 05                	je     c0008c1c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c17:	be 08 07 00 00       	mov    esi,0x708
c0008c1c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c20:	31 ff                	xor    edi,edi
c0008c22:	29 f0                	sub    eax,esi
c0008c24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c28:	19 fa                	sbb    edx,edi
c0008c2a:	89 d8                	mov    eax,ebx
c0008c2c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c30:	5b                   	pop    ebx
c0008c31:	5e                   	pop    esi
c0008c32:	5f                   	pop    edi
c0008c33:	ff e0                	jmp    eax

c0008c35 <KeDatetimeToSeconds(datetime_t)>:
c0008c35:	55                   	push   ebp
c0008c36:	57                   	push   edi
c0008c37:	56                   	push   esi
c0008c38:	53                   	push   ebx
c0008c39:	83 ec 0c             	sub    esp,0xc
c0008c3c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008c44:	89 f7                	mov    edi,esi
c0008c46:	89 f0                	mov    eax,esi
c0008c48:	0f b6 cf             	movzx  ecx,bh
c0008c4b:	0f b6 c4             	movzx  eax,ah
c0008c4e:	c1 ef 10             	shr    edi,0x10
c0008c51:	89 da                	mov    edx,ebx
c0008c53:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0008c56:	89 f9                	mov    ecx,edi
c0008c58:	0f b6 f9             	movzx  edi,cl
c0008c5b:	89 f1                	mov    ecx,esi
c0008c5d:	6b c0 3c             	imul   eax,eax,0x3c
c0008c60:	0f b6 f1             	movzx  esi,cl
c0008c63:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008c69:	0f b6 db             	movzx  ebx,bl
c0008c6c:	c1 ea 10             	shr    edx,0x10
c0008c6f:	81 ea 6c 07 00 00    	sub    edx,0x76c
c0008c75:	01 f8                	add    eax,edi
c0008c77:	01 f0                	add    eax,esi
c0008c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c7c:	c1 f8 1f             	sar    eax,0x1f
c0008c7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c83:	89 e8                	mov    eax,ebp
c0008c85:	0f b6 c0             	movzx  eax,al
c0008c88:	8b 0c 85 40 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeac0]
c0008c8f:	83 f8 01             	cmp    eax,0x1
c0008c92:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c0008c96:	0f b7 da             	movzx  ebx,dx
c0008c99:	76 27                	jbe    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008c9b:	80 e2 03             	and    dl,0x3
c0008c9e:	75 22                	jne    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008ca0:	31 d2                	xor    edx,edx
c0008ca2:	be 64 00 00 00       	mov    esi,0x64
c0008ca7:	89 d8                	mov    eax,ebx
c0008ca9:	f7 f6                	div    esi
c0008cab:	85 d2                	test   edx,edx
c0008cad:	75 12                	jne    c0008cc1 <KeDatetimeToSeconds(datetime_t)+0x8c>
c0008caf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cb5:	be 90 01 00 00       	mov    esi,0x190
c0008cba:	99                   	cdq    
c0008cbb:	f7 fe                	idiv   esi
c0008cbd:	85 d2                	test   edx,edx
c0008cbf:	75 01                	jne    c0008cc2 <KeDatetimeToSeconds(datetime_t)+0x8d>
c0008cc1:	41                   	inc    ecx
c0008cc2:	83 fb 46             	cmp    ebx,0x46
c0008cc5:	76 48                	jbe    c0008d0f <KeDatetimeToSeconds(datetime_t)+0xda>
c0008cc7:	be 46 00 00 00       	mov    esi,0x46
c0008ccc:	bf 64 00 00 00       	mov    edi,0x64
c0008cd1:	bd 90 01 00 00       	mov    ebp,0x190
c0008cd6:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cdc:	b8 6d 01 00 00       	mov    eax,0x16d
c0008ce1:	75 23                	jne    c0008d06 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008ce3:	89 f0                	mov    eax,esi
c0008ce5:	99                   	cdq    
c0008ce6:	f7 ff                	idiv   edi
c0008ce8:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ced:	85 d2                	test   edx,edx
c0008cef:	75 15                	jne    c0008d06 <KeDatetimeToSeconds(datetime_t)+0xd1>
c0008cf1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cf7:	99                   	cdq    
c0008cf8:	f7 fd                	idiv   ebp
c0008cfa:	83 fa 01             	cmp    edx,0x1
c0008cfd:	19 c0                	sbb    eax,eax
c0008cff:	f7 d0                	not    eax
c0008d01:	05 6e 01 00 00       	add    eax,0x16e
c0008d06:	46                   	inc    esi
c0008d07:	01 c1                	add    ecx,eax
c0008d09:	39 de                	cmp    esi,ebx
c0008d0b:	7c c9                	jl     c0008cd6 <KeDatetimeToSeconds(datetime_t)+0xa1>
c0008d0d:	eb 34                	jmp    c0008d43 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d0f:	74 32                	je     c0008d43 <KeDatetimeToSeconds(datetime_t)+0x10e>
c0008d11:	b8 45 00 00 00       	mov    eax,0x45
c0008d16:	89 c2                	mov    edx,eax
c0008d18:	83 e2 03             	and    edx,0x3
c0008d1b:	39 d8                	cmp    eax,ebx
c0008d1d:	7e 0f                	jle    c0008d2e <KeDatetimeToSeconds(datetime_t)+0xf9>
c0008d1f:	83 fa 01             	cmp    edx,0x1
c0008d22:	19 d2                	sbb    edx,edx
c0008d24:	48                   	dec    eax
c0008d25:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d2c:	eb e8                	jmp    c0008d16 <KeDatetimeToSeconds(datetime_t)+0xe1>
c0008d2e:	85 d2                	test   edx,edx
c0008d30:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d35:	75 0a                	jne    c0008d41 <KeDatetimeToSeconds(datetime_t)+0x10c>
c0008d37:	83 fb 01             	cmp    ebx,0x1
c0008d3a:	19 c0                	sbb    eax,eax
c0008d3c:	05 6e 01 00 00       	add    eax,0x16e
c0008d41:	29 c1                	sub    ecx,eax
c0008d43:	b8 80 51 01 00       	mov    eax,0x15180
c0008d48:	f7 e9                	imul   ecx
c0008d4a:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d4d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d51:	83 c4 0c             	add    esp,0xc
c0008d54:	5b                   	pop    ebx
c0008d55:	5e                   	pop    esi
c0008d56:	5f                   	pop    edi
c0008d57:	5d                   	pop    ebp
c0008d58:	c3                   	ret    
c0008d59:	90                   	nop

c0008d5a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d5a:	57                   	push   edi
c0008d5b:	56                   	push   esi
c0008d5c:	53                   	push   ebx
c0008d5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d61:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d63:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d6e:	e8 c2 fe ff ff       	call   c0008c35 <KeDatetimeToSeconds(datetime_t)>
c0008d73:	59                   	pop    ecx
c0008d74:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d7b:	5b                   	pop    ebx
c0008d7c:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d82:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d88:	89 cb                	mov    ebx,ecx
c0008d8a:	c1 fb 1f             	sar    ebx,0x1f
c0008d8d:	29 c8                	sub    eax,ecx
c0008d8f:	19 da                	sbb    edx,ebx
c0008d91:	31 c9                	xor    ecx,ecx
c0008d93:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d9a:	74 05                	je     c0008da1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d9c:	b9 08 07 00 00       	mov    ecx,0x708
c0008da1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008da5:	31 db                	xor    ebx,ebx
c0008da7:	29 c8                	sub    eax,ecx
c0008da9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008dad:	19 da                	sbb    edx,ebx
c0008daf:	89 f8                	mov    eax,edi
c0008db1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008db5:	5b                   	pop    ebx
c0008db6:	5e                   	pop    esi
c0008db7:	5f                   	pop    edi
c0008db8:	ff e0                	jmp    eax

c0008dba <KeSecondsToDatetime(unsigned long long)>:
c0008dba:	55                   	push   ebp
c0008dbb:	57                   	push   edi
c0008dbc:	56                   	push   esi
c0008dbd:	53                   	push   ebx
c0008dbe:	83 ec 1c             	sub    esp,0x1c
c0008dc1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dcd:	6a 00                	push   0x0
c0008dcf:	68 80 51 01 00       	push   0x15180
c0008dd4:	55                   	push   ebp
c0008dd5:	57                   	push   edi
c0008dd6:	e8 99 6c 01 00       	call   c001fa74 <__udivdi3>
c0008ddb:	83 c4 10             	add    esp,0x10
c0008dde:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008de2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008de8:	6a 00                	push   0x0
c0008dea:	68 80 51 01 00       	push   0x15180
c0008def:	55                   	push   ebp
c0008df0:	57                   	push   edi
c0008df1:	bf 10 0e 00 00       	mov    edi,0xe10
c0008df6:	e8 79 6d 01 00       	call   c001fb74 <__umoddi3>
c0008dfb:	83 c4 10             	add    esp,0x10
c0008dfe:	99                   	cdq    
c0008dff:	f7 ff                	idiv   edi
c0008e01:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e06:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e09:	89 d0                	mov    eax,edx
c0008e0b:	99                   	cdq    
c0008e0c:	f7 ff                	idiv   edi
c0008e0e:	85 db                	test   ebx,ebx
c0008e10:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e13:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e16:	79 11                	jns    c0008e29 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e1c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e22:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e27:	eb 07                	jmp    c0008e30 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e29:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e2e:	89 d8                	mov    eax,ebx
c0008e30:	99                   	cdq    
c0008e31:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e36:	f7 f9                	idiv   ecx
c0008e38:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e3d:	31 d2                	xor    edx,edx
c0008e3f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e48:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e50:	01 c3                	add    ebx,eax
c0008e52:	89 d8                	mov    eax,ebx
c0008e54:	f7 f1                	div    ecx
c0008e56:	31 d2                	xor    edx,edx
c0008e58:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e5b:	89 d8                	mov    eax,ebx
c0008e5d:	f7 f7                	div    edi
c0008e5f:	31 d2                	xor    edx,edx
c0008e61:	29 c1                	sub    ecx,eax
c0008e63:	89 d8                	mov    eax,ebx
c0008e65:	f7 f5                	div    ebp
c0008e67:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e6c:	31 d2                	xor    edx,edx
c0008e6e:	29 c1                	sub    ecx,eax
c0008e70:	89 c8                	mov    eax,ecx
c0008e72:	f7 f5                	div    ebp
c0008e74:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e79:	31 d2                	xor    edx,edx
c0008e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e7f:	89 c8                	mov    eax,ecx
c0008e81:	f7 f5                	div    ebp
c0008e83:	31 d2                	xor    edx,edx
c0008e85:	01 c3                	add    ebx,eax
c0008e87:	89 c8                	mov    eax,ecx
c0008e89:	f7 f7                	div    edi
c0008e8b:	bf 99 00 00 00       	mov    edi,0x99
c0008e90:	31 d2                	xor    edx,edx
c0008e92:	29 c3                	sub    ebx,eax
c0008e94:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e9c:	29 c3                	sub    ebx,eax
c0008e9e:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008ea1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008ea4:	83 c1 02             	add    ecx,0x2
c0008ea7:	89 c8                	mov    eax,ecx
c0008ea9:	bb 05 00 00 00       	mov    ebx,0x5
c0008eae:	f7 f7                	div    edi
c0008eb0:	31 d2                	xor    edx,edx
c0008eb2:	89 c7                	mov    edi,eax
c0008eb4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eba:	83 c0 02             	add    eax,0x2
c0008ebd:	f7 f3                	div    ebx
c0008ebf:	89 eb                	mov    ebx,ebp
c0008ec1:	29 c3                	sub    ebx,eax
c0008ec3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec9:	88 1e                	mov    BYTE PTR [esi],bl
c0008ecb:	19 c0                	sbb    eax,eax
c0008ecd:	31 d2                	xor    edx,edx
c0008ecf:	83 e0 0c             	and    eax,0xc
c0008ed2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ed6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008ede:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008ee2:	83 f9 01             	cmp    ecx,0x1
c0008ee5:	0f 96 c2             	setbe  dl
c0008ee8:	41                   	inc    ecx
c0008ee9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008eec:	01 d0                	add    eax,edx
c0008eee:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008ef2:	83 c4 1c             	add    esp,0x1c
c0008ef5:	89 f0                	mov    eax,esi
c0008ef7:	5b                   	pop    ebx
c0008ef8:	5e                   	pop    esi
c0008ef9:	5f                   	pop    edi
c0008efa:	5d                   	pop    ebp
c0008efb:	c2 04 00             	ret    0x4

c0008efe <Clock::timeInDatetimeLocal()>:
c0008efe:	53                   	push   ebx
c0008eff:	83 ec 14             	sub    esp,0x14
c0008f02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0a:	e8 85 fc ff ff       	call   c0008b94 <Clock::timeInSecondsLocal()>
c0008f0f:	83 c4 0c             	add    esp,0xc
c0008f12:	52                   	push   edx
c0008f13:	50                   	push   eax
c0008f14:	53                   	push   ebx
c0008f15:	e8 a0 fe ff ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0008f1a:	89 d8                	mov    eax,ebx
c0008f1c:	83 c4 14             	add    esp,0x14
c0008f1f:	5b                   	pop    ebx
c0008f20:	c2 04 00             	ret    0x4
c0008f23:	90                   	nop

c0008f24 <Device::hibernate()>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <Device::wake()>:
c0008f26:	c3                   	ret    
c0008f27:	90                   	nop

c0008f28 <Device::detect()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Device::disableLegacy()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <Device::powerSaving(PowerSavingLevel)>:
c0008f2c:	c3                   	ret    
c0008f2d:	90                   	nop

c0008f2e <DriverlessDevice::close(int, int, void*)>:
c0008f2e:	31 c0                	xor    eax,eax
c0008f30:	c3                   	ret    
c0008f31:	90                   	nop

c0008f32 <DriverlessDevice::detect()>:
c0008f32:	c3                   	ret    
c0008f33:	90                   	nop

c0008f34 <DriverlessDevice::open(int, int, void*)>:
c0008f34:	83 ec 18             	sub    esp,0x18
c0008f37:	68 70 15 02 c0       	push   0xc0021570
c0008f3c:	e8 d5 5c 00 00       	call   c000ec16 <KePanic(char const*)>
c0008f41:	83 c8 ff             	or     eax,0xffffffff
c0008f44:	83 c4 1c             	add    esp,0x1c
c0008f47:	c3                   	ret    

c0008f48 <Device::~Device()>:
c0008f48:	ba 14 16 02 c0       	mov    edx,0xc0021614
c0008f4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f51:	89 10                	mov    DWORD PTR [eax],edx
c0008f53:	90                   	nop
c0008f54:	c3                   	ret    
c0008f55:	90                   	nop

c0008f56 <Device::~Device()>:
c0008f56:	83 ec 0c             	sub    esp,0xc
c0008f59:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f5d:	e8 e6 ff ff ff       	call   c0008f48 <Device::~Device()>
c0008f62:	83 c4 04             	add    esp,0x4
c0008f65:	83 ec 08             	sub    esp,0x8
c0008f68:	68 58 01 00 00       	push   0x158
c0008f6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f71:	e8 e5 36 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	83 c4 0c             	add    esp,0xc
c0008f7c:	c3                   	ret    
c0008f7d:	90                   	nop

c0008f7e <Device::findAndLoadDriver()>:
c0008f7e:	c7 44 24 04 8e 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc002158e
c0008f86:	e9 c3 df ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c0008f8b:	90                   	nop

c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f8c:	57                   	push   edi
c0008f8d:	b9 09 00 00 00       	mov    ecx,0x9
c0008f92:	56                   	push   esi
c0008f93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f97:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f9b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008fa5:	81 c7 18 01 00 00    	add    edi,0x118
c0008fab:	fc                   	cld    
c0008fac:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fae:	5e                   	pop    esi
c0008faf:	5f                   	pop    edi
c0008fb0:	c3                   	ret    
c0008fb1:	90                   	nop

c0008fb2 <Device::preOpenACPI(void*, char*, char*)>:
c0008fb2:	57                   	push   edi
c0008fb3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb8:	56                   	push   esi
c0008fb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fc1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fc5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fcf:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fd5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fdb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fdd:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fe3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe7:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fee:	5e                   	pop    esi
c0008fef:	5f                   	pop    edi
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008ff2:	53                   	push   ebx
c0008ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ffb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008fff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009003:	0f b6 c0             	movzx  eax,al
c0009006:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000900a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009012:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009016:	5b                   	pop    ebx
c0009017:	e9 39 f9 00 00       	jmp    c0018955 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000901c <Device::getParent()>:
c000901c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009020:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009026:	c3                   	ret    
c0009027:	90                   	nop

c0009028 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009028:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000902c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009030:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009039:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000903d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009041:	e9 80 fa 00 00       	jmp    c0018ac6 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009046 <Device::addChild(Device*)>:
c0009046:	53                   	push   ebx
c0009047:	83 ec 08             	sub    esp,0x8
c000904a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000904e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009052:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009058:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000905e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009060:	85 d2                	test   edx,edx
c0009062:	74 04                	je     c0009068 <Device::addChild(Device*)+0x22>
c0009064:	89 d3                	mov    ebx,edx
c0009066:	eb f6                	jmp    c000905e <Device::addChild(Device*)+0x18>
c0009068:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000906b:	83 ec 0c             	sub    esp,0xc
c000906e:	6a 08                	push   0x8
c0009070:	e8 5b 58 00 00       	call   c000e8d0 <malloc>
c0009075:	89 03                	mov    DWORD PTR [ebx],eax
c0009077:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000907d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009084:	83 c4 18             	add    esp,0x18
c0009087:	5b                   	pop    ebx
c0009088:	c3                   	ret    
c0009089:	90                   	nop

c000908a <Device::removeAllChildren()>:
c000908a:	56                   	push   esi
c000908b:	53                   	push   ebx
c000908c:	52                   	push   edx
c000908d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009091:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009097:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000909a:	74 17                	je     c00090b3 <Device::removeAllChildren()+0x29>
c000909c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000909f:	85 c0                	test   eax,eax
c00090a1:	74 0c                	je     c00090af <Device::removeAllChildren()+0x25>
c00090a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a5:	83 ec 0c             	sub    esp,0xc
c00090a8:	50                   	push   eax
c00090a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090ac:	83 c4 10             	add    esp,0x10
c00090af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090b1:	eb e4                	jmp    c0009097 <Device::removeAllChildren()+0xd>
c00090b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090cc:	58                   	pop    eax
c00090cd:	5b                   	pop    ebx
c00090ce:	5e                   	pop    esi
c00090cf:	c3                   	ret    

c00090d0 <Device::hibernateAll()>:
c00090d0:	53                   	push   ebx
c00090d1:	83 ec 14             	sub    esp,0x14
c00090d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090da:	53                   	push   ebx
c00090db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090e4:	83 c4 10             	add    esp,0x10
c00090e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090ea:	74 0f                	je     c00090fb <Device::hibernateAll()+0x2b>
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f2:	e8 d9 ff ff ff       	call   c00090d0 <Device::hibernateAll()>
c00090f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f9:	eb e9                	jmp    c00090e4 <Device::hibernateAll()+0x14>
c00090fb:	83 c4 08             	add    esp,0x8
c00090fe:	5b                   	pop    ebx
c00090ff:	c3                   	ret    

c0009100 <Device::wakeAll()>:
c0009100:	53                   	push   ebx
c0009101:	83 ec 14             	sub    esp,0x14
c0009104:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009108:	8b 03                	mov    eax,DWORD PTR [ebx]
c000910a:	53                   	push   ebx
c000910b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000910e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009114:	83 c4 10             	add    esp,0x10
c0009117:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000911a:	74 0f                	je     c000912b <Device::wakeAll()+0x2b>
c000911c:	83 ec 0c             	sub    esp,0xc
c000911f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009122:	e8 d9 ff ff ff       	call   c0009100 <Device::wakeAll()>
c0009127:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009129:	eb e9                	jmp    c0009114 <Device::wakeAll()+0x14>
c000912b:	83 c4 08             	add    esp,0x8
c000912e:	5b                   	pop    ebx
c000912f:	c3                   	ret    

c0009130 <Device::detectAll()>:
c0009130:	53                   	push   ebx
c0009131:	83 ec 14             	sub    esp,0x14
c0009134:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009138:	8b 03                	mov    eax,DWORD PTR [ebx]
c000913a:	53                   	push   ebx
c000913b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000913e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009144:	83 c4 10             	add    esp,0x10
c0009147:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000914a:	74 0f                	je     c000915b <Device::detectAll()+0x2b>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009152:	e8 d9 ff ff ff       	call   c0009130 <Device::detectAll()>
c0009157:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009159:	eb e9                	jmp    c0009144 <Device::detectAll()+0x14>
c000915b:	83 c4 08             	add    esp,0x8
c000915e:	5b                   	pop    ebx
c000915f:	c3                   	ret    

c0009160 <Device::disableLegacyAll()>:
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Device::loadDriversForAll()>:
c0009162:	c3                   	ret    
c0009163:	90                   	nop

c0009164 <Device::powerSavingAll(PowerSavingLevel)>:
c0009164:	56                   	push   esi
c0009165:	53                   	push   ebx
c0009166:	83 ec 0c             	sub    esp,0xc
c0009169:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000916d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009171:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009173:	56                   	push   esi
c0009174:	53                   	push   ebx
c0009175:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009178:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000917e:	83 c4 10             	add    esp,0x10
c0009181:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009184:	74 0f                	je     c0009195 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009186:	52                   	push   edx
c0009187:	52                   	push   edx
c0009188:	56                   	push   esi
c0009189:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000918c:	e8 d3 ff ff ff       	call   c0009164 <Device::powerSavingAll(PowerSavingLevel)>
c0009191:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009193:	eb e9                	jmp    c000917e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009195:	58                   	pop    eax
c0009196:	5b                   	pop    ebx
c0009197:	5e                   	pop    esi
c0009198:	c3                   	ret    
c0009199:	90                   	nop

c000919a <Device::setName(char const*)>:
c000919a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091a2:	e9 a9 74 ff ff       	jmp    c0000650 <strcpy>
c00091a7:	90                   	nop

c00091a8 <Device::Device(char const*)>:
c00091a8:	83 ec 1c             	sub    esp,0x1c
c00091ab:	ba 14 16 02 c0       	mov    edx,0xc0021614
c00091b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b4:	89 10                	mov    DWORD PTR [eax],edx
c00091b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091ba:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091d6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091ee:	83 ec 08             	sub    esp,0x8
c00091f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f9:	e8 9c ff ff ff       	call   c000919a <Device::setName(char const*)>
c00091fe:	83 c4 10             	add    esp,0x10
c0009201:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009209:	83 ec 0c             	sub    esp,0xc
c000920c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009210:	e8 bb 56 00 00       	call   c000e8d0 <malloc>
c0009215:	83 c4 10             	add    esp,0x10
c0009218:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000921e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009225:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009229:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000922f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009233:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009239:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000923f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009243:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009249:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009250:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009254:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000925b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000925f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000926a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009278:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009286:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009294:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000929e:	90                   	nop
c000929f:	83 c4 1c             	add    esp,0x1c
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <Device::getName()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	05 d0 00 00 00       	add    eax,0xd0
c00092ad:	c3                   	ret    

c00092ae <Device::closeAll()>:
c00092ae:	53                   	push   ebx
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092b6:	53                   	push   ebx
c00092b7:	e8 e8 ff ff ff       	call   c00092a4 <Device::getName()>
c00092bc:	52                   	push   edx
c00092bd:	50                   	push   eax
c00092be:	68 c8 15 02 c0       	push   0xc00215c8
c00092c3:	e8 86 dc ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00092c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092ca:	6a 00                	push   0x0
c00092cc:	6a 00                	push   0x0
c00092ce:	6a 00                	push   0x0
c00092d0:	53                   	push   ebx
c00092d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092d4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092da:	83 c4 20             	add    esp,0x20
c00092dd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092e0:	74 12                	je     c00092f4 <Device::closeAll()+0x46>
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e8:	e8 c1 ff ff ff       	call   c00092ae <Device::closeAll()>
c00092ed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092ef:	83 c4 10             	add    esp,0x10
c00092f2:	eb e9                	jmp    c00092dd <Device::closeAll()+0x2f>
c00092f4:	83 c4 08             	add    esp,0x8
c00092f7:	5b                   	pop    ebx
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <DriverlessDevice::DriverlessDevice(char const*)>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	83 ec 08             	sub    esp,0x8
c0009304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009308:	50                   	push   eax
c0009309:	e8 9a fe ff ff       	call   c00091a8 <Device::Device(char const*)>
c000930e:	83 c4 10             	add    esp,0x10
c0009311:	ba 40 16 02 c0       	mov    edx,0xc0021640
c0009316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000931a:	89 10                	mov    DWORD PTR [eax],edx
c000931c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009320:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000932a:	90                   	nop
c000932b:	83 c4 0c             	add    esp,0xc
c000932e:	c3                   	ret    
c000932f:	90                   	nop

c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009330:	57                   	push   edi
c0009331:	56                   	push   esi
c0009332:	53                   	push   ebx
c0009333:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009337:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000933b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000933f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009345:	75 0c                	jne    c0009353 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009347:	52                   	push   edx
c0009348:	52                   	push   edx
c0009349:	53                   	push   ebx
c000934a:	56                   	push   esi
c000934b:	e8 9c 69 01 00       	call   c001fcec <LinkedList<Device>::addElement(Device*)>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009359:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000935c:	74 12                	je     c0009370 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000935e:	50                   	push   eax
c000935f:	57                   	push   edi
c0009360:	56                   	push   esi
c0009361:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009364:	e8 c7 ff ff ff       	call   c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009369:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	eb e9                	jmp    c0009359 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009370:	5b                   	pop    ebx
c0009371:	5e                   	pop    esi
c0009372:	5f                   	pop    edi
c0009373:	c3                   	ret    

c0009374 <getDevicesOfType(DeviceType)>:
c0009374:	53                   	push   ebx
c0009375:	83 ec 14             	sub    esp,0x14
c0009378:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000937c:	53                   	push   ebx
c000937d:	e8 46 6a 01 00       	call   c001fdc8 <LinkedList<Device>::LinkedList()>
c0009382:	83 c4 0c             	add    esp,0xc
c0009385:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009389:	53                   	push   ebx
c000938a:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0009390:	e8 9b ff ff ff       	call   c0009330 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009395:	83 c4 18             	add    esp,0x18
c0009398:	89 d8                	mov    eax,ebx
c000939a:	5b                   	pop    ebx
c000939b:	c2 04 00             	ret    0x4
c000939e:	66 90                	xchg   ax,ax

c00093a0 <HardDiskController::HardDiskController(char const*)>:
c00093a0:	83 ec 0c             	sub    esp,0xc
c00093a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093a7:	83 ec 08             	sub    esp,0x8
c00093aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ae:	50                   	push   eax
c00093af:	e8 f4 fd ff ff       	call   c00091a8 <Device::Device(char const*)>
c00093b4:	83 c4 10             	add    esp,0x10
c00093b7:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c00093bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c0:	89 10                	mov    DWORD PTR [eax],edx
c00093c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093c6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093d0:	90                   	nop
c00093d1:	83 c4 0c             	add    esp,0xc
c00093d4:	c3                   	ret    
c00093d5:	90                   	nop
c00093d6:	66 90                	xchg   ax,ax

c00093d8 <HardDiskController::~HardDiskController()>:
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c00093e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e4:	89 10                	mov    DWORD PTR [eax],edx
c00093e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093ea:	83 ec 0c             	sub    esp,0xc
c00093ed:	50                   	push   eax
c00093ee:	e8 55 fb ff ff       	call   c0008f48 <Device::~Device()>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	90                   	nop
c00093f7:	83 c4 0c             	add    esp,0xc
c00093fa:	c3                   	ret    
c00093fb:	90                   	nop

c00093fc <HardDiskController::~HardDiskController()>:
c00093fc:	83 ec 0c             	sub    esp,0xc
c00093ff:	83 ec 0c             	sub    esp,0xc
c0009402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009406:	e8 cd ff ff ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c000940b:	83 c4 10             	add    esp,0x10
c000940e:	83 ec 08             	sub    esp,0x8
c0009411:	68 58 01 00 00       	push   0x158
c0009416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000941a:	e8 3c 32 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000941f:	83 c4 10             	add    esp,0x10
c0009422:	83 c4 0c             	add    esp,0xc
c0009425:	c3                   	ret    

c0009426 <PhysicalDisk::eject()>:
c0009426:	83 c8 ff             	or     eax,0xffffffff
c0009429:	c3                   	ret    

c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000942a:	83 ec 0c             	sub    esp,0xc
c000942d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009431:	83 ec 08             	sub    esp,0x8
c0009434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009438:	50                   	push   eax
c0009439:	e8 6a fd ff ff       	call   c00091a8 <Device::Device(char const*)>
c000943e:	83 c4 10             	add    esp,0x10
c0009441:	ba 98 16 02 c0       	mov    edx,0xc0021698
c0009446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000944a:	89 10                	mov    DWORD PTR [eax],edx
c000944c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009450:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009466:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009478:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000947e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009482:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000948c:	90                   	nop
c000948d:	83 c4 0c             	add    esp,0xc
c0009490:	c3                   	ret    
c0009491:	90                   	nop

c0009492 <PhysicalDisk::startCache()>:
c0009492:	56                   	push   esi
c0009493:	53                   	push   ebx
c0009494:	83 ec 10             	sub    esp,0x10
c0009497:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000949b:	6a 44                	push   0x44
c000949d:	e8 2e 54 00 00       	call   c000e8d0 <malloc>
c00094a2:	89 c6                	mov    esi,eax
c00094a4:	58                   	pop    eax
c00094a5:	5a                   	pop    edx
c00094a6:	53                   	push   ebx
c00094a7:	56                   	push   esi
c00094a8:	e8 0f 14 00 00       	call   c000a8bc <VCache::VCache(PhysicalDisk*)>
c00094ad:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094b3:	83 c4 14             	add    esp,0x14
c00094b6:	5b                   	pop    ebx
c00094b7:	5e                   	pop    esi
c00094b8:	c3                   	ret    
c00094b9:	90                   	nop

c00094ba <PhysicalDisk::~PhysicalDisk()>:
c00094ba:	83 ec 0c             	sub    esp,0xc
c00094bd:	ba 98 16 02 c0       	mov    edx,0xc0021698
c00094c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c6:	89 10                	mov    DWORD PTR [eax],edx
c00094c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094cc:	83 ec 0c             	sub    esp,0xc
c00094cf:	50                   	push   eax
c00094d0:	e8 73 fa ff ff       	call   c0008f48 <Device::~Device()>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	90                   	nop
c00094d9:	83 c4 0c             	add    esp,0xc
c00094dc:	c3                   	ret    
c00094dd:	90                   	nop

c00094de <PhysicalDisk::~PhysicalDisk()>:
c00094de:	83 ec 0c             	sub    esp,0xc
c00094e1:	83 ec 0c             	sub    esp,0xc
c00094e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e8:	e8 cd ff ff ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c00094ed:	83 c4 10             	add    esp,0x10
c00094f0:	83 ec 08             	sub    esp,0x8
c00094f3:	68 6c 01 00 00       	push   0x16c
c00094f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094fc:	e8 5a 31 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009501:	83 c4 10             	add    esp,0x10
c0009504:	83 c4 0c             	add    esp,0xc
c0009507:	c3                   	ret    

c0009508 <startGUI(void*)>:
c0009508:	55                   	push   ebp
c0009509:	89 e5                	mov    ebp,esp
c000950b:	53                   	push   ebx
c000950c:	83 ec 04             	sub    esp,0x4
c000950f:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009517:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000951c:	85 c0                	test   eax,eax
c000951e:	75 01                	jne    c0009521 <startGUI(void*)+0x19>
c0009520:	fb                   	sti    
c0009521:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009527:	83 ec 08             	sub    esp,0x8
c000952a:	6a 01                	push   0x1
c000952c:	68 c8 16 02 c0       	push   0xc00216c8
c0009531:	e8 8c b3 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c0009536:	83 c4 10             	add    esp,0x10
c0009539:	83 ec 08             	sub    esp,0x8
c000953c:	53                   	push   ebx
c000953d:	50                   	push   eax
c000953e:	e8 e0 b5 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c0009543:	83 c4 10             	add    esp,0x10
c0009546:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000954c:	83 ec 08             	sub    esp,0x8
c000954f:	6a 01                	push   0x1
c0009551:	68 e2 16 02 c0       	push   0xc00216e2
c0009556:	e8 67 b3 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c000955b:	83 c4 10             	add    esp,0x10
c000955e:	83 ec 08             	sub    esp,0x8
c0009561:	53                   	push   ebx
c0009562:	50                   	push   eax
c0009563:	e8 bb b5 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c0009568:	83 c4 10             	add    esp,0x10
c000956b:	eb fe                	jmp    c000956b <startGUI(void*)+0x63>

c000956d <startGUIVESA(void*)>:
c000956d:	55                   	push   ebp
c000956e:	89 e5                	mov    ebp,esp
c0009570:	53                   	push   ebx
c0009571:	83 ec 04             	sub    esp,0x4
c0009574:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000957c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009581:	85 c0                	test   eax,eax
c0009583:	75 01                	jne    c0009586 <startGUIVESA(void*)+0x19>
c0009585:	fb                   	sti    
c0009586:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000958c:	83 ec 08             	sub    esp,0x8
c000958f:	6a 01                	push   0x1
c0009591:	68 00 17 02 c0       	push   0xc0021700
c0009596:	e8 27 b3 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c000959b:	83 c4 10             	add    esp,0x10
c000959e:	83 ec 08             	sub    esp,0x8
c00095a1:	53                   	push   ebx
c00095a2:	50                   	push   eax
c00095a3:	e8 7b b5 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c00095a8:	83 c4 10             	add    esp,0x10
c00095ab:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095b1:	83 ec 08             	sub    esp,0x8
c00095b4:	6a 01                	push   0x1
c00095b6:	68 e2 16 02 c0       	push   0xc00216e2
c00095bb:	e8 02 b3 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c00095c0:	83 c4 10             	add    esp,0x10
c00095c3:	83 ec 08             	sub    esp,0x8
c00095c6:	53                   	push   ebx
c00095c7:	50                   	push   eax
c00095c8:	e8 56 b5 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c00095cd:	83 c4 10             	add    esp,0x10
c00095d0:	eb fe                	jmp    c00095d0 <startGUIVESA(void*)+0x63>

c00095d2 <sendKeyToTerminal(unsigned char)>:
c00095d2:	55                   	push   ebp
c00095d3:	89 e5                	mov    ebp,esp
c00095d5:	83 ec 28             	sub    esp,0x28
c00095d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095db:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095de:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095e3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095e7:	83 ec 08             	sub    esp,0x8
c00095ea:	52                   	push   edx
c00095eb:	50                   	push   eax
c00095ec:	e8 95 80 00 00       	call   c0011686 <VgaText::receiveKey(unsigned char)>
c00095f1:	83 c4 10             	add    esp,0x10
c00095f4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095f8:	83 f8 0a             	cmp    eax,0xa
c00095fb:	74 16                	je     c0009613 <sendKeyToTerminal(unsigned char)+0x41>
c00095fd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009601:	83 f8 03             	cmp    eax,0x3
c0009604:	74 0d                	je     c0009613 <sendKeyToTerminal(unsigned char)+0x41>
c0009606:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000960a:	83 f8 1c             	cmp    eax,0x1c
c000960d:	0f 85 92 00 00 00    	jne    c00096a5 <sendKeyToTerminal(unsigned char)+0xd3>
c0009613:	fa                   	cli    
c0009614:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009619:	83 c0 01             	add    eax,0x1
c000961c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009621:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009626:	83 c0 01             	add    eax,0x1
c0009629:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000962e:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0009633:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009636:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0009640:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009644:	74 1f                	je     c0009665 <sendKeyToTerminal(unsigned char)+0x93>
c0009646:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009649:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000964c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000964f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009652:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009655:	83 ec 0c             	sub    esp,0xc
c0009658:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000965b:	e8 50 c0 00 00       	call   c00156b0 <unblockTask(ThreadControlBlock*)>
c0009660:	83 c4 10             	add    esp,0x10
c0009663:	eb db                	jmp    c0009640 <sendKeyToTerminal(unsigned char)+0x6e>
c0009665:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000966a:	83 e8 01             	sub    eax,0x1
c000966d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009672:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009677:	85 c0                	test   eax,eax
c0009679:	75 18                	jne    c0009693 <sendKeyToTerminal(unsigned char)+0xc1>
c000967b:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0009680:	85 c0                	test   eax,eax
c0009682:	74 0f                	je     c0009693 <sendKeyToTerminal(unsigned char)+0xc1>
c0009684:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000968e:	e8 1d bd 00 00       	call   c00153b0 <schedule()>
c0009693:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000969b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00096a0:	85 c0                	test   eax,eax
c00096a2:	75 01                	jne    c00096a5 <sendKeyToTerminal(unsigned char)+0xd3>
c00096a4:	fb                   	sti    
c00096a5:	90                   	nop
c00096a6:	c9                   	leave  
c00096a7:	c3                   	ret    

c00096a8 <sendKeyboardToken(KeyboardToken)>:
c00096a8:	55                   	push   ebp
c00096a9:	89 e5                	mov    ebp,esp
c00096ab:	83 ec 18             	sub    esp,0x18
c00096ae:	e8 6f 5e 00 00       	call   c000f522 <KeUserIOReceived()>
c00096b3:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096b9:	0f b7 c0             	movzx  eax,ax
c00096bc:	83 f2 01             	xor    edx,0x1
c00096bf:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096c5:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096ca:	85 c0                	test   eax,eax
c00096cc:	74 24                	je     c00096f2 <sendKeyboardToken(KeyboardToken)+0x4a>
c00096ce:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c00096d4:	83 ec 04             	sub    esp,0x4
c00096d7:	68 40 93 02 c0       	push   0xc0029340
c00096dc:	83 ec 08             	sub    esp,0x8
c00096df:	89 e0                	mov    eax,esp
c00096e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00096e4:	89 08                	mov    DWORD PTR [eax],ecx
c00096e6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00096e9:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c00096ed:	ff d2                	call   edx
c00096ef:	83 c4 10             	add    esp,0x10
c00096f2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00096f6:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00096f9:	0f b6 c0             	movzx  eax,al
c00096fc:	85 c0                	test   eax,eax
c00096fe:	0f 84 da 00 00 00    	je     c00097de <sendKeyboardToken(KeyboardToken)+0x136>
c0009704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009707:	0f b7 c0             	movzx  eax,ax
c000970a:	3d 18 03 00 00       	cmp    eax,0x318
c000970f:	75 06                	jne    c0009717 <sendKeyboardToken(KeyboardToken)+0x6f>
c0009711:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000971a:	0f b7 c0             	movzx  eax,ax
c000971d:	3d 19 03 00 00       	cmp    eax,0x319
c0009722:	75 06                	jne    c000972a <sendKeyboardToken(KeyboardToken)+0x82>
c0009724:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000972a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000972d:	0f b7 c0             	movzx  eax,ax
c0009730:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009735:	75 06                	jne    c000973d <sendKeyboardToken(KeyboardToken)+0x95>
c0009737:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000973d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009740:	0f b7 c0             	movzx  eax,ax
c0009743:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009748:	75 06                	jne    c0009750 <sendKeyboardToken(KeyboardToken)+0xa8>
c000974a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0009750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009753:	0f b7 c0             	movzx  eax,ax
c0009756:	3d 1c 03 00 00       	cmp    eax,0x31c
c000975b:	75 06                	jne    c0009763 <sendKeyboardToken(KeyboardToken)+0xbb>
c000975d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0009763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009766:	0f b7 c0             	movzx  eax,ax
c0009769:	3d 1d 03 00 00       	cmp    eax,0x31d
c000976e:	75 06                	jne    c0009776 <sendKeyboardToken(KeyboardToken)+0xce>
c0009770:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009779:	0f b7 c0             	movzx  eax,ax
c000977c:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009781:	75 06                	jne    c0009789 <sendKeyboardToken(KeyboardToken)+0xe1>
c0009783:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000978c:	0f b7 c0             	movzx  eax,ax
c000978f:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009794:	75 06                	jne    c000979c <sendKeyboardToken(KeyboardToken)+0xf4>
c0009796:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000979c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979f:	0f b7 c0             	movzx  eax,ax
c00097a2:	3d 20 03 00 00       	cmp    eax,0x320
c00097a7:	75 06                	jne    c00097af <sendKeyboardToken(KeyboardToken)+0x107>
c00097a9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b2:	0f b7 c0             	movzx  eax,ax
c00097b5:	3d 21 03 00 00       	cmp    eax,0x321
c00097ba:	75 06                	jne    c00097c2 <sendKeyboardToken(KeyboardToken)+0x11a>
c00097bc:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	0f b7 c0             	movzx  eax,ax
c00097c8:	3d 22 03 00 00       	cmp    eax,0x322
c00097cd:	0f 85 f1 00 00 00    	jne    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097d3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097d9:	e9 e6 00 00 00       	jmp    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00097de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e1:	0f b7 c0             	movzx  eax,ax
c00097e4:	3d 18 03 00 00       	cmp    eax,0x318
c00097e9:	75 0a                	jne    c00097f5 <sendKeyboardToken(KeyboardToken)+0x14d>
c00097eb:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00097f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097f8:	0f b7 c0             	movzx  eax,ax
c00097fb:	3d 19 03 00 00       	cmp    eax,0x319
c0009800:	75 0a                	jne    c000980c <sendKeyboardToken(KeyboardToken)+0x164>
c0009802:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009808:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000980c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000980f:	0f b7 c0             	movzx  eax,ax
c0009812:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009817:	75 0a                	jne    c0009823 <sendKeyboardToken(KeyboardToken)+0x17b>
c0009819:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000981f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009826:	0f b7 c0             	movzx  eax,ax
c0009829:	3d 1b 03 00 00       	cmp    eax,0x31b
c000982e:	75 0a                	jne    c000983a <sendKeyboardToken(KeyboardToken)+0x192>
c0009830:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009836:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000983a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000983d:	0f b7 c0             	movzx  eax,ax
c0009840:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009845:	75 0a                	jne    c0009851 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009847:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000984d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009854:	0f b7 c0             	movzx  eax,ax
c0009857:	3d 1d 03 00 00       	cmp    eax,0x31d
c000985c:	75 0a                	jne    c0009868 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000985e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0009864:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000986b:	0f b7 c0             	movzx  eax,ax
c000986e:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009873:	75 0a                	jne    c000987f <sendKeyboardToken(KeyboardToken)+0x1d7>
c0009875:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000987b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000987f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009882:	0f b7 c0             	movzx  eax,ax
c0009885:	3d 1f 03 00 00       	cmp    eax,0x31f
c000988a:	75 0a                	jne    c0009896 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000988c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0009892:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009899:	0f b7 c0             	movzx  eax,ax
c000989c:	3d 20 03 00 00       	cmp    eax,0x320
c00098a1:	75 0a                	jne    c00098ad <sendKeyboardToken(KeyboardToken)+0x205>
c00098a3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098a9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b0:	0f b7 c0             	movzx  eax,ax
c00098b3:	3d 21 03 00 00       	cmp    eax,0x321
c00098b8:	75 0a                	jne    c00098c4 <sendKeyboardToken(KeyboardToken)+0x21c>
c00098ba:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098c7:	0f b7 c0             	movzx  eax,ax
c00098ca:	3d 00 02 00 00       	cmp    eax,0x200
c00098cf:	75 2f                	jne    c0009900 <sendKeyboardToken(KeyboardToken)+0x258>
c00098d1:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098d6:	83 f0 01             	xor    eax,0x1
c00098d9:	0f b6 c0             	movzx  eax,al
c00098dc:	85 c0                	test   eax,eax
c00098de:	74 20                	je     c0009900 <sendKeyboardToken(KeyboardToken)+0x258>
c00098e0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098e5:	6a 01                	push   0x1
c00098e7:	6a 00                	push   0x0
c00098e9:	68 08 95 00 c0       	push   0xc0009508
c00098ee:	50                   	push   eax
c00098ef:	e8 70 b8 00 00       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c00098f4:	83 c4 10             	add    esp,0x10
c00098f7:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c00098fe:	eb 3a                	jmp    c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c0009900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009903:	0f b7 c0             	movzx  eax,ax
c0009906:	3d 01 02 00 00       	cmp    eax,0x201
c000990b:	75 2d                	jne    c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c000990d:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c0009912:	83 f0 01             	xor    eax,0x1
c0009915:	0f b6 c0             	movzx  eax,al
c0009918:	85 c0                	test   eax,eax
c000991a:	74 1e                	je     c000993a <sendKeyboardToken(KeyboardToken)+0x292>
c000991c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0009921:	6a 01                	push   0x1
c0009923:	6a 00                	push   0x0
c0009925:	68 6d 95 00 c0       	push   0xc000956d
c000992a:	50                   	push   eax
c000992b:	e8 34 b8 00 00       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c0009930:	83 c4 10             	add    esp,0x10
c0009933:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c000993a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000993d:	0f b7 c0             	movzx  eax,ax
c0009940:	3d 25 03 00 00       	cmp    eax,0x325
c0009945:	75 06                	jne    c000994d <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009947:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000994d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009950:	0f b7 c0             	movzx  eax,ax
c0009953:	3d 24 03 00 00       	cmp    eax,0x324
c0009958:	75 06                	jne    c0009960 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000995a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009963:	0f b7 c0             	movzx  eax,ax
c0009966:	3d 23 03 00 00       	cmp    eax,0x323
c000996b:	75 06                	jne    c0009973 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000996d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0009973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009976:	0f b7 c0             	movzx  eax,ax
c0009979:	3d 26 03 00 00       	cmp    eax,0x326
c000997e:	75 06                	jne    c0009986 <sendKeyboardToken(KeyboardToken)+0x2de>
c0009980:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0009986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009989:	0f b7 c0             	movzx  eax,ax
c000998c:	3d 27 03 00 00       	cmp    eax,0x327
c0009991:	75 06                	jne    c0009999 <sendKeyboardToken(KeyboardToken)+0x2f1>
c0009993:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0009999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000999c:	0f b7 c0             	movzx  eax,ax
c000999f:	3d 22 03 00 00       	cmp    eax,0x322
c00099a4:	75 06                	jne    c00099ac <sendKeyboardToken(KeyboardToken)+0x304>
c00099a6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099ac:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099b0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099b3:	83 f0 01             	xor    eax,0x1
c00099b6:	0f b6 c0             	movzx  eax,al
c00099b9:	85 c0                	test   eax,eax
c00099bb:	74 7c                	je     c0009a39 <sendKeyboardToken(KeyboardToken)+0x391>
c00099bd:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099c2:	0f b6 c0             	movzx  eax,al
c00099c5:	85 c0                	test   eax,eax
c00099c7:	74 43                	je     c0009a0c <sendKeyboardToken(KeyboardToken)+0x364>
c00099c9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099cd:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099d1:	85 c0                	test   eax,eax
c00099d3:	74 2b                	je     c0009a00 <sendKeyboardToken(KeyboardToken)+0x358>
c00099d5:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099db:	89 d0                	mov    eax,edx
c00099dd:	c1 e0 02             	shl    eax,0x2
c00099e0:	01 d0                	add    eax,edx
c00099e2:	d1 e0                	shl    eax,1
c00099e4:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099ec:	0f b7 c0             	movzx  eax,ax
c00099ef:	8d 50 d0             	lea    edx,[eax-0x30]
c00099f2:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c00099f7:	01 d0                	add    eax,edx
c00099f9:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099fe:	eb 71                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a00:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a0a:	eb 65                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a0c:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a11:	85 c0                	test   eax,eax
c0009a13:	74 18                	je     c0009a2d <sendKeyboardToken(KeyboardToken)+0x385>
c0009a15:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a1a:	0f b6 c0             	movzx  eax,al
c0009a1d:	83 ec 0c             	sub    esp,0xc
c0009a20:	50                   	push   eax
c0009a21:	e8 ac fb ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a2d:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a37:	eb 38                	jmp    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a3c:	0f b7 c0             	movzx  eax,ax
c0009a3f:	3d 01 01 00 00       	cmp    eax,0x101
c0009a44:	75 2b                	jne    c0009a71 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a46:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a4b:	85 c0                	test   eax,eax
c0009a4d:	74 18                	je     c0009a67 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a4f:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a54:	0f b6 c0             	movzx  eax,al
c0009a57:	83 ec 0c             	sub    esp,0xc
c0009a5a:	50                   	push   eax
c0009a5b:	e8 72 fb ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a67:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a71:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a74:	83 f0 01             	xor    eax,0x1
c0009a77:	0f b6 c0             	movzx  eax,al
c0009a7a:	85 c0                	test   eax,eax
c0009a7c:	74 5a                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a7e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a81:	83 f0 01             	xor    eax,0x1
c0009a84:	0f b6 c0             	movzx  eax,al
c0009a87:	85 c0                	test   eax,eax
c0009a89:	74 4d                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a8b:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a90:	83 f0 01             	xor    eax,0x1
c0009a93:	0f b6 c0             	movzx  eax,al
c0009a96:	85 c0                	test   eax,eax
c0009a98:	74 3e                	je     c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a9d:	0f b7 c0             	movzx  eax,ax
c0009aa0:	83 f8 1f             	cmp    eax,0x1f
c0009aa3:	76 0b                	jbe    c0009ab0 <sendKeyboardToken(KeyboardToken)+0x408>
c0009aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa8:	0f b7 c0             	movzx  eax,ax
c0009aab:	83 f8 7e             	cmp    eax,0x7e
c0009aae:	76 16                	jbe    c0009ac6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ab3:	0f b7 c0             	movzx  eax,ax
c0009ab6:	83 f8 0a             	cmp    eax,0xa
c0009ab9:	74 0b                	je     c0009ac6 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009abe:	0f b7 c0             	movzx  eax,ax
c0009ac1:	83 f8 08             	cmp    eax,0x8
c0009ac4:	75 12                	jne    c0009ad8 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac9:	0f b6 c0             	movzx  eax,al
c0009acc:	83 ec 0c             	sub    esp,0xc
c0009acf:	50                   	push   eax
c0009ad0:	e8 fd fa ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009ad5:	83 c4 10             	add    esp,0x10
c0009ad8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009adb:	83 f0 01             	xor    eax,0x1
c0009ade:	0f b6 c0             	movzx  eax,al
c0009ae1:	85 c0                	test   eax,eax
c0009ae3:	74 5d                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009ae5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009ae8:	83 f0 01             	xor    eax,0x1
c0009aeb:	0f b6 c0             	movzx  eax,al
c0009aee:	85 c0                	test   eax,eax
c0009af0:	74 50                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009af2:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009af7:	0f b6 c0             	movzx  eax,al
c0009afa:	85 c0                	test   eax,eax
c0009afc:	74 44                	je     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b01:	0f b7 c0             	movzx  eax,ax
c0009b04:	83 f8 3f             	cmp    eax,0x3f
c0009b07:	76 39                	jbe    c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0c:	0f b7 c0             	movzx  eax,ax
c0009b0f:	83 f8 7f             	cmp    eax,0x7f
c0009b12:	77 2e                	ja     c0009b42 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b17:	88 c2                	mov    dl,al
c0009b19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b1c:	0f b7 c0             	movzx  eax,ax
c0009b1f:	83 f8 5f             	cmp    eax,0x5f
c0009b22:	76 04                	jbe    c0009b28 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b24:	b0 20                	mov    al,0x20
c0009b26:	eb 02                	jmp    c0009b2a <sendKeyboardToken(KeyboardToken)+0x482>
c0009b28:	b0 00                	mov    al,0x0
c0009b2a:	89 d1                	mov    ecx,edx
c0009b2c:	29 c1                	sub    ecx,eax
c0009b2e:	89 c8                	mov    eax,ecx
c0009b30:	83 e8 40             	sub    eax,0x40
c0009b33:	0f b6 c0             	movzx  eax,al
c0009b36:	83 ec 0c             	sub    esp,0xc
c0009b39:	50                   	push   eax
c0009b3a:	e8 93 fa ff ff       	call   c00095d2 <sendKeyToTerminal(unsigned char)>
c0009b3f:	83 c4 10             	add    esp,0x10
c0009b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b45:	0f b7 c0             	movzx  eax,ax
c0009b48:	3d 00 03 00 00       	cmp    eax,0x300
c0009b4d:	75 12                	jne    c0009b61 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b52:	83 f0 01             	xor    eax,0x1
c0009b55:	0f b6 c0             	movzx  eax,al
c0009b58:	85 c0                	test   eax,eax
c0009b5a:	74 05                	je     c0009b61 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b5c:	e8 82 72 00 00       	call   c0010de3 <doTerminalCycle()>
c0009b61:	90                   	nop
c0009b62:	c9                   	leave  
c0009b63:	c3                   	ret    

c0009b64 <clearInternalKeybuffer(VgaText*)>:
c0009b64:	55                   	push   ebp
c0009b65:	89 e5                	mov    ebp,esp
c0009b67:	83 ec 08             	sub    esp,0x8
c0009b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b6d:	05 02 01 00 00       	add    eax,0x102
c0009b72:	83 ec 0c             	sub    esp,0xc
c0009b75:	50                   	push   eax
c0009b76:	e8 05 6a ff ff       	call   c0000580 <strlen>
c0009b7b:	83 c4 10             	add    esp,0x10
c0009b7e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b81:	81 c2 02 01 00 00    	add    edx,0x102
c0009b87:	83 ec 04             	sub    esp,0x4
c0009b8a:	50                   	push   eax
c0009b8b:	6a 00                	push   0x0
c0009b8d:	52                   	push   edx
c0009b8e:	e8 5d 69 ff ff       	call   c00004f0 <memset>
c0009b93:	83 c4 10             	add    esp,0x10
c0009b96:	90                   	nop
c0009b97:	c9                   	leave  
c0009b98:	c3                   	ret    

c0009b99 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009b99:	55                   	push   ebp
c0009b9a:	89 e5                	mov    ebp,esp
c0009b9c:	83 ec 18             	sub    esp,0x18
c0009b9f:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009ba4:	85 c0                	test   eax,eax
c0009ba6:	74 2a                	je     c0009bd2 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009ba8:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bae:	8b 15 28 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029328
c0009bb4:	83 ec 04             	sub    esp,0x4
c0009bb7:	68 40 93 02 c0       	push   0xc0029340
c0009bbc:	83 ec 08             	sub    esp,0x8
c0009bbf:	89 e0                	mov    eax,esp
c0009bc1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0009bc4:	89 08                	mov    DWORD PTR [eax],ecx
c0009bc6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009bc9:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c0009bcd:	ff d2                	call   edx
c0009bcf:	83 c4 10             	add    esp,0x10
c0009bd2:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009bd7:	0f b6 c0             	movzx  eax,al
c0009bda:	85 c0                	test   eax,eax
c0009bdc:	74 07                	je     c0009be5 <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009bde:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009be5:	fb                   	sti    
c0009be6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bf1:	0f 84 2a 01 00 00    	je     c0009d21 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bfa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c00:	0f be c0             	movsx  eax,al
c0009c03:	85 c0                	test   eax,eax
c0009c05:	75 27                	jne    c0009c2e <readKeyboard(VgaText*, char*, unsigned long)+0x95>
c0009c07:	fa                   	cli    
c0009c08:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c0d:	83 c0 01             	add    eax,0x1
c0009c10:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c15:	e8 96 b7 00 00       	call   c00153b0 <schedule()>
c0009c1a:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0009c22:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c27:	85 c0                	test   eax,eax
c0009c29:	75 cc                	jne    c0009bf7 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c2b:	fb                   	sti    
c0009c2c:	eb c9                	jmp    c0009bf7 <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c2e:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c33:	0f b6 c0             	movzx  eax,al
c0009c36:	85 c0                	test   eax,eax
c0009c38:	74 0a                	je     c0009c44 <readKeyboard(VgaText*, char*, unsigned long)+0xab>
c0009c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c3d:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c47:	8d 50 01             	lea    edx,[eax+0x1]
c0009c4a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c50:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c56:	88 10                	mov    BYTE PTR [eax],dl
c0009c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c5b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c61:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c64:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c68:	83 f8 03             	cmp    eax,0x3
c0009c6b:	75 1e                	jne    c0009c8b <readKeyboard(VgaText*, char*, unsigned long)+0xf2>
c0009c6d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c77:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c7d:	83 ec 08             	sub    esp,0x8
c0009c80:	6a 02                	push   0x2
c0009c82:	50                   	push   eax
c0009c83:	e8 b0 60 00 00       	call   c000fd38 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c88:	83 c4 10             	add    esp,0x10
c0009c8b:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8f:	83 f8 1c             	cmp    eax,0x1c
c0009c92:	75 1e                	jne    c0009cb2 <readKeyboard(VgaText*, char*, unsigned long)+0x119>
c0009c94:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c99:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9e:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca4:	83 ec 08             	sub    esp,0x8
c0009ca7:	6a 09                	push   0x9
c0009ca9:	50                   	push   eax
c0009caa:	e8 89 60 00 00       	call   c000fd38 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009caf:	83 c4 10             	add    esp,0x10
c0009cb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cb5:	05 02 01 00 00       	add    eax,0x102
c0009cba:	83 ec 0c             	sub    esp,0xc
c0009cbd:	50                   	push   eax
c0009cbe:	e8 bd 68 ff ff       	call   c0000580 <strlen>
c0009cc3:	83 c4 10             	add    esp,0x10
c0009cc6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cc9:	81 c2 02 01 00 00    	add    edx,0x102
c0009ccf:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cd2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd5:	81 c2 02 01 00 00    	add    edx,0x102
c0009cdb:	83 ec 04             	sub    esp,0x4
c0009cde:	50                   	push   eax
c0009cdf:	51                   	push   ecx
c0009ce0:	52                   	push   edx
c0009ce1:	e8 ea 66 ff ff       	call   c00003d0 <memmove>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009ced:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009cf1:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cf5:	83 f8 0a             	cmp    eax,0xa
c0009cf8:	74 22                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009cfa:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cfe:	83 f8 03             	cmp    eax,0x3
c0009d01:	74 19                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009d03:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d07:	83 f8 1c             	cmp    eax,0x1c
c0009d0a:	74 10                	je     c0009d1c <readKeyboard(VgaText*, char*, unsigned long)+0x183>
c0009d0c:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d11:	0f b6 c0             	movzx  eax,al
c0009d14:	85 c0                	test   eax,eax
c0009d16:	0f 84 d1 fe ff ff    	je     c0009bed <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d1f:	eb 03                	jmp    c0009d24 <readKeyboard(VgaText*, char*, unsigned long)+0x18b>
c0009d21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d24:	c9                   	leave  
c0009d25:	c3                   	ret    

c0009d26 <Keyboard::Keyboard(char const*)>:
c0009d26:	83 ec 0c             	sub    esp,0xc
c0009d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d2d:	83 ec 08             	sub    esp,0x8
c0009d30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d34:	50                   	push   eax
c0009d35:	e8 6e f4 ff ff       	call   c00091a8 <Device::Device(char const*)>
c0009d3a:	83 c4 10             	add    esp,0x10
c0009d3d:	ba 24 17 02 c0       	mov    edx,0xc0021724
c0009d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d46:	89 10                	mov    DWORD PTR [eax],edx
c0009d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d4c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d56:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d5d:	90                   	nop
c0009d5e:	83 c4 0c             	add    esp,0xc
c0009d61:	c3                   	ret    

c0009d62 <Keyboard::~Keyboard()>:
c0009d62:	83 ec 0c             	sub    esp,0xc
c0009d65:	ba 24 17 02 c0       	mov    edx,0xc0021724
c0009d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d6e:	89 10                	mov    DWORD PTR [eax],edx
c0009d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d74:	83 ec 0c             	sub    esp,0xc
c0009d77:	50                   	push   eax
c0009d78:	e8 cb f1 ff ff       	call   c0008f48 <Device::~Device()>
c0009d7d:	83 c4 10             	add    esp,0x10
c0009d80:	90                   	nop
c0009d81:	83 c4 0c             	add    esp,0xc
c0009d84:	c3                   	ret    
c0009d85:	90                   	nop

c0009d86 <Keyboard::~Keyboard()>:
c0009d86:	83 ec 0c             	sub    esp,0xc
c0009d89:	83 ec 0c             	sub    esp,0xc
c0009d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d90:	e8 cd ff ff ff       	call   c0009d62 <Keyboard::~Keyboard()>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	83 ec 08             	sub    esp,0x8
c0009d9b:	68 5c 01 00 00       	push   0x15c
c0009da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da4:	e8 b2 28 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	83 c4 0c             	add    esp,0xc
c0009daf:	c3                   	ret    

c0009db0 <LogicalDisk::close(int, int, void*)>:
c0009db0:	83 c8 ff             	or     eax,0xffffffff
c0009db3:	c3                   	ret    

c0009db4 <LogicalDisk::~LogicalDisk()>:
c0009db4:	83 ec 0c             	sub    esp,0xc
c0009db7:	ba 9c 17 02 c0       	mov    edx,0xc002179c
c0009dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc0:	89 10                	mov    DWORD PTR [eax],edx
c0009dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dc6:	83 ec 0c             	sub    esp,0xc
c0009dc9:	50                   	push   eax
c0009dca:	e8 79 f1 ff ff       	call   c0008f48 <Device::~Device()>
c0009dcf:	83 c4 10             	add    esp,0x10
c0009dd2:	90                   	nop
c0009dd3:	83 c4 0c             	add    esp,0xc
c0009dd6:	c3                   	ret    
c0009dd7:	90                   	nop

c0009dd8 <LogicalDisk::~LogicalDisk()>:
c0009dd8:	83 ec 0c             	sub    esp,0xc
c0009ddb:	83 ec 0c             	sub    esp,0xc
c0009dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009de2:	e8 cd ff ff ff       	call   c0009db4 <LogicalDisk::~LogicalDisk()>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	83 ec 08             	sub    esp,0x8
c0009ded:	68 78 01 00 00       	push   0x178
c0009df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009df6:	e8 60 28 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	83 c4 0c             	add    esp,0xc
c0009e01:	c3                   	ret    

c0009e02 <LogicalDisk::open(int, int, void*)>:
c0009e02:	83 ec 18             	sub    esp,0x18
c0009e05:	68 50 17 02 c0       	push   0xc0021750
c0009e0a:	e8 07 4e 00 00       	call   c000ec16 <KePanic(char const*)>
c0009e0f:	83 c8 ff             	or     eax,0xffffffff
c0009e12:	83 c4 1c             	add    esp,0x1c
c0009e15:	c3                   	ret    

c0009e16 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e16:	53                   	push   ebx
c0009e17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e23:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e29:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e2f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e35:	77 10                	ja     c0009e47 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e37:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e3d:	89 d3                	mov    ebx,edx
c0009e3f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e45:	72 05                	jb     c0009e4c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e47:	83 c8 ff             	or     eax,0xffffffff
c0009e4a:	89 c2                	mov    edx,eax
c0009e4c:	5b                   	pop    ebx
c0009e4d:	c3                   	ret    

c0009e4e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e4e:	56                   	push   esi
c0009e4f:	83 c8 ff             	or     eax,0xffffffff
c0009e52:	53                   	push   ebx
c0009e53:	89 c2                	mov    edx,eax
c0009e55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e59:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e61:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e67:	77 27                	ja     c0009e90 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e69:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e6f:	89 d8                	mov    eax,ebx
c0009e71:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e7c:	89 c2                	mov    edx,eax
c0009e7e:	73 10                	jae    c0009e90 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e80:	89 c8                	mov    eax,ecx
c0009e82:	89 da                	mov    edx,ebx
c0009e84:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e8a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e90:	5b                   	pop    ebx
c0009e91:	5e                   	pop    esi
c0009e92:	c3                   	ret    
c0009e93:	90                   	nop

c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009e94:	83 ec 1c             	sub    esp,0x1c
c0009e97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009e9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ea7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eab:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eba:	83 ec 08             	sub    esp,0x8
c0009ebd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec1:	50                   	push   eax
c0009ec2:	e8 e1 f2 ff ff       	call   c00091a8 <Device::Device(char const*)>
c0009ec7:	83 c4 10             	add    esp,0x10
c0009eca:	ba 9c 17 02 c0       	mov    edx,0xc002179c
c0009ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed3:	89 10                	mov    DWORD PTR [eax],edx
c0009ed5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eef:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efa:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f04:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f0c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f10:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f16:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f23:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f27:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f2d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f3b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f45:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f4f:	90                   	nop
c0009f50:	83 c4 1c             	add    esp,0x1c
c0009f53:	c3                   	ret    

c0009f54 <LogicalDisk::assignDriveLetter()>:
c0009f54:	55                   	push   ebp
c0009f55:	57                   	push   edi
c0009f56:	56                   	push   esi
c0009f57:	53                   	push   ebx
c0009f58:	83 ec 14             	sub    esp,0x14
c0009f5b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f5f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f65:	b0 41                	mov    al,0x41
c0009f67:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f6d:	84 d2                	test   dl,dl
c0009f6f:	75 02                	jne    c0009f73 <LogicalDisk::assignDriveLetter()+0x1f>
c0009f71:	b0 43                	mov    al,0x43
c0009f73:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f79:	0f b6 ca             	movzx  ecx,dl
c0009f7c:	0f be e8             	movsx  ebp,al
c0009f7f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f83:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f87:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f8d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f91:	3c 43                	cmp    al,0x43
c0009f93:	75 10                	jne    c0009fa5 <LogicalDisk::assignDriveLetter()+0x51>
c0009f95:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009f9c:	75 5a                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009f9e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fa3:	75 53                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fa5:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fa8:	ba 01 00 00 00       	mov    edx,0x1
c0009fad:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fb0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fb3:	d3 e2                	shl    edx,cl
c0009fb5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fb9:	89 d7                	mov    edi,edx
c0009fbb:	89 d6                	mov    esi,edx
c0009fbd:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fc1:	c1 ff 1f             	sar    edi,0x1f
c0009fc4:	21 f9                	and    ecx,edi
c0009fc6:	09 d1                	or     ecx,edx
c0009fc8:	75 2e                	jne    c0009ff8 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fce:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fd2:	09 f2                	or     edx,esi
c0009fd4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fd7:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009fe1:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fe7:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009fee:	09 fa                	or     edx,edi
c0009ff0:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c0009ff6:	eb 0d                	jmp    c000a005 <LogicalDisk::assignDriveLetter()+0xb1>
c0009ff8:	8d 50 01             	lea    edx,[eax+0x1]
c0009ffb:	45                   	inc    ebp
c0009ffc:	80 fa 5b             	cmp    dl,0x5b
c0009fff:	88 d0                	mov    al,dl
c000a001:	75 8e                	jne    c0009f91 <LogicalDisk::assignDriveLetter()+0x3d>
c000a003:	31 c0                	xor    eax,eax
c000a005:	83 c4 14             	add    esp,0x14
c000a008:	5b                   	pop    ebx
c000a009:	5e                   	pop    esi
c000a00a:	5f                   	pop    edi
c000a00b:	5d                   	pop    ebp
c000a00c:	c3                   	ret    
c000a00d:	90                   	nop

c000a00e <LogicalDisk::mount()>:
c000a00e:	56                   	push   esi
c000a00f:	53                   	push   ebx
c000a010:	53                   	push   ebx
c000a011:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a015:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a01b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a025:	85 db                	test   ebx,ebx
c000a027:	74 27                	je     c000a050 <LogicalDisk::mount()+0x42>
c000a029:	51                   	push   ecx
c000a02a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a031:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a033:	83 e8 41             	sub    eax,0x41
c000a036:	50                   	push   eax
c000a037:	56                   	push   esi
c000a038:	53                   	push   ebx
c000a039:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	84 c0                	test   al,al
c000a041:	74 08                	je     c000a04b <LogicalDisk::mount()+0x3d>
c000a043:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a049:	eb 07                	jmp    c000a052 <LogicalDisk::mount()+0x44>
c000a04b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a04e:	eb d5                	jmp    c000a025 <LogicalDisk::mount()+0x17>
c000a050:	31 c0                	xor    eax,eax
c000a052:	5a                   	pop    edx
c000a053:	5b                   	pop    ebx
c000a054:	5e                   	pop    esi
c000a055:	c3                   	ret    

c000a056 <LogicalDisk::unmount()>:
c000a056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a05a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a064:	c3                   	ret    
c000a065:	90                   	nop

c000a066 <LogicalDisk::eject()>:
c000a066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a06a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a070:	8b 10                	mov    edx,DWORD PTR [eax]
c000a072:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a076:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a079:	90                   	nop

c000a07a <LogicalDisk::unassignDriveLetter()>:
c000a07a:	57                   	push   edi
c000a07b:	56                   	push   esi
c000a07c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a080:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a087:	85 c9                	test   ecx,ecx
c000a089:	75 0f                	jne    c000a09a <LogicalDisk::unassignDriveLetter()+0x20>
c000a08b:	c7 44 24 0c 74 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021774
c000a093:	5e                   	pop    esi
c000a094:	5f                   	pop    edi
c000a095:	e9 7c 4b 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000a09a:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0a1:	83 e9 41             	sub    ecx,0x41
c000a0a4:	b8 01 00 00 00       	mov    eax,0x1
c000a0a9:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0b4:	d3 e0                	shl    eax,cl
c000a0b6:	89 c7                	mov    edi,eax
c000a0b8:	f7 d0                	not    eax
c000a0ba:	c1 ff 1f             	sar    edi,0x1f
c000a0bd:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0c3:	89 fe                	mov    esi,edi
c000a0c5:	f7 d6                	not    esi
c000a0c7:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0cd:	5e                   	pop    esi
c000a0ce:	5f                   	pop    edi
c000a0cf:	c3                   	ret    

c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0d0:	57                   	push   edi
c000a0d1:	56                   	push   esi
c000a0d2:	53                   	push   ebx
c000a0d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0e9:	77 41                	ja     c000a12c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0eb:	99                   	cdq    
c000a0ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0f2:	01 c8                	add    eax,ecx
c000a0f4:	11 da                	adc    edx,ebx
c000a0f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a0fc:	19 d7                	sbb    edi,edx
c000a0fe:	72 33                	jb     c000a133 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a100:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a106:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a10c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a110:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a114:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a11a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a124:	5b                   	pop    ebx
c000a125:	5e                   	pop    esi
c000a126:	5f                   	pop    edi
c000a127:	e9 cc 0a 00 00       	jmp    c000abf8 <VCache::read(unsigned long long, int, void*)>
c000a12c:	b8 05 00 00 00       	mov    eax,0x5
c000a131:	eb 05                	jmp    c000a138 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a133:	b8 07 00 00 00       	mov    eax,0x7
c000a138:	5b                   	pop    ebx
c000a139:	5e                   	pop    esi
c000a13a:	5f                   	pop    edi
c000a13b:	c3                   	ret    

c000a13c <LogicalDisk::write(unsigned long long, int, void*)>:
c000a13c:	57                   	push   edi
c000a13d:	56                   	push   esi
c000a13e:	53                   	push   ebx
c000a13f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a147:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a14b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a14f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a155:	77 41                	ja     c000a198 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a157:	99                   	cdq    
c000a158:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a15e:	01 c8                	add    eax,ecx
c000a160:	11 da                	adc    edx,ebx
c000a162:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a168:	19 d7                	sbb    edi,edx
c000a16a:	72 33                	jb     c000a19f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a16c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a172:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a178:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a17c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a180:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a186:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a18c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a190:	5b                   	pop    ebx
c000a191:	5e                   	pop    esi
c000a192:	5f                   	pop    edi
c000a193:	e9 70 09 00 00       	jmp    c000ab08 <VCache::write(unsigned long long, int, void*)>
c000a198:	b8 05 00 00 00       	mov    eax,0x5
c000a19d:	eb 05                	jmp    c000a1a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a19f:	b8 07 00 00 00       	mov    eax,0x7
c000a1a4:	5b                   	pop    ebx
c000a1a5:	5e                   	pop    esi
c000a1a6:	5f                   	pop    edi
c000a1a7:	c3                   	ret    

c000a1a8 <Mouse::Mouse(char const*)>:
c000a1a8:	83 ec 0c             	sub    esp,0xc
c000a1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1af:	83 ec 08             	sub    esp,0x8
c000a1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b6:	50                   	push   eax
c000a1b7:	e8 ec ef ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a1bc:	83 c4 10             	add    esp,0x10
c000a1bf:	ba c8 17 02 c0       	mov    edx,0xc00217c8
c000a1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c8:	89 10                	mov    DWORD PTR [eax],edx
c000a1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1d8:	90                   	nop
c000a1d9:	83 c4 0c             	add    esp,0xc
c000a1dc:	c3                   	ret    
c000a1dd:	90                   	nop
c000a1de:	66 90                	xchg   ax,ax

c000a1e0 <Mouse::~Mouse()>:
c000a1e0:	83 ec 0c             	sub    esp,0xc
c000a1e3:	ba c8 17 02 c0       	mov    edx,0xc00217c8
c000a1e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ec:	89 10                	mov    DWORD PTR [eax],edx
c000a1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f2:	83 ec 0c             	sub    esp,0xc
c000a1f5:	50                   	push   eax
c000a1f6:	e8 4d ed ff ff       	call   c0008f48 <Device::~Device()>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	90                   	nop
c000a1ff:	83 c4 0c             	add    esp,0xc
c000a202:	c3                   	ret    
c000a203:	90                   	nop

c000a204 <Mouse::~Mouse()>:
c000a204:	83 ec 0c             	sub    esp,0xc
c000a207:	83 ec 0c             	sub    esp,0xc
c000a20a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20e:	e8 cd ff ff ff       	call   c000a1e0 <Mouse::~Mouse()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	83 ec 08             	sub    esp,0x8
c000a219:	68 58 01 00 00       	push   0x158
c000a21e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a222:	e8 34 24 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	83 c4 0c             	add    esp,0xc
c000a22d:	c3                   	ret    

c000a22e <NIC::getMAC()>:
c000a22e:	31 c0                	xor    eax,eax
c000a230:	31 d2                	xor    edx,edx
c000a232:	c3                   	ret    
c000a233:	90                   	nop

c000a234 <NIC::write(int, unsigned char*, int*)>:
c000a234:	b8 01 00 00 00       	mov    eax,0x1
c000a239:	c3                   	ret    

c000a23a <NIC::NIC(char const*)>:
c000a23a:	83 ec 0c             	sub    esp,0xc
c000a23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a241:	83 ec 08             	sub    esp,0x8
c000a244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a248:	50                   	push   eax
c000a249:	e8 5a ef ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a24e:	83 c4 10             	add    esp,0x10
c000a251:	ba f4 17 02 c0       	mov    edx,0xc00217f4
c000a256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a25a:	89 10                	mov    DWORD PTR [eax],edx
c000a25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a260:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a26a:	90                   	nop
c000a26b:	83 c4 0c             	add    esp,0xc
c000a26e:	c3                   	ret    
c000a26f:	90                   	nop

c000a270 <NIC::~NIC()>:
c000a270:	83 ec 0c             	sub    esp,0xc
c000a273:	ba f4 17 02 c0       	mov    edx,0xc00217f4
c000a278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a27c:	89 10                	mov    DWORD PTR [eax],edx
c000a27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a282:	83 ec 0c             	sub    esp,0xc
c000a285:	50                   	push   eax
c000a286:	e8 bd ec ff ff       	call   c0008f48 <Device::~Device()>
c000a28b:	83 c4 10             	add    esp,0x10
c000a28e:	90                   	nop
c000a28f:	83 c4 0c             	add    esp,0xc
c000a292:	c3                   	ret    
c000a293:	90                   	nop

c000a294 <NIC::~NIC()>:
c000a294:	83 ec 0c             	sub    esp,0xc
c000a297:	83 ec 0c             	sub    esp,0xc
c000a29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a29e:	e8 cd ff ff ff       	call   c000a270 <NIC::~NIC()>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	83 ec 08             	sub    esp,0x8
c000a2a9:	68 58 01 00 00       	push   0x158
c000a2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b2:	e8 a4 23 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	83 c4 0c             	add    esp,0xc
c000a2bd:	c3                   	ret    

c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2be:	55                   	push   ebp
c000a2bf:	57                   	push   edi
c000a2c0:	56                   	push   esi
c000a2c1:	53                   	push   ebx
c000a2c2:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2c8:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000a2cf:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000a2d6:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000a2dd:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000a2e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2e8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2ec:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2f3:	e8 ac ef ff ff       	call   c00092a4 <Device::getName()>
c000a2f8:	5a                   	pop    edx
c000a2f9:	59                   	pop    ecx
c000a2fa:	50                   	push   eax
c000a2fb:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a2ff:	55                   	push   ebp
c000a300:	e8 4b 63 ff ff       	call   c0000650 <strcpy>
c000a305:	5b                   	pop    ebx
c000a306:	58                   	pop    eax
c000a307:	68 20 18 02 c0       	push   0xc0021820
c000a30c:	55                   	push   ebp
c000a30d:	e8 5e 65 ff ff       	call   c0000870 <strcat>
c000a312:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a319:	e8 b2 45 00 00       	call   c000e8d0 <malloc>
c000a31e:	83 c4 0c             	add    esp,0xc
c000a321:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a325:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a329:	89 c3                	mov    ebx,eax
c000a32b:	57                   	push   edi
c000a32c:	56                   	push   esi
c000a32d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a334:	55                   	push   ebp
c000a335:	50                   	push   eax
c000a336:	e8 59 fb ff ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a33b:	83 c4 14             	add    esp,0x14
c000a33e:	53                   	push   ebx
c000a33f:	e8 10 fc ff ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c000a344:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a347:	e8 c2 fc ff ff       	call   c000a00e <LogicalDisk::mount()>
c000a34c:	58                   	pop    eax
c000a34d:	5a                   	pop    edx
c000a34e:	53                   	push   ebx
c000a34f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a356:	e8 eb ec ff ff       	call   c0009046 <Device::addChild(Device*)>
c000a35b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a361:	5b                   	pop    ebx
c000a362:	5e                   	pop    esi
c000a363:	5f                   	pop    edi
c000a364:	5d                   	pop    ebp
c000a365:	c3                   	ret    

c000a366 <createPartitionsForDisk(PhysicalDisk*)>:
c000a366:	55                   	push   ebp
c000a367:	57                   	push   edi
c000a368:	56                   	push   esi
c000a369:	53                   	push   ebx
c000a36a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a370:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a377:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a37d:	3d 00 02 00 00       	cmp    eax,0x200
c000a382:	74 27                	je     c000a3ab <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a384:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a38a:	83 ec 10             	sub    esp,0x10
c000a38d:	99                   	cdq    
c000a38e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a394:	52                   	push   edx
c000a395:	50                   	push   eax
c000a396:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a39a:	c1 e6 0a             	shl    esi,0xa
c000a39d:	89 fd                	mov    ebp,edi
c000a39f:	55                   	push   ebp
c000a3a0:	56                   	push   esi
c000a3a1:	e8 ce 56 01 00       	call   c001fa74 <__udivdi3>
c000a3a6:	e9 b9 00 00 00       	jmp    c000a464 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3b0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3b4:	56                   	push   esi
c000a3b5:	6a 01                	push   0x1
c000a3b7:	6a 00                	push   0x0
c000a3b9:	6a 00                	push   0x0
c000a3bb:	53                   	push   ebx
c000a3bc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3bf:	83 c4 20             	add    esp,0x20
c000a3c2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3ca:	75 0a                	jne    c000a3d6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3cc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3d4:	74 2c                	je     c000a402 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3d6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3dc:	83 ec 10             	sub    esp,0x10
c000a3df:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3e5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3eb:	89 f7                	mov    edi,esi
c000a3ed:	c1 ff 1f             	sar    edi,0x1f
c000a3f0:	57                   	push   edi
c000a3f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3f5:	56                   	push   esi
c000a3f6:	c1 e0 0a             	shl    eax,0xa
c000a3f9:	52                   	push   edx
c000a3fa:	50                   	push   eax
c000a3fb:	e8 74 56 01 00       	call   c001fa74 <__udivdi3>
c000a400:	eb 62                	jmp    c000a464 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a402:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a409:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a410:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a417:	89 cf                	mov    edi,ecx
c000a419:	83 e2 7f             	and    edx,0x7f
c000a41c:	83 e7 7f             	and    edi,0x7f
c000a41f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a422:	83 e0 7f             	and    eax,0x7f
c000a425:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a428:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a42f:	83 e0 7f             	and    eax,0x7f
c000a432:	01 d0                	add    eax,edx
c000a434:	84 c0                	test   al,al
c000a436:	89 c5                	mov    ebp,eax
c000a438:	74 41                	je     c000a47b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a43a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a440:	83 ec 10             	sub    esp,0x10
c000a443:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a449:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a44f:	89 f7                	mov    edi,esi
c000a451:	c1 ff 1f             	sar    edi,0x1f
c000a454:	57                   	push   edi
c000a455:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a459:	56                   	push   esi
c000a45a:	c1 e0 0a             	shl    eax,0xa
c000a45d:	52                   	push   edx
c000a45e:	50                   	push   eax
c000a45f:	e8 10 56 01 00       	call   c001fa74 <__udivdi3>
c000a464:	83 c4 14             	add    esp,0x14
c000a467:	52                   	push   edx
c000a468:	50                   	push   eax
c000a469:	6a 00                	push   0x0
c000a46b:	6a 00                	push   0x0
c000a46d:	53                   	push   ebx
c000a46e:	e8 4b fe ff ff       	call   c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a473:	83 c4 20             	add    esp,0x20
c000a476:	e9 73 01 00 00       	jmp    c000a5ee <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a47b:	89 f0                	mov    eax,esi
c000a47d:	31 c9                	xor    ecx,ecx
c000a47f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a486:	75 02                	jne    c000a48a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a488:	89 cd                	mov    ebp,ecx
c000a48a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a492:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a499:	83 c0 10             	add    eax,0x10
c000a49c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4a4:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000a4ab:	c1 e2 08             	shl    edx,0x8
c000a4ae:	c1 e6 10             	shl    esi,0x10
c000a4b1:	09 f2                	or     edx,esi
c000a4b3:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000a4ba:	09 f2                	or     edx,esi
c000a4bc:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4c3:	c1 e6 18             	shl    esi,0x18
c000a4c6:	09 f2                	or     edx,esi
c000a4c8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4cf:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4d3:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4da:	c1 e6 10             	shl    esi,0x10
c000a4dd:	c1 e2 08             	shl    edx,0x8
c000a4e0:	09 f2                	or     edx,esi
c000a4e2:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4e9:	09 f2                	or     edx,esi
c000a4eb:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4f2:	c1 e6 18             	shl    esi,0x18
c000a4f5:	09 f2                	or     edx,esi
c000a4f7:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a4fb:	41                   	inc    ecx
c000a4fc:	83 f9 04             	cmp    ecx,0x4
c000a4ff:	0f 85 7a ff ff ff    	jne    c000a47f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a509:	83 f0 01             	xor    eax,0x1
c000a50c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a510:	75 4f                	jne    c000a561 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a516:	83 f0 01             	xor    eax,0x1
c000a519:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a51d:	75 42                	jne    c000a561 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a51f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a525:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a52d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a533:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a53b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a541:	89 f7                	mov    edi,esi
c000a543:	c1 ff 1f             	sar    edi,0x1f
c000a546:	57                   	push   edi
c000a547:	56                   	push   esi
c000a548:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a54c:	52                   	push   edx
c000a54d:	c1 e0 0a             	shl    eax,0xa
c000a550:	50                   	push   eax
c000a551:	e8 1e 55 01 00       	call   c001fa74 <__udivdi3>
c000a556:	83 c4 10             	add    esp,0x10
c000a559:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a55d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a561:	89 e8                	mov    eax,ebp
c000a563:	0f b6 e8             	movzx  ebp,al
c000a566:	85 ed                	test   ebp,ebp
c000a568:	74 50                	je     c000a5ba <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a56a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a56e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a572:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a576:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a57a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a57e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a582:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a586:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a58a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a58e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a592:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a596:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a59a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a59e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5a2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5a6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5aa:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5ae:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5b2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5b6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5ba:	31 ed                	xor    ebp,ebp
c000a5bc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5c0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5c4:	89 f8                	mov    eax,edi
c000a5c6:	09 f0                	or     eax,esi
c000a5c8:	74 1e                	je     c000a5e8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5ca:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ce:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5d2:	89 d1                	mov    ecx,edx
c000a5d4:	09 c1                	or     ecx,eax
c000a5d6:	74 10                	je     c000a5e8 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5d8:	83 ec 0c             	sub    esp,0xc
c000a5db:	57                   	push   edi
c000a5dc:	56                   	push   esi
c000a5dd:	52                   	push   edx
c000a5de:	50                   	push   eax
c000a5df:	53                   	push   ebx
c000a5e0:	e8 d9 fc ff ff       	call   c000a2be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5e5:	83 c4 20             	add    esp,0x20
c000a5e8:	45                   	inc    ebp
c000a5e9:	83 fd 04             	cmp    ebp,0x4
c000a5ec:	75 ce                	jne    c000a5bc <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5ee:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a5f4:	5b                   	pop    ebx
c000a5f5:	5e                   	pop    esi
c000a5f6:	5f                   	pop    edi
c000a5f7:	5d                   	pop    ebp
c000a5f8:	c3                   	ret    
c000a5f9:	66 90                	xchg   ax,ax
c000a5fb:	90                   	nop

c000a5fc <Serial::Serial(char const*)>:
c000a5fc:	83 ec 0c             	sub    esp,0xc
c000a5ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a603:	83 ec 08             	sub    esp,0x8
c000a606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a60a:	50                   	push   eax
c000a60b:	e8 98 eb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	ba 34 18 02 c0       	mov    edx,0xc0021834
c000a618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61c:	89 10                	mov    DWORD PTR [eax],edx
c000a61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a622:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a62c:	90                   	nop
c000a62d:	83 c4 0c             	add    esp,0xc
c000a630:	c3                   	ret    
c000a631:	90                   	nop
c000a632:	66 90                	xchg   ax,ax

c000a634 <Serial::~Serial()>:
c000a634:	83 ec 0c             	sub    esp,0xc
c000a637:	ba 34 18 02 c0       	mov    edx,0xc0021834
c000a63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a640:	89 10                	mov    DWORD PTR [eax],edx
c000a642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a646:	83 ec 0c             	sub    esp,0xc
c000a649:	50                   	push   eax
c000a64a:	e8 f9 e8 ff ff       	call   c0008f48 <Device::~Device()>
c000a64f:	83 c4 10             	add    esp,0x10
c000a652:	90                   	nop
c000a653:	83 c4 0c             	add    esp,0xc
c000a656:	c3                   	ret    
c000a657:	90                   	nop

c000a658 <Serial::~Serial()>:
c000a658:	83 ec 0c             	sub    esp,0xc
c000a65b:	83 ec 0c             	sub    esp,0xc
c000a65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a662:	e8 cd ff ff ff       	call   c000a634 <Serial::~Serial()>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	83 ec 08             	sub    esp,0x8
c000a66d:	68 58 01 00 00       	push   0x158
c000a672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a676:	e8 e0 1f 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a67b:	83 c4 10             	add    esp,0x10
c000a67e:	83 c4 0c             	add    esp,0xc
c000a681:	c3                   	ret    
c000a682:	66 90                	xchg   ax,ax

c000a684 <Timer::Timer(char const*)>:
c000a684:	83 ec 0c             	sub    esp,0xc
c000a687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a68b:	83 ec 08             	sub    esp,0x8
c000a68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a692:	50                   	push   eax
c000a693:	e8 10 eb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c000a6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a4:	89 10                	mov    DWORD PTR [eax],edx
c000a6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6aa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6b4:	90                   	nop
c000a6b5:	83 c4 0c             	add    esp,0xc
c000a6b8:	c3                   	ret    
c000a6b9:	90                   	nop
c000a6ba:	66 90                	xchg   ax,ax

c000a6bc <Timer::~Timer()>:
c000a6bc:	83 ec 0c             	sub    esp,0xc
c000a6bf:	ba cc 18 02 c0       	mov    edx,0xc00218cc
c000a6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c8:	89 10                	mov    DWORD PTR [eax],edx
c000a6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ce:	83 ec 0c             	sub    esp,0xc
c000a6d1:	50                   	push   eax
c000a6d2:	e8 71 e8 ff ff       	call   c0008f48 <Device::~Device()>
c000a6d7:	83 c4 10             	add    esp,0x10
c000a6da:	90                   	nop
c000a6db:	83 c4 0c             	add    esp,0xc
c000a6de:	c3                   	ret    
c000a6df:	90                   	nop

c000a6e0 <Timer::~Timer()>:
c000a6e0:	83 ec 0c             	sub    esp,0xc
c000a6e3:	83 ec 0c             	sub    esp,0xc
c000a6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6ea:	e8 cd ff ff ff       	call   c000a6bc <Timer::~Timer()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	83 ec 08             	sub    esp,0x8
c000a6f5:	68 5c 01 00 00       	push   0x15c
c000a6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6fe:	e8 58 1f 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	83 c4 0c             	add    esp,0xc
c000a709:	c3                   	ret    

c000a70a <Timer::read()>:
c000a70a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a70e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a714:	c3                   	ret    

c000a715 <setupTimer(int)>:
c000a715:	53                   	push   ebx
c000a716:	83 ec 14             	sub    esp,0x14
c000a719:	68 5c 01 00 00       	push   0x15c
c000a71e:	e8 ad 41 00 00       	call   c000e8d0 <malloc>
c000a723:	89 04 24             	mov    DWORD PTR [esp],eax
c000a726:	89 c3                	mov    ebx,eax
c000a728:	e8 c7 4b 01 00       	call   c001f2f4 <PIT::PIT()>
c000a72d:	58                   	pop    eax
c000a72e:	5a                   	pop    edx
c000a72f:	53                   	push   ebx
c000a730:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a736:	e8 0b e9 ff ff       	call   c0009046 <Device::addChild(Device*)>
c000a73b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a73d:	6a 00                	push   0x0
c000a73f:	6a 00                	push   0x0
c000a741:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a745:	53                   	push   ebx
c000a746:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a749:	83 c4 28             	add    esp,0x28
c000a74c:	89 d8                	mov    eax,ebx
c000a74e:	5b                   	pop    ebx
c000a74f:	c3                   	ret    

c000a750 <timerHandler(unsigned int)>:
c000a750:	57                   	push   edi
c000a751:	56                   	push   esi
c000a752:	53                   	push   ebx
c000a753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a757:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a75d:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a764:	0f 84 4e 01 00 00    	je     c000a8b8 <timerHandler(unsigned int)+0x168>
c000a76a:	fa                   	cli    
c000a76b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a771:	83 ec 0c             	sub    esp,0xc
c000a774:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a779:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a77f:	e8 88 56 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a784:	83 c4 10             	add    esp,0x10
c000a787:	84 c0                	test   al,al
c000a789:	0f 85 a1 00 00 00    	jne    c000a830 <timerHandler(unsigned int)+0xe0>
c000a78f:	83 ec 0c             	sub    esp,0xc
c000a792:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a797:	e8 8c 56 01 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a79c:	83 c4 10             	add    esp,0x10
c000a79f:	89 c6                	mov    esi,eax
c000a7a1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7ac:	e8 77 56 01 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7b1:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7b8:	89 c3                	mov    ebx,eax
c000a7ba:	e8 71 56 01 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7bf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7c2:	83 c4 10             	add    esp,0x10
c000a7c5:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7cb:	77 23                	ja     c000a7f0 <timerHandler(unsigned int)+0xa0>
c000a7cd:	83 ec 0c             	sub    esp,0xc
c000a7d0:	53                   	push   ebx
c000a7d1:	e8 da ae 00 00       	call   c00156b0 <unblockTask(ThreadControlBlock*)>
c000a7d6:	83 c4 10             	add    esp,0x10
c000a7d9:	39 de                	cmp    esi,ebx
c000a7db:	75 27                	jne    c000a804 <timerHandler(unsigned int)+0xb4>
c000a7dd:	83 ec 0c             	sub    esp,0xc
c000a7e0:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7e5:	e8 3e 56 01 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7ea:	89 c6                	mov    esi,eax
c000a7ec:	eb 12                	jmp    c000a800 <timerHandler(unsigned int)+0xb0>
c000a7ee:	66 90                	xchg   ax,ax
c000a7f0:	50                   	push   eax
c000a7f1:	50                   	push   eax
c000a7f2:	53                   	push   ebx
c000a7f3:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f8:	e8 ef 56 01 00       	call   c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a800:	83 c4 10             	add    esp,0x10
c000a803:	90                   	nop
c000a804:	83 ec 0c             	sub    esp,0xc
c000a807:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a80c:	e8 fb 55 01 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a811:	83 c4 10             	add    esp,0x10
c000a814:	84 c0                	test   al,al
c000a816:	75 18                	jne    c000a830 <timerHandler(unsigned int)+0xe0>
c000a818:	83 ec 0c             	sub    esp,0xc
c000a81b:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a820:	e8 03 56 01 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a825:	83 c4 10             	add    esp,0x10
c000a828:	39 f0                	cmp    eax,esi
c000a82a:	0f 85 74 ff ff ff    	jne    c000a7a4 <timerHandler(unsigned int)+0x54>
c000a830:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a835:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a839:	74 41                	je     c000a87c <timerHandler(unsigned int)+0x12c>
c000a83b:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a842:	74 38                	je     c000a87c <timerHandler(unsigned int)+0x12c>
c000a844:	fa                   	cli    
c000a845:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a84b:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a851:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a856:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a85e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a861:	77 05                	ja     c000a868 <timerHandler(unsigned int)+0x118>
c000a863:	e8 48 ab 00 00       	call   c00153b0 <schedule()>
c000a868:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a86f:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a876:	75 04                	jne    c000a87c <timerHandler(unsigned int)+0x12c>
c000a878:	fb                   	sti    
c000a879:	8d 76 00             	lea    esi,[esi+0x0]
c000a87c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a881:	48                   	dec    eax
c000a882:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a887:	75 1b                	jne    c000a8a4 <timerHandler(unsigned int)+0x154>
c000a889:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a890:	74 12                	je     c000a8a4 <timerHandler(unsigned int)+0x154>
c000a892:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a89c:	e8 0f ab 00 00       	call   c00153b0 <schedule()>
c000a8a1:	8d 76 00             	lea    esi,[esi+0x0]
c000a8a4:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000a8ab:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000a8b2:	75 04                	jne    c000a8b8 <timerHandler(unsigned int)+0x168>
c000a8b4:	fb                   	sti    
c000a8b5:	8d 76 00             	lea    esi,[esi+0x0]
c000a8b8:	5b                   	pop    ebx
c000a8b9:	5e                   	pop    esi
c000a8ba:	5f                   	pop    edi
c000a8bb:	c3                   	ret    

c000a8bc <VCache::VCache(PhysicalDisk*)>:
c000a8bc:	53                   	push   ebx
c000a8bd:	83 ec 18             	sub    esp,0x18
c000a8c0:	ba fc 18 02 c0       	mov    edx,0xc00218fc
c000a8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c9:	89 10                	mov    DWORD PTR [eax],edx
c000a8cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8cf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8da:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8fe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a909:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a914:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a923:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a92a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a932:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a936:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a946:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a94d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a955:	83 ec 0c             	sub    esp,0xc
c000a958:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a95c:	e8 6f 3f 00 00       	call   c000e8d0 <malloc>
c000a961:	83 c4 10             	add    esp,0x10
c000a964:	89 c3                	mov    ebx,eax
c000a966:	83 ec 0c             	sub    esp,0xc
c000a969:	53                   	push   ebx
c000a96a:	e8 8d 42 00 00       	call   c000ebfc <Mutex::Mutex()>
c000a96f:	83 c4 10             	add    esp,0x10
c000a972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a976:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a97d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a981:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a988:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a98f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a993:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a99d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9a4:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9b4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9b7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9be:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9cc:	05 00 02 00 00       	add    eax,0x200
c000a9d1:	c1 e0 03             	shl    eax,0x3
c000a9d4:	83 ec 0c             	sub    esp,0xc
c000a9d7:	50                   	push   eax
c000a9d8:	e8 f3 3e 00 00       	call   c000e8d0 <malloc>
c000a9dd:	83 c4 10             	add    esp,0x10
c000a9e0:	89 c2                	mov    edx,eax
c000a9e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ed:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a9f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa00:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa06:	89 d0                	mov    eax,edx
c000aa08:	c1 e0 02             	shl    eax,0x2
c000aa0b:	01 d0                	add    eax,edx
c000aa0d:	c1 e0 04             	shl    eax,0x4
c000aa10:	83 ec 0c             	sub    esp,0xc
c000aa13:	50                   	push   eax
c000aa14:	e8 b7 3e 00 00       	call   c000e8d0 <malloc>
c000aa19:	83 c4 10             	add    esp,0x10
c000aa1c:	89 c2                	mov    edx,eax
c000aa1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa22:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa25:	90                   	nop
c000aa26:	83 c4 18             	add    esp,0x18
c000aa29:	5b                   	pop    ebx
c000aa2a:	c3                   	ret    
c000aa2b:	90                   	nop

c000aa2c <VCache::invalidateReadBuffer()>:
c000aa2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa30:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa36:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa3a:	c3                   	ret    
c000aa3b:	90                   	nop

c000aa3c <VCache::writeWriteBuffer()>:
c000aa3c:	53                   	push   ebx
c000aa3d:	83 ec 08             	sub    esp,0x8
c000aa40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa48:	74 1e                	je     c000aa68 <VCache::writeWriteBuffer()+0x2c>
c000aa4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa4d:	83 ec 0c             	sub    esp,0xc
c000aa50:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa52:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa5e:	50                   	push   eax
c000aa5f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa62:	83 c4 20             	add    esp,0x20
c000aa65:	8d 76 00             	lea    esi,[esi+0x0]
c000aa68:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa6f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa76:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa7a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa81:	83 c4 08             	add    esp,0x8
c000aa84:	5b                   	pop    ebx
c000aa85:	c3                   	ret    
c000aa86:	66 90                	xchg   ax,ax

c000aa88 <VCache::~VCache()>:
c000aa88:	83 ec 0c             	sub    esp,0xc
c000aa8b:	ba fc 18 02 c0       	mov    edx,0xc00218fc
c000aa90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa94:	89 10                	mov    DWORD PTR [eax],edx
c000aa96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa9d:	0f b6 c0             	movzx  eax,al
c000aaa0:	85 c0                	test   eax,eax
c000aaa2:	74 10                	je     c000aab4 <VCache::~VCache()+0x2c>
c000aaa4:	83 ec 0c             	sub    esp,0xc
c000aaa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaab:	e8 8c ff ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000aab0:	83 c4 10             	add    esp,0x10
c000aab3:	90                   	nop
c000aab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aabb:	83 ec 0c             	sub    esp,0xc
c000aabe:	50                   	push   eax
c000aabf:	e8 1c 3e 00 00       	call   c000e8e0 <free>
c000aac4:	83 c4 10             	add    esp,0x10
c000aac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aace:	83 ec 0c             	sub    esp,0xc
c000aad1:	50                   	push   eax
c000aad2:	e8 09 3e 00 00       	call   c000e8e0 <free>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	90                   	nop
c000aadb:	83 c4 0c             	add    esp,0xc
c000aade:	c3                   	ret    
c000aadf:	90                   	nop

c000aae0 <VCache::~VCache()>:
c000aae0:	83 ec 0c             	sub    esp,0xc
c000aae3:	83 ec 0c             	sub    esp,0xc
c000aae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaea:	e8 99 ff ff ff       	call   c000aa88 <VCache::~VCache()>
c000aaef:	83 c4 10             	add    esp,0x10
c000aaf2:	83 ec 08             	sub    esp,0x8
c000aaf5:	6a 44                	push   0x44
c000aaf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aafb:	e8 5b 1b 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	83 c4 0c             	add    esp,0xc
c000ab06:	c3                   	ret    
c000ab07:	90                   	nop

c000ab08 <VCache::write(unsigned long long, int, void*)>:
c000ab08:	55                   	push   ebp
c000ab09:	57                   	push   edi
c000ab0a:	56                   	push   esi
c000ab0b:	53                   	push   ebx
c000ab0c:	83 ec 1c             	sub    esp,0x1c
c000ab0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab13:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab17:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab1b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ab1f:	e8 f8 a5 00 00       	call   c001511c <KeDisablePreemption()>
c000ab24:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab28:	74 0e                	je     c000ab38 <VCache::write(unsigned long long, int, void*)+0x30>
c000ab2a:	83 ec 0c             	sub    esp,0xc
c000ab2d:	53                   	push   ebx
c000ab2e:	e8 f9 fe ff ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	66 90                	xchg   ax,ax
c000ab38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab3c:	74 5e                	je     c000ab9c <VCache::write(unsigned long long, int, void*)+0x94>
c000ab3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ab45:	99                   	cdq    
c000ab46:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab49:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab4c:	89 c1                	mov    ecx,eax
c000ab4e:	31 f1                	xor    ecx,esi
c000ab50:	89 d0                	mov    eax,edx
c000ab52:	31 f8                	xor    eax,edi
c000ab54:	09 c1                	or     ecx,eax
c000ab56:	75 38                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab58:	83 fd 01             	cmp    ebp,0x1
c000ab5b:	75 33                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x88>
c000ab5d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab60:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ab64:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab68:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab6e:	0f af f9             	imul   edi,ecx
c000ab71:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab79:	40                   	inc    eax
c000ab7a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab7d:	83 f8 50             	cmp    eax,0x50
c000ab80:	75 66                	jne    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab82:	83 ec 0c             	sub    esp,0xc
c000ab85:	53                   	push   ebx
c000ab86:	e8 b1 fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ab8b:	83 c4 10             	add    esp,0x10
c000ab8e:	eb 58                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000ab90:	83 ec 0c             	sub    esp,0xc
c000ab93:	53                   	push   ebx
c000ab94:	e8 a3 fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ab99:	83 c4 10             	add    esp,0x10
c000ab9c:	83 fd 4f             	cmp    ebp,0x4f
c000ab9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aba2:	7f 20                	jg     c000abc4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000aba4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000aba7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abab:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abae:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abb1:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000abb4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abb8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc0:	eb 26                	jmp    c000abe8 <VCache::write(unsigned long long, int, void*)+0xe0>
c000abc2:	66 90                	xchg   ax,ax
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abcd:	55                   	push   ebp
c000abce:	57                   	push   edi
c000abcf:	56                   	push   esi
c000abd0:	50                   	push   eax
c000abd1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abd4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abd8:	83 c4 20             	add    esp,0x20
c000abdb:	e8 64 a5 00 00       	call   c0015144 <KeRestorePreemption()>
c000abe0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abe4:	eb 0a                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe8>
c000abe6:	66 90                	xchg   ax,ax
c000abe8:	e8 57 a5 00 00       	call   c0015144 <KeRestorePreemption()>
c000abed:	31 c0                	xor    eax,eax
c000abef:	90                   	nop
c000abf0:	83 c4 1c             	add    esp,0x1c
c000abf3:	5b                   	pop    ebx
c000abf4:	5e                   	pop    esi
c000abf5:	5f                   	pop    edi
c000abf6:	5d                   	pop    ebp
c000abf7:	c3                   	ret    

c000abf8 <VCache::read(unsigned long long, int, void*)>:
c000abf8:	55                   	push   ebp
c000abf9:	57                   	push   edi
c000abfa:	56                   	push   esi
c000abfb:	53                   	push   ebx
c000abfc:	83 ec 1c             	sub    esp,0x1c
c000abff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ac07:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ac0b:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ac0f:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ac13:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac1a:	e8 fd a4 00 00       	call   c001511c <KeDisablePreemption()>
c000ac1f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac23:	74 0f                	je     c000ac34 <VCache::read(unsigned long long, int, void*)+0x3c>
c000ac25:	83 ec 0c             	sub    esp,0xc
c000ac28:	53                   	push   ebx
c000ac29:	e8 0e fe ff ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	8d 76 00             	lea    esi,[esi+0x0]
c000ac34:	83 fe 01             	cmp    esi,0x1
c000ac37:	0f 85 8b 00 00 00    	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac40:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac47:	75 7f                	jne    c000acc8 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac49:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ac4c:	89 d1                	mov    ecx,edx
c000ac4e:	f7 d9                	neg    ecx
c000ac50:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac54:	89 cf                	mov    edi,ecx
c000ac56:	23 0c 24             	and    ecx,DWORD PTR [esp]
c000ac59:	c1 ff 1f             	sar    edi,0x1f
c000ac5c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ac60:	89 ce                	mov    esi,ecx
c000ac62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac66:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c000ac6a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac6e:	89 cf                	mov    edi,ecx
c000ac70:	74 32                	je     c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac72:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac75:	75 2d                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac77:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c000ac7a:	75 28                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xac>
c000ac7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac7f:	89 ef                	mov    edi,ebp
c000ac81:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac87:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac8a:	8d 70 ff             	lea    esi,[eax-0x1]
c000ac8d:	23 34 24             	and    esi,DWORD PTR [esp]
c000ac90:	0f af f1             	imul   esi,ecx
c000ac93:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac98:	e8 a7 a4 00 00       	call   c0015144 <KeRestorePreemption()>
c000ac9d:	31 c0                	xor    eax,eax
c000ac9f:	eb 57                	jmp    c000acf8 <VCache::read(unsigned long long, int, void*)+0x100>
c000aca1:	8d 76 00             	lea    esi,[esi+0x0]
c000aca4:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000aca8:	83 ec 0c             	sub    esp,0xc
c000acab:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c000acae:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c000acb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000acb3:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acb6:	52                   	push   edx
c000acb7:	57                   	push   edi
c000acb8:	56                   	push   esi
c000acb9:	50                   	push   eax
c000acba:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acbd:	83 c4 20             	add    esp,0x20
c000acc0:	85 c0                	test   eax,eax
c000acc2:	75 34                	jne    c000acf8 <VCache::read(unsigned long long, int, void*)+0x100>
c000acc4:	eb b6                	jmp    c000ac7c <VCache::read(unsigned long long, int, void*)+0x84>
c000acc6:	66 90                	xchg   ax,ax
c000acc8:	83 ec 0c             	sub    esp,0xc
c000accb:	53                   	push   ebx
c000accc:	e8 5b fd ff ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c000acd1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acd4:	8b 10                	mov    edx,DWORD PTR [eax]
c000acd6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000acd9:	56                   	push   esi
c000acda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ace2:	50                   	push   eax
c000ace3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ace6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000acea:	83 c4 20             	add    esp,0x20
c000aced:	e8 52 a4 00 00       	call   c0015144 <KeRestorePreemption()>
c000acf2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acf5:	8d 76 00             	lea    esi,[esi+0x0]
c000acf8:	83 c4 1c             	add    esp,0x1c
c000acfb:	5b                   	pop    ebx
c000acfc:	5e                   	pop    esi
c000acfd:	5f                   	pop    edi
c000acfe:	5d                   	pop    ebp
c000acff:	c3                   	ret    

c000ad00 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad00:	55                   	push   ebp
c000ad01:	57                   	push   edi
c000ad02:	56                   	push   esi
c000ad03:	53                   	push   ebx
c000ad04:	83 ec 1c             	sub    esp,0x1c
c000ad07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad0f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad13:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad1f:	01 df                	add    edi,ebx
c000ad21:	39 fb                	cmp    ebx,edi
c000ad23:	7d 1f                	jge    c000ad44 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad25:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad29:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad2d:	7d 12                	jge    c000ad41 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad2f:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad35:	53                   	push   ebx
c000ad36:	55                   	push   ebp
c000ad37:	45                   	inc    ebp
c000ad38:	56                   	push   esi
c000ad39:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	eb e8                	jmp    c000ad29 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad41:	43                   	inc    ebx
c000ad42:	eb dd                	jmp    c000ad21 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad44:	83 c4 1c             	add    esp,0x1c
c000ad47:	5b                   	pop    ebx
c000ad48:	5e                   	pop    esi
c000ad49:	5f                   	pop    edi
c000ad4a:	5d                   	pop    ebp
c000ad4b:	c3                   	ret    

c000ad4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad4c:	55                   	push   ebp
c000ad4d:	57                   	push   edi
c000ad4e:	31 ff                	xor    edi,edi
c000ad50:	56                   	push   esi
c000ad51:	53                   	push   ebx
c000ad52:	83 ec 1c             	sub    esp,0x1c
c000ad55:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad5d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad64:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad6d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad71:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad75:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad78:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad7c:	01 f9                	add    ecx,edi
c000ad7e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad82:	7d 2f                	jge    c000adb3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad84:	31 f6                	xor    esi,esi
c000ad86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad8a:	01 f2                	add    edx,esi
c000ad8c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad90:	7d 1a                	jge    c000adac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad95:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad98:	46                   	inc    esi
c000ad99:	51                   	push   ecx
c000ad9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ad9e:	52                   	push   edx
c000ad9f:	55                   	push   ebp
c000ada0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ada3:	83 c4 10             	add    esp,0x10
c000ada6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adaa:	eb da                	jmp    c000ad86 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adac:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adb0:	47                   	inc    edi
c000adb1:	eb c5                	jmp    c000ad78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	5b                   	pop    ebx
c000adb7:	5e                   	pop    esi
c000adb8:	5f                   	pop    edi
c000adb9:	5d                   	pop    ebp
c000adba:	c3                   	ret    
c000adbb:	90                   	nop

c000adbc <Video::blit(unsigned int*, int, int, int, int)>:
c000adbc:	55                   	push   ebp
c000adbd:	ba 00 00 00 00       	mov    edx,0x0
c000adc2:	57                   	push   edi
c000adc3:	56                   	push   esi
c000adc4:	53                   	push   ebx
c000adc5:	83 ec 1c             	sub    esp,0x1c
c000adc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000adcc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000add0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000add4:	85 c0                	test   eax,eax
c000add6:	0f 49 d0             	cmovns edx,eax
c000add9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000ade0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ade4:	89 eb                	mov    ebx,ebp
c000ade6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000adea:	01 ea                	add    edx,ebp
c000adec:	39 da                	cmp    edx,ebx
c000adee:	7e 54                	jle    c000ae44 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adf0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adf6:	7c 4c                	jl     c000ae44 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000adf8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adfc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ae00:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae04:	01 c1                	add    ecx,eax
c000ae06:	39 f9                	cmp    ecx,edi
c000ae08:	7e 2f                	jle    c000ae39 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000ae0a:	83 c2 04             	add    edx,0x4
c000ae0d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae13:	7c 21                	jl     c000ae36 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000ae15:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ae19:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae1b:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000ae1e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ae22:	55                   	push   ebp
c000ae23:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae27:	56                   	push   esi
c000ae28:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae2b:	83 c4 10             	add    esp,0x10
c000ae2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ae32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae36:	47                   	inc    edi
c000ae37:	eb c7                	jmp    c000ae00 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000ae39:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ae3d:	43                   	inc    ebx
c000ae3e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000ae42:	eb a2                	jmp    c000ade6 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000ae44:	83 c4 1c             	add    esp,0x1c
c000ae47:	5b                   	pop    ebx
c000ae48:	5e                   	pop    esi
c000ae49:	5f                   	pop    edi
c000ae4a:	5d                   	pop    ebp
c000ae4b:	c3                   	ret    

c000ae4c <Video::clearScreen(unsigned int)>:
c000ae4c:	57                   	push   edi
c000ae4d:	56                   	push   esi
c000ae4e:	53                   	push   ebx
c000ae4f:	31 db                	xor    ebx,ebx
c000ae51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae55:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae5b:	7e 1f                	jle    c000ae7c <Video::clearScreen(unsigned int)+0x30>
c000ae5d:	31 ff                	xor    edi,edi
c000ae5f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae65:	7e 12                	jle    c000ae79 <Video::clearScreen(unsigned int)+0x2d>
c000ae67:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6d:	53                   	push   ebx
c000ae6e:	57                   	push   edi
c000ae6f:	47                   	inc    edi
c000ae70:	56                   	push   esi
c000ae71:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae74:	83 c4 10             	add    esp,0x10
c000ae77:	eb e6                	jmp    c000ae5f <Video::clearScreen(unsigned int)+0x13>
c000ae79:	43                   	inc    ebx
c000ae7a:	eb d9                	jmp    c000ae55 <Video::clearScreen(unsigned int)+0x9>
c000ae7c:	5b                   	pop    ebx
c000ae7d:	5e                   	pop    esi
c000ae7e:	5f                   	pop    edi
c000ae7f:	c3                   	ret    

c000ae80 <Video::putpixel(int, int, unsigned int)>:
c000ae80:	c7 44 24 04 04 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021904
c000ae88:	e9 89 3d 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000ae8d:	90                   	nop

c000ae8e <Video::readPixelApprox(int, int)>:
c000ae8e:	83 ec 18             	sub    esp,0x18
c000ae91:	68 25 19 02 c0       	push   0xc0021925
c000ae96:	e8 7b 3d 00 00       	call   c000ec16 <KePanic(char const*)>
c000ae9b:	31 c0                	xor    eax,eax
c000ae9d:	83 c4 1c             	add    esp,0x1c
c000aea0:	c3                   	ret    
c000aea1:	90                   	nop

c000aea2 <Video::Video(char const*)>:
c000aea2:	83 ec 0c             	sub    esp,0xc
c000aea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea9:	83 ec 08             	sub    esp,0x8
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	50                   	push   eax
c000aeb1:	e8 f2 e2 ff ff       	call   c00091a8 <Device::Device(char const*)>
c000aeb6:	83 c4 10             	add    esp,0x10
c000aeb9:	ba c8 19 02 c0       	mov    edx,0xc00219c8
c000aebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec2:	89 10                	mov    DWORD PTR [eax],edx
c000aec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aed2:	90                   	nop
c000aed3:	83 c4 0c             	add    esp,0xc
c000aed6:	c3                   	ret    
c000aed7:	90                   	nop

c000aed8 <Video::~Video()>:
c000aed8:	83 ec 0c             	sub    esp,0xc
c000aedb:	ba c8 19 02 c0       	mov    edx,0xc00219c8
c000aee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aee4:	89 10                	mov    DWORD PTR [eax],edx
c000aee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeea:	83 ec 0c             	sub    esp,0xc
c000aeed:	50                   	push   eax
c000aeee:	e8 55 e0 ff ff       	call   c0008f48 <Device::~Device()>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	90                   	nop
c000aef7:	83 c4 0c             	add    esp,0xc
c000aefa:	c3                   	ret    
c000aefb:	90                   	nop

c000aefc <Video::~Video()>:
c000aefc:	83 ec 0c             	sub    esp,0xc
c000aeff:	83 ec 0c             	sub    esp,0xc
c000af02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af06:	e8 cd ff ff ff       	call   c000aed8 <Video::~Video()>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	83 ec 08             	sub    esp,0x8
c000af11:	68 64 01 00 00       	push   0x164
c000af16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af1a:	e8 3c 17 00 00       	call   c000c65b <operator delete(void*, unsigned long)>
c000af1f:	83 c4 10             	add    esp,0x10
c000af22:	83 c4 0c             	add    esp,0xc
c000af25:	c3                   	ret    

c000af26 <Video::isMonochrome()>:
c000af26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af2a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af30:	c3                   	ret    
c000af31:	90                   	nop

c000af32 <Video::getWidth()>:
c000af32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af36:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af3c:	c3                   	ret    
c000af3d:	90                   	nop

c000af3e <Video::getHeight()>:
c000af3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af48:	c3                   	ret    
c000af49:	90                   	nop

c000af4a <Video::drawCursor(int, int, unsigned int*, int)>:
c000af4a:	55                   	push   ebp
c000af4b:	57                   	push   edi
c000af4c:	56                   	push   esi
c000af4d:	53                   	push   ebx
c000af4e:	83 ec 2c             	sub    esp,0x2c
c000af51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000af59:	83 f8 01             	cmp    eax,0x1
c000af5c:	19 c9                	sbb    ecx,ecx
c000af5e:	31 db                	xor    ebx,ebx
c000af60:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af64:	89 ce                	mov    esi,ecx
c000af66:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af6e:	f7 d6                	not    esi
c000af70:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000af76:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af7a:	01 d8                	add    eax,ebx
c000af7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af80:	57                   	push   edi
c000af81:	e8 b8 ff ff ff       	call   c000af3e <Video::getHeight()>
c000af86:	59                   	pop    ecx
c000af87:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af8b:	7e 70                	jle    c000affd <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af8d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af91:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000af95:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000afa0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000afa7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afab:	89 e8                	mov    eax,ebp
c000afad:	83 c0 20             	add    eax,0x20
c000afb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afb4:	57                   	push   edi
c000afb5:	e8 78 ff ff ff       	call   c000af32 <Video::getWidth()>
c000afba:	5a                   	pop    edx
c000afbb:	39 c5                	cmp    ebp,eax
c000afbd:	7d 34                	jge    c000aff3 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afbf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afc4:	74 05                	je     c000afcb <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afc6:	8b 07                	mov    eax,DWORD PTR [edi]
c000afc8:	56                   	push   esi
c000afc9:	eb 0d                	jmp    c000afd8 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afcb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afd0:	74 12                	je     c000afe4 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afd2:	8b 07                	mov    eax,DWORD PTR [edi]
c000afd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afd8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afdc:	55                   	push   ebp
c000afdd:	57                   	push   edi
c000afde:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afe1:	83 c4 10             	add    esp,0x10
c000afe4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000afe8:	45                   	inc    ebp
c000afe9:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000afed:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000aff1:	75 c1                	jne    c000afb4 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000aff3:	43                   	inc    ebx
c000aff4:	83 fb 20             	cmp    ebx,0x20
c000aff7:	0f 85 79 ff ff ff    	jne    c000af76 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000affd:	83 c4 2c             	add    esp,0x2c
c000b000:	5b                   	pop    ebx
c000b001:	5e                   	pop    esi
c000b002:	5f                   	pop    edi
c000b003:	5d                   	pop    ebp
c000b004:	c3                   	ret    
c000b005:	90                   	nop

c000b006 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b006:	55                   	push   ebp
c000b007:	57                   	push   edi
c000b008:	56                   	push   esi
c000b009:	53                   	push   ebx
c000b00a:	83 ec 48             	sub    esp,0x48
c000b00d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b011:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b015:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b019:	c1 e0 08             	shl    eax,0x8
c000b01c:	01 d0                	add    eax,edx
c000b01e:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b022:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b026:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b02a:	c1 e0 08             	shl    eax,0x8
c000b02d:	01 d0                	add    eax,edx
c000b02f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b037:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c000b03c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b040:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b044:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b04b:	50                   	push   eax
c000b04c:	e8 7f 38 00 00       	call   c000e8d0 <malloc>
c000b051:	83 c4 10             	add    esp,0x10
c000b054:	85 c0                	test   eax,eax
c000b056:	89 c5                	mov    ebp,eax
c000b058:	75 10                	jne    c000b06a <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c000b05a:	83 ec 0c             	sub    esp,0xc
c000b05d:	68 50 19 02 c0       	push   0xc0021950
c000b062:	e8 af 3b 00 00       	call   c000ec16 <KePanic(char const*)>
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	52                   	push   edx
c000b06b:	bf 12 00 00 00       	mov    edi,0x12
c000b070:	52                   	push   edx
c000b071:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b075:	50                   	push   eax
c000b076:	68 60 19 02 c0       	push   0xc0021960
c000b07b:	e8 ce be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b080:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b083:	83 e0 20             	and    eax,0x20
c000b086:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b08a:	85 c0                	test   eax,eax
c000b08c:	59                   	pop    ecx
c000b08d:	0f 94 c0             	sete   al
c000b090:	0f b6 c0             	movzx  eax,al
c000b093:	5e                   	pop    esi
c000b094:	50                   	push   eax
c000b095:	68 6a 19 02 c0       	push   0xc002196a
c000b09a:	e8 af be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b09f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000b0a3:	83 c4 10             	add    esp,0x10
c000b0a6:	85 c0                	test   eax,eax
c000b0a8:	89 c2                	mov    edx,eax
c000b0aa:	74 11                	je     c000b0bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c000b0ac:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c000b0b0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0b4:	c1 ff 03             	sar    edi,0x3
c000b0b7:	0f af f9             	imul   edi,ecx
c000b0ba:	83 c7 12             	add    edi,0x12
c000b0bd:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b0c2:	74 07                	je     c000b0cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c000b0c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0c9:	75 12                	jne    c000b0dd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c000b0cb:	83 ec 0c             	sub    esp,0xc
c000b0ce:	68 78 19 02 c0       	push   0xc0021978
c000b0d3:	e8 76 be ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b0d8:	e9 aa 02 00 00       	jmp    c000b387 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c000b0dd:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0e1:	83 f9 02             	cmp    ecx,0x2
c000b0e4:	74 0e                	je     c000b0f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c000b0e6:	83 f9 0a             	cmp    ecx,0xa
c000b0e9:	0f 84 d1 00 00 00    	je     c000b1c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c000b0ef:	e9 7e 02 00 00       	jmp    c000b372 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c000b0f4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0f9:	75 0e                	jne    c000b109 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b0fb:	84 d2                	test   dl,dl
c000b0fd:	75 0a                	jne    c000b109 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c000b0ff:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b102:	83 e8 18             	sub    eax,0x18
c000b105:	a8 f7                	test   al,0xf7
c000b107:	74 0d                	je     c000b116 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c000b109:	83 ec 0c             	sub    esp,0xc
c000b10c:	68 8d 19 02 c0       	push   0xc002198d
c000b111:	e9 64 02 00 00       	jmp    c000b37a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b116:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b11e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b123:	31 c0                	xor    eax,eax
c000b125:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b129:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b131:	89 c6                	mov    esi,eax
c000b133:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b138:	75 15                	jne    c000b14f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b13a:	99                   	cdq    
c000b13b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b13f:	85 d2                	test   edx,edx
c000b141:	75 0c                	jne    c000b14f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c000b143:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000b147:	29 c6                	sub    esi,eax
c000b149:	4e                   	dec    esi
c000b14a:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c000b14f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b15b:	75 0c                	jne    c000b169 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c000b15d:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c000b162:	c1 e2 18             	shl    edx,0x18
c000b165:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b169:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c000b16e:	8d 46 01             	lea    eax,[esi+0x1]
c000b171:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000b175:	c1 e1 10             	shl    ecx,0x10
c000b178:	89 ca                	mov    edx,ecx
c000b17a:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c000b17f:	c1 e1 08             	shl    ecx,0x8
c000b182:	09 d1                	or     ecx,edx
c000b184:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b188:	09 d1                	or     ecx,edx
c000b18a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000b18e:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c000b192:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b196:	c1 fa 03             	sar    edx,0x3
c000b199:	01 d7                	add    edi,edx
c000b19b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b19f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c000b1a3:	7e 04                	jle    c000b1a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c000b1a5:	89 c6                	mov    esi,eax
c000b1a7:	eb 8a                	jmp    c000b133 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c000b1a9:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000b1ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b1b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b1b5:	0f 8f 6e ff ff ff    	jg     c000b129 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c000b1bb:	e9 ce 01 00 00       	jmp    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1c0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1c5:	75 0e                	jne    c000b1d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1c7:	85 c0                	test   eax,eax
c000b1c9:	75 0a                	jne    c000b1d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c000b1cb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1ce:	83 e8 18             	sub    eax,0x18
c000b1d1:	a8 f7                	test   al,0xf7
c000b1d3:	74 0d                	je     c000b1e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c000b1d5:	83 ec 0c             	sub    esp,0xc
c000b1d8:	68 9b 19 02 c0       	push   0xc002199b
c000b1dd:	e9 98 01 00 00       	jmp    c000b37a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c000b1e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000b1ea:	31 c9                	xor    ecx,ecx
c000b1ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b1f4:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c000b1f8:	0f 8d 90 01 00 00    	jge    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b1fe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b202:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c000b206:	0f 8e 82 01 00 00    	jle    c000b38e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c000b20c:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c000b210:	8d 77 01             	lea    esi,[edi+0x1]
c000b213:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b217:	83 fa 7f             	cmp    edx,0x7f
c000b21a:	89 d0                	mov    eax,edx
c000b21c:	0f 8e a3 00 00 00    	jle    c000b2c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c000b222:	83 e0 7f             	and    eax,0x7f
c000b225:	31 d2                	xor    edx,edx
c000b227:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b22b:	40                   	inc    eax
c000b22c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b234:	75 08                	jne    c000b23e <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c000b236:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c000b23b:	c1 e2 18             	shl    edx,0x18
c000b23e:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c000b243:	c1 e0 10             	shl    eax,0x10
c000b246:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b24a:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c000b24f:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b253:	c1 e0 08             	shl    eax,0x8
c000b256:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b25a:	09 f8                	or     eax,edi
c000b25c:	31 ff                	xor    edi,edi
c000b25e:	09 d0                	or     eax,edx
c000b260:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b269:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b272:	75 1d                	jne    c000b291 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b274:	89 c8                	mov    eax,ecx
c000b276:	99                   	cdq    
c000b277:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b27b:	85 d2                	test   edx,edx
c000b27d:	75 12                	jne    c000b291 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c000b27f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b283:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b287:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b28b:	49                   	dec    ecx
c000b28c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b295:	8d 51 01             	lea    edx,[ecx+0x1]
c000b298:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c000b29c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b2a0:	8d 47 01             	lea    eax,[edi+0x1]
c000b2a3:	7e 06                	jle    c000b2ab <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c000b2a5:	89 c7                	mov    edi,eax
c000b2a7:	89 d1                	mov    ecx,edx
c000b2a9:	eb c2                	jmp    c000b26d <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c000b2ab:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b2af:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b2b3:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b2b7:	c1 f8 03             	sar    eax,0x3
c000b2ba:	01 c6                	add    esi,eax
c000b2bc:	89 d1                	mov    ecx,edx
c000b2be:	89 f7                	mov    edi,esi
c000b2c0:	e9 2f ff ff ff       	jmp    c000b1f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c000b2c5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b2cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b2d1:	40                   	inc    eax
c000b2d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c000b2db:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2df:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2e4:	75 1d                	jne    c000b303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2e6:	89 c8                	mov    eax,ecx
c000b2e8:	99                   	cdq    
c000b2e9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c000b2ed:	85 d2                	test   edx,edx
c000b2ef:	75 12                	jne    c000b303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c000b2f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b2f5:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000b2f9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b2fd:	49                   	dec    ecx
c000b2fe:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c000b303:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b307:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b30f:	75 0c                	jne    c000b31d <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c000b311:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c000b316:	c1 e7 18             	shl    edi,0x18
c000b319:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b31d:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b322:	8d 51 01             	lea    edx,[ecx+0x1]
c000b325:	c1 e0 10             	shl    eax,0x10
c000b328:	89 c7                	mov    edi,eax
c000b32a:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c000b32f:	c1 e0 08             	shl    eax,0x8
c000b332:	09 f8                	or     eax,edi
c000b334:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c000b338:	09 f8                	or     eax,edi
c000b33a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b33e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c000b342:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000b346:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b34a:	c1 f8 03             	sar    eax,0x3
c000b34d:	01 c6                	add    esi,eax
c000b34f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b353:	40                   	inc    eax
c000b354:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c000b358:	7e 0b                	jle    c000b365 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c000b35a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b35e:	89 d1                	mov    ecx,edx
c000b360:	e9 7a ff ff ff       	jmp    c000b2df <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c000b365:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000b369:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c000b36d:	e9 4a ff ff ff       	jmp    c000b2bc <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c000b372:	50                   	push   eax
c000b373:	50                   	push   eax
c000b374:	51                   	push   ecx
c000b375:	68 aa 19 02 c0       	push   0xc00219aa
c000b37a:	e8 cf bb ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000b37f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b382:	e8 59 35 00 00       	call   c000e8e0 <free>
c000b387:	83 c4 10             	add    esp,0x10
c000b38a:	31 ed                	xor    ebp,ebp
c000b38c:	eb 14                	jmp    c000b3a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c000b38e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b392:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000b396:	89 18                	mov    DWORD PTR [eax],ebx
c000b398:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b39c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b3a0:	89 18                	mov    DWORD PTR [eax],ebx
c000b3a2:	83 c4 3c             	add    esp,0x3c
c000b3a5:	89 e8                	mov    eax,ebp
c000b3a7:	5b                   	pop    ebx
c000b3a8:	5e                   	pop    esi
c000b3a9:	5f                   	pop    edi
c000b3aa:	5d                   	pop    ebp
c000b3ab:	c3                   	ret    

c000b3ac <Video::putTGA(int, int, unsigned char*, int)>:
c000b3ac:	55                   	push   ebp
c000b3ad:	57                   	push   edi
c000b3ae:	56                   	push   esi
c000b3af:	53                   	push   ebx
c000b3b0:	83 ec 28             	sub    esp,0x28
c000b3b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000b3bb:	50                   	push   eax
c000b3bc:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3c0:	50                   	push   eax
c000b3c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3c9:	55                   	push   ebp
c000b3ca:	e8 37 fc ff ff       	call   c000b006 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3cf:	83 c4 20             	add    esp,0x20
c000b3d2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3d6:	85 c0                	test   eax,eax
c000b3d8:	74 3b                	je     c000b415 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3da:	89 c6                	mov    esi,eax
c000b3dc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3e0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3e4:	39 d8                	cmp    eax,ebx
c000b3e6:	7e 2d                	jle    c000b415 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c000b3e8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b3ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3f0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3f4:	39 f8                	cmp    eax,edi
c000b3f6:	7e 1a                	jle    c000b412 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c000b3f8:	83 c6 04             	add    esi,0x4
c000b3fb:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3fe:	85 c0                	test   eax,eax
c000b400:	79 0d                	jns    c000b40f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000b402:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000b405:	50                   	push   eax
c000b406:	53                   	push   ebx
c000b407:	57                   	push   edi
c000b408:	55                   	push   ebp
c000b409:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b40c:	83 c4 10             	add    esp,0x10
c000b40f:	47                   	inc    edi
c000b410:	eb da                	jmp    c000b3ec <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b412:	43                   	inc    ebx
c000b413:	eb c7                	jmp    c000b3dc <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b415:	83 c4 1c             	add    esp,0x1c
c000b418:	5b                   	pop    ebx
c000b419:	5e                   	pop    esi
c000b41a:	5f                   	pop    edi
c000b41b:	5d                   	pop    ebp
c000b41c:	c3                   	ret    
c000b41d:	66 90                	xchg   ax,ax
c000b41f:	90                   	nop

c000b420 <ACPI::close(int, int, void*)>:
c000b420:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b425:	c3                   	ret    
c000b426:	66 90                	xchg   ax,ax

c000b428 <loadACPITables(unsigned char*)>:
c000b428:	57                   	push   edi
c000b429:	56                   	push   esi
c000b42a:	53                   	push   ebx
c000b42b:	83 ec 60             	sub    esp,0x60
c000b42e:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b433:	0f 84 43 02 00 00    	je     c000b67c <loadACPITables(unsigned char*)+0x254>
c000b439:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b43e:	0f b6 c0             	movzx  eax,al
c000b441:	85 c0                	test   eax,eax
c000b443:	74 7b                	je     c000b4c0 <loadACPITables(unsigned char*)+0x98>
c000b445:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b449:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b44d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b451:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b454:	83 e8 24             	sub    eax,0x24
c000b457:	c1 e8 03             	shr    eax,0x3
c000b45a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b45e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b466:	66 90                	xchg   ax,ax
c000b468:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b46c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b470:	0f 8d ba 00 00 00    	jge    c000b530 <loadACPITables(unsigned char*)+0x108>
c000b476:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b47a:	83 c0 24             	add    eax,0x24
c000b47d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b481:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b485:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b489:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b48d:	c1 e0 03             	shl    eax,0x3
c000b490:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b494:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b498:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b49b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b49d:	89 c1                	mov    ecx,eax
c000b49f:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b4a4:	8d 50 01             	lea    edx,[eax+0x1]
c000b4a7:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b4ad:	89 ca                	mov    edx,ecx
c000b4af:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4b6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4bb:	eb ab                	jmp    c000b468 <loadACPITables(unsigned char*)+0x40>
c000b4bd:	8d 76 00             	lea    esi,[esi+0x0]
c000b4c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4cf:	83 e8 24             	sub    eax,0x24
c000b4d2:	c1 e8 02             	shr    eax,0x2
c000b4d5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4d9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4e4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4e8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4ec:	7d 42                	jge    c000b530 <loadACPITables(unsigned char*)+0x108>
c000b4ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4f2:	83 c0 24             	add    eax,0x24
c000b4f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b501:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b505:	c1 e0 02             	shl    eax,0x2
c000b508:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b50c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b510:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b512:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b517:	8d 50 01             	lea    edx,[eax+0x1]
c000b51a:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b520:	89 ca                	mov    edx,ecx
c000b522:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b529:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b52e:	eb b4                	jmp    c000b4e4 <loadACPITables(unsigned char*)+0xbc>
c000b530:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b538:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b53d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b541:	0f 8d 39 01 00 00    	jge    c000b680 <loadACPITables(unsigned char*)+0x258>
c000b547:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b54b:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b552:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b556:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b55a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b562:	25 ff 0f 00 00       	and    eax,0xfff
c000b567:	89 c6                	mov    esi,eax
c000b569:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b56f:	83 ec 0c             	sub    esp,0xc
c000b572:	6a 01                	push   0x1
c000b574:	e8 ca 69 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000b579:	83 c4 10             	add    esp,0x10
c000b57c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b580:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b586:	83 ec 0c             	sub    esp,0xc
c000b589:	6a 01                	push   0x1
c000b58b:	6a 01                	push   0x1
c000b58d:	50                   	push   eax
c000b58e:	52                   	push   edx
c000b58f:	53                   	push   ebx
c000b590:	e8 81 72 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b595:	83 c4 20             	add    esp,0x20
c000b598:	09 f0                	or     eax,esi
c000b59a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b59e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b5a2:	c1 e0 03             	shl    eax,0x3
c000b5a5:	05 20 98 02 c0       	add    eax,0xc0029820
c000b5aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5b6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5d2:	89 c6                	mov    esi,eax
c000b5d4:	89 d7                	mov    edi,edx
c000b5d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5d8:	89 c8                	mov    eax,ecx
c000b5da:	89 fa                	mov    edx,edi
c000b5dc:	89 f3                	mov    ebx,esi
c000b5de:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5f9:	05 00 10 00 00       	add    eax,0x1000
c000b5fe:	c1 e8 0c             	shr    eax,0xc
c000b601:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b609:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b60d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b611:	25 ff 0f 00 00       	and    eax,0xfff
c000b616:	89 c6                	mov    esi,eax
c000b618:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b61e:	83 ec 0c             	sub    esp,0xc
c000b621:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b625:	e8 19 69 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b631:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b637:	83 ec 0c             	sub    esp,0xc
c000b63a:	6a 01                	push   0x1
c000b63c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b640:	50                   	push   eax
c000b641:	52                   	push   edx
c000b642:	53                   	push   ebx
c000b643:	e8 ce 71 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b648:	83 c4 20             	add    esp,0x20
c000b64b:	09 f0                	or     eax,esi
c000b64d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b655:	83 ec 0c             	sub    esp,0xc
c000b658:	50                   	push   eax
c000b659:	e8 e3 6b 00 00       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b665:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b669:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b670:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b675:	e9 be fe ff ff       	jmp    c000b538 <loadACPITables(unsigned char*)+0x110>
c000b67a:	66 90                	xchg   ax,ax
c000b67c:	90                   	nop
c000b67d:	8d 76 00             	lea    esi,[esi+0x0]
c000b680:	83 c4 60             	add    esp,0x60
c000b683:	5b                   	pop    ebx
c000b684:	5e                   	pop    esi
c000b685:	5f                   	pop    edi
c000b686:	c3                   	ret    
c000b687:	90                   	nop

c000b688 <findRSDT(unsigned char*)>:
c000b688:	57                   	push   edi
c000b689:	56                   	push   esi
c000b68a:	53                   	push   ebx
c000b68b:	83 ec 50             	sub    esp,0x50
c000b68e:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b693:	85 c0                	test   eax,eax
c000b695:	75 0d                	jne    c000b6a4 <findRSDT(unsigned char*)+0x1c>
c000b697:	b8 00 00 00 00       	mov    eax,0x0
c000b69c:	e9 2b 01 00 00       	jmp    c000b7cc <findRSDT(unsigned char*)+0x144>
c000b6a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b6a4:	89 e0                	mov    eax,esp
c000b6a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b6aa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6b2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6ca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6ce:	89 c6                	mov    esi,eax
c000b6d0:	89 d7                	mov    edi,edx
c000b6d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6d4:	89 c8                	mov    eax,ecx
c000b6d6:	89 fa                	mov    edx,edi
c000b6d8:	89 f3                	mov    ebx,esi
c000b6da:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6de:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6e6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6ea:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6ee:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b706:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b70a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b70e:	25 ff 0f 00 00       	and    eax,0xfff
c000b713:	89 c6                	mov    esi,eax
c000b715:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b71b:	83 ec 0c             	sub    esp,0xc
c000b71e:	6a 02                	push   0x2
c000b720:	e8 1e 68 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000b725:	83 c4 10             	add    esp,0x10
c000b728:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b72c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b732:	83 ec 0c             	sub    esp,0xc
c000b735:	6a 01                	push   0x1
c000b737:	6a 02                	push   0x2
c000b739:	50                   	push   eax
c000b73a:	52                   	push   edx
c000b73b:	53                   	push   ebx
c000b73c:	e8 d5 70 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b741:	83 c4 20             	add    esp,0x20
c000b744:	09 f0                	or     eax,esi
c000b746:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b74a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b74e:	25 ff 0f 00 00       	and    eax,0xfff
c000b753:	89 c6                	mov    esi,eax
c000b755:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	6a 02                	push   0x2
c000b760:	e8 de 67 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b76c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b772:	83 ec 0c             	sub    esp,0xc
c000b775:	6a 01                	push   0x1
c000b777:	6a 02                	push   0x2
c000b779:	50                   	push   eax
c000b77a:	52                   	push   edx
c000b77b:	53                   	push   ebx
c000b77c:	e8 95 70 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b781:	83 c4 20             	add    esp,0x20
c000b784:	09 f0                	or     eax,esi
c000b786:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b78a:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b78f:	85 c0                	test   eax,eax
c000b791:	75 11                	jne    c000b7a4 <findRSDT(unsigned char*)+0x11c>
c000b793:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b79a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b79e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7a2:	eb 24                	jmp    c000b7c8 <findRSDT(unsigned char*)+0x140>
c000b7a4:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b7a9:	83 f8 02             	cmp    eax,0x2
c000b7ac:	75 12                	jne    c000b7c0 <findRSDT(unsigned char*)+0x138>
c000b7ae:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7b5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7b9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7bd:	eb 09                	jmp    c000b7c8 <findRSDT(unsigned char*)+0x140>
c000b7bf:	90                   	nop
c000b7c0:	b8 00 00 00 00       	mov    eax,0x0
c000b7c5:	eb 05                	jmp    c000b7cc <findRSDT(unsigned char*)+0x144>
c000b7c7:	90                   	nop
c000b7c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7cc:	83 c4 50             	add    esp,0x50
c000b7cf:	5b                   	pop    ebx
c000b7d0:	5e                   	pop    esi
c000b7d1:	5f                   	pop    edi
c000b7d2:	c3                   	ret    
c000b7d3:	90                   	nop

c000b7d4 <findDataTable(unsigned char*, char*)>:
c000b7d4:	83 ec 1c             	sub    esp,0x1c
c000b7d7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7dc:	75 0a                	jne    c000b7e8 <findDataTable(unsigned char*, char*)+0x14>
c000b7de:	b8 00 00 00 00       	mov    eax,0x0
c000b7e3:	eb 5f                	jmp    c000b844 <findDataTable(unsigned char*, char*)+0x70>
c000b7e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7f0:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7f5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7f9:	7d 41                	jge    c000b83c <findDataTable(unsigned char*, char*)+0x68>
c000b7fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7ff:	c1 e0 03             	shl    eax,0x3
c000b802:	05 20 98 02 c0       	add    eax,0xc0029820
c000b807:	83 ec 04             	sub    esp,0x4
c000b80a:	6a 04                	push   0x4
c000b80c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b810:	50                   	push   eax
c000b811:	e8 6a 4b ff ff       	call   c0000380 <memcmp>
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	85 c0                	test   eax,eax
c000b81b:	0f 94 c0             	sete   al
c000b81e:	0f b6 c0             	movzx  eax,al
c000b821:	85 c0                	test   eax,eax
c000b823:	74 0f                	je     c000b834 <findDataTable(unsigned char*, char*)+0x60>
c000b825:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b829:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b830:	eb 12                	jmp    c000b844 <findDataTable(unsigned char*, char*)+0x70>
c000b832:	66 90                	xchg   ax,ax
c000b834:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b839:	eb b5                	jmp    c000b7f0 <findDataTable(unsigned char*, char*)+0x1c>
c000b83b:	90                   	nop
c000b83c:	b8 00 00 00 00       	mov    eax,0x0
c000b841:	8d 76 00             	lea    esi,[esi+0x0]
c000b844:	83 c4 1c             	add    esp,0x1c
c000b847:	c3                   	ret    

c000b848 <scanMADT()>:
c000b848:	53                   	push   ebx
c000b849:	83 ec 38             	sub    esp,0x38
c000b84c:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b856:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b860:	e8 9a c3 00 00       	call   c0017bff <HalFindRSDP()>
c000b865:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b86a:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b86f:	85 c0                	test   eax,eax
c000b871:	0f 84 11 04 00 00    	je     c000bc88 <scanMADT()+0x440>
c000b877:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b87c:	83 ec 0c             	sub    esp,0xc
c000b87f:	50                   	push   eax
c000b880:	e8 03 fe ff ff       	call   c000b688 <findRSDT(unsigned char*)>
c000b885:	83 c4 10             	add    esp,0x10
c000b888:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b88d:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b892:	85 c0                	test   eax,eax
c000b894:	0f 84 f2 03 00 00    	je     c000bc8c <scanMADT()+0x444>
c000b89a:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b89f:	83 ec 0c             	sub    esp,0xc
c000b8a2:	50                   	push   eax
c000b8a3:	e8 80 fb ff ff       	call   c000b428 <loadACPITables(unsigned char*)>
c000b8a8:	83 c4 10             	add    esp,0x10
c000b8ab:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8b0:	83 ec 08             	sub    esp,0x8
c000b8b3:	68 0c 1a 02 c0       	push   0xc0021a0c
c000b8b8:	50                   	push   eax
c000b8b9:	e8 16 ff ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000b8be:	83 c4 10             	add    esp,0x10
c000b8c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8c5:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8ca:	0f 84 c0 03 00 00    	je     c000bc90 <scanMADT()+0x448>
c000b8d0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8df:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8e3:	0f 87 af 03 00 00    	ja     c000bc98 <scanMADT()+0x450>
c000b8e9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8f1:	0f 87 a1 03 00 00    	ja     c000bc98 <scanMADT()+0x450>
c000b8f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8fb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b903:	8d 50 01             	lea    edx,[eax+0x1]
c000b906:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b90a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b90e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b912:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b916:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b91a:	8d 50 01             	lea    edx,[eax+0x1]
c000b91d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b921:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b925:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b929:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b92d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b932:	83 f8 02             	cmp    eax,0x2
c000b935:	0f 86 59 03 00 00    	jbe    c000bc94 <scanMADT()+0x44c>
c000b93b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b940:	85 c0                	test   eax,eax
c000b942:	75 58                	jne    c000b99c <scanMADT()+0x154>
c000b944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b948:	8d 50 01             	lea    edx,[eax+0x1]
c000b94b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b94f:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b955:	0f b6 d2             	movzx  edx,dl
c000b958:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b95c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b960:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b96a:	8d 50 01             	lea    edx,[eax+0x1]
c000b96d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b971:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b977:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b97a:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b980:	0f b6 d2             	movzx  edx,dl
c000b983:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b987:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b98b:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b991:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b996:	e9 d9 02 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000b99b:	90                   	nop
c000b99c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b9a1:	83 f8 01             	cmp    eax,0x1
c000b9a4:	0f 85 1a 01 00 00    	jne    c000bac4 <scanMADT()+0x27c>
c000b9aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9ae:	8d 50 01             	lea    edx,[eax+0x1]
c000b9b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9b5:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9bb:	0f b6 d2             	movzx  edx,dl
c000b9be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9c2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9c6:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9cc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9d9:	01 d0                	add    eax,edx
c000b9db:	83 c0 2c             	add    eax,0x2c
c000b9de:	8a 00                	mov    al,BYTE PTR [eax]
c000b9e0:	0f b6 d0             	movzx  edx,al
c000b9e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9e7:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9f2:	0f b6 c0             	movzx  eax,al
c000b9f5:	c1 e0 08             	shl    eax,0x8
c000b9f8:	89 d1                	mov    ecx,edx
c000b9fa:	09 c1                	or     ecx,eax
c000b9fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba00:	8d 50 02             	lea    edx,[eax+0x2]
c000ba03:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba07:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba0b:	0f b6 c0             	movzx  eax,al
c000ba0e:	c1 e0 10             	shl    eax,0x10
c000ba11:	09 c1                	or     ecx,eax
c000ba13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba17:	8d 50 03             	lea    edx,[eax+0x3]
c000ba1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba1e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba22:	0f b6 c0             	movzx  eax,al
c000ba25:	c1 e0 18             	shl    eax,0x18
c000ba28:	09 c1                	or     ecx,eax
c000ba2a:	89 ca                	mov    edx,ecx
c000ba2c:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba31:	0f b6 c0             	movzx  eax,al
c000ba34:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba3b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba48:	01 d0                	add    eax,edx
c000ba4a:	83 c0 2c             	add    eax,0x2c
c000ba4d:	8a 00                	mov    al,BYTE PTR [eax]
c000ba4f:	0f b6 d0             	movzx  edx,al
c000ba52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba56:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba59:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba5d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba61:	0f b6 c0             	movzx  eax,al
c000ba64:	c1 e0 08             	shl    eax,0x8
c000ba67:	89 d1                	mov    ecx,edx
c000ba69:	09 c1                	or     ecx,eax
c000ba6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba6f:	8d 50 02             	lea    edx,[eax+0x2]
c000ba72:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba76:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba7a:	0f b6 c0             	movzx  eax,al
c000ba7d:	c1 e0 10             	shl    eax,0x10
c000ba80:	09 c1                	or     ecx,eax
c000ba82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba86:	8d 50 03             	lea    edx,[eax+0x3]
c000ba89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba8d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba91:	0f b6 c0             	movzx  eax,al
c000ba94:	c1 e0 18             	shl    eax,0x18
c000ba97:	09 c1                	or     ecx,eax
c000ba99:	89 ca                	mov    edx,ecx
c000ba9b:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa0:	0f b6 c0             	movzx  eax,al
c000baa3:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000baaa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000baaf:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000bab4:	83 c0 01             	add    eax,0x1
c000bab7:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000babc:	e9 b3 01 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000bac1:	8d 76 00             	lea    esi,[esi+0x0]
c000bac4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bac9:	83 f8 02             	cmp    eax,0x2
c000bacc:	0f 85 ea 00 00 00    	jne    c000bbbc <scanMADT()+0x374>
c000bad2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad6:	8d 50 01             	lea    edx,[eax+0x1]
c000bad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000badd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bae1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bae5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bae9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baed:	8d 50 01             	lea    edx,[eax+0x1]
c000baf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baf8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bafc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bb00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb08:	01 d0                	add    eax,edx
c000bb0a:	83 c0 2c             	add    eax,0x2c
c000bb0d:	8a 00                	mov    al,BYTE PTR [eax]
c000bb0f:	0f b6 d0             	movzx  edx,al
c000bb12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb16:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb1d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb21:	0f b6 c0             	movzx  eax,al
c000bb24:	c1 e0 08             	shl    eax,0x8
c000bb27:	89 d1                	mov    ecx,edx
c000bb29:	09 c1                	or     ecx,eax
c000bb2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb2f:	8d 50 02             	lea    edx,[eax+0x2]
c000bb32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb36:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb3a:	0f b6 c0             	movzx  eax,al
c000bb3d:	c1 e0 10             	shl    eax,0x10
c000bb40:	09 c1                	or     ecx,eax
c000bb42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb46:	8d 50 03             	lea    edx,[eax+0x3]
c000bb49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb4d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb51:	0f b6 c0             	movzx  eax,al
c000bb54:	c1 e0 18             	shl    eax,0x18
c000bb57:	09 c8                	or     eax,ecx
c000bb59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb5d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb6a:	01 d0                	add    eax,edx
c000bb6c:	83 c0 2c             	add    eax,0x2c
c000bb6f:	8a 00                	mov    al,BYTE PTR [eax]
c000bb71:	0f b6 d0             	movzx  edx,al
c000bb74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb78:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb7f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb83:	0f b6 c0             	movzx  eax,al
c000bb86:	c1 e0 08             	shl    eax,0x8
c000bb89:	09 d0                	or     eax,edx
c000bb8b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb90:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb95:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb9a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb9e:	88 90 a8 3a 02 c0    	mov    BYTE PTR [eax-0x3ffdc558],dl
c000bba4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bba9:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000bbae:	66 89 94 00 c0 9a 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd6540],dx
c000bbb6:	e9 b9 00 00 00       	jmp    c000bc74 <scanMADT()+0x42c>
c000bbbb:	90                   	nop
c000bbbc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbc1:	83 f8 04             	cmp    eax,0x4
c000bbc4:	0f 85 9a 00 00 00    	jne    c000bc64 <scanMADT()+0x41c>
c000bbca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbce:	8d 50 01             	lea    edx,[eax+0x1]
c000bbd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbd9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbdd:	0f b6 c0             	movzx  eax,al
c000bbe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbe4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbec:	01 d0                	add    eax,edx
c000bbee:	83 c0 2c             	add    eax,0x2c
c000bbf1:	8a 00                	mov    al,BYTE PTR [eax]
c000bbf3:	0f b6 d0             	movzx  edx,al
c000bbf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbfa:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc01:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bc05:	0f b6 c0             	movzx  eax,al
c000bc08:	c1 e0 08             	shl    eax,0x8
c000bc0b:	09 d0                	or     eax,edx
c000bc0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc11:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc1a:	8d 50 01             	lea    edx,[eax+0x1]
c000bc1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc25:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc29:	0f b6 c0             	movzx  eax,al
c000bc2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc34:	c1 e0 08             	shl    eax,0x8
c000bc37:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc3b:	89 c1                	mov    ecx,eax
c000bc3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc41:	c1 e0 18             	shl    eax,0x18
c000bc44:	89 c3                	mov    ebx,eax
c000bc46:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc4b:	8d 50 01             	lea    edx,[eax+0x1]
c000bc4e:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc54:	09 d9                	or     ecx,ebx
c000bc56:	89 ca                	mov    edx,ecx
c000bc58:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc5f:	eb 13                	jmp    c000bc74 <scanMADT()+0x42c>
c000bc61:	8d 76 00             	lea    esi,[esi+0x0]
c000bc64:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc69:	83 f8 05             	cmp    eax,0x5
c000bc6c:	75 06                	jne    c000bc74 <scanMADT()+0x42c>
c000bc6e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc73:	90                   	nop
c000bc74:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc79:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc7d:	01 d0                	add    eax,edx
c000bc7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc83:	e9 50 fc ff ff       	jmp    c000b8d8 <scanMADT()+0x90>
c000bc88:	90                   	nop
c000bc89:	eb 0d                	jmp    c000bc98 <scanMADT()+0x450>
c000bc8b:	90                   	nop
c000bc8c:	90                   	nop
c000bc8d:	eb 09                	jmp    c000bc98 <scanMADT()+0x450>
c000bc8f:	90                   	nop
c000bc90:	90                   	nop
c000bc91:	eb 05                	jmp    c000bc98 <scanMADT()+0x450>
c000bc93:	90                   	nop
c000bc94:	90                   	nop
c000bc95:	8d 76 00             	lea    esi,[esi+0x0]
c000bc98:	83 c4 38             	add    esp,0x38
c000bc9b:	5b                   	pop    ebx
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop
c000bc9e:	66 90                	xchg   ax,ax

c000bca0 <ACPI::ACPI()>:
c000bca0:	83 ec 0c             	sub    esp,0xc
c000bca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca7:	83 ec 08             	sub    esp,0x8
c000bcaa:	68 11 1a 02 c0       	push   0xc0021a11
c000bcaf:	50                   	push   eax
c000bcb0:	e8 f3 d4 ff ff       	call   c00091a8 <Device::Device(char const*)>
c000bcb5:	83 c4 10             	add    esp,0x10
c000bcb8:	ba 0c 1c 02 c0       	mov    edx,0xc0021c0c
c000bcbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc1:	89 10                	mov    DWORD PTR [eax],edx
c000bcc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bcdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bce0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcea:	e8 59 fb ff ff       	call   c000b848 <scanMADT()>
c000bcef:	90                   	nop
c000bcf0:	83 c4 0c             	add    esp,0xc
c000bcf3:	c3                   	ret    

c000bcf4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bcf4:	83 ec 2c             	sub    esp,0x2c
c000bcf7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000bcfb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcff:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000bd03:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000bd07:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd0c:	88 c8                	mov    al,cl
c000bd0e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd12:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	90                   	nop
c000bd20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd24:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd2a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd2e:	0f 8d b0 00 00 00    	jge    c000bde4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd3c:	83 c2 2a             	add    edx,0x2a
c000bd3f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd43:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd48:	0f b7 c0             	movzx  eax,ax
c000bd4b:	39 c2                	cmp    edx,eax
c000bd4d:	0f 85 85 00 00 00    	jne    c000bdd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd5b:	83 c2 2a             	add    edx,0x2a
c000bd5e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd62:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd67:	0f b6 c0             	movzx  eax,al
c000bd6a:	39 c2                	cmp    edx,eax
c000bd6c:	75 6a                	jne    c000bdd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd6e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd73:	85 c0                	test   eax,eax
c000bd75:	74 3d                	je     c000bdb4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd7f:	83 c2 2a             	add    edx,0x2a
c000bd82:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd8d:	39 c2                	cmp    edx,eax
c000bd8f:	74 13                	je     c000bda4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd91:	83 ec 0c             	sub    esp,0xc
c000bd94:	68 8c 1b 02 c0       	push   0xc0021b8c
c000bd99:	e8 78 2e 00 00       	call   c000ec16 <KePanic(char const*)>
c000bd9e:	83 c4 10             	add    esp,0x10
c000bda1:	8d 76 00             	lea    esi,[esi+0x0]
c000bda4:	83 ec 0c             	sub    esp,0xc
c000bda7:	68 16 1a 02 c0       	push   0xc0021a16
c000bdac:	e8 65 2e 00 00       	call   c000ec16 <KePanic(char const*)>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bdb8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdc0:	83 c2 2a             	add    edx,0x2a
c000bdc3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdc7:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdc9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdcc:	89 01                	mov    DWORD PTR [ecx],eax
c000bdce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdd1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdd6:	66 90                	xchg   ax,ax
c000bdd8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bddd:	e9 3e ff ff ff       	jmp    c000bd20 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bde2:	66 90                	xchg   ax,ax
c000bde4:	90                   	nop
c000bde5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bde9:	83 c4 2c             	add    esp,0x2c
c000bdec:	c2 04 00             	ret    0x4
c000bdef:	90                   	nop

c000bdf0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bdf0:	83 ec 1c             	sub    esp,0x1c
c000bdf3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdf7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bdfb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdff:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000be04:	88 c8                	mov    al,cl
c000be06:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000be0a:	88 d0                	mov    al,dl
c000be0c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be14:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be1e:	83 c2 2a             	add    edx,0x2a
c000be21:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000be25:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000be29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be2d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be37:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000be3e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000be43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be47:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be4d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be51:	83 c0 01             	add    eax,0x1
c000be54:	88 c1                	mov    cl,al
c000be56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be5a:	83 c2 2a             	add    edx,0x2a
c000be5d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be65:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be6f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be76:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be7e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be84:	8d 50 01             	lea    edx,[eax+0x1]
c000be87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be8b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be95:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be9b:	3d 00 02 00 00       	cmp    eax,0x200
c000bea0:	75 12                	jne    c000beb4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000bea2:	83 ec 0c             	sub    esp,0xc
c000bea5:	68 25 1a 02 c0       	push   0xc0021a25
c000beaa:	e8 67 2d 00 00       	call   c000ec16 <KePanic(char const*)>
c000beaf:	83 c4 10             	add    esp,0x10
c000beb2:	66 90                	xchg   ax,ax
c000beb4:	90                   	nop
c000beb5:	83 c4 1c             	add    esp,0x1c
c000beb8:	c3                   	ret    
c000beb9:	90                   	nop
c000beba:	66 90                	xchg   ax,ax

c000bebc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000bebc:	b8 00 00 00 00       	mov    eax,0x0
c000bec1:	c3                   	ret    
c000bec2:	66 90                	xchg   ax,ax

c000bec4 <ACPI::detectPCI()>:
c000bec4:	53                   	push   ebx
c000bec5:	83 ec 28             	sub    esp,0x28
c000bec8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000becd:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bed2:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000bed7:	83 ec 08             	sub    esp,0x8
c000beda:	68 42 1a 02 c0       	push   0xc0021a42
c000bedf:	50                   	push   eax
c000bee0:	e8 ef f8 ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000bee5:	83 c4 10             	add    esp,0x10
c000bee8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000beec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bef1:	74 0d                	je     c000bf00 <ACPI::detectPCI()+0x3c>
c000bef3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bef8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000befd:	8d 76 00             	lea    esi,[esi+0x0]
c000bf00:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000bf08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf0c:	8a 00                	mov    al,BYTE PTR [eax]
c000bf0e:	0f b6 c0             	movzx  eax,al
c000bf11:	83 f8 01             	cmp    eax,0x1
c000bf14:	75 0e                	jne    c000bf24 <ACPI::detectPCI()+0x60>
c000bf16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf1b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf20:	eb 2e                	jmp    c000bf50 <ACPI::detectPCI()+0x8c>
c000bf22:	66 90                	xchg   ax,ax
c000bf24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf28:	8a 00                	mov    al,BYTE PTR [eax]
c000bf2a:	0f b6 c0             	movzx  eax,al
c000bf2d:	83 f8 02             	cmp    eax,0x2
c000bf30:	75 1e                	jne    c000bf50 <ACPI::detectPCI()+0x8c>
c000bf32:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf37:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf3c:	85 c0                	test   eax,eax
c000bf3e:	74 10                	je     c000bf50 <ACPI::detectPCI()+0x8c>
c000bf40:	83 ec 0c             	sub    esp,0xc
c000bf43:	68 bc 1b 02 c0       	push   0xc0021bbc
c000bf48:	e8 c9 2c 00 00       	call   c000ec16 <KePanic(char const*)>
c000bf4d:	83 c4 10             	add    esp,0x10
c000bf50:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf54:	83 f0 01             	xor    eax,0x1
c000bf57:	0f b6 c0             	movzx  eax,al
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	74 46                	je     c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf5e:	e8 cd 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf67:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf6c:	75 0e                	jne    c000bf7c <ACPI::detectPCI()+0xb8>
c000bf6e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf73:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf78:	eb 2a                	jmp    c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf7a:	66 90                	xchg   ax,ax
c000bf7c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf81:	75 21                	jne    c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf83:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf88:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf8d:	85 c0                	test   eax,eax
c000bf8f:	74 13                	je     c000bfa4 <ACPI::detectPCI()+0xe0>
c000bf91:	83 ec 0c             	sub    esp,0xc
c000bf94:	68 bc 1b 02 c0       	push   0xc0021bbc
c000bf99:	e8 78 2c 00 00       	call   c000ec16 <KePanic(char const*)>
c000bf9e:	83 c4 10             	add    esp,0x10
c000bfa1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfa4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bfa9:	85 c0                	test   eax,eax
c000bfab:	0f 84 87 00 00 00    	je     c000c038 <ACPI::detectPCI()+0x174>
c000bfb1:	83 ec 0c             	sub    esp,0xc
c000bfb4:	68 47 1a 02 c0       	push   0xc0021a47
c000bfb9:	e8 dd 05 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000bfbe:	83 c4 10             	add    esp,0x10
c000bfc1:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfc9:	83 ec 0c             	sub    esp,0xc
c000bfcc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfd0:	e8 fb 28 00 00       	call   c000e8d0 <malloc>
c000bfd5:	83 c4 10             	add    esp,0x10
c000bfd8:	89 c3                	mov    ebx,eax
c000bfda:	83 ec 0c             	sub    esp,0xc
c000bfdd:	53                   	push   ebx
c000bfde:	e8 db f8 00 00       	call   c001b8be <PCI::PCI()>
c000bfe3:	83 c4 10             	add    esp,0x10
c000bfe6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bfea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfee:	83 ec 08             	sub    esp,0x8
c000bff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff5:	50                   	push   eax
c000bff6:	e8 4b d0 ff ff       	call   c0009046 <Device::addChild(Device*)>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c002:	8b 00                	mov    eax,DWORD PTR [eax]
c000c004:	83 c0 08             	add    eax,0x8
c000c007:	8b 00                	mov    eax,DWORD PTR [eax]
c000c009:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c00e:	85 d2                	test   edx,edx
c000c010:	74 0a                	je     c000c01c <ACPI::detectPCI()+0x158>
c000c012:	ba 01 00 00 00       	mov    edx,0x1
c000c017:	eb 0b                	jmp    c000c024 <ACPI::detectPCI()+0x160>
c000c019:	8d 76 00             	lea    esi,[esi+0x0]
c000c01c:	ba 02 00 00 00       	mov    edx,0x2
c000c021:	8d 76 00             	lea    esi,[esi+0x0]
c000c024:	6a 00                	push   0x0
c000c026:	6a 00                	push   0x0
c000c028:	52                   	push   edx
c000c029:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c02d:	ff d0                	call   eax
c000c02f:	83 c4 10             	add    esp,0x10
c000c032:	e9 91 00 00 00       	jmp    c000c0c8 <ACPI::detectPCI()+0x204>
c000c037:	90                   	nop
c000c038:	83 ec 0c             	sub    esp,0xc
c000c03b:	68 5f 1a 02 c0       	push   0xc0021a5f
c000c040:	e8 56 05 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c045:	83 c4 10             	add    esp,0x10
c000c048:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c04f:	83 ec 0c             	sub    esp,0xc
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	e8 75 28 00 00       	call   c000e8d0 <malloc>
c000c05b:	83 c4 10             	add    esp,0x10
c000c05e:	89 c3                	mov    ebx,eax
c000c060:	83 ec 0c             	sub    esp,0xc
c000c063:	53                   	push   ebx
c000c064:	e8 5d 04 01 00       	call   c001c4c6 <IDE::IDE()>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c074:	83 ec 08             	sub    esp,0x8
c000c077:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c07b:	50                   	push   eax
c000c07c:	e8 c5 cf ff ff       	call   c0009046 <Device::addChild(Device*)>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c088:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c092:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c096:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c09f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0a3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b2:	83 c0 08             	add    eax,0x8
c000c0b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b7:	6a 00                	push   0x0
c000c0b9:	6a 00                	push   0x0
c000c0bb:	6a 00                	push   0x0
c000c0bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0c1:	ff d0                	call   eax
c000c0c3:	83 c4 10             	add    esp,0x10
c000c0c6:	66 90                	xchg   ax,ax
c000c0c8:	90                   	nop
c000c0c9:	83 c4 28             	add    esp,0x28
c000c0cc:	5b                   	pop    ebx
c000c0cd:	c3                   	ret    
c000c0ce:	66 90                	xchg   ax,ax

c000c0d0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0d0:	83 ec 0c             	sub    esp,0xc
c000c0d3:	83 ec 0c             	sub    esp,0xc
c000c0d6:	68 74 1a 02 c0       	push   0xc0021a74
c000c0db:	e8 36 2b 00 00       	call   c000ec16 <KePanic(char const*)>
c000c0e0:	83 c4 10             	add    esp,0x10
c000c0e3:	90                   	nop
c000c0e4:	83 c4 0c             	add    esp,0xc
c000c0e7:	c3                   	ret    

c000c0e8 <ACPI::open(int, int, void*)>:
c000c0e8:	55                   	push   ebp
c000c0e9:	89 e5                	mov    ebp,esp
c000c0eb:	53                   	push   ebx
c000c0ec:	81 ec 74 01 00 00    	sub    esp,0x174
c000c0f2:	83 ec 0c             	sub    esp,0xc
c000c0f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c0f8:	e8 c7 fd ff ff       	call   c000bec4 <ACPI::detectPCI()>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	83 ec 0c             	sub    esp,0xc
c000c103:	68 e4 1b 02 c0       	push   0xc0021be4
c000c108:	e8 8e 04 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c10d:	83 c4 10             	add    esp,0x10
c000c110:	b8 4c 05 00 00       	mov    eax,0x54c
c000c115:	8a 00                	mov    al,BYTE PTR [eax]
c000c117:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000c11a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c11e:	83 f8 01             	cmp    eax,0x1
c000c121:	75 15                	jne    c000c138 <ACPI::open(int, int, void*)+0x50>
c000c123:	83 ec 0c             	sub    esp,0xc
c000c126:	68 85 1a 02 c0       	push   0xc0021a85
c000c12b:	e8 10 7d 00 00       	call   c0013e40 <Thr::loadKernelSymbolTable(char const*)>
c000c130:	83 c4 10             	add    esp,0x10
c000c133:	eb 33                	jmp    c000c168 <ACPI::open(int, int, void*)+0x80>
c000c135:	8d 76 00             	lea    esi,[esi+0x0]
c000c138:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000c13c:	3d bb 00 00 00       	cmp    eax,0xbb
c000c141:	75 15                	jne    c000c158 <ACPI::open(int, int, void*)+0x70>
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	68 a3 1a 02 c0       	push   0xc0021aa3
c000c14b:	e8 f0 7c 00 00       	call   c0013e40 <Thr::loadKernelSymbolTable(char const*)>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	eb 13                	jmp    c000c168 <ACPI::open(int, int, void*)+0x80>
c000c155:	8d 76 00             	lea    esi,[esi+0x0]
c000c158:	83 ec 0c             	sub    esp,0xc
c000c15b:	68 c1 1a 02 c0       	push   0xc0021ac1
c000c160:	e8 b1 2a 00 00       	call   c000ec16 <KePanic(char const*)>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c16c:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000c173:	83 ec 0c             	sub    esp,0xc
c000c176:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000c179:	e8 52 27 00 00       	call   c000e8d0 <malloc>
c000c17e:	83 c4 10             	add    esp,0x10
c000c181:	89 c3                	mov    ebx,eax
c000c183:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c188:	83 ec 04             	sub    esp,0x4
c000c18b:	50                   	push   eax
c000c18c:	68 db 1a 02 c0       	push   0xc0021adb
c000c191:	53                   	push   ebx
c000c192:	e8 75 bf ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c197:	83 c4 10             	add    esp,0x10
c000c19a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000c19d:	83 ec 08             	sub    esp,0x8
c000c1a0:	6a 01                	push   0x1
c000c1a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1a5:	e8 80 bf ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000c1b0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000c1b4:	75 12                	jne    c000c1c8 <ACPI::open(int, int, void*)+0xe0>
c000c1b6:	83 ec 0c             	sub    esp,0xc
c000c1b9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1bc:	e8 c7 bf ff ff       	call   c0008188 <File::close()>
c000c1c1:	83 c4 10             	add    esp,0x10
c000c1c4:	eb 06                	jmp    c000c1cc <ACPI::open(int, int, void*)+0xe4>
c000c1c6:	66 90                	xchg   ax,ax
c000c1c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c1cc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000c1d0:	74 16                	je     c000c1e8 <ACPI::open(int, int, void*)+0x100>
c000c1d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1d7:	83 c0 08             	add    eax,0x8
c000c1da:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1e2:	ff d0                	call   eax
c000c1e4:	83 c4 10             	add    esp,0x10
c000c1e7:	90                   	nop
c000c1e8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000c1eb:	83 f0 01             	xor    eax,0x1
c000c1ee:	0f b6 c0             	movzx  eax,al
c000c1f1:	85 c0                	test   eax,eax
c000c1f3:	74 27                	je     c000c21c <ACPI::open(int, int, void*)+0x134>
c000c1f5:	83 ec 0c             	sub    esp,0xc
c000c1f8:	68 f9 1a 02 c0       	push   0xc0021af9
c000c1fd:	e8 99 03 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c202:	83 c4 10             	add    esp,0x10
c000c205:	c7 45 e8 0c 00 00 00 	mov    DWORD PTR [ebp-0x18],0xc
c000c20c:	83 ec 0c             	sub    esp,0xc
c000c20f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000c212:	e8 51 5f 00 00       	call   c0012168 <Virt::setupPageSwapping(int)>
c000c217:	83 c4 10             	add    esp,0x10
c000c21a:	66 90                	xchg   ax,ax
c000c21c:	83 ec 0c             	sub    esp,0xc
c000c21f:	68 14 1b 02 c0       	push   0xc0021b14
c000c224:	e8 72 03 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c229:	83 c4 10             	add    esp,0x10
c000c22c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c22f:	83 ec 08             	sub    esp,0x8
c000c232:	6a 13                	push   0x13
c000c234:	50                   	push   eax
c000c235:	e8 3a d1 ff ff       	call   c0009374 <getDevicesOfType(DeviceType)>
c000c23a:	83 c4 0c             	add    esp,0xc
c000c23d:	8d 76 00             	lea    esi,[esi+0x0]
c000c240:	83 ec 0c             	sub    esp,0xc
c000c243:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c246:	50                   	push   eax
c000c247:	e8 d0 3d 01 00       	call   c002001c <LinkedList<Device>::isEmpty()>
c000c24c:	83 c4 10             	add    esp,0x10
c000c24f:	83 f0 01             	xor    eax,0x1
c000c252:	0f b6 c0             	movzx  eax,al
c000c255:	85 c0                	test   eax,eax
c000c257:	0f 84 1f 01 00 00    	je     c000c37c <ACPI::open(int, int, void*)+0x294>
c000c25d:	83 ec 0c             	sub    esp,0xc
c000c260:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c263:	50                   	push   eax
c000c264:	e8 cf 3d 01 00       	call   c0020038 <LinkedList<Device>::getFirstElement()>
c000c269:	83 c4 10             	add    esp,0x10
c000c26c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c275:	50                   	push   eax
c000c276:	e8 c5 3d 01 00       	call   c0020040 <LinkedList<Device>::removeFirst()>
c000c27b:	83 c4 10             	add    esp,0x10
c000c27e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000c281:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000c284:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000c287:	b8 24 00 00 00       	mov    eax,0x24
c000c28c:	83 e0 fc             	and    eax,0xfffffffc
c000c28f:	89 c3                	mov    ebx,eax
c000c291:	b8 00 00 00 00       	mov    eax,0x0
c000c296:	66 90                	xchg   ax,ax
c000c298:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000c29f:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000c2a6:	83 c0 04             	add    eax,0x4
c000c2a9:	39 d8                	cmp    eax,ebx
c000c2ab:	72 eb                	jb     c000c298 <ACPI::open(int, int, void*)+0x1b0>
c000c2ad:	83 ec 08             	sub    esp,0x8
c000c2b0:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000c2b6:	50                   	push   eax
c000c2b7:	83 ec 24             	sub    esp,0x24
c000c2ba:	89 e1                	mov    ecx,esp
c000c2bc:	b8 24 00 00 00       	mov    eax,0x24
c000c2c1:	83 e0 fc             	and    eax,0xfffffffc
c000c2c4:	89 c3                	mov    ebx,eax
c000c2c6:	b8 00 00 00 00       	mov    eax,0x0
c000c2cb:	90                   	nop
c000c2cc:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000c2d3:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000c2d6:	83 c0 04             	add    eax,0x4
c000c2d9:	39 d8                	cmp    eax,ebx
c000c2db:	72 ef                	jb     c000c2cc <ACPI::open(int, int, void*)+0x1e4>
c000c2dd:	e8 c4 fa 00 00       	call   c001bda6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c2e2:	83 c4 30             	add    esp,0x30
c000c2e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000c2e8:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000c2ec:	0f 84 4e ff ff ff    	je     c000c240 <ACPI::open(int, int, void*)+0x158>
c000c2f2:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000c2f9:	83 ec 0c             	sub    esp,0xc
c000c2fc:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000c2ff:	e8 cc 25 00 00       	call   c000e8d0 <malloc>
c000c304:	83 c4 10             	add    esp,0x10
c000c307:	89 c3                	mov    ebx,eax
c000c309:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c30e:	83 ec 04             	sub    esp,0x4
c000c311:	50                   	push   eax
c000c312:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c315:	53                   	push   ebx
c000c316:	e8 f1 bd ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c31b:	83 c4 10             	add    esp,0x10
c000c31e:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000c321:	83 ec 0c             	sub    esp,0xc
c000c324:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c327:	e8 c2 c0 ff ff       	call   c00083ee <File::exists()>
c000c32c:	83 c4 10             	add    esp,0x10
c000c32f:	0f b6 c0             	movzx  eax,al
c000c332:	85 c0                	test   eax,eax
c000c334:	74 22                	je     c000c358 <ACPI::open(int, int, void*)+0x270>
c000c336:	83 ec 08             	sub    esp,0x8
c000c339:	6a 01                	push   0x1
c000c33b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000c33e:	e8 7f 85 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c000c343:	83 c4 10             	add    esp,0x10
c000c346:	83 ec 08             	sub    esp,0x8
c000c349:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000c34c:	50                   	push   eax
c000c34d:	e8 d1 87 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	8d 76 00             	lea    esi,[esi+0x0]
c000c358:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000c35c:	0f 84 de fe ff ff    	je     c000c240 <ACPI::open(int, int, void*)+0x158>
c000c362:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000c365:	8b 00                	mov    eax,DWORD PTR [eax]
c000c367:	83 c0 08             	add    eax,0x8
c000c36a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c36c:	83 ec 0c             	sub    esp,0xc
c000c36f:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000c372:	ff d0                	call   eax
c000c374:	83 c4 10             	add    esp,0x10
c000c377:	e9 c4 fe ff ff       	jmp    c000c240 <ACPI::open(int, int, void*)+0x158>
c000c37c:	83 ec 0c             	sub    esp,0xc
c000c37f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000c382:	50                   	push   eax
c000c383:	e8 90 3c 01 00       	call   c0020018 <LinkedList<Device>::~LinkedList()>
c000c388:	83 c4 10             	add    esp,0x10
c000c38b:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c391:	83 ec 08             	sub    esp,0x8
c000c394:	6a 01                	push   0x1
c000c396:	68 2e 1b 02 c0       	push   0xc0021b2e
c000c39b:	e8 22 85 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c000c3a0:	83 c4 10             	add    esp,0x10
c000c3a3:	83 ec 08             	sub    esp,0x8
c000c3a6:	53                   	push   ebx
c000c3a7:	50                   	push   eax
c000c3a8:	e8 76 87 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c000c3ad:	83 c4 10             	add    esp,0x10
c000c3b0:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c3b5:	85 c0                	test   eax,eax
c000c3b7:	0f 84 ef 00 00 00    	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c3bd:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c3c2:	85 c0                	test   eax,eax
c000c3c4:	0f 84 e2 00 00 00    	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c3ca:	83 ec 0c             	sub    esp,0xc
c000c3cd:	68 4b 1b 02 c0       	push   0xc0021b4b
c000c3d2:	e8 c4 01 00 00       	call   c000c59b <KeSetBootMessage(char const*)>
c000c3d7:	83 c4 10             	add    esp,0x10
c000c3da:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000c3e1:	83 ec 0c             	sub    esp,0xc
c000c3e4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000c3e7:	e8 e4 24 00 00       	call   c000e8d0 <malloc>
c000c3ec:	83 c4 10             	add    esp,0x10
c000c3ef:	89 c3                	mov    ebx,eax
c000c3f1:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c3f6:	83 ec 04             	sub    esp,0x4
c000c3f9:	50                   	push   eax
c000c3fa:	68 68 1b 02 c0       	push   0xc0021b68
c000c3ff:	53                   	push   ebx
c000c400:	e8 07 bd ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c405:	83 c4 10             	add    esp,0x10
c000c408:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000c40b:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c40f:	74 1b                	je     c000c42c <ACPI::open(int, int, void*)+0x344>
c000c411:	83 ec 0c             	sub    esp,0xc
c000c414:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c417:	e8 d2 bf ff ff       	call   c00083ee <File::exists()>
c000c41c:	83 c4 10             	add    esp,0x10
c000c41f:	0f b6 c0             	movzx  eax,al
c000c422:	85 c0                	test   eax,eax
c000c424:	74 06                	je     c000c42c <ACPI::open(int, int, void*)+0x344>
c000c426:	b0 01                	mov    al,0x1
c000c428:	eb 06                	jmp    c000c430 <ACPI::open(int, int, void*)+0x348>
c000c42a:	66 90                	xchg   ax,ax
c000c42c:	b0 00                	mov    al,0x0
c000c42e:	66 90                	xchg   ax,ax
c000c430:	0f b6 c0             	movzx  eax,al
c000c433:	85 c0                	test   eax,eax
c000c435:	74 21                	je     c000c458 <ACPI::open(int, int, void*)+0x370>
c000c437:	83 ec 08             	sub    esp,0x8
c000c43a:	6a 01                	push   0x1
c000c43c:	68 68 1b 02 c0       	push   0xc0021b68
c000c441:	e8 7c 84 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	83 ec 08             	sub    esp,0x8
c000c44c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c44f:	50                   	push   eax
c000c450:	e8 ce 86 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c000c455:	83 c4 10             	add    esp,0x10
c000c458:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c45c:	74 1e                	je     c000c47c <ACPI::open(int, int, void*)+0x394>
c000c45e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000c462:	74 18                	je     c000c47c <ACPI::open(int, int, void*)+0x394>
c000c464:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000c467:	8b 00                	mov    eax,DWORD PTR [eax]
c000c469:	83 c0 08             	add    eax,0x8
c000c46c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c46e:	83 ec 0c             	sub    esp,0xc
c000c471:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000c474:	ff d0                	call   eax
c000c476:	83 c4 10             	add    esp,0x10
c000c479:	8d 76 00             	lea    esi,[esi+0x0]
c000c47c:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c481:	83 ec 08             	sub    esp,0x8
c000c484:	68 85 1b 02 c0       	push   0xc0021b85
c000c489:	50                   	push   eax
c000c48a:	e8 45 f3 ff ff       	call   c000b7d4 <findDataTable(unsigned char*, char*)>
c000c48f:	83 c4 10             	add    esp,0x10
c000c492:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000c495:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000c499:	74 11                	je     c000c4ac <ACPI::open(int, int, void*)+0x3c4>
c000c49b:	83 ec 08             	sub    esp,0x8
c000c49e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000c4a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000c4a4:	e8 27 fc ff ff       	call   c000c0d0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c4a9:	83 c4 10             	add    esp,0x10
c000c4ac:	b8 00 00 00 00       	mov    eax,0x0
c000c4b1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c4b4:	c9                   	leave  
c000c4b5:	c3                   	ret    

c000c4b6 <KeInitialiseAtexit()>:
c000c4b6:	83 ec 10             	sub    esp,0x10
c000c4b9:	6a 60                	push   0x60
c000c4bb:	6a 00                	push   0x0
c000c4bd:	68 00 9d 02 c0       	push   0xc0029d00
c000c4c2:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c4cc:	e8 1f 40 ff ff       	call   c00004f0 <memset>
c000c4d1:	83 c4 1c             	add    esp,0x1c
c000c4d4:	c3                   	ret    

c000c4d5 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c4d5:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c4da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c4de:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c4e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4e9:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c4f0:	40                   	inc    eax
c000c4f1:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c4f6:	83 f8 17             	cmp    eax,0x17
c000c4f9:	7e 0d                	jle    c000c508 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c4fb:	c7 44 24 04 30 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c30
c000c503:	e9 0e 27 00 00       	jmp    c000ec16 <KePanic(char const*)>
c000c508:	c3                   	ret    

c000c509 <KeExecuteAtexit()>:
c000c509:	53                   	push   ebx
c000c50a:	31 db                	xor    ebx,ebx
c000c50c:	83 ec 08             	sub    esp,0x8
c000c50f:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c515:	7e 50                	jle    c000c567 <KeExecuteAtexit()+0x5e>
c000c517:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c51e:	85 c0                	test   eax,eax
c000c520:	74 42                	je     c000c564 <KeExecuteAtexit()+0x5b>
c000c522:	51                   	push   ecx
c000c523:	50                   	push   eax
c000c524:	53                   	push   ebx
c000c525:	68 49 1c 02 c0       	push   0xc0021c49
c000c52a:	e8 1f aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c52f:	58                   	pop    eax
c000c530:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c537:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c53e:	c7 04 24 6b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c6b
c000c545:	e8 04 aa ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c54a:	c7 04 24 eb 1f 02 c0 	mov    DWORD PTR [esp],0xc0021feb
c000c551:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c55c:	e8 ed a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c561:	83 c4 10             	add    esp,0x10
c000c564:	43                   	inc    ebx
c000c565:	eb a8                	jmp    c000c50f <KeExecuteAtexit()+0x6>
c000c567:	83 c4 08             	add    esp,0x8
c000c56a:	5b                   	pop    ebx
c000c56b:	c3                   	ret    

c000c56c <KeDisplaySplashScreen()>:
c000c56c:	53                   	push   ebx
c000c56d:	bb 01 00 00 00       	mov    ebx,0x1
c000c572:	83 ec 08             	sub    esp,0x8
c000c575:	43                   	inc    ebx
c000c576:	0f be 83 6e 1c 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde392]
c000c57d:	85 c0                	test   eax,eax
c000c57f:	74 15                	je     c000c596 <KeDisplaySplashScreen()+0x2a>
c000c581:	83 ec 0c             	sub    esp,0xc
c000c584:	6a 01                	push   0x1
c000c586:	53                   	push   ebx
c000c587:	6a 00                	push   0x0
c000c589:	6a 0f                	push   0xf
c000c58b:	50                   	push   eax
c000c58c:	e8 7b cf 00 00       	call   c001950c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c591:	83 c4 20             	add    esp,0x20
c000c594:	eb df                	jmp    c000c575 <KeDisplaySplashScreen()+0x9>
c000c596:	83 c4 08             	add    esp,0x8
c000c599:	5b                   	pop    ebx
c000c59a:	c3                   	ret    

c000c59b <KeSetBootMessage(char const*)>:
c000c59b:	57                   	push   edi
c000c59c:	56                   	push   esi
c000c59d:	53                   	push   ebx
c000c59e:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c5a4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c5ab:	68 9e 00 00 00       	push   0x9e
c000c5b0:	6a 00                	push   0x0
c000c5b2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c5b6:	56                   	push   esi
c000c5b7:	e8 34 3f ff ff       	call   c00004f0 <memset>
c000c5bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c5bf:	e8 bc 3f ff ff       	call   c0000580 <strlen>
c000c5c4:	ba 50 00 00 00       	mov    edx,0x50
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	31 c9                	xor    ecx,ecx
c000c5ce:	29 c2                	sub    edx,eax
c000c5d0:	83 e2 fe             	and    edx,0xfffffffe
c000c5d3:	01 f2                	add    edx,esi
c000c5d5:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c5da:	84 c0                	test   al,al
c000c5dc:	74 0a                	je     c000c5e8 <KeSetBootMessage(char const*)+0x4d>
c000c5de:	80 cc 07             	or     ah,0x7
c000c5e1:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c5e5:	41                   	inc    ecx
c000c5e6:	eb ed                	jmp    c000c5d5 <KeSetBootMessage(char const*)+0x3a>
c000c5e8:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c5ed:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c5f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5f4:	50                   	push   eax
c000c5f5:	50                   	push   eax
c000c5f6:	53                   	push   ebx
c000c5f7:	68 83 1c 02 c0       	push   0xc0021c83
c000c5fc:	e8 4d a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c601:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c607:	5b                   	pop    ebx
c000c608:	5e                   	pop    esi
c000c609:	5f                   	pop    edi
c000c60a:	c3                   	ret    

c000c60b <__cxa_atexit>:
c000c60b:	31 c0                	xor    eax,eax
c000c60d:	c3                   	ret    

c000c60e <__cxa_finalize>:
c000c60e:	c3                   	ret    

c000c60f <__stack_chk_fail>:
c000c60f:	55                   	push   ebp
c000c610:	89 e5                	mov    ebp,esp
c000c612:	83 ec 10             	sub    esp,0x10
c000c615:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c618:	68 91 1c 02 c0       	push   0xc0021c91
c000c61d:	e8 2c a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c622:	58                   	pop    eax
c000c623:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c626:	5a                   	pop    edx
c000c627:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c62a:	68 91 1c 02 c0       	push   0xc0021c91
c000c62f:	e8 1a a9 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c634:	c7 04 24 99 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c99
c000c63b:	e8 d6 25 00 00       	call   c000ec16 <KePanic(char const*)>
c000c640:	83 c4 10             	add    esp,0x10
c000c643:	c9                   	leave  
c000c644:	c3                   	ret    

c000c645 <__cxa_pure_virtual>:
c000c645:	83 ec 18             	sub    esp,0x18
c000c648:	68 b1 1c 02 c0       	push   0xc0021cb1
c000c64d:	e8 c4 25 00 00       	call   c000ec16 <KePanic(char const*)>
c000c652:	83 c4 1c             	add    esp,0x1c
c000c655:	c3                   	ret    

c000c656 <operator new[](unsigned long)>:
c000c656:	e9 75 22 00 00       	jmp    c000e8d0 <malloc>

c000c65b <operator delete(void*, unsigned long)>:
c000c65b:	e9 90 22 00 00       	jmp    c000e8f0 <rfree>

c000c660 <operator delete[](void*)>:
c000c660:	e9 8b 22 00 00       	jmp    c000e8f0 <rfree>

c000c665 <operator delete[](void*, unsigned long)>:
c000c665:	e9 86 22 00 00       	jmp    c000e8f0 <rfree>
c000c66a:	66 90                	xchg   ax,ax

c000c66c <CUnlockScheduler>:
c000c66c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000c674:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c679:	85 c0                	test   eax,eax
c000c67b:	75 03                	jne    c000c680 <CUnlockScheduler+0x14>
c000c67d:	fb                   	sti    
c000c67e:	66 90                	xchg   ax,ax
c000c680:	90                   	nop
c000c681:	c3                   	ret    
c000c682:	66 90                	xchg   ax,ax

c000c684 <CLockScheduler>:
c000c684:	fa                   	cli    
c000c685:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c68a:	83 c0 01             	add    eax,0x1
c000c68d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c692:	90                   	nop
c000c693:	c3                   	ret    

c000c694 <CPrintf>:
c000c694:	83 ec 0c             	sub    esp,0xc
c000c697:	83 ec 08             	sub    esp,0x8
c000c69a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c69e:	68 c4 1c 02 c0       	push   0xc0021cc4
c000c6a3:	e8 a6 a8 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000c6a8:	83 c4 10             	add    esp,0x10
c000c6ab:	90                   	nop
c000c6ac:	83 c4 0c             	add    esp,0xc
c000c6af:	c3                   	ret    

c000c6b0 <CmOpen(char const*)>:
c000c6b0:	57                   	push   edi
c000c6b1:	56                   	push   esi
c000c6b2:	53                   	push   ebx
c000c6b3:	83 ec 1c             	sub    esp,0x1c
c000c6b6:	6a 30                	push   0x30
c000c6b8:	e8 13 22 00 00       	call   c000e8d0 <malloc>
c000c6bd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c6c4:	89 c3                	mov    ebx,eax
c000c6c6:	e8 05 22 00 00       	call   c000e8d0 <malloc>
c000c6cb:	83 c4 0c             	add    esp,0xc
c000c6ce:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c6d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c6d8:	89 c6                	mov    esi,eax
c000c6da:	50                   	push   eax
c000c6db:	e8 2c ba ff ff       	call   c000810c <File::File(char const*, Process*)>
c000c6e0:	83 c4 0c             	add    esp,0xc
c000c6e3:	89 33                	mov    DWORD PTR [ebx],esi
c000c6e5:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c6e9:	50                   	push   eax
c000c6ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c6ee:	50                   	push   eax
c000c6ef:	56                   	push   esi
c000c6f0:	e8 37 bd ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c000c6f5:	5a                   	pop    edx
c000c6f6:	59                   	pop    ecx
c000c6f7:	6a 01                	push   0x1
c000c6f9:	ff 33                	push   DWORD PTR [ebx]
c000c6fb:	e8 2a ba ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c700:	5e                   	pop    esi
c000c701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c705:	e8 c6 21 00 00       	call   c000e8d0 <malloc>
c000c70a:	5a                   	pop    edx
c000c70b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c70f:	89 c7                	mov    edi,eax
c000c711:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c713:	8b 10                	mov    edx,DWORD PTR [eax]
c000c715:	56                   	push   esi
c000c716:	57                   	push   edi
c000c717:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c71b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c71f:	50                   	push   eax
c000c720:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c723:	83 c4 14             	add    esp,0x14
c000c726:	ff 33                	push   DWORD PTR [ebx]
c000c728:	e8 5b ba ff ff       	call   c0008188 <File::close()>
c000c72d:	59                   	pop    ecx
c000c72e:	58                   	pop    eax
c000c72f:	6a 13                	push   0x13
c000c731:	ff 33                	push   DWORD PTR [ebx]
c000c733:	e8 f2 b9 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000c738:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c73a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c73c:	89 34 24             	mov    DWORD PTR [esp],esi
c000c73f:	57                   	push   edi
c000c740:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c744:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c748:	50                   	push   eax
c000c749:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c74c:	83 c4 14             	add    esp,0x14
c000c74f:	57                   	push   edi
c000c750:	e8 8b 21 00 00       	call   c000e8e0 <free>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c75b:	75 10                	jne    c000c76d <CmOpen(char const*)+0xbd>
c000c75d:	83 ec 0c             	sub    esp,0xc
c000c760:	68 c7 1c 02 c0       	push   0xc0021cc7
c000c765:	e8 ac 24 00 00       	call   c000ec16 <KePanic(char const*)>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	50                   	push   eax
c000c76e:	6a 00                	push   0x0
c000c770:	6a 00                	push   0x0
c000c772:	ff 33                	push   DWORD PTR [ebx]
c000c774:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c777:	e8 6c ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c77c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c77e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c780:	89 34 24             	mov    DWORD PTR [esp],esi
c000c783:	57                   	push   edi
c000c784:	6a 00                	push   0x0
c000c786:	6a 2b                	push   0x2b
c000c788:	50                   	push   eax
c000c789:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c78c:	83 c4 1c             	add    esp,0x1c
c000c78f:	6a 00                	push   0x0
c000c791:	6a 00                	push   0x0
c000c793:	ff 33                	push   DWORD PTR [ebx]
c000c795:	e8 4e ba ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c79a:	83 c4 0c             	add    esp,0xc
c000c79d:	6a 08                	push   0x8
c000c79f:	68 d8 1c 02 c0       	push   0xc0021cd8
c000c7a4:	57                   	push   edi
c000c7a5:	e8 d6 3b ff ff       	call   c0000380 <memcmp>
c000c7aa:	83 c4 10             	add    esp,0x10
c000c7ad:	85 c0                	test   eax,eax
c000c7af:	74 10                	je     c000c7c1 <CmOpen(char const*)+0x111>
c000c7b1:	83 ec 0c             	sub    esp,0xc
c000c7b4:	68 e1 1c 02 c0       	push   0xc0021ce1
c000c7b9:	e8 58 24 00 00       	call   c000ec16 <KePanic(char const*)>
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c7c5:	83 c4 10             	add    esp,0x10
c000c7c8:	89 d8                	mov    eax,ebx
c000c7ca:	5b                   	pop    ebx
c000c7cb:	5e                   	pop    esi
c000c7cc:	5f                   	pop    edi
c000c7cd:	c3                   	ret    

c000c7ce <CmClose(Reghive_Tag*)>:
c000c7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7d2:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c7d6:	74 0b                	je     c000c7e3 <CmClose(Reghive_Tag*)+0x15>
c000c7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c7de:	e9 a5 b9 ff ff       	jmp    c0008188 <File::close()>
c000c7e3:	c3                   	ret    

c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c7e4:	53                   	push   ebx
c000c7e5:	83 ec 18             	sub    esp,0x18
c000c7e8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c7ec:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c7f0:	74 29                	je     c000c81b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c7f2:	50                   	push   eax
c000c7f3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c7f8:	99                   	cdq    
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	ff 33                	push   DWORD PTR [ebx]
c000c7fd:	e8 e6 b9 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c802:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c804:	5a                   	pop    edx
c000c805:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c809:	8b 10                	mov    edx,DWORD PTR [eax]
c000c80b:	51                   	push   ecx
c000c80c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c810:	6a 00                	push   0x0
c000c812:	6a 2b                	push   0x2b
c000c814:	50                   	push   eax
c000c815:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c818:	83 c4 20             	add    esp,0x20
c000c81b:	83 c4 18             	add    esp,0x18
c000c81e:	5b                   	pop    ebx
c000c81f:	c3                   	ret    

c000c820 <CmGetString(Reghive_Tag*, int, char*)>:
c000c820:	55                   	push   ebp
c000c821:	57                   	push   edi
c000c822:	56                   	push   esi
c000c823:	53                   	push   ebx
c000c824:	31 db                	xor    ebx,ebx
c000c826:	83 ec 70             	sub    esp,0x70
c000c829:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c82d:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c834:	50                   	push   eax
c000c835:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c83c:	55                   	push   ebp
c000c83d:	e8 a2 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c842:	83 c4 10             	add    esp,0x10
c000c845:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c84a:	c1 e0 08             	shl    eax,0x8
c000c84d:	89 c2                	mov    edx,eax
c000c84f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c854:	09 d0                	or     eax,edx
c000c856:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c85b:	c1 e0 08             	shl    eax,0x8
c000c85e:	09 d0                	or     eax,edx
c000c860:	74 25                	je     c000c887 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c862:	52                   	push   edx
c000c863:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c867:	52                   	push   edx
c000c868:	6b fb 0d             	imul   edi,ebx,0xd
c000c86b:	50                   	push   eax
c000c86c:	55                   	push   ebp
c000c86d:	e8 72 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c872:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c876:	b9 27 00 00 00       	mov    ecx,0x27
c000c87b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c882:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c884:	83 c4 10             	add    esp,0x10
c000c887:	83 c3 03             	add    ebx,0x3
c000c88a:	83 fb 15             	cmp    ebx,0x15
c000c88d:	75 b6                	jne    c000c845 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c88f:	83 c4 6c             	add    esp,0x6c
c000c892:	5b                   	pop    ebx
c000c893:	5e                   	pop    esi
c000c894:	5f                   	pop    edi
c000c895:	5d                   	pop    ebp
c000c896:	c3                   	ret    

c000c897 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c897:	83 ec 40             	sub    esp,0x40
c000c89a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8a7:	e8 38 ff ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	83 c8 ff             	or     eax,0xffffffff
c000c8b2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c8b7:	75 19                	jne    c000c8d2 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c8b9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c8be:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c8c3:	c1 e0 08             	shl    eax,0x8
c000c8c6:	09 c2                	or     edx,eax
c000c8c8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c8cd:	c1 e0 10             	shl    eax,0x10
c000c8d0:	09 d0                	or     eax,edx
c000c8d2:	83 c4 3c             	add    esp,0x3c
c000c8d5:	c3                   	ret    

c000c8d6 <CmGetNext(Reghive_Tag*, int)>:
c000c8d6:	83 ec 40             	sub    esp,0x40
c000c8d9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c8dd:	50                   	push   eax
c000c8de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c8e6:	e8 f9 fe ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8eb:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c8f0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c8f5:	c1 e0 08             	shl    eax,0x8
c000c8f8:	09 c2                	or     edx,eax
c000c8fa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c8ff:	83 c4 4c             	add    esp,0x4c
c000c902:	c1 e0 10             	shl    eax,0x10
c000c905:	09 d0                	or     eax,edx
c000c907:	c3                   	ret    

c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c908:	53                   	push   ebx
c000c909:	83 ec 18             	sub    esp,0x18
c000c90c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c910:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c914:	74 29                	je     c000c93f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c916:	50                   	push   eax
c000c917:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c91c:	99                   	cdq    
c000c91d:	52                   	push   edx
c000c91e:	50                   	push   eax
c000c91f:	ff 33                	push   DWORD PTR [ebx]
c000c921:	e8 c2 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c926:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c928:	5a                   	pop    edx
c000c929:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c92d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c92f:	51                   	push   ecx
c000c930:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c934:	6a 00                	push   0x0
c000c936:	6a 2b                	push   0x2b
c000c938:	50                   	push   eax
c000c939:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c93c:	83 c4 20             	add    esp,0x20
c000c93f:	83 c4 18             	add    esp,0x18
c000c942:	5b                   	pop    ebx
c000c943:	c3                   	ret    

c000c944 <CmFreeExtent(Reghive_Tag*, int)>:
c000c944:	53                   	push   ebx
c000c945:	83 ec 3c             	sub    esp,0x3c
c000c948:	6a 2b                	push   0x2b
c000c94a:	6a 00                	push   0x0
c000c94c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000c950:	53                   	push   ebx
c000c951:	e8 9a 3b ff ff       	call   c00004f0 <memset>
c000c956:	83 c4 0c             	add    esp,0xc
c000c959:	53                   	push   ebx
c000c95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c962:	e8 a1 ff ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c967:	83 c4 48             	add    esp,0x48
c000c96a:	5b                   	pop    ebx
c000c96b:	c3                   	ret    

c000c96c <CmUpdateHeader(Reghive_Tag*)>:
c000c96c:	83 ec 0c             	sub    esp,0xc
c000c96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c973:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c977:	74 10                	je     c000c989 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000c979:	52                   	push   edx
c000c97a:	8d 50 05             	lea    edx,[eax+0x5]
c000c97d:	52                   	push   edx
c000c97e:	6a 00                	push   0x0
c000c980:	50                   	push   eax
c000c981:	e8 82 ff ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	83 c4 0c             	add    esp,0xc
c000c98c:	c3                   	ret    

c000c98d <CmExpand(Reghive_Tag*, int)>:
c000c98d:	55                   	push   ebp
c000c98e:	57                   	push   edi
c000c98f:	83 cf ff             	or     edi,0xffffffff
c000c992:	56                   	push   esi
c000c993:	53                   	push   ebx
c000c994:	83 ec 3c             	sub    esp,0x3c
c000c997:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000c99b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000c99f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9a3:	74 59                	je     c000c9fe <CmExpand(Reghive_Tag*, int)+0x71>
c000c9a5:	50                   	push   eax
c000c9a6:	31 d2                	xor    edx,edx
c000c9a8:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000c9ac:	31 ff                	xor    edi,edi
c000c9ae:	52                   	push   edx
c000c9af:	50                   	push   eax
c000c9b0:	ff 33                	push   DWORD PTR [ebx]
c000c9b2:	e8 31 b8 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000c9b7:	83 c4 0c             	add    esp,0xc
c000c9ba:	6a 2b                	push   0x2b
c000c9bc:	6a 00                	push   0x0
c000c9be:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c000c9c2:	55                   	push   ebp
c000c9c3:	e8 28 3b ff ff       	call   c00004f0 <memset>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	39 f7                	cmp    edi,esi
c000c9cd:	7d 1b                	jge    c000c9ea <CmExpand(Reghive_Tag*, int)+0x5d>
c000c9cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9d1:	83 ec 0c             	sub    esp,0xc
c000c9d4:	47                   	inc    edi
c000c9d5:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000c9d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9db:	51                   	push   ecx
c000c9dc:	55                   	push   ebp
c000c9dd:	6a 00                	push   0x0
c000c9df:	6a 2b                	push   0x2b
c000c9e1:	50                   	push   eax
c000c9e2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9e5:	83 c4 20             	add    esp,0x20
c000c9e8:	eb e1                	jmp    c000c9cb <CmExpand(Reghive_Tag*, int)+0x3e>
c000c9ea:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c000c9ed:	83 ec 0c             	sub    esp,0xc
c000c9f0:	01 fe                	add    esi,edi
c000c9f2:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c000c9f5:	53                   	push   ebx
c000c9f6:	e8 71 ff ff ff       	call   c000c96c <CmUpdateHeader(Reghive_Tag*)>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	83 c4 3c             	add    esp,0x3c
c000ca01:	89 f8                	mov    eax,edi
c000ca03:	5b                   	pop    ebx
c000ca04:	5e                   	pop    esi
c000ca05:	5f                   	pop    edi
c000ca06:	5d                   	pop    ebp
c000ca07:	c3                   	ret    

c000ca08 <CmFindUnusedExtent(Reghive_Tag*)>:
c000ca08:	55                   	push   ebp
c000ca09:	57                   	push   edi
c000ca0a:	56                   	push   esi
c000ca0b:	53                   	push   ebx
c000ca0c:	83 cb ff             	or     ebx,0xffffffff
c000ca0f:	83 ec 1c             	sub    esp,0x1c
c000ca12:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca16:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000ca1a:	74 68                	je     c000ca84 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca1c:	51                   	push   ecx
c000ca1d:	be 2b 00 00 00       	mov    esi,0x2b
c000ca22:	6a 00                	push   0x0
c000ca24:	31 ff                	xor    edi,edi
c000ca26:	6a 00                	push   0x0
c000ca28:	31 db                	xor    ebx,ebx
c000ca2a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca2d:	e8 b6 b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000ca38:	76 3b                	jbe    c000ca75 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000ca3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca3d:	83 ec 0c             	sub    esp,0xc
c000ca40:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000ca44:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca46:	51                   	push   ecx
c000ca47:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000ca4b:	51                   	push   ecx
c000ca4c:	6a 00                	push   0x0
c000ca4e:	6a 01                	push   0x1
c000ca50:	50                   	push   eax
c000ca51:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca54:	83 c4 20             	add    esp,0x20
c000ca57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ca5c:	74 26                	je     c000ca84 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000ca5e:	52                   	push   edx
c000ca5f:	43                   	inc    ebx
c000ca60:	57                   	push   edi
c000ca61:	56                   	push   esi
c000ca62:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ca65:	e8 7e b7 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c000ca6a:	83 c6 2b             	add    esi,0x2b
c000ca6d:	83 d7 00             	adc    edi,0x0
c000ca70:	83 c4 10             	add    esp,0x10
c000ca73:	eb c0                	jmp    c000ca35 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000ca75:	50                   	push   eax
c000ca76:	50                   	push   eax
c000ca77:	6a 40                	push   0x40
c000ca79:	55                   	push   ebp
c000ca7a:	e8 0e ff ff ff       	call   c000c98d <CmExpand(Reghive_Tag*, int)>
c000ca7f:	83 c4 10             	add    esp,0x10
c000ca82:	89 c3                	mov    ebx,eax
c000ca84:	83 c4 1c             	add    esp,0x1c
c000ca87:	89 d8                	mov    eax,ebx
c000ca89:	5b                   	pop    ebx
c000ca8a:	5e                   	pop    esi
c000ca8b:	5f                   	pop    edi
c000ca8c:	5d                   	pop    ebp
c000ca8d:	c3                   	ret    

c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000ca8e:	55                   	push   ebp
c000ca8f:	57                   	push   edi
c000ca90:	56                   	push   esi
c000ca91:	53                   	push   ebx
c000ca92:	81 ec 88 00 00 00    	sub    esp,0x88
c000ca98:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000ca9f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000caa6:	e8 5d ff ff ff       	call   c000ca08 <CmFindUnusedExtent(Reghive_Tag*)>
c000caab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000caaf:	83 c4 0c             	add    esp,0xc
c000cab2:	6a 2b                	push   0x2b
c000cab4:	6a 00                	push   0x0
c000cab6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000caba:	55                   	push   ebp
c000cabb:	e8 30 3a ff ff       	call   c00004f0 <memset>
c000cac0:	83 c4 10             	add    esp,0x10
c000cac3:	85 db                	test   ebx,ebx
c000cac5:	74 12                	je     c000cad9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cac7:	51                   	push   ecx
c000cac8:	55                   	push   ebp
c000cac9:	53                   	push   ebx
c000caca:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cad1:	e8 0e fd ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cad6:	83 c4 10             	add    esp,0x10
c000cad9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cadd:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cae4:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cae9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000caeb:	85 db                	test   ebx,ebx
c000caed:	74 49                	je     c000cb38 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000caef:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000caf4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000caf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cafd:	c1 e0 08             	shl    eax,0x8
c000cb00:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cb06:	09 c8                	or     eax,ecx
c000cb08:	74 11                	je     c000cb1b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cb0a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cb0e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cb12:	c1 e8 10             	shr    eax,0x10
c000cb15:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cb19:	eb 0f                	jmp    c000cb2a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cb1b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb20:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb25:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb2a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cb2e:	c1 ea 08             	shr    edx,0x8
c000cb31:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cb36:	eb 0f                	jmp    c000cb47 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cb38:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cb3d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cb42:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cb47:	52                   	push   edx
c000cb48:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cb4c:	50                   	push   eax
c000cb4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb51:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb58:	e8 ab fd ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb5d:	83 c4 10             	add    esp,0x10
c000cb60:	85 db                	test   ebx,ebx
c000cb62:	74 12                	je     c000cb76 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cb64:	50                   	push   eax
c000cb65:	55                   	push   ebp
c000cb66:	53                   	push   ebx
c000cb67:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb6e:	e8 95 fd ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb7a:	83 c4 7c             	add    esp,0x7c
c000cb7d:	5b                   	pop    ebx
c000cb7e:	5e                   	pop    esi
c000cb7f:	5f                   	pop    edi
c000cb80:	5d                   	pop    ebp
c000cb81:	c3                   	ret    

c000cb82 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cb82:	55                   	push   ebp
c000cb83:	57                   	push   edi
c000cb84:	56                   	push   esi
c000cb85:	53                   	push   ebx
c000cb86:	bb 27 00 00 00       	mov    ebx,0x27
c000cb8b:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb91:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c000cb98:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cb9f:	e8 dc 39 ff ff       	call   c0000580 <strlen>
c000cba4:	8d 48 26             	lea    ecx,[eax+0x26]
c000cba7:	89 c8                	mov    eax,ecx
c000cba9:	99                   	cdq    
c000cbaa:	f7 fb                	idiv   ebx
c000cbac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cbb0:	83 c4 10             	add    esp,0x10
c000cbb3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cbb9:	7e 10                	jle    c000cbcb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cbbb:	83 ec 0c             	sub    esp,0xc
c000cbbe:	68 f2 1c 02 c0       	push   0xc0021cf2
c000cbc3:	e8 4e 20 00 00       	call   c000ec16 <KePanic(char const*)>
c000cbc8:	83 c4 10             	add    esp,0x10
c000cbcb:	53                   	push   ebx
c000cbcc:	31 ed                	xor    ebp,ebp
c000cbce:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cbd2:	53                   	push   ebx
c000cbd3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cbda:	57                   	push   edi
c000cbdb:	e8 04 fc ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cbe0:	83 c4 10             	add    esp,0x10
c000cbe3:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c000cbe7:	89 f0                	mov    eax,esi
c000cbe9:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c000cbed:	c1 e0 08             	shl    eax,0x8
c000cbf0:	09 c6                	or     esi,eax
c000cbf2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cbf6:	c1 e6 08             	shl    esi,0x8
c000cbf9:	09 c6                	or     esi,eax
c000cbfb:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000cbff:	7e 72                	jle    c000cc73 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c000cc01:	85 f6                	test   esi,esi
c000cc03:	75 25                	jne    c000cc2a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cc05:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cc0a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cc0e:	50                   	push   eax
c000cc0f:	6a 00                	push   0x0
c000cc11:	6a 00                	push   0x0
c000cc13:	57                   	push   edi
c000cc14:	e8 75 fe ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cc19:	83 c4 10             	add    esp,0x10
c000cc1c:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cc1f:	89 c6                	mov    esi,eax
c000cc21:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cc24:	c1 f8 10             	sar    eax,0x10
c000cc27:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cc2a:	51                   	push   ecx
c000cc2b:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc2f:	52                   	push   edx
c000cc30:	56                   	push   esi
c000cc31:	57                   	push   edi
c000cc32:	e8 ad fb ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc37:	83 c4 0c             	add    esp,0xc
c000cc3a:	6a 27                	push   0x27
c000cc3c:	6a 00                	push   0x0
c000cc3e:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc42:	51                   	push   ecx
c000cc43:	e8 a8 38 ff ff       	call   c00004f0 <memset>
c000cc48:	6b c5 27             	imul   eax,ebp,0x27
c000cc4b:	83 c4 0c             	add    esp,0xc
c000cc4e:	6a 27                	push   0x27
c000cc50:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cc57:	50                   	push   eax
c000cc58:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cc5c:	51                   	push   ecx
c000cc5d:	e8 2e 3a ff ff       	call   c0000690 <strncpy>
c000cc62:	83 c4 0c             	add    esp,0xc
c000cc65:	8d 54 24 49          	lea    edx,[esp+0x49]
c000cc69:	52                   	push   edx
c000cc6a:	56                   	push   esi
c000cc6b:	57                   	push   edi
c000cc6c:	e8 97 fc ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc71:	eb 19                	jmp    c000cc8c <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c000cc73:	85 f6                	test   esi,esi
c000cc75:	74 18                	je     c000cc8f <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c000cc77:	52                   	push   edx
c000cc78:	52                   	push   edx
c000cc79:	56                   	push   esi
c000cc7a:	57                   	push   edi
c000cc7b:	e8 c4 fc ff ff       	call   c000c944 <CmFreeExtent(Reghive_Tag*, int)>
c000cc80:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cc84:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cc88:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	45                   	inc    ebp
c000cc90:	83 c3 03             	add    ebx,0x3
c000cc93:	83 fd 07             	cmp    ebp,0x7
c000cc96:	0f 85 47 ff ff ff    	jne    c000cbe3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cc9c:	50                   	push   eax
c000cc9d:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cca1:	50                   	push   eax
c000cca2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cca9:	57                   	push   edi
c000ccaa:	e8 59 fc ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccaf:	81 c4 8c 00 00 00    	add    esp,0x8c
c000ccb5:	5b                   	pop    ebx
c000ccb6:	5e                   	pop    esi
c000ccb7:	5f                   	pop    edi
c000ccb8:	5d                   	pop    ebp
c000ccb9:	c3                   	ret    

c000ccba <CmGetMatch(char*, char*, bool, bool*)>:
c000ccba:	56                   	push   esi
c000ccbb:	53                   	push   ebx
c000ccbc:	50                   	push   eax
c000ccbd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccc2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ccc6:	74 25                	je     c000cced <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000ccc8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cccb:	31 db                	xor    ebx,ebx
c000cccd:	50                   	push   eax
c000ccce:	50                   	push   eax
c000cccf:	8d 04 9d c0 3a 02 c0 	lea    eax,[ebx*4-0x3ffdc540]
c000ccd6:	50                   	push   eax
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	e8 a0 3a ff ff       	call   c0000780 <strcmp>
c000cce0:	83 c4 10             	add    esp,0x10
c000cce3:	85 c0                	test   eax,eax
c000cce5:	74 2e                	je     c000cd15 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cce7:	43                   	inc    ebx
c000cce8:	83 fb 3f             	cmp    ebx,0x3f
c000cceb:	75 e0                	jne    c000cccd <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cced:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ccf0:	31 db                	xor    ebx,ebx
c000ccf2:	51                   	push   ecx
c000ccf3:	51                   	push   ecx
c000ccf4:	8d 04 9d c0 3a 02 c0 	lea    eax,[ebx*4-0x3ffdc540]
c000ccfb:	50                   	push   eax
c000ccfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cd00:	e8 7b 3a ff ff       	call   c0000780 <strcmp>
c000cd05:	83 c4 10             	add    esp,0x10
c000cd08:	85 c0                	test   eax,eax
c000cd0a:	74 09                	je     c000cd15 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd0c:	43                   	inc    ebx
c000cd0d:	83 fb 3f             	cmp    ebx,0x3f
c000cd10:	75 e0                	jne    c000ccf2 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cd12:	83 cb ff             	or     ebx,0xffffffff
c000cd15:	5a                   	pop    edx
c000cd16:	89 d8                	mov    eax,ebx
c000cd18:	5b                   	pop    ebx
c000cd19:	5e                   	pop    esi
c000cd1a:	c3                   	ret    

c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cd1b:	55                   	push   ebp
c000cd1c:	31 c0                	xor    eax,eax
c000cd1e:	57                   	push   edi
c000cd1f:	56                   	push   esi
c000cd20:	53                   	push   ebx
c000cd21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd25:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cd2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd31:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cd33:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cd36:	83 fd 1f             	cmp    ebp,0x1f
c000cd39:	7f 0b                	jg     c000cd46 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cd3b:	0f b6 c2             	movzx  eax,dl
c000cd3e:	d3 e0                	shl    eax,cl
c000cd40:	09 07                	or     DWORD PTR [edi],eax
c000cd42:	b0 01                	mov    al,0x1
c000cd44:	01 33                	add    DWORD PTR [ebx],esi
c000cd46:	5b                   	pop    ebx
c000cd47:	5e                   	pop    esi
c000cd48:	5f                   	pop    edi
c000cd49:	5d                   	pop    ebp
c000cd4a:	c3                   	ret    

c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cd4b:	57                   	push   edi
c000cd4c:	56                   	push   esi
c000cd4d:	53                   	push   ebx
c000cd4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000cd56:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000cd5a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd5e:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000cd60:	7c 17                	jl     c000cd79 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000cd62:	8b 17                	mov    edx,DWORD PTR [edi]
c000cd64:	b8 01 00 00 00       	mov    eax,0x1
c000cd69:	d3 e0                	shl    eax,cl
c000cd6b:	48                   	dec    eax
c000cd6c:	21 d0                	and    eax,edx
c000cd6e:	d3 ea                	shr    edx,cl
c000cd70:	89 17                	mov    DWORD PTR [edi],edx
c000cd72:	29 0b                	sub    DWORD PTR [ebx],ecx
c000cd74:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd77:	eb 05                	jmp    c000cd7e <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000cd79:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cd7c:	31 c0                	xor    eax,eax
c000cd7e:	5b                   	pop    ebx
c000cd7f:	5e                   	pop    esi
c000cd80:	5f                   	pop    edi
c000cd81:	c3                   	ret    

c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000cd82:	83 ec 40             	sub    esp,0x40
c000cd85:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cd89:	50                   	push   eax
c000cd8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd92:	e8 4d fa ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cd97:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000cd9b:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000cd9f:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000cda3:	89 10                	mov    DWORD PTR [eax],edx
c000cda5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000cda8:	83 c4 4c             	add    esp,0x4c
c000cdab:	c3                   	ret    

c000cdac <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000cdac:	55                   	push   ebp
c000cdad:	57                   	push   edi
c000cdae:	56                   	push   esi
c000cdaf:	53                   	push   ebx
c000cdb0:	83 ec 40             	sub    esp,0x40
c000cdb3:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000cdb7:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000cdbb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000cdbf:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cdc3:	53                   	push   ebx
c000cdc4:	56                   	push   esi
c000cdc5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cdc9:	e8 16 fa ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cdce:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000cdd2:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000cdd6:	83 c4 0c             	add    esp,0xc
c000cdd9:	53                   	push   ebx
c000cdda:	56                   	push   esi
c000cddb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000cddf:	e8 24 fb ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cde4:	83 c4 4c             	add    esp,0x4c
c000cde7:	5b                   	pop    ebx
c000cde8:	5e                   	pop    esi
c000cde9:	5f                   	pop    edi
c000cdea:	5d                   	pop    ebp
c000cdeb:	c3                   	ret    

c000cdec <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cdec:	55                   	push   ebp
c000cded:	57                   	push   edi
c000cdee:	56                   	push   esi
c000cdef:	31 f6                	xor    esi,esi
c000cdf1:	53                   	push   ebx
c000cdf2:	31 db                	xor    ebx,ebx
c000cdf4:	83 ec 40             	sub    esp,0x40
c000cdf7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cdff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ce07:	6a 12                	push   0x12
c000ce09:	68 ee 00 00 00       	push   0xee
c000ce0e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce12:	e8 d9 36 ff ff       	call   c00004f0 <memset>
c000ce17:	83 c4 10             	add    esp,0x10
c000ce1a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ce1e:	6a 08                	push   0x8
c000ce20:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce24:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000ce28:	50                   	push   eax
c000ce29:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce2d:	55                   	push   ebp
c000ce2e:	57                   	push   edi
c000ce2f:	e8 e7 fe ff ff       	call   c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000ce34:	83 c4 10             	add    esp,0x10
c000ce37:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ce3b:	50                   	push   eax
c000ce3c:	6a 06                	push   0x6
c000ce3e:	55                   	push   ebp
c000ce3f:	57                   	push   edi
c000ce40:	e8 06 ff ff ff       	call   c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ce4d:	74 07                	je     c000ce56 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000ce4f:	46                   	inc    esi
c000ce50:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000ce54:	eb e1                	jmp    c000ce37 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000ce56:	43                   	inc    ebx
c000ce57:	83 fb 12             	cmp    ebx,0x12
c000ce5a:	75 c2                	jne    c000ce1e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000ce5c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce60:	31 f6                	xor    esi,esi
c000ce62:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ce65:	50                   	push   eax
c000ce66:	50                   	push   eax
c000ce67:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c000ce6c:	46                   	inc    esi
c000ce6d:	8d 04 85 c0 3a 02 c0 	lea    eax,[eax*4-0x3ffdc540]
c000ce74:	50                   	push   eax
c000ce75:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000ce79:	e8 f2 39 ff ff       	call   c0000870 <strcat>
c000ce7e:	83 c4 10             	add    esp,0x10
c000ce81:	83 fe 18             	cmp    esi,0x18
c000ce84:	75 df                	jne    c000ce65 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000ce86:	83 c4 3c             	add    esp,0x3c
c000ce89:	31 c0                	xor    eax,eax
c000ce8b:	5b                   	pop    ebx
c000ce8c:	5e                   	pop    esi
c000ce8d:	5f                   	pop    edi
c000ce8e:	5d                   	pop    ebp
c000ce8f:	c3                   	ret    

c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000ce90:	83 ec 40             	sub    esp,0x40
c000ce93:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce97:	50                   	push   eax
c000ce98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cea0:	e8 3f f9 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cea5:	58                   	pop    eax
c000cea6:	5a                   	pop    edx
c000cea7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000ceab:	8d 44 24 15          	lea    eax,[esp+0x15]
c000ceaf:	50                   	push   eax
c000ceb0:	e8 37 ff ff ff       	call   c000cdec <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000ceb5:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000ceba:	83 c4 4c             	add    esp,0x4c
c000cebd:	c3                   	ret    

c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cebe:	55                   	push   ebp
c000cebf:	57                   	push   edi
c000cec0:	56                   	push   esi
c000cec1:	53                   	push   ebx
c000cec2:	31 db                	xor    ebx,ebx
c000cec4:	83 ec 70             	sub    esp,0x70
c000cec7:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cece:	6a 30                	push   0x30
c000ced0:	6a 00                	push   0x0
c000ced2:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000ced6:	56                   	push   esi
c000ced7:	e8 14 36 ff ff       	call   c00004f0 <memset>
c000cedc:	83 c4 10             	add    esp,0x10
c000cedf:	83 ec 0c             	sub    esp,0xc
c000cee2:	57                   	push   edi
c000cee3:	e8 98 36 ff ff       	call   c0000580 <strlen>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	39 d8                	cmp    eax,ebx
c000ceed:	76 16                	jbe    c000cf05 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000ceef:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cef3:	83 ec 0c             	sub    esp,0xc
c000cef6:	50                   	push   eax
c000cef7:	e8 64 3a ff ff       	call   c0000960 <toupper>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cf02:	43                   	inc    ebx
c000cf03:	eb da                	jmp    c000cedf <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cf05:	52                   	push   edx
c000cf06:	31 db                	xor    ebx,ebx
c000cf08:	6a 18                	push   0x18
c000cf0a:	31 ff                	xor    edi,edi
c000cf0c:	6a 3f                	push   0x3f
c000cf0e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cf12:	50                   	push   eax
c000cf13:	e8 d8 35 ff ff       	call   c00004f0 <memset>
c000cf18:	83 c4 10             	add    esp,0x10
c000cf1b:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c000cf1f:	8d 74 24 10          	lea    esi,[esp+0x10]
c000cf23:	84 c0                	test   al,al
c000cf25:	0f 84 af 00 00 00    	je     c000cfda <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cf2b:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cf2f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cf32:	83 ec 0c             	sub    esp,0xc
c000cf35:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c000cf3a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cf3e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000cf42:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000cf47:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cf4b:	56                   	push   esi
c000cf4c:	e8 2f 36 ff ff       	call   c0000580 <strlen>
c000cf51:	83 c4 10             	add    esp,0x10
c000cf54:	85 c0                	test   eax,eax
c000cf56:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000cf5a:	74 0b                	je     c000cf67 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000cf5c:	50                   	push   eax
c000cf5d:	6a 01                	push   0x1
c000cf5f:	56                   	push   esi
c000cf60:	8d 44 24 20          	lea    eax,[esp+0x20]
c000cf64:	50                   	push   eax
c000cf65:	eb 0a                	jmp    c000cf71 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000cf67:	50                   	push   eax
c000cf68:	6a 00                	push   0x0
c000cf6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000cf6e:	50                   	push   eax
c000cf6f:	6a 00                	push   0x0
c000cf71:	e8 44 fd ff ff       	call   c000ccba <CmGetMatch(char*, char*, bool, bool*)>
c000cf76:	83 c4 10             	add    esp,0x10
c000cf79:	83 f8 ff             	cmp    eax,0xffffffff
c000cf7c:	75 1a                	jne    c000cf98 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000cf7e:	83 ec 0c             	sub    esp,0xc
c000cf81:	68 07 1d 02 c0       	push   0xc0021d07
c000cf86:	e8 8b 1c 00 00       	call   c000ec16 <KePanic(char const*)>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	b8 02 00 00 00       	mov    eax,0x2
c000cf93:	e9 bb 00 00 00       	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cf98:	83 ff 18             	cmp    edi,0x18
c000cf9b:	75 1a                	jne    c000cfb7 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000cf9d:	83 ec 0c             	sub    esp,0xc
c000cfa0:	68 1c 1d 02 c0       	push   0xc0021d1c
c000cfa5:	e8 6c 1c 00 00       	call   c000ec16 <KePanic(char const*)>
c000cfaa:	83 c4 10             	add    esp,0x10
c000cfad:	b8 01 00 00 00       	mov    eax,0x1
c000cfb2:	e9 9c 00 00 00       	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000cfb7:	47                   	inc    edi
c000cfb8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cfbd:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000cfc1:	0f 45 dd             	cmovne ebx,ebp
c000cfc4:	83 ec 0c             	sub    esp,0xc
c000cfc7:	56                   	push   esi
c000cfc8:	e8 b3 35 ff ff       	call   c0000580 <strlen>
c000cfcd:	83 c4 10             	add    esp,0x10
c000cfd0:	85 c0                	test   eax,eax
c000cfd2:	74 06                	je     c000cfda <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c000cfd4:	43                   	inc    ebx
c000cfd5:	e9 41 ff ff ff       	jmp    c000cf1b <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000cfda:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfe2:	31 db                	xor    ebx,ebx
c000cfe4:	31 ff                	xor    edi,edi
c000cfe6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfee:	50                   	push   eax
c000cfef:	6a 12                	push   0x12
c000cff1:	68 ee 00 00 00       	push   0xee
c000cff6:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000cffd:	e8 ee 34 ff ff       	call   c00004f0 <memset>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d009:	83 fb 17             	cmp    ebx,0x17
c000d00c:	7e 26                	jle    c000d034 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c000d00e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d012:	50                   	push   eax
c000d013:	6a 08                	push   0x8
c000d015:	55                   	push   ebp
c000d016:	56                   	push   esi
c000d017:	e8 2f fd ff ff       	call   c000cd4b <CmGetShift(unsigned int*, int*, int, bool*)>
c000d01c:	83 c4 10             	add    esp,0x10
c000d01f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d024:	74 26                	je     c000d04c <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c000d026:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d02d:	4b                   	dec    ebx
c000d02e:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d031:	47                   	inc    edi
c000d032:	eb 1c                	jmp    c000d050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d034:	6a 06                	push   0x6
c000d036:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c000d03b:	50                   	push   eax
c000d03c:	55                   	push   ebp
c000d03d:	56                   	push   esi
c000d03e:	e8 d8 fc ff ff       	call   c000cd1b <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d043:	83 c4 10             	add    esp,0x10
c000d046:	84 c0                	test   al,al
c000d048:	75 06                	jne    c000d050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c000d04a:	eb c2                	jmp    c000d00e <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c000d04c:	31 c0                	xor    eax,eax
c000d04e:	eb 03                	jmp    c000d053 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c000d050:	43                   	inc    ebx
c000d051:	eb b2                	jmp    c000d005 <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c000d053:	83 c4 6c             	add    esp,0x6c
c000d056:	5b                   	pop    ebx
c000d057:	5e                   	pop    esi
c000d058:	5f                   	pop    edi
c000d059:	5d                   	pop    ebp
c000d05a:	c3                   	ret    

c000d05b <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d05b:	53                   	push   ebx
c000d05c:	83 ec 3c             	sub    esp,0x3c
c000d05f:	6a 2b                	push   0x2b
c000d061:	6a 00                	push   0x0
c000d063:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d067:	53                   	push   ebx
c000d068:	e8 83 34 ff ff       	call   c00004f0 <memset>
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d073:	50                   	push   eax
c000d074:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d078:	e8 41 fe ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d07d:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d082:	83 c4 0c             	add    esp,0xc
c000d085:	6a 15                	push   0x15
c000d087:	6a 00                	push   0x0
c000d089:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d08d:	50                   	push   eax
c000d08e:	e8 5d 34 ff ff       	call   c00004f0 <memset>
c000d093:	53                   	push   ebx
c000d094:	6a 00                	push   0x0
c000d096:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d09a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d09e:	e8 eb f9 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d0a3:	83 c4 58             	add    esp,0x58
c000d0a6:	5b                   	pop    ebx
c000d0a7:	c3                   	ret    

c000d0a8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d0a8:	56                   	push   esi
c000d0a9:	53                   	push   ebx
c000d0aa:	83 ec 48             	sub    esp,0x48
c000d0ad:	6a 12                	push   0x12
c000d0af:	68 ff 00 00 00       	push   0xff
c000d0b4:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d0b8:	56                   	push   esi
c000d0b9:	e8 32 34 ff ff       	call   c00004f0 <memset>
c000d0be:	5a                   	pop    edx
c000d0bf:	59                   	pop    ecx
c000d0c0:	56                   	push   esi
c000d0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d0c5:	e8 f4 fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d0ca:	83 c4 10             	add    esp,0x10
c000d0cd:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d0d1:	85 db                	test   ebx,ebx
c000d0d3:	74 42                	je     c000d117 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d0d5:	50                   	push   eax
c000d0d6:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d0da:	50                   	push   eax
c000d0db:	53                   	push   ebx
c000d0dc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0e0:	e8 ff f6 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0e5:	83 c4 0c             	add    esp,0xc
c000d0e8:	6a 12                	push   0x12
c000d0ea:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d0ee:	50                   	push   eax
c000d0ef:	56                   	push   esi
c000d0f0:	e8 8b 32 ff ff       	call   c0000380 <memcmp>
c000d0f5:	83 c4 10             	add    esp,0x10
c000d0f8:	85 c0                	test   eax,eax
c000d0fa:	74 1e                	je     c000d11a <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d0fc:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d101:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d106:	c1 e3 08             	shl    ebx,0x8
c000d109:	09 d8                	or     eax,ebx
c000d10b:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d110:	c1 e3 10             	shl    ebx,0x10
c000d113:	09 c3                	or     ebx,eax
c000d115:	eb ba                	jmp    c000d0d1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d117:	83 cb ff             	or     ebx,0xffffffff
c000d11a:	83 c4 44             	add    esp,0x44
c000d11d:	89 d8                	mov    eax,ebx
c000d11f:	5b                   	pop    ebx
c000d120:	5e                   	pop    esi
c000d121:	c3                   	ret    

c000d122 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d122:	57                   	push   edi
c000d123:	56                   	push   esi
c000d124:	53                   	push   ebx
c000d125:	83 ec 34             	sub    esp,0x34
c000d128:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d12c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d130:	6a 2b                	push   0x2b
c000d132:	6a 00                	push   0x0
c000d134:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d138:	53                   	push   ebx
c000d139:	e8 b2 33 ff ff       	call   c00004f0 <memset>
c000d13e:	58                   	pop    eax
c000d13f:	5a                   	pop    edx
c000d140:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d144:	50                   	push   eax
c000d145:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d149:	e8 70 fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d14e:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c000d152:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d156:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d15a:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d15e:	53                   	push   ebx
c000d15f:	6a 00                	push   0x0
c000d161:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d165:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d169:	e8 20 f9 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d16e:	83 c4 50             	add    esp,0x50
c000d171:	5b                   	pop    ebx
c000d172:	5e                   	pop    esi
c000d173:	5f                   	pop    edi
c000d174:	c3                   	ret    

c000d175 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d175:	55                   	push   ebp
c000d176:	57                   	push   edi
c000d177:	56                   	push   esi
c000d178:	53                   	push   ebx
c000d179:	83 ec 40             	sub    esp,0x40
c000d17c:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d180:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d184:	6a 2b                	push   0x2b
c000d186:	6a 00                	push   0x0
c000d188:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d18c:	56                   	push   esi
c000d18d:	e8 5e 33 ff ff       	call   c00004f0 <memset>
c000d192:	5f                   	pop    edi
c000d193:	89 ef                	mov    edi,ebp
c000d195:	58                   	pop    eax
c000d196:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d19a:	50                   	push   eax
c000d19b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d19f:	e8 1a fd ff ff       	call   c000cebe <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d1a4:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d1a9:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d1ae:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d1b3:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d1b8:	83 c4 10             	add    esp,0x10
c000d1bb:	85 ed                	test   ebp,ebp
c000d1bd:	74 14                	je     c000d1d3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1bf:	51                   	push   ecx
c000d1c0:	51                   	push   ecx
c000d1c1:	57                   	push   edi
c000d1c2:	53                   	push   ebx
c000d1c3:	e8 0e f7 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c000d1c8:	83 c4 10             	add    esp,0x10
c000d1cb:	85 c0                	test   eax,eax
c000d1cd:	74 04                	je     c000d1d3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d1cf:	89 c7                	mov    edi,eax
c000d1d1:	eb e8                	jmp    c000d1bb <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d1d3:	56                   	push   esi
c000d1d4:	6a 00                	push   0x0
c000d1d6:	57                   	push   edi
c000d1d7:	53                   	push   ebx
c000d1d8:	e8 b1 f8 ff ff       	call   c000ca8e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d1dd:	83 c4 0c             	add    esp,0xc
c000d1e0:	56                   	push   esi
c000d1e1:	50                   	push   eax
c000d1e2:	89 c7                	mov    edi,eax
c000d1e4:	53                   	push   ebx
c000d1e5:	e8 fa f5 ff ff       	call   c000c7e4 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d1ea:	58                   	pop    eax
c000d1eb:	5a                   	pop    edx
c000d1ec:	6a 6c                	push   0x6c
c000d1ee:	6a 00                	push   0x0
c000d1f0:	6a 00                	push   0x0
c000d1f2:	68 2d 1d 02 c0       	push   0xc0021d2d
c000d1f7:	57                   	push   edi
c000d1f8:	53                   	push   ebx
c000d1f9:	e8 24 ff ff ff       	call   c000d122 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d1fe:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d202:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d206:	c1 e8 10             	shr    eax,0x10
c000d209:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d20d:	83 c4 1c             	add    esp,0x1c
c000d210:	56                   	push   esi
c000d211:	57                   	push   edi
c000d212:	53                   	push   ebx
c000d213:	e8 f0 f6 ff ff       	call   c000c908 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d218:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d21d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d222:	c1 e0 08             	shl    eax,0x8
c000d225:	09 c2                	or     edx,eax
c000d227:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d22c:	83 c4 4c             	add    esp,0x4c
c000d22f:	5b                   	pop    ebx
c000d230:	5e                   	pop    esi
c000d231:	c1 e0 10             	shl    eax,0x10
c000d234:	09 d0                	or     eax,edx
c000d236:	5f                   	pop    edi
c000d237:	5d                   	pop    ebp
c000d238:	c3                   	ret    

c000d239 <zStrtok(char*, char const*)>:
c000d239:	55                   	push   ebp
c000d23a:	57                   	push   edi
c000d23b:	56                   	push   esi
c000d23c:	53                   	push   ebx
c000d23d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d241:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d245:	85 db                	test   ebx,ebx
c000d247:	74 2f                	je     c000d278 <zStrtok(char*, char const*)+0x3f>
c000d249:	85 c0                	test   eax,eax
c000d24b:	75 09                	jne    c000d256 <zStrtok(char*, char const*)+0x1d>
c000d24d:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d252:	85 c0                	test   eax,eax
c000d254:	74 50                	je     c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d256:	31 c9                	xor    ecx,ecx
c000d258:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d25c:	74 03                	je     c000d261 <zStrtok(char*, char const*)+0x28>
c000d25e:	41                   	inc    ecx
c000d25f:	eb f7                	jmp    c000d258 <zStrtok(char*, char const*)+0x1f>
c000d261:	31 d2                	xor    edx,edx
c000d263:	39 ca                	cmp    edx,ecx
c000d265:	74 15                	je     c000d27c <zStrtok(char*, char const*)+0x43>
c000d267:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d26b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d26e:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d271:	39 ee                	cmp    esi,ebp
c000d273:	74 13                	je     c000d288 <zStrtok(char*, char const*)+0x4f>
c000d275:	42                   	inc    edx
c000d276:	eb eb                	jmp    c000d263 <zStrtok(char*, char const*)+0x2a>
c000d278:	31 c0                	xor    eax,eax
c000d27a:	eb 2a                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d27c:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d286:	eb 1e                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d288:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d28b:	39 ce                	cmp    esi,ecx
c000d28d:	75 0a                	jne    c000d299 <zStrtok(char*, char const*)+0x60>
c000d28f:	40                   	inc    eax
c000d290:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d295:	89 d8                	mov    eax,ebx
c000d297:	eb 0d                	jmp    c000d2a6 <zStrtok(char*, char const*)+0x6d>
c000d299:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d29c:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d2a0:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d2a6:	5b                   	pop    ebx
c000d2a7:	5e                   	pop    esi
c000d2a8:	5f                   	pop    edi
c000d2a9:	5d                   	pop    ebp
c000d2aa:	c3                   	ret    

c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d2ab:	57                   	push   edi
c000d2ac:	56                   	push   esi
c000d2ad:	53                   	push   ebx
c000d2ae:	81 ec 08 01 00 00    	sub    esp,0x108
c000d2b4:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d2bb:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d2c2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d2c6:	53                   	push   ebx
c000d2c7:	e8 84 33 ff ff       	call   c0000650 <strcpy>
c000d2cc:	59                   	pop    ecx
c000d2cd:	5e                   	pop    esi
c000d2ce:	68 55 2a 02 c0       	push   0xc0022a55
c000d2d3:	53                   	push   ebx
c000d2d4:	bb 01 00 00 00       	mov    ebx,0x1
c000d2d9:	e8 5b ff ff ff       	call   c000d239 <zStrtok(char*, char const*)>
c000d2de:	83 c4 10             	add    esp,0x10
c000d2e1:	85 c0                	test   eax,eax
c000d2e3:	74 3b                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d2e5:	52                   	push   edx
c000d2e6:	50                   	push   eax
c000d2e7:	6a 01                	push   0x1
c000d2e9:	57                   	push   edi
c000d2ea:	e8 b9 fd ff ff       	call   c000d0a8 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d2ef:	59                   	pop    ecx
c000d2f0:	5e                   	pop    esi
c000d2f1:	89 c3                	mov    ebx,eax
c000d2f3:	68 55 2a 02 c0       	push   0xc0022a55
c000d2f8:	6a 00                	push   0x0
c000d2fa:	e8 3a ff ff ff       	call   c000d239 <zStrtok(char*, char const*)>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	85 c0                	test   eax,eax
c000d304:	89 c6                	mov    esi,eax
c000d306:	74 18                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d308:	52                   	push   edx
c000d309:	52                   	push   edx
c000d30a:	53                   	push   ebx
c000d30b:	57                   	push   edi
c000d30c:	e8 86 f5 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c000d311:	83 c4 10             	add    esp,0x10
c000d314:	83 f8 ff             	cmp    eax,0xffffffff
c000d317:	89 c3                	mov    ebx,eax
c000d319:	74 05                	je     c000d320 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d31b:	50                   	push   eax
c000d31c:	56                   	push   esi
c000d31d:	53                   	push   ebx
c000d31e:	eb c9                	jmp    c000d2e9 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d320:	81 c4 00 01 00 00    	add    esp,0x100
c000d326:	89 d8                	mov    eax,ebx
c000d328:	5b                   	pop    ebx
c000d329:	5e                   	pop    esi
c000d32a:	5f                   	pop    edi
c000d32b:	c3                   	ret    

c000d32c <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d32c:	55                   	push   ebp
c000d32d:	57                   	push   edi
c000d32e:	56                   	push   esi
c000d32f:	53                   	push   ebx
c000d330:	83 ec 5c             	sub    esp,0x5c
c000d333:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d337:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d33b:	85 db                	test   ebx,ebx
c000d33d:	0f 8e 84 00 00 00    	jle    c000d3c7 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d343:	57                   	push   edi
c000d344:	31 ed                	xor    ebp,ebp
c000d346:	6a 32                	push   0x32
c000d348:	6a 00                	push   0x0
c000d34a:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d34e:	57                   	push   edi
c000d34f:	e8 9c 31 ff ff       	call   c00004f0 <memset>
c000d354:	83 c4 0c             	add    esp,0xc
c000d357:	57                   	push   edi
c000d358:	53                   	push   ebx
c000d359:	56                   	push   esi
c000d35a:	e8 31 fb ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d35f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d363:	83 c4 10             	add    esp,0x10
c000d366:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d36a:	7d 13                	jge    c000d37f <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d36c:	83 ec 0c             	sub    esp,0xc
c000d36f:	45                   	inc    ebp
c000d370:	68 02 2f 02 c0       	push   0xc0022f02
c000d375:	e8 d4 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	eb e7                	jmp    c000d366 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d37f:	51                   	push   ecx
c000d380:	57                   	push   edi
c000d381:	53                   	push   ebx
c000d382:	68 33 1d 02 c0       	push   0xc0021d33
c000d387:	e8 c2 9b ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000d38c:	83 c4 10             	add    esp,0x10
c000d38f:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d394:	75 1e                	jne    c000d3b4 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d396:	52                   	push   edx
c000d397:	52                   	push   edx
c000d398:	53                   	push   ebx
c000d399:	56                   	push   esi
c000d39a:	e8 f8 f4 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c000d39f:	83 c4 0c             	add    esp,0xc
c000d3a2:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d3a6:	8d 51 04             	lea    edx,[ecx+0x4]
c000d3a9:	52                   	push   edx
c000d3aa:	50                   	push   eax
c000d3ab:	56                   	push   esi
c000d3ac:	e8 7b ff ff ff       	call   c000d32c <CmDisplayTree(Reghive_Tag*, int, int)>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	50                   	push   eax
c000d3b5:	50                   	push   eax
c000d3b6:	53                   	push   ebx
c000d3b7:	56                   	push   esi
c000d3b8:	e8 19 f5 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c000d3bd:	83 c4 10             	add    esp,0x10
c000d3c0:	89 c3                	mov    ebx,eax
c000d3c2:	e9 74 ff ff ff       	jmp    c000d33b <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d3c7:	83 c4 5c             	add    esp,0x5c
c000d3ca:	5b                   	pop    ebx
c000d3cb:	5e                   	pop    esi
c000d3cc:	5f                   	pop    edi
c000d3cd:	5d                   	pop    ebp
c000d3ce:	c3                   	ret    

c000d3cf <CmSplitFinalSlashInPlace(char*)>:
c000d3cf:	53                   	push   ebx
c000d3d0:	83 ec 14             	sub    esp,0x14
c000d3d3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d3d7:	53                   	push   ebx
c000d3d8:	e8 a3 31 ff ff       	call   c0000580 <strlen>
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	48                   	dec    eax
c000d3e1:	85 c0                	test   eax,eax
c000d3e3:	74 15                	je     c000d3fa <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d3e5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d3e9:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d3ec:	75 09                	jne    c000d3f7 <CmSplitFinalSlashInPlace(char*)+0x28>
c000d3ee:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d3f1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d3f5:	eb 05                	jmp    c000d3fc <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d3f7:	48                   	dec    eax
c000d3f8:	eb e7                	jmp    c000d3e1 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d3fa:	31 c0                	xor    eax,eax
c000d3fc:	83 c4 08             	add    esp,0x8
c000d3ff:	5b                   	pop    ebx
c000d400:	c3                   	ret    
c000d401:	66 90                	xchg   ax,ax
c000d403:	90                   	nop

c000d404 <Krnl::handlePowerButton()>:
c000d404:	83 ec 0c             	sub    esp,0xc
c000d407:	e8 21 21 00 00       	call   c000f52d <KeHandlePowerButton()>
c000d40c:	90                   	nop
c000d40d:	83 c4 0c             	add    esp,0xc
c000d410:	c3                   	ret    
c000d411:	8d 76 00             	lea    esi,[esi+0x0]

c000d414 <Krnl::handleSleepButton()>:
c000d414:	83 ec 0c             	sub    esp,0xc
c000d417:	e8 29 21 00 00       	call   c000f545 <KeHandleSleepButton()>
c000d41c:	90                   	nop
c000d41d:	83 c4 0c             	add    esp,0xc
c000d420:	c3                   	ret    
c000d421:	90                   	nop

c000d422 <Computer::close(int, int, void*)>:
c000d422:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d427:	c3                   	ret    

c000d428 <Computer::open(int, int, void*)>:
c000d428:	56                   	push   esi
c000d429:	53                   	push   ebx
c000d42a:	83 ec 04             	sub    esp,0x4
c000d42d:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d434:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d438:	0f 94 05 a0 41 02 c0 	sete   BYTE PTR ds:0xc00241a0
c000d43f:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d445:	74 10                	je     c000d457 <Computer::open(int, int, void*)+0x2f>
c000d447:	83 ec 0c             	sub    esp,0xc
c000d44a:	68 40 1d 02 c0       	push   0xc0021d40
c000d44f:	e8 c2 17 00 00       	call   c000ec16 <KePanic(char const*)>
c000d454:	83 c4 10             	add    esp,0x10
c000d457:	83 ec 0c             	sub    esp,0xc
c000d45a:	68 f8 1d 02 c0       	push   0xc0021df8
c000d45f:	e8 37 f1 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d464:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d46b:	e8 60 14 00 00       	call   c000e8d0 <malloc>
c000d470:	89 04 24             	mov    DWORD PTR [esp],eax
c000d473:	89 c6                	mov    esi,eax
c000d475:	e8 26 e8 ff ff       	call   c000bca0 <ACPI::ACPI()>
c000d47a:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d480:	58                   	pop    eax
c000d481:	5a                   	pop    edx
c000d482:	56                   	push   esi
c000d483:	53                   	push   ebx
c000d484:	e8 bd bb ff ff       	call   c0009046 <Device::addChild(Device*)>
c000d489:	c7 04 24 10 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e10
c000d490:	e8 06 f1 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d495:	e8 a0 a6 00 00       	call   c0017b3a <HalEnableNMI()>
c000d49a:	e8 b3 98 00 00       	call   c0016d52 <HalDetectFeatures()>
c000d49f:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d4a6:	e8 25 14 00 00       	call   c000e8d0 <malloc>
c000d4ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000d4ae:	89 c6                	mov    esi,eax
c000d4b0:	e8 43 b1 00 00       	call   c00185f8 <CPU::CPU()>
c000d4b5:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d4bb:	59                   	pop    ecx
c000d4bc:	58                   	pop    eax
c000d4bd:	56                   	push   esi
c000d4be:	53                   	push   ebx
c000d4bf:	e8 82 bb ff ff       	call   c0009046 <Device::addChild(Device*)>
c000d4c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d4c8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4d0:	51                   	push   ecx
c000d4d1:	6a 00                	push   0x0
c000d4d3:	6a 00                	push   0x0
c000d4d5:	50                   	push   eax
c000d4d6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d4d9:	83 c4 14             	add    esp,0x14
c000d4dc:	68 6c 1d 02 c0       	push   0xc0021d6c
c000d4e1:	e8 b5 f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d4e6:	e8 67 ad 00 00       	call   c0018252 <HalInitialiseCoprocessor()>
c000d4eb:	c7 04 24 2a 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e2a
c000d4f2:	e8 a4 f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d4f7:	c7 04 24 0e d5 00 c0 	mov    DWORD PTR [esp],0xc000d50e
c000d4fe:	e8 89 7d 00 00       	call   c001528c <setupMultitasking(void (*)())>
c000d503:	83 c4 14             	add    esp,0x14
c000d506:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d50b:	5b                   	pop    ebx
c000d50c:	5e                   	pop    esi
c000d50d:	c3                   	ret    

c000d50e <KeFirstTask()>:
c000d50e:	53                   	push   ebx
c000d50f:	83 ec 14             	sub    esp,0x14
c000d512:	fb                   	sti    
c000d513:	68 45 1e 02 c0       	push   0xc0021e45
c000d518:	e8 7e f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d51d:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d524:	e8 a7 13 00 00       	call   c000e8d0 <malloc>
c000d529:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d530:	89 c3                	mov    ebx,eax
c000d532:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d537:	50                   	push   eax
c000d538:	68 5e 1e 02 c0       	push   0xc0021e5e
c000d53d:	6a 01                	push   0x1
c000d53f:	53                   	push   ebx
c000d540:	e8 f7 79 00 00       	call   c0014f3c <Process::Process(bool, char const*, Process*, char**)>
c000d545:	83 c4 20             	add    esp,0x20
c000d548:	68 ff 00 00 00       	push   0xff
c000d54d:	6a 00                	push   0x0
c000d54f:	68 fd e1 00 c0       	push   0xc000e1fd
c000d554:	53                   	push   ebx
c000d555:	e8 0a 7c 00 00       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c000d55a:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d560:	6a 7a                	push   0x7a
c000d562:	6a 00                	push   0x0
c000d564:	68 38 5a 01 c0       	push   0xc0015a38
c000d569:	52                   	push   edx
c000d56a:	e8 f5 7b 00 00       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c000d56f:	83 c4 14             	add    esp,0x14
c000d572:	68 90 1d 02 c0       	push   0xc0021d90
c000d577:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d57c:	e8 1a f0 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d581:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d588:	e8 c2 20 00 00       	call   c000f64f <KeInitRand()>
c000d58d:	e8 74 88 00 00       	call   c0015e06 <Vm::initialise8086()>
c000d592:	e8 3f a8 ff ff       	call   c0007dd6 <Fs::initVFS()>
c000d597:	c7 04 24 14 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b14
c000d59e:	e8 f8 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5a3:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5a8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d5ae:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5b0:	6a 00                	push   0x0
c000d5b2:	6a 00                	push   0x0
c000d5b4:	6a 00                	push   0x0
c000d5b6:	50                   	push   eax
c000d5b7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d5ba:	83 c4 14             	add    esp,0x14
c000d5bd:	68 90 1d 02 c0       	push   0xc0021d90
c000d5c2:	e8 d4 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5c7:	e8 ef 9f ff ff       	call   c00075bb <KeInitialiseSymlinks()>
c000d5cc:	e8 f5 05 00 00       	call   c000dbc6 <KeLoadSystemEnv()>
c000d5d1:	e8 87 1f 00 00       	call   c000f55d <KeSetupPowerManager()>
c000d5d6:	c7 04 24 b4 1d 02 c0 	mov    DWORD PTR [esp],0xc0021db4
c000d5dd:	e8 b9 ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d5e2:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d5e7:	59                   	pop    ecx
c000d5e8:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d5ee:	53                   	push   ebx
c000d5ef:	e8 6e bb ff ff       	call   c0009162 <Device::loadDriversForAll()>
c000d5f4:	c7 04 24 6b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e6b
c000d5fb:	e8 9b ef ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c000d600:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d606:	58                   	pop    eax
c000d607:	5a                   	pop    edx
c000d608:	6a 01                	push   0x1
c000d60a:	68 7c 1e 02 c0       	push   0xc0021e7c
c000d60f:	e8 ae 72 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c000d614:	59                   	pop    ecx
c000d615:	5a                   	pop    edx
c000d616:	53                   	push   ebx
c000d617:	50                   	push   eax
c000d618:	e8 06 75 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c000d61d:	83 c4 10             	add    esp,0x10
c000d620:	83 ec 0c             	sub    esp,0xc
c000d623:	6a 02                	push   0x2
c000d625:	e8 46 7e 00 00       	call   c0015470 <blockTask(TaskState)>
c000d62a:	83 c4 10             	add    esp,0x10
c000d62d:	eb f1                	jmp    c000d620 <KeFirstTask()+0x112>
c000d62f:	90                   	nop

c000d630 <Computer::Computer()>:
c000d630:	83 ec 0c             	sub    esp,0xc
c000d633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d637:	83 ec 08             	sub    esp,0x8
c000d63a:	68 98 1e 02 c0       	push   0xc0021e98
c000d63f:	50                   	push   eax
c000d640:	e8 63 bb ff ff       	call   c00091a8 <Device::Device(char const*)>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c000d64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d651:	89 10                	mov    DWORD PTR [eax],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d665:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d66f:	90                   	nop
c000d670:	83 c4 0c             	add    esp,0xc
c000d673:	c3                   	ret    

c000d674 <KePrepareShutdown()>:
c000d674:	83 ec 0c             	sub    esp,0xc
c000d677:	e8 8d ee ff ff       	call   c000c509 <KeExecuteAtexit()>
c000d67c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d681:	83 ec 0c             	sub    esp,0xc
c000d684:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d68a:	50                   	push   eax
c000d68b:	e8 1e bc ff ff       	call   c00092ae <Device::closeAll()>
c000d690:	83 c4 1c             	add    esp,0x1c
c000d693:	c3                   	ret    

c000d694 <KeShutdown()>:
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	e8 d8 ff ff ff       	call   c000d674 <KePrepareShutdown()>
c000d69c:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d6a1:	85 c0                	test   eax,eax
c000d6a3:	74 02                	je     c000d6a7 <KeShutdown()+0x13>
c000d6a5:	ff d0                	call   eax
c000d6a7:	83 ec 0c             	sub    esp,0xc
c000d6aa:	68 d4 1d 02 c0       	push   0xc0021dd4
c000d6af:	e8 62 15 00 00       	call   c000ec16 <KePanic(char const*)>
c000d6b4:	83 c4 1c             	add    esp,0x1c
c000d6b7:	c3                   	ret    

c000d6b8 <KeSleep()>:
c000d6b8:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d6bd:	85 c0                	test   eax,eax
c000d6bf:	74 02                	je     c000d6c3 <KeSleep()+0xb>
c000d6c1:	ff e0                	jmp    eax
c000d6c3:	c3                   	ret    

c000d6c4 <KeRestart()>:
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	e8 a8 ff ff ff       	call   c000d674 <KePrepareShutdown()>
c000d6cc:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d6d1:	85 c0                	test   eax,eax
c000d6d3:	74 02                	je     c000d6d7 <KeRestart()+0x13>
c000d6d5:	ff d0                	call   eax
c000d6d7:	e4 64                	in     al,0x64
c000d6d9:	a8 02                	test   al,0x2
c000d6db:	75 fa                	jne    c000d6d7 <KeRestart()+0x13>
c000d6dd:	b0 fe                	mov    al,0xfe
c000d6df:	e6 64                	out    0x64,al
c000d6e1:	83 c4 0c             	add    esp,0xc
c000d6e4:	c3                   	ret    

c000d6e5 <KeCalculateCRC32(unsigned char*, int)>:
c000d6e5:	53                   	push   ebx
c000d6e6:	83 c8 ff             	or     eax,0xffffffff
c000d6e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d6ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d6f1:	01 cb                	add    ebx,ecx
c000d6f3:	39 d9                	cmp    ecx,ebx
c000d6f5:	74 15                	je     c000d70c <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d6f7:	41                   	inc    ecx
c000d6f8:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d6fb:	31 c2                	xor    edx,eax
c000d6fd:	c1 e8 08             	shr    eax,0x8
c000d700:	0f b6 d2             	movzx  edx,dl
c000d703:	33 04 95 c0 3b 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc440]
c000d70a:	eb e7                	jmp    c000d6f3 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d70c:	5b                   	pop    ebx
c000d70d:	f7 d0                	not    eax
c000d70f:	c3                   	ret    

c000d710 <EnvVarContainer::getEnv(char const*)>:
c000d710:	57                   	push   edi
c000d711:	56                   	push   esi
c000d712:	53                   	push   ebx
c000d713:	31 db                	xor    ebx,ebx
c000d715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d719:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d71b:	7e 2b                	jle    c000d748 <EnvVarContainer::getEnv(char const*)+0x38>
c000d71d:	50                   	push   eax
c000d71e:	50                   	push   eax
c000d71f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d722:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d729:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d72c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d730:	e8 4b 30 ff ff       	call   c0000780 <strcmp>
c000d735:	83 c4 10             	add    esp,0x10
c000d738:	85 c0                	test   eax,eax
c000d73a:	75 09                	jne    c000d745 <EnvVarContainer::getEnv(char const*)+0x35>
c000d73c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d73f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d743:	eb 05                	jmp    c000d74a <EnvVarContainer::getEnv(char const*)+0x3a>
c000d745:	43                   	inc    ebx
c000d746:	eb d1                	jmp    c000d719 <EnvVarContainer::getEnv(char const*)+0x9>
c000d748:	31 c0                	xor    eax,eax
c000d74a:	5b                   	pop    ebx
c000d74b:	5e                   	pop    esi
c000d74c:	5f                   	pop    edi
c000d74d:	c3                   	ret    

c000d74e <EnvVarContainer::setEnv(char const*, char const*)>:
c000d74e:	55                   	push   ebp
c000d74f:	57                   	push   edi
c000d750:	56                   	push   esi
c000d751:	53                   	push   ebx
c000d752:	83 ec 28             	sub    esp,0x28
c000d755:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d759:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d75d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d761:	56                   	push   esi
c000d762:	e8 19 2e ff ff       	call   c0000580 <strlen>
c000d767:	40                   	inc    eax
c000d768:	89 04 24             	mov    DWORD PTR [esp],eax
c000d76b:	e8 60 11 00 00       	call   c000e8d0 <malloc>
c000d770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d777:	e8 04 2e ff ff       	call   c0000580 <strlen>
c000d77c:	40                   	inc    eax
c000d77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000d780:	e8 4b 11 00 00       	call   c000e8d0 <malloc>
c000d785:	89 34 24             	mov    DWORD PTR [esp],esi
c000d788:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d78c:	e8 ef 2d ff ff       	call   c0000580 <strlen>
c000d791:	83 c4 0c             	add    esp,0xc
c000d794:	40                   	inc    eax
c000d795:	50                   	push   eax
c000d796:	6a 00                	push   0x0
c000d798:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79c:	e8 4f 2d ff ff       	call   c00004f0 <memset>
c000d7a1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d7a4:	e8 d7 2d ff ff       	call   c0000580 <strlen>
c000d7a9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d7ad:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7b5:	89 de                	mov    esi,ebx
c000d7b7:	e8 c4 2d ff ff       	call   c0000580 <strlen>
c000d7bc:	83 c4 0c             	add    esp,0xc
c000d7bf:	40                   	inc    eax
c000d7c0:	50                   	push   eax
c000d7c1:	6a 00                	push   0x0
c000d7c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7c7:	e8 24 2d ff ff       	call   c00004f0 <memset>
c000d7cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d7cf:	e8 ac 2d ff ff       	call   c0000580 <strlen>
c000d7d4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d7d8:	8d 48 01             	lea    ecx,[eax+0x1]
c000d7db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7e0:	40                   	inc    eax
c000d7e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d7e4:	c1 e0 03             	shl    eax,0x3
c000d7e7:	5a                   	pop    edx
c000d7e8:	59                   	pop    ecx
c000d7e9:	50                   	push   eax
c000d7ea:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d7ed:	e8 ca 10 00 00       	call   c000e8bc <realloc>
c000d7f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d7f5:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d7f9:	b9 08 00 00 00       	mov    ecx,0x8
c000d7fe:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d801:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d805:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d807:	83 c4 2c             	add    esp,0x2c
c000d80a:	5b                   	pop    ebx
c000d80b:	5e                   	pop    esi
c000d80c:	5f                   	pop    edi
c000d80d:	5d                   	pop    ebp
c000d80e:	c3                   	ret    
c000d80f:	90                   	nop

c000d810 <EnvVarContainer::deleteEnv(char const*)>:
c000d810:	c3                   	ret    
c000d811:	90                   	nop

c000d812 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d812:	55                   	push   ebp
c000d813:	57                   	push   edi
c000d814:	56                   	push   esi
c000d815:	53                   	push   ebx
c000d816:	81 ec 38 01 00 00    	sub    esp,0x138
c000d81c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d823:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d82a:	68 14 01 00 00       	push   0x114
c000d82f:	e8 9c 10 00 00       	call   c000e8d0 <malloc>
c000d834:	83 c4 0c             	add    esp,0xc
c000d837:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d83a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d841:	89 c3                	mov    ebx,eax
c000d843:	50                   	push   eax
c000d844:	e8 c3 a8 ff ff       	call   c000810c <File::File(char const*, Process*)>
c000d849:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d84c:	e8 9d ab ff ff       	call   c00083ee <File::exists()>
c000d851:	83 c4 10             	add    esp,0x10
c000d854:	84 c0                	test   al,al
c000d856:	75 31                	jne    c000d889 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d858:	50                   	push   eax
c000d859:	50                   	push   eax
c000d85a:	6a 12                	push   0x12
c000d85c:	53                   	push   ebx
c000d85d:	e8 c8 a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d862:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d864:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d867:	89 34 24             	mov    DWORD PTR [esp],esi
c000d86a:	e8 11 2d ff ff       	call   c0000580 <strlen>
c000d86f:	5a                   	pop    edx
c000d870:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d874:	52                   	push   edx
c000d875:	31 d2                	xor    edx,edx
c000d877:	56                   	push   esi
c000d878:	52                   	push   edx
c000d879:	50                   	push   eax
c000d87a:	53                   	push   ebx
c000d87b:	ff d7                	call   edi
c000d87d:	83 c4 14             	add    esp,0x14
c000d880:	53                   	push   ebx
c000d881:	e8 02 a9 ff ff       	call   c0008188 <File::close()>
c000d886:	83 c4 10             	add    esp,0x10
c000d889:	56                   	push   esi
c000d88a:	31 f6                	xor    esi,esi
c000d88c:	68 00 01 00 00       	push   0x100
c000d891:	6a 00                	push   0x0
c000d893:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d897:	50                   	push   eax
c000d898:	e8 53 2c ff ff       	call   c00004f0 <memset>
c000d89d:	5f                   	pop    edi
c000d89e:	58                   	pop    eax
c000d89f:	6a 01                	push   0x1
c000d8a1:	53                   	push   ebx
c000d8a2:	e8 83 a8 ff ff       	call   c000812a <File::open(FileOpenMode)>
c000d8a7:	83 c4 10             	add    esp,0x10
c000d8aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d8b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d8ba:	83 ec 0c             	sub    esp,0xc
c000d8bd:	8d 54 24 20          	lea    edx,[esp+0x20]
c000d8c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8c3:	52                   	push   edx
c000d8c4:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c000d8c8:	51                   	push   ecx
c000d8c9:	6a 00                	push   0x0
c000d8cb:	6a 01                	push   0x1
c000d8cd:	53                   	push   ebx
c000d8ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d8d1:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d8d6:	83 c4 20             	add    esp,0x20
c000d8d9:	85 c0                	test   eax,eax
c000d8db:	89 c1                	mov    ecx,eax
c000d8dd:	0f 84 36 01 00 00    	je     c000da19 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d8e3:	83 f8 0d             	cmp    eax,0xd
c000d8e6:	0f 84 22 01 00 00    	je     c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d8ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d8f1:	0f 84 f0 00 00 00    	je     c000d9e7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d8f7:	83 f8 0a             	cmp    eax,0xa
c000d8fa:	74 13                	je     c000d90f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d8fc:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d901:	74 0c                	je     c000d90f <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d903:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d909:	0f 8e f6 00 00 00    	jle    c000da05 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d90f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d913:	83 ec 0c             	sub    esp,0xc
c000d916:	8d 78 01             	lea    edi,[eax+0x1]
c000d919:	57                   	push   edi
c000d91a:	e8 b1 0f 00 00       	call   c000e8d0 <malloc>
c000d91f:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d923:	8d 56 04             	lea    edx,[esi+0x4]
c000d926:	89 14 24             	mov    DWORD PTR [esp],edx
c000d929:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d92d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d931:	e8 9a 0f 00 00       	call   c000e8d0 <malloc>
c000d936:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d93a:	83 c4 0c             	add    esp,0xc
c000d93d:	57                   	push   edi
c000d93e:	6a 00                	push   0x0
c000d940:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d944:	e8 a7 2b ff ff       	call   c00004f0 <memset>
c000d949:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d94d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d951:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d957:	83 c4 0c             	add    esp,0xc
c000d95a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d95e:	52                   	push   edx
c000d95f:	6a 00                	push   0x0
c000d961:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d965:	e8 86 2b ff ff       	call   c00004f0 <memset>
c000d96a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000d96e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000d972:	89 34 24             	mov    DWORD PTR [esp],esi
c000d975:	e8 06 2c ff ff       	call   c0000580 <strlen>
c000d97a:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000d97e:	89 c1                	mov    ecx,eax
c000d980:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d982:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d98b:	40                   	inc    eax
c000d98c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d98f:	85 d2                	test   edx,edx
c000d991:	75 0c                	jne    c000d99f <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000d993:	83 ec 0c             	sub    esp,0xc
c000d996:	6a 08                	push   0x8
c000d998:	e8 33 0f 00 00       	call   c000e8d0 <malloc>
c000d99d:	eb 0c                	jmp    c000d9ab <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000d99f:	51                   	push   ecx
c000d9a0:	51                   	push   ecx
c000d9a1:	c1 e0 03             	shl    eax,0x3
c000d9a4:	50                   	push   eax
c000d9a5:	52                   	push   edx
c000d9a6:	e8 11 0f 00 00       	call   c000e8bc <realloc>
c000d9ab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d9ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d9b1:	83 c4 10             	add    esp,0x10
c000d9b4:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000d9b7:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d9bb:	b9 08 00 00 00       	mov    ecx,0x8
c000d9c0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d9c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d9c6:	50                   	push   eax
c000d9c7:	31 f6                	xor    esi,esi
c000d9c9:	68 00 01 00 00       	push   0x100
c000d9ce:	6a 00                	push   0x0
c000d9d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d9d4:	50                   	push   eax
c000d9d5:	e8 16 2b ff ff       	call   c00004f0 <memset>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d9e5:	eb 27                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9e7:	83 f8 3d             	cmp    eax,0x3d
c000d9ea:	74 1e                	je     c000da0a <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000d9ec:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9f2:	7f 07                	jg     c000d9fb <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000d9f4:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c000d9f8:	46                   	inc    esi
c000d9f9:	eb 13                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9fb:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000da03:	eb 09                	jmp    c000da0e <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da05:	83 f8 3d             	cmp    eax,0x3d
c000da08:	75 ea                	jne    c000d9f4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000da0a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000da0e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000da13:	0f 85 99 fe ff ff    	jne    c000d8b2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000da19:	83 ec 0c             	sub    esp,0xc
c000da1c:	53                   	push   ebx
c000da1d:	e8 66 a7 ff ff       	call   c0008188 <File::close()>
c000da22:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000da27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da2a:	81 c4 3c 01 00 00    	add    esp,0x13c
c000da30:	5b                   	pop    ebx
c000da31:	5e                   	pop    esi
c000da32:	5f                   	pop    edi
c000da33:	5d                   	pop    ebp
c000da34:	c3                   	ret    
c000da35:	90                   	nop

c000da36 <EnvVarContainer::__loadSystem()>:
c000da36:	83 ec 10             	sub    esp,0x10
c000da39:	68 c0 3f 02 c0       	push   0xc0023fc0
c000da3e:	68 d0 1e 02 c0       	push   0xc0021ed0
c000da43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da47:	e8 c6 fd ff ff       	call   c000d812 <EnvVarContainer::loadFrom(char const*, char const*)>
c000da4c:	83 c4 1c             	add    esp,0x1c
c000da4f:	c3                   	ret    

c000da50 <EnvVarContainer::__loadUser()>:
c000da50:	c3                   	ret    
c000da51:	90                   	nop

c000da52 <EnvVarContainer::EnvVarContainer(Process*)>:
c000da52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da56:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000da5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000da64:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da72:	90                   	nop
c000da73:	c3                   	ret    

c000da74 <EnvVarContainer::~EnvVarContainer()>:
c000da74:	83 ec 0c             	sub    esp,0xc
c000da77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da7e:	85 c0                	test   eax,eax
c000da80:	74 1d                	je     c000da9f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da86:	8b 00                	mov    eax,DWORD PTR [eax]
c000da88:	85 c0                	test   eax,eax
c000da8a:	74 13                	je     c000da9f <EnvVarContainer::~EnvVarContainer()+0x2b>
c000da8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da93:	83 ec 0c             	sub    esp,0xc
c000da96:	50                   	push   eax
c000da97:	e8 44 0e 00 00       	call   c000e8e0 <free>
c000da9c:	83 c4 10             	add    esp,0x10
c000da9f:	90                   	nop
c000daa0:	83 c4 0c             	add    esp,0xc
c000daa3:	c3                   	ret    

c000daa4 <KeGetEnv(Process*, char const*)>:
c000daa4:	53                   	push   ebx
c000daa5:	83 ec 08             	sub    esp,0x8
c000daa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daac:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000dab2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dab6:	74 04                	je     c000dabc <KeGetEnv(Process*, char const*)+0x18>
c000dab8:	85 c0                	test   eax,eax
c000daba:	75 0b                	jne    c000dac7 <KeGetEnv(Process*, char const*)+0x23>
c000dabc:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dac1:	85 c0                	test   eax,eax
c000dac3:	75 19                	jne    c000dade <KeGetEnv(Process*, char const*)+0x3a>
c000dac5:	eb 27                	jmp    c000daee <KeGetEnv(Process*, char const*)+0x4a>
c000dac7:	52                   	push   edx
c000dac8:	52                   	push   edx
c000dac9:	53                   	push   ebx
c000daca:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000dad0:	e8 3b fc ff ff       	call   c000d710 <EnvVarContainer::getEnv(char const*)>
c000dad5:	83 c4 10             	add    esp,0x10
c000dad8:	85 c0                	test   eax,eax
c000dada:	75 28                	jne    c000db04 <KeGetEnv(Process*, char const*)+0x60>
c000dadc:	eb de                	jmp    c000dabc <KeGetEnv(Process*, char const*)+0x18>
c000dade:	52                   	push   edx
c000dadf:	52                   	push   edx
c000dae0:	53                   	push   ebx
c000dae1:	50                   	push   eax
c000dae2:	e8 29 fc ff ff       	call   c000d710 <EnvVarContainer::getEnv(char const*)>
c000dae7:	83 c4 10             	add    esp,0x10
c000daea:	85 c0                	test   eax,eax
c000daec:	75 16                	jne    c000db04 <KeGetEnv(Process*, char const*)+0x60>
c000daee:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000daf2:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000daf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dafb:	83 c4 08             	add    esp,0x8
c000dafe:	5b                   	pop    ebx
c000daff:	e9 0c fc ff ff       	jmp    c000d710 <EnvVarContainer::getEnv(char const*)>
c000db04:	83 c4 08             	add    esp,0x8
c000db07:	5b                   	pop    ebx
c000db08:	c3                   	ret    

c000db09 <KeSetEnvSystem(char const*, char const*)>:
c000db09:	83 ec 10             	sub    esp,0x10
c000db0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db10:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db14:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000db1a:	e8 2f fc ff ff       	call   c000d74e <EnvVarContainer::setEnv(char const*, char const*)>
c000db1f:	83 c4 1c             	add    esp,0x1c
c000db22:	c3                   	ret    

c000db23 <KeSetEnvUser(char const*, char const*)>:
c000db23:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db28:	85 c0                	test   eax,eax
c000db2a:	74 15                	je     c000db41 <KeSetEnvUser(char const*, char const*)+0x1e>
c000db2c:	83 ec 10             	sub    esp,0x10
c000db2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000db37:	50                   	push   eax
c000db38:	e8 11 fc ff ff       	call   c000d74e <EnvVarContainer::setEnv(char const*, char const*)>
c000db3d:	83 c4 1c             	add    esp,0x1c
c000db40:	c3                   	ret    
c000db41:	c3                   	ret    

c000db42 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000db42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db46:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000db4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db50:	e9 f9 fb ff ff       	jmp    c000d74e <EnvVarContainer::setEnv(char const*, char const*)>

c000db55 <KeDeleteEnvSystem(char const*)>:
c000db55:	c3                   	ret    

c000db56 <KeDeleteEnvUser(char const*)>:
c000db56:	c3                   	ret    

c000db57 <KeDeleteEnvProcess(Process*, char const*)>:
c000db57:	c3                   	ret    

c000db58 <KeNewProcessEnv(Process*)>:
c000db58:	83 ec 28             	sub    esp,0x28
c000db5b:	6a 0c                	push   0xc
c000db5d:	e8 6e 0d 00 00       	call   c000e8d0 <malloc>
c000db62:	5a                   	pop    edx
c000db63:	59                   	pop    ecx
c000db64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db68:	50                   	push   eax
c000db69:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db6d:	e8 e0 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000db72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db76:	83 c4 2c             	add    esp,0x2c
c000db79:	c3                   	ret    

c000db7a <KeCopyProcessEnv(Process*, Process*)>:
c000db7a:	57                   	push   edi
c000db7b:	56                   	push   esi
c000db7c:	53                   	push   ebx
c000db7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db81:	83 ec 0c             	sub    esp,0xc
c000db84:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000db8a:	6a 0c                	push   0xc
c000db8c:	e8 3f 0d 00 00       	call   c000e8d0 <malloc>
c000db91:	89 c3                	mov    ebx,eax
c000db93:	58                   	pop    eax
c000db94:	5a                   	pop    edx
c000db95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db99:	53                   	push   ebx
c000db9a:	e8 b3 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000db9f:	8b 07                	mov    eax,DWORD PTR [edi]
c000dba1:	89 03                	mov    DWORD PTR [ebx],eax
c000dba3:	c1 e0 03             	shl    eax,0x3
c000dba6:	89 04 24             	mov    DWORD PTR [esp],eax
c000dba9:	e8 22 0d 00 00       	call   c000e8d0 <malloc>
c000dbae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dbb1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dbb3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dbb6:	89 c7                	mov    edi,eax
c000dbb8:	c1 e1 03             	shl    ecx,0x3
c000dbbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	89 d8                	mov    eax,ebx
c000dbc2:	5b                   	pop    ebx
c000dbc3:	5e                   	pop    esi
c000dbc4:	5f                   	pop    edi
c000dbc5:	c3                   	ret    

c000dbc6 <KeLoadSystemEnv()>:
c000dbc6:	53                   	push   ebx
c000dbc7:	83 ec 14             	sub    esp,0x14
c000dbca:	6a 0c                	push   0xc
c000dbcc:	e8 ff 0c 00 00       	call   c000e8d0 <malloc>
c000dbd1:	89 c3                	mov    ebx,eax
c000dbd3:	58                   	pop    eax
c000dbd4:	5a                   	pop    edx
c000dbd5:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dbdb:	53                   	push   ebx
c000dbdc:	e8 71 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000dbe1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbe4:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dbea:	e8 47 fe ff ff       	call   c000da36 <EnvVarContainer::__loadSystem()>
c000dbef:	83 c4 18             	add    esp,0x18
c000dbf2:	5b                   	pop    ebx
c000dbf3:	c3                   	ret    

c000dbf4 <KeLoadUserEnv()>:
c000dbf4:	53                   	push   ebx
c000dbf5:	83 ec 14             	sub    esp,0x14
c000dbf8:	6a 0c                	push   0xc
c000dbfa:	e8 d1 0c 00 00       	call   c000e8d0 <malloc>
c000dbff:	89 c3                	mov    ebx,eax
c000dc01:	58                   	pop    eax
c000dc02:	5a                   	pop    edx
c000dc03:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc09:	53                   	push   ebx
c000dc0a:	e8 43 fe ff ff       	call   c000da52 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc0f:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dc15:	83 c4 18             	add    esp,0x18
c000dc18:	5b                   	pop    ebx
c000dc19:	c3                   	ret    

c000dc1a <KeFlushEnv()>:
c000dc1a:	c3                   	ret    

c000dc1b <KeGetProcessTotalEnvCount(Process*)>:
c000dc1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dc1f:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dc25:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc2b:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dc30:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc32:	03 01                	add    eax,DWORD PTR [ecx]
c000dc34:	85 d2                	test   edx,edx
c000dc36:	74 02                	je     c000dc3a <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dc38:	03 02                	add    eax,DWORD PTR [edx]
c000dc3a:	c3                   	ret    

c000dc3b <KeGetProcessEnvPair(Process*, int)>:
c000dc3b:	57                   	push   edi
c000dc3c:	56                   	push   esi
c000dc3d:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dc43:	53                   	push   ebx
c000dc44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dc48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc4c:	85 f6                	test   esi,esi
c000dc4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dc52:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dc58:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc5a:	75 16                	jne    c000dc72 <KeGetProcessEnvPair(Process*, int)+0x37>
c000dc5c:	39 c2                	cmp    edx,eax
c000dc5e:	7c 16                	jl     c000dc76 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc60:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dc66:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dc68:	01 c6                	add    esi,eax
c000dc6a:	39 d6                	cmp    esi,edx
c000dc6c:	7e 3c                	jle    c000dcaa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc6e:	29 c2                	sub    edx,eax
c000dc70:	eb 04                	jmp    c000dc76 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dc72:	39 c2                	cmp    edx,eax
c000dc74:	7d 05                	jge    c000dc7b <KeGetProcessEnvPair(Process*, int)+0x40>
c000dc76:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dc79:	eb 20                	jmp    c000dc9b <KeGetProcessEnvPair(Process*, int)+0x60>
c000dc7b:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dc7d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dc80:	39 d1                	cmp    ecx,edx
c000dc82:	7e 04                	jle    c000dc88 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dc84:	29 c2                	sub    edx,eax
c000dc86:	eb 10                	jmp    c000dc98 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dc88:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dc8e:	03 0e                	add    ecx,DWORD PTR [esi]
c000dc90:	39 d1                	cmp    ecx,edx
c000dc92:	7e 16                	jle    c000dcaa <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dc94:	29 c2                	sub    edx,eax
c000dc96:	29 fa                	sub    edx,edi
c000dc98:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dc9b:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dc9e:	8b 02                	mov    eax,DWORD PTR [edx]
c000dca0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dca3:	89 03                	mov    DWORD PTR [ebx],eax
c000dca5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dca8:	eb 1d                	jmp    c000dcc7 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dcaa:	83 ec 0c             	sub    esp,0xc
c000dcad:	68 f2 1e 02 c0       	push   0xc0021ef2
c000dcb2:	e8 5f 0f 00 00       	call   c000ec16 <KePanic(char const*)>
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dcc0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dcc7:	89 d8                	mov    eax,ebx
c000dcc9:	5b                   	pop    ebx
c000dcca:	5e                   	pop    esi
c000dccb:	5f                   	pop    edi
c000dccc:	c2 04 00             	ret    0x4
c000dccf:	90                   	nop

c000dcd0 <KeSetupInterrupts()>:
c000dcd0:	83 ec 10             	sub    esp,0x10
c000dcd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dcdb:	90                   	nop
c000dcdc:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dce4:	7f 5a                	jg     c000dd40 <KeSetupInterrupts()+0x70>
c000dce6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dcee:	66 90                	xchg   ax,ax
c000dcf0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dcf5:	7f 41                	jg     c000dd38 <KeSetupInterrupts()+0x68>
c000dcf7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcfb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd06:	01 d0                	add    eax,edx
c000dd08:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000dd13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd17:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dd1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dd22:	01 d0                	add    eax,edx
c000dd24:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000dd2f:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dd34:	eb ba                	jmp    c000dcf0 <KeSetupInterrupts()+0x20>
c000dd36:	66 90                	xchg   ax,ax
c000dd38:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000dd3d:	eb 9d                	jmp    c000dcdc <KeSetupInterrupts()+0xc>
c000dd3f:	90                   	nop
c000dd40:	90                   	nop
c000dd41:	83 c4 10             	add    esp,0x10
c000dd44:	c3                   	ret    
c000dd45:	8d 76 00             	lea    esi,[esi+0x0]

c000dd48 <int_handler>:
c000dd48:	83 ec 2c             	sub    esp,0x2c
c000dd4b:	90                   	nop
c000dd4c:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000dd51:	0f b6 c0             	movzx  eax,al
c000dd54:	85 c0                	test   eax,eax
c000dd56:	74 04                	je     c000dd5c <int_handler+0x14>
c000dd58:	fa                   	cli    
c000dd59:	f4                   	hlt    
c000dd5a:	eb f0                	jmp    c000dd4c <int_handler+0x4>
c000dd5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dd60:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dd63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd67:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000dd6c:	7e 1a                	jle    c000dd88 <int_handler+0x40>
c000dd6e:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000dd73:	7f 13                	jg     c000dd88 <int_handler+0x40>
c000dd75:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd79:	83 e8 20             	sub    eax,0x20
c000dd7c:	83 ec 0c             	sub    esp,0xc
c000dd7f:	50                   	push   eax
c000dd80:	e8 44 a8 00 00       	call   c00185c9 <HalEndOfInterrupt(int)>
c000dd85:	83 c4 10             	add    esp,0x10
c000dd88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd8c:	c1 e0 04             	shl    eax,0x4
c000dd8f:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000dd94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dd9c:	c1 e0 04             	shl    eax,0x4
c000dd9f:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000dda4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dda8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ddb0:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ddb5:	0f 8f ad 00 00 00    	jg     c000de68 <int_handler+0x120>
c000ddbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddbf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddca:	01 d0                	add    eax,edx
c000ddcc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddce:	85 c0                	test   eax,eax
c000ddd0:	0f 84 86 00 00 00    	je     c000de5c <int_handler+0x114>
c000ddd6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddda:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dddd:	83 f8 60             	cmp    eax,0x60
c000dde0:	75 46                	jne    c000de28 <int_handler+0xe0>
c000dde2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dde6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dded:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ddf1:	01 d0                	add    eax,edx
c000ddf3:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddf5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ddf9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de04:	01 ca                	add    edx,ecx
c000de06:	8b 12                	mov    edx,DWORD PTR [edx]
c000de08:	83 ec 08             	sub    esp,0x8
c000de0b:	52                   	push   edx
c000de0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de10:	ff d0                	call   eax
c000de12:	83 c4 10             	add    esp,0x10
c000de15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de25:	eb 4d                	jmp    c000de74 <int_handler+0x12c>
c000de27:	90                   	nop
c000de28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de2c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de37:	01 d0                	add    eax,edx
c000de39:	8b 00                	mov    eax,DWORD PTR [eax]
c000de3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de3f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000de46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de4a:	01 ca                	add    edx,ecx
c000de4c:	8b 12                	mov    edx,DWORD PTR [edx]
c000de4e:	83 ec 08             	sub    esp,0x8
c000de51:	52                   	push   edx
c000de52:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000de56:	ff d0                	call   eax
c000de58:	83 c4 10             	add    esp,0x10
c000de5b:	90                   	nop
c000de5c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000de61:	e9 4a ff ff ff       	jmp    c000ddb0 <int_handler+0x68>
c000de66:	66 90                	xchg   ax,ax
c000de68:	b8 00 00 00 00       	mov    eax,0x0
c000de6d:	ba 00 00 00 00       	mov    edx,0x0
c000de72:	66 90                	xchg   ax,ax
c000de74:	83 c4 2c             	add    esp,0x2c
c000de77:	c3                   	ret    

c000de78 <KeDisplayProgramFault(char const*)>:
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	83 ec 0c             	sub    esp,0xc
c000de7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de82:	e8 c7 90 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000de87:	83 c4 10             	add    esp,0x10
c000de8a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000de8f:	8b 00                	mov    eax,DWORD PTR [eax]
c000de91:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000de94:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000de9a:	85 c0                	test   eax,eax
c000de9c:	74 22                	je     c000dec0 <KeDisplayProgramFault(char const*)+0x48>
c000de9e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000dea3:	8b 00                	mov    eax,DWORD PTR [eax]
c000dea5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dea8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000deae:	6a 04                	push   0x4
c000deb0:	6a 0f                	push   0xf
c000deb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000deb6:	50                   	push   eax
c000deb7:	e8 2c 35 00 00       	call   c00113e8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000debc:	83 c4 10             	add    esp,0x10
c000debf:	90                   	nop
c000dec0:	90                   	nop
c000dec1:	83 c4 0c             	add    esp,0xc
c000dec4:	c3                   	ret    
c000dec5:	8d 76 00             	lea    esi,[esi+0x0]

c000dec8 <KeGeneralProtectionFault(void*, void*)>:
c000dec8:	83 ec 0c             	sub    esp,0xc
c000decb:	83 ec 08             	sub    esp,0x8
c000dece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ded6:	e8 0e 9d 00 00       	call   c0017be9 <HalHandleGeneralProtectionFault(void*, void*)>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	0f b6 c0             	movzx  eax,al
c000dee1:	85 c0                	test   eax,eax
c000dee3:	75 2f                	jne    c000df14 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000dee5:	83 ec 0c             	sub    esp,0xc
c000dee8:	68 0c 1f 02 c0       	push   0xc0021f0c
c000deed:	e8 86 ff ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000def2:	83 c4 10             	add    esp,0x10
c000def5:	83 ec 0c             	sub    esp,0xc
c000def8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defc:	e8 04 9e 00 00       	call   c0017d05 <HalDisplayDebugInfo(void*)>
c000df01:	83 c4 10             	add    esp,0x10
c000df04:	83 ec 0c             	sub    esp,0xc
c000df07:	6a 00                	push   0x0
c000df09:	e8 52 7d 00 00       	call   c0015c60 <Thr::terminateFromIRQ(int)>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	eb 05                	jmp    c000df18 <KeGeneralProtectionFault(void*, void*)+0x50>
c000df13:	90                   	nop
c000df14:	90                   	nop
c000df15:	8d 76 00             	lea    esi,[esi+0x0]
c000df18:	83 c4 0c             	add    esp,0xc
c000df1b:	c3                   	ret    

c000df1c <KePageFault(void*, void*)>:
c000df1c:	83 ec 0c             	sub    esp,0xc
c000df1f:	83 ec 08             	sub    esp,0x8
c000df22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2a:	e8 65 9d 00 00       	call   c0017c94 <HalHandlePageFault(void*, void*)>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	0f b6 c0             	movzx  eax,al
c000df35:	85 c0                	test   eax,eax
c000df37:	75 2f                	jne    c000df68 <KePageFault(void*, void*)+0x4c>
c000df39:	83 ec 0c             	sub    esp,0xc
c000df3c:	68 25 1f 02 c0       	push   0xc0021f25
c000df41:	e8 32 ff ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000df46:	83 c4 10             	add    esp,0x10
c000df49:	83 ec 0c             	sub    esp,0xc
c000df4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df50:	e8 b0 9d 00 00       	call   c0017d05 <HalDisplayDebugInfo(void*)>
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	6a 00                	push   0x0
c000df5d:	e8 fe 7c 00 00       	call   c0015c60 <Thr::terminateFromIRQ(int)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	eb 05                	jmp    c000df6c <KePageFault(void*, void*)+0x50>
c000df67:	90                   	nop
c000df68:	90                   	nop
c000df69:	8d 76 00             	lea    esi,[esi+0x0]
c000df6c:	83 c4 0c             	add    esp,0xc
c000df6f:	c3                   	ret    

c000df70 <KeNonMaskableInterrupt(void*, void*)>:
c000df70:	83 ec 0c             	sub    esp,0xc
c000df73:	e8 1b a1 00 00       	call   c0018093 <HalReceivedNMI()>
c000df78:	90                   	nop
c000df79:	83 c4 0c             	add    esp,0xc
c000df7c:	c3                   	ret    
c000df7d:	8d 76 00             	lea    esi,[esi+0x0]

c000df80 <KeOtherFault(void*, void*)>:
c000df80:	83 ec 0c             	sub    esp,0xc
c000df83:	83 ec 0c             	sub    esp,0xc
c000df86:	68 30 1f 02 c0       	push   0xc0021f30
c000df8b:	e8 e8 fe ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000df90:	83 c4 10             	add    esp,0x10
c000df93:	83 ec 0c             	sub    esp,0xc
c000df96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9a:	e8 66 9d 00 00       	call   c0017d05 <HalDisplayDebugInfo(void*)>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	6a 00                	push   0x0
c000dfa7:	e8 b4 7c 00 00       	call   c0015c60 <Thr::terminateFromIRQ(int)>
c000dfac:	83 c4 10             	add    esp,0x10
c000dfaf:	90                   	nop
c000dfb0:	83 c4 0c             	add    esp,0xc
c000dfb3:	c3                   	ret    

c000dfb4 <KeOpcodeFault(void*, void*)>:
c000dfb4:	55                   	push   ebp
c000dfb5:	89 e5                	mov    ebp,esp
c000dfb7:	83 ec 08             	sub    esp,0x8
c000dfba:	83 ec 08             	sub    esp,0x8
c000dfbd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000dfc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfc3:	e8 fb 9c 00 00       	call   c0017cc3 <HalHandleOpcodeFault(void*, void*)>
c000dfc8:	83 c4 10             	add    esp,0x10
c000dfcb:	0f b6 c0             	movzx  eax,al
c000dfce:	85 c0                	test   eax,eax
c000dfd0:	75 2e                	jne    c000e000 <KeOpcodeFault(void*, void*)+0x4c>
c000dfd2:	83 ec 0c             	sub    esp,0xc
c000dfd5:	68 58 1f 02 c0       	push   0xc0021f58
c000dfda:	e8 99 fe ff ff       	call   c000de78 <KeDisplayProgramFault(char const*)>
c000dfdf:	83 c4 10             	add    esp,0x10
c000dfe2:	83 ec 0c             	sub    esp,0xc
c000dfe5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000dfe8:	e8 18 9d 00 00       	call   c0017d05 <HalDisplayDebugInfo(void*)>
c000dfed:	83 c4 10             	add    esp,0x10
c000dff0:	83 ec 0c             	sub    esp,0xc
c000dff3:	6a 00                	push   0x0
c000dff5:	e8 66 7c 00 00       	call   c0015c60 <Thr::terminateFromIRQ(int)>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	eb 05                	jmp    c000e004 <KeOpcodeFault(void*, void*)+0x50>
c000dfff:	90                   	nop
c000e000:	90                   	nop
c000e001:	8d 76 00             	lea    esi,[esi+0x0]
c000e004:	c9                   	leave  
c000e005:	c3                   	ret    
c000e006:	66 90                	xchg   ax,ax

c000e008 <KeDoubleFault(void*, void*)>:
c000e008:	55                   	push   ebp
c000e009:	89 e5                	mov    ebp,esp
c000e00b:	83 ec 08             	sub    esp,0x8
c000e00e:	83 ec 0c             	sub    esp,0xc
c000e011:	68 65 1f 02 c0       	push   0xc0021f65
c000e016:	e8 fb 0b 00 00       	call   c000ec16 <KePanic(char const*)>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	90                   	nop
c000e01f:	c9                   	leave  
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <GDTEntry::setBase(unsigned int)>:
c000e022:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e026:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e02a:	89 c1                	mov    ecx,eax
c000e02c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e030:	c1 e9 10             	shr    ecx,0x10
c000e033:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e036:	c1 e8 18             	shr    eax,0x18
c000e039:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e03c:	c3                   	ret    
c000e03d:	90                   	nop

c000e03e <GDTEntry::setLimit(unsigned int)>:
c000e03e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e046:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e049:	66 89 01             	mov    WORD PTR [ecx],ax
c000e04c:	c1 e8 10             	shr    eax,0x10
c000e04f:	83 e0 0f             	and    eax,0xf
c000e052:	83 e2 f0             	and    edx,0xfffffff0
c000e055:	09 d0                	or     eax,edx
c000e057:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e05a:	c3                   	ret    
c000e05b:	90                   	nop

c000e05c <GDT::GDT()>:
c000e05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e060:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e070:	90                   	nop
c000e071:	c3                   	ret    

c000e072 <GDT::addEntry(GDTEntry)>:
c000e072:	53                   	push   ebx
c000e073:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e077:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e07b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e07f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e081:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e085:	8d 48 01             	lea    ecx,[eax+0x1]
c000e088:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e08c:	c1 e0 03             	shl    eax,0x3
c000e08f:	89 0a                	mov    DWORD PTR [edx],ecx
c000e091:	5b                   	pop    ebx
c000e092:	c3                   	ret    
c000e093:	90                   	nop

c000e094 <GDT::getNumberOfEntries()>:
c000e094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e098:	8b 00                	mov    eax,DWORD PTR [eax]
c000e09a:	c3                   	ret    
c000e09b:	90                   	nop

c000e09c <GDT::flush()>:
c000e09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0a2:	83 c0 04             	add    eax,0x4
c000e0a5:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e0aa:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e0b1:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e0b8:	e9 9d 22 ff ff       	jmp    c000035a <loadGDT>
c000e0bd:	90                   	nop

c000e0be <GDT::setup()>:
c000e0be:	57                   	push   edi
c000e0bf:	56                   	push   esi
c000e0c0:	53                   	push   ebx
c000e0c1:	83 ec 30             	sub    esp,0x30
c000e0c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0c8:	6a 00                	push   0x0
c000e0ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e0ce:	56                   	push   esi
c000e0cf:	e8 4e ff ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e0d4:	6a 00                	push   0x0
c000e0d6:	56                   	push   esi
c000e0d7:	e8 62 ff ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c000e0dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e0e4:	6a 00                	push   0x0
c000e0e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e0ea:	56                   	push   esi
c000e0eb:	e8 32 ff ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e0f0:	68 ff ff ff 00       	push   0xffffff
c000e0f5:	56                   	push   esi
c000e0f6:	e8 43 ff ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c000e0fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e0ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e103:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e108:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e10c:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e111:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e115:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e119:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e11d:	89 f8                	mov    eax,edi
c000e11f:	89 fa                	mov    edx,edi
c000e121:	80 e4 f7             	and    ah,0xf7
c000e124:	80 ce 60             	or     dh,0x60
c000e127:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e12b:	89 c7                	mov    edi,eax
c000e12d:	80 cc 60             	or     ah,0x60
c000e130:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e134:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e138:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e13c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e140:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e144:	83 c4 20             	add    esp,0x20
c000e147:	6a 00                	push   0x0
c000e149:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e14d:	50                   	push   eax
c000e14e:	e8 cf fe ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e153:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e157:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e15b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e15f:	83 e0 3f             	and    eax,0x3f
c000e162:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e166:	6a 00                	push   0x0
c000e168:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e16c:	50                   	push   eax
c000e16d:	e8 b0 fe ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c000e172:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e176:	83 e0 3f             	and    eax,0x3f
c000e179:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e17d:	83 c4 0c             	add    esp,0xc
c000e180:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e184:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e188:	53                   	push   ebx
c000e189:	e8 e4 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e18e:	83 c4 0c             	add    esp,0xc
c000e191:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e195:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e199:	53                   	push   ebx
c000e19a:	e8 d3 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e19f:	83 c4 0c             	add    esp,0xc
c000e1a2:	57                   	push   edi
c000e1a3:	56                   	push   esi
c000e1a4:	53                   	push   ebx
c000e1a5:	e8 c8 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1aa:	83 c4 0c             	add    esp,0xc
c000e1ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e1b5:	53                   	push   ebx
c000e1b6:	e8 b7 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1bb:	83 c4 0c             	add    esp,0xc
c000e1be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e1c6:	53                   	push   ebx
c000e1c7:	e8 a6 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1cc:	83 c4 0c             	add    esp,0xc
c000e1cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e1d7:	53                   	push   ebx
c000e1d8:	e8 95 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1dd:	83 c4 0c             	add    esp,0xc
c000e1e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1e8:	53                   	push   ebx
c000e1e9:	e8 84 fe ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c000e1ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e1f1:	e8 a6 fe ff ff       	call   c000e09c <GDT::flush()>
c000e1f6:	83 c4 40             	add    esp,0x40
c000e1f9:	5b                   	pop    ebx
c000e1fa:	5e                   	pop    esi
c000e1fb:	5f                   	pop    edi
c000e1fc:	c3                   	ret    

c000e1fd <idleFunction(void*)>:
c000e1fd:	83 ec 0c             	sub    esp,0xc
c000e200:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e207:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e20e:	75 01                	jne    c000e211 <idleFunction(void*)+0x14>
c000e210:	fb                   	sti    
c000e211:	e8 18 9f 00 00       	call   c001812e <HalSystemIdle()>
c000e216:	e8 2b 1f 01 00       	call   c0020146 <idleCommon()>
c000e21b:	eb f4                	jmp    c000e211 <idleFunction(void*)+0x14>
c000e21d:	66 90                	xchg   ax,ax
c000e21f:	90                   	nop

c000e220 <IDTEntry::IDTEntry(bool)>:
c000e220:	53                   	push   ebx
c000e221:	83 ec 04             	sub    esp,0x4
c000e224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e228:	88 04 24             	mov    BYTE PTR [esp],al
c000e22b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e22f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e235:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e239:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e23d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e241:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e244:	83 e2 f0             	and    edx,0xfffffff0
c000e247:	83 ca 0e             	or     edx,0xe
c000e24a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e24d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e251:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e254:	83 e2 ef             	and    edx,0xffffffef
c000e257:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e25a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e25e:	85 c0                	test   eax,eax
c000e260:	74 06                	je     c000e268 <IDTEntry::IDTEntry(bool)+0x48>
c000e262:	b2 03                	mov    dl,0x3
c000e264:	eb 06                	jmp    c000e26c <IDTEntry::IDTEntry(bool)+0x4c>
c000e266:	66 90                	xchg   ax,ax
c000e268:	b2 00                	mov    dl,0x0
c000e26a:	66 90                	xchg   ax,ax
c000e26c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e270:	83 e2 03             	and    edx,0x3
c000e273:	89 d3                	mov    ebx,edx
c000e275:	c1 e3 05             	shl    ebx,0x5
c000e278:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e27b:	83 e2 9f             	and    edx,0xffffff9f
c000e27e:	88 d1                	mov    cl,dl
c000e280:	88 da                	mov    dl,bl
c000e282:	09 ca                	or     edx,ecx
c000e284:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e287:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e28b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e28e:	83 ca 80             	or     edx,0xffffff80
c000e291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e294:	90                   	nop
c000e295:	83 c4 04             	add    esp,0x4
c000e298:	5b                   	pop    ebx
c000e299:	c3                   	ret    

c000e29a <IDTEntry::setOffset(unsigned int)>:
c000e29a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2a2:	66 89 02             	mov    WORD PTR [edx],ax
c000e2a5:	c1 e8 10             	shr    eax,0x10
c000e2a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e2ac:	c3                   	ret    
c000e2ad:	90                   	nop
c000e2ae:	66 90                	xchg   ax,ax

c000e2b0 <IDT::IDT()>:
c000e2b0:	90                   	nop
c000e2b1:	c3                   	ret    

c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e2b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e2b6:	83 c0 30             	add    eax,0x30
c000e2b9:	c3                   	ret    

c000e2ba <IDT::addEntry(IDTEntry, int)>:
c000e2ba:	53                   	push   ebx
c000e2bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e2c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e2c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e2ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e2d2:	5b                   	pop    ebx
c000e2d3:	c3                   	ret    

c000e2d4 <IDT::addEntry(int, void (*)(), bool)>:
c000e2d4:	53                   	push   ebx
c000e2d5:	83 ec 10             	sub    esp,0x10
c000e2d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e2dd:	50                   	push   eax
c000e2de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e2e2:	53                   	push   ebx
c000e2e3:	e8 38 ff ff ff       	call   c000e220 <IDTEntry::IDTEntry(bool)>
c000e2e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e2ec:	53                   	push   ebx
c000e2ed:	e8 a8 ff ff ff       	call   c000e29a <IDTEntry::setOffset(unsigned int)>
c000e2f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e2fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e302:	e8 b3 ff ff ff       	call   c000e2ba <IDT::addEntry(IDTEntry, int)>
c000e307:	83 c4 30             	add    esp,0x30
c000e30a:	5b                   	pop    ebx
c000e30b:	c3                   	ret    

c000e30c <IDT::flush()>:
c000e30c:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e315:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e319:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e31e:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e325:	c3                   	ret    

c000e326 <IDT::setup()>:
c000e326:	57                   	push   edi
c000e327:	56                   	push   esi
c000e328:	53                   	push   ebx
c000e329:	83 ec 10             	sub    esp,0x10
c000e32c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e330:	6a 00                	push   0x0
c000e332:	68 f0 f3 01 c0       	push   0xc001f3f0
c000e337:	6a 00                	push   0x0
c000e339:	53                   	push   ebx
c000e33a:	e8 95 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e33f:	6a 00                	push   0x0
c000e341:	68 00 f4 01 c0       	push   0xc001f400
c000e346:	6a 01                	push   0x1
c000e348:	53                   	push   ebx
c000e349:	e8 86 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e34e:	83 c4 20             	add    esp,0x20
c000e351:	6a 00                	push   0x0
c000e353:	68 0a f4 01 c0       	push   0xc001f40a
c000e358:	6a 02                	push   0x2
c000e35a:	53                   	push   ebx
c000e35b:	e8 74 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e360:	6a 00                	push   0x0
c000e362:	68 14 f4 01 c0       	push   0xc001f414
c000e367:	6a 03                	push   0x3
c000e369:	53                   	push   ebx
c000e36a:	e8 65 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e36f:	83 c4 20             	add    esp,0x20
c000e372:	6a 00                	push   0x0
c000e374:	68 1e f4 01 c0       	push   0xc001f41e
c000e379:	6a 04                	push   0x4
c000e37b:	53                   	push   ebx
c000e37c:	e8 53 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e381:	6a 00                	push   0x0
c000e383:	68 28 f4 01 c0       	push   0xc001f428
c000e388:	6a 05                	push   0x5
c000e38a:	53                   	push   ebx
c000e38b:	e8 44 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e390:	83 c4 20             	add    esp,0x20
c000e393:	6a 00                	push   0x0
c000e395:	68 32 f4 01 c0       	push   0xc001f432
c000e39a:	6a 06                	push   0x6
c000e39c:	53                   	push   ebx
c000e39d:	e8 32 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3a2:	6a 00                	push   0x0
c000e3a4:	68 3c f4 01 c0       	push   0xc001f43c
c000e3a9:	6a 07                	push   0x7
c000e3ab:	53                   	push   ebx
c000e3ac:	e8 23 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3b1:	83 c4 20             	add    esp,0x20
c000e3b4:	6a 00                	push   0x0
c000e3b6:	68 46 f4 01 c0       	push   0xc001f446
c000e3bb:	6a 08                	push   0x8
c000e3bd:	53                   	push   ebx
c000e3be:	e8 11 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3c3:	6a 00                	push   0x0
c000e3c5:	68 4e f4 01 c0       	push   0xc001f44e
c000e3ca:	6a 09                	push   0x9
c000e3cc:	53                   	push   ebx
c000e3cd:	e8 02 ff ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3d2:	83 c4 20             	add    esp,0x20
c000e3d5:	6a 00                	push   0x0
c000e3d7:	68 58 f4 01 c0       	push   0xc001f458
c000e3dc:	6a 0a                	push   0xa
c000e3de:	53                   	push   ebx
c000e3df:	e8 f0 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3e4:	6a 00                	push   0x0
c000e3e6:	68 60 f4 01 c0       	push   0xc001f460
c000e3eb:	6a 0b                	push   0xb
c000e3ed:	53                   	push   ebx
c000e3ee:	e8 e1 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e3f3:	83 c4 20             	add    esp,0x20
c000e3f6:	6a 00                	push   0x0
c000e3f8:	68 68 f4 01 c0       	push   0xc001f468
c000e3fd:	6a 0c                	push   0xc
c000e3ff:	53                   	push   ebx
c000e400:	e8 cf fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e405:	6a 00                	push   0x0
c000e407:	68 70 f4 01 c0       	push   0xc001f470
c000e40c:	6a 0d                	push   0xd
c000e40e:	53                   	push   ebx
c000e40f:	e8 c0 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e414:	83 c4 20             	add    esp,0x20
c000e417:	6a 00                	push   0x0
c000e419:	68 8a f4 01 c0       	push   0xc001f48a
c000e41e:	6a 0e                	push   0xe
c000e420:	53                   	push   ebx
c000e421:	e8 ae fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e426:	6a 00                	push   0x0
c000e428:	68 92 f4 01 c0       	push   0xc001f492
c000e42d:	6a 0f                	push   0xf
c000e42f:	53                   	push   ebx
c000e430:	e8 9f fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e435:	83 c4 20             	add    esp,0x20
c000e438:	6a 00                	push   0x0
c000e43a:	68 9c f4 01 c0       	push   0xc001f49c
c000e43f:	6a 10                	push   0x10
c000e441:	53                   	push   ebx
c000e442:	e8 8d fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e447:	6a 00                	push   0x0
c000e449:	68 a6 f4 01 c0       	push   0xc001f4a6
c000e44e:	6a 11                	push   0x11
c000e450:	53                   	push   ebx
c000e451:	e8 7e fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e456:	83 c4 20             	add    esp,0x20
c000e459:	6a 00                	push   0x0
c000e45b:	68 b0 f4 01 c0       	push   0xc001f4b0
c000e460:	6a 12                	push   0x12
c000e462:	53                   	push   ebx
c000e463:	e8 6c fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e468:	6a 01                	push   0x1
c000e46a:	68 4a f5 01 c0       	push   0xc001f54a
c000e46f:	6a 60                	push   0x60
c000e471:	53                   	push   ebx
c000e472:	e8 5d fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e477:	83 c4 20             	add    esp,0x20
c000e47a:	6a 00                	push   0x0
c000e47c:	68 51 f5 01 c0       	push   0xc001f551
c000e481:	6a 20                	push   0x20
c000e483:	53                   	push   ebx
c000e484:	e8 4b fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e489:	6a 00                	push   0x0
c000e48b:	68 3c f5 01 c0       	push   0xc001f53c
c000e490:	6a 21                	push   0x21
c000e492:	53                   	push   ebx
c000e493:	e8 3c fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e498:	83 c4 20             	add    esp,0x20
c000e49b:	6a 00                	push   0x0
c000e49d:	68 43 f5 01 c0       	push   0xc001f543
c000e4a2:	6a 22                	push   0x22
c000e4a4:	53                   	push   ebx
c000e4a5:	e8 2a fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4aa:	6a 00                	push   0x0
c000e4ac:	68 ba f4 01 c0       	push   0xc001f4ba
c000e4b1:	6a 23                	push   0x23
c000e4b3:	53                   	push   ebx
c000e4b4:	e8 1b fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4b9:	83 c4 20             	add    esp,0x20
c000e4bc:	6a 00                	push   0x0
c000e4be:	68 c4 f4 01 c0       	push   0xc001f4c4
c000e4c3:	6a 24                	push   0x24
c000e4c5:	53                   	push   ebx
c000e4c6:	e8 09 fe ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4cb:	6a 00                	push   0x0
c000e4cd:	68 ce f4 01 c0       	push   0xc001f4ce
c000e4d2:	6a 25                	push   0x25
c000e4d4:	53                   	push   ebx
c000e4d5:	e8 fa fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4da:	83 c4 20             	add    esp,0x20
c000e4dd:	6a 00                	push   0x0
c000e4df:	68 d8 f4 01 c0       	push   0xc001f4d8
c000e4e4:	6a 26                	push   0x26
c000e4e6:	53                   	push   ebx
c000e4e7:	e8 e8 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4ec:	6a 00                	push   0x0
c000e4ee:	68 e2 f4 01 c0       	push   0xc001f4e2
c000e4f3:	6a 27                	push   0x27
c000e4f5:	53                   	push   ebx
c000e4f6:	e8 d9 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e4fb:	83 c4 20             	add    esp,0x20
c000e4fe:	6a 00                	push   0x0
c000e500:	68 ec f4 01 c0       	push   0xc001f4ec
c000e505:	6a 28                	push   0x28
c000e507:	53                   	push   ebx
c000e508:	e8 c7 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e50d:	6a 00                	push   0x0
c000e50f:	68 f6 f4 01 c0       	push   0xc001f4f6
c000e514:	6a 29                	push   0x29
c000e516:	53                   	push   ebx
c000e517:	e8 b8 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e51c:	83 c4 20             	add    esp,0x20
c000e51f:	6a 00                	push   0x0
c000e521:	68 00 f5 01 c0       	push   0xc001f500
c000e526:	6a 2a                	push   0x2a
c000e528:	53                   	push   ebx
c000e529:	e8 a6 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e52e:	6a 00                	push   0x0
c000e530:	68 0a f5 01 c0       	push   0xc001f50a
c000e535:	6a 2b                	push   0x2b
c000e537:	53                   	push   ebx
c000e538:	e8 97 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e53d:	83 c4 20             	add    esp,0x20
c000e540:	6a 00                	push   0x0
c000e542:	68 14 f5 01 c0       	push   0xc001f514
c000e547:	6a 2c                	push   0x2c
c000e549:	53                   	push   ebx
c000e54a:	e8 85 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e54f:	6a 00                	push   0x0
c000e551:	68 1e f5 01 c0       	push   0xc001f51e
c000e556:	6a 2d                	push   0x2d
c000e558:	53                   	push   ebx
c000e559:	e8 76 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e55e:	83 c4 20             	add    esp,0x20
c000e561:	6a 00                	push   0x0
c000e563:	68 28 f5 01 c0       	push   0xc001f528
c000e568:	6a 2e                	push   0x2e
c000e56a:	53                   	push   ebx
c000e56b:	e8 64 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e570:	6a 00                	push   0x0
c000e572:	68 32 f5 01 c0       	push   0xc001f532
c000e577:	6a 2f                	push   0x2f
c000e579:	53                   	push   ebx
c000e57a:	e8 55 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e57f:	83 c4 20             	add    esp,0x20
c000e582:	6a 00                	push   0x0
c000e584:	68 8c f6 01 c0       	push   0xc001f68c
c000e589:	6a 30                	push   0x30
c000e58b:	53                   	push   ebx
c000e58c:	e8 43 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e591:	6a 00                	push   0x0
c000e593:	68 96 f6 01 c0       	push   0xc001f696
c000e598:	6a 31                	push   0x31
c000e59a:	53                   	push   ebx
c000e59b:	e8 34 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5a0:	83 c4 20             	add    esp,0x20
c000e5a3:	6a 00                	push   0x0
c000e5a5:	68 a0 f6 01 c0       	push   0xc001f6a0
c000e5aa:	6a 32                	push   0x32
c000e5ac:	53                   	push   ebx
c000e5ad:	e8 22 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5b2:	6a 00                	push   0x0
c000e5b4:	68 aa f6 01 c0       	push   0xc001f6aa
c000e5b9:	6a 33                	push   0x33
c000e5bb:	53                   	push   ebx
c000e5bc:	e8 13 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5c1:	83 c4 20             	add    esp,0x20
c000e5c4:	6a 00                	push   0x0
c000e5c6:	68 b4 f6 01 c0       	push   0xc001f6b4
c000e5cb:	6a 34                	push   0x34
c000e5cd:	53                   	push   ebx
c000e5ce:	e8 01 fd ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5d3:	6a 00                	push   0x0
c000e5d5:	68 be f6 01 c0       	push   0xc001f6be
c000e5da:	6a 35                	push   0x35
c000e5dc:	53                   	push   ebx
c000e5dd:	e8 f2 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5e2:	83 c4 20             	add    esp,0x20
c000e5e5:	6a 00                	push   0x0
c000e5e7:	68 c8 f6 01 c0       	push   0xc001f6c8
c000e5ec:	6a 36                	push   0x36
c000e5ee:	53                   	push   ebx
c000e5ef:	e8 e0 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e5f4:	6a 00                	push   0x0
c000e5f6:	68 d2 f6 01 c0       	push   0xc001f6d2
c000e5fb:	6a 37                	push   0x37
c000e5fd:	53                   	push   ebx
c000e5fe:	e8 d1 fc ff ff       	call   c000e2d4 <IDT::addEntry(int, void (*)(), bool)>
c000e603:	83 c4 1c             	add    esp,0x1c
c000e606:	6a 03                	push   0x3
c000e608:	6a 02                	push   0x2
c000e60a:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e610:	e8 0f 41 00 00       	call   c0012724 <VAS::allocatePages(int, int)>
c000e615:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e61c:	89 c6                	mov    esi,eax
c000e61e:	e8 ad 02 00 00       	call   c000e8d0 <malloc>
c000e623:	81 c6 00 20 00 00    	add    esi,0x2000
c000e629:	89 04 24             	mov    DWORD PTR [esp],eax
c000e62c:	89 c7                	mov    edi,eax
c000e62e:	e8 c5 31 00 00       	call   c00117f8 <TSS::TSS()>
c000e633:	83 c4 0c             	add    esp,0xc
c000e636:	68 46 f4 01 c0       	push   0xc001f446
c000e63b:	56                   	push   esi
c000e63c:	57                   	push   edi
c000e63d:	e8 fa 31 00 00       	call   c001183c <TSS::setup(unsigned long, unsigned long)>
c000e642:	89 c6                	mov    esi,eax
c000e644:	58                   	pop    eax
c000e645:	5a                   	pop    edx
c000e646:	6a 00                	push   0x0
c000e648:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e64c:	50                   	push   eax
c000e64d:	e8 ce fb ff ff       	call   c000e220 <IDTEntry::IDTEntry(bool)>
c000e652:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e656:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e65b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e662:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e66c:	80 ce 05             	or     dh,0x5
c000e66f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e676:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e67a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e67d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e680:	e8 87 fc ff ff       	call   c000e30c <IDT::flush()>
c000e685:	83 c4 20             	add    esp,0x20
c000e688:	5b                   	pop    ebx
c000e689:	5e                   	pop    esi
c000e68a:	5f                   	pop    edi
c000e68b:	c3                   	ret    

c000e68c <CPU::current()>:
c000e68c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e691:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e697:	c3                   	ret    

c000e698 <operator new(unsigned long)>:
c000e698:	e9 33 02 00 00       	jmp    c000e8d0 <malloc>

c000e69d <operator delete(void*)>:
c000e69d:	e9 4e 02 00 00       	jmp    c000e8f0 <rfree>

c000e6a2 <disableIRQs()>:
c000e6a2:	fa                   	cli    
c000e6a3:	c3                   	ret    

c000e6a4 <enableIRQs()>:
c000e6a4:	fb                   	sti    
c000e6a5:	c3                   	ret    

c000e6a6 <lockScheduler()>:
c000e6a6:	fa                   	cli    
c000e6a7:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6ad:	c3                   	ret    

c000e6ae <unlockScheduler()>:
c000e6ae:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e6b5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e6bc:	75 01                	jne    c000e6bf <unlockScheduler()+0x11>
c000e6be:	fb                   	sti    
c000e6bf:	c3                   	ret    

c000e6c0 <lockStuff()>:
c000e6c0:	fa                   	cli    
c000e6c1:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e6c7:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e6cd:	c3                   	ret    

c000e6ce <unlockStuff()>:
c000e6ce:	83 ec 0c             	sub    esp,0xc
c000e6d1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e6d6:	48                   	dec    eax
c000e6d7:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e6dc:	75 18                	jne    c000e6f6 <unlockStuff()+0x28>
c000e6de:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e6e5:	74 0f                	je     c000e6f6 <unlockStuff()+0x28>
c000e6e7:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e6f1:	e8 ba 6c 00 00       	call   c00153b0 <schedule()>
c000e6f6:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000e6fd:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e704:	75 01                	jne    c000e707 <unlockStuff()+0x39>
c000e706:	fb                   	sti    
c000e707:	83 c4 0c             	add    esp,0xc
c000e70a:	c3                   	ret    

c000e70b <Virt::getAKernelVAS()>:
c000e70b:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e710:	c3                   	ret    

c000e711 <__not_memcpy>:
c000e711:	57                   	push   edi
c000e712:	56                   	push   esi
c000e713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e717:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e71b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e71f:	89 c7                	mov    edi,eax
c000e721:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e723:	5e                   	pop    esi
c000e724:	5f                   	pop    edi
c000e725:	c3                   	ret    

c000e726 <sbrk>:
c000e726:	55                   	push   ebp
c000e727:	57                   	push   edi
c000e728:	56                   	push   esi
c000e729:	53                   	push   ebx
c000e72a:	83 ec 1c             	sub    esp,0x1c
c000e72d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e731:	85 c0                	test   eax,eax
c000e733:	74 66                	je     c000e79b <sbrk+0x75>
c000e735:	78 6b                	js     c000e7a2 <sbrk+0x7c>
c000e737:	8b 15 10 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024010
c000e73d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e741:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c000e747:	05 ff 0f 00 00       	add    eax,0xfff
c000e74c:	0f 49 e8             	cmovns ebp,eax
c000e74f:	c1 fd 0c             	sar    ebp,0xc
c000e752:	bb 00 00 00 00       	mov    ebx,0x0
c000e757:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e75d:	8b 3d 10 40 02 c0    	mov    edi,DWORD PTR ds:0xc0024010
c000e763:	e8 a8 06 00 00       	call   c000ee10 <Phys::allocatePage()>
c000e768:	68 01 04 00 00       	push   0x401
c000e76d:	57                   	push   edi
c000e76e:	50                   	push   eax
c000e76f:	56                   	push   esi
c000e770:	e8 a7 3e 00 00       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e775:	81 05 10 40 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024010,0x1000
c000e77f:	83 c3 01             	add    ebx,0x1
c000e782:	83 c4 10             	add    esp,0x10
c000e785:	39 dd                	cmp    ebp,ebx
c000e787:	75 ce                	jne    c000e757 <sbrk+0x31>
c000e789:	0f 20 d8             	mov    eax,cr3
c000e78c:	0f 22 d8             	mov    cr3,eax
c000e78f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e793:	83 c4 1c             	add    esp,0x1c
c000e796:	5b                   	pop    ebx
c000e797:	5e                   	pop    esi
c000e798:	5f                   	pop    edi
c000e799:	5d                   	pop    ebp
c000e79a:	c3                   	ret    
c000e79b:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c000e7a0:	eb f1                	jmp    c000e793 <sbrk+0x6d>
c000e7a2:	83 ec 08             	sub    esp,0x8
c000e7a5:	50                   	push   eax
c000e7a6:	68 74 1f 02 c0       	push   0xc0021f74
c000e7ab:	e8 9e 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7b0:	83 c4 10             	add    esp,0x10
c000e7b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7b8:	eb d9                	jmp    c000e793 <sbrk+0x6d>

c000e7ba <sbrk_thunk>:
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c1:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e7c6:	7f 10                	jg     c000e7d8 <sbrk_thunk+0x1e>
c000e7c8:	83 ec 0c             	sub    esp,0xc
c000e7cb:	50                   	push   eax
c000e7cc:	e8 55 ff ff ff       	call   c000e726 <sbrk>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	83 c4 0c             	add    esp,0xc
c000e7d7:	c3                   	ret    
c000e7d8:	83 ec 08             	sub    esp,0x8
c000e7db:	50                   	push   eax
c000e7dc:	68 a4 1f 02 c0       	push   0xc0021fa4
c000e7e1:	e8 68 87 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000e7e6:	83 c4 10             	add    esp,0x10
c000e7e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e7ee:	eb e4                	jmp    c000e7d4 <sbrk_thunk+0x1a>

c000e7f0 <mmap>:
c000e7f0:	55                   	push   ebp
c000e7f1:	57                   	push   edi
c000e7f2:	56                   	push   esi
c000e7f3:	53                   	push   ebx
c000e7f4:	83 ec 18             	sub    esp,0x18
c000e7f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7fb:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e801:	89 fb                	mov    ebx,edi
c000e803:	c1 eb 0c             	shr    ebx,0xc
c000e806:	53                   	push   ebx
c000e807:	e8 37 37 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c000e80c:	89 c5                	mov    ebp,eax
c000e80e:	83 c4 10             	add    esp,0x10
c000e811:	85 db                	test   ebx,ebx
c000e813:	7e 2f                	jle    c000e844 <mmap+0x54>
c000e815:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e81b:	01 c7                	add    edi,eax
c000e81d:	89 c3                	mov    ebx,eax
c000e81f:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e825:	e8 e6 05 00 00       	call   c000ee10 <Phys::allocatePage()>
c000e82a:	68 01 04 00 00       	push   0x401
c000e82f:	53                   	push   ebx
c000e830:	50                   	push   eax
c000e831:	56                   	push   esi
c000e832:	e8 e5 3d 00 00       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c000e837:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	39 fb                	cmp    ebx,edi
c000e842:	75 db                	jne    c000e81f <mmap+0x2f>
c000e844:	89 e8                	mov    eax,ebp
c000e846:	83 c4 0c             	add    esp,0xc
c000e849:	5b                   	pop    ebx
c000e84a:	5e                   	pop    esi
c000e84b:	5f                   	pop    edi
c000e84c:	5d                   	pop    ebp
c000e84d:	c3                   	ret    

c000e84e <munmap>:
c000e84e:	83 ec 18             	sub    esp,0x18
c000e851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e855:	e8 e7 39 00 00       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c000e85a:	b8 00 00 00 00       	mov    eax,0x0
c000e85f:	83 c4 1c             	add    esp,0x1c
c000e862:	c3                   	ret    

c000e863 <liballoc_lock()>:
c000e863:	fa                   	cli    
c000e864:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e86b:	b8 00 00 00 00       	mov    eax,0x0
c000e870:	c3                   	ret    

c000e871 <liballoc_unlock()>:
c000e871:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e879:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000e880:	75 01                	jne    c000e883 <liballoc_unlock()+0x12>
c000e882:	fb                   	sti    
c000e883:	b8 00 00 00 00       	mov    eax,0x0
c000e888:	c3                   	ret    

c000e889 <liballoc_alloc(int)>:
c000e889:	83 ec 10             	sub    esp,0x10
c000e88c:	6a 01                	push   0x1
c000e88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e892:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e898:	e8 87 3e 00 00       	call   c0012724 <VAS::allocatePages(int, int)>
c000e89d:	83 c4 1c             	add    esp,0x1c
c000e8a0:	c3                   	ret    

c000e8a1 <liballoc_free(void*, int)>:
c000e8a1:	83 ec 14             	sub    esp,0x14
c000e8a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8a8:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e8ae:	e8 cb 3a 00 00       	call   c001237e <VAS::freeAllocatedPages(unsigned long)>
c000e8b3:	b8 00 00 00 00       	mov    eax,0x0
c000e8b8:	83 c4 1c             	add    esp,0x1c
c000e8bb:	c3                   	ret    

c000e8bc <realloc>:
c000e8bc:	83 ec 14             	sub    esp,0x14
c000e8bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c7:	e8 b9 2e ff ff       	call   c0001785 <dlrealloc>
c000e8cc:	83 c4 1c             	add    esp,0x1c
c000e8cf:	c3                   	ret    

c000e8d0 <malloc>:
c000e8d0:	83 ec 18             	sub    esp,0x18
c000e8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d7:	e8 6c 29 ff ff       	call   c0001248 <dlmalloc>
c000e8dc:	83 c4 1c             	add    esp,0x1c
c000e8df:	c3                   	ret    

c000e8e0 <free>:
c000e8e0:	83 ec 18             	sub    esp,0x18
c000e8e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8e7:	e8 9a 24 ff ff       	call   c0000d86 <dlfree>
c000e8ec:	83 c4 1c             	add    esp,0x1c
c000e8ef:	c3                   	ret    

c000e8f0 <rfree>:
c000e8f0:	83 ec 18             	sub    esp,0x18
c000e8f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8f7:	e8 8a 24 ff ff       	call   c0000d86 <dlfree>
c000e8fc:	83 c4 1c             	add    esp,0x1c
c000e8ff:	c3                   	ret    

c000e900 <calloc>:
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 10             	sub    esp,0x10
c000e905:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e909:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e90e:	53                   	push   ebx
c000e90f:	e8 bc ff ff ff       	call   c000e8d0 <malloc>
c000e914:	89 c6                	mov    esi,eax
c000e916:	83 c4 0c             	add    esp,0xc
c000e919:	53                   	push   ebx
c000e91a:	6a 00                	push   0x0
c000e91c:	50                   	push   eax
c000e91d:	e8 ce 1b ff ff       	call   c00004f0 <memset>
c000e922:	89 f0                	mov    eax,esi
c000e924:	83 c4 14             	add    esp,0x14
c000e927:	5b                   	pop    ebx
c000e928:	5e                   	pop    esi
c000e929:	c3                   	ret    
c000e92a:	66 90                	xchg   ax,ax

c000e92c <KeMailboxTryPost(Mailbox*, void*)>:
c000e92c:	83 ec 10             	sub    esp,0x10
c000e92f:	fa                   	cli    
c000e930:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e935:	83 c0 01             	add    eax,0x1
c000e938:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e93d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e949:	85 c0                	test   eax,eax
c000e94b:	75 23                	jne    c000e970 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e94d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e951:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e955:	89 10                	mov    DWORD PTR [eax],edx
c000e957:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e95b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e95e:	8d 50 01             	lea    edx,[eax+0x1]
c000e961:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e965:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e968:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e96d:	8d 76 00             	lea    esi,[esi+0x0]
c000e970:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e978:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e97d:	85 c0                	test   eax,eax
c000e97f:	75 03                	jne    c000e984 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000e981:	fb                   	sti    
c000e982:	66 90                	xchg   ax,ax
c000e984:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e988:	83 c4 10             	add    esp,0x10
c000e98b:	c3                   	ret    

c000e98c <KeMailboxTryGet(Mailbox*, void**)>:
c000e98c:	83 ec 10             	sub    esp,0x10
c000e98f:	fa                   	cli    
c000e990:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e995:	83 c0 01             	add    eax,0x1
c000e998:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e99d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9a9:	83 f8 01             	cmp    eax,0x1
c000e9ac:	75 22                	jne    c000e9d0 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000e9ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9b2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9b8:	89 10                	mov    DWORD PTR [eax],edx
c000e9ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9c1:	8d 50 ff             	lea    edx,[eax-0x1]
c000e9c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9cb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e9d0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000e9d8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9dd:	85 c0                	test   eax,eax
c000e9df:	75 03                	jne    c000e9e4 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000e9e1:	fb                   	sti    
c000e9e2:	66 90                	xchg   ax,ax
c000e9e4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9e8:	83 c4 10             	add    esp,0x10
c000e9eb:	c3                   	ret    

c000e9ec <KeMailboxCreate()>:
c000e9ec:	83 ec 1c             	sub    esp,0x1c
c000e9ef:	83 ec 0c             	sub    esp,0xc
c000e9f2:	6a 08                	push   0x8
c000e9f4:	e8 d7 fe ff ff       	call   c000e8d0 <malloc>
c000e9f9:	83 c4 10             	add    esp,0x10
c000e9fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea04:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ea0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ea15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea19:	83 c4 1c             	add    esp,0x1c
c000ea1c:	c3                   	ret    
c000ea1d:	8d 76 00             	lea    esi,[esi+0x0]

c000ea20 <KeMailboxPost(Mailbox*, void*)>:
c000ea20:	83 ec 1c             	sub    esp,0x1c
c000ea23:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea30:	e8 f7 fe ff ff       	call   c000e92c <KeMailboxTryPost(Mailbox*, void*)>
c000ea35:	83 c4 08             	add    esp,0x8
c000ea38:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea3c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea40:	83 f0 01             	xor    eax,0x1
c000ea43:	0f b6 c0             	movzx  eax,al
c000ea46:	85 c0                	test   eax,eax
c000ea48:	74 26                	je     c000ea70 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ea4a:	fa                   	cli    
c000ea4b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea50:	83 c0 01             	add    eax,0x1
c000ea53:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea58:	e8 53 69 00 00       	call   c00153b0 <schedule()>
c000ea5d:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ea65:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea6a:	85 c0                	test   eax,eax
c000ea6c:	75 02                	jne    c000ea70 <KeMailboxPost(Mailbox*, void*)+0x50>
c000ea6e:	fb                   	sti    
c000ea6f:	90                   	nop
c000ea70:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ea75:	85 c0                	test   eax,eax
c000ea77:	75 03                	jne    c000ea7c <KeMailboxPost(Mailbox*, void*)+0x5c>
c000ea79:	eb ad                	jmp    c000ea28 <KeMailboxPost(Mailbox*, void*)+0x8>
c000ea7b:	90                   	nop
c000ea7c:	90                   	nop
c000ea7d:	83 c4 1c             	add    esp,0x1c
c000ea80:	c3                   	ret    
c000ea81:	8d 76 00             	lea    esi,[esi+0x0]

c000ea84 <KeMailboxGet(Mailbox*, void**)>:
c000ea84:	83 ec 1c             	sub    esp,0x1c
c000ea87:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea90:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ea94:	e8 f3 fe ff ff       	call   c000e98c <KeMailboxTryGet(Mailbox*, void**)>
c000ea99:	83 c4 08             	add    esp,0x8
c000ea9c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eaa0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaa4:	83 f0 01             	xor    eax,0x1
c000eaa7:	0f b6 c0             	movzx  eax,al
c000eaaa:	85 c0                	test   eax,eax
c000eaac:	74 26                	je     c000ead4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000eaae:	fa                   	cli    
c000eaaf:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eab4:	83 c0 01             	add    eax,0x1
c000eab7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eabc:	e8 ef 68 00 00       	call   c00153b0 <schedule()>
c000eac1:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000eac9:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eace:	85 c0                	test   eax,eax
c000ead0:	75 02                	jne    c000ead4 <KeMailboxGet(Mailbox*, void**)+0x50>
c000ead2:	fb                   	sti    
c000ead3:	90                   	nop
c000ead4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ead9:	85 c0                	test   eax,eax
c000eadb:	75 03                	jne    c000eae0 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000eadd:	eb ad                	jmp    c000ea8c <KeMailboxGet(Mailbox*, void**)+0x8>
c000eadf:	90                   	nop
c000eae0:	90                   	nop
c000eae1:	83 c4 1c             	add    esp,0x1c
c000eae4:	c3                   	ret    
c000eae5:	8d 76 00             	lea    esi,[esi+0x0]

c000eae8 <KeMailboxDestroy(Mailbox*)>:
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	83 ec 0c             	sub    esp,0xc
c000eaee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf2:	e8 e9 fd ff ff       	call   c000e8e0 <free>
c000eaf7:	83 c4 10             	add    esp,0x10
c000eafa:	90                   	nop
c000eafb:	83 c4 0c             	add    esp,0xc
c000eafe:	c3                   	ret    

c000eaff <KeEntryPoint>:
c000eaff:	57                   	push   edi
c000eb00:	bf f9 03 00 00       	mov    edi,0x3f9
c000eb05:	56                   	push   esi
c000eb06:	31 f6                	xor    esi,esi
c000eb08:	53                   	push   ebx
c000eb09:	89 fa                	mov    edx,edi
c000eb0b:	83 ec 2c             	sub    esp,0x2c
c000eb0e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000eb13:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000eb18:	89 f0                	mov    eax,esi
c000eb1a:	ee                   	out    dx,al
c000eb1b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000eb20:	b0 80                	mov    al,0x80
c000eb22:	89 da                	mov    edx,ebx
c000eb24:	ee                   	out    dx,al
c000eb25:	b1 03                	mov    cl,0x3
c000eb27:	ba f8 03 00 00       	mov    edx,0x3f8
c000eb2c:	88 c8                	mov    al,cl
c000eb2e:	ee                   	out    dx,al
c000eb2f:	89 f0                	mov    eax,esi
c000eb31:	89 fa                	mov    edx,edi
c000eb33:	ee                   	out    dx,al
c000eb34:	88 c8                	mov    al,cl
c000eb36:	89 da                	mov    edx,ebx
c000eb38:	ee                   	out    dx,al
c000eb39:	b0 c7                	mov    al,0xc7
c000eb3b:	ba fa 03 00 00       	mov    edx,0x3fa
c000eb40:	ee                   	out    dx,al
c000eb41:	b0 0b                	mov    al,0xb
c000eb43:	ba fc 03 00 00       	mov    edx,0x3fc
c000eb48:	ee                   	out    dx,al
c000eb49:	68 b3 1f 02 c0       	push   0xc0021fb3
c000eb4e:	e8 fb 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb53:	e8 14 da ff ff       	call   c000c56c <KeDisplaySplashScreen()>
c000eb58:	a1 24 05 00 00       	mov    eax,ds:0x524
c000eb5d:	05 ff 0f 00 00       	add    eax,0xfff
c000eb62:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb67:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb6a:	e8 13 04 00 00       	call   c000ef82 <Phys::physicalMemorySetup(unsigned int)>
c000eb6f:	e8 a3 35 00 00       	call   c0012117 <Virt::virtualMemorySetup()>
c000eb74:	e8 3d d9 ff ff       	call   c000c4b6 <KeInitialiseAtexit()>
c000eb79:	c7 04 24 ca 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fca
c000eb80:	e8 c9 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eb85:	58                   	pop    eax
c000eb86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000eb8a:	53                   	push   ebx
c000eb8b:	e8 6e 38 00 00       	call   c00123fe <VAS::VAS()>
c000eb90:	c7 04 24 da 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fda
c000eb97:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000eb9d:	e8 ac 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000eba2:	e8 e7 10 01 00       	call   c001fc8e <_init>
c000eba7:	c7 04 24 ee 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fee
c000ebae:	e8 9b 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebb3:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ebba:	e8 11 fd ff ff       	call   c000e8d0 <malloc>
c000ebbf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebc2:	89 c6                	mov    esi,eax
c000ebc4:	e8 67 ea ff ff       	call   c000d630 <Computer::Computer()>
c000ebc9:	5a                   	pop    edx
c000ebca:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000ebd0:	59                   	pop    ecx
c000ebd1:	56                   	push   esi
c000ebd2:	68 fd 1f 02 c0       	push   0xc0021ffd
c000ebd7:	e8 72 83 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000ebdc:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ebe1:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebe3:	53                   	push   ebx
c000ebe4:	6a 00                	push   0x0
c000ebe6:	6a 00                	push   0x0
c000ebe8:	50                   	push   eax
c000ebe9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebec:	83 c4 14             	add    esp,0x14
c000ebef:	53                   	push   ebx
c000ebf0:	e8 bf 38 00 00       	call   c00124b4 <VAS::~VAS()>
c000ebf5:	83 c4 30             	add    esp,0x30
c000ebf8:	5b                   	pop    ebx
c000ebf9:	5e                   	pop    esi
c000ebfa:	5f                   	pop    edi
c000ebfb:	c3                   	ret    

c000ebfc <Mutex::Mutex()>:
c000ebfc:	83 ec 0c             	sub    esp,0xc
c000ebff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec03:	83 ec 08             	sub    esp,0x8
c000ec06:	6a 01                	push   0x1
c000ec08:	50                   	push   eax
c000ec09:	e8 32 0c 00 00       	call   c000f840 <Semaphore::Semaphore(int)>
c000ec0e:	83 c4 10             	add    esp,0x10
c000ec11:	90                   	nop
c000ec12:	83 c4 0c             	add    esp,0xc
c000ec15:	c3                   	ret    

c000ec16 <KePanic(char const*)>:
c000ec16:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000ec1d:	e9 b4 96 00 00       	jmp    c00182d6 <HalPanic(char const*)>

c000ec22 <Phys::allocateDMA(unsigned long)>:
c000ec22:	55                   	push   ebp
c000ec23:	31 ed                	xor    ebp,ebp
c000ec25:	57                   	push   edi
c000ec26:	56                   	push   esi
c000ec27:	31 f6                	xor    esi,esi
c000ec29:	53                   	push   ebx
c000ec2a:	31 db                	xor    ebx,ebx
c000ec2c:	83 ec 1c             	sub    esp,0x1c
c000ec2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec33:	05 ff 0f 00 00       	add    eax,0xfff
c000ec38:	c1 e8 0c             	shr    eax,0xc
c000ec3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec3f:	31 c0                	xor    eax,eax
c000ec41:	eb 1b                	jmp    c000ec5e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec43:	8d 78 01             	lea    edi,[eax+0x1]
c000ec46:	85 c0                	test   eax,eax
c000ec48:	0f 44 eb             	cmove  ebp,ebx
c000ec4b:	0f 44 f3             	cmove  esi,ebx
c000ec4e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ec52:	74 37                	je     c000ec8b <Phys::allocateDMA(unsigned long)+0x69>
c000ec54:	89 f8                	mov    eax,edi
c000ec56:	83 c3 01             	add    ebx,0x1
c000ec59:	83 fb 0f             	cmp    ebx,0xf
c000ec5c:	7f 13                	jg     c000ec71 <Phys::allocateDMA(unsigned long)+0x4f>
c000ec5e:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ec65:	74 dc                	je     c000ec43 <Phys::allocateDMA(unsigned long)+0x21>
c000ec67:	31 c0                	xor    eax,eax
c000ec69:	83 c3 01             	add    ebx,0x1
c000ec6c:	83 fb 0f             	cmp    ebx,0xf
c000ec6f:	7e ed                	jle    c000ec5e <Phys::allocateDMA(unsigned long)+0x3c>
c000ec71:	83 ec 0c             	sub    esp,0xc
c000ec74:	68 14 20 02 c0       	push   0xc0022014
c000ec79:	e8 98 ff ff ff       	call   c000ec16 <KePanic(char const*)>
c000ec7e:	83 c4 10             	add    esp,0x10
c000ec81:	31 c0                	xor    eax,eax
c000ec83:	83 c4 1c             	add    esp,0x1c
c000ec86:	5b                   	pop    ebx
c000ec87:	5e                   	pop    esi
c000ec88:	5f                   	pop    edi
c000ec89:	5d                   	pop    ebp
c000ec8a:	c3                   	ret    
c000ec8b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ec8f:	89 f2                	mov    edx,esi
c000ec91:	c1 fa 04             	sar    edx,0x4
c000ec94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec98:	01 f1                	add    ecx,esi
c000ec9a:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ec9d:	83 e9 01             	sub    ecx,0x1
c000eca0:	0f 48 ca             	cmovs  ecx,edx
c000eca3:	c1 f9 04             	sar    ecx,0x4
c000eca6:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000ecaa:	74 06                	je     c000ecb2 <Phys::allocateDMA(unsigned long)+0x90>
c000ecac:	89 eb                	mov    ebx,ebp
c000ecae:	31 c0                	xor    eax,eax
c000ecb0:	eb b7                	jmp    c000ec69 <Phys::allocateDMA(unsigned long)+0x47>
c000ecb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ecb6:	85 d2                	test   edx,edx
c000ecb8:	74 17                	je     c000ecd1 <Phys::allocateDMA(unsigned long)+0xaf>
c000ecba:	8d 96 b0 bd 02 c0    	lea    edx,[esi-0x3ffd4250]
c000ecc0:	8d 84 06 b1 bd 02 c0 	lea    eax,[esi+eax*1-0x3ffd424f]
c000ecc7:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ecca:	83 c2 01             	add    edx,0x1
c000eccd:	39 d0                	cmp    eax,edx
c000eccf:	75 f6                	jne    c000ecc7 <Phys::allocateDMA(unsigned long)+0xa5>
c000ecd1:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ecd7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecdb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ecdf:	01 c2                	add    edx,eax
c000ece1:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ece7:	85 c9                	test   ecx,ecx
c000ece9:	74 17                	je     c000ed02 <Phys::allocateDMA(unsigned long)+0xe0>
c000eceb:	83 ec 0c             	sub    esp,0xc
c000ecee:	68 14 20 02 c0       	push   0xc0022014
c000ecf3:	e8 1e ff ff ff       	call   c000ec16 <KePanic(char const*)>
c000ecf8:	83 c4 10             	add    esp,0x10
c000ecfb:	89 f8                	mov    eax,edi
c000ecfd:	e9 54 ff ff ff       	jmp    c000ec56 <Phys::allocateDMA(unsigned long)+0x34>
c000ed02:	c1 e6 0c             	shl    esi,0xc
c000ed05:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000ed0b:	e9 73 ff ff ff       	jmp    c000ec83 <Phys::allocateDMA(unsigned long)+0x61>

c000ed10 <Phys::freeDMA(unsigned long, unsigned long)>:
c000ed10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed14:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000ed1a:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ed1f:	c1 ea 0c             	shr    edx,0xc
c000ed22:	29 d0                	sub    eax,edx
c000ed24:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ed29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed2d:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ed32:	c1 e8 0c             	shr    eax,0xc
c000ed35:	85 d2                	test   edx,edx
c000ed37:	74 11                	je     c000ed4a <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000ed39:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000ed3e:	01 c2                	add    edx,eax
c000ed40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ed43:	83 c0 01             	add    eax,0x1
c000ed46:	39 d0                	cmp    eax,edx
c000ed48:	75 f6                	jne    c000ed40 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ed4a:	c3                   	ret    

c000ed4b <Phys::setPageState(unsigned long, bool)>:
c000ed4b:	57                   	push   edi
c000ed4c:	56                   	push   esi
c000ed4d:	8b 35 14 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024014
c000ed53:	53                   	push   ebx
c000ed54:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ed59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ed5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ed61:	89 ca                	mov    edx,ecx
c000ed63:	83 e1 07             	and    ecx,0x7
c000ed66:	c1 ea 03             	shr    edx,0x3
c000ed69:	0f b6 c0             	movzx  eax,al
c000ed6c:	d3 c3                	rol    ebx,cl
c000ed6e:	01 d6                	add    esi,edx
c000ed70:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ed73:	d3 e0                	shl    eax,cl
c000ed75:	21 fb                	and    ebx,edi
c000ed77:	88 1e                	mov    BYTE PTR [esi],bl
c000ed79:	8b 1d 14 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024014
c000ed7f:	01 da                	add    edx,ebx
c000ed81:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ed83:	09 c8                	or     eax,ecx
c000ed85:	88 02                	mov    BYTE PTR [edx],al
c000ed87:	5b                   	pop    ebx
c000ed88:	5e                   	pop    esi
c000ed89:	5f                   	pop    edi
c000ed8a:	c3                   	ret    

c000ed8b <Phys::getPageState(unsigned long)>:
c000ed8b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed8f:	8b 15 14 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024014
c000ed95:	89 c8                	mov    eax,ecx
c000ed97:	83 e1 07             	and    ecx,0x7
c000ed9a:	c1 e8 03             	shr    eax,0x3
c000ed9d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000eda1:	d3 f8                	sar    eax,cl
c000eda3:	83 e0 01             	and    eax,0x1
c000eda6:	c3                   	ret    

c000eda7 <Phys::freePage(unsigned long)>:
c000eda7:	53                   	push   ebx
c000eda8:	83 ec 08             	sub    esp,0x8
c000edab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edaf:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000edb5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000edbb:	76 41                	jbe    c000edfe <Phys::freePage(unsigned long)+0x57>
c000edbd:	c1 e8 0c             	shr    eax,0xc
c000edc0:	50                   	push   eax
c000edc1:	89 c3                	mov    ebx,eax
c000edc3:	e8 c3 ff ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000edc8:	5a                   	pop    edx
c000edc9:	84 c0                	test   al,al
c000edcb:	74 20                	je     c000eded <Phys::freePage(unsigned long)+0x46>
c000edcd:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000edd2:	83 ec 08             	sub    esp,0x8
c000edd5:	6a 00                	push   0x0
c000edd7:	53                   	push   ebx
c000edd8:	83 e8 01             	sub    eax,0x1
c000eddb:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ede0:	e8 66 ff ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000ede5:	83 c4 10             	add    esp,0x10
c000ede8:	83 c4 08             	add    esp,0x8
c000edeb:	5b                   	pop    ebx
c000edec:	c3                   	ret    
c000eded:	c7 44 24 10 b9 20 02 c0 	mov    DWORD PTR [esp+0x10],0xc00220b9
c000edf5:	83 c4 08             	add    esp,0x8
c000edf8:	5b                   	pop    ebx
c000edf9:	e9 18 fe ff ff       	jmp    c000ec16 <KePanic(char const*)>
c000edfe:	68 00 10 00 00       	push   0x1000
c000ee03:	50                   	push   eax
c000ee04:	e8 07 ff ff ff       	call   c000ed10 <Phys::freeDMA(unsigned long, unsigned long)>
c000ee09:	59                   	pop    ecx
c000ee0a:	5b                   	pop    ebx
c000ee0b:	83 c4 08             	add    esp,0x8
c000ee0e:	5b                   	pop    ebx
c000ee0f:	c3                   	ret    

c000ee10 <Phys::allocatePage()>:
c000ee10:	56                   	push   esi
c000ee11:	53                   	push   ebx
c000ee12:	83 ec 14             	sub    esp,0x14
c000ee15:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000ee1b:	89 f3                	mov    ebx,esi
c000ee1d:	eb 0a                	jmp    c000ee29 <Phys::allocatePage()+0x19>
c000ee1f:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000ee25:	39 de                	cmp    esi,ebx
c000ee27:	74 26                	je     c000ee4f <Phys::allocatePage()+0x3f>
c000ee29:	53                   	push   ebx
c000ee2a:	e8 5c ff ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000ee2f:	5a                   	pop    edx
c000ee30:	84 c0                	test   al,al
c000ee32:	74 67                	je     c000ee9b <Phys::allocatePage()+0x8b>
c000ee34:	83 c3 01             	add    ebx,0x1
c000ee37:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ee3d:	75 e0                	jne    c000ee1f <Phys::allocatePage()+0xf>
c000ee3f:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000ee49:	31 db                	xor    ebx,ebx
c000ee4b:	39 de                	cmp    esi,ebx
c000ee4d:	75 da                	jne    c000ee29 <Phys::allocatePage()+0x19>
c000ee4f:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000ee54:	83 ec 0c             	sub    esp,0xc
c000ee57:	83 f0 01             	xor    eax,0x1
c000ee5a:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ee5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ee67:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ee6d:	50                   	push   eax
c000ee6e:	e8 0b 40 00 00       	call   c0012e7e <VAS::scanForEviction()>
c000ee73:	83 c4 10             	add    esp,0x10
c000ee76:	85 c0                	test   eax,eax
c000ee78:	75 48                	jne    c000eec2 <Phys::allocatePage()+0xb2>
c000ee7a:	83 ec 0c             	sub    esp,0xc
c000ee7d:	68 3c 20 02 c0       	push   0xc002203c
c000ee82:	e8 8f fd ff ff       	call   c000ec16 <KePanic(char const*)>
c000ee87:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000ee8d:	83 c4 10             	add    esp,0x10
c000ee90:	53                   	push   ebx
c000ee91:	e8 f5 fe ff ff       	call   c000ed8b <Phys::getPageState(unsigned long)>
c000ee96:	5a                   	pop    edx
c000ee97:	84 c0                	test   al,al
c000ee99:	75 99                	jne    c000ee34 <Phys::allocatePage()+0x24>
c000ee9b:	6a 01                	push   0x1
c000ee9d:	53                   	push   ebx
c000ee9e:	e8 a8 fe ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000eea3:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000eea9:	59                   	pop    ecx
c000eeaa:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000eeaf:	5b                   	pop    ebx
c000eeb0:	83 c2 01             	add    edx,0x1
c000eeb3:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000eeb9:	c1 e0 0c             	shl    eax,0xc
c000eebc:	83 c4 14             	add    esp,0x14
c000eebf:	5b                   	pop    ebx
c000eec0:	5e                   	pop    esi
c000eec1:	c3                   	ret    
c000eec2:	83 ec 08             	sub    esp,0x8
c000eec5:	89 c2                	mov    edx,eax
c000eec7:	6a 01                	push   0x1
c000eec9:	c1 ea 0c             	shr    edx,0xc
c000eecc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eed0:	52                   	push   edx
c000eed1:	e8 75 fe ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000eed6:	83 c4 10             	add    esp,0x10
c000eed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eedd:	eb dd                	jmp    c000eebc <Phys::allocatePage()+0xac>

c000eedf <Phys::allocateContiguousPages(int)>:
c000eedf:	57                   	push   edi
c000eee0:	56                   	push   esi
c000eee1:	53                   	push   ebx
c000eee2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eee6:	fa                   	cli    
c000eee7:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c000eeed:	31 db                	xor    ebx,ebx
c000eeef:	83 c2 01             	add    edx,0x1
c000eef2:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c000eef8:	85 db                	test   ebx,ebx
c000eefa:	75 11                	jne    c000ef0d <Phys::allocateContiguousPages(int)+0x2e>
c000eefc:	e8 0f ff ff ff       	call   c000ee10 <Phys::allocatePage()>
c000ef01:	83 fe 01             	cmp    esi,0x1
c000ef04:	89 c7                	mov    edi,eax
c000ef06:	74 21                	je     c000ef29 <Phys::allocateContiguousPages(int)+0x4a>
c000ef08:	bb 01 00 00 00       	mov    ebx,0x1
c000ef0d:	e8 fe fe ff ff       	call   c000ee10 <Phys::allocatePage()>
c000ef12:	89 da                	mov    edx,ebx
c000ef14:	c1 e2 0c             	shl    edx,0xc
c000ef17:	01 fa                	add    edx,edi
c000ef19:	39 c2                	cmp    edx,eax
c000ef1b:	74 24                	je     c000ef41 <Phys::allocateContiguousPages(int)+0x62>
c000ef1d:	83 fe 01             	cmp    esi,0x1
c000ef20:	bb 01 00 00 00       	mov    ebx,0x1
c000ef25:	89 c7                	mov    edi,eax
c000ef27:	75 e4                	jne    c000ef0d <Phys::allocateContiguousPages(int)+0x2e>
c000ef29:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000ef31:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ef36:	85 c0                	test   eax,eax
c000ef38:	75 01                	jne    c000ef3b <Phys::allocateContiguousPages(int)+0x5c>
c000ef3a:	fb                   	sti    
c000ef3b:	5b                   	pop    ebx
c000ef3c:	89 f8                	mov    eax,edi
c000ef3e:	5e                   	pop    esi
c000ef3f:	5f                   	pop    edi
c000ef40:	c3                   	ret    
c000ef41:	83 c3 01             	add    ebx,0x1
c000ef44:	39 f3                	cmp    ebx,esi
c000ef46:	75 b0                	jne    c000eef8 <Phys::allocateContiguousPages(int)+0x19>
c000ef48:	eb df                	jmp    c000ef29 <Phys::allocateContiguousPages(int)+0x4a>

c000ef4a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000ef4a:	56                   	push   esi
c000ef4b:	53                   	push   ebx
c000ef4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef50:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000ef56:	73 06                	jae    c000ef5e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000ef58:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000ef5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef62:	c1 eb 0c             	shr    ebx,0xc
c000ef65:	c1 e8 0c             	shr    eax,0xc
c000ef68:	39 d8                	cmp    eax,ebx
c000ef6a:	73 13                	jae    c000ef7f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000ef6c:	6a 00                	push   0x0
c000ef6e:	50                   	push   eax
c000ef6f:	8d 70 01             	lea    esi,[eax+0x1]
c000ef72:	e8 d4 fd ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000ef77:	39 f3                	cmp    ebx,esi
c000ef79:	89 f0                	mov    eax,esi
c000ef7b:	5a                   	pop    edx
c000ef7c:	59                   	pop    ecx
c000ef7d:	75 ed                	jne    c000ef6c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000ef7f:	5b                   	pop    ebx
c000ef80:	5e                   	pop    esi
c000ef81:	c3                   	ret    

c000ef82 <Phys::physicalMemorySetup(unsigned int)>:
c000ef82:	55                   	push   ebp
c000ef83:	57                   	push   edi
c000ef84:	56                   	push   esi
c000ef85:	53                   	push   ebx
c000ef86:	31 db                	xor    ebx,ebx
c000ef88:	83 ec 40             	sub    esp,0x40
c000ef8b:	6a 10                	push   0x10
c000ef8d:	6a 00                	push   0x0
c000ef8f:	68 b0 bd 02 c0       	push   0xc002bdb0
c000ef94:	e8 57 15 ff ff       	call   c00004f0 <memset>
c000ef99:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000efa2:	05 00 10 00 00       	add    eax,0x1000
c000efa7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000efab:	5a                   	pop    edx
c000efac:	59                   	pop    ecx
c000efad:	50                   	push   eax
c000efae:	68 cf 20 02 c0       	push   0xc00220cf
c000efb3:	e8 96 7f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000efb8:	83 c4 10             	add    esp,0x10
c000efbb:	83 ec 08             	sub    esp,0x8
c000efbe:	6a 01                	push   0x1
c000efc0:	53                   	push   ebx
c000efc1:	83 c3 01             	add    ebx,0x1
c000efc4:	e8 82 fd ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000efc9:	83 c4 10             	add    esp,0x10
c000efcc:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000efd2:	75 e7                	jne    c000efbb <Phys::physicalMemorySetup(unsigned int)+0x39>
c000efd4:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000efdb:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000efe2:	c1 e0 08             	shl    eax,0x8
c000efe5:	09 c2                	or     edx,eax
c000efe7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000efeb:	0f 84 43 01 00 00    	je     c000f134 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c000eff1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000eff9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000effe:	e9 82 00 00 00       	jmp    c000f085 <Phys::physicalMemorySetup(unsigned int)+0x103>
c000f003:	ba 00 00 08 00       	mov    edx,0x80000
c000f008:	89 c1                	mov    ecx,eax
c000f00a:	39 f2                	cmp    edx,esi
c000f00c:	19 f9                	sbb    ecx,edi
c000f00e:	0f 82 c0 00 00 00    	jb     c000f0d4 <Phys::physicalMemorySetup(unsigned int)+0x152>
c000f014:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f018:	89 c5                	mov    ebp,eax
c000f01a:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f01e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f022:	19 cd                	sbb    ebp,ecx
c000f024:	0f 83 af 00 00 00    	jae    c000f0d9 <Phys::physicalMemorySetup(unsigned int)+0x157>
c000f02a:	89 d6                	mov    esi,edx
c000f02c:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f031:	39 f2                	cmp    edx,esi
c000f033:	89 cf                	mov    edi,ecx
c000f035:	19 c8                	sbb    eax,ecx
c000f037:	73 07                	jae    c000f040 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c000f039:	be 00 00 0a 00       	mov    esi,0xa0000
c000f03e:	31 ff                	xor    edi,edi
c000f040:	89 f2                	mov    edx,esi
c000f042:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000f047:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000f04d:	89 f9                	mov    ecx,edi
c000f04f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f053:	83 d1 ff             	adc    ecx,0xffffffff
c000f056:	39 d0                	cmp    eax,edx
c000f058:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000f05c:	b8 00 00 00 00       	mov    eax,0x0
c000f061:	19 c8                	sbb    eax,ecx
c000f063:	0f 82 9d 01 00 00    	jb     c000f206 <Phys::physicalMemorySetup(unsigned int)+0x284>
c000f069:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f06d:	83 c3 18             	add    ebx,0x18
c000f070:	83 c6 01             	add    esi,0x1
c000f073:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f077:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f07b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000f07f:	0f 84 bf 00 00 00    	je     c000f144 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f085:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f087:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f08a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f08d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f090:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000f094:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f097:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f09b:	01 f0                	add    eax,esi
c000f09d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f0a5:	55                   	push   ebp
c000f0a6:	11 fa                	adc    edx,edi
c000f0a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f0b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0b4:	50                   	push   eax
c000f0b5:	56                   	push   esi
c000f0b6:	68 6c 20 02 c0       	push   0xc002206c
c000f0bb:	e8 8e 7e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f0c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f0c4:	83 c4 10             	add    esp,0x10
c000f0c7:	09 f8                	or     eax,edi
c000f0c9:	75 79                	jne    c000f144 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c000f0cb:	83 fd 01             	cmp    ebp,0x1
c000f0ce:	0f 84 2f ff ff ff    	je     c000f003 <Phys::physicalMemorySetup(unsigned int)+0x81>
c000f0d4:	83 fd 01             	cmp    ebp,0x1
c000f0d7:	75 90                	jne    c000f069 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0d9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f0dd:	31 d2                	xor    edx,edx
c000f0df:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000f0e3:	89 c8                	mov    eax,ecx
c000f0e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0e9:	19 d1                	sbb    ecx,edx
c000f0eb:	0f 82 78 ff ff ff    	jb     c000f069 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f0f1:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000f0f6:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000f0fa:	b9 00 00 00 00       	mov    ecx,0x0
c000f0ff:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000f103:	0f 83 60 ff ff ff    	jae    c000f069 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f109:	39 c6                	cmp    esi,eax
c000f10b:	19 d7                	sbb    edi,edx
c000f10d:	0f 83 ff 00 00 00    	jae    c000f212 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f113:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f117:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f11b:	29 c7                	sub    edi,eax
c000f11d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f121:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f125:	19 d5                	sbb    ebp,edx
c000f127:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f12b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f12f:	e9 de 00 00 00       	jmp    c000f212 <Phys::physicalMemorySetup(unsigned int)+0x290>
c000f134:	83 ec 0c             	sub    esp,0xc
c000f137:	68 e7 20 02 c0       	push   0xc00220e7
c000f13c:	e8 d5 fa ff ff       	call   c000ec16 <KePanic(char const*)>
c000f141:	83 c4 10             	add    esp,0x10
c000f144:	83 ec 08             	sub    esp,0x8
c000f147:	bb 60 00 00 00       	mov    ebx,0x60
c000f14c:	6a 00                	push   0x0
c000f14e:	6a 06                	push   0x6
c000f150:	e8 f6 fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f155:	58                   	pop    eax
c000f156:	5a                   	pop    edx
c000f157:	6a 00                	push   0x0
c000f159:	6a 07                	push   0x7
c000f15b:	e8 eb fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f160:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f166:	83 c4 10             	add    esp,0x10
c000f169:	83 c1 02             	add    ecx,0x2
c000f16c:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f172:	83 ec 08             	sub    esp,0x8
c000f175:	6a 00                	push   0x0
c000f177:	53                   	push   ebx
c000f178:	83 c3 01             	add    ebx,0x1
c000f17b:	e8 cb fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f180:	83 c4 10             	add    esp,0x10
c000f183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f189:	75 e7                	jne    c000f172 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c000f18b:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f190:	bb 40 01 00 00       	mov    ebx,0x140
c000f195:	83 c0 20             	add    eax,0x20
c000f198:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f19d:	eb 26                	jmp    c000f1c5 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000f19f:	83 ec 08             	sub    esp,0x8
c000f1a2:	6a 00                	push   0x0
c000f1a4:	53                   	push   ebx
c000f1a5:	83 c3 01             	add    ebx,0x1
c000f1a8:	e8 9e fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f1ad:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1b2:	83 c4 10             	add    esp,0x10
c000f1b5:	83 c0 01             	add    eax,0x1
c000f1b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f1be:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1c3:	74 07                	je     c000f1cc <Phys::physicalMemorySetup(unsigned int)+0x24a>
c000f1c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f1ca:	7e d3                	jle    c000f19f <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000f1cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f1d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f1d6:	7f 26                	jg     c000f1fe <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000f1d8:	83 ec 08             	sub    esp,0x8
c000f1db:	6a 00                	push   0x0
c000f1dd:	53                   	push   ebx
c000f1de:	83 c3 01             	add    ebx,0x1
c000f1e1:	e8 65 fb ff ff       	call   c000ed4b <Phys::setPageState(unsigned long, bool)>
c000f1e6:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f1eb:	83 c4 10             	add    esp,0x10
c000f1ee:	83 c0 01             	add    eax,0x1
c000f1f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f1f7:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1fc:	75 d3                	jne    c000f1d1 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000f1fe:	83 c4 3c             	add    esp,0x3c
c000f201:	5b                   	pop    ebx
c000f202:	5e                   	pop    esi
c000f203:	5f                   	pop    edi
c000f204:	5d                   	pop    ebp
c000f205:	c3                   	ret    
c000f206:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000f20a:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000f212:	83 ec 04             	sub    esp,0x4
c000f215:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f219:	56                   	push   esi
c000f21a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000f21e:	57                   	push   edi
c000f21f:	68 90 20 02 c0       	push   0xc0022090
c000f224:	e8 25 7d ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f229:	5d                   	pop    ebp
c000f22a:	58                   	pop    eax
c000f22b:	56                   	push   esi
c000f22c:	57                   	push   edi
c000f22d:	e8 18 fd ff ff       	call   c000ef4a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f232:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f236:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f23a:	83 c4 0c             	add    esp,0xc
c000f23d:	8b 35 ac bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bdac
c000f243:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f247:	01 f0                	add    eax,esi
c000f249:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f24e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f255:	52                   	push   edx
c000f256:	50                   	push   eax
c000f257:	68 f5 20 02 c0       	push   0xc00220f5
c000f25c:	e8 ed 7c ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000f261:	83 c4 10             	add    esp,0x10
c000f264:	e9 00 fe ff ff       	jmp    c000f069 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c000f269:	90                   	nop

c000f26a <Pipe::isAtty()>:
c000f26a:	31 c0                	xor    eax,eax
c000f26c:	c3                   	ret    
c000f26d:	90                   	nop

c000f26e <Pipe::~Pipe()>:
c000f26e:	83 ec 0c             	sub    esp,0xc
c000f271:	ba 54 21 02 c0       	mov    edx,0xc0022154
c000f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f27a:	89 10                	mov    DWORD PTR [eax],edx
c000f27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f280:	83 ec 0c             	sub    esp,0xc
c000f283:	50                   	push   eax
c000f284:	e8 51 2a 00 00       	call   c0011cda <UnixFile::~UnixFile()>
c000f289:	83 c4 10             	add    esp,0x10
c000f28c:	90                   	nop
c000f28d:	83 c4 0c             	add    esp,0xc
c000f290:	c3                   	ret    
c000f291:	90                   	nop

c000f292 <Pipe::~Pipe()>:
c000f292:	83 ec 0c             	sub    esp,0xc
c000f295:	83 ec 0c             	sub    esp,0xc
c000f298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f29c:	e8 cd ff ff ff       	call   c000f26e <Pipe::~Pipe()>
c000f2a1:	83 c4 10             	add    esp,0x10
c000f2a4:	83 ec 08             	sub    esp,0x8
c000f2a7:	6a 20                	push   0x20
c000f2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2ad:	e8 a9 d3 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c000f2b2:	83 c4 10             	add    esp,0x10
c000f2b5:	83 c4 0c             	add    esp,0xc
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <Pipe::write(unsigned long long, void*, int*)>:
c000f2ba:	55                   	push   ebp
c000f2bb:	57                   	push   edi
c000f2bc:	56                   	push   esi
c000f2bd:	53                   	push   ebx
c000f2be:	83 ec 1c             	sub    esp,0x1c
c000f2c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f2c5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f2c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f2cd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f2d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2d4:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f2d7:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2da:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f2de:	89 d8                	mov    eax,ebx
c000f2e0:	89 d6                	mov    esi,edx
c000f2e2:	89 d7                	mov    edi,edx
c000f2e4:	c1 ff 1f             	sar    edi,0x1f
c000f2e7:	03 34 24             	add    esi,DWORD PTR [esp]
c000f2ea:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f2ee:	c1 f8 1f             	sar    eax,0x1f
c000f2f1:	39 f3                	cmp    ebx,esi
c000f2f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f2f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2fb:	19 f8                	sbb    eax,edi
c000f2fd:	b8 01 00 00 00       	mov    eax,0x1
c000f302:	72 72                	jb     c000f376 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c000f304:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f307:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f30b:	01 d0                	add    eax,edx
c000f30d:	99                   	cdq    
c000f30e:	f7 fb                	idiv   ebx
c000f310:	89 d8                	mov    eax,ebx
c000f312:	29 d0                	sub    eax,edx
c000f314:	89 d6                	mov    esi,edx
c000f316:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f319:	89 c3                	mov    ebx,eax
c000f31b:	c1 fb 1f             	sar    ebx,0x1f
c000f31e:	39 c2                	cmp    edx,eax
c000f320:	19 df                	sbb    edi,ebx
c000f322:	bb 00 00 00 00       	mov    ebx,0x0
c000f327:	72 04                	jb     c000f32d <Pipe::write(unsigned long long, void*, int*)+0x73>
c000f329:	89 d3                	mov    ebx,edx
c000f32b:	29 c3                	sub    ebx,eax
c000f32d:	89 d0                	mov    eax,edx
c000f32f:	29 d8                	sub    eax,ebx
c000f331:	74 0d                	je     c000f340 <Pipe::write(unsigned long long, void*, int*)+0x86>
c000f333:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f336:	89 c1                	mov    ecx,eax
c000f338:	01 f7                	add    edi,esi
c000f33a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f33e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f340:	85 db                	test   ebx,ebx
c000f342:	74 0d                	je     c000f351 <Pipe::write(unsigned long long, void*, int*)+0x97>
c000f344:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f348:	89 d9                	mov    ecx,ebx
c000f34a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f34d:	89 c6                	mov    esi,eax
c000f34f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f351:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f354:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f359:	75 10                	jne    c000f36b <Pipe::write(unsigned long long, void*, int*)+0xb1>
c000f35b:	83 ec 0c             	sub    esp,0xc
c000f35e:	68 11 21 02 c0       	push   0xc0022111
c000f363:	e8 ae f8 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f368:	83 c4 10             	add    esp,0x10
c000f36b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f36f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f372:	89 08                	mov    DWORD PTR [eax],ecx
c000f374:	31 c0                	xor    eax,eax
c000f376:	83 c4 1c             	add    esp,0x1c
c000f379:	5b                   	pop    ebx
c000f37a:	5e                   	pop    esi
c000f37b:	5f                   	pop    edi
c000f37c:	5d                   	pop    ebp
c000f37d:	c3                   	ret    

c000f37e <Pipe::read(unsigned long long, void*, int*)>:
c000f37e:	55                   	push   ebp
c000f37f:	57                   	push   edi
c000f380:	56                   	push   esi
c000f381:	53                   	push   ebx
c000f382:	83 ec 1c             	sub    esp,0x1c
c000f385:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f389:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f38d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f391:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f394:	89 c8                	mov    eax,ecx
c000f396:	99                   	cdq    
c000f397:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f39b:	74 27                	je     c000f3c4 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f39d:	39 f9                	cmp    ecx,edi
c000f39f:	89 d1                	mov    ecx,edx
c000f3a1:	19 f1                	sbb    ecx,esi
c000f3a3:	73 1f                	jae    c000f3c4 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000f3a5:	fa                   	cli    
c000f3a6:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f3ac:	e8 ff 5f 00 00       	call   c00153b0 <schedule()>
c000f3b1:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f3b8:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f3bf:	75 d0                	jne    c000f391 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3c1:	fb                   	sti    
c000f3c2:	eb cd                	jmp    c000f391 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f3c4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f3c8:	39 f8                	cmp    eax,edi
c000f3ca:	89 d1                	mov    ecx,edx
c000f3cc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000f3d0:	19 f1                	sbb    ecx,esi
c000f3d2:	73 08                	jae    c000f3dc <Pipe::read(unsigned long long, void*, int*)+0x5e>
c000f3d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3dc:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f3df:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f3e2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c000f3e6:	29 f7                	sub    edi,esi
c000f3e8:	89 f8                	mov    eax,edi
c000f3ea:	99                   	cdq    
c000f3eb:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000f3ef:	89 d0                	mov    eax,edx
c000f3f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f3f5:	19 c2                	sbb    edx,eax
c000f3f7:	89 f8                	mov    eax,edi
c000f3f9:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c000f3fe:	89 ea                	mov    edx,ebp
c000f400:	29 c2                	sub    edx,eax
c000f402:	85 c0                	test   eax,eax
c000f404:	74 0b                	je     c000f411 <Pipe::read(unsigned long long, void*, int*)+0x93>
c000f406:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f409:	89 c1                	mov    ecx,eax
c000f40b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f40f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f411:	85 d2                	test   edx,edx
c000f413:	74 0d                	je     c000f422 <Pipe::read(unsigned long long, void*, int*)+0xa4>
c000f415:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f419:	89 d1                	mov    ecx,edx
c000f41b:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f41e:	89 c7                	mov    edi,eax
c000f420:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f422:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f425:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f428:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f42b:	99                   	cdq    
c000f42c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000f430:	89 f7                	mov    edi,esi
c000f432:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000f436:	c1 ff 1f             	sar    edi,0x1f
c000f439:	57                   	push   edi
c000f43a:	56                   	push   esi
c000f43b:	52                   	push   edx
c000f43c:	50                   	push   eax
c000f43d:	e8 32 07 01 00       	call   c001fb74 <__umoddi3>
c000f442:	83 c4 10             	add    esp,0x10
c000f445:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f44a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f44d:	75 10                	jne    c000f45f <Pipe::read(unsigned long long, void*, int*)+0xe1>
c000f44f:	83 ec 0c             	sub    esp,0xc
c000f452:	68 2e 21 02 c0       	push   0xc002212e
c000f457:	e8 ba f7 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f45c:	83 c4 10             	add    esp,0x10
c000f45f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f463:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f467:	89 10                	mov    DWORD PTR [eax],edx
c000f469:	83 c4 1c             	add    esp,0x1c
c000f46c:	31 c0                	xor    eax,eax
c000f46e:	5b                   	pop    ebx
c000f46f:	5e                   	pop    esi
c000f470:	5f                   	pop    edi
c000f471:	5d                   	pop    ebp
c000f472:	c3                   	ret    
c000f473:	90                   	nop

c000f474 <Pipe::Pipe(int)>:
c000f474:	83 ec 0c             	sub    esp,0xc
c000f477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f47b:	83 ec 08             	sub    esp,0x8
c000f47e:	6a 00                	push   0x0
c000f480:	50                   	push   eax
c000f481:	e8 6e 26 00 00       	call   c0011af4 <UnixFile::UnixFile(int)>
c000f486:	83 c4 10             	add    esp,0x10
c000f489:	ba 54 21 02 c0       	mov    edx,0xc0022154
c000f48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f492:	89 10                	mov    DWORD PTR [eax],edx
c000f494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f498:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f49c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4a3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4ae:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f4b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f4b9:	83 ec 0c             	sub    esp,0xc
c000f4bc:	50                   	push   eax
c000f4bd:	e8 0e f4 ff ff       	call   c000e8d0 <malloc>
c000f4c2:	83 c4 10             	add    esp,0x10
c000f4c5:	89 c2                	mov    edx,eax
c000f4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4cb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4d2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f4d6:	90                   	nop
c000f4d7:	83 c4 0c             	add    esp,0xc
c000f4da:	c3                   	ret    

c000f4db <KePowerThread(void*)>:
c000f4db:	83 ec 0c             	sub    esp,0xc
c000f4de:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c000f4e5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c000f4ec:	75 01                	jne    c000f4ef <KePowerThread(void*)+0x14>
c000f4ee:	fb                   	sti    
c000f4ef:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f4f6:	83 ec 0c             	sub    esp,0xc
c000f4f9:	6a 0a                	push   0xa
c000f4fb:	e8 ac 60 00 00       	call   c00155ac <sleep(unsigned int)>
c000f500:	83 c4 10             	add    esp,0x10
c000f503:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f50a:	eb e3                	jmp    c000f4ef <KePowerThread(void*)+0x14>

c000f50c <KeChangePowerSettings(PowerSettings)>:
c000f50c:	57                   	push   edi
c000f50d:	b9 09 00 00 00       	mov    ecx,0x9
c000f512:	56                   	push   esi
c000f513:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f518:	fc                   	cld    
c000f519:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f51d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f51f:	5e                   	pop    esi
c000f520:	5f                   	pop    edi
c000f521:	c3                   	ret    

c000f522 <KeUserIOReceived()>:
c000f522:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f52c:	c3                   	ret    

c000f52d <KeHandlePowerButton()>:
c000f52d:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f532:	83 f8 02             	cmp    eax,0x2
c000f535:	75 05                	jne    c000f53c <KeHandlePowerButton()+0xf>
c000f537:	e9 58 e1 ff ff       	jmp    c000d694 <KeShutdown()>
c000f53c:	48                   	dec    eax
c000f53d:	75 05                	jne    c000f544 <KeHandlePowerButton()+0x17>
c000f53f:	e9 74 e1 ff ff       	jmp    c000d6b8 <KeSleep()>
c000f544:	c3                   	ret    

c000f545 <KeHandleSleepButton()>:
c000f545:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f54a:	83 f8 02             	cmp    eax,0x2
c000f54d:	75 05                	jne    c000f554 <KeHandleSleepButton()+0xf>
c000f54f:	e9 40 e1 ff ff       	jmp    c000d694 <KeShutdown()>
c000f554:	48                   	dec    eax
c000f555:	75 05                	jne    c000f55c <KeHandleSleepButton()+0x17>
c000f557:	e9 5c e1 ff ff       	jmp    c000d6b8 <KeSleep()>
c000f55c:	c3                   	ret    

c000f55d <KeSetupPowerManager()>:
c000f55d:	83 ec 0c             	sub    esp,0xc
c000f560:	68 f0 00 00 00       	push   0xf0
c000f565:	6a 00                	push   0x0
c000f567:	68 db f4 00 c0       	push   0xc000f4db
c000f56c:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f572:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f57c:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f583:	e8 dc 5b 00 00       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c000f588:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f592:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f59c:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f5a6:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f5b0:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f5ba:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f5c4:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f5ce:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f5d8:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f5e2:	83 c4 1c             	add    esp,0x1c
c000f5e5:	c3                   	ret    

c000f5e6 <KeRand()>:
c000f5e6:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f5f0:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f5fa:	53                   	push   ebx
c000f5fb:	01 c1                	add    ecx,eax
c000f5fd:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f602:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f608:	01 ca                	add    edx,ecx
c000f60a:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f60f:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f614:	83 d2 00             	adc    edx,0x0
c000f617:	0f b7 da             	movzx  ebx,dx
c000f61a:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f620:	0f ac d8 0e          	shrd   eax,ebx,0xe
c000f624:	5b                   	pop    ebx
c000f625:	c3                   	ret    

c000f626 <KeSeedRand(unsigned int)>:
c000f626:	53                   	push   ebx
c000f627:	83 ec 08             	sub    esp,0x8
c000f62a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f62e:	e8 93 8f 00 00       	call   c00185c6 <HalGetRand()>
c000f633:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f63d:	31 d8                	xor    eax,ebx
c000f63f:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f644:	e8 9d ff ff ff       	call   c000f5e6 <KeRand()>
c000f649:	83 c4 08             	add    esp,0x8
c000f64c:	5b                   	pop    ebx
c000f64d:	eb 97                	jmp    c000f5e6 <KeRand()>

c000f64f <KeInitRand()>:
c000f64f:	83 ec 0c             	sub    esp,0xc
c000f652:	e8 93 8d 00 00       	call   c00183ea <HalQueryPerformanceCounter()>
c000f657:	0f 20 da             	mov    edx,cr3
c000f65a:	0f 22 da             	mov    cr3,edx
c000f65d:	0f 20 da             	mov    edx,cr3
c000f660:	0f 22 da             	mov    cr3,edx
c000f663:	0f 20 da             	mov    edx,cr3
c000f666:	0f 22 da             	mov    cr3,edx
c000f669:	0f 20 da             	mov    edx,cr3
c000f66c:	0f 22 da             	mov    cr3,edx
c000f66f:	83 ec 0c             	sub    esp,0xc
c000f672:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f677:	50                   	push   eax
c000f678:	e8 a9 ff ff ff       	call   c000f626 <KeSeedRand(unsigned int)>
c000f67d:	83 c4 1c             	add    esp,0x1c
c000f680:	c3                   	ret    
c000f681:	66 90                	xchg   ax,ax
c000f683:	90                   	nop

c000f684 <KeResolveCompatibilitySymbol(char*)>:
c000f684:	83 ec 0c             	sub    esp,0xc
c000f687:	83 ec 08             	sub    esp,0x8
c000f68a:	68 68 21 02 c0       	push   0xc0022168
c000f68f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f693:	e8 e8 10 ff ff       	call   c0000780 <strcmp>
c000f698:	83 c4 10             	add    esp,0x10
c000f69b:	85 c0                	test   eax,eax
c000f69d:	0f 94 c0             	sete   al
c000f6a0:	0f b6 c0             	movzx  eax,al
c000f6a3:	85 c0                	test   eax,eax
c000f6a5:	74 0d                	je     c000f6b4 <KeResolveCompatibilitySymbol(char*)+0x30>
c000f6a7:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f6ac:	e9 8b 01 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6b4:	83 ec 08             	sub    esp,0x8
c000f6b7:	68 71 21 02 c0       	push   0xc0022171
c000f6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6c0:	e8 bb 10 ff ff       	call   c0000780 <strcmp>
c000f6c5:	83 c4 10             	add    esp,0x10
c000f6c8:	85 c0                	test   eax,eax
c000f6ca:	0f 94 c0             	sete   al
c000f6cd:	0f b6 c0             	movzx  eax,al
c000f6d0:	85 c0                	test   eax,eax
c000f6d2:	74 0c                	je     c000f6e0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f6d4:	b8 74 fa 01 c0       	mov    eax,0xc001fa74
c000f6d9:	e9 5e 01 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f6de:	66 90                	xchg   ax,ax
c000f6e0:	83 ec 08             	sub    esp,0x8
c000f6e3:	68 7b 21 02 c0       	push   0xc002217b
c000f6e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6ec:	e8 8f 10 ff ff       	call   c0000780 <strcmp>
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	85 c0                	test   eax,eax
c000f6f6:	0f 94 c0             	sete   al
c000f6f9:	0f b6 c0             	movzx  eax,al
c000f6fc:	85 c0                	test   eax,eax
c000f6fe:	74 0c                	je     c000f70c <KeResolveCompatibilitySymbol(char*)+0x88>
c000f700:	b8 a8 f7 01 c0       	mov    eax,0xc001f7a8
c000f705:	e9 32 01 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f70a:	66 90                	xchg   ax,ax
c000f70c:	83 ec 08             	sub    esp,0x8
c000f70f:	68 84 21 02 c0       	push   0xc0022184
c000f714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f718:	e8 63 10 ff ff       	call   c0000780 <strcmp>
c000f71d:	83 c4 10             	add    esp,0x10
c000f720:	85 c0                	test   eax,eax
c000f722:	0f 94 c0             	sete   al
c000f725:	0f b6 c0             	movzx  eax,al
c000f728:	85 c0                	test   eax,eax
c000f72a:	74 0c                	je     c000f738 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f72c:	b8 16 ec 00 c0       	mov    eax,0xc000ec16
c000f731:	e9 06 01 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f736:	66 90                	xchg   ax,ax
c000f738:	83 ec 08             	sub    esp,0x8
c000f73b:	68 97 21 02 c0       	push   0xc0022197
c000f740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f744:	e8 37 10 ff ff       	call   c0000780 <strcmp>
c000f749:	83 c4 10             	add    esp,0x10
c000f74c:	85 c0                	test   eax,eax
c000f74e:	0f 94 c0             	sete   al
c000f751:	0f b6 c0             	movzx  eax,al
c000f754:	85 c0                	test   eax,eax
c000f756:	74 0c                	je     c000f764 <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f758:	b8 9b c5 00 c0       	mov    eax,0xc000c59b
c000f75d:	e9 da 00 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f762:	66 90                	xchg   ax,ax
c000f764:	83 ec 08             	sub    esp,0x8
c000f767:	68 b4 21 02 c0       	push   0xc00221b4
c000f76c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f770:	e8 0b 10 ff ff       	call   c0000780 <strcmp>
c000f775:	83 c4 10             	add    esp,0x10
c000f778:	85 c0                	test   eax,eax
c000f77a:	0f 94 c0             	sete   al
c000f77d:	0f b6 c0             	movzx  eax,al
c000f780:	85 c0                	test   eax,eax
c000f782:	74 0c                	je     c000f790 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f784:	b8 74 fb 01 c0       	mov    eax,0xc001fb74
c000f789:	e9 ae 00 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f78e:	66 90                	xchg   ax,ax
c000f790:	83 ec 08             	sub    esp,0x8
c000f793:	68 be 21 02 c0       	push   0xc00221be
c000f798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f79c:	e8 df 0f ff ff       	call   c0000780 <strcmp>
c000f7a1:	83 c4 10             	add    esp,0x10
c000f7a4:	85 c0                	test   eax,eax
c000f7a6:	0f 94 c0             	sete   al
c000f7a9:	0f b6 c0             	movzx  eax,al
c000f7ac:	85 c0                	test   eax,eax
c000f7ae:	74 0c                	je     c000f7bc <KeResolveCompatibilitySymbol(char*)+0x138>
c000f7b0:	b8 f4 f8 01 c0       	mov    eax,0xc001f8f4
c000f7b5:	e9 82 00 00 00       	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7ba:	66 90                	xchg   ax,ax
c000f7bc:	83 ec 08             	sub    esp,0x8
c000f7bf:	68 c7 21 02 c0       	push   0xc00221c7
c000f7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7c8:	e8 b3 0f ff ff       	call   c0000780 <strcmp>
c000f7cd:	83 c4 10             	add    esp,0x10
c000f7d0:	85 c0                	test   eax,eax
c000f7d2:	0f 94 c0             	sete   al
c000f7d5:	0f b6 c0             	movzx  eax,al
c000f7d8:	85 c0                	test   eax,eax
c000f7da:	74 08                	je     c000f7e4 <KeResolveCompatibilitySymbol(char*)+0x160>
c000f7dc:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f7e1:	eb 59                	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7e3:	90                   	nop
c000f7e4:	83 ec 08             	sub    esp,0x8
c000f7e7:	68 df 21 02 c0       	push   0xc00221df
c000f7ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7f0:	e8 8b 0f ff ff       	call   c0000780 <strcmp>
c000f7f5:	83 c4 10             	add    esp,0x10
c000f7f8:	85 c0                	test   eax,eax
c000f7fa:	0f 94 c0             	sete   al
c000f7fd:	0f b6 c0             	movzx  eax,al
c000f800:	85 c0                	test   eax,eax
c000f802:	74 08                	je     c000f80c <KeResolveCompatibilitySymbol(char*)+0x188>
c000f804:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f809:	eb 31                	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f80b:	90                   	nop
c000f80c:	83 ec 08             	sub    esp,0x8
c000f80f:	68 ec 21 02 c0       	push   0xc00221ec
c000f814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f818:	e8 63 0f ff ff       	call   c0000780 <strcmp>
c000f81d:	83 c4 10             	add    esp,0x10
c000f820:	85 c0                	test   eax,eax
c000f822:	0f 94 c0             	sete   al
c000f825:	0f b6 c0             	movzx  eax,al
c000f828:	85 c0                	test   eax,eax
c000f82a:	74 08                	je     c000f834 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f82c:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f831:	eb 09                	jmp    c000f83c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f833:	90                   	nop
c000f834:	b8 00 00 00 00       	mov    eax,0x0
c000f839:	8d 76 00             	lea    esi,[esi+0x0]
c000f83c:	83 c4 0c             	add    esp,0xc
c000f83f:	c3                   	ret    

c000f840 <Semaphore::Semaphore(int)>:
c000f840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f844:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f848:	89 10                	mov    DWORD PTR [eax],edx
c000f84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f84e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f855:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f859:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f864:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f86b:	90                   	nop
c000f86c:	c3                   	ret    
c000f86d:	90                   	nop
c000f86e:	66 90                	xchg   ax,ax

c000f870 <Semaphore::tryAcquire()>:
c000f870:	83 ec 0c             	sub    esp,0xc
c000f873:	fa                   	cli    
c000f874:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f879:	83 c0 01             	add    eax,0x1
c000f87c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f881:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f886:	83 c0 01             	add    eax,0x1
c000f889:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f892:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f899:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89b:	39 c2                	cmp    edx,eax
c000f89d:	7d 59                	jge    c000f8f8 <Semaphore::tryAcquire()+0x88>
c000f89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f8a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f8b0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8b5:	83 e8 01             	sub    eax,0x1
c000f8b8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f8bd:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8c2:	85 c0                	test   eax,eax
c000f8c4:	75 1a                	jne    c000f8e0 <Semaphore::tryAcquire()+0x70>
c000f8c6:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f8cb:	85 c0                	test   eax,eax
c000f8cd:	74 11                	je     c000f8e0 <Semaphore::tryAcquire()+0x70>
c000f8cf:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f8d9:	e8 d2 5a 00 00       	call   c00153b0 <schedule()>
c000f8de:	66 90                	xchg   ax,ax
c000f8e0:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f8e8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f8ed:	85 c0                	test   eax,eax
c000f8ef:	75 03                	jne    c000f8f4 <Semaphore::tryAcquire()+0x84>
c000f8f1:	fb                   	sti    
c000f8f2:	66 90                	xchg   ax,ax
c000f8f4:	b0 01                	mov    al,0x1
c000f8f6:	eb 48                	jmp    c000f940 <Semaphore::tryAcquire()+0xd0>
c000f8f8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f8fd:	83 e8 01             	sub    eax,0x1
c000f900:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f905:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f90a:	85 c0                	test   eax,eax
c000f90c:	75 1a                	jne    c000f928 <Semaphore::tryAcquire()+0xb8>
c000f90e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f913:	85 c0                	test   eax,eax
c000f915:	74 11                	je     c000f928 <Semaphore::tryAcquire()+0xb8>
c000f917:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f921:	e8 8a 5a 00 00       	call   c00153b0 <schedule()>
c000f926:	66 90                	xchg   ax,ax
c000f928:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f930:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f935:	85 c0                	test   eax,eax
c000f937:	75 03                	jne    c000f93c <Semaphore::tryAcquire()+0xcc>
c000f939:	fb                   	sti    
c000f93a:	66 90                	xchg   ax,ax
c000f93c:	b0 00                	mov    al,0x0
c000f93e:	66 90                	xchg   ax,ax
c000f940:	83 c4 0c             	add    esp,0xc
c000f943:	c3                   	ret    

c000f944 <Semaphore::assertLocked(char const*)>:
c000f944:	83 ec 0c             	sub    esp,0xc
c000f947:	fa                   	cli    
c000f948:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f94d:	83 c0 01             	add    eax,0x1
c000f950:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f955:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f95a:	83 c0 01             	add    eax,0x1
c000f95d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f966:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f96d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f96f:	39 c2                	cmp    edx,eax
c000f971:	7d 11                	jge    c000f984 <Semaphore::assertLocked(char const*)+0x40>
c000f973:	83 ec 0c             	sub    esp,0xc
c000f976:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f97a:	e8 97 f2 ff ff       	call   c000ec16 <KePanic(char const*)>
c000f97f:	83 c4 10             	add    esp,0x10
c000f982:	66 90                	xchg   ax,ax
c000f984:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f989:	83 e8 01             	sub    eax,0x1
c000f98c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f991:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f996:	85 c0                	test   eax,eax
c000f998:	75 1a                	jne    c000f9b4 <Semaphore::assertLocked(char const*)+0x70>
c000f99a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f99f:	85 c0                	test   eax,eax
c000f9a1:	74 11                	je     c000f9b4 <Semaphore::assertLocked(char const*)+0x70>
c000f9a3:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9ad:	e8 fe 59 00 00       	call   c00153b0 <schedule()>
c000f9b2:	66 90                	xchg   ax,ax
c000f9b4:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000f9bc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9c1:	85 c0                	test   eax,eax
c000f9c3:	75 03                	jne    c000f9c8 <Semaphore::assertLocked(char const*)+0x84>
c000f9c5:	fb                   	sti    
c000f9c6:	66 90                	xchg   ax,ax
c000f9c8:	90                   	nop
c000f9c9:	83 c4 0c             	add    esp,0xc
c000f9cc:	c3                   	ret    
c000f9cd:	90                   	nop
c000f9ce:	66 90                	xchg   ax,ax

c000f9d0 <Semaphore::acquire(int)>:
c000f9d0:	83 ec 1c             	sub    esp,0x1c
c000f9d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000f9d8:	0f 84 9a 00 00 00    	je     c000fa78 <Semaphore::acquire(int)+0xa8>
c000f9de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f9e6:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000f9eb:	90                   	nop
c000f9ec:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000f9f1:	85 c0                	test   eax,eax
c000f9f3:	74 77                	je     c000fa6c <Semaphore::acquire(int)+0x9c>
c000f9f5:	83 ec 0c             	sub    esp,0xc
c000f9f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f9fc:	e8 6f fe ff ff       	call   c000f870 <Semaphore::tryAcquire()>
c000fa01:	83 c4 10             	add    esp,0x10
c000fa04:	83 f0 01             	xor    eax,0x1
c000fa07:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000fa0b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fa0f:	83 f0 01             	xor    eax,0x1
c000fa12:	0f b6 c0             	movzx  eax,al
c000fa15:	85 c0                	test   eax,eax
c000fa17:	75 4f                	jne    c000fa68 <Semaphore::acquire(int)+0x98>
c000fa19:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fa1e:	7f 2c                	jg     c000fa4c <Semaphore::acquire(int)+0x7c>
c000fa20:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fa24:	89 d0                	mov    eax,edx
c000fa26:	c1 e0 02             	shl    eax,0x2
c000fa29:	01 d0                	add    eax,edx
c000fa2b:	d1 e0                	shl    eax,1
c000fa2d:	83 ec 0c             	sub    esp,0xc
c000fa30:	50                   	push   eax
c000fa31:	e8 62 5b 00 00       	call   c0015598 <milliTenthSleep(unsigned int)>
c000fa36:	83 c4 10             	add    esp,0x10
c000fa39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa3d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fa41:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fa49:	eb a1                	jmp    c000f9ec <Semaphore::acquire(int)+0x1c>
c000fa4b:	90                   	nop
c000fa4c:	83 ec 0c             	sub    esp,0xc
c000fa4f:	68 90 01 00 00       	push   0x190
c000fa54:	e8 3f 5b 00 00       	call   c0015598 <milliTenthSleep(unsigned int)>
c000fa59:	83 c4 10             	add    esp,0x10
c000fa5c:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fa61:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fa66:	eb 84                	jmp    c000f9ec <Semaphore::acquire(int)+0x1c>
c000fa68:	90                   	nop
c000fa69:	8d 76 00             	lea    esi,[esi+0x0]
c000fa6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa70:	e9 fb 00 00 00       	jmp    c000fb70 <Semaphore::acquire(int)+0x1a0>
c000fa75:	8d 76 00             	lea    esi,[esi+0x0]
c000fa78:	fa                   	cli    
c000fa79:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa7e:	83 c0 01             	add    eax,0x1
c000fa81:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa86:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa8b:	83 c0 01             	add    eax,0x1
c000fa8e:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa97:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa9e:	8b 00                	mov    eax,DWORD PTR [eax]
c000faa0:	39 c2                	cmp    edx,eax
c000faa2:	7d 14                	jge    c000fab8 <Semaphore::acquire(int)+0xe8>
c000faa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faa8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000faab:	8d 50 01             	lea    edx,[eax+0x1]
c000faae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fab5:	eb 6d                	jmp    c000fb24 <Semaphore::acquire(int)+0x154>
c000fab7:	90                   	nop
c000fab8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fabd:	8b 00                	mov    eax,DWORD PTR [eax]
c000fabf:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000facd:	85 c0                	test   eax,eax
c000facf:	75 13                	jne    c000fae4 <Semaphore::acquire(int)+0x114>
c000fad1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fad6:	8b 10                	mov    edx,DWORD PTR [eax]
c000fad8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fadc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fadf:	eb 17                	jmp    c000faf8 <Semaphore::acquire(int)+0x128>
c000fae1:	8d 76 00             	lea    esi,[esi+0x0]
c000fae4:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000faf0:	8b 12                	mov    edx,DWORD PTR [edx]
c000faf2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000faf5:	8d 76 00             	lea    esi,[esi+0x0]
c000faf8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fafd:	8b 10                	mov    edx,DWORD PTR [eax]
c000faff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb03:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fb06:	83 ec 0c             	sub    esp,0xc
c000fb09:	68 fc 21 02 c0       	push   0xc00221fc
c000fb0e:	e8 3b 74 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fb13:	83 c4 10             	add    esp,0x10
c000fb16:	83 ec 0c             	sub    esp,0xc
c000fb19:	6a 05                	push   0x5
c000fb1b:	e8 50 59 00 00       	call   c0015470 <blockTask(TaskState)>
c000fb20:	83 c4 10             	add    esp,0x10
c000fb23:	90                   	nop
c000fb24:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb29:	83 e8 01             	sub    eax,0x1
c000fb2c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb31:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb36:	85 c0                	test   eax,eax
c000fb38:	75 1a                	jne    c000fb54 <Semaphore::acquire(int)+0x184>
c000fb3a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fb3f:	85 c0                	test   eax,eax
c000fb41:	74 11                	je     c000fb54 <Semaphore::acquire(int)+0x184>
c000fb43:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fb4d:	e8 5e 58 00 00       	call   c00153b0 <schedule()>
c000fb52:	66 90                	xchg   ax,ax
c000fb54:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fb5c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb61:	85 c0                	test   eax,eax
c000fb63:	75 03                	jne    c000fb68 <Semaphore::acquire(int)+0x198>
c000fb65:	fb                   	sti    
c000fb66:	66 90                	xchg   ax,ax
c000fb68:	b8 00 00 00 00       	mov    eax,0x0
c000fb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb70:	83 c4 1c             	add    esp,0x1c
c000fb73:	c3                   	ret    

c000fb74 <Semaphore::acquire()>:
c000fb74:	83 ec 0c             	sub    esp,0xc
c000fb77:	83 ec 08             	sub    esp,0x8
c000fb7a:	6a 00                	push   0x0
c000fb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb80:	e8 4b fe ff ff       	call   c000f9d0 <Semaphore::acquire(int)>
c000fb85:	83 c4 10             	add    esp,0x10
c000fb88:	90                   	nop
c000fb89:	83 c4 0c             	add    esp,0xc
c000fb8c:	c3                   	ret    
c000fb8d:	90                   	nop
c000fb8e:	66 90                	xchg   ax,ax

c000fb90 <Semaphore::release()>:
c000fb90:	83 ec 1c             	sub    esp,0x1c
c000fb93:	fa                   	cli    
c000fb94:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb99:	83 c0 01             	add    eax,0x1
c000fb9c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fba1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fba6:	83 c0 01             	add    eax,0x1
c000fba9:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fbae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	74 2b                	je     c000fbe4 <Semaphore::release()+0x54>
c000fbb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbc8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fbcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbcf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fbd2:	83 ec 0c             	sub    esp,0xc
c000fbd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbd9:	e8 d2 5a 00 00       	call   c00156b0 <unblockTask(ThreadControlBlock*)>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	eb 15                	jmp    c000fbf8 <Semaphore::release()+0x68>
c000fbe3:	90                   	nop
c000fbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbe8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbeb:	8d 50 ff             	lea    edx,[eax-0x1]
c000fbee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbf2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fbf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbf8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbfd:	83 e8 01             	sub    eax,0x1
c000fc00:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc05:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc0a:	85 c0                	test   eax,eax
c000fc0c:	75 1a                	jne    c000fc28 <Semaphore::release()+0x98>
c000fc0e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fc13:	85 c0                	test   eax,eax
c000fc15:	74 11                	je     c000fc28 <Semaphore::release()+0x98>
c000fc17:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fc21:	e8 8a 57 00 00       	call   c00153b0 <schedule()>
c000fc26:	66 90                	xchg   ax,ax
c000fc28:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c000fc30:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc35:	85 c0                	test   eax,eax
c000fc37:	75 03                	jne    c000fc3c <Semaphore::release()+0xac>
c000fc39:	fb                   	sti    
c000fc3a:	66 90                	xchg   ax,ax
c000fc3c:	90                   	nop
c000fc3d:	83 c4 1c             	add    esp,0x1c
c000fc40:	c3                   	ret    

c000fc41 <KiSigKill(int)>:
c000fc41:	83 ec 0c             	sub    esp,0xc
c000fc44:	6a 00                	push   0x0
c000fc46:	6a 00                	push   0x0
c000fc48:	6a ff                	push   0xffffffff
c000fc4a:	6a 01                	push   0x1
c000fc4c:	e8 01 54 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc51:	83 c4 1c             	add    esp,0x1c
c000fc54:	c3                   	ret    

c000fc55 <KiDefaultSignalHandlerIgnore(int)>:
c000fc55:	c3                   	ret    

c000fc56 <KiDefaultSignalHandlerPause(int)>:
c000fc56:	57                   	push   edi
c000fc57:	b9 07 00 00 00       	mov    ecx,0x7
c000fc5c:	56                   	push   esi
c000fc5d:	be 57 22 02 c0       	mov    esi,0xc0022257
c000fc62:	83 ec 24             	sub    esp,0x24
c000fc65:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fc69:	fc                   	cld    
c000fc6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc6c:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fc70:	50                   	push   eax
c000fc71:	6a 00                	push   0x0
c000fc73:	6a 00                	push   0x0
c000fc75:	6a 27                	push   0x27
c000fc77:	e8 d6 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fc7c:	83 c4 34             	add    esp,0x34
c000fc7f:	5e                   	pop    esi
c000fc80:	5f                   	pop    edi
c000fc81:	c3                   	ret    

c000fc82 <KiDefaultSignalHandlerResume(int)>:
c000fc82:	57                   	push   edi
c000fc83:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fc88:	56                   	push   esi
c000fc89:	be 73 22 02 c0       	mov    esi,0xc0022273
c000fc8e:	83 ec 24             	sub    esp,0x24
c000fc91:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fc95:	fc                   	cld    
c000fc96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc98:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fc9c:	50                   	push   eax
c000fc9d:	6a 00                	push   0x0
c000fc9f:	6a 00                	push   0x0
c000fca1:	6a 27                	push   0x27
c000fca3:	e8 aa 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fca8:	83 c4 34             	add    esp,0x34
c000fcab:	5e                   	pop    esi
c000fcac:	5f                   	pop    edi
c000fcad:	c3                   	ret    

c000fcae <KeDeinitSignals(SigHandlerBlock*)>:
c000fcae:	e9 2d ec ff ff       	jmp    c000e8e0 <free>

c000fcb3 <KeInitSignals()>:
c000fcb3:	53                   	push   ebx
c000fcb4:	83 ec 14             	sub    esp,0x14
c000fcb7:	68 c8 00 00 00       	push   0xc8
c000fcbc:	e8 0f ec ff ff       	call   c000e8d0 <malloc>
c000fcc1:	83 c4 0c             	add    esp,0xc
c000fcc4:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fcce:	89 c3                	mov    ebx,eax
c000fcd0:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fcda:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fce0:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c000fce4:	6a 20                	push   0x20
c000fce6:	6a 00                	push   0x0
c000fce8:	50                   	push   eax
c000fce9:	e8 02 08 ff ff       	call   c00004f0 <memset>
c000fcee:	83 c4 0c             	add    esp,0xc
c000fcf1:	6a 44                	push   0x44
c000fcf3:	6a 00                	push   0x0
c000fcf5:	53                   	push   ebx
c000fcf6:	e8 f5 07 ff ff       	call   c00004f0 <memset>
c000fcfb:	83 c4 18             	add    esp,0x18
c000fcfe:	89 d8                	mov    eax,ebx
c000fd00:	5b                   	pop    ebx
c000fd01:	c3                   	ret    

c000fd02 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fd02:	53                   	push   ebx
c000fd03:	b8 01 00 00 00       	mov    eax,0x1
c000fd08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fd0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fd10:	83 f9 10             	cmp    ecx,0x10
c000fd13:	7f 21                	jg     c000fd36 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fd15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd19:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fd1c:	89 03                	mov    DWORD PTR [ebx],eax
c000fd1e:	b8 01 00 00 00       	mov    eax,0x1
c000fd23:	d3 e0                	shl    eax,cl
c000fd25:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fd29:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fd2c:	31 c0                	xor    eax,eax
c000fd2e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fd36:	5b                   	pop    ebx
c000fd37:	c3                   	ret    

c000fd38 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fd38:	55                   	push   ebp
c000fd39:	57                   	push   edi
c000fd3a:	bf 08 00 00 00       	mov    edi,0x8
c000fd3f:	56                   	push   esi
c000fd40:	53                   	push   ebx
c000fd41:	83 ec 18             	sub    esp,0x18
c000fd44:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fd48:	68 90 22 02 c0       	push   0xc0022290
c000fd4d:	e8 fc 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd52:	83 c4 10             	add    esp,0x10
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fd5e:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fd64:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fd68:	99                   	cdq    
c000fd69:	f7 ff                	idiv   edi
c000fd6b:	8d 42 24             	lea    eax,[edx+0x24]
c000fd6e:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fd72:	85 f6                	test   esi,esi
c000fd74:	75 1a                	jne    c000fd90 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fd76:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fd7a:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fd7e:	50                   	push   eax
c000fd7f:	50                   	push   eax
c000fd80:	52                   	push   edx
c000fd81:	68 a1 22 02 c0       	push   0xc00222a1
c000fd86:	e8 c3 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fd8b:	83 c4 10             	add    esp,0x10
c000fd8e:	eb 1b                	jmp    c000fdab <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fd90:	41                   	inc    ecx
c000fd91:	83 f9 08             	cmp    ecx,0x8
c000fd94:	75 ce                	jne    c000fd64 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	be 01 00 00 00       	mov    esi,0x1
c000fd9e:	68 c2 22 02 c0       	push   0xc00222c2
c000fda3:	e8 a6 71 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c000fda8:	83 c4 10             	add    esp,0x10
c000fdab:	83 c4 0c             	add    esp,0xc
c000fdae:	89 f0                	mov    eax,esi
c000fdb0:	5b                   	pop    ebx
c000fdb1:	5e                   	pop    esi
c000fdb2:	5f                   	pop    edi
c000fdb3:	5d                   	pop    ebp
c000fdb4:	c3                   	ret    

c000fdb5 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fdb5:	55                   	push   ebp
c000fdb6:	57                   	push   edi
c000fdb7:	56                   	push   esi
c000fdb8:	53                   	push   ebx
c000fdb9:	51                   	push   ecx
c000fdba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fdbe:	85 db                	test   ebx,ebx
c000fdc0:	0f 84 bc 00 00 00    	je     c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdc6:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fdcd:	0f 84 af 00 00 00    	je     c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fdd3:	31 c9                	xor    ecx,ecx
c000fdd5:	bf 08 00 00 00       	mov    edi,0x8
c000fdda:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000fde0:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000fde3:	99                   	cdq    
c000fde4:	f7 ff                	idiv   edi
c000fde6:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000fded:	85 ed                	test   ebp,ebp
c000fdef:	0f 84 9e 00 00 00    	je     c000fe93 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fdf5:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fdfb:	89 e9                	mov    ecx,ebp
c000fdfd:	bf 01 00 00 00       	mov    edi,0x1
c000fe02:	d3 e7                	shl    edi,cl
c000fe04:	31 c9                	xor    ecx,ecx
c000fe06:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe09:	b8 01 00 00 00       	mov    eax,0x1
c000fe0e:	d3 e0                	shl    eax,cl
c000fe10:	85 04 24             	test   DWORD PTR [esp],eax
c000fe13:	74 06                	je     c000fe1b <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fe15:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fe19:	75 67                	jne    c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe1b:	41                   	inc    ecx
c000fe1c:	83 f9 11             	cmp    ecx,0x11
c000fe1f:	75 e8                	jne    c000fe09 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	46                   	inc    esi
c000fe25:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe2b:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000fe36:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000fe3d:	09 f8                	or     eax,edi
c000fe3f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000fe45:	31 c0                	xor    eax,eax
c000fe47:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000fe4f:	74 09                	je     c000fe5a <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000fe51:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe58:	eb 06                	jmp    c000fe60 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000fe5a:	40                   	inc    eax
c000fe5b:	83 f8 08             	cmp    eax,0x8
c000fe5e:	75 e7                	jne    c000fe47 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000fe60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fe64:	83 fd 09             	cmp    ebp,0x9
c000fe67:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000fe6a:	89 2a                	mov    DWORD PTR [edx],ebp
c000fe6c:	75 07                	jne    c000fe75 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000fe6e:	b8 41 fc 00 c0       	mov    eax,0xc000fc41
c000fe73:	eb 31                	jmp    c000fea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe75:	83 f8 01             	cmp    eax,0x1
c000fe78:	75 0c                	jne    c000fe86 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000fe7a:	f7 d7                	not    edi
c000fe7c:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000fe82:	31 c0                	xor    eax,eax
c000fe84:	eb 20                	jmp    c000fea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe86:	85 c0                	test   eax,eax
c000fe88:	75 1c                	jne    c000fea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe8a:	8b 04 ad 20 40 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdbfe0]
c000fe91:	eb 13                	jmp    c000fea6 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000fe93:	41                   	inc    ecx
c000fe94:	46                   	inc    esi
c000fe95:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fe9b:	83 f9 08             	cmp    ecx,0x8
c000fe9e:	0f 85 36 ff ff ff    	jne    c000fdda <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000fea4:	eb dc                	jmp    c000fe82 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fea6:	5a                   	pop    edx
c000fea7:	5b                   	pop    ebx
c000fea8:	5e                   	pop    esi
c000fea9:	5f                   	pop    edi
c000feaa:	5d                   	pop    ebp
c000feab:	c3                   	ret    

c000feac <KiCheckSignalZ>:
c000feac:	83 ec 10             	sub    esp,0x10
c000feaf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000feb3:	50                   	push   eax
c000feb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000feb9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000febc:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000fec2:	e8 ee fe ff ff       	call   c000fdb5 <KeCheckSignal(SigHandlerBlock*, int*)>
c000fec7:	5a                   	pop    edx
c000fec8:	31 d2                	xor    edx,edx
c000feca:	59                   	pop    ecx
c000fecb:	85 c0                	test   eax,eax
c000fecd:	74 19                	je     c000fee8 <KiCheckSignalZ+0x3c>
c000fecf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fed5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fed8:	89 02                	mov    DWORD PTR [edx],eax
c000feda:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000fee1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fee5:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000fee8:	89 d0                	mov    eax,edx
c000feea:	83 c4 10             	add    esp,0x10
c000feed:	c3                   	ret    

c000feee <KeCompleteSignal(SigHandlerBlock*, int)>:
c000feee:	56                   	push   esi
c000feef:	53                   	push   ebx
c000fef0:	bb 01 00 00 00       	mov    ebx,0x1
c000fef5:	52                   	push   edx
c000fef6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fefa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fefe:	d3 e3                	shl    ebx,cl
c000ff00:	83 f9 10             	cmp    ecx,0x10
c000ff03:	7f 08                	jg     c000ff0d <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ff05:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ff0b:	75 10                	jne    c000ff1d <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ff0d:	83 ec 0c             	sub    esp,0xc
c000ff10:	68 d3 22 02 c0       	push   0xc00222d3
c000ff15:	e8 fc ec ff ff       	call   c000ec16 <KePanic(char const*)>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	f7 d3                	not    ebx
c000ff1f:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000ff25:	58                   	pop    eax
c000ff26:	5b                   	pop    ebx
c000ff27:	5e                   	pop    esi
c000ff28:	c3                   	ret    

c000ff29 <KiFinishSignalZ>:
c000ff29:	53                   	push   ebx
c000ff2a:	83 ec 10             	sub    esp,0x10
c000ff2d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff31:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c000ff34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff3c:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff42:	e8 a7 ff ff ff       	call   c000feee <KeCompleteSignal(SigHandlerBlock*, int)>
c000ff47:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ff4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000ff54:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ff5b:	83 c4 18             	add    esp,0x18
c000ff5e:	5b                   	pop    ebx
c000ff5f:	c3                   	ret    

c000ff60 <SysSeekDir(regs*)>:
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	31 d2                	xor    edx,edx
c000ff64:	c3                   	ret    

c000ff65 <SysTellDir(regs*)>:
c000ff65:	31 c0                	xor    eax,eax
c000ff67:	31 d2                	xor    edx,edx
c000ff69:	c3                   	ret    

c000ff6a <SysVerify(regs*)>:
c000ff6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff6e:	31 d2                	xor    edx,edx
c000ff70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ff73:	c3                   	ret    

c000ff74 <SysGetArgc(regs*)>:
c000ff74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff79:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff7c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c000ff82:	89 c2                	mov    edx,eax
c000ff84:	c1 fa 1f             	sar    edx,0x1f
c000ff87:	c3                   	ret    

c000ff88 <SysTTYName(regs*)>:
c000ff88:	b8 01 00 00 00       	mov    eax,0x1
c000ff8d:	31 d2                	xor    edx,edx
c000ff8f:	c3                   	ret    

c000ff90 <SysFormatDisk(regs*)>:
c000ff90:	56                   	push   esi
c000ff91:	53                   	push   ebx
c000ff92:	83 ec 04             	sub    esp,0x4
c000ff95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff99:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000ff9f:	eb 2a                	jmp    c000ffcb <SysFormatDisk(regs*)+0x3b>
c000ffa1:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c000ffa4:	83 ec 0c             	sub    esp,0xc
c000ffa7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000ffaa:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ffac:	51                   	push   ecx
c000ffad:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c000ffb0:	51                   	push   ecx
c000ffb1:	50                   	push   eax
c000ffb2:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000ffb9:	50                   	push   eax
c000ffba:	53                   	push   ebx
c000ffbb:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c000ffbe:	83 c4 20             	add    esp,0x20
c000ffc1:	83 f8 08             	cmp    eax,0x8
c000ffc4:	89 c1                	mov    ecx,eax
c000ffc6:	75 14                	jne    c000ffdc <SysFormatDisk(regs*)+0x4c>
c000ffc8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ffcb:	85 db                	test   ebx,ebx
c000ffcd:	75 d2                	jne    c000ffa1 <SysFormatDisk(regs*)+0x11>
c000ffcf:	b8 03 00 00 00       	mov    eax,0x3
c000ffd4:	31 d2                	xor    edx,edx
c000ffd6:	83 c4 04             	add    esp,0x4
c000ffd9:	5b                   	pop    ebx
c000ffda:	5e                   	pop    esi
c000ffdb:	c3                   	ret    
c000ffdc:	85 c0                	test   eax,eax
c000ffde:	74 13                	je     c000fff3 <SysFormatDisk(regs*)+0x63>
c000ffe0:	31 d2                	xor    edx,edx
c000ffe2:	83 f9 09             	cmp    ecx,0x9
c000ffe5:	b8 01 00 00 00       	mov    eax,0x1
c000ffea:	74 ea                	je     c000ffd6 <SysFormatDisk(regs*)+0x46>
c000ffec:	b8 02 00 00 00       	mov    eax,0x2
c000fff1:	eb e1                	jmp    c000ffd4 <SysFormatDisk(regs*)+0x44>
c000fff3:	31 c0                	xor    eax,eax
c000fff5:	eb dd                	jmp    c000ffd4 <SysFormatDisk(regs*)+0x44>

c000fff7 <SysSetDiskVolumeLabel(regs*)>:
c000fff7:	56                   	push   esi
c000fff8:	53                   	push   ebx
c000fff9:	83 ec 04             	sub    esp,0x4
c000fffc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010000:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010003:	83 f8 19             	cmp    eax,0x19
c0010006:	77 33                	ja     c001003b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010008:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001000f:	85 c9                	test   ecx,ecx
c0010011:	74 28                	je     c001003b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010013:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010016:	85 db                	test   ebx,ebx
c0010018:	74 21                	je     c001003b <SysSetDiskVolumeLabel(regs*)+0x44>
c001001a:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010020:	85 d2                	test   edx,edx
c0010022:	74 17                	je     c001003b <SysSetDiskVolumeLabel(regs*)+0x44>
c0010024:	8b 32                	mov    esi,DWORD PTR [edx]
c0010026:	53                   	push   ebx
c0010027:	50                   	push   eax
c0010028:	51                   	push   ecx
c0010029:	52                   	push   edx
c001002a:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001002d:	83 c4 10             	add    esp,0x10
c0010030:	83 c4 04             	add    esp,0x4
c0010033:	5b                   	pop    ebx
c0010034:	5e                   	pop    esi
c0010035:	89 c2                	mov    edx,eax
c0010037:	c1 fa 1f             	sar    edx,0x1f
c001003a:	c3                   	ret    
c001003b:	83 c4 04             	add    esp,0x4
c001003e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010043:	5b                   	pop    ebx
c0010044:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010049:	5e                   	pop    esi
c001004a:	c3                   	ret    

c001004b <SysGetDiskVolumeLabel(regs*)>:
c001004b:	57                   	push   edi
c001004c:	56                   	push   esi
c001004d:	53                   	push   ebx
c001004e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010052:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010055:	83 fa 19             	cmp    edx,0x19
c0010058:	77 3c                	ja     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001005a:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c0010061:	85 c9                	test   ecx,ecx
c0010063:	74 31                	je     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010065:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010068:	85 db                	test   ebx,ebx
c001006a:	74 2a                	je     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001006c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001006f:	85 f6                	test   esi,esi
c0010071:	74 23                	je     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010073:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010079:	85 c0                	test   eax,eax
c001007b:	74 19                	je     c0010096 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001007d:	83 ec 0c             	sub    esp,0xc
c0010080:	8b 38                	mov    edi,DWORD PTR [eax]
c0010082:	56                   	push   esi
c0010083:	53                   	push   ebx
c0010084:	52                   	push   edx
c0010085:	51                   	push   ecx
c0010086:	50                   	push   eax
c0010087:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001008a:	83 c4 20             	add    esp,0x20
c001008d:	5b                   	pop    ebx
c001008e:	5e                   	pop    esi
c001008f:	89 c2                	mov    edx,eax
c0010091:	c1 fa 1f             	sar    edx,0x1f
c0010094:	5f                   	pop    edi
c0010095:	c3                   	ret    
c0010096:	5b                   	pop    ebx
c0010097:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001009c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00100a1:	5e                   	pop    esi
c00100a2:	5f                   	pop    edi
c00100a3:	c3                   	ret    

c00100a4 <SysRealpath(regs*)>:
c00100a4:	53                   	push   ebx
c00100a5:	83 ec 08             	sub    esp,0x8
c00100a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ac:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00100af:	85 c9                	test   ecx,ecx
c00100b1:	74 36                	je     c00100e9 <SysRealpath(regs*)+0x45>
c00100b3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00100b6:	31 d2                	xor    edx,edx
c00100b8:	b8 01 00 00 00       	mov    eax,0x1
c00100bd:	85 db                	test   ebx,ebx
c00100bf:	75 05                	jne    c00100c6 <SysRealpath(regs*)+0x22>
c00100c1:	83 c4 08             	add    esp,0x8
c00100c4:	5b                   	pop    ebx
c00100c5:	c3                   	ret    
c00100c6:	6a 00                	push   0x0
c00100c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00100cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00100d0:	05 0c 01 00 00       	add    eax,0x10c
c00100d5:	50                   	push   eax
c00100d6:	51                   	push   ecx
c00100d7:	53                   	push   ebx
c00100d8:	e8 23 7d ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	31 c0                	xor    eax,eax
c00100e2:	31 d2                	xor    edx,edx
c00100e4:	83 c4 08             	add    esp,0x8
c00100e7:	5b                   	pop    ebx
c00100e8:	c3                   	ret    
c00100e9:	b8 01 00 00 00       	mov    eax,0x1
c00100ee:	31 d2                	xor    edx,edx
c00100f0:	eb f2                	jmp    c00100e4 <SysRealpath(regs*)+0x40>

c00100f2 <SysReadDir(regs*)>:
c00100f2:	53                   	push   ebx
c00100f3:	83 ec 18             	sub    esp,0x18
c00100f6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00100fa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00100fd:	83 f8 02             	cmp    eax,0x2
c0010100:	76 4f                	jbe    c0010151 <SysReadDir(regs*)+0x5f>
c0010102:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010109:	77 52                	ja     c001015d <SysReadDir(regs*)+0x6b>
c001010b:	83 ec 0c             	sub    esp,0xc
c001010e:	50                   	push   eax
c001010f:	e8 d5 1c 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c0010114:	83 c4 10             	add    esp,0x10
c0010117:	85 c0                	test   eax,eax
c0010119:	74 42                	je     c001015d <SysReadDir(regs*)+0x6b>
c001011b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010123:	83 ec 0c             	sub    esp,0xc
c0010126:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001012a:	8b 10                	mov    edx,DWORD PTR [eax]
c001012c:	51                   	push   ecx
c001012d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010130:	51                   	push   ecx
c0010131:	6a 00                	push   0x0
c0010133:	68 10 01 00 00       	push   0x110
c0010138:	50                   	push   eax
c0010139:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001013c:	83 c4 20             	add    esp,0x20
c001013f:	85 c0                	test   eax,eax
c0010141:	89 c1                	mov    ecx,eax
c0010143:	74 27                	je     c001016c <SysReadDir(regs*)+0x7a>
c0010145:	31 d2                	xor    edx,edx
c0010147:	83 f9 07             	cmp    ecx,0x7
c001014a:	b8 02 00 00 00       	mov    eax,0x2
c001014f:	75 16                	jne    c0010167 <SysReadDir(regs*)+0x75>
c0010151:	b8 01 00 00 00       	mov    eax,0x1
c0010156:	31 d2                	xor    edx,edx
c0010158:	83 c4 18             	add    esp,0x18
c001015b:	5b                   	pop    ebx
c001015c:	c3                   	ret    
c001015d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010162:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010167:	83 c4 18             	add    esp,0x18
c001016a:	5b                   	pop    ebx
c001016b:	c3                   	ret    
c001016c:	31 c0                	xor    eax,eax
c001016e:	31 d2                	xor    edx,edx
c0010170:	eb e6                	jmp    c0010158 <SysReadDir(regs*)+0x66>

c0010172 <SysIsATTY(regs*)>:
c0010172:	83 ec 0c             	sub    esp,0xc
c0010175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010179:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001017c:	83 f8 02             	cmp    eax,0x2
c001017f:	76 07                	jbe    c0010188 <SysIsATTY(regs*)+0x16>
c0010181:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010186:	75 26                	jne    c00101ae <SysIsATTY(regs*)+0x3c>
c0010188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001018d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010190:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010196:	85 c0                	test   eax,eax
c0010198:	74 24                	je     c00101be <SysIsATTY(regs*)+0x4c>
c001019a:	8b 10                	mov    edx,DWORD PTR [eax]
c001019c:	83 ec 0c             	sub    esp,0xc
c001019f:	50                   	push   eax
c00101a0:	ff 12                	call   DWORD PTR [edx]
c00101a2:	83 c4 10             	add    esp,0x10
c00101a5:	31 d2                	xor    edx,edx
c00101a7:	83 c4 0c             	add    esp,0xc
c00101aa:	0f b6 c0             	movzx  eax,al
c00101ad:	c3                   	ret    
c00101ae:	83 ec 0c             	sub    esp,0xc
c00101b1:	50                   	push   eax
c00101b2:	e8 32 1c 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00101b7:	83 c4 10             	add    esp,0x10
c00101ba:	85 c0                	test   eax,eax
c00101bc:	75 dc                	jne    c001019a <SysIsATTY(regs*)+0x28>
c00101be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101c8:	83 c4 0c             	add    esp,0xc
c00101cb:	c3                   	ret    

c00101cc <SysSeek(regs*)>:
c00101cc:	56                   	push   esi
c00101cd:	53                   	push   ebx
c00101ce:	83 ec 04             	sub    esp,0x4
c00101d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101d5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00101d8:	8d 71 fd             	lea    esi,[ecx-0x3]
c00101db:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c00101e1:	77 33                	ja     c0010216 <SysSeek(regs*)+0x4a>
c00101e3:	83 ec 0c             	sub    esp,0xc
c00101e6:	51                   	push   ecx
c00101e7:	e8 fd 1b 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00101ec:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00101ef:	83 c4 0c             	add    esp,0xc
c00101f2:	31 db                	xor    ebx,ebx
c00101f4:	53                   	push   ebx
c00101f5:	51                   	push   ecx
c00101f6:	50                   	push   eax
c00101f7:	e8 ec 7f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00101fc:	83 c4 10             	add    esp,0x10
c00101ff:	85 c0                	test   eax,eax
c0010201:	0f 95 c0             	setne  al
c0010204:	31 d2                	xor    edx,edx
c0010206:	0f b6 c0             	movzx  eax,al
c0010209:	f7 d8                	neg    eax
c001020b:	83 d2 00             	adc    edx,0x0
c001020e:	83 c4 04             	add    esp,0x4
c0010211:	5b                   	pop    ebx
c0010212:	f7 da                	neg    edx
c0010214:	5e                   	pop    esi
c0010215:	c3                   	ret    
c0010216:	83 c4 04             	add    esp,0x4
c0010219:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001021e:	5b                   	pop    ebx
c001021f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010224:	5e                   	pop    esi
c0010225:	c3                   	ret    

c0010226 <SysTell(regs*)>:
c0010226:	53                   	push   ebx
c0010227:	83 ec 08             	sub    esp,0x8
c001022a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001022e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010231:	83 f8 02             	cmp    eax,0x2
c0010234:	76 4e                	jbe    c0010284 <SysTell(regs*)+0x5e>
c0010236:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001023b:	76 19                	jbe    c0010256 <SysTell(regs*)+0x30>
c001023d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010240:	31 d2                	xor    edx,edx
c0010242:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010248:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001024f:	83 c4 08             	add    esp,0x8
c0010252:	31 c0                	xor    eax,eax
c0010254:	5b                   	pop    ebx
c0010255:	c3                   	ret    
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	50                   	push   eax
c001025a:	e8 8a 1b 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c001025f:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010262:	5a                   	pop    edx
c0010263:	59                   	pop    ecx
c0010264:	53                   	push   ebx
c0010265:	50                   	push   eax
c0010266:	e8 29 80 ff ff       	call   c0008294 <File::tell(unsigned long long*)>
c001026b:	83 c4 10             	add    esp,0x10
c001026e:	85 c0                	test   eax,eax
c0010270:	0f 95 c0             	setne  al
c0010273:	31 d2                	xor    edx,edx
c0010275:	0f b6 c0             	movzx  eax,al
c0010278:	f7 d8                	neg    eax
c001027a:	83 d2 00             	adc    edx,0x0
c001027d:	83 c4 08             	add    esp,0x8
c0010280:	5b                   	pop    ebx
c0010281:	f7 da                	neg    edx
c0010283:	c3                   	ret    
c0010284:	83 c4 08             	add    esp,0x8
c0010287:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001028c:	5b                   	pop    ebx
c001028d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010292:	c3                   	ret    

c0010293 <SysSize(regs*)>:
c0010293:	53                   	push   ebx
c0010294:	83 ec 18             	sub    esp,0x18
c0010297:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001029b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001029e:	83 f8 02             	cmp    eax,0x2
c00102a1:	76 54                	jbe    c00102f7 <SysSize(regs*)+0x64>
c00102a3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00102a8:	76 19                	jbe    c00102c3 <SysSize(regs*)+0x30>
c00102aa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00102ad:	31 d2                	xor    edx,edx
c00102af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00102b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00102bc:	83 c4 18             	add    esp,0x18
c00102bf:	31 c0                	xor    eax,eax
c00102c1:	5b                   	pop    ebx
c00102c2:	c3                   	ret    
c00102c3:	83 ec 0c             	sub    esp,0xc
c00102c6:	50                   	push   eax
c00102c7:	e8 1d 1b 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00102cc:	83 c4 0c             	add    esp,0xc
c00102cf:	8d 54 24 13          	lea    edx,[esp+0x13]
c00102d3:	52                   	push   edx
c00102d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00102d7:	52                   	push   edx
c00102d8:	50                   	push   eax
c00102d9:	e8 4e 81 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c00102de:	83 c4 10             	add    esp,0x10
c00102e1:	85 c0                	test   eax,eax
c00102e3:	0f 95 c0             	setne  al
c00102e6:	31 d2                	xor    edx,edx
c00102e8:	0f b6 c0             	movzx  eax,al
c00102eb:	f7 d8                	neg    eax
c00102ed:	83 d2 00             	adc    edx,0x0
c00102f0:	83 c4 18             	add    esp,0x18
c00102f3:	5b                   	pop    ebx
c00102f4:	f7 da                	neg    edx
c00102f6:	c3                   	ret    
c00102f7:	83 c4 18             	add    esp,0x18
c00102fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102ff:	5b                   	pop    ebx
c0010300:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010305:	c3                   	ret    

c0010306 <SysSizeFromFilename(regs*)>:
c0010306:	55                   	push   ebp
c0010307:	57                   	push   edi
c0010308:	56                   	push   esi
c0010309:	53                   	push   ebx
c001030a:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010310:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010317:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001031a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001031d:	85 f6                	test   esi,esi
c001031f:	89 f8                	mov    eax,edi
c0010321:	74 09                	je     c001032c <SysSizeFromFilename(regs*)+0x26>
c0010323:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010329:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001032c:	83 f8 02             	cmp    eax,0x2
c001032f:	0f 86 ca 00 00 00    	jbe    c00103ff <SysSizeFromFilename(regs*)+0xf9>
c0010335:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001033a:	76 1f                	jbe    c001035b <SysSizeFromFilename(regs*)+0x55>
c001033c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001033f:	31 d2                	xor    edx,edx
c0010341:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010347:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001034e:	31 c0                	xor    eax,eax
c0010350:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010356:	5b                   	pop    ebx
c0010357:	5e                   	pop    esi
c0010358:	5f                   	pop    edi
c0010359:	5d                   	pop    ebp
c001035a:	c3                   	ret    
c001035b:	83 ec 0c             	sub    esp,0xc
c001035e:	68 14 01 00 00       	push   0x114
c0010363:	e8 68 e5 ff ff       	call   c000e8d0 <malloc>
c0010368:	6a 01                	push   0x1
c001036a:	89 c5                	mov    ebp,eax
c001036c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010371:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010374:	51                   	push   ecx
c0010375:	57                   	push   edi
c0010376:	55                   	push   ebp
c0010377:	e8 b2 7c ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c001037c:	83 c4 1c             	add    esp,0x1c
c001037f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010383:	50                   	push   eax
c0010384:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010387:	53                   	push   ebx
c0010388:	55                   	push   ebp
c0010389:	e8 9e 80 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001038e:	83 c4 10             	add    esp,0x10
c0010391:	85 ed                	test   ebp,ebp
c0010393:	89 c3                	mov    ebx,eax
c0010395:	74 0d                	je     c00103a4 <SysSizeFromFilename(regs*)+0x9e>
c0010397:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001039a:	83 ec 0c             	sub    esp,0xc
c001039d:	55                   	push   ebp
c001039e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00103a1:	83 c4 10             	add    esp,0x10
c00103a4:	85 db                	test   ebx,ebx
c00103a6:	75 57                	jne    c00103ff <SysSizeFromFilename(regs*)+0xf9>
c00103a8:	6a 00                	push   0x0
c00103aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103b2:	05 0c 01 00 00       	add    eax,0x10c
c00103b7:	50                   	push   eax
c00103b8:	57                   	push   edi
c00103b9:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00103c0:	53                   	push   ebx
c00103c1:	e8 3a 7a ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00103c6:	58                   	pop    eax
c00103c7:	5a                   	pop    edx
c00103c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00103cc:	50                   	push   eax
c00103cd:	53                   	push   ebx
c00103ce:	e8 b4 74 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c00103d3:	83 c4 10             	add    esp,0x10
c00103d6:	ba 00 00 00 00       	mov    edx,0x0
c00103db:	83 f8 01             	cmp    eax,0x1
c00103de:	b8 00 00 00 00       	mov    eax,0x0
c00103e3:	74 2f                	je     c0010414 <SysSizeFromFilename(regs*)+0x10e>
c00103e5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00103ea:	74 3b                	je     c0010427 <SysSizeFromFilename(regs*)+0x121>
c00103ec:	85 f6                	test   esi,esi
c00103ee:	0f 84 5c ff ff ff    	je     c0010350 <SysSizeFromFilename(regs*)+0x4a>
c00103f4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00103fa:	e9 51 ff ff ff       	jmp    c0010350 <SysSizeFromFilename(regs*)+0x4a>
c00103ff:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010405:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001040a:	5b                   	pop    ebx
c001040b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010410:	5e                   	pop    esi
c0010411:	5f                   	pop    edi
c0010412:	5d                   	pop    ebp
c0010413:	c3                   	ret    
c0010414:	85 f6                	test   esi,esi
c0010416:	0f 84 34 ff ff ff    	je     c0010350 <SysSizeFromFilename(regs*)+0x4a>
c001041c:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010422:	e9 29 ff ff ff       	jmp    c0010350 <SysSizeFromFilename(regs*)+0x4a>
c0010427:	85 f6                	test   esi,esi
c0010429:	0f 84 21 ff ff ff    	je     c0010350 <SysSizeFromFilename(regs*)+0x4a>
c001042f:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010435:	e9 16 ff ff ff       	jmp    c0010350 <SysSizeFromFilename(regs*)+0x4a>

c001043a <SysSizeFromFilenameNoSymlink(regs*)>:
c001043a:	55                   	push   ebp
c001043b:	57                   	push   edi
c001043c:	56                   	push   esi
c001043d:	53                   	push   ebx
c001043e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010444:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001044b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001044e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010451:	85 f6                	test   esi,esi
c0010453:	89 f8                	mov    eax,edi
c0010455:	74 09                	je     c0010460 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0010457:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001045d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010460:	83 f8 02             	cmp    eax,0x2
c0010463:	0f 86 ca 00 00 00    	jbe    c0010533 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0010469:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001046e:	76 1f                	jbe    c001048f <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0010470:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010473:	31 d2                	xor    edx,edx
c0010475:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001047b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010482:	31 c0                	xor    eax,eax
c0010484:	81 c4 4c 02 00 00    	add    esp,0x24c
c001048a:	5b                   	pop    ebx
c001048b:	5e                   	pop    esi
c001048c:	5f                   	pop    edi
c001048d:	5d                   	pop    ebp
c001048e:	c3                   	ret    
c001048f:	83 ec 0c             	sub    esp,0xc
c0010492:	68 14 01 00 00       	push   0x114
c0010497:	e8 34 e4 ff ff       	call   c000e8d0 <malloc>
c001049c:	6a 00                	push   0x0
c001049e:	89 c5                	mov    ebp,eax
c00104a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104a5:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00104a8:	51                   	push   ecx
c00104a9:	57                   	push   edi
c00104aa:	55                   	push   ebp
c00104ab:	e8 7e 7b ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00104b0:	83 c4 1c             	add    esp,0x1c
c00104b3:	8d 44 24 13          	lea    eax,[esp+0x13]
c00104b7:	50                   	push   eax
c00104b8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00104bb:	53                   	push   ebx
c00104bc:	55                   	push   ebp
c00104bd:	e8 6a 7f ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	85 ed                	test   ebp,ebp
c00104c7:	89 c3                	mov    ebx,eax
c00104c9:	74 0d                	je     c00104d8 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c00104cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00104ce:	83 ec 0c             	sub    esp,0xc
c00104d1:	55                   	push   ebp
c00104d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00104d5:	83 c4 10             	add    esp,0x10
c00104d8:	85 db                	test   ebx,ebx
c00104da:	75 57                	jne    c0010533 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00104dc:	6a 00                	push   0x0
c00104de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00104e6:	05 0c 01 00 00       	add    eax,0x10c
c00104eb:	50                   	push   eax
c00104ec:	57                   	push   edi
c00104ed:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00104f4:	53                   	push   ebx
c00104f5:	e8 06 79 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00104fa:	58                   	pop    eax
c00104fb:	5a                   	pop    edx
c00104fc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010500:	50                   	push   eax
c0010501:	53                   	push   ebx
c0010502:	e8 80 73 ff ff       	call   c0007887 <KeDereferenceSymlink(char const*, char*)>
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	ba 00 00 00 00       	mov    edx,0x0
c001050f:	83 f8 01             	cmp    eax,0x1
c0010512:	b8 00 00 00 00       	mov    eax,0x0
c0010517:	74 2f                	je     c0010548 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c0010519:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001051e:	74 3b                	je     c001055b <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0010520:	85 f6                	test   esi,esi
c0010522:	0f 84 5c ff ff ff    	je     c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010528:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001052e:	e9 51 ff ff ff       	jmp    c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010533:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010539:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001053e:	5b                   	pop    ebx
c001053f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010544:	5e                   	pop    esi
c0010545:	5f                   	pop    edi
c0010546:	5d                   	pop    ebp
c0010547:	c3                   	ret    
c0010548:	85 f6                	test   esi,esi
c001054a:	0f 84 34 ff ff ff    	je     c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010550:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010556:	e9 29 ff ff ff       	jmp    c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c001055b:	85 f6                	test   esi,esi
c001055d:	0f 84 21 ff ff ff    	je     c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0010563:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010569:	e9 16 ff ff ff       	jmp    c0010484 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c001056e <SysClose(regs*)>:
c001056e:	53                   	push   ebx
c001056f:	83 ec 08             	sub    esp,0x8
c0010572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010576:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010579:	83 f8 02             	cmp    eax,0x2
c001057c:	76 41                	jbe    c00105bf <SysClose(regs*)+0x51>
c001057e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010584:	83 fa 01             	cmp    edx,0x1
c0010587:	76 2d                	jbe    c00105b6 <SysClose(regs*)+0x48>
c0010589:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001058e:	77 2f                	ja     c00105bf <SysClose(regs*)+0x51>
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	50                   	push   eax
c0010594:	e8 50 18 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c0010599:	89 04 24             	mov    DWORD PTR [esp],eax
c001059c:	89 c3                	mov    ebx,eax
c001059e:	e8 e5 7b ff ff       	call   c0008188 <File::close()>
c00105a3:	83 c4 10             	add    esp,0x10
c00105a6:	85 db                	test   ebx,ebx
c00105a8:	74 0c                	je     c00105b6 <SysClose(regs*)+0x48>
c00105aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105ac:	83 ec 0c             	sub    esp,0xc
c00105af:	53                   	push   ebx
c00105b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00105b3:	83 c4 10             	add    esp,0x10
c00105b6:	83 c4 08             	add    esp,0x8
c00105b9:	31 c0                	xor    eax,eax
c00105bb:	5b                   	pop    ebx
c00105bc:	31 d2                	xor    edx,edx
c00105be:	c3                   	ret    
c00105bf:	83 c4 08             	add    esp,0x8
c00105c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105c7:	5b                   	pop    ebx
c00105c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105cd:	c3                   	ret    

c00105ce <SysOpenDir(regs*)>:
c00105ce:	56                   	push   esi
c00105cf:	53                   	push   ebx
c00105d0:	83 ec 04             	sub    esp,0x4
c00105d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105d7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00105da:	85 c9                	test   ecx,ecx
c00105dc:	74 5d                	je     c001063b <SysOpenDir(regs*)+0x6d>
c00105de:	83 ec 0c             	sub    esp,0xc
c00105e1:	68 14 01 00 00       	push   0x114
c00105e6:	e8 e5 e2 ff ff       	call   c000e8d0 <malloc>
c00105eb:	83 c4 0c             	add    esp,0xc
c00105ee:	89 c6                	mov    esi,eax
c00105f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105f8:	50                   	push   eax
c00105f9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00105fc:	52                   	push   edx
c00105fd:	56                   	push   esi
c00105fe:	e8 e9 7f ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c0010603:	83 c4 10             	add    esp,0x10
c0010606:	85 f6                	test   esi,esi
c0010608:	74 31                	je     c001063b <SysOpenDir(regs*)+0x6d>
c001060a:	83 ec 0c             	sub    esp,0xc
c001060d:	56                   	push   esi
c001060e:	e8 a1 80 ff ff       	call   c00086b4 <Directory::open()>
c0010613:	83 c4 10             	add    esp,0x10
c0010616:	85 c0                	test   eax,eax
c0010618:	75 21                	jne    c001063b <SysOpenDir(regs*)+0x6d>
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	56                   	push   esi
c001061e:	e8 c9 14 00 00       	call   c0011aec <UnixFile::getFileDescriptor()>
c0010623:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010626:	83 c4 10             	add    esp,0x10
c0010629:	89 02                	mov    DWORD PTR [edx],eax
c001062b:	c1 f8 1f             	sar    eax,0x1f
c001062e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010631:	83 c4 04             	add    esp,0x4
c0010634:	31 c0                	xor    eax,eax
c0010636:	5b                   	pop    ebx
c0010637:	31 d2                	xor    edx,edx
c0010639:	5e                   	pop    esi
c001063a:	c3                   	ret    
c001063b:	83 c4 04             	add    esp,0x4
c001063e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010643:	5b                   	pop    ebx
c0010644:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010649:	5e                   	pop    esi
c001064a:	c3                   	ret    

c001064b <SysMakeDir(regs*)>:
c001064b:	56                   	push   esi
c001064c:	53                   	push   ebx
c001064d:	83 ec 10             	sub    esp,0x10
c0010650:	68 14 01 00 00       	push   0x114
c0010655:	e8 76 e2 ff ff       	call   c000e8d0 <malloc>
c001065a:	83 c4 0c             	add    esp,0xc
c001065d:	89 c3                	mov    ebx,eax
c001065f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010664:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010667:	50                   	push   eax
c0010668:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001066c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c001066f:	52                   	push   edx
c0010670:	53                   	push   ebx
c0010671:	e8 76 7f ff ff       	call   c00085ec <Directory::Directory(char const*, Process*)>
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	85 db                	test   ebx,ebx
c001067b:	74 2c                	je     c00106a9 <SysMakeDir(regs*)+0x5e>
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	53                   	push   ebx
c0010681:	e8 0e 82 ff ff       	call   c0008894 <Directory::create()>
c0010686:	89 c6                	mov    esi,eax
c0010688:	8b 03                	mov    eax,DWORD PTR [ebx]
c001068a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001068d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	31 c0                	xor    eax,eax
c0010695:	85 f6                	test   esi,esi
c0010697:	0f 95 c0             	setne  al
c001069a:	31 d2                	xor    edx,edx
c001069c:	f7 d8                	neg    eax
c001069e:	83 d2 00             	adc    edx,0x0
c00106a1:	83 c4 04             	add    esp,0x4
c00106a4:	5b                   	pop    ebx
c00106a5:	f7 da                	neg    edx
c00106a7:	5e                   	pop    esi
c00106a8:	c3                   	ret    
c00106a9:	83 c4 04             	add    esp,0x4
c00106ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106b1:	5b                   	pop    ebx
c00106b2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106b7:	5e                   	pop    esi
c00106b8:	c3                   	ret    

c00106b9 <SysCloseDir(regs*)>:
c00106b9:	53                   	push   ebx
c00106ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106bf:	83 ec 08             	sub    esp,0x8
c00106c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00106c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106ce:	8d 59 fd             	lea    ebx,[ecx-0x3]
c00106d1:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c00106d7:	77 2a                	ja     c0010703 <SysCloseDir(regs*)+0x4a>
c00106d9:	83 ec 0c             	sub    esp,0xc
c00106dc:	51                   	push   ecx
c00106dd:	e8 07 17 00 00       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00106e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00106e5:	89 c3                	mov    ebx,eax
c00106e7:	e8 24 80 ff ff       	call   c0008710 <Directory::close()>
c00106ec:	83 c4 10             	add    esp,0x10
c00106ef:	85 db                	test   ebx,ebx
c00106f1:	74 0c                	je     c00106ff <SysCloseDir(regs*)+0x46>
c00106f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106f5:	83 ec 0c             	sub    esp,0xc
c00106f8:	53                   	push   ebx
c00106f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106fc:	83 c4 10             	add    esp,0x10
c00106ff:	31 c0                	xor    eax,eax
c0010701:	31 d2                	xor    edx,edx
c0010703:	83 c4 08             	add    esp,0x8
c0010706:	5b                   	pop    ebx
c0010707:	c3                   	ret    

c0010708 <SysWait(regs*)>:
c0010708:	83 ec 10             	sub    esp,0x10
c001070b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001070f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010712:	52                   	push   edx
c0010713:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010716:	51                   	push   ecx
c0010717:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001071a:	50                   	push   eax
c001071b:	e8 8c 4d 00 00       	call   c00154ac <waitTask(int, int*, int)>
c0010720:	83 c4 1c             	add    esp,0x1c
c0010723:	89 c2                	mov    edx,eax
c0010725:	c1 fa 1f             	sar    edx,0x1f
c0010728:	c3                   	ret    

c0010729 <SysNotImpl(regs*)>:
c0010729:	83 ec 18             	sub    esp,0x18
c001072c:	68 e4 22 02 c0       	push   0xc00222e4
c0010731:	e8 e0 e4 ff ff       	call   c000ec16 <KePanic(char const*)>
c0010736:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001073b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010740:	83 c4 1c             	add    esp,0x1c
c0010743:	c3                   	ret    

c0010744 <SysPanic(regs*)>:
c0010744:	83 ec 18             	sub    esp,0x18
c0010747:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001074b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001074e:	50                   	push   eax
c001074f:	e8 c2 e4 ff ff       	call   c000ec16 <KePanic(char const*)>
c0010754:	b8 01 00 00 00       	mov    eax,0x1
c0010759:	31 d2                	xor    edx,edx
c001075b:	83 c4 1c             	add    esp,0x1c
c001075e:	c3                   	ret    

c001075f <SysRmdir(regs*)>:
c001075f:	56                   	push   esi
c0010760:	53                   	push   ebx
c0010761:	83 ec 10             	sub    esp,0x10
c0010764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010768:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001076b:	68 14 01 00 00       	push   0x114
c0010770:	e8 5b e1 ff ff       	call   c000e8d0 <malloc>
c0010775:	6a 00                	push   0x0
c0010777:	89 c3                	mov    ebx,eax
c0010779:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001077e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010781:	50                   	push   eax
c0010782:	56                   	push   esi
c0010783:	53                   	push   ebx
c0010784:	e8 a5 78 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c0010789:	83 c4 14             	add    esp,0x14
c001078c:	53                   	push   ebx
c001078d:	e8 66 7b ff ff       	call   c00082f8 <File::unlink()>
c0010792:	83 c4 10             	add    esp,0x10
c0010795:	85 db                	test   ebx,ebx
c0010797:	89 c6                	mov    esi,eax
c0010799:	74 0c                	je     c00107a7 <SysRmdir(regs*)+0x48>
c001079b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001079d:	83 ec 0c             	sub    esp,0xc
c00107a0:	53                   	push   ebx
c00107a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107a4:	83 c4 10             	add    esp,0x10
c00107a7:	31 c0                	xor    eax,eax
c00107a9:	85 f6                	test   esi,esi
c00107ab:	0f 95 c0             	setne  al
c00107ae:	31 d2                	xor    edx,edx
c00107b0:	f7 d8                	neg    eax
c00107b2:	83 d2 00             	adc    edx,0x0
c00107b5:	83 c4 04             	add    esp,0x4
c00107b8:	5b                   	pop    ebx
c00107b9:	f7 da                	neg    edx
c00107bb:	5e                   	pop    esi
c00107bc:	c3                   	ret    

c00107bd <SysUnlink(regs*)>:
c00107bd:	56                   	push   esi
c00107be:	53                   	push   ebx
c00107bf:	83 ec 10             	sub    esp,0x10
c00107c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107c6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00107c9:	68 14 01 00 00       	push   0x114
c00107ce:	e8 fd e0 ff ff       	call   c000e8d0 <malloc>
c00107d3:	6a 00                	push   0x0
c00107d5:	89 c3                	mov    ebx,eax
c00107d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107df:	50                   	push   eax
c00107e0:	56                   	push   esi
c00107e1:	53                   	push   ebx
c00107e2:	e8 47 78 ff ff       	call   c000802e <File::File(char const*, Process*, bool)>
c00107e7:	83 c4 14             	add    esp,0x14
c00107ea:	53                   	push   ebx
c00107eb:	e8 08 7b ff ff       	call   c00082f8 <File::unlink()>
c00107f0:	83 c4 10             	add    esp,0x10
c00107f3:	85 db                	test   ebx,ebx
c00107f5:	89 c6                	mov    esi,eax
c00107f7:	74 0c                	je     c0010805 <SysUnlink(regs*)+0x48>
c00107f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107fb:	83 ec 0c             	sub    esp,0xc
c00107fe:	53                   	push   ebx
c00107ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010802:	83 c4 10             	add    esp,0x10
c0010805:	31 c0                	xor    eax,eax
c0010807:	85 f6                	test   esi,esi
c0010809:	0f 95 c0             	setne  al
c001080c:	31 d2                	xor    edx,edx
c001080e:	f7 d8                	neg    eax
c0010810:	83 d2 00             	adc    edx,0x0
c0010813:	83 c4 04             	add    esp,0x4
c0010816:	5b                   	pop    ebx
c0010817:	f7 da                	neg    edx
c0010819:	5e                   	pop    esi
c001081a:	c3                   	ret    

c001081b <SysGetArgv(regs*)>:
c001081b:	83 ec 0c             	sub    esp,0xc
c001081e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010822:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010825:	85 c0                	test   eax,eax
c0010827:	78 2c                	js     c0010855 <SysGetArgv(regs*)+0x3a>
c0010829:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001082f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010832:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010838:	7d 1b                	jge    c0010855 <SysGetArgv(regs*)+0x3a>
c001083a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010841:	85 c0                	test   eax,eax
c0010843:	74 18                	je     c001085d <SysGetArgv(regs*)+0x42>
c0010845:	83 ec 08             	sub    esp,0x8
c0010848:	50                   	push   eax
c0010849:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c001084c:	50                   	push   eax
c001084d:	e8 fe fd fe ff       	call   c0000650 <strcpy>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	31 c0                	xor    eax,eax
c0010857:	31 d2                	xor    edx,edx
c0010859:	83 c4 0c             	add    esp,0xc
c001085c:	c3                   	ret    
c001085d:	b8 01 00 00 00       	mov    eax,0x1
c0010862:	31 d2                	xor    edx,edx
c0010864:	83 c4 0c             	add    esp,0xc
c0010867:	c3                   	ret    

c0010868 <SysUSleep(regs*)>:
c0010868:	83 ec 1c             	sub    esp,0x1c
c001086b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001086f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010872:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010875:	6a 00                	push   0x0
c0010877:	6a 64                	push   0x64
c0010879:	52                   	push   edx
c001087a:	50                   	push   eax
c001087b:	e8 f4 f1 00 00       	call   c001fa74 <__udivdi3>
c0010880:	83 c4 14             	add    esp,0x14
c0010883:	50                   	push   eax
c0010884:	e8 0f 4d 00 00       	call   c0015598 <milliTenthSleep(unsigned int)>
c0010889:	31 c0                	xor    eax,eax
c001088b:	31 d2                	xor    edx,edx
c001088d:	83 c4 1c             	add    esp,0x1c
c0010890:	c3                   	ret    

c0010891 <SysSpawn(regs*)>:
c0010891:	56                   	push   esi
c0010892:	53                   	push   ebx
c0010893:	83 ec 04             	sub    esp,0x4
c0010896:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001089a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001089d:	85 f6                	test   esi,esi
c001089f:	75 0a                	jne    c00108ab <SysSpawn(regs*)+0x1a>
c00108a1:	83 c4 04             	add    esp,0x4
c00108a4:	31 c0                	xor    eax,eax
c00108a6:	5b                   	pop    ebx
c00108a7:	31 d2                	xor    edx,edx
c00108a9:	5e                   	pop    esi
c00108aa:	c3                   	ret    
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	68 24 07 00 00       	push   0x724
c00108b3:	e8 18 e0 ff ff       	call   c000e8d0 <malloc>
c00108b8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00108bb:	83 c4 10             	add    esp,0x10
c00108be:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00108c1:	89 c6                	mov    esi,eax
c00108c3:	31 c0                	xor    eax,eax
c00108c5:	85 c9                	test   ecx,ecx
c00108c7:	75 08                	jne    c00108d1 <SysSpawn(regs*)+0x40>
c00108c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108d1:	52                   	push   edx
c00108d2:	50                   	push   eax
c00108d3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00108d6:	50                   	push   eax
c00108d7:	56                   	push   esi
c00108d8:	e8 53 44 00 00       	call   c0014d30 <Process::Process(char const*, Process*, char**)>
c00108dd:	83 c4 10             	add    esp,0x10
c00108e0:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00108e7:	75 b8                	jne    c00108a1 <SysSpawn(regs*)+0x10>
c00108e9:	83 ec 0c             	sub    esp,0xc
c00108ec:	56                   	push   esi
c00108ed:	e8 7a 49 00 00       	call   c001526c <Process::createUserThread()>
c00108f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00108f4:	83 c4 10             	add    esp,0x10
c00108f7:	83 c4 04             	add    esp,0x4
c00108fa:	5b                   	pop    ebx
c00108fb:	89 c2                	mov    edx,eax
c00108fd:	c1 fa 1f             	sar    edx,0x1f
c0010900:	5e                   	pop    esi
c0010901:	c3                   	ret    

c0010902 <SysGetEnv(regs*)>:
c0010902:	57                   	push   edi
c0010903:	56                   	push   esi
c0010904:	53                   	push   ebx
c0010905:	83 ec 1c             	sub    esp,0x1c
c0010908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001090d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010911:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010914:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010917:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001091a:	51                   	push   ecx
c001091b:	e8 fb d2 ff ff       	call   c000dc1b <KeGetProcessTotalEnvCount(Process*)>
c0010920:	83 c4 10             	add    esp,0x10
c0010923:	39 c7                	cmp    edi,eax
c0010925:	7c 12                	jl     c0010939 <SysGetEnv(regs*)+0x37>
c0010927:	31 c0                	xor    eax,eax
c0010929:	31 d2                	xor    edx,edx
c001092b:	85 f6                	test   esi,esi
c001092d:	74 03                	je     c0010932 <SysGetEnv(regs*)+0x30>
c001092f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010932:	83 c4 10             	add    esp,0x10
c0010935:	5b                   	pop    ebx
c0010936:	5e                   	pop    esi
c0010937:	5f                   	pop    edi
c0010938:	c3                   	ret    
c0010939:	8d 44 24 08          	lea    eax,[esp+0x8]
c001093d:	83 ec 04             	sub    esp,0x4
c0010940:	57                   	push   edi
c0010941:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010947:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001094a:	57                   	push   edi
c001094b:	50                   	push   eax
c001094c:	e8 ea d2 ff ff       	call   c000dc3b <KeGetProcessEnvPair(Process*, int)>
c0010951:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010958:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001095c:	83 c4 0c             	add    esp,0xc
c001095f:	85 d2                	test   edx,edx
c0010961:	75 23                	jne    c0010986 <SysGetEnv(regs*)+0x84>
c0010963:	83 ec 0c             	sub    esp,0xc
c0010966:	50                   	push   eax
c0010967:	e8 14 fc fe ff       	call   c0000580 <strlen>
c001096c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001096f:	89 c3                	mov    ebx,eax
c0010971:	e8 0a fc fe ff       	call   c0000580 <strlen>
c0010976:	83 c4 10             	add    esp,0x10
c0010979:	31 d2                	xor    edx,edx
c001097b:	83 c4 10             	add    esp,0x10
c001097e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010982:	5b                   	pop    ebx
c0010983:	5e                   	pop    esi
c0010984:	5f                   	pop    edi
c0010985:	c3                   	ret    
c0010986:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010989:	83 ec 08             	sub    esp,0x8
c001098c:	50                   	push   eax
c001098d:	56                   	push   esi
c001098e:	e8 bd fc fe ff       	call   c0000650 <strcpy>
c0010993:	58                   	pop    eax
c0010994:	5a                   	pop    edx
c0010995:	68 fe 22 02 c0       	push   0xc00222fe
c001099a:	56                   	push   esi
c001099b:	e8 d0 fe fe ff       	call   c0000870 <strcat>
c00109a0:	59                   	pop    ecx
c00109a1:	5b                   	pop    ebx
c00109a2:	57                   	push   edi
c00109a3:	56                   	push   esi
c00109a4:	e8 c7 fe fe ff       	call   c0000870 <strcat>
c00109a9:	83 c4 10             	add    esp,0x10
c00109ac:	31 c0                	xor    eax,eax
c00109ae:	83 c4 10             	add    esp,0x10
c00109b1:	31 d2                	xor    edx,edx
c00109b3:	5b                   	pop    ebx
c00109b4:	5e                   	pop    esi
c00109b5:	5f                   	pop    edi
c00109b6:	c3                   	ret    

c00109b7 <SysSetFatAttrib(regs*)>:
c00109b7:	57                   	push   edi
c00109b8:	56                   	push   esi
c00109b9:	53                   	push   ebx
c00109ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109be:	83 ec 0c             	sub    esp,0xc
c00109c1:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00109c4:	68 14 01 00 00       	push   0x114
c00109c9:	e8 02 df ff ff       	call   c000e8d0 <malloc>
c00109ce:	83 c4 0c             	add    esp,0xc
c00109d1:	89 c3                	mov    ebx,eax
c00109d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109db:	50                   	push   eax
c00109dc:	57                   	push   edi
c00109dd:	53                   	push   ebx
c00109de:	e8 29 77 ff ff       	call   c000810c <File::File(char const*, Process*)>
c00109e3:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00109e6:	83 c4 0c             	add    esp,0xc
c00109e9:	0f b6 d4             	movzx  edx,ah
c00109ec:	0f b6 c0             	movzx  eax,al
c00109ef:	52                   	push   edx
c00109f0:	50                   	push   eax
c00109f1:	53                   	push   ebx
c00109f2:	e8 9b 79 ff ff       	call   c0008392 <File::chfatattr(unsigned char, unsigned char)>
c00109f7:	83 c4 10             	add    esp,0x10
c00109fa:	85 db                	test   ebx,ebx
c00109fc:	89 c6                	mov    esi,eax
c00109fe:	74 0c                	je     c0010a0c <SysSetFatAttrib(regs*)+0x55>
c0010a00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a02:	83 ec 0c             	sub    esp,0xc
c0010a05:	53                   	push   ebx
c0010a06:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a09:	83 c4 10             	add    esp,0x10
c0010a0c:	5b                   	pop    ebx
c0010a0d:	31 c0                	xor    eax,eax
c0010a0f:	85 f6                	test   esi,esi
c0010a11:	0f 95 c0             	setne  al
c0010a14:	31 d2                	xor    edx,edx
c0010a16:	5e                   	pop    esi
c0010a17:	f7 d8                	neg    eax
c0010a19:	83 d2 00             	adc    edx,0x0
c0010a1c:	f7 da                	neg    edx
c0010a1e:	5f                   	pop    edi
c0010a1f:	c3                   	ret    

c0010a20 <SysShutdown(regs*)>:
c0010a20:	83 ec 1c             	sub    esp,0x1c
c0010a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a27:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0010a2a:	85 c9                	test   ecx,ecx
c0010a2c:	74 18                	je     c0010a46 <SysShutdown(regs*)+0x26>
c0010a2e:	83 f9 01             	cmp    ecx,0x1
c0010a31:	74 26                	je     c0010a59 <SysShutdown(regs*)+0x39>
c0010a33:	83 f9 02             	cmp    ecx,0x2
c0010a36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a3b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a40:	74 24                	je     c0010a66 <SysShutdown(regs*)+0x46>
c0010a42:	83 c4 1c             	add    esp,0x1c
c0010a45:	c3                   	ret    
c0010a46:	e8 49 cc ff ff       	call   c000d694 <KeShutdown()>
c0010a4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a50:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a55:	83 c4 1c             	add    esp,0x1c
c0010a58:	c3                   	ret    
c0010a59:	e8 5a cc ff ff       	call   c000d6b8 <KeSleep()>
c0010a5e:	31 c0                	xor    eax,eax
c0010a60:	31 d2                	xor    edx,edx
c0010a62:	83 c4 1c             	add    esp,0x1c
c0010a65:	c3                   	ret    
c0010a66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010a6e:	e8 51 cc ff ff       	call   c000d6c4 <KeRestart()>
c0010a73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010a7b:	eb c5                	jmp    c0010a42 <SysShutdown(regs*)+0x22>

c0010a7d <SysPipe(regs*)>:
c0010a7d:	57                   	push   edi
c0010a7e:	56                   	push   esi
c0010a7f:	53                   	push   ebx
c0010a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a84:	83 ec 0c             	sub    esp,0xc
c0010a87:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010a8a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010a8d:	6a 20                	push   0x20
c0010a8f:	e8 3c de ff ff       	call   c000e8d0 <malloc>
c0010a94:	89 c3                	mov    ebx,eax
c0010a96:	58                   	pop    eax
c0010a97:	5a                   	pop    edx
c0010a98:	68 00 50 00 00       	push   0x5000
c0010a9d:	53                   	push   ebx
c0010a9e:	e8 d1 e9 ff ff       	call   c000f474 <Pipe::Pipe(int)>
c0010aa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aa6:	e8 41 10 00 00       	call   c0011aec <UnixFile::getFileDescriptor()>
c0010aab:	89 07                	mov    DWORD PTR [edi],eax
c0010aad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ab0:	e8 37 10 00 00       	call   c0011aec <UnixFile::getFileDescriptor()>
c0010ab5:	83 c4 10             	add    esp,0x10
c0010ab8:	31 d2                	xor    edx,edx
c0010aba:	89 06                	mov    DWORD PTR [esi],eax
c0010abc:	31 c0                	xor    eax,eax
c0010abe:	5b                   	pop    ebx
c0010abf:	5e                   	pop    esi
c0010ac0:	5f                   	pop    edi
c0010ac1:	c3                   	ret    

c0010ac2 <SysGetUnixTime(regs*)>:
c0010ac2:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010ac7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010acd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ad1:	e9 be 80 ff ff       	jmp    c0008b94 <Clock::timeInSecondsLocal()>

c0010ad6 <string_ends_with(char const*, char const*)>:
c0010ad6:	57                   	push   edi
c0010ad7:	56                   	push   esi
c0010ad8:	53                   	push   ebx
c0010ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010add:	83 ec 0c             	sub    esp,0xc
c0010ae0:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0010ae4:	53                   	push   ebx
c0010ae5:	e8 96 fa fe ff       	call   c0000580 <strlen>
c0010aea:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010aed:	89 c6                	mov    esi,eax
c0010aef:	e8 8c fa fe ff       	call   c0000580 <strlen>
c0010af4:	83 c4 10             	add    esp,0x10
c0010af7:	31 d2                	xor    edx,edx
c0010af9:	39 c6                	cmp    esi,eax
c0010afb:	7d 06                	jge    c0010b03 <string_ends_with(char const*, char const*)+0x2d>
c0010afd:	5b                   	pop    ebx
c0010afe:	89 d0                	mov    eax,edx
c0010b00:	5e                   	pop    esi
c0010b01:	5f                   	pop    edi
c0010b02:	c3                   	ret    
c0010b03:	83 ec 08             	sub    esp,0x8
c0010b06:	29 c6                	sub    esi,eax
c0010b08:	57                   	push   edi
c0010b09:	01 f3                	add    ebx,esi
c0010b0b:	53                   	push   ebx
c0010b0c:	e8 6f fc fe ff       	call   c0000780 <strcmp>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	31 d2                	xor    edx,edx
c0010b16:	5b                   	pop    ebx
c0010b17:	5e                   	pop    esi
c0010b18:	85 c0                	test   eax,eax
c0010b1a:	5f                   	pop    edi
c0010b1b:	0f 94 c2             	sete   dl
c0010b1e:	89 d0                	mov    eax,edx
c0010b20:	c3                   	ret    

c0010b21 <SysOpen(regs*)>:
c0010b21:	56                   	push   esi
c0010b22:	53                   	push   ebx
c0010b23:	81 ec 04 01 00 00    	sub    esp,0x104
c0010b29:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010b30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b33:	85 c0                	test   eax,eax
c0010b35:	0f 84 c4 01 00 00    	je     c0010cff <SysOpen(regs*)+0x1de>
c0010b3b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b3e:	85 c0                	test   eax,eax
c0010b40:	0f 84 b9 01 00 00    	je     c0010cff <SysOpen(regs*)+0x1de>
c0010b46:	6a 00                	push   0x0
c0010b48:	68 00 23 02 c0       	push   0xc0022300
c0010b4d:	50                   	push   eax
c0010b4e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010b52:	56                   	push   esi
c0010b53:	e8 a8 72 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010b58:	89 34 24             	mov    DWORD PTR [esp],esi
c0010b5b:	e8 20 fa fe ff       	call   c0000580 <strlen>
c0010b60:	83 c4 10             	add    esp,0x10
c0010b63:	83 e8 01             	sub    eax,0x1
c0010b66:	74 29                	je     c0010b91 <SysOpen(regs*)+0x70>
c0010b68:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010b6c:	83 fa 2e             	cmp    edx,0x2e
c0010b6f:	74 1c                	je     c0010b8d <SysOpen(regs*)+0x6c>
c0010b71:	83 fa 3a             	cmp    edx,0x3a
c0010b74:	74 17                	je     c0010b8d <SysOpen(regs*)+0x6c>
c0010b76:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010b7a:	83 e8 01             	sub    eax,0x1
c0010b7d:	74 12                	je     c0010b91 <SysOpen(regs*)+0x70>
c0010b7f:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010b83:	83 fa 3a             	cmp    edx,0x3a
c0010b86:	74 05                	je     c0010b8d <SysOpen(regs*)+0x6c>
c0010b88:	83 fa 2e             	cmp    edx,0x2e
c0010b8b:	75 e9                	jne    c0010b76 <SysOpen(regs*)+0x55>
c0010b8d:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010b91:	83 ec 08             	sub    esp,0x8
c0010b94:	68 04 23 02 c0       	push   0xc0022304
c0010b99:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b9c:	50                   	push   eax
c0010b9d:	e8 34 ff ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010ba2:	83 c4 10             	add    esp,0x10
c0010ba5:	85 c0                	test   eax,eax
c0010ba7:	74 1d                	je     c0010bc6 <SysOpen(regs*)+0xa5>
c0010ba9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010bac:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010bb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bb9:	81 c4 04 01 00 00    	add    esp,0x104
c0010bbf:	31 c0                	xor    eax,eax
c0010bc1:	5b                   	pop    ebx
c0010bc2:	31 d2                	xor    edx,edx
c0010bc4:	5e                   	pop    esi
c0010bc5:	c3                   	ret    
c0010bc6:	83 ec 08             	sub    esp,0x8
c0010bc9:	68 09 23 02 c0       	push   0xc0022309
c0010bce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010bd1:	50                   	push   eax
c0010bd2:	e8 ff fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010bd7:	83 c4 10             	add    esp,0x10
c0010bda:	85 c0                	test   eax,eax
c0010bdc:	75 cb                	jne    c0010ba9 <SysOpen(regs*)+0x88>
c0010bde:	83 ec 08             	sub    esp,0x8
c0010be1:	68 05 23 02 c0       	push   0xc0022305
c0010be6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010be9:	50                   	push   eax
c0010bea:	e8 91 fb fe ff       	call   c0000780 <strcmp>
c0010bef:	83 c4 10             	add    esp,0x10
c0010bf2:	85 c0                	test   eax,eax
c0010bf4:	74 b3                	je     c0010ba9 <SysOpen(regs*)+0x88>
c0010bf6:	83 ec 08             	sub    esp,0x8
c0010bf9:	68 04 23 02 c0       	push   0xc0022304
c0010bfe:	56                   	push   esi
c0010bff:	e8 d2 fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010c04:	83 c4 10             	add    esp,0x10
c0010c07:	85 c0                	test   eax,eax
c0010c09:	75 9e                	jne    c0010ba9 <SysOpen(regs*)+0x88>
c0010c0b:	83 ec 08             	sub    esp,0x8
c0010c0e:	68 0e 23 02 c0       	push   0xc002230e
c0010c13:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c16:	50                   	push   eax
c0010c17:	e8 ba fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	85 c0                	test   eax,eax
c0010c21:	0f 85 eb 00 00 00    	jne    c0010d12 <SysOpen(regs*)+0x1f1>
c0010c27:	83 ec 08             	sub    esp,0x8
c0010c2a:	68 13 23 02 c0       	push   0xc0022313
c0010c2f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c32:	50                   	push   eax
c0010c33:	e8 9e fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	85 c0                	test   eax,eax
c0010c3d:	0f 85 cf 00 00 00    	jne    c0010d12 <SysOpen(regs*)+0x1f1>
c0010c43:	83 ec 08             	sub    esp,0x8
c0010c46:	68 0f 23 02 c0       	push   0xc002230f
c0010c4b:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010c4e:	51                   	push   ecx
c0010c4f:	e8 2c fb fe ff       	call   c0000780 <strcmp>
c0010c54:	83 c4 10             	add    esp,0x10
c0010c57:	85 c0                	test   eax,eax
c0010c59:	0f 84 b3 00 00 00    	je     c0010d12 <SysOpen(regs*)+0x1f1>
c0010c5f:	83 ec 08             	sub    esp,0x8
c0010c62:	68 0e 23 02 c0       	push   0xc002230e
c0010c67:	56                   	push   esi
c0010c68:	e8 69 fe ff ff       	call   c0010ad6 <string_ends_with(char const*, char const*)>
c0010c6d:	83 c4 10             	add    esp,0x10
c0010c70:	85 c0                	test   eax,eax
c0010c72:	0f 85 9a 00 00 00    	jne    c0010d12 <SysOpen(regs*)+0x1f1>
c0010c78:	83 ec 0c             	sub    esp,0xc
c0010c7b:	68 14 01 00 00       	push   0x114
c0010c80:	e8 4b dc ff ff       	call   c000e8d0 <malloc>
c0010c85:	83 c4 0c             	add    esp,0xc
c0010c88:	89 c6                	mov    esi,eax
c0010c8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c92:	50                   	push   eax
c0010c93:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010c96:	52                   	push   edx
c0010c97:	56                   	push   esi
c0010c98:	e8 6f 74 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	85 f6                	test   esi,esi
c0010ca2:	74 5b                	je     c0010cff <SysOpen(regs*)+0x1de>
c0010ca4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010ca7:	0f b6 c2             	movzx  eax,dl
c0010caa:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010cad:	89 d0                	mov    eax,edx
c0010caf:	83 e0 01             	and    eax,0x1
c0010cb2:	f6 c2 02             	test   dl,0x2
c0010cb5:	74 03                	je     c0010cba <SysOpen(regs*)+0x199>
c0010cb7:	83 c8 02             	or     eax,0x2
c0010cba:	f6 c2 04             	test   dl,0x4
c0010cbd:	74 03                	je     c0010cc2 <SysOpen(regs*)+0x1a1>
c0010cbf:	83 c8 04             	or     eax,0x4
c0010cc2:	f6 c2 08             	test   dl,0x8
c0010cc5:	74 03                	je     c0010cca <SysOpen(regs*)+0x1a9>
c0010cc7:	83 c8 0a             	or     eax,0xa
c0010cca:	80 e2 10             	and    dl,0x10
c0010ccd:	74 03                	je     c0010cd2 <SysOpen(regs*)+0x1b1>
c0010ccf:	83 c8 12             	or     eax,0x12
c0010cd2:	83 ec 08             	sub    esp,0x8
c0010cd5:	50                   	push   eax
c0010cd6:	56                   	push   esi
c0010cd7:	e8 4e 74 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0010cdc:	83 c4 10             	add    esp,0x10
c0010cdf:	85 c0                	test   eax,eax
c0010ce1:	75 1c                	jne    c0010cff <SysOpen(regs*)+0x1de>
c0010ce3:	83 ec 0c             	sub    esp,0xc
c0010ce6:	56                   	push   esi
c0010ce7:	e8 00 0e 00 00       	call   c0011aec <UnixFile::getFileDescriptor()>
c0010cec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	89 02                	mov    DWORD PTR [edx],eax
c0010cf4:	c1 f8 1f             	sar    eax,0x1f
c0010cf7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010cfa:	e9 ba fe ff ff       	jmp    c0010bb9 <SysOpen(regs*)+0x98>
c0010cff:	81 c4 04 01 00 00    	add    esp,0x104
c0010d05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d0a:	5b                   	pop    ebx
c0010d0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d10:	5e                   	pop    esi
c0010d11:	c3                   	ret    
c0010d12:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d15:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010d1b:	e9 92 fe ff ff       	jmp    c0010bb2 <SysOpen(regs*)+0x91>

c0010d20 <KeSystemCall(regs*, void*)>:
c0010d20:	56                   	push   esi
c0010d21:	53                   	push   ebx
c0010d22:	50                   	push   eax
c0010d23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d27:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010d2a:	83 fb 40             	cmp    ebx,0x40
c0010d2d:	77 25                	ja     c0010d54 <KeSystemCall(regs*, void*)+0x34>
c0010d2f:	8b 04 9d 80 40 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf80]
c0010d36:	85 c0                	test   eax,eax
c0010d38:	74 1a                	je     c0010d54 <KeSystemCall(regs*, void*)+0x34>
c0010d3a:	83 ec 0c             	sub    esp,0xc
c0010d3d:	56                   	push   esi
c0010d3e:	ff d0                	call   eax
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	83 fb 2f             	cmp    ebx,0x2f
c0010d46:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010d49:	75 19                	jne    c0010d64 <KeSystemCall(regs*, void*)+0x44>
c0010d4b:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010d52:	eb 10                	jmp    c0010d64 <KeSystemCall(regs*, void*)+0x44>
c0010d54:	56                   	push   esi
c0010d55:	56                   	push   esi
c0010d56:	53                   	push   ebx
c0010d57:	68 18 23 02 c0       	push   0xc0022318
c0010d5c:	e8 ed 61 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0010d61:	83 c4 10             	add    esp,0x10
c0010d64:	59                   	pop    ecx
c0010d65:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010d6a:	31 d2                	xor    edx,edx
c0010d6c:	5b                   	pop    ebx
c0010d6d:	5e                   	pop    esi
c0010d6e:	c3                   	ret    
c0010d6f:	90                   	nop

c0010d70 <VgaText::isAtty()>:
c0010d70:	b0 01                	mov    al,0x1
c0010d72:	c3                   	ret    
c0010d73:	90                   	nop

c0010d74 <VgaText::~VgaText()>:
c0010d74:	83 ec 0c             	sub    esp,0xc
c0010d77:	ba 60 23 02 c0       	mov    edx,0xc0022360
c0010d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d80:	89 10                	mov    DWORD PTR [eax],edx
c0010d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d86:	83 ec 0c             	sub    esp,0xc
c0010d89:	50                   	push   eax
c0010d8a:	e8 4b 0f 00 00       	call   c0011cda <UnixFile::~UnixFile()>
c0010d8f:	83 c4 10             	add    esp,0x10
c0010d92:	90                   	nop
c0010d93:	83 c4 0c             	add    esp,0xc
c0010d96:	c3                   	ret    
c0010d97:	90                   	nop

c0010d98 <VgaText::~VgaText()>:
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	83 ec 0c             	sub    esp,0xc
c0010d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010da2:	e8 cd ff ff ff       	call   c0010d74 <VgaText::~VgaText()>
c0010da7:	83 c4 10             	add    esp,0x10
c0010daa:	83 ec 08             	sub    esp,0x8
c0010dad:	68 84 01 00 00       	push   0x184
c0010db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db6:	e8 a0 b8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	83 c4 0c             	add    esp,0xc
c0010dc1:	c3                   	ret    

c0010dc2 <VgaText::read(unsigned long long, void*, int*)>:
c0010dc2:	83 ec 10             	sub    esp,0x10
c0010dc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dc9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010dcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010dd1:	e8 c3 8d ff ff       	call   c0009b99 <readKeyboard(VgaText*, char*, unsigned long)>
c0010dd6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010dda:	89 02                	mov    DWORD PTR [edx],eax
c0010ddc:	31 c0                	xor    eax,eax
c0010dde:	83 c4 1c             	add    esp,0x1c
c0010de1:	c3                   	ret    

c0010de2 <setTerminalScrollLock(bool)>:
c0010de2:	c3                   	ret    

c0010de3 <doTerminalCycle()>:
c0010de3:	c3                   	ret    

c0010de4 <addToTerminalCycle(VgaText*)>:
c0010de4:	c3                   	ret    

c0010de5 <scrollTerminalScrollLock(int)>:
c0010de5:	c3                   	ret    

c0010de6 <VgaText::updateTitle()>:
c0010de6:	c3                   	ret    
c0010de7:	90                   	nop

c0010de8 <VgaText::load()>:
c0010de8:	c3                   	ret    
c0010de9:	90                   	nop

c0010dea <VgaText::updateCursor()>:
c0010dea:	83 ec 14             	sub    esp,0x14
c0010ded:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010df1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010df4:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010df7:	e8 74 87 00 00       	call   c0019570 <HalConsoleCursorUpdate(int, int)>
c0010dfc:	83 c4 1c             	add    esp,0x1c
c0010dff:	c3                   	ret    

c0010e00 <VgaText::doANSI_SGR(int)>:
c0010e00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e08:	85 d2                	test   edx,edx
c0010e0a:	75 0b                	jne    c0010e17 <VgaText::doANSI_SGR(int)+0x17>
c0010e0c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010e0f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e12:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e15:	eb 59                	jmp    c0010e70 <VgaText::doANSI_SGR(int)+0x70>
c0010e17:	83 fa 07             	cmp    edx,0x7
c0010e1a:	75 0b                	jne    c0010e27 <VgaText::doANSI_SGR(int)+0x27>
c0010e1c:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010e1f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010e22:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010e25:	eb 49                	jmp    c0010e70 <VgaText::doANSI_SGR(int)+0x70>
c0010e27:	83 fa 1b             	cmp    edx,0x1b
c0010e2a:	74 e0                	je     c0010e0c <VgaText::doANSI_SGR(int)+0xc>
c0010e2c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010e2f:	83 f9 07             	cmp    ecx,0x7
c0010e32:	77 09                	ja     c0010e3d <VgaText::doANSI_SGR(int)+0x3d>
c0010e34:	8b 14 8d c0 41 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbe40]
c0010e3b:	eb 20                	jmp    c0010e5d <VgaText::doANSI_SGR(int)+0x5d>
c0010e3d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010e40:	83 f9 07             	cmp    ecx,0x7
c0010e43:	77 09                	ja     c0010e4e <VgaText::doANSI_SGR(int)+0x4e>
c0010e45:	8b 14 8d c0 41 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbe40]
c0010e4c:	eb 22                	jmp    c0010e70 <VgaText::doANSI_SGR(int)+0x70>
c0010e4e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010e51:	83 f9 07             	cmp    ecx,0x7
c0010e54:	77 0b                	ja     c0010e61 <VgaText::doANSI_SGR(int)+0x61>
c0010e56:	8b 14 95 78 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf88]
c0010e5d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e60:	c3                   	ret    
c0010e61:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010e64:	83 f9 07             	cmp    ecx,0x7
c0010e67:	77 0a                	ja     c0010e73 <VgaText::doANSI_SGR(int)+0x73>
c0010e69:	8b 14 95 50 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbfb0]
c0010e70:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010e73:	c3                   	ret    

c0010e74 <VgaText::setDefaultBgColour(VgaColour)>:
c0010e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e7c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010e7f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010e82:	c3                   	ret    
c0010e83:	90                   	nop

c0010e84 <VgaText::setDefaultFgColour(VgaColour)>:
c0010e84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e8c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010e8f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010e92:	c3                   	ret    
c0010e93:	90                   	nop

c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010e94:	53                   	push   ebx
c0010e95:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e99:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010e9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ea1:	51                   	push   ecx
c0010ea2:	e8 cd ff ff ff       	call   c0010e74 <VgaText::setDefaultBgColour(VgaColour)>
c0010ea7:	58                   	pop    eax
c0010ea8:	5a                   	pop    edx
c0010ea9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010ead:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010eb1:	5b                   	pop    ebx
c0010eb2:	eb d0                	jmp    c0010e84 <VgaText::setDefaultFgColour(VgaColour)>

c0010eb4 <VgaText::setTitleTextColour(VgaColour)>:
c0010eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010eb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ebc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010ebf:	c3                   	ret    

c0010ec0 <VgaText::setTitleColour(VgaColour)>:
c0010ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ec4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ec8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ecb:	c3                   	ret    

c0010ecc <VgaText::setTitle(char*)>:
c0010ecc:	c3                   	ret    
c0010ecd:	90                   	nop

c0010ece <VgaText::combineColours(unsigned char, unsigned char)>:
c0010ece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010ed7:	83 e0 0f             	and    eax,0xf
c0010eda:	c1 e2 04             	shl    edx,0x4
c0010edd:	09 d0                	or     eax,edx
c0010edf:	c3                   	ret    

c0010ee0 <VgaText::scrollScreen()>:
c0010ee0:	55                   	push   ebp
c0010ee1:	57                   	push   edi
c0010ee2:	56                   	push   esi
c0010ee3:	be 01 00 00 00       	mov    esi,0x1
c0010ee8:	53                   	push   ebx
c0010ee9:	83 ec 0c             	sub    esp,0xc
c0010eec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ef0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010ef3:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010ef9:	31 ff                	xor    edi,edi
c0010efb:	01 e9                	add    ecx,ebp
c0010efd:	8a 01                	mov    al,BYTE PTR [ecx]
c0010eff:	83 fe 18             	cmp    esi,0x18
c0010f02:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010f08:	75 20                	jne    c0010f2a <VgaText::scrollScreen()+0x4a>
c0010f0a:	f7 c7 01 00 00 00    	test   edi,0x1
c0010f10:	74 15                	je     c0010f27 <VgaText::scrollScreen()+0x47>
c0010f12:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f16:	50                   	push   eax
c0010f17:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f1b:	50                   	push   eax
c0010f1c:	e8 ad ff ff ff       	call   c0010ece <VgaText::combineColours(unsigned char, unsigned char)>
c0010f21:	5a                   	pop    edx
c0010f22:	5a                   	pop    edx
c0010f23:	88 01                	mov    BYTE PTR [ecx],al
c0010f25:	eb 03                	jmp    c0010f2a <VgaText::scrollScreen()+0x4a>
c0010f27:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0010f2a:	47                   	inc    edi
c0010f2b:	41                   	inc    ecx
c0010f2c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010f32:	75 c9                	jne    c0010efd <VgaText::scrollScreen()+0x1d>
c0010f34:	46                   	inc    esi
c0010f35:	83 fe 19             	cmp    esi,0x19
c0010f38:	75 b9                	jne    c0010ef3 <VgaText::scrollScreen()+0x13>
c0010f3a:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c0010f40:	75 1f                	jne    c0010f61 <VgaText::scrollScreen()+0x81>
c0010f42:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010f46:	74 05                	je     c0010f4d <VgaText::scrollScreen()+0x6d>
c0010f48:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010f4b:	eb 14                	jmp    c0010f61 <VgaText::scrollScreen()+0x81>
c0010f4d:	50                   	push   eax
c0010f4e:	50                   	push   eax
c0010f4f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010f53:	50                   	push   eax
c0010f54:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010f58:	50                   	push   eax
c0010f59:	e8 a6 84 00 00       	call   c0019404 <HalConsoleScroll(int, int)>
c0010f5e:	83 c4 10             	add    esp,0x10
c0010f61:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010f65:	83 c4 0c             	add    esp,0xc
c0010f68:	5b                   	pop    ebx
c0010f69:	5e                   	pop    esi
c0010f6a:	5f                   	pop    edi
c0010f6b:	5d                   	pop    ebp
c0010f6c:	e9 79 fe ff ff       	jmp    c0010dea <VgaText::updateCursor()>
c0010f71:	90                   	nop

c0010f72 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010f72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010f77:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0010f7c:	c1 e0 08             	shl    eax,0x8
c0010f7f:	09 d0                	or     eax,edx
c0010f81:	c3                   	ret    

c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010f82:	55                   	push   ebp
c0010f83:	57                   	push   edi
c0010f84:	56                   	push   esi
c0010f85:	53                   	push   ebx
c0010f86:	83 ec 1c             	sub    esp,0x1c
c0010f89:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010f8d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f91:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010f95:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010f99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f9d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010fa1:	0f b6 c3             	movzx  eax,bl
c0010fa4:	50                   	push   eax
c0010fa5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0010faa:	50                   	push   eax
c0010fab:	e8 1e ff ff ff       	call   c0010ece <VgaText::combineColours(unsigned char, unsigned char)>
c0010fb0:	5a                   	pop    edx
c0010fb1:	59                   	pop    ecx
c0010fb2:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0010fb7:	0f b6 c0             	movzx  eax,al
c0010fba:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010fbe:	50                   	push   eax
c0010fbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010fc3:	e8 aa ff ff ff       	call   c0010f72 <VgaText::combineCharAndColour(char, unsigned char)>
c0010fc8:	5a                   	pop    edx
c0010fc9:	6b d7 50             	imul   edx,edi,0x50
c0010fcc:	59                   	pop    ecx
c0010fcd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0010fd0:	01 f2                	add    edx,esi
c0010fd2:	0f b7 d2             	movzx  edx,dx
c0010fd5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0010fd9:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c0010fdf:	75 28                	jne    c0011009 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0010fe1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0010fe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fe9:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0010fed:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0010ff1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ff9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010ffd:	83 c4 1c             	add    esp,0x1c
c0011000:	5b                   	pop    ebx
c0011001:	5e                   	pop    esi
c0011002:	5f                   	pop    edi
c0011003:	5d                   	pop    ebp
c0011004:	e9 03 85 00 00       	jmp    c001950c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011009:	83 c4 1c             	add    esp,0x1c
c001100c:	5b                   	pop    ebx
c001100d:	5e                   	pop    esi
c001100e:	5f                   	pop    edi
c001100f:	5d                   	pop    ebp
c0011010:	c3                   	ret    
c0011011:	90                   	nop

c0011012 <VgaText::getCursorX()>:
c0011012:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011016:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011019:	c3                   	ret    

c001101a <VgaText::getCursorY()>:
c001101a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001101e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011021:	c3                   	ret    

c0011022 <VgaText::setCursor(int, int)>:
c0011022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001102a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001102d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011031:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011034:	e9 b1 fd ff ff       	jmp    c0010dea <VgaText::updateCursor()>

c0011039 <setActiveTerminal(VgaText*)>:
c0011039:	53                   	push   ebx
c001103a:	83 ec 08             	sub    esp,0x8
c001103d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011041:	85 db                	test   ebx,ebx
c0011043:	75 11                	jne    c0011056 <setActiveTerminal(VgaText*)+0x1d>
c0011045:	c7 44 24 10 2c 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc002232c
c001104d:	83 c4 08             	add    esp,0x8
c0011050:	5b                   	pop    ebx
c0011051:	e9 c0 db ff ff       	jmp    c000ec16 <KePanic(char const*)>
c0011056:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c001105b:	85 c0                	test   eax,eax
c001105d:	74 0c                	je     c001106b <setActiveTerminal(VgaText*)+0x32>
c001105f:	83 ec 0c             	sub    esp,0xc
c0011062:	50                   	push   eax
c0011063:	e8 82 fd ff ff       	call   c0010dea <VgaText::updateCursor()>
c0011068:	83 c4 10             	add    esp,0x10
c001106b:	50                   	push   eax
c001106c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001106f:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c0011075:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011078:	53                   	push   ebx
c0011079:	e8 a4 ff ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c001107e:	83 c4 18             	add    esp,0x18
c0011081:	5b                   	pop    ebx
c0011082:	c3                   	ret    
c0011083:	90                   	nop

c0011084 <VgaText::clearScreen()>:
c0011084:	57                   	push   edi
c0011085:	56                   	push   esi
c0011086:	31 f6                	xor    esi,esi
c0011088:	53                   	push   ebx
c0011089:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001108d:	52                   	push   edx
c001108e:	6a 00                	push   0x0
c0011090:	6a 00                	push   0x0
c0011092:	53                   	push   ebx
c0011093:	e8 8a ff ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c0011098:	83 c4 10             	add    esp,0x10
c001109b:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00110a2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00110a5:	7e 20                	jle    c00110c7 <VgaText::clearScreen()+0x43>
c00110a7:	31 ff                	xor    edi,edi
c00110a9:	50                   	push   eax
c00110aa:	50                   	push   eax
c00110ab:	56                   	push   esi
c00110ac:	57                   	push   edi
c00110ad:	47                   	inc    edi
c00110ae:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00110b1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00110b4:	6a 20                	push   0x20
c00110b6:	53                   	push   ebx
c00110b7:	e8 c6 fe ff ff       	call   c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00110bc:	83 c4 20             	add    esp,0x20
c00110bf:	83 ff 50             	cmp    edi,0x50
c00110c2:	75 e5                	jne    c00110a9 <VgaText::clearScreen()+0x25>
c00110c4:	46                   	inc    esi
c00110c5:	eb db                	jmp    c00110a2 <VgaText::clearScreen()+0x1e>
c00110c7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00110ce:	5b                   	pop    ebx
c00110cf:	5e                   	pop    esi
c00110d0:	5f                   	pop    edi
c00110d1:	c3                   	ret    

c00110d2 <VgaText::setCursorX(int)>:
c00110d2:	83 ec 10             	sub    esp,0x10
c00110d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110d9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00110dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110e0:	50                   	push   eax
c00110e1:	e8 3c ff ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c00110e6:	83 c4 1c             	add    esp,0x1c
c00110e9:	c3                   	ret    

c00110ea <VgaText::setCursorY(int)>:
c00110ea:	83 ec 10             	sub    esp,0x10
c00110ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f5:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00110f8:	50                   	push   eax
c00110f9:	e8 24 ff ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c00110fe:	83 c4 1c             	add    esp,0x1c
c0011101:	c3                   	ret    

c0011102 <VgaText::incrementCursor(bool)>:
c0011102:	56                   	push   esi
c0011103:	53                   	push   ebx
c0011104:	51                   	push   ecx
c0011105:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011109:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001110d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011110:	40                   	inc    eax
c0011111:	83 f8 50             	cmp    eax,0x50
c0011114:	74 05                	je     c001111b <VgaText::incrementCursor(bool)+0x19>
c0011116:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011119:	eb 24                	jmp    c001113f <VgaText::incrementCursor(bool)+0x3d>
c001111b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011122:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011125:	8d 50 01             	lea    edx,[eax+0x1]
c0011128:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001112b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001112e:	75 0f                	jne    c001113f <VgaText::incrementCursor(bool)+0x3d>
c0011130:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011133:	83 ec 0c             	sub    esp,0xc
c0011136:	53                   	push   ebx
c0011137:	e8 a4 fd ff ff       	call   c0010ee0 <VgaText::scrollScreen()>
c001113c:	83 c4 10             	add    esp,0x10
c001113f:	89 f0                	mov    eax,esi
c0011141:	84 c0                	test   al,al
c0011143:	74 0c                	je     c0011151 <VgaText::incrementCursor(bool)+0x4f>
c0011145:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011149:	5a                   	pop    edx
c001114a:	5b                   	pop    ebx
c001114b:	5e                   	pop    esi
c001114c:	e9 99 fc ff ff       	jmp    c0010dea <VgaText::updateCursor()>
c0011151:	58                   	pop    eax
c0011152:	5b                   	pop    ebx
c0011153:	5e                   	pop    esi
c0011154:	c3                   	ret    
c0011155:	90                   	nop

c0011156 <VgaText::decrementCursor(bool)>:
c0011156:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001115a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001115e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011161:	85 c0                	test   eax,eax
c0011163:	74 04                	je     c0011169 <VgaText::decrementCursor(bool)+0x13>
c0011165:	48                   	dec    eax
c0011166:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011169:	84 c9                	test   cl,cl
c001116b:	74 09                	je     c0011176 <VgaText::decrementCursor(bool)+0x20>
c001116d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011171:	e9 74 fc ff ff       	jmp    c0010dea <VgaText::updateCursor()>
c0011176:	c3                   	ret    
c0011177:	90                   	nop

c0011178 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011178:	53                   	push   ebx
c0011179:	83 ec 08             	sub    esp,0x8
c001117c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011181:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011185:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011189:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001118d:	83 f8 07             	cmp    eax,0x7
c0011190:	75 21                	jne    c00111b3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011192:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001119a:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00111a2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00111aa:	83 c4 08             	add    esp,0x8
c00111ad:	5b                   	pop    ebx
c00111ae:	e9 fb 77 ff ff       	jmp    c00089ae <KeBeep(int, int, bool)>
c00111b3:	83 f8 0d             	cmp    eax,0xd
c00111b6:	75 09                	jne    c00111c1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00111b8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00111bf:	eb 2d                	jmp    c00111ee <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00111c1:	83 f8 0a             	cmp    eax,0xa
c00111c4:	75 31                	jne    c00111f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00111c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00111cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00111d0:	8d 50 01             	lea    edx,[eax+0x1]
c00111d3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00111d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00111d9:	75 0f                	jne    c00111ea <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00111db:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00111de:	83 ec 0c             	sub    esp,0xc
c00111e1:	53                   	push   ebx
c00111e2:	e8 f9 fc ff ff       	call   c0010ee0 <VgaText::scrollScreen()>
c00111e7:	83 c4 10             	add    esp,0x10
c00111ea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00111ee:	83 c4 08             	add    esp,0x8
c00111f1:	5b                   	pop    ebx
c00111f2:	e9 f3 fb ff ff       	jmp    c0010dea <VgaText::updateCursor()>
c00111f7:	83 f8 08             	cmp    eax,0x8
c00111fa:	75 25                	jne    c0011221 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00111fc:	50                   	push   eax
c00111fd:	50                   	push   eax
c00111fe:	6a 01                	push   0x1
c0011200:	53                   	push   ebx
c0011201:	e8 50 ff ff ff       	call   c0011156 <VgaText::decrementCursor(bool)>
c0011206:	5a                   	pop    edx
c0011207:	59                   	pop    ecx
c0011208:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001120b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001120e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011211:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011214:	6a 20                	push   0x20
c0011216:	53                   	push   ebx
c0011217:	e8 66 fd ff ff       	call   c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001121c:	83 c4 28             	add    esp,0x28
c001121f:	5b                   	pop    ebx
c0011220:	c3                   	ret    
c0011221:	83 ec 08             	sub    esp,0x8
c0011224:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011227:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001122a:	51                   	push   ecx
c001122b:	52                   	push   edx
c001122c:	50                   	push   eax
c001122d:	53                   	push   ebx
c001122e:	e8 4f fd ff ff       	call   c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011233:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011237:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001123f:	83 c4 28             	add    esp,0x28
c0011242:	5b                   	pop    ebx
c0011243:	e9 ba fe ff ff       	jmp    c0011102 <VgaText::incrementCursor(bool)>

c0011248 <VgaText::putchar(char)>:
c0011248:	57                   	push   edi
c0011249:	56                   	push   esi
c001124a:	53                   	push   ebx
c001124b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001124f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011253:	0f be c2             	movsx  eax,dl
c0011256:	83 f8 5b             	cmp    eax,0x5b
c0011259:	75 18                	jne    c0011273 <VgaText::putchar(char)+0x2b>
c001125b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001125f:	74 20                	je     c0011281 <VgaText::putchar(char)+0x39>
c0011261:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011267:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001126e:	e9 b8 00 00 00       	jmp    c001132b <VgaText::putchar(char)+0xe3>
c0011273:	83 f8 1b             	cmp    eax,0x1b
c0011276:	75 09                	jne    c0011281 <VgaText::putchar(char)+0x39>
c0011278:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001127c:	e9 aa 00 00 00       	jmp    c001132b <VgaText::putchar(char)+0xe3>
c0011281:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0011285:	89 f9                	mov    ecx,edi
c0011287:	84 c9                	test   cl,cl
c0011289:	0f 84 8c 00 00 00    	je     c001131b <VgaText::putchar(char)+0xd3>
c001128f:	8d 4a c0             	lea    ecx,[edx-0x40]
c0011292:	80 f9 3e             	cmp    cl,0x3e
c0011295:	77 70                	ja     c0011307 <VgaText::putchar(char)+0xbf>
c0011297:	83 f8 6d             	cmp    eax,0x6d
c001129a:	75 3f                	jne    c00112db <VgaText::putchar(char)+0x93>
c001129c:	31 f6                	xor    esi,esi
c001129e:	31 d2                	xor    edx,edx
c00112a0:	31 c0                	xor    eax,eax
c00112a2:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00112a5:	7e 25                	jle    c00112cc <VgaText::putchar(char)+0x84>
c00112a7:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00112ac:	83 fa 3b             	cmp    edx,0x3b
c00112af:	75 0f                	jne    c00112c0 <VgaText::putchar(char)+0x78>
c00112b1:	50                   	push   eax
c00112b2:	53                   	push   ebx
c00112b3:	e8 48 fb ff ff       	call   c0010e00 <VgaText::doANSI_SGR(int)>
c00112b8:	31 d2                	xor    edx,edx
c00112ba:	59                   	pop    ecx
c00112bb:	58                   	pop    eax
c00112bc:	31 c0                	xor    eax,eax
c00112be:	eb 09                	jmp    c00112c9 <VgaText::putchar(char)+0x81>
c00112c0:	6b c0 0a             	imul   eax,eax,0xa
c00112c3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00112c7:	89 fa                	mov    edx,edi
c00112c9:	46                   	inc    esi
c00112ca:	eb d6                	jmp    c00112a2 <VgaText::putchar(char)+0x5a>
c00112cc:	84 d2                	test   dl,dl
c00112ce:	74 2f                	je     c00112ff <VgaText::putchar(char)+0xb7>
c00112d0:	50                   	push   eax
c00112d1:	53                   	push   ebx
c00112d2:	e8 29 fb ff ff       	call   c0010e00 <VgaText::doANSI_SGR(int)>
c00112d7:	58                   	pop    eax
c00112d8:	5a                   	pop    edx
c00112d9:	eb 24                	jmp    c00112ff <VgaText::putchar(char)+0xb7>
c00112db:	83 f8 4a             	cmp    eax,0x4a
c00112de:	75 1f                	jne    c00112ff <VgaText::putchar(char)+0xb7>
c00112e0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00112e4:	75 19                	jne    c00112ff <VgaText::putchar(char)+0xb7>
c00112e6:	83 ec 0c             	sub    esp,0xc
c00112e9:	53                   	push   ebx
c00112ea:	e8 95 fd ff ff       	call   c0011084 <VgaText::clearScreen()>
c00112ef:	83 c4 0c             	add    esp,0xc
c00112f2:	6a 00                	push   0x0
c00112f4:	6a 00                	push   0x0
c00112f6:	53                   	push   ebx
c00112f7:	e8 26 fd ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c00112fc:	83 c4 10             	add    esp,0x10
c00112ff:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011305:	eb 24                	jmp    c001132b <VgaText::putchar(char)+0xe3>
c0011307:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001130a:	83 f8 0e             	cmp    eax,0xe
c001130d:	7f 1c                	jg     c001132b <VgaText::putchar(char)+0xe3>
c001130f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011312:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011315:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0011319:	eb 10                	jmp    c001132b <VgaText::putchar(char)+0xe3>
c001131b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001131e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011321:	50                   	push   eax
c0011322:	53                   	push   ebx
c0011323:	e8 50 fe ff ff       	call   c0011178 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011328:	83 c4 10             	add    esp,0x10
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	c3                   	ret    
c001132f:	90                   	nop

c0011330 <VgaText::putx(unsigned int)>:
c0011330:	57                   	push   edi
c0011331:	b9 11 00 00 00       	mov    ecx,0x11
c0011336:	56                   	push   esi
c0011337:	be 3a 23 02 c0       	mov    esi,0xc002233a
c001133c:	53                   	push   ebx
c001133d:	83 ec 20             	sub    esp,0x20
c0011340:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011344:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011348:	fc                   	cld    
c0011349:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001134b:	be 08 00 00 00       	mov    esi,0x8
c0011350:	50                   	push   eax
c0011351:	50                   	push   eax
c0011352:	89 d8                	mov    eax,ebx
c0011354:	c1 e8 1c             	shr    eax,0x1c
c0011357:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001135c:	c1 e3 04             	shl    ebx,0x4
c001135f:	50                   	push   eax
c0011360:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011364:	e8 df fe ff ff       	call   c0011248 <VgaText::putchar(char)>
c0011369:	83 c4 10             	add    esp,0x10
c001136c:	4e                   	dec    esi
c001136d:	75 e1                	jne    c0011350 <VgaText::putx(unsigned int)+0x20>
c001136f:	83 c4 20             	add    esp,0x20
c0011372:	5b                   	pop    ebx
c0011373:	5e                   	pop    esi
c0011374:	5f                   	pop    edi
c0011375:	c3                   	ret    

c0011376 <VgaText::puts(char const*)>:
c0011376:	53                   	push   ebx
c0011377:	83 ec 08             	sub    esp,0x8
c001137a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001137e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011381:	85 c0                	test   eax,eax
c0011383:	74 12                	je     c0011397 <VgaText::puts(char const*)+0x21>
c0011385:	51                   	push   ecx
c0011386:	43                   	inc    ebx
c0011387:	51                   	push   ecx
c0011388:	50                   	push   eax
c0011389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001138d:	e8 b6 fe ff ff       	call   c0011248 <VgaText::putchar(char)>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	eb e7                	jmp    c001137e <VgaText::puts(char const*)+0x8>
c0011397:	83 c4 08             	add    esp,0x8
c001139a:	5b                   	pop    ebx
c001139b:	c3                   	ret    

c001139c <VgaText::write(unsigned long long, void*, int*)>:
c001139c:	55                   	push   ebp
c001139d:	57                   	push   edi
c001139e:	56                   	push   esi
c001139f:	53                   	push   ebx
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113af:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00113b6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113b9:	39 eb                	cmp    ebx,ebp
c00113bb:	74 13                	je     c00113d0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113bd:	50                   	push   eax
c00113be:	43                   	inc    ebx
c00113bf:	50                   	push   eax
c00113c0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113c4:	50                   	push   eax
c00113c5:	56                   	push   esi
c00113c6:	e8 7d fe ff ff       	call   c0011248 <VgaText::putchar(char)>
c00113cb:	83 c4 10             	add    esp,0x10
c00113ce:	eb e9                	jmp    c00113b9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00113d0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00113d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113db:	89 38                	mov    DWORD PTR [eax],edi
c00113dd:	83 c4 0c             	add    esp,0xc
c00113e0:	31 c0                	xor    eax,eax
c00113e2:	5b                   	pop    ebx
c00113e3:	5e                   	pop    esi
c00113e4:	5f                   	pop    edi
c00113e5:	5d                   	pop    ebp
c00113e6:	c3                   	ret    
c00113e7:	90                   	nop

c00113e8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00113e8:	55                   	push   ebp
c00113e9:	57                   	push   edi
c00113ea:	56                   	push   esi
c00113eb:	53                   	push   ebx
c00113ec:	83 ec 0c             	sub    esp,0xc
c00113ef:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00113f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00113f8:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c00113ff:	50                   	push   eax
c0011400:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0011405:	50                   	push   eax
c0011406:	e8 c3 fa ff ff       	call   c0010ece <VgaText::combineColours(unsigned char, unsigned char)>
c001140b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001140f:	5a                   	pop    edx
c0011410:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0011413:	59                   	pop    ecx
c0011414:	0f b6 f8             	movzx  edi,al
c0011417:	0f b7 db             	movzx  ebx,bx
c001141a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001141e:	01 db                	add    ebx,ebx
c0011420:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011423:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011426:	85 c0                	test   eax,eax
c0011428:	0f 84 ef 00 00 00    	je     c001151d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001142e:	83 f8 0d             	cmp    eax,0xd
c0011431:	75 0c                	jne    c001143f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0011433:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c001143a:	e9 d8 00 00 00       	jmp    c0011517 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001143f:	83 f8 0a             	cmp    eax,0xa
c0011442:	75 44                	jne    c0011488 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0011444:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c001144b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001144e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011451:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0011454:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0011457:	75 0f                	jne    c0011468 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011459:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	55                   	push   ebp
c0011460:	e8 7b fa ff ff       	call   c0010ee0 <VgaText::scrollScreen()>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	83 ec 0c             	sub    esp,0xc
c001146b:	55                   	push   ebp
c001146c:	e8 79 f9 ff ff       	call   c0010dea <VgaText::updateCursor()>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0011478:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c001147b:	0f b7 db             	movzx  ebx,bx
c001147e:	01 db                	add    ebx,ebx
c0011480:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011483:	e9 8f 00 00 00       	jmp    c0011517 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011488:	83 f8 08             	cmp    eax,0x8
c001148b:	75 34                	jne    c00114c1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001148d:	51                   	push   ecx
c001148e:	51                   	push   ecx
c001148f:	6a 01                	push   0x1
c0011491:	55                   	push   ebp
c0011492:	e8 bf fc ff ff       	call   c0011156 <VgaText::decrementCursor(bool)>
c0011497:	5b                   	pop    ebx
c0011498:	58                   	pop    eax
c0011499:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c001149c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c001149f:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00114a2:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00114a5:	6a 20                	push   0x20
c00114a7:	55                   	push   ebp
c00114a8:	e8 d5 fa ff ff       	call   c0010f82 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00114ad:	83 c4 20             	add    esp,0x20
c00114b0:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00114b4:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00114b7:	0f b7 db             	movzx  ebx,bx
c00114ba:	01 db                	add    ebx,ebx
c00114bc:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00114bf:	eb 56                	jmp    c0011517 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00114c1:	52                   	push   edx
c00114c2:	52                   	push   edx
c00114c3:	57                   	push   edi
c00114c4:	50                   	push   eax
c00114c5:	e8 a8 fa ff ff       	call   c0010f72 <VgaText::combineCharAndColour(char, unsigned char)>
c00114ca:	83 c4 10             	add    esp,0x10
c00114cd:	66 89 03             	mov    WORD PTR [ebx],ax
c00114d0:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c00114d6:	75 1d                	jne    c00114f5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00114de:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00114e1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00114e5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00114e9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00114ec:	50                   	push   eax
c00114ed:	e8 1a 80 00 00       	call   c001950c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00114f2:	83 c4 20             	add    esp,0x20
c00114f5:	50                   	push   eax
c00114f6:	83 c3 02             	add    ebx,0x2
c00114f9:	50                   	push   eax
c00114fa:	6a 00                	push   0x0
c00114fc:	55                   	push   ebp
c00114fd:	e8 00 fc ff ff       	call   c0011102 <VgaText::incrementCursor(bool)>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0011509:	75 0c                	jne    c0011517 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001150b:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001150f:	0f b7 db             	movzx  ebx,bx
c0011512:	01 db                	add    ebx,ebx
c0011514:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0011517:	46                   	inc    esi
c0011518:	e9 06 ff ff ff       	jmp    c0011423 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001151d:	83 ec 0c             	sub    esp,0xc
c0011520:	55                   	push   ebp
c0011521:	e8 c4 f8 ff ff       	call   c0010dea <VgaText::updateCursor()>
c0011526:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c001152d:	83 c4 1c             	add    esp,0x1c
c0011530:	5b                   	pop    ebx
c0011531:	5e                   	pop    esi
c0011532:	5f                   	pop    edi
c0011533:	5d                   	pop    ebp
c0011534:	c3                   	ret    
c0011535:	90                   	nop

c0011536 <VgaText::VgaText(char const*)>:
c0011536:	56                   	push   esi
c0011537:	53                   	push   ebx
c0011538:	83 ec 04             	sub    esp,0x4
c001153b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001153f:	83 ec 08             	sub    esp,0x8
c0011542:	6a 00                	push   0x0
c0011544:	50                   	push   eax
c0011545:	e8 aa 05 00 00       	call   c0011af4 <UnixFile::UnixFile(int)>
c001154a:	83 c4 10             	add    esp,0x10
c001154d:	ba 60 23 02 c0       	mov    edx,0xc0022360
c0011552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011556:	89 10                	mov    DWORD PTR [eax],edx
c0011558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001155c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011567:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001156e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011572:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001157a:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001157e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011582:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001158d:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011598:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001159f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00115aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ae:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00115b5:	83 ec 0c             	sub    esp,0xc
c00115b8:	6a 01                	push   0x1
c00115ba:	e8 84 09 00 00       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00115bf:	83 c4 10             	add    esp,0x10
c00115c2:	89 c2                	mov    edx,eax
c00115c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115c8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00115cb:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00115d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115d8:	89 c6                	mov    esi,eax
c00115da:	e8 31 d8 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00115df:	68 05 0c 00 00       	push   0xc05
c00115e4:	56                   	push   esi
c00115e5:	50                   	push   eax
c00115e6:	53                   	push   ebx
c00115e7:	e8 30 10 00 00       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00115f6:	83 ec 04             	sub    esp,0x4
c00115f9:	68 a0 0f 00 00       	push   0xfa0
c00115fe:	6a 00                	push   0x0
c0011600:	50                   	push   eax
c0011601:	e8 ea ee fe ff       	call   c00004f0 <memset>
c0011606:	83 c4 10             	add    esp,0x10
c0011609:	83 ec 04             	sub    esp,0x4
c001160c:	6a 00                	push   0x0
c001160e:	6a 07                	push   0x7
c0011610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011614:	e8 7b f8 ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011619:	83 c4 10             	add    esp,0x10
c001161c:	83 ec 04             	sub    esp,0x4
c001161f:	6a 00                	push   0x0
c0011621:	6a 00                	push   0x0
c0011623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011627:	e8 f6 f9 ff ff       	call   c0011022 <VgaText::setCursor(int, int)>
c001162c:	83 c4 10             	add    esp,0x10
c001162f:	83 ec 0c             	sub    esp,0xc
c0011632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011636:	e8 49 fa ff ff       	call   c0011084 <VgaText::clearScreen()>
c001163b:	83 c4 10             	add    esp,0x10
c001163e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011642:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001164a:	05 82 00 00 00       	add    eax,0x82
c001164f:	83 ec 04             	sub    esp,0x4
c0011652:	68 80 00 00 00       	push   0x80
c0011657:	6a 00                	push   0x0
c0011659:	50                   	push   eax
c001165a:	e8 91 ee fe ff       	call   c00004f0 <memset>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011666:	05 02 01 00 00       	add    eax,0x102
c001166b:	83 ec 04             	sub    esp,0x4
c001166e:	68 80 00 00 00       	push   0x80
c0011673:	6a 00                	push   0x0
c0011675:	50                   	push   eax
c0011676:	e8 75 ee fe ff       	call   c00004f0 <memset>
c001167b:	83 c4 10             	add    esp,0x10
c001167e:	90                   	nop
c001167f:	83 c4 04             	add    esp,0x4
c0011682:	5b                   	pop    ebx
c0011683:	5e                   	pop    esi
c0011684:	c3                   	ret    
c0011685:	90                   	nop

c0011686 <VgaText::receiveKey(unsigned char)>:
c0011686:	55                   	push   ebp
c0011687:	57                   	push   edi
c0011688:	56                   	push   esi
c0011689:	53                   	push   ebx
c001168a:	83 ec 2c             	sub    esp,0x2c
c001168d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011691:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011695:	89 fd                	mov    ebp,edi
c0011697:	81 e5 ff 00 00 00    	and    ebp,0xff
c001169d:	0f 84 48 01 00 00    	je     c00117eb <VgaText::receiveKey(unsigned char)+0x165>
c00116a3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00116a9:	83 fd 08             	cmp    ebp,0x8
c00116ac:	75 6a                	jne    c0011718 <VgaText::receiveKey(unsigned char)+0x92>
c00116ae:	83 ec 0c             	sub    esp,0xc
c00116b1:	56                   	push   esi
c00116b2:	e8 c9 ee fe ff       	call   c0000580 <strlen>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	85 c0                	test   eax,eax
c00116bc:	0f 84 ef 00 00 00    	je     c00117b1 <VgaText::receiveKey(unsigned char)+0x12b>
c00116c2:	50                   	push   eax
c00116c3:	50                   	push   eax
c00116c4:	6a 08                	push   0x8
c00116c6:	53                   	push   ebx
c00116c7:	e8 7c fb ff ff       	call   c0011248 <VgaText::putchar(char)>
c00116cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00116cf:	e8 ac ee fe ff       	call   c0000580 <strlen>
c00116d4:	83 c4 10             	add    esp,0x10
c00116d7:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00116df:	83 fa 1f             	cmp    edx,0x1f
c00116e2:	89 d0                	mov    eax,edx
c00116e4:	7f 1c                	jg     c0011702 <VgaText::receiveKey(unsigned char)+0x7c>
c00116e6:	83 e8 08             	sub    eax,0x8
c00116e9:	3c 02                	cmp    al,0x2
c00116eb:	76 15                	jbe    c0011702 <VgaText::receiveKey(unsigned char)+0x7c>
c00116ed:	83 fa 0d             	cmp    edx,0xd
c00116f0:	74 10                	je     c0011702 <VgaText::receiveKey(unsigned char)+0x7c>
c00116f2:	57                   	push   edi
c00116f3:	57                   	push   edi
c00116f4:	68 4b 23 02 c0       	push   0xc002234b
c00116f9:	53                   	push   ebx
c00116fa:	e8 77 fc ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	83 ec 0c             	sub    esp,0xc
c0011705:	56                   	push   esi
c0011706:	e8 75 ee fe ff       	call   c0000580 <strlen>
c001170b:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0011713:	e9 96 00 00 00       	jmp    c00117ae <VgaText::receiveKey(unsigned char)+0x128>
c0011718:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001171e:	83 ec 0c             	sub    esp,0xc
c0011721:	50                   	push   eax
c0011722:	e8 59 ee fe ff       	call   c0000580 <strlen>
c0011727:	89 34 24             	mov    DWORD PTR [esp],esi
c001172a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001172e:	e8 4d ee fe ff       	call   c0000580 <strlen>
c0011733:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011737:	83 c4 10             	add    esp,0x10
c001173a:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001173e:	3d 80 00 00 00       	cmp    eax,0x80
c0011743:	0f 87 a2 00 00 00    	ja     c00117eb <VgaText::receiveKey(unsigned char)+0x165>
c0011749:	8d 47 ff             	lea    eax,[edi-0x1]
c001174c:	3c 1e                	cmp    al,0x1e
c001174e:	77 35                	ja     c0011785 <VgaText::receiveKey(unsigned char)+0xff>
c0011750:	8d 47 f7             	lea    eax,[edi-0x9]
c0011753:	3c 01                	cmp    al,0x1
c0011755:	76 2e                	jbe    c0011785 <VgaText::receiveKey(unsigned char)+0xff>
c0011757:	83 fd 0d             	cmp    ebp,0xd
c001175a:	74 29                	je     c0011785 <VgaText::receiveKey(unsigned char)+0xff>
c001175c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001175f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011762:	68 51 23 02 c0       	push   0xc0022351
c0011767:	53                   	push   ebx
c0011768:	e8 7b fc ff ff       	call   c00113e8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001176d:	8d 47 40             	lea    eax,[edi+0x40]
c0011770:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011773:	0f b6 c0             	movzx  eax,al
c0011776:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011779:	50                   	push   eax
c001177a:	53                   	push   ebx
c001177b:	e8 f8 f9 ff ff       	call   c0011178 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011780:	83 c4 20             	add    esp,0x20
c0011783:	eb 11                	jmp    c0011796 <VgaText::receiveKey(unsigned char)+0x110>
c0011785:	51                   	push   ecx
c0011786:	89 f8                	mov    eax,edi
c0011788:	51                   	push   ecx
c0011789:	0f be c0             	movsx  eax,al
c001178c:	50                   	push   eax
c001178d:	53                   	push   ebx
c001178e:	e8 b5 fa ff ff       	call   c0011248 <VgaText::putchar(char)>
c0011793:	83 c4 10             	add    esp,0x10
c0011796:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001179b:	89 f8                	mov    eax,edi
c001179d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00117a1:	52                   	push   edx
c00117a2:	52                   	push   edx
c00117a3:	8d 44 24 26          	lea    eax,[esp+0x26]
c00117a7:	50                   	push   eax
c00117a8:	56                   	push   esi
c00117a9:	e8 c2 f0 fe ff       	call   c0000870 <strcat>
c00117ae:	83 c4 10             	add    esp,0x10
c00117b1:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00117b8:	75 0f                	jne    c00117c9 <VgaText::receiveKey(unsigned char)+0x143>
c00117ba:	83 fd 1c             	cmp    ebp,0x1c
c00117bd:	77 2c                	ja     c00117eb <VgaText::receiveKey(unsigned char)+0x165>
c00117bf:	b8 08 04 00 10       	mov    eax,0x10000408
c00117c4:	0f a3 e8             	bt     eax,ebp
c00117c7:	73 22                	jae    c00117eb <VgaText::receiveKey(unsigned char)+0x165>
c00117c9:	50                   	push   eax
c00117ca:	81 c3 02 01 00 00    	add    ebx,0x102
c00117d0:	50                   	push   eax
c00117d1:	56                   	push   esi
c00117d2:	53                   	push   ebx
c00117d3:	e8 98 f0 fe ff       	call   c0000870 <strcat>
c00117d8:	83 c4 0c             	add    esp,0xc
c00117db:	68 80 00 00 00       	push   0x80
c00117e0:	6a 00                	push   0x0
c00117e2:	56                   	push   esi
c00117e3:	e8 08 ed fe ff       	call   c00004f0 <memset>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	83 c4 2c             	add    esp,0x2c
c00117ee:	5b                   	pop    ebx
c00117ef:	5e                   	pop    esi
c00117f0:	5f                   	pop    edi
c00117f1:	5d                   	pop    ebp
c00117f2:	c3                   	ret    
c00117f3:	90                   	nop

c00117f4 <VgaText::doUpdate()>:
c00117f4:	c3                   	ret    
c00117f5:	66 90                	xchg   ax,ax
c00117f7:	90                   	nop

c00117f8 <TSS::TSS()>:
c00117f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011803:	90                   	nop
c0011804:	c3                   	ret    
c0011805:	90                   	nop
c0011806:	66 90                	xchg   ax,ax

c0011808 <TSS::setESP(unsigned long)>:
c0011808:	55                   	push   ebp
c0011809:	89 e5                	mov    ebp,esp
c001180b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001180e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011811:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011814:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011817:	90                   	nop
c0011818:	5d                   	pop    ebp
c0011819:	c3                   	ret    
c001181a:	66 90                	xchg   ax,ax

c001181c <TSS::flush()>:
c001181c:	55                   	push   ebp
c001181d:	89 e5                	mov    ebp,esp
c001181f:	83 ec 10             	sub    esp,0x10
c0011822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011825:	8b 00                	mov    eax,DWORD PTR [eax]
c0011827:	83 c8 03             	or     eax,0x3
c001182a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001182e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011832:	66 89 d0             	mov    ax,dx
c0011835:	0f 00 d8             	ltr    ax
c0011838:	90                   	nop
c0011839:	c9                   	leave  
c001183a:	c3                   	ret    
c001183b:	90                   	nop

c001183c <TSS::setup(unsigned long, unsigned long)>:
c001183c:	55                   	push   ebp
c001183d:	89 e5                	mov    ebp,esp
c001183f:	83 ec 18             	sub    esp,0x18
c0011842:	83 ec 0c             	sub    esp,0xc
c0011845:	6a 68                	push   0x68
c0011847:	e8 84 d0 ff ff       	call   c000e8d0 <malloc>
c001184c:	83 c4 10             	add    esp,0x10
c001184f:	89 c2                	mov    edx,eax
c0011851:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011854:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001185a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001185d:	83 ec 08             	sub    esp,0x8
c0011860:	50                   	push   eax
c0011861:	68 74 23 02 c0       	push   0xc0022374
c0011866:	e8 e3 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011871:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011874:	83 ec 04             	sub    esp,0x4
c0011877:	6a 68                	push   0x68
c0011879:	6a 00                	push   0x0
c001187b:	50                   	push   eax
c001187c:	e8 6f ec fe ff       	call   c00004f0 <memset>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011887:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001188a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011893:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011896:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001189c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001189f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118a2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00118a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ae:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00118b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ba:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00118c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118c6:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00118cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d2:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00118d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118de:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00118e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118ea:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00118f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00118f9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00118fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011902:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011905:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001190e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011915:	83 ec 0c             	sub    esp,0xc
c0011918:	68 8b 23 02 c0       	push   0xc002238b
c001191d:	e8 2c 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011922:	83 c4 10             	add    esp,0x10
c0011925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192b:	0f 20 da             	mov    edx,cr3
c001192e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011931:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011934:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011937:	83 ec 0c             	sub    esp,0xc
c001193a:	68 8e 23 02 c0       	push   0xc002238e
c001193f:	e8 0a 56 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001194d:	83 ec 08             	sub    esp,0x8
c0011950:	50                   	push   eax
c0011951:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011954:	50                   	push   eax
c0011955:	e8 c8 c6 ff ff       	call   c000e022 <GDTEntry::setBase(unsigned int)>
c001195a:	83 c4 10             	add    esp,0x10
c001195d:	83 ec 08             	sub    esp,0x8
c0011960:	6a 68                	push   0x68
c0011962:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011965:	50                   	push   eax
c0011966:	e8 d3 c6 ff ff       	call   c000e03e <GDTEntry::setLimit(unsigned int)>
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011972:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011975:	83 e0 0f             	and    eax,0xf
c0011978:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001197b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001197e:	83 c8 40             	or     eax,0x40
c0011981:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011984:	83 ec 0c             	sub    esp,0xc
c0011987:	68 91 23 02 c0       	push   0xc0022391
c001198c:	e8 bd 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011991:	83 c4 10             	add    esp,0x10
c0011994:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011999:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001199f:	83 ec 08             	sub    esp,0x8
c00119a2:	50                   	push   eax
c00119a3:	68 94 23 02 c0       	push   0xc0022394
c00119a8:	e8 a1 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119ad:	83 c4 10             	add    esp,0x10
c00119b0:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119b5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00119bb:	05 64 01 00 00       	add    eax,0x164
c00119c0:	83 ec 04             	sub    esp,0x4
c00119c3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00119c6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00119c9:	50                   	push   eax
c00119ca:	e8 a3 c6 ff ff       	call   c000e072 <GDT::addEntry(GDTEntry)>
c00119cf:	83 c4 10             	add    esp,0x10
c00119d2:	89 c2                	mov    edx,eax
c00119d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d7:	89 10                	mov    DWORD PTR [eax],edx
c00119d9:	83 ec 0c             	sub    esp,0xc
c00119dc:	68 a9 23 02 c0       	push   0xc00223a9
c00119e1:	e8 68 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00119e6:	83 c4 10             	add    esp,0x10
c00119e9:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00119ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00119f4:	05 64 01 00 00       	add    eax,0x164
c00119f9:	83 ec 0c             	sub    esp,0xc
c00119fc:	50                   	push   eax
c00119fd:	e8 9a c6 ff ff       	call   c000e09c <GDT::flush()>
c0011a02:	83 c4 10             	add    esp,0x10
c0011a05:	83 ec 0c             	sub    esp,0xc
c0011a08:	68 ac 23 02 c0       	push   0xc00223ac
c0011a0d:	e8 3c 55 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a18:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a1a:	c9                   	leave  
c0011a1b:	c3                   	ret    

c0011a1c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011a24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a27:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011a2c:	75 08                	jne    c0011a36 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011a2e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011a34:	eb 38                	jmp    c0011a6e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011a36:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011a3b:	75 17                	jne    c0011a54 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011a3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011a4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011a51:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011a54:	89 c1                	mov    ecx,eax
c0011a56:	83 e1 fd             	and    ecx,0xfffffffd
c0011a59:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011a5f:	74 cd                	je     c0011a2e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011a61:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011a66:	83 e0 ef             	and    eax,0xffffffef
c0011a69:	83 f8 08             	cmp    eax,0x8
c0011a6c:	76 c0                	jbe    c0011a2e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011a6e:	31 c0                	xor    eax,eax
c0011a70:	c3                   	ret    
c0011a71:	90                   	nop

c0011a72 <ReservedFilename::isAtty()>:
c0011a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a76:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a79:	31 c0                	xor    eax,eax
c0011a7b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011a81:	74 09                	je     c0011a8c <ReservedFilename::isAtty()+0x1a>
c0011a83:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011a89:	0f 94 c0             	sete   al
c0011a8c:	c3                   	ret    
c0011a8d:	90                   	nop

c0011a8e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011a8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011a96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011a9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a9d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011aa2:	75 08                	jne    c0011aac <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011aa4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011aaa:	eb 3d                	jmp    c0011ae9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011aac:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011ab1:	75 17                	jne    c0011aca <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011ab3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ab8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011abb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011ac1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ac3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ac7:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011aca:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011acf:	75 04                	jne    c0011ad5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011ad1:	89 0a                	mov    DWORD PTR [edx],ecx
c0011ad3:	eb 14                	jmp    c0011ae9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011ad5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011ada:	74 c8                	je     c0011aa4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011adc:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011ae1:	83 e0 ef             	and    eax,0xffffffef
c0011ae4:	83 f8 08             	cmp    eax,0x8
c0011ae7:	76 bb                	jbe    c0011aa4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011ae9:	31 c0                	xor    eax,eax
c0011aeb:	c3                   	ret    

c0011aec <UnixFile::getFileDescriptor()>:
c0011aec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011af0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011af3:	c3                   	ret    

c0011af4 <UnixFile::UnixFile(int)>:
c0011af4:	53                   	push   ebx
c0011af5:	83 ec 28             	sub    esp,0x28
c0011af8:	ba d8 23 02 c0       	mov    edx,0xc00223d8
c0011afd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b01:	89 10                	mov    DWORD PTR [eax],edx
c0011b03:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011b0b:	0f 8f 90 01 00 00    	jg     c0011ca1 <UnixFile::UnixFile(int)+0x1ad>
c0011b11:	a1 00 42 02 c0       	mov    eax,ds:0xc0024200
c0011b16:	8d 50 01             	lea    edx,[eax+0x1]
c0011b19:	89 15 00 42 02 c0    	mov    DWORD PTR ds:0xc0024200,edx
c0011b1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011b23:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b26:	83 ec 08             	sub    esp,0x8
c0011b29:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011b2d:	68 b8 be 02 c0       	push   0xc002beb8
c0011b32:	e8 77 e6 00 00       	call   c00201ae <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011b37:	83 c4 10             	add    esp,0x10
c0011b3a:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011b3f:	83 f0 01             	xor    eax,0x1
c0011b42:	0f b6 c0             	movzx  eax,al
c0011b45:	85 c0                	test   eax,eax
c0011b47:	0f 84 55 01 00 00    	je     c0011ca2 <UnixFile::UnixFile(int)+0x1ae>
c0011b4d:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011b54:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011b5c:	83 ec 0c             	sub    esp,0xc
c0011b5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b63:	e8 68 cd ff ff       	call   c000e8d0 <malloc>
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	89 c3                	mov    ebx,eax
c0011b6d:	83 ec 08             	sub    esp,0x8
c0011b70:	68 03 ff ff 0f       	push   0xfffff03
c0011b75:	53                   	push   ebx
c0011b76:	e8 2d 01 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011b7b:	83 c4 10             	add    esp,0x10
c0011b7e:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011b84:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011b8c:	83 ec 0c             	sub    esp,0xc
c0011b8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b93:	e8 38 cd ff ff       	call   c000e8d0 <malloc>
c0011b98:	83 c4 10             	add    esp,0x10
c0011b9b:	89 c3                	mov    ebx,eax
c0011b9d:	83 ec 08             	sub    esp,0x8
c0011ba0:	68 01 ff ff 0f       	push   0xfffff01
c0011ba5:	53                   	push   ebx
c0011ba6:	e8 fd 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011bab:	83 c4 10             	add    esp,0x10
c0011bae:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011bb4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011bbc:	83 ec 0c             	sub    esp,0xc
c0011bbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011bc3:	e8 08 cd ff ff       	call   c000e8d0 <malloc>
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	89 c3                	mov    ebx,eax
c0011bcd:	83 ec 08             	sub    esp,0x8
c0011bd0:	68 00 ff ff 0f       	push   0xfffff00
c0011bd5:	53                   	push   ebx
c0011bd6:	e8 cd 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011bdb:	83 c4 10             	add    esp,0x10
c0011bde:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011be4:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011bec:	83 ec 0c             	sub    esp,0xc
c0011bef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011bf3:	e8 d8 cc ff ff       	call   c000e8d0 <malloc>
c0011bf8:	83 c4 10             	add    esp,0x10
c0011bfb:	89 c3                	mov    ebx,eax
c0011bfd:	83 ec 08             	sub    esp,0x8
c0011c00:	68 02 ff ff 0f       	push   0xfffff02
c0011c05:	53                   	push   ebx
c0011c06:	e8 9d 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011c0b:	83 c4 10             	add    esp,0x10
c0011c0e:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011c14:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011c1c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011c21:	7f 7f                	jg     c0011ca2 <UnixFile::UnixFile(int)+0x1ae>
c0011c23:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011c2b:	83 ec 0c             	sub    esp,0xc
c0011c2e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011c32:	e8 99 cc ff ff       	call   c000e8d0 <malloc>
c0011c37:	83 c4 10             	add    esp,0x10
c0011c3a:	89 c3                	mov    ebx,eax
c0011c3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c40:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011c45:	83 ec 08             	sub    esp,0x8
c0011c48:	50                   	push   eax
c0011c49:	53                   	push   ebx
c0011c4a:	e8 59 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011c4f:	83 c4 10             	add    esp,0x10
c0011c52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c56:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011c5d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011c65:	83 ec 0c             	sub    esp,0xc
c0011c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c6c:	e8 5f cc ff ff       	call   c000e8d0 <malloc>
c0011c71:	83 c4 10             	add    esp,0x10
c0011c74:	89 c3                	mov    ebx,eax
c0011c76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c7a:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011c7f:	83 ec 08             	sub    esp,0x8
c0011c82:	50                   	push   eax
c0011c83:	53                   	push   ebx
c0011c84:	e8 1f 00 00 00       	call   c0011ca8 <ReservedFilename::ReservedFilename(int)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c90:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011c97:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011c9c:	e9 7b ff ff ff       	jmp    c0011c1c <UnixFile::UnixFile(int)+0x128>
c0011ca1:	90                   	nop
c0011ca2:	83 c4 28             	add    esp,0x28
c0011ca5:	5b                   	pop    ebx
c0011ca6:	c3                   	ret    
c0011ca7:	90                   	nop

c0011ca8 <ReservedFilename::ReservedFilename(int)>:
c0011ca8:	83 ec 0c             	sub    esp,0xc
c0011cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011caf:	83 ec 08             	sub    esp,0x8
c0011cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cb6:	50                   	push   eax
c0011cb7:	e8 38 fe ff ff       	call   c0011af4 <UnixFile::UnixFile(int)>
c0011cbc:	83 c4 10             	add    esp,0x10
c0011cbf:	ba f4 23 02 c0       	mov    edx,0xc00223f4
c0011cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cc8:	89 10                	mov    DWORD PTR [eax],edx
c0011cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011cd2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011cd5:	90                   	nop
c0011cd6:	83 c4 0c             	add    esp,0xc
c0011cd9:	c3                   	ret    

c0011cda <UnixFile::~UnixFile()>:
c0011cda:	83 ec 1c             	sub    esp,0x1c
c0011cdd:	ba d8 23 02 c0       	mov    edx,0xc00223d8
c0011ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ce6:	89 10                	mov    DWORD PTR [eax],edx
c0011ce8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cef:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011cf4:	7f 76                	jg     c0011d6c <UnixFile::~UnixFile()+0x92>
c0011cf6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cfe:	83 ec 0c             	sub    esp,0xc
c0011d01:	68 b8 be 02 c0       	push   0xc002beb8
c0011d06:	e8 77 e5 00 00       	call   c0020282 <LinkedList<UnixFile>::getFirstElement()>
c0011d0b:	83 c4 10             	add    esp,0x10
c0011d0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d12:	83 ec 0c             	sub    esp,0xc
c0011d15:	68 b8 be 02 c0       	push   0xc002beb8
c0011d1a:	e8 6b e5 00 00       	call   c002028a <LinkedList<UnixFile>::removeFirst()>
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d26:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011d2a:	74 43                	je     c0011d6f <UnixFile::~UnixFile()+0x95>
c0011d2c:	83 ec 08             	sub    esp,0x8
c0011d2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d33:	68 b8 be 02 c0       	push   0xc002beb8
c0011d38:	e8 71 e4 00 00       	call   c00201ae <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011d3d:	83 c4 10             	add    esp,0x10
c0011d40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d44:	8d 50 01             	lea    edx,[eax+0x1]
c0011d47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d4b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011d50:	0f 94 c0             	sete   al
c0011d53:	0f b6 c0             	movzx  eax,al
c0011d56:	85 c0                	test   eax,eax
c0011d58:	74 a4                	je     c0011cfe <UnixFile::~UnixFile()+0x24>
c0011d5a:	83 ec 0c             	sub    esp,0xc
c0011d5d:	68 b0 23 02 c0       	push   0xc00223b0
c0011d62:	e8 af ce ff ff       	call   c000ec16 <KePanic(char const*)>
c0011d67:	83 c4 10             	add    esp,0x10
c0011d6a:	eb 92                	jmp    c0011cfe <UnixFile::~UnixFile()+0x24>
c0011d6c:	90                   	nop
c0011d6d:	eb 01                	jmp    c0011d70 <UnixFile::~UnixFile()+0x96>
c0011d6f:	90                   	nop
c0011d70:	90                   	nop
c0011d71:	83 c4 1c             	add    esp,0x1c
c0011d74:	c3                   	ret    
c0011d75:	90                   	nop

c0011d76 <UnixFile::~UnixFile()>:
c0011d76:	83 ec 0c             	sub    esp,0xc
c0011d79:	83 ec 0c             	sub    esp,0xc
c0011d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d80:	e8 55 ff ff ff       	call   c0011cda <UnixFile::~UnixFile()>
c0011d85:	83 c4 10             	add    esp,0x10
c0011d88:	83 ec 08             	sub    esp,0x8
c0011d8b:	6a 0c                	push   0xc
c0011d8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d91:	e8 c5 a8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	83 c4 0c             	add    esp,0xc
c0011d9c:	c3                   	ret    
c0011d9d:	90                   	nop

c0011d9e <ReservedFilename::~ReservedFilename()>:
c0011d9e:	83 ec 0c             	sub    esp,0xc
c0011da1:	ba f4 23 02 c0       	mov    edx,0xc00223f4
c0011da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011daa:	89 10                	mov    DWORD PTR [eax],edx
c0011dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db0:	83 ec 0c             	sub    esp,0xc
c0011db3:	50                   	push   eax
c0011db4:	e8 21 ff ff ff       	call   c0011cda <UnixFile::~UnixFile()>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	90                   	nop
c0011dbd:	83 c4 0c             	add    esp,0xc
c0011dc0:	c3                   	ret    
c0011dc1:	90                   	nop

c0011dc2 <ReservedFilename::~ReservedFilename()>:
c0011dc2:	83 ec 0c             	sub    esp,0xc
c0011dc5:	83 ec 0c             	sub    esp,0xc
c0011dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dcc:	e8 cd ff ff ff       	call   c0011d9e <ReservedFilename::~ReservedFilename()>
c0011dd1:	83 c4 10             	add    esp,0x10
c0011dd4:	83 ec 08             	sub    esp,0x8
c0011dd7:	6a 0c                	push   0xc
c0011dd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ddd:	e8 79 a8 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	83 c4 0c             	add    esp,0xc
c0011de8:	c3                   	ret    

c0011de9 <KeGetFileFromDescriptor(int)>:
c0011de9:	53                   	push   ebx
c0011dea:	83 ec 08             	sub    esp,0x8
c0011ded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011df1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011df7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011dfd:	7f 2c                	jg     c0011e2b <KeGetFileFromDescriptor(int)+0x42>
c0011dff:	83 ec 0c             	sub    esp,0xc
c0011e02:	68 b8 be 02 c0       	push   0xc002beb8
c0011e07:	e8 76 e4 00 00       	call   c0020282 <LinkedList<UnixFile>::getFirstElement()>
c0011e0c:	83 c4 10             	add    esp,0x10
c0011e0f:	85 c0                	test   eax,eax
c0011e11:	75 04                	jne    c0011e17 <KeGetFileFromDescriptor(int)+0x2e>
c0011e13:	31 c0                	xor    eax,eax
c0011e15:	eb 6e                	jmp    c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e17:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011e1a:	74 69                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e1c:	52                   	push   edx
c0011e1d:	52                   	push   edx
c0011e1e:	50                   	push   eax
c0011e1f:	68 b8 be 02 c0       	push   0xc002beb8
c0011e24:	e8 03 e5 00 00       	call   c002032c <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011e29:	eb e1                	jmp    c0011e0c <KeGetFileFromDescriptor(int)+0x23>
c0011e2b:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011e31:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011e36:	74 4d                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e38:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011e3e:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011e43:	74 40                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e45:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011e4b:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011e50:	74 33                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e52:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011e58:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011e5d:	74 26                	je     c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e5f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011e65:	83 f8 08             	cmp    eax,0x8
c0011e68:	77 09                	ja     c0011e73 <KeGetFileFromDescriptor(int)+0x8a>
c0011e6a:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011e71:	eb 12                	jmp    c0011e85 <KeGetFileFromDescriptor(int)+0x9c>
c0011e73:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011e79:	83 fb 08             	cmp    ebx,0x8
c0011e7c:	77 95                	ja     c0011e13 <KeGetFileFromDescriptor(int)+0x2a>
c0011e7e:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011e85:	83 c4 08             	add    esp,0x8
c0011e88:	5b                   	pop    ebx
c0011e89:	c3                   	ret    

c0011e8a <__static_initialization_and_destruction_0(int, int)>:
c0011e8a:	83 ec 0c             	sub    esp,0xc
c0011e8d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011e92:	75 34                	jne    c0011ec8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011e94:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011e9c:	75 2a                	jne    c0011ec8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011e9e:	83 ec 0c             	sub    esp,0xc
c0011ea1:	68 b8 be 02 c0       	push   0xc002beb8
c0011ea6:	e8 c1 e2 00 00       	call   c002016c <LinkedList<UnixFile>::LinkedList()>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	83 ec 04             	sub    esp,0x4
c0011eb1:	68 60 3a 02 c0       	push   0xc0023a60
c0011eb6:	68 b8 be 02 c0       	push   0xc002beb8
c0011ebb:	68 6a 01 02 c0       	push   0xc002016a
c0011ec0:	e8 46 a7 ff ff       	call   c000c60b <__cxa_atexit>
c0011ec5:	83 c4 10             	add    esp,0x10
c0011ec8:	90                   	nop
c0011ec9:	83 c4 0c             	add    esp,0xc
c0011ecc:	c3                   	ret    

c0011ecd <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ecd:	83 ec 0c             	sub    esp,0xc
c0011ed0:	83 ec 08             	sub    esp,0x8
c0011ed3:	68 ff ff 00 00       	push   0xffff
c0011ed8:	6a 01                	push   0x1
c0011eda:	e8 ab ff ff ff       	call   c0011e8a <__static_initialization_and_destruction_0(int, int)>
c0011edf:	83 c4 10             	add    esp,0x10
c0011ee2:	83 c4 0c             	add    esp,0xc
c0011ee5:	c3                   	ret    

c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ee6:	53                   	push   ebx
c0011ee7:	8b 15 08 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024208
c0011eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ef1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ef5:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0011efb:	89 d8                	mov    eax,ebx
c0011efd:	d1 e8                	shr    eax,1
c0011eff:	01 d0                	add    eax,edx
c0011f01:	80 e3 01             	and    bl,0x1
c0011f04:	8a 10                	mov    dl,BYTE PTR [eax]
c0011f06:	75 09                	jne    c0011f11 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0011f08:	83 e2 f0             	and    edx,0xfffffff0
c0011f0b:	09 ca                	or     edx,ecx
c0011f0d:	88 10                	mov    BYTE PTR [eax],dl
c0011f0f:	5b                   	pop    ebx
c0011f10:	c3                   	ret    
c0011f11:	0f b6 c9             	movzx  ecx,cl
c0011f14:	83 e2 0f             	and    edx,0xf
c0011f17:	c1 e1 04             	shl    ecx,0x4
c0011f1a:	09 ca                	or     edx,ecx
c0011f1c:	88 10                	mov    BYTE PTR [eax],dl
c0011f1e:	5b                   	pop    ebx
c0011f1f:	c3                   	ret    

c0011f20 <Virt::getPageState(unsigned long)>:
c0011f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f24:	8b 0d 08 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024208
c0011f2a:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011f30:	89 d0                	mov    eax,edx
c0011f32:	d1 e8                	shr    eax,1
c0011f34:	80 e2 01             	and    dl,0x1
c0011f37:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011f3a:	74 03                	je     c0011f3f <Virt::getPageState(unsigned long)+0x1f>
c0011f3c:	c1 e8 04             	shr    eax,0x4
c0011f3f:	83 e0 0f             	and    eax,0xf
c0011f42:	c3                   	ret    

c0011f43 <Virt::allocateKernelVirtualPages(int)>:
c0011f43:	55                   	push   ebp
c0011f44:	57                   	push   edi
c0011f45:	56                   	push   esi
c0011f46:	31 f6                	xor    esi,esi
c0011f48:	53                   	push   ebx
c0011f49:	31 db                	xor    ebx,ebx
c0011f4b:	83 ec 1c             	sub    esp,0x1c
c0011f4e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011f53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f57:	8b 2d 04 42 02 c0    	mov    ebp,DWORD PTR ds:0xc0024204
c0011f5d:	55                   	push   ebp
c0011f5e:	e8 bd ff ff ff       	call   c0011f20 <Virt::getPageState(unsigned long)>
c0011f63:	5a                   	pop    edx
c0011f64:	84 c0                	test   al,al
c0011f66:	75 3d                	jne    c0011fa5 <Virt::allocateKernelVirtualPages(int)+0x62>
c0011f68:	85 db                	test   ebx,ebx
c0011f6a:	0f 44 f5             	cmove  esi,ebp
c0011f6d:	83 c3 01             	add    ebx,0x1
c0011f70:	39 fb                	cmp    ebx,edi
c0011f72:	74 5e                	je     c0011fd2 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0011f74:	83 c5 01             	add    ebp,0x1
c0011f77:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0011f7d:	76 33                	jbe    c0011fb2 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0011f7f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0011f84:	c7 05 04 42 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024204,0xc8000
c0011f8e:	75 2a                	jne    c0011fba <Virt::allocateKernelVirtualPages(int)+0x77>
c0011f90:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011f95:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0011f9a:	55                   	push   ebp
c0011f9b:	e8 80 ff ff ff       	call   c0011f20 <Virt::getPageState(unsigned long)>
c0011fa0:	5a                   	pop    edx
c0011fa1:	84 c0                	test   al,al
c0011fa3:	74 c3                	je     c0011f68 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011fa5:	83 c5 01             	add    ebp,0x1
c0011fa8:	31 db                	xor    ebx,ebx
c0011faa:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0011fb0:	77 cd                	ja     c0011f7f <Virt::allocateKernelVirtualPages(int)+0x3c>
c0011fb2:	89 2d 04 42 02 c0    	mov    DWORD PTR ds:0xc0024204,ebp
c0011fb8:	eb a3                	jmp    c0011f5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011fba:	83 ec 0c             	sub    esp,0xc
c0011fbd:	68 08 24 02 c0       	push   0xc0022408
c0011fc2:	e8 4f cc ff ff       	call   c000ec16 <KePanic(char const*)>
c0011fc7:	8b 2d 04 42 02 c0    	mov    ebp,DWORD PTR ds:0xc0024204
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	eb 8b                	jmp    c0011f5d <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011fd2:	89 35 04 42 02 c0    	mov    DWORD PTR ds:0xc0024204,esi
c0011fd8:	83 fb 01             	cmp    ebx,0x1
c0011fdb:	74 63                	je     c0012040 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0011fdd:	85 ff                	test   edi,edi
c0011fdf:	74 41                	je     c0012022 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0011fe1:	89 f0                	mov    eax,esi
c0011fe3:	31 db                	xor    ebx,ebx
c0011fe5:	8d 6f ff             	lea    ebp,[edi-0x1]
c0011fe8:	eb 16                	jmp    c0012000 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0011fea:	6a 01                	push   0x1
c0011fec:	83 c3 01             	add    ebx,0x1
c0011fef:	50                   	push   eax
c0011ff0:	e8 f1 fe ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ff5:	39 fb                	cmp    ebx,edi
c0011ff7:	58                   	pop    eax
c0011ff8:	5a                   	pop    edx
c0011ff9:	74 27                	je     c0012022 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0011ffb:	a1 04 42 02 c0       	mov    eax,ds:0xc0024204
c0012000:	8d 50 01             	lea    edx,[eax+0x1]
c0012003:	85 db                	test   ebx,ebx
c0012005:	89 15 04 42 02 c0    	mov    DWORD PTR ds:0xc0024204,edx
c001200b:	74 22                	je     c001202f <Virt::allocateKernelVirtualPages(int)+0xec>
c001200d:	39 dd                	cmp    ebp,ebx
c001200f:	75 d9                	jne    c0011fea <Virt::allocateKernelVirtualPages(int)+0xa7>
c0012011:	6a 03                	push   0x3
c0012013:	83 c3 01             	add    ebx,0x1
c0012016:	50                   	push   eax
c0012017:	e8 ca fe ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001201c:	39 fb                	cmp    ebx,edi
c001201e:	59                   	pop    ecx
c001201f:	58                   	pop    eax
c0012020:	75 d9                	jne    c0011ffb <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012022:	83 c4 1c             	add    esp,0x1c
c0012025:	89 f0                	mov    eax,esi
c0012027:	5b                   	pop    ebx
c0012028:	c1 e0 0c             	shl    eax,0xc
c001202b:	5e                   	pop    esi
c001202c:	5f                   	pop    edi
c001202d:	5d                   	pop    ebp
c001202e:	c3                   	ret    
c001202f:	6a 02                	push   0x2
c0012031:	bb 01 00 00 00       	mov    ebx,0x1
c0012036:	50                   	push   eax
c0012037:	e8 aa fe ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001203c:	58                   	pop    eax
c001203d:	5a                   	pop    edx
c001203e:	eb bb                	jmp    c0011ffb <Virt::allocateKernelVirtualPages(int)+0xb8>
c0012040:	6a 04                	push   0x4
c0012042:	56                   	push   esi
c0012043:	8d 46 01             	lea    eax,[esi+0x1]
c0012046:	a3 04 42 02 c0       	mov    ds:0xc0024204,eax
c001204b:	e8 96 fe ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012050:	89 f0                	mov    eax,esi
c0012052:	59                   	pop    ecx
c0012053:	c1 e0 0c             	shl    eax,0xc
c0012056:	5b                   	pop    ebx
c0012057:	83 c4 1c             	add    esp,0x1c
c001205a:	5b                   	pop    ebx
c001205b:	5e                   	pop    esi
c001205c:	5f                   	pop    edi
c001205d:	5d                   	pop    ebp
c001205e:	c3                   	ret    

c001205f <Virt::freeSwapfilePage(unsigned long)>:
c001205f:	53                   	push   ebx
c0012060:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c0012066:	b8 01 00 00 00       	mov    eax,0x1
c001206b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001206f:	d3 e0                	shl    eax,cl
c0012071:	89 cb                	mov    ebx,ecx
c0012073:	c1 eb 05             	shr    ebx,0x5
c0012076:	f7 d0                	not    eax
c0012078:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001207b:	21 c1                	and    ecx,eax
c001207d:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012080:	5b                   	pop    ebx
c0012081:	c3                   	ret    

c0012082 <Virt::swapIDToSector(unsigned long)>:
c0012082:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012086:	8b 15 0c 42 02 c0    	mov    edx,DWORD PTR ds:0xc002420c
c001208c:	8b 0d 14 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024214
c0012092:	0f af c2             	imul   eax,edx
c0012095:	01 c8                	add    eax,ecx
c0012097:	c3                   	ret    

c0012098 <Virt::allocateSwapfilePage()>:
c0012098:	55                   	push   ebp
c0012099:	31 d2                	xor    edx,edx
c001209b:	57                   	push   edi
c001209c:	56                   	push   esi
c001209d:	53                   	push   ebx
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	8b 1d 10 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024210
c00120a7:	8b 0d 0c 42 02 c0    	mov    ecx,DWORD PTR ds:0xc002420c
c00120ad:	89 d8                	mov    eax,ebx
c00120af:	f7 f1                	div    ecx
c00120b1:	39 cb                	cmp    ebx,ecx
c00120b3:	72 2f                	jb     c00120e4 <Virt::allocateSwapfilePage()+0x4c>
c00120b5:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c00120bb:	8b 16                	mov    edx,DWORD PTR [esi]
c00120bd:	f6 c2 01             	test   dl,0x1
c00120c0:	74 3e                	je     c0012100 <Virt::allocateSwapfilePage()+0x68>
c00120c2:	31 c9                	xor    ecx,ecx
c00120c4:	bf 01 00 00 00       	mov    edi,0x1
c00120c9:	eb 12                	jmp    c00120dd <Virt::allocateSwapfilePage()+0x45>
c00120cb:	89 ca                	mov    edx,ecx
c00120cd:	89 fd                	mov    ebp,edi
c00120cf:	c1 ea 05             	shr    edx,0x5
c00120d2:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00120d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00120d7:	d3 e5                	shl    ebp,cl
c00120d9:	85 ea                	test   edx,ebp
c00120db:	74 2c                	je     c0012109 <Virt::allocateSwapfilePage()+0x71>
c00120dd:	83 c1 01             	add    ecx,0x1
c00120e0:	39 c8                	cmp    eax,ecx
c00120e2:	77 e7                	ja     c00120cb <Virt::allocateSwapfilePage()+0x33>
c00120e4:	83 ec 0c             	sub    esp,0xc
c00120e7:	68 78 26 02 c0       	push   0xc0022678
c00120ec:	e8 25 cb ff ff       	call   c000ec16 <KePanic(char const*)>
c00120f1:	83 c4 10             	add    esp,0x10
c00120f4:	31 c9                	xor    ecx,ecx
c00120f6:	83 c4 0c             	add    esp,0xc
c00120f9:	89 c8                	mov    eax,ecx
c00120fb:	5b                   	pop    ebx
c00120fc:	5e                   	pop    esi
c00120fd:	5f                   	pop    edi
c00120fe:	5d                   	pop    ebp
c00120ff:	c3                   	ret    
c0012100:	89 f3                	mov    ebx,esi
c0012102:	bd 01 00 00 00       	mov    ebp,0x1
c0012107:	31 c9                	xor    ecx,ecx
c0012109:	09 ea                	or     edx,ebp
c001210b:	89 c8                	mov    eax,ecx
c001210d:	89 13                	mov    DWORD PTR [ebx],edx
c001210f:	83 c4 0c             	add    esp,0xc
c0012112:	5b                   	pop    ebx
c0012113:	5e                   	pop    esi
c0012114:	5f                   	pop    edi
c0012115:	5d                   	pop    ebp
c0012116:	c3                   	ret    

c0012117 <Virt::virtualMemorySetup()>:
c0012117:	53                   	push   ebx
c0012118:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001211d:	6a 0f                	push   0xf
c001211f:	53                   	push   ebx
c0012120:	83 c3 01             	add    ebx,0x1
c0012123:	e8 be fd ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012128:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001212e:	58                   	pop    eax
c001212f:	5a                   	pop    edx
c0012130:	75 eb                	jne    c001211d <Virt::virtualMemorySetup()+0x6>
c0012132:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012137:	6a 00                	push   0x0
c0012139:	53                   	push   ebx
c001213a:	83 c3 01             	add    ebx,0x1
c001213d:	e8 a4 fd ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012142:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012148:	59                   	pop    ecx
c0012149:	58                   	pop    eax
c001214a:	75 eb                	jne    c0012137 <Virt::virtualMemorySetup()+0x20>
c001214c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012151:	6a 0f                	push   0xf
c0012153:	53                   	push   ebx
c0012154:	83 c3 01             	add    ebx,0x1
c0012157:	e8 8a fd ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001215c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012162:	58                   	pop    eax
c0012163:	5a                   	pop    edx
c0012164:	75 eb                	jne    c0012151 <Virt::virtualMemorySetup()+0x3a>
c0012166:	5b                   	pop    ebx
c0012167:	c3                   	ret    

c0012168 <Virt::setupPageSwapping(int)>:
c0012168:	53                   	push   ebx
c0012169:	83 ec 0c             	sub    esp,0xc
c001216c:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0012171:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012175:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001217b:	8b 10                	mov    edx,DWORD PTR [eax]
c001217d:	53                   	push   ebx
c001217e:	68 8f 26 02 c0       	push   0xc002268f
c0012183:	50                   	push   eax
c0012184:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012187:	c1 e3 0b             	shl    ebx,0xb
c001218a:	89 1d 10 42 02 c0    	mov    DWORD PTR ds:0xc0024210,ebx
c0012190:	c1 eb 08             	shr    ebx,0x8
c0012193:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012196:	c6 05 18 42 02 c0 43 	mov    BYTE PTR ds:0xc0024218,0x43
c001219d:	c7 05 0c 42 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002420c,0x8
c00121a7:	a3 14 42 02 c0       	mov    ds:0xc0024214,eax
c00121ac:	e8 1f c7 ff ff       	call   c000e8d0 <malloc>
c00121b1:	31 d2                	xor    edx,edx
c00121b3:	83 c4 0c             	add    esp,0xc
c00121b6:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c00121bb:	89 c1                	mov    ecx,eax
c00121bd:	a1 10 42 02 c0       	mov    eax,ds:0xc0024210
c00121c2:	f7 35 0c 42 02 c0    	div    DWORD PTR ds:0xc002420c
c00121c8:	c1 e8 05             	shr    eax,0x5
c00121cb:	50                   	push   eax
c00121cc:	6a 00                	push   0x0
c00121ce:	51                   	push   ecx
c00121cf:	e8 1c e3 fe ff       	call   c00004f0 <memset>
c00121d4:	83 c4 18             	add    esp,0x18
c00121d7:	5b                   	pop    ebx
c00121d8:	c3                   	ret    
c00121d9:	90                   	nop

c00121da <VAS::setCPUSpecific(unsigned long)>:
c00121da:	c3                   	ret    
c00121db:	90                   	nop

c00121dc <VAS::VAS(VAS*)>:
c00121dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121f2:	90                   	nop
c00121f3:	c3                   	ret    

c00121f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00121f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121f8:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00121fd:	89 c2                	mov    edx,eax
c00121ff:	c1 ea 16             	shr    edx,0x16
c0012202:	c1 e8 0a             	shr    eax,0xa
c0012205:	83 f9 01             	cmp    ecx,0x1
c0012208:	19 c9                	sbb    ecx,ecx
c001220a:	25 fc 0f 00 00       	and    eax,0xffc
c001220f:	c1 e2 0c             	shl    edx,0xc
c0012212:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012218:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001221f:	01 d0                	add    eax,edx
c0012221:	c3                   	ret    

c0012222 <VAS::getPageTableEntry(unsigned long)>:
c0012222:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012226:	89 ca                	mov    edx,ecx
c0012228:	c1 ea 16             	shr    edx,0x16
c001222b:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012231:	c1 e9 0a             	shr    ecx,0xa
c0012234:	c1 e0 0c             	shl    eax,0xc
c0012237:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001223d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012240:	c3                   	ret    

c0012241 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012241:	55                   	push   ebp
c0012242:	57                   	push   edi
c0012243:	bf 01 00 00 00       	mov    edi,0x1
c0012248:	56                   	push   esi
c0012249:	53                   	push   ebx
c001224a:	83 ec 1c             	sub    esp,0x1c
c001224d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012251:	c1 ee 0c             	shr    esi,0xc
c0012254:	eb 48                	jmp    c001229e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012256:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001225b:	83 ec 08             	sub    esp,0x8
c001225e:	55                   	push   ebp
c001225f:	50                   	push   eax
c0012260:	e8 bd ff ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012265:	83 c4 10             	add    esp,0x10
c0012268:	8b 10                	mov    edx,DWORD PTR [eax]
c001226a:	f6 c6 04             	test   dh,0x4
c001226d:	75 70                	jne    c00122df <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001226f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012275:	83 fb 04             	cmp    ebx,0x4
c0012278:	0f 84 8a 00 00 00    	je     c0012308 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001227e:	83 fb 02             	cmp    ebx,0x2
c0012281:	0f 84 9a 00 00 00    	je     c0012321 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012287:	83 fb 03             	cmp    ebx,0x3
c001228a:	0f 84 be 00 00 00    	je     c001234e <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012290:	83 fb 01             	cmp    ebx,0x1
c0012293:	0f 84 a2 00 00 00    	je     c001233b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012299:	83 c6 01             	add    esi,0x1
c001229c:	31 ff                	xor    edi,edi
c001229e:	56                   	push   esi
c001229f:	89 f5                	mov    ebp,esi
c00122a1:	e8 7a fc ff ff       	call   c0011f20 <Virt::getPageState(unsigned long)>
c00122a6:	c1 e5 0c             	shl    ebp,0xc
c00122a9:	5a                   	pop    edx
c00122aa:	0f b6 d8             	movzx  ebx,al
c00122ad:	85 db                	test   ebx,ebx
c00122af:	75 a5                	jne    c0012256 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00122b1:	83 ec 0c             	sub    esp,0xc
c00122b4:	68 a6 26 02 c0       	push   0xc00226a6
c00122b9:	e8 58 c9 ff ff       	call   c000ec16 <KePanic(char const*)>
c00122be:	5a                   	pop    edx
c00122bf:	59                   	pop    ecx
c00122c0:	55                   	push   ebp
c00122c1:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c00122c7:	55                   	push   ebp
c00122c8:	e8 55 ff ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c00122cd:	83 c4 10             	add    esp,0x10
c00122d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00122d2:	f6 c6 04             	test   dh,0x4
c00122d5:	75 08                	jne    c00122df <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00122d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00122dd:	eb ba                	jmp    c0012299 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00122df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00122e9:	83 ec 0c             	sub    esp,0xc
c00122ec:	52                   	push   edx
c00122ed:	e8 b5 ca ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c00122f2:	83 c4 10             	add    esp,0x10
c00122f5:	83 fb 04             	cmp    ebx,0x4
c00122f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012302:	0f 85 76 ff ff ff    	jne    c001227e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012308:	83 e7 01             	and    edi,0x1
c001230b:	75 46                	jne    c0012353 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001230d:	c7 44 24 30 28 24 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022428
c0012315:	83 c4 1c             	add    esp,0x1c
c0012318:	5b                   	pop    ebx
c0012319:	5e                   	pop    esi
c001231a:	5f                   	pop    edi
c001231b:	5d                   	pop    ebp
c001231c:	e9 f5 c8 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c0012321:	83 e7 01             	and    edi,0x1
c0012324:	75 15                	jne    c001233b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012326:	83 ec 0c             	sub    esp,0xc
c0012329:	68 c2 26 02 c0       	push   0xc00226c2
c001232e:	e8 e3 c8 ff ff       	call   c000ec16 <KePanic(char const*)>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	e9 5e ff ff ff       	jmp    c0012299 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001233b:	83 ec 08             	sub    esp,0x8
c001233e:	6a 00                	push   0x0
c0012340:	56                   	push   esi
c0012341:	e8 a0 fb ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012346:	83 c4 10             	add    esp,0x10
c0012349:	e9 4b ff ff ff       	jmp    c0012299 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001234e:	83 e7 01             	and    edi,0x1
c0012351:	75 16                	jne    c0012369 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012353:	83 ec 08             	sub    esp,0x8
c0012356:	6a 00                	push   0x0
c0012358:	56                   	push   esi
c0012359:	e8 88 fb ff ff       	call   c0011ee6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	83 c4 1c             	add    esp,0x1c
c0012364:	5b                   	pop    ebx
c0012365:	5e                   	pop    esi
c0012366:	5f                   	pop    edi
c0012367:	5d                   	pop    ebp
c0012368:	c3                   	ret    
c0012369:	c7 44 24 30 de 26 02 c0 	mov    DWORD PTR [esp+0x30],0xc00226de
c0012371:	83 c4 1c             	add    esp,0x1c
c0012374:	5b                   	pop    ebx
c0012375:	5e                   	pop    esi
c0012376:	5f                   	pop    edi
c0012377:	5d                   	pop    ebp
c0012378:	e9 99 c8 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001237d:	90                   	nop

c001237e <VAS::freeAllocatedPages(unsigned long)>:
c001237e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012382:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012386:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001238a:	74 09                	je     c0012395 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001238c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012390:	e9 ac fe ff ff       	jmp    c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0012395:	c7 44 24 04 4c 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc002244c
c001239d:	e9 ac 4b ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c00123a2 <VAS::virtualToPhysical(unsigned long)>:
c00123a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123a6:	50                   	push   eax
c00123a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123ab:	52                   	push   edx
c00123ac:	e8 71 fe ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c00123b1:	59                   	pop    ecx
c00123b2:	5a                   	pop    edx
c00123b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00123b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ba:	c3                   	ret    
c00123bb:	90                   	nop

c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00123bc:	55                   	push   ebp
c00123bd:	57                   	push   edi
c00123be:	56                   	push   esi
c00123bf:	53                   	push   ebx
c00123c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00123c4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00123c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00123cc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00123d0:	85 db                	test   ebx,ebx
c00123d2:	7e 24                	jle    c00123f8 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00123d4:	c1 e3 0c             	shl    ebx,0xc
c00123d7:	01 f3                	add    ebx,esi
c00123d9:	56                   	push   esi
c00123da:	81 c6 00 10 00 00    	add    esi,0x1000
c00123e0:	55                   	push   ebp
c00123e1:	e8 3c fe ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c00123e6:	5a                   	pop    edx
c00123e7:	59                   	pop    ecx
c00123e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123ea:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00123ee:	21 f9                	and    ecx,edi
c00123f0:	09 d1                	or     ecx,edx
c00123f2:	39 f3                	cmp    ebx,esi
c00123f4:	89 08                	mov    DWORD PTR [eax],ecx
c00123f6:	75 e1                	jne    c00123d9 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00123f8:	5b                   	pop    ebx
c00123f9:	5e                   	pop    esi
c00123fa:	5f                   	pop    edi
c00123fb:	5d                   	pop    ebp
c00123fc:	c3                   	ret    
c00123fd:	90                   	nop

c00123fe <VAS::VAS()>:
c00123fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012402:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001240d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012418:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c001241d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012421:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012425:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012429:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001242c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012430:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012437:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c001243c:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012441:	29 c2                	sub    edx,eax
c0012443:	89 d0                	mov    eax,edx
c0012445:	05 ff 0f 00 00       	add    eax,0xfff
c001244a:	c1 e8 0c             	shr    eax,0xc
c001244d:	89 c2                	mov    edx,eax
c001244f:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012454:	6a 04                	push   0x4
c0012456:	6a ff                	push   0xffffffff
c0012458:	52                   	push   edx
c0012459:	50                   	push   eax
c001245a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001245e:	e8 59 ff ff ff       	call   c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012463:	83 c4 14             	add    esp,0x14
c0012466:	90                   	nop
c0012467:	c3                   	ret    

c0012468 <VAS::setToWriteCombining(unsigned long, int)>:
c0012468:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001246d:	50                   	push   eax
c001246e:	6a ff                	push   0xffffffff
c0012470:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012474:	52                   	push   edx
c0012475:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012479:	51                   	push   ecx
c001247a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001247e:	50                   	push   eax
c001247f:	e8 38 ff ff ff       	call   c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012484:	83 c4 14             	add    esp,0x14
c0012487:	c3                   	ret    

c0012488 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012488:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001248c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001248f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012493:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012496:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001249b:	83 f8 01             	cmp    eax,0x1
c001249e:	19 c0                	sbb    eax,eax
c00124a0:	83 ca 03             	or     edx,0x3
c00124a3:	83 e0 fc             	and    eax,0xfffffffc
c00124a6:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00124ad:	0f 20 d8             	mov    eax,cr3
c00124b0:	0f 22 d8             	mov    cr3,eax
c00124b3:	c3                   	ret    

c00124b4 <VAS::~VAS()>:
c00124b4:	83 ec 2c             	sub    esp,0x2c
c00124b7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124bf:	fa                   	cli    
c00124c0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00124c5:	83 c0 01             	add    eax,0x1
c00124c8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00124cd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00124d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00124d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124d7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00124dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00124e1:	6a 01                	push   0x1
c00124e3:	50                   	push   eax
c00124e4:	e8 9f ff ff ff       	call   c0012488 <VAS::mapOtherVASIn(bool, VAS*)>
c00124e9:	83 c4 0c             	add    esp,0xc
c00124ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124f4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00124fc:	0f 8f d8 00 00 00    	jg     c00125da <VAS::~VAS()+0x126>
c0012502:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012506:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012509:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001250d:	c1 e2 02             	shl    edx,0x2
c0012510:	01 d0                	add    eax,edx
c0012512:	8b 00                	mov    eax,DWORD PTR [eax]
c0012514:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251c:	83 e0 01             	and    eax,0x1
c001251f:	0f 84 ab 00 00 00    	je     c00125d0 <VAS::~VAS()+0x11c>
c0012525:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001252d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012535:	7f 74                	jg     c00125ab <VAS::~VAS()+0xf7>
c0012537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001253b:	c1 e0 0a             	shl    eax,0xa
c001253e:	89 c2                	mov    edx,eax
c0012540:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012544:	01 d0                	add    eax,edx
c0012546:	c1 e0 0c             	shl    eax,0xc
c0012549:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001254d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012552:	8b 00                	mov    eax,DWORD PTR [eax]
c0012554:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012557:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001255d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012561:	6a 01                	push   0x1
c0012563:	50                   	push   eax
c0012564:	e8 8b fc ff ff       	call   c00121f4 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012569:	83 c4 0c             	add    esp,0xc
c001256c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012570:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012574:	8b 00                	mov    eax,DWORD PTR [eax]
c0012576:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001257a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001257e:	25 01 04 00 00       	and    eax,0x401
c0012583:	3d 01 04 00 00       	cmp    eax,0x401
c0012588:	75 1a                	jne    c00125a4 <VAS::~VAS()+0xf0>
c001258a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001258e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012593:	83 ec 0c             	sub    esp,0xc
c0012596:	50                   	push   eax
c0012597:	e8 0b c8 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c001259c:	83 c4 10             	add    esp,0x10
c001259f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00125a4:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00125a9:	eb 82                	jmp    c001252d <VAS::~VAS()+0x79>
c00125ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125af:	25 00 04 00 00       	and    eax,0x400
c00125b4:	74 1a                	je     c00125d0 <VAS::~VAS()+0x11c>
c00125b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125bf:	83 ec 0c             	sub    esp,0xc
c00125c2:	50                   	push   eax
c00125c3:	e8 df c7 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c00125c8:	83 c4 10             	add    esp,0x10
c00125cb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00125d0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00125d5:	e9 1a ff ff ff       	jmp    c00124f4 <VAS::~VAS()+0x40>
c00125da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00125e1:	83 ec 0c             	sub    esp,0xc
c00125e4:	50                   	push   eax
c00125e5:	e8 57 fc ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c00125ea:	83 c4 10             	add    esp,0x10
c00125ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00125f4:	83 ec 0c             	sub    esp,0xc
c00125f7:	50                   	push   eax
c00125f8:	e8 aa c7 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c00125fd:	83 c4 10             	add    esp,0x10
c0012600:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012605:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001260d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012612:	85 c0                	test   eax,eax
c0012614:	75 01                	jne    c0012617 <VAS::~VAS()+0x163>
c0012616:	fb                   	sti    
c0012617:	90                   	nop
c0012618:	83 c4 2c             	add    esp,0x2c
c001261b:	c3                   	ret    

c001261c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001261c:	55                   	push   ebp
c001261d:	57                   	push   edi
c001261e:	56                   	push   esi
c001261f:	53                   	push   ebx
c0012620:	83 ec 1c             	sub    esp,0x1c
c0012623:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012627:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001262b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001262f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012635:	77 08                	ja     c001263f <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0012637:	0f 20 d8             	mov    eax,cr3
c001263a:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001263d:	75 43                	jne    c0012682 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001263f:	89 d8                	mov    eax,ebx
c0012641:	09 f8                	or     eax,edi
c0012643:	a9 ff 0f 00 00       	test   eax,0xfff
c0012648:	75 53                	jne    c001269d <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c001264a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001264d:	89 de                	mov    esi,ebx
c001264f:	c1 ee 16             	shr    esi,0x16
c0012652:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012659:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001265d:	74 50                	je     c00126af <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c001265f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012663:	c1 eb 0a             	shr    ebx,0xa
c0012666:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001266c:	c1 e6 0c             	shl    esi,0xc
c001266f:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012675:	09 c7                	or     edi,eax
c0012677:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c001267a:	83 c4 1c             	add    esp,0x1c
c001267d:	5b                   	pop    ebx
c001267e:	5e                   	pop    esi
c001267f:	5f                   	pop    edi
c0012680:	5d                   	pop    ebp
c0012681:	c3                   	ret    
c0012682:	83 ec 0c             	sub    esp,0xc
c0012685:	68 70 24 02 c0       	push   0xc0022470
c001268a:	e8 bf 48 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001268f:	89 d8                	mov    eax,ebx
c0012691:	83 c4 10             	add    esp,0x10
c0012694:	09 f8                	or     eax,edi
c0012696:	a9 ff 0f 00 00       	test   eax,0xfff
c001269b:	74 ad                	je     c001264a <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001269d:	83 ec 0c             	sub    esp,0xc
c00126a0:	68 d8 24 02 c0       	push   0xc00224d8
c00126a5:	e8 6c c5 ff ff       	call   c000ec16 <KePanic(char const*)>
c00126aa:	83 c4 10             	add    esp,0x10
c00126ad:	eb 9b                	jmp    c001264a <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00126af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126b3:	e8 58 c7 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00126b8:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00126be:	83 ec 0c             	sub    esp,0xc
c00126c1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00126c9:	6a 01                	push   0x1
c00126cb:	e8 73 f8 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00126d0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126d7:	6a 01                	push   0x1
c00126d9:	50                   	push   eax
c00126da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00126de:	52                   	push   edx
c00126df:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126e3:	51                   	push   ecx
c00126e4:	e8 2d 01 00 00       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126e9:	83 c4 1c             	add    esp,0x1c
c00126ec:	68 00 10 00 00       	push   0x1000
c00126f1:	6a 00                	push   0x0
c00126f3:	50                   	push   eax
c00126f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126f8:	e8 f3 dd fe ff       	call   c00004f0 <memset>
c00126fd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012701:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012704:	e8 38 fb ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0012709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001270d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012711:	83 c4 10             	add    esp,0x10
c0012714:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0012717:	0d 07 04 00 00       	or     eax,0x407
c001271c:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c001271f:	e9 3b ff ff ff       	jmp    c001265f <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0012724 <VAS::allocatePages(int, int)>:
c0012724:	55                   	push   ebp
c0012725:	57                   	push   edi
c0012726:	56                   	push   esi
c0012727:	53                   	push   ebx
c0012728:	83 ec 1c             	sub    esp,0x1c
c001272b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001272f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012733:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0012737:	75 75                	jne    c00127ae <VAS::allocatePages(int, int)+0x8a>
c0012739:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001273c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012740:	85 c0                	test   eax,eax
c0012742:	74 49                	je     c001278d <VAS::allocatePages(int, int)+0x69>
c0012744:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012748:	89 d5                	mov    ebp,edx
c001274a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001274e:	c1 e5 0c             	shl    ebp,0xc
c0012751:	01 dd                	add    ebp,ebx
c0012753:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012756:	81 cf 00 04 00 00    	or     edi,0x400
c001275c:	85 d2                	test   edx,edx
c001275e:	7e 1b                	jle    c001277b <VAS::allocatePages(int, int)+0x57>
c0012760:	e8 ab c6 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012765:	57                   	push   edi
c0012766:	53                   	push   ebx
c0012767:	81 c3 00 10 00 00    	add    ebx,0x1000
c001276d:	50                   	push   eax
c001276e:	56                   	push   esi
c001276f:	e8 a8 fe ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012774:	83 c4 10             	add    esp,0x10
c0012777:	39 dd                	cmp    ebp,ebx
c0012779:	75 e5                	jne    c0012760 <VAS::allocatePages(int, int)+0x3c>
c001277b:	0f 20 d8             	mov    eax,cr3
c001277e:	0f 22 d8             	mov    cr3,eax
c0012781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012785:	83 c4 1c             	add    esp,0x1c
c0012788:	5b                   	pop    ebx
c0012789:	5e                   	pop    esi
c001278a:	5f                   	pop    edi
c001278b:	5d                   	pop    ebp
c001278c:	c3                   	ret    
c001278d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012791:	83 ec 0c             	sub    esp,0xc
c0012794:	68 fc 24 02 c0       	push   0xc00224fc
c0012799:	e8 78 c4 ff ff       	call   c000ec16 <KePanic(char const*)>
c001279e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00127a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127a5:	83 c4 10             	add    esp,0x10
c00127a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127ac:	eb 96                	jmp    c0012744 <VAS::allocatePages(int, int)+0x20>
c00127ae:	83 ec 0c             	sub    esp,0xc
c00127b1:	52                   	push   edx
c00127b2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00127b6:	e8 88 f7 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00127bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00127c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00127cb:	77 38                	ja     c0012805 <VAS::allocatePages(int, int)+0xe1>
c00127cd:	85 d2                	test   edx,edx
c00127cf:	7e aa                	jle    c001277b <VAS::allocatePages(int, int)+0x57>
c00127d1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00127d5:	c1 e2 0c             	shl    edx,0xc
c00127d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127dc:	81 cf 00 04 00 00    	or     edi,0x400
c00127e2:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c00127e5:	e8 26 c6 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00127ea:	57                   	push   edi
c00127eb:	53                   	push   ebx
c00127ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c00127f2:	50                   	push   eax
c00127f3:	56                   	push   esi
c00127f4:	e8 23 fe ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c00127f9:	83 c4 10             	add    esp,0x10
c00127fc:	39 dd                	cmp    ebp,ebx
c00127fe:	75 e5                	jne    c00127e5 <VAS::allocatePages(int, int)+0xc1>
c0012800:	e9 76 ff ff ff       	jmp    c001277b <VAS::allocatePages(int, int)+0x57>
c0012805:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012809:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c001280e:	09 c1                	or     ecx,eax
c0012810:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012814:	eb b7                	jmp    c00127cd <VAS::allocatePages(int, int)+0xa9>

c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012816:	55                   	push   ebp
c0012817:	57                   	push   edi
c0012818:	56                   	push   esi
c0012819:	53                   	push   ebx
c001281a:	83 ec 1c             	sub    esp,0x1c
c001281d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012821:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012825:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012829:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001282d:	85 db                	test   ebx,ebx
c001282f:	7e 2c                	jle    c001285d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0012831:	c1 e3 0c             	shl    ebx,0xc
c0012834:	8d 04 33             	lea    eax,[ebx+esi*1]
c0012837:	89 f3                	mov    ebx,esi
c0012839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001283d:	55                   	push   ebp
c001283e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012842:	29 f2                	sub    edx,esi
c0012844:	01 da                	add    edx,ebx
c0012846:	52                   	push   edx
c0012847:	53                   	push   ebx
c0012848:	81 c3 00 10 00 00    	add    ebx,0x1000
c001284e:	57                   	push   edi
c001284f:	e8 c8 fd ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012854:	83 c4 10             	add    esp,0x10
c0012857:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c001285b:	75 e0                	jne    c001283d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c001285d:	0f 20 d8             	mov    eax,cr3
c0012860:	0f 22 d8             	mov    cr3,eax
c0012863:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012867:	83 c4 1c             	add    esp,0x1c
c001286a:	5b                   	pop    ebx
c001286b:	5e                   	pop    esi
c001286c:	5f                   	pop    edi
c001286d:	5d                   	pop    ebp
c001286e:	c3                   	ret    
c001286f:	90                   	nop

c0012870 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012870:	55                   	push   ebp
c0012871:	57                   	push   edi
c0012872:	56                   	push   esi
c0012873:	53                   	push   ebx
c0012874:	83 ec 1c             	sub    esp,0x1c
c0012877:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001287b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001287f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012887:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001288b:	09 d8                	or     eax,ebx
c001288d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012892:	75 4b                	jne    c00128df <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012894:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012897:	89 de                	mov    esi,ebx
c0012899:	c1 ee 16             	shr    esi,0x16
c001289c:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c00128a3:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c00128a7:	74 48                	je     c00128f1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c00128a9:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c00128ae:	c1 eb 0a             	shr    ebx,0xa
c00128b1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00128b5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00128b9:	83 ff 01             	cmp    edi,0x1
c00128bc:	19 c0                	sbb    eax,eax
c00128be:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00128c4:	c1 e6 0c             	shl    esi,0xc
c00128c7:	25 00 00 c0 ff       	and    eax,0xffc00000
c00128cc:	01 f3                	add    ebx,esi
c00128ce:	09 ca                	or     edx,ecx
c00128d0:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c00128d7:	83 c4 1c             	add    esp,0x1c
c00128da:	5b                   	pop    ebx
c00128db:	5e                   	pop    esi
c00128dc:	5f                   	pop    edi
c00128dd:	5d                   	pop    ebp
c00128de:	c3                   	ret    
c00128df:	83 ec 0c             	sub    esp,0xc
c00128e2:	68 28 25 02 c0       	push   0xc0022528
c00128e7:	e8 2a c3 ff ff       	call   c000ec16 <KePanic(char const*)>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	eb a3                	jmp    c0012894 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00128f1:	e8 1a c5 ff ff       	call   c000ee10 <Phys::allocatePage()>
c00128f6:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00128fc:	83 ec 0c             	sub    esp,0xc
c00128ff:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012903:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012907:	6a 01                	push   0x1
c0012909:	e8 35 f6 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001290e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012915:	6a 01                	push   0x1
c0012917:	50                   	push   eax
c0012918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001291c:	50                   	push   eax
c001291d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012921:	51                   	push   ecx
c0012922:	e8 ef fe ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012927:	83 c4 1c             	add    esp,0x1c
c001292a:	68 00 10 00 00       	push   0x1000
c001292f:	6a 00                	push   0x0
c0012931:	50                   	push   eax
c0012932:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012936:	e8 b5 db fe ff       	call   c00004f0 <memset>
c001293b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001293f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012942:	e8 fa f8 ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0012947:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001294b:	83 c4 10             	add    esp,0x10
c001294e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012951:	81 ca 07 04 00 00    	or     edx,0x407
c0012957:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c001295a:	e9 4a ff ff ff       	jmp    c00128a9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c001295f:	90                   	nop

c0012960 <VAS::VAS(bool)>:
c0012960:	53                   	push   ebx
c0012961:	83 ec 28             	sub    esp,0x28
c0012964:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012968:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001296c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012970:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012977:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001297b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012982:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012986:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001298a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001298d:	e8 7e c4 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012992:	89 c2                	mov    edx,eax
c0012994:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012998:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001299b:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00129a1:	83 ec 0c             	sub    esp,0xc
c00129a4:	6a 01                	push   0x1
c00129a6:	e8 98 f5 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	89 c2                	mov    edx,eax
c00129b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00129b7:	83 ec 0c             	sub    esp,0xc
c00129ba:	6a 03                	push   0x3
c00129bc:	6a 01                	push   0x1
c00129be:	52                   	push   edx
c00129bf:	50                   	push   eax
c00129c0:	53                   	push   ebx
c00129c1:	e8 50 fe ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00129c6:	83 c4 20             	add    esp,0x20
c00129c9:	89 c2                	mov    edx,eax
c00129cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00129d2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00129da:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00129e2:	7f 1d                	jg     c0012a01 <VAS::VAS(bool)+0xa1>
c00129e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129e8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00129ef:	c1 e2 02             	shl    edx,0x2
c00129f2:	01 d0                	add    eax,edx
c00129f4:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00129fa:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00129ff:	eb d9                	jmp    c00129da <VAS::VAS(bool)+0x7a>
c0012a01:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012a09:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012a11:	7f 59                	jg     c0012a6c <VAS::VAS(bool)+0x10c>
c0012a13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a17:	2d 00 02 00 00       	sub    eax,0x200
c0012a1c:	c1 e0 0c             	shl    eax,0xc
c0012a1f:	89 c2                	mov    edx,eax
c0012a21:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012a26:	89 d1                	mov    ecx,edx
c0012a28:	09 c1                	or     ecx,eax
c0012a2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a35:	c1 e2 02             	shl    edx,0x2
c0012a38:	01 d0                	add    eax,edx
c0012a3a:	83 c9 05             	or     ecx,0x5
c0012a3d:	89 ca                	mov    edx,ecx
c0012a3f:	89 10                	mov    DWORD PTR [eax],edx
c0012a41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a45:	2d 40 03 00 00       	sub    eax,0x340
c0012a4a:	83 f8 7f             	cmp    eax,0x7f
c0012a4d:	77 16                	ja     c0012a65 <VAS::VAS(bool)+0x105>
c0012a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012a5a:	c1 e2 02             	shl    edx,0x2
c0012a5d:	01 d0                	add    eax,edx
c0012a5f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012a65:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012a6a:	eb 9d                	jmp    c0012a09 <VAS::VAS(bool)+0xa9>
c0012a6c:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012a72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a79:	05 20 0c 00 00       	add    eax,0xc20
c0012a7e:	81 ca 03 40 00 00    	or     edx,0x4003
c0012a84:	89 10                	mov    DWORD PTR [eax],edx
c0012a86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012a8d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012a92:	09 c2                	or     edx,eax
c0012a94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a9b:	05 fc 0f 00 00       	add    eax,0xffc
c0012aa0:	83 ca 03             	or     edx,0x3
c0012aa3:	89 10                	mov    DWORD PTR [eax],edx
c0012aa5:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012aaa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ab0:	83 ec 0c             	sub    esp,0xc
c0012ab3:	50                   	push   eax
c0012ab4:	e8 eb 67 ff ff       	call   c00092a4 <Device::getName()>
c0012ab9:	83 c4 10             	add    esp,0x10
c0012abc:	83 ec 08             	sub    esp,0x8
c0012abf:	68 f8 26 02 c0       	push   0xc00226f8
c0012ac4:	50                   	push   eax
c0012ac5:	e8 b6 dc fe ff       	call   c0000780 <strcmp>
c0012aca:	83 c4 10             	add    esp,0x10
c0012acd:	85 c0                	test   eax,eax
c0012acf:	0f 94 c0             	sete   al
c0012ad2:	0f b6 c0             	movzx  eax,al
c0012ad5:	85 c0                	test   eax,eax
c0012ad7:	74 68                	je     c0012b41 <VAS::VAS(bool)+0x1e1>
c0012ad9:	fa                   	cli    
c0012ada:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012adf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ae5:	05 68 09 00 00       	add    eax,0x968
c0012aea:	83 ec 0c             	sub    esp,0xc
c0012aed:	50                   	push   eax
c0012aee:	e8 bf b7 ff ff       	call   c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012af3:	83 c4 10             	add    esp,0x10
c0012af6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012afb:	89 c3                	mov    ebx,eax
c0012afd:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012b02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b08:	05 68 09 00 00       	add    eax,0x968
c0012b0d:	83 ec 0c             	sub    esp,0xc
c0012b10:	50                   	push   eax
c0012b11:	e8 9c b7 ff ff       	call   c000e2b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012b16:	83 c4 10             	add    esp,0x10
c0012b19:	83 ec 08             	sub    esp,0x8
c0012b1c:	50                   	push   eax
c0012b1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b21:	e8 fc f6 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b30:	6a 11                	push   0x11
c0012b32:	53                   	push   ebx
c0012b33:	50                   	push   eax
c0012b34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b38:	e8 df fa ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b3d:	83 c4 10             	add    esp,0x10
c0012b40:	fb                   	sti    
c0012b41:	90                   	nop
c0012b42:	83 c4 28             	add    esp,0x28
c0012b45:	5b                   	pop    ebx
c0012b46:	c3                   	ret    
c0012b47:	90                   	nop

c0012b48 <VAS::evict(unsigned long)>:
c0012b48:	55                   	push   ebp
c0012b49:	57                   	push   edi
c0012b4a:	56                   	push   esi
c0012b4b:	53                   	push   ebx
c0012b4c:	83 ec 1c             	sub    esp,0x1c
c0012b4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b53:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012b57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b5b:	e8 38 f5 ff ff       	call   c0012098 <Virt::allocateSwapfilePage()>
c0012b60:	89 c7                	mov    edi,eax
c0012b62:	a1 0c 42 02 c0       	mov    eax,ds:0xc002420c
c0012b67:	85 c0                	test   eax,eax
c0012b69:	7e 40                	jle    c0012bab <VAS::evict(unsigned long)+0x63>
c0012b6b:	89 ee                	mov    esi,ebp
c0012b6d:	31 db                	xor    ebx,ebx
c0012b6f:	83 ec 0c             	sub    esp,0xc
c0012b72:	57                   	push   edi
c0012b73:	e8 0a f5 ff ff       	call   c0012082 <Virt::swapIDToSector(unsigned long)>
c0012b78:	31 d2                	xor    edx,edx
c0012b7a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b7d:	81 c6 00 02 00 00    	add    esi,0x200
c0012b83:	6a 01                	push   0x1
c0012b85:	52                   	push   edx
c0012b86:	01 d8                	add    eax,ebx
c0012b88:	83 c3 01             	add    ebx,0x1
c0012b8b:	50                   	push   eax
c0012b8c:	0f be 05 18 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024218
c0012b93:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012b9a:	50                   	push   eax
c0012b9b:	e8 9c 75 ff ff       	call   c000a13c <LogicalDisk::write(unsigned long long, int, void*)>
c0012ba0:	83 c4 20             	add    esp,0x20
c0012ba3:	39 1d 0c 42 02 c0    	cmp    DWORD PTR ds:0xc002420c,ebx
c0012ba9:	7f c4                	jg     c0012b6f <VAS::evict(unsigned long)+0x27>
c0012bab:	c1 e7 0c             	shl    edi,0xc
c0012bae:	83 ec 08             	sub    esp,0x8
c0012bb1:	55                   	push   ebp
c0012bb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bb6:	50                   	push   eax
c0012bb7:	e8 66 f6 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bbe:	89 d3                	mov    ebx,edx
c0012bc0:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012bc6:	09 d7                	or     edi,edx
c0012bc8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012bce:	89 38                	mov    DWORD PTR [eax],edi
c0012bd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012bd3:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012bd9:	83 c2 01             	add    edx,0x1
c0012bdc:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012be2:	e8 c0 c1 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c0012be7:	0f 20 d8             	mov    eax,cr3
c0012bea:	0f 22 d8             	mov    cr3,eax
c0012bed:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012bf3:	51                   	push   ecx
c0012bf4:	55                   	push   ebp
c0012bf5:	53                   	push   ebx
c0012bf6:	68 4c 25 02 c0       	push   0xc002254c
c0012bfb:	e8 4e 43 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c00:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012c05:	c7 44 24 50 06 27 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022706
c0012c0d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012c11:	8d 50 01             	lea    edx,[eax+0x1]
c0012c14:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012c1a:	83 c4 3c             	add    esp,0x3c
c0012c1d:	5b                   	pop    ebx
c0012c1e:	5e                   	pop    esi
c0012c1f:	5f                   	pop    edi
c0012c20:	5d                   	pop    ebp
c0012c21:	e9 28 43 ff ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>

c0012c26 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012c26:	55                   	push   ebp
c0012c27:	57                   	push   edi
c0012c28:	56                   	push   esi
c0012c29:	53                   	push   ebx
c0012c2a:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012c30:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0012c37:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c3d:	77 7c                	ja     c0012cbb <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c0012c3f:	83 ec 08             	sub    esp,0x8
c0012c42:	53                   	push   ebx
c0012c43:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012c49:	68 29 27 02 c0       	push   0xc0022729
c0012c4e:	e8 fb 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012c53:	59                   	pop    ecx
c0012c54:	5e                   	pop    esi
c0012c55:	53                   	push   ebx
c0012c56:	8b bc 24 3c 10 00 00 	mov    edi,DWORD PTR [esp+0x103c]
c0012c5d:	57                   	push   edi
c0012c5e:	e8 bf f5 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	85 c0                	test   eax,eax
c0012c68:	89 c5                	mov    ebp,eax
c0012c6a:	0f 95 c0             	setne  al
c0012c6d:	85 db                	test   ebx,ebx
c0012c6f:	0f 95 c2             	setne  dl
c0012c72:	21 d0                	and    eax,edx
c0012c74:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012c78:	a8 01                	test   al,0x1
c0012c7a:	75 0f                	jne    c0012c8b <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0012c7c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012c80:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012c86:	5b                   	pop    ebx
c0012c87:	5e                   	pop    esi
c0012c88:	5f                   	pop    edi
c0012c89:	5d                   	pop    ebp
c0012c8a:	c3                   	ret    
c0012c8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c8e:	f6 c4 02             	test   ah,0x2
c0012c91:	75 3d                	jne    c0012cd0 <VAS::tryLoadBackOffDisk(unsigned long)+0xaa>
c0012c93:	89 c2                	mov    edx,eax
c0012c95:	81 e2 01 04 00 00    	and    edx,0x401
c0012c9b:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012ca1:	0f 84 82 00 00 00    	je     c0012d29 <VAS::tryLoadBackOffDisk(unsigned long)+0x103>
c0012ca7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0012cac:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012cb0:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012cb6:	5b                   	pop    ebx
c0012cb7:	5e                   	pop    esi
c0012cb8:	5f                   	pop    edi
c0012cb9:	5d                   	pop    ebp
c0012cba:	c3                   	ret    
c0012cbb:	83 ec 0c             	sub    esp,0xc
c0012cbe:	68 17 27 02 c0       	push   0xc0022717
c0012cc3:	e8 4e bf ff ff       	call   c000ec16 <KePanic(char const*)>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	e9 6f ff ff ff       	jmp    c0012c3f <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0012cd0:	83 ec 0c             	sub    esp,0xc
c0012cd3:	68 7c 25 02 c0       	push   0xc002257c
c0012cd8:	e8 71 42 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012cdd:	e8 2e c1 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012ce2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012ce5:	83 ca 01             	or     edx,0x1
c0012ce8:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012ceb:	0f 20 da             	mov    edx,cr3
c0012cee:	0f 22 da             	mov    cr3,edx
c0012cf1:	ba 00 10 00 00       	mov    edx,0x1000
c0012cf6:	89 de                	mov    esi,ebx
c0012cf8:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012cfc:	89 d1                	mov    ecx,edx
c0012cfe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d00:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012d03:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012d09:	09 c8                	or     eax,ecx
c0012d0b:	83 c8 02             	or     eax,0x2
c0012d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012d11:	0f 20 d8             	mov    eax,cr3
c0012d14:	0f 22 d8             	mov    cr3,eax
c0012d17:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012d1b:	89 df                	mov    edi,ebx
c0012d1d:	89 d1                	mov    ecx,edx
c0012d1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	e9 53 ff ff ff       	jmp    c0012c7c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0012d29:	c1 e8 0c             	shr    eax,0xc
c0012d2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d30:	e8 db c0 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012d35:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012d38:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012d3e:	09 c2                	or     edx,eax
c0012d40:	81 ca 01 08 00 00    	or     edx,0x801
c0012d46:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0012d49:	a1 0c 42 02 c0       	mov    eax,ds:0xc002420c
c0012d4e:	85 c0                	test   eax,eax
c0012d50:	7e 44                	jle    c0012d96 <VAS::tryLoadBackOffDisk(unsigned long)+0x170>
c0012d52:	89 df                	mov    edi,ebx
c0012d54:	31 f6                	xor    esi,esi
c0012d56:	83 ec 0c             	sub    esp,0xc
c0012d59:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0012d5d:	55                   	push   ebp
c0012d5e:	e8 1f f3 ff ff       	call   c0012082 <Virt::swapIDToSector(unsigned long)>
c0012d63:	31 d2                	xor    edx,edx
c0012d65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d68:	81 c7 00 02 00 00    	add    edi,0x200
c0012d6e:	6a 01                	push   0x1
c0012d70:	52                   	push   edx
c0012d71:	01 f0                	add    eax,esi
c0012d73:	83 c6 01             	add    esi,0x1
c0012d76:	50                   	push   eax
c0012d77:	0f be 05 18 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024218
c0012d7e:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012d85:	50                   	push   eax
c0012d86:	e8 45 73 ff ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c0012d8b:	83 c4 20             	add    esp,0x20
c0012d8e:	39 35 0c 42 02 c0    	cmp    DWORD PTR ds:0xc002420c,esi
c0012d94:	7f c0                	jg     c0012d56 <VAS::tryLoadBackOffDisk(unsigned long)+0x130>
c0012d96:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012d9b:	83 ec 04             	sub    esp,0x4
c0012d9e:	83 e8 01             	sub    eax,0x1
c0012da1:	50                   	push   eax
c0012da2:	53                   	push   ebx
c0012da3:	68 3c 27 02 c0       	push   0xc002273c
c0012da8:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012dad:	e8 9c 41 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012db2:	58                   	pop    eax
c0012db3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012db7:	52                   	push   edx
c0012db8:	e8 a2 f2 ff ff       	call   c001205f <Virt::freeSwapfilePage(unsigned long)>
c0012dbd:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0012dc5:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0012dcb:	83 c4 10             	add    esp,0x10
c0012dce:	85 c9                	test   ecx,ecx
c0012dd0:	75 01                	jne    c0012dd3 <VAS::tryLoadBackOffDisk(unsigned long)+0x1ad>
c0012dd2:	fb                   	sti    
c0012dd3:	0f 20 d8             	mov    eax,cr3
c0012dd6:	0f 22 d8             	mov    cr3,eax
c0012dd9:	e9 9e fe ff ff       	jmp    c0012c7c <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c0012dde <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012dde:	55                   	push   ebp
c0012ddf:	57                   	push   edi
c0012de0:	56                   	push   esi
c0012de1:	53                   	push   ebx
c0012de2:	83 ec 28             	sub    esp,0x28
c0012de5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012de9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012ded:	50                   	push   eax
c0012dee:	e8 50 f1 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c0012df3:	83 c4 0c             	add    esp,0xc
c0012df6:	6a 07                	push   0x7
c0012df8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012dfc:	52                   	push   edx
c0012dfd:	89 c5                	mov    ebp,eax
c0012dff:	53                   	push   ebx
c0012e00:	e8 1f f9 ff ff       	call   c0012724 <VAS::allocatePages(int, int)>
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012e0c:	89 c7                	mov    edi,eax
c0012e0e:	85 c9                	test   ecx,ecx
c0012e10:	74 2f                	je     c0012e41 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012e12:	31 f6                	xor    esi,esi
c0012e14:	e8 f7 bf ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012e19:	83 c6 01             	add    esi,0x1
c0012e1c:	6a 03                	push   0x3
c0012e1e:	55                   	push   ebp
c0012e1f:	50                   	push   eax
c0012e20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012e24:	53                   	push   ebx
c0012e25:	e8 f2 f7 ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e2a:	6a 07                	push   0x7
c0012e2c:	57                   	push   edi
c0012e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012e31:	50                   	push   eax
c0012e32:	53                   	push   ebx
c0012e33:	e8 e4 f7 ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012e38:	83 c4 20             	add    esp,0x20
c0012e3b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0012e3f:	75 d3                	jne    c0012e14 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0012e41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e45:	89 28                	mov    DWORD PTR [eax],ebp
c0012e47:	83 c4 1c             	add    esp,0x1c
c0012e4a:	89 f8                	mov    eax,edi
c0012e4c:	5b                   	pop    ebx
c0012e4d:	5e                   	pop    esi
c0012e4e:	5f                   	pop    edi
c0012e4f:	5d                   	pop    ebp
c0012e50:	c3                   	ret    
c0012e51:	90                   	nop

c0012e52 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0012e52:	53                   	push   ebx
c0012e53:	83 ec 14             	sub    esp,0x14
c0012e56:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012e5a:	68 9c 25 02 c0       	push   0xc002259c
c0012e5f:	e8 ea 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e64:	c7 04 24 fc 25 02 c0 	mov    DWORD PTR [esp],0xc00225fc
c0012e6b:	e8 de 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012e70:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012e74:	83 c4 18             	add    esp,0x18
c0012e77:	5b                   	pop    ebx
c0012e78:	e9 c4 f3 ff ff       	jmp    c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0012e7d:	90                   	nop

c0012e7e <VAS::scanForEviction()>:
c0012e7e:	57                   	push   edi
c0012e7f:	56                   	push   esi
c0012e80:	31 f6                	xor    esi,esi
c0012e82:	53                   	push   ebx
c0012e83:	83 ec 10             	sub    esp,0x10
c0012e86:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012e8a:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012e8d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012e93:	75 0e                	jne    c0012ea3 <VAS::scanForEviction()+0x25>
c0012e95:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012e98:	89 da                	mov    edx,ebx
c0012e9a:	c1 ea 16             	shr    edx,0x16
c0012e9d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012ea1:	74 57                	je     c0012efa <VAS::scanForEviction()+0x7c>
c0012ea3:	53                   	push   ebx
c0012ea4:	57                   	push   edi
c0012ea5:	e8 78 f3 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0012eaa:	5a                   	pop    edx
c0012eab:	59                   	pop    ecx
c0012eac:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eae:	89 d1                	mov    ecx,edx
c0012eb0:	c1 e9 0c             	shr    ecx,0xc
c0012eb3:	74 10                	je     c0012ec5 <VAS::scanForEviction()+0x47>
c0012eb5:	89 d1                	mov    ecx,edx
c0012eb7:	81 e1 01 08 00 00    	and    ecx,0x801
c0012ebd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012ec3:	74 40                	je     c0012f05 <VAS::scanForEviction()+0x87>
c0012ec5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012ecb:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012ed1:	76 2d                	jbe    c0012f00 <VAS::scanForEviction()+0x82>
c0012ed3:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0012eda:	83 c6 01             	add    esi,0x1
c0012edd:	83 fe 03             	cmp    esi,0x3
c0012ee0:	74 32                	je     c0012f14 <VAS::scanForEviction()+0x96>
c0012ee2:	31 db                	xor    ebx,ebx
c0012ee4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012eea:	75 b7                	jne    c0012ea3 <VAS::scanForEviction()+0x25>
c0012eec:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012eef:	89 da                	mov    edx,ebx
c0012ef1:	c1 ea 16             	shr    edx,0x16
c0012ef4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012ef8:	75 a9                	jne    c0012ea3 <VAS::scanForEviction()+0x25>
c0012efa:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012f00:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0012f03:	eb 88                	jmp    c0012e8d <VAS::scanForEviction()+0xf>
c0012f05:	f6 c2 20             	test   dl,0x20
c0012f08:	74 13                	je     c0012f1d <VAS::scanForEviction()+0x9f>
c0012f0a:	83 e2 df             	and    edx,0xffffffdf
c0012f0d:	89 10                	mov    DWORD PTR [eax],edx
c0012f0f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012f12:	eb b1                	jmp    c0012ec5 <VAS::scanForEviction()+0x47>
c0012f14:	83 c4 10             	add    esp,0x10
c0012f17:	31 c0                	xor    eax,eax
c0012f19:	5b                   	pop    ebx
c0012f1a:	5e                   	pop    esi
c0012f1b:	5f                   	pop    edi
c0012f1c:	c3                   	ret    
c0012f1d:	89 d0                	mov    eax,edx
c0012f1f:	83 ec 08             	sub    esp,0x8
c0012f22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f2b:	53                   	push   ebx
c0012f2c:	68 51 27 02 c0       	push   0xc0022751
c0012f31:	e8 18 40 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f36:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0012f39:	58                   	pop    eax
c0012f3a:	5a                   	pop    edx
c0012f3b:	51                   	push   ecx
c0012f3c:	57                   	push   edi
c0012f3d:	e8 06 fc ff ff       	call   c0012b48 <VAS::evict(unsigned long)>
c0012f42:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012f45:	5b                   	pop    ebx
c0012f46:	5e                   	pop    esi
c0012f47:	50                   	push   eax
c0012f48:	68 65 27 02 c0       	push   0xc0022765
c0012f4d:	e8 fc 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f52:	58                   	pop    eax
c0012f53:	5a                   	pop    edx
c0012f54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f58:	50                   	push   eax
c0012f59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f5d:	68 78 27 02 c0       	push   0xc0022778
c0012f62:	e8 e7 3f ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0012f67:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0012f6a:	83 c4 10             	add    esp,0x10
c0012f6d:	81 c1 00 10 00 00    	add    ecx,0x1000
c0012f73:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0012f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f7a:	83 c4 10             	add    esp,0x10
c0012f7d:	5b                   	pop    ebx
c0012f7e:	5e                   	pop    esi
c0012f7f:	5f                   	pop    edi
c0012f80:	c3                   	ret    

c0012f81 <mapVASFirstTime>:
c0012f81:	55                   	push   ebp
c0012f82:	57                   	push   edi
c0012f83:	56                   	push   esi
c0012f84:	53                   	push   ebx
c0012f85:	83 ec 0c             	sub    esp,0xc
c0012f88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f8d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012f90:	83 fa 01             	cmp    edx,0x1
c0012f93:	0f 84 cb 00 00 00    	je     c0013064 <mapVASFirstTime+0xe3>
c0012f99:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012f9c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012fa1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012fa6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0012fa9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0012faf:	c1 e5 15             	shl    ebp,0x15
c0012fb2:	29 eb                	sub    ebx,ebp
c0012fb4:	29 ef                	sub    edi,ebp
c0012fb6:	e8 55 be ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012fbb:	83 ec 0c             	sub    esp,0xc
c0012fbe:	68 03 04 00 00       	push   0x403
c0012fc3:	6a 01                	push   0x1
c0012fc5:	53                   	push   ebx
c0012fc6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012fcc:	50                   	push   eax
c0012fcd:	56                   	push   esi
c0012fce:	e8 43 f8 ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012fd3:	83 c4 20             	add    esp,0x20
c0012fd6:	39 fb                	cmp    ebx,edi
c0012fd8:	75 dc                	jne    c0012fb6 <mapVASFirstTime+0x35>
c0012fda:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012fdf:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012fe4:	29 eb                	sub    ebx,ebp
c0012fe6:	29 ef                	sub    edi,ebp
c0012fe8:	e8 23 be ff ff       	call   c000ee10 <Phys::allocatePage()>
c0012fed:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0012ff1:	83 fa 01             	cmp    edx,0x1
c0012ff4:	19 d2                	sbb    edx,edx
c0012ff6:	83 ec 0c             	sub    esp,0xc
c0012ff9:	83 e2 04             	and    edx,0x4
c0012ffc:	81 c2 03 04 00 00    	add    edx,0x403
c0013002:	52                   	push   edx
c0013003:	6a 01                	push   0x1
c0013005:	53                   	push   ebx
c0013006:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001300c:	50                   	push   eax
c001300d:	56                   	push   esi
c001300e:	e8 03 f8 ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013013:	83 c4 20             	add    esp,0x20
c0013016:	39 df                	cmp    edi,ebx
c0013018:	75 ce                	jne    c0012fe8 <mapVASFirstTime+0x67>
c001301a:	83 ec 0c             	sub    esp,0xc
c001301d:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c0013022:	6a 04                	push   0x4
c0013024:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c001302a:	6a ff                	push   0xffffffff
c001302c:	c1 eb 0c             	shr    ebx,0xc
c001302f:	53                   	push   ebx
c0013030:	68 00 50 02 c0       	push   0xc0025000
c0013035:	56                   	push   esi
c0013036:	e8 81 f3 ff ff       	call   c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001303b:	83 c4 14             	add    esp,0x14
c001303e:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c0013043:	6a 04                	push   0x4
c0013045:	6a ff                	push   0xffffffff
c0013047:	53                   	push   ebx
c0013048:	68 00 50 02 c0       	push   0xc0025000
c001304d:	50                   	push   eax
c001304e:	e8 69 f3 ff ff       	call   c00123bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013053:	0f 20 d8             	mov    eax,cr3
c0013056:	0f 22 d8             	mov    cr3,eax
c0013059:	83 c4 20             	add    esp,0x20
c001305c:	83 c4 0c             	add    esp,0xc
c001305f:	5b                   	pop    ebx
c0013060:	5e                   	pop    esi
c0013061:	5f                   	pop    edi
c0013062:	5d                   	pop    ebp
c0013063:	c3                   	ret    
c0013064:	83 ec 0c             	sub    esp,0xc
c0013067:	68 85 27 02 c0       	push   0xc0022785
c001306c:	e8 dd 3e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013071:	83 c4 10             	add    esp,0x10
c0013074:	83 c4 0c             	add    esp,0xc
c0013077:	5b                   	pop    ebx
c0013078:	5e                   	pop    esi
c0013079:	5f                   	pop    edi
c001307a:	5d                   	pop    ebp
c001307b:	c3                   	ret    

c001307c <SysEject(regs*)>:
c001307c:	83 ec 0c             	sub    esp,0xc
c001307f:	83 ca ff             	or     edx,0xffffffff
c0013082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013086:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013089:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001308e:	83 e9 41             	sub    ecx,0x41
c0013091:	83 f9 19             	cmp    ecx,0x19
c0013094:	77 18                	ja     c00130ae <SysEject(regs*)+0x32>
c0013096:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001309d:	85 c9                	test   ecx,ecx
c001309f:	74 0d                	je     c00130ae <SysEject(regs*)+0x32>
c00130a1:	83 ec 0c             	sub    esp,0xc
c00130a4:	51                   	push   ecx
c00130a5:	e8 bc 6f ff ff       	call   c000a066 <LogicalDisk::eject()>
c00130aa:	83 c4 10             	add    esp,0x10
c00130ad:	99                   	cdq    
c00130ae:	83 c4 0c             	add    esp,0xc
c00130b1:	c3                   	ret    

c00130b2 <SysExit(regs*)>:
c00130b2:	83 ec 18             	sub    esp,0x18
c00130b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130b9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00130bc:	e8 8f 2a 00 00       	call   c0015b50 <terminateTask(int)>
c00130c1:	83 c8 ff             	or     eax,0xffffffff
c00130c4:	83 c4 1c             	add    esp,0x1c
c00130c7:	89 c2                	mov    edx,eax
c00130c9:	c3                   	ret    

c00130ca <SysGetCwd(regs*)>:
c00130ca:	83 ec 10             	sub    esp,0x10
c00130cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130d1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00130d4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00130d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130dc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00130df:	e8 c8 4c ff ff       	call   c0007dac <Fs::getcwd(Process*, char*, int)>
c00130e4:	83 c4 1c             	add    esp,0x1c
c00130e7:	99                   	cdq    
c00130e8:	c3                   	ret    

c00130e9 <SysGetPID(regs*)>:
c00130e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00130f3:	99                   	cdq    
c00130f4:	c3                   	ret    

c00130f5 <SysGetRAMData(regs*)>:
c00130f5:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c00130ff:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c0013105:	99                   	cdq    
c0013106:	f7 f9                	idiv   ecx
c0013108:	c1 e0 18             	shl    eax,0x18
c001310b:	09 c8                	or     eax,ecx
c001310d:	99                   	cdq    
c001310e:	c3                   	ret    

c001310f <SysGetVGAPtr(regs*)>:
c001310f:	55                   	push   ebp
c0013110:	57                   	push   edi
c0013111:	56                   	push   esi
c0013112:	53                   	push   ebx
c0013113:	83 ec 18             	sub    esp,0x18
c0013116:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001311a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001311d:	e8 e2 24 00 00       	call   c0015604 <Thr::processFromPID(int)>
c0013122:	83 c4 10             	add    esp,0x10
c0013125:	89 c1                	mov    ecx,eax
c0013127:	b8 01 00 00 00       	mov    eax,0x1
c001312c:	85 c9                	test   ecx,ecx
c001312e:	74 57                	je     c0013187 <SysGetVGAPtr(regs*)+0x78>
c0013130:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013134:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001313a:	74 0c                	je     c0013148 <SysGetVGAPtr(regs*)+0x39>
c001313c:	83 ec 0c             	sub    esp,0xc
c001313f:	55                   	push   ebp
c0013140:	e8 f4 de ff ff       	call   c0011039 <setActiveTerminal(VgaText*)>
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001314b:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013150:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013153:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013155:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013158:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001315b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013161:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013164:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013167:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001316d:	50                   	push   eax
c001316e:	50                   	push   eax
c001316f:	68 9e 27 02 c0       	push   0xc002279e
c0013174:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013177:	05 a8 0f 00 00       	add    eax,0xfa8
c001317c:	50                   	push   eax
c001317d:	e8 ce d4 fe ff       	call   c0000650 <strcpy>
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	31 c0                	xor    eax,eax
c0013187:	83 c4 0c             	add    esp,0xc
c001318a:	31 d2                	xor    edx,edx
c001318c:	5b                   	pop    ebx
c001318d:	5e                   	pop    esi
c001318e:	5f                   	pop    edi
c001318f:	5d                   	pop    ebp
c0013190:	c3                   	ret    
c0013191:	66 90                	xchg   ax,ax
c0013193:	90                   	nop

c0013194 <SysKill(regs*)>:
c0013194:	53                   	push   ebx
c0013195:	83 ec 08             	sub    esp,0x8
c0013198:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001319c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c00131a0:	75 16                	jne    c00131b8 <SysKill(regs*)+0x24>
c00131a2:	83 ec 0c             	sub    esp,0xc
c00131a5:	68 a8 27 02 c0       	push   0xc00227a8
c00131aa:	e8 67 ba ff ff       	call   c000ec16 <KePanic(char const*)>
c00131af:	83 c4 10             	add    esp,0x10
c00131b2:	e9 89 00 00 00       	jmp    c0013240 <SysKill(regs*)+0xac>
c00131b7:	90                   	nop
c00131b8:	83 ec 0c             	sub    esp,0xc
c00131bb:	68 cc c6 02 c0       	push   0xc002c6cc
c00131c0:	e8 63 cc 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00131c5:	8d 76 00             	lea    esi,[esi+0x0]
c00131c8:	83 c4 10             	add    esp,0x10
c00131cb:	85 c0                	test   eax,eax
c00131cd:	74 19                	je     c00131e8 <SysKill(regs*)+0x54>
c00131cf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00131d2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00131d5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00131d7:	74 33                	je     c001320c <SysKill(regs*)+0x78>
c00131d9:	52                   	push   edx
c00131da:	52                   	push   edx
c00131db:	50                   	push   eax
c00131dc:	68 cc c6 02 c0       	push   0xc002c6cc
c00131e1:	e8 4e d1 00 00       	call   c0020334 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00131e6:	eb e0                	jmp    c00131c8 <SysKill(regs*)+0x34>
c00131e8:	83 ec 0c             	sub    esp,0xc
c00131eb:	68 c0 c6 02 c0       	push   0xc002c6c0
c00131f0:	e8 33 cc 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00131f5:	8d 76 00             	lea    esi,[esi+0x0]
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	85 c0                	test   eax,eax
c00131fd:	74 41                	je     c0013240 <SysKill(regs*)+0xac>
c00131ff:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013202:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013205:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013207:	75 27                	jne    c0013230 <SysKill(regs*)+0x9c>
c0013209:	8d 76 00             	lea    esi,[esi+0x0]
c001320c:	51                   	push   ecx
c001320d:	51                   	push   ecx
c001320e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013211:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013216:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013219:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001321f:	e8 14 cb ff ff       	call   c000fd38 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013224:	83 c4 10             	add    esp,0x10
c0013227:	31 c0                	xor    eax,eax
c0013229:	31 d2                	xor    edx,edx
c001322b:	eb 1b                	jmp    c0013248 <SysKill(regs*)+0xb4>
c001322d:	8d 76 00             	lea    esi,[esi+0x0]
c0013230:	52                   	push   edx
c0013231:	52                   	push   edx
c0013232:	50                   	push   eax
c0013233:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013238:	e8 f7 d0 00 00       	call   c0020334 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001323d:	eb b9                	jmp    c00131f8 <SysKill(regs*)+0x64>
c001323f:	90                   	nop
c0013240:	83 c8 ff             	or     eax,0xffffffff
c0013243:	89 c2                	mov    edx,eax
c0013245:	8d 76 00             	lea    esi,[esi+0x0]
c0013248:	83 c4 08             	add    esp,0x8
c001324b:	5b                   	pop    ebx
c001324c:	c3                   	ret    

c001324d <SysLoadDLL(regs*)>:
c001324d:	56                   	push   esi
c001324e:	31 d2                	xor    edx,edx
c0013250:	53                   	push   ebx
c0013251:	b8 01 00 00 00       	mov    eax,0x1
c0013256:	51                   	push   ecx
c0013257:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001325b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001325f:	0f 84 8c 00 00 00    	je     c00132f1 <SysLoadDLL(regs*)+0xa4>
c0013265:	83 ec 0c             	sub    esp,0xc
c0013268:	68 14 01 00 00       	push   0x114
c001326d:	e8 5e b6 ff ff       	call   c000e8d0 <malloc>
c0013272:	83 c4 0c             	add    esp,0xc
c0013275:	89 c3                	mov    ebx,eax
c0013277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001327c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001327f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013282:	53                   	push   ebx
c0013283:	e8 84 4e ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013288:	83 c4 10             	add    esp,0x10
c001328b:	31 d2                	xor    edx,edx
c001328d:	85 db                	test   ebx,ebx
c001328f:	b8 02 00 00 00       	mov    eax,0x2
c0013294:	74 5b                	je     c00132f1 <SysLoadDLL(regs*)+0xa4>
c0013296:	83 ec 0c             	sub    esp,0xc
c0013299:	53                   	push   ebx
c001329a:	e8 4f 51 ff ff       	call   c00083ee <File::exists()>
c001329f:	83 c4 10             	add    esp,0x10
c00132a2:	84 c0                	test   al,al
c00132a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132a6:	75 11                	jne    c00132b9 <SysLoadDLL(regs*)+0x6c>
c00132a8:	83 ec 0c             	sub    esp,0xc
c00132ab:	53                   	push   ebx
c00132ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132af:	83 c4 10             	add    esp,0x10
c00132b2:	b8 03 00 00 00       	mov    eax,0x3
c00132b7:	eb 36                	jmp    c00132ef <SysLoadDLL(regs*)+0xa2>
c00132b9:	83 ec 0c             	sub    esp,0xc
c00132bc:	53                   	push   ebx
c00132bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132c0:	58                   	pop    eax
c00132c1:	5a                   	pop    edx
c00132c2:	6a 00                	push   0x0
c00132c4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00132c7:	e8 f6 15 00 00       	call   c00148c2 <Thr::loadDLL(char const*, bool)>
c00132cc:	83 c4 10             	add    esp,0x10
c00132cf:	31 d2                	xor    edx,edx
c00132d1:	89 c1                	mov    ecx,eax
c00132d3:	b8 04 00 00 00       	mov    eax,0x4
c00132d8:	85 c9                	test   ecx,ecx
c00132da:	74 15                	je     c00132f1 <SysLoadDLL(regs*)+0xa4>
c00132dc:	53                   	push   ebx
c00132dd:	53                   	push   ebx
c00132de:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00132e4:	51                   	push   ecx
c00132e5:	e8 39 18 00 00       	call   c0014b23 <Thr::executeDLL(unsigned long, void*)>
c00132ea:	83 c4 10             	add    esp,0x10
c00132ed:	31 c0                	xor    eax,eax
c00132ef:	31 d2                	xor    edx,edx
c00132f1:	59                   	pop    ecx
c00132f2:	5b                   	pop    ebx
c00132f3:	5e                   	pop    esi
c00132f4:	c3                   	ret    

c00132f5 <SysRead(regs*)>:
c00132f5:	57                   	push   edi
c00132f6:	56                   	push   esi
c00132f7:	53                   	push   ebx
c00132f8:	83 ec 10             	sub    esp,0x10
c00132fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00132ff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013302:	83 f8 02             	cmp    eax,0x2
c0013305:	77 10                	ja     c0013317 <SysRead(regs*)+0x22>
c0013307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001330c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001330f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013315:	eb 0e                	jmp    c0013325 <SysRead(regs*)+0x30>
c0013317:	83 ec 0c             	sub    esp,0xc
c001331a:	50                   	push   eax
c001331b:	e8 c9 ea ff ff       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c0013320:	83 c4 10             	add    esp,0x10
c0013323:	89 c1                	mov    ecx,eax
c0013325:	83 c8 ff             	or     eax,0xffffffff
c0013328:	85 c9                	test   ecx,ecx
c001332a:	89 c2                	mov    edx,eax
c001332c:	74 28                	je     c0013356 <SysRead(regs*)+0x61>
c001332e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013336:	83 ec 0c             	sub    esp,0xc
c0013339:	31 ff                	xor    edi,edi
c001333b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001333f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013341:	52                   	push   edx
c0013342:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013345:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013348:	57                   	push   edi
c0013349:	56                   	push   esi
c001334a:	51                   	push   ecx
c001334b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001334e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013352:	83 c4 20             	add    esp,0x20
c0013355:	99                   	cdq    
c0013356:	83 c4 10             	add    esp,0x10
c0013359:	5b                   	pop    ebx
c001335a:	5e                   	pop    esi
c001335b:	5f                   	pop    edi
c001335c:	c3                   	ret    

c001335d <SysRegisterSignal(regs*)>:
c001335d:	83 ec 18             	sub    esp,0x18
c0013360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013364:	6a 00                	push   0x0
c0013366:	6a 00                	push   0x0
c0013368:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001336b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001336e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013373:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013376:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001337c:	e8 81 c9 ff ff       	call   c000fd02 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013381:	83 c4 2c             	add    esp,0x2c
c0013384:	99                   	cdq    
c0013385:	c3                   	ret    

c0013386 <SysRegistryGetTypeFromPath(regs*)>:
c0013386:	53                   	push   ebx
c0013387:	81 ec 40 01 00 00    	sub    esp,0x140
c001338d:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013394:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013397:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001339a:	e8 0c 9f ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001339f:	83 c4 10             	add    esp,0x10
c00133a2:	85 c0                	test   eax,eax
c00133a4:	89 c1                	mov    ecx,eax
c00133a6:	74 15                	je     c00133bd <SysRegistryGetTypeFromPath(regs*)+0x37>
c00133a8:	50                   	push   eax
c00133a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00133ad:	50                   	push   eax
c00133ae:	51                   	push   ecx
c00133af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00133b2:	e8 d9 9a ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133b7:	83 c4 10             	add    esp,0x10
c00133ba:	99                   	cdq    
c00133bb:	eb 05                	jmp    c00133c2 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00133bd:	83 c8 ff             	or     eax,0xffffffff
c00133c0:	89 c2                	mov    edx,eax
c00133c2:	81 c4 38 01 00 00    	add    esp,0x138
c00133c8:	5b                   	pop    ebx
c00133c9:	c3                   	ret    

c00133ca <SysRegistryReadExtent(regs*)>:
c00133ca:	83 ec 1c             	sub    esp,0x1c
c00133cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00133d1:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00133d4:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00133d7:	85 c0                	test   eax,eax
c00133d9:	79 1f                	jns    c00133fa <SysRegistryReadExtent(regs*)+0x30>
c00133db:	52                   	push   edx
c00133dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00133e1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00133e5:	52                   	push   edx
c00133e6:	50                   	push   eax
c00133e7:	51                   	push   ecx
c00133e8:	e8 95 99 ff ff       	call   c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00133ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00133f5:	83 c4 10             	add    esp,0x10
c00133f8:	eb 14                	jmp    c001340e <SysRegistryReadExtent(regs*)+0x44>
c00133fa:	83 ec 04             	sub    esp,0x4
c00133fd:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013400:	50                   	push   eax
c0013401:	51                   	push   ecx
c0013402:	e8 19 94 ff ff       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c0013407:	83 c4 10             	add    esp,0x10
c001340a:	31 c0                	xor    eax,eax
c001340c:	31 d2                	xor    edx,edx
c001340e:	83 c4 1c             	add    esp,0x1c
c0013411:	c3                   	ret    

c0013412 <SysRegistryPathToExtentLookup(regs*)>:
c0013412:	83 ec 14             	sub    esp,0x14
c0013415:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013419:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001341c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001341f:	e8 87 9e ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013424:	83 c4 1c             	add    esp,0x1c
c0013427:	99                   	cdq    
c0013428:	c3                   	ret    

c0013429 <SysRegistryEnterDirectory(regs*)>:
c0013429:	83 ec 14             	sub    esp,0x14
c001342c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013430:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013433:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013436:	e8 5c 94 ff ff       	call   c000c897 <CmEnterDirectory(Reghive_Tag*, int)>
c001343b:	83 c4 1c             	add    esp,0x1c
c001343e:	99                   	cdq    
c001343f:	c3                   	ret    

c0013440 <SysRegistryGetNext(regs*)>:
c0013440:	83 ec 14             	sub    esp,0x14
c0013443:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013447:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001344a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001344d:	e8 84 94 ff ff       	call   c000c8d6 <CmGetNext(Reghive_Tag*, int)>
c0013452:	83 c4 1c             	add    esp,0x1c
c0013455:	99                   	cdq    
c0013456:	c3                   	ret    

c0013457 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013457:	57                   	push   edi
c0013458:	56                   	push   esi
c0013459:	53                   	push   ebx
c001345a:	81 ec 34 01 00 00    	sub    esp,0x134
c0013460:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013467:	8d 7c 24 08          	lea    edi,[esp+0x8]
c001346b:	57                   	push   edi
c001346c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001346f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013472:	e8 19 9a ff ff       	call   c000ce90 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013477:	89 c3                	mov    ebx,eax
c0013479:	58                   	pop    eax
c001347a:	5a                   	pop    edx
c001347b:	57                   	push   edi
c001347c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001347f:	e8 cc d1 fe ff       	call   c0000650 <strcpy>
c0013484:	81 c4 40 01 00 00    	add    esp,0x140
c001348a:	89 d8                	mov    eax,ebx
c001348c:	5b                   	pop    ebx
c001348d:	99                   	cdq    
c001348e:	5e                   	pop    esi
c001348f:	5f                   	pop    edi
c0013490:	c3                   	ret    

c0013491 <SysRegistryOpen(regs*)>:
c0013491:	83 ec 18             	sub    esp,0x18
c0013494:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013498:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001349b:	e8 10 92 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c00134a0:	83 c4 1c             	add    esp,0x1c
c00134a3:	99                   	cdq    
c00134a4:	c3                   	ret    

c00134a5 <SysRegistryClose(regs*)>:
c00134a5:	83 ec 18             	sub    esp,0x18
c00134a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134ac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00134af:	e8 1a 93 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c00134b4:	31 c0                	xor    eax,eax
c00134b6:	31 d2                	xor    edx,edx
c00134b8:	83 c4 1c             	add    esp,0x1c
c00134bb:	c3                   	ret    

c00134bc <SysRegistryEasyReadString(regs*)>:
c00134bc:	57                   	push   edi
c00134bd:	56                   	push   esi
c00134be:	53                   	push   ebx
c00134bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134c3:	83 ec 0c             	sub    esp,0xc
c00134c6:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00134c9:	e8 e2 91 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c00134ce:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00134d1:	5a                   	pop    edx
c00134d2:	59                   	pop    ecx
c00134d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00134d6:	89 c3                	mov    ebx,eax
c00134d8:	50                   	push   eax
c00134d9:	e8 cd 9d ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	89 c1                	mov    ecx,eax
c00134e3:	b8 01 00 00 00       	mov    eax,0x1
c00134e8:	85 c9                	test   ecx,ecx
c00134ea:	7e 16                	jle    c0013502 <SysRegistryEasyReadString(regs*)+0x46>
c00134ec:	50                   	push   eax
c00134ed:	57                   	push   edi
c00134ee:	51                   	push   ecx
c00134ef:	53                   	push   ebx
c00134f0:	e8 2b 93 ff ff       	call   c000c820 <CmGetString(Reghive_Tag*, int, char*)>
c00134f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134f8:	e8 d1 92 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c00134fd:	83 c4 10             	add    esp,0x10
c0013500:	31 c0                	xor    eax,eax
c0013502:	5b                   	pop    ebx
c0013503:	31 d2                	xor    edx,edx
c0013505:	5e                   	pop    esi
c0013506:	5f                   	pop    edi
c0013507:	c3                   	ret    

c0013508 <SysRegistryEasyReadInteger(regs*)>:
c0013508:	56                   	push   esi
c0013509:	53                   	push   ebx
c001350a:	83 ec 10             	sub    esp,0x10
c001350d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013511:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013514:	e8 97 91 ff ff       	call   c000c6b0 <CmOpen(char const*)>
c0013519:	5a                   	pop    edx
c001351a:	59                   	pop    ecx
c001351b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001351e:	89 c3                	mov    ebx,eax
c0013520:	50                   	push   eax
c0013521:	e8 85 9d ff ff       	call   c000d2ab <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	89 c1                	mov    ecx,eax
c001352b:	b8 01 00 00 00       	mov    eax,0x1
c0013530:	85 c9                	test   ecx,ecx
c0013532:	7e 18                	jle    c001354c <SysRegistryEasyReadInteger(regs*)+0x44>
c0013534:	50                   	push   eax
c0013535:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013538:	51                   	push   ecx
c0013539:	53                   	push   ebx
c001353a:	e8 43 98 ff ff       	call   c000cd82 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001353f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013542:	e8 87 92 ff ff       	call   c000c7ce <CmClose(Reghive_Tag*)>
c0013547:	83 c4 10             	add    esp,0x10
c001354a:	31 c0                	xor    eax,eax
c001354c:	59                   	pop    ecx
c001354d:	31 d2                	xor    edx,edx
c001354f:	5b                   	pop    ebx
c0013550:	5e                   	pop    esi
c0013551:	c3                   	ret    

c0013552 <SysSbrk(regs*)>:
c0013552:	56                   	push   esi
c0013553:	53                   	push   ebx
c0013554:	50                   	push   eax
c0013555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001355a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001355e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013561:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013564:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001356a:	85 db                	test   ebx,ebx
c001356c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001356f:	74 02                	je     c0013573 <SysSbrk(regs*)+0x21>
c0013571:	79 06                	jns    c0013579 <SysSbrk(regs*)+0x27>
c0013573:	89 f0                	mov    eax,esi
c0013575:	31 d2                	xor    edx,edx
c0013577:	eb 2a                	jmp    c00135a3 <SysSbrk(regs*)+0x51>
c0013579:	83 c8 ff             	or     eax,0xffffffff
c001357c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013582:	89 c2                	mov    edx,eax
c0013584:	77 1d                	ja     c00135a3 <SysSbrk(regs*)+0x51>
c0013586:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001358c:	50                   	push   eax
c001358d:	68 07 0c 00 00       	push   0xc07
c0013592:	c1 ea 0c             	shr    edx,0xc
c0013595:	52                   	push   edx
c0013596:	51                   	push   ecx
c0013597:	e8 88 f1 ff ff       	call   c0012724 <VAS::allocatePages(int, int)>
c001359c:	89 f0                	mov    eax,esi
c001359e:	31 d2                	xor    edx,edx
c00135a0:	83 c4 10             	add    esp,0x10
c00135a3:	59                   	pop    ecx
c00135a4:	5b                   	pop    ebx
c00135a5:	5e                   	pop    esi
c00135a6:	c3                   	ret    

c00135a7 <SysSetCwd(regs*)>:
c00135a7:	83 ec 14             	sub    esp,0x14
c00135aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135b6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00135b9:	e8 cf 4e ff ff       	call   c000848d <Fs::setcwd(Process*, char*)>
c00135be:	83 c4 1c             	add    esp,0x1c
c00135c1:	99                   	cdq    
c00135c2:	c3                   	ret    

c00135c3 <SysSetTime(regs*)>:
c00135c3:	55                   	push   ebp
c00135c4:	31 c9                	xor    ecx,ecx
c00135c6:	57                   	push   edi
c00135c7:	bd 0c 00 00 00       	mov    ebp,0xc
c00135cc:	56                   	push   esi
c00135cd:	53                   	push   ebx
c00135ce:	31 db                	xor    ebx,ebx
c00135d0:	83 ec 10             	sub    esp,0x10
c00135d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00135d7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00135da:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00135dd:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00135e0:	89 c2                	mov    edx,eax
c00135e2:	c1 e8 05             	shr    eax,0x5
c00135e5:	83 e2 1f             	and    edx,0x1f
c00135e8:	42                   	inc    edx
c00135e9:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00135ef:	c1 e7 10             	shl    edi,0x10
c00135f2:	88 d1                	mov    cl,dl
c00135f4:	31 d2                	xor    edx,edx
c00135f6:	f7 f5                	div    ebp
c00135f8:	89 dd                	mov    ebp,ebx
c00135fa:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013600:	88 d5                	mov    ch,dl
c0013602:	31 d2                	xor    edx,edx
c0013604:	0f b7 c1             	movzx  eax,cx
c0013607:	09 f8                	or     eax,edi
c0013609:	bf 3c 00 00 00       	mov    edi,0x3c
c001360e:	89 c1                	mov    ecx,eax
c0013610:	89 f0                	mov    eax,esi
c0013612:	f7 f7                	div    edi
c0013614:	c1 e2 10             	shl    edx,0x10
c0013617:	09 d5                	or     ebp,edx
c0013619:	31 d2                	xor    edx,edx
c001361b:	f7 f7                	div    edi
c001361d:	89 eb                	mov    ebx,ebp
c001361f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013624:	89 f0                	mov    eax,esi
c0013626:	88 d7                	mov    bh,dl
c0013628:	31 d2                	xor    edx,edx
c001362a:	f7 f7                	div    edi
c001362c:	bf 18 00 00 00       	mov    edi,0x18
c0013631:	31 d2                	xor    edx,edx
c0013633:	f7 f7                	div    edi
c0013635:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001363a:	88 d3                	mov    bl,dl
c001363c:	53                   	push   ebx
c001363d:	51                   	push   ecx
c001363e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013644:	e8 11 57 ff ff       	call   c0008d5a <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013649:	83 c4 1c             	add    esp,0x1c
c001364c:	31 d2                	xor    edx,edx
c001364e:	5b                   	pop    ebx
c001364f:	5e                   	pop    esi
c0013650:	83 f0 01             	xor    eax,0x1
c0013653:	5f                   	pop    edi
c0013654:	0f b6 c0             	movzx  eax,al
c0013657:	5d                   	pop    ebp
c0013658:	c3                   	ret    

c0013659 <SysSymlink(regs*)>:
c0013659:	56                   	push   esi
c001365a:	83 c8 ff             	or     eax,0xffffffff
c001365d:	53                   	push   ebx
c001365e:	89 c2                	mov    edx,eax
c0013660:	81 ec 34 02 00 00    	sub    esp,0x234
c0013666:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c001366d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013671:	74 50                	je     c00136c3 <SysSymlink(regs*)+0x6a>
c0013673:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0013676:	85 c9                	test   ecx,ecx
c0013678:	74 49                	je     c00136c3 <SysSymlink(regs*)+0x6a>
c001367a:	6a 01                	push   0x1
c001367c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013681:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013684:	05 0c 01 00 00       	add    eax,0x10c
c0013689:	50                   	push   eax
c001368a:	51                   	push   ecx
c001368b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001368f:	56                   	push   esi
c0013690:	e8 6b 47 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013695:	6a 01                	push   0x1
c0013697:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001369c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001369f:	05 0c 01 00 00       	add    eax,0x10c
c00136a4:	50                   	push   eax
c00136a5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00136a8:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00136af:	53                   	push   ebx
c00136b0:	e8 4b 47 ff ff       	call   c0007e00 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00136b5:	83 c4 18             	add    esp,0x18
c00136b8:	56                   	push   esi
c00136b9:	53                   	push   ebx
c00136ba:	e8 6f 43 ff ff       	call   c0007a2e <KeCreateSymlink(char const*, char const*)>
c00136bf:	83 c4 10             	add    esp,0x10
c00136c2:	99                   	cdq    
c00136c3:	81 c4 34 02 00 00    	add    esp,0x234
c00136c9:	5b                   	pop    ebx
c00136ca:	5e                   	pop    esi
c00136cb:	c3                   	ret    

c00136cc <SysTimezone(regs*)>:
c00136cc:	83 ec 0c             	sub    esp,0xc
c00136cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136d3:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00136d7:	75 17                	jne    c00136f0 <SysTimezone(regs*)+0x24>
c00136d9:	83 ec 0c             	sub    esp,0xc
c00136dc:	68 c9 27 02 c0       	push   0xc00227c9
c00136e1:	e8 68 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00136e6:	83 c8 ff             	or     eax,0xffffffff
c00136e9:	83 c4 10             	add    esp,0x10
c00136ec:	89 c2                	mov    edx,eax
c00136ee:	eb 17                	jmp    c0013707 <SysTimezone(regs*)+0x3b>
c00136f0:	83 ec 0c             	sub    esp,0xc
c00136f3:	68 de 27 02 c0       	push   0xc00227de
c00136f8:	e8 51 38 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00136fd:	83 c4 10             	add    esp,0x10
c0013700:	b8 01 00 00 00       	mov    eax,0x1
c0013705:	31 d2                	xor    edx,edx
c0013707:	83 c4 0c             	add    esp,0xc
c001370a:	c3                   	ret    

c001370b <SysTruncate(regs*)>:
c001370b:	55                   	push   ebp
c001370c:	57                   	push   edi
c001370d:	31 ff                	xor    edi,edi
c001370f:	56                   	push   esi
c0013710:	53                   	push   ebx
c0013711:	83 ec 0c             	sub    esp,0xc
c0013714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013718:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001371b:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001371f:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013722:	89 ce                	mov    esi,ecx
c0013724:	0f 84 9a 00 00 00    	je     c00137c4 <SysTruncate(regs*)+0xb9>
c001372a:	83 ec 0c             	sub    esp,0xc
c001372d:	68 14 01 00 00       	push   0x114
c0013732:	e8 99 b1 ff ff       	call   c000e8d0 <malloc>
c0013737:	83 c4 0c             	add    esp,0xc
c001373a:	89 c3                	mov    ebx,eax
c001373c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013741:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013744:	55                   	push   ebp
c0013745:	53                   	push   ebx
c0013746:	e8 c1 49 ff ff       	call   c000810c <File::File(char const*, Process*)>
c001374b:	83 c4 10             	add    esp,0x10
c001374e:	31 d2                	xor    edx,edx
c0013750:	85 db                	test   ebx,ebx
c0013752:	b8 03 00 00 00       	mov    eax,0x3
c0013757:	0f 84 a2 00 00 00    	je     c00137ff <SysTruncate(regs*)+0xf4>
c001375d:	51                   	push   ecx
c001375e:	51                   	push   ecx
c001375f:	6a 02                	push   0x2
c0013761:	53                   	push   ebx
c0013762:	e8 c3 49 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013767:	83 c4 10             	add    esp,0x10
c001376a:	85 c0                	test   eax,eax
c001376c:	74 13                	je     c0013781 <SysTruncate(regs*)+0x76>
c001376e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013770:	83 ec 0c             	sub    esp,0xc
c0013773:	53                   	push   ebx
c0013774:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013777:	83 c4 10             	add    esp,0x10
c001377a:	b8 04 00 00 00       	mov    eax,0x4
c001377f:	eb 7c                	jmp    c00137fd <SysTruncate(regs*)+0xf2>
c0013781:	52                   	push   edx
c0013782:	57                   	push   edi
c0013783:	56                   	push   esi
c0013784:	53                   	push   ebx
c0013785:	e8 b4 4a ff ff       	call   c000823e <File::truncate(unsigned long long)>
c001378a:	83 c4 10             	add    esp,0x10
c001378d:	85 c0                	test   eax,eax
c001378f:	74 1b                	je     c00137ac <SysTruncate(regs*)+0xa1>
c0013791:	83 ec 0c             	sub    esp,0xc
c0013794:	53                   	push   ebx
c0013795:	e8 ee 49 ff ff       	call   c0008188 <File::close()>
c001379a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001379c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001379f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	b8 05 00 00 00       	mov    eax,0x5
c00137aa:	eb 51                	jmp    c00137fd <SysTruncate(regs*)+0xf2>
c00137ac:	83 ec 0c             	sub    esp,0xc
c00137af:	53                   	push   ebx
c00137b0:	e8 d3 49 ff ff       	call   c0008188 <File::close()>
c00137b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137bd:	83 c4 10             	add    esp,0x10
c00137c0:	31 c0                	xor    eax,eax
c00137c2:	eb 39                	jmp    c00137fd <SysTruncate(regs*)+0xf2>
c00137c4:	31 d2                	xor    edx,edx
c00137c6:	83 fd 02             	cmp    ebp,0x2
c00137c9:	b8 01 00 00 00       	mov    eax,0x1
c00137ce:	7e 2f                	jle    c00137ff <SysTruncate(regs*)+0xf4>
c00137d0:	83 ec 0c             	sub    esp,0xc
c00137d3:	51                   	push   ecx
c00137d4:	e8 10 e6 ff ff       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c00137d9:	83 c4 10             	add    esp,0x10
c00137dc:	31 d2                	xor    edx,edx
c00137de:	89 c1                	mov    ecx,eax
c00137e0:	b8 02 00 00 00       	mov    eax,0x2
c00137e5:	85 c9                	test   ecx,ecx
c00137e7:	74 16                	je     c00137ff <SysTruncate(regs*)+0xf4>
c00137e9:	50                   	push   eax
c00137ea:	57                   	push   edi
c00137eb:	56                   	push   esi
c00137ec:	51                   	push   ecx
c00137ed:	e8 4c 4a ff ff       	call   c000823e <File::truncate(unsigned long long)>
c00137f2:	83 c4 10             	add    esp,0x10
c00137f5:	85 c0                	test   eax,eax
c00137f7:	0f 95 c0             	setne  al
c00137fa:	0f b6 c0             	movzx  eax,al
c00137fd:	31 d2                	xor    edx,edx
c00137ff:	83 c4 0c             	add    esp,0xc
c0013802:	5b                   	pop    ebx
c0013803:	5e                   	pop    esi
c0013804:	5f                   	pop    edi
c0013805:	5d                   	pop    ebp
c0013806:	c3                   	ret    

c0013807 <SysWrite(regs*)>:
c0013807:	57                   	push   edi
c0013808:	56                   	push   esi
c0013809:	53                   	push   ebx
c001380a:	83 ec 10             	sub    esp,0x10
c001380d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013811:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013814:	83 f8 02             	cmp    eax,0x2
c0013817:	77 10                	ja     c0013829 <SysWrite(regs*)+0x22>
c0013819:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001381e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013821:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013827:	eb 0e                	jmp    c0013837 <SysWrite(regs*)+0x30>
c0013829:	83 ec 0c             	sub    esp,0xc
c001382c:	50                   	push   eax
c001382d:	e8 b7 e5 ff ff       	call   c0011de9 <KeGetFileFromDescriptor(int)>
c0013832:	83 c4 10             	add    esp,0x10
c0013835:	89 c1                	mov    ecx,eax
c0013837:	83 c8 ff             	or     eax,0xffffffff
c001383a:	85 c9                	test   ecx,ecx
c001383c:	89 c2                	mov    edx,eax
c001383e:	74 28                	je     c0013868 <SysWrite(regs*)+0x61>
c0013840:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013848:	83 ec 0c             	sub    esp,0xc
c001384b:	31 ff                	xor    edi,edi
c001384d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013851:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013853:	52                   	push   edx
c0013854:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013857:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001385a:	57                   	push   edi
c001385b:	56                   	push   esi
c001385c:	51                   	push   ecx
c001385d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013860:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013864:	83 c4 20             	add    esp,0x20
c0013867:	99                   	cdq    
c0013868:	83 c4 10             	add    esp,0x10
c001386b:	5b                   	pop    ebx
c001386c:	5e                   	pop    esi
c001386d:	5f                   	pop    edi
c001386e:	c3                   	ret    

c001386f <SysWsbe(regs*)>:
c001386f:	55                   	push   ebp
c0013870:	57                   	push   edi
c0013871:	56                   	push   esi
c0013872:	53                   	push   ebx
c0013873:	83 ec 3c             	sub    esp,0x3c
c0013876:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001387a:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0013881:	75 2d                	jne    c00138b0 <SysWsbe(regs*)+0x41>
c0013883:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001388a:	75 24                	jne    c00138b0 <SysWsbe(regs*)+0x41>
c001388c:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0013893:	75 1b                	jne    c00138b0 <SysWsbe(regs*)+0x41>
c0013895:	6a 01                	push   0x1
c0013897:	6a 00                	push   0x0
c0013899:	68 6d 95 00 c0       	push   0xc000956d
c001389e:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00138a4:	e8 bb 18 00 00       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c00138a9:	83 c4 10             	add    esp,0x10
c00138ac:	31 c0                	xor    eax,eax
c00138ae:	eb 52                	jmp    c0013902 <SysWsbe(regs*)+0x93>
c00138b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00138b4:	be 1d 28 02 c0       	mov    esi,0xc002281d
c00138b9:	b9 0b 00 00 00       	mov    ecx,0xb
c00138be:	fc                   	cld    
c00138bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00138c1:	83 ec 0c             	sub    esp,0xc
c00138c4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00138c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00138d0:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00138d6:	8b 06                	mov    eax,DWORD PTR [esi]
c00138d8:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00138db:	57                   	push   edi
c00138dc:	e8 9f cc fe ff       	call   c0000580 <strlen>
c00138e1:	5a                   	pop    edx
c00138e2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00138e6:	52                   	push   edx
c00138e7:	31 d2                	xor    edx,edx
c00138e9:	57                   	push   edi
c00138ea:	52                   	push   edx
c00138eb:	50                   	push   eax
c00138ec:	56                   	push   esi
c00138ed:	ff d5                	call   ebp
c00138ef:	83 c4 14             	add    esp,0x14
c00138f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00138f5:	e8 56 22 00 00       	call   c0015b50 <terminateTask(int)>
c00138fa:	83 c4 10             	add    esp,0x10
c00138fd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013902:	83 c4 3c             	add    esp,0x3c
c0013905:	31 d2                	xor    edx,edx
c0013907:	5b                   	pop    ebx
c0013908:	5e                   	pop    esi
c0013909:	5f                   	pop    edi
c001390a:	5d                   	pop    ebp
c001390b:	c3                   	ret    

c001390c <SysYield(regs*)>:
c001390c:	83 ec 0c             	sub    esp,0xc
c001390f:	fa                   	cli    
c0013910:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013916:	e8 95 1a 00 00       	call   c00153b0 <schedule()>
c001391b:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013922:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013929:	75 01                	jne    c001392c <SysYield(regs*)+0x20>
c001392b:	fb                   	sti    
c001392c:	31 c0                	xor    eax,eax
c001392e:	31 d2                	xor    edx,edx
c0013930:	83 c4 0c             	add    esp,0xc
c0013933:	c3                   	ret    

c0013934 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013934:	55                   	push   ebp
c0013935:	57                   	push   edi
c0013936:	56                   	push   esi
c0013937:	53                   	push   ebx
c0013938:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001393e:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013949:	74 3b                	je     c0013986 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001394b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013953:	74 31                	je     c0013986 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013955:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001395d:	75 27                	jne    c0013986 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001395f:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013966:	05 00 10 00 00       	add    eax,0x1000
c001396b:	89 c2                	mov    edx,eax
c001396d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013972:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013979:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001397f:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0013986:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001398d:	83 ec 0c             	sub    esp,0xc
c0013990:	6a 01                	push   0x1
c0013992:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013998:	e8 a6 e5 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001399d:	83 c4 10             	add    esp,0x10
c00139a0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00139a6:	89 c3                	mov    ebx,eax
c00139a8:	0f 86 27 01 00 00    	jbe    c0013ad5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a1>
c00139ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139b6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00139bd:	c1 ee 0c             	shr    esi,0xc
c00139c0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00139c4:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00139cb:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00139d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00139d6:	29 ef                	sub    edi,ebp
c00139d8:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00139dc:	0f 83 fa 00 00 00    	jae    c0013adc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00139e2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00139e8:	b8 00 10 00 00       	mov    eax,0x1000
c00139ed:	0f 47 f8             	cmova  edi,eax
c00139f0:	83 ec 0c             	sub    esp,0xc
c00139f3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00139fa:	31 d2                	xor    edx,edx
c00139fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013a02:	50                   	push   eax
c0013a03:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013a07:	56                   	push   esi
c0013a08:	52                   	push   edx
c0013a09:	57                   	push   edi
c0013a0a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013a11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a14:	83 c4 20             	add    esp,0x20
c0013a17:	85 c0                	test   eax,eax
c0013a19:	75 06                	jne    c0013a21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0013a1b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013a1f:	74 13                	je     c0013a34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0013a21:	83 ec 0c             	sub    esp,0xc
c0013a24:	53                   	push   ebx
c0013a25:	e8 17 e8 ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0013a2a:	83 c4 10             	add    esp,0x10
c0013a2d:	31 c0                	xor    eax,eax
c0013a2f:	e9 80 01 00 00       	jmp    c0013bb4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x280>
c0013a34:	fa                   	cli    
c0013a35:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013a3b:	e8 d0 b3 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0013a40:	6a 07                	push   0x7
c0013a42:	53                   	push   ebx
c0013a43:	50                   	push   eax
c0013a44:	89 c7                	mov    edi,eax
c0013a46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a4b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a4e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a54:	e8 c3 eb ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013a59:	83 c4 0c             	add    esp,0xc
c0013a5c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013a63:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a69:	6a 00                	push   0x0
c0013a6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a79:	e8 0a ea ff ff       	call   c0012488 <VAS::mapOtherVASIn(bool, VAS*)>
c0013a7e:	58                   	pop    eax
c0013a7f:	5a                   	pop    edx
c0013a80:	68 07 0c 00 00       	push   0xc07
c0013a85:	55                   	push   ebp
c0013a86:	57                   	push   edi
c0013a87:	89 df                	mov    edi,ebx
c0013a89:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013a90:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013a96:	6a 00                	push   0x0
c0013a98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013aa0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013aa6:	e8 c5 ed ff ff       	call   c0012870 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013aab:	b9 00 10 00 00       	mov    ecx,0x1000
c0013ab0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ab2:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013ab9:	83 c4 20             	add    esp,0x20
c0013abc:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013ac3:	75 01                	jne    c0013ac6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0013ac5:	fb                   	sti    
c0013ac6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013aca:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013ad0:	e9 ef fe ff ff       	jmp    c00139c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013ad5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013adc:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013ae3:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013ae9:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013aef:	0f 86 b1 00 00 00    	jbe    c0013ba6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013af5:	fa                   	cli    
c0013af6:	51                   	push   ecx
c0013af7:	31 ff                	xor    edi,edi
c0013af9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b00:	c1 ee 0c             	shr    esi,0xc
c0013b03:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013b09:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b0f:	6a 00                	push   0x0
c0013b11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b19:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b1f:	e8 64 e9 ff ff       	call   c0012488 <VAS::mapOtherVASIn(bool, VAS*)>
c0013b24:	83 c4 10             	add    esp,0x10
c0013b27:	e8 e4 b2 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0013b2c:	47                   	inc    edi
c0013b2d:	6a 07                	push   0x7
c0013b2f:	53                   	push   ebx
c0013b30:	50                   	push   eax
c0013b31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b35:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b3b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013b3e:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013b44:	e8 d3 ea ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b49:	58                   	pop    eax
c0013b4a:	5a                   	pop    edx
c0013b4b:	68 07 0c 00 00       	push   0xc07
c0013b50:	55                   	push   ebp
c0013b51:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013b57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b5b:	50                   	push   eax
c0013b5c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b63:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b69:	6a 00                	push   0x0
c0013b6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b79:	e8 f2 ec ff ff       	call   c0012870 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013b7e:	83 c4 1c             	add    esp,0x1c
c0013b81:	68 00 10 00 00       	push   0x1000
c0013b86:	6a 00                	push   0x0
c0013b88:	53                   	push   ebx
c0013b89:	e8 62 c9 fe ff       	call   c00004f0 <memset>
c0013b8e:	83 c4 10             	add    esp,0x10
c0013b91:	39 fe                	cmp    esi,edi
c0013b93:	77 92                	ja     c0013b27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f3>
c0013b95:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0013b9c:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0013ba3:	75 01                	jne    c0013ba6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x272>
c0013ba5:	fb                   	sti    
c0013ba6:	83 ec 0c             	sub    esp,0xc
c0013ba9:	53                   	push   ebx
c0013baa:	e8 92 e6 ff ff       	call   c0012241 <Virt::freeKernelVirtualPages(unsigned long)>
c0013baf:	83 c4 10             	add    esp,0x10
c0013bb2:	b0 01                	mov    al,0x1
c0013bb4:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013bba:	5b                   	pop    ebx
c0013bbb:	5e                   	pop    esi
c0013bbc:	5f                   	pop    edi
c0013bbd:	5d                   	pop    ebp
c0013bbe:	c3                   	ret    

c0013bbf <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013bbf:	55                   	push   ebp
c0013bc0:	57                   	push   edi
c0013bc1:	56                   	push   esi
c0013bc2:	53                   	push   ebx
c0013bc3:	83 ec 48             	sub    esp,0x48
c0013bc6:	68 14 01 00 00       	push   0x114
c0013bcb:	e8 00 ad ff ff       	call   c000e8d0 <malloc>
c0013bd0:	83 c4 0c             	add    esp,0xc
c0013bd3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013bd7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013bdb:	89 c7                	mov    edi,eax
c0013bdd:	50                   	push   eax
c0013bde:	e8 29 45 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013be3:	58                   	pop    eax
c0013be4:	5a                   	pop    edx
c0013be5:	6a 01                	push   0x1
c0013be7:	57                   	push   edi
c0013be8:	e8 3d 45 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013bed:	83 c4 10             	add    esp,0x10
c0013bf0:	85 c0                	test   eax,eax
c0013bf2:	0f 85 4c 01 00 00    	jne    c0013d44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013bf8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013c00:	83 ec 0c             	sub    esp,0xc
c0013c03:	6a 34                	push   0x34
c0013c05:	e8 c6 ac ff ff       	call   c000e8d0 <malloc>
c0013c0a:	89 c3                	mov    ebx,eax
c0013c0c:	58                   	pop    eax
c0013c0d:	8b 07                	mov    eax,DWORD PTR [edi]
c0013c0f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013c13:	56                   	push   esi
c0013c14:	53                   	push   ebx
c0013c15:	6a 00                	push   0x0
c0013c17:	6a 34                	push   0x34
c0013c19:	57                   	push   edi
c0013c1a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c1d:	83 c4 20             	add    esp,0x20
c0013c20:	85 c0                	test   eax,eax
c0013c22:	0f 85 1c 01 00 00    	jne    c0013d44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c28:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013c2e:	0f 85 10 01 00 00    	jne    c0013d44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c37:	85 c0                	test   eax,eax
c0013c39:	0f 84 05 01 00 00    	je     c0013d44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c3f:	31 d2                	xor    edx,edx
c0013c41:	55                   	push   ebp
c0013c42:	52                   	push   edx
c0013c43:	50                   	push   eax
c0013c44:	57                   	push   edi
c0013c45:	e8 9e 45 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	85 c0                	test   eax,eax
c0013c4f:	0f 85 ef 00 00 00    	jne    c0013d44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c55:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c58:	83 ec 0c             	sub    esp,0xc
c0013c5b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013c5f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013c63:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013c67:	0f af c2             	imul   eax,edx
c0013c6a:	50                   	push   eax
c0013c6b:	e8 60 ac ff ff       	call   c000e8d0 <malloc>
c0013c70:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013c72:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013c79:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c7d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013c81:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013c85:	0f af c2             	imul   eax,edx
c0013c88:	99                   	cdq    
c0013c89:	52                   	push   edx
c0013c8a:	50                   	push   eax
c0013c8b:	57                   	push   edi
c0013c8c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c8f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013c92:	83 c4 20             	add    esp,0x20
c0013c95:	85 c0                	test   eax,eax
c0013c97:	0f 84 a7 00 00 00    	je     c0013d44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013c9d:	31 d2                	xor    edx,edx
c0013c9f:	51                   	push   ecx
c0013ca0:	52                   	push   edx
c0013ca1:	50                   	push   eax
c0013ca2:	57                   	push   edi
c0013ca3:	e8 40 45 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013ca8:	83 c4 10             	add    esp,0x10
c0013cab:	85 c0                	test   eax,eax
c0013cad:	0f 85 91 00 00 00    	jne    c0013d44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0013cb3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013cb7:	83 ec 0c             	sub    esp,0xc
c0013cba:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013cbe:	0f af c2             	imul   eax,edx
c0013cc1:	50                   	push   eax
c0013cc2:	e8 09 ac ff ff       	call   c000e8d0 <malloc>
c0013cc7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013cc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ccc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013cd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013cd8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013cdc:	0f af c2             	imul   eax,edx
c0013cdf:	99                   	cdq    
c0013ce0:	52                   	push   edx
c0013ce1:	50                   	push   eax
c0013ce2:	57                   	push   edi
c0013ce3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ce6:	83 c4 20             	add    esp,0x20
c0013ce9:	31 c9                	xor    ecx,ecx
c0013ceb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013cf3:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0013cf7:	0f b7 e9             	movzx  ebp,cx
c0013cfa:	0f 83 86 00 00 00    	jae    c0013d86 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0013d00:	c1 e5 05             	shl    ebp,0x5
c0013d03:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0013d07:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0013d0b:	75 73                	jne    c0013d80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0013d0d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0013d14:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0013d17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d1b:	52                   	push   edx
c0013d1c:	31 d2                	xor    edx,edx
c0013d1e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013d21:	52                   	push   edx
c0013d22:	50                   	push   eax
c0013d23:	57                   	push   edi
c0013d24:	e8 bf 44 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013d29:	83 c4 10             	add    esp,0x10
c0013d2c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d30:	85 c0                	test   eax,eax
c0013d32:	74 17                	je     c0013d4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0013d34:	83 ec 0c             	sub    esp,0xc
c0013d37:	68 49 28 02 c0       	push   0xc0022849
c0013d3c:	e8 0d 32 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013d41:	83 c4 10             	add    esp,0x10
c0013d44:	31 c0                	xor    eax,eax
c0013d46:	e9 8b 00 00 00       	jmp    c0013dd6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0013d4b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0013d4f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0013d58:	50                   	push   eax
c0013d59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013d5d:	56                   	push   esi
c0013d5e:	57                   	push   edi
c0013d5f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013d63:	e8 cc fb ff ff       	call   c0013934 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013d68:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013d6c:	83 c4 20             	add    esp,0x20
c0013d6f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0013d73:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013d77:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0013d7c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013d80:	41                   	inc    ecx
c0013d81:	e9 6d ff ff ff       	jmp    c0013cf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013d86:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0013d8a:	83 ec 0c             	sub    esp,0xc
c0013d8d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013d91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d95:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0013d9b:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0013da1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013da6:	05 00 10 00 00       	add    eax,0x1000
c0013dab:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013db2:	e8 29 ab ff ff       	call   c000e8e0 <free>
c0013db7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dba:	e8 21 ab ff ff       	call   c000e8e0 <free>
c0013dbf:	58                   	pop    eax
c0013dc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013dc4:	e8 17 ab ff ff       	call   c000e8e0 <free>
c0013dc9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013dcc:	e8 b7 43 ff ff       	call   c0008188 <File::close()>
c0013dd1:	83 c4 10             	add    esp,0x10
c0013dd4:	b0 01                	mov    al,0x1
c0013dd6:	83 c4 3c             	add    esp,0x3c
c0013dd9:	5b                   	pop    ebx
c0013dda:	5e                   	pop    esi
c0013ddb:	5f                   	pop    edi
c0013ddc:	5d                   	pop    ebp
c0013ddd:	c3                   	ret    

c0013dde <Thr::runtimeReferenceHelper()>:
c0013dde:	83 ec 18             	sub    esp,0x18
c0013de1:	68 51 28 02 c0       	push   0xc0022851
c0013de6:	e8 63 31 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0013deb:	fa                   	cli    
c0013dec:	83 c4 10             	add    esp,0x10
c0013def:	eb fe                	jmp    c0013def <Thr::runtimeReferenceHelper()+0x11>

c0013df1 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013df1:	57                   	push   edi
c0013df2:	56                   	push   esi
c0013df3:	53                   	push   ebx
c0013df4:	31 db                	xor    ebx,ebx
c0013df6:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013dfc:	7e 3c                	jle    c0013e3a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013dfe:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013e05:	31 ff                	xor    edi,edi
c0013e07:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013e0e:	7e 27                	jle    c0013e37 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013e10:	50                   	push   eax
c0013e11:	50                   	push   eax
c0013e12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e16:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e18:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013e1f:	50                   	push   eax
c0013e20:	e8 5b c9 fe ff       	call   c0000780 <strcmp>
c0013e25:	83 c4 10             	add    esp,0x10
c0013e28:	85 c0                	test   eax,eax
c0013e2a:	75 05                	jne    c0013e31 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013e2c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e2f:	eb 0b                	jmp    c0013e3c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013e31:	83 c6 10             	add    esi,0x10
c0013e34:	47                   	inc    edi
c0013e35:	eb d0                	jmp    c0013e07 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013e37:	43                   	inc    ebx
c0013e38:	eb bc                	jmp    c0013df6 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013e3a:	31 c0                	xor    eax,eax
c0013e3c:	5b                   	pop    ebx
c0013e3d:	5e                   	pop    esi
c0013e3e:	5f                   	pop    edi
c0013e3f:	c3                   	ret    

c0013e40 <Thr::loadKernelSymbolTable(char const*)>:
c0013e40:	55                   	push   ebp
c0013e41:	57                   	push   edi
c0013e42:	56                   	push   esi
c0013e43:	53                   	push   ebx
c0013e44:	83 ec 68             	sub    esp,0x68
c0013e47:	68 14 01 00 00       	push   0x114
c0013e4c:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0013e52:	e8 79 aa ff ff       	call   c000e8d0 <malloc>
c0013e57:	83 c4 0c             	add    esp,0xc
c0013e5a:	56                   	push   esi
c0013e5b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013e5f:	89 c3                	mov    ebx,eax
c0013e61:	50                   	push   eax
c0013e62:	e8 a5 42 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0013e67:	5e                   	pop    esi
c0013e68:	5f                   	pop    edi
c0013e69:	6a 01                	push   0x1
c0013e6b:	53                   	push   ebx
c0013e6c:	e8 b9 42 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0013e71:	83 c4 10             	add    esp,0x10
c0013e74:	85 c0                	test   eax,eax
c0013e76:	74 0a                	je     c0013e82 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	68 73 28 02 c0       	push   0xc0022873
c0013e80:	eb 34                	jmp    c0013eb6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013e82:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013e8a:	83 ec 0c             	sub    esp,0xc
c0013e8d:	6a 34                	push   0x34
c0013e8f:	e8 3c aa ff ff       	call   c000e8d0 <malloc>
c0013e94:	59                   	pop    ecx
c0013e95:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013e99:	89 c7                	mov    edi,eax
c0013e9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e9d:	56                   	push   esi
c0013e9e:	57                   	push   edi
c0013e9f:	6a 00                	push   0x0
c0013ea1:	6a 34                	push   0x34
c0013ea3:	53                   	push   ebx
c0013ea4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ea7:	83 c4 20             	add    esp,0x20
c0013eaa:	85 c0                	test   eax,eax
c0013eac:	74 17                	je     c0013ec5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013eae:	83 ec 0c             	sub    esp,0xc
c0013eb1:	68 8a 28 02 c0       	push   0xc002288a
c0013eb6:	e8 5b ad ff ff       	call   c000ec16 <KePanic(char const*)>
c0013ebb:	83 c4 10             	add    esp,0x10
c0013ebe:	31 c0                	xor    eax,eax
c0013ec0:	e9 31 02 00 00       	jmp    c00140f6 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013ec5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013ecb:	75 e1                	jne    c0013eae <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ecd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013ed0:	85 c0                	test   eax,eax
c0013ed2:	74 da                	je     c0013eae <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ed4:	52                   	push   edx
c0013ed5:	31 d2                	xor    edx,edx
c0013ed7:	52                   	push   edx
c0013ed8:	50                   	push   eax
c0013ed9:	53                   	push   ebx
c0013eda:	e8 09 43 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013edf:	83 c4 10             	add    esp,0x10
c0013ee2:	85 c0                	test   eax,eax
c0013ee4:	75 c8                	jne    c0013eae <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013ee6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013eea:	83 ec 0c             	sub    esp,0xc
c0013eed:	31 ed                	xor    ebp,ebp
c0013eef:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ef3:	0f af c2             	imul   eax,edx
c0013ef6:	50                   	push   eax
c0013ef7:	e8 d4 a9 ff ff       	call   c000e8d0 <malloc>
c0013efc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013efe:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f09:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013f0d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f11:	0f af c2             	imul   eax,edx
c0013f14:	99                   	cdq    
c0013f15:	52                   	push   edx
c0013f16:	50                   	push   eax
c0013f17:	53                   	push   ebx
c0013f18:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f1b:	83 c4 20             	add    esp,0x20
c0013f1e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013f26:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013f2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013f36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013f3e:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013f42:	0f b7 f5             	movzx  esi,bp
c0013f45:	0f 83 a7 00 00 00    	jae    c0013ff2 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013f4b:	6b f6 28             	imul   esi,esi,0x28
c0013f4e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013f52:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013f55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013f59:	50                   	push   eax
c0013f5a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013f5e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f62:	8b 16                	mov    edx,DWORD PTR [esi]
c0013f64:	6b c0 28             	imul   eax,eax,0x28
c0013f67:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013f6b:	89 d0                	mov    eax,edx
c0013f6d:	31 d2                	xor    edx,edx
c0013f6f:	52                   	push   edx
c0013f70:	50                   	push   eax
c0013f71:	53                   	push   ebx
c0013f72:	e8 71 42 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0013f77:	83 c4 0c             	add    esp,0xc
c0013f7a:	6a 20                	push   0x20
c0013f7c:	6a 00                	push   0x0
c0013f7e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013f82:	52                   	push   edx
c0013f83:	e8 68 c5 fe ff       	call   c00004f0 <memset>
c0013f88:	58                   	pop    eax
c0013f89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f8b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013f8f:	51                   	push   ecx
c0013f90:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013f94:	52                   	push   edx
c0013f95:	6a 00                	push   0x0
c0013f97:	6a 1f                	push   0x1f
c0013f99:	53                   	push   ebx
c0013f9a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f9d:	83 c4 18             	add    esp,0x18
c0013fa0:	68 a1 28 02 c0       	push   0xc00228a1
c0013fa5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013fa9:	52                   	push   edx
c0013faa:	e8 d1 c7 fe ff       	call   c0000780 <strcmp>
c0013faf:	83 c4 10             	add    esp,0x10
c0013fb2:	85 c0                	test   eax,eax
c0013fb4:	75 0f                	jne    c0013fc5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013fb6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013fb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fc5:	50                   	push   eax
c0013fc6:	50                   	push   eax
c0013fc7:	68 a9 28 02 c0       	push   0xc00228a9
c0013fcc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013fd0:	50                   	push   eax
c0013fd1:	e8 aa c7 fe ff       	call   c0000780 <strcmp>
c0013fd6:	83 c4 10             	add    esp,0x10
c0013fd9:	85 c0                	test   eax,eax
c0013fdb:	75 0f                	jne    c0013fec <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013fdd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013fe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fe4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fe8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013fec:	45                   	inc    ebp
c0013fed:	e9 4c ff ff ff       	jmp    c0013f3e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013ff2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013ff7:	75 10                	jne    c0014009 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013ff9:	83 ec 0c             	sub    esp,0xc
c0013ffc:	68 b1 28 02 c0       	push   0xc00228b1
c0014001:	e8 10 ac ff ff       	call   c000ec16 <KePanic(char const*)>
c0014006:	83 c4 10             	add    esp,0x10
c0014009:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001400e:	75 10                	jne    c0014020 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	68 b1 28 02 c0       	push   0xc00228b1
c0014018:	e8 f9 ab ff ff       	call   c000ec16 <KePanic(char const*)>
c001401d:	83 c4 10             	add    esp,0x10
c0014020:	50                   	push   eax
c0014021:	31 d2                	xor    edx,edx
c0014023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014027:	52                   	push   edx
c0014028:	50                   	push   eax
c0014029:	53                   	push   ebx
c001402a:	e8 b9 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001402f:	5a                   	pop    edx
c0014030:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014034:	e8 97 a8 ff ff       	call   c000e8d0 <malloc>
c0014039:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001403d:	31 c9                	xor    ecx,ecx
c001403f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014043:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014045:	5e                   	pop    esi
c0014046:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001404a:	55                   	push   ebp
c001404b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001404f:	51                   	push   ecx
c0014050:	52                   	push   edx
c0014051:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014055:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014059:	53                   	push   ebx
c001405a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001405d:	83 c4 14             	add    esp,0x14
c0014060:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014064:	e8 67 a8 ff ff       	call   c000e8d0 <malloc>
c0014069:	89 c6                	mov    esi,eax
c001406b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001406d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014070:	56                   	push   esi
c0014071:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014075:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014079:	51                   	push   ecx
c001407a:	52                   	push   edx
c001407b:	53                   	push   ebx
c001407c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001407f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014083:	83 c4 1c             	add    esp,0x1c
c0014086:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c001408c:	c1 e8 04             	shr    eax,0x4
c001408f:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c0014096:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001409a:	31 d2                	xor    edx,edx
c001409c:	52                   	push   edx
c001409d:	50                   	push   eax
c001409e:	53                   	push   ebx
c001409f:	e8 44 41 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00140a4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00140a6:	31 d2                	xor    edx,edx
c00140a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00140ab:	56                   	push   esi
c00140ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00140b0:	52                   	push   edx
c00140b1:	50                   	push   eax
c00140b2:	53                   	push   ebx
c00140b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00140b6:	83 c4 14             	add    esp,0x14
c00140b9:	53                   	push   ebx
c00140ba:	e8 c9 40 ff ff       	call   c0008188 <File::close()>
c00140bf:	5d                   	pop    ebp
c00140c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140c4:	e8 17 a8 ff ff       	call   c000e8e0 <free>
c00140c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00140cc:	e8 0f a8 ff ff       	call   c000e8e0 <free>
c00140d1:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c00140d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00140da:	83 c4 10             	add    esp,0x10
c00140dd:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c00140e4:	8d 50 01             	lea    edx,[eax+0x1]
c00140e7:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c00140ee:	b0 01                	mov    al,0x1
c00140f0:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c00140f6:	83 c4 5c             	add    esp,0x5c
c00140f9:	5b                   	pop    ebx
c00140fa:	5e                   	pop    esi
c00140fb:	5f                   	pop    edi
c00140fc:	5d                   	pop    ebp
c00140fd:	c3                   	ret    

c00140fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00140fe:	55                   	push   ebp
c00140ff:	57                   	push   edi
c0014100:	56                   	push   esi
c0014101:	53                   	push   ebx
c0014102:	81 ec 68 03 00 00    	sub    esp,0x368
c0014108:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001410f:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0014115:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0014119:	68 14 01 00 00       	push   0x114
c001411e:	e8 ad a7 ff ff       	call   c000e8d0 <malloc>
c0014123:	83 c4 0c             	add    esp,0xc
c0014126:	56                   	push   esi
c0014127:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001412e:	50                   	push   eax
c001412f:	89 c3                	mov    ebx,eax
c0014131:	e8 d6 3f ff ff       	call   c000810c <File::File(char const*, Process*)>
c0014136:	5f                   	pop    edi
c0014137:	5d                   	pop    ebp
c0014138:	6a 01                	push   0x1
c001413a:	53                   	push   ebx
c001413b:	e8 ea 3f ff ff       	call   c000812a <File::open(FileOpenMode)>
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	85 c0                	test   eax,eax
c0014145:	0f 85 b3 06 00 00    	jne    c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001414b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014153:	83 ec 0c             	sub    esp,0xc
c0014156:	6a 34                	push   0x34
c0014158:	e8 73 a7 ff ff       	call   c000e8d0 <malloc>
c001415d:	5e                   	pop    esi
c001415e:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014162:	89 c5                	mov    ebp,eax
c0014164:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014166:	56                   	push   esi
c0014167:	55                   	push   ebp
c0014168:	6a 00                	push   0x0
c001416a:	6a 34                	push   0x34
c001416c:	53                   	push   ebx
c001416d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014170:	83 c4 20             	add    esp,0x20
c0014173:	85 c0                	test   eax,eax
c0014175:	0f 85 83 06 00 00    	jne    c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001417b:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0014182:	0f 85 76 06 00 00    	jne    c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014188:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001418b:	85 c0                	test   eax,eax
c001418d:	0f 84 6b 06 00 00    	je     c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014193:	31 d2                	xor    edx,edx
c0014195:	51                   	push   ecx
c0014196:	52                   	push   edx
c0014197:	50                   	push   eax
c0014198:	53                   	push   ebx
c0014199:	e8 4a 40 ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001419e:	83 c4 10             	add    esp,0x10
c00141a1:	85 c0                	test   eax,eax
c00141a3:	0f 85 55 06 00 00    	jne    c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141a9:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00141ac:	83 ec 0c             	sub    esp,0xc
c00141af:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141b3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141b7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00141bb:	0f af c2             	imul   eax,edx
c00141be:	50                   	push   eax
c00141bf:	e8 0c a7 ff ff       	call   c000e8d0 <malloc>
c00141c4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00141c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00141c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00141cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141d1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00141d5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00141d9:	0f af c2             	imul   eax,edx
c00141dc:	99                   	cdq    
c00141dd:	52                   	push   edx
c00141de:	50                   	push   eax
c00141df:	53                   	push   ebx
c00141e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141e3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00141e6:	83 c4 20             	add    esp,0x20
c00141e9:	85 c0                	test   eax,eax
c00141eb:	0f 84 0d 06 00 00    	je     c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00141f1:	52                   	push   edx
c00141f2:	31 d2                	xor    edx,edx
c00141f4:	52                   	push   edx
c00141f5:	50                   	push   eax
c00141f6:	53                   	push   ebx
c00141f7:	e8 ec 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00141fc:	83 c4 10             	add    esp,0x10
c00141ff:	85 c0                	test   eax,eax
c0014201:	0f 85 f7 05 00 00    	jne    c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014207:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001420b:	83 ec 0c             	sub    esp,0xc
c001420e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014212:	0f af c2             	imul   eax,edx
c0014215:	50                   	push   eax
c0014216:	e8 b5 a6 ff ff       	call   c000e8d0 <malloc>
c001421b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001421d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014220:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014228:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001422c:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014230:	0f af c2             	imul   eax,edx
c0014233:	99                   	cdq    
c0014234:	52                   	push   edx
c0014235:	50                   	push   eax
c0014236:	53                   	push   ebx
c0014237:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001423a:	83 c4 20             	add    esp,0x20
c001423d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014243:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014246:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c001424a:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c001424e:	73 78                	jae    c00142c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014250:	c1 e7 05             	shl    edi,0x5
c0014253:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014257:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001425a:	75 63                	jne    c00142bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c001425c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001425f:	31 d2                	xor    edx,edx
c0014261:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014264:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014268:	50                   	push   eax
c0014269:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001426c:	52                   	push   edx
c001426d:	50                   	push   eax
c001426e:	53                   	push   ebx
c001426f:	e8 74 3f ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c0014274:	83 c4 10             	add    esp,0x10
c0014277:	85 c0                	test   eax,eax
c0014279:	0f 85 7f 05 00 00    	jne    c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001427f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014286:	83 ec 0c             	sub    esp,0xc
c0014289:	31 d2                	xor    edx,edx
c001428b:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001428f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014291:	01 c6                	add    esi,eax
c0014293:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001429a:	50                   	push   eax
c001429b:	56                   	push   esi
c001429c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142a0:	52                   	push   edx
c00142a1:	50                   	push   eax
c00142a2:	53                   	push   ebx
c00142a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142a6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00142a9:	83 c4 1c             	add    esp,0x1c
c00142ac:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00142af:	50                   	push   eax
c00142b0:	6a 00                	push   0x0
c00142b2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00142b6:	56                   	push   esi
c00142b7:	e8 34 c2 fe ff       	call   c00004f0 <memset>
c00142bc:	83 c4 10             	add    esp,0x10
c00142bf:	66 ff 04 24          	inc    WORD PTR [esp]
c00142c3:	e9 7b ff ff ff       	jmp    c0014243 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c00142c8:	50                   	push   eax
c00142c9:	68 00 01 00 00       	push   0x100
c00142ce:	6a 00                	push   0x0
c00142d0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00142d4:	50                   	push   eax
c00142d5:	e8 16 c2 fe ff       	call   c00004f0 <memset>
c00142da:	83 c4 0c             	add    esp,0xc
c00142dd:	68 00 01 00 00       	push   0x100
c00142e2:	6a 00                	push   0x0
c00142e4:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00142eb:	50                   	push   eax
c00142ec:	e8 ff c1 fe ff       	call   c00004f0 <memset>
c00142f1:	83 c4 10             	add    esp,0x10
c00142f4:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c00142fb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014302:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001430a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014312:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001431a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014322:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014326:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c001432a:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c001432f:	0f 83 16 01 00 00    	jae    c001444b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014335:	6b ff 28             	imul   edi,edi,0x28
c0014338:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c001433c:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001433f:	51                   	push   ecx
c0014340:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014344:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014348:	8b 07                	mov    eax,DWORD PTR [edi]
c001434a:	6b d2 28             	imul   edx,edx,0x28
c001434d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014351:	31 d2                	xor    edx,edx
c0014353:	52                   	push   edx
c0014354:	50                   	push   eax
c0014355:	53                   	push   ebx
c0014356:	e8 8d 3e ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001435b:	83 c4 0c             	add    esp,0xc
c001435e:	6a 20                	push   0x20
c0014360:	6a 00                	push   0x0
c0014362:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014369:	51                   	push   ecx
c001436a:	e8 81 c1 fe ff       	call   c00004f0 <memset>
c001436f:	58                   	pop    eax
c0014370:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014372:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014376:	52                   	push   edx
c0014377:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001437e:	51                   	push   ecx
c001437f:	6a 00                	push   0x0
c0014381:	6a 1f                	push   0x1f
c0014383:	53                   	push   ebx
c0014384:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014387:	83 c4 1c             	add    esp,0x1c
c001438a:	6a 09                	push   0x9
c001438c:	68 cb 28 02 c0       	push   0xc00228cb
c0014391:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014398:	51                   	push   ecx
c0014399:	e8 e2 bf fe ff       	call   c0000380 <memcmp>
c001439e:	83 c4 10             	add    esp,0x10
c00143a1:	85 c0                	test   eax,eax
c00143a3:	75 1a                	jne    c00143bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00143a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00143a8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00143ab:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143af:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143b2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00143b9:	89 d0                	mov    eax,edx
c00143bb:	40                   	inc    eax
c00143bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00143bf:	52                   	push   edx
c00143c0:	6a 09                	push   0x9
c00143c2:	68 d5 28 02 c0       	push   0xc00228d5
c00143c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00143ce:	50                   	push   eax
c00143cf:	e8 ac bf fe ff       	call   c0000380 <memcmp>
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	85 c0                	test   eax,eax
c00143d9:	75 1a                	jne    c00143f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c00143db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00143de:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00143e1:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00143e5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00143e8:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00143ef:	89 c8                	mov    eax,ecx
c00143f1:	40                   	inc    eax
c00143f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00143f5:	50                   	push   eax
c00143f6:	50                   	push   eax
c00143f7:	68 a1 28 02 c0       	push   0xc00228a1
c00143fc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014403:	50                   	push   eax
c0014404:	e8 77 c3 fe ff       	call   c0000780 <strcmp>
c0014409:	83 c4 10             	add    esp,0x10
c001440c:	85 c0                	test   eax,eax
c001440e:	75 0b                	jne    c001441b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014410:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014414:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014417:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001441b:	50                   	push   eax
c001441c:	50                   	push   eax
c001441d:	68 a9 28 02 c0       	push   0xc00228a9
c0014422:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014429:	50                   	push   eax
c001442a:	e8 51 c3 fe ff       	call   c0000780 <strcmp>
c001442f:	83 c4 10             	add    esp,0x10
c0014432:	85 c0                	test   eax,eax
c0014434:	75 0b                	jne    c0014441 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014436:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c001443a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001443d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014441:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014446:	e9 d7 fe ff ff       	jmp    c0014322 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c001444b:	50                   	push   eax
c001444c:	31 d2                	xor    edx,edx
c001444e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014452:	52                   	push   edx
c0014453:	50                   	push   eax
c0014454:	53                   	push   ebx
c0014455:	e8 8e 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c001445a:	58                   	pop    eax
c001445b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001445f:	e8 6c a4 ff ff       	call   c000e8d0 <malloc>
c0014464:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014466:	31 d2                	xor    edx,edx
c0014468:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001446c:	58                   	pop    eax
c001446d:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014471:	56                   	push   esi
c0014472:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447a:	52                   	push   edx
c001447b:	50                   	push   eax
c001447c:	53                   	push   ebx
c001447d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014480:	83 c4 14             	add    esp,0x14
c0014483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014487:	e8 44 a4 ff ff       	call   c000e8d0 <malloc>
c001448c:	31 d2                	xor    edx,edx
c001448e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014492:	83 c4 0c             	add    esp,0xc
c0014495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014499:	52                   	push   edx
c001449a:	50                   	push   eax
c001449b:	53                   	push   ebx
c001449c:	e8 47 3d ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00144a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00144a3:	31 d2                	xor    edx,edx
c00144a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00144a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00144b0:	52                   	push   edx
c00144b1:	50                   	push   eax
c00144b2:	53                   	push   ebx
c00144b3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144b6:	83 c4 20             	add    esp,0x20
c00144b9:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c00144be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00144c6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00144ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00144ce:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00144d1:	0f 84 2b 03 00 00    	je     c0014802 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c00144d7:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c00144de:	31 d2                	xor    edx,edx
c00144e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00144e4:	c1 e8 03             	shr    eax,0x3
c00144e7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00144eb:	51                   	push   ecx
c00144ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144f0:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00144f4:	52                   	push   edx
c00144f5:	50                   	push   eax
c00144f6:	53                   	push   ebx
c00144f7:	e8 ec 3c ff ff       	call   c00081e8 <File::seek(unsigned long long)>
c00144fc:	5e                   	pop    esi
c00144fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014501:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014508:	e8 c3 a3 ff ff       	call   c000e8d0 <malloc>
c001450d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001450f:	31 d2                	xor    edx,edx
c0014511:	89 c7                	mov    edi,eax
c0014513:	58                   	pop    eax
c0014514:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014518:	50                   	push   eax
c0014519:	57                   	push   edi
c001451a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014525:	52                   	push   edx
c0014526:	50                   	push   eax
c0014527:	53                   	push   ebx
c0014528:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001452b:	83 c4 20             	add    esp,0x20
c001452e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014536:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001453a:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c001453e:	0f 8d a5 02 00 00    	jge    c00147e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014544:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014549:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001454d:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014550:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014554:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014558:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c001455c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014560:	c1 e8 08             	shr    eax,0x8
c0014563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014567:	89 c2                	mov    edx,eax
c0014569:	c1 e2 04             	shl    edx,0x4
c001456c:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014570:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014573:	85 f6                	test   esi,esi
c0014575:	0f 85 cf 00 00 00    	jne    c001464a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c001457b:	83 ec 0c             	sub    esp,0xc
c001457e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014586:	03 02                	add    eax,DWORD PTR [edx]
c0014588:	50                   	push   eax
c0014589:	e8 63 f8 ff ff       	call   c0013df1 <Thr::getAddressOfKernelSymbol(char const*)>
c001458e:	83 c4 10             	add    esp,0x10
c0014591:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014595:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c001459a:	85 c0                	test   eax,eax
c001459c:	89 c6                	mov    esi,eax
c001459e:	0f 85 a6 00 00 00    	jne    c001464a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145a4:	83 ec 0c             	sub    esp,0xc
c00145a7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00145ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145af:	03 02                	add    eax,DWORD PTR [edx]
c00145b1:	50                   	push   eax
c00145b2:	e8 cd b0 ff ff       	call   c000f684 <KeResolveCompatibilitySymbol(char*)>
c00145b7:	83 c4 10             	add    esp,0x10
c00145ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00145be:	85 c0                	test   eax,eax
c00145c0:	89 c6                	mov    esi,eax
c00145c2:	0f 85 82 00 00 00    	jne    c001464a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00145c8:	50                   	push   eax
c00145c9:	50                   	push   eax
c00145ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145ce:	03 02                	add    eax,DWORD PTR [edx]
c00145d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00145d4:	50                   	push   eax
c00145d5:	68 df 28 02 c0       	push   0xc00228df
c00145da:	e8 6f 29 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00145df:	58                   	pop    eax
c00145e0:	5a                   	pop    edx
c00145e1:	68 f9 28 02 c0       	push   0xc00228f9
c00145e6:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00145ed:	51                   	push   ecx
c00145ee:	e8 5d c0 fe ff       	call   c0000650 <strcpy>
c00145f3:	59                   	pop    ecx
c00145f4:	58                   	pop    eax
c00145f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00145f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00145fd:	03 02                	add    eax,DWORD PTR [edx]
c00145ff:	50                   	push   eax
c0014600:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014607:	51                   	push   ecx
c0014608:	e8 63 c2 fe ff       	call   c0000870 <strcat>
c001460d:	58                   	pop    eax
c001460e:	5a                   	pop    edx
c001460f:	68 93 29 02 c0       	push   0xc0022993
c0014614:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001461b:	51                   	push   ecx
c001461c:	e8 4f c2 fe ff       	call   c0000870 <strcat>
c0014621:	83 c4 10             	add    esp,0x10
c0014624:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014629:	0f 84 77 01 00 00    	je     c00147a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c001462f:	83 ec 0c             	sub    esp,0xc
c0014632:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014639:	51                   	push   ecx
c001463a:	e8 d7 a5 ff ff       	call   c000ec16 <KePanic(char const*)>
c001463f:	83 c4 10             	add    esp,0x10
c0014642:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014646:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001464a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001464f:	83 f8 01             	cmp    eax,0x1
c0014652:	0f 85 9b 00 00 00    	jne    c00146f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014658:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001465c:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014663:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014667:	01 d0                	add    eax,edx
c0014669:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014671:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014675:	0f 94 c0             	sete   al
c0014678:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014680:	0f 94 c1             	sete   cl
c0014683:	09 c1                	or     ecx,eax
c0014685:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014689:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001468e:	0f b6 c9             	movzx  ecx,cl
c0014691:	8b 00                	mov    eax,DWORD PTR [eax]
c0014693:	74 41                	je     c00146d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014695:	8d 14 06             	lea    edx,[esi+eax*1]
c0014698:	85 c9                	test   ecx,ecx
c001469a:	75 15                	jne    c00146b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001469c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00146a0:	66 83 f8 0c          	cmp    ax,0xc
c00146a4:	76 05                	jbe    c00146ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00146a6:	b8 0c 00 00 00       	mov    eax,0xc
c00146ab:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00146af:	76 37                	jbe    c00146e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146b1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00146b6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00146ba:	0f 84 e6 00 00 00    	je     c00147a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	68 10 29 02 c0       	push   0xc0022910
c00146c8:	e8 49 a5 ff ff       	call   c000ec16 <KePanic(char const*)>
c00146cd:	83 c4 10             	add    esp,0x10
c00146d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00146d4:	eb 12                	jmp    c00146e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146d6:	01 c2                	add    edx,eax
c00146d8:	85 c9                	test   ecx,ecx
c00146da:	75 0c                	jne    c00146e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146dc:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00146e0:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00146e4:	77 02                	ja     c00146e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00146e6:	01 f2                	add    edx,esi
c00146e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146ec:	89 10                	mov    DWORD PTR [eax],edx
c00146ee:	e9 ed 00 00 00       	jmp    c00147e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00146f3:	83 f8 02             	cmp    eax,0x2
c00146f6:	0f 85 81 00 00 00    	jne    c001477d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c00146fc:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014703:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014707:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c001470b:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014713:	74 21                	je     c0014736 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014715:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c001471d:	74 17                	je     c0014736 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c001471f:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014723:	ba 0a 00 00 00       	mov    edx,0xa
c0014728:	83 f9 0e             	cmp    ecx,0xe
c001472b:	77 03                	ja     c0014730 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c001472d:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014730:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014734:	76 1f                	jbe    c0014755 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014736:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001473b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001473f:	74 65                	je     c00147a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014741:	83 ec 0c             	sub    esp,0xc
c0014744:	68 2c 29 02 c0       	push   0xc002292c
c0014749:	e8 c8 a4 ff ff       	call   c000ec16 <KePanic(char const*)>
c001474e:	83 c4 10             	add    esp,0x10
c0014751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014755:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001475a:	8b 10                	mov    edx,DWORD PTR [eax]
c001475c:	74 15                	je     c0014773 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001475e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014762:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014769:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001476d:	01 d1                	add    ecx,edx
c001476f:	01 ce                	add    esi,ecx
c0014771:	eb 06                	jmp    c0014779 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014773:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014777:	01 d6                	add    esi,edx
c0014779:	89 30                	mov    DWORD PTR [eax],esi
c001477b:	eb 63                	jmp    c00147e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c001477d:	56                   	push   esi
c001477e:	56                   	push   esi
c001477f:	50                   	push   eax
c0014780:	68 48 29 02 c0       	push   0xc0022948
c0014785:	e8 c4 27 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001478a:	83 c4 10             	add    esp,0x10
c001478d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014792:	74 12                	je     c00147a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014794:	83 ec 0c             	sub    esp,0xc
c0014797:	68 53 29 02 c0       	push   0xc0022953
c001479c:	e8 75 a4 ff ff       	call   c000ec16 <KePanic(char const*)>
c00147a1:	83 c4 10             	add    esp,0x10
c00147a4:	eb 3a                	jmp    c00147e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00147a6:	83 ec 0c             	sub    esp,0xc
c00147a9:	53                   	push   ebx
c00147aa:	e8 d9 39 ff ff       	call   c0008188 <File::close()>
c00147af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00147b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00147ba:	e8 21 a1 ff ff       	call   c000e8e0 <free>
c00147bf:	59                   	pop    ecx
c00147c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147c4:	e8 17 a1 ff ff       	call   c000e8e0 <free>
c00147c9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00147cc:	e8 0f a1 ff ff       	call   c000e8e0 <free>
c00147d1:	5b                   	pop    ebx
c00147d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00147d6:	e8 05 a1 ff ff       	call   c000e8e0 <free>
c00147db:	83 c4 10             	add    esp,0x10
c00147de:	eb 1e                	jmp    c00147fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00147e0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00147e4:	e9 4d fd ff ff       	jmp    c0014536 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c00147e9:	83 ec 0c             	sub    esp,0xc
c00147ec:	57                   	push   edi
c00147ed:	e8 ee a0 ff ff       	call   c000e8e0 <free>
c00147f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	e9 cc fc ff ff       	jmp    c00144ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c00147fe:	31 c0                	xor    eax,eax
c0014800:	eb 32                	jmp    c0014834 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0014802:	83 ec 0c             	sub    esp,0xc
c0014805:	53                   	push   ebx
c0014806:	e8 7d 39 ff ff       	call   c0008188 <File::close()>
c001480b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001480d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014810:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014813:	58                   	pop    eax
c0014814:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014818:	e8 c3 a0 ff ff       	call   c000e8e0 <free>
c001481d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014820:	e8 bb a0 ff ff       	call   c000e8e0 <free>
c0014825:	5a                   	pop    edx
c0014826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001482a:	e8 b1 a0 ff ff       	call   c000e8e0 <free>
c001482f:	83 c4 10             	add    esp,0x10
c0014832:	b0 01                	mov    al,0x1
c0014834:	81 c4 5c 03 00 00    	add    esp,0x35c
c001483a:	5b                   	pop    ebx
c001483b:	5e                   	pop    esi
c001483c:	5f                   	pop    edi
c001483d:	5d                   	pop    ebp
c001483e:	c3                   	ret    

c001483f <Thr::getDriverBaseFromAddress(unsigned long)>:
c001483f:	56                   	push   esi
c0014840:	31 d2                	xor    edx,edx
c0014842:	53                   	push   ebx
c0014843:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014849:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001484d:	39 d3                	cmp    ebx,edx
c001484f:	7e 1b                	jle    c001486c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014851:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c0014858:	39 c8                	cmp    eax,ecx
c001485a:	77 0d                	ja     c0014869 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001485c:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c0014863:	01 c6                	add    esi,eax
c0014865:	39 ce                	cmp    esi,ecx
c0014867:	77 05                	ja     c001486e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014869:	42                   	inc    edx
c001486a:	eb e1                	jmp    c001484d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001486c:	31 c0                	xor    eax,eax
c001486e:	5b                   	pop    ebx
c001486f:	5e                   	pop    esi
c0014870:	c3                   	ret    

c0014871 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014871:	53                   	push   ebx
c0014872:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014878:	31 c0                	xor    eax,eax
c001487a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001487e:	39 c3                	cmp    ebx,eax
c0014880:	7e 22                	jle    c00148a4 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014882:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c0014889:	39 ca                	cmp    edx,ecx
c001488b:	77 14                	ja     c00148a1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001488d:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c0014894:	39 ca                	cmp    edx,ecx
c0014896:	76 09                	jbe    c00148a1 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014898:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c001489f:	eb 05                	jmp    c00148a6 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00148a1:	40                   	inc    eax
c00148a2:	eb da                	jmp    c001487e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00148a4:	31 c0                	xor    eax,eax
c00148a6:	5b                   	pop    ebx
c00148a7:	c3                   	ret    

c00148a8 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00148a8:	53                   	push   ebx
c00148a9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00148ad:	53                   	push   ebx
c00148ae:	e8 8c ff ff ff       	call   c001483f <Thr::getDriverBaseFromAddress(unsigned long)>
c00148b3:	5a                   	pop    edx
c00148b4:	31 d2                	xor    edx,edx
c00148b6:	85 c0                	test   eax,eax
c00148b8:	74 04                	je     c00148be <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00148ba:	89 da                	mov    edx,ebx
c00148bc:	29 c2                	sub    edx,eax
c00148be:	5b                   	pop    ebx
c00148bf:	89 d0                	mov    eax,edx
c00148c1:	c3                   	ret    

c00148c2 <Thr::loadDLL(char const*, bool)>:
c00148c2:	55                   	push   ebp
c00148c3:	57                   	push   edi
c00148c4:	56                   	push   esi
c00148c5:	53                   	push   ebx
c00148c6:	81 ec 34 01 00 00    	sub    esp,0x134
c00148cc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00148d3:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00148da:	56                   	push   esi
c00148db:	68 6b 29 02 c0       	push   0xc002296b
c00148e0:	e8 69 26 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00148e5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00148ec:	e8 df 9f ff ff       	call   c000e8d0 <malloc>
c00148f1:	83 c4 0c             	add    esp,0xc
c00148f4:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00148fa:	56                   	push   esi
c00148fb:	50                   	push   eax
c00148fc:	89 c3                	mov    ebx,eax
c00148fe:	e8 09 38 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0014903:	83 c4 10             	add    esp,0x10
c0014906:	85 db                	test   ebx,ebx
c0014908:	75 3c                	jne    c0014946 <Thr::loadDLL(char const*, bool)+0x84>
c001490a:	89 e8                	mov    eax,ebp
c001490c:	84 c0                	test   al,al
c001490e:	0f 84 02 02 00 00    	je     c0014b16 <Thr::loadDLL(char const*, bool)+0x254>
c0014914:	50                   	push   eax
c0014915:	50                   	push   eax
c0014916:	68 7c 29 02 c0       	push   0xc002297c
c001491b:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001491f:	57                   	push   edi
c0014920:	e8 2b bd fe ff       	call   c0000650 <strcpy>
c0014925:	58                   	pop    eax
c0014926:	5a                   	pop    edx
c0014927:	56                   	push   esi
c0014928:	57                   	push   edi
c0014929:	e8 42 bf fe ff       	call   c0000870 <strcat>
c001492e:	59                   	pop    ecx
c001492f:	58                   	pop    eax
c0014930:	68 93 29 02 c0       	push   0xc0022993
c0014935:	57                   	push   edi
c0014936:	e8 35 bf fe ff       	call   c0000870 <strcat>
c001493b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001493e:	e8 d3 a2 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014943:	83 c4 10             	add    esp,0x10
c0014946:	50                   	push   eax
c0014947:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001494b:	50                   	push   eax
c001494c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014950:	50                   	push   eax
c0014951:	53                   	push   ebx
c0014952:	e8 d5 3a ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0014957:	83 c4 10             	add    esp,0x10
c001495a:	85 db                	test   ebx,ebx
c001495c:	89 c7                	mov    edi,eax
c001495e:	74 0c                	je     c001496c <Thr::loadDLL(char const*, bool)+0xaa>
c0014960:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014962:	83 ec 0c             	sub    esp,0xc
c0014965:	53                   	push   ebx
c0014966:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	83 ec 0c             	sub    esp,0xc
c001496f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014974:	50                   	push   eax
c0014975:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014979:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001497d:	57                   	push   edi
c001497e:	68 95 29 02 c0       	push   0xc0022995
c0014983:	e8 c6 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014988:	83 c4 20             	add    esp,0x20
c001498b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014990:	75 0a                	jne    c001499c <Thr::loadDLL(char const*, bool)+0xda>
c0014992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014996:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001499a:	75 3e                	jne    c00149da <Thr::loadDLL(char const*, bool)+0x118>
c001499c:	89 e8                	mov    eax,ebp
c001499e:	31 db                	xor    ebx,ebx
c00149a0:	84 c0                	test   al,al
c00149a2:	0f 84 6e 01 00 00    	je     c0014b16 <Thr::loadDLL(char const*, bool)+0x254>
c00149a8:	50                   	push   eax
c00149a9:	50                   	push   eax
c00149aa:	68 b6 29 02 c0       	push   0xc00229b6
c00149af:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00149b3:	53                   	push   ebx
c00149b4:	e8 97 bc fe ff       	call   c0000650 <strcpy>
c00149b9:	58                   	pop    eax
c00149ba:	5a                   	pop    edx
c00149bb:	56                   	push   esi
c00149bc:	53                   	push   ebx
c00149bd:	e8 ae be fe ff       	call   c0000870 <strcat>
c00149c2:	59                   	pop    ecx
c00149c3:	5f                   	pop    edi
c00149c4:	68 93 29 02 c0       	push   0xc0022993
c00149c9:	53                   	push   ebx
c00149ca:	e8 a1 be fe ff       	call   c0000870 <strcat>
c00149cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149d2:	e8 3f a2 ff ff       	call   c000ec16 <KePanic(char const*)>
c00149d7:	83 c4 10             	add    esp,0x10
c00149da:	53                   	push   ebx
c00149db:	6a 03                	push   0x3
c00149dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149e1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00149e5:	05 ff 0f 00 00       	add    eax,0xfff
c00149ea:	83 d2 00             	adc    edx,0x0
c00149ed:	0f ac d0 0c          	shrd   eax,edx,0xc
c00149f1:	50                   	push   eax
c00149f2:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c00149f8:	e8 27 dd ff ff       	call   c0012724 <VAS::allocatePages(int, int)>
c00149fd:	89 c3                	mov    ebx,eax
c00149ff:	58                   	pop    eax
c0014a00:	5a                   	pop    edx
c0014a01:	53                   	push   ebx
c0014a02:	68 da 20 02 c0       	push   0xc00220da
c0014a07:	e8 42 25 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014a0c:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a0f:	e8 6c bb fe ff       	call   c0000580 <strlen>
c0014a14:	8b 3d e0 be 02 c0    	mov    edi,DWORD PTR ds:0xc002bee0
c0014a1a:	40                   	inc    eax
c0014a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a1e:	e8 ad 9e ff ff       	call   c000e8d0 <malloc>
c0014a23:	59                   	pop    ecx
c0014a24:	89 04 bd 00 c3 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3d00],eax
c0014a2b:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014a30:	5f                   	pop    edi
c0014a31:	56                   	push   esi
c0014a32:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014a39:	e8 12 bc fe ff       	call   c0000650 <strcpy>
c0014a3e:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014a43:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014a4a:	8d 50 01             	lea    edx,[eax+0x1]
c0014a4d:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014a53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a57:	83 c4 0c             	add    esp,0xc
c0014a5a:	6a 01                	push   0x1
c0014a5c:	53                   	push   ebx
c0014a5d:	56                   	push   esi
c0014a5e:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014a65:	e8 94 f6 ff ff       	call   c00140fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014a6a:	83 c4 10             	add    esp,0x10
c0014a6d:	89 c7                	mov    edi,eax
c0014a6f:	89 f8                	mov    eax,edi
c0014a71:	83 f0 01             	xor    eax,0x1
c0014a74:	84 c0                	test   al,al
c0014a76:	74 18                	je     c0014a90 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014a78:	89 e8                	mov    eax,ebp
c0014a7a:	84 c0                	test   al,al
c0014a7c:	74 12                	je     c0014a90 <Thr::loadDLL(char const*, bool)+0x1ce>
c0014a7e:	83 ec 0c             	sub    esp,0xc
c0014a81:	68 cf 29 02 c0       	push   0xc00229cf
c0014a86:	e8 8b a1 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014a8b:	83 c4 10             	add    esp,0x10
c0014a8e:	eb 06                	jmp    c0014a96 <Thr::loadDLL(char const*, bool)+0x1d4>
c0014a90:	89 f8                	mov    eax,edi
c0014a92:	84 c0                	test   al,al
c0014a94:	75 10                	jne    c0014aa6 <Thr::loadDLL(char const*, bool)+0x1e4>
c0014a96:	83 ec 0c             	sub    esp,0xc
c0014a99:	68 ee 29 02 c0       	push   0xc00229ee
c0014a9e:	e8 73 a1 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014aa3:	83 c4 10             	add    esp,0x10
c0014aa6:	31 f6                	xor    esi,esi
c0014aa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014aac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014ab0:	05 ff 0f 00 00       	add    eax,0xfff
c0014ab5:	83 d2 00             	adc    edx,0x0
c0014ab8:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014abc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ac0:	c1 ea 0c             	shr    edx,0xc
c0014ac3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014ac7:	ba 00 00 00 00       	mov    edx,0x0
c0014acc:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0014ad0:	89 d0                	mov    eax,edx
c0014ad2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0014ad6:	73 32                	jae    c0014b0a <Thr::loadDLL(char const*, bool)+0x248>
c0014ad8:	50                   	push   eax
c0014ad9:	50                   	push   eax
c0014ada:	89 f0                	mov    eax,esi
c0014adc:	c1 e0 0c             	shl    eax,0xc
c0014adf:	01 d8                	add    eax,ebx
c0014ae1:	50                   	push   eax
c0014ae2:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014ae8:	e8 35 d7 ff ff       	call   c0012222 <VAS::getPageTableEntry(unsigned long)>
c0014aed:	83 c4 10             	add    esp,0x10
c0014af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014af2:	a8 60                	test   al,0x60
c0014af4:	75 11                	jne    c0014b07 <Thr::loadDLL(char const*, bool)+0x245>
c0014af6:	83 ec 0c             	sub    esp,0xc
c0014af9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014afe:	50                   	push   eax
c0014aff:	e8 a3 a2 ff ff       	call   c000eda7 <Phys::freePage(unsigned long)>
c0014b04:	83 c4 10             	add    esp,0x10
c0014b07:	46                   	inc    esi
c0014b08:	eb 9e                	jmp    c0014aa8 <Thr::loadDLL(char const*, bool)+0x1e6>
c0014b0a:	89 f8                	mov    eax,edi
c0014b0c:	84 c0                	test   al,al
c0014b0e:	b8 00 00 00 00       	mov    eax,0x0
c0014b13:	0f 44 d8             	cmove  ebx,eax
c0014b16:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014b1c:	89 d8                	mov    eax,ebx
c0014b1e:	5b                   	pop    ebx
c0014b1f:	5e                   	pop    esi
c0014b20:	5f                   	pop    edi
c0014b21:	5d                   	pop    ebp
c0014b22:	c3                   	ret    

c0014b23 <Thr::executeDLL(unsigned long, void*)>:
c0014b23:	56                   	push   esi
c0014b24:	53                   	push   ebx
c0014b25:	52                   	push   edx
c0014b26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b2a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b2e:	85 db                	test   ebx,ebx
c0014b30:	75 10                	jne    c0014b42 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014b32:	83 ec 0c             	sub    esp,0xc
c0014b35:	68 0a 2a 02 c0       	push   0xc0022a0a
c0014b3a:	e8 d7 a0 ff ff       	call   c000ec16 <KePanic(char const*)>
c0014b3f:	83 c4 10             	add    esp,0x10
c0014b42:	50                   	push   eax
c0014b43:	50                   	push   eax
c0014b44:	53                   	push   ebx
c0014b45:	68 34 2a 02 c0       	push   0xc0022a34
c0014b4a:	e8 ff 23 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014b4f:	89 d8                	mov    eax,ebx
c0014b51:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b55:	83 c4 14             	add    esp,0x14
c0014b58:	5b                   	pop    ebx
c0014b59:	5e                   	pop    esi
c0014b5a:	ff e0                	jmp    eax

c0014b5c <KeProcessExec(Process*, char const*)>:
c0014b5c:	56                   	push   esi
c0014b5d:	53                   	push   ebx
c0014b5e:	83 ec 04             	sub    esp,0x4
c0014b61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b65:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014b6b:	85 f6                	test   esi,esi
c0014b6d:	74 16                	je     c0014b85 <KeProcessExec(Process*, char const*)+0x29>
c0014b6f:	83 ec 0c             	sub    esp,0xc
c0014b72:	56                   	push   esi
c0014b73:	e8 3c d9 ff ff       	call   c00124b4 <VAS::~VAS()>
c0014b78:	58                   	pop    eax
c0014b79:	5a                   	pop    edx
c0014b7a:	6a 14                	push   0x14
c0014b7c:	56                   	push   esi
c0014b7d:	e8 d9 7a ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0014b82:	83 c4 10             	add    esp,0x10
c0014b85:	83 ec 0c             	sub    esp,0xc
c0014b88:	6a 14                	push   0x14
c0014b8a:	e8 41 9d ff ff       	call   c000e8d0 <malloc>
c0014b8f:	89 c6                	mov    esi,eax
c0014b91:	58                   	pop    eax
c0014b92:	5a                   	pop    edx
c0014b93:	6a 00                	push   0x0
c0014b95:	56                   	push   esi
c0014b96:	e8 c5 dd ff ff       	call   c0012960 <VAS::VAS(bool)>
c0014b9b:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014ba1:	59                   	pop    ecx
c0014ba2:	5e                   	pop    esi
c0014ba3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ba7:	50                   	push   eax
c0014ba8:	53                   	push   ebx
c0014ba9:	e8 11 f0 ff ff       	call   c0013bbf <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014bae:	83 c4 14             	add    esp,0x14
c0014bb1:	31 c0                	xor    eax,eax
c0014bb3:	5b                   	pop    ebx
c0014bb4:	5e                   	pop    esi
c0014bb5:	c3                   	ret    
c0014bb6:	66 90                	xchg   ax,ax

c0014bb8 <userModeEntryPoint(void*)>:
c0014bb8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0014bc0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014bc5:	85 c0                	test   eax,eax
c0014bc7:	75 03                	jne    c0014bcc <userModeEntryPoint(void*)+0x14>
c0014bc9:	fb                   	sti    
c0014bca:	66 90                	xchg   ax,ax
c0014bcc:	fb                   	sti    
c0014bcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014bd5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014bdb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bdf:	e9 5b b6 fe ff       	jmp    c000023f <goToUsermode>

c0014be4 <changeTSS>:
c0014be4:	83 ec 14             	sub    esp,0x14
c0014be7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bec:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014bef:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014bf4:	c1 e2 15             	shl    edx,0x15
c0014bf7:	29 d0                	sub    eax,edx
c0014bf9:	50                   	push   eax
c0014bfa:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014bff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c05:	05 68 11 00 00       	add    eax,0x1168
c0014c0a:	50                   	push   eax
c0014c0b:	e8 f8 cb ff ff       	call   c0011808 <TSS::setESP(unsigned long)>
c0014c10:	83 c4 1c             	add    esp,0x1c
c0014c13:	c3                   	ret    

c0014c14 <switchToThread(ThreadControlBlock*)>:
c0014c14:	57                   	push   edi
c0014c15:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014c1b:	56                   	push   esi
c0014c1c:	53                   	push   ebx
c0014c1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c21:	85 c9                	test   ecx,ecx
c0014c23:	0f 85 8b 00 00 00    	jne    c0014cb4 <switchToThread(ThreadControlBlock*)+0xa0>
c0014c29:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014c2d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014c33:	74 7b                	je     c0014cb0 <switchToThread(ThreadControlBlock*)+0x9c>
c0014c35:	b8 00 04 00 00       	mov    eax,0x400
c0014c3a:	29 d0                	sub    eax,edx
c0014c3c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014c3f:	d1 f8                	sar    eax,1
c0014c41:	01 d0                	add    eax,edx
c0014c43:	90                   	nop
c0014c44:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014c47:	e8 9e 37 00 00       	call   c00183ea <HalQueryPerformanceCounter()>
c0014c4c:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014c51:	89 c6                	mov    esi,eax
c0014c53:	89 d7                	mov    edi,edx
c0014c55:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014c5b:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014c60:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014c66:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014c6c:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014c72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014c78:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014c7e:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014c84:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014c87:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014c8a:	01 c6                	add    esi,eax
c0014c8c:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014c8f:	11 d7                	adc    edi,edx
c0014c91:	83 ec 0c             	sub    esp,0xc
c0014c94:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014c97:	53                   	push   ebx
c0014c98:	e8 da b5 fe ff       	call   c0000277 <switchToThreadASM>
c0014c9d:	0f 20 c0             	mov    eax,cr0
c0014ca0:	83 c8 08             	or     eax,0x8
c0014ca3:	0f 22 c0             	mov    cr0,eax
c0014ca6:	83 c4 10             	add    esp,0x10
c0014ca9:	5b                   	pop    ebx
c0014caa:	5e                   	pop    esi
c0014cab:	5f                   	pop    edi
c0014cac:	c3                   	ret    
c0014cad:	8d 76 00             	lea    esi,[esi+0x0]
c0014cb0:	31 c0                	xor    eax,eax
c0014cb2:	eb 90                	jmp    c0014c44 <switchToThread(ThreadControlBlock*)+0x30>
c0014cb4:	5b                   	pop    ebx
c0014cb5:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014cbf:	5e                   	pop    esi
c0014cc0:	5f                   	pop    edi
c0014cc1:	c3                   	ret    
c0014cc2:	66 90                	xchg   ax,ax

c0014cc4 <Process::addArgs(char**)>:
c0014cc4:	57                   	push   edi
c0014cc5:	56                   	push   esi
c0014cc6:	53                   	push   ebx
c0014cc7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014ccb:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0014ccf:	85 f6                	test   esi,esi
c0014cd1:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0014cdb:	74 4f                	je     c0014d2c <Process::addArgs(char**)+0x68>
c0014cdd:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cdf:	85 c0                	test   eax,eax
c0014ce1:	74 49                	je     c0014d2c <Process::addArgs(char**)+0x68>
c0014ce3:	31 db                	xor    ebx,ebx
c0014ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ce8:	83 ec 0c             	sub    esp,0xc
c0014ceb:	50                   	push   eax
c0014cec:	e8 8f b8 fe ff       	call   c0000580 <strlen>
c0014cf1:	83 c0 01             	add    eax,0x1
c0014cf4:	89 04 24             	mov    DWORD PTR [esp],eax
c0014cf7:	e8 d4 9b ff ff       	call   c000e8d0 <malloc>
c0014cfc:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0014d03:	5a                   	pop    edx
c0014d04:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0014d07:	83 c3 01             	add    ebx,0x1
c0014d0a:	59                   	pop    ecx
c0014d0b:	52                   	push   edx
c0014d0c:	50                   	push   eax
c0014d0d:	e8 3e b9 fe ff       	call   c0000650 <strcpy>
c0014d12:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0014d18:	83 c4 10             	add    esp,0x10
c0014d1b:	83 c1 01             	add    ecx,0x1
c0014d1e:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0014d24:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0014d27:	85 c0                	test   eax,eax
c0014d29:	75 bd                	jne    c0014ce8 <Process::addArgs(char**)+0x24>
c0014d2b:	90                   	nop
c0014d2c:	5b                   	pop    ebx
c0014d2d:	5e                   	pop    esi
c0014d2e:	5f                   	pop    edi
c0014d2f:	c3                   	ret    

c0014d30 <Process::Process(char const*, Process*, char**)>:
c0014d30:	56                   	push   esi
c0014d31:	53                   	push   ebx
c0014d32:	83 ec 14             	sub    esp,0x14
c0014d35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d39:	05 0c 02 00 00       	add    eax,0x20c
c0014d3e:	bb 07 00 00 00       	mov    ebx,0x7
c0014d43:	89 c6                	mov    esi,eax
c0014d45:	8d 76 00             	lea    esi,[esi+0x0]
c0014d48:	85 db                	test   ebx,ebx
c0014d4a:	78 14                	js     c0014d60 <Process::Process(char const*, Process*, char**)+0x30>
c0014d4c:	83 ec 0c             	sub    esp,0xc
c0014d4f:	56                   	push   esi
c0014d50:	e8 eb b5 00 00       	call   c0020340 <ThreadControlBlock::ThreadControlBlock()>
c0014d55:	83 c4 10             	add    esp,0x10
c0014d58:	83 c6 5f             	add    esi,0x5f
c0014d5b:	83 eb 01             	sub    ebx,0x1
c0014d5e:	eb e8                	jmp    c0014d48 <Process::Process(char const*, Process*, char**)+0x18>
c0014d60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d64:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014d6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d6f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014d76:	83 ec 0c             	sub    esp,0xc
c0014d79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d7d:	e8 d6 8d ff ff       	call   c000db58 <KeNewProcessEnv(Process*)>
c0014d82:	83 c4 10             	add    esp,0x10
c0014d85:	89 c2                	mov    edx,eax
c0014d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d8b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d95:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014d9e:	a1 1c 42 02 c0       	mov    eax,ds:0xc002421c
c0014da3:	8d 50 01             	lea    edx,[eax+0x1]
c0014da6:	89 15 1c 42 02 c0    	mov    DWORD PTR ds:0xc002421c,edx
c0014dac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014db0:	89 02                	mov    DWORD PTR [edx],eax
c0014db2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014dba:	83 ec 0c             	sub    esp,0xc
c0014dbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014dc1:	e8 0a 9b ff ff       	call   c000e8d0 <malloc>
c0014dc6:	83 c4 10             	add    esp,0x10
c0014dc9:	89 c3                	mov    ebx,eax
c0014dcb:	83 ec 08             	sub    esp,0x8
c0014dce:	6a 00                	push   0x0
c0014dd0:	53                   	push   ebx
c0014dd1:	e8 8a db ff ff       	call   c0012960 <VAS::VAS(bool)>
c0014dd6:	83 c4 10             	add    esp,0x10
c0014dd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ddd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014df1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014df5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014df9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014dff:	e8 af ae ff ff       	call   c000fcb3 <KeInitSignals()>
c0014e04:	89 c2                	mov    edx,eax
c0014e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e14:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e1a:	85 c0                	test   eax,eax
c0014e1c:	74 42                	je     c0014e60 <Process::Process(char const*, Process*, char**)+0x130>
c0014e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e22:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e28:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014e2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e32:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014e38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e3c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e42:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e4c:	05 0c 01 00 00       	add    eax,0x10c
c0014e51:	83 ec 08             	sub    esp,0x8
c0014e54:	52                   	push   edx
c0014e55:	50                   	push   eax
c0014e56:	e8 f5 b7 fe ff       	call   c0000650 <strcpy>
c0014e5b:	83 c4 10             	add    esp,0x10
c0014e5e:	eb 64                	jmp    c0014ec4 <Process::Process(char const*, Process*, char**)+0x194>
c0014e60:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014e68:	83 ec 0c             	sub    esp,0xc
c0014e6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014e6f:	e8 5c 9a ff ff       	call   c000e8d0 <malloc>
c0014e74:	83 c4 10             	add    esp,0x10
c0014e77:	89 c3                	mov    ebx,eax
c0014e79:	83 ec 08             	sub    esp,0x8
c0014e7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e80:	53                   	push   ebx
c0014e81:	e8 b0 c6 ff ff       	call   c0011536 <VgaText::VgaText(char const*)>
c0014e86:	83 c4 10             	add    esp,0x10
c0014e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e8d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014e93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e9d:	83 ec 0c             	sub    esp,0xc
c0014ea0:	50                   	push   eax
c0014ea1:	e8 3e bf ff ff       	call   c0010de4 <addToTerminalCycle(VgaText*)>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ead:	05 0c 01 00 00       	add    eax,0x10c
c0014eb2:	83 ec 08             	sub    esp,0x8
c0014eb5:	68 53 2a 02 c0       	push   0xc0022a53
c0014eba:	50                   	push   eax
c0014ebb:	e8 90 b7 fe ff       	call   c0000650 <strcpy>
c0014ec0:	83 c4 10             	add    esp,0x10
c0014ec3:	90                   	nop
c0014ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec8:	83 c0 0c             	add    eax,0xc
c0014ecb:	83 ec 08             	sub    esp,0x8
c0014ece:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ed2:	50                   	push   eax
c0014ed3:	e8 78 b7 fe ff       	call   c0000650 <strcpy>
c0014ed8:	83 c4 10             	add    esp,0x10
c0014edb:	83 ec 08             	sub    esp,0x8
c0014ede:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014ee2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ee6:	e8 d9 fd ff ff       	call   c0014cc4 <Process::addArgs(char**)>
c0014eeb:	83 c4 10             	add    esp,0x10
c0014eee:	83 ec 08             	sub    esp,0x8
c0014ef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ef9:	e8 c1 ec ff ff       	call   c0013bbf <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014f05:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f09:	83 f0 01             	xor    eax,0x1
c0014f0c:	88 c2                	mov    dl,al
c0014f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f12:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014f18:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014f1d:	83 ec 04             	sub    esp,0x4
c0014f20:	50                   	push   eax
c0014f21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f25:	68 ac 2a 02 c0       	push   0xc0022aac
c0014f2a:	e8 1f 20 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	90                   	nop
c0014f33:	83 c4 14             	add    esp,0x14
c0014f36:	5b                   	pop    ebx
c0014f37:	5e                   	pop    esi
c0014f38:	c3                   	ret    
c0014f39:	90                   	nop
c0014f3a:	66 90                	xchg   ax,ax

c0014f3c <Process::Process(bool, char const*, Process*, char**)>:
c0014f3c:	56                   	push   esi
c0014f3d:	53                   	push   ebx
c0014f3e:	83 ec 24             	sub    esp,0x24
c0014f41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f45:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f4d:	05 0c 02 00 00       	add    eax,0x20c
c0014f52:	bb 07 00 00 00       	mov    ebx,0x7
c0014f57:	89 c6                	mov    esi,eax
c0014f59:	8d 76 00             	lea    esi,[esi+0x0]
c0014f5c:	85 db                	test   ebx,ebx
c0014f5e:	78 14                	js     c0014f74 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014f60:	83 ec 0c             	sub    esp,0xc
c0014f63:	56                   	push   esi
c0014f64:	e8 d7 b3 00 00       	call   c0020340 <ThreadControlBlock::ThreadControlBlock()>
c0014f69:	83 c4 10             	add    esp,0x10
c0014f6c:	83 c6 5f             	add    esi,0x5f
c0014f6f:	83 eb 01             	sub    ebx,0x1
c0014f72:	eb e8                	jmp    c0014f5c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014f74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f78:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014f7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f83:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014f8a:	83 ec 0c             	sub    esp,0xc
c0014f8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f91:	e8 c2 8b ff ff       	call   c000db58 <KeNewProcessEnv(Process*)>
c0014f96:	83 c4 10             	add    esp,0x10
c0014f99:	89 c2                	mov    edx,eax
c0014f9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f9f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014fa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fa9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014fb2:	a1 1c 42 02 c0       	mov    eax,ds:0xc002421c
c0014fb7:	8d 50 01             	lea    edx,[eax+0x1]
c0014fba:	89 15 1c 42 02 c0    	mov    DWORD PTR ds:0xc002421c,edx
c0014fc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014fc4:	89 02                	mov    DWORD PTR [edx],eax
c0014fc6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014fce:	83 ec 0c             	sub    esp,0xc
c0014fd1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014fd5:	e8 f6 98 ff ff       	call   c000e8d0 <malloc>
c0014fda:	83 c4 10             	add    esp,0x10
c0014fdd:	89 c3                	mov    ebx,eax
c0014fdf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014fe4:	83 ec 08             	sub    esp,0x8
c0014fe7:	50                   	push   eax
c0014fe8:	53                   	push   ebx
c0014fe9:	e8 72 d9 ff ff       	call   c0012960 <VAS::VAS(bool)>
c0014fee:	83 c4 10             	add    esp,0x10
c0014ff1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ff5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014fff:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001500d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015011:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015017:	e8 97 ac ff ff       	call   c000fcb3 <KeInitSignals()>
c001501c:	89 c2                	mov    edx,eax
c001501e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015022:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015028:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001502c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015032:	85 c0                	test   eax,eax
c0015034:	74 42                	je     c0015078 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015036:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001503a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015040:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015046:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001504a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015054:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001505a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015060:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015064:	05 0c 01 00 00       	add    eax,0x10c
c0015069:	83 ec 08             	sub    esp,0x8
c001506c:	52                   	push   edx
c001506d:	50                   	push   eax
c001506e:	e8 dd b5 fe ff       	call   c0000650 <strcpy>
c0015073:	83 c4 10             	add    esp,0x10
c0015076:	eb 64                	jmp    c00150dc <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015078:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015080:	83 ec 0c             	sub    esp,0xc
c0015083:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015087:	e8 44 98 ff ff       	call   c000e8d0 <malloc>
c001508c:	83 c4 10             	add    esp,0x10
c001508f:	89 c3                	mov    ebx,eax
c0015091:	83 ec 08             	sub    esp,0x8
c0015094:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015098:	53                   	push   ebx
c0015099:	e8 98 c4 ff ff       	call   c0011536 <VgaText::VgaText(char const*)>
c001509e:	83 c4 10             	add    esp,0x10
c00150a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150a5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00150ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b5:	83 ec 0c             	sub    esp,0xc
c00150b8:	50                   	push   eax
c00150b9:	e8 26 bd ff ff       	call   c0010de4 <addToTerminalCycle(VgaText*)>
c00150be:	83 c4 10             	add    esp,0x10
c00150c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150c5:	05 0c 01 00 00       	add    eax,0x10c
c00150ca:	83 ec 08             	sub    esp,0x8
c00150cd:	68 53 2a 02 c0       	push   0xc0022a53
c00150d2:	50                   	push   eax
c00150d3:	e8 78 b5 fe ff       	call   c0000650 <strcpy>
c00150d8:	83 c4 10             	add    esp,0x10
c00150db:	90                   	nop
c00150dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150e0:	83 c0 0c             	add    eax,0xc
c00150e3:	83 ec 08             	sub    esp,0x8
c00150e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00150ea:	50                   	push   eax
c00150eb:	e8 60 b5 fe ff       	call   c0000650 <strcpy>
c00150f0:	83 c4 10             	add    esp,0x10
c00150f3:	83 ec 08             	sub    esp,0x8
c00150f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00150fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150fe:	e8 c1 fb ff ff       	call   c0014cc4 <Process::addArgs(char**)>
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	90                   	nop
c0015107:	83 c4 24             	add    esp,0x24
c001510a:	5b                   	pop    ebx
c001510b:	5e                   	pop    esi
c001510c:	c3                   	ret    
c001510d:	8d 76 00             	lea    esi,[esi+0x0]

c0015110 <taskStartupFunction>:
c0015110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015115:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015118:	c3                   	ret    
c0015119:	8d 76 00             	lea    esi,[esi+0x0]

c001511c <KeDisablePreemption()>:
c001511c:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015121:	85 c0                	test   eax,eax
c0015123:	75 13                	jne    c0015138 <KeDisablePreemption()+0x1c>
c0015125:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c001512b:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c0015132:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c0015138:	83 c0 01             	add    eax,0x1
c001513b:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015140:	c3                   	ret    
c0015141:	8d 76 00             	lea    esi,[esi+0x0]

c0015144 <KeRestorePreemption()>:
c0015144:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c0015149:	83 e8 01             	sub    eax,0x1
c001514c:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015151:	75 0d                	jne    c0015160 <KeRestorePreemption()+0x1c>
c0015153:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c0015158:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c001515d:	8d 76 00             	lea    esi,[esi+0x0]
c0015160:	c3                   	ret    
c0015161:	90                   	nop
c0015162:	66 90                	xchg   ax,ax

c0015164 <Process::createThread(void (*)(void*), void*, int)>:
c0015164:	57                   	push   edi
c0015165:	31 c9                	xor    ecx,ecx
c0015167:	56                   	push   esi
c0015168:	53                   	push   ebx
c0015169:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001516d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015174:	89 f2                	mov    edx,esi
c0015176:	66 90                	xchg   ax,ax
c0015178:	0f b7 c2             	movzx  eax,dx
c001517b:	80 e2 01             	and    dl,0x1
c001517e:	74 14                	je     c0015194 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015180:	d1 f8                	sar    eax,1
c0015182:	83 c1 01             	add    ecx,0x1
c0015185:	83 f9 10             	cmp    ecx,0x10
c0015188:	89 c2                	mov    edx,eax
c001518a:	75 ec                	jne    c0015178 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001518c:	31 db                	xor    ebx,ebx
c001518e:	89 d8                	mov    eax,ebx
c0015190:	5b                   	pop    ebx
c0015191:	5e                   	pop    esi
c0015192:	5f                   	pop    edi
c0015193:	c3                   	ret    
c0015194:	b8 01 00 00 00       	mov    eax,0x1
c0015199:	d3 e0                	shl    eax,cl
c001519b:	09 c6                	or     esi,eax
c001519d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00151a4:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00151a7:	c1 e0 05             	shl    eax,0x5
c00151aa:	29 c8                	sub    eax,ecx
c00151ac:	01 d8                	add    eax,ebx
c00151ae:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00151b5:	75 0d                	jne    c00151c4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00151b7:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00151c1:	8d 76 00             	lea    esi,[esi+0x0]
c00151c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00151ca:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00151cd:	83 ec 0c             	sub    esp,0xc
c00151d0:	c1 e6 05             	shl    esi,0x5
c00151d3:	29 ce                	sub    esi,ecx
c00151d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00151d8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00151db:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00151e1:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00151e7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00151ed:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00151f4:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00151fa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00151fe:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015204:	89 ca                	mov    edx,ecx
c0015206:	f7 da                	neg    edx
c0015208:	c1 e2 15             	shl    edx,0x15
c001520b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015211:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015217:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001521b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015225:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001522b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001522f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015235:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001523f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015249:	68 00 01 00 00       	push   0x100
c001524e:	e8 7d 96 ff ff       	call   c000e8d0 <malloc>
c0015253:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0015256:	58                   	pop    eax
c0015257:	5a                   	pop    edx
c0015258:	53                   	push   ebx
c0015259:	68 cc c6 02 c0       	push   0xc002c6cc
c001525e:	e8 89 ac 00 00       	call   c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	89 d8                	mov    eax,ebx
c0015268:	5b                   	pop    ebx
c0015269:	5e                   	pop    esi
c001526a:	5f                   	pop    edi
c001526b:	c3                   	ret    

c001526c <Process::createUserThread()>:
c001526c:	83 ec 0c             	sub    esp,0xc
c001526f:	68 80 00 00 00       	push   0x80
c0015274:	6a 00                	push   0x0
c0015276:	68 b8 4b 01 c0       	push   0xc0014bb8
c001527b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001527f:	50                   	push   eax
c0015280:	e8 df fe ff ff       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c0015285:	83 c4 1c             	add    esp,0x1c
c0015288:	c3                   	ret    
c0015289:	8d 76 00             	lea    esi,[esi+0x0]

c001528c <setupMultitasking(void (*)())>:
c001528c:	56                   	push   esi
c001528d:	53                   	push   ebx
c001528e:	83 ec 04             	sub    esp,0x4
c0015291:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015295:	eb 11                	jmp    c00152a8 <setupMultitasking(void (*)())+0x1c>
c0015297:	90                   	nop
c0015298:	83 ec 0c             	sub    esp,0xc
c001529b:	68 cc c6 02 c0       	push   0xc002c6cc
c00152a0:	e8 8b ab 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00152a5:	83 c4 10             	add    esp,0x10
c00152a8:	83 ec 0c             	sub    esp,0xc
c00152ab:	68 cc c6 02 c0       	push   0xc002c6cc
c00152b0:	e8 57 ab 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00152b5:	83 c4 10             	add    esp,0x10
c00152b8:	84 c0                	test   al,al
c00152ba:	74 dc                	je     c0015298 <setupMultitasking(void (*)())+0xc>
c00152bc:	83 ec 0c             	sub    esp,0xc
c00152bf:	68 24 07 00 00       	push   0x724
c00152c4:	e8 07 96 ff ff       	call   c000e8d0 <malloc>
c00152c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00152d0:	6a 00                	push   0x0
c00152d2:	68 57 2a 02 c0       	push   0xc0022a57
c00152d7:	6a 01                	push   0x1
c00152d9:	50                   	push   eax
c00152da:	89 c3                	mov    ebx,eax
c00152dc:	e8 5b fc ff ff       	call   c0014f3c <Process::Process(bool, char const*, Process*, char**)>
c00152e1:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00152e7:	83 c4 14             	add    esp,0x14
c00152ea:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c00152f0:	50                   	push   eax
c00152f1:	e8 43 bd ff ff       	call   c0011039 <setActiveTerminal(VgaText*)>
c00152f6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00152fd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015307:	83 c8 01             	or     eax,0x1
c001530a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015311:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015317:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001531a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015324:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001532a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015334:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001533a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015344:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001534e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015354:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001535a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015364:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001536e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015375:	e8 56 95 ff ff       	call   c000e8d0 <malloc>
c001537a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015380:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015386:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001538c:	5a                   	pop    edx
c001538d:	59                   	pop    ecx
c001538e:	68 53 2a 02 c0       	push   0xc0022a53
c0015393:	50                   	push   eax
c0015394:	e8 b7 b2 fe ff       	call   c0000650 <strcpy>
c0015399:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00153a0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153a4:	83 c4 14             	add    esp,0x14
c00153a7:	5b                   	pop    ebx
c00153a8:	5e                   	pop    esi
c00153a9:	e9 bb ae fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00153ae:	66 90                	xchg   ax,ax

c00153b0 <schedule()>:
c00153b0:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c00153b6:	85 d2                	test   edx,edx
c00153b8:	74 0e                	je     c00153c8 <schedule()+0x18>
c00153ba:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c00153c4:	c3                   	ret    
c00153c5:	8d 76 00             	lea    esi,[esi+0x0]
c00153c8:	53                   	push   ebx
c00153c9:	83 ec 14             	sub    esp,0x14
c00153cc:	68 cc c6 02 c0       	push   0xc002c6cc
c00153d1:	e8 36 aa 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	84 c0                	test   al,al
c00153db:	75 3f                	jne    c001541c <schedule()+0x6c>
c00153dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00153e5:	83 fa 01             	cmp    edx,0x1
c00153e8:	74 3a                	je     c0015424 <schedule()+0x74>
c00153ea:	66 90                	xchg   ax,ax
c00153ec:	83 ec 0c             	sub    esp,0xc
c00153ef:	68 cc c6 02 c0       	push   0xc002c6cc
c00153f4:	e8 2f aa 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00153f9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015400:	89 c3                	mov    ebx,eax
c0015402:	e8 29 aa 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015407:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001540e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015411:	e8 fe f7 ff ff       	call   c0014c14 <switchToThread(ThreadControlBlock*)>
c0015416:	83 c4 10             	add    esp,0x10
c0015419:	8d 76 00             	lea    esi,[esi+0x0]
c001541c:	83 c4 08             	add    esp,0x8
c001541f:	5b                   	pop    ebx
c0015420:	c3                   	ret    
c0015421:	8d 76 00             	lea    esi,[esi+0x0]
c0015424:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001542b:	83 ec 08             	sub    esp,0x8
c001542e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015433:	50                   	push   eax
c0015434:	68 cc c6 02 c0       	push   0xc002c6cc
c0015439:	e8 ae aa 00 00       	call   c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	eb a9                	jmp    c00153ec <schedule()+0x3c>
c0015443:	90                   	nop

c0015444 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015444:	83 ec 0c             	sub    esp,0xc
c0015447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001544c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015453:	e8 58 ff ff ff       	call   c00153b0 <schedule()>
c0015458:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015460:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015465:	85 c0                	test   eax,eax
c0015467:	75 03                	jne    c001546c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0015469:	fb                   	sti    
c001546a:	66 90                	xchg   ax,ax
c001546c:	83 c4 0c             	add    esp,0xc
c001546f:	c3                   	ret    

c0015470 <blockTask(TaskState)>:
c0015470:	83 ec 0c             	sub    esp,0xc
c0015473:	fa                   	cli    
c0015474:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015479:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001547d:	83 c0 01             	add    eax,0x1
c0015480:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015485:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001548a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001548d:	e8 1e ff ff ff       	call   c00153b0 <schedule()>
c0015492:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001549a:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00154a0:	85 d2                	test   edx,edx
c00154a2:	75 04                	jne    c00154a8 <blockTask(TaskState)+0x38>
c00154a4:	fb                   	sti    
c00154a5:	8d 76 00             	lea    esi,[esi+0x0]
c00154a8:	83 c4 0c             	add    esp,0xc
c00154ab:	c3                   	ret    

c00154ac <waitTask(int, int*, int)>:
c00154ac:	83 ec 18             	sub    esp,0x18
c00154af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00154b8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00154bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00154c7:	6a 07                	push   0x7
c00154c9:	e8 a2 ff ff ff       	call   c0015470 <blockTask(TaskState)>
c00154ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154d3:	83 c4 10             	add    esp,0x10
c00154d6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00154d9:	85 d2                	test   edx,edx
c00154db:	74 0b                	je     c00154e8 <waitTask(int, int*, int)+0x3c>
c00154dd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00154e0:	89 02                	mov    DWORD PTR [edx],eax
c00154e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154e7:	90                   	nop
c00154e8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00154eb:	83 c4 0c             	add    esp,0xc
c00154ee:	c3                   	ret    
c00154ef:	90                   	nop

c00154f0 <milliTenthSleepUntil(unsigned int)>:
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154f7:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c00154fd:	76 05                	jbe    c0015504 <milliTenthSleepUntil(unsigned int)+0x14>
c00154ff:	90                   	nop
c0015500:	83 c4 0c             	add    esp,0xc
c0015503:	c3                   	ret    
c0015504:	fa                   	cli    
c0015505:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c001550b:	83 ec 08             	sub    esp,0x8
c001550e:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c0015514:	83 c1 01             	add    ecx,0x1
c0015517:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c001551d:	83 c2 01             	add    edx,0x1
c0015520:	89 15 ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,edx
c0015526:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001552c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001552f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015535:	51                   	push   ecx
c0015536:	68 c0 c6 02 c0       	push   0xc002c6c0
c001553b:	e8 ac a9 00 00       	call   c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015540:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015547:	e8 24 ff ff ff       	call   c0015470 <blockTask(TaskState)>
c001554c:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	83 e8 01             	sub    eax,0x1
c0015557:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c001555c:	85 c0                	test   eax,eax
c001555e:	75 0c                	jne    c001556c <milliTenthSleepUntil(unsigned int)+0x7c>
c0015560:	8b 15 a8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a8
c0015566:	85 d2                	test   edx,edx
c0015568:	75 1a                	jne    c0015584 <milliTenthSleepUntil(unsigned int)+0x94>
c001556a:	66 90                	xchg   ax,ax
c001556c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015574:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015579:	85 c0                	test   eax,eax
c001557b:	75 83                	jne    c0015500 <milliTenthSleepUntil(unsigned int)+0x10>
c001557d:	fb                   	sti    
c001557e:	83 c4 0c             	add    esp,0xc
c0015581:	c3                   	ret    
c0015582:	66 90                	xchg   ax,ax
c0015584:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c001558e:	e8 1d fe ff ff       	call   c00153b0 <schedule()>
c0015593:	eb d7                	jmp    c001556c <milliTenthSleepUntil(unsigned int)+0x7c>
c0015595:	8d 76 00             	lea    esi,[esi+0x0]

c0015598 <milliTenthSleep(unsigned int)>:
c0015598:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001559c:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c00155a1:	01 c2                	add    edx,eax
c00155a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00155a7:	e9 44 ff ff ff       	jmp    c00154f0 <milliTenthSleepUntil(unsigned int)>

c00155ac <sleep(unsigned int)>:
c00155ac:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00155b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00155b8:	eb de                	jmp    c0015598 <milliTenthSleep(unsigned int)>
c00155ba:	66 90                	xchg   ax,ax

c00155bc <taskReturned>:
c00155bc:	83 ec 18             	sub    esp,0x18
c00155bf:	68 d8 2a 02 c0       	push   0xc0022ad8
c00155c4:	e8 4d 96 ff ff       	call   c000ec16 <KePanic(char const*)>
c00155c9:	83 c4 10             	add    esp,0x10
c00155cc:	83 ec 0c             	sub    esp,0xc
c00155cf:	6a 02                	push   0x2
c00155d1:	e8 9a fe ff ff       	call   c0015470 <blockTask(TaskState)>
c00155d6:	fa                   	cli    
c00155d7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00155dc:	83 c0 01             	add    eax,0x1
c00155df:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00155e4:	e8 c7 fd ff ff       	call   c00153b0 <schedule()>
c00155e9:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00155f1:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00155f7:	83 c4 10             	add    esp,0x10
c00155fa:	85 d2                	test   edx,edx
c00155fc:	75 ce                	jne    c00155cc <taskReturned+0x10>
c00155fe:	fb                   	sti    
c00155ff:	eb cb                	jmp    c00155cc <taskReturned+0x10>
c0015601:	8d 76 00             	lea    esi,[esi+0x0]

c0015604 <Thr::processFromPID(int)>:
c0015604:	57                   	push   edi
c0015605:	56                   	push   esi
c0015606:	53                   	push   ebx
c0015607:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001560b:	fa                   	cli    
c001560c:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015612:	83 ec 0c             	sub    esp,0xc
c0015615:	68 cc c6 02 c0       	push   0xc002c6cc
c001561a:	83 c1 01             	add    ecx,0x1
c001561d:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c0015623:	e8 00 a8 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015628:	83 c4 10             	add    esp,0x10
c001562b:	89 c7                	mov    edi,eax
c001562d:	eb 15                	jmp    c0015644 <Thr::processFromPID(int)+0x40>
c001562f:	90                   	nop
c0015630:	83 ec 0c             	sub    esp,0xc
c0015633:	68 cc c6 02 c0       	push   0xc002c6cc
c0015638:	e8 eb a7 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001563d:	83 c4 10             	add    esp,0x10
c0015640:	39 f8                	cmp    eax,edi
c0015642:	74 50                	je     c0015694 <Thr::processFromPID(int)+0x90>
c0015644:	83 ec 0c             	sub    esp,0xc
c0015647:	68 cc c6 02 c0       	push   0xc002c6cc
c001564c:	e8 d7 a7 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015651:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015658:	89 c3                	mov    ebx,eax
c001565a:	e8 d1 a7 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001565f:	58                   	pop    eax
c0015660:	5a                   	pop    edx
c0015661:	53                   	push   ebx
c0015662:	68 cc c6 02 c0       	push   0xc002c6cc
c0015667:	e8 80 a8 00 00       	call   c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001566c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001566f:	83 c4 10             	add    esp,0x10
c0015672:	39 30                	cmp    DWORD PTR [eax],esi
c0015674:	75 ba                	jne    c0015630 <Thr::processFromPID(int)+0x2c>
c0015676:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001567e:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015684:	85 c9                	test   ecx,ecx
c0015686:	74 08                	je     c0015690 <Thr::processFromPID(int)+0x8c>
c0015688:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001568b:	90                   	nop
c001568c:	5b                   	pop    ebx
c001568d:	5e                   	pop    esi
c001568e:	5f                   	pop    edi
c001568f:	c3                   	ret    
c0015690:	fb                   	sti    
c0015691:	eb f5                	jmp    c0015688 <Thr::processFromPID(int)+0x84>
c0015693:	90                   	nop
c0015694:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c001569c:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00156a2:	31 c0                	xor    eax,eax
c00156a4:	85 d2                	test   edx,edx
c00156a6:	75 e4                	jne    c001568c <Thr::processFromPID(int)+0x88>
c00156a8:	fb                   	sti    
c00156a9:	5b                   	pop    ebx
c00156aa:	5e                   	pop    esi
c00156ab:	5f                   	pop    edi
c00156ac:	c3                   	ret    
c00156ad:	8d 76 00             	lea    esi,[esi+0x0]

c00156b0 <unblockTask(ThreadControlBlock*)>:
c00156b0:	53                   	push   ebx
c00156b1:	83 ec 08             	sub    esp,0x8
c00156b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156b8:	fa                   	cli    
c00156b9:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00156bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00156c2:	83 c2 01             	add    edx,0x1
c00156c5:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00156cb:	85 c0                	test   eax,eax
c00156cd:	74 6d                	je     c001573c <unblockTask(ThreadControlBlock*)+0x8c>
c00156cf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00156d2:	83 f8 01             	cmp    eax,0x1
c00156d5:	74 39                	je     c0015710 <unblockTask(ThreadControlBlock*)+0x60>
c00156d7:	83 ec 0c             	sub    esp,0xc
c00156da:	68 cc c6 02 c0       	push   0xc002c6cc
c00156df:	e8 44 a7 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00156e4:	83 c4 10             	add    esp,0x10
c00156e7:	85 c0                	test   eax,eax
c00156e9:	75 1d                	jne    c0015708 <unblockTask(ThreadControlBlock*)+0x58>
c00156eb:	eb 63                	jmp    c0015750 <unblockTask(ThreadControlBlock*)+0xa0>
c00156ed:	8d 76 00             	lea    esi,[esi+0x0]
c00156f0:	83 ec 08             	sub    esp,0x8
c00156f3:	50                   	push   eax
c00156f4:	68 cc c6 02 c0       	push   0xc002c6cc
c00156f9:	e8 36 ac 00 00       	call   c0020334 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00156fe:	83 c4 10             	add    esp,0x10
c0015701:	85 c0                	test   eax,eax
c0015703:	74 4b                	je     c0015750 <unblockTask(ThreadControlBlock*)+0xa0>
c0015705:	8d 76 00             	lea    esi,[esi+0x0]
c0015708:	39 c3                	cmp    ebx,eax
c001570a:	75 e4                	jne    c00156f0 <unblockTask(ThreadControlBlock*)+0x40>
c001570c:	eb 12                	jmp    c0015720 <unblockTask(ThreadControlBlock*)+0x70>
c001570e:	66 90                	xchg   ax,ax
c0015710:	83 ec 0c             	sub    esp,0xc
c0015713:	68 75 2a 02 c0       	push   0xc0022a75
c0015718:	e8 31 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001571d:	83 c4 10             	add    esp,0x10
c0015720:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015728:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001572d:	85 c0                	test   eax,eax
c001572f:	75 03                	jne    c0015734 <unblockTask(ThreadControlBlock*)+0x84>
c0015731:	fb                   	sti    
c0015732:	66 90                	xchg   ax,ax
c0015734:	83 c4 08             	add    esp,0x8
c0015737:	5b                   	pop    ebx
c0015738:	c3                   	ret    
c0015739:	8d 76 00             	lea    esi,[esi+0x0]
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	68 5e 2a 02 c0       	push   0xc0022a5e
c0015744:	e8 05 18 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	eb d2                	jmp    c0015720 <unblockTask(ThreadControlBlock*)+0x70>
c001574e:	66 90                	xchg   ax,ax
c0015750:	83 ec 08             	sub    esp,0x8
c0015753:	53                   	push   ebx
c0015754:	68 cc c6 02 c0       	push   0xc002c6cc
c0015759:	e8 8e a7 00 00       	call   c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001575e:	83 c4 10             	add    esp,0x10
c0015761:	eb bd                	jmp    c0015720 <unblockTask(ThreadControlBlock*)+0x70>
c0015763:	90                   	nop

c0015764 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015764:	55                   	push   ebp
c0015765:	57                   	push   edi
c0015766:	56                   	push   esi
c0015767:	53                   	push   ebx
c0015768:	83 ec 1c             	sub    esp,0x1c
c001576b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001576f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015772:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015778:	85 ed                	test   ebp,ebp
c001577a:	7e 28                	jle    c00157a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001577c:	31 f6                	xor    esi,esi
c001577e:	66 90                	xchg   ax,ax
c0015780:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015787:	83 ec 0c             	sub    esp,0xc
c001578a:	83 c6 01             	add    esi,0x1
c001578d:	57                   	push   edi
c001578e:	e8 4d 91 ff ff       	call   c000e8e0 <free>
c0015793:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015796:	83 c4 10             	add    esp,0x10
c0015799:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001579f:	7f df                	jg     c0015780 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00157a1:	8d 76 00             	lea    esi,[esi+0x0]
c00157a4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00157ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00157b3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00157b6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00157b9:	d3 c0                	rol    eax,cl
c00157bb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00157c2:	21 c8                	and    eax,ecx
c00157c4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00157cb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157ce:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00157d6:	89 f7                	mov    edi,esi
c00157d8:	0f 85 72 01 00 00    	jne    c0015950 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157de:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00157e4:	85 ed                	test   ebp,ebp
c00157e6:	74 1c                	je     c0015804 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00157e8:	83 ec 0c             	sub    esp,0xc
c00157eb:	55                   	push   ebp
c00157ec:	e8 83 82 ff ff       	call   c000da74 <EnvVarContainer::~EnvVarContainer()>
c00157f1:	59                   	pop    ecx
c00157f2:	5e                   	pop    esi
c00157f3:	6a 0c                	push   0xc
c00157f5:	55                   	push   ebp
c00157f6:	e8 60 6e ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00157fb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	89 f7                	mov    edi,esi
c0015803:	90                   	nop
c0015804:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001580a:	85 c0                	test   eax,eax
c001580c:	0f 84 b2 00 00 00    	je     c00158c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015812:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015815:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015819:	31 c9                	xor    ecx,ecx
c001581b:	eb 17                	jmp    c0015834 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001581d:	8d 76 00             	lea    esi,[esi+0x0]
c0015820:	83 c1 01             	add    ecx,0x1
c0015823:	83 f9 10             	cmp    ecx,0x10
c0015826:	0f 84 98 00 00 00    	je     c00158c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001582c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015832:	66 90                	xchg   ax,ax
c0015834:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001583b:	d3 fa                	sar    edx,cl
c001583d:	80 e2 01             	and    dl,0x1
c0015840:	74 de                	je     c0015820 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015842:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0015845:	c1 e2 05             	shl    edx,0x5
c0015848:	29 ca                	sub    edx,ecx
c001584a:	01 d0                	add    eax,edx
c001584c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0015852:	83 fd 07             	cmp    ebp,0x7
c0015855:	75 c9                	jne    c0015820 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015857:	05 40 02 00 00       	add    eax,0x240
c001585c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001585f:	83 fd ff             	cmp    ebp,0xffffffff
c0015862:	0f 8c f0 00 00 00    	jl     c0015958 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015868:	0f 84 ae 01 00 00    	je     c0015a1c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001586e:	85 ed                	test   ebp,ebp
c0015870:	0f 84 92 01 00 00    	je     c0015a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015876:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015878:	75 a6                	jne    c0015820 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001587a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001587e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015884:	01 d0                	add    eax,edx
c0015886:	66 90                	xchg   ax,ax
c0015888:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001588c:	83 ec 0c             	sub    esp,0xc
c001588f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015895:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015898:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001589e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00158a5:	50                   	push   eax
c00158a6:	e8 05 fe ff ff       	call   c00156b0 <unblockTask(ThreadControlBlock*)>
c00158ab:	83 c4 10             	add    esp,0x10
c00158ae:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158b1:	89 f7                	mov    edi,esi
c00158b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00158b7:	83 c1 01             	add    ecx,0x1
c00158ba:	83 f9 10             	cmp    ecx,0x10
c00158bd:	0f 85 69 ff ff ff    	jne    c001582c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00158c3:	90                   	nop
c00158c4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00158ca:	85 c0                	test   eax,eax
c00158cc:	74 62                	je     c0015930 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00158ce:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00158d4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00158da:	74 54                	je     c0015930 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00158dc:	83 ec 0c             	sub    esp,0xc
c00158df:	68 cc c6 02 c0       	push   0xc002c6cc
c00158e4:	e8 3f a5 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00158e9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00158f0:	89 c7                	mov    edi,eax
c00158f2:	e8 15 a5 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	84 c0                	test   al,al
c00158fc:	0f 84 ce 00 00 00    	je     c00159d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015902:	66 90                	xchg   ax,ax
c0015904:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015907:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001590d:	85 d2                	test   edx,edx
c001590f:	74 0f                	je     c0015920 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015911:	8b 02                	mov    eax,DWORD PTR [edx]
c0015913:	83 ec 0c             	sub    esp,0xc
c0015916:	52                   	push   edx
c0015917:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001591a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001591d:	83 c4 10             	add    esp,0x10
c0015920:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001592a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001592d:	8d 76 00             	lea    esi,[esi+0x0]
c0015930:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015936:	85 db                	test   ebx,ebx
c0015938:	74 16                	je     c0015950 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001593a:	83 ec 0c             	sub    esp,0xc
c001593d:	53                   	push   ebx
c001593e:	e8 71 cb ff ff       	call   c00124b4 <VAS::~VAS()>
c0015943:	58                   	pop    eax
c0015944:	5a                   	pop    edx
c0015945:	6a 14                	push   0x14
c0015947:	53                   	push   ebx
c0015948:	e8 0e 6d ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001594d:	83 c4 10             	add    esp,0x10
c0015950:	83 c4 1c             	add    esp,0x1c
c0015953:	5b                   	pop    ebx
c0015954:	5e                   	pop    esi
c0015955:	5f                   	pop    edi
c0015956:	5d                   	pop    ebp
c0015957:	c3                   	ret    
c0015958:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	68 0c 2b 02 c0       	push   0xc0022b0c
c0015964:	e8 ad 92 ff ff       	call   c000ec16 <KePanic(char const*)>
c0015969:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001596c:	83 c4 10             	add    esp,0x10
c001596f:	89 f7                	mov    edi,esi
c0015971:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015975:	e9 a6 fe ff ff       	jmp    c0015820 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001597a:	66 90                	xchg   ax,ax
c001597c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015982:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015988:	75 1e                	jne    c00159a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001598a:	83 ec 0c             	sub    esp,0xc
c001598d:	68 74 2b 02 c0       	push   0xc0022b74
c0015992:	e8 b7 15 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015997:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001599e:	e8 cd fa ff ff       	call   c0015470 <blockTask(TaskState)>
c00159a3:	83 c4 10             	add    esp,0x10
c00159a6:	66 90                	xchg   ax,ax
c00159a8:	83 ec 08             	sub    esp,0x8
c00159ab:	56                   	push   esi
c00159ac:	68 cc c6 02 c0       	push   0xc002c6cc
c00159b1:	e8 36 a5 00 00       	call   c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159b6:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00159bd:	e8 66 a4 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159c2:	83 c4 10             	add    esp,0x10
c00159c5:	39 f8                	cmp    eax,edi
c00159c7:	0f 84 37 ff ff ff    	je     c0015904 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00159cd:	8d 76 00             	lea    esi,[esi+0x0]
c00159d0:	83 ec 0c             	sub    esp,0xc
c00159d3:	68 cc c6 02 c0       	push   0xc002c6cc
c00159d8:	e8 4b a4 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159dd:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00159e4:	89 c6                	mov    esi,eax
c00159e6:	e8 45 a4 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159eb:	83 c4 10             	add    esp,0x10
c00159ee:	39 f3                	cmp    ebx,esi
c00159f0:	74 b6                	je     c00159a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00159f2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00159f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159f8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00159fe:	75 a8                	jne    c00159a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a00:	e9 77 ff ff ff       	jmp    c001597c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015a05:	8d 76 00             	lea    esi,[esi+0x0]
c0015a08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	68 40 2b 02 c0       	push   0xc0022b40
c0015a14:	e9 4b ff ff ff       	jmp    c0015964 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015a19:	8d 76 00             	lea    esi,[esi+0x0]
c0015a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a20:	8b 36                	mov    esi,DWORD PTR [esi]
c0015a22:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015a25:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015a28:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015a2e:	01 d7                	add    edi,edx
c0015a30:	89 f8                	mov    eax,edi
c0015a32:	e9 51 fe ff ff       	jmp    c0015888 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015a37:	90                   	nop

c0015a38 <cleanerTaskFunction(void*)>:
c0015a38:	53                   	push   ebx
c0015a39:	83 ec 08             	sub    esp,0x8
c0015a3c:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015a44:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015a49:	85 c0                	test   eax,eax
c0015a4b:	75 03                	jne    c0015a50 <cleanerTaskFunction(void*)+0x18>
c0015a4d:	fb                   	sti    
c0015a4e:	66 90                	xchg   ax,ax
c0015a50:	fa                   	cli    
c0015a51:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015a56:	83 c0 01             	add    eax,0x1
c0015a59:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015a60:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015a65:	0f 85 c9 00 00 00    	jne    c0015b34 <cleanerTaskFunction(void*)+0xfc>
c0015a6b:	83 ec 0c             	sub    esp,0xc
c0015a6e:	6a 02                	push   0x2
c0015a70:	e8 cf f9 ff ff       	call   c0015444 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015a75:	83 c4 10             	add    esp,0x10
c0015a78:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015a7f:	fa                   	cli    
c0015a80:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015a86:	8b 1d ac c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6ac
c0015a8c:	83 c1 01             	add    ecx,0x1
c0015a8f:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c0015a95:	83 c3 01             	add    ebx,0x1
c0015a98:	89 1d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ebx
c0015a9e:	fa                   	cli    
c0015a9f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015aa4:	83 c0 01             	add    eax,0x1
c0015aa7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015aac:	eb 2a                	jmp    c0015ad8 <cleanerTaskFunction(void*)+0xa0>
c0015aae:	66 90                	xchg   ax,ax
c0015ab0:	83 ec 0c             	sub    esp,0xc
c0015ab3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015ab8:	e8 6b a3 00 00       	call   c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015abd:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015ac4:	89 c3                	mov    ebx,eax
c0015ac6:	e8 65 a3 00 00       	call   c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015acb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ace:	e8 91 fc ff ff       	call   c0015764 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015ad3:	83 c4 10             	add    esp,0x10
c0015ad6:	66 90                	xchg   ax,ax
c0015ad8:	83 ec 0c             	sub    esp,0xc
c0015adb:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015ae0:	e8 27 a3 00 00       	call   c001fe0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ae5:	83 c4 10             	add    esp,0x10
c0015ae8:	84 c0                	test   al,al
c0015aea:	74 c4                	je     c0015ab0 <cleanerTaskFunction(void*)+0x78>
c0015aec:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015af4:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015afa:	85 d2                	test   edx,edx
c0015afc:	75 02                	jne    c0015b00 <cleanerTaskFunction(void*)+0xc8>
c0015afe:	fb                   	sti    
c0015aff:	90                   	nop
c0015b00:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015b05:	83 e8 01             	sub    eax,0x1
c0015b08:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015b0d:	0f 85 29 ff ff ff    	jne    c0015a3c <cleanerTaskFunction(void*)+0x4>
c0015b13:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015b18:	85 c0                	test   eax,eax
c0015b1a:	0f 84 1c ff ff ff    	je     c0015a3c <cleanerTaskFunction(void*)+0x4>
c0015b20:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015b2a:	e8 81 f8 ff ff       	call   c00153b0 <schedule()>
c0015b2f:	e9 08 ff ff ff       	jmp    c0015a3c <cleanerTaskFunction(void*)+0x4>
c0015b34:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015b3c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b41:	85 c0                	test   eax,eax
c0015b43:	0f 85 2f ff ff ff    	jne    c0015a78 <cleanerTaskFunction(void*)+0x40>
c0015b49:	fb                   	sti    
c0015b4a:	e9 29 ff ff ff       	jmp    c0015a78 <cleanerTaskFunction(void*)+0x40>
c0015b4f:	90                   	nop

c0015b50 <terminateTask(int)>:
c0015b50:	83 ec 14             	sub    esp,0x14
c0015b53:	fa                   	cli    
c0015b54:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b59:	83 c0 01             	add    eax,0x1
c0015b5c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b61:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015b66:	83 c0 01             	add    eax,0x1
c0015b69:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015b6e:	fa                   	cli    
c0015b6f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015b78:	83 c0 01             	add    eax,0x1
c0015b7b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b85:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b8d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015b90:	50                   	push   eax
c0015b91:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015b96:	e8 51 a3 00 00       	call   c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ba0:	83 c4 10             	add    esp,0x10
c0015ba3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015baa:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015baf:	85 c0                	test   eax,eax
c0015bb1:	0f 84 81 00 00 00    	je     c0015c38 <terminateTask(int)+0xe8>
c0015bb7:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015bbe:	83 ec 0c             	sub    esp,0xc
c0015bc1:	50                   	push   eax
c0015bc2:	e8 e9 fa ff ff       	call   c00156b0 <unblockTask(ThreadControlBlock*)>
c0015bc7:	83 c4 10             	add    esp,0x10
c0015bca:	66 90                	xchg   ax,ax
c0015bcc:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015bd4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015bd9:	85 c0                	test   eax,eax
c0015bdb:	75 03                	jne    c0015be0 <terminateTask(int)+0x90>
c0015bdd:	fb                   	sti    
c0015bde:	66 90                	xchg   ax,ax
c0015be0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015be5:	83 e8 01             	sub    eax,0x1
c0015be8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015bed:	75 09                	jne    c0015bf8 <terminateTask(int)+0xa8>
c0015bef:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015bf6:	75 54                	jne    c0015c4c <terminateTask(int)+0xfc>
c0015bf8:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c00:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c0015c06:	85 c9                	test   ecx,ecx
c0015c08:	75 06                	jne    c0015c10 <terminateTask(int)+0xc0>
c0015c0a:	66 90                	xchg   ax,ax
c0015c0c:	fb                   	sti    
c0015c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c10:	fa                   	cli    
c0015c11:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c16:	83 c0 01             	add    eax,0x1
c0015c19:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c1e:	e8 8d f7 ff ff       	call   c00153b0 <schedule()>
c0015c23:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c0015c2b:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015c31:	85 d2                	test   edx,edx
c0015c33:	75 db                	jne    c0015c10 <terminateTask(int)+0xc0>
c0015c35:	eb d5                	jmp    c0015c0c <terminateTask(int)+0xbc>
c0015c37:	90                   	nop
c0015c38:	83 ec 0c             	sub    esp,0xc
c0015c3b:	68 8c 2a 02 c0       	push   0xc0022a8c
c0015c40:	e8 09 13 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	eb 82                	jmp    c0015bcc <terminateTask(int)+0x7c>
c0015c4a:	66 90                	xchg   ax,ax
c0015c4c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015c56:	e8 55 f7 ff ff       	call   c00153b0 <schedule()>
c0015c5b:	eb 9b                	jmp    c0015bf8 <terminateTask(int)+0xa8>
c0015c5d:	8d 76 00             	lea    esi,[esi+0x0]

c0015c60 <Thr::terminateFromIRQ(int)>:
c0015c60:	83 ec 18             	sub    esp,0x18
c0015c63:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c67:	50                   	push   eax
c0015c68:	e8 e3 fe ff ff       	call   c0015b50 <terminateTask(int)>
c0015c6d:	8d 76 00             	lea    esi,[esi+0x0]

c0015c70 <__static_initialization_and_destruction_0(int, int)>:
c0015c70:	83 ec 0c             	sub    esp,0xc
c0015c73:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015c78:	0f 85 8e 00 00 00    	jne    c0015d0c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c7e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015c86:	0f 85 80 00 00 00    	jne    c0015d0c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015c8c:	83 ec 0c             	sub    esp,0xc
c0015c8f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015c94:	e8 f3 a6 00 00       	call   c002038c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	83 ec 04             	sub    esp,0x4
c0015c9f:	68 60 3a 02 c0       	push   0xc0023a60
c0015ca4:	68 cc c6 02 c0       	push   0xc002c6cc
c0015ca9:	68 3c 03 02 c0       	push   0xc002033c
c0015cae:	e8 58 69 ff ff       	call   c000c60b <__cxa_atexit>
c0015cb3:	83 c4 10             	add    esp,0x10
c0015cb6:	83 ec 0c             	sub    esp,0xc
c0015cb9:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015cbe:	e8 c9 a6 00 00       	call   c002038c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015cc3:	83 c4 10             	add    esp,0x10
c0015cc6:	83 ec 04             	sub    esp,0x4
c0015cc9:	68 60 3a 02 c0       	push   0xc0023a60
c0015cce:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015cd3:	68 3c 03 02 c0       	push   0xc002033c
c0015cd8:	e8 2e 69 ff ff       	call   c000c60b <__cxa_atexit>
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	83 ec 0c             	sub    esp,0xc
c0015ce3:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015ce8:	e8 9f a6 00 00       	call   c002038c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015ced:	83 c4 10             	add    esp,0x10
c0015cf0:	83 ec 04             	sub    esp,0x4
c0015cf3:	68 60 3a 02 c0       	push   0xc0023a60
c0015cf8:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015cfd:	68 3c 03 02 c0       	push   0xc002033c
c0015d02:	e8 04 69 ff ff       	call   c000c60b <__cxa_atexit>
c0015d07:	83 c4 10             	add    esp,0x10
c0015d0a:	66 90                	xchg   ax,ax
c0015d0c:	90                   	nop
c0015d0d:	83 c4 0c             	add    esp,0xc
c0015d10:	c3                   	ret    
c0015d11:	8d 76 00             	lea    esi,[esi+0x0]

c0015d14 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015d14:	83 ec 0c             	sub    esp,0xc
c0015d17:	83 ec 08             	sub    esp,0x8
c0015d1a:	68 ff ff 00 00       	push   0xffff
c0015d1f:	6a 01                	push   0x1
c0015d21:	e8 4a ff ff ff       	call   c0015c70 <__static_initialization_and_destruction_0(int, int)>
c0015d26:	83 c4 10             	add    esp,0x10
c0015d29:	83 c4 0c             	add    esp,0xc
c0015d2c:	c3                   	ret    

c0015d2d <Vm::inbv(unsigned short)>:
c0015d2d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d31:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015d36:	75 06                	jne    c0015d3e <Vm::inbv(unsigned short)+0x11>
c0015d38:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015d3d:	c3                   	ret    
c0015d3e:	ec                   	in     al,dx
c0015d3f:	c3                   	ret    

c0015d40 <Vm::outbv(unsigned short, unsigned char)>:
c0015d40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d48:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015d4d:	75 25                	jne    c0015d74 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015d4f:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015d55:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015d5b:	8d 51 01             	lea    edx,[ecx+0x1]
c0015d5e:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015d64:	83 fa 20             	cmp    edx,0x20
c0015d67:	75 0c                	jne    c0015d75 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015d69:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015d73:	c3                   	ret    
c0015d74:	ee                   	out    dx,al
c0015d75:	c3                   	ret    

c0015d76 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015d76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015d7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015d80:	c1 e0 04             	shl    eax,0x4
c0015d83:	01 d0                	add    eax,edx
c0015d85:	c3                   	ret    

c0015d86 <Vm::getSegment(unsigned int)>:
c0015d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d8a:	c1 e8 10             	shr    eax,0x10
c0015d8d:	c3                   	ret    

c0015d8e <Vm::getOffset(unsigned int)>:
c0015d8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d92:	c3                   	ret    

c0015d93 <Vm::mainloop2()>:
c0015d93:	83 ec 18             	sub    esp,0x18
c0015d96:	fa                   	cli    
c0015d97:	6a 02                	push   0x2
c0015d99:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015d9f:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015da6:	e8 99 f6 ff ff       	call   c0015444 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015dab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015db0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015db4:	52                   	push   edx
c0015db5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015db9:	52                   	push   edx
c0015dba:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015dbe:	52                   	push   edx
c0015dbf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015dc3:	50                   	push   eax
c0015dc4:	e8 46 a4 fe ff       	call   c000020f <goToVM86>
c0015dc9:	83 c4 2c             	add    esp,0x2c
c0015dcc:	c3                   	ret    

c0015dcd <Vm::mainVm8086Loop(void*)>:
c0015dcd:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015dd4:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015ddb:	75 01                	jne    c0015dde <Vm::mainVm8086Loop(void*)+0x11>
c0015ddd:	fb                   	sti    
c0015dde:	eb b3                	jmp    c0015d93 <Vm::mainloop2()>

c0015de0 <Vm::mainloop3(unsigned long)>:
c0015de0:	83 ec 18             	sub    esp,0x18
c0015de3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015de7:	fa                   	cli    
c0015de8:	6a 02                	push   0x2
c0015dea:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015df0:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015df7:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015dfc:	e8 43 f6 ff ff       	call   c0015444 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015e01:	83 c4 1c             	add    esp,0x1c
c0015e04:	eb 8d                	jmp    c0015d93 <Vm::mainloop2()>

c0015e06 <Vm::initialise8086()>:
c0015e06:	83 ec 0c             	sub    esp,0xc
c0015e09:	68 80 00 00 00       	push   0x80
c0015e0e:	6a 00                	push   0x0
c0015e10:	68 cd 5d 01 c0       	push   0xc0015dcd
c0015e15:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015e1b:	e8 44 f3 ff ff       	call   c0015164 <Process::createThread(void (*)(void*), void*, int)>
c0015e20:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015e27:	68 10 01 00 00       	push   0x110
c0015e2c:	6a 00                	push   0x0
c0015e2e:	6a 00                	push   0x0
c0015e30:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015e35:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015e3a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015e40:	e8 d1 c9 ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015e45:	83 c4 2c             	add    esp,0x2c
c0015e48:	c3                   	ret    

c0015e49 <Vm::resetConventionalMemory8086()>:
c0015e49:	c3                   	ret    

c0015e4a <Vm::finish8086()>:
c0015e4a:	53                   	push   ebx
c0015e4b:	83 ec 08             	sub    esp,0x8
c0015e4e:	fa                   	cli    
c0015e4f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e55:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015e5c:	75 18                	jne    c0015e76 <Vm::finish8086()+0x2c>
c0015e5e:	e8 4d f5 ff ff       	call   c00153b0 <schedule()>
c0015e63:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015e6a:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015e71:	75 db                	jne    c0015e4e <Vm::finish8086()+0x4>
c0015e73:	fb                   	sti    
c0015e74:	eb d8                	jmp    c0015e4e <Vm::finish8086()+0x4>
c0015e76:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015e7d:	83 ec 0c             	sub    esp,0xc
c0015e80:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015e86:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015e8c:	e8 1f f8 ff ff       	call   c00156b0 <unblockTask(ThreadControlBlock*)>
c0015e91:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015e98:	83 c4 10             	add    esp,0x10
c0015e9b:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015ea2:	75 01                	jne    c0015ea5 <Vm::finish8086()+0x5b>
c0015ea4:	fb                   	sti    
c0015ea5:	83 c4 08             	add    esp,0x8
c0015ea8:	89 d8                	mov    eax,ebx
c0015eaa:	5b                   	pop    ebx
c0015eab:	c3                   	ret    

c0015eac <Vm::getOutput8086(unsigned char*)>:
c0015eac:	57                   	push   edi
c0015ead:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015eb3:	56                   	push   esi
c0015eb4:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0015eb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015ebd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ebf:	5e                   	pop    esi
c0015ec0:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0015ec5:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015ecf:	5f                   	pop    edi
c0015ed0:	c3                   	ret    

c0015ed1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015ed1:	55                   	push   ebp
c0015ed2:	57                   	push   edi
c0015ed3:	56                   	push   esi
c0015ed4:	53                   	push   ebx
c0015ed5:	83 ec 2c             	sub    esp,0x2c
c0015ed8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015edc:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0015ee3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015ee7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0015eeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015eef:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015ef3:	75 5d                	jne    c0015f52 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015ef5:	83 ec 0c             	sub    esp,0xc
c0015ef8:	68 14 01 00 00       	push   0x114
c0015efd:	e8 ce 89 ff ff       	call   c000e8d0 <malloc>
c0015f02:	83 c4 0c             	add    esp,0xc
c0015f05:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015f0b:	68 9c 2b 02 c0       	push   0xc0022b9c
c0015f10:	50                   	push   eax
c0015f11:	89 c7                	mov    edi,eax
c0015f13:	e8 f4 21 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0015f18:	58                   	pop    eax
c0015f19:	5a                   	pop    edx
c0015f1a:	6a 12                	push   0x12
c0015f1c:	57                   	push   edi
c0015f1d:	e8 08 22 ff ff       	call   c000812a <File::open(FileOpenMode)>
c0015f22:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f24:	59                   	pop    ecx
c0015f25:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0015f29:	51                   	push   ecx
c0015f2a:	6a 00                	push   0x0
c0015f2c:	6a 00                	push   0x0
c0015f2e:	68 00 00 11 00       	push   0x110000
c0015f33:	57                   	push   edi
c0015f34:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015f37:	83 c4 14             	add    esp,0x14
c0015f3a:	57                   	push   edi
c0015f3b:	e8 48 22 ff ff       	call   c0008188 <File::close()>
c0015f40:	8b 07                	mov    eax,DWORD PTR [edi]
c0015f42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f48:	83 c4 10             	add    esp,0x10
c0015f4b:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c0015f52:	fa                   	cli    
c0015f53:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015f59:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c0015f60:	75 18                	jne    c0015f7a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0015f62:	e8 49 f4 ff ff       	call   c00153b0 <schedule()>
c0015f67:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015f6e:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015f75:	75 db                	jne    c0015f52 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015f77:	fb                   	sti    
c0015f78:	eb d8                	jmp    c0015f52 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015f7a:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015f84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f88:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0015f8d:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0015f91:	0f b7 f6             	movzx  esi,si
c0015f94:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0015f98:	0f b7 db             	movzx  ebx,bx
c0015f9b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015f9f:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0015fa3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015fa7:	50                   	push   eax
c0015fa8:	6a 20                	push   0x20
c0015faa:	6a 00                	push   0x0
c0015fac:	68 20 c7 02 c0       	push   0xc002c720
c0015fb1:	e8 3a a5 fe ff       	call   c00004f0 <memset>
c0015fb6:	5a                   	pop    edx
c0015fb7:	59                   	pop    ecx
c0015fb8:	56                   	push   esi
c0015fb9:	53                   	push   ebx
c0015fba:	e8 b7 fd ff ff       	call   c0015d76 <Vm::realToLinear(unsigned short, unsigned short)>
c0015fbf:	83 c4 10             	add    esp,0x10
c0015fc2:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015fc6:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0015fca:	89 c7                	mov    edi,eax
c0015fcc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015fce:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c0015fd5:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0015fdc:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0015fe3:	75 01                	jne    c0015fe6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0015fe5:	fb                   	sti    
c0015fe6:	83 ec 0c             	sub    esp,0xc
c0015fe9:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015fef:	e8 bc f6 ff ff       	call   c00156b0 <unblockTask(ThreadControlBlock*)>
c0015ff4:	83 c4 3c             	add    esp,0x3c
c0015ff7:	b0 01                	mov    al,0x1
c0015ff9:	5b                   	pop    ebx
c0015ffa:	5e                   	pop    esi
c0015ffb:	5f                   	pop    edi
c0015ffc:	5d                   	pop    ebp
c0015ffd:	c3                   	ret    

c0015ffe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015ffe:	55                   	push   ebp
c0015fff:	57                   	push   edi
c0016000:	56                   	push   esi
c0016001:	53                   	push   ebx
c0016002:	83 ec 2c             	sub    esp,0x2c
c0016005:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016009:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0016010:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016014:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016018:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001601c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016020:	75 5d                	jne    c001607f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016022:	83 ec 0c             	sub    esp,0xc
c0016025:	68 14 01 00 00       	push   0x114
c001602a:	e8 a1 88 ff ff       	call   c000e8d0 <malloc>
c001602f:	83 c4 0c             	add    esp,0xc
c0016032:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0016038:	68 9c 2b 02 c0       	push   0xc0022b9c
c001603d:	50                   	push   eax
c001603e:	89 c3                	mov    ebx,eax
c0016040:	e8 c7 20 ff ff       	call   c000810c <File::File(char const*, Process*)>
c0016045:	58                   	pop    eax
c0016046:	5a                   	pop    edx
c0016047:	6a 12                	push   0x12
c0016049:	53                   	push   ebx
c001604a:	e8 db 20 ff ff       	call   c000812a <File::open(FileOpenMode)>
c001604f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016051:	59                   	pop    ecx
c0016052:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016056:	52                   	push   edx
c0016057:	6a 00                	push   0x0
c0016059:	6a 00                	push   0x0
c001605b:	68 00 00 11 00       	push   0x110000
c0016060:	53                   	push   ebx
c0016061:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016064:	83 c4 14             	add    esp,0x14
c0016067:	53                   	push   ebx
c0016068:	e8 1b 21 ff ff       	call   c0008188 <File::close()>
c001606d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001606f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016072:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016075:	83 c4 10             	add    esp,0x10
c0016078:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c001607f:	50                   	push   eax
c0016080:	50                   	push   eax
c0016081:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016085:	68 b7 2b 02 c0       	push   0xc0022bb7
c001608a:	e8 bf 0e ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001608f:	83 c4 10             	add    esp,0x10
c0016092:	fa                   	cli    
c0016093:	8a 1d 09 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c709
c0016099:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001609f:	84 db                	test   bl,bl
c00160a1:	75 18                	jne    c00160bb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c00160a3:	e8 08 f3 ff ff       	call   c00153b0 <schedule()>
c00160a8:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00160af:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00160b6:	75 da                	jne    c0016092 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00160b8:	fb                   	sti    
c00160b9:	eb d7                	jmp    c0016092 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00160bb:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c00160c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160c9:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c00160ce:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00160d2:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00160d6:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00160da:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00160de:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00160e2:	50                   	push   eax
c00160e3:	6a 20                	push   0x20
c00160e5:	6a 00                	push   0x0
c00160e7:	68 20 c7 02 c0       	push   0xc002c720
c00160ec:	e8 ff a3 fe ff       	call   c00004f0 <memset>
c00160f1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00160f8:	e8 d3 87 ff ff       	call   c000e8d0 <malloc>
c00160fd:	83 c4 0c             	add    esp,0xc
c0016100:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0016106:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001610a:	89 c5                	mov    ebp,eax
c001610c:	50                   	push   eax
c001610d:	e8 fa 1f ff ff       	call   c000810c <File::File(char const*, Process*)>
c0016112:	83 c4 10             	add    esp,0x10
c0016115:	85 ed                	test   ebp,ebp
c0016117:	75 0a                	jne    c0016123 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0016119:	83 ec 0c             	sub    esp,0xc
c001611c:	68 d9 2b 02 c0       	push   0xc0022bd9
c0016121:	eb 2b                	jmp    c001614e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c0016123:	50                   	push   eax
c0016124:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016128:	50                   	push   eax
c0016129:	8d 44 24 20          	lea    eax,[esp+0x20]
c001612d:	50                   	push   eax
c001612e:	55                   	push   ebp
c001612f:	e8 f8 22 ff ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0016134:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016138:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001613c:	83 c4 10             	add    esp,0x10
c001613f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016144:	74 28                	je     c001616e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x170>
c0016146:	83 ec 0c             	sub    esp,0xc
c0016149:	68 ed 2b 02 c0       	push   0xc0022bed
c001614e:	e8 c3 8a ff ff       	call   c000ec16 <KePanic(char const*)>
c0016153:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001615a:	83 c4 10             	add    esp,0x10
c001615d:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0016164:	75 01                	jne    c0016167 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c0016166:	fb                   	sti    
c0016167:	31 db                	xor    ebx,ebx
c0016169:	e9 92 00 00 00       	jmp    c0016200 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c001616e:	51                   	push   ecx
c001616f:	51                   	push   ecx
c0016170:	6a 01                	push   0x1
c0016172:	55                   	push   ebp
c0016173:	e8 b2 1f ff ff       	call   c000812a <File::open(FileOpenMode)>
c0016178:	83 c4 10             	add    esp,0x10
c001617b:	85 c0                	test   eax,eax
c001617d:	74 27                	je     c00161a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a8>
c001617f:	83 ec 0c             	sub    esp,0xc
c0016182:	68 06 2c 02 c0       	push   0xc0022c06
c0016187:	e8 8a 8a ff ff       	call   c000ec16 <KePanic(char const*)>
c001618c:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c0016193:	83 c4 10             	add    esp,0x10
c0016196:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001619d:	75 c8                	jne    c0016167 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x169>
c001619f:	fb                   	sti    
c00161a0:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00161a4:	eb 5a                	jmp    c0016200 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x202>
c00161a6:	50                   	push   eax
c00161a7:	0f b7 ff             	movzx  edi,di
c00161aa:	50                   	push   eax
c00161ab:	0f b7 f6             	movzx  esi,si
c00161ae:	57                   	push   edi
c00161af:	56                   	push   esi
c00161b0:	e8 c1 fb ff ff       	call   c0015d76 <Vm::realToLinear(unsigned short, unsigned short)>
c00161b5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00161b8:	5a                   	pop    edx
c00161b9:	8d 74 24 20          	lea    esi,[esp+0x20]
c00161bd:	56                   	push   esi
c00161be:	50                   	push   eax
c00161bf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00161c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00161c7:	55                   	push   ebp
c00161c8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161cb:	83 c4 14             	add    esp,0x14
c00161ce:	55                   	push   ebp
c00161cf:	e8 b4 1f ff ff       	call   c0008188 <File::close()>
c00161d4:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c00161db:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c00161ec:	75 01                	jne    c00161ef <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f1>
c00161ee:	fb                   	sti    
c00161ef:	83 ec 0c             	sub    esp,0xc
c00161f2:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c00161f8:	e8 b3 f4 ff ff       	call   c00156b0 <unblockTask(ThreadControlBlock*)>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	83 c4 2c             	add    esp,0x2c
c0016203:	88 d8                	mov    al,bl
c0016205:	5b                   	pop    ebx
c0016206:	5e                   	pop    esi
c0016207:	5f                   	pop    edi
c0016208:	5d                   	pop    ebp
c0016209:	c3                   	ret    

c001620a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001620a:	57                   	push   edi
c001620b:	56                   	push   esi
c001620c:	53                   	push   ebx
c001620d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016211:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016215:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016219:	83 e8 06             	sub    eax,0x6
c001621c:	0f b7 c0             	movzx  eax,ax
c001621f:	50                   	push   eax
c0016220:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016225:	50                   	push   eax
c0016226:	e8 4b fb ff ff       	call   c0015d76 <Vm::realToLinear(unsigned short, unsigned short)>
c001622b:	5a                   	pop    edx
c001622c:	59                   	pop    ecx
c001622d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016230:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016233:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016236:	81 e2 ff ff 00 00    	and    edx,0xffff
c001623c:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c001623f:	8d 51 02             	lea    edx,[ecx+0x2]
c0016242:	66 89 10             	mov    WORD PTR [eax],dx
c0016245:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016249:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001624d:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016251:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016254:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016258:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001625e:	89 f1                	mov    ecx,esi
c0016260:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016264:	89 f2                	mov    edx,esi
c0016266:	0f b6 d6             	movzx  edx,dh
c0016269:	0f b6 f1             	movzx  esi,cl
c001626c:	74 0a                	je     c0016278 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c001626e:	c1 e2 08             	shl    edx,0x8
c0016271:	09 f2                	or     edx,esi
c0016273:	80 ce 02             	or     dh,0x2
c0016276:	eb 08                	jmp    c0016280 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016278:	c1 e2 08             	shl    edx,0x8
c001627b:	09 f2                	or     edx,esi
c001627d:	80 e6 fd             	and    dh,0xfd
c0016280:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016289:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001628d:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016295:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016298:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00162a0:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00162a3:	5b                   	pop    ebx
c00162a4:	5e                   	pop    esi
c00162a5:	5f                   	pop    edi
c00162a6:	c3                   	ret    

c00162a7 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00162a7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162ac:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162b1:	c1 e0 04             	shl    eax,0x4
c00162b4:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00162b7:	c3                   	ret    

c00162b8 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00162b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162bd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162c2:	c1 e0 04             	shl    eax,0x4
c00162c5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00162c9:	c3                   	ret    

c00162ca <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00162ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162cf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162d4:	c1 e0 04             	shl    eax,0x4
c00162d7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00162da:	c3                   	ret    

c00162db <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00162db:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162e0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162e5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00162e9:	c1 e0 04             	shl    eax,0x4
c00162ec:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00162ef:	c3                   	ret    

c00162f0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00162f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00162f5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00162fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162fe:	c1 e0 04             	shl    eax,0x4
c0016301:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016305:	c3                   	ret    

c0016306 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016306:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001630b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016310:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016314:	c1 e0 04             	shl    eax,0x4
c0016317:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001631a:	c3                   	ret    

c001631b <Vm::faultHandler(regs*)>:
c001631b:	55                   	push   ebp
c001631c:	57                   	push   edi
c001631d:	56                   	push   esi
c001631e:	53                   	push   ebx
c001631f:	83 ec 2c             	sub    esp,0x2c
c0016322:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016326:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016329:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001632d:	0f b7 f8             	movzx  edi,ax
c0016330:	0f b7 c0             	movzx  eax,ax
c0016333:	52                   	push   edx
c0016334:	50                   	push   eax
c0016335:	e8 3c fa ff ff       	call   c0015d76 <Vm::realToLinear(unsigned short, unsigned short)>
c001633a:	5a                   	pop    edx
c001633b:	59                   	pop    ecx
c001633c:	89 c1                	mov    ecx,eax
c001633e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016341:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016345:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001634a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001634e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016351:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016355:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001635a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001635e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016362:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016366:	e8 0b fa ff ff       	call   c0015d76 <Vm::realToLinear(unsigned short, unsigned short)>
c001636b:	5e                   	pop    esi
c001636c:	be 06 00 00 00       	mov    esi,0x6
c0016371:	5d                   	pop    ebp
c0016372:	31 ed                	xor    ebp,ebp
c0016374:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016379:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001637c:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016382:	0f 84 74 02 00 00    	je     c00165fc <Vm::faultHandler(regs*)+0x2e1>
c0016388:	0f 87 94 00 00 00    	ja     c0016422 <Vm::faultHandler(regs*)+0x107>
c001638e:	83 fa 66             	cmp    edx,0x66
c0016391:	0f 84 e2 01 00 00    	je     c0016579 <Vm::faultHandler(regs*)+0x25e>
c0016397:	77 47                	ja     c00163e0 <Vm::faultHandler(regs*)+0xc5>
c0016399:	83 fa 36             	cmp    edx,0x36
c001639c:	0f 84 ca 01 00 00    	je     c001656c <Vm::faultHandler(regs*)+0x251>
c00163a2:	77 1a                	ja     c00163be <Vm::faultHandler(regs*)+0xa3>
c00163a4:	83 fa 26             	cmp    edx,0x26
c00163a7:	0f 84 98 01 00 00    	je     c0016545 <Vm::faultHandler(regs*)+0x22a>
c00163ad:	83 fa 2e             	cmp    edx,0x2e
c00163b0:	0f 85 27 06 00 00    	jne    c00169dd <Vm::faultHandler(regs*)+0x6c2>
c00163b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163b9:	31 f6                	xor    esi,esi
c00163bb:	41                   	inc    ecx
c00163bc:	eb bb                	jmp    c0016379 <Vm::faultHandler(regs*)+0x5e>
c00163be:	83 fa 64             	cmp    edx,0x64
c00163c1:	0f 84 8b 01 00 00    	je     c0016552 <Vm::faultHandler(regs*)+0x237>
c00163c7:	0f 87 92 01 00 00    	ja     c001655f <Vm::faultHandler(regs*)+0x244>
c00163cd:	83 fa 3e             	cmp    edx,0x3e
c00163d0:	0f 85 07 06 00 00    	jne    c00169dd <Vm::faultHandler(regs*)+0x6c2>
c00163d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00163d9:	be 01 00 00 00       	mov    esi,0x1
c00163de:	eb db                	jmp    c00163bb <Vm::faultHandler(regs*)+0xa0>
c00163e0:	83 fa 6d             	cmp    edx,0x6d
c00163e3:	0f 84 34 03 00 00    	je     c001671d <Vm::faultHandler(regs*)+0x402>
c00163e9:	77 17                	ja     c0016402 <Vm::faultHandler(regs*)+0xe7>
c00163eb:	83 fa 67             	cmp    edx,0x67
c00163ee:	0f 84 92 01 00 00    	je     c0016586 <Vm::faultHandler(regs*)+0x26b>
c00163f4:	83 fa 6c             	cmp    edx,0x6c
c00163f7:	0f 84 b1 02 00 00    	je     c00166ae <Vm::faultHandler(regs*)+0x393>
c00163fd:	e9 db 05 00 00       	jmp    c00169dd <Vm::faultHandler(regs*)+0x6c2>
c0016402:	83 fa 6f             	cmp    edx,0x6f
c0016405:	0f 84 40 04 00 00    	je     c001684b <Vm::faultHandler(regs*)+0x530>
c001640b:	0f 82 a2 03 00 00    	jb     c00167b3 <Vm::faultHandler(regs*)+0x498>
c0016411:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016417:	0f 84 76 01 00 00    	je     c0016593 <Vm::faultHandler(regs*)+0x278>
c001641d:	e9 bb 05 00 00       	jmp    c00169dd <Vm::faultHandler(regs*)+0x6c2>
c0016422:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016428:	0f 84 57 05 00 00    	je     c0016985 <Vm::faultHandler(regs*)+0x66a>
c001642e:	0f 87 a9 00 00 00    	ja     c00164dd <Vm::faultHandler(regs*)+0x1c2>
c0016434:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001643a:	0f 84 d6 04 00 00    	je     c0016916 <Vm::faultHandler(regs*)+0x5fb>
c0016440:	77 78                	ja     c00164ba <Vm::faultHandler(regs*)+0x19f>
c0016442:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016448:	0f 84 0e 02 00 00    	je     c001665c <Vm::faultHandler(regs*)+0x341>
c001644e:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016454:	0f 85 83 05 00 00    	jne    c00169dd <Vm::faultHandler(regs*)+0x6c2>
c001645a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001645e:	89 d1                	mov    ecx,edx
c0016460:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016463:	c1 e1 08             	shl    ecx,0x8
c0016466:	09 ca                	or     edx,ecx
c0016468:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001646b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001646f:	89 d1                	mov    ecx,edx
c0016471:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016475:	c1 e1 08             	shl    ecx,0x8
c0016478:	09 ca                	or     edx,ecx
c001647a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001647d:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016481:	89 d1                	mov    ecx,edx
c0016483:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016487:	c1 e1 08             	shl    ecx,0x8
c001648a:	09 ca                	or     edx,ecx
c001648c:	81 ca 00 02 02 00    	or     edx,0x20200
c0016492:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016495:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016499:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001649f:	d1 e8                	shr    eax,1
c00164a1:	83 e0 01             	and    eax,0x1
c00164a4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00164a7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00164aa:	83 c0 06             	add    eax,0x6
c00164ad:	25 ff ff 00 00       	and    eax,0xffff
c00164b2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00164b5:	e9 1f 05 00 00       	jmp    c00169d9 <Vm::faultHandler(regs*)+0x6be>
c00164ba:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00164c0:	0f 84 95 04 00 00    	je     c001695b <Vm::faultHandler(regs*)+0x640>
c00164c6:	0f 82 66 04 00 00    	jb     c0016932 <Vm::faultHandler(regs*)+0x617>
c00164cc:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00164d2:	0f 84 9a 04 00 00    	je     c0016972 <Vm::faultHandler(regs*)+0x657>
c00164d8:	e9 00 05 00 00       	jmp    c00169dd <Vm::faultHandler(regs*)+0x6c2>
c00164dd:	81 fa ef 00 00 00    	cmp    edx,0xef
c00164e3:	0f 84 dd 04 00 00    	je     c00169c6 <Vm::faultHandler(regs*)+0x6ab>
c00164e9:	77 2e                	ja     c0016519 <Vm::faultHandler(regs*)+0x1fe>
c00164eb:	81 fa ed 00 00 00    	cmp    edx,0xed
c00164f1:	0f 84 aa 04 00 00    	je     c00169a1 <Vm::faultHandler(regs*)+0x686>
c00164f7:	81 fa ee 00 00 00    	cmp    edx,0xee
c00164fd:	0f 85 da 04 00 00    	jne    c00169dd <Vm::faultHandler(regs*)+0x6c2>
c0016503:	50                   	push   eax
c0016504:	50                   	push   eax
c0016505:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016509:	50                   	push   eax
c001650a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001650e:	50                   	push   eax
c001650f:	e8 2c f8 ff ff       	call   c0015d40 <Vm::outbv(unsigned short, unsigned char)>
c0016514:	e9 a5 04 00 00       	jmp    c00169be <Vm::faultHandler(regs*)+0x6a3>
c0016519:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001651f:	0f 84 6d 01 00 00    	je     c0016692 <Vm::faultHandler(regs*)+0x377>
c0016525:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001652b:	0f 84 6f 01 00 00    	je     c00166a0 <Vm::faultHandler(regs*)+0x385>
c0016531:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016537:	0f 85 a0 04 00 00    	jne    c00169dd <Vm::faultHandler(regs*)+0x6c2>
c001653d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016540:	e9 76 fe ff ff       	jmp    c00163bb <Vm::faultHandler(regs*)+0xa0>
c0016545:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016548:	be 02 00 00 00       	mov    esi,0x2
c001654d:	e9 69 fe ff ff       	jmp    c00163bb <Vm::faultHandler(regs*)+0xa0>
c0016552:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016555:	be 03 00 00 00       	mov    esi,0x3
c001655a:	e9 5c fe ff ff       	jmp    c00163bb <Vm::faultHandler(regs*)+0xa0>
c001655f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016562:	be 04 00 00 00       	mov    esi,0x4
c0016567:	e9 4f fe ff ff       	jmp    c00163bb <Vm::faultHandler(regs*)+0xa0>
c001656c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001656f:	be 05 00 00 00       	mov    esi,0x5
c0016574:	e9 42 fe ff ff       	jmp    c00163bb <Vm::faultHandler(regs*)+0xa0>
c0016579:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001657c:	bd 01 00 00 00       	mov    ebp,0x1
c0016581:	e9 35 fe ff ff       	jmp    c00163bb <Vm::faultHandler(regs*)+0xa0>
c0016586:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016589:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001658e:	e9 28 fe ff ff       	jmp    c00163bb <Vm::faultHandler(regs*)+0xa0>
c0016593:	83 e5 01             	and    ebp,0x1
c0016596:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016599:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001659d:	74 30                	je     c00165cf <Vm::faultHandler(regs*)+0x2b4>
c001659f:	83 e9 04             	sub    ecx,0x4
c00165a2:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00165a8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00165ae:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00165b1:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00165b4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165ba:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00165be:	0f 84 12 04 00 00    	je     c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c00165c4:	80 ce 02             	or     dh,0x2
c00165c7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00165ca:	e9 07 04 00 00       	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c00165cf:	83 e9 02             	sub    ecx,0x2
c00165d2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00165d8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00165db:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00165df:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00165e5:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00165e9:	74 05                	je     c00165f0 <Vm::faultHandler(regs*)+0x2d5>
c00165eb:	80 ce 02             	or     dh,0x2
c00165ee:	eb 03                	jmp    c00165f3 <Vm::faultHandler(regs*)+0x2d8>
c00165f0:	80 e6 fd             	and    dh,0xfd
c00165f3:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00165f7:	e9 da 03 00 00       	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c00165fc:	83 e5 01             	and    ebp,0x1
c00165ff:	74 2a                	je     c001662b <Vm::faultHandler(regs*)+0x310>
c0016601:	8b 10                	mov    edx,DWORD PTR [eax]
c0016603:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016609:	81 ca 00 02 02 00    	or     edx,0x20200
c001660f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016612:	8b 00                	mov    eax,DWORD PTR [eax]
c0016614:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001661a:	c1 e8 09             	shr    eax,0x9
c001661d:	83 e0 01             	and    eax,0x1
c0016620:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016623:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016626:	83 c0 04             	add    eax,0x4
c0016629:	eb 24                	jmp    c001664f <Vm::faultHandler(regs*)+0x334>
c001662b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001662e:	81 ca 00 02 02 00    	or     edx,0x20200
c0016634:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016637:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001663a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016640:	c1 e8 09             	shr    eax,0x9
c0016643:	83 e0 01             	and    eax,0x1
c0016646:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016649:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001664c:	83 c0 02             	add    eax,0x2
c001664f:	25 ff ff 00 00       	and    eax,0xffff
c0016654:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016657:	e9 7a 03 00 00       	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c001665c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016660:	3d ee 00 00 00       	cmp    eax,0xee
c0016665:	75 10                	jne    c0016677 <Vm::faultHandler(regs*)+0x35c>
c0016667:	83 ec 0c             	sub    esp,0xc
c001666a:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001666d:	e8 6e f7 ff ff       	call   c0015de0 <Vm::mainloop3(unsigned long)>
c0016672:	e9 4a 03 00 00       	jmp    c00169c1 <Vm::faultHandler(regs*)+0x6a6>
c0016677:	83 ec 0c             	sub    esp,0xc
c001667a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001667e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016682:	51                   	push   ecx
c0016683:	50                   	push   eax
c0016684:	53                   	push   ebx
c0016685:	e8 80 fb ff ff       	call   c001620a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001668a:	83 c4 20             	add    esp,0x20
c001668d:	e9 47 03 00 00       	jmp    c00169d9 <Vm::faultHandler(regs*)+0x6be>
c0016692:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016697:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001669b:	e9 36 03 00 00       	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c00166a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166a5:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00166a9:	e9 28 03 00 00       	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c00166ae:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00166b3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00166b6:	74 2b                	je     c00166e3 <Vm::faultHandler(regs*)+0x3c8>
c00166b8:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00166bf:	76 22                	jbe    c00166e3 <Vm::faultHandler(regs*)+0x3c8>
c00166c1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00166c5:	50                   	push   eax
c00166c6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00166ca:	50                   	push   eax
c00166cb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00166cf:	50                   	push   eax
c00166d0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00166d4:	50                   	push   eax
c00166d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166d9:	50                   	push   eax
c00166da:	6a 6c                	push   0x6c
c00166dc:	6a 6c                	push   0x6c
c00166de:	e9 c0 01 00 00       	jmp    c00168a3 <Vm::faultHandler(regs*)+0x588>
c00166e3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00166e7:	83 ec 0c             	sub    esp,0xc
c00166ea:	0f b7 f6             	movzx  esi,si
c00166ed:	50                   	push   eax
c00166ee:	e8 3a f6 ff ff       	call   c0015d2d <Vm::inbv(unsigned short)>
c00166f3:	83 c4 0c             	add    esp,0xc
c00166f6:	0f b6 c0             	movzx  eax,al
c00166f9:	50                   	push   eax
c00166fa:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00166fe:	50                   	push   eax
c00166ff:	56                   	push   esi
c0016700:	e8 d6 fb ff ff       	call   c00162db <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016705:	83 c4 10             	add    esp,0x10
c0016708:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001670b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001670f:	74 03                	je     c0016714 <Vm::faultHandler(regs*)+0x3f9>
c0016711:	48                   	dec    eax
c0016712:	eb 01                	jmp    c0016715 <Vm::faultHandler(regs*)+0x3fa>
c0016714:	40                   	inc    eax
c0016715:	0f b7 c0             	movzx  eax,ax
c0016718:	e9 8e 00 00 00       	jmp    c00167ab <Vm::faultHandler(regs*)+0x490>
c001671d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016722:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016725:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016728:	74 29                	je     c0016753 <Vm::faultHandler(regs*)+0x438>
c001672a:	3d ff ff 00 00       	cmp    eax,0xffff
c001672f:	76 22                	jbe    c0016753 <Vm::faultHandler(regs*)+0x438>
c0016731:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016735:	50                   	push   eax
c0016736:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001673a:	50                   	push   eax
c001673b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001673f:	50                   	push   eax
c0016740:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016744:	50                   	push   eax
c0016745:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016749:	50                   	push   eax
c001674a:	6a 6d                	push   0x6d
c001674c:	6a 6d                	push   0x6d
c001674e:	e9 50 01 00 00       	jmp    c00168a3 <Vm::faultHandler(regs*)+0x588>
c0016753:	83 e5 01             	and    ebp,0x1
c0016756:	0f b7 c8             	movzx  ecx,ax
c0016759:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001675c:	0f b7 f6             	movzx  esi,si
c001675f:	74 1e                	je     c001677f <Vm::faultHandler(regs*)+0x464>
c0016761:	ed                   	in     eax,dx
c0016762:	55                   	push   ebp
c0016763:	50                   	push   eax
c0016764:	51                   	push   ecx
c0016765:	56                   	push   esi
c0016766:	e8 9b fb ff ff       	call   c0016306 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001676b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001676e:	83 c4 10             	add    esp,0x10
c0016771:	8d 50 04             	lea    edx,[eax+0x4]
c0016774:	83 e8 04             	sub    eax,0x4
c0016777:	81 e2 ff ff 00 00    	and    edx,0xffff
c001677d:	eb 20                	jmp    c001679f <Vm::faultHandler(regs*)+0x484>
c001677f:	66 ed                	in     ax,dx
c0016781:	57                   	push   edi
c0016782:	0f b7 c0             	movzx  eax,ax
c0016785:	50                   	push   eax
c0016786:	51                   	push   ecx
c0016787:	56                   	push   esi
c0016788:	e8 63 fb ff ff       	call   c00162f0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001678d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	8d 50 02             	lea    edx,[eax+0x2]
c0016796:	83 e8 02             	sub    eax,0x2
c0016799:	81 e2 ff ff 00 00    	and    edx,0xffff
c001679f:	25 ff ff 00 00       	and    eax,0xffff
c00167a4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00167a8:	0f 44 c2             	cmove  eax,edx
c00167ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00167ae:	e9 23 02 00 00       	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c00167b3:	8d 46 ff             	lea    eax,[esi-0x1]
c00167b6:	0f b6 f0             	movzx  esi,al
c00167b9:	83 fe 05             	cmp    esi,0x5
c00167bc:	77 23                	ja     c00167e1 <Vm::faultHandler(regs*)+0x4c6>
c00167be:	ff 24 b5 7c 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd384]
c00167c5:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00167ca:	eb 15                	jmp    c00167e1 <Vm::faultHandler(regs*)+0x4c6>
c00167cc:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00167d0:	eb 0f                	jmp    c00167e1 <Vm::faultHandler(regs*)+0x4c6>
c00167d2:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00167d6:	eb 09                	jmp    c00167e1 <Vm::faultHandler(regs*)+0x4c6>
c00167d8:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00167dc:	eb 03                	jmp    c00167e1 <Vm::faultHandler(regs*)+0x4c6>
c00167de:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00167e1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167e6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00167e9:	74 29                	je     c0016814 <Vm::faultHandler(regs*)+0x4f9>
c00167eb:	3d ff ff 00 00       	cmp    eax,0xffff
c00167f0:	76 22                	jbe    c0016814 <Vm::faultHandler(regs*)+0x4f9>
c00167f2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167f6:	50                   	push   eax
c00167f7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167fb:	50                   	push   eax
c00167fc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016800:	50                   	push   eax
c0016801:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016805:	50                   	push   eax
c0016806:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001680a:	50                   	push   eax
c001680b:	6a 6e                	push   0x6e
c001680d:	6a 6e                	push   0x6e
c001680f:	e9 8f 00 00 00       	jmp    c00168a3 <Vm::faultHandler(regs*)+0x588>
c0016814:	52                   	push   edx
c0016815:	0f b7 c0             	movzx  eax,ax
c0016818:	52                   	push   edx
c0016819:	50                   	push   eax
c001681a:	57                   	push   edi
c001681b:	e8 87 fa ff ff       	call   c00162a7 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0016820:	59                   	pop    ecx
c0016821:	5e                   	pop    esi
c0016822:	0f b6 c0             	movzx  eax,al
c0016825:	50                   	push   eax
c0016826:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001682a:	50                   	push   eax
c001682b:	e8 10 f5 ff ff       	call   c0015d40 <Vm::outbv(unsigned short, unsigned char)>
c0016830:	83 c4 10             	add    esp,0x10
c0016833:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016836:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001683a:	74 03                	je     c001683f <Vm::faultHandler(regs*)+0x524>
c001683c:	48                   	dec    eax
c001683d:	eb 01                	jmp    c0016840 <Vm::faultHandler(regs*)+0x525>
c001683f:	40                   	inc    eax
c0016840:	0f b7 c0             	movzx  eax,ax
c0016843:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016846:	e9 8b 01 00 00       	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c001684b:	8d 46 ff             	lea    eax,[esi-0x1]
c001684e:	0f b6 f0             	movzx  esi,al
c0016851:	83 fe 05             	cmp    esi,0x5
c0016854:	77 1e                	ja     c0016874 <Vm::faultHandler(regs*)+0x559>
c0016856:	ff 24 b5 94 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd36c]
c001685d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016861:	eb 11                	jmp    c0016874 <Vm::faultHandler(regs*)+0x559>
c0016863:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016866:	eb 0c                	jmp    c0016874 <Vm::faultHandler(regs*)+0x559>
c0016868:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001686b:	eb 07                	jmp    c0016874 <Vm::faultHandler(regs*)+0x559>
c001686d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016870:	eb 02                	jmp    c0016874 <Vm::faultHandler(regs*)+0x559>
c0016872:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0016874:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016879:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001687c:	74 37                	je     c00168b5 <Vm::faultHandler(regs*)+0x59a>
c001687e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016884:	76 2f                	jbe    c00168b5 <Vm::faultHandler(regs*)+0x59a>
c0016886:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001688a:	50                   	push   eax
c001688b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001688f:	50                   	push   eax
c0016890:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016894:	50                   	push   eax
c0016895:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016899:	50                   	push   eax
c001689a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001689e:	50                   	push   eax
c001689f:	6a 6f                	push   0x6f
c00168a1:	6a 6f                	push   0x6f
c00168a3:	68 1f 2c 02 c0       	push   0xc0022c1f
c00168a8:	e8 a1 06 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00168ad:	83 c4 20             	add    esp,0x20
c00168b0:	e9 86 01 00 00       	jmp    c0016a3b <Vm::faultHandler(regs*)+0x720>
c00168b5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00168b8:	0f b7 d7             	movzx  edx,di
c00168bb:	0f b7 c6             	movzx  eax,si
c00168be:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00168c1:	81 e1 00 04 00 00    	and    ecx,0x400
c00168c7:	83 e5 01             	and    ebp,0x1
c00168ca:	74 1c                	je     c00168e8 <Vm::faultHandler(regs*)+0x5cd>
c00168cc:	55                   	push   ebp
c00168cd:	55                   	push   ebp
c00168ce:	50                   	push   eax
c00168cf:	52                   	push   edx
c00168d0:	e8 f5 f9 ff ff       	call   c00162ca <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00168d5:	83 c4 10             	add    esp,0x10
c00168d8:	89 fa                	mov    edx,edi
c00168da:	ef                   	out    dx,eax
c00168db:	8d 46 04             	lea    eax,[esi+0x4]
c00168de:	83 ee 04             	sub    esi,0x4
c00168e1:	25 ff ff 00 00       	and    eax,0xffff
c00168e6:	eb 1b                	jmp    c0016903 <Vm::faultHandler(regs*)+0x5e8>
c00168e8:	55                   	push   ebp
c00168e9:	55                   	push   ebp
c00168ea:	50                   	push   eax
c00168eb:	52                   	push   edx
c00168ec:	e8 c7 f9 ff ff       	call   c00162b8 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00168f1:	83 c4 10             	add    esp,0x10
c00168f4:	89 fa                	mov    edx,edi
c00168f6:	66 ef                	out    dx,ax
c00168f8:	8d 46 02             	lea    eax,[esi+0x2]
c00168fb:	83 ee 02             	sub    esi,0x2
c00168fe:	25 ff ff 00 00       	and    eax,0xffff
c0016903:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016909:	85 c9                	test   ecx,ecx
c001690b:	0f 44 f0             	cmove  esi,eax
c001690e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016911:	e9 c0 00 00 00       	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c0016916:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001691d:	83 ec 0c             	sub    esp,0xc
c0016920:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016924:	50                   	push   eax
c0016925:	e8 03 f4 ff ff       	call   c0015d2d <Vm::inbv(unsigned short)>
c001692a:	0f b6 c0             	movzx  eax,al
c001692d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016930:	eb 3a                	jmp    c001696c <Vm::faultHandler(regs*)+0x651>
c0016932:	83 e5 01             	and    ebp,0x1
c0016935:	74 07                	je     c001693e <Vm::faultHandler(regs*)+0x623>
c0016937:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001693b:	ed                   	in     eax,dx
c001693c:	eb 14                	jmp    c0016952 <Vm::faultHandler(regs*)+0x637>
c001693e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016941:	66 31 f6             	xor    si,si
c0016944:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0016947:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001694b:	66 ed                	in     ax,dx
c001694d:	0f b7 c0             	movzx  eax,ax
c0016950:	09 f0                	or     eax,esi
c0016952:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016955:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016959:	eb 7e                	jmp    c00169d9 <Vm::faultHandler(regs*)+0x6be>
c001695b:	52                   	push   edx
c001695c:	52                   	push   edx
c001695d:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016961:	50                   	push   eax
c0016962:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016966:	50                   	push   eax
c0016967:	e8 d4 f3 ff ff       	call   c0015d40 <Vm::outbv(unsigned short, unsigned char)>
c001696c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016970:	eb 4f                	jmp    c00169c1 <Vm::faultHandler(regs*)+0x6a6>
c0016972:	83 e5 01             	and    ebp,0x1
c0016975:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016978:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001697c:	74 03                	je     c0016981 <Vm::faultHandler(regs*)+0x666>
c001697e:	ef                   	out    dx,eax
c001697f:	eb d4                	jmp    c0016955 <Vm::faultHandler(regs*)+0x63a>
c0016981:	66 ef                	out    dx,ax
c0016983:	eb d0                	jmp    c0016955 <Vm::faultHandler(regs*)+0x63a>
c0016985:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016989:	83 ec 0c             	sub    esp,0xc
c001698c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016993:	50                   	push   eax
c0016994:	e8 94 f3 ff ff       	call   c0015d2d <Vm::inbv(unsigned short)>
c0016999:	0f b6 c0             	movzx  eax,al
c001699c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001699f:	eb 1d                	jmp    c00169be <Vm::faultHandler(regs*)+0x6a3>
c00169a1:	83 e5 01             	and    ebp,0x1
c00169a4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00169a7:	74 03                	je     c00169ac <Vm::faultHandler(regs*)+0x691>
c00169a9:	ed                   	in     eax,dx
c00169aa:	eb 0d                	jmp    c00169b9 <Vm::faultHandler(regs*)+0x69e>
c00169ac:	66 ed                	in     ax,dx
c00169ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00169b1:	0f b7 c0             	movzx  eax,ax
c00169b4:	66 31 d2             	xor    dx,dx
c00169b7:	09 d0                	or     eax,edx
c00169b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00169bc:	eb 18                	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c00169be:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169c1:	83 c4 10             	add    esp,0x10
c00169c4:	eb 13                	jmp    c00169d9 <Vm::faultHandler(regs*)+0x6be>
c00169c6:	83 e5 01             	and    ebp,0x1
c00169c9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00169cc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00169cf:	74 03                	je     c00169d4 <Vm::faultHandler(regs*)+0x6b9>
c00169d1:	ef                   	out    dx,eax
c00169d2:	eb 02                	jmp    c00169d6 <Vm::faultHandler(regs*)+0x6bb>
c00169d4:	66 ef                	out    dx,ax
c00169d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00169d9:	b0 01                	mov    al,0x1
c00169db:	eb 60                	jmp    c0016a3d <Vm::faultHandler(regs*)+0x722>
c00169dd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00169e1:	50                   	push   eax
c00169e2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00169e6:	50                   	push   eax
c00169e7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00169eb:	50                   	push   eax
c00169ec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00169f0:	50                   	push   eax
c00169f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169f5:	50                   	push   eax
c00169f6:	52                   	push   edx
c00169f7:	52                   	push   edx
c00169f8:	68 4c 2c 02 c0       	push   0xc0022c4c
c00169fd:	e8 4c 05 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016a02:	83 c4 20             	add    esp,0x20
c0016a05:	83 ec 0c             	sub    esp,0xc
c0016a08:	6a 60                	push   0x60
c0016a0a:	e8 1e f3 ff ff       	call   c0015d2d <Vm::inbv(unsigned short)>
c0016a0f:	83 c4 10             	add    esp,0x10
c0016a12:	0f b6 d0             	movzx  edx,al
c0016a15:	83 fa 1c             	cmp    edx,0x1c
c0016a18:	74 05                	je     c0016a1f <Vm::faultHandler(regs*)+0x704>
c0016a1a:	83 fa 5a             	cmp    edx,0x5a
c0016a1d:	75 e6                	jne    c0016a05 <Vm::faultHandler(regs*)+0x6ea>
c0016a1f:	0f b6 c0             	movzx  eax,al
c0016a22:	83 f8 1c             	cmp    eax,0x1c
c0016a25:	74 05                	je     c0016a2c <Vm::faultHandler(regs*)+0x711>
c0016a27:	83 f8 5a             	cmp    eax,0x5a
c0016a2a:	75 0f                	jne    c0016a3b <Vm::faultHandler(regs*)+0x720>
c0016a2c:	83 ec 0c             	sub    esp,0xc
c0016a2f:	6a 60                	push   0x60
c0016a31:	e8 f7 f2 ff ff       	call   c0015d2d <Vm::inbv(unsigned short)>
c0016a36:	83 c4 10             	add    esp,0x10
c0016a39:	eb e4                	jmp    c0016a1f <Vm::faultHandler(regs*)+0x704>
c0016a3b:	31 c0                	xor    eax,eax
c0016a3d:	83 c4 2c             	add    esp,0x2c
c0016a40:	5b                   	pop    ebx
c0016a41:	5e                   	pop    esi
c0016a42:	5f                   	pop    edi
c0016a43:	5d                   	pop    ebp
c0016a44:	c3                   	ret    
c0016a45:	90                   	nop

c0016a46 <noCopro(unsigned long)>:
c0016a46:	c3                   	ret    
c0016a47:	90                   	nop

c0016a48 <CPU::close(int, int, void*)>:
c0016a48:	31 c0                	xor    eax,eax
c0016a4a:	c3                   	ret    

c0016a4b <x86ReadCMOS(unsigned char)>:
c0016a4b:	83 ec 14             	sub    esp,0x14
c0016a4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a52:	88 04 24             	mov    BYTE PTR [esp],al
c0016a55:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016a5a:	0f b6 c0             	movzx  eax,al
c0016a5d:	85 c0                	test   eax,eax
c0016a5f:	74 04                	je     c0016a65 <x86ReadCMOS(unsigned char)+0x1a>
c0016a61:	b2 00                	mov    dl,0x0
c0016a63:	eb 02                	jmp    c0016a67 <x86ReadCMOS(unsigned char)+0x1c>
c0016a65:	b2 80                	mov    dl,0x80
c0016a67:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016a6a:	09 d0                	or     eax,edx
c0016a6c:	0f b6 c0             	movzx  eax,al
c0016a6f:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016a76:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016a7a:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016a7e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016a83:	ee                   	out    dx,al
c0016a84:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016a8b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016a90:	89 c2                	mov    edx,eax
c0016a92:	ec                   	in     al,dx
c0016a93:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016a97:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016a9b:	83 c4 14             	add    esp,0x14
c0016a9e:	c3                   	ret    

c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>:
c0016a9f:	83 ec 18             	sub    esp,0x18
c0016aa2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016aa6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016aaa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016aae:	88 d0                	mov    al,dl
c0016ab0:	88 04 24             	mov    BYTE PTR [esp],al
c0016ab3:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016ab8:	0f b6 c0             	movzx  eax,al
c0016abb:	85 c0                	test   eax,eax
c0016abd:	74 04                	je     c0016ac3 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016abf:	b2 00                	mov    dl,0x0
c0016ac1:	eb 02                	jmp    c0016ac5 <x86WriteCMOS(unsigned char, unsigned char)+0x26>
c0016ac3:	b2 80                	mov    dl,0x80
c0016ac5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016ac9:	09 d0                	or     eax,edx
c0016acb:	0f b6 c0             	movzx  eax,al
c0016ace:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016ad5:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016ad9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016add:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016ae2:	ee                   	out    dx,al
c0016ae3:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016ae7:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016aee:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016af2:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016af6:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016afb:	ee                   	out    dx,al
c0016afc:	90                   	nop
c0016afd:	83 c4 18             	add    esp,0x18
c0016b00:	c3                   	ret    

c0016b01 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016b01:	60                   	pusha  
c0016b02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b0e:	9c                   	pushf  
c0016b0f:	fa                   	cli    
c0016b10:	0f 09                	wbinvd 
c0016b12:	0f 30                	wrmsr  
c0016b14:	9d                   	popf   
c0016b15:	89 c2                	mov    edx,eax
c0016b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1b:	89 10                	mov    DWORD PTR [eax],edx
c0016b1d:	61                   	popa   
c0016b1e:	90                   	nop
c0016b1f:	c3                   	ret    

c0016b20 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016b20:	60                   	pusha  
c0016b21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b25:	89 c1                	mov    ecx,eax
c0016b27:	9c                   	pushf  
c0016b28:	fa                   	cli    
c0016b29:	0f 09                	wbinvd 
c0016b2b:	31 c0                	xor    eax,eax
c0016b2d:	31 d2                	xor    edx,edx
c0016b2f:	0f 32                	rdmsr  
c0016b31:	9d                   	popf   
c0016b32:	89 c2                	mov    edx,eax
c0016b34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b38:	89 10                	mov    DWORD PTR [eax],edx
c0016b3a:	61                   	popa   
c0016b3b:	90                   	nop
c0016b3c:	c3                   	ret    

c0016b3d <AMD_K6_writeback(int, int, int)>:
c0016b3d:	83 ec 20             	sub    esp,0x20
c0016b40:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016b45:	c1 e8 14             	shr    eax,0x14
c0016b48:	c1 e8 02             	shr    eax,0x2
c0016b4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b4f:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016b54:	0f 85 9e 00 00 00    	jne    c0016bf8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016b5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b5e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b62:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016b67:	75 19                	jne    c0016b82 <AMD_K6_writeback(int, int, int)+0x45>
c0016b69:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016b6e:	7f 0a                	jg     c0016b7a <AMD_K6_writeback(int, int, int)+0x3d>
c0016b70:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016b78:	eb 08                	jmp    c0016b82 <AMD_K6_writeback(int, int, int)+0x45>
c0016b7a:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016b82:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016b87:	7c 6e                	jl     c0016bf7 <AMD_K6_writeback(int, int, int)+0xba>
c0016b89:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016b8e:	7e 09                	jle    c0016b99 <AMD_K6_writeback(int, int, int)+0x5c>
c0016b90:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016b95:	74 36                	je     c0016bcd <AMD_K6_writeback(int, int, int)+0x90>
c0016b97:	eb 5e                	jmp    c0016bf7 <AMD_K6_writeback(int, int, int)+0xba>
c0016b99:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016b9d:	50                   	push   eax
c0016b9e:	68 82 00 00 c0       	push   0xc0000082
c0016ba3:	e8 78 ff ff ff       	call   c0016b20 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016ba8:	83 c4 08             	add    esp,0x8
c0016bab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016baf:	d1 e0                	shl    eax,1
c0016bb1:	83 e0 7f             	and    eax,0x7f
c0016bb4:	89 c2                	mov    edx,eax
c0016bb6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bba:	50                   	push   eax
c0016bbb:	6a 00                	push   0x0
c0016bbd:	52                   	push   edx
c0016bbe:	68 82 00 00 c0       	push   0xc0000082
c0016bc3:	e8 39 ff ff ff       	call   c0016b01 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016bc8:	83 c4 10             	add    esp,0x10
c0016bcb:	eb 2b                	jmp    c0016bf8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016bcd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016bd1:	50                   	push   eax
c0016bd2:	68 82 00 00 c0       	push   0xc0000082
c0016bd7:	e8 44 ff ff ff       	call   c0016b20 <AMD_K6_read_msr(unsigned int, REGS*)>
c0016bdc:	83 c4 08             	add    esp,0x8
c0016bdf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016be3:	50                   	push   eax
c0016be4:	6a 00                	push   0x0
c0016be6:	6a 00                	push   0x0
c0016be8:	68 82 00 00 c0       	push   0xc0000082
c0016bed:	e8 0f ff ff ff       	call   c0016b01 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016bf2:	83 c4 10             	add    esp,0x10
c0016bf5:	eb 01                	jmp    c0016bf8 <AMD_K6_writeback(int, int, int)+0xbb>
c0016bf7:	90                   	nop
c0016bf8:	90                   	nop
c0016bf9:	83 c4 20             	add    esp,0x20
c0016bfc:	c3                   	ret    

c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016bfd:	56                   	push   esi
c0016bfe:	53                   	push   ebx
c0016bff:	a1 c0 44 02 c0       	mov    eax,ds:0xc00244c0
c0016c04:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016c08:	75 32                	jne    c0016c3c <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016c0a:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c14:	89 10                	mov    DWORD PTR [eax],edx
c0016c16:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c20:	89 10                	mov    DWORD PTR [eax],edx
c0016c22:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016c28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c2c:	89 10                	mov    DWORD PTR [eax],edx
c0016c2e:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c38:	89 10                	mov    DWORD PTR [eax],edx
c0016c3a:	eb 5c                	jmp    c0016c98 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016c3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c40:	ba 00 00 00 00       	mov    edx,0x0
c0016c45:	89 d1                	mov    ecx,edx
c0016c47:	0f a2                	cpuid  
c0016c49:	89 c6                	mov    esi,eax
c0016c4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c4f:	89 30                	mov    DWORD PTR [eax],esi
c0016c51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c55:	89 18                	mov    DWORD PTR [eax],ebx
c0016c57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c5b:	89 08                	mov    DWORD PTR [eax],ecx
c0016c5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c61:	89 10                	mov    DWORD PTR [eax],edx
c0016c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c67:	a3 c0 44 02 c0       	mov    ds:0xc00244c0,eax
c0016c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c72:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016c77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c7d:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016c82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c88:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016c8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c91:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c93:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016c98:	5b                   	pop    ebx
c0016c99:	5e                   	pop    esi
c0016c9a:	c3                   	ret    

c0016c9b <cpuidCheckEDX(unsigned int)>:
c0016c9b:	83 ec 10             	sub    esp,0x10
c0016c9e:	89 e0                	mov    eax,esp
c0016ca0:	50                   	push   eax
c0016ca1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ca5:	50                   	push   eax
c0016ca6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016caa:	50                   	push   eax
c0016cab:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016caf:	50                   	push   eax
c0016cb0:	6a 01                	push   0x1
c0016cb2:	e8 46 ff ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016cb7:	83 c4 14             	add    esp,0x14
c0016cba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016cbd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016cc1:	0f 95 c0             	setne  al
c0016cc4:	83 c4 10             	add    esp,0x10
c0016cc7:	c3                   	ret    

c0016cc8 <cpuidCheckECX(unsigned int)>:
c0016cc8:	83 ec 10             	sub    esp,0x10
c0016ccb:	89 e0                	mov    eax,esp
c0016ccd:	50                   	push   eax
c0016cce:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cd2:	50                   	push   eax
c0016cd3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016cd7:	50                   	push   eax
c0016cd8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016cdc:	50                   	push   eax
c0016cdd:	6a 01                	push   0x1
c0016cdf:	e8 19 ff ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016ce4:	83 c4 14             	add    esp,0x14
c0016ce7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ceb:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016cef:	0f 95 c0             	setne  al
c0016cf2:	83 c4 10             	add    esp,0x10
c0016cf5:	c3                   	ret    

c0016cf6 <cpuidCheckExtendedEBX(unsigned int)>:
c0016cf6:	83 ec 10             	sub    esp,0x10
c0016cf9:	89 e0                	mov    eax,esp
c0016cfb:	50                   	push   eax
c0016cfc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d00:	50                   	push   eax
c0016d01:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d05:	50                   	push   eax
c0016d06:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d0a:	50                   	push   eax
c0016d0b:	6a 07                	push   0x7
c0016d0d:	e8 eb fe ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d12:	83 c4 14             	add    esp,0x14
c0016d15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d19:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d1d:	0f 95 c0             	setne  al
c0016d20:	83 c4 10             	add    esp,0x10
c0016d23:	c3                   	ret    

c0016d24 <cpuidCheckExtendedECX(unsigned int)>:
c0016d24:	83 ec 10             	sub    esp,0x10
c0016d27:	89 e0                	mov    eax,esp
c0016d29:	50                   	push   eax
c0016d2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d2e:	50                   	push   eax
c0016d2f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d33:	50                   	push   eax
c0016d34:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d38:	50                   	push   eax
c0016d39:	6a 07                	push   0x7
c0016d3b:	e8 bd fe ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d40:	83 c4 14             	add    esp,0x14
c0016d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d47:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d4b:	0f 95 c0             	setne  al
c0016d4e:	83 c4 10             	add    esp,0x10
c0016d51:	c3                   	ret    

c0016d52 <HalDetectFeatures()>:
c0016d52:	57                   	push   edi
c0016d53:	56                   	push   esi
c0016d54:	53                   	push   ebx
c0016d55:	81 ec 90 00 00 00    	sub    esp,0x90
c0016d5b:	83 ec 04             	sub    esp,0x4
c0016d5e:	6a 08                	push   0x8
c0016d60:	6a 00                	push   0x0
c0016d62:	68 8c c7 02 c0       	push   0xc002c78c
c0016d67:	e8 84 97 fe ff       	call   c00004f0 <memset>
c0016d6c:	83 c4 10             	add    esp,0x10
c0016d6f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016d74:	83 c8 04             	or     eax,0x4
c0016d77:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016d7c:	e8 78 94 fe ff       	call   c00001f9 <detectCPUID>
c0016d81:	85 c0                	test   eax,eax
c0016d83:	0f 95 c0             	setne  al
c0016d86:	83 e0 01             	and    eax,0x1
c0016d89:	83 e0 01             	and    eax,0x1
c0016d8c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016d8f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016d94:	83 e0 fd             	and    eax,0xfffffffd
c0016d97:	88 c2                	mov    dl,al
c0016d99:	88 c8                	mov    al,cl
c0016d9b:	09 d0                	or     eax,edx
c0016d9d:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016da2:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016da7:	83 e0 fb             	and    eax,0xfffffffb
c0016daa:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016daf:	83 ec 0c             	sub    esp,0xc
c0016db2:	68 ac 2c 02 c0       	push   0xc0022cac
c0016db7:	e8 92 01 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016dbc:	83 c4 10             	add    esp,0x10
c0016dbf:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016dc4:	83 e0 02             	and    eax,0x2
c0016dc7:	0f b6 c0             	movzx  eax,al
c0016dca:	85 c0                	test   eax,eax
c0016dcc:	0f 84 7f 02 00 00    	je     c0017051 <HalDetectFeatures()+0x2ff>
c0016dd2:	83 ec 0c             	sub    esp,0xc
c0016dd5:	6a 20                	push   0x20
c0016dd7:	e8 bf fe ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c0016ddc:	83 c4 10             	add    esp,0x10
c0016ddf:	83 e0 01             	and    eax,0x1
c0016de2:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016de9:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016dee:	83 e0 f7             	and    eax,0xfffffff7
c0016df1:	88 c2                	mov    dl,al
c0016df3:	88 c8                	mov    al,cl
c0016df5:	09 d0                	or     eax,edx
c0016df7:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	68 00 00 00 04       	push   0x4000000
c0016e04:	e8 92 fe ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	89 c1                	mov    ecx,eax
c0016e0e:	83 e1 01             	and    ecx,0x1
c0016e11:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016e16:	83 e0 fe             	and    eax,0xfffffffe
c0016e19:	88 c2                	mov    dl,al
c0016e1b:	88 c8                	mov    al,cl
c0016e1d:	09 d0                	or     eax,edx
c0016e1f:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e24:	83 ec 0c             	sub    esp,0xc
c0016e27:	68 80 00 00 00       	push   0x80
c0016e2c:	e8 6a fe ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c0016e31:	83 c4 10             	add    esp,0x10
c0016e34:	89 c1                	mov    ecx,eax
c0016e36:	c1 e1 07             	shl    ecx,0x7
c0016e39:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016e3e:	83 e0 7f             	and    eax,0x7f
c0016e41:	88 c2                	mov    dl,al
c0016e43:	88 c8                	mov    al,cl
c0016e45:	09 d0                	or     eax,edx
c0016e47:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	68 00 00 80 00       	push   0x800000
c0016e54:	e8 42 fe ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	83 e0 01             	and    eax,0x1
c0016e5f:	89 c1                	mov    ecx,eax
c0016e61:	c1 e1 05             	shl    ecx,0x5
c0016e64:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e69:	83 e0 df             	and    eax,0xffffffdf
c0016e6c:	88 c2                	mov    dl,al
c0016e6e:	88 c8                	mov    al,cl
c0016e70:	09 d0                	or     eax,edx
c0016e72:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e77:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016e7c:	83 e0 01             	and    eax,0x1
c0016e7f:	75 0c                	jne    c0016e8d <HalDetectFeatures()+0x13b>
c0016e81:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016e86:	25 00 04 00 00       	and    eax,0x400
c0016e8b:	74 0f                	je     c0016e9c <HalDetectFeatures()+0x14a>
c0016e8d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e92:	83 e0 fe             	and    eax,0xfffffffe
c0016e95:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e9a:	eb 28                	jmp    c0016ec4 <HalDetectFeatures()+0x172>
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	68 00 02 00 00       	push   0x200
c0016ea4:	e8 f2 fd ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c0016ea9:	83 c4 10             	add    esp,0x10
c0016eac:	89 c1                	mov    ecx,eax
c0016eae:	83 e1 01             	and    ecx,0x1
c0016eb1:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016eb6:	83 e0 fe             	and    eax,0xfffffffe
c0016eb9:	88 c2                	mov    dl,al
c0016ebb:	88 c8                	mov    al,cl
c0016ebd:	09 d0                	or     eax,edx
c0016ebf:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ec4:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ec9:	83 e0 01             	and    eax,0x1
c0016ecc:	0f b6 c0             	movzx  eax,al
c0016ecf:	85 c0                	test   eax,eax
c0016ed1:	74 1c                	je     c0016eef <HalDetectFeatures()+0x19d>
c0016ed3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ed8:	83 e0 08             	and    eax,0x8
c0016edb:	0f b6 c0             	movzx  eax,al
c0016ede:	85 c0                	test   eax,eax
c0016ee0:	75 0d                	jne    c0016eef <HalDetectFeatures()+0x19d>
c0016ee2:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ee7:	83 e0 fe             	and    eax,0xfffffffe
c0016eea:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016eef:	83 ec 0c             	sub    esp,0xc
c0016ef2:	68 be 2c 02 c0       	push   0xc0022cbe
c0016ef7:	e8 52 00 ff ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0016efc:	83 c4 10             	add    esp,0x10
c0016eff:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f04:	83 e0 fe             	and    eax,0xfffffffe
c0016f07:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f0c:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0016f14:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0016f1c:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0016f24:	85 c0                	test   eax,eax
c0016f26:	0f 84 ab 00 00 00    	je     c0016fd7 <HalDetectFeatures()+0x285>
c0016f2c:	83 ec 0c             	sub    esp,0xc
c0016f2f:	6a 01                	push   0x1
c0016f31:	e8 92 fd ff ff       	call   c0016cc8 <cpuidCheckECX(unsigned int)>
c0016f36:	83 c4 10             	add    esp,0x10
c0016f39:	83 e0 01             	and    eax,0x1
c0016f3c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016f3f:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f44:	83 e0 fd             	and    eax,0xfffffffd
c0016f47:	88 c2                	mov    dl,al
c0016f49:	88 c8                	mov    al,cl
c0016f4b:	09 d0                	or     eax,edx
c0016f4d:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f52:	83 ec 0c             	sub    esp,0xc
c0016f55:	68 00 02 00 00       	push   0x200
c0016f5a:	e8 69 fd ff ff       	call   c0016cc8 <cpuidCheckECX(unsigned int)>
c0016f5f:	83 c4 10             	add    esp,0x10
c0016f62:	83 e0 01             	and    eax,0x1
c0016f65:	89 c1                	mov    ecx,eax
c0016f67:	c1 e1 04             	shl    ecx,0x4
c0016f6a:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f6f:	83 e0 ef             	and    eax,0xffffffef
c0016f72:	88 c2                	mov    dl,al
c0016f74:	88 c8                	mov    al,cl
c0016f76:	09 d0                	or     eax,edx
c0016f78:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016f7d:	83 ec 0c             	sub    esp,0xc
c0016f80:	68 00 00 08 00       	push   0x80000
c0016f85:	e8 3e fd ff ff       	call   c0016cc8 <cpuidCheckECX(unsigned int)>
c0016f8a:	83 c4 10             	add    esp,0x10
c0016f8d:	83 e0 01             	and    eax,0x1
c0016f90:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0016f97:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016f9c:	83 e0 fb             	and    eax,0xfffffffb
c0016f9f:	88 c2                	mov    dl,al
c0016fa1:	88 c8                	mov    al,cl
c0016fa3:	09 d0                	or     eax,edx
c0016fa5:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016faa:	83 ec 0c             	sub    esp,0xc
c0016fad:	68 00 00 10 00       	push   0x100000
c0016fb2:	e8 11 fd ff ff       	call   c0016cc8 <cpuidCheckECX(unsigned int)>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	83 e0 01             	and    eax,0x1
c0016fbd:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016fc4:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016fc9:	83 e0 f7             	and    eax,0xfffffff7
c0016fcc:	88 c2                	mov    dl,al
c0016fce:	88 c8                	mov    al,cl
c0016fd0:	09 d0                	or     eax,edx
c0016fd2:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016fd7:	83 ec 0c             	sub    esp,0xc
c0016fda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0016fde:	50                   	push   eax
c0016fdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0016fe3:	50                   	push   eax
c0016fe4:	8d 44 24 34          	lea    eax,[esp+0x34]
c0016fe8:	50                   	push   eax
c0016fe9:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016fed:	50                   	push   eax
c0016fee:	68 00 00 00 80       	push   0x80000000
c0016ff3:	e8 05 fc ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016ff8:	83 c4 20             	add    esp,0x20
c0016ffb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016fff:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017004:	76 4b                	jbe    c0017051 <HalDetectFeatures()+0x2ff>
c0017006:	83 ec 0c             	sub    esp,0xc
c0017009:	8d 44 24 24          	lea    eax,[esp+0x24]
c001700d:	50                   	push   eax
c001700e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017012:	50                   	push   eax
c0017013:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017017:	50                   	push   eax
c0017018:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001701c:	50                   	push   eax
c001701d:	68 01 00 00 80       	push   0x80000001
c0017022:	e8 d6 fb ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017027:	83 c4 20             	add    esp,0x20
c001702a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001702f:	83 e0 bf             	and    eax,0xffffffbf
c0017032:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017037:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001703c:	83 e0 fd             	and    eax,0xfffffffd
c001703f:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017044:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017049:	83 e0 fe             	and    eax,0xfffffffe
c001704c:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017051:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017056:	25 00 04 00 00       	and    eax,0x400
c001705b:	74 0d                	je     c001706a <HalDetectFeatures()+0x318>
c001705d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017062:	83 e0 fb             	and    eax,0xfffffffb
c0017065:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c001706a:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c0017071:	83 ec 04             	sub    esp,0x4
c0017074:	6a 0d                	push   0xd
c0017076:	6a 00                	push   0x0
c0017078:	68 70 c7 02 c0       	push   0xc002c770
c001707d:	e8 6e 94 fe ff       	call   c00004f0 <memset>
c0017082:	83 c4 10             	add    esp,0x10
c0017085:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001708a:	83 e0 02             	and    eax,0x2
c001708d:	0f b6 c0             	movzx  eax,al
c0017090:	85 c0                	test   eax,eax
c0017092:	0f 84 16 08 00 00    	je     c00178ae <HalDetectFeatures()+0xb5c>
c0017098:	83 ec 0c             	sub    esp,0xc
c001709b:	6a 10                	push   0x10
c001709d:	e8 f9 fb ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c00170a2:	83 c4 10             	add    esp,0x10
c00170a5:	83 e0 01             	and    eax,0x1
c00170a8:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00170af:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170b4:	83 e0 f7             	and    eax,0xfffffff7
c00170b7:	88 c2                	mov    dl,al
c00170b9:	88 c8                	mov    al,cl
c00170bb:	09 d0                	or     eax,edx
c00170bd:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170c2:	83 ec 0c             	sub    esp,0xc
c00170c5:	6a 40                	push   0x40
c00170c7:	e8 cf fb ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c00170cc:	83 c4 10             	add    esp,0x10
c00170cf:	83 e0 01             	and    eax,0x1
c00170d2:	89 c1                	mov    ecx,eax
c00170d4:	c1 e1 04             	shl    ecx,0x4
c00170d7:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170dc:	83 e0 ef             	and    eax,0xffffffef
c00170df:	88 c2                	mov    dl,al
c00170e1:	88 c8                	mov    al,cl
c00170e3:	09 d0                	or     eax,edx
c00170e5:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170ea:	83 ec 0c             	sub    esp,0xc
c00170ed:	6a 08                	push   0x8
c00170ef:	e8 a7 fb ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c00170f4:	83 c4 10             	add    esp,0x10
c00170f7:	83 e0 01             	and    eax,0x1
c00170fa:	89 c1                	mov    ecx,eax
c00170fc:	c1 e1 05             	shl    ecx,0x5
c00170ff:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017104:	83 e0 df             	and    eax,0xffffffdf
c0017107:	88 c2                	mov    dl,al
c0017109:	88 c8                	mov    al,cl
c001710b:	09 d0                	or     eax,edx
c001710d:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017112:	83 ec 0c             	sub    esp,0xc
c0017115:	68 00 20 00 00       	push   0x2000
c001711a:	e8 7c fb ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	83 e0 01             	and    eax,0x1
c0017125:	89 c1                	mov    ecx,eax
c0017127:	c1 e1 06             	shl    ecx,0x6
c001712a:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001712f:	83 e0 bf             	and    eax,0xffffffbf
c0017132:	88 c2                	mov    dl,al
c0017134:	88 c8                	mov    al,cl
c0017136:	09 d0                	or     eax,edx
c0017138:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001713d:	83 ec 0c             	sub    esp,0xc
c0017140:	68 00 00 01 00       	push   0x10000
c0017145:	e8 51 fb ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c001714a:	83 c4 10             	add    esp,0x10
c001714d:	89 c1                	mov    ecx,eax
c001714f:	c1 e1 07             	shl    ecx,0x7
c0017152:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017157:	83 e0 7f             	and    eax,0x7f
c001715a:	88 c2                	mov    dl,al
c001715c:	88 c8                	mov    al,cl
c001715e:	09 d0                	or     eax,edx
c0017160:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017165:	83 ec 0c             	sub    esp,0xc
c0017168:	6a 01                	push   0x1
c001716a:	e8 2c fb ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c001716f:	83 c4 10             	add    esp,0x10
c0017172:	83 e0 01             	and    eax,0x1
c0017175:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001717c:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017181:	83 e0 f7             	and    eax,0xfffffff7
c0017184:	88 c2                	mov    dl,al
c0017186:	88 c8                	mov    al,cl
c0017188:	09 d0                	or     eax,edx
c001718a:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001718f:	83 ec 0c             	sub    esp,0xc
c0017192:	68 00 08 00 00       	push   0x800
c0017197:	e8 ff fa ff ff       	call   c0016c9b <cpuidCheckEDX(unsigned int)>
c001719c:	83 c4 10             	add    esp,0x10
c001719f:	89 c1                	mov    ecx,eax
c00171a1:	83 e1 01             	and    ecx,0x1
c00171a4:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00171a9:	83 e0 fe             	and    eax,0xfffffffe
c00171ac:	88 c2                	mov    dl,al
c00171ae:	88 c8                	mov    al,cl
c00171b0:	09 d0                	or     eax,edx
c00171b2:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00171b7:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171bc:	83 e0 40             	and    eax,0x40
c00171bf:	0f b6 c0             	movzx  eax,al
c00171c2:	85 c0                	test   eax,eax
c00171c4:	74 0a                	je     c00171d0 <HalDetectFeatures()+0x47e>
c00171c6:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c00171d0:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171d5:	83 e0 80             	and    eax,0xffffff80
c00171d8:	0f b6 c0             	movzx  eax,al
c00171db:	85 c0                	test   eax,eax
c00171dd:	74 0a                	je     c00171e9 <HalDetectFeatures()+0x497>
c00171df:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c00171e9:	83 ec 0c             	sub    esp,0xc
c00171ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171f0:	50                   	push   eax
c00171f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00171f5:	50                   	push   eax
c00171f6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00171fa:	50                   	push   eax
c00171fb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00171ff:	50                   	push   eax
c0017200:	6a 00                	push   0x0
c0017202:	e8 f6 f9 ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017207:	83 c4 20             	add    esp,0x20
c001720a:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c0017212:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017216:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001721a:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0017222:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017226:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001722a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001722e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0017232:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0017236:	89 c6                	mov    esi,eax
c0017238:	89 d7                	mov    edi,edx
c001723a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001723c:	89 c8                	mov    eax,ecx
c001723e:	89 fa                	mov    edx,edi
c0017240:	89 f3                	mov    ebx,esi
c0017242:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001724a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001724e:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c0017253:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0017257:	8d 44 24 08          	lea    eax,[esp+0x8]
c001725b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001725f:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0017267:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001726b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001726f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017273:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0017277:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001727b:	89 c6                	mov    esi,eax
c001727d:	89 d7                	mov    edi,edx
c001727f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017281:	89 c8                	mov    eax,ecx
c0017283:	89 fa                	mov    edx,edi
c0017285:	89 f3                	mov    ebx,esi
c0017287:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c001728b:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001728f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017293:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c0017298:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001729f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00172a3:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c00172a7:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c00172af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00172b6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00172ba:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00172be:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00172c5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c00172c9:	89 c6                	mov    esi,eax
c00172cb:	89 d7                	mov    edi,edx
c00172cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172cf:	89 c8                	mov    eax,ecx
c00172d1:	89 fa                	mov    edx,edi
c00172d3:	89 f3                	mov    ebx,esi
c00172d5:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c00172d9:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c00172dd:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00172e1:	83 ec 08             	sub    esp,0x8
c00172e4:	68 d0 2c 02 c0       	push   0xc0022cd0
c00172e9:	68 70 c7 02 c0       	push   0xc002c770
c00172ee:	e8 8d 94 fe ff       	call   c0000780 <strcmp>
c00172f3:	83 c4 10             	add    esp,0x10
c00172f6:	85 c0                	test   eax,eax
c00172f8:	74 19                	je     c0017313 <HalDetectFeatures()+0x5c1>
c00172fa:	83 ec 08             	sub    esp,0x8
c00172fd:	68 dd 2c 02 c0       	push   0xc0022cdd
c0017302:	68 70 c7 02 c0       	push   0xc002c770
c0017307:	e8 74 94 fe ff       	call   c0000780 <strcmp>
c001730c:	83 c4 10             	add    esp,0x10
c001730f:	85 c0                	test   eax,eax
c0017311:	75 04                	jne    c0017317 <HalDetectFeatures()+0x5c5>
c0017313:	b0 01                	mov    al,0x1
c0017315:	eb 02                	jmp    c0017319 <HalDetectFeatures()+0x5c7>
c0017317:	b0 00                	mov    al,0x0
c0017319:	0f b6 c0             	movzx  eax,al
c001731c:	85 c0                	test   eax,eax
c001731e:	74 0f                	je     c001732f <HalDetectFeatures()+0x5dd>
c0017320:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c001732a:	e9 0d 03 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c001732f:	83 ec 08             	sub    esp,0x8
c0017332:	68 ea 2c 02 c0       	push   0xc0022cea
c0017337:	68 70 c7 02 c0       	push   0xc002c770
c001733c:	e8 3f 94 fe ff       	call   c0000780 <strcmp>
c0017341:	83 c4 10             	add    esp,0x10
c0017344:	85 c0                	test   eax,eax
c0017346:	74 19                	je     c0017361 <HalDetectFeatures()+0x60f>
c0017348:	83 ec 08             	sub    esp,0x8
c001734b:	68 f7 2c 02 c0       	push   0xc0022cf7
c0017350:	68 70 c7 02 c0       	push   0xc002c770
c0017355:	e8 26 94 fe ff       	call   c0000780 <strcmp>
c001735a:	83 c4 10             	add    esp,0x10
c001735d:	85 c0                	test   eax,eax
c001735f:	75 04                	jne    c0017365 <HalDetectFeatures()+0x613>
c0017361:	b0 01                	mov    al,0x1
c0017363:	eb 02                	jmp    c0017367 <HalDetectFeatures()+0x615>
c0017365:	b0 00                	mov    al,0x0
c0017367:	0f b6 c0             	movzx  eax,al
c001736a:	85 c0                	test   eax,eax
c001736c:	74 0f                	je     c001737d <HalDetectFeatures()+0x62b>
c001736e:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c0017378:	e9 bf 02 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c001737d:	83 ec 08             	sub    esp,0x8
c0017380:	68 04 2d 02 c0       	push   0xc0022d04
c0017385:	68 70 c7 02 c0       	push   0xc002c770
c001738a:	e8 f1 93 fe ff       	call   c0000780 <strcmp>
c001738f:	83 c4 10             	add    esp,0x10
c0017392:	85 c0                	test   eax,eax
c0017394:	74 19                	je     c00173af <HalDetectFeatures()+0x65d>
c0017396:	83 ec 08             	sub    esp,0x8
c0017399:	68 11 2d 02 c0       	push   0xc0022d11
c001739e:	68 70 c7 02 c0       	push   0xc002c770
c00173a3:	e8 d8 93 fe ff       	call   c0000780 <strcmp>
c00173a8:	83 c4 10             	add    esp,0x10
c00173ab:	85 c0                	test   eax,eax
c00173ad:	75 04                	jne    c00173b3 <HalDetectFeatures()+0x661>
c00173af:	b0 01                	mov    al,0x1
c00173b1:	eb 02                	jmp    c00173b5 <HalDetectFeatures()+0x663>
c00173b3:	b0 00                	mov    al,0x0
c00173b5:	0f b6 c0             	movzx  eax,al
c00173b8:	85 c0                	test   eax,eax
c00173ba:	74 0f                	je     c00173cb <HalDetectFeatures()+0x679>
c00173bc:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c00173c6:	e9 71 02 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c00173cb:	83 ec 08             	sub    esp,0x8
c00173ce:	68 1e 2d 02 c0       	push   0xc0022d1e
c00173d3:	68 70 c7 02 c0       	push   0xc002c770
c00173d8:	e8 a3 93 fe ff       	call   c0000780 <strcmp>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	85 c0                	test   eax,eax
c00173e2:	0f 94 c0             	sete   al
c00173e5:	0f b6 c0             	movzx  eax,al
c00173e8:	85 c0                	test   eax,eax
c00173ea:	74 0f                	je     c00173fb <HalDetectFeatures()+0x6a9>
c00173ec:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00173f6:	e9 41 02 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c00173fb:	83 ec 08             	sub    esp,0x8
c00173fe:	68 2b 2d 02 c0       	push   0xc0022d2b
c0017403:	68 70 c7 02 c0       	push   0xc002c770
c0017408:	e8 73 93 fe ff       	call   c0000780 <strcmp>
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	85 c0                	test   eax,eax
c0017412:	0f 94 c0             	sete   al
c0017415:	0f b6 c0             	movzx  eax,al
c0017418:	85 c0                	test   eax,eax
c001741a:	74 0f                	je     c001742b <HalDetectFeatures()+0x6d9>
c001741c:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c0017426:	e9 11 02 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c001742b:	83 ec 08             	sub    esp,0x8
c001742e:	68 ea 2c 02 c0       	push   0xc0022cea
c0017433:	68 70 c7 02 c0       	push   0xc002c770
c0017438:	e8 43 93 fe ff       	call   c0000780 <strcmp>
c001743d:	83 c4 10             	add    esp,0x10
c0017440:	85 c0                	test   eax,eax
c0017442:	0f 94 c0             	sete   al
c0017445:	0f b6 c0             	movzx  eax,al
c0017448:	85 c0                	test   eax,eax
c001744a:	74 0f                	je     c001745b <HalDetectFeatures()+0x709>
c001744c:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c0017456:	e9 e1 01 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c001745b:	83 ec 08             	sub    esp,0x8
c001745e:	68 38 2d 02 c0       	push   0xc0022d38
c0017463:	68 70 c7 02 c0       	push   0xc002c770
c0017468:	e8 13 93 fe ff       	call   c0000780 <strcmp>
c001746d:	83 c4 10             	add    esp,0x10
c0017470:	85 c0                	test   eax,eax
c0017472:	0f 94 c0             	sete   al
c0017475:	0f b6 c0             	movzx  eax,al
c0017478:	85 c0                	test   eax,eax
c001747a:	74 0f                	je     c001748b <HalDetectFeatures()+0x739>
c001747c:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c0017486:	e9 b1 01 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c001748b:	83 ec 08             	sub    esp,0x8
c001748e:	68 45 2d 02 c0       	push   0xc0022d45
c0017493:	68 70 c7 02 c0       	push   0xc002c770
c0017498:	e8 e3 92 fe ff       	call   c0000780 <strcmp>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	85 c0                	test   eax,eax
c00174a2:	0f 94 c0             	sete   al
c00174a5:	0f b6 c0             	movzx  eax,al
c00174a8:	85 c0                	test   eax,eax
c00174aa:	74 0f                	je     c00174bb <HalDetectFeatures()+0x769>
c00174ac:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c00174b6:	e9 81 01 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c00174bb:	83 ec 08             	sub    esp,0x8
c00174be:	68 52 2d 02 c0       	push   0xc0022d52
c00174c3:	68 70 c7 02 c0       	push   0xc002c770
c00174c8:	e8 b3 92 fe ff       	call   c0000780 <strcmp>
c00174cd:	83 c4 10             	add    esp,0x10
c00174d0:	85 c0                	test   eax,eax
c00174d2:	0f 94 c0             	sete   al
c00174d5:	0f b6 c0             	movzx  eax,al
c00174d8:	85 c0                	test   eax,eax
c00174da:	74 0f                	je     c00174eb <HalDetectFeatures()+0x799>
c00174dc:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c00174e6:	e9 51 01 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c00174eb:	83 ec 08             	sub    esp,0x8
c00174ee:	68 5f 2d 02 c0       	push   0xc0022d5f
c00174f3:	68 70 c7 02 c0       	push   0xc002c770
c00174f8:	e8 83 92 fe ff       	call   c0000780 <strcmp>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	85 c0                	test   eax,eax
c0017502:	0f 94 c0             	sete   al
c0017505:	0f b6 c0             	movzx  eax,al
c0017508:	85 c0                	test   eax,eax
c001750a:	74 0f                	je     c001751b <HalDetectFeatures()+0x7c9>
c001750c:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c0017516:	e9 21 01 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c001751b:	83 ec 08             	sub    esp,0x8
c001751e:	68 6c 2d 02 c0       	push   0xc0022d6c
c0017523:	68 70 c7 02 c0       	push   0xc002c770
c0017528:	e8 53 92 fe ff       	call   c0000780 <strcmp>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	85 c0                	test   eax,eax
c0017532:	0f 94 c0             	sete   al
c0017535:	0f b6 c0             	movzx  eax,al
c0017538:	85 c0                	test   eax,eax
c001753a:	74 0f                	je     c001754b <HalDetectFeatures()+0x7f9>
c001753c:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c0017546:	e9 f1 00 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c001754b:	83 ec 08             	sub    esp,0x8
c001754e:	68 79 2d 02 c0       	push   0xc0022d79
c0017553:	68 70 c7 02 c0       	push   0xc002c770
c0017558:	e8 23 92 fe ff       	call   c0000780 <strcmp>
c001755d:	83 c4 10             	add    esp,0x10
c0017560:	85 c0                	test   eax,eax
c0017562:	0f 94 c0             	sete   al
c0017565:	0f b6 c0             	movzx  eax,al
c0017568:	85 c0                	test   eax,eax
c001756a:	74 0f                	je     c001757b <HalDetectFeatures()+0x829>
c001756c:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c0017576:	e9 c1 00 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c001757b:	83 ec 08             	sub    esp,0x8
c001757e:	68 86 2d 02 c0       	push   0xc0022d86
c0017583:	68 70 c7 02 c0       	push   0xc002c770
c0017588:	e8 f3 91 fe ff       	call   c0000780 <strcmp>
c001758d:	83 c4 10             	add    esp,0x10
c0017590:	85 c0                	test   eax,eax
c0017592:	0f 94 c0             	sete   al
c0017595:	0f b6 c0             	movzx  eax,al
c0017598:	85 c0                	test   eax,eax
c001759a:	74 0f                	je     c00175ab <HalDetectFeatures()+0x859>
c001759c:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00175a6:	e9 91 00 00 00       	jmp    c001763c <HalDetectFeatures()+0x8ea>
c00175ab:	83 ec 08             	sub    esp,0x8
c00175ae:	68 93 2d 02 c0       	push   0xc0022d93
c00175b3:	68 70 c7 02 c0       	push   0xc002c770
c00175b8:	e8 c3 91 fe ff       	call   c0000780 <strcmp>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	85 c0                	test   eax,eax
c00175c2:	0f 94 c0             	sete   al
c00175c5:	0f b6 c0             	movzx  eax,al
c00175c8:	85 c0                	test   eax,eax
c00175ca:	74 0c                	je     c00175d8 <HalDetectFeatures()+0x886>
c00175cc:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00175d6:	eb 64                	jmp    c001763c <HalDetectFeatures()+0x8ea>
c00175d8:	83 ec 08             	sub    esp,0x8
c00175db:	68 a0 2d 02 c0       	push   0xc0022da0
c00175e0:	68 70 c7 02 c0       	push   0xc002c770
c00175e5:	e8 96 91 fe ff       	call   c0000780 <strcmp>
c00175ea:	83 c4 10             	add    esp,0x10
c00175ed:	85 c0                	test   eax,eax
c00175ef:	0f 94 c0             	sete   al
c00175f2:	0f b6 c0             	movzx  eax,al
c00175f5:	85 c0                	test   eax,eax
c00175f7:	74 0c                	je     c0017605 <HalDetectFeatures()+0x8b3>
c00175f9:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017603:	eb 37                	jmp    c001763c <HalDetectFeatures()+0x8ea>
c0017605:	83 ec 08             	sub    esp,0x8
c0017608:	68 ad 2d 02 c0       	push   0xc0022dad
c001760d:	68 70 c7 02 c0       	push   0xc002c770
c0017612:	e8 69 91 fe ff       	call   c0000780 <strcmp>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	85 c0                	test   eax,eax
c001761c:	0f 94 c0             	sete   al
c001761f:	0f b6 c0             	movzx  eax,al
c0017622:	85 c0                	test   eax,eax
c0017624:	74 0c                	je     c0017632 <HalDetectFeatures()+0x8e0>
c0017626:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017630:	eb 0a                	jmp    c001763c <HalDetectFeatures()+0x8ea>
c0017632:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c001763c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017640:	83 f8 06             	cmp    eax,0x6
c0017643:	0f 86 cc 00 00 00    	jbe    c0017715 <HalDetectFeatures()+0x9c3>
c0017649:	83 ec 0c             	sub    esp,0xc
c001764c:	68 80 00 00 00       	push   0x80
c0017651:	e8 a0 f6 ff ff       	call   c0016cf6 <cpuidCheckExtendedEBX(unsigned int)>
c0017656:	83 c4 10             	add    esp,0x10
c0017659:	89 c1                	mov    ecx,eax
c001765b:	83 e1 01             	and    ecx,0x1
c001765e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017663:	83 e0 fe             	and    eax,0xfffffffe
c0017666:	88 c2                	mov    dl,al
c0017668:	88 c8                	mov    al,cl
c001766a:	09 d0                	or     eax,edx
c001766c:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017671:	83 ec 0c             	sub    esp,0xc
c0017674:	68 00 00 10 00       	push   0x100000
c0017679:	e8 78 f6 ff ff       	call   c0016cf6 <cpuidCheckExtendedEBX(unsigned int)>
c001767e:	83 c4 10             	add    esp,0x10
c0017681:	83 e0 01             	and    eax,0x1
c0017684:	89 c1                	mov    ecx,eax
c0017686:	c1 e1 06             	shl    ecx,0x6
c0017689:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001768e:	83 e0 bf             	and    eax,0xffffffbf
c0017691:	88 c2                	mov    dl,al
c0017693:	88 c8                	mov    al,cl
c0017695:	09 d0                	or     eax,edx
c0017697:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	68 00 00 04 00       	push   0x40000
c00176a4:	e8 4d f6 ff ff       	call   c0016cf6 <cpuidCheckExtendedEBX(unsigned int)>
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	83 e0 01             	and    eax,0x1
c00176af:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00176b2:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176b7:	83 e0 fd             	and    eax,0xfffffffd
c00176ba:	88 c2                	mov    dl,al
c00176bc:	88 c8                	mov    al,cl
c00176be:	09 d0                	or     eax,edx
c00176c0:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176c5:	83 ec 0c             	sub    esp,0xc
c00176c8:	6a 04                	push   0x4
c00176ca:	e8 55 f6 ff ff       	call   c0016d24 <cpuidCheckExtendedECX(unsigned int)>
c00176cf:	83 c4 10             	add    esp,0x10
c00176d2:	83 e0 01             	and    eax,0x1
c00176d5:	89 c1                	mov    ecx,eax
c00176d7:	c1 e1 05             	shl    ecx,0x5
c00176da:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176df:	83 e0 df             	and    eax,0xffffffdf
c00176e2:	88 c2                	mov    dl,al
c00176e4:	88 c8                	mov    al,cl
c00176e6:	09 d0                	or     eax,edx
c00176e8:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176ed:	83 ec 0c             	sub    esp,0xc
c00176f0:	6a 20                	push   0x20
c00176f2:	e8 2d f6 ff ff       	call   c0016d24 <cpuidCheckExtendedECX(unsigned int)>
c00176f7:	83 c4 10             	add    esp,0x10
c00176fa:	83 e0 01             	and    eax,0x1
c00176fd:	89 c1                	mov    ecx,eax
c00176ff:	c1 e1 04             	shl    ecx,0x4
c0017702:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017707:	83 e0 ef             	and    eax,0xffffffef
c001770a:	88 c2                	mov    dl,al
c001770c:	88 c8                	mov    al,cl
c001770e:	09 d0                	or     eax,edx
c0017710:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017715:	83 ec 0c             	sub    esp,0xc
c0017718:	8d 44 24 14          	lea    eax,[esp+0x14]
c001771c:	50                   	push   eax
c001771d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017721:	50                   	push   eax
c0017722:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017726:	50                   	push   eax
c0017727:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001772b:	50                   	push   eax
c001772c:	6a 01                	push   0x1
c001772e:	e8 ca f4 ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017733:	83 c4 20             	add    esp,0x20
c0017736:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001773a:	83 e0 0f             	and    eax,0xf
c001773d:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c0017742:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017746:	c1 e8 04             	shr    eax,0x4
c0017749:	83 e0 0f             	and    eax,0xf
c001774c:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c0017751:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017755:	c1 e8 08             	shr    eax,0x8
c0017758:	83 e0 0f             	and    eax,0xf
c001775b:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c0017760:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017764:	c1 e8 0c             	shr    eax,0xc
c0017767:	83 e0 03             	and    eax,0x3
c001776a:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c001776f:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017774:	0f b6 c0             	movzx  eax,al
c0017777:	83 f8 06             	cmp    eax,0x6
c001777a:	74 0d                	je     c0017789 <HalDetectFeatures()+0xa37>
c001777c:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017781:	0f b6 c0             	movzx  eax,al
c0017784:	83 f8 0f             	cmp    eax,0xf
c0017787:	75 18                	jne    c00177a1 <HalDetectFeatures()+0xa4f>
c0017789:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001778d:	c1 e8 10             	shr    eax,0x10
c0017790:	c1 e0 04             	shl    eax,0x4
c0017793:	88 c2                	mov    dl,al
c0017795:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c001779a:	09 d0                	or     eax,edx
c001779c:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c00177a1:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177a6:	0f b6 c0             	movzx  eax,al
c00177a9:	83 f8 0f             	cmp    eax,0xf
c00177ac:	75 15                	jne    c00177c3 <HalDetectFeatures()+0xa71>
c00177ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177b2:	c1 e8 14             	shr    eax,0x14
c00177b5:	88 c2                	mov    dl,al
c00177b7:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177bc:	01 d0                	add    eax,edx
c00177be:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00177c3:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00177cb:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00177d3:	85 c0                	test   eax,eax
c00177d5:	74 2d                	je     c0017804 <HalDetectFeatures()+0xab2>
c00177d7:	83 ec 0c             	sub    esp,0xc
c00177da:	68 00 00 00 40       	push   0x40000000
c00177df:	e8 e4 f4 ff ff       	call   c0016cc8 <cpuidCheckECX(unsigned int)>
c00177e4:	83 c4 10             	add    esp,0x10
c00177e7:	83 e0 01             	and    eax,0x1
c00177ea:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00177f1:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00177f6:	83 e0 fb             	and    eax,0xfffffffb
c00177f9:	88 c2                	mov    dl,al
c00177fb:	88 c8                	mov    al,cl
c00177fd:	09 d0                	or     eax,edx
c00177ff:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017804:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017809:	83 c8 04             	or     eax,0x4
c001780c:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017811:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017816:	83 c8 08             	or     eax,0x8
c0017819:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001781e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017823:	83 c8 10             	or     eax,0x10
c0017826:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001782b:	83 ec 0c             	sub    esp,0xc
c001782e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017832:	50                   	push   eax
c0017833:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017837:	50                   	push   eax
c0017838:	8d 44 24 24          	lea    eax,[esp+0x24]
c001783c:	50                   	push   eax
c001783d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017841:	50                   	push   eax
c0017842:	68 00 00 00 80       	push   0x80000000
c0017847:	e8 b1 f3 ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001784c:	83 c4 20             	add    esp,0x20
c001784f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017853:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017858:	0f 86 96 01 00 00    	jbe    c00179f4 <HalDetectFeatures()+0xca2>
c001785e:	83 ec 0c             	sub    esp,0xc
c0017861:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017865:	50                   	push   eax
c0017866:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001786a:	50                   	push   eax
c001786b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001786f:	50                   	push   eax
c0017870:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017874:	50                   	push   eax
c0017875:	68 01 00 00 80       	push   0x80000001
c001787a:	e8 7e f3 ff ff       	call   c0016bfd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001787f:	83 c4 20             	add    esp,0x20
c0017882:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017887:	83 e0 7f             	and    eax,0x7f
c001788a:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001788f:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017894:	83 e0 fb             	and    eax,0xfffffffb
c0017897:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001789c:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00178a1:	83 e0 fd             	and    eax,0xfffffffd
c00178a4:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00178a9:	e9 46 01 00 00       	jmp    c00179f4 <HalDetectFeatures()+0xca2>
c00178ae:	83 ec 08             	sub    esp,0x8
c00178b1:	68 1e 2d 02 c0       	push   0xc0022d1e
c00178b6:	68 70 c7 02 c0       	push   0xc002c770
c00178bb:	e8 90 8d fe ff       	call   c0000650 <strcpy>
c00178c0:	83 c4 10             	add    esp,0x10
c00178c3:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c00178cd:	e8 f1 88 fe ff       	call   c00001c3 <is486>
c00178d2:	85 c0                	test   eax,eax
c00178d4:	0f 95 c0             	setne  al
c00178d7:	0f b6 c0             	movzx  eax,al
c00178da:	85 c0                	test   eax,eax
c00178dc:	0f 84 8d 00 00 00    	je     c001796f <HalDetectFeatures()+0xc1d>
c00178e2:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178e7:	83 c8 04             	or     eax,0x4
c00178ea:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178ef:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00178f4:	83 c8 08             	or     eax,0x8
c00178f7:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178fc:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017901:	83 c8 10             	or     eax,0x10
c0017904:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017909:	0f 20 c0             	mov    eax,cr0
c001790c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017910:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017914:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001791b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0017922:	83 e0 04             	and    eax,0x4
c0017925:	74 1e                	je     c0017945 <HalDetectFeatures()+0xbf3>
c0017927:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001792e:	83 e0 10             	and    eax,0x10
c0017931:	75 12                	jne    c0017945 <HalDetectFeatures()+0xbf3>
c0017933:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017938:	83 e0 f7             	and    eax,0xfffffff7
c001793b:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017940:	e9 af 00 00 00       	jmp    c00179f4 <HalDetectFeatures()+0xca2>
c0017945:	e8 54 88 fe ff       	call   c000019e <hasLegacyFPU>
c001794a:	83 e0 01             	and    eax,0x1
c001794d:	83 e0 01             	and    eax,0x1
c0017950:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017957:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001795c:	83 e0 f7             	and    eax,0xfffffff7
c001795f:	88 c2                	mov    dl,al
c0017961:	88 c8                	mov    al,cl
c0017963:	09 d0                	or     eax,edx
c0017965:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001796a:	e9 85 00 00 00       	jmp    c00179f4 <HalDetectFeatures()+0xca2>
c001796f:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017974:	83 e0 fb             	and    eax,0xfffffffb
c0017977:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001797c:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017981:	83 e0 f7             	and    eax,0xfffffff7
c0017984:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017989:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001798e:	83 e0 ef             	and    eax,0xffffffef
c0017991:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017996:	0f 20 c0             	mov    eax,cr0
c0017999:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001799d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179a1:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00179a8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00179af:	83 e0 04             	and    eax,0x4
c00179b2:	74 1b                	je     c00179cf <HalDetectFeatures()+0xc7d>
c00179b4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00179bb:	83 e0 10             	and    eax,0x10
c00179be:	75 0f                	jne    c00179cf <HalDetectFeatures()+0xc7d>
c00179c0:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179c5:	83 e0 f7             	and    eax,0xfffffff7
c00179c8:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179cd:	eb 25                	jmp    c00179f4 <HalDetectFeatures()+0xca2>
c00179cf:	e8 ca 87 fe ff       	call   c000019e <hasLegacyFPU>
c00179d4:	83 e0 01             	and    eax,0x1
c00179d7:	83 e0 01             	and    eax,0x1
c00179da:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00179e1:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179e6:	83 e0 f7             	and    eax,0xfffffff7
c00179e9:	88 c2                	mov    dl,al
c00179eb:	88 c8                	mov    al,cl
c00179ed:	09 d0                	or     eax,edx
c00179ef:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179f4:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179f9:	83 e0 08             	and    eax,0x8
c00179fc:	0f b6 c0             	movzx  eax,al
c00179ff:	85 c0                	test   eax,eax
c0017a01:	75 25                	jne    c0017a28 <HalDetectFeatures()+0xcd6>
c0017a03:	e8 96 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a08:	83 e0 01             	and    eax,0x1
c0017a0b:	83 e0 01             	and    eax,0x1
c0017a0e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a15:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a1a:	83 e0 f7             	and    eax,0xfffffff7
c0017a1d:	88 c2                	mov    dl,al
c0017a1f:	88 c8                	mov    al,cl
c0017a21:	09 d0                	or     eax,edx
c0017a23:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a28:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a2d:	83 e0 08             	and    eax,0x8
c0017a30:	0f b6 c0             	movzx  eax,al
c0017a33:	85 c0                	test   eax,eax
c0017a35:	74 0d                	je     c0017a44 <HalDetectFeatures()+0xcf2>
c0017a37:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a3c:	83 c8 10             	or     eax,0x10
c0017a3f:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017a44:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a49:	83 e0 10             	and    eax,0x10
c0017a4c:	0f b6 c0             	movzx  eax,al
c0017a4f:	85 c0                	test   eax,eax
c0017a51:	75 23                	jne    c0017a76 <HalDetectFeatures()+0xd24>
c0017a53:	e8 de 7c 00 00       	call   c001f736 <x87Detect>
c0017a58:	83 e0 01             	and    eax,0x1
c0017a5b:	83 e0 01             	and    eax,0x1
c0017a5e:	89 c1                	mov    ecx,eax
c0017a60:	c1 e1 04             	shl    ecx,0x4
c0017a63:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017a68:	83 e0 ef             	and    eax,0xffffffef
c0017a6b:	88 c2                	mov    dl,al
c0017a6d:	88 c8                	mov    al,cl
c0017a6f:	09 d0                	or     eax,edx
c0017a71:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017a76:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017a7b:	83 e0 01             	and    eax,0x1
c0017a7e:	0f b6 c0             	movzx  eax,al
c0017a81:	85 c0                	test   eax,eax
c0017a83:	75 2d                	jne    c0017ab2 <HalDetectFeatures()+0xd60>
c0017a85:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017a8a:	83 e0 02             	and    eax,0x2
c0017a8d:	0f b6 c0             	movzx  eax,al
c0017a90:	85 c0                	test   eax,eax
c0017a92:	75 1e                	jne    c0017ab2 <HalDetectFeatures()+0xd60>
c0017a94:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017a99:	83 e0 04             	and    eax,0x4
c0017a9c:	0f b6 c0             	movzx  eax,al
c0017a9f:	85 c0                	test   eax,eax
c0017aa1:	75 0f                	jne    c0017ab2 <HalDetectFeatures()+0xd60>
c0017aa3:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017aa8:	83 e0 08             	and    eax,0x8
c0017aab:	0f b6 c0             	movzx  eax,al
c0017aae:	85 c0                	test   eax,eax
c0017ab0:	74 0d                	je     c0017abf <HalDetectFeatures()+0xd6d>
c0017ab2:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ab7:	83 c8 80             	or     eax,0xffffff80
c0017aba:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017abf:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ac4:	83 e0 10             	and    eax,0x10
c0017ac7:	0f b6 c0             	movzx  eax,al
c0017aca:	85 c0                	test   eax,eax
c0017acc:	74 2f                	je     c0017afd <HalDetectFeatures()+0xdab>
c0017ace:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ad3:	83 e0 80             	and    eax,0xffffff80
c0017ad6:	0f b6 c0             	movzx  eax,al
c0017ad9:	85 c0                	test   eax,eax
c0017adb:	75 20                	jne    c0017afd <HalDetectFeatures()+0xdab>
c0017add:	e8 0e 7c 00 00       	call   c001f6f0 <sseDetect>
c0017ae2:	83 e0 01             	and    eax,0x1
c0017ae5:	89 c1                	mov    ecx,eax
c0017ae7:	c1 e1 07             	shl    ecx,0x7
c0017aea:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017aef:	83 e0 7f             	and    eax,0x7f
c0017af2:	88 c2                	mov    dl,al
c0017af4:	88 c8                	mov    al,cl
c0017af6:	09 d0                	or     eax,edx
c0017af8:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017afd:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b02:	83 e0 80             	and    eax,0xffffff80
c0017b05:	0f b6 c0             	movzx  eax,al
c0017b08:	85 c0                	test   eax,eax
c0017b0a:	74 1c                	je     c0017b28 <HalDetectFeatures()+0xdd6>
c0017b0c:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b11:	83 e0 20             	and    eax,0x20
c0017b14:	0f b6 c0             	movzx  eax,al
c0017b17:	85 c0                	test   eax,eax
c0017b19:	75 0d                	jne    c0017b28 <HalDetectFeatures()+0xdd6>
c0017b1b:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b20:	83 e0 df             	and    eax,0xffffffdf
c0017b23:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017b28:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017b2f:	90                   	nop
c0017b30:	81 c4 90 00 00 00    	add    esp,0x90
c0017b36:	5b                   	pop    ebx
c0017b37:	5e                   	pop    esi
c0017b38:	5f                   	pop    edi
c0017b39:	c3                   	ret    

c0017b3a <HalEnableNMI()>:
c0017b3a:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017b41:	6a 10                	push   0x10
c0017b43:	e8 03 ef ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0017b48:	83 c4 04             	add    esp,0x4
c0017b4b:	90                   	nop
c0017b4c:	c3                   	ret    

c0017b4d <HalDisableNMI()>:
c0017b4d:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017b54:	6a 10                	push   0x10
c0017b56:	e8 f0 ee ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0017b5b:	83 c4 04             	add    esp,0x4
c0017b5e:	90                   	nop
c0017b5f:	c3                   	ret    

c0017b60 <HalGetNMIState()>:
c0017b60:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017b65:	c3                   	ret    

c0017b66 <x86rdmsr(unsigned int)>:
c0017b66:	83 ec 1c             	sub    esp,0x1c
c0017b69:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b6e:	83 e0 08             	and    eax,0x8
c0017b71:	0f b6 c0             	movzx  eax,al
c0017b74:	85 c0                	test   eax,eax
c0017b76:	75 10                	jne    c0017b88 <x86rdmsr(unsigned int)+0x22>
c0017b78:	83 ec 0c             	sub    esp,0xc
c0017b7b:	68 b9 2d 02 c0       	push   0xc0022db9
c0017b80:	e8 91 70 ff ff       	call   c000ec16 <KePanic(char const*)>
c0017b85:	83 c4 10             	add    esp,0x10
c0017b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b8c:	89 c1                	mov    ecx,eax
c0017b8e:	0f 32                	rdmsr  
c0017b90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017b98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ba0:	83 c4 1c             	add    esp,0x1c
c0017ba3:	c3                   	ret    

c0017ba4 <x86wrmsr(unsigned int, unsigned long long)>:
c0017ba4:	83 ec 1c             	sub    esp,0x1c
c0017ba7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017baf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bb7:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017bbc:	83 e0 08             	and    eax,0x8
c0017bbf:	0f b6 c0             	movzx  eax,al
c0017bc2:	85 c0                	test   eax,eax
c0017bc4:	75 10                	jne    c0017bd6 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017bc6:	83 ec 0c             	sub    esp,0xc
c0017bc9:	68 bf 2d 02 c0       	push   0xc0022dbf
c0017bce:	e8 43 70 ff ff       	call   c000ec16 <KePanic(char const*)>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017bda:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017be2:	0f 30                	wrmsr  
c0017be4:	90                   	nop
c0017be5:	83 c4 1c             	add    esp,0x1c
c0017be8:	c3                   	ret    

c0017be9 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017be9:	83 ec 0c             	sub    esp,0xc
c0017bec:	83 ec 0c             	sub    esp,0xc
c0017bef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bf3:	e8 23 e7 ff ff       	call   c001631b <Vm::faultHandler(regs*)>
c0017bf8:	83 c4 10             	add    esp,0x10
c0017bfb:	83 c4 0c             	add    esp,0xc
c0017bfe:	c3                   	ret    

c0017bff <HalFindRSDP()>:
c0017bff:	83 ec 1c             	sub    esp,0x1c
c0017c02:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017c07:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017c0c:	7e 0c                	jle    c0017c1a <HalFindRSDP()+0x1b>
c0017c0e:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017c13:	25 00 04 00 00       	and    eax,0x400
c0017c18:	74 0d                	je     c0017c27 <HalFindRSDP()+0x28>
c0017c1a:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c1f:	83 e0 fb             	and    eax,0xfffffffb
c0017c22:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017c27:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c2c:	83 e0 04             	and    eax,0x4
c0017c2f:	0f b6 c0             	movzx  eax,al
c0017c32:	85 c0                	test   eax,eax
c0017c34:	75 07                	jne    c0017c3d <HalFindRSDP()+0x3e>
c0017c36:	b8 00 00 00 00       	mov    eax,0x0
c0017c3b:	eb 53                	jmp    c0017c90 <HalFindRSDP()+0x91>
c0017c3d:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017c45:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017c4d:	77 2f                	ja     c0017c7e <HalFindRSDP()+0x7f>
c0017c4f:	83 ec 04             	sub    esp,0x4
c0017c52:	6a 08                	push   0x8
c0017c54:	68 c5 2d 02 c0       	push   0xc0022dc5
c0017c59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c5d:	e8 1e 87 fe ff       	call   c0000380 <memcmp>
c0017c62:	83 c4 10             	add    esp,0x10
c0017c65:	85 c0                	test   eax,eax
c0017c67:	0f 94 c0             	sete   al
c0017c6a:	0f b6 c0             	movzx  eax,al
c0017c6d:	85 c0                	test   eax,eax
c0017c6f:	74 06                	je     c0017c77 <HalFindRSDP()+0x78>
c0017c71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c75:	eb 19                	jmp    c0017c90 <HalFindRSDP()+0x91>
c0017c77:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017c7c:	eb c7                	jmp    c0017c45 <HalFindRSDP()+0x46>
c0017c7e:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c83:	83 e0 fb             	and    eax,0xfffffffb
c0017c86:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017c8b:	b8 00 00 00 00       	mov    eax,0x0
c0017c90:	83 c4 1c             	add    esp,0x1c
c0017c93:	c3                   	ret    

c0017c94 <HalHandlePageFault(void*, void*)>:
c0017c94:	83 ec 1c             	sub    esp,0x1c
c0017c97:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017ca1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017ca7:	0f 20 d2             	mov    edx,cr2
c0017caa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017cae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cb2:	83 ec 08             	sub    esp,0x8
c0017cb5:	52                   	push   edx
c0017cb6:	50                   	push   eax
c0017cb7:	e8 6a af ff ff       	call   c0012c26 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017cbc:	83 c4 10             	add    esp,0x10
c0017cbf:	83 c4 1c             	add    esp,0x1c
c0017cc2:	c3                   	ret    

c0017cc3 <HalHandleOpcodeFault(void*, void*)>:
c0017cc3:	83 ec 1c             	sub    esp,0x1c
c0017cc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cce:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017cd3:	0f b6 c0             	movzx  eax,al
c0017cd6:	85 c0                	test   eax,eax
c0017cd8:	74 25                	je     c0017cff <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017cda:	83 ec 0c             	sub    esp,0xc
c0017cdd:	68 bc 2f 02 c0       	push   0xc0022fbc
c0017ce2:	e8 67 f2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017cf1:	8d 50 19             	lea    edx,[eax+0x19]
c0017cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cf8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017cfb:	b0 01                	mov    al,0x1
c0017cfd:	eb 02                	jmp    c0017d01 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017cff:	b0 00                	mov    al,0x0
c0017d01:	83 c4 1c             	add    esp,0x1c
c0017d04:	c3                   	ret    

c0017d05 <HalDisplayDebugInfo(void*)>:
c0017d05:	83 ec 2c             	sub    esp,0x2c
c0017d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d10:	0f 20 c0             	mov    eax,cr0
c0017d13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d17:	0f 20 d0             	mov    eax,cr2
c0017d1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d1e:	0f 20 d8             	mov    eax,cr3
c0017d21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d25:	0f 20 e0             	mov    eax,cr4
c0017d28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d30:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017d33:	83 ec 08             	sub    esp,0x8
c0017d36:	50                   	push   eax
c0017d37:	68 dd 2d 02 c0       	push   0xc0022ddd
c0017d3c:	e8 0d f2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d41:	83 c4 10             	add    esp,0x10
c0017d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d48:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017d4b:	83 ec 08             	sub    esp,0x8
c0017d4e:	50                   	push   eax
c0017d4f:	68 ce 2d 02 c0       	push   0xc0022dce
c0017d54:	e8 f5 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d59:	83 c4 10             	add    esp,0x10
c0017d5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d60:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017d63:	83 ec 08             	sub    esp,0x8
c0017d66:	50                   	push   eax
c0017d67:	68 d9 2d 02 c0       	push   0xc0022dd9
c0017d6c:	e8 dd f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d71:	83 c4 10             	add    esp,0x10
c0017d74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d7b:	83 ec 08             	sub    esp,0x8
c0017d7e:	50                   	push   eax
c0017d7f:	68 e8 2d 02 c0       	push   0xc0022de8
c0017d84:	e8 c5 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017d89:	83 c4 10             	add    esp,0x10
c0017d8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d90:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017d93:	83 ec 08             	sub    esp,0x8
c0017d96:	50                   	push   eax
c0017d97:	68 f3 2d 02 c0       	push   0xc0022df3
c0017d9c:	e8 ad f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017da1:	83 c4 10             	add    esp,0x10
c0017da4:	83 ec 08             	sub    esp,0x8
c0017da7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017dab:	68 fe 2d 02 c0       	push   0xc0022dfe
c0017db0:	e8 99 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017db5:	83 c4 10             	add    esp,0x10
c0017db8:	83 ec 08             	sub    esp,0x8
c0017dbb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dbf:	68 09 2e 02 c0       	push   0xc0022e09
c0017dc4:	e8 85 f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017dc9:	83 c4 10             	add    esp,0x10
c0017dcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dd0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017dd3:	c1 e0 05             	shl    eax,0x5
c0017dd6:	8d 90 20 42 02 c0    	lea    edx,[eax-0x3ffdbde0]
c0017ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017de0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017de3:	83 ec 04             	sub    esp,0x4
c0017de6:	52                   	push   edx
c0017de7:	50                   	push   eax
c0017de8:	68 14 2e 02 c0       	push   0xc0022e14
c0017ded:	e8 5c f1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017dfa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	50                   	push   eax
c0017e04:	e8 30 92 ff ff       	call   c0011039 <setActiveTerminal(VgaText*)>
c0017e09:	83 c4 10             	add    esp,0x10
c0017e0c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e17:	83 ec 08             	sub    esp,0x8
c0017e1a:	68 23 2e 02 c0       	push   0xc0022e23
c0017e1f:	50                   	push   eax
c0017e20:	e8 51 95 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017e25:	83 c4 10             	add    esp,0x10
c0017e28:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e2d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017e37:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017e3a:	83 ec 08             	sub    esp,0x8
c0017e3d:	52                   	push   edx
c0017e3e:	50                   	push   eax
c0017e3f:	e8 ec 94 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e52:	83 ec 08             	sub    esp,0x8
c0017e55:	68 31 2e 02 c0       	push   0xc0022e31
c0017e5a:	50                   	push   eax
c0017e5b:	e8 16 95 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e6e:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017e73:	8b 12                	mov    edx,DWORD PTR [edx]
c0017e75:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017e78:	83 c2 0c             	add    edx,0xc
c0017e7b:	83 ec 08             	sub    esp,0x8
c0017e7e:	52                   	push   edx
c0017e7f:	50                   	push   eax
c0017e80:	e8 f1 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017e85:	83 c4 10             	add    esp,0x10
c0017e88:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e93:	83 ec 08             	sub    esp,0x8
c0017e96:	68 3a 2e 02 c0       	push   0xc0022e3a
c0017e9b:	50                   	push   eax
c0017e9c:	e8 d5 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ea9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017eb3:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017eb6:	83 ec 08             	sub    esp,0x8
c0017eb9:	52                   	push   edx
c0017eba:	50                   	push   eax
c0017ebb:	e8 70 94 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017ec0:	83 c4 10             	add    esp,0x10
c0017ec3:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ec8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ece:	83 ec 08             	sub    esp,0x8
c0017ed1:	68 42 2e 02 c0       	push   0xc0022e42
c0017ed6:	50                   	push   eax
c0017ed7:	e8 9a 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017edc:	83 c4 10             	add    esp,0x10
c0017edf:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ee4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017eea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017eee:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017ef1:	83 ec 08             	sub    esp,0x8
c0017ef4:	52                   	push   edx
c0017ef5:	50                   	push   eax
c0017ef6:	e8 35 94 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017efb:	83 c4 10             	add    esp,0x10
c0017efe:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f09:	83 ec 08             	sub    esp,0x8
c0017f0c:	68 4a 2e 02 c0       	push   0xc0022e4a
c0017f11:	50                   	push   eax
c0017f12:	e8 5f 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017f17:	83 c4 10             	add    esp,0x10
c0017f1a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f29:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017f2c:	83 ec 08             	sub    esp,0x8
c0017f2f:	52                   	push   edx
c0017f30:	50                   	push   eax
c0017f31:	e8 fa 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017f36:	83 c4 10             	add    esp,0x10
c0017f39:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f44:	83 ec 08             	sub    esp,0x8
c0017f47:	68 52 2e 02 c0       	push   0xc0022e52
c0017f4c:	50                   	push   eax
c0017f4d:	e8 24 94 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017f52:	83 c4 10             	add    esp,0x10
c0017f55:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f64:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017f67:	83 ec 08             	sub    esp,0x8
c0017f6a:	52                   	push   edx
c0017f6b:	50                   	push   eax
c0017f6c:	e8 bf 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017f71:	83 c4 10             	add    esp,0x10
c0017f74:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f7f:	83 ec 08             	sub    esp,0x8
c0017f82:	68 5a 2e 02 c0       	push   0xc0022e5a
c0017f87:	50                   	push   eax
c0017f88:	e8 e9 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017f8d:	83 c4 10             	add    esp,0x10
c0017f90:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f9f:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017fa2:	83 ec 08             	sub    esp,0x8
c0017fa5:	52                   	push   edx
c0017fa6:	50                   	push   eax
c0017fa7:	e8 84 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017fac:	83 c4 10             	add    esp,0x10
c0017faf:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fba:	83 ec 08             	sub    esp,0x8
c0017fbd:	68 62 2e 02 c0       	push   0xc0022e62
c0017fc2:	50                   	push   eax
c0017fc3:	e8 ae 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0017fc8:	83 c4 10             	add    esp,0x10
c0017fcb:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fd0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fda:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017fdd:	83 ec 08             	sub    esp,0x8
c0017fe0:	52                   	push   edx
c0017fe1:	50                   	push   eax
c0017fe2:	e8 49 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0017fe7:	83 c4 10             	add    esp,0x10
c0017fea:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ff5:	83 ec 08             	sub    esp,0x8
c0017ff8:	68 6a 2e 02 c0       	push   0xc0022e6a
c0017ffd:	50                   	push   eax
c0017ffe:	e8 73 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0018003:	83 c4 10             	add    esp,0x10
c0018006:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001800b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018011:	83 ec 08             	sub    esp,0x8
c0018014:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018018:	50                   	push   eax
c0018019:	e8 12 93 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c001801e:	83 c4 10             	add    esp,0x10
c0018021:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018026:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001802c:	83 ec 08             	sub    esp,0x8
c001802f:	68 73 2e 02 c0       	push   0xc0022e73
c0018034:	50                   	push   eax
c0018035:	e8 3c 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001803a:	83 c4 10             	add    esp,0x10
c001803d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018042:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018048:	83 ec 08             	sub    esp,0x8
c001804b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001804f:	50                   	push   eax
c0018050:	e8 db 92 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c0018055:	83 c4 10             	add    esp,0x10
c0018058:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001805d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018063:	83 ec 08             	sub    esp,0x8
c0018066:	68 7b 2e 02 c0       	push   0xc0022e7b
c001806b:	50                   	push   eax
c001806c:	e8 05 93 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0018071:	83 c4 10             	add    esp,0x10
c0018074:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018079:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001807f:	83 ec 08             	sub    esp,0x8
c0018082:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018086:	50                   	push   eax
c0018087:	e8 a4 92 ff ff       	call   c0011330 <VgaText::putx(unsigned int)>
c001808c:	83 c4 10             	add    esp,0x10
c001808f:	fa                   	cli    
c0018090:	f4                   	hlt    
c0018091:	eb fe                	jmp    c0018091 <HalDisplayDebugInfo(void*)+0x38c>

c0018093 <HalReceivedNMI()>:
c0018093:	83 ec 1c             	sub    esp,0x1c
c0018096:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c001809d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00180a1:	89 c2                	mov    edx,eax
c00180a3:	ec                   	in     al,dx
c00180a4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00180a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00180ac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180b0:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c00180b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180bb:	89 c2                	mov    edx,eax
c00180bd:	ec                   	in     al,dx
c00180be:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00180c2:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00180c6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00180ca:	83 ec 0c             	sub    esp,0xc
c00180cd:	68 83 2e 02 c0       	push   0xc0022e83
c00180d2:	e8 77 ee fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00180d7:	83 c4 10             	add    esp,0x10
c00180da:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00180df:	83 e0 10             	and    eax,0x10
c00180e2:	74 10                	je     c00180f4 <HalReceivedNMI()+0x61>
c00180e4:	83 ec 0c             	sub    esp,0xc
c00180e7:	68 94 2e 02 c0       	push   0xc0022e94
c00180ec:	e8 25 6b ff ff       	call   c000ec16 <KePanic(char const*)>
c00180f1:	83 c4 10             	add    esp,0x10
c00180f4:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00180f9:	83 e0 40             	and    eax,0x40
c00180fc:	74 10                	je     c001810e <HalReceivedNMI()+0x7b>
c00180fe:	83 ec 0c             	sub    esp,0xc
c0018101:	68 a1 2e 02 c0       	push   0xc0022ea1
c0018106:	e8 0b 6b ff ff       	call   c000ec16 <KePanic(char const*)>
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0018112:	0f be c0             	movsx  eax,al
c0018115:	85 c0                	test   eax,eax
c0018117:	79 10                	jns    c0018129 <HalReceivedNMI()+0x96>
c0018119:	83 ec 0c             	sub    esp,0xc
c001811c:	68 ab 2e 02 c0       	push   0xc0022eab
c0018121:	e8 f0 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c0018126:	83 c4 10             	add    esp,0x10
c0018129:	90                   	nop
c001812a:	83 c4 1c             	add    esp,0x1c
c001812d:	c3                   	ret    

c001812e <HalSystemIdle()>:
c001812e:	56                   	push   esi
c001812f:	53                   	push   ebx
c0018130:	83 ec 14             	sub    esp,0x14
c0018133:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0018138:	83 e0 10             	and    eax,0x10
c001813b:	0f b6 c0             	movzx  eax,al
c001813e:	85 c0                	test   eax,eax
c0018140:	74 43                	je     c0018185 <HalSystemIdle()+0x57>
c0018142:	83 ec 0c             	sub    esp,0xc
c0018145:	68 e1 00 00 00       	push   0xe1
c001814a:	e8 17 fa ff ff       	call   c0017b66 <x86rdmsr(unsigned int)>
c001814f:	83 c4 10             	add    esp,0x10
c0018152:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018156:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001815a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001815e:	83 e0 02             	and    eax,0x2
c0018161:	89 c3                	mov    ebx,eax
c0018163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018167:	83 e0 00             	and    eax,0x0
c001816a:	89 c6                	mov    esi,eax
c001816c:	83 ec 04             	sub    esp,0x4
c001816f:	56                   	push   esi
c0018170:	53                   	push   ebx
c0018171:	68 e1 00 00 00       	push   0xe1
c0018176:	e8 29 fa ff ff       	call   c0017ba4 <x86wrmsr(unsigned int, unsigned long long)>
c001817b:	83 c4 10             	add    esp,0x10
c001817e:	e8 11 80 fe ff       	call   c0000194 <doTPAUSE>
c0018183:	eb 01                	jmp    c0018186 <HalSystemIdle()+0x58>
c0018185:	f4                   	hlt    
c0018186:	90                   	nop
c0018187:	83 c4 14             	add    esp,0x14
c001818a:	5b                   	pop    ebx
c001818b:	5e                   	pop    esi
c001818c:	c3                   	ret    

c001818d <i386SaveCoprocessor(void*)>:
c001818d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018191:	83 c0 3f             	add    eax,0x3f
c0018194:	83 e0 c0             	and    eax,0xffffffc0
c0018197:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001819b:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c00181a1 <i386LoadCoprocessor(void*)>:
c00181a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181a5:	83 c0 3f             	add    eax,0x3f
c00181a8:	83 e0 c0             	and    eax,0xffffffc0
c00181ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00181af:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c00181b5 <x87EmulHandler(regs*, void*)>:
c00181b5:	53                   	push   ebx
c00181b6:	83 ec 08             	sub    esp,0x8
c00181b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181be:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00181c2:	74 10                	je     c00181d4 <x87EmulHandler(regs*, void*)+0x1f>
c00181c4:	83 ec 0c             	sub    esp,0xc
c00181c7:	68 b8 2e 02 c0       	push   0xc0022eb8
c00181cc:	e8 45 6a ff ff       	call   c000ec16 <KePanic(char const*)>
c00181d1:	83 c4 10             	add    esp,0x10
c00181d4:	0f 20 c0             	mov    eax,cr0
c00181d7:	a8 08                	test   al,0x8
c00181d9:	74 59                	je     c0018234 <x87EmulHandler(regs*, void*)+0x7f>
c00181db:	0f 06                	clts   
c00181dd:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c00181e2:	85 c0                	test   eax,eax
c00181e4:	74 0e                	je     c00181f4 <x87EmulHandler(regs*, void*)+0x3f>
c00181e6:	83 ec 0c             	sub    esp,0xc
c00181e9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00181ec:	e8 9c ff ff ff       	call   c001818d <i386SaveCoprocessor(void*)>
c00181f1:	83 c4 10             	add    esp,0x10
c00181f4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00181fa:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00181fe:	75 12                	jne    c0018212 <x87EmulHandler(regs*, void*)+0x5d>
c0018200:	83 ec 0c             	sub    esp,0xc
c0018203:	68 40 02 00 00       	push   0x240
c0018208:	e8 c3 66 ff ff       	call   c000e8d0 <malloc>
c001820d:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0018210:	eb 10                	jmp    c0018222 <x87EmulHandler(regs*, void*)+0x6d>
c0018212:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018217:	83 ec 0c             	sub    esp,0xc
c001821a:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001821d:	e8 7f ff ff ff       	call   c00181a1 <i386LoadCoprocessor(void*)>
c0018222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c001822f:	83 c4 08             	add    esp,0x8
c0018232:	5b                   	pop    ebx
c0018233:	c3                   	ret    
c0018234:	83 ec 0c             	sub    esp,0xc
c0018237:	68 cc 2e 02 c0       	push   0xc0022ecc
c001823c:	e8 0d ed fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c0018241:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018249:	83 c4 18             	add    esp,0x18
c001824c:	5b                   	pop    ebx
c001824d:	e9 0e da ff ff       	jmp    c0015c60 <Thr::terminateFromIRQ(int)>

c0018252 <HalInitialiseCoprocessor()>:
c0018252:	83 ec 10             	sub    esp,0x10
c0018255:	6a 00                	push   0x0
c0018257:	68 b5 81 01 c0       	push   0xc00181b5
c001825c:	6a 07                	push   0x7
c001825e:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c0018268:	e8 9e 06 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001826d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018272:	83 c4 10             	add    esp,0x10
c0018275:	a8 80                	test   al,0x80
c0018277:	74 1c                	je     c0018295 <HalInitialiseCoprocessor()+0x43>
c0018279:	c7 05 50 c7 02 c0 08 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f708
c0018283:	c7 05 4c c7 02 c0 10 f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f710
c001828d:	83 c4 0c             	add    esp,0xc
c0018290:	e9 83 74 00 00       	jmp    c001f718 <sseInit>
c0018295:	a8 10                	test   al,0x10
c0018297:	74 1c                	je     c00182b5 <HalInitialiseCoprocessor()+0x63>
c0018299:	c7 05 50 c7 02 c0 57 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f757
c00182a3:	c7 05 4c c7 02 c0 5e f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f75e
c00182ad:	83 c4 0c             	add    esp,0xc
c00182b0:	e9 b0 74 00 00       	jmp    c001f765 <x87Init>
c00182b5:	c7 05 50 c7 02 c0 46 6a 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016a46
c00182bf:	c7 05 4c c7 02 c0 46 6a 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016a46
c00182c9:	0f 20 c0             	mov    eax,cr0
c00182cc:	83 c8 04             	or     eax,0x4
c00182cf:	0f 22 c0             	mov    cr0,eax
c00182d2:	83 c4 0c             	add    esp,0xc
c00182d5:	c3                   	ret    

c00182d6 <HalPanic(char const*)>:
c00182d6:	53                   	push   ebx
c00182d7:	83 ec 10             	sub    esp,0x10
c00182da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00182de:	fa                   	cli    
c00182df:	53                   	push   ebx
c00182e0:	68 e2 2e 02 c0       	push   0xc0022ee2
c00182e5:	e8 64 ec fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00182ea:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c00182ef:	83 c4 10             	add    esp,0x10
c00182f2:	85 c0                	test   eax,eax
c00182f4:	74 09                	je     c00182ff <HalPanic(char const*)+0x29>
c00182f6:	83 ec 0c             	sub    esp,0xc
c00182f9:	53                   	push   ebx
c00182fa:	ff d0                	call   eax
c00182fc:	83 c4 10             	add    esp,0x10
c00182ff:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c0018304:	85 c0                	test   eax,eax
c0018306:	0f 84 dc 00 00 00    	je     c00183e8 <HalPanic(char const*)+0x112>
c001830c:	52                   	push   edx
c001830d:	6a 01                	push   0x1
c001830f:	6a 0f                	push   0xf
c0018311:	50                   	push   eax
c0018312:	e8 7d 8b ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018317:	59                   	pop    ecx
c0018318:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001831e:	e8 61 8d ff ff       	call   c0011084 <VgaText::clearScreen()>
c0018323:	58                   	pop    eax
c0018324:	5a                   	pop    edx
c0018325:	68 50 23 02 c0       	push   0xc0022350
c001832a:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018330:	e8 97 8b ff ff       	call   c0010ecc <VgaText::setTitle(char*)>
c0018335:	83 c4 0c             	add    esp,0xc
c0018338:	6a 01                	push   0x1
c001833a:	6a 0f                	push   0xf
c001833c:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018342:	e8 4d 8b ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018347:	59                   	pop    ecx
c0018348:	58                   	pop    eax
c0018349:	68 fb 2e 02 c0       	push   0xc0022efb
c001834e:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018354:	e8 1d 90 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c0018359:	83 c4 0c             	add    esp,0xc
c001835c:	6a 0f                	push   0xf
c001835e:	6a 01                	push   0x1
c0018360:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018366:	e8 29 8b ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001836b:	58                   	pop    eax
c001836c:	5a                   	pop    edx
c001836d:	68 04 2f 02 c0       	push   0xc0022f04
c0018372:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018378:	e8 f9 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001837d:	83 c4 0c             	add    esp,0xc
c0018380:	6a 01                	push   0x1
c0018382:	6a 0f                	push   0xf
c0018384:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001838a:	e8 05 8b ff ff       	call   c0010e94 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001838f:	59                   	pop    ecx
c0018390:	58                   	pop    eax
c0018391:	68 48 2f 02 c0       	push   0xc0022f48
c0018396:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001839c:	e8 d5 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183a1:	58                   	pop    eax
c00183a2:	5a                   	pop    edx
c00183a3:	68 11 2f 02 c0       	push   0xc0022f11
c00183a8:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183ae:	e8 c3 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183b3:	59                   	pop    ecx
c00183b4:	58                   	pop    eax
c00183b5:	68 4b 2f 02 c0       	push   0xc0022f4b
c00183ba:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183c0:	e8 b1 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183c5:	58                   	pop    eax
c00183c6:	5a                   	pop    edx
c00183c7:	53                   	push   ebx
c00183c8:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183ce:	e8 a3 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183d3:	59                   	pop    ecx
c00183d4:	5b                   	pop    ebx
c00183d5:	68 48 2f 02 c0       	push   0xc0022f48
c00183da:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183e0:	e8 91 8f ff ff       	call   c0011376 <VgaText::puts(char const*)>
c00183e5:	83 c4 10             	add    esp,0x10
c00183e8:	eb fe                	jmp    c00183e8 <HalPanic(char const*)+0x112>

c00183ea <HalQueryPerformanceCounter()>:
c00183ea:	31 c0                	xor    eax,eax
c00183ec:	31 d2                	xor    edx,edx
c00183ee:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c00183f5:	75 02                	jne    c00183f9 <HalQueryPerformanceCounter()+0xf>
c00183f7:	0f 31                	rdtsc  
c00183f9:	c3                   	ret    

c00183fa <HalInitialise()>:
c00183fa:	53                   	push   ebx
c00183fb:	83 ec 08             	sub    esp,0x8
c00183fe:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c0018405:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c001840a:	83 e0 fe             	and    eax,0xfffffffe
c001840d:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0018412:	e8 d9 07 00 00       	call   c0018bf0 <picOpen()>
c0018417:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c001841e:	74 0a                	je     c001842a <HalInitialise()+0x30>
c0018420:	e8 1b 07 00 00       	call   c0018b40 <picDisable()>
c0018425:	e8 b4 68 00 00       	call   c001ecde <apicOpen()>
c001842a:	50                   	push   eax
c001842b:	bb 0f 00 00 00       	mov    ebx,0xf
c0018430:	6a 00                	push   0x0
c0018432:	68 80 df 00 c0       	push   0xc000df80
c0018437:	6a 00                	push   0x0
c0018439:	e8 cd 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001843e:	83 c4 0c             	add    esp,0xc
c0018441:	6a 00                	push   0x0
c0018443:	68 80 df 00 c0       	push   0xc000df80
c0018448:	6a 01                	push   0x1
c001844a:	e8 bc 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001844f:	83 c4 0c             	add    esp,0xc
c0018452:	6a 00                	push   0x0
c0018454:	68 70 df 00 c0       	push   0xc000df70
c0018459:	6a 02                	push   0x2
c001845b:	e8 ab 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018460:	83 c4 0c             	add    esp,0xc
c0018463:	6a 00                	push   0x0
c0018465:	68 80 df 00 c0       	push   0xc000df80
c001846a:	6a 03                	push   0x3
c001846c:	e8 9a 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018471:	83 c4 0c             	add    esp,0xc
c0018474:	6a 00                	push   0x0
c0018476:	68 80 df 00 c0       	push   0xc000df80
c001847b:	6a 04                	push   0x4
c001847d:	e8 89 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018482:	83 c4 0c             	add    esp,0xc
c0018485:	6a 00                	push   0x0
c0018487:	68 80 df 00 c0       	push   0xc000df80
c001848c:	6a 05                	push   0x5
c001848e:	e8 78 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018493:	83 c4 0c             	add    esp,0xc
c0018496:	6a 00                	push   0x0
c0018498:	68 b4 df 00 c0       	push   0xc000dfb4
c001849d:	6a 06                	push   0x6
c001849f:	e8 67 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184a4:	83 c4 0c             	add    esp,0xc
c00184a7:	6a 00                	push   0x0
c00184a9:	68 08 e0 00 c0       	push   0xc000e008
c00184ae:	6a 08                	push   0x8
c00184b0:	e8 56 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184b5:	83 c4 0c             	add    esp,0xc
c00184b8:	6a 00                	push   0x0
c00184ba:	68 80 df 00 c0       	push   0xc000df80
c00184bf:	6a 09                	push   0x9
c00184c1:	e8 45 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184c6:	83 c4 0c             	add    esp,0xc
c00184c9:	6a 00                	push   0x0
c00184cb:	68 80 df 00 c0       	push   0xc000df80
c00184d0:	6a 0a                	push   0xa
c00184d2:	e8 34 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184d7:	83 c4 0c             	add    esp,0xc
c00184da:	6a 00                	push   0x0
c00184dc:	68 80 df 00 c0       	push   0xc000df80
c00184e1:	6a 0b                	push   0xb
c00184e3:	e8 23 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184e8:	83 c4 0c             	add    esp,0xc
c00184eb:	6a 00                	push   0x0
c00184ed:	68 c8 de 00 c0       	push   0xc000dec8
c00184f2:	6a 0d                	push   0xd
c00184f4:	e8 12 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184f9:	83 c4 0c             	add    esp,0xc
c00184fc:	6a 00                	push   0x0
c00184fe:	68 1c df 00 c0       	push   0xc000df1c
c0018503:	6a 0e                	push   0xe
c0018505:	e8 01 04 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001850a:	83 c4 10             	add    esp,0x10
c001850d:	50                   	push   eax
c001850e:	6a 00                	push   0x0
c0018510:	68 80 df 00 c0       	push   0xc000df80
c0018515:	53                   	push   ebx
c0018516:	43                   	inc    ebx
c0018517:	e8 ef 03 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001851c:	83 c4 10             	add    esp,0x10
c001851f:	83 fb 1e             	cmp    ebx,0x1e
c0018522:	75 e9                	jne    c001850d <HalInitialise()+0x113>
c0018524:	50                   	push   eax
c0018525:	6a 00                	push   0x0
c0018527:	68 20 0d 01 c0       	push   0xc0010d20
c001852c:	6a 60                	push   0x60
c001852e:	e8 d8 03 00 00       	call   c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018533:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0018538:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0018542:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0018549:	e8 82 63 ff ff       	call   c000e8d0 <malloc>
c001854e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018551:	89 c3                	mov    ebx,eax
c0018553:	e8 00 0e 00 00       	call   c0019358 <RTC::RTC()>
c0018558:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0018562:	5a                   	pop    edx
c0018563:	59                   	pop    ecx
c0018564:	53                   	push   ebx
c0018565:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c001856b:	e8 d6 0a ff ff       	call   c0009046 <Device::addChild(Device*)>
c0018570:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018572:	6a 00                	push   0x0
c0018574:	6a 00                	push   0x0
c0018576:	6a 00                	push   0x0
c0018578:	53                   	push   ebx
c0018579:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001857c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0018581:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018587:	83 c4 28             	add    esp,0x28
c001858a:	5b                   	pop    ebx
c001858b:	c3                   	ret    

c001858c <HalMakeBeep(int)>:
c001858c:	53                   	push   ebx
c001858d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018591:	85 db                	test   ebx,ebx
c0018593:	75 07                	jne    c001859c <HalMakeBeep(int)+0x10>
c0018595:	e4 61                	in     al,0x61
c0018597:	83 e0 fc             	and    eax,0xfffffffc
c001859a:	eb 26                	jmp    c00185c2 <HalMakeBeep(int)+0x36>
c001859c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00185a1:	99                   	cdq    
c00185a2:	f7 fb                	idiv   ebx
c00185a4:	89 c1                	mov    ecx,eax
c00185a6:	b0 b6                	mov    al,0xb6
c00185a8:	e6 43                	out    0x43,al
c00185aa:	88 c8                	mov    al,cl
c00185ac:	e6 42                	out    0x42,al
c00185ae:	89 c8                	mov    eax,ecx
c00185b0:	c1 e8 08             	shr    eax,0x8
c00185b3:	e6 42                	out    0x42,al
c00185b5:	e4 61                	in     al,0x61
c00185b7:	89 c2                	mov    edx,eax
c00185b9:	83 ca 03             	or     edx,0x3
c00185bc:	38 d0                	cmp    al,dl
c00185be:	74 04                	je     c00185c4 <HalMakeBeep(int)+0x38>
c00185c0:	88 d0                	mov    al,dl
c00185c2:	e6 61                	out    0x61,al
c00185c4:	5b                   	pop    ebx
c00185c5:	c3                   	ret    

c00185c6 <HalGetRand()>:
c00185c6:	31 c0                	xor    eax,eax
c00185c8:	c3                   	ret    

c00185c9 <HalEndOfInterrupt(int)>:
c00185c9:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c00185d0:	74 1d                	je     c00185ef <HalEndOfInterrupt(int)+0x26>
c00185d2:	83 ec 18             	sub    esp,0x18
c00185d5:	6a 1b                	push   0x1b
c00185d7:	e8 8a f5 ff ff       	call   c0017b66 <x86rdmsr(unsigned int)>
c00185dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185e1:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00185eb:	83 c4 1c             	add    esp,0x1c
c00185ee:	c3                   	ret    
c00185ef:	e9 80 07 00 00       	jmp    c0018d74 <picEOI(int)>

c00185f4 <HalRestart()>:
c00185f4:	c3                   	ret    

c00185f5 <HalShutdown()>:
c00185f5:	c3                   	ret    

c00185f6 <HalSleep()>:
c00185f6:	c3                   	ret    
c00185f7:	90                   	nop

c00185f8 <CPU::CPU()>:
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185ff:	83 ec 08             	sub    esp,0x8
c0018602:	68 0d 2d 02 c0       	push   0xc0022d0d
c0018607:	50                   	push   eax
c0018608:	e8 9b 0b ff ff       	call   c00091a8 <Device::Device(char const*)>
c001860d:	83 c4 10             	add    esp,0x10
c0018610:	ba e8 2f 02 c0       	mov    edx,0xc0022fe8
c0018615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018619:	89 10                	mov    DWORD PTR [eax],edx
c001861b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001861f:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0018629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001862d:	05 64 01 00 00       	add    eax,0x164
c0018632:	83 ec 0c             	sub    esp,0xc
c0018635:	50                   	push   eax
c0018636:	e8 21 5a ff ff       	call   c000e05c <GDT::GDT()>
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018642:	05 68 09 00 00       	add    eax,0x968
c0018647:	83 ec 0c             	sub    esp,0xc
c001864a:	50                   	push   eax
c001864b:	e8 60 5c ff ff       	call   c000e2b0 <IDT::IDT()>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018657:	05 68 11 00 00       	add    eax,0x1168
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	50                   	push   eax
c0018660:	e8 93 91 ff ff       	call   c00117f8 <TSS::TSS()>
c0018665:	83 c4 10             	add    esp,0x10
c0018668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001866c:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0018676:	90                   	nop
c0018677:	83 c4 0c             	add    esp,0xc
c001867a:	c3                   	ret    
c001867b:	90                   	nop

c001867c <CPU::setupSMEP()>:
c001867c:	0f 20 e0             	mov    eax,cr4
c001867f:	0d 00 00 10 00       	or     eax,0x100000
c0018684:	0f 22 e0             	mov    cr4,eax
c0018687:	c3                   	ret    

c0018688 <CPU::setupUMIP()>:
c0018688:	0f 20 e0             	mov    eax,cr4
c001868b:	80 cc 08             	or     ah,0x8
c001868e:	0f 22 e0             	mov    cr4,eax
c0018691:	c3                   	ret    

c0018692 <CPU::setupTSC()>:
c0018692:	0f 20 e0             	mov    eax,cr4
c0018695:	83 c8 04             	or     eax,0x4
c0018698:	0f 22 e0             	mov    cr4,eax
c001869b:	c3                   	ret    

c001869c <CPU::setupLargePages()>:
c001869c:	0f 20 e0             	mov    eax,cr4
c001869f:	83 c8 10             	or     eax,0x10
c00186a2:	0f 22 e0             	mov    cr4,eax
c00186a5:	c3                   	ret    

c00186a6 <CPU::setupPAT()>:
c00186a6:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c00186ad:	74 28                	je     c00186d7 <CPU::setupPAT()+0x31>
c00186af:	53                   	push   ebx
c00186b0:	83 ec 14             	sub    esp,0x14
c00186b3:	68 77 02 00 00       	push   0x277
c00186b8:	e8 a9 f4 ff ff       	call   c0017b66 <x86rdmsr(unsigned int)>
c00186bd:	83 c4 0c             	add    esp,0xc
c00186c0:	83 e2 f8             	and    edx,0xfffffff8
c00186c3:	83 ca 01             	or     edx,0x1
c00186c6:	52                   	push   edx
c00186c7:	50                   	push   eax
c00186c8:	68 77 02 00 00       	push   0x277
c00186cd:	e8 d2 f4 ff ff       	call   c0017ba4 <x86wrmsr(unsigned int, unsigned long long)>
c00186d2:	83 c4 18             	add    esp,0x18
c00186d5:	5b                   	pop    ebx
c00186d6:	c3                   	ret    
c00186d7:	c3                   	ret    

c00186d8 <CPU::setupMTRR()>:
c00186d8:	c3                   	ret    
c00186d9:	90                   	nop

c00186da <CPU::setupGlobalPages()>:
c00186da:	0f 20 e0             	mov    eax,cr4
c00186dd:	0c 80                	or     al,0x80
c00186df:	0f 22 e0             	mov    cr4,eax
c00186e2:	c3                   	ret    
c00186e3:	90                   	nop

c00186e4 <CPU::allowUsermodeDataAccess()>:
c00186e4:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00186eb:	74 03                	je     c00186f0 <CPU::allowUsermodeDataAccess()+0xc>
c00186ed:	0f 01 cb             	stac   
c00186f0:	c3                   	ret    
c00186f1:	90                   	nop

c00186f2 <CPU::prohibitUsermodeDataAccess()>:
c00186f2:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c00186f9:	74 03                	je     c00186fe <CPU::prohibitUsermodeDataAccess()+0xc>
c00186fb:	0f 01 ca             	clac   
c00186fe:	c3                   	ret    
c00186ff:	90                   	nop

c0018700 <CPU::setupSMAP()>:
c0018700:	0f 20 e0             	mov    eax,cr4
c0018703:	0d 00 00 20 00       	or     eax,0x200000
c0018708:	0f 22 e0             	mov    cr4,eax
c001870b:	eb e5                	jmp    c00186f2 <CPU::prohibitUsermodeDataAccess()>
c001870d:	90                   	nop

c001870e <CPU::setupFeatures()>:
c001870e:	53                   	push   ebx
c001870f:	83 ec 08             	sub    esp,0x8
c0018712:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c0018719:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001871d:	74 18                	je     c0018737 <CPU::setupFeatures()+0x29>
c001871f:	83 ec 0c             	sub    esp,0xc
c0018722:	68 56 2f 02 c0       	push   0xc0022f56
c0018727:	e8 22 e8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001872c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001872f:	e8 54 ff ff ff       	call   c0018688 <CPU::setupUMIP()>
c0018734:	83 c4 10             	add    esp,0x10
c0018737:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c001873e:	74 18                	je     c0018758 <CPU::setupFeatures()+0x4a>
c0018740:	83 ec 0c             	sub    esp,0xc
c0018743:	68 60 2f 02 c0       	push   0xc0022f60
c0018748:	e8 01 e8 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001874d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018750:	e8 3d ff ff ff       	call   c0018692 <CPU::setupTSC()>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c001875f:	74 18                	je     c0018779 <CPU::setupFeatures()+0x6b>
c0018761:	83 ec 0c             	sub    esp,0xc
c0018764:	68 69 2f 02 c0       	push   0xc0022f69
c0018769:	e8 e0 e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001876e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018771:	e8 26 ff ff ff       	call   c001869c <CPU::setupLargePages()>
c0018776:	83 c4 10             	add    esp,0x10
c0018779:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c0018780:	74 18                	je     c001879a <CPU::setupFeatures()+0x8c>
c0018782:	83 ec 0c             	sub    esp,0xc
c0018785:	68 72 2f 02 c0       	push   0xc0022f72
c001878a:	e8 bf e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001878f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018792:	e8 43 ff ff ff       	call   c00186da <CPU::setupGlobalPages()>
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c00187a1:	74 18                	je     c00187bb <CPU::setupFeatures()+0xad>
c00187a3:	83 ec 0c             	sub    esp,0xc
c00187a6:	68 84 2f 02 c0       	push   0xc0022f84
c00187ab:	e8 9e e7 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00187b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187b3:	e8 ee fe ff ff       	call   c00186a6 <CPU::setupPAT()>
c00187b8:	83 c4 10             	add    esp,0x10
c00187bb:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c00187c2:	74 11                	je     c00187d5 <CPU::setupFeatures()+0xc7>
c00187c4:	c7 44 24 10 8d 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022f8d
c00187cc:	83 c4 08             	add    esp,0x8
c00187cf:	5b                   	pop    ebx
c00187d0:	e9 79 e7 fe ff       	jmp    c0006f4e <Dbg::kprintf(char const*, ...)>
c00187d5:	83 c4 08             	add    esp,0x8
c00187d8:	5b                   	pop    ebx
c00187d9:	c3                   	ret    

c00187da <CPU::open(int, int, void*)>:
c00187da:	55                   	push   ebp
c00187db:	57                   	push   edi
c00187dc:	56                   	push   esi
c00187dd:	53                   	push   ebx
c00187de:	83 ec 18             	sub    esp,0x18
c00187e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00187e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00187e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00187ed:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c00187f3:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c00187f9:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c00187ff:	50                   	push   eax
c0018800:	e8 b9 58 ff ff       	call   c000e0be <GDT::setup()>
c0018805:	83 c4 0c             	add    esp,0xc
c0018808:	6a 00                	push   0x0
c001880a:	68 ef be ad de       	push   0xdeadbeef
c001880f:	55                   	push   ebp
c0018810:	e8 27 90 ff ff       	call   c001183c <TSS::setup(unsigned long, unsigned long)>
c0018815:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018818:	e8 ff 8f ff ff       	call   c001181c <TSS::flush()>
c001881d:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c0018823:	89 04 24             	mov    DWORD PTR [esp],eax
c0018826:	e8 fb 5a ff ff       	call   c000e326 <IDT::setup()>
c001882b:	b8 00 04 00 00       	mov    eax,0x400
c0018830:	0f 23 f8             	mov    dr7,eax
c0018833:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001883d:	e8 ce 65 ff ff       	call   c000ee10 <Phys::allocatePage()>
c0018842:	83 c4 10             	add    esp,0x10
c0018845:	85 f6                	test   esi,esi
c0018847:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001884d:	89 38                	mov    DWORD PTR [eax],edi
c001884f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018855:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018858:	74 10                	je     c001886a <CPU::open(int, int, void*)+0x90>
c001885a:	50                   	push   eax
c001885b:	50                   	push   eax
c001885c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0018862:	56                   	push   esi
c0018863:	e8 72 99 ff ff       	call   c00121da <VAS::setCPUSpecific(unsigned long)>
c0018868:	eb 0d                	jmp    c0018877 <CPU::open(int, int, void*)+0x9d>
c001886a:	83 ec 0c             	sub    esp,0xc
c001886d:	68 97 2f 02 c0       	push   0xc0022f97
c0018872:	e8 9f 63 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018877:	83 c4 10             	add    esp,0x10
c001887a:	83 ec 0c             	sub    esp,0xc
c001887d:	68 a5 2f 02 c0       	push   0xc0022fa5
c0018882:	e8 14 3d ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c0018887:	e8 6e fb ff ff       	call   c00183fa <HalInitialise()>
c001888c:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0018891:	83 e0 10             	and    eax,0x10
c0018894:	83 f8 01             	cmp    eax,0x1
c0018897:	19 c0                	sbb    eax,eax
c0018899:	83 e0 46             	and    eax,0x46
c001889c:	83 c0 1e             	add    eax,0x1e
c001889f:	89 04 24             	mov    DWORD PTR [esp],eax
c00188a2:	e8 6e 1e ff ff       	call   c000a715 <setupTimer(int)>
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c00188b1:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c00188b7:	74 0c                	je     c00188c5 <CPU::open(int, int, void*)+0xeb>
c00188b9:	83 ec 0c             	sub    esp,0xc
c00188bc:	53                   	push   ebx
c00188bd:	e8 4c fe ff ff       	call   c001870e <CPU::setupFeatures()>
c00188c2:	83 c4 10             	add    esp,0x10
c00188c5:	83 c4 0c             	add    esp,0xc
c00188c8:	31 c0                	xor    eax,eax
c00188ca:	5b                   	pop    ebx
c00188cb:	5e                   	pop    esi
c00188cc:	5f                   	pop    edi
c00188cd:	5d                   	pop    ebp
c00188ce:	c3                   	ret    

c00188cf <convertLegacyIRQNumber(int)>:
c00188cf:	83 ec 0c             	sub    esp,0xc
c00188d2:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c00188d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188dd:	74 0c                	je     c00188eb <convertLegacyIRQNumber(int)+0x1c>
c00188df:	83 f8 0f             	cmp    eax,0xf
c00188e2:	7f 0b                	jg     c00188ef <convertLegacyIRQNumber(int)+0x20>
c00188e4:	0f b6 80 a8 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc558]
c00188eb:	83 c4 0c             	add    esp,0xc
c00188ee:	c3                   	ret    
c00188ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00188f3:	83 ec 0c             	sub    esp,0xc
c00188f6:	68 0c 30 02 c0       	push   0xc002300c
c00188fb:	e8 16 63 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018900:	83 c4 10             	add    esp,0x10
c0018903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018907:	83 c4 0c             	add    esp,0xc
c001890a:	c3                   	ret    

c001890b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001890b:	56                   	push   esi
c001890c:	31 c0                	xor    eax,eax
c001890e:	53                   	push   ebx
c001890f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018913:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018917:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001891b:	89 ca                	mov    edx,ecx
c001891d:	c1 e2 04             	shl    edx,0x4
c0018920:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c0018928:	74 17                	je     c0018941 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001892a:	83 c0 01             	add    eax,0x1
c001892d:	83 f8 04             	cmp    eax,0x4
c0018930:	75 ee                	jne    c0018920 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c0018932:	c7 44 24 0c 6d 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc002306d
c001893a:	5b                   	pop    ebx
c001893b:	5e                   	pop    esi
c001893c:	e9 d5 62 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c0018941:	8d 04 88             	lea    eax,[eax+ecx*4]
c0018944:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c001894b:	5b                   	pop    ebx
c001894c:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c0018953:	5e                   	pop    esi
c0018954:	c3                   	ret    

c0018955 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0018955:	55                   	push   ebp
c0018956:	57                   	push   edi
c0018957:	56                   	push   esi
c0018958:	53                   	push   ebx
c0018959:	83 ec 0c             	sub    esp,0xc
c001895c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0018960:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018967:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001896b:	8d 6e 20             	lea    ebp,[esi+0x20]
c001896e:	74 57                	je     c00189c7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018970:	84 c0                	test   al,al
c0018972:	89 c7                	mov    edi,eax
c0018974:	74 1d                	je     c0018993 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018976:	83 fe 0f             	cmp    esi,0xf
c0018979:	0f 8f d9 00 00 00    	jg     c0018a58 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x103>
c001897f:	0f b6 b6 a8 3a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc558]
c0018986:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c001898e:	d1 ef                	shr    edi,1
c0018990:	83 e7 01             	and    edi,0x1
c0018993:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018998:	83 ec 08             	sub    esp,0x8
c001899b:	31 db                	xor    ebx,ebx
c001899d:	50                   	push   eax
c001899e:	68 7a 30 02 c0       	push   0xc002307a
c00189a3:	e8 a6 e5 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c00189a8:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	85 c0                	test   eax,eax
c00189b2:	7f 59                	jg     c0018a0d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb8>
c00189b4:	8d 6e 20             	lea    ebp,[esi+0x20]
c00189b7:	83 ec 0c             	sub    esp,0xc
c00189ba:	68 91 30 02 c0       	push   0xc0023091
c00189bf:	e8 52 62 ff ff       	call   c000ec16 <KePanic(char const*)>
c00189c4:	83 c4 10             	add    esp,0x10
c00189c7:	89 e8                	mov    eax,ebp
c00189c9:	31 d2                	xor    edx,edx
c00189cb:	c1 e0 04             	shl    eax,0x4
c00189ce:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c00189d5:	85 c9                	test   ecx,ecx
c00189d7:	0f 84 92 00 00 00    	je     c0018a6f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x11a>
c00189dd:	83 c2 01             	add    edx,0x1
c00189e0:	83 fa 04             	cmp    edx,0x4
c00189e3:	75 e9                	jne    c00189ce <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c00189e5:	83 ec 0c             	sub    esp,0xc
c00189e8:	68 48 30 02 c0       	push   0xc0023048
c00189ed:	e8 24 62 ff ff       	call   c000ec16 <KePanic(char const*)>
c00189f2:	83 c4 10             	add    esp,0x10
c00189f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00189fa:	83 c4 0c             	add    esp,0xc
c00189fd:	5b                   	pop    ebx
c00189fe:	5e                   	pop    esi
c00189ff:	5f                   	pop    edi
c0018a00:	5d                   	pop    ebp
c0018a01:	c3                   	ret    
c0018a02:	83 c3 01             	add    ebx,0x1
c0018a05:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c0018a0b:	7e a7                	jle    c00189b4 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c0018a0d:	8b 2c 9d 00 d1 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd2f00]
c0018a14:	83 ec 08             	sub    esp,0x8
c0018a17:	56                   	push   esi
c0018a18:	55                   	push   ebp
c0018a19:	e8 4c 64 00 00       	call   c001ee6a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018a1e:	83 c4 10             	add    esp,0x10
c0018a21:	84 c0                	test   al,al
c0018a23:	74 dd                	je     c0018a02 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018a25:	89 f8                	mov    eax,edi
c0018a27:	83 ec 04             	sub    esp,0x4
c0018a2a:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018a31:	8d 6e 20             	lea    ebp,[esi+0x20]
c0018a34:	0f b6 f8             	movzx  edi,al
c0018a37:	57                   	push   edi
c0018a38:	89 e8                	mov    eax,ebp
c0018a3a:	6a 00                	push   0x0
c0018a3c:	0f b6 c0             	movzx  eax,al
c0018a3f:	50                   	push   eax
c0018a40:	89 f0                	mov    eax,esi
c0018a42:	6a 00                	push   0x0
c0018a44:	0f b6 c0             	movzx  eax,al
c0018a47:	6a 00                	push   0x0
c0018a49:	50                   	push   eax
c0018a4a:	53                   	push   ebx
c0018a4b:	e8 86 65 00 00       	call   c001efd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018a50:	83 c4 20             	add    esp,0x20
c0018a53:	e9 6f ff ff ff       	jmp    c00189c7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018a58:	83 ec 0c             	sub    esp,0xc
c0018a5b:	31 ff                	xor    edi,edi
c0018a5d:	68 0c 30 02 c0       	push   0xc002300c
c0018a62:	e8 af 61 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018a67:	83 c4 10             	add    esp,0x10
c0018a6a:	e9 24 ff ff ff       	jmp    c0018993 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c0018a6f:	8d 04 aa             	lea    eax,[edx+ebp*4]
c0018a72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018a76:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018a7d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018a81:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018a88:	83 c4 0c             	add    esp,0xc
c0018a8b:	89 f0                	mov    eax,esi
c0018a8d:	5b                   	pop    ebx
c0018a8e:	5e                   	pop    esi
c0018a8f:	5f                   	pop    edi
c0018a90:	5d                   	pop    ebp
c0018a91:	c3                   	ret    

c0018a92 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018a92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018a9a:	c1 e0 04             	shl    eax,0x4
c0018a9d:	8d 50 10             	lea    edx,[eax+0x10]
c0018aa0:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018aa6:	74 08                	je     c0018ab0 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018aa8:	83 c0 04             	add    eax,0x4
c0018aab:	39 d0                	cmp    eax,edx
c0018aad:	75 f1                	jne    c0018aa0 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018aaf:	c3                   	ret    
c0018ab0:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018aba:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018ac4:	eb e2                	jmp    c0018aa8 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018ac6 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018ac6:	56                   	push   esi
c0018ac7:	53                   	push   ebx
c0018ac8:	83 ec 04             	sub    esp,0x4
c0018acb:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018ad0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018ad4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018ad8:	74 09                	je     c0018ae3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018ada:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018ae1:	75 34                	jne    c0018b17 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x51>
c0018ae3:	8d 43 20             	lea    eax,[ebx+0x20]
c0018ae6:	c1 e0 04             	shl    eax,0x4
c0018ae9:	8d 50 10             	lea    edx,[eax+0x10]
c0018aec:	39 b0 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],esi
c0018af2:	74 0d                	je     c0018b01 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0018af4:	83 c0 04             	add    eax,0x4
c0018af7:	39 d0                	cmp    eax,edx
c0018af9:	75 f1                	jne    c0018aec <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x26>
c0018afb:	83 c4 04             	add    esp,0x4
c0018afe:	5b                   	pop    ebx
c0018aff:	5e                   	pop    esi
c0018b00:	c3                   	ret    
c0018b01:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018b0b:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018b15:	eb dd                	jmp    c0018af4 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2e>
c0018b17:	83 fb 0f             	cmp    ebx,0xf
c0018b1a:	7f 09                	jg     c0018b25 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x5f>
c0018b1c:	0f b6 9b a8 3a 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc558]
c0018b23:	eb be                	jmp    c0018ae3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b25:	83 ec 0c             	sub    esp,0xc
c0018b28:	68 9e 30 02 c0       	push   0xc002309e
c0018b2d:	e8 e4 60 ff ff       	call   c000ec16 <KePanic(char const*)>
c0018b32:	83 c4 10             	add    esp,0x10
c0018b35:	eb ac                	jmp    c0018ae3 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0018b37:	90                   	nop

c0018b38 <picIoWait()>:
c0018b38:	eb 00                	jmp    c0018b3a <picIoWait()+0x2>
c0018b3a:	eb 00                	jmp    c0018b3c <picIoWait()+0x4>
c0018b3c:	90                   	nop
c0018b3d:	c3                   	ret    
c0018b3e:	66 90                	xchg   ax,ax

c0018b40 <picDisable()>:
c0018b40:	83 ec 10             	sub    esp,0x10
c0018b43:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018b4a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018b4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018b58:	ee                   	out    dx,al
c0018b59:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018b60:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018b65:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b69:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018b6e:	ee                   	out    dx,al
c0018b6f:	90                   	nop
c0018b70:	83 c4 10             	add    esp,0x10
c0018b73:	c3                   	ret    

c0018b74 <picGetIRQReg(int)>:
c0018b74:	83 ec 10             	sub    esp,0x10
c0018b77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b7b:	0f b6 c0             	movzx  eax,al
c0018b7e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018b85:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018b89:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018b8d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018b92:	ee                   	out    dx,al
c0018b93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b97:	0f b6 c0             	movzx  eax,al
c0018b9a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018ba1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018ba5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018ba9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018bae:	ee                   	out    dx,al
c0018baf:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018bb6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018bbb:	89 c2                	mov    edx,eax
c0018bbd:	ec                   	in     al,dx
c0018bbe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018bc2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bc6:	0f b6 c0             	movzx  eax,al
c0018bc9:	c1 e0 08             	shl    eax,0x8
c0018bcc:	89 c1                	mov    ecx,eax
c0018bce:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018bd5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018bda:	89 c2                	mov    edx,eax
c0018bdc:	ec                   	in     al,dx
c0018bdd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018be1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018be5:	0f b6 c0             	movzx  eax,al
c0018be8:	09 c8                	or     eax,ecx
c0018bea:	83 c4 10             	add    esp,0x10
c0018bed:	c3                   	ret    
c0018bee:	66 90                	xchg   ax,ax

c0018bf0 <picOpen()>:
c0018bf0:	83 ec 50             	sub    esp,0x50
c0018bf3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018bfa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018bff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c07:	ee                   	out    dx,al
c0018c08:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018c0f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c14:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018c18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c1c:	ee                   	out    dx,al
c0018c1d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018c25:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018c2d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018c34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c38:	89 c2                	mov    edx,eax
c0018c3a:	ec                   	in     al,dx
c0018c3b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018c3f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018c43:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018c47:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018c4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c52:	89 c2                	mov    edx,eax
c0018c54:	ec                   	in     al,dx
c0018c55:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018c59:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018c5d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018c61:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018c68:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018c6d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018c71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018c75:	ee                   	out    dx,al
c0018c76:	e8 bd fe ff ff       	call   c0018b38 <picIoWait()>
c0018c7b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018c82:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018c87:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018c8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018c8f:	ee                   	out    dx,al
c0018c90:	e8 a3 fe ff ff       	call   c0018b38 <picIoWait()>
c0018c95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018c99:	0f b6 c0             	movzx  eax,al
c0018c9c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018ca3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018ca7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018cab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018caf:	ee                   	out    dx,al
c0018cb0:	e8 83 fe ff ff       	call   c0018b38 <picIoWait()>
c0018cb5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018cb9:	0f b6 c0             	movzx  eax,al
c0018cbc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018cc3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018cc7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018ccb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018ccf:	ee                   	out    dx,al
c0018cd0:	e8 63 fe ff ff       	call   c0018b38 <picIoWait()>
c0018cd5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018cdc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018ce1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018ce5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018ce9:	ee                   	out    dx,al
c0018cea:	e8 49 fe ff ff       	call   c0018b38 <picIoWait()>
c0018cef:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018cf6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018cfb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018cff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018d03:	ee                   	out    dx,al
c0018d04:	e8 2f fe ff ff       	call   c0018b38 <picIoWait()>
c0018d09:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018d10:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018d15:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018d19:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d1d:	ee                   	out    dx,al
c0018d1e:	e8 15 fe ff ff       	call   c0018b38 <picIoWait()>
c0018d23:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018d2a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018d2f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018d33:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d37:	ee                   	out    dx,al
c0018d38:	e8 fb fd ff ff       	call   c0018b38 <picIoWait()>
c0018d3d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018d42:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018d49:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018d4d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018d51:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018d55:	ee                   	out    dx,al
c0018d56:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018d5b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018d62:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018d66:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018d6a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018d6e:	ee                   	out    dx,al
c0018d6f:	90                   	nop
c0018d70:	83 c4 50             	add    esp,0x50
c0018d73:	c3                   	ret    

c0018d74 <picEOI(int)>:
c0018d74:	83 ec 10             	sub    esp,0x10
c0018d77:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018d7c:	75 1e                	jne    c0018d9c <picEOI(int)+0x28>
c0018d7e:	6a 0b                	push   0xb
c0018d80:	e8 ef fd ff ff       	call   c0018b74 <picGetIRQReg(int)>
c0018d85:	83 c4 04             	add    esp,0x4
c0018d88:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018d8d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018d92:	25 80 00 00 00       	and    eax,0x80
c0018d97:	74 73                	je     c0018e0c <picEOI(int)+0x98>
c0018d99:	8d 76 00             	lea    esi,[esi+0x0]
c0018d9c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018da1:	75 31                	jne    c0018dd4 <picEOI(int)+0x60>
c0018da3:	6a 0b                	push   0xb
c0018da5:	e8 ca fd ff ff       	call   c0018b74 <picGetIRQReg(int)>
c0018daa:	83 c4 04             	add    esp,0x4
c0018dad:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018db6:	98                   	cwde   
c0018db7:	85 c0                	test   eax,eax
c0018db9:	78 19                	js     c0018dd4 <picEOI(int)+0x60>
c0018dbb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018dc2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018dc7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018dcb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018dd0:	ee                   	out    dx,al
c0018dd1:	eb 3d                	jmp    c0018e10 <picEOI(int)+0x9c>
c0018dd3:	90                   	nop
c0018dd4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018dd9:	7e 19                	jle    c0018df4 <picEOI(int)+0x80>
c0018ddb:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018de2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018de7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018deb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018df0:	ee                   	out    dx,al
c0018df1:	8d 76 00             	lea    esi,[esi+0x0]
c0018df4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018dfb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018e00:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018e04:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018e09:	ee                   	out    dx,al
c0018e0a:	eb 04                	jmp    c0018e10 <picEOI(int)+0x9c>
c0018e0c:	90                   	nop
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e10:	83 c4 10             	add    esp,0x10
c0018e13:	c3                   	ret    

c0018e14 <RTC::open(int, int, void*)>:
c0018e14:	31 c0                	xor    eax,eax
c0018e16:	c3                   	ret    
c0018e17:	90                   	nop

c0018e18 <RTC::close(int, int, void*)>:
c0018e18:	31 c0                	xor    eax,eax
c0018e1a:	c3                   	ret    
c0018e1b:	90                   	nop

c0018e1c <RTC::timeInSecondsUTC()>:
c0018e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e20:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018e26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018e2c:	c3                   	ret    
c0018e2d:	90                   	nop

c0018e2e <RTC::timeInDatetimeUTC()>:
c0018e2e:	53                   	push   ebx
c0018e2f:	83 ec 14             	sub    esp,0x14
c0018e32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018e3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e3c:	50                   	push   eax
c0018e3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018e40:	83 c4 0c             	add    esp,0xc
c0018e43:	52                   	push   edx
c0018e44:	50                   	push   eax
c0018e45:	53                   	push   ebx
c0018e46:	e8 6f ff fe ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0018e4b:	89 d8                	mov    eax,ebx
c0018e4d:	83 c4 14             	add    esp,0x14
c0018e50:	5b                   	pop    ebx
c0018e51:	c2 04 00             	ret    0x4

c0018e54 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018e54:	56                   	push   esi
c0018e55:	53                   	push   ebx
c0018e56:	83 ec 14             	sub    esp,0x14
c0018e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018e5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018e5f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018e62:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e66:	52                   	push   edx
c0018e67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018e6f:	50                   	push   eax
c0018e70:	e8 45 ff fe ff       	call   c0008dba <KeSecondsToDatetime(unsigned long long)>
c0018e75:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018e79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e7d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018e85:	89 f0                	mov    eax,esi
c0018e87:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018e8b:	83 c4 20             	add    esp,0x20
c0018e8e:	5b                   	pop    ebx
c0018e8f:	5e                   	pop    esi
c0018e90:	ff e0                	jmp    eax

c0018e92 <RTC::~RTC()>:
c0018e92:	83 ec 0c             	sub    esp,0xc
c0018e95:	ba c8 30 02 c0       	mov    edx,0xc00230c8
c0018e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e9e:	89 10                	mov    DWORD PTR [eax],edx
c0018ea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea4:	83 ec 0c             	sub    esp,0xc
c0018ea7:	50                   	push   eax
c0018ea8:	e8 99 fc fe ff       	call   c0008b46 <Clock::~Clock()>
c0018ead:	83 c4 10             	add    esp,0x10
c0018eb0:	90                   	nop
c0018eb1:	83 c4 0c             	add    esp,0xc
c0018eb4:	c3                   	ret    
c0018eb5:	90                   	nop

c0018eb6 <RTC::~RTC()>:
c0018eb6:	83 ec 0c             	sub    esp,0xc
c0018eb9:	83 ec 0c             	sub    esp,0xc
c0018ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ec0:	e8 cd ff ff ff       	call   c0018e92 <RTC::~RTC()>
c0018ec5:	83 c4 10             	add    esp,0x10
c0018ec8:	83 ec 08             	sub    esp,0x8
c0018ecb:	68 60 01 00 00       	push   0x160
c0018ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ed4:	e8 82 37 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0018ed9:	83 c4 10             	add    esp,0x10
c0018edc:	83 c4 0c             	add    esp,0xc
c0018edf:	c3                   	ret    

c0018ee0 <RTC::get_update_in_progress_flag()>:
c0018ee0:	83 ec 18             	sub    esp,0x18
c0018ee3:	6a 0a                	push   0xa
c0018ee5:	e8 61 db ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018eea:	83 c4 1c             	add    esp,0x1c
c0018eed:	0f b6 c0             	movzx  eax,al
c0018ef0:	c1 e8 07             	shr    eax,0x7
c0018ef3:	c3                   	ret    

c0018ef4 <RTC::completeRTCRefresh()>:
c0018ef4:	55                   	push   ebp
c0018ef5:	57                   	push   edi
c0018ef6:	56                   	push   esi
c0018ef7:	53                   	push   ebx
c0018ef8:	83 ec 3c             	sub    esp,0x3c
c0018efb:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018f01:	83 ec 0c             	sub    esp,0xc
c0018f04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018f08:	e8 d3 ff ff ff       	call   c0018ee0 <RTC::get_update_in_progress_flag()>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	84 c0                	test   al,al
c0018f12:	74 0e                	je     c0018f22 <RTC::completeRTCRefresh()+0x2e>
c0018f14:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018f1a:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018f20:	73 df                	jae    c0018f01 <RTC::completeRTCRefresh()+0xd>
c0018f22:	83 ec 0c             	sub    esp,0xc
c0018f25:	6a 00                	push   0x0
c0018f27:	e8 1f db ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018f2c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018f33:	89 c7                	mov    edi,eax
c0018f35:	e8 11 db ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018f3a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018f41:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018f45:	e8 01 db ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018f4a:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018f51:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018f55:	e8 f1 da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018f5a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018f61:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018f65:	e8 e1 da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018f6a:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0018f71:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018f75:	e8 d1 da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018f7a:	0f b6 c0             	movzx  eax,al
c0018f7d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018f8a:	83 ec 0c             	sub    esp,0xc
c0018f8d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018f91:	e8 4a ff ff ff       	call   c0018ee0 <RTC::get_update_in_progress_flag()>
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	84 c0                	test   al,al
c0018f9b:	74 0e                	je     c0018fab <RTC::completeRTCRefresh()+0xb7>
c0018f9d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018fa3:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018fa9:	73 df                	jae    c0018f8a <RTC::completeRTCRefresh()+0x96>
c0018fab:	83 ec 0c             	sub    esp,0xc
c0018fae:	6a 00                	push   0x0
c0018fb0:	e8 96 da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018fb5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018fbc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018fc0:	e8 86 da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018fc5:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018fcc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0018fd0:	e8 76 da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018fd5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018fdc:	88 c3                	mov    bl,al
c0018fde:	e8 68 da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018fe3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018fea:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018fee:	e8 58 da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0018ff3:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0018ffa:	89 c6                	mov    esi,eax
c0018ffc:	e8 4a da ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0019001:	89 f9                	mov    ecx,edi
c0019003:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019007:	83 c4 10             	add    esp,0x10
c001900a:	0f b6 e8             	movzx  ebp,al
c001900d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019012:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001901a:	74 27                	je     c0019043 <RTC::completeRTCRefresh()+0x14f>
c001901c:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0019020:	89 f0                	mov    eax,esi
c0019022:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019026:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001902a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001902e:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0019032:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019036:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001903a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001903e:	e9 41 ff ff ff       	jmp    c0018f84 <RTC::completeRTCRefresh()+0x90>
c0019043:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019048:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001904c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019050:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0019054:	75 c6                	jne    c001901c <RTC::completeRTCRefresh()+0x128>
c0019056:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001905b:	89 f1                	mov    ecx,esi
c001905d:	0f b6 fb             	movzx  edi,bl
c0019060:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019064:	0f b6 c9             	movzx  ecx,cl
c0019067:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001906b:	89 f1                	mov    ecx,esi
c001906d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019071:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019075:	0f 94 c2             	sete   dl
c0019078:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001907c:	0f 94 c0             	sete   al
c001907f:	21 d0                	and    eax,edx
c0019081:	31 d2                	xor    edx,edx
c0019083:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019087:	0f 94 c2             	sete   dl
c001908a:	85 c2                	test   edx,eax
c001908c:	74 8e                	je     c001901c <RTC::completeRTCRefresh()+0x128>
c001908e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0019092:	75 88                	jne    c001901c <RTC::completeRTCRefresh()+0x128>
c0019094:	83 ec 0c             	sub    esp,0xc
c0019097:	6a 0b                	push   0xb
c0019099:	e8 ad d9 ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c001909e:	83 c4 10             	add    esp,0x10
c00190a1:	a8 04                	test   al,0x4
c00190a3:	75 7a                	jne    c001911f <RTC::completeRTCRefresh()+0x22b>
c00190a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00190a9:	c1 ef 04             	shr    edi,0x4
c00190ac:	83 e6 0f             	and    esi,0xf
c00190af:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00190b3:	c1 ed 04             	shr    ebp,0x4
c00190b6:	6b ed 0a             	imul   ebp,ebp,0xa
c00190b9:	c1 ea 04             	shr    edx,0x4
c00190bc:	6b d2 0a             	imul   edx,edx,0xa
c00190bf:	83 e1 0f             	and    ecx,0xf
c00190c2:	01 d1                	add    ecx,edx
c00190c4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00190c8:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00190cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00190d0:	c1 ea 04             	shr    edx,0x4
c00190d3:	6b d2 0a             	imul   edx,edx,0xa
c00190d6:	83 e1 0f             	and    ecx,0xf
c00190d9:	01 d1                	add    ecx,edx
c00190db:	89 fa                	mov    edx,edi
c00190dd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00190e1:	83 e2 07             	and    edx,0x7
c00190e4:	89 d9                	mov    ecx,ebx
c00190e6:	6b d2 0a             	imul   edx,edx,0xa
c00190e9:	83 e1 0f             	and    ecx,0xf
c00190ec:	83 e3 80             	and    ebx,0xffffff80
c00190ef:	01 d1                	add    ecx,edx
c00190f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00190f5:	09 cb                	or     ebx,ecx
c00190f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00190fb:	c1 ea 04             	shr    edx,0x4
c00190fe:	6b d2 0a             	imul   edx,edx,0xa
c0019101:	83 e1 0f             	and    ecx,0xf
c0019104:	01 d1                	add    ecx,edx
c0019106:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001910a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001910e:	c1 ea 04             	shr    edx,0x4
c0019111:	6b d2 0a             	imul   edx,edx,0xa
c0019114:	01 d6                	add    esi,edx
c0019116:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001911a:	83 e2 0f             	and    edx,0xf
c001911d:	01 d5                	add    ebp,edx
c001911f:	a8 02                	test   al,0x2
c0019121:	75 15                	jne    c0019138 <RTC::completeRTCRefresh()+0x244>
c0019123:	f6 c3 80             	test   bl,0x80
c0019126:	74 10                	je     c0019138 <RTC::completeRTCRefresh()+0x244>
c0019128:	83 e3 7f             	and    ebx,0x7f
c001912b:	b9 18 00 00 00       	mov    ecx,0x18
c0019130:	8d 43 0c             	lea    eax,[ebx+0xc]
c0019133:	99                   	cdq    
c0019134:	f7 f9                	idiv   ecx
c0019136:	88 d3                	mov    bl,dl
c0019138:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c001913e:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0019144:	77 06                	ja     c001914c <RTC::completeRTCRefresh()+0x258>
c0019146:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001914c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019151:	31 c9                	xor    ecx,ecx
c0019153:	31 d2                	xor    edx,edx
c0019155:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019159:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001915d:	89 cd                	mov    ebp,ecx
c001915f:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0019163:	c1 e7 10             	shl    edi,0x10
c0019166:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001916c:	c1 e0 10             	shl    eax,0x10
c001916f:	09 c5                	or     ebp,eax
c0019171:	89 e9                	mov    ecx,ebp
c0019173:	0f b7 c2             	movzx  eax,dx
c0019176:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001917a:	09 f8                	or     eax,edi
c001917c:	89 c2                	mov    edx,eax
c001917e:	50                   	push   eax
c001917f:	50                   	push   eax
c0019180:	88 d9                	mov    cl,bl
c0019182:	51                   	push   ecx
c0019183:	52                   	push   edx
c0019184:	e8 ac fa fe ff       	call   c0008c35 <KeDatetimeToSeconds(datetime_t)>
c0019189:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001918d:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0019193:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019199:	83 c4 4c             	add    esp,0x4c
c001919c:	5b                   	pop    ebx
c001919d:	5e                   	pop    esi
c001919e:	5f                   	pop    edi
c001919f:	5d                   	pop    ebp
c00191a0:	c3                   	ret    
c00191a1:	90                   	nop

c00191a2 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00191a2:	55                   	push   ebp
c00191a3:	57                   	push   edi
c00191a4:	56                   	push   esi
c00191a5:	53                   	push   ebx
c00191a6:	83 ec 34             	sub    esp,0x34
c00191a9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00191ad:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00191b1:	6a 00                	push   0x0
c00191b3:	6a 00                	push   0x0
c00191b5:	e8 e5 d8 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c00191ba:	5d                   	pop    ebp
c00191bb:	89 fb                	mov    ebx,edi
c00191bd:	58                   	pop    eax
c00191be:	6a 00                	push   0x0
c00191c0:	6a 02                	push   0x2
c00191c2:	e8 d8 d8 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c00191c7:	89 f8                	mov    eax,edi
c00191c9:	89 f9                	mov    ecx,edi
c00191cb:	0f b6 c4             	movzx  eax,ah
c00191ce:	31 d2                	xor    edx,edx
c00191d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00191d4:	c1 e9 10             	shr    ecx,0x10
c00191d7:	89 f0                	mov    eax,esi
c00191d9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00191dd:	89 f0                	mov    eax,esi
c00191df:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00191e3:	0f b6 c4             	movzx  eax,ah
c00191e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00191ea:	89 f0                	mov    eax,esi
c00191ec:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00191f0:	c1 e8 10             	shr    eax,0x10
c00191f3:	b9 64 00 00 00       	mov    ecx,0x64
c00191f8:	f7 f1                	div    ecx
c00191fa:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c0019201:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019205:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019209:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001920d:	e8 39 d8 ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0019212:	83 c4 10             	add    esp,0x10
c0019215:	a8 04                	test   al,0x4
c0019217:	89 c5                	mov    ebp,eax
c0019219:	75 6e                	jne    c0019289 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001921b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001921f:	31 d2                	xor    edx,edx
c0019221:	0f b6 c1             	movzx  eax,cl
c0019224:	b9 0a 00 00 00       	mov    ecx,0xa
c0019229:	f7 f1                	div    ecx
c001922b:	c1 e0 04             	shl    eax,0x4
c001922e:	09 d0                	or     eax,edx
c0019230:	31 d2                	xor    edx,edx
c0019232:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019236:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001923b:	f7 f1                	div    ecx
c001923d:	c1 e0 04             	shl    eax,0x4
c0019240:	09 d0                	or     eax,edx
c0019242:	31 d2                	xor    edx,edx
c0019244:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019248:	0f b6 c3             	movzx  eax,bl
c001924b:	f7 f1                	div    ecx
c001924d:	c1 e0 04             	shl    eax,0x4
c0019250:	09 d0                	or     eax,edx
c0019252:	31 d2                	xor    edx,edx
c0019254:	89 c3                	mov    ebx,eax
c0019256:	89 f0                	mov    eax,esi
c0019258:	0f b6 c0             	movzx  eax,al
c001925b:	f7 f1                	div    ecx
c001925d:	c1 e0 04             	shl    eax,0x4
c0019260:	09 d0                	or     eax,edx
c0019262:	31 d2                	xor    edx,edx
c0019264:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019268:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001926d:	f7 f1                	div    ecx
c001926f:	c1 e0 04             	shl    eax,0x4
c0019272:	09 d0                	or     eax,edx
c0019274:	31 d2                	xor    edx,edx
c0019276:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001927a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001927e:	f7 f1                	div    ecx
c0019280:	c1 e0 04             	shl    eax,0x4
c0019283:	09 d0                	or     eax,edx
c0019285:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019289:	83 e5 02             	and    ebp,0x2
c001928c:	75 1e                	jne    c00192ac <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001928e:	0f b6 c3             	movzx  eax,bl
c0019291:	83 f8 0b             	cmp    eax,0xb
c0019294:	76 10                	jbe    c00192a6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c0019296:	8d 53 f4             	lea    edx,[ebx-0xc]
c0019299:	84 d2                	test   dl,dl
c001929b:	88 d3                	mov    bl,dl
c001929d:	75 02                	jne    c00192a1 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001929f:	b3 0c                	mov    bl,0xc
c00192a1:	83 cb 80             	or     ebx,0xffffff80
c00192a4:	eb 06                	jmp    c00192ac <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00192a6:	85 c0                	test   eax,eax
c00192a8:	75 02                	jne    c00192ac <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c00192aa:	b3 0c                	mov    bl,0xc
c00192ac:	50                   	push   eax
c00192ad:	0f b6 db             	movzx  ebx,bl
c00192b0:	50                   	push   eax
c00192b1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00192b6:	52                   	push   edx
c00192b7:	6a 00                	push   0x0
c00192b9:	e8 e1 d7 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c00192be:	5a                   	pop    edx
c00192bf:	59                   	pop    ecx
c00192c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00192c5:	50                   	push   eax
c00192c6:	6a 02                	push   0x2
c00192c8:	e8 d2 d7 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c00192cd:	5e                   	pop    esi
c00192ce:	5f                   	pop    edi
c00192cf:	53                   	push   ebx
c00192d0:	6a 04                	push   0x4
c00192d2:	e8 c8 d7 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c00192d7:	5d                   	pop    ebp
c00192d8:	58                   	pop    eax
c00192d9:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00192de:	52                   	push   edx
c00192df:	6a 07                	push   0x7
c00192e1:	e8 b9 d7 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c00192e6:	58                   	pop    eax
c00192e7:	5a                   	pop    edx
c00192e8:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00192ed:	50                   	push   eax
c00192ee:	6a 08                	push   0x8
c00192f0:	e8 aa d7 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c00192f5:	59                   	pop    ecx
c00192f6:	5b                   	pop    ebx
c00192f7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00192fc:	55                   	push   ebp
c00192fd:	6a 09                	push   0x9
c00192ff:	e8 9b d7 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c0019304:	5e                   	pop    esi
c0019305:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019309:	e8 e6 fb ff ff       	call   c0018ef4 <RTC::completeRTCRefresh()>
c001930e:	83 c4 3c             	add    esp,0x3c
c0019311:	b0 01                	mov    al,0x1
c0019313:	5b                   	pop    ebx
c0019314:	5e                   	pop    esi
c0019315:	5f                   	pop    edi
c0019316:	5d                   	pop    ebp
c0019317:	c3                   	ret    

c0019318 <rtcIRQHandler(regs*, void*)>:
c0019318:	53                   	push   ebx
c0019319:	83 ec 14             	sub    esp,0x14
c001931c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019320:	6a 0c                	push   0xc
c0019322:	e8 24 d7 ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c0019327:	83 c4 10             	add    esp,0x10
c001932a:	a8 80                	test   al,0x80
c001932c:	74 24                	je     c0019352 <rtcIRQHandler(regs*, void*)+0x3a>
c001932e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0019335:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001933c:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c0019343:	75 0d                	jne    c0019352 <rtcIRQHandler(regs*, void*)+0x3a>
c0019345:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019349:	83 c4 08             	add    esp,0x8
c001934c:	5b                   	pop    ebx
c001934d:	e9 a2 fb ff ff       	jmp    c0018ef4 <RTC::completeRTCRefresh()>
c0019352:	83 c4 08             	add    esp,0x8
c0019355:	5b                   	pop    ebx
c0019356:	c3                   	ret    
c0019357:	90                   	nop

c0019358 <RTC::RTC()>:
c0019358:	83 ec 1c             	sub    esp,0x1c
c001935b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001935f:	83 ec 08             	sub    esp,0x8
c0019362:	68 ab 30 02 c0       	push   0xc00230ab
c0019367:	50                   	push   eax
c0019368:	e8 a3 f7 fe ff       	call   c0008b10 <Clock::Clock(char const*)>
c001936d:	83 c4 10             	add    esp,0x10
c0019370:	ba c8 30 02 c0       	mov    edx,0xc00230c8
c0019375:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019379:	89 10                	mov    DWORD PTR [eax],edx
c001937b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001937f:	83 ec 0c             	sub    esp,0xc
c0019382:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019386:	6a 01                	push   0x1
c0019388:	68 18 93 01 c0       	push   0xc0019318
c001938d:	6a 08                	push   0x8
c001938f:	50                   	push   eax
c0019390:	e8 5d fc fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019395:	83 c4 20             	add    esp,0x20
c0019398:	89 c2                	mov    edx,eax
c001939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001939e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00193a4:	fa                   	cli    
c00193a5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00193aa:	83 c0 01             	add    eax,0x1
c00193ad:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00193b2:	83 ec 0c             	sub    esp,0xc
c00193b5:	6a 0b                	push   0xb
c00193b7:	e8 8f d6 ff ff       	call   c0016a4b <x86ReadCMOS(unsigned char)>
c00193bc:	83 c4 10             	add    esp,0x10
c00193bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00193c3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00193c7:	83 c8 10             	or     eax,0x10
c00193ca:	0f b6 c0             	movzx  eax,al
c00193cd:	83 ec 08             	sub    esp,0x8
c00193d0:	50                   	push   eax
c00193d1:	6a 0b                	push   0xb
c00193d3:	e8 c7 d6 ff ff       	call   c0016a9f <x86WriteCMOS(unsigned char, unsigned char)>
c00193d8:	83 c4 10             	add    esp,0x10
c00193db:	83 ec 0c             	sub    esp,0xc
c00193de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193e2:	e8 0d fb ff ff       	call   c0018ef4 <RTC::completeRTCRefresh()>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	f0 83 2d b0 c6 02 c0 01 	lock sub DWORD PTR ds:0xc002c6b0,0x1
c00193f2:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00193f7:	85 c0                	test   eax,eax
c00193f9:	75 01                	jne    c00193fc <RTC::RTC()+0xa4>
c00193fb:	fb                   	sti    
c00193fc:	90                   	nop
c00193fd:	83 c4 1c             	add    esp,0x1c
c0019400:	c3                   	ret    
c0019401:	66 90                	xchg   ax,ax
c0019403:	90                   	nop

c0019404 <HalConsoleScroll(int, int)>:
c0019404:	83 ec 10             	sub    esp,0x10
c0019407:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001940f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0019417:	90                   	nop
c0019418:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001941d:	0f 8f e1 00 00 00    	jg     c0019504 <HalConsoleScroll(int, int)+0x100>
c0019423:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001942b:	90                   	nop
c001942c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0019434:	0f 8f be 00 00 00    	jg     c00194f8 <HalConsoleScroll(int, int)+0xf4>
c001943a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001943e:	89 d0                	mov    eax,edx
c0019440:	c1 e0 02             	shl    eax,0x2
c0019443:	01 d0                	add    eax,edx
c0019445:	c1 e0 05             	shl    eax,0x5
c0019448:	89 c2                	mov    edx,eax
c001944a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001944e:	01 d0                	add    eax,edx
c0019450:	89 c2                	mov    edx,eax
c0019452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019456:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0019459:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001945d:	89 d0                	mov    eax,edx
c001945f:	c1 e0 02             	shl    eax,0x2
c0019462:	01 d0                	add    eax,edx
c0019464:	c1 e0 05             	shl    eax,0x5
c0019467:	89 c2                	mov    edx,eax
c0019469:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001946d:	01 d0                	add    eax,edx
c001946f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0019475:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019479:	01 d0                	add    eax,edx
c001947b:	8a 11                	mov    dl,BYTE PTR [ecx]
c001947d:	88 10                	mov    BYTE PTR [eax],dl
c001947f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019484:	75 66                	jne    c00194ec <HalConsoleScroll(int, int)+0xe8>
c0019486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001948a:	83 e0 01             	and    eax,0x1
c001948d:	74 39                	je     c00194c8 <HalConsoleScroll(int, int)+0xc4>
c001948f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019493:	83 e0 0f             	and    eax,0xf
c0019496:	88 c2                	mov    dl,al
c0019498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001949c:	c1 e0 04             	shl    eax,0x4
c001949f:	09 d0                	or     eax,edx
c00194a1:	88 c1                	mov    cl,al
c00194a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194a7:	89 d0                	mov    eax,edx
c00194a9:	c1 e0 02             	shl    eax,0x2
c00194ac:	01 d0                	add    eax,edx
c00194ae:	c1 e0 05             	shl    eax,0x5
c00194b1:	89 c2                	mov    edx,eax
c00194b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194b7:	01 d0                	add    eax,edx
c00194b9:	89 c2                	mov    edx,eax
c00194bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194bf:	01 d0                	add    eax,edx
c00194c1:	88 ca                	mov    dl,cl
c00194c3:	88 10                	mov    BYTE PTR [eax],dl
c00194c5:	eb 25                	jmp    c00194ec <HalConsoleScroll(int, int)+0xe8>
c00194c7:	90                   	nop
c00194c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194cc:	89 d0                	mov    eax,edx
c00194ce:	c1 e0 02             	shl    eax,0x2
c00194d1:	01 d0                	add    eax,edx
c00194d3:	c1 e0 05             	shl    eax,0x5
c00194d6:	89 c2                	mov    edx,eax
c00194d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194dc:	01 d0                	add    eax,edx
c00194de:	89 c2                	mov    edx,eax
c00194e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194e4:	01 d0                	add    eax,edx
c00194e6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00194e9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ec:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00194f1:	e9 36 ff ff ff       	jmp    c001942c <HalConsoleScroll(int, int)+0x28>
c00194f6:	66 90                	xchg   ax,ax
c00194f8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00194fd:	e9 16 ff ff ff       	jmp    c0019418 <HalConsoleScroll(int, int)+0x14>
c0019502:	66 90                	xchg   ax,ax
c0019504:	90                   	nop
c0019505:	83 c4 10             	add    esp,0x10
c0019508:	c3                   	ret    
c0019509:	8d 76 00             	lea    esi,[esi+0x0]

c001950c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001950c:	83 ec 14             	sub    esp,0x14
c001950f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019513:	88 04 24             	mov    BYTE PTR [esp],al
c0019516:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019519:	0f b6 c0             	movzx  eax,al
c001951c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019520:	89 d1                	mov    ecx,edx
c0019522:	83 e1 0f             	and    ecx,0xf
c0019525:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019529:	c1 e2 04             	shl    edx,0x4
c001952c:	0f b6 d2             	movzx  edx,dl
c001952f:	09 ca                	or     edx,ecx
c0019531:	c1 e2 08             	shl    edx,0x8
c0019534:	09 d0                	or     eax,edx
c0019536:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001953b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0019543:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019547:	89 d0                	mov    eax,edx
c0019549:	c1 e0 02             	shl    eax,0x2
c001954c:	01 d0                	add    eax,edx
c001954e:	c1 e0 04             	shl    eax,0x4
c0019551:	89 c2                	mov    edx,eax
c0019553:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019557:	01 d0                	add    eax,edx
c0019559:	d1 e0                	shl    eax,1
c001955b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001955f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019563:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0019568:	66 89 10             	mov    WORD PTR [eax],dx
c001956b:	90                   	nop
c001956c:	83 c4 14             	add    esp,0x14
c001956f:	c3                   	ret    

c0019570 <HalConsoleCursorUpdate(int, int)>:
c0019570:	83 ec 20             	sub    esp,0x20
c0019573:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019577:	89 c2                	mov    edx,eax
c0019579:	c1 e2 02             	shl    edx,0x2
c001957c:	01 d0                	add    eax,edx
c001957e:	c1 e0 04             	shl    eax,0x4
c0019581:	89 c2                	mov    edx,eax
c0019583:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019587:	01 d0                	add    eax,edx
c0019589:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001958e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019595:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001959a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001959e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195a2:	ee                   	out    dx,al
c00195a3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00195a8:	0f b6 c0             	movzx  eax,al
c00195ab:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00195b2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00195b6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00195ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195be:	ee                   	out    dx,al
c00195bf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00195c6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00195cb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00195cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195d3:	ee                   	out    dx,al
c00195d4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00195d9:	c1 e8 08             	shr    eax,0x8
c00195dc:	0f b6 c0             	movzx  eax,al
c00195df:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00195e6:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00195ea:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00195ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195f2:	ee                   	out    dx,al
c00195f3:	90                   	nop
c00195f4:	83 c4 20             	add    esp,0x20
c00195f7:	c3                   	ret    

c00195f8 <FAT::getName()>:
c00195f8:	b8 fc 30 02 c0       	mov    eax,0xc00230fc
c00195fd:	c3                   	ret    
c00195fe:	66 90                	xchg   ax,ax

c0019600 <FAT::tell(void*, unsigned long long*)>:
c0019600:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019605:	75 09                	jne    c0019610 <FAT::tell(void*, unsigned long long*)+0x10>
c0019607:	b8 04 00 00 00       	mov    eax,0x4
c001960c:	c3                   	ret    
c001960d:	8d 76 00             	lea    esi,[esi+0x0]
c0019610:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019615:	75 09                	jne    c0019620 <FAT::tell(void*, unsigned long long*)+0x20>
c0019617:	b8 04 00 00 00       	mov    eax,0x4
c001961c:	c3                   	ret    
c001961d:	8d 76 00             	lea    esi,[esi+0x0]
c0019620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019624:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019627:	ba 00 00 00 00       	mov    edx,0x0
c001962c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019630:	89 01                	mov    DWORD PTR [ecx],eax
c0019632:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019635:	b8 00 00 00 00       	mov    eax,0x0
c001963a:	c3                   	ret    
c001963b:	90                   	nop

c001963c <FAT::stat(void*, unsigned long long*)>:
c001963c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019641:	75 09                	jne    c001964c <FAT::stat(void*, unsigned long long*)+0x10>
c0019643:	b8 04 00 00 00       	mov    eax,0x4
c0019648:	c3                   	ret    
c0019649:	8d 76 00             	lea    esi,[esi+0x0]
c001964c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019651:	75 09                	jne    c001965c <FAT::stat(void*, unsigned long long*)+0x20>
c0019653:	b8 04 00 00 00       	mov    eax,0x4
c0019658:	c3                   	ret    
c0019659:	8d 76 00             	lea    esi,[esi+0x0]
c001965c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019660:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019663:	ba 00 00 00 00       	mov    edx,0x0
c0019668:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001966c:	89 01                	mov    DWORD PTR [ecx],eax
c001966e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019671:	b8 00 00 00 00       	mov    eax,0x0
c0019676:	c3                   	ret    
c0019677:	90                   	nop

c0019678 <FAT::~FAT()>:
c0019678:	83 ec 0c             	sub    esp,0xc
c001967b:	ba 48 31 02 c0       	mov    edx,0xc0023148
c0019680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019684:	89 10                	mov    DWORD PTR [eax],edx
c0019686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001968a:	83 ec 0c             	sub    esp,0xc
c001968d:	50                   	push   eax
c001968e:	e8 e7 e6 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c0019693:	83 c4 10             	add    esp,0x10
c0019696:	90                   	nop
c0019697:	83 c4 0c             	add    esp,0xc
c001969a:	c3                   	ret    
c001969b:	90                   	nop

c001969c <FAT::~FAT()>:
c001969c:	83 ec 0c             	sub    esp,0xc
c001969f:	83 ec 0c             	sub    esp,0xc
c00196a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196a6:	e8 cd ff ff ff       	call   c0019678 <FAT::~FAT()>
c00196ab:	83 c4 10             	add    esp,0x10
c00196ae:	83 ec 08             	sub    esp,0x8
c00196b1:	6a 08                	push   0x8
c00196b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00196b7:	e8 9f 2f ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00196bc:	83 c4 10             	add    esp,0x10
c00196bf:	83 c4 0c             	add    esp,0xc
c00196c2:	c3                   	ret    
c00196c3:	90                   	nop

c00196c4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00196c4:	83 ec 1c             	sub    esp,0x1c
c00196c7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00196ce:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00196d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196d7:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00196de:	83 f8 ff             	cmp    eax,0xffffffff
c00196e1:	75 35                	jne    c0019718 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00196e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00196e7:	88 c2                	mov    dl,al
c00196e9:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00196ee:	01 d0                	add    eax,edx
c00196f0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00196f4:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00196fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196fe:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019705:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001970a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001970e:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019715:	eb 19                	jmp    c0019730 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019717:	90                   	nop
c0019718:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001971c:	88 c2                	mov    dl,al
c001971e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019722:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019729:	01 d0                	add    eax,edx
c001972b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001972f:	90                   	nop
c0019730:	83 ec 04             	sub    esp,0x4
c0019733:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019737:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001973b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001973f:	50                   	push   eax
c0019740:	e8 8f ba fe ff       	call   c00051d4 <f_getlabel>
c0019745:	83 c4 10             	add    esp,0x10
c0019748:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001974c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019751:	75 09                	jne    c001975c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0019753:	b8 00 00 00 00       	mov    eax,0x0
c0019758:	eb 0a                	jmp    c0019764 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001975a:	66 90                	xchg   ax,ax
c001975c:	b8 01 00 00 00       	mov    eax,0x1
c0019761:	8d 76 00             	lea    esi,[esi+0x0]
c0019764:	83 c4 1c             	add    esp,0x1c
c0019767:	c3                   	ret    

c0019768 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019768:	53                   	push   ebx
c0019769:	83 ec 58             	sub    esp,0x58
c001976c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019774:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019778:	b9 00 00 00 00       	mov    ecx,0x0
c001977d:	b8 3c 00 00 00       	mov    eax,0x3c
c0019782:	83 e0 f8             	and    eax,0xfffffff8
c0019785:	89 c3                	mov    ebx,eax
c0019787:	b8 00 00 00 00       	mov    eax,0x0
c001978c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0019790:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0019794:	83 c0 08             	add    eax,0x8
c0019797:	39 d8                	cmp    eax,ebx
c0019799:	72 f1                	jb     c001978c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c001979b:	01 c2                	add    edx,eax
c001979d:	89 0a                	mov    DWORD PTR [edx],ecx
c001979f:	83 c2 04             	add    edx,0x4
c00197a2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197a6:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197ad:	83 f8 ff             	cmp    eax,0xffffffff
c00197b0:	75 36                	jne    c00197e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c00197b2:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00197b6:	88 c2                	mov    dl,al
c00197b8:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197bd:	01 d0                	add    eax,edx
c00197bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197c3:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00197c9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197cd:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00197d4:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00197d9:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00197dd:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00197e4:	eb 1a                	jmp    c0019800 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c00197e6:	66 90                	xchg   ax,ax
c00197e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00197ec:	88 c2                	mov    dl,al
c00197ee:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00197f2:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197f9:	01 d0                	add    eax,edx
c00197fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00197ff:	90                   	nop
c0019800:	83 ec 08             	sub    esp,0x8
c0019803:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019807:	8d 44 24 18          	lea    eax,[esp+0x18]
c001980b:	50                   	push   eax
c001980c:	e8 5f 70 fe ff       	call   c0000870 <strcat>
c0019811:	83 c4 10             	add    esp,0x10
c0019814:	83 ec 0c             	sub    esp,0xc
c0019817:	8d 44 24 18          	lea    eax,[esp+0x18]
c001981b:	50                   	push   eax
c001981c:	e8 07 bb fe ff       	call   c0005328 <f_setlabel>
c0019821:	83 c4 10             	add    esp,0x10
c0019824:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019828:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001982d:	75 09                	jne    c0019838 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c001982f:	b8 00 00 00 00       	mov    eax,0x0
c0019834:	eb 0a                	jmp    c0019840 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0019836:	66 90                	xchg   ax,ax
c0019838:	b8 01 00 00 00       	mov    eax,0x1
c001983d:	8d 76 00             	lea    esi,[esi+0x0]
c0019840:	83 c4 58             	add    esp,0x58
c0019843:	5b                   	pop    ebx
c0019844:	c3                   	ret    
c0019845:	90                   	nop
c0019846:	66 90                	xchg   ax,ax

c0019848 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019848:	83 ec 2c             	sub    esp,0x2c
c001984b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019853:	83 ec 08             	sub    esp,0x8
c0019856:	68 20 31 02 c0       	push   0xc0023120
c001985b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001985f:	e8 1c 6f fe ff       	call   c0000780 <strcmp>
c0019864:	83 c4 10             	add    esp,0x10
c0019867:	85 c0                	test   eax,eax
c0019869:	0f 94 c0             	sete   al
c001986c:	0f b6 c0             	movzx  eax,al
c001986f:	85 c0                	test   eax,eax
c0019871:	74 0d                	je     c0019880 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0019873:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001987b:	e9 c0 00 00 00       	jmp    c0019940 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019880:	83 ec 08             	sub    esp,0x8
c0019883:	68 12 31 02 c0       	push   0xc0023112
c0019888:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001988c:	e8 ef 6e fe ff       	call   c0000780 <strcmp>
c0019891:	83 c4 10             	add    esp,0x10
c0019894:	85 c0                	test   eax,eax
c0019896:	0f 94 c0             	sete   al
c0019899:	0f b6 c0             	movzx  eax,al
c001989c:	85 c0                	test   eax,eax
c001989e:	74 10                	je     c00198b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c00198a0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198a8:	e9 93 00 00 00       	jmp    c0019940 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198ad:	8d 76 00             	lea    esi,[esi+0x0]
c00198b0:	83 ec 08             	sub    esp,0x8
c00198b3:	68 18 31 02 c0       	push   0xc0023118
c00198b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198bc:	e8 bf 6e fe ff       	call   c0000780 <strcmp>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	85 c0                	test   eax,eax
c00198c6:	0f 94 c0             	sete   al
c00198c9:	0f b6 c0             	movzx  eax,al
c00198cc:	85 c0                	test   eax,eax
c00198ce:	74 0c                	je     c00198dc <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c00198d0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198d8:	eb 66                	jmp    c0019940 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198da:	66 90                	xchg   ax,ax
c00198dc:	83 ec 08             	sub    esp,0x8
c00198df:	68 7c 08 02 c0       	push   0xc002087c
c00198e4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198e8:	e8 93 6e fe ff       	call   c0000780 <strcmp>
c00198ed:	83 c4 10             	add    esp,0x10
c00198f0:	85 c0                	test   eax,eax
c00198f2:	0f 94 c0             	sete   al
c00198f5:	0f b6 c0             	movzx  eax,al
c00198f8:	85 c0                	test   eax,eax
c00198fa:	74 0c                	je     c0019908 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00198fc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019904:	eb 3a                	jmp    c0019940 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019906:	66 90                	xchg   ax,ax
c0019908:	83 ec 08             	sub    esp,0x8
c001990b:	68 1e 31 02 c0       	push   0xc002311e
c0019910:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019914:	e8 67 6e fe ff       	call   c0000780 <strcmp>
c0019919:	83 c4 10             	add    esp,0x10
c001991c:	85 c0                	test   eax,eax
c001991e:	0f 94 c0             	sete   al
c0019921:	0f b6 c0             	movzx  eax,al
c0019924:	85 c0                	test   eax,eax
c0019926:	74 0c                	je     c0019934 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019928:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019930:	eb 0e                	jmp    c0019940 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019932:	66 90                	xchg   ax,ax
c0019934:	b8 08 00 00 00       	mov    eax,0x8
c0019939:	e9 ea 00 00 00       	jmp    c0019a28 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001993e:	66 90                	xchg   ax,ax
c0019940:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019947:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001994c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019950:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019957:	83 f8 ff             	cmp    eax,0xffffffff
c001995a:	75 34                	jne    c0019990 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001995c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019960:	88 c2                	mov    dl,al
c0019962:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019967:	01 d0                	add    eax,edx
c0019969:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001996d:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019973:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019977:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c001997e:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019983:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019987:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c001998e:	eb 18                	jmp    c00199a8 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0019990:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019994:	88 c2                	mov    dl,al
c0019996:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001999a:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00199a1:	01 d0                	add    eax,edx
c00199a3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00199a7:	90                   	nop
c00199a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199ac:	88 04 24             	mov    BYTE PTR [esp],al
c00199af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00199b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00199bf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00199c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00199cc:	83 ec 0c             	sub    esp,0xc
c00199cf:	68 00 20 00 00       	push   0x2000
c00199d4:	e8 f7 4e ff ff       	call   c000e8d0 <malloc>
c00199d9:	83 c4 10             	add    esp,0x10
c00199dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199e0:	68 00 20 00 00       	push   0x2000
c00199e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00199e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00199ed:	50                   	push   eax
c00199ee:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00199f2:	50                   	push   eax
c00199f3:	e8 2d bc fe ff       	call   c0005625 <f_mkfs>
c00199f8:	83 c4 10             	add    esp,0x10
c00199fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a04:	75 0a                	jne    c0019a10 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019a06:	b8 00 00 00 00       	mov    eax,0x0
c0019a0b:	eb 1b                	jmp    c0019a28 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a10:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019a15:	75 09                	jne    c0019a20 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019a17:	b8 09 00 00 00       	mov    eax,0x9
c0019a1c:	eb 0a                	jmp    c0019a28 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a1e:	66 90                	xchg   ax,ax
c0019a20:	b8 01 00 00 00       	mov    eax,0x1
c0019a25:	8d 76 00             	lea    esi,[esi+0x0]
c0019a28:	83 c4 2c             	add    esp,0x2c
c0019a2b:	c3                   	ret    

c0019a2c <FAT::tryMount(LogicalDisk*, int)>:
c0019a2c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019a32:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a37:	83 f8 14             	cmp    eax,0x14
c0019a3a:	75 18                	jne    c0019a54 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019a3c:	83 ec 0c             	sub    esp,0xc
c0019a3f:	68 24 31 02 c0       	push   0xc0023124
c0019a44:	e8 cd 51 ff ff       	call   c000ec16 <KePanic(char const*)>
c0019a49:	83 c4 10             	add    esp,0x10
c0019a4c:	b0 00                	mov    al,0x0
c0019a4e:	e9 ed 01 00 00       	jmp    c0019c40 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a53:	90                   	nop
c0019a54:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019a5b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019a61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019a67:	3d 00 02 00 00       	cmp    eax,0x200
c0019a6c:	74 0a                	je     c0019a78 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019a6e:	b0 00                	mov    al,0x0
c0019a70:	e9 cb 01 00 00       	jmp    c0019c40 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a75:	8d 76 00             	lea    esi,[esi+0x0]
c0019a78:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019a80:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019a87:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a8e:	83 f8 ff             	cmp    eax,0xffffffff
c0019a91:	74 09                	je     c0019a9c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019a93:	b0 01                	mov    al,0x1
c0019a95:	e9 a6 01 00 00       	jmp    c0019c40 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019a9a:	66 90                	xchg   ax,ax
c0019a9c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019aa6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019aae:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019ab5:	88 c2                	mov    dl,al
c0019ab7:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019abc:	01 d0                	add    eax,edx
c0019abe:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019ac5:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019acb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019ad2:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019ad9:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019ade:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019ae5:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019aec:	83 ec 0c             	sub    esp,0xc
c0019aef:	68 34 02 00 00       	push   0x234
c0019af4:	e8 d7 4d ff ff       	call   c000e8d0 <malloc>
c0019af9:	83 c4 10             	add    esp,0x10
c0019afc:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019b03:	83 ec 04             	sub    esp,0x4
c0019b06:	6a 00                	push   0x0
c0019b08:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019b0f:	50                   	push   eax
c0019b10:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b17:	e8 03 a3 fe ff       	call   c0003e1f <f_mount>
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019b26:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019b2e:	74 1c                	je     c0019b4c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019b30:	83 ec 0c             	sub    esp,0xc
c0019b33:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b3a:	e8 b1 4d ff ff       	call   c000e8f0 <rfree>
c0019b3f:	83 c4 10             	add    esp,0x10
c0019b42:	b0 00                	mov    al,0x0
c0019b44:	e9 f7 00 00 00       	jmp    c0019c40 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019b49:	8d 76 00             	lea    esi,[esi+0x0]
c0019b4c:	83 ec 04             	sub    esp,0x4
c0019b4f:	68 00 01 00 00       	push   0x100
c0019b54:	6a 00                	push   0x0
c0019b56:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b5d:	50                   	push   eax
c0019b5e:	e8 8d 69 fe ff       	call   c00004f0 <memset>
c0019b63:	83 c4 10             	add    esp,0x10
c0019b66:	83 ec 08             	sub    esp,0x8
c0019b69:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019b70:	50                   	push   eax
c0019b71:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b78:	50                   	push   eax
c0019b79:	e8 f2 6c fe ff       	call   c0000870 <strcat>
c0019b7e:	83 c4 10             	add    esp,0x10
c0019b81:	83 ec 08             	sub    esp,0x8
c0019b84:	68 32 31 02 c0       	push   0xc0023132
c0019b89:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019b90:	50                   	push   eax
c0019b91:	e8 da 6c fe ff       	call   c0000870 <strcat>
c0019b96:	83 c4 10             	add    esp,0x10
c0019b99:	83 ec 04             	sub    esp,0x4
c0019b9c:	6a 01                	push   0x1
c0019b9e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019ba5:	50                   	push   eax
c0019ba6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019baa:	50                   	push   eax
c0019bab:	e8 d1 a2 fe ff       	call   c0003e81 <f_open>
c0019bb0:	83 c4 10             	add    esp,0x10
c0019bb3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019bba:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019bc1:	85 c0                	test   eax,eax
c0019bc3:	74 0b                	je     c0019bd0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019bc5:	78 31                	js     c0019bf8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019bc7:	83 e8 04             	sub    eax,0x4
c0019bca:	83 f8 01             	cmp    eax,0x1
c0019bcd:	77 29                	ja     c0019bf8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019bcf:	90                   	nop
c0019bd0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019bd8:	83 ec 0c             	sub    esp,0xc
c0019bdb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bdf:	50                   	push   eax
c0019be0:	e8 4c aa fe ff       	call   c0004631 <f_close>
c0019be5:	83 c4 10             	add    esp,0x10
c0019be8:	90                   	nop
c0019be9:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019bf1:	85 c0                	test   eax,eax
c0019bf3:	74 43                	je     c0019c38 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019bf5:	eb 31                	jmp    c0019c28 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019bf7:	90                   	nop
c0019bf8:	83 ec 0c             	sub    esp,0xc
c0019bfb:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019c02:	e8 e9 4c ff ff       	call   c000e8f0 <rfree>
c0019c07:	83 c4 10             	add    esp,0x10
c0019c0a:	83 ec 04             	sub    esp,0x4
c0019c0d:	6a 00                	push   0x0
c0019c0f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c16:	50                   	push   eax
c0019c17:	6a 00                	push   0x0
c0019c19:	e8 01 a2 fe ff       	call   c0003e1f <f_mount>
c0019c1e:	83 c4 10             	add    esp,0x10
c0019c21:	b0 00                	mov    al,0x0
c0019c23:	eb 1b                	jmp    c0019c40 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019c25:	8d 76 00             	lea    esi,[esi+0x0]
c0019c28:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019c2d:	83 c0 01             	add    eax,0x1
c0019c30:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019c35:	8d 76 00             	lea    esi,[esi+0x0]
c0019c38:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019c3f:	90                   	nop
c0019c40:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019c46:	c3                   	ret    
c0019c47:	90                   	nop

c0019c48 <FAT::allocateSwapfile(char const*, int)>:
c0019c48:	55                   	push   ebp
c0019c49:	57                   	push   edi
c0019c4a:	56                   	push   esi
c0019c4b:	53                   	push   ebx
c0019c4c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019c52:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019c5d:	83 ec 0c             	sub    esp,0xc
c0019c60:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019c67:	e8 64 4c ff ff       	call   c000e8d0 <malloc>
c0019c6c:	83 c4 10             	add    esp,0x10
c0019c6f:	89 c7                	mov    edi,eax
c0019c71:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019c76:	83 ec 04             	sub    esp,0x4
c0019c79:	50                   	push   eax
c0019c7a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019c81:	57                   	push   edi
c0019c82:	e8 85 e4 fe ff       	call   c000810c <File::File(char const*, Process*)>
c0019c87:	83 c4 10             	add    esp,0x10
c0019c8a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019c91:	83 ec 04             	sub    esp,0x4
c0019c94:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019c98:	50                   	push   eax
c0019c99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c9d:	50                   	push   eax
c0019c9e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019ca5:	e8 82 e7 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c0019caa:	83 c4 10             	add    esp,0x10
c0019cad:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019cb4:	c1 e0 14             	shl    eax,0x14
c0019cb7:	89 c7                	mov    edi,eax
c0019cb9:	89 c5                	mov    ebp,eax
c0019cbb:	c1 fd 1f             	sar    ebp,0x1f
c0019cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019cc6:	89 f9                	mov    ecx,edi
c0019cc8:	31 c1                	xor    ecx,eax
c0019cca:	89 cb                	mov    ebx,ecx
c0019ccc:	89 e9                	mov    ecx,ebp
c0019cce:	31 d1                	xor    ecx,edx
c0019cd0:	89 ce                	mov    esi,ecx
c0019cd2:	89 f0                	mov    eax,esi
c0019cd4:	09 d8                	or     eax,ebx
c0019cd6:	0f 84 9c 00 00 00    	je     c0019d78 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019cdc:	83 ec 0c             	sub    esp,0xc
c0019cdf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019ce6:	e8 0d e6 fe ff       	call   c00082f8 <File::unlink()>
c0019ceb:	83 c4 10             	add    esp,0x10
c0019cee:	83 ec 08             	sub    esp,0x8
c0019cf1:	6a 12                	push   0x12
c0019cf3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019cfa:	e8 2b e4 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019cff:	83 c4 10             	add    esp,0x10
c0019d02:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d09:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019d0f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019d16:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d1d:	c1 e0 14             	shl    eax,0x14
c0019d20:	83 ec 04             	sub    esp,0x4
c0019d23:	6a 01                	push   0x1
c0019d25:	50                   	push   eax
c0019d26:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019d2d:	e8 86 b7 fe ff       	call   c00054b8 <f_expand>
c0019d32:	83 c4 10             	add    esp,0x10
c0019d35:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d3e:	83 c0 10             	add    eax,0x10
c0019d41:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d43:	83 ec 0c             	sub    esp,0xc
c0019d46:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019d4a:	52                   	push   edx
c0019d4b:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019d4f:	52                   	push   edx
c0019d50:	6a 00                	push   0x0
c0019d52:	68 00 04 00 00       	push   0x400
c0019d57:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019d5e:	ff d0                	call   eax
c0019d60:	83 c4 20             	add    esp,0x20
c0019d63:	83 ec 0c             	sub    esp,0xc
c0019d66:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d6d:	e8 16 e4 fe ff       	call   c0008188 <File::close()>
c0019d72:	83 c4 10             	add    esp,0x10
c0019d75:	8d 76 00             	lea    esi,[esi+0x0]
c0019d78:	83 ec 08             	sub    esp,0x8
c0019d7b:	6a 01                	push   0x1
c0019d7d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d84:	e8 a1 e3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c0019d89:	83 c4 10             	add    esp,0x10
c0019d8c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d93:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d95:	83 c0 0c             	add    eax,0xc
c0019d98:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d9a:	83 ec 0c             	sub    esp,0xc
c0019d9d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019da1:	52                   	push   edx
c0019da2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019da6:	52                   	push   edx
c0019da7:	6a 00                	push   0x0
c0019da9:	6a 04                	push   0x4
c0019dab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019db2:	ff d0                	call   eax
c0019db4:	83 c4 20             	add    esp,0x20
c0019db7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019dbe:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019dc4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019dcb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019dd2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019dd5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019ddc:	83 ec 0c             	sub    esp,0xc
c0019ddf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019de6:	e8 9d e3 fe ff       	call   c0008188 <File::close()>
c0019deb:	83 c4 10             	add    esp,0x10
c0019dee:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019df5:	ba 00 00 00 00       	mov    edx,0x0
c0019dfa:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019e00:	5b                   	pop    ebx
c0019e01:	5e                   	pop    esi
c0019e02:	5f                   	pop    edi
c0019e03:	5d                   	pop    ebp
c0019e04:	c3                   	ret    
c0019e05:	90                   	nop
c0019e06:	66 90                	xchg   ax,ax

c0019e08 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019e08:	57                   	push   edi
c0019e09:	56                   	push   esi
c0019e0a:	53                   	push   ebx
c0019e0b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019e11:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019e19:	74 0d                	je     c0019e28 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019e1b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019e23:	75 0f                	jne    c0019e34 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019e25:	8d 76 00             	lea    esi,[esi+0x0]
c0019e28:	b8 04 00 00 00       	mov    eax,0x4
c0019e2d:	e9 3a 01 00 00       	jmp    c0019f6c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019e32:	66 90                	xchg   ax,ax
c0019e34:	83 ec 08             	sub    esp,0x8
c0019e37:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019e3e:	50                   	push   eax
c0019e3f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019e46:	e8 b2 aa fe ff       	call   c00048fd <f_readdir>
c0019e4b:	83 c4 10             	add    esp,0x10
c0019e4e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019e55:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019e5c:	83 ec 0c             	sub    esp,0xc
c0019e5f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019e66:	83 c0 16             	add    eax,0x16
c0019e69:	50                   	push   eax
c0019e6a:	e8 11 67 fe ff       	call   c0000580 <strlen>
c0019e6f:	83 c4 10             	add    esp,0x10
c0019e72:	ba 00 00 00 00       	mov    edx,0x0
c0019e77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019e7b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e7f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019e86:	0f b6 c0             	movzx  eax,al
c0019e89:	83 e0 10             	and    eax,0x10
c0019e8c:	74 0a                	je     c0019e98 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019e8e:	b8 02 00 00 00       	mov    eax,0x2
c0019e93:	eb 0b                	jmp    c0019ea0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019e95:	8d 76 00             	lea    esi,[esi+0x0]
c0019e98:	b8 01 00 00 00       	mov    eax,0x1
c0019e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ea0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019ea4:	83 ec 08             	sub    esp,0x8
c0019ea7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019eae:	83 c0 16             	add    eax,0x16
c0019eb1:	50                   	push   eax
c0019eb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019eb6:	83 c0 10             	add    eax,0x10
c0019eb9:	50                   	push   eax
c0019eba:	e8 91 67 fe ff       	call   c0000650 <strcpy>
c0019ebf:	83 c4 10             	add    esp,0x10
c0019ec2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019ec9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019ed0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ed4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019edb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019ee2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019ee9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019ef0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019ef7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019efe:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019f05:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019f0c:	89 c6                	mov    esi,eax
c0019f0e:	89 d7                	mov    edi,edx
c0019f10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f12:	89 c8                	mov    eax,ecx
c0019f14:	89 fa                	mov    edx,edi
c0019f16:	89 f3                	mov    ebx,esi
c0019f18:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019f1f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019f26:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019f2d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019f34:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019f3a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019f41:	0f be c0             	movsx  eax,al
c0019f44:	85 c0                	test   eax,eax
c0019f46:	75 08                	jne    c0019f50 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019f48:	b8 07 00 00 00       	mov    eax,0x7
c0019f4d:	eb 1d                	jmp    c0019f6c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f4f:	90                   	nop
c0019f50:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019f57:	85 c0                	test   eax,eax
c0019f59:	75 09                	jne    c0019f64 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019f5b:	b8 00 00 00 00       	mov    eax,0x0
c0019f60:	eb 0a                	jmp    c0019f6c <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019f62:	66 90                	xchg   ax,ax
c0019f64:	b8 01 00 00 00       	mov    eax,0x1
c0019f69:	8d 76 00             	lea    esi,[esi+0x0]
c0019f6c:	81 c4 50 02 00 00    	add    esp,0x250
c0019f72:	5b                   	pop    ebx
c0019f73:	5e                   	pop    esi
c0019f74:	5f                   	pop    edi
c0019f75:	c3                   	ret    
c0019f76:	66 90                	xchg   ax,ax

c0019f78 <FAT::read(void*, unsigned long, void*, int*)>:
c0019f78:	83 ec 1c             	sub    esp,0x1c
c0019f7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019f80:	74 0a                	je     c0019f8c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019f82:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019f87:	75 0b                	jne    c0019f94 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019f89:	8d 76 00             	lea    esi,[esi+0x0]
c0019f8c:	b8 04 00 00 00       	mov    eax,0x4
c0019f91:	eb 41                	jmp    c0019fd4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019f93:	90                   	nop
c0019f94:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f98:	50                   	push   eax
c0019f99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019fa1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019fa5:	e8 9a a1 fe ff       	call   c0004144 <f_read>
c0019faa:	83 c4 10             	add    esp,0x10
c0019fad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fb5:	89 c2                	mov    edx,eax
c0019fb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fbb:	89 10                	mov    DWORD PTR [eax],edx
c0019fbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fc1:	85 c0                	test   eax,eax
c0019fc3:	75 07                	jne    c0019fcc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019fc5:	b8 00 00 00 00       	mov    eax,0x0
c0019fca:	eb 08                	jmp    c0019fd4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019fcc:	b8 01 00 00 00       	mov    eax,0x1
c0019fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0019fd4:	83 c4 1c             	add    esp,0x1c
c0019fd7:	c3                   	ret    

c0019fd8 <FAT::write(void*, unsigned long, void*, int*)>:
c0019fd8:	83 ec 1c             	sub    esp,0x1c
c0019fdb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019fe0:	74 0a                	je     c0019fec <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019fe2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019fe7:	75 0b                	jne    c0019ff4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fec:	b8 04 00 00 00       	mov    eax,0x4
c0019ff1:	eb 41                	jmp    c001a034 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019ff3:	90                   	nop
c0019ff4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ff8:	50                   	push   eax
c0019ff9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ffd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a001:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a005:	e8 1b a3 fe ff       	call   c0004325 <f_write>
c001a00a:	83 c4 10             	add    esp,0x10
c001a00d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a015:	89 c2                	mov    edx,eax
c001a017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a01b:	89 10                	mov    DWORD PTR [eax],edx
c001a01d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a021:	85 c0                	test   eax,eax
c001a023:	75 07                	jne    c001a02c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a025:	b8 00 00 00 00       	mov    eax,0x0
c001a02a:	eb 08                	jmp    c001a034 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a02c:	b8 01 00 00 00       	mov    eax,0x1
c001a031:	8d 76 00             	lea    esi,[esi+0x0]
c001a034:	83 c4 1c             	add    esp,0x1c
c001a037:	c3                   	ret    

c001a038 <FAT::close(void*)>:
c001a038:	83 ec 1c             	sub    esp,0x1c
c001a03b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a040:	75 0a                	jne    c001a04c <FAT::close(void*)+0x14>
c001a042:	b8 04 00 00 00       	mov    eax,0x4
c001a047:	eb 3f                	jmp    c001a088 <FAT::close(void*)+0x50>
c001a049:	8d 76 00             	lea    esi,[esi+0x0]
c001a04c:	83 ec 0c             	sub    esp,0xc
c001a04f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a053:	e8 d9 a5 fe ff       	call   c0004631 <f_close>
c001a058:	83 c4 10             	add    esp,0x10
c001a05b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a05f:	83 ec 0c             	sub    esp,0xc
c001a062:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a066:	e8 75 48 ff ff       	call   c000e8e0 <free>
c001a06b:	83 c4 10             	add    esp,0x10
c001a06e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a072:	85 c0                	test   eax,eax
c001a074:	75 0a                	jne    c001a080 <FAT::close(void*)+0x48>
c001a076:	b8 00 00 00 00       	mov    eax,0x0
c001a07b:	eb 0b                	jmp    c001a088 <FAT::close(void*)+0x50>
c001a07d:	8d 76 00             	lea    esi,[esi+0x0]
c001a080:	b8 01 00 00 00       	mov    eax,0x1
c001a085:	8d 76 00             	lea    esi,[esi+0x0]
c001a088:	83 c4 1c             	add    esp,0x1c
c001a08b:	c3                   	ret    

c001a08c <FAT::closeDir(void*)>:
c001a08c:	83 ec 1c             	sub    esp,0x1c
c001a08f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a094:	75 0a                	jne    c001a0a0 <FAT::closeDir(void*)+0x14>
c001a096:	b8 04 00 00 00       	mov    eax,0x4
c001a09b:	eb 3f                	jmp    c001a0dc <FAT::closeDir(void*)+0x50>
c001a09d:	8d 76 00             	lea    esi,[esi+0x0]
c001a0a0:	83 ec 0c             	sub    esp,0xc
c001a0a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0a7:	e8 2f a8 fe ff       	call   c00048db <f_closedir>
c001a0ac:	83 c4 10             	add    esp,0x10
c001a0af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0b3:	83 ec 0c             	sub    esp,0xc
c001a0b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0ba:	e8 21 48 ff ff       	call   c000e8e0 <free>
c001a0bf:	83 c4 10             	add    esp,0x10
c001a0c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0c6:	85 c0                	test   eax,eax
c001a0c8:	75 0a                	jne    c001a0d4 <FAT::closeDir(void*)+0x48>
c001a0ca:	b8 00 00 00 00       	mov    eax,0x0
c001a0cf:	eb 0b                	jmp    c001a0dc <FAT::closeDir(void*)+0x50>
c001a0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001a0d4:	b8 01 00 00 00       	mov    eax,0x1
c001a0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0dc:	83 c4 1c             	add    esp,0x1c
c001a0df:	c3                   	ret    

c001a0e0 <FAT::truncate(void*, unsigned long long)>:
c001a0e0:	83 ec 2c             	sub    esp,0x2c
c001a0e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a0eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a0ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0f3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a0f8:	75 0a                	jne    c001a104 <FAT::truncate(void*, unsigned long long)+0x24>
c001a0fa:	b8 04 00 00 00       	mov    eax,0x4
c001a0ff:	eb 47                	jmp    c001a148 <FAT::truncate(void*, unsigned long long)+0x68>
c001a101:	8d 76 00             	lea    esi,[esi+0x0]
c001a104:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a108:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a10b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a10f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a117:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a11b:	83 ec 08             	sub    esp,0x8
c001a11e:	50                   	push   eax
c001a11f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a123:	e8 38 a5 fe ff       	call   c0004660 <f_lseek>
c001a128:	83 c4 10             	add    esp,0x10
c001a12b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a12f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a133:	85 c0                	test   eax,eax
c001a135:	75 09                	jne    c001a140 <FAT::truncate(void*, unsigned long long)+0x60>
c001a137:	b8 00 00 00 00       	mov    eax,0x0
c001a13c:	eb 0a                	jmp    c001a148 <FAT::truncate(void*, unsigned long long)+0x68>
c001a13e:	66 90                	xchg   ax,ax
c001a140:	b8 01 00 00 00       	mov    eax,0x1
c001a145:	8d 76 00             	lea    esi,[esi+0x0]
c001a148:	83 c4 2c             	add    esp,0x2c
c001a14b:	c3                   	ret    

c001a14c <FAT::seek(void*, unsigned long long)>:
c001a14c:	83 ec 2c             	sub    esp,0x2c
c001a14f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a153:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a157:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a15b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a15f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a164:	75 0a                	jne    c001a170 <FAT::seek(void*, unsigned long long)+0x24>
c001a166:	b8 04 00 00 00       	mov    eax,0x4
c001a16b:	eb 33                	jmp    c001a1a0 <FAT::seek(void*, unsigned long long)+0x54>
c001a16d:	8d 76 00             	lea    esi,[esi+0x0]
c001a170:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a174:	83 ec 08             	sub    esp,0x8
c001a177:	50                   	push   eax
c001a178:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a17c:	e8 df a4 fe ff       	call   c0004660 <f_lseek>
c001a181:	83 c4 10             	add    esp,0x10
c001a184:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a18c:	85 c0                	test   eax,eax
c001a18e:	75 08                	jne    c001a198 <FAT::seek(void*, unsigned long long)+0x4c>
c001a190:	b8 00 00 00 00       	mov    eax,0x0
c001a195:	eb 09                	jmp    c001a1a0 <FAT::seek(void*, unsigned long long)+0x54>
c001a197:	90                   	nop
c001a198:	b8 01 00 00 00       	mov    eax,0x1
c001a19d:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a0:	83 c4 2c             	add    esp,0x2c
c001a1a3:	c3                   	ret    

c001a1a4 <fatWrapperReadDisk>:
c001a1a4:	53                   	push   ebx
c001a1a5:	83 ec 18             	sub    esp,0x18
c001a1a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1ac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1b5:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a1bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a1c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1c4:	ba 00 00 00 00       	mov    edx,0x0
c001a1c9:	83 ec 0c             	sub    esp,0xc
c001a1cc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1d0:	53                   	push   ebx
c001a1d1:	52                   	push   edx
c001a1d2:	50                   	push   eax
c001a1d3:	51                   	push   ecx
c001a1d4:	e8 f7 fe fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001a1d9:	83 c4 20             	add    esp,0x20
c001a1dc:	83 c4 18             	add    esp,0x18
c001a1df:	5b                   	pop    ebx
c001a1e0:	c3                   	ret    
c001a1e1:	8d 76 00             	lea    esi,[esi+0x0]

c001a1e4 <fatWrapperWriteDisk>:
c001a1e4:	53                   	push   ebx
c001a1e5:	83 ec 18             	sub    esp,0x18
c001a1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1f0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1f5:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a1fc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a200:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a204:	ba 00 00 00 00       	mov    edx,0x0
c001a209:	83 ec 0c             	sub    esp,0xc
c001a20c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a210:	53                   	push   ebx
c001a211:	52                   	push   edx
c001a212:	50                   	push   eax
c001a213:	51                   	push   ecx
c001a214:	e8 23 ff fe ff       	call   c000a13c <LogicalDisk::write(unsigned long long, int, void*)>
c001a219:	83 c4 20             	add    esp,0x20
c001a21c:	83 c4 18             	add    esp,0x18
c001a21f:	5b                   	pop    ebx
c001a220:	c3                   	ret    
c001a221:	8d 76 00             	lea    esi,[esi+0x0]

c001a224 <fatWrapperIoctl>:
c001a224:	53                   	push   ebx
c001a225:	83 ec 28             	sub    esp,0x28
c001a228:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a22c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a230:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a234:	88 d0                	mov    al,dl
c001a236:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a23a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a23f:	83 f8 02             	cmp    eax,0x2
c001a242:	75 34                	jne    c001a278 <fatWrapperIoctl+0x54>
c001a244:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a248:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a24c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a251:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a258:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a25e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a264:	89 c2                	mov    edx,eax
c001a266:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a26a:	66 89 10             	mov    WORD PTR [eax],dx
c001a26d:	b8 00 00 00 00       	mov    eax,0x0
c001a272:	e9 c5 00 00 00       	jmp    c001a33c <fatWrapperIoctl+0x118>
c001a277:	90                   	nop
c001a278:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a27d:	83 f8 01             	cmp    eax,0x1
c001a280:	75 6a                	jne    c001a2ec <fatWrapperIoctl+0xc8>
c001a282:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a28a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a28f:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a296:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a29c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a2a2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a2a8:	89 c8                	mov    eax,ecx
c001a2aa:	89 da                	mov    edx,ebx
c001a2ac:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a2b0:	c1 e0 0a             	shl    eax,0xa
c001a2b3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a2b8:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a2bf:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a2c5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a2cb:	89 cb                	mov    ebx,ecx
c001a2cd:	c1 fb 1f             	sar    ebx,0x1f
c001a2d0:	53                   	push   ebx
c001a2d1:	51                   	push   ecx
c001a2d2:	52                   	push   edx
c001a2d3:	50                   	push   eax
c001a2d4:	e8 9b 57 00 00       	call   c001fa74 <__udivdi3>
c001a2d9:	83 c4 10             	add    esp,0x10
c001a2dc:	89 c2                	mov    edx,eax
c001a2de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a2e2:	89 10                	mov    DWORD PTR [eax],edx
c001a2e4:	b8 00 00 00 00       	mov    eax,0x0
c001a2e9:	eb 51                	jmp    c001a33c <fatWrapperIoctl+0x118>
c001a2eb:	90                   	nop
c001a2ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a2f1:	85 c0                	test   eax,eax
c001a2f3:	75 07                	jne    c001a2fc <fatWrapperIoctl+0xd8>
c001a2f5:	b8 00 00 00 00       	mov    eax,0x0
c001a2fa:	eb 40                	jmp    c001a33c <fatWrapperIoctl+0x118>
c001a2fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a301:	83 f8 03             	cmp    eax,0x3
c001a304:	75 1a                	jne    c001a320 <fatWrapperIoctl+0xfc>
c001a306:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a30a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a30e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a312:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a318:	b8 00 00 00 00       	mov    eax,0x0
c001a31d:	eb 1d                	jmp    c001a33c <fatWrapperIoctl+0x118>
c001a31f:	90                   	nop
c001a320:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a325:	83 f8 04             	cmp    eax,0x4
c001a328:	75 0a                	jne    c001a334 <fatWrapperIoctl+0x110>
c001a32a:	b8 00 00 00 00       	mov    eax,0x0
c001a32f:	eb 0b                	jmp    c001a33c <fatWrapperIoctl+0x118>
c001a331:	8d 76 00             	lea    esi,[esi+0x0]
c001a334:	b8 04 00 00 00       	mov    eax,0x4
c001a339:	8d 76 00             	lea    esi,[esi+0x0]
c001a33c:	83 c4 28             	add    esp,0x28
c001a33f:	5b                   	pop    ebx
c001a340:	c3                   	ret    
c001a341:	90                   	nop
c001a342:	66 90                	xchg   ax,ax

c001a344 <FAT::FAT()>:
c001a344:	83 ec 1c             	sub    esp,0x1c
c001a347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a34b:	83 ec 0c             	sub    esp,0xc
c001a34e:	50                   	push   eax
c001a34f:	e8 02 da fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001a354:	83 c4 10             	add    esp,0x10
c001a357:	ba 48 31 02 c0       	mov    edx,0xc0023148
c001a35c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a360:	89 10                	mov    DWORD PTR [eax],edx
c001a362:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a36c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a374:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a379:	7f 19                	jg     c001a394 <FAT::FAT()+0x50>
c001a37b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a37f:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a38a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a38f:	eb e3                	jmp    c001a374 <FAT::FAT()+0x30>
c001a391:	8d 76 00             	lea    esi,[esi+0x0]
c001a394:	90                   	nop
c001a395:	83 c4 1c             	add    esp,0x1c
c001a398:	c3                   	ret    
c001a399:	90                   	nop
c001a39a:	66 90                	xchg   ax,ax

c001a39c <FAT::fixFilepath(char*)>:
c001a39c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3a0:	8a 00                	mov    al,BYTE PTR [eax]
c001a3a2:	0f be c0             	movsx  eax,al
c001a3a5:	83 f8 40             	cmp    eax,0x40
c001a3a8:	7e 2e                	jle    c001a3d8 <FAT::fixFilepath(char*)+0x3c>
c001a3aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3ae:	8a 00                	mov    al,BYTE PTR [eax]
c001a3b0:	83 e8 41             	sub    eax,0x41
c001a3b3:	88 c2                	mov    dl,al
c001a3b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3b9:	88 10                	mov    BYTE PTR [eax],dl
c001a3bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3bf:	8a 00                	mov    al,BYTE PTR [eax]
c001a3c1:	0f be c0             	movsx  eax,al
c001a3c4:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a3cb:	83 c0 30             	add    eax,0x30
c001a3ce:	88 c2                	mov    dl,al
c001a3d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3d4:	88 10                	mov    BYTE PTR [eax],dl
c001a3d6:	66 90                	xchg   ax,ax
c001a3d8:	90                   	nop
c001a3d9:	c3                   	ret    
c001a3da:	66 90                	xchg   ax,ax

c001a3dc <FAT::open(char const*, void**, FileOpenMode)>:
c001a3dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3ea:	74 0c                	je     c001a3f8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a3ec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a3f4:	75 0e                	jne    c001a404 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a3f6:	66 90                	xchg   ax,ax
c001a3f8:	b8 04 00 00 00       	mov    eax,0x4
c001a3fd:	e9 46 01 00 00       	jmp    c001a548 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a402:	66 90                	xchg   ax,ax
c001a404:	83 ec 08             	sub    esp,0x8
c001a407:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a40e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a412:	50                   	push   eax
c001a413:	e8 38 62 fe ff       	call   c0000650 <strcpy>
c001a418:	83 c4 10             	add    esp,0x10
c001a41b:	83 ec 08             	sub    esp,0x8
c001a41e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a422:	50                   	push   eax
c001a423:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a42a:	e8 6d ff ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001a42f:	83 c4 10             	add    esp,0x10
c001a432:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a43a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a441:	83 e0 01             	and    eax,0x1
c001a444:	74 12                	je     c001a458 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a446:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a44d:	83 c8 01             	or     eax,0x1
c001a450:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a457:	90                   	nop
c001a458:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a45f:	83 e0 04             	and    eax,0x4
c001a462:	74 24                	je     c001a488 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a464:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a46b:	83 c8 30             	or     eax,0x30
c001a46e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a475:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a47c:	83 c8 02             	or     eax,0x2
c001a47f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a486:	66 90                	xchg   ax,ax
c001a488:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a48f:	83 e0 02             	and    eax,0x2
c001a492:	74 14                	je     c001a4a8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a494:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a49b:	83 c8 02             	or     eax,0x2
c001a49e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4af:	83 e0 08             	and    eax,0x8
c001a4b2:	74 14                	je     c001a4c8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a4b4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4bb:	83 c8 04             	or     eax,0x4
c001a4be:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4cf:	83 e0 10             	and    eax,0x10
c001a4d2:	74 14                	je     c001a4e8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a4d4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4db:	83 c8 08             	or     eax,0x8
c001a4de:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4e8:	83 ec 0c             	sub    esp,0xc
c001a4eb:	68 28 02 00 00       	push   0x228
c001a4f0:	e8 db 43 ff ff       	call   c000e8d0 <malloc>
c001a4f5:	83 c4 10             	add    esp,0x10
c001a4f8:	89 c2                	mov    edx,eax
c001a4fa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a501:	89 10                	mov    DWORD PTR [eax],edx
c001a503:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a50b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a512:	8b 00                	mov    eax,DWORD PTR [eax]
c001a514:	83 ec 04             	sub    esp,0x4
c001a517:	52                   	push   edx
c001a518:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a51c:	52                   	push   edx
c001a51d:	50                   	push   eax
c001a51e:	e8 5e 99 fe ff       	call   c0003e81 <f_open>
c001a523:	83 c4 10             	add    esp,0x10
c001a526:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a52d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a535:	74 09                	je     c001a540 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a537:	b8 01 00 00 00       	mov    eax,0x1
c001a53c:	eb 0a                	jmp    c001a548 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a53e:	66 90                	xchg   ax,ax
c001a540:	b8 00 00 00 00       	mov    eax,0x0
c001a545:	8d 76 00             	lea    esi,[esi+0x0]
c001a548:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a54e:	c3                   	ret    
c001a54f:	90                   	nop

c001a550 <FAT::openDir(char const*, void**)>:
c001a550:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a556:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a55e:	74 0c                	je     c001a56c <FAT::openDir(char const*, void**)+0x1c>
c001a560:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a568:	75 0e                	jne    c001a578 <FAT::openDir(char const*, void**)+0x28>
c001a56a:	66 90                	xchg   ax,ax
c001a56c:	b8 04 00 00 00       	mov    eax,0x4
c001a571:	e9 82 00 00 00       	jmp    c001a5f8 <FAT::openDir(char const*, void**)+0xa8>
c001a576:	66 90                	xchg   ax,ax
c001a578:	83 ec 08             	sub    esp,0x8
c001a57b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a582:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a586:	50                   	push   eax
c001a587:	e8 c4 60 fe ff       	call   c0000650 <strcpy>
c001a58c:	83 c4 10             	add    esp,0x10
c001a58f:	83 ec 08             	sub    esp,0x8
c001a592:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a596:	50                   	push   eax
c001a597:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a59e:	e8 f9 fd ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001a5a3:	83 c4 10             	add    esp,0x10
c001a5a6:	83 ec 0c             	sub    esp,0xc
c001a5a9:	6a 30                	push   0x30
c001a5ab:	e8 20 43 ff ff       	call   c000e8d0 <malloc>
c001a5b0:	83 c4 10             	add    esp,0x10
c001a5b3:	89 c2                	mov    edx,eax
c001a5b5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5bc:	89 10                	mov    DWORD PTR [eax],edx
c001a5be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a5c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5c7:	83 ec 08             	sub    esp,0x8
c001a5ca:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a5ce:	52                   	push   edx
c001a5cf:	50                   	push   eax
c001a5d0:	e8 3b a2 fe ff       	call   c0004810 <f_opendir>
c001a5d5:	83 c4 10             	add    esp,0x10
c001a5d8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a5df:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a5e7:	74 07                	je     c001a5f0 <FAT::openDir(char const*, void**)+0xa0>
c001a5e9:	b8 01 00 00 00       	mov    eax,0x1
c001a5ee:	eb 08                	jmp    c001a5f8 <FAT::openDir(char const*, void**)+0xa8>
c001a5f0:	b8 00 00 00 00       	mov    eax,0x0
c001a5f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a5f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5fe:	c3                   	ret    
c001a5ff:	90                   	nop

c001a600 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a600:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a606:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a60e:	75 0c                	jne    c001a61c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a610:	b8 04 00 00 00       	mov    eax,0x4
c001a615:	e9 d6 00 00 00       	jmp    c001a6f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a61a:	66 90                	xchg   ax,ax
c001a61c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a624:	75 0a                	jne    c001a630 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a626:	b8 04 00 00 00       	mov    eax,0x4
c001a62b:	e9 c0 00 00 00       	jmp    c001a6f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a630:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a638:	75 0a                	jne    c001a644 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a63a:	b8 04 00 00 00       	mov    eax,0x4
c001a63f:	e9 ac 00 00 00       	jmp    c001a6f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a644:	83 ec 08             	sub    esp,0x8
c001a647:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a64e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a655:	50                   	push   eax
c001a656:	e8 f5 5f fe ff       	call   c0000650 <strcpy>
c001a65b:	83 c4 10             	add    esp,0x10
c001a65e:	83 ec 08             	sub    esp,0x8
c001a661:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a668:	50                   	push   eax
c001a669:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a670:	e8 27 fd ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001a675:	83 c4 10             	add    esp,0x10
c001a678:	83 ec 08             	sub    esp,0x8
c001a67b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a67f:	50                   	push   eax
c001a680:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a687:	50                   	push   eax
c001a688:	e8 02 a3 fe ff       	call   c000498f <f_stat>
c001a68d:	83 c4 10             	add    esp,0x10
c001a690:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a697:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a69e:	85 c0                	test   eax,eax
c001a6a0:	74 0a                	je     c001a6ac <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a6a2:	83 f8 04             	cmp    eax,0x4
c001a6a5:	74 39                	je     c001a6e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a6a7:	eb 3f                	jmp    c001a6e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a6a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a6ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6b0:	0f b6 c0             	movzx  eax,al
c001a6b3:	83 e0 10             	and    eax,0x10
c001a6b6:	0f 95 c2             	setne  dl
c001a6b9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a6c0:	88 10                	mov    BYTE PTR [eax],dl
c001a6c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6c6:	ba 00 00 00 00       	mov    edx,0x0
c001a6cb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a6d2:	89 01                	mov    DWORD PTR [ecx],eax
c001a6d4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a6d7:	b8 00 00 00 00       	mov    eax,0x0
c001a6dc:	eb 12                	jmp    c001a6f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6de:	66 90                	xchg   ax,ax
c001a6e0:	b8 02 00 00 00       	mov    eax,0x2
c001a6e5:	eb 09                	jmp    c001a6f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6e7:	90                   	nop
c001a6e8:	b8 01 00 00 00       	mov    eax,0x1
c001a6ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a6f0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a6f6:	c3                   	ret    
c001a6f7:	90                   	nop

c001a6f8 <FAT::unlink(char const*)>:
c001a6f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a6fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a706:	75 08                	jne    c001a710 <FAT::unlink(char const*)+0x18>
c001a708:	b8 04 00 00 00       	mov    eax,0x4
c001a70d:	eb 61                	jmp    c001a770 <FAT::unlink(char const*)+0x78>
c001a70f:	90                   	nop
c001a710:	83 ec 08             	sub    esp,0x8
c001a713:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a71a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a71e:	50                   	push   eax
c001a71f:	e8 2c 5f fe ff       	call   c0000650 <strcpy>
c001a724:	83 c4 10             	add    esp,0x10
c001a727:	83 ec 08             	sub    esp,0x8
c001a72a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a72e:	50                   	push   eax
c001a72f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a736:	e8 61 fc ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001a73b:	83 c4 10             	add    esp,0x10
c001a73e:	83 ec 0c             	sub    esp,0xc
c001a741:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a745:	50                   	push   eax
c001a746:	e8 b6 a4 fe ff       	call   c0004c01 <f_unlink>
c001a74b:	83 c4 10             	add    esp,0x10
c001a74e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a755:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a75c:	85 c0                	test   eax,eax
c001a75e:	75 08                	jne    c001a768 <FAT::unlink(char const*)+0x70>
c001a760:	b8 00 00 00 00       	mov    eax,0x0
c001a765:	eb 09                	jmp    c001a770 <FAT::unlink(char const*)+0x78>
c001a767:	90                   	nop
c001a768:	b8 01 00 00 00       	mov    eax,0x1
c001a76d:	8d 76 00             	lea    esi,[esi+0x0]
c001a770:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a776:	c3                   	ret    
c001a777:	90                   	nop

c001a778 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a778:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a77e:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c001a785:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c001a78c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a790:	88 d0                	mov    al,dl
c001a792:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a796:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a79e:	75 0c                	jne    c001a7ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c001a7a0:	b8 04 00 00 00       	mov    eax,0x4
c001a7a5:	e9 7e 01 00 00       	jmp    c001a928 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a7aa:	66 90                	xchg   ax,ax
c001a7ac:	83 ec 08             	sub    esp,0x8
c001a7af:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7b6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7ba:	50                   	push   eax
c001a7bb:	e8 90 5e fe ff       	call   c0000650 <strcpy>
c001a7c0:	83 c4 10             	add    esp,0x10
c001a7c3:	83 ec 08             	sub    esp,0x8
c001a7c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7ca:	50                   	push   eax
c001a7cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a7d2:	e8 c5 fb ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001a7d7:	83 c4 10             	add    esp,0x10
c001a7da:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a7e2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a7ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a7ef:	83 e0 01             	and    eax,0x1
c001a7f2:	74 14                	je     c001a808 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c001a7f4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a7fb:	83 c8 01             	or     eax,0x1
c001a7fe:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a805:	8d 76 00             	lea    esi,[esi+0x0]
c001a808:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a80d:	83 e0 02             	and    eax,0x2
c001a810:	74 12                	je     c001a824 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c001a812:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a819:	83 c8 20             	or     eax,0x20
c001a81c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a823:	90                   	nop
c001a824:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a829:	83 e0 04             	and    eax,0x4
c001a82c:	74 12                	je     c001a840 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001a82e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a835:	83 c8 04             	or     eax,0x4
c001a838:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a83f:	90                   	nop
c001a840:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a845:	83 e0 08             	and    eax,0x8
c001a848:	74 12                	je     c001a85c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001a84a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a851:	83 c8 02             	or     eax,0x2
c001a854:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a85b:	90                   	nop
c001a85c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a861:	83 e0 01             	and    eax,0x1
c001a864:	74 12                	je     c001a878 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c001a866:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a86d:	83 c8 01             	or     eax,0x1
c001a870:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a877:	90                   	nop
c001a878:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a87d:	83 e0 02             	and    eax,0x2
c001a880:	74 12                	je     c001a894 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c001a882:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a889:	83 c8 20             	or     eax,0x20
c001a88c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a893:	90                   	nop
c001a894:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a899:	83 e0 04             	and    eax,0x4
c001a89c:	74 12                	je     c001a8b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c001a89e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8a5:	83 c8 04             	or     eax,0x4
c001a8a8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8af:	90                   	nop
c001a8b0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8b5:	83 e0 08             	and    eax,0x8
c001a8b8:	74 12                	je     c001a8cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c001a8ba:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8c1:	83 c8 02             	or     eax,0x2
c001a8c4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8cb:	90                   	nop
c001a8cc:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a8d3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8da:	09 d0                	or     eax,edx
c001a8dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8e3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a8eb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a8f3:	83 ec 04             	sub    esp,0x4
c001a8f6:	52                   	push   edx
c001a8f7:	50                   	push   eax
c001a8f8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a8fc:	50                   	push   eax
c001a8fd:	e8 72 a7 fe ff       	call   c0005074 <f_chmod>
c001a902:	83 c4 10             	add    esp,0x10
c001a905:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a90c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a913:	85 c0                	test   eax,eax
c001a915:	75 09                	jne    c001a920 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c001a917:	b8 00 00 00 00       	mov    eax,0x0
c001a91c:	eb 0a                	jmp    c001a928 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c001a91e:	66 90                	xchg   ax,ax
c001a920:	b8 01 00 00 00       	mov    eax,0x1
c001a925:	8d 76 00             	lea    esi,[esi+0x0]
c001a928:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a92e:	c3                   	ret    
c001a92f:	90                   	nop

c001a930 <FAT::rename(char const*, char const*)>:
c001a930:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a936:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a93e:	74 0c                	je     c001a94c <FAT::rename(char const*, char const*)+0x1c>
c001a940:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a948:	75 0e                	jne    c001a958 <FAT::rename(char const*, char const*)+0x28>
c001a94a:	66 90                	xchg   ax,ax
c001a94c:	b8 04 00 00 00       	mov    eax,0x4
c001a951:	e9 9e 00 00 00       	jmp    c001a9f4 <FAT::rename(char const*, char const*)+0xc4>
c001a956:	66 90                	xchg   ax,ax
c001a958:	83 ec 08             	sub    esp,0x8
c001a95b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a962:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a969:	50                   	push   eax
c001a96a:	e8 e1 5c fe ff       	call   c0000650 <strcpy>
c001a96f:	83 c4 10             	add    esp,0x10
c001a972:	83 ec 08             	sub    esp,0x8
c001a975:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a97c:	50                   	push   eax
c001a97d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a984:	e8 13 fa ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001a989:	83 c4 10             	add    esp,0x10
c001a98c:	83 ec 08             	sub    esp,0x8
c001a98f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a996:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a99a:	50                   	push   eax
c001a99b:	e8 b0 5c fe ff       	call   c0000650 <strcpy>
c001a9a0:	83 c4 10             	add    esp,0x10
c001a9a3:	83 ec 08             	sub    esp,0x8
c001a9a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9aa:	50                   	push   eax
c001a9ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9b2:	e8 e5 f9 ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001a9b7:	83 c4 10             	add    esp,0x10
c001a9ba:	83 ec 08             	sub    esp,0x8
c001a9bd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a9c1:	50                   	push   eax
c001a9c2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a9c9:	50                   	push   eax
c001a9ca:	e8 ed a4 fe ff       	call   c0004ebc <f_rename>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a9d9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a9e0:	85 c0                	test   eax,eax
c001a9e2:	75 08                	jne    c001a9ec <FAT::rename(char const*, char const*)+0xbc>
c001a9e4:	b8 00 00 00 00       	mov    eax,0x0
c001a9e9:	eb 09                	jmp    c001a9f4 <FAT::rename(char const*, char const*)+0xc4>
c001a9eb:	90                   	nop
c001a9ec:	b8 01 00 00 00       	mov    eax,0x1
c001a9f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9f4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a9fa:	c3                   	ret    
c001a9fb:	90                   	nop

c001a9fc <FAT::mkdir(char const*)>:
c001a9fc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa02:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa0a:	75 08                	jne    c001aa14 <FAT::mkdir(char const*)+0x18>
c001aa0c:	b8 04 00 00 00       	mov    eax,0x4
c001aa11:	eb 61                	jmp    c001aa74 <FAT::mkdir(char const*)+0x78>
c001aa13:	90                   	nop
c001aa14:	83 ec 08             	sub    esp,0x8
c001aa17:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa1e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa22:	50                   	push   eax
c001aa23:	e8 28 5c fe ff       	call   c0000650 <strcpy>
c001aa28:	83 c4 10             	add    esp,0x10
c001aa2b:	83 ec 08             	sub    esp,0x8
c001aa2e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa32:	50                   	push   eax
c001aa33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa3a:	e8 5d f9 ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	83 ec 0c             	sub    esp,0xc
c001aa45:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa49:	50                   	push   eax
c001aa4a:	e8 d2 a2 fe ff       	call   c0004d21 <f_mkdir>
c001aa4f:	83 c4 10             	add    esp,0x10
c001aa52:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aa59:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aa60:	85 c0                	test   eax,eax
c001aa62:	75 08                	jne    c001aa6c <FAT::mkdir(char const*)+0x70>
c001aa64:	b8 00 00 00 00       	mov    eax,0x0
c001aa69:	eb 09                	jmp    c001aa74 <FAT::mkdir(char const*)+0x78>
c001aa6b:	90                   	nop
c001aa6c:	b8 01 00 00 00       	mov    eax,0x1
c001aa71:	8d 76 00             	lea    esi,[esi+0x0]
c001aa74:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa7a:	c3                   	ret    
c001aa7b:	90                   	nop

c001aa7c <FAT::exists(char const*)>:
c001aa7c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aa82:	83 ec 08             	sub    esp,0x8
c001aa85:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aa8c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa90:	50                   	push   eax
c001aa91:	e8 ba 5b fe ff       	call   c0000650 <strcpy>
c001aa96:	83 c4 10             	add    esp,0x10
c001aa99:	83 ec 08             	sub    esp,0x8
c001aa9c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aaa0:	50                   	push   eax
c001aaa1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aaa8:	e8 ef f8 ff ff       	call   c001a39c <FAT::fixFilepath(char*)>
c001aaad:	83 c4 10             	add    esp,0x10
c001aab0:	83 ec 08             	sub    esp,0x8
c001aab3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001aaba:	50                   	push   eax
c001aabb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aabf:	50                   	push   eax
c001aac0:	e8 ca 9e fe ff       	call   c000498f <f_stat>
c001aac5:	83 c4 10             	add    esp,0x10
c001aac8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001aacf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001aad6:	85 c0                	test   eax,eax
c001aad8:	75 06                	jne    c001aae0 <FAT::exists(char const*)+0x64>
c001aada:	b0 01                	mov    al,0x1
c001aadc:	eb 06                	jmp    c001aae4 <FAT::exists(char const*)+0x68>
c001aade:	66 90                	xchg   ax,ax
c001aae0:	b0 00                	mov    al,0x0
c001aae2:	66 90                	xchg   ax,ax
c001aae4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aaea:	c3                   	ret    
c001aaeb:	90                   	nop

c001aaec <isoReadDiscSectorHelper>:
c001aaec:	83 ec 2c             	sub    esp,0x2c
c001aaef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aaf3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aaf7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001aafc:	83 e8 41             	sub    eax,0x41
c001aaff:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001ab06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab0a:	ba 00 00 00 00       	mov    edx,0x0
c001ab0f:	83 ec 0c             	sub    esp,0xc
c001ab12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab16:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ab1a:	52                   	push   edx
c001ab1b:	50                   	push   eax
c001ab1c:	51                   	push   ecx
c001ab1d:	e8 ae f5 fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001ab22:	83 c4 20             	add    esp,0x20
c001ab25:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab29:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ab2e:	74 0c                	je     c001ab3c <isoReadDiscSectorHelper+0x50>
c001ab30:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab34:	c1 e0 0b             	shl    eax,0xb
c001ab37:	eb 0b                	jmp    c001ab44 <isoReadDiscSectorHelper+0x58>
c001ab39:	8d 76 00             	lea    esi,[esi+0x0]
c001ab3c:	b8 00 00 00 00       	mov    eax,0x0
c001ab41:	8d 76 00             	lea    esi,[esi+0x0]
c001ab44:	83 c4 2c             	add    esp,0x2c
c001ab47:	c3                   	ret    

c001ab48 <iso_kprintf>:
c001ab48:	83 ec 0c             	sub    esp,0xc
c001ab4b:	83 ec 08             	sub    esp,0x8
c001ab4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab52:	68 1f 2e 02 c0       	push   0xc0022e1f
c001ab57:	e8 f2 c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ab5c:	83 c4 10             	add    esp,0x10
c001ab5f:	90                   	nop
c001ab60:	83 c4 0c             	add    esp,0xc
c001ab63:	c3                   	ret    

c001ab64 <iso_kprintfd>:
c001ab64:	83 ec 0c             	sub    esp,0xc
c001ab67:	83 ec 08             	sub    esp,0x8
c001ab6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab6e:	68 d1 14 02 c0       	push   0xc00214d1
c001ab73:	e8 d6 c3 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ab78:	83 c4 10             	add    esp,0x10
c001ab7b:	90                   	nop
c001ab7c:	83 c4 0c             	add    esp,0xc
c001ab7f:	c3                   	ret    

c001ab80 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ab80:	b8 08 00 00 00       	mov    eax,0x8
c001ab85:	c3                   	ret    

c001ab86 <ISO9660::truncate(void*, unsigned long long)>:
c001ab86:	b8 01 00 00 00       	mov    eax,0x1
c001ab8b:	c3                   	ret    

c001ab8c <ISO9660::getName()>:
c001ab8c:	b8 ac 31 02 c0       	mov    eax,0xc00231ac
c001ab91:	c3                   	ret    

c001ab92 <ISO9660::closeDir(void*)>:
c001ab92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab96:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab98:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001ab9b:	90                   	nop

c001ab9c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab9c:	b8 01 00 00 00       	mov    eax,0x1
c001aba1:	c3                   	ret    

c001aba2 <ISO9660::unlink(char const*)>:
c001aba2:	b8 01 00 00 00       	mov    eax,0x1
c001aba7:	c3                   	ret    

c001aba8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001aba8:	b8 03 00 00 00       	mov    eax,0x3
c001abad:	c3                   	ret    

c001abae <ISO9660::rename(char const*, char const*)>:
c001abae:	b8 01 00 00 00       	mov    eax,0x1
c001abb3:	c3                   	ret    

c001abb4 <ISO9660::mkdir(char const*)>:
c001abb4:	b8 01 00 00 00       	mov    eax,0x1
c001abb9:	c3                   	ret    

c001abba <ISO9660::~ISO9660()>:
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c001abc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc6:	89 10                	mov    DWORD PTR [eax],edx
c001abc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	50                   	push   eax
c001abd0:	e8 a5 d1 fe ff       	call   c0007d7a <Filesystem::~Filesystem()>
c001abd5:	83 c4 10             	add    esp,0x10
c001abd8:	90                   	nop
c001abd9:	83 c4 0c             	add    esp,0xc
c001abdc:	c3                   	ret    
c001abdd:	90                   	nop

c001abde <ISO9660::~ISO9660()>:
c001abde:	83 ec 0c             	sub    esp,0xc
c001abe1:	83 ec 0c             	sub    esp,0xc
c001abe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abe8:	e8 cd ff ff ff       	call   c001abba <ISO9660::~ISO9660()>
c001abed:	83 c4 10             	add    esp,0x10
c001abf0:	83 ec 08             	sub    esp,0x8
c001abf3:	6a 08                	push   0x8
c001abf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abf9:	e8 5d 1a ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001abfe:	83 c4 10             	add    esp,0x10
c001ac01:	83 c4 0c             	add    esp,0xc
c001ac04:	c3                   	ret    
c001ac05:	90                   	nop

c001ac06 <ISO9660::exists(char const*)>:
c001ac06:	83 ec 18             	sub    esp,0x18
c001ac09:	68 c7 31 02 c0       	push   0xc00231c7
c001ac0e:	e8 03 40 ff ff       	call   c000ec16 <KePanic(char const*)>
c001ac13:	31 c0                	xor    eax,eax
c001ac15:	83 c4 1c             	add    esp,0x1c
c001ac18:	c3                   	ret    
c001ac19:	90                   	nop

c001ac1a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ac1a:	56                   	push   esi
c001ac1b:	53                   	push   ebx
c001ac1c:	53                   	push   ebx
c001ac1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ac25:	85 db                	test   ebx,ebx
c001ac27:	0f 84 ca 00 00 00    	je     c001acf7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac2d:	85 f6                	test   esi,esi
c001ac2f:	0f 84 c2 00 00 00    	je     c001acf7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac35:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ac3a:	b8 03 00 00 00       	mov    eax,0x3
c001ac3f:	0f 85 b7 00 00 00    	jne    c001acfc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ac45:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ac47:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ac4d:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ac54:	74 1b                	je     c001ac71 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ac56:	85 c0                	test   eax,eax
c001ac58:	74 10                	je     c001ac6a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	68 e5 31 02 c0       	push   0xc00231e5
c001ac62:	e8 af 3f ff ff       	call   c000ec16 <KePanic(char const*)>
c001ac67:	83 c4 10             	add    esp,0x10
c001ac6a:	8a 03                	mov    al,BYTE PTR [ebx]
c001ac6c:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ac71:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ac74:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ac7b:	85 c0                	test   eax,eax
c001ac7d:	74 09                	je     c001ac88 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001ac7f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001ac86:	74 48                	je     c001acd0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ac88:	83 ec 0c             	sub    esp,0xc
c001ac8b:	68 f5 31 02 c0       	push   0xc00231f5
c001ac90:	e8 b9 c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ac95:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ac98:	83 c4 10             	add    esp,0x10
c001ac9b:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001aca2:	85 c0                	test   eax,eax
c001aca4:	74 17                	je     c001acbd <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001aca6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001acad:	83 ec 0c             	sub    esp,0xc
c001acb0:	68 15 32 02 c0       	push   0xc0023215
c001acb5:	e8 94 c2 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001acba:	83 c4 10             	add    esp,0x10
c001acbd:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001acc4:	83 ec 0c             	sub    esp,0xc
c001acc7:	50                   	push   eax
c001acc8:	e8 7a bf fe ff       	call   c0006c47 <init_percd>
c001accd:	83 c4 10             	add    esp,0x10
c001acd0:	51                   	push   ecx
c001acd1:	83 c3 03             	add    ebx,0x3
c001acd4:	51                   	push   ecx
c001acd5:	6a 00                	push   0x0
c001acd7:	53                   	push   ebx
c001acd8:	e8 2d ba fe ff       	call   c000670a <iso_open>
c001acdd:	83 c4 10             	add    esp,0x10
c001ace0:	89 c2                	mov    edx,eax
c001ace2:	b8 01 00 00 00       	mov    eax,0x1
c001ace7:	83 fa ff             	cmp    edx,0xffffffff
c001acea:	74 10                	je     c001acfc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001acec:	83 c2 32             	add    edx,0x32
c001acef:	31 c0                	xor    eax,eax
c001acf1:	01 d2                	add    edx,edx
c001acf3:	89 16                	mov    DWORD PTR [esi],edx
c001acf5:	eb 05                	jmp    c001acfc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001acf7:	b8 04 00 00 00       	mov    eax,0x4
c001acfc:	5a                   	pop    edx
c001acfd:	5b                   	pop    ebx
c001acfe:	5e                   	pop    esi
c001acff:	c3                   	ret    

c001ad00 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ad00:	53                   	push   ebx
c001ad01:	83 ec 08             	sub    esp,0x8
c001ad04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad0c:	85 c0                	test   eax,eax
c001ad0e:	74 2d                	je     c001ad3d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ad10:	85 db                	test   ebx,ebx
c001ad12:	74 29                	je     c001ad3d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ad14:	52                   	push   edx
c001ad15:	b9 02 00 00 00       	mov    ecx,0x2
c001ad1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad1e:	99                   	cdq    
c001ad1f:	f7 f9                	idiv   ecx
c001ad21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ad25:	83 e8 32             	sub    eax,0x32
c001ad28:	50                   	push   eax
c001ad29:	e8 84 ba fe ff       	call   c00067b2 <iso_read>
c001ad2e:	83 c4 10             	add    esp,0x10
c001ad31:	89 03                	mov    DWORD PTR [ebx],eax
c001ad33:	09 d0                	or     eax,edx
c001ad35:	0f 94 c0             	sete   al
c001ad38:	0f b6 c0             	movzx  eax,al
c001ad3b:	eb 05                	jmp    c001ad42 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001ad3d:	b8 04 00 00 00       	mov    eax,0x4
c001ad42:	83 c4 08             	add    esp,0x8
c001ad45:	5b                   	pop    ebx
c001ad46:	c3                   	ret    
c001ad47:	90                   	nop

c001ad48 <ISO9660::seek(void*, unsigned long long)>:
c001ad48:	57                   	push   edi
c001ad49:	b8 04 00 00 00       	mov    eax,0x4
c001ad4e:	56                   	push   esi
c001ad4f:	51                   	push   ecx
c001ad50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ad54:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ad58:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ad5c:	85 d2                	test   edx,edx
c001ad5e:	74 26                	je     c001ad86 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001ad60:	89 d0                	mov    eax,edx
c001ad62:	b9 02 00 00 00       	mov    ecx,0x2
c001ad67:	6a 00                	push   0x0
c001ad69:	99                   	cdq    
c001ad6a:	f7 f9                	idiv   ecx
c001ad6c:	57                   	push   edi
c001ad6d:	56                   	push   esi
c001ad6e:	83 e8 32             	sub    eax,0x32
c001ad71:	50                   	push   eax
c001ad72:	e8 51 bb fe ff       	call   c00068c8 <iso_seek>
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	31 f0                	xor    eax,esi
c001ad7c:	31 fa                	xor    edx,edi
c001ad7e:	09 d0                	or     eax,edx
c001ad80:	0f 95 c0             	setne  al
c001ad83:	0f b6 c0             	movzx  eax,al
c001ad86:	5a                   	pop    edx
c001ad87:	5e                   	pop    esi
c001ad88:	5f                   	pop    edi
c001ad89:	c3                   	ret    

c001ad8a <ISO9660::tell(void*, unsigned long long*)>:
c001ad8a:	53                   	push   ebx
c001ad8b:	83 ec 08             	sub    esp,0x8
c001ad8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad96:	85 c0                	test   eax,eax
c001ad98:	74 24                	je     c001adbe <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ad9a:	85 db                	test   ebx,ebx
c001ad9c:	74 20                	je     c001adbe <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ad9e:	b9 02 00 00 00       	mov    ecx,0x2
c001ada3:	99                   	cdq    
c001ada4:	f7 f9                	idiv   ecx
c001ada6:	83 ec 0c             	sub    esp,0xc
c001ada9:	83 e8 32             	sub    eax,0x32
c001adac:	50                   	push   eax
c001adad:	e8 9a bb fe ff       	call   c000694c <iso_tell>
c001adb2:	83 c4 10             	add    esp,0x10
c001adb5:	89 03                	mov    DWORD PTR [ebx],eax
c001adb7:	31 c0                	xor    eax,eax
c001adb9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001adbc:	eb 05                	jmp    c001adc3 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001adbe:	b8 04 00 00 00       	mov    eax,0x4
c001adc3:	83 c4 08             	add    esp,0x8
c001adc6:	5b                   	pop    ebx
c001adc7:	c3                   	ret    

c001adc8 <ISO9660::stat(void*, unsigned long long*)>:
c001adc8:	56                   	push   esi
c001adc9:	53                   	push   ebx
c001adca:	83 ec 10             	sub    esp,0x10
c001adcd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001add1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001add5:	68 39 32 02 c0       	push   0xc0023239
c001adda:	e8 6f c1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001addf:	83 c4 10             	add    esp,0x10
c001ade2:	85 db                	test   ebx,ebx
c001ade4:	74 2a                	je     c001ae10 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ade6:	85 f6                	test   esi,esi
c001ade8:	74 26                	je     c001ae10 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001adea:	89 d8                	mov    eax,ebx
c001adec:	b9 02 00 00 00       	mov    ecx,0x2
c001adf1:	99                   	cdq    
c001adf2:	83 ec 0c             	sub    esp,0xc
c001adf5:	f7 f9                	idiv   ecx
c001adf7:	83 e8 32             	sub    eax,0x32
c001adfa:	50                   	push   eax
c001adfb:	e8 7d bb fe ff       	call   c000697d <iso_total>
c001ae00:	83 c4 10             	add    esp,0x10
c001ae03:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001ae0a:	89 06                	mov    DWORD PTR [esi],eax
c001ae0c:	31 c0                	xor    eax,eax
c001ae0e:	eb 05                	jmp    c001ae15 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ae10:	b8 04 00 00 00       	mov    eax,0x4
c001ae15:	5a                   	pop    edx
c001ae16:	5b                   	pop    ebx
c001ae17:	5e                   	pop    esi
c001ae18:	c3                   	ret    
c001ae19:	90                   	nop

c001ae1a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ae1a:	55                   	push   ebp
c001ae1b:	57                   	push   edi
c001ae1c:	56                   	push   esi
c001ae1d:	53                   	push   ebx
c001ae1e:	83 ec 18             	sub    esp,0x18
c001ae21:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae25:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ae29:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae2d:	68 41 32 02 c0       	push   0xc0023241
c001ae32:	e8 17 c1 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	85 ff                	test   edi,edi
c001ae3c:	0f 94 c0             	sete   al
c001ae3f:	85 f6                	test   esi,esi
c001ae41:	0f 94 c2             	sete   dl
c001ae44:	09 d0                	or     eax,edx
c001ae46:	a8 01                	test   al,0x1
c001ae48:	0f 85 dd 00 00 00    	jne    c001af2b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ae4e:	85 db                	test   ebx,ebx
c001ae50:	0f 84 d5 00 00 00    	je     c001af2b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001ae56:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae59:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001ae5f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001ae66:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ae6d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ae6f:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001ae75:	74 1b                	je     c001ae92 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001ae77:	85 c0                	test   eax,eax
c001ae79:	74 10                	je     c001ae8b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001ae7b:	83 ec 0c             	sub    esp,0xc
c001ae7e:	68 e5 31 02 c0       	push   0xc00231e5
c001ae83:	e8 8e 3d ff ff       	call   c000ec16 <KePanic(char const*)>
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	8a 03                	mov    al,BYTE PTR [ebx]
c001ae8d:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001ae92:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001ae95:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001ae9c:	85 c0                	test   eax,eax
c001ae9e:	74 09                	je     c001aea9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001aea0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001aea7:	74 51                	je     c001aefa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001aea9:	83 ec 0c             	sub    esp,0xc
c001aeac:	68 49 32 02 c0       	push   0xc0023249
c001aeb1:	e8 98 c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aeb6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aeb9:	83 c4 10             	add    esp,0x10
c001aebc:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001aec4:	74 21                	je     c001aee7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001aec6:	83 ec 0c             	sub    esp,0xc
c001aec9:	68 69 32 02 c0       	push   0xc0023269
c001aece:	e8 7b c0 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001aed3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aed6:	83 c4 10             	add    esp,0x10
c001aed9:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001aee0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001aee7:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001aeee:	83 ec 0c             	sub    esp,0xc
c001aef1:	50                   	push   eax
c001aef2:	e8 50 bd fe ff       	call   c0006c47 <init_percd>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	52                   	push   edx
c001aefb:	83 c3 03             	add    ebx,0x3
c001aefe:	52                   	push   edx
c001aeff:	6a 00                	push   0x0
c001af01:	53                   	push   ebx
c001af02:	e8 03 b8 fe ff       	call   c000670a <iso_open>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	83 f8 ff             	cmp    eax,0xffffffff
c001af0d:	89 c5                	mov    ebp,eax
c001af0f:	75 21                	jne    c001af32 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001af11:	50                   	push   eax
c001af12:	50                   	push   eax
c001af13:	6a 01                	push   0x1
c001af15:	53                   	push   ebx
c001af16:	e8 ef b7 fe ff       	call   c000670a <iso_open>
c001af1b:	83 c4 10             	add    esp,0x10
c001af1e:	ba 02 00 00 00       	mov    edx,0x2
c001af23:	40                   	inc    eax
c001af24:	74 2b                	je     c001af51 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af26:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001af29:	eb 24                	jmp    c001af4f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001af2b:	ba 04 00 00 00       	mov    edx,0x4
c001af30:	eb 1f                	jmp    c001af51 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af32:	83 ec 0c             	sub    esp,0xc
c001af35:	50                   	push   eax
c001af36:	e8 42 ba fe ff       	call   c000697d <iso_total>
c001af3b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af42:	89 07                	mov    DWORD PTR [edi],eax
c001af44:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af47:	e8 48 b8 fe ff       	call   c0006794 <iso_close>
c001af4c:	83 c4 10             	add    esp,0x10
c001af4f:	31 d2                	xor    edx,edx
c001af51:	83 c4 0c             	add    esp,0xc
c001af54:	89 d0                	mov    eax,edx
c001af56:	5b                   	pop    ebx
c001af57:	5e                   	pop    esi
c001af58:	5f                   	pop    edi
c001af59:	5d                   	pop    ebp
c001af5a:	c3                   	ret    
c001af5b:	90                   	nop

c001af5c <ISO9660::close(void*)>:
c001af5c:	83 ec 0c             	sub    esp,0xc
c001af5f:	b8 04 00 00 00       	mov    eax,0x4
c001af64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001af68:	85 d2                	test   edx,edx
c001af6a:	74 1b                	je     c001af87 <ISO9660::close(void*)+0x2b>
c001af6c:	89 d0                	mov    eax,edx
c001af6e:	b9 02 00 00 00       	mov    ecx,0x2
c001af73:	99                   	cdq    
c001af74:	83 ec 0c             	sub    esp,0xc
c001af77:	f7 f9                	idiv   ecx
c001af79:	83 e8 32             	sub    eax,0x32
c001af7c:	50                   	push   eax
c001af7d:	e8 12 b8 fe ff       	call   c0006794 <iso_close>
c001af82:	83 c4 10             	add    esp,0x10
c001af85:	31 c0                	xor    eax,eax
c001af87:	83 c4 0c             	add    esp,0xc
c001af8a:	c3                   	ret    
c001af8b:	90                   	nop

c001af8c <ISO9660::openDir(char const*, void**)>:
c001af8c:	56                   	push   esi
c001af8d:	53                   	push   ebx
c001af8e:	50                   	push   eax
c001af8f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001af93:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001af97:	85 db                	test   ebx,ebx
c001af99:	0f 84 bd 00 00 00    	je     c001b05c <ISO9660::openDir(char const*, void**)+0xd0>
c001af9f:	85 f6                	test   esi,esi
c001afa1:	0f 84 b5 00 00 00    	je     c001b05c <ISO9660::openDir(char const*, void**)+0xd0>
c001afa7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001afa9:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001afaf:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001afb6:	74 1b                	je     c001afd3 <ISO9660::openDir(char const*, void**)+0x47>
c001afb8:	85 c0                	test   eax,eax
c001afba:	74 10                	je     c001afcc <ISO9660::openDir(char const*, void**)+0x40>
c001afbc:	83 ec 0c             	sub    esp,0xc
c001afbf:	68 e5 31 02 c0       	push   0xc00231e5
c001afc4:	e8 4d 3c ff ff       	call   c000ec16 <KePanic(char const*)>
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	8a 03                	mov    al,BYTE PTR [ebx]
c001afce:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001afd3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001afd6:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001afdd:	85 c0                	test   eax,eax
c001afdf:	74 10                	je     c001aff1 <ISO9660::openDir(char const*, void**)+0x65>
c001afe1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001afe8:	74 1a                	je     c001b004 <ISO9660::openDir(char const*, void**)+0x78>
c001afea:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001aff1:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001aff8:	83 ec 0c             	sub    esp,0xc
c001affb:	50                   	push   eax
c001affc:	e8 46 bc fe ff       	call   c0006c47 <init_percd>
c001b001:	83 c4 10             	add    esp,0x10
c001b004:	50                   	push   eax
c001b005:	83 c3 03             	add    ebx,0x3
c001b008:	50                   	push   eax
c001b009:	6a 01                	push   0x1
c001b00b:	53                   	push   ebx
c001b00c:	e8 f9 b6 fe ff       	call   c000670a <iso_open>
c001b011:	83 c4 10             	add    esp,0x10
c001b014:	83 f8 ff             	cmp    eax,0xffffffff
c001b017:	89 c3                	mov    ebx,eax
c001b019:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b01e:	75 1c                	jne    c001b03c <ISO9660::openDir(char const*, void**)+0xb0>
c001b020:	53                   	push   ebx
c001b021:	53                   	push   ebx
c001b022:	68 8d 32 02 c0       	push   0xc002328d
c001b027:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b02d:	e8 44 63 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001b032:	83 c4 10             	add    esp,0x10
c001b035:	b8 01 00 00 00       	mov    eax,0x1
c001b03a:	eb 25                	jmp    c001b061 <ISO9660::openDir(char const*, void**)+0xd5>
c001b03c:	51                   	push   ecx
c001b03d:	01 db                	add    ebx,ebx
c001b03f:	51                   	push   ecx
c001b040:	83 c3 65             	add    ebx,0x65
c001b043:	68 a0 32 02 c0       	push   0xc00232a0
c001b048:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b04e:	e8 23 63 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001b053:	83 c4 10             	add    esp,0x10
c001b056:	31 c0                	xor    eax,eax
c001b058:	89 1e                	mov    DWORD PTR [esi],ebx
c001b05a:	eb 05                	jmp    c001b061 <ISO9660::openDir(char const*, void**)+0xd5>
c001b05c:	b8 04 00 00 00       	mov    eax,0x4
c001b061:	5a                   	pop    edx
c001b062:	5b                   	pop    ebx
c001b063:	5e                   	pop    esi
c001b064:	c3                   	ret    
c001b065:	90                   	nop

c001b066 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b066:	55                   	push   ebp
c001b067:	57                   	push   edi
c001b068:	56                   	push   esi
c001b069:	53                   	push   ebx
c001b06a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b070:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001b077:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b07e:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001b085:	85 db                	test   ebx,ebx
c001b087:	0f 84 e4 00 00 00    	je     c001b171 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b08d:	85 ed                	test   ebp,ebp
c001b08f:	0f 84 dc 00 00 00    	je     c001b171 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001b095:	83 ec 0c             	sub    esp,0xc
c001b098:	68 b3 32 02 c0       	push   0xc00232b3
c001b09d:	e8 ac be fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001b0a2:	89 d8                	mov    eax,ebx
c001b0a4:	b9 02 00 00 00       	mov    ecx,0x2
c001b0a9:	99                   	cdq    
c001b0aa:	f7 f9                	idiv   ecx
c001b0ac:	83 e8 32             	sub    eax,0x32
c001b0af:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0b2:	e8 18 b9 fe ff       	call   c00069cf <iso_readdir>
c001b0b7:	83 c4 10             	add    esp,0x10
c001b0ba:	85 c0                	test   eax,eax
c001b0bc:	89 c3                	mov    ebx,eax
c001b0be:	75 38                	jne    c001b0f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001b0c0:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b0c5:	53                   	push   ebx
c001b0c6:	53                   	push   ebx
c001b0c7:	68 be 32 02 c0       	push   0xc00232be
c001b0cc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0d2:	e8 9f 62 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001b0d7:	83 c4 0c             	add    esp,0xc
c001b0da:	68 10 01 00 00       	push   0x110
c001b0df:	6a 00                	push   0x0
c001b0e1:	57                   	push   edi
c001b0e2:	e8 09 54 fe ff       	call   c00004f0 <memset>
c001b0e7:	83 c4 10             	add    esp,0x10
c001b0ea:	b8 01 00 00 00       	mov    eax,0x1
c001b0ef:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001b0f6:	eb 7e                	jmp    c001b176 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b0f8:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b0fe:	8d 70 08             	lea    esi,[eax+0x8]
c001b101:	83 ec 0c             	sub    esp,0xc
c001b104:	56                   	push   esi
c001b105:	e8 76 54 fe ff       	call   c0000580 <strlen>
c001b10a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b112:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b116:	83 c4 10             	add    esp,0x10
c001b119:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001b11d:	75 0a                	jne    c001b129 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001b11f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001b122:	b8 02 00 00 00       	mov    eax,0x2
c001b127:	74 05                	je     c001b12e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001b129:	b8 01 00 00 00       	mov    eax,0x1
c001b12e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b132:	50                   	push   eax
c001b133:	50                   	push   eax
c001b134:	56                   	push   esi
c001b135:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b139:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b13d:	50                   	push   eax
c001b13e:	e8 0d 55 fe ff       	call   c0000650 <strcpy>
c001b143:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b14a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b14c:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001b153:	5a                   	pop    edx
c001b154:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b159:	59                   	pop    ecx
c001b15a:	68 d1 32 02 c0       	push   0xc00232d1
c001b15f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b165:	e8 0c 62 ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001b16a:	83 c4 10             	add    esp,0x10
c001b16d:	31 c0                	xor    eax,eax
c001b16f:	eb 05                	jmp    c001b176 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001b171:	b8 04 00 00 00       	mov    eax,0x4
c001b176:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b17c:	5b                   	pop    ebx
c001b17d:	5e                   	pop    esi
c001b17e:	5f                   	pop    edi
c001b17f:	5d                   	pop    ebp
c001b180:	c3                   	ret    

c001b181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b181:	57                   	push   edi
c001b182:	56                   	push   esi
c001b183:	53                   	push   ebx
c001b184:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b188:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b18c:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b192:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b196:	0f be cb             	movsx  ecx,bl
c001b199:	75 0b                	jne    c001b1a6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b19b:	0f be 05 c4 44 02 c0 	movsx  eax,BYTE PTR ds:0xc00244c4
c001b1a2:	39 c8                	cmp    eax,ecx
c001b1a4:	74 47                	je     c001b1ed <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b1a6:	83 ec 0c             	sub    esp,0xc
c001b1a9:	31 d2                	xor    edx,edx
c001b1ab:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b1b0:	6a 01                	push   0x1
c001b1b2:	52                   	push   edx
c001b1b3:	56                   	push   esi
c001b1b4:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b1bb:	e8 10 ef fe ff       	call   c000a0d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001b1c0:	83 c4 20             	add    esp,0x20
c001b1c3:	85 c0                	test   eax,eax
c001b1c5:	75 0e                	jne    c001b1d5 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b1c7:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b1cd:	88 1d c4 44 02 c0    	mov    BYTE PTR ds:0xc00244c4,bl
c001b1d3:	eb 18                	jmp    c001b1ed <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b1d5:	50                   	push   eax
c001b1d6:	68 00 08 00 00       	push   0x800
c001b1db:	6a 00                	push   0x0
c001b1dd:	57                   	push   edi
c001b1de:	e8 0d 53 fe ff       	call   c00004f0 <memset>
c001b1e3:	83 c4 10             	add    esp,0x10
c001b1e6:	b8 01 00 00 00       	mov    eax,0x1
c001b1eb:	eb 0e                	jmp    c001b1fb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b1ed:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b1f2:	b9 00 08 00 00       	mov    ecx,0x800
c001b1f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1f9:	31 c0                	xor    eax,eax
c001b1fb:	5b                   	pop    ebx
c001b1fc:	5e                   	pop    esi
c001b1fd:	5f                   	pop    edi
c001b1fe:	c3                   	ret    
c001b1ff:	90                   	nop

c001b200 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b200:	53                   	push   ebx
c001b201:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b207:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b211:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b218:	8d 58 41             	lea    ebx,[eax+0x41]
c001b21b:	0f be db             	movsx  ebx,bl
c001b21e:	53                   	push   ebx
c001b21f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b223:	50                   	push   eax
c001b224:	6a 10                	push   0x10
c001b226:	e8 56 ff ff ff       	call   c001b181 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b22b:	83 c4 10             	add    esp,0x10
c001b22e:	31 d2                	xor    edx,edx
c001b230:	85 c0                	test   eax,eax
c001b232:	75 33                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b234:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b239:	75 2c                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b23b:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b240:	75 25                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b242:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b247:	75 1e                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b249:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b24e:	75 17                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b250:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b255:	75 10                	jne    c001b267 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b257:	83 ec 0c             	sub    esp,0xc
c001b25a:	53                   	push   ebx
c001b25b:	e8 e7 b9 fe ff       	call   c0006c47 <init_percd>
c001b260:	83 c4 10             	add    esp,0x10
c001b263:	40                   	inc    eax
c001b264:	0f 95 c2             	setne  dl
c001b267:	81 c4 08 08 00 00    	add    esp,0x808
c001b26d:	88 d0                	mov    al,dl
c001b26f:	5b                   	pop    ebx
c001b270:	c3                   	ret    
c001b271:	90                   	nop

c001b272 <ISO9660::ISO9660()>:
c001b272:	83 ec 0c             	sub    esp,0xc
c001b275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b279:	83 ec 0c             	sub    esp,0xc
c001b27c:	50                   	push   eax
c001b27d:	e8 d4 ca fe ff       	call   c0007d56 <Filesystem::Filesystem()>
c001b282:	83 c4 10             	add    esp,0x10
c001b285:	ba ec 32 02 c0       	mov    edx,0xc00232ec
c001b28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28e:	89 10                	mov    DWORD PTR [eax],edx
c001b290:	e8 c4 ba fe ff       	call   c0006d59 <fs_iso9660_init>
c001b295:	90                   	nop
c001b296:	83 c4 0c             	add    esp,0xc
c001b299:	c3                   	ret    

c001b29a <SoundCard::beginPlayback()>:
c001b29a:	c7 44 24 04 50 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023350
c001b2a2:	e9 6f 39 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001b2a7:	90                   	nop

c001b2a8 <SoundCard::stopPlayback()>:
c001b2a8:	c7 44 24 04 50 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023350
c001b2b0:	e9 61 39 ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001b2b5:	90                   	nop

c001b2b6 <SoundCard::SoundCard(char const*)>:
c001b2b6:	83 ec 1c             	sub    esp,0x1c
c001b2b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2bd:	83 ec 08             	sub    esp,0x8
c001b2c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2c4:	50                   	push   eax
c001b2c5:	e8 de de fe ff       	call   c00091a8 <Device::Device(char const*)>
c001b2ca:	83 c4 10             	add    esp,0x10
c001b2cd:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c001b2d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2d6:	89 10                	mov    DWORD PTR [eax],edx
c001b2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2dc:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b2e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2e7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b2f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2f5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b2ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b303:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b30d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b311:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b31b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b323:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b328:	7f 1a                	jg     c001b344 <SoundCard::SoundCard(char const*)+0x8e>
c001b32a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b32e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b332:	83 c2 54             	add    edx,0x54
c001b335:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b33d:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b342:	eb df                	jmp    c001b323 <SoundCard::SoundCard(char const*)+0x6d>
c001b344:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b348:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b34f:	90                   	nop
c001b350:	83 c4 1c             	add    esp,0x1c
c001b353:	c3                   	ret    

c001b354 <SoundCard::~SoundCard()>:
c001b354:	83 ec 0c             	sub    esp,0xc
c001b357:	ba 9c 33 02 c0       	mov    edx,0xc002339c
c001b35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b360:	89 10                	mov    DWORD PTR [eax],edx
c001b362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b366:	83 ec 0c             	sub    esp,0xc
c001b369:	50                   	push   eax
c001b36a:	e8 d9 db fe ff       	call   c0008f48 <Device::~Device()>
c001b36f:	83 c4 10             	add    esp,0x10
c001b372:	90                   	nop
c001b373:	83 c4 0c             	add    esp,0xc
c001b376:	c3                   	ret    
c001b377:	90                   	nop

c001b378 <SoundCard::~SoundCard()>:
c001b378:	83 ec 0c             	sub    esp,0xc
c001b37b:	83 ec 0c             	sub    esp,0xc
c001b37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b382:	e8 cd ff ff ff       	call   c001b354 <SoundCard::~SoundCard()>
c001b387:	83 c4 10             	add    esp,0x10
c001b38a:	83 ec 08             	sub    esp,0x8
c001b38d:	68 e8 01 00 00       	push   0x1e8
c001b392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b396:	e8 c0 12 ff ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001b39b:	83 c4 10             	add    esp,0x10
c001b39e:	83 c4 0c             	add    esp,0xc
c001b3a1:	c3                   	ret    

c001b3a2 <SoundCard::configureRates(int, int, int)>:
c001b3a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b3a6:	31 c0                	xor    eax,eax
c001b3a8:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b3af:	75 20                	jne    c001b3d1 <SoundCard::configureRates(int, int, int)+0x2f>
c001b3b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3b5:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b3bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3bf:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b3c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3c9:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b3cf:	b0 01                	mov    al,0x1
c001b3d1:	c3                   	ret    

c001b3d2 <SoundCard::getSamples16(int, short*)>:
c001b3d2:	55                   	push   ebp
c001b3d3:	57                   	push   edi
c001b3d4:	31 ff                	xor    edi,edi
c001b3d6:	56                   	push   esi
c001b3d7:	53                   	push   ebx
c001b3d8:	31 db                	xor    ebx,ebx
c001b3da:	83 ec 10             	sub    esp,0x10
c001b3dd:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b3e1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b3e5:	8d 04 36             	lea    eax,[esi+esi*1]
c001b3e8:	50                   	push   eax
c001b3e9:	6a 00                	push   0x0
c001b3eb:	55                   	push   ebp
c001b3ec:	e8 ff 50 fe ff       	call   c00004f0 <memset>
c001b3f1:	83 c4 10             	add    esp,0x10
c001b3f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3f8:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001b3ff:	85 c0                	test   eax,eax
c001b401:	74 1a                	je     c001b41d <SoundCard::getSamples16(int, short*)+0x4b>
c001b403:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b407:	75 14                	jne    c001b41d <SoundCard::getSamples16(int, short*)+0x4b>
c001b409:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b40d:	55                   	push   ebp
c001b40e:	56                   	push   esi
c001b40f:	50                   	push   eax
c001b410:	e8 f3 02 00 00       	call   c001b708 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b415:	83 c4 10             	add    esp,0x10
c001b418:	39 c3                	cmp    ebx,eax
c001b41a:	0f 4c d8             	cmovl  ebx,eax
c001b41d:	47                   	inc    edi
c001b41e:	83 ff 20             	cmp    edi,0x20
c001b421:	75 d1                	jne    c001b3f4 <SoundCard::getSamples16(int, short*)+0x22>
c001b423:	83 c4 0c             	add    esp,0xc
c001b426:	89 d8                	mov    eax,ebx
c001b428:	5b                   	pop    ebx
c001b429:	5e                   	pop    esi
c001b42a:	5f                   	pop    edi
c001b42b:	5d                   	pop    ebp
c001b42c:	c3                   	ret    
c001b42d:	90                   	nop

c001b42e <SoundCard::getSamples32(int, int*)>:
c001b42e:	55                   	push   ebp
c001b42f:	57                   	push   edi
c001b430:	31 ff                	xor    edi,edi
c001b432:	56                   	push   esi
c001b433:	31 f6                	xor    esi,esi
c001b435:	53                   	push   ebx
c001b436:	83 ec 10             	sub    esp,0x10
c001b439:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b43d:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b441:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b445:	c1 e0 02             	shl    eax,0x2
c001b448:	50                   	push   eax
c001b449:	6a 00                	push   0x0
c001b44b:	55                   	push   ebp
c001b44c:	e8 9f 50 fe ff       	call   c00004f0 <memset>
c001b451:	83 c4 10             	add    esp,0x10
c001b454:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b45b:	85 c0                	test   eax,eax
c001b45d:	74 1a                	je     c001b479 <SoundCard::getSamples32(int, int*)+0x4b>
c001b45f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b463:	75 14                	jne    c001b479 <SoundCard::getSamples32(int, int*)+0x4b>
c001b465:	53                   	push   ebx
c001b466:	55                   	push   ebp
c001b467:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b46b:	50                   	push   eax
c001b46c:	e8 67 03 00 00       	call   c001b7d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b471:	83 c4 10             	add    esp,0x10
c001b474:	39 c6                	cmp    esi,eax
c001b476:	0f 4c f0             	cmovl  esi,eax
c001b479:	47                   	inc    edi
c001b47a:	83 ff 20             	cmp    edi,0x20
c001b47d:	75 d5                	jne    c001b454 <SoundCard::getSamples32(int, int*)+0x26>
c001b47f:	85 f6                	test   esi,esi
c001b481:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b488:	75 0f                	jne    c001b499 <SoundCard::getSamples32(int, int*)+0x6b>
c001b48a:	85 c0                	test   eax,eax
c001b48c:	74 1b                	je     c001b4a9 <SoundCard::getSamples32(int, int*)+0x7b>
c001b48e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b490:	83 ec 0c             	sub    esp,0xc
c001b493:	53                   	push   ebx
c001b494:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b497:	eb 0d                	jmp    c001b4a6 <SoundCard::getSamples32(int, int*)+0x78>
c001b499:	85 c0                	test   eax,eax
c001b49b:	75 0c                	jne    c001b4a9 <SoundCard::getSamples32(int, int*)+0x7b>
c001b49d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b49f:	83 ec 0c             	sub    esp,0xc
c001b4a2:	53                   	push   ebx
c001b4a3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b4a6:	83 c4 10             	add    esp,0x10
c001b4a9:	83 c4 0c             	add    esp,0xc
c001b4ac:	89 f0                	mov    eax,esi
c001b4ae:	5b                   	pop    ebx
c001b4af:	5e                   	pop    esi
c001b4b0:	5f                   	pop    edi
c001b4b1:	5d                   	pop    ebp
c001b4b2:	c3                   	ret    
c001b4b3:	90                   	nop

c001b4b4 <SoundCard::addChannel(SoundPort*)>:
c001b4b4:	83 ec 0c             	sub    esp,0xc
c001b4b7:	31 c0                	xor    eax,eax
c001b4b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4bd:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b4c5:	74 1b                	je     c001b4e2 <SoundCard::addChannel(SoundPort*)+0x2e>
c001b4c7:	40                   	inc    eax
c001b4c8:	83 f8 20             	cmp    eax,0x20
c001b4cb:	75 f0                	jne    c001b4bd <SoundCard::addChannel(SoundPort*)+0x9>
c001b4cd:	83 ec 0c             	sub    esp,0xc
c001b4d0:	68 75 33 02 c0       	push   0xc0023375
c001b4d5:	e8 3c 37 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b4da:	83 c4 10             	add    esp,0x10
c001b4dd:	83 c8 ff             	or     eax,0xffffffff
c001b4e0:	eb 0b                	jmp    c001b4ed <SoundCard::addChannel(SoundPort*)+0x39>
c001b4e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b4e6:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b4ed:	83 c4 0c             	add    esp,0xc
c001b4f0:	c3                   	ret    
c001b4f1:	90                   	nop

c001b4f2 <SoundCard::removeChannel(int)>:
c001b4f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b4f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b4fa:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b505:	c3                   	ret    
c001b506:	66 90                	xchg   ax,ax

c001b508 <SoundPort::SoundPort(int, int, int, int)>:
c001b508:	83 ec 0c             	sub    esp,0xc
c001b50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b522:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b526:	89 10                	mov    DWORD PTR [eax],edx
c001b528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b52c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b530:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b537:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b53b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b53e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b543:	75 13                	jne    c001b558 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b549:	8b 00                	mov    eax,DWORD PTR [eax]
c001b54b:	05 a0 0f 00 00       	add    eax,0xfa0
c001b550:	d1 e0                	shl    eax,1
c001b552:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b556:	66 90                	xchg   ax,ax
c001b558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b55c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b560:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b567:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b572:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b575:	c1 e0 02             	shl    eax,0x2
c001b578:	83 ec 0c             	sub    esp,0xc
c001b57b:	50                   	push   eax
c001b57c:	e8 4f 33 ff ff       	call   c000e8d0 <malloc>
c001b581:	83 c4 10             	add    esp,0x10
c001b584:	89 c2                	mov    edx,eax
c001b586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b58d:	90                   	nop
c001b58e:	83 c4 0c             	add    esp,0xc
c001b591:	c3                   	ret    
c001b592:	66 90                	xchg   ax,ax

c001b594 <SoundPort::~SoundPort()>:
c001b594:	83 ec 0c             	sub    esp,0xc
c001b597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b59e:	85 c0                	test   eax,eax
c001b5a0:	74 1e                	je     c001b5c0 <SoundPort::~SoundPort()+0x2c>
c001b5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b5a9:	83 ec 0c             	sub    esp,0xc
c001b5ac:	50                   	push   eax
c001b5ad:	e8 2e 33 ff ff       	call   c000e8e0 <free>
c001b5b2:	83 c4 10             	add    esp,0x10
c001b5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b5c0:	90                   	nop
c001b5c1:	83 c4 0c             	add    esp,0xc
c001b5c4:	c3                   	ret    
c001b5c5:	90                   	nop
c001b5c6:	66 90                	xchg   ax,ax

c001b5c8 <SoundPort::unpause()>:
c001b5c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5cc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b5d0:	c3                   	ret    
c001b5d1:	90                   	nop
c001b5d2:	66 90                	xchg   ax,ax

c001b5d4 <SoundPort::pause()>:
c001b5d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5d8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b5dc:	c3                   	ret    
c001b5dd:	90                   	nop
c001b5de:	66 90                	xchg   ax,ax

c001b5e0 <SoundPort::getBufferUsed()>:
c001b5e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b5e7:	c3                   	ret    

c001b5e8 <SoundPort::getBufferSize()>:
c001b5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b5ef:	c3                   	ret    

c001b5f0 <SoundPort::buffer16(short*, int)>:
c001b5f0:	55                   	push   ebp
c001b5f1:	57                   	push   edi
c001b5f2:	56                   	push   esi
c001b5f3:	53                   	push   ebx
c001b5f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b5f8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b5fc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b5ff:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b602:	74 68                	je     c001b66c <SoundPort::buffer16(short*, int)+0x7c>
c001b604:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b608:	85 c9                	test   ecx,ecx
c001b60a:	7e 60                	jle    c001b66c <SoundPort::buffer16(short*, int)+0x7c>
c001b60c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b610:	8d 70 01             	lea    esi,[eax+0x1]
c001b613:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b616:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b619:	c1 e1 0f             	shl    ecx,0xf
c001b61c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b61f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b622:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b625:	74 4d                	je     c001b674 <SoundPort::buffer16(short*, int)+0x84>
c001b627:	31 f6                	xor    esi,esi
c001b629:	eb 21                	jmp    c001b64c <SoundPort::buffer16(short*, int)+0x5c>
c001b62b:	90                   	nop
c001b62c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b631:	8d 79 01             	lea    edi,[ecx+0x1]
c001b634:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b637:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b63a:	c1 e3 0f             	shl    ebx,0xf
c001b63d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b640:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b643:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b646:	74 1c                	je     c001b664 <SoundPort::buffer16(short*, int)+0x74>
c001b648:	89 c6                	mov    esi,eax
c001b64a:	66 90                	xchg   ax,ax
c001b64c:	8d 46 01             	lea    eax,[esi+0x1]
c001b64f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b653:	75 d7                	jne    c001b62c <SoundPort::buffer16(short*, int)+0x3c>
c001b655:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b659:	8d 76 00             	lea    esi,[esi+0x0]
c001b65c:	5b                   	pop    ebx
c001b65d:	5e                   	pop    esi
c001b65e:	5f                   	pop    edi
c001b65f:	5d                   	pop    ebp
c001b660:	c3                   	ret    
c001b661:	8d 76 00             	lea    esi,[esi+0x0]
c001b664:	5b                   	pop    ebx
c001b665:	8d 46 02             	lea    eax,[esi+0x2]
c001b668:	5e                   	pop    esi
c001b669:	5f                   	pop    edi
c001b66a:	5d                   	pop    ebp
c001b66b:	c3                   	ret    
c001b66c:	5b                   	pop    ebx
c001b66d:	31 c0                	xor    eax,eax
c001b66f:	5e                   	pop    esi
c001b670:	5f                   	pop    edi
c001b671:	5d                   	pop    ebp
c001b672:	c3                   	ret    
c001b673:	90                   	nop
c001b674:	b8 01 00 00 00       	mov    eax,0x1
c001b679:	eb e1                	jmp    c001b65c <SoundPort::buffer16(short*, int)+0x6c>
c001b67b:	90                   	nop

c001b67c <SoundPort::buffer32(int*, int)>:
c001b67c:	55                   	push   ebp
c001b67d:	57                   	push   edi
c001b67e:	56                   	push   esi
c001b67f:	53                   	push   ebx
c001b680:	83 ec 04             	sub    esp,0x4
c001b683:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b68b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b68f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b692:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b695:	89 04 24             	mov    DWORD PTR [esp],eax
c001b698:	74 5a                	je     c001b6f4 <SoundPort::buffer32(int*, int)+0x78>
c001b69a:	85 c0                	test   eax,eax
c001b69c:	7e 56                	jle    c001b6f4 <SoundPort::buffer32(int*, int)+0x78>
c001b69e:	8d 71 01             	lea    esi,[ecx+0x1]
c001b6a1:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b6a4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b6a7:	8b 37                	mov    esi,DWORD PTR [edi]
c001b6a9:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b6ac:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6af:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6b2:	74 4c                	je     c001b700 <SoundPort::buffer32(int*, int)+0x84>
c001b6b4:	31 f6                	xor    esi,esi
c001b6b6:	eb 1c                	jmp    c001b6d4 <SoundPort::buffer32(int*, int)+0x58>
c001b6b8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b6bb:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b6be:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b6c1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b6c4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b6c8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6cb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6ce:	74 18                	je     c001b6e8 <SoundPort::buffer32(int*, int)+0x6c>
c001b6d0:	89 de                	mov    esi,ebx
c001b6d2:	66 90                	xchg   ax,ax
c001b6d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b6d7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b6da:	75 dc                	jne    c001b6b8 <SoundPort::buffer32(int*, int)+0x3c>
c001b6dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b6df:	90                   	nop
c001b6e0:	83 c4 04             	add    esp,0x4
c001b6e3:	5b                   	pop    ebx
c001b6e4:	5e                   	pop    esi
c001b6e5:	5f                   	pop    edi
c001b6e6:	5d                   	pop    ebp
c001b6e7:	c3                   	ret    
c001b6e8:	8d 46 02             	lea    eax,[esi+0x2]
c001b6eb:	83 c4 04             	add    esp,0x4
c001b6ee:	5b                   	pop    ebx
c001b6ef:	5e                   	pop    esi
c001b6f0:	5f                   	pop    edi
c001b6f1:	5d                   	pop    ebp
c001b6f2:	c3                   	ret    
c001b6f3:	90                   	nop
c001b6f4:	83 c4 04             	add    esp,0x4
c001b6f7:	31 c0                	xor    eax,eax
c001b6f9:	5b                   	pop    ebx
c001b6fa:	5e                   	pop    esi
c001b6fb:	5f                   	pop    edi
c001b6fc:	5d                   	pop    ebp
c001b6fd:	c3                   	ret    
c001b6fe:	66 90                	xchg   ax,ax
c001b700:	b8 01 00 00 00       	mov    eax,0x1
c001b705:	eb d9                	jmp    c001b6e0 <SoundPort::buffer32(int*, int)+0x64>
c001b707:	90                   	nop

c001b708 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b708:	55                   	push   ebp
c001b709:	57                   	push   edi
c001b70a:	56                   	push   esi
c001b70b:	53                   	push   ebx
c001b70c:	83 ec 0c             	sub    esp,0xc
c001b70f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b713:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b717:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b71b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b71f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b725:	39 03                	cmp    DWORD PTR [ebx],eax
c001b727:	74 13                	je     c001b73c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001b729:	83 ec 0c             	sub    esp,0xc
c001b72c:	68 c8 33 02 c0       	push   0xc00233c8
c001b731:	e8 e0 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b736:	83 c4 10             	add    esp,0x10
c001b739:	8d 76 00             	lea    esi,[esi+0x0]
c001b73c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b742:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b745:	74 11                	je     c001b758 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001b747:	83 ec 0c             	sub    esp,0xc
c001b74a:	68 07 34 02 c0       	push   0xc0023407
c001b74f:	e8 c2 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b754:	83 c4 10             	add    esp,0x10
c001b757:	90                   	nop
c001b758:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b75e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b761:	74 11                	je     c001b774 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001b763:	83 ec 0c             	sub    esp,0xc
c001b766:	68 07 34 02 c0       	push   0xc0023407
c001b76b:	e8 a6 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b770:	83 c4 10             	add    esp,0x10
c001b773:	90                   	nop
c001b774:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001b777:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001b77b:	85 f6                	test   esi,esi
c001b77d:	7e 2d                	jle    c001b7ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001b77f:	31 c0                	xor    eax,eax
c001b781:	8d 76 00             	lea    esi,[esi+0x0]
c001b784:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b787:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001b78a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001b790:	85 c9                	test   ecx,ecx
c001b792:	0f 49 d1             	cmovns edx,ecx
c001b795:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001b799:	c1 fa 0f             	sar    edx,0xf
c001b79c:	01 d1                	add    ecx,edx
c001b79e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001b7a2:	83 c0 01             	add    eax,0x1
c001b7a5:	39 f0                	cmp    eax,esi
c001b7a7:	75 db                	jne    c001b784 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001b7a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b7af:	83 ec 04             	sub    esp,0x4
c001b7b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b7b5:	29 f0                	sub    eax,esi
c001b7b7:	c1 e0 02             	shl    eax,0x2
c001b7ba:	50                   	push   eax
c001b7bb:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b7be:	50                   	push   eax
c001b7bf:	52                   	push   edx
c001b7c0:	e8 0b 4c fe ff       	call   c00003d0 <memmove>
c001b7c5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b7c8:	29 f0                	sub    eax,esi
c001b7ca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b7cd:	83 c4 1c             	add    esp,0x1c
c001b7d0:	89 f0                	mov    eax,esi
c001b7d2:	5b                   	pop    ebx
c001b7d3:	5e                   	pop    esi
c001b7d4:	5f                   	pop    edi
c001b7d5:	5d                   	pop    ebp
c001b7d6:	c3                   	ret    
c001b7d7:	90                   	nop

c001b7d8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b7d8:	55                   	push   ebp
c001b7d9:	57                   	push   edi
c001b7da:	56                   	push   esi
c001b7db:	53                   	push   ebx
c001b7dc:	83 ec 0c             	sub    esp,0xc
c001b7df:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7e7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b7eb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b7ef:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001b7f5:	39 03                	cmp    DWORD PTR [ebx],eax
c001b7f7:	74 13                	je     c001b80c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001b7f9:	83 ec 0c             	sub    esp,0xc
c001b7fc:	68 e8 33 02 c0       	push   0xc00233e8
c001b801:	e8 10 34 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b806:	83 c4 10             	add    esp,0x10
c001b809:	8d 76 00             	lea    esi,[esi+0x0]
c001b80c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001b812:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b815:	74 11                	je     c001b828 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001b817:	83 ec 0c             	sub    esp,0xc
c001b81a:	68 23 34 02 c0       	push   0xc0023423
c001b81f:	e8 f2 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	90                   	nop
c001b828:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001b82e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b831:	74 11                	je     c001b844 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001b833:	83 ec 0c             	sub    esp,0xc
c001b836:	68 23 34 02 c0       	push   0xc0023423
c001b83b:	e8 d6 33 ff ff       	call   c000ec16 <KePanic(char const*)>
c001b840:	83 c4 10             	add    esp,0x10
c001b843:	90                   	nop
c001b844:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001b847:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001b84b:	85 ff                	test   edi,edi
c001b84d:	7e 21                	jle    c001b870 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001b84f:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b856:	31 c0                	xor    eax,eax
c001b858:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b85b:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001b85e:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b861:	01 d5                	add    ebp,edx
c001b863:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001b866:	83 c0 04             	add    eax,0x4
c001b869:	39 c1                	cmp    ecx,eax
c001b86b:	75 eb                	jne    c001b858 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001b86d:	8d 76 00             	lea    esi,[esi+0x0]
c001b870:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b873:	83 ec 04             	sub    esp,0x4
c001b876:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b879:	29 f8                	sub    eax,edi
c001b87b:	c1 e0 02             	shl    eax,0x2
c001b87e:	50                   	push   eax
c001b87f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b882:	50                   	push   eax
c001b883:	52                   	push   edx
c001b884:	e8 47 4b fe ff       	call   c00003d0 <memmove>
c001b889:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b88c:	29 f8                	sub    eax,edi
c001b88e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b891:	83 c4 1c             	add    esp,0x1c
c001b894:	89 f8                	mov    eax,edi
c001b896:	5b                   	pop    ebx
c001b897:	5e                   	pop    esi
c001b898:	5f                   	pop    edi
c001b899:	5d                   	pop    ebp
c001b89a:	c3                   	ret    
c001b89b:	90                   	nop

c001b89c <PCI::open(int, int, void*)>:
c001b89c:	83 ec 18             	sub    esp,0x18
c001b89f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b8a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8ad:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8af:	50                   	push   eax
c001b8b0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b8b3:	31 c0                	xor    eax,eax
c001b8b5:	83 c4 1c             	add    esp,0x1c
c001b8b8:	c3                   	ret    
c001b8b9:	90                   	nop

c001b8ba <PCI::close(int, int, void*)>:
c001b8ba:	31 c0                	xor    eax,eax
c001b8bc:	c3                   	ret    
c001b8bd:	90                   	nop

c001b8be <PCI::PCI()>:
c001b8be:	83 ec 0c             	sub    esp,0xc
c001b8c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8c5:	83 ec 08             	sub    esp,0x8
c001b8c8:	68 3f 34 02 c0       	push   0xc002343f
c001b8cd:	50                   	push   eax
c001b8ce:	e8 15 d0 fe ff       	call   c00088e8 <Bus::Bus(char const*)>
c001b8d3:	83 c4 10             	add    esp,0x10
c001b8d6:	ba 4c 35 02 c0       	mov    edx,0xc002354c
c001b8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8df:	89 10                	mov    DWORD PTR [eax],edx
c001b8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8f3:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001b8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b902:	0f b6 d0             	movzx  edx,al
c001b905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b909:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b914:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b91a:	0f b6 d0             	movzx  edx,al
c001b91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b921:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b92a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b930:	8d 50 01             	lea    edx,[eax+0x1]
c001b933:	88 d1                	mov    cl,dl
c001b935:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b939:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b93f:	0f b6 d0             	movzx  edx,al
c001b942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b946:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b94a:	83 c9 c0             	or     ecx,0xffffffc0
c001b94d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b951:	90                   	nop
c001b952:	83 c4 0c             	add    esp,0xc
c001b955:	c3                   	ret    

c001b956 <PCI::readBAR8(unsigned int, int)>:
c001b956:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b95a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b95e:	f6 c2 01             	test   dl,0x1
c001b961:	74 07                	je     c001b96a <PCI::readBAR8(unsigned int, int)+0x14>
c001b963:	83 e2 fc             	and    edx,0xfffffffc
c001b966:	01 c2                	add    edx,eax
c001b968:	ec                   	in     al,dx
c001b969:	c3                   	ret    
c001b96a:	83 e2 f0             	and    edx,0xfffffff0
c001b96d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b970:	c3                   	ret    
c001b971:	90                   	nop

c001b972 <PCI::readBAR16(unsigned int, int)>:
c001b972:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b97a:	f6 c2 01             	test   dl,0x1
c001b97d:	74 08                	je     c001b987 <PCI::readBAR16(unsigned int, int)+0x15>
c001b97f:	83 e2 fc             	and    edx,0xfffffffc
c001b982:	01 c2                	add    edx,eax
c001b984:	66 ed                	in     ax,dx
c001b986:	c3                   	ret    
c001b987:	83 e2 f0             	and    edx,0xfffffff0
c001b98a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b98e:	c3                   	ret    
c001b98f:	90                   	nop

c001b990 <PCI::readBAR32(unsigned int, int)>:
c001b990:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b994:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b998:	f6 c2 01             	test   dl,0x1
c001b99b:	74 07                	je     c001b9a4 <PCI::readBAR32(unsigned int, int)+0x14>
c001b99d:	83 e2 fc             	and    edx,0xfffffffc
c001b9a0:	01 c2                	add    edx,eax
c001b9a2:	ed                   	in     eax,dx
c001b9a3:	c3                   	ret    
c001b9a4:	83 e2 f0             	and    edx,0xfffffff0
c001b9a7:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b9aa:	c3                   	ret    
c001b9ab:	90                   	nop

c001b9ac <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b9ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9b8:	f6 c2 01             	test   dl,0x1
c001b9bb:	74 07                	je     c001b9c4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b9bd:	83 e2 fc             	and    edx,0xfffffffc
c001b9c0:	01 ca                	add    edx,ecx
c001b9c2:	ee                   	out    dx,al
c001b9c3:	c3                   	ret    
c001b9c4:	83 e2 f0             	and    edx,0xfffffff0
c001b9c7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b9ca:	c3                   	ret    
c001b9cb:	90                   	nop

c001b9cc <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b9cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9d8:	f6 c2 01             	test   dl,0x1
c001b9db:	74 08                	je     c001b9e5 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b9dd:	83 e2 fc             	and    edx,0xfffffffc
c001b9e0:	01 ca                	add    edx,ecx
c001b9e2:	66 ef                	out    dx,ax
c001b9e4:	c3                   	ret    
c001b9e5:	83 e2 f0             	and    edx,0xfffffff0
c001b9e8:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b9ec:	c3                   	ret    
c001b9ed:	90                   	nop

c001b9ee <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b9ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9f6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b9fa:	f6 c2 01             	test   dl,0x1
c001b9fd:	74 07                	je     c001ba06 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b9ff:	83 e2 fc             	and    edx,0xfffffffc
c001ba02:	01 ca                	add    edx,ecx
c001ba04:	ef                   	out    dx,eax
c001ba05:	c3                   	ret    
c001ba06:	83 e2 f0             	and    edx,0xfffffff0
c001ba09:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ba0c:	c3                   	ret    
c001ba0d:	90                   	nop

c001ba0e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ba0e:	55                   	push   ebp
c001ba0f:	57                   	push   edi
c001ba10:	56                   	push   esi
c001ba11:	53                   	push   ebx
c001ba12:	83 ec 0c             	sub    esp,0xc
c001ba15:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ba1a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ba1e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ba22:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba26:	83 fe 07             	cmp    esi,0x7
c001ba29:	76 10                	jbe    c001ba3b <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ba2b:	83 ec 0c             	sub    esp,0xc
c001ba2e:	68 47 34 02 c0       	push   0xc0023447
c001ba33:	e8 de 31 ff ff       	call   c000ec16 <KePanic(char const*)>
c001ba38:	83 c4 10             	add    esp,0x10
c001ba3b:	0f b6 db             	movzx  ebx,bl
c001ba3e:	83 fb 0f             	cmp    ebx,0xf
c001ba41:	76 10                	jbe    c001ba53 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ba43:	83 ec 0c             	sub    esp,0xc
c001ba46:	68 77 34 02 c0       	push   0xc0023477
c001ba4b:	e8 c6 31 ff ff       	call   c000ec16 <KePanic(char const*)>
c001ba50:	83 c4 10             	add    esp,0x10
c001ba53:	8d 04 36             	lea    eax,[esi+esi*1]
c001ba56:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ba5b:	83 c8 f0             	or     eax,0xfffffff0
c001ba5e:	ee                   	out    dx,al
c001ba5f:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ba64:	89 e8                	mov    eax,ebp
c001ba66:	ee                   	out    dx,al
c001ba67:	89 f9                	mov    ecx,edi
c001ba69:	89 d8                	mov    eax,ebx
c001ba6b:	0f b6 d9             	movzx  ebx,cl
c001ba6e:	83 c4 0c             	add    esp,0xc
c001ba71:	c1 e0 08             	shl    eax,0x8
c001ba74:	83 e3 fc             	and    ebx,0xfffffffc
c001ba77:	09 d8                	or     eax,ebx
c001ba79:	5b                   	pop    ebx
c001ba7a:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ba7f:	5e                   	pop    esi
c001ba80:	5f                   	pop    edi
c001ba81:	5d                   	pop    ebp
c001ba82:	c3                   	ret    
c001ba83:	90                   	nop

c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ba84:	57                   	push   edi
c001ba85:	56                   	push   esi
c001ba86:	53                   	push   ebx
c001ba87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ba93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ba97:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ba9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baa1:	83 ff 01             	cmp    edi,0x1
c001baa4:	75 3f                	jne    c001bae5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001baa6:	89 de                	mov    esi,ebx
c001baa8:	0f b6 c0             	movzx  eax,al
c001baab:	c1 e0 10             	shl    eax,0x10
c001baae:	81 e6 fc 00 00 00    	and    esi,0xfc
c001bab4:	0f b6 c9             	movzx  ecx,cl
c001bab7:	09 f0                	or     eax,esi
c001bab9:	c1 e1 08             	shl    ecx,0x8
c001babc:	0f b6 d2             	movzx  edx,dl
c001babf:	c1 e2 0b             	shl    edx,0xb
c001bac2:	09 c8                	or     eax,ecx
c001bac4:	09 d0                	or     eax,edx
c001bac6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bacb:	0d 00 00 00 80       	or     eax,0x80000000
c001bad0:	ef                   	out    dx,eax
c001bad1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bad6:	ed                   	in     eax,dx
c001bad7:	83 e3 02             	and    ebx,0x2
c001bada:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bae1:	d3 e8                	shr    eax,cl
c001bae3:	eb 44                	jmp    c001bb29 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bae5:	83 ff 02             	cmp    edi,0x2
c001bae8:	75 2d                	jne    c001bb17 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001baea:	83 ec 0c             	sub    esp,0xc
c001baed:	0f b6 fb             	movzx  edi,bl
c001baf0:	57                   	push   edi
c001baf1:	0f b6 c9             	movzx  ecx,cl
c001baf4:	51                   	push   ecx
c001baf5:	0f b6 d2             	movzx  edx,dl
c001baf8:	52                   	push   edx
c001baf9:	0f b6 c0             	movzx  eax,al
c001bafc:	50                   	push   eax
c001bafd:	56                   	push   esi
c001bafe:	e8 0b ff ff ff       	call   c001ba0e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb03:	89 c2                	mov    edx,eax
c001bb05:	ed                   	in     eax,dx
c001bb06:	83 e3 02             	and    ebx,0x2
c001bb09:	83 c4 20             	add    esp,0x20
c001bb0c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bb13:	d3 e8                	shr    eax,cl
c001bb15:	eb 12                	jmp    c001bb29 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bb17:	83 ec 0c             	sub    esp,0xc
c001bb1a:	68 a7 34 02 c0       	push   0xc00234a7
c001bb1f:	e8 f2 30 ff ff       	call   c000ec16 <KePanic(char const*)>
c001bb24:	83 c4 10             	add    esp,0x10
c001bb27:	31 c0                	xor    eax,eax
c001bb29:	5b                   	pop    ebx
c001bb2a:	5e                   	pop    esi
c001bb2b:	5f                   	pop    edi
c001bb2c:	c3                   	ret    
c001bb2d:	90                   	nop

c001bb2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bb2e:	83 ec 18             	sub    esp,0x18
c001bb31:	6a 00                	push   0x0
c001bb33:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb38:	50                   	push   eax
c001bb39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb3e:	50                   	push   eax
c001bb3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb44:	50                   	push   eax
c001bb45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb49:	e8 36 ff ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb4e:	83 c4 2c             	add    esp,0x2c
c001bb51:	c3                   	ret    

c001bb52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bb52:	83 ec 18             	sub    esp,0x18
c001bb55:	6a 0e                	push   0xe
c001bb57:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb5c:	50                   	push   eax
c001bb5d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb62:	50                   	push   eax
c001bb63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb68:	50                   	push   eax
c001bb69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb6d:	e8 12 ff ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb72:	83 c4 2c             	add    esp,0x2c
c001bb75:	0f b6 c0             	movzx  eax,al
c001bb78:	c3                   	ret    
c001bb79:	90                   	nop

c001bb7a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bb7a:	55                   	push   ebp
c001bb7b:	57                   	push   edi
c001bb7c:	56                   	push   esi
c001bb7d:	53                   	push   ebx
c001bb7e:	83 ec 18             	sub    esp,0x18
c001bb81:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bb86:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bb8b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bb90:	6a 0a                	push   0xa
c001bb92:	56                   	push   esi
c001bb93:	55                   	push   ebp
c001bb94:	57                   	push   edi
c001bb95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bb99:	e8 e6 fe ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb9e:	83 c4 14             	add    esp,0x14
c001bba1:	6a 0a                	push   0xa
c001bba3:	56                   	push   esi
c001bba4:	55                   	push   ebp
c001bba5:	57                   	push   edi
c001bba6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bbaa:	89 c3                	mov    ebx,eax
c001bbac:	0f b6 db             	movzx  ebx,bl
c001bbaf:	e8 d0 fe ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbb4:	83 c4 2c             	add    esp,0x2c
c001bbb7:	25 00 ff 00 00       	and    eax,0xff00
c001bbbc:	09 d8                	or     eax,ebx
c001bbbe:	5b                   	pop    ebx
c001bbbf:	5e                   	pop    esi
c001bbc0:	5f                   	pop    edi
c001bbc1:	5d                   	pop    ebp
c001bbc2:	c3                   	ret    
c001bbc3:	90                   	nop

c001bbc4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bbc4:	83 ec 18             	sub    esp,0x18
c001bbc7:	6a 08                	push   0x8
c001bbc9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbce:	50                   	push   eax
c001bbcf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbd4:	50                   	push   eax
c001bbd5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbda:	50                   	push   eax
c001bbdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbdf:	e8 a0 fe ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbe4:	83 c4 2c             	add    esp,0x2c
c001bbe7:	0f b6 c4             	movzx  eax,ah
c001bbea:	c3                   	ret    
c001bbeb:	90                   	nop

c001bbec <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bbec:	83 ec 18             	sub    esp,0x18
c001bbef:	6a 08                	push   0x8
c001bbf1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbf6:	50                   	push   eax
c001bbf7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbfc:	50                   	push   eax
c001bbfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc02:	50                   	push   eax
c001bc03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc07:	e8 78 fe ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc0c:	83 c4 2c             	add    esp,0x2c
c001bc0f:	c3                   	ret    

c001bc10 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bc10:	83 ec 18             	sub    esp,0x18
c001bc13:	6a 3c                	push   0x3c
c001bc15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc1a:	50                   	push   eax
c001bc1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc20:	50                   	push   eax
c001bc21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc26:	50                   	push   eax
c001bc27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc2b:	e8 54 fe ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc30:	83 c4 2c             	add    esp,0x2c
c001bc33:	c3                   	ret    

c001bc34 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bc34:	83 ec 18             	sub    esp,0x18
c001bc37:	6a 18                	push   0x18
c001bc39:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc3e:	50                   	push   eax
c001bc3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc44:	50                   	push   eax
c001bc45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc4a:	50                   	push   eax
c001bc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc4f:	e8 30 fe ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc54:	83 c4 2c             	add    esp,0x2c
c001bc57:	0f b6 c4             	movzx  eax,ah
c001bc5a:	c3                   	ret    
c001bc5b:	90                   	nop

c001bc5c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bc5c:	55                   	push   ebp
c001bc5d:	57                   	push   edi
c001bc5e:	56                   	push   esi
c001bc5f:	53                   	push   ebx
c001bc60:	83 ec 28             	sub    esp,0x28
c001bc63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bc67:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bc6c:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bc71:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bc76:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bc7d:	8d 43 12             	lea    eax,[ebx+0x12]
c001bc80:	83 c3 10             	add    ebx,0x10
c001bc83:	0f b6 c0             	movzx  eax,al
c001bc86:	0f b6 db             	movzx  ebx,bl
c001bc89:	50                   	push   eax
c001bc8a:	51                   	push   ecx
c001bc8b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bc8f:	57                   	push   edi
c001bc90:	55                   	push   ebp
c001bc91:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bc95:	e8 ea fd ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc9a:	83 c4 14             	add    esp,0x14
c001bc9d:	53                   	push   ebx
c001bc9e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bca2:	51                   	push   ecx
c001bca3:	89 c6                	mov    esi,eax
c001bca5:	57                   	push   edi
c001bca6:	55                   	push   ebp
c001bca7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bcab:	c1 e6 10             	shl    esi,0x10
c001bcae:	e8 d1 fd ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcb3:	83 c4 3c             	add    esp,0x3c
c001bcb6:	5b                   	pop    ebx
c001bcb7:	0f b7 c0             	movzx  eax,ax
c001bcba:	09 f0                	or     eax,esi
c001bcbc:	5e                   	pop    esi
c001bcbd:	5f                   	pop    edi
c001bcbe:	5d                   	pop    ebp
c001bcbf:	c3                   	ret    

c001bcc0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bcc0:	55                   	push   ebp
c001bcc1:	57                   	push   edi
c001bcc2:	56                   	push   esi
c001bcc3:	53                   	push   ebx
c001bcc4:	83 ec 0c             	sub    esp,0xc
c001bcc7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bccb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bccf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcd3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001bcd7:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001bcdd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bce1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bce5:	83 f9 01             	cmp    ecx,0x1
c001bce8:	75 5d                	jne    c001bd47 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001bcea:	0f b6 c8             	movzx  ecx,al
c001bced:	89 f0                	mov    eax,esi
c001bcef:	25 fc 00 00 00       	and    eax,0xfc
c001bcf4:	0f b6 d2             	movzx  edx,dl
c001bcf7:	c1 e1 10             	shl    ecx,0x10
c001bcfa:	c1 e2 0b             	shl    edx,0xb
c001bcfd:	09 c1                	or     ecx,eax
c001bcff:	89 f8                	mov    eax,edi
c001bd01:	0f b6 f8             	movzx  edi,al
c001bd04:	c1 e7 08             	shl    edi,0x8
c001bd07:	09 f9                	or     ecx,edi
c001bd09:	09 d1                	or     ecx,edx
c001bd0b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd10:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bd16:	89 c8                	mov    eax,ecx
c001bd18:	ef                   	out    dx,eax
c001bd19:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd1e:	ed                   	in     eax,dx
c001bd1f:	83 e6 02             	and    esi,0x2
c001bd22:	0f b7 db             	movzx  ebx,bx
c001bd25:	74 0a                	je     c001bd31 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001bd27:	c1 e3 10             	shl    ebx,0x10
c001bd2a:	0f b7 d0             	movzx  edx,ax
c001bd2d:	09 d3                	or     ebx,edx
c001bd2f:	eb 05                	jmp    c001bd36 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001bd31:	66 31 c0             	xor    ax,ax
c001bd34:	09 c3                	or     ebx,eax
c001bd36:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd3b:	89 c8                	mov    eax,ecx
c001bd3d:	ef                   	out    dx,eax
c001bd3e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd43:	89 d8                	mov    eax,ebx
c001bd45:	eb 41                	jmp    c001bd88 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001bd47:	83 f9 02             	cmp    ecx,0x2
c001bd4a:	75 45                	jne    c001bd91 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001bd4c:	89 f1                	mov    ecx,esi
c001bd4e:	83 ec 0c             	sub    esp,0xc
c001bd51:	0f b6 f1             	movzx  esi,cl
c001bd54:	89 f9                	mov    ecx,edi
c001bd56:	56                   	push   esi
c001bd57:	0f b6 f9             	movzx  edi,cl
c001bd5a:	57                   	push   edi
c001bd5b:	0f b6 d2             	movzx  edx,dl
c001bd5e:	52                   	push   edx
c001bd5f:	0f b6 c0             	movzx  eax,al
c001bd62:	50                   	push   eax
c001bd63:	55                   	push   ebp
c001bd64:	e8 a5 fc ff ff       	call   c001ba0e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd69:	89 c2                	mov    edx,eax
c001bd6b:	ed                   	in     eax,dx
c001bd6c:	83 c4 20             	add    esp,0x20
c001bd6f:	f6 c2 02             	test   dl,0x2
c001bd72:	0f b7 db             	movzx  ebx,bx
c001bd75:	74 0c                	je     c001bd83 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001bd77:	0f b7 c8             	movzx  ecx,ax
c001bd7a:	89 d8                	mov    eax,ebx
c001bd7c:	c1 e0 10             	shl    eax,0x10
c001bd7f:	09 c8                	or     eax,ecx
c001bd81:	eb 05                	jmp    c001bd88 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001bd83:	66 31 c0             	xor    ax,ax
c001bd86:	09 d8                	or     eax,ebx
c001bd88:	ef                   	out    dx,eax
c001bd89:	83 c4 0c             	add    esp,0xc
c001bd8c:	5b                   	pop    ebx
c001bd8d:	5e                   	pop    esi
c001bd8e:	5f                   	pop    edi
c001bd8f:	5d                   	pop    ebp
c001bd90:	c3                   	ret    
c001bd91:	c7 44 24 20 a7 34 02 c0 	mov    DWORD PTR [esp+0x20],0xc00234a7
c001bd99:	83 c4 0c             	add    esp,0xc
c001bd9c:	5b                   	pop    ebx
c001bd9d:	5e                   	pop    esi
c001bd9e:	5f                   	pop    edi
c001bd9f:	5d                   	pop    ebp
c001bda0:	e9 71 2e ff ff       	jmp    c000ec16 <KePanic(char const*)>
c001bda5:	90                   	nop

c001bda6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001bda6:	55                   	push   ebp
c001bda7:	57                   	push   edi
c001bda8:	56                   	push   esi
c001bda9:	53                   	push   ebx
c001bdaa:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001bdb0:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001bdb7:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001bdbe:	0f 85 bd 00 00 00    	jne    c001be81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001bdc4:	83 ec 0c             	sub    esp,0xc
c001bdc7:	68 14 01 00 00       	push   0x114
c001bdcc:	e8 ff 2a ff ff       	call   c000e8d0 <malloc>
c001bdd1:	83 c4 0c             	add    esp,0xc
c001bdd4:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001bdda:	68 ad 34 02 c0       	push   0xc00234ad
c001bddf:	50                   	push   eax
c001bde0:	89 c3                	mov    ebx,eax
c001bde2:	e8 25 c3 fe ff       	call   c000810c <File::File(char const*, Process*)>
c001bde7:	83 c4 10             	add    esp,0x10
c001bdea:	85 db                	test   ebx,ebx
c001bdec:	0f 84 6b 02 00 00    	je     c001c05d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bdf2:	57                   	push   edi
c001bdf3:	57                   	push   edi
c001bdf4:	6a 01                	push   0x1
c001bdf6:	53                   	push   ebx
c001bdf7:	e8 2e c3 fe ff       	call   c000812a <File::open(FileOpenMode)>
c001bdfc:	83 c4 10             	add    esp,0x10
c001bdff:	85 c0                	test   eax,eax
c001be01:	0f 85 56 02 00 00    	jne    c001c05d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be07:	52                   	push   edx
c001be08:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001be0c:	50                   	push   eax
c001be0d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001be11:	50                   	push   eax
c001be12:	53                   	push   ebx
c001be13:	e8 14 c6 fe ff       	call   c000842c <File::stat(unsigned long long*, bool*)>
c001be18:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be1c:	40                   	inc    eax
c001be1d:	89 04 24             	mov    DWORD PTR [esp],eax
c001be20:	e8 ab 2a ff ff       	call   c000e8d0 <malloc>
c001be25:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001be29:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001be2d:	59                   	pop    ecx
c001be2e:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001be33:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be35:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001be39:	51                   	push   ecx
c001be3a:	50                   	push   eax
c001be3b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001be3f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001be43:	53                   	push   ebx
c001be44:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be47:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001be4b:	83 c4 20             	add    esp,0x20
c001be4e:	89 c8                	mov    eax,ecx
c001be50:	99                   	cdq    
c001be51:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001be55:	0f 85 02 02 00 00    	jne    c001c05d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be5b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001be5f:	0f 85 f8 01 00 00    	jne    c001c05d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001be65:	83 ec 0c             	sub    esp,0xc
c001be68:	53                   	push   ebx
c001be69:	e8 1a c3 fe ff       	call   c0008188 <File::close()>
c001be6e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be72:	83 c4 10             	add    esp,0x10
c001be75:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001be7c:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001be81:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001be89:	31 c9                	xor    ecx,ecx
c001be8b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001be92:	8b 2d c4 d0 02 c0    	mov    ebp,DWORD PTR ds:0xc002d0c4
c001be98:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001be9f:	8b 15 c8 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d0c8
c001bea5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001beaa:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001beb2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001beb7:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bec3:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001becb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001becf:	39 cd                	cmp    ebp,ecx
c001bed1:	0f 8e 86 01 00 00    	jle    c001c05d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001bed7:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001beda:	d4 40                	aam    0x40
c001bedc:	d5 39                	aad    0x39
c001bede:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bee2:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001bee6:	d4 40                	aam    0x40
c001bee8:	d5 39                	aad    0x39
c001beea:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001beee:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001bef2:	d4 40                	aam    0x40
c001bef4:	d5 39                	aad    0x39
c001bef6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001befa:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001befe:	d4 40                	aam    0x40
c001bf00:	d5 39                	aad    0x39
c001bf02:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bf06:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001bf0a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001bf0e:	3c 56                	cmp    al,0x56
c001bf10:	74 47                	je     c001bf59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001bf12:	d4 40                	aam    0x40
c001bf14:	d5 39                	aad    0x39
c001bf16:	8d 58 d0             	lea    ebx,[eax-0x30]
c001bf19:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001bf1d:	0f b6 db             	movzx  ebx,bl
c001bf20:	c1 e3 04             	shl    ebx,0x4
c001bf23:	d4 40                	aam    0x40
c001bf25:	d5 39                	aad    0x39
c001bf27:	83 e8 30             	sub    eax,0x30
c001bf2a:	0f b6 c0             	movzx  eax,al
c001bf2d:	09 c3                	or     ebx,eax
c001bf2f:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001bf33:	c1 e3 04             	shl    ebx,0x4
c001bf36:	d4 40                	aam    0x40
c001bf38:	d5 39                	aad    0x39
c001bf3a:	83 e8 30             	sub    eax,0x30
c001bf3d:	0f b6 c0             	movzx  eax,al
c001bf40:	09 c3                	or     ebx,eax
c001bf42:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001bf46:	c1 e3 04             	shl    ebx,0x4
c001bf49:	d4 40                	aam    0x40
c001bf4b:	d5 39                	aad    0x39
c001bf4d:	83 e8 30             	sub    eax,0x30
c001bf50:	0f b6 c0             	movzx  eax,al
c001bf53:	09 c3                	or     ebx,eax
c001bf55:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001bf59:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001bf5d:	80 fb 58             	cmp    bl,0x58
c001bf60:	74 49                	je     c001bfab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001bf62:	88 d8                	mov    al,bl
c001bf64:	d4 40                	aam    0x40
c001bf66:	d5 39                	aad    0x39
c001bf68:	83 e8 30             	sub    eax,0x30
c001bf6b:	0f b6 f8             	movzx  edi,al
c001bf6e:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001bf72:	c1 e7 04             	shl    edi,0x4
c001bf75:	d4 40                	aam    0x40
c001bf77:	d5 39                	aad    0x39
c001bf79:	83 e8 30             	sub    eax,0x30
c001bf7c:	0f b6 c0             	movzx  eax,al
c001bf7f:	09 c7                	or     edi,eax
c001bf81:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001bf85:	c1 e7 04             	shl    edi,0x4
c001bf88:	d4 40                	aam    0x40
c001bf8a:	d5 39                	aad    0x39
c001bf8c:	83 e8 30             	sub    eax,0x30
c001bf8f:	0f b6 c0             	movzx  eax,al
c001bf92:	09 c7                	or     edi,eax
c001bf94:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001bf98:	c1 e7 04             	shl    edi,0x4
c001bf9b:	d4 40                	aam    0x40
c001bf9d:	d5 39                	aad    0x39
c001bf9f:	83 e8 30             	sub    eax,0x30
c001bfa2:	0f b6 c0             	movzx  eax,al
c001bfa5:	09 c7                	or     edi,eax
c001bfa7:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001bfab:	8d 41 10             	lea    eax,[ecx+0x10]
c001bfae:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001bfb2:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001bfb6:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bfba:	83 f9 0a             	cmp    ecx,0xa
c001bfbd:	74 07                	je     c001bfc6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001bfbf:	47                   	inc    edi
c001bfc0:	39 c5                	cmp    ebp,eax
c001bfc2:	75 16                	jne    c001bfda <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001bfc4:	89 e8                	mov    eax,ebp
c001bfc6:	83 f9 0a             	cmp    ecx,0xa
c001bfc9:	0f 94 c1             	sete   cl
c001bfcc:	0f b6 c9             	movzx  ecx,cl
c001bfcf:	01 c1                	add    ecx,eax
c001bfd1:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001bfd6:	75 0f                	jne    c001bfe7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001bfd8:	eb 1c                	jmp    c001bff6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001bfda:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001bfdd:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001bfe1:	40                   	inc    eax
c001bfe2:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001bfe5:	eb cb                	jmp    c001bfb2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001bfe7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bfeb:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001bff0:	0f 85 d9 fe ff ff    	jne    c001becf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001bff6:	80 fb 58             	cmp    bl,0x58
c001bff9:	74 10                	je     c001c00b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001bffb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c000:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001c005:	0f 85 c4 fe ff ff    	jne    c001becf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c00b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c00f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c013:	83 e8 30             	sub    eax,0x30
c001c016:	c1 e0 04             	shl    eax,0x4
c001c019:	83 eb 30             	sub    ebx,0x30
c001c01c:	09 d8                	or     eax,ebx
c001c01e:	0f b6 c0             	movzx  eax,al
c001c021:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c025:	0f 85 a4 fe ff ff    	jne    c001becf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c02b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c02f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c033:	83 e8 30             	sub    eax,0x30
c001c036:	c1 e0 04             	shl    eax,0x4
c001c039:	83 eb 30             	sub    ebx,0x30
c001c03c:	09 d8                	or     eax,ebx
c001c03e:	0f b6 c0             	movzx  eax,al
c001c041:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c045:	0f 85 84 fe ff ff    	jne    c001becf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001c04b:	50                   	push   eax
c001c04c:	50                   	push   eax
c001c04d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c051:	50                   	push   eax
c001c052:	56                   	push   esi
c001c053:	e8 f8 45 fe ff       	call   c0000650 <strcpy>
c001c058:	83 c4 10             	add    esp,0x10
c001c05b:	eb 05                	jmp    c001c062 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001c05d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c060:	31 f6                	xor    esi,esi
c001c062:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c068:	89 f0                	mov    eax,esi
c001c06a:	5b                   	pop    ebx
c001c06b:	5e                   	pop    esi
c001c06c:	5f                   	pop    edi
c001c06d:	5d                   	pop    ebp
c001c06e:	c3                   	ret    
c001c06f:	90                   	nop

c001c070 <PCI::checkBus(unsigned char)>:
c001c070:	56                   	push   esi
c001c071:	53                   	push   ebx
c001c072:	31 db                	xor    ebx,ebx
c001c074:	51                   	push   ecx
c001c075:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c07a:	52                   	push   edx
c001c07b:	53                   	push   ebx
c001c07c:	43                   	inc    ebx
c001c07d:	56                   	push   esi
c001c07e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c082:	e8 6f 03 00 00       	call   c001c3f6 <PCI::checkDevice(unsigned char, unsigned char)>
c001c087:	83 c4 10             	add    esp,0x10
c001c08a:	83 fb 20             	cmp    ebx,0x20
c001c08d:	75 eb                	jne    c001c07a <PCI::checkBus(unsigned char)+0xa>
c001c08f:	58                   	pop    eax
c001c090:	5b                   	pop    ebx
c001c091:	5e                   	pop    esi
c001c092:	c3                   	ret    
c001c093:	90                   	nop

c001c094 <PCI::foundDevice(PCIDeviceInfo)>:
c001c094:	55                   	push   ebp
c001c095:	57                   	push   edi
c001c096:	56                   	push   esi
c001c097:	53                   	push   ebx
c001c098:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c09e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c0a6:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c001c0ad:	3d ff ff 00 00       	cmp    eax,0xffff
c001c0b2:	0f 84 b6 01 00 00    	je     c001c26e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c0b8:	0f b7 ac 24 a4 00 00 00 	movzx  ebp,WORD PTR [esp+0xa4]
c001c0c0:	66 81 fd 06 04       	cmp    bp,0x406
c001c0c5:	75 32                	jne    c001c0f9 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c0c7:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c0cf:	50                   	push   eax
c001c0d0:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c0d8:	50                   	push   eax
c001c0d9:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c0e1:	50                   	push   eax
c001c0e2:	53                   	push   ebx
c001c0e3:	e8 4c fb ff ff       	call   c001bc34 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c0e8:	59                   	pop    ecx
c001c0e9:	5e                   	pop    esi
c001c0ea:	0f b6 c0             	movzx  eax,al
c001c0ed:	50                   	push   eax
c001c0ee:	53                   	push   ebx
c001c0ef:	e8 7c ff ff ff       	call   c001c070 <PCI::checkBus(unsigned char)>
c001c0f4:	e9 15 01 00 00       	jmp    c001c20e <PCI::foundDevice(PCIDeviceInfo)+0x17a>
c001c0f9:	0f b6 94 24 c4 00 00 00 	movzx  edx,BYTE PTR [esp+0xc4]
c001c101:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001c107:	8b 8c 24 a4 00 00 00 	mov    ecx,DWORD PTR [esp+0xa4]
c001c10e:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c119:	85 c0                	test   eax,eax
c001c11b:	74 34                	je     c001c151 <PCI::foundDevice(PCIDeviceInfo)+0xbd>
c001c11d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c120:	85 d2                	test   edx,edx
c001c122:	74 29                	je     c001c14d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c124:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c12a:	31 cf                	xor    edi,ecx
c001c12c:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c132:	75 19                	jne    c001c14d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c134:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001c13a:	75 11                	jne    c001c14d <PCI::foundDevice(PCIDeviceInfo)+0xb9>
c001c13c:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c143:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c147:	0f 84 21 01 00 00    	je     c001c26e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c14d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c14f:	eb c8                	jmp    c001c119 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c151:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c155:	be e0 34 02 c0       	mov    esi,0xc00234e0
c001c15a:	b9 07 00 00 00       	mov    ecx,0x7
c001c15f:	fc                   	cld    
c001c160:	31 d2                	xor    edx,edx
c001c162:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c164:	b9 12 00 00 00       	mov    ecx,0x12
c001c169:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c170:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c174:	83 ec 0c             	sub    esp,0xc
c001c177:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c179:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c181:	b9 0a 00 00 00       	mov    ecx,0xa
c001c186:	f7 f1                	div    ecx
c001c188:	83 c0 30             	add    eax,0x30
c001c18b:	83 c2 30             	add    edx,0x30
c001c18e:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c192:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c19a:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c19e:	31 d2                	xor    edx,edx
c001c1a0:	f7 f1                	div    ecx
c001c1a2:	83 c0 30             	add    eax,0x30
c001c1a5:	83 c2 30             	add    edx,0x30
c001c1a8:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c1ac:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c1b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c1b4:	50                   	push   eax
c001c1b5:	e8 e1 03 ff ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c1ba:	83 c4 10             	add    esp,0x10
c001c1bd:	81 fd 01 06 00 00    	cmp    ebp,0x601
c001c1c3:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c1ca:	75 47                	jne    c001c213 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c001c1cc:	83 ec 0c             	sub    esp,0xc
c001c1cf:	68 64 01 00 00       	push   0x164
c001c1d4:	e8 f7 26 ff ff       	call   c000e8d0 <malloc>
c001c1d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1dc:	89 c5                	mov    ebp,eax
c001c1de:	e8 9d 10 00 00       	call   c001d280 <SATABus::SATABus()>
c001c1e3:	58                   	pop    eax
c001c1e4:	5a                   	pop    edx
c001c1e5:	55                   	push   ebp
c001c1e6:	53                   	push   ebx
c001c1e7:	e8 5a ce fe ff       	call   c0009046 <Device::addChild(Device*)>
c001c1ec:	83 ec 1c             	sub    esp,0x1c
c001c1ef:	b9 09 00 00 00       	mov    ecx,0x9
c001c1f4:	89 e7                	mov    edi,esp
c001c1f6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c1f8:	55                   	push   ebp
c001c1f9:	e8 8e cd fe ff       	call   c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>
c001c1fe:	83 c4 30             	add    esp,0x30
c001c201:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c204:	6a 00                	push   0x0
c001c206:	6a 00                	push   0x0
c001c208:	6a 00                	push   0x0
c001c20a:	55                   	push   ebp
c001c20b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c20e:	83 c4 10             	add    esp,0x10
c001c211:	eb 5b                	jmp    c001c26e <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001c213:	81 fd 01 01 00 00    	cmp    ebp,0x101
c001c219:	75 19                	jne    c001c234 <PCI::foundDevice(PCIDeviceInfo)+0x1a0>
c001c21b:	83 ec 0c             	sub    esp,0xc
c001c21e:	68 70 02 00 00       	push   0x270
c001c223:	e8 a8 26 ff ff       	call   c000e8d0 <malloc>
c001c228:	89 04 24             	mov    DWORD PTR [esp],eax
c001c22b:	89 c5                	mov    ebp,eax
c001c22d:	e8 94 02 00 00       	call   c001c4c6 <IDE::IDE()>
c001c232:	eb af                	jmp    c001c1e3 <PCI::foundDevice(PCIDeviceInfo)+0x14f>
c001c234:	83 ec 0c             	sub    esp,0xc
c001c237:	68 58 01 00 00       	push   0x158
c001c23c:	e8 8f 26 ff ff       	call   c000e8d0 <malloc>
c001c241:	89 c5                	mov    ebp,eax
c001c243:	58                   	pop    eax
c001c244:	5a                   	pop    edx
c001c245:	68 c6 34 02 c0       	push   0xc00234c6
c001c24a:	55                   	push   ebp
c001c24b:	e8 aa d0 fe ff       	call   c00092fa <DriverlessDevice::DriverlessDevice(char const*)>
c001c250:	59                   	pop    ecx
c001c251:	5f                   	pop    edi
c001c252:	55                   	push   ebp
c001c253:	53                   	push   ebx
c001c254:	e8 ed cd fe ff       	call   c0009046 <Device::addChild(Device*)>
c001c259:	83 ec 1c             	sub    esp,0x1c
c001c25c:	b9 09 00 00 00       	mov    ecx,0x9
c001c261:	89 e7                	mov    edi,esp
c001c263:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c265:	55                   	push   ebp
c001c266:	e8 21 cd fe ff       	call   c0008f8c <Device::preOpenPCI(PCIDeviceInfo)>
c001c26b:	83 c4 30             	add    esp,0x30
c001c26e:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c274:	5b                   	pop    ebx
c001c275:	5e                   	pop    esi
c001c276:	5f                   	pop    edi
c001c277:	5d                   	pop    ebp
c001c278:	c3                   	ret    
c001c279:	90                   	nop

c001c27a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c27a:	55                   	push   ebp
c001c27b:	57                   	push   edi
c001c27c:	56                   	push   esi
c001c27d:	53                   	push   ebx
c001c27e:	83 ec 68             	sub    esp,0x68
c001c281:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c288:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c28c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c290:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c297:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c29c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2a0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c2a7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c2b0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c2b5:	6a 0c                	push   0xc
c001c2b7:	57                   	push   edi
c001c2b8:	53                   	push   ebx
c001c2b9:	56                   	push   esi
c001c2ba:	55                   	push   ebp
c001c2bb:	e8 c4 f7 ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2c0:	83 c4 20             	add    esp,0x20
c001c2c3:	57                   	push   edi
c001c2c4:	53                   	push   ebx
c001c2c5:	56                   	push   esi
c001c2c6:	55                   	push   ebp
c001c2c7:	e8 ae f8 ff ff       	call   c001bb7a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c2cc:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c2d1:	57                   	push   edi
c001c2d2:	53                   	push   ebx
c001c2d3:	56                   	push   esi
c001c2d4:	55                   	push   ebp
c001c2d5:	e8 36 f9 ff ff       	call   c001bc10 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c2da:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c2de:	83 c4 14             	add    esp,0x14
c001c2e1:	6a 3c                	push   0x3c
c001c2e3:	57                   	push   edi
c001c2e4:	53                   	push   ebx
c001c2e5:	56                   	push   esi
c001c2e6:	55                   	push   ebp
c001c2e7:	e8 98 f7 ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2ec:	0f b6 c4             	movzx  eax,ah
c001c2ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c2f3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c2f7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c2fb:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c300:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c306:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c30c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c310:	83 c4 20             	add    esp,0x20
c001c313:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c318:	74 30                	je     c001c34a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c31a:	31 c0                	xor    eax,eax
c001c31c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c320:	7e 28                	jle    c001c34a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c322:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c32a:	39 cb                	cmp    ebx,ecx
c001c32c:	75 19                	jne    c001c347 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c32e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c336:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c33a:	75 0b                	jne    c001c347 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c33c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c343:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c347:	40                   	inc    eax
c001c348:	eb d2                	jmp    c001c31c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c34a:	31 d2                	xor    edx,edx
c001c34c:	83 ec 0c             	sub    esp,0xc
c001c34f:	57                   	push   edi
c001c350:	53                   	push   ebx
c001c351:	56                   	push   esi
c001c352:	52                   	push   edx
c001c353:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c357:	55                   	push   ebp
c001c358:	e8 ff f8 ff ff       	call   c001bc5c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c35d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c361:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c365:	42                   	inc    edx
c001c366:	83 c4 20             	add    esp,0x20
c001c369:	83 fa 06             	cmp    edx,0x6
c001c36c:	75 de                	jne    c001c34c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c36e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c372:	83 ec 0c             	sub    esp,0xc
c001c375:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c379:	c1 e2 08             	shl    edx,0x8
c001c37c:	0f b6 c4             	movzx  eax,ah
c001c37f:	09 d0                	or     eax,edx
c001c381:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c386:	6a 02                	push   0x2
c001c388:	57                   	push   edi
c001c389:	53                   	push   ebx
c001c38a:	56                   	push   esi
c001c38b:	55                   	push   ebp
c001c38c:	e8 f3 f6 ff ff       	call   c001ba84 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c391:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c396:	83 c4 20             	add    esp,0x20
c001c399:	57                   	push   edi
c001c39a:	53                   	push   ebx
c001c39b:	56                   	push   esi
c001c39c:	55                   	push   ebp
c001c39d:	e8 22 f8 ff ff       	call   c001bbc4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c3a2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c3a6:	57                   	push   edi
c001c3a7:	53                   	push   ebx
c001c3a8:	56                   	push   esi
c001c3a9:	55                   	push   ebp
c001c3aa:	e8 7f f7 ff ff       	call   c001bb2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c3af:	b9 09 00 00 00       	mov    ecx,0x9
c001c3b4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c3b9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c3bd:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c3c1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c3c5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c3c9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c3cd:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c3d1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c3d5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c3d9:	83 ec 0c             	sub    esp,0xc
c001c3dc:	fc                   	cld    
c001c3dd:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c3e1:	89 e7                	mov    edi,esp
c001c3e3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c3e5:	55                   	push   ebp
c001c3e6:	e8 a9 fc ff ff       	call   c001c094 <PCI::foundDevice(PCIDeviceInfo)>
c001c3eb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c3f1:	5b                   	pop    ebx
c001c3f2:	5e                   	pop    esi
c001c3f3:	5f                   	pop    edi
c001c3f4:	5d                   	pop    ebp
c001c3f5:	c3                   	ret    

c001c3f6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c3f6:	55                   	push   ebp
c001c3f7:	57                   	push   edi
c001c3f8:	56                   	push   esi
c001c3f9:	53                   	push   ebx
c001c3fa:	83 ec 0c             	sub    esp,0xc
c001c3fd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c402:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c407:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c40b:	6a 00                	push   0x0
c001c40d:	56                   	push   esi
c001c40e:	57                   	push   edi
c001c40f:	55                   	push   ebp
c001c410:	e8 19 f7 ff ff       	call   c001bb2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c415:	6a 00                	push   0x0
c001c417:	56                   	push   esi
c001c418:	57                   	push   edi
c001c419:	55                   	push   ebp
c001c41a:	e8 5b fe ff ff       	call   c001c27a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c41f:	83 c4 20             	add    esp,0x20
c001c422:	6a 00                	push   0x0
c001c424:	56                   	push   esi
c001c425:	57                   	push   edi
c001c426:	55                   	push   ebp
c001c427:	e8 26 f7 ff ff       	call   c001bb52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	a8 80                	test   al,0x80
c001c431:	74 2d                	je     c001c460 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c433:	bb 01 00 00 00       	mov    ebx,0x1
c001c438:	53                   	push   ebx
c001c439:	56                   	push   esi
c001c43a:	57                   	push   edi
c001c43b:	55                   	push   ebp
c001c43c:	e8 ed f6 ff ff       	call   c001bb2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	0f b7 c0             	movzx  eax,ax
c001c447:	3d ff ff 00 00       	cmp    eax,0xffff
c001c44c:	74 0c                	je     c001c45a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c44e:	53                   	push   ebx
c001c44f:	56                   	push   esi
c001c450:	57                   	push   edi
c001c451:	55                   	push   ebp
c001c452:	e8 23 fe ff ff       	call   c001c27a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c457:	83 c4 10             	add    esp,0x10
c001c45a:	43                   	inc    ebx
c001c45b:	83 fb 08             	cmp    ebx,0x8
c001c45e:	75 d8                	jne    c001c438 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c460:	83 c4 0c             	add    esp,0xc
c001c463:	5b                   	pop    ebx
c001c464:	5e                   	pop    esi
c001c465:	5f                   	pop    edi
c001c466:	5d                   	pop    ebp
c001c467:	c3                   	ret    

c001c468 <PCI::detect()>:
c001c468:	56                   	push   esi
c001c469:	53                   	push   ebx
c001c46a:	53                   	push   ebx
c001c46b:	31 db                	xor    ebx,ebx
c001c46d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c471:	6a 00                	push   0x0
c001c473:	6a 00                	push   0x0
c001c475:	6a 00                	push   0x0
c001c477:	56                   	push   esi
c001c478:	e8 d5 f6 ff ff       	call   c001bb52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c47d:	83 c4 10             	add    esp,0x10
c001c480:	a8 80                	test   al,0x80
c001c482:	75 21                	jne    c001c4a5 <PCI::detect()+0x3d>
c001c484:	51                   	push   ecx
c001c485:	51                   	push   ecx
c001c486:	6a 00                	push   0x0
c001c488:	56                   	push   esi
c001c489:	e8 e2 fb ff ff       	call   c001c070 <PCI::checkBus(unsigned char)>
c001c48e:	83 c4 10             	add    esp,0x10
c001c491:	eb 2a                	jmp    c001c4bd <PCI::detect()+0x55>
c001c493:	52                   	push   edx
c001c494:	52                   	push   edx
c001c495:	53                   	push   ebx
c001c496:	43                   	inc    ebx
c001c497:	56                   	push   esi
c001c498:	e8 d3 fb ff ff       	call   c001c070 <PCI::checkBus(unsigned char)>
c001c49d:	83 c4 10             	add    esp,0x10
c001c4a0:	83 fb 08             	cmp    ebx,0x8
c001c4a3:	74 18                	je     c001c4bd <PCI::detect()+0x55>
c001c4a5:	53                   	push   ebx
c001c4a6:	6a 00                	push   0x0
c001c4a8:	6a 00                	push   0x0
c001c4aa:	56                   	push   esi
c001c4ab:	e8 7e f6 ff ff       	call   c001bb2e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4b0:	83 c4 10             	add    esp,0x10
c001c4b3:	0f b7 c0             	movzx  eax,ax
c001c4b6:	3d ff ff 00 00       	cmp    eax,0xffff
c001c4bb:	74 d6                	je     c001c493 <PCI::detect()+0x2b>
c001c4bd:	58                   	pop    eax
c001c4be:	5b                   	pop    ebx
c001c4bf:	5e                   	pop    esi
c001c4c0:	c3                   	ret    
c001c4c1:	90                   	nop

c001c4c2 <IDE::close(int, int, void*)>:
c001c4c2:	83 c8 ff             	or     eax,0xffffffff
c001c4c5:	c3                   	ret    

c001c4c6 <IDE::IDE()>:
c001c4c6:	83 ec 0c             	sub    esp,0xc
c001c4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cd:	83 ec 08             	sub    esp,0x8
c001c4d0:	68 70 35 02 c0       	push   0xc0023570
c001c4d5:	50                   	push   eax
c001c4d6:	e8 c5 ce fe ff       	call   c00093a0 <HardDiskController::HardDiskController(char const*)>
c001c4db:	83 c4 10             	add    esp,0x10
c001c4de:	ba 84 36 02 c0       	mov    edx,0xc0023684
c001c4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e7:	89 10                	mov    DWORD PTR [eax],edx
c001c4e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c4f4:	90                   	nop
c001c4f5:	83 c4 0c             	add    esp,0xc
c001c4f8:	c3                   	ret    
c001c4f9:	90                   	nop

c001c4fa <IDE::prepareInterrupt(unsigned char)>:
c001c4fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4ff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c503:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c50b:	c3                   	ret    

c001c50c <selectDrive(unsigned char, unsigned char)>:
c001c50c:	c3                   	ret    
c001c50d:	90                   	nop

c001c50e <IDE::getBase(unsigned char)>:
c001c50e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c517:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c51f:	c3                   	ret    

c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c520:	55                   	push   ebp
c001c521:	57                   	push   edi
c001c522:	56                   	push   esi
c001c523:	53                   	push   ebx
c001c524:	83 ec 1c             	sub    esp,0x1c
c001c527:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c52b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c52f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c533:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c537:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c53a:	80 f9 03             	cmp    cl,0x3
c001c53d:	77 4f                	ja     c001c58e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c53f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c543:	0f b6 f2             	movzx  esi,dl
c001c546:	0f b6 db             	movzx  ebx,bl
c001c549:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c54c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c551:	80 ca 80             	or     dl,0x80
c001c554:	52                   	push   edx
c001c555:	6a 0c                	push   0xc
c001c557:	56                   	push   esi
c001c558:	57                   	push   edi
c001c559:	e8 c2 ff ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c55e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c567:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c56b:	ee                   	out    dx,al
c001c56c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c571:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c575:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c579:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c581:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c585:	83 c4 2c             	add    esp,0x2c
c001c588:	5b                   	pop    ebx
c001c589:	5e                   	pop    esi
c001c58a:	5f                   	pop    edi
c001c58b:	5d                   	pop    ebp
c001c58c:	eb 92                	jmp    c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c58e:	0f b6 cb             	movzx  ecx,bl
c001c591:	83 f9 07             	cmp    ecx,0x7
c001c594:	77 12                	ja     c001c5a8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c596:	0f b6 d2             	movzx  edx,dl
c001c599:	0f b6 db             	movzx  ebx,bl
c001c59c:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001c5a4:	01 da                	add    edx,ebx
c001c5a6:	eb 2f                	jmp    c001c5d7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c5a8:	83 f9 0d             	cmp    ecx,0xd
c001c5ab:	77 13                	ja     c001c5c0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c5ad:	0f b6 d2             	movzx  edx,dl
c001c5b0:	0f b6 db             	movzx  ebx,bl
c001c5b3:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c5ba:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c5be:	eb 17                	jmp    c001c5d7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c5c0:	83 f9 15             	cmp    ecx,0x15
c001c5c3:	77 13                	ja     c001c5d8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c5c5:	0f b6 d2             	movzx  edx,dl
c001c5c8:	0f b6 db             	movzx  ebx,bl
c001c5cb:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c5d3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c5d7:	ee                   	out    dx,al
c001c5d8:	83 c4 1c             	add    esp,0x1c
c001c5db:	5b                   	pop    ebx
c001c5dc:	5e                   	pop    esi
c001c5dd:	5f                   	pop    edi
c001c5de:	5d                   	pop    ebp
c001c5df:	c3                   	ret    

c001c5e0 <IDE::read(unsigned char, unsigned char)>:
c001c5e0:	57                   	push   edi
c001c5e1:	56                   	push   esi
c001c5e2:	53                   	push   ebx
c001c5e3:	83 ec 10             	sub    esp,0x10
c001c5e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c5ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c5ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c5f2:	8d 42 f8             	lea    eax,[edx-0x8]
c001c5f5:	3c 03                	cmp    al,0x3
c001c5f7:	77 48                	ja     c001c641 <IDE::read(unsigned char, unsigned char)+0x61>
c001c5f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c5fd:	0f b6 f1             	movzx  esi,cl
c001c600:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001c603:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001c608:	0c 80                	or     al,0x80
c001c60a:	50                   	push   eax
c001c60b:	6a 0c                	push   0xc
c001c60d:	56                   	push   esi
c001c60e:	53                   	push   ebx
c001c60f:	e8 0c ff ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c614:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c618:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001c61d:	0f b6 d2             	movzx  edx,dl
c001c620:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c624:	ec                   	in     al,dx
c001c625:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c629:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001c62e:	52                   	push   edx
c001c62f:	6a 0c                	push   0xc
c001c631:	56                   	push   esi
c001c632:	53                   	push   ebx
c001c633:	e8 e8 fe ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c638:	83 c4 20             	add    esp,0x20
c001c63b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c63f:	eb 4c                	jmp    c001c68d <IDE::read(unsigned char, unsigned char)+0xad>
c001c641:	0f b6 f2             	movzx  esi,dl
c001c644:	83 fe 07             	cmp    esi,0x7
c001c647:	77 12                	ja     c001c65b <IDE::read(unsigned char, unsigned char)+0x7b>
c001c649:	0f b6 c9             	movzx  ecx,cl
c001c64c:	0f b6 d2             	movzx  edx,dl
c001c64f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001c657:	01 c2                	add    edx,eax
c001c659:	eb 31                	jmp    c001c68c <IDE::read(unsigned char, unsigned char)+0xac>
c001c65b:	83 fe 0d             	cmp    esi,0xd
c001c65e:	77 13                	ja     c001c673 <IDE::read(unsigned char, unsigned char)+0x93>
c001c660:	0f b6 c9             	movzx  ecx,cl
c001c663:	0f b6 d2             	movzx  edx,dl
c001c666:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001c66d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c671:	eb 19                	jmp    c001c68c <IDE::read(unsigned char, unsigned char)+0xac>
c001c673:	31 c0                	xor    eax,eax
c001c675:	83 fe 15             	cmp    esi,0x15
c001c678:	77 13                	ja     c001c68d <IDE::read(unsigned char, unsigned char)+0xad>
c001c67a:	0f b6 c9             	movzx  ecx,cl
c001c67d:	0f b6 d2             	movzx  edx,dl
c001c680:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001c688:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c68c:	ec                   	in     al,dx
c001c68d:	83 c4 10             	add    esp,0x10
c001c690:	5b                   	pop    ebx
c001c691:	5e                   	pop    esi
c001c692:	5f                   	pop    edi
c001c693:	c3                   	ret    

c001c694 <IDE::waitInterrupt(unsigned char)>:
c001c694:	55                   	push   ebp
c001c695:	57                   	push   edi
c001c696:	56                   	push   esi
c001c697:	53                   	push   ebx
c001c698:	31 db                	xor    ebx,ebx
c001c69a:	83 ec 0c             	sub    esp,0xc
c001c69d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c6a1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c6a6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c6ae:	89 e8                	mov    eax,ebp
c001c6b0:	84 c0                	test   al,al
c001c6b2:	75 30                	jne    c001c6e4 <IDE::waitInterrupt(unsigned char)+0x50>
c001c6b4:	50                   	push   eax
c001c6b5:	6a 0c                	push   0xc
c001c6b7:	56                   	push   esi
c001c6b8:	57                   	push   edi
c001c6b9:	e8 22 ff ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	a8 01                	test   al,0x1
c001c6c3:	75 27                	jne    c001c6ec <IDE::waitInterrupt(unsigned char)+0x58>
c001c6c5:	f6 c3 04             	test   bl,0x4
c001c6c8:	75 12                	jne    c001c6dc <IDE::waitInterrupt(unsigned char)+0x48>
c001c6ca:	83 fb 32             	cmp    ebx,0x32
c001c6cd:	7e 0d                	jle    c001c6dc <IDE::waitInterrupt(unsigned char)+0x48>
c001c6cf:	83 ec 0c             	sub    esp,0xc
c001c6d2:	6a 64                	push   0x64
c001c6d4:	e8 bf 8e ff ff       	call   c0015598 <milliTenthSleep(unsigned int)>
c001c6d9:	83 c4 10             	add    esp,0x10
c001c6dc:	83 fb 3c             	cmp    ebx,0x3c
c001c6df:	74 0b                	je     c001c6ec <IDE::waitInterrupt(unsigned char)+0x58>
c001c6e1:	43                   	inc    ebx
c001c6e2:	eb c2                	jmp    c001c6a6 <IDE::waitInterrupt(unsigned char)+0x12>
c001c6e4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c6ec:	83 c4 0c             	add    esp,0xc
c001c6ef:	89 e8                	mov    eax,ebp
c001c6f1:	5b                   	pop    ebx
c001c6f2:	5e                   	pop    esi
c001c6f3:	5f                   	pop    edi
c001c6f4:	5d                   	pop    ebp
c001c6f5:	c3                   	ret    

c001c6f6 <ideChannel0IRQHandler(regs*, void*)>:
c001c6f6:	83 ec 10             	sub    esp,0x10
c001c6f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6fd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c704:	6a 07                	push   0x7
c001c706:	6a 00                	push   0x0
c001c708:	50                   	push   eax
c001c709:	e8 d2 fe ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001c70e:	83 c4 1c             	add    esp,0x1c
c001c711:	c3                   	ret    

c001c712 <ideChannel1IRQHandler(regs*, void*)>:
c001c712:	83 ec 10             	sub    esp,0x10
c001c715:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c719:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c720:	6a 07                	push   0x7
c001c722:	6a 01                	push   0x1
c001c724:	50                   	push   eax
c001c725:	e8 b6 fe ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001c72a:	83 c4 1c             	add    esp,0x1c
c001c72d:	c3                   	ret    

c001c72e <IDE::enableIRQs(unsigned char, bool)>:
c001c72e:	57                   	push   edi
c001c72f:	b8 02 00 00 00       	mov    eax,0x2
c001c734:	56                   	push   esi
c001c735:	53                   	push   ebx
c001c736:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c73b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c73f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c743:	74 02                	je     c001c747 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c745:	31 c0                	xor    eax,eax
c001c747:	0f b6 db             	movzx  ebx,bl
c001c74a:	bf 04 00 00 00       	mov    edi,0x4
c001c74f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c756:	50                   	push   eax
c001c757:	6a 0c                	push   0xc
c001c759:	53                   	push   ebx
c001c75a:	56                   	push   esi
c001c75b:	e8 c0 fd ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c760:	83 c4 10             	add    esp,0x10
c001c763:	50                   	push   eax
c001c764:	6a 0c                	push   0xc
c001c766:	53                   	push   ebx
c001c767:	56                   	push   esi
c001c768:	e8 73 fe ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001c76d:	83 c4 10             	add    esp,0x10
c001c770:	4f                   	dec    edi
c001c771:	75 f0                	jne    c001c763 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c773:	5b                   	pop    ebx
c001c774:	5e                   	pop    esi
c001c775:	5f                   	pop    edi
c001c776:	c3                   	ret    
c001c777:	90                   	nop

c001c778 <IDE::open(int, int, void*)>:
c001c778:	55                   	push   ebp
c001c779:	57                   	push   edi
c001c77a:	56                   	push   esi
c001c77b:	53                   	push   ebx
c001c77c:	83 ec 1c             	sub    esp,0x1c
c001c77f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c783:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c78a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c793:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c79c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c7a3:	0f 85 13 02 00 00    	jne    c001c9bc <IDE::open(int, int, void*)+0x244>
c001c7a9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c7af:	a8 70                	test   al,0x70
c001c7b1:	75 44                	jne    c001c7f7 <IDE::open(int, int, void*)+0x7f>
c001c7b3:	ba 20 84 00 00       	mov    edx,0x8420
c001c7b8:	0f a3 c2             	bt     edx,eax
c001c7bb:	73 3a                	jae    c001c7f7 <IDE::open(int, int, void*)+0x7f>
c001c7bd:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c7c3:	83 ec 0c             	sub    esp,0xc
c001c7c6:	83 e0 fc             	and    eax,0xfffffffc
c001c7c9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c7d0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c7d6:	83 e0 fc             	and    eax,0xfffffffc
c001c7d9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c7e0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c7e6:	83 e0 fc             	and    eax,0xfffffffc
c001c7e9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c7f0:	68 25 13 02 c0       	push   0xc0021325
c001c7f5:	eb 60                	jmp    c001c857 <IDE::open(int, int, void*)+0xdf>
c001c7f7:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c801:	be 64 00 00 00       	mov    esi,0x64
c001c806:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c810:	57                   	push   edi
c001c811:	57                   	push   edi
c001c812:	68 88 35 02 c0       	push   0xc0023588
c001c817:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c81b:	57                   	push   edi
c001c81c:	e8 2f 3e fe ff       	call   c0000650 <strcpy>
c001c821:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c828:	31 d2                	xor    edx,edx
c001c82a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c82d:	89 c8                	mov    eax,ecx
c001c82f:	f7 f6                	div    esi
c001c831:	be 0a 00 00 00       	mov    esi,0xa
c001c836:	31 d2                	xor    edx,edx
c001c838:	83 c0 30             	add    eax,0x30
c001c83b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c83f:	89 c8                	mov    eax,ecx
c001c841:	f7 f6                	div    esi
c001c843:	89 d1                	mov    ecx,edx
c001c845:	31 d2                	xor    edx,edx
c001c847:	f7 f6                	div    esi
c001c849:	83 c1 30             	add    ecx,0x30
c001c84c:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c850:	83 c2 30             	add    edx,0x30
c001c853:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c857:	e8 3f fd fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c85c:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c863:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c868:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c86f:	83 c4 10             	add    esp,0x10
c001c872:	89 fa                	mov    edx,edi
c001c874:	c1 e1 10             	shl    ecx,0x10
c001c877:	c1 e0 0b             	shl    eax,0xb
c001c87a:	09 c1                	or     ecx,eax
c001c87c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c883:	c1 e0 08             	shl    eax,0x8
c001c886:	09 c1                	or     ecx,eax
c001c888:	89 c8                	mov    eax,ecx
c001c88a:	0d 08 00 00 80       	or     eax,0x80000008
c001c88f:	ef                   	out    dx,eax
c001c890:	be fc 0c 00 00       	mov    esi,0xcfc
c001c895:	89 f2                	mov    edx,esi
c001c897:	ed                   	in     eax,dx
c001c898:	c1 e8 10             	shr    eax,0x10
c001c89b:	3d ff ff 00 00       	cmp    eax,0xffff
c001c8a0:	0f 84 e1 00 00 00    	je     c001c987 <IDE::open(int, int, void*)+0x20f>
c001c8a6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c8ac:	89 fa                	mov    edx,edi
c001c8ae:	89 c8                	mov    eax,ecx
c001c8b0:	ef                   	out    dx,eax
c001c8b1:	b0 fe                	mov    al,0xfe
c001c8b3:	89 f2                	mov    edx,esi
c001c8b5:	ee                   	out    dx,al
c001c8b6:	89 c8                	mov    eax,ecx
c001c8b8:	89 fa                	mov    edx,edi
c001c8ba:	ef                   	out    dx,eax
c001c8bb:	89 f2                	mov    edx,esi
c001c8bd:	ed                   	in     eax,dx
c001c8be:	3c fe                	cmp    al,0xfe
c001c8c0:	0f 85 83 00 00 00    	jne    c001c949 <IDE::open(int, int, void*)+0x1d1>
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	68 5b 13 02 c0       	push   0xc002135b
c001c8ce:	e8 c8 fc fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c8d3:	c7 04 24 8e 35 02 c0 	mov    DWORD PTR [esp],0xc002358e
c001c8da:	e8 6f a6 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001c8df:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c8e9:	c7 04 24 8c 15 02 c0 	mov    DWORD PTR [esp],0xc002158c
c001c8f0:	e8 a6 fc fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c8f5:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c8fc:	89 fa                	mov    edx,edi
c001c8fe:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c905:	c1 e1 10             	shl    ecx,0x10
c001c908:	c1 e0 08             	shl    eax,0x8
c001c90b:	09 c1                	or     ecx,eax
c001c90d:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c914:	c1 e0 0b             	shl    eax,0xb
c001c917:	09 c1                	or     ecx,eax
c001c919:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c91f:	89 c8                	mov    eax,ecx
c001c921:	ef                   	out    dx,eax
c001c922:	8b ab 50 01 00 00    	mov    ebp,DWORD PTR [ebx+0x150]
c001c928:	89 f2                	mov    edx,esi
c001c92a:	89 e8                	mov    eax,ebp
c001c92c:	ee                   	out    dx,al
c001c92d:	89 c8                	mov    eax,ecx
c001c92f:	89 fa                	mov    edx,edi
c001c931:	ef                   	out    dx,eax
c001c932:	89 f2                	mov    edx,esi
c001c934:	ed                   	in     eax,dx
c001c935:	0f b6 c0             	movzx  eax,al
c001c938:	83 c4 10             	add    esp,0x10
c001c93b:	39 e8                	cmp    eax,ebp
c001c93d:	74 58                	je     c001c997 <IDE::open(int, int, void*)+0x21f>
c001c93f:	83 ec 0c             	sub    esp,0xc
c001c942:	68 a3 35 02 c0       	push   0xc00235a3
c001c947:	eb 46                	jmp    c001c98f <IDE::open(int, int, void*)+0x217>
c001c949:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c952:	75 29                	jne    c001c97d <IDE::open(int, int, void*)+0x205>
c001c954:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001c95b:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c960:	74 05                	je     c001c967 <IDE::open(int, int, void*)+0x1ef>
c001c962:	83 c0 80             	add    eax,0xffffff80
c001c965:	75 16                	jne    c001c97d <IDE::open(int, int, void*)+0x205>
c001c967:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c96e:	83 ec 0c             	sub    esp,0xc
c001c971:	68 49 23 02 c0       	push   0xc0022349
c001c976:	e8 20 fc fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001c97b:	eb 17                	jmp    c001c994 <IDE::open(int, int, void*)+0x21c>
c001c97d:	83 ec 0c             	sub    esp,0xc
c001c980:	68 ab 35 02 c0       	push   0xc00235ab
c001c985:	eb 08                	jmp    c001c98f <IDE::open(int, int, void*)+0x217>
c001c987:	83 ec 0c             	sub    esp,0xc
c001c98a:	68 dc 35 02 c0       	push   0xc00235dc
c001c98f:	e8 82 22 ff ff       	call   c000ec16 <KePanic(char const*)>
c001c994:	83 c4 10             	add    esp,0x10
c001c997:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c99e:	74 56                	je     c001c9f6 <IDE::open(int, int, void*)+0x27e>
c001c9a0:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c9a6:	83 e0 fc             	and    eax,0xfffffffc
c001c9a9:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c9b0:	83 c0 08             	add    eax,0x8
c001c9b3:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c9ba:	eb 3a                	jmp    c001c9f6 <IDE::open(int, int, void*)+0x27e>
c001c9bc:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c9c3:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c9c9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c9d0:	05 06 02 00 00       	add    eax,0x206
c001c9d5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c9dc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c9e3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c9ea:	05 06 02 00 00       	add    eax,0x206
c001c9ef:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c9f6:	83 ec 0c             	sub    esp,0xc
c001c9f9:	68 83 1a 02 c0       	push   0xc0021a83
c001c9fe:	e8 98 fb fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ca03:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ca09:	83 c4 10             	add    esp,0x10
c001ca0c:	89 c2                	mov    edx,eax
c001ca0e:	83 e2 0f             	and    edx,0xf
c001ca11:	83 fa 08             	cmp    edx,0x8
c001ca14:	75 0a                	jne    c001ca20 <IDE::open(int, int, void*)+0x2a8>
c001ca16:	83 e8 02             	sub    eax,0x2
c001ca19:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca20:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ca26:	89 c2                	mov    edx,eax
c001ca28:	83 e2 0f             	and    edx,0xf
c001ca2b:	83 fa 08             	cmp    edx,0x8
c001ca2e:	75 0a                	jne    c001ca3a <IDE::open(int, int, void*)+0x2c2>
c001ca30:	83 e8 02             	sub    eax,0x2
c001ca33:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ca3a:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ca41:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ca48:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ca4b:	89 d0                	mov    eax,edx
c001ca4d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ca51:	8d 7a 01             	lea    edi,[edx+0x1]
c001ca54:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ca58:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001ca5c:	83 e1 3f             	and    ecx,0x3f
c001ca5f:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001ca63:	89 f9                	mov    ecx,edi
c001ca65:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ca6c:	8d 78 02             	lea    edi,[eax+0x2]
c001ca6f:	0f b6 c9             	movzx  ecx,cl
c001ca72:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ca75:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ca79:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ca7d:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001ca81:	83 e2 3f             	and    edx,0x3f
c001ca84:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001ca88:	89 f9                	mov    ecx,edi
c001ca8a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca90:	8d 78 03             	lea    edi,[eax+0x3]
c001ca93:	0f b6 d1             	movzx  edx,cl
c001ca96:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ca99:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ca9d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001caa1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001caa5:	83 e1 3f             	and    ecx,0x3f
c001caa8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001caac:	89 fa                	mov    edx,edi
c001caae:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cab4:	8d 78 04             	lea    edi,[eax+0x4]
c001cab7:	0f b6 ca             	movzx  ecx,dl
c001caba:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cabd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cac1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cac5:	89 fa                	mov    edx,edi
c001cac7:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cacd:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cad1:	83 e2 3f             	and    edx,0x3f
c001cad4:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cad8:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cadf:	66 85 f6             	test   si,si
c001cae2:	74 24                	je     c001cb08 <IDE::open(int, int, void*)+0x390>
c001cae4:	89 f9                	mov    ecx,edi
c001cae6:	83 c0 05             	add    eax,0x5
c001cae9:	0f b6 d1             	movzx  edx,cl
c001caec:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001caef:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001caf3:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001caf7:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cafd:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cb01:	83 e0 3f             	and    eax,0x3f
c001cb04:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cb08:	83 ec 0c             	sub    esp,0xc
c001cb0b:	68 06 36 02 c0       	push   0xc0023606
c001cb10:	e8 86 fa fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cb15:	58                   	pop    eax
c001cb16:	5a                   	pop    edx
c001cb17:	6a 00                	push   0x0
c001cb19:	53                   	push   ebx
c001cb1a:	e8 db f9 ff ff       	call   c001c4fa <IDE::prepareInterrupt(unsigned char)>
c001cb1f:	59                   	pop    ecx
c001cb20:	5e                   	pop    esi
c001cb21:	6a 01                	push   0x1
c001cb23:	53                   	push   ebx
c001cb24:	e8 d1 f9 ff ff       	call   c001c4fa <IDE::prepareInterrupt(unsigned char)>
c001cb29:	c7 04 24 9f 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e9f
c001cb30:	e8 66 fa fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cb35:	83 c4 0c             	add    esp,0xc
c001cb38:	6a 00                	push   0x0
c001cb3a:	6a 00                	push   0x0
c001cb3c:	53                   	push   ebx
c001cb3d:	e8 ec fb ff ff       	call   c001c72e <IDE::enableIRQs(unsigned char, bool)>
c001cb42:	83 c4 0c             	add    esp,0xc
c001cb45:	6a 00                	push   0x0
c001cb47:	6a 01                	push   0x1
c001cb49:	53                   	push   ebx
c001cb4a:	e8 df fb ff ff       	call   c001c72e <IDE::enableIRQs(unsigned char, bool)>
c001cb4f:	c7 04 24 08 36 02 c0 	mov    DWORD PTR [esp],0xc0023608
c001cb56:	e8 40 fa fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cb65:	74 3c                	je     c001cba3 <IDE::open(int, int, void*)+0x42b>
c001cb67:	83 ec 0c             	sub    esp,0xc
c001cb6a:	53                   	push   ebx
c001cb6b:	6a 01                	push   0x1
c001cb6d:	68 f6 c6 01 c0       	push   0xc001c6f6
c001cb72:	6a 0e                	push   0xe
c001cb74:	53                   	push   ebx
c001cb75:	e8 78 c4 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cb7a:	83 c4 14             	add    esp,0x14
c001cb7d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cb83:	53                   	push   ebx
c001cb84:	6a 01                	push   0x1
c001cb86:	68 12 c7 01 c0       	push   0xc001c712
c001cb8b:	6a 0f                	push   0xf
c001cb8d:	53                   	push   ebx
c001cb8e:	e8 5f c4 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cb93:	83 c4 14             	add    esp,0x14
c001cb96:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cb9c:	68 92 17 02 c0       	push   0xc0021792
c001cba1:	eb 40                	jmp    c001cbe3 <IDE::open(int, int, void*)+0x46b>
c001cba3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cbad:	83 ec 0c             	sub    esp,0xc
c001cbb0:	53                   	push   ebx
c001cbb1:	6a 00                	push   0x0
c001cbb3:	68 f6 c6 01 c0       	push   0xc001c6f6
c001cbb8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cbbe:	53                   	push   ebx
c001cbbf:	e8 2e c4 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbc4:	83 c4 14             	add    esp,0x14
c001cbc7:	53                   	push   ebx
c001cbc8:	6a 00                	push   0x0
c001cbca:	68 12 c7 01 c0       	push   0xc001c712
c001cbcf:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cbd5:	53                   	push   ebx
c001cbd6:	e8 17 c4 fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbdb:	83 c4 14             	add    esp,0x14
c001cbde:	68 38 23 02 c0       	push   0xc0022338
c001cbe3:	e8 b3 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cbe8:	83 c4 10             	add    esp,0x10
c001cbeb:	83 ec 0c             	sub    esp,0xc
c001cbee:	68 0a 36 02 c0       	push   0xc002360a
c001cbf3:	e8 a3 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cbf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbfd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cc00:	c7 04 24 f6 26 02 c0 	mov    DWORD PTR [esp],0xc00226f6
c001cc07:	e8 8f f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc0c:	83 c4 0c             	add    esp,0xc
c001cc0f:	6a 07                	push   0x7
c001cc11:	6a 00                	push   0x0
c001cc13:	53                   	push   ebx
c001cc14:	e8 c7 f9 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001cc19:	83 c4 0c             	add    esp,0xc
c001cc1c:	6a 07                	push   0x7
c001cc1e:	6a 01                	push   0x1
c001cc20:	53                   	push   ebx
c001cc21:	e8 ba f9 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001cc26:	c7 04 24 48 21 02 c0 	mov    DWORD PTR [esp],0xc0022148
c001cc2d:	e8 69 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc32:	83 c4 0c             	add    esp,0xc
c001cc35:	6a 01                	push   0x1
c001cc37:	6a 00                	push   0x0
c001cc39:	53                   	push   ebx
c001cc3a:	e8 ef fa ff ff       	call   c001c72e <IDE::enableIRQs(unsigned char, bool)>
c001cc3f:	83 c4 0c             	add    esp,0xc
c001cc42:	6a 01                	push   0x1
c001cc44:	6a 01                	push   0x1
c001cc46:	53                   	push   ebx
c001cc47:	e8 e2 fa ff ff       	call   c001c72e <IDE::enableIRQs(unsigned char, bool)>
c001cc4c:	c7 04 24 0d 36 02 c0 	mov    DWORD PTR [esp],0xc002360d
c001cc53:	e8 43 f9 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cc58:	83 c4 2c             	add    esp,0x2c
c001cc5b:	31 c0                	xor    eax,eax
c001cc5d:	5b                   	pop    ebx
c001cc5e:	5e                   	pop    esi
c001cc5f:	5f                   	pop    edi
c001cc60:	5d                   	pop    ebp
c001cc61:	c3                   	ret    

c001cc62 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cc62:	55                   	push   ebp
c001cc63:	57                   	push   edi
c001cc64:	56                   	push   esi
c001cc65:	53                   	push   ebx
c001cc66:	83 ec 1c             	sub    esp,0x1c
c001cc69:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001cc6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc71:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cc75:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cc79:	8d 42 f8             	lea    eax,[edx-0x8]
c001cc7c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cc80:	3c 03                	cmp    al,0x3
c001cc82:	77 5a                	ja     c001ccde <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001cc84:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cc88:	0f b6 db             	movzx  ebx,bl
c001cc8b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cc8f:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cc92:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cc97:	0c 80                	or     al,0x80
c001cc99:	50                   	push   eax
c001cc9a:	6a 0c                	push   0xc
c001cc9c:	53                   	push   ebx
c001cc9d:	56                   	push   esi
c001cc9e:	e8 7d f8 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cca3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cca7:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ccac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccb0:	0f b6 d2             	movzx  edx,dl
c001ccb3:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ccb7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ccb9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ccbe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ccc2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ccc6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ccce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ccd2:	83 c4 2c             	add    esp,0x2c
c001ccd5:	5b                   	pop    ebx
c001ccd6:	5e                   	pop    esi
c001ccd7:	5f                   	pop    edi
c001ccd8:	5d                   	pop    ebp
c001ccd9:	e9 42 f8 ff ff       	jmp    c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ccde:	0f b6 c2             	movzx  eax,dl
c001cce1:	83 f8 07             	cmp    eax,0x7
c001cce4:	77 12                	ja     c001ccf8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001cce6:	0f b6 db             	movzx  ebx,bl
c001cce9:	0f b6 c2             	movzx  eax,dl
c001ccec:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ccf4:	01 c2                	add    edx,eax
c001ccf6:	eb 2f                	jmp    c001cd27 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ccf8:	83 f8 0d             	cmp    eax,0xd
c001ccfb:	77 13                	ja     c001cd10 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ccfd:	0f b6 db             	movzx  ebx,bl
c001cd00:	0f b6 d2             	movzx  edx,dl
c001cd03:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001cd0a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cd0e:	eb 17                	jmp    c001cd27 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cd10:	83 f8 15             	cmp    eax,0x15
c001cd13:	77 14                	ja     c001cd29 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001cd15:	0f b6 db             	movzx  ebx,bl
c001cd18:	0f b6 d2             	movzx  edx,dl
c001cd1b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001cd23:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cd27:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd29:	83 c4 1c             	add    esp,0x1c
c001cd2c:	5b                   	pop    ebx
c001cd2d:	5e                   	pop    esi
c001cd2e:	5f                   	pop    edi
c001cd2f:	5d                   	pop    ebp
c001cd30:	c3                   	ret    
c001cd31:	90                   	nop

c001cd32 <IDE::detect()>:
c001cd32:	55                   	push   ebp
c001cd33:	57                   	push   edi
c001cd34:	56                   	push   esi
c001cd35:	53                   	push   ebx
c001cd36:	81 ec 28 02 00 00    	sub    esp,0x228
c001cd3c:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001cd43:	68 0f 36 02 c0       	push   0xc002360f
c001cd48:	e8 4e f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd4d:	83 c4 10             	add    esp,0x10
c001cd50:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cd57:	0f 85 03 04 00 00    	jne    c001d160 <IDE::detect()+0x42e>
c001cd5d:	83 ec 0c             	sub    esp,0xc
c001cd60:	31 f6                	xor    esi,esi
c001cd62:	68 12 36 02 c0       	push   0xc0023612
c001cd67:	31 ff                	xor    edi,edi
c001cd69:	e8 2d f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd6e:	83 c4 10             	add    esp,0x10
c001cd71:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cd78:	83 ec 0c             	sub    esp,0xc
c001cd7b:	68 15 36 02 c0       	push   0xc0023615
c001cd80:	e8 16 f8 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd85:	83 c4 10             	add    esp,0x10
c001cd88:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd90:	83 ec 0c             	sub    esp,0xc
c001cd93:	31 ed                	xor    ebp,ebp
c001cd95:	68 18 36 02 c0       	push   0xc0023618
c001cd9a:	e8 fc f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cd9f:	89 f8                	mov    eax,edi
c001cda1:	c1 e0 06             	shl    eax,0x6
c001cda4:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cdac:	c7 04 24 1b 36 02 c0 	mov    DWORD PTR [esp],0xc002361b
c001cdb3:	e8 e3 f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cdb8:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001cdbc:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001cdc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdc4:	c1 e0 04             	shl    eax,0x4
c001cdc7:	83 c8 a0             	or     eax,0xffffffa0
c001cdca:	0f b6 c0             	movzx  eax,al
c001cdcd:	50                   	push   eax
c001cdce:	6a 06                	push   0x6
c001cdd0:	56                   	push   esi
c001cdd1:	53                   	push   ebx
c001cdd2:	e8 49 f7 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdd7:	83 c4 1c             	add    esp,0x1c
c001cdda:	6a 0c                	push   0xc
c001cddc:	56                   	push   esi
c001cddd:	53                   	push   ebx
c001cdde:	e8 fd f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001cde3:	83 c4 0c             	add    esp,0xc
c001cde6:	6a 0c                	push   0xc
c001cde8:	56                   	push   esi
c001cde9:	53                   	push   ebx
c001cdea:	e8 f1 f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001cdef:	83 c4 0c             	add    esp,0xc
c001cdf2:	6a 0c                	push   0xc
c001cdf4:	56                   	push   esi
c001cdf5:	53                   	push   ebx
c001cdf6:	e8 e5 f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001cdfb:	83 c4 0c             	add    esp,0xc
c001cdfe:	6a 0c                	push   0xc
c001ce00:	56                   	push   esi
c001ce01:	53                   	push   ebx
c001ce02:	e8 d9 f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ce07:	c7 04 24 1e 36 02 c0 	mov    DWORD PTR [esp],0xc002361e
c001ce0e:	e8 88 f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ce13:	68 ec 00 00 00       	push   0xec
c001ce18:	6a 07                	push   0x7
c001ce1a:	56                   	push   esi
c001ce1b:	53                   	push   ebx
c001ce1c:	e8 ff f6 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce21:	83 c4 1c             	add    esp,0x1c
c001ce24:	6a 0c                	push   0xc
c001ce26:	56                   	push   esi
c001ce27:	53                   	push   ebx
c001ce28:	e8 b3 f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ce2d:	83 c4 0c             	add    esp,0xc
c001ce30:	6a 0c                	push   0xc
c001ce32:	56                   	push   esi
c001ce33:	53                   	push   ebx
c001ce34:	e8 a7 f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ce39:	83 c4 0c             	add    esp,0xc
c001ce3c:	6a 0c                	push   0xc
c001ce3e:	56                   	push   esi
c001ce3f:	53                   	push   ebx
c001ce40:	e8 9b f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ce45:	83 c4 0c             	add    esp,0xc
c001ce48:	6a 0c                	push   0xc
c001ce4a:	56                   	push   esi
c001ce4b:	53                   	push   ebx
c001ce4c:	e8 8f f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ce51:	c7 04 24 21 36 02 c0 	mov    DWORD PTR [esp],0xc0023621
c001ce58:	e8 3e f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ce5d:	83 c4 0c             	add    esp,0xc
c001ce60:	6a 0c                	push   0xc
c001ce62:	56                   	push   esi
c001ce63:	53                   	push   ebx
c001ce64:	e8 77 f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ce69:	83 c4 10             	add    esp,0x10
c001ce6c:	84 c0                	test   al,al
c001ce6e:	75 1f                	jne    c001ce8f <IDE::detect()+0x15d>
c001ce70:	83 ec 0c             	sub    esp,0xc
c001ce73:	68 24 36 02 c0       	push   0xc0023624
c001ce78:	e8 1e f7 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ce7d:	e9 ba 02 00 00       	jmp    c001d13c <IDE::detect()+0x40a>
c001ce82:	a8 80                	test   al,0x80
c001ce84:	74 21                	je     c001cea7 <IDE::detect()+0x175>
c001ce86:	45                   	inc    ebp
c001ce87:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001ce8d:	7f 1e                	jg     c001cead <IDE::detect()+0x17b>
c001ce8f:	50                   	push   eax
c001ce90:	6a 0c                	push   0xc
c001ce92:	56                   	push   esi
c001ce93:	53                   	push   ebx
c001ce94:	e8 47 f7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	a8 01                	test   al,0x1
c001ce9e:	74 e2                	je     c001ce82 <IDE::detect()+0x150>
c001cea0:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001cea5:	eb 22                	jmp    c001cec9 <IDE::detect()+0x197>
c001cea7:	a8 08                	test   al,0x8
c001cea9:	74 db                	je     c001ce86 <IDE::detect()+0x154>
c001ceab:	eb 17                	jmp    c001cec4 <IDE::detect()+0x192>
c001cead:	83 ec 0c             	sub    esp,0xc
c001ceb0:	6a 32                	push   0x32
c001ceb2:	e8 e1 86 ff ff       	call   c0015598 <milliTenthSleep(unsigned int)>
c001ceb7:	83 c4 10             	add    esp,0x10
c001ceba:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001cec0:	75 cd                	jne    c001ce8f <IDE::detect()+0x15d>
c001cec2:	eb dc                	jmp    c001cea0 <IDE::detect()+0x16e>
c001cec4:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cec9:	83 ec 0c             	sub    esp,0xc
c001cecc:	68 27 36 02 c0       	push   0xc0023627
c001ced1:	e8 c5 f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001ced6:	83 c4 10             	add    esp,0x10
c001ced9:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001cede:	74 57                	je     c001cf37 <IDE::detect()+0x205>
c001cee0:	50                   	push   eax
c001cee1:	6a 04                	push   0x4
c001cee3:	56                   	push   esi
c001cee4:	53                   	push   ebx
c001cee5:	e8 f6 f6 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ceea:	83 c4 0c             	add    esp,0xc
c001ceed:	6a 05                	push   0x5
c001ceef:	56                   	push   esi
c001cef0:	53                   	push   ebx
c001cef1:	89 c5                	mov    ebp,eax
c001cef3:	e8 e8 f6 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001cef8:	89 e9                	mov    ecx,ebp
c001cefa:	83 c4 10             	add    esp,0x10
c001cefd:	0f b6 e9             	movzx  ebp,cl
c001cf00:	83 fd 14             	cmp    ebp,0x14
c001cf03:	75 04                	jne    c001cf09 <IDE::detect()+0x1d7>
c001cf05:	3c eb                	cmp    al,0xeb
c001cf07:	74 11                	je     c001cf1a <IDE::detect()+0x1e8>
c001cf09:	83 fd 69             	cmp    ebp,0x69
c001cf0c:	0f 85 2d 02 00 00    	jne    c001d13f <IDE::detect()+0x40d>
c001cf12:	3c 96                	cmp    al,0x96
c001cf14:	0f 85 25 02 00 00    	jne    c001d13f <IDE::detect()+0x40d>
c001cf1a:	68 a1 00 00 00       	push   0xa1
c001cf1f:	6a 07                	push   0x7
c001cf21:	56                   	push   esi
c001cf22:	53                   	push   ebx
c001cf23:	e8 f8 f5 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf28:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001cf2f:	e8 64 86 ff ff       	call   c0015598 <milliTenthSleep(unsigned int)>
c001cf34:	83 c4 10             	add    esp,0x10
c001cf37:	83 ec 0c             	sub    esp,0xc
c001cf3a:	89 fd                	mov    ebp,edi
c001cf3c:	68 2a 36 02 c0       	push   0xc002362a
c001cf41:	e8 55 f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cf46:	8d 54 24 20          	lea    edx,[esp+0x20]
c001cf4a:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001cf51:	c1 e5 06             	shl    ebp,0x6
c001cf54:	52                   	push   edx
c001cf55:	01 dd                	add    ebp,ebx
c001cf57:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001cf5b:	6a 00                	push   0x0
c001cf5d:	56                   	push   esi
c001cf5e:	53                   	push   ebx
c001cf5f:	e8 fe fc ff ff       	call   c001cc62 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cf64:	83 c4 14             	add    esp,0x14
c001cf67:	68 2e 36 02 c0       	push   0xc002362e
c001cf6c:	e8 2a f6 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cf71:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001cf76:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001cf7d:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001cf84:	89 f0                	mov    eax,esi
c001cf86:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001cf8c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cf90:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001cf96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf9a:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001cfa1:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001cfa9:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001cfb0:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001cfb8:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001cfbe:	c7 04 24 32 36 02 c0 	mov    DWORD PTR [esp],0xc0023632
c001cfc5:	e8 d1 f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001cfd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cfd8:	74 09                	je     c001cfe3 <IDE::detect()+0x2b1>
c001cfda:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001cfe1:	eb 07                	jmp    c001cfea <IDE::detect()+0x2b8>
c001cfe3:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001cfea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001cfee:	89 f8                	mov    eax,edi
c001cff0:	83 ec 0c             	sub    esp,0xc
c001cff3:	c1 e0 06             	shl    eax,0x6
c001cff6:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001cff9:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001cfff:	68 36 36 02 c0       	push   0xc0023636
c001d004:	e8 92 f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d009:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d00d:	89 e8                	mov    eax,ebp
c001d00f:	83 c4 10             	add    esp,0x10
c001d012:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d015:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d018:	83 c2 02             	add    edx,0x2
c001d01b:	83 c0 02             	add    eax,0x2
c001d01e:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d024:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d027:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d02d:	39 d5                	cmp    ebp,edx
c001d02f:	75 e4                	jne    c001d015 <IDE::detect()+0x2e3>
c001d031:	89 fd                	mov    ebp,edi
c001d033:	83 ec 0c             	sub    esp,0xc
c001d036:	c1 e5 06             	shl    ebp,0x6
c001d039:	01 dd                	add    ebp,ebx
c001d03b:	c6 85 a8 01 00 00 00 	mov    BYTE PTR [ebp+0x1a8],0x0
c001d042:	0f b7 85 74 01 00 00 	movzx  eax,WORD PTR [ebp+0x174]
c001d049:	c1 e8 09             	shr    eax,0x9
c001d04c:	83 e0 01             	and    eax,0x1
c001d04f:	88 85 a9 01 00 00    	mov    BYTE PTR [ebp+0x1a9],al
c001d055:	68 3a 36 02 c0       	push   0xc002363a
c001d05a:	e8 3c f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d05f:	83 c4 10             	add    esp,0x10
c001d062:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001d067:	75 66                	jne    c001d0cf <IDE::detect()+0x39d>
c001d069:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d070:	0f 84 b8 00 00 00    	je     c001d12e <IDE::detect()+0x3fc>
c001d076:	83 ec 0c             	sub    esp,0xc
c001d079:	68 3e 36 02 c0       	push   0xc002363e
c001d07e:	e8 18 f5 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d083:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d08a:	e8 41 18 ff ff       	call   c000e8d0 <malloc>
c001d08f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d092:	89 c5                	mov    ebp,eax
c001d094:	e8 47 05 00 00       	call   c001d5e0 <ATA::ATA()>
c001d099:	c7 04 24 42 36 02 c0 	mov    DWORD PTR [esp],0xc0023642
c001d0a0:	e8 f6 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0a5:	59                   	pop    ecx
c001d0a6:	58                   	pop    eax
c001d0a7:	55                   	push   ebp
c001d0a8:	53                   	push   ebx
c001d0a9:	e8 98 bf fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d0ae:	c7 04 24 47 36 02 c0 	mov    DWORD PTR [esp],0xc0023647
c001d0b5:	e8 e1 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0bd:	53                   	push   ebx
c001d0be:	57                   	push   edi
c001d0bf:	6a 00                	push   0x0
c001d0c1:	55                   	push   ebp
c001d0c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0c5:	83 c4 14             	add    esp,0x14
c001d0c8:	68 4c 36 02 c0       	push   0xc002364c
c001d0cd:	eb 57                	jmp    c001d126 <IDE::detect()+0x3f4>
c001d0cf:	83 ec 0c             	sub    esp,0xc
c001d0d2:	68 51 36 02 c0       	push   0xc0023651
c001d0d7:	e8 bf f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0dc:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d0e3:	e8 e8 17 ff ff       	call   c000e8d0 <malloc>
c001d0e8:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0eb:	89 c5                	mov    ebp,eax
c001d0ed:	e8 96 0b 00 00       	call   c001dc88 <ATAPI::ATAPI()>
c001d0f2:	c7 04 24 57 36 02 c0 	mov    DWORD PTR [esp],0xc0023657
c001d0f9:	e8 9d f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d0fe:	58                   	pop    eax
c001d0ff:	5a                   	pop    edx
c001d100:	55                   	push   ebp
c001d101:	53                   	push   ebx
c001d102:	e8 3f bf fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d107:	c7 04 24 5e 36 02 c0 	mov    DWORD PTR [esp],0xc002365e
c001d10e:	e8 88 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d113:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d116:	53                   	push   ebx
c001d117:	57                   	push   edi
c001d118:	6a 00                	push   0x0
c001d11a:	55                   	push   ebp
c001d11b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d11e:	83 c4 14             	add    esp,0x14
c001d121:	68 65 36 02 c0       	push   0xc0023665
c001d126:	e8 70 f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d12b:	83 c4 10             	add    esp,0x10
c001d12e:	83 ec 0c             	sub    esp,0xc
c001d131:	47                   	inc    edi
c001d132:	68 6c 36 02 c0       	push   0xc002366c
c001d137:	e8 5f f4 fe ff       	call   c000c59b <KeSetBootMessage(char const*)>
c001d13c:	83 c4 10             	add    esp,0x10
c001d13f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001d144:	74 0d                	je     c001d153 <IDE::detect()+0x421>
c001d146:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d14e:	e9 3d fc ff ff       	jmp    c001cd90 <IDE::detect()+0x5e>
c001d153:	4e                   	dec    esi
c001d154:	74 0a                	je     c001d160 <IDE::detect()+0x42e>
c001d156:	be 01 00 00 00       	mov    esi,0x1
c001d15b:	e9 18 fc ff ff       	jmp    c001cd78 <IDE::detect()+0x46>
c001d160:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d166:	5b                   	pop    ebx
c001d167:	5e                   	pop    esi
c001d168:	5f                   	pop    edi
c001d169:	5d                   	pop    ebp
c001d16a:	c3                   	ret    
c001d16b:	90                   	nop

c001d16c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d16c:	55                   	push   ebp
c001d16d:	57                   	push   edi
c001d16e:	56                   	push   esi
c001d16f:	53                   	push   ebx
c001d170:	83 ec 1c             	sub    esp,0x1c
c001d173:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d177:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d17b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d17f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d183:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d187:	88 c3                	mov    bl,al
c001d189:	25 ff 00 00 00       	and    eax,0xff
c001d18e:	0f 84 88 00 00 00    	je     c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d194:	83 ec 0c             	sub    esp,0xc
c001d197:	89 c7                	mov    edi,eax
c001d199:	68 70 36 02 c0       	push   0xc0023670
c001d19e:	e8 ab 9d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001d1a3:	83 c4 10             	add    esp,0x10
c001d1a6:	83 ff 01             	cmp    edi,0x1
c001d1a9:	74 6b                	je     c001d216 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d1ab:	83 ff 02             	cmp    edi,0x2
c001d1ae:	75 58                	jne    c001d208 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d1b0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d1b5:	50                   	push   eax
c001d1b6:	6a 01                	push   0x1
c001d1b8:	01 ff                	add    edi,edi
c001d1ba:	09 fe                	or     esi,edi
c001d1bc:	89 f0                	mov    eax,esi
c001d1be:	0f b6 f0             	movzx  esi,al
c001d1c1:	c1 e6 06             	shl    esi,0x6
c001d1c4:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d1cc:	50                   	push   eax
c001d1cd:	55                   	push   ebp
c001d1ce:	e8 0d f4 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001d1d3:	83 c4 10             	add    esp,0x10
c001d1d6:	a8 01                	test   al,0x1
c001d1d8:	74 02                	je     c001d1dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d1da:	b3 07                	mov    bl,0x7
c001d1dc:	a8 02                	test   al,0x2
c001d1de:	74 02                	je     c001d1e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d1e0:	b3 03                	mov    bl,0x3
c001d1e2:	a8 04                	test   al,0x4
c001d1e4:	74 02                	je     c001d1e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d1e6:	b3 14                	mov    bl,0x14
c001d1e8:	a8 08                	test   al,0x8
c001d1ea:	74 02                	je     c001d1ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d1ec:	b3 03                	mov    bl,0x3
c001d1ee:	a8 10                	test   al,0x10
c001d1f0:	74 02                	je     c001d1f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d1f2:	b3 15                	mov    bl,0x15
c001d1f4:	a8 20                	test   al,0x20
c001d1f6:	74 02                	je     c001d1fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d1f8:	b3 03                	mov    bl,0x3
c001d1fa:	a8 40                	test   al,0x40
c001d1fc:	74 02                	je     c001d200 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d1fe:	b3 16                	mov    bl,0x16
c001d200:	a8 80                	test   al,0x80
c001d202:	74 18                	je     c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d204:	b3 0d                	mov    bl,0xd
c001d206:	eb 14                	jmp    c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d208:	83 ff 03             	cmp    edi,0x3
c001d20b:	74 0d                	je     c001d21a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d20d:	83 ff 04             	cmp    edi,0x4
c001d210:	75 0a                	jne    c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d212:	b3 08                	mov    bl,0x8
c001d214:	eb 06                	jmp    c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d216:	b3 13                	mov    bl,0x13
c001d218:	eb 02                	jmp    c001d21c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d21a:	b3 17                	mov    bl,0x17
c001d21c:	83 c4 1c             	add    esp,0x1c
c001d21f:	88 d8                	mov    al,bl
c001d221:	5b                   	pop    ebx
c001d222:	5e                   	pop    esi
c001d223:	5f                   	pop    edi
c001d224:	5d                   	pop    ebp
c001d225:	c3                   	ret    

c001d226 <IDE::polling(unsigned char, unsigned int)>:
c001d226:	57                   	push   edi
c001d227:	56                   	push   esi
c001d228:	53                   	push   ebx
c001d229:	bb 04 00 00 00       	mov    ebx,0x4
c001d22e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d232:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d237:	52                   	push   edx
c001d238:	6a 0c                	push   0xc
c001d23a:	56                   	push   esi
c001d23b:	57                   	push   edi
c001d23c:	e8 9f f3 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001d241:	83 c4 10             	add    esp,0x10
c001d244:	4b                   	dec    ebx
c001d245:	75 f0                	jne    c001d237 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d247:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d24c:	50                   	push   eax
c001d24d:	6a 0c                	push   0xc
c001d24f:	56                   	push   esi
c001d250:	57                   	push   edi
c001d251:	e8 8a f3 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001d256:	83 c4 10             	add    esp,0x10
c001d259:	a8 01                	test   al,0x1
c001d25b:	75 17                	jne    c001d274 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d25d:	a8 20                	test   al,0x20
c001d25f:	75 0f                	jne    c001d270 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d261:	4b                   	dec    ebx
c001d262:	74 10                	je     c001d274 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d264:	a8 80                	test   al,0x80
c001d266:	75 e4                	jne    c001d24c <IDE::polling(unsigned char, unsigned int)+0x26>
c001d268:	a8 08                	test   al,0x8
c001d26a:	74 e0                	je     c001d24c <IDE::polling(unsigned char, unsigned int)+0x26>
c001d26c:	31 c0                	xor    eax,eax
c001d26e:	eb 06                	jmp    c001d276 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d270:	b0 01                	mov    al,0x1
c001d272:	eb 02                	jmp    c001d276 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d274:	b0 02                	mov    al,0x2
c001d276:	5b                   	pop    ebx
c001d277:	5e                   	pop    esi
c001d278:	5f                   	pop    edi
c001d279:	c3                   	ret    

c001d27a <SATABus::close(int, int, void*)>:
c001d27a:	31 c0                	xor    eax,eax
c001d27c:	c3                   	ret    
c001d27d:	90                   	nop

c001d27e <SATABus::detect()>:
c001d27e:	c3                   	ret    
c001d27f:	90                   	nop

c001d280 <SATABus::SATABus()>:
c001d280:	83 ec 0c             	sub    esp,0xc
c001d283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d287:	83 ec 08             	sub    esp,0x8
c001d28a:	68 a8 36 02 c0       	push   0xc00236a8
c001d28f:	50                   	push   eax
c001d290:	e8 0b c1 fe ff       	call   c00093a0 <HardDiskController::HardDiskController(char const*)>
c001d295:	83 c4 10             	add    esp,0x10
c001d298:	ba d4 36 02 c0       	mov    edx,0xc00236d4
c001d29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a1:	89 10                	mov    DWORD PTR [eax],edx
c001d2a3:	83 ec 0c             	sub    esp,0xc
c001d2a6:	6a 50                	push   0x50
c001d2a8:	e8 32 1c ff ff       	call   c000eedf <Phys::allocateContiguousPages(int)>
c001d2ad:	83 c4 10             	add    esp,0x10
c001d2b0:	89 c2                	mov    edx,eax
c001d2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d2bc:	83 ec 0c             	sub    esp,0xc
c001d2bf:	6a 50                	push   0x50
c001d2c1:	e8 7d 4c ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001d2c6:	83 c4 10             	add    esp,0x10
c001d2c9:	89 c2                	mov    edx,eax
c001d2cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d2d5:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d2da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d2de:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d2e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d2e8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d2ee:	83 ec 0c             	sub    esp,0xc
c001d2f1:	6a 03                	push   0x3
c001d2f3:	6a 50                	push   0x50
c001d2f5:	51                   	push   ecx
c001d2f6:	52                   	push   edx
c001d2f7:	50                   	push   eax
c001d2f8:	e8 19 55 ff ff       	call   c0012816 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d2fd:	83 c4 20             	add    esp,0x20
c001d300:	90                   	nop
c001d301:	83 c4 0c             	add    esp,0xc
c001d304:	c3                   	ret    
c001d305:	90                   	nop

c001d306 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d306:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d30a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d30d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d310:	09 c2                	or     edx,eax
c001d312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d316:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d31c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d31e:	31 c0                	xor    eax,eax
c001d320:	c1 e9 08             	shr    ecx,0x8
c001d323:	83 e1 0f             	and    ecx,0xf
c001d326:	39 c8                	cmp    eax,ecx
c001d328:	74 0a                	je     c001d334 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d32a:	f6 c2 01             	test   dl,0x1
c001d32d:	74 08                	je     c001d337 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d32f:	d1 ea                	shr    edx,1
c001d331:	40                   	inc    eax
c001d332:	eb f2                	jmp    c001d326 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d334:	83 c8 ff             	or     eax,0xffffffff
c001d337:	c3                   	ret    

c001d338 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d338:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d33c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d33f:	89 c2                	mov    edx,eax
c001d341:	c1 ea 08             	shr    edx,0x8
c001d344:	83 e2 0f             	and    edx,0xf
c001d347:	4a                   	dec    edx
c001d348:	75 32                	jne    c001d37c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d34a:	83 e0 0f             	and    eax,0xf
c001d34d:	83 f8 03             	cmp    eax,0x3
c001d350:	75 2a                	jne    c001d37c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d352:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d355:	b8 02 00 00 00       	mov    eax,0x2
c001d35a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d360:	74 1c                	je     c001d37e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d362:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d368:	b8 04 00 00 00       	mov    eax,0x4
c001d36d:	74 0f                	je     c001d37e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d36f:	31 c0                	xor    eax,eax
c001d371:	83 fa 03             	cmp    edx,0x3
c001d374:	0f 94 c0             	sete   al
c001d377:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d37b:	c3                   	ret    
c001d37c:	31 c0                	xor    eax,eax
c001d37e:	c3                   	ret    
c001d37f:	90                   	nop

c001d380 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d384:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d387:	0f ba e2 0f          	bt     edx,0xf
c001d38b:	72 f7                	jb     c001d384 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d38d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d390:	83 ca 10             	or     edx,0x10
c001d393:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d396:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d399:	83 ca 01             	or     edx,0x1
c001d39c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d39f:	c3                   	ret    

c001d3a0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d3a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3a7:	83 e2 fe             	and    edx,0xfffffffe
c001d3aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3ad:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3b0:	83 e2 ef             	and    edx,0xffffffef
c001d3b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3b9:	0f ba e2 0e          	bt     edx,0xe
c001d3bd:	72 f7                	jb     c001d3b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d3bf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3c2:	0f ba e2 0f          	bt     edx,0xf
c001d3c6:	72 ee                	jb     c001d3b6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d3c8:	c3                   	ret    
c001d3c9:	90                   	nop

c001d3ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d3ca:	55                   	push   ebp
c001d3cb:	57                   	push   edi
c001d3cc:	56                   	push   esi
c001d3cd:	53                   	push   ebx
c001d3ce:	83 ec 1c             	sub    esp,0x1c
c001d3d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d3d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d3d9:	53                   	push   ebx
c001d3da:	57                   	push   edi
c001d3db:	e8 c0 ff ff ff       	call   c001d3a0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d3e0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d3e4:	83 ec 0c             	sub    esp,0xc
c001d3e7:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d3ed:	c1 e5 0a             	shl    ebp,0xa
c001d3f0:	01 e8                	add    eax,ebp
c001d3f2:	89 03                	mov    DWORD PTR [ebx],eax
c001d3f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3f6:	68 00 04 00 00       	push   0x400
c001d3fb:	6a 00                	push   0x0
c001d3fd:	50                   	push   eax
c001d3fe:	e8 ed 30 fe ff       	call   c00004f0 <memset>
c001d403:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d409:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001d40d:	83 c4 1c             	add    esp,0x1c
c001d410:	01 e8                	add    eax,ebp
c001d412:	89 03                	mov    DWORD PTR [ebx],eax
c001d414:	c1 e6 08             	shl    esi,0x8
c001d417:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d41e:	81 c6 00 80 00 00    	add    esi,0x8000
c001d424:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d42a:	01 f0                	add    eax,esi
c001d42c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d42f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d432:	68 00 01 00 00       	push   0x100
c001d437:	6a 00                	push   0x0
c001d439:	50                   	push   eax
c001d43a:	e8 b1 30 fe ff       	call   c00004f0 <memset>
c001d43f:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d445:	31 d2                	xor    edx,edx
c001d447:	01 f0                	add    eax,esi
c001d449:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d44c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d453:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001d459:	01 ee                	add    esi,ebp
c001d45b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d45f:	83 c4 10             	add    esp,0x10
c001d462:	c1 e5 0d             	shl    ebp,0xd
c001d465:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001d46b:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001d471:	83 c6 20             	add    esi,0x20
c001d474:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d478:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001d47e:	01 e8                	add    eax,ebp
c001d480:	01 d0                	add    eax,edx
c001d482:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d485:	52                   	push   edx
c001d486:	68 00 01 00 00       	push   0x100
c001d48b:	6a 00                	push   0x0
c001d48d:	50                   	push   eax
c001d48e:	e8 5d 30 fe ff       	call   c00004f0 <memset>
c001d493:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001d499:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001d4a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d4a4:	83 c4 10             	add    esp,0x10
c001d4a7:	01 e8                	add    eax,ebp
c001d4a9:	01 d0                	add    eax,edx
c001d4ab:	81 c2 00 01 00 00    	add    edx,0x100
c001d4b1:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001d4b4:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001d4ba:	75 af                	jne    c001d46b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001d4bc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d4c3:	50                   	push   eax
c001d4c4:	50                   	push   eax
c001d4c5:	53                   	push   ebx
c001d4c6:	57                   	push   edi
c001d4c7:	e8 b4 fe ff ff       	call   c001d380 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d4cc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d4d3:	83 c4 2c             	add    esp,0x2c
c001d4d6:	5b                   	pop    ebx
c001d4d7:	5e                   	pop    esi
c001d4d8:	5f                   	pop    edi
c001d4d9:	5d                   	pop    ebp
c001d4da:	c3                   	ret    
c001d4db:	90                   	nop

c001d4dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d4dc:	55                   	push   ebp
c001d4dd:	57                   	push   edi
c001d4de:	56                   	push   esi
c001d4df:	53                   	push   ebx
c001d4e0:	31 db                	xor    ebx,ebx
c001d4e2:	83 ec 0c             	sub    esp,0xc
c001d4e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4e9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d4ed:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d4f0:	f7 c7 01 00 00 00    	test   edi,0x1
c001d4f6:	74 7a                	je     c001d572 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d4f8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4fc:	89 d8                	mov    eax,ebx
c001d4fe:	c1 e0 07             	shl    eax,0x7
c001d501:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d508:	55                   	push   ebp
c001d509:	56                   	push   esi
c001d50a:	e8 29 fe ff ff       	call   c001d338 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d50f:	5a                   	pop    edx
c001d510:	59                   	pop    ecx
c001d511:	83 f8 01             	cmp    eax,0x1
c001d514:	75 21                	jne    c001d537 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d516:	50                   	push   eax
c001d517:	53                   	push   ebx
c001d518:	55                   	push   ebp
c001d519:	56                   	push   esi
c001d51a:	e8 ab fe ff ff       	call   c001d3ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d51f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d526:	e8 a5 13 ff ff       	call   c000e8d0 <malloc>
c001d52b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d52e:	89 c5                	mov    ebp,eax
c001d530:	e8 19 0e 00 00       	call   c001e34e <SATA::SATA()>
c001d535:	eb 24                	jmp    c001d55b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d537:	83 f8 04             	cmp    eax,0x4
c001d53a:	75 36                	jne    c001d572 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d53c:	51                   	push   ecx
c001d53d:	53                   	push   ebx
c001d53e:	55                   	push   ebp
c001d53f:	56                   	push   esi
c001d540:	e8 85 fe ff ff       	call   c001d3ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d545:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d54c:	e8 7f 13 ff ff       	call   c000e8d0 <malloc>
c001d551:	89 04 24             	mov    DWORD PTR [esp],eax
c001d554:	89 c5                	mov    ebp,eax
c001d556:	e8 89 11 00 00       	call   c001e6e4 <SATAPI::SATAPI()>
c001d55b:	58                   	pop    eax
c001d55c:	5a                   	pop    edx
c001d55d:	55                   	push   ebp
c001d55e:	56                   	push   esi
c001d55f:	e8 e2 ba fe ff       	call   c0009046 <Device::addChild(Device*)>
c001d564:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d567:	56                   	push   esi
c001d568:	6a 00                	push   0x0
c001d56a:	53                   	push   ebx
c001d56b:	55                   	push   ebp
c001d56c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d56f:	83 c4 20             	add    esp,0x20
c001d572:	d1 ef                	shr    edi,1
c001d574:	43                   	inc    ebx
c001d575:	83 fb 20             	cmp    ebx,0x20
c001d578:	0f 85 72 ff ff ff    	jne    c001d4f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d57e:	83 c4 0c             	add    esp,0xc
c001d581:	5b                   	pop    ebx
c001d582:	5e                   	pop    esi
c001d583:	5f                   	pop    edi
c001d584:	5d                   	pop    ebp
c001d585:	c3                   	ret    

c001d586 <SATABus::open(int, int, void*)>:
c001d586:	53                   	push   ebx
c001d587:	83 ec 08             	sub    esp,0x8
c001d58a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d58e:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d594:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d59a:	e8 7d 7b ff ff       	call   c001511c <KeDisablePreemption()>
c001d59f:	52                   	push   edx
c001d5a0:	52                   	push   edx
c001d5a1:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d5a7:	53                   	push   ebx
c001d5a8:	e8 2f ff ff ff       	call   c001d4dc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d5ad:	e8 92 7b ff ff       	call   c0015144 <KeRestorePreemption()>
c001d5b2:	83 c4 18             	add    esp,0x18
c001d5b5:	31 c0                	xor    eax,eax
c001d5b7:	5b                   	pop    ebx
c001d5b8:	c3                   	ret    
c001d5b9:	90                   	nop

c001d5ba <ATA::close(int, int, void*)>:
c001d5ba:	83 ec 0c             	sub    esp,0xc
c001d5bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5c7:	85 c0                	test   eax,eax
c001d5c9:	74 0c                	je     c001d5d7 <ATA::close(int, int, void*)+0x1d>
c001d5cb:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5cd:	83 ec 0c             	sub    esp,0xc
c001d5d0:	50                   	push   eax
c001d5d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5d4:	83 c4 10             	add    esp,0x10
c001d5d7:	31 c0                	xor    eax,eax
c001d5d9:	83 c4 0c             	add    esp,0xc
c001d5dc:	c3                   	ret    
c001d5dd:	90                   	nop

c001d5de <ATA::powerSaving(PowerSavingLevel)>:
c001d5de:	c3                   	ret    
c001d5df:	90                   	nop

c001d5e0 <ATA::ATA()>:
c001d5e0:	83 ec 0c             	sub    esp,0xc
c001d5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e7:	83 ec 04             	sub    esp,0x4
c001d5ea:	68 00 02 00 00       	push   0x200
c001d5ef:	68 ad 37 02 c0       	push   0xc00237ad
c001d5f4:	50                   	push   eax
c001d5f5:	e8 30 be fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d5fa:	83 c4 10             	add    esp,0x10
c001d5fd:	ba 14 37 02 c0       	mov    edx,0xc0023714
c001d602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d606:	89 10                	mov    DWORD PTR [eax],edx
c001d608:	90                   	nop
c001d609:	83 c4 0c             	add    esp,0xc
c001d60c:	c3                   	ret    
c001d60d:	90                   	nop

c001d60e <ATA::flush(bool)>:
c001d60e:	53                   	push   ebx
c001d60f:	83 ec 08             	sub    esp,0x8
c001d612:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d617:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d61b:	83 f8 01             	cmp    eax,0x1
c001d61e:	19 c0                	sbb    eax,eax
c001d620:	83 e0 fd             	and    eax,0xfffffffd
c001d623:	05 ea 00 00 00       	add    eax,0xea
c001d628:	50                   	push   eax
c001d629:	6a 07                	push   0x7
c001d62b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d632:	50                   	push   eax
c001d633:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d639:	e8 e2 ee ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d63e:	83 c4 0c             	add    esp,0xc
c001d641:	6a 00                	push   0x0
c001d643:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d64a:	50                   	push   eax
c001d64b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d651:	e8 d0 fb ff ff       	call   c001d226 <IDE::polling(unsigned char, unsigned int)>
c001d656:	83 c4 18             	add    esp,0x18
c001d659:	5b                   	pop    ebx
c001d65a:	c3                   	ret    
c001d65b:	90                   	nop

c001d65c <ATA::readyForCommand()>:
c001d65c:	56                   	push   esi
c001d65d:	53                   	push   ebx
c001d65e:	53                   	push   ebx
c001d65f:	31 db                	xor    ebx,ebx
c001d661:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d665:	51                   	push   ecx
c001d666:	6a 0c                	push   0xc
c001d668:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d66f:	50                   	push   eax
c001d670:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d676:	e8 65 ef ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001d67b:	83 c4 10             	add    esp,0x10
c001d67e:	a8 88                	test   al,0x88
c001d680:	74 1f                	je     c001d6a1 <ATA::readyForCommand()+0x45>
c001d682:	43                   	inc    ebx
c001d683:	83 fb 63             	cmp    ebx,0x63
c001d686:	7e dd                	jle    c001d665 <ATA::readyForCommand()+0x9>
c001d688:	83 ec 0c             	sub    esp,0xc
c001d68b:	6a 0a                	push   0xa
c001d68d:	e8 06 7f ff ff       	call   c0015598 <milliTenthSleep(unsigned int)>
c001d692:	83 c4 10             	add    esp,0x10
c001d695:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d69b:	75 c8                	jne    c001d665 <ATA::readyForCommand()+0x9>
c001d69d:	31 c0                	xor    eax,eax
c001d69f:	eb 02                	jmp    c001d6a3 <ATA::readyForCommand()+0x47>
c001d6a1:	b0 01                	mov    al,0x1
c001d6a3:	5a                   	pop    edx
c001d6a4:	5b                   	pop    ebx
c001d6a5:	5e                   	pop    esi
c001d6a6:	c3                   	ret    
c001d6a7:	90                   	nop

c001d6a8 <ATA::access(unsigned long long, int, void*, bool)>:
c001d6a8:	55                   	push   ebp
c001d6a9:	57                   	push   edi
c001d6aa:	56                   	push   esi
c001d6ab:	53                   	push   ebx
c001d6ac:	83 ec 2c             	sub    esp,0x2c
c001d6af:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6b3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6b7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6bb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d6bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6c3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d6c7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d6cb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d6d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6d5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d6db:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6df:	c1 e0 06             	shl    eax,0x6
c001d6e2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d6ea:	74 5b                	je     c001d747 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d6ec:	89 fa                	mov    edx,edi
c001d6ee:	89 f0                	mov    eax,esi
c001d6f0:	c1 ea 1c             	shr    edx,0x1c
c001d6f3:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001d6f7:	89 d1                	mov    ecx,edx
c001d6f9:	09 c1                	or     ecx,eax
c001d6fb:	74 25                	je     c001d722 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d6fd:	31 ed                	xor    ebp,ebp
c001d6ff:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d706:	89 fa                	mov    edx,edi
c001d708:	89 f0                	mov    eax,esi
c001d70a:	0f ad d0             	shrd   eax,edx,cl
c001d70d:	d3 ea                	shr    edx,cl
c001d70f:	f6 c1 20             	test   cl,0x20
c001d712:	74 02                	je     c001d716 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d714:	89 d0                	mov    eax,edx
c001d716:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d71a:	45                   	inc    ebp
c001d71b:	83 fd 06             	cmp    ebp,0x6
c001d71e:	75 df                	jne    c001d6ff <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d720:	eb 71                	jmp    c001d793 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d722:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d727:	89 f0                	mov    eax,esi
c001d729:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d730:	0f ac f8 10          	shrd   eax,edi,0x10
c001d734:	bf 01 00 00 00       	mov    edi,0x1
c001d739:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d73d:	c1 ee 18             	shr    esi,0x18
c001d740:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d745:	eb 53                	jmp    c001d79a <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d747:	6a 00                	push   0x0
c001d749:	6a 3f                	push   0x3f
c001d74b:	57                   	push   edi
c001d74c:	56                   	push   esi
c001d74d:	e8 22 24 00 00       	call   c001fb74 <__umoddi3>
c001d752:	83 c4 10             	add    esp,0x10
c001d755:	40                   	inc    eax
c001d756:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d75a:	6a 00                	push   0x0
c001d75c:	68 f0 03 00 00       	push   0x3f0
c001d761:	57                   	push   edi
c001d762:	56                   	push   esi
c001d763:	e8 0c 23 00 00       	call   c001fa74 <__udivdi3>
c001d768:	83 c4 10             	add    esp,0x10
c001d76b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d770:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d777:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d77c:	6a 00                	push   0x0
c001d77e:	6a 3f                	push   0x3f
c001d780:	57                   	push   edi
c001d781:	31 ff                	xor    edi,edi
c001d783:	56                   	push   esi
c001d784:	e8 eb 22 00 00       	call   c001fa74 <__udivdi3>
c001d789:	83 c4 10             	add    esp,0x10
c001d78c:	83 e0 0f             	and    eax,0xf
c001d78f:	89 c6                	mov    esi,eax
c001d791:	eb 07                	jmp    c001d79a <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d793:	31 f6                	xor    esi,esi
c001d795:	bf 02 00 00 00       	mov    edi,0x2
c001d79a:	55                   	push   ebp
c001d79b:	6a 00                	push   0x0
c001d79d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7a4:	50                   	push   eax
c001d7a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d7a9:	e8 80 ef ff ff       	call   c001c72e <IDE::enableIRQs(unsigned char, bool)>
c001d7ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7b1:	e8 a6 fe ff ff       	call   c001d65c <ATA::readyForCommand()>
c001d7b6:	83 c4 10             	add    esp,0x10
c001d7b9:	84 c0                	test   al,al
c001d7bb:	75 0a                	jne    c001d7c7 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d7bd:	be 01 00 00 00       	mov    esi,0x1
c001d7c2:	e9 e1 02 00 00       	jmp    c001daa8 <ATA::access(unsigned long long, int, void*, bool)+0x400>
c001d7c7:	fa                   	cli    
c001d7c8:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d7ce:	f7 c7 03 00 00 00    	test   edi,0x3
c001d7d4:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d7da:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d7e0:	75 0a                	jne    c001d7ec <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001d7e2:	c1 e0 04             	shl    eax,0x4
c001d7e5:	09 c6                	or     esi,eax
c001d7e7:	83 ce a0             	or     esi,0xffffffa0
c001d7ea:	eb 08                	jmp    c001d7f4 <ATA::access(unsigned long long, int, void*, bool)+0x14c>
c001d7ec:	c1 e0 04             	shl    eax,0x4
c001d7ef:	09 c6                	or     esi,eax
c001d7f1:	83 ce e0             	or     esi,0xffffffe0
c001d7f4:	89 f0                	mov    eax,esi
c001d7f6:	0f b6 d2             	movzx  edx,dl
c001d7f9:	0f b6 f0             	movzx  esi,al
c001d7fc:	56                   	push   esi
c001d7fd:	6a 06                	push   0x6
c001d7ff:	52                   	push   edx
c001d800:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d806:	e8 15 ed ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d80b:	83 c4 10             	add    esp,0x10
c001d80e:	6a 00                	push   0x0
c001d810:	6a 01                	push   0x1
c001d812:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d819:	50                   	push   eax
c001d81a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d820:	e8 fb ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d825:	89 f8                	mov    eax,edi
c001d827:	83 c4 10             	add    esp,0x10
c001d82a:	0f b6 f0             	movzx  esi,al
c001d82d:	83 fe 02             	cmp    esi,0x2
c001d830:	75 6e                	jne    c001d8a0 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001d832:	6a 00                	push   0x0
c001d834:	6a 08                	push   0x8
c001d836:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d83d:	50                   	push   eax
c001d83e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d844:	e8 d7 ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d849:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d84e:	50                   	push   eax
c001d84f:	6a 09                	push   0x9
c001d851:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d858:	50                   	push   eax
c001d859:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d85f:	e8 bc ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d864:	83 c4 20             	add    esp,0x20
c001d867:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d86c:	50                   	push   eax
c001d86d:	6a 0a                	push   0xa
c001d86f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d876:	50                   	push   eax
c001d877:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d87d:	e8 9e ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d882:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d887:	50                   	push   eax
c001d888:	6a 0b                	push   0xb
c001d88a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d891:	50                   	push   eax
c001d892:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d898:	e8 83 ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d89d:	83 c4 20             	add    esp,0x20
c001d8a0:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d8a5:	50                   	push   eax
c001d8a6:	6a 02                	push   0x2
c001d8a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8af:	50                   	push   eax
c001d8b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8b6:	e8 65 ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8bb:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d8c0:	50                   	push   eax
c001d8c1:	6a 03                	push   0x3
c001d8c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8ca:	50                   	push   eax
c001d8cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8d1:	e8 4a ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8d6:	83 c4 20             	add    esp,0x20
c001d8d9:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d8de:	50                   	push   eax
c001d8df:	6a 04                	push   0x4
c001d8e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8e8:	50                   	push   eax
c001d8e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8ef:	e8 2c ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8f4:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8f9:	50                   	push   eax
c001d8fa:	6a 05                	push   0x5
c001d8fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d903:	50                   	push   eax
c001d904:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d90a:	e8 11 ec ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d90f:	83 c4 20             	add    esp,0x20
c001d912:	83 fe 02             	cmp    esi,0x2
c001d915:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001d91a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001d91f:	85 c9                	test   ecx,ecx
c001d921:	74 07                	je     c001d92a <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001d923:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d928:	75 47                	jne    c001d971 <ATA::access(unsigned long long, int, void*, bool)+0x2c9>
c001d92a:	89 f8                	mov    eax,edi
c001d92c:	0f b6 f8             	movzx  edi,al
c001d92f:	31 c0                	xor    eax,eax
c001d931:	83 ff 02             	cmp    edi,0x2
c001d934:	0f 95 c0             	setne  al
c001d937:	89 c6                	mov    esi,eax
c001d939:	74 0c                	je     c001d947 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001d93b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d940:	b8 30 00 00 00       	mov    eax,0x30
c001d945:	75 2f                	jne    c001d976 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d947:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d94b:	83 f2 01             	xor    edx,0x1
c001d94e:	85 c9                	test   ecx,ecx
c001d950:	74 09                	je     c001d95b <ATA::access(unsigned long long, int, void*, bool)+0x2b3>
c001d952:	84 d2                	test   dl,dl
c001d954:	b8 24 00 00 00       	mov    eax,0x24
c001d959:	75 1b                	jne    c001d976 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d95b:	85 f6                	test   esi,esi
c001d95d:	0f 84 5a fe ff ff    	je     c001d7bd <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d963:	84 d2                	test   dl,dl
c001d965:	b8 20 00 00 00       	mov    eax,0x20
c001d96a:	75 0a                	jne    c001d976 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d96c:	e9 4c fe ff ff       	jmp    c001d7bd <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d971:	b8 34 00 00 00       	mov    eax,0x34
c001d976:	50                   	push   eax
c001d977:	6a 07                	push   0x7
c001d979:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d980:	50                   	push   eax
c001d981:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d987:	e8 94 eb ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d98c:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001d993:	83 c4 10             	add    esp,0x10
c001d996:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001d99d:	75 01                	jne    c001d9a0 <ATA::access(unsigned long long, int, void*, bool)+0x2f8>
c001d99f:	fb                   	sti    
c001d9a0:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d9a4:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001d9a9:	85 f6                	test   esi,esi
c001d9ab:	0f 84 dd 00 00 00    	je     c001da8e <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001d9b1:	57                   	push   edi
c001d9b2:	6a 01                	push   0x1
c001d9b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9bb:	50                   	push   eax
c001d9bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9c2:	e8 5f f8 ff ff       	call   c001d226 <IDE::polling(unsigned char, unsigned int)>
c001d9c7:	83 c4 10             	add    esp,0x10
c001d9ca:	0f b6 c0             	movzx  eax,al
c001d9cd:	85 c0                	test   eax,eax
c001d9cf:	74 23                	je     c001d9f4 <ATA::access(unsigned long long, int, void*, bool)+0x34c>
c001d9d1:	50                   	push   eax
c001d9d2:	89 c6                	mov    esi,eax
c001d9d4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d9db:	50                   	push   eax
c001d9dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9e3:	50                   	push   eax
c001d9e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9ea:	e8 7d f7 ff ff       	call   c001d16c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d9ef:	e9 b1 00 00 00       	jmp    c001daa5 <ATA::access(unsigned long long, int, void*, bool)+0x3fd>
c001d9f4:	85 ed                	test   ebp,ebp
c001d9f6:	74 49                	je     c001da41 <ATA::access(unsigned long long, int, void*, bool)+0x399>
c001d9f8:	fa                   	cli    
c001d9f9:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d9ff:	31 ff                	xor    edi,edi
c001da01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001da05:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001da09:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001da0e:	51                   	push   ecx
c001da0f:	51                   	push   ecx
c001da10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da17:	50                   	push   eax
c001da18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da1e:	e8 eb ea ff ff       	call   c001c50e <IDE::getBase(unsigned char)>
c001da23:	89 c2                	mov    edx,eax
c001da25:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001da2a:	66 ef                	out    dx,ax
c001da2c:	47                   	inc    edi
c001da2d:	83 c4 10             	add    esp,0x10
c001da30:	81 ff 00 01 00 00    	cmp    edi,0x100
c001da36:	75 c9                	jne    c001da01 <ATA::access(unsigned long long, int, void*, bool)+0x359>
c001da38:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001da3f:	eb 35                	jmp    c001da76 <ATA::access(unsigned long long, int, void*, bool)+0x3ce>
c001da41:	fa                   	cli    
c001da42:	52                   	push   edx
c001da43:	52                   	push   edx
c001da44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da4b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001da51:	50                   	push   eax
c001da52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da58:	e8 b1 ea ff ff       	call   c001c50e <IDE::getBase(unsigned char)>
c001da5d:	b9 00 01 00 00       	mov    ecx,0x100
c001da62:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001da66:	89 c2                	mov    edx,eax
c001da68:	fc                   	cld    
c001da69:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001da6c:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001da73:	83 c4 10             	add    esp,0x10
c001da76:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001da7d:	75 01                	jne    c001da80 <ATA::access(unsigned long long, int, void*, bool)+0x3d8>
c001da7f:	fb                   	sti    
c001da80:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001da88:	4e                   	dec    esi
c001da89:	e9 1b ff ff ff       	jmp    c001d9a9 <ATA::access(unsigned long long, int, void*, bool)+0x301>
c001da8e:	31 f6                	xor    esi,esi
c001da90:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001da95:	74 11                	je     c001daa8 <ATA::access(unsigned long long, int, void*, bool)+0x400>
c001da97:	50                   	push   eax
c001da98:	50                   	push   eax
c001da99:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001da9e:	50                   	push   eax
c001da9f:	53                   	push   ebx
c001daa0:	e8 69 fb ff ff       	call   c001d60e <ATA::flush(bool)>
c001daa5:	83 c4 10             	add    esp,0x10
c001daa8:	83 c4 2c             	add    esp,0x2c
c001daab:	89 f0                	mov    eax,esi
c001daad:	5b                   	pop    ebx
c001daae:	5e                   	pop    esi
c001daaf:	5f                   	pop    edi
c001dab0:	5d                   	pop    ebp
c001dab1:	c3                   	ret    

c001dab2 <ATA::read(unsigned long long, int, void*)>:
c001dab2:	57                   	push   edi
c001dab3:	b8 04 00 00 00       	mov    eax,0x4
c001dab8:	56                   	push   esi
c001dab9:	53                   	push   ebx
c001daba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dabe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dac2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dac6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001daca:	8d 7a ff             	lea    edi,[edx-0x1]
c001dacd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001dad3:	77 25                	ja     c001dafa <ATA::read(unsigned long long, int, void*)+0x48>
c001dad5:	85 f6                	test   esi,esi
c001dad7:	b8 06 00 00 00       	mov    eax,0x6
c001dadc:	74 1c                	je     c001dafa <ATA::read(unsigned long long, int, void*)+0x48>
c001dade:	50                   	push   eax
c001dadf:	50                   	push   eax
c001dae0:	6a 00                	push   0x0
c001dae2:	56                   	push   esi
c001dae3:	52                   	push   edx
c001dae4:	53                   	push   ebx
c001dae5:	51                   	push   ecx
c001dae6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001daea:	e8 b9 fb ff ff       	call   c001d6a8 <ATA::access(unsigned long long, int, void*, bool)>
c001daef:	83 c4 20             	add    esp,0x20
c001daf2:	85 c0                	test   eax,eax
c001daf4:	0f 95 c0             	setne  al
c001daf7:	0f b6 c0             	movzx  eax,al
c001dafa:	5b                   	pop    ebx
c001dafb:	5e                   	pop    esi
c001dafc:	5f                   	pop    edi
c001dafd:	c3                   	ret    

c001dafe <ATA::write(unsigned long long, int, void*)>:
c001dafe:	57                   	push   edi
c001daff:	b8 04 00 00 00       	mov    eax,0x4
c001db04:	56                   	push   esi
c001db05:	53                   	push   ebx
c001db06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db0a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001db0e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db12:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001db16:	8d 7a ff             	lea    edi,[edx-0x1]
c001db19:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db1f:	77 25                	ja     c001db46 <ATA::write(unsigned long long, int, void*)+0x48>
c001db21:	85 f6                	test   esi,esi
c001db23:	b8 06 00 00 00       	mov    eax,0x6
c001db28:	74 1c                	je     c001db46 <ATA::write(unsigned long long, int, void*)+0x48>
c001db2a:	50                   	push   eax
c001db2b:	50                   	push   eax
c001db2c:	6a 01                	push   0x1
c001db2e:	56                   	push   esi
c001db2f:	52                   	push   edx
c001db30:	53                   	push   ebx
c001db31:	51                   	push   ecx
c001db32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db36:	e8 6d fb ff ff       	call   c001d6a8 <ATA::access(unsigned long long, int, void*, bool)>
c001db3b:	83 c4 20             	add    esp,0x20
c001db3e:	85 c0                	test   eax,eax
c001db40:	0f 95 c0             	setne  al
c001db43:	0f b6 c0             	movzx  eax,al
c001db46:	5b                   	pop    ebx
c001db47:	5e                   	pop    esi
c001db48:	5f                   	pop    edi
c001db49:	c3                   	ret    

c001db4a <ATA::detectCHS()>:
c001db4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db4e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001db54:	c1 e0 06             	shl    eax,0x6
c001db57:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001db5d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001db67:	c7 44 24 04 f8 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc00236f8
c001db6f:	e9 a2 10 ff ff       	jmp    c000ec16 <KePanic(char const*)>

c001db74 <ATA::open(int, int, void*)>:
c001db74:	53                   	push   ebx
c001db75:	83 ec 08             	sub    esp,0x8
c001db78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001db80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db84:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001db8a:	c1 e0 06             	shl    eax,0x6
c001db8d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001db93:	01 d0                	add    eax,edx
c001db95:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001db9c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dba2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dba9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dbb3:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dbba:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dbc0:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dbc7:	75 0c                	jne    c001dbd5 <ATA::open(int, int, void*)+0x61>
c001dbc9:	83 ec 0c             	sub    esp,0xc
c001dbcc:	53                   	push   ebx
c001dbcd:	e8 78 ff ff ff       	call   c001db4a <ATA::detectCHS()>
c001dbd2:	83 c4 10             	add    esp,0x10
c001dbd5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dbdb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dbe1:	c1 e0 06             	shl    eax,0x6
c001dbe4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dbeb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dbf5:	d1 e8                	shr    eax,1
c001dbf7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dbfd:	6a 04                	push   0x4
c001dbff:	6a 0c                	push   0xc
c001dc01:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc08:	50                   	push   eax
c001dc09:	52                   	push   edx
c001dc0a:	e8 11 e9 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc0f:	90                   	nop
c001dc10:	90                   	nop
c001dc11:	6a 00                	push   0x0
c001dc13:	6a 0c                	push   0xc
c001dc15:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc1c:	50                   	push   eax
c001dc1d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc23:	e8 f8 e8 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc28:	83 c4 14             	add    esp,0x14
c001dc2b:	53                   	push   ebx
c001dc2c:	e8 61 b8 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001dc31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc34:	e8 2d c7 fe ff       	call   c000a366 <createPartitionsForDisk(PhysicalDisk*)>
c001dc39:	83 c4 18             	add    esp,0x18
c001dc3c:	31 c0                	xor    eax,eax
c001dc3e:	5b                   	pop    ebx
c001dc3f:	c3                   	ret    

c001dc40 <combineCharAndColour(char, unsigned char)>:
c001dc40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc45:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001dc4b:	c1 e0 08             	shl    eax,0x8
c001dc4e:	09 d0                	or     eax,edx
c001dc50:	c3                   	ret    

c001dc51 <combineColours(unsigned char, unsigned char)>:
c001dc51:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc56:	c1 e0 04             	shl    eax,0x4
c001dc59:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001dc5d:	c3                   	ret    

c001dc5e <ATAPI::write(unsigned long long, int, void*)>:
c001dc5e:	b8 03 00 00 00       	mov    eax,0x3
c001dc63:	c3                   	ret    

c001dc64 <ATAPI::close(int, int, void*)>:
c001dc64:	83 ec 0c             	sub    esp,0xc
c001dc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc71:	85 c0                	test   eax,eax
c001dc73:	74 0c                	je     c001dc81 <ATAPI::close(int, int, void*)+0x1d>
c001dc75:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc77:	83 ec 0c             	sub    esp,0xc
c001dc7a:	50                   	push   eax
c001dc7b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dc7e:	83 c4 10             	add    esp,0x10
c001dc81:	31 c0                	xor    eax,eax
c001dc83:	83 c4 0c             	add    esp,0xc
c001dc86:	c3                   	ret    
c001dc87:	90                   	nop

c001dc88 <ATAPI::ATAPI()>:
c001dc88:	83 ec 0c             	sub    esp,0xc
c001dc8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8f:	83 ec 04             	sub    esp,0x4
c001dc92:	68 00 08 00 00       	push   0x800
c001dc97:	68 4d 38 02 c0       	push   0xc002384d
c001dc9c:	50                   	push   eax
c001dc9d:	e8 88 b7 fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dca2:	83 c4 10             	add    esp,0x10
c001dca5:	ba 5c 37 02 c0       	mov    edx,0xc002375c
c001dcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcae:	89 10                	mov    DWORD PTR [eax],edx
c001dcb0:	90                   	nop
c001dcb1:	83 c4 0c             	add    esp,0xc
c001dcb4:	c3                   	ret    
c001dcb5:	90                   	nop

c001dcb6 <ATAPI::readyForCommand()>:
c001dcb6:	56                   	push   esi
c001dcb7:	53                   	push   ebx
c001dcb8:	53                   	push   ebx
c001dcb9:	31 db                	xor    ebx,ebx
c001dcbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dcbf:	51                   	push   ecx
c001dcc0:	6a 0c                	push   0xc
c001dcc2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dcc9:	50                   	push   eax
c001dcca:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dcd0:	e8 0b e9 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001dcd5:	83 c4 10             	add    esp,0x10
c001dcd8:	a8 88                	test   al,0x88
c001dcda:	74 25                	je     c001dd01 <ATAPI::readyForCommand()+0x4b>
c001dcdc:	43                   	inc    ebx
c001dcdd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001dce3:	7e da                	jle    c001dcbf <ATAPI::readyForCommand()+0x9>
c001dce5:	83 ec 0c             	sub    esp,0xc
c001dce8:	68 5e 01 00 00       	push   0x15e
c001dced:	e8 a6 78 ff ff       	call   c0015598 <milliTenthSleep(unsigned int)>
c001dcf2:	83 c4 10             	add    esp,0x10
c001dcf5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001dcfb:	75 c2                	jne    c001dcbf <ATAPI::readyForCommand()+0x9>
c001dcfd:	31 c0                	xor    eax,eax
c001dcff:	eb 02                	jmp    c001dd03 <ATAPI::readyForCommand()+0x4d>
c001dd01:	b0 01                	mov    al,0x1
c001dd03:	5a                   	pop    edx
c001dd04:	5b                   	pop    ebx
c001dd05:	5e                   	pop    esi
c001dd06:	c3                   	ret    
c001dd07:	90                   	nop

c001dd08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dd08:	55                   	push   ebp
c001dd09:	57                   	push   edi
c001dd0a:	56                   	push   esi
c001dd0b:	53                   	push   ebx
c001dd0c:	83 ec 20             	sub    esp,0x20
c001dd0f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dd13:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dd17:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001dd1b:	6a 01                	push   0x1
c001dd1d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd24:	50                   	push   eax
c001dd25:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd2b:	e8 fe e9 ff ff       	call   c001c72e <IDE::enableIRQs(unsigned char, bool)>
c001dd30:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd37:	59                   	pop    ecx
c001dd38:	5e                   	pop    esi
c001dd39:	50                   	push   eax
c001dd3a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd40:	e8 b5 e7 ff ff       	call   c001c4fa <IDE::prepareInterrupt(unsigned char)>
c001dd45:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dd48:	e8 69 ff ff ff       	call   c001dcb6 <ATAPI::readyForCommand()>
c001dd4d:	83 c4 10             	add    esp,0x10
c001dd50:	84 c0                	test   al,al
c001dd52:	75 0a                	jne    c001dd5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001dd54:	bb 01 00 00 00       	mov    ebx,0x1
c001dd59:	e9 5f 02 00 00       	jmp    c001dfbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd5e:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001dd64:	c1 e0 04             	shl    eax,0x4
c001dd67:	0f b6 c0             	movzx  eax,al
c001dd6a:	50                   	push   eax
c001dd6b:	6a 06                	push   0x6
c001dd6d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd74:	50                   	push   eax
c001dd75:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd7b:	e8 a0 e7 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd80:	6a 00                	push   0x0
c001dd82:	6a 01                	push   0x1
c001dd84:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd8b:	50                   	push   eax
c001dd8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd92:	e8 89 e7 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dd97:	83 c4 20             	add    esp,0x20
c001dd9a:	0f b6 c3             	movzx  eax,bl
c001dd9d:	50                   	push   eax
c001dd9e:	0f b6 df             	movzx  ebx,bh
c001dda1:	6a 04                	push   0x4
c001dda3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddaa:	50                   	push   eax
c001ddab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddb1:	e8 6a e7 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddb6:	53                   	push   ebx
c001ddb7:	6a 05                	push   0x5
c001ddb9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddc0:	50                   	push   eax
c001ddc1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddc7:	e8 54 e7 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddcc:	83 c4 20             	add    esp,0x20
c001ddcf:	68 a0 00 00 00       	push   0xa0
c001ddd4:	6a 07                	push   0x7
c001ddd6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dddd:	50                   	push   eax
c001ddde:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dde4:	e8 37 e7 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dde9:	83 c4 0c             	add    esp,0xc
c001ddec:	6a 01                	push   0x1
c001ddee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddf5:	50                   	push   eax
c001ddf6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddfc:	e8 25 f4 ff ff       	call   c001d226 <IDE::polling(unsigned char, unsigned int)>
c001de01:	83 c4 10             	add    esp,0x10
c001de04:	0f b6 d8             	movzx  ebx,al
c001de07:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001de0d:	85 db                	test   ebx,ebx
c001de0f:	74 20                	je     c001de31 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001de11:	53                   	push   ebx
c001de12:	0f b6 c0             	movzx  eax,al
c001de15:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001de1c:	52                   	push   edx
c001de1d:	50                   	push   eax
c001de1e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de24:	e8 43 f3 ff ff       	call   c001d16c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001de29:	83 c4 10             	add    esp,0x10
c001de2c:	e9 8c 01 00 00       	jmp    c001dfbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de31:	52                   	push   edx
c001de32:	0f b6 c0             	movzx  eax,al
c001de35:	52                   	push   edx
c001de36:	50                   	push   eax
c001de37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de3d:	e8 cc e6 ff ff       	call   c001c50e <IDE::getBase(unsigned char)>
c001de42:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001de46:	b9 06 00 00 00       	mov    ecx,0x6
c001de4b:	89 c2                	mov    edx,eax
c001de4d:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001de50:	89 e8                	mov    eax,ebp
c001de52:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001de56:	83 c4 10             	add    esp,0x10
c001de59:	0f b6 c0             	movzx  eax,al
c001de5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de60:	85 db                	test   ebx,ebx
c001de62:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de68:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de6f:	0f 84 eb 00 00 00    	je     c001df60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001de75:	55                   	push   ebp
c001de76:	55                   	push   ebp
c001de77:	52                   	push   edx
c001de78:	50                   	push   eax
c001de79:	e8 16 e8 ff ff       	call   c001c694 <IDE::waitInterrupt(unsigned char)>
c001de7e:	83 c4 10             	add    esp,0x10
c001de81:	84 c0                	test   al,al
c001de83:	0f 84 cb fe ff ff    	je     c001dd54 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001de89:	56                   	push   esi
c001de8a:	56                   	push   esi
c001de8b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de92:	50                   	push   eax
c001de93:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de99:	e8 5c e6 ff ff       	call   c001c4fa <IDE::prepareInterrupt(unsigned char)>
c001de9e:	83 c4 0c             	add    esp,0xc
c001dea1:	6a 04                	push   0x4
c001dea3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001deaa:	50                   	push   eax
c001deab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001deb1:	e8 2a e7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001deb6:	83 c4 0c             	add    esp,0xc
c001deb9:	6a 05                	push   0x5
c001debb:	89 c6                	mov    esi,eax
c001debd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dec4:	50                   	push   eax
c001dec5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001decb:	e8 10 e7 ff ff       	call   c001c5e0 <IDE::read(unsigned char, unsigned char)>
c001ded0:	83 c4 10             	add    esp,0x10
c001ded3:	0f b6 e8             	movzx  ebp,al
c001ded6:	89 f0                	mov    eax,esi
c001ded8:	c1 e5 08             	shl    ebp,0x8
c001dedb:	0f b6 f0             	movzx  esi,al
c001dede:	09 f5                	or     ebp,esi
c001dee0:	31 f6                	xor    esi,esi
c001dee2:	d1 fd                	sar    ebp,1
c001dee4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dee9:	74 5c                	je     c001df47 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001deeb:	39 ee                	cmp    esi,ebp
c001deed:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001def3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001defa:	75 0d                	jne    c001df09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001defc:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001deff:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001df03:	4b                   	dec    ebx
c001df04:	e9 57 ff ff ff       	jmp    c001de60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001df09:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001df0d:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001df11:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001df16:	51                   	push   ecx
c001df17:	51                   	push   ecx
c001df18:	52                   	push   edx
c001df19:	50                   	push   eax
c001df1a:	e8 ef e5 ff ff       	call   c001c50e <IDE::getBase(unsigned char)>
c001df1f:	89 c2                	mov    edx,eax
c001df21:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001df26:	66 ef                	out    dx,ax
c001df28:	46                   	inc    esi
c001df29:	83 c4 10             	add    esp,0x10
c001df2c:	eb bd                	jmp    c001deeb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001df2e:	51                   	push   ecx
c001df2f:	51                   	push   ecx
c001df30:	52                   	push   edx
c001df31:	50                   	push   eax
c001df32:	e8 d7 e5 ff ff       	call   c001c50e <IDE::getBase(unsigned char)>
c001df37:	89 c2                	mov    edx,eax
c001df39:	66 ed                	in     ax,dx
c001df3b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001df3f:	83 c4 10             	add    esp,0x10
c001df42:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001df46:	46                   	inc    esi
c001df47:	39 ee                	cmp    esi,ebp
c001df49:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df4f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df56:	75 d6                	jne    c001df2e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001df58:	01 f6                	add    esi,esi
c001df5a:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001df5e:	eb a3                	jmp    c001df03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001df60:	51                   	push   ecx
c001df61:	51                   	push   ecx
c001df62:	52                   	push   edx
c001df63:	50                   	push   eax
c001df64:	e8 2b e7 ff ff       	call   c001c694 <IDE::waitInterrupt(unsigned char)>
c001df69:	83 c4 10             	add    esp,0x10
c001df6c:	84 c0                	test   al,al
c001df6e:	0f 84 e0 fd ff ff    	je     c001dd54 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001df74:	52                   	push   edx
c001df75:	bb a0 86 01 00       	mov    ebx,0x186a0
c001df7a:	52                   	push   edx
c001df7b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df82:	50                   	push   eax
c001df83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001df89:	e8 6c e5 ff ff       	call   c001c4fa <IDE::prepareInterrupt(unsigned char)>
c001df8e:	83 c4 10             	add    esp,0x10
c001df91:	50                   	push   eax
c001df92:	50                   	push   eax
c001df93:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001df9a:	50                   	push   eax
c001df9b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfa1:	e8 68 e5 ff ff       	call   c001c50e <IDE::getBase(unsigned char)>
c001dfa6:	8d 50 07             	lea    edx,[eax+0x7]
c001dfa9:	ec                   	in     al,dx
c001dfaa:	83 c4 10             	add    esp,0x10
c001dfad:	a8 88                	test   al,0x88
c001dfaf:	74 0a                	je     c001dfbb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001dfb1:	4b                   	dec    ebx
c001dfb2:	75 dd                	jne    c001df91 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001dfb4:	bb 02 00 00 00       	mov    ebx,0x2
c001dfb9:	eb 02                	jmp    c001dfbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dfbb:	31 db                	xor    ebx,ebx
c001dfbd:	83 c4 1c             	add    esp,0x1c
c001dfc0:	89 d8                	mov    eax,ebx
c001dfc2:	5b                   	pop    ebx
c001dfc3:	5e                   	pop    esi
c001dfc4:	5f                   	pop    edi
c001dfc5:	5d                   	pop    ebp
c001dfc6:	c3                   	ret    
c001dfc7:	90                   	nop

c001dfc8 <ATAPI::diskRemoved()>:
c001dfc8:	53                   	push   ebx
c001dfc9:	83 ec 14             	sub    esp,0x14
c001dfcc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dfd0:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001dfd7:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001dfdd:	e8 74 c0 fe ff       	call   c000a056 <LogicalDisk::unmount()>
c001dfe2:	58                   	pop    eax
c001dfe3:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001dfe9:	e8 4e ca fe ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c001dfee:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001dff4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dff8:	83 c4 18             	add    esp,0x18
c001dffb:	5b                   	pop    ebx
c001dffc:	e9 2b ca fe ff       	jmp    c000aa2c <VCache::invalidateReadBuffer()>
c001e001:	90                   	nop

c001e002 <ATAPI::eject()>:
c001e002:	57                   	push   edi
c001e003:	b9 03 00 00 00       	mov    ecx,0x3
c001e008:	53                   	push   ebx
c001e009:	83 ec 14             	sub    esp,0x14
c001e00c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e010:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e014:	fc                   	cld    
c001e015:	31 c0                	xor    eax,eax
c001e017:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e019:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e01e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e023:	50                   	push   eax
c001e024:	50                   	push   eax
c001e025:	6a 00                	push   0x0
c001e027:	6a 00                	push   0x0
c001e029:	6a 00                	push   0x0
c001e02b:	6a 02                	push   0x2
c001e02d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e031:	50                   	push   eax
c001e032:	53                   	push   ebx
c001e033:	e8 d0 fc ff ff       	call   c001dd08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e038:	83 c4 14             	add    esp,0x14
c001e03b:	53                   	push   ebx
c001e03c:	e8 87 ff ff ff       	call   c001dfc8 <ATAPI::diskRemoved()>
c001e041:	83 c4 24             	add    esp,0x24
c001e044:	31 c0                	xor    eax,eax
c001e046:	5b                   	pop    ebx
c001e047:	5f                   	pop    edi
c001e048:	c3                   	ret    
c001e049:	90                   	nop

c001e04a <ATAPI::diskInserted()>:
c001e04a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e04e:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e055:	c3                   	ret    

c001e056 <ATAPI::detectMedia()>:
c001e056:	56                   	push   esi
c001e057:	53                   	push   ebx
c001e058:	83 ec 28             	sub    esp,0x28
c001e05b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e05f:	6a 0c                	push   0xc
c001e061:	6a 00                	push   0x0
c001e063:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e067:	56                   	push   esi
c001e068:	e8 83 24 fe ff       	call   c00004f0 <memset>
c001e06d:	58                   	pop    eax
c001e06e:	5a                   	pop    edx
c001e06f:	6a 00                	push   0x0
c001e071:	6a 00                	push   0x0
c001e073:	6a 00                	push   0x0
c001e075:	6a 00                	push   0x0
c001e077:	56                   	push   esi
c001e078:	53                   	push   ebx
c001e079:	e8 8a fc ff ff       	call   c001dd08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e07e:	83 c4 1c             	add    esp,0x1c
c001e081:	6a 0c                	push   0xc
c001e083:	6a 00                	push   0x0
c001e085:	56                   	push   esi
c001e086:	e8 65 24 fe ff       	call   c00004f0 <memset>
c001e08b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e090:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e095:	59                   	pop    ecx
c001e096:	58                   	pop    eax
c001e097:	6a 01                	push   0x1
c001e099:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e09d:	50                   	push   eax
c001e09e:	6a 00                	push   0x0
c001e0a0:	6a 12                	push   0x12
c001e0a2:	56                   	push   esi
c001e0a3:	53                   	push   ebx
c001e0a4:	e8 5f fc ff ff       	call   c001dd08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0a9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e0ad:	83 c4 20             	add    esp,0x20
c001e0b0:	83 e0 7f             	and    eax,0x7f
c001e0b3:	83 f8 70             	cmp    eax,0x70
c001e0b6:	74 15                	je     c001e0cd <ATAPI::detectMedia()+0x77>
c001e0b8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0bf:	75 0c                	jne    c001e0cd <ATAPI::detectMedia()+0x77>
c001e0c1:	83 ec 0c             	sub    esp,0xc
c001e0c4:	53                   	push   ebx
c001e0c5:	e8 80 ff ff ff       	call   c001e04a <ATAPI::diskInserted()>
c001e0ca:	83 c4 10             	add    esp,0x10
c001e0cd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e0d1:	83 e0 0f             	and    eax,0xf
c001e0d4:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e0d9:	0f b6 c0             	movzx  eax,al
c001e0dc:	75 19                	jne    c001e0f7 <ATAPI::detectMedia()+0xa1>
c001e0de:	83 f8 02             	cmp    eax,0x2
c001e0e1:	75 14                	jne    c001e0f7 <ATAPI::detectMedia()+0xa1>
c001e0e3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0ea:	74 24                	je     c001e110 <ATAPI::detectMedia()+0xba>
c001e0ec:	83 ec 0c             	sub    esp,0xc
c001e0ef:	53                   	push   ebx
c001e0f0:	e8 d3 fe ff ff       	call   c001dfc8 <ATAPI::diskRemoved()>
c001e0f5:	eb 16                	jmp    c001e10d <ATAPI::detectMedia()+0xb7>
c001e0f7:	85 c0                	test   eax,eax
c001e0f9:	75 15                	jne    c001e110 <ATAPI::detectMedia()+0xba>
c001e0fb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e102:	75 0c                	jne    c001e110 <ATAPI::detectMedia()+0xba>
c001e104:	83 ec 0c             	sub    esp,0xc
c001e107:	53                   	push   ebx
c001e108:	e8 3d ff ff ff       	call   c001e04a <ATAPI::diskInserted()>
c001e10d:	83 c4 10             	add    esp,0x10
c001e110:	83 c4 24             	add    esp,0x24
c001e113:	5b                   	pop    ebx
c001e114:	5e                   	pop    esi
c001e115:	c3                   	ret    

c001e116 <ATAPI::open(int, int, void*)>:
c001e116:	56                   	push   esi
c001e117:	53                   	push   ebx
c001e118:	50                   	push   eax
c001e119:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e11d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e121:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e125:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e12b:	c1 e0 06             	shl    eax,0x6
c001e12e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e134:	01 d0                	add    eax,edx
c001e136:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e13d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e143:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e14a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e154:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e15b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e161:	6a 04                	push   0x4
c001e163:	6a 0c                	push   0xc
c001e165:	51                   	push   ecx
c001e166:	52                   	push   edx
c001e167:	e8 b4 e3 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e16c:	90                   	nop
c001e16d:	90                   	nop
c001e16e:	6a 00                	push   0x0
c001e170:	6a 0c                	push   0xc
c001e172:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e179:	50                   	push   eax
c001e17a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e180:	e8 9b e3 ff ff       	call   c001c520 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e185:	83 c4 14             	add    esp,0x14
c001e188:	68 78 01 00 00       	push   0x178
c001e18d:	e8 3e 07 ff ff       	call   c000e8d0 <malloc>
c001e192:	83 c4 0c             	add    esp,0xc
c001e195:	6a 00                	push   0x0
c001e197:	68 ff ff ff 7f       	push   0x7fffffff
c001e19c:	6a 00                	push   0x0
c001e19e:	6a 00                	push   0x0
c001e1a0:	53                   	push   ebx
c001e1a1:	68 ff 38 02 c0       	push   0xc00238ff
c001e1a6:	89 c6                	mov    esi,eax
c001e1a8:	50                   	push   eax
c001e1a9:	e8 e6 bc fe ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1ae:	83 c4 14             	add    esp,0x14
c001e1b1:	56                   	push   esi
c001e1b2:	e8 9d bd fe ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c001e1b7:	5a                   	pop    edx
c001e1b8:	59                   	pop    ecx
c001e1b9:	0f be c0             	movsx  eax,al
c001e1bc:	50                   	push   eax
c001e1bd:	68 44 37 02 c0       	push   0xc0023744
c001e1c2:	e8 87 8d fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e1c7:	58                   	pop    eax
c001e1c8:	5a                   	pop    edx
c001e1c9:	56                   	push   esi
c001e1ca:	53                   	push   ebx
c001e1cb:	e8 76 ae fe ff       	call   c0009046 <Device::addChild(Device*)>
c001e1d0:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e1d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1d9:	e8 b4 b2 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001e1de:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e1e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1e8:	e8 69 fe ff ff       	call   c001e056 <ATAPI::detectMedia()>
c001e1ed:	83 c4 14             	add    esp,0x14
c001e1f0:	31 c0                	xor    eax,eax
c001e1f2:	5b                   	pop    ebx
c001e1f3:	5e                   	pop    esi
c001e1f4:	c3                   	ret    
c001e1f5:	90                   	nop

c001e1f6 <ATAPI::read(unsigned long long, int, void*)>:
c001e1f6:	55                   	push   ebp
c001e1f7:	57                   	push   edi
c001e1f8:	56                   	push   esi
c001e1f9:	53                   	push   ebx
c001e1fa:	83 ec 1c             	sub    esp,0x1c
c001e1fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e201:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e205:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e209:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e210:	74 3c                	je     c001e24e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e212:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e216:	b9 03 00 00 00       	mov    ecx,0x3
c001e21b:	fc                   	cld    
c001e21c:	31 c0                	xor    eax,eax
c001e21e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e220:	89 e8                	mov    eax,ebp
c001e222:	0f ce                	bswap  esi
c001e224:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e228:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e22d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e231:	50                   	push   eax
c001e232:	50                   	push   eax
c001e233:	55                   	push   ebp
c001e234:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e238:	c1 e5 0b             	shl    ebp,0xb
c001e23b:	6a 00                	push   0x0
c001e23d:	55                   	push   ebp
c001e23e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e242:	50                   	push   eax
c001e243:	53                   	push   ebx
c001e244:	e8 bf fa ff ff       	call   c001dd08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e249:	83 c4 20             	add    esp,0x20
c001e24c:	eb 1a                	jmp    c001e268 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e24e:	83 ec 0c             	sub    esp,0xc
c001e251:	53                   	push   ebx
c001e252:	e8 ff fd ff ff       	call   c001e056 <ATAPI::detectMedia()>
c001e257:	83 c4 10             	add    esp,0x10
c001e25a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e261:	75 af                	jne    c001e212 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e263:	b8 02 00 00 00       	mov    eax,0x2
c001e268:	83 c4 1c             	add    esp,0x1c
c001e26b:	5b                   	pop    ebx
c001e26c:	5e                   	pop    esi
c001e26d:	5f                   	pop    edi
c001e26e:	5d                   	pop    ebp
c001e26f:	c3                   	ret    

c001e270 <SATA::close(int, int, void*)>:
c001e270:	83 ec 0c             	sub    esp,0xc
c001e273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e277:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e27d:	85 c0                	test   eax,eax
c001e27f:	74 0c                	je     c001e28d <SATA::close(int, int, void*)+0x1d>
c001e281:	8b 10                	mov    edx,DWORD PTR [eax]
c001e283:	83 ec 0c             	sub    esp,0xc
c001e286:	50                   	push   eax
c001e287:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e28a:	83 c4 10             	add    esp,0x10
c001e28d:	31 c0                	xor    eax,eax
c001e28f:	83 c4 0c             	add    esp,0xc
c001e292:	c3                   	ret    
c001e293:	90                   	nop

c001e294 <SATA::powerSaving(PowerSavingLevel)>:
c001e294:	c3                   	ret    
c001e295:	90                   	nop

c001e296 <SATA::open(int, int, void*)>:
c001e296:	56                   	push   esi
c001e297:	53                   	push   ebx
c001e298:	83 ec 10             	sub    esp,0x10
c001e29b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e29f:	68 8c 37 02 c0       	push   0xc002378c
c001e2a4:	e8 a5 8c fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e2a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2ad:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e2b7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2c1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e2cb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2d5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e2dc:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e2e2:	e8 29 0b ff ff       	call   c000ee10 <Phys::allocatePage()>
c001e2e7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e2ed:	89 c6                	mov    esi,eax
c001e2ef:	e8 1c 0b ff ff       	call   c000ee10 <Phys::allocatePage()>
c001e2f4:	81 c6 00 10 00 00    	add    esi,0x1000
c001e2fa:	83 c4 10             	add    esp,0x10
c001e2fd:	39 c6                	cmp    esi,eax
c001e2ff:	74 10                	je     c001e311 <SATA::open(int, int, void*)+0x7b>
c001e301:	83 ec 0c             	sub    esp,0xc
c001e304:	68 98 37 02 c0       	push   0xc0023798
c001e309:	e8 08 09 ff ff       	call   c000ec16 <KePanic(char const*)>
c001e30e:	83 c4 10             	add    esp,0x10
c001e311:	83 ec 0c             	sub    esp,0xc
c001e314:	6a 02                	push   0x2
c001e316:	e8 28 3c ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001e31b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e321:	6a 03                	push   0x3
c001e323:	50                   	push   eax
c001e324:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e32a:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e330:	e8 e7 42 ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c001e335:	83 c4 14             	add    esp,0x14
c001e338:	53                   	push   ebx
c001e339:	e8 54 b1 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001e33e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e341:	e8 20 c0 fe ff       	call   c000a366 <createPartitionsForDisk(PhysicalDisk*)>
c001e346:	83 c4 14             	add    esp,0x14
c001e349:	31 c0                	xor    eax,eax
c001e34b:	5b                   	pop    ebx
c001e34c:	5e                   	pop    esi
c001e34d:	c3                   	ret    

c001e34e <SATA::SATA()>:
c001e34e:	83 ec 0c             	sub    esp,0xc
c001e351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e355:	83 ec 04             	sub    esp,0x4
c001e358:	68 00 02 00 00       	push   0x200
c001e35d:	68 ac 37 02 c0       	push   0xc00237ac
c001e362:	50                   	push   eax
c001e363:	e8 c2 b0 fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e368:	83 c4 10             	add    esp,0x10
c001e36b:	ba 1c 38 02 c0       	mov    edx,0xc002381c
c001e370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e374:	89 10                	mov    DWORD PTR [eax],edx
c001e376:	90                   	nop
c001e377:	83 c4 0c             	add    esp,0xc
c001e37a:	c3                   	ret    
c001e37b:	90                   	nop

c001e37c <SATA::access(unsigned long long, int, void*, bool)>:
c001e37c:	55                   	push   ebp
c001e37d:	57                   	push   edi
c001e37e:	56                   	push   esi
c001e37f:	53                   	push   ebx
c001e380:	83 ec 2c             	sub    esp,0x2c
c001e383:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e387:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e38b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e38f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e393:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e397:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e39b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e39f:	fa                   	cli    
c001e3a0:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e3a6:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e3ab:	7e 10                	jle    c001e3bd <SATA::access(unsigned long long, int, void*, bool)+0x41>
c001e3ad:	83 ec 0c             	sub    esp,0xc
c001e3b0:	68 bc 37 02 c0       	push   0xc00237bc
c001e3b5:	e8 5c 08 ff ff       	call   c000ec16 <KePanic(char const*)>
c001e3ba:	83 c4 10             	add    esp,0x10
c001e3bd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e3c3:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001e3c9:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e3cf:	89 e8                	mov    eax,ebp
c001e3d1:	c1 e0 07             	shl    eax,0x7
c001e3d4:	01 d0                	add    eax,edx
c001e3d6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3e0:	8d 45 02             	lea    eax,[ebp+0x2]
c001e3e3:	51                   	push   ecx
c001e3e4:	c1 e0 07             	shl    eax,0x7
c001e3e7:	51                   	push   ecx
c001e3e8:	01 d0                	add    eax,edx
c001e3ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001e3ee:	50                   	push   eax
c001e3ef:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e3f5:	e8 0c ef ff ff       	call   c001d306 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e3fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001e406:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e40a:	0f 84 a6 01 00 00    	je     c001e5b6 <SATA::access(unsigned long long, int, void*, bool)+0x23a>
c001e410:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e414:	c1 e0 09             	shl    eax,0x9
c001e417:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e41c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e420:	74 0e                	je     c001e430 <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c001e422:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e428:	89 c1                	mov    ecx,eax
c001e42a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e42e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e430:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e434:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e43a:	8d 45 02             	lea    eax,[ebp+0x2]
c001e43d:	c1 e0 07             	shl    eax,0x7
c001e440:	01 d0                	add    eax,edx
c001e442:	8b 00                	mov    eax,DWORD PTR [eax]
c001e444:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e44a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e450:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e454:	c1 e1 05             	shl    ecx,0x5
c001e457:	01 c8                	add    eax,ecx
c001e459:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e45d:	83 e1 01             	and    ecx,0x1
c001e460:	89 ce                	mov    esi,ecx
c001e462:	8a 08                	mov    cl,BYTE PTR [eax]
c001e464:	c1 e6 06             	shl    esi,0x6
c001e467:	83 e1 bf             	and    ecx,0xffffffbf
c001e46a:	09 f1                	or     ecx,esi
c001e46c:	88 08                	mov    BYTE PTR [eax],cl
c001e46e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e470:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e476:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e47c:	89 08                	mov    DWORD PTR [eax],ecx
c001e47e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e484:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e48a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e490:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e493:	50                   	push   eax
c001e494:	68 90 00 00 00       	push   0x90
c001e499:	6a 00                	push   0x0
c001e49b:	56                   	push   esi
c001e49c:	e8 4f 20 fe ff       	call   c00004f0 <memset>
c001e4a1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e4a7:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e4ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4b1:	83 c4 10             	add    esp,0x10
c001e4b4:	48                   	dec    eax
c001e4b5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e4ba:	89 c1                	mov    ecx,eax
c001e4bc:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e4c2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4c7:	09 c8                	or     eax,ecx
c001e4c9:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e4cf:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e4d5:	83 c8 80             	or     eax,0xffffff80
c001e4d8:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e4de:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e4e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e4e5:	25 00 7f 00 00       	and    eax,0x7f00
c001e4ea:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4ef:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e4f4:	66 89 06             	mov    WORD PTR [esi],ax
c001e4f7:	b0 35                	mov    al,0x35
c001e4f9:	75 02                	jne    c001e4fd <SATA::access(unsigned long long, int, void*, bool)+0x181>
c001e4fb:	b0 25                	mov    al,0x25
c001e4fd:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e500:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e504:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e508:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001e50c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e510:	c1 e8 10             	shr    eax,0x10
c001e513:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e516:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e51a:	c1 e8 18             	shr    eax,0x18
c001e51d:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e520:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e524:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e527:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e52b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e52e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e532:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e536:	89 ee                	mov    esi,ebp
c001e538:	31 c0                	xor    eax,eax
c001e53a:	c1 e6 07             	shl    esi,0x7
c001e53d:	01 d6                	add    esi,edx
c001e53f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e545:	80 e1 88             	and    cl,0x88
c001e548:	74 0a                	je     c001e554 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e54a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e54f:	74 0a                	je     c001e55b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e551:	40                   	inc    eax
c001e552:	eb eb                	jmp    c001e53f <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e554:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e559:	75 0a                	jne    c001e565 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e55b:	83 ec 0c             	sub    esp,0xc
c001e55e:	68 f5 37 02 c0       	push   0xc00237f5
c001e563:	eb 34                	jmp    c001e599 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c001e565:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001e569:	c1 e5 07             	shl    ebp,0x7
c001e56c:	b8 01 00 00 00       	mov    eax,0x1
c001e571:	01 ea                	add    edx,ebp
c001e573:	d3 e0                	shl    eax,cl
c001e575:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e57b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e581:	85 c8                	test   eax,ecx
c001e583:	74 25                	je     c001e5aa <SATA::access(unsigned long long, int, void*, bool)+0x22e>
c001e585:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e58b:	0f ba e1 1e          	bt     ecx,0x1e
c001e58f:	73 ea                	jae    c001e57b <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001e591:	83 ec 0c             	sub    esp,0xc
c001e594:	68 03 38 02 c0       	push   0xc0023803
c001e599:	e8 b0 89 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e59e:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e5a5:	83 c4 10             	add    esp,0x10
c001e5a8:	eb 13                	jmp    c001e5bd <SATA::access(unsigned long long, int, void*, bool)+0x241>
c001e5aa:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e5b0:	0f ba e0 1e          	bt     eax,0x1e
c001e5b4:	73 18                	jae    c001e5ce <SATA::access(unsigned long long, int, void*, bool)+0x252>
c001e5b6:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e5bd:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c001e5c4:	75 01                	jne    c001e5c7 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c001e5c6:	fb                   	sti    
c001e5c7:	b8 01 00 00 00       	mov    eax,0x1
c001e5cc:	eb 2c                	jmp    c001e5fa <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e5ce:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e5d3:	75 10                	jne    c001e5e5 <SATA::access(unsigned long long, int, void*, bool)+0x269>
c001e5d5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e5db:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e5df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5e5:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c001e5ec:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e5f1:	85 c0                	test   eax,eax
c001e5f3:	75 03                	jne    c001e5f8 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c001e5f5:	fb                   	sti    
c001e5f6:	eb 02                	jmp    c001e5fa <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e5f8:	31 c0                	xor    eax,eax
c001e5fa:	83 c4 2c             	add    esp,0x2c
c001e5fd:	5b                   	pop    ebx
c001e5fe:	5e                   	pop    esi
c001e5ff:	5f                   	pop    edi
c001e600:	5d                   	pop    ebp
c001e601:	c3                   	ret    

c001e602 <SATA::read(unsigned long long, int, void*)>:
c001e602:	57                   	push   edi
c001e603:	b8 04 00 00 00       	mov    eax,0x4
c001e608:	56                   	push   esi
c001e609:	53                   	push   ebx
c001e60a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e60e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e612:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e616:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e61a:	8d 7a ff             	lea    edi,[edx-0x1]
c001e61d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e623:	77 25                	ja     c001e64a <SATA::read(unsigned long long, int, void*)+0x48>
c001e625:	85 f6                	test   esi,esi
c001e627:	b8 06 00 00 00       	mov    eax,0x6
c001e62c:	74 1c                	je     c001e64a <SATA::read(unsigned long long, int, void*)+0x48>
c001e62e:	50                   	push   eax
c001e62f:	50                   	push   eax
c001e630:	6a 00                	push   0x0
c001e632:	56                   	push   esi
c001e633:	52                   	push   edx
c001e634:	53                   	push   ebx
c001e635:	51                   	push   ecx
c001e636:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e63a:	e8 3d fd ff ff       	call   c001e37c <SATA::access(unsigned long long, int, void*, bool)>
c001e63f:	83 c4 20             	add    esp,0x20
c001e642:	85 c0                	test   eax,eax
c001e644:	0f 95 c0             	setne  al
c001e647:	0f b6 c0             	movzx  eax,al
c001e64a:	5b                   	pop    ebx
c001e64b:	5e                   	pop    esi
c001e64c:	5f                   	pop    edi
c001e64d:	c3                   	ret    

c001e64e <SATA::write(unsigned long long, int, void*)>:
c001e64e:	55                   	push   ebp
c001e64f:	b8 04 00 00 00       	mov    eax,0x4
c001e654:	57                   	push   edi
c001e655:	56                   	push   esi
c001e656:	53                   	push   ebx
c001e657:	83 ec 0c             	sub    esp,0xc
c001e65a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e65e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e662:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e666:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e66a:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e66d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e673:	77 3d                	ja     c001e6b2 <SATA::write(unsigned long long, int, void*)+0x64>
c001e675:	85 ed                	test   ebp,ebp
c001e677:	b8 06 00 00 00       	mov    eax,0x6
c001e67c:	74 34                	je     c001e6b2 <SATA::write(unsigned long long, int, void*)+0x64>
c001e67e:	c1 e3 09             	shl    ebx,0x9
c001e681:	01 eb                	add    ebx,ebp
c001e683:	50                   	push   eax
c001e684:	89 d6                	mov    esi,edx
c001e686:	50                   	push   eax
c001e687:	83 c6 01             	add    esi,0x1
c001e68a:	6a 01                	push   0x1
c001e68c:	89 cf                	mov    edi,ecx
c001e68e:	55                   	push   ebp
c001e68f:	83 d7 00             	adc    edi,0x0
c001e692:	6a 01                	push   0x1
c001e694:	81 c5 00 02 00 00    	add    ebp,0x200
c001e69a:	51                   	push   ecx
c001e69b:	52                   	push   edx
c001e69c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e6a0:	e8 d7 fc ff ff       	call   c001e37c <SATA::access(unsigned long long, int, void*, bool)>
c001e6a5:	83 c4 20             	add    esp,0x20
c001e6a8:	39 dd                	cmp    ebp,ebx
c001e6aa:	89 f2                	mov    edx,esi
c001e6ac:	89 f9                	mov    ecx,edi
c001e6ae:	75 d3                	jne    c001e683 <SATA::write(unsigned long long, int, void*)+0x35>
c001e6b0:	31 c0                	xor    eax,eax
c001e6b2:	83 c4 0c             	add    esp,0xc
c001e6b5:	5b                   	pop    ebx
c001e6b6:	5e                   	pop    esi
c001e6b7:	5f                   	pop    edi
c001e6b8:	5d                   	pop    ebp
c001e6b9:	c3                   	ret    

c001e6ba <SATAPI::write(unsigned long long, int, void*)>:
c001e6ba:	b8 03 00 00 00       	mov    eax,0x3
c001e6bf:	c3                   	ret    

c001e6c0 <SATAPI::close(int, int, void*)>:
c001e6c0:	83 ec 0c             	sub    esp,0xc
c001e6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6cd:	85 c0                	test   eax,eax
c001e6cf:	74 0c                	je     c001e6dd <SATAPI::close(int, int, void*)+0x1d>
c001e6d1:	8b 10                	mov    edx,DWORD PTR [eax]
c001e6d3:	83 ec 0c             	sub    esp,0xc
c001e6d6:	50                   	push   eax
c001e6d7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e6da:	83 c4 10             	add    esp,0x10
c001e6dd:	31 c0                	xor    eax,eax
c001e6df:	83 c4 0c             	add    esp,0xc
c001e6e2:	c3                   	ret    
c001e6e3:	90                   	nop

c001e6e4 <SATAPI::SATAPI()>:
c001e6e4:	83 ec 0c             	sub    esp,0xc
c001e6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6eb:	83 ec 04             	sub    esp,0x4
c001e6ee:	68 00 08 00 00       	push   0x800
c001e6f3:	68 4c 38 02 c0       	push   0xc002384c
c001e6f8:	50                   	push   eax
c001e6f9:	e8 2c ad fe ff       	call   c000942a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e6fe:	83 c4 10             	add    esp,0x10
c001e701:	ba 40 39 02 c0       	mov    edx,0xc0023940
c001e706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e70a:	89 10                	mov    DWORD PTR [eax],edx
c001e70c:	90                   	nop
c001e70d:	83 c4 0c             	add    esp,0xc
c001e710:	c3                   	ret    
c001e711:	90                   	nop

c001e712 <SATAPI::diskRemoved()>:
c001e712:	c3                   	ret    
c001e713:	90                   	nop

c001e714 <SATAPI::diskInserted()>:
c001e714:	83 ec 18             	sub    esp,0x18
c001e717:	68 58 38 02 c0       	push   0xc0023858
c001e71c:	e8 2d 88 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e725:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e72c:	83 c4 1c             	add    esp,0x1c
c001e72f:	c3                   	ret    

c001e730 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e730:	55                   	push   ebp
c001e731:	57                   	push   edi
c001e732:	56                   	push   esi
c001e733:	53                   	push   ebx
c001e734:	83 ec 34             	sub    esp,0x34
c001e737:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e73b:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e73f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e743:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e747:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e74b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e751:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e757:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e75b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e761:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e765:	83 c0 02             	add    eax,0x2
c001e768:	c1 e0 07             	shl    eax,0x7
c001e76b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e76f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e773:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e777:	c1 e0 07             	shl    eax,0x7
c001e77a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e77e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e782:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e78c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e790:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e796:	e8 6b eb ff ff       	call   c001d306 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e79b:	83 c4 10             	add    esp,0x10
c001e79e:	89 c2                	mov    edx,eax
c001e7a0:	b8 01 00 00 00       	mov    eax,0x1
c001e7a5:	83 fa ff             	cmp    edx,0xffffffff
c001e7a8:	0f 84 5f 02 00 00    	je     c001ea0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e7ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e7b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7b6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7be:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e7c4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e7ca:	89 d1                	mov    ecx,edx
c001e7cc:	c1 e1 05             	shl    ecx,0x5
c001e7cf:	01 c8                	add    eax,ecx
c001e7d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7d3:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e7d9:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e7df:	89 08                	mov    DWORD PTR [eax],ecx
c001e7e1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e7e7:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e7ed:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e7f3:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e7f6:	50                   	push   eax
c001e7f7:	68 90 00 00 00       	push   0x90
c001e7fc:	6a 00                	push   0x0
c001e7fe:	53                   	push   ebx
c001e7ff:	e8 ec 1c fe ff       	call   c00004f0 <memset>
c001e804:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e807:	b9 0c 00 00 00       	mov    ecx,0xc
c001e80c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e810:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e812:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e818:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e81c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e820:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e826:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e82a:	48                   	dec    eax
c001e82b:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e830:	89 c1                	mov    ecx,eax
c001e832:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e838:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e83d:	09 c8                	or     eax,ecx
c001e83f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e845:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e84b:	83 c8 80             	or     eax,0xffffff80
c001e84e:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e854:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e857:	25 00 7f 00 00       	and    eax,0x7f00
c001e85c:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e861:	66 89 03             	mov    WORD PTR [ebx],ax
c001e864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e868:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001e86c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e870:	c1 e8 10             	shr    eax,0x10
c001e873:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e87a:	c1 e8 18             	shr    eax,0x18
c001e87d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001e880:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e884:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e887:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e88b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e88e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e892:	83 c4 10             	add    esp,0x10
c001e895:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e899:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e89d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8a1:	31 c0                	xor    eax,eax
c001e8a3:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e8a9:	80 e1 88             	and    cl,0x88
c001e8ac:	74 0a                	je     c001e8b8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e8ae:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e8b3:	74 0a                	je     c001e8bf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e8b5:	40                   	inc    eax
c001e8b6:	eb eb                	jmp    c001e8a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e8b8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e8bd:	75 43                	jne    c001e902 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e8bf:	83 ec 0c             	sub    esp,0xc
c001e8c2:	68 70 38 02 c0       	push   0xc0023870
c001e8c7:	e8 82 86 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e8cc:	58                   	pop    eax
c001e8cd:	5a                   	pop    edx
c001e8ce:	68 85 38 02 c0       	push   0xc0023885
c001e8d3:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001e8d9:	e8 98 2a ff ff       	call   c0011376 <VgaText::puts(char const*)>
c001e8de:	59                   	pop    ecx
c001e8df:	5b                   	pop    ebx
c001e8e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e8e4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e8ea:	e8 b1 ea ff ff       	call   c001d3a0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e8ef:	5e                   	pop    esi
c001e8f0:	5f                   	pop    edi
c001e8f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e8f5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e8fb:	e8 80 ea ff ff       	call   c001d380 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e900:	eb 48                	jmp    c001e94a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e902:	b8 01 00 00 00       	mov    eax,0x1
c001e907:	88 d1                	mov    cl,dl
c001e909:	d3 e0                	shl    eax,cl
c001e90b:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e910:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e916:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e91a:	89 c7                	mov    edi,eax
c001e91c:	c1 e3 07             	shl    ebx,0x7
c001e91f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e923:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e929:	85 c7                	test   edi,eax
c001e92b:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e931:	0f 84 a3 00 00 00    	je     c001e9da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e937:	0f ba e0 1e          	bt     eax,0x1e
c001e93b:	73 1a                	jae    c001e957 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e93d:	83 ec 0c             	sub    esp,0xc
c001e940:	68 97 38 02 c0       	push   0xc0023897
c001e945:	e8 04 86 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001e94a:	83 c4 10             	add    esp,0x10
c001e94d:	b8 01 00 00 00       	mov    eax,0x1
c001e952:	e9 b6 00 00 00       	jmp    c001ea0d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e957:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e95d:	83 f8 0d             	cmp    eax,0xd
c001e960:	77 0a                	ja     c001e96c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e962:	83 ec 0c             	sub    esp,0xc
c001e965:	68 c8 00 00 00       	push   0xc8
c001e96a:	eb 28                	jmp    c001e994 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e96c:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e972:	83 f8 0d             	cmp    eax,0xd
c001e975:	77 0a                	ja     c001e981 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e977:	83 ec 0c             	sub    esp,0xc
c001e97a:	68 58 02 00 00       	push   0x258
c001e97f:	eb 13                	jmp    c001e994 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e981:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e987:	83 f8 06             	cmp    eax,0x6
c001e98a:	77 10                	ja     c001e99c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e98c:	83 ec 0c             	sub    esp,0xc
c001e98f:	68 dc 05 00 00       	push   0x5dc
c001e994:	e8 ff 6b ff ff       	call   c0015598 <milliTenthSleep(unsigned int)>
c001e999:	83 c4 10             	add    esp,0x10
c001e99c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e9a0:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e9a3:	75 06                	jne    c001e9ab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e9a5:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e9a9:	74 15                	je     c001e9c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e9ab:	83 fe 06             	cmp    esi,0x6
c001e9ae:	77 10                	ja     c001e9c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	68 c4 09 00 00       	push   0x9c4
c001e9b8:	e8 db 6b ff ff       	call   c0015598 <milliTenthSleep(unsigned int)>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	46                   	inc    esi
c001e9c1:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e9c7:	0f 85 56 ff ff ff    	jne    c001e923 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e9cd:	83 ec 0c             	sub    esp,0xc
c001e9d0:	68 aa 38 02 c0       	push   0xc00238aa
c001e9d5:	e9 6b ff ff ff       	jmp    c001e945 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e9da:	0f ba e0 1e          	bt     eax,0x1e
c001e9de:	73 0d                	jae    c001e9ed <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e9e0:	83 ec 0c             	sub    esp,0xc
c001e9e3:	68 be 38 02 c0       	push   0xc00238be
c001e9e8:	e9 58 ff ff ff       	jmp    c001e945 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e9ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e9f2:	74 17                	je     c001ea0b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e9f4:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e9f9:	74 10                	je     c001ea0b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e9fb:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ea01:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ea05:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ea09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ea0b:	31 c0                	xor    eax,eax
c001ea0d:	83 c4 2c             	add    esp,0x2c
c001ea10:	5b                   	pop    ebx
c001ea11:	5e                   	pop    esi
c001ea12:	5f                   	pop    edi
c001ea13:	5d                   	pop    ebp
c001ea14:	c3                   	ret    
c001ea15:	90                   	nop

c001ea16 <SATAPI::eject()>:
c001ea16:	57                   	push   edi
c001ea17:	b9 03 00 00 00       	mov    ecx,0x3
c001ea1c:	83 ec 18             	sub    esp,0x18
c001ea1f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ea23:	fc                   	cld    
c001ea24:	31 c0                	xor    eax,eax
c001ea26:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ea28:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ea2d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ea32:	50                   	push   eax
c001ea33:	6a 00                	push   0x0
c001ea35:	6a 00                	push   0x0
c001ea37:	6a 00                	push   0x0
c001ea39:	6a 00                	push   0x0
c001ea3b:	6a 02                	push   0x2
c001ea3d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ea41:	50                   	push   eax
c001ea42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea46:	e8 e5 fc ff ff       	call   c001e730 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ea4b:	83 c4 38             	add    esp,0x38
c001ea4e:	31 c0                	xor    eax,eax
c001ea50:	5f                   	pop    edi
c001ea51:	c3                   	ret    

c001ea52 <SATAPI::detectMedia()>:
c001ea52:	53                   	push   ebx
c001ea53:	83 ec 14             	sub    esp,0x14
c001ea56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ea5a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ea60:	e8 d7 bf fe ff       	call   c000aa3c <VCache::writeWriteBuffer()>
c001ea65:	59                   	pop    ecx
c001ea66:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ea6c:	e8 bb bf fe ff       	call   c000aa2c <VCache::invalidateReadBuffer()>
c001ea71:	c7 04 24 d3 38 02 c0 	mov    DWORD PTR [esp],0xc00238d3
c001ea78:	e8 d1 84 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ea7d:	83 c4 10             	add    esp,0x10
c001ea80:	31 c0                	xor    eax,eax
c001ea82:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001ea89:	85 d2                	test   edx,edx
c001ea8b:	74 0f                	je     c001ea9c <SATAPI::detectMedia()+0x4a>
c001ea8d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001ea93:	75 07                	jne    c001ea9c <SATAPI::detectMedia()+0x4a>
c001ea95:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001ea9c:	40                   	inc    eax
c001ea9d:	83 f8 1a             	cmp    eax,0x1a
c001eaa0:	75 e0                	jne    c001ea82 <SATAPI::detectMedia()+0x30>
c001eaa2:	83 c4 08             	add    esp,0x8
c001eaa5:	5b                   	pop    ebx
c001eaa6:	c3                   	ret    
c001eaa7:	90                   	nop

c001eaa8 <SATAPI::open(int, int, void*)>:
c001eaa8:	56                   	push   esi
c001eaa9:	53                   	push   ebx
c001eaaa:	51                   	push   ecx
c001eaab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eaaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001eab3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001eabd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001eac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eac7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ead1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001eadb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001eae2:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001eae8:	e8 23 03 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001eaed:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001eaf3:	89 c6                	mov    esi,eax
c001eaf5:	e8 16 03 ff ff       	call   c000ee10 <Phys::allocatePage()>
c001eafa:	81 c6 00 10 00 00    	add    esi,0x1000
c001eb00:	39 c6                	cmp    esi,eax
c001eb02:	74 10                	je     c001eb14 <SATAPI::open(int, int, void*)+0x6c>
c001eb04:	83 ec 0c             	sub    esp,0xc
c001eb07:	68 e8 38 02 c0       	push   0xc00238e8
c001eb0c:	e8 05 01 ff ff       	call   c000ec16 <KePanic(char const*)>
c001eb11:	83 c4 10             	add    esp,0x10
c001eb14:	83 ec 0c             	sub    esp,0xc
c001eb17:	6a 02                	push   0x2
c001eb19:	e8 25 34 ff ff       	call   c0011f43 <Virt::allocateKernelVirtualPages(int)>
c001eb1e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001eb24:	6a 03                	push   0x3
c001eb26:	50                   	push   eax
c001eb27:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001eb2d:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001eb33:	e8 e4 3a ff ff       	call   c001261c <VAS::mapPage(unsigned long, unsigned long, int)>
c001eb38:	83 c4 14             	add    esp,0x14
c001eb3b:	68 78 01 00 00       	push   0x178
c001eb40:	e8 8b fd fe ff       	call   c000e8d0 <malloc>
c001eb45:	83 c4 0c             	add    esp,0xc
c001eb48:	6a 00                	push   0x0
c001eb4a:	68 ff ff ff 7f       	push   0x7fffffff
c001eb4f:	6a 00                	push   0x0
c001eb51:	6a 00                	push   0x0
c001eb53:	53                   	push   ebx
c001eb54:	68 fe 38 02 c0       	push   0xc00238fe
c001eb59:	89 c6                	mov    esi,eax
c001eb5b:	50                   	push   eax
c001eb5c:	e8 33 b3 fe ff       	call   c0009e94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001eb61:	83 c4 14             	add    esp,0x14
c001eb64:	56                   	push   esi
c001eb65:	e8 ea b3 fe ff       	call   c0009f54 <LogicalDisk::assignDriveLetter()>
c001eb6a:	5a                   	pop    edx
c001eb6b:	59                   	pop    ecx
c001eb6c:	0f be c0             	movsx  eax,al
c001eb6f:	50                   	push   eax
c001eb70:	68 44 37 02 c0       	push   0xc0023744
c001eb75:	e8 d4 83 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001eb7a:	58                   	pop    eax
c001eb7b:	5a                   	pop    edx
c001eb7c:	56                   	push   esi
c001eb7d:	53                   	push   ebx
c001eb7e:	e8 c3 a4 fe ff       	call   c0009046 <Device::addChild(Device*)>
c001eb83:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001eb89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb8c:	e8 01 a9 fe ff       	call   c0009492 <PhysicalDisk::startCache()>
c001eb91:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001eb98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001eb9b:	e8 b2 fe ff ff       	call   c001ea52 <SATAPI::detectMedia()>
c001eba0:	83 c4 14             	add    esp,0x14
c001eba3:	31 c0                	xor    eax,eax
c001eba5:	5b                   	pop    ebx
c001eba6:	5e                   	pop    esi
c001eba7:	c3                   	ret    

c001eba8 <SATAPI::read(unsigned long long, int, void*)>:
c001eba8:	55                   	push   ebp
c001eba9:	57                   	push   edi
c001ebaa:	56                   	push   esi
c001ebab:	53                   	push   ebx
c001ebac:	83 ec 3c             	sub    esp,0x3c
c001ebaf:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001ebb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ebb7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ebbb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ebbf:	83 fd 04             	cmp    ebp,0x4
c001ebc2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ebc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ebca:	7e 10                	jle    c001ebdc <SATAPI::read(unsigned long long, int, void*)+0x34>
c001ebcc:	83 ec 0c             	sub    esp,0xc
c001ebcf:	68 0c 39 02 c0       	push   0xc002390c
c001ebd4:	e8 3d 00 ff ff       	call   c000ec16 <KePanic(char const*)>
c001ebd9:	83 c4 10             	add    esp,0x10
c001ebdc:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ebe2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ebe8:	51                   	push   ecx
c001ebe9:	50                   	push   eax
c001ebea:	83 c0 02             	add    eax,0x2
c001ebed:	c1 e0 07             	shl    eax,0x7
c001ebf0:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ebf6:	50                   	push   eax
c001ebf7:	52                   	push   edx
c001ebf8:	e8 cd e7 ff ff       	call   c001d3ca <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ebfd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ec01:	b9 03 00 00 00       	mov    ecx,0x3
c001ec06:	fc                   	cld    
c001ec07:	31 c0                	xor    eax,eax
c001ec09:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec0b:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ec10:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ec15:	83 c4 0c             	add    esp,0xc
c001ec18:	6a 00                	push   0x0
c001ec1a:	6a 00                	push   0x0
c001ec1c:	6a 00                	push   0x0
c001ec1e:	6a 00                	push   0x0
c001ec20:	6a 02                	push   0x2
c001ec22:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ec26:	50                   	push   eax
c001ec27:	53                   	push   ebx
c001ec28:	e8 03 fb ff ff       	call   c001e730 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ec2d:	83 c4 20             	add    esp,0x20
c001ec30:	85 c0                	test   eax,eax
c001ec32:	89 c6                	mov    esi,eax
c001ec34:	75 46                	jne    c001ec7c <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001ec36:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ec3a:	b9 03 00 00 00       	mov    ecx,0x3
c001ec3f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec45:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ec4a:	0f c8                	bswap  eax
c001ec4c:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ec50:	89 e8                	mov    eax,ebp
c001ec52:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ec56:	50                   	push   eax
c001ec57:	55                   	push   ebp
c001ec58:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001ec5c:	c1 e5 0b             	shl    ebp,0xb
c001ec5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec67:	55                   	push   ebp
c001ec68:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ec6c:	50                   	push   eax
c001ec6d:	53                   	push   ebx
c001ec6e:	e8 bd fa ff ff       	call   c001e730 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ec73:	83 c4 20             	add    esp,0x20
c001ec76:	85 c0                	test   eax,eax
c001ec78:	89 c6                	mov    esi,eax
c001ec7a:	74 0c                	je     c001ec88 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001ec7c:	83 ec 0c             	sub    esp,0xc
c001ec7f:	53                   	push   ebx
c001ec80:	e8 cd fd ff ff       	call   c001ea52 <SATAPI::detectMedia()>
c001ec85:	83 c4 10             	add    esp,0x10
c001ec88:	83 c4 3c             	add    esp,0x3c
c001ec8b:	89 f0                	mov    eax,esi
c001ec8d:	5b                   	pop    ebx
c001ec8e:	5e                   	pop    esi
c001ec8f:	5f                   	pop    edi
c001ec90:	5d                   	pop    ebp
c001ec91:	c3                   	ret    

c001ec92 <IOAPIC::close(int, int, void*)>:
c001ec92:	b8 00 00 00 00       	mov    eax,0x0
c001ec97:	c3                   	ret    

c001ec98 <apicGetBase()>:
c001ec98:	55                   	push   ebp
c001ec99:	89 e5                	mov    ebp,esp
c001ec9b:	83 ec 08             	sub    esp,0x8
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	68 70 39 02 c0       	push   0xc0023970
c001eca6:	e8 6b ff fe ff       	call   c000ec16 <KePanic(char const*)>
c001ecab:	83 c4 10             	add    esp,0x10
c001ecae:	b8 00 00 00 00       	mov    eax,0x0
c001ecb3:	c9                   	leave  
c001ecb4:	c3                   	ret    
c001ecb5:	90                   	nop

c001ecb6 <IOAPIC::IOAPIC()>:
c001ecb6:	83 ec 0c             	sub    esp,0xc
c001ecb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbd:	83 ec 08             	sub    esp,0x8
c001ecc0:	68 7f 39 02 c0       	push   0xc002397f
c001ecc5:	50                   	push   eax
c001ecc6:	e8 dd a4 fe ff       	call   c00091a8 <Device::Device(char const*)>
c001eccb:	83 c4 10             	add    esp,0x10
c001ecce:	ba a0 39 02 c0       	mov    edx,0xc00239a0
c001ecd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd7:	89 10                	mov    DWORD PTR [eax],edx
c001ecd9:	90                   	nop
c001ecda:	83 c4 0c             	add    esp,0xc
c001ecdd:	c3                   	ret    

c001ecde <apicOpen()>:
c001ecde:	55                   	push   ebp
c001ecdf:	89 e5                	mov    ebp,esp
c001ece1:	53                   	push   ebx
c001ece2:	83 ec 34             	sub    esp,0x34
c001ece5:	83 ec 0c             	sub    esp,0xc
c001ece8:	68 87 39 02 c0       	push   0xc0023987
c001eced:	e8 5c 82 fe ff       	call   c0006f4e <Dbg::kprintf(char const*, ...)>
c001ecf2:	83 c4 10             	add    esp,0x10
c001ecf5:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001ecfa:	83 f0 01             	xor    eax,0x1
c001ecfd:	0f b6 c0             	movzx  eax,al
c001ed00:	85 c0                	test   eax,eax
c001ed02:	0f 84 a3 00 00 00    	je     c001edab <apicOpen()+0xcd>
c001ed08:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ed0c:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001ed11:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ed15:	0f b6 c0             	movzx  eax,al
c001ed18:	39 c2                	cmp    edx,eax
c001ed1a:	0f 83 84 00 00 00    	jae    c001eda4 <apicOpen()+0xc6>
c001ed20:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ed27:	83 ec 0c             	sub    esp,0xc
c001ed2a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ed2d:	e8 9e fb fe ff       	call   c000e8d0 <malloc>
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	89 c3                	mov    ebx,eax
c001ed37:	83 ec 0c             	sub    esp,0xc
c001ed3a:	53                   	push   ebx
c001ed3b:	e8 76 ff ff ff       	call   c001ecb6 <IOAPIC::IOAPIC()>
c001ed40:	83 c4 10             	add    esp,0x10
c001ed43:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ed46:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ed4a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed4d:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001ed54:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001ed59:	83 c0 01             	add    eax,0x1
c001ed5c:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001ed61:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001ed66:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ed6c:	83 ec 08             	sub    esp,0x8
c001ed6f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ed72:	50                   	push   eax
c001ed73:	e8 ce a2 fe ff       	call   c0009046 <Device::addChild(Device*)>
c001ed78:	83 c4 10             	add    esp,0x10
c001ed7b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ed7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed80:	83 c0 08             	add    eax,0x8
c001ed83:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed85:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ed89:	6a 00                	push   0x0
c001ed8b:	6a 00                	push   0x0
c001ed8d:	52                   	push   edx
c001ed8e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ed91:	ff d0                	call   eax
c001ed93:	83 c4 10             	add    esp,0x10
c001ed96:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ed99:	83 c0 01             	add    eax,0x1
c001ed9c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ed9f:	e9 68 ff ff ff       	jmp    c001ed0c <apicOpen()+0x2e>
c001eda4:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001edab:	e8 e8 fe ff ff       	call   c001ec98 <apicGetBase()>
c001edb0:	05 f0 00 00 00       	add    eax,0xf0
c001edb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edb8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001edbb:	8b 00                	mov    eax,DWORD PTR [eax]
c001edbd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001edc0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001edc7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001edce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001edd1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001edd4:	89 10                	mov    DWORD PTR [eax],edx
c001edd6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001eddd:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001ede2:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ede5:	7d 7c                	jge    c001ee63 <apicOpen()+0x185>
c001ede7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edea:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001edf1:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001edf4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001edf7:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001edfe:	c1 e8 08             	shr    eax,0x8
c001ee01:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ee05:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee08:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee0f:	c1 e8 18             	shr    eax,0x18
c001ee12:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ee15:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ee19:	3d ff 00 00 00       	cmp    eax,0xff
c001ee1e:	75 3a                	jne    c001ee5a <apicOpen()+0x17c>
c001ee20:	e8 73 fe ff ff       	call   c001ec98 <apicGetBase()>
c001ee25:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ee29:	83 fa 01             	cmp    edx,0x1
c001ee2c:	75 07                	jne    c001ee35 <apicOpen()+0x157>
c001ee2e:	ba 60 03 00 00       	mov    edx,0x360
c001ee33:	eb 05                	jmp    c001ee3a <apicOpen()+0x15c>
c001ee35:	ba 50 03 00 00       	mov    edx,0x350
c001ee3a:	01 d0                	add    eax,edx
c001ee3c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ee3f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee42:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee44:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ee47:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ee4e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ee52:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee55:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ee58:	89 10                	mov    DWORD PTR [eax],edx
c001ee5a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ee5e:	e9 7a ff ff ff       	jmp    c001eddd <apicOpen()+0xff>
c001ee63:	90                   	nop
c001ee64:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee67:	c9                   	leave  
c001ee68:	c3                   	ret    
c001ee69:	90                   	nop

c001ee6a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ee6a:	55                   	push   ebp
c001ee6b:	89 e5                	mov    ebp,esp
c001ee6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ee76:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ee79:	72 1d                	jb     c001ee98 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ee7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee7e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ee84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee87:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ee8d:	01 d0                	add    eax,edx
c001ee8f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ee92:	73 04                	jae    c001ee98 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ee94:	b0 01                	mov    al,0x1
c001ee96:	eb 02                	jmp    c001ee9a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ee98:	b0 00                	mov    al,0x0
c001ee9a:	5d                   	pop    ebp
c001ee9b:	c3                   	ret    

c001ee9c <IOAPIC::read(int)>:
c001ee9c:	55                   	push   ebp
c001ee9d:	89 e5                	mov    ebp,esp
c001ee9f:	83 ec 10             	sub    esp,0x10
c001eea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eea5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eeab:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eeae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eeb1:	0f b6 d0             	movzx  edx,al
c001eeb4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eeb7:	89 10                	mov    DWORD PTR [eax],edx
c001eeb9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eebc:	83 c0 10             	add    eax,0x10
c001eebf:	8b 00                	mov    eax,DWORD PTR [eax]
c001eec1:	c9                   	leave  
c001eec2:	c3                   	ret    
c001eec3:	90                   	nop

c001eec4 <IOAPIC::open(int, int, void*)>:
c001eec4:	55                   	push   ebp
c001eec5:	89 e5                	mov    ebp,esp
c001eec7:	57                   	push   edi
c001eec8:	56                   	push   esi
c001eec9:	53                   	push   ebx
c001eeca:	83 ec 04             	sub    esp,0x4
c001eecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eed0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eed3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eedc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eee2:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001eee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eeec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eef5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eefb:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001ef02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef05:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ef0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef0e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ef14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef17:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef1d:	0f b6 f0             	movzx  esi,al
c001ef20:	89 d0                	mov    eax,edx
c001ef22:	ba 00 00 00 00       	mov    edx,0x0
c001ef27:	89 c7                	mov    edi,eax
c001ef29:	83 e7 ff             	and    edi,0xffffffff
c001ef2c:	89 f9                	mov    ecx,edi
c001ef2e:	0f b6 da             	movzx  ebx,dl
c001ef31:	89 c8                	mov    eax,ecx
c001ef33:	89 da                	mov    edx,ebx
c001ef35:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ef38:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ef3b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef3f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef43:	83 e0 00             	and    eax,0x0
c001ef46:	09 d0                	or     eax,edx
c001ef48:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef4f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef55:	8d 50 01             	lea    edx,[eax+0x1]
c001ef58:	88 d1                	mov    cl,dl
c001ef5a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ef5d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ef63:	0f b6 d0             	movzx  edx,al
c001ef66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef69:	83 c2 08             	add    edx,0x8
c001ef6c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef70:	0f b6 c9             	movzx  ecx,cl
c001ef73:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ef79:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef7d:	6a 01                	push   0x1
c001ef7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ef82:	e8 15 ff ff ff       	call   c001ee9c <IOAPIC::read(int)>
c001ef87:	83 c4 08             	add    esp,0x8
c001ef8a:	c1 f8 10             	sar    eax,0x10
c001ef8d:	0f b6 c0             	movzx  eax,al
c001ef90:	8d 50 01             	lea    edx,[eax+0x1]
c001ef93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef96:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ef9c:	b8 00 00 00 00       	mov    eax,0x0
c001efa1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001efa4:	5b                   	pop    ebx
c001efa5:	5e                   	pop    esi
c001efa6:	5f                   	pop    edi
c001efa7:	5d                   	pop    ebp
c001efa8:	c3                   	ret    
c001efa9:	90                   	nop

c001efaa <IOAPIC::write(int, int)>:
c001efaa:	55                   	push   ebp
c001efab:	89 e5                	mov    ebp,esp
c001efad:	83 ec 10             	sub    esp,0x10
c001efb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efb3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001efb9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001efbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001efbf:	0f b6 d0             	movzx  edx,al
c001efc2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001efc5:	89 10                	mov    DWORD PTR [eax],edx
c001efc7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001efca:	8d 50 10             	lea    edx,[eax+0x10]
c001efcd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001efd0:	89 02                	mov    DWORD PTR [edx],eax
c001efd2:	90                   	nop
c001efd3:	c9                   	leave  
c001efd4:	c3                   	ret    
c001efd5:	90                   	nop

c001efd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001efd6:	55                   	push   ebp
c001efd7:	89 e5                	mov    ebp,esp
c001efd9:	53                   	push   ebx
c001efda:	83 ec 2c             	sub    esp,0x2c
c001efdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001efe0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001efe3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001efe6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001efe9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001efec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001efef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eff2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001eff5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001eff8:	88 d8                	mov    al,bl
c001effa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001effd:	88 c8                	mov    al,cl
c001efff:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f002:	88 d0                	mov    al,dl
c001f004:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f007:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f00b:	83 c0 08             	add    eax,0x8
c001f00e:	d1 e0                	shl    eax,1
c001f010:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f013:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f017:	83 c0 08             	add    eax,0x8
c001f01a:	d1 e0                	shl    eax,1
c001f01c:	83 c0 01             	add    eax,0x1
c001f01f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f022:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f025:	50                   	push   eax
c001f026:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f029:	e8 6e fe ff ff       	call   c001ee9c <IOAPIC::read(int)>
c001f02e:	83 c4 08             	add    esp,0x8
c001f031:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f034:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f03b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f03e:	c1 e0 18             	shl    eax,0x18
c001f041:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f044:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f047:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f04a:	52                   	push   edx
c001f04b:	50                   	push   eax
c001f04c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f04f:	e8 56 ff ff ff       	call   c001efaa <IOAPIC::write(int, int)>
c001f054:	83 c4 0c             	add    esp,0xc
c001f057:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f05a:	50                   	push   eax
c001f05b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f05e:	e8 39 fe ff ff       	call   c001ee9c <IOAPIC::read(int)>
c001f063:	83 c4 08             	add    esp,0x8
c001f066:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f069:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f070:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f077:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f07e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f082:	85 c0                	test   eax,eax
c001f084:	74 09                	je     c001f08f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f086:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f08d:	eb 07                	jmp    c001f096 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f08f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f096:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f09a:	85 c0                	test   eax,eax
c001f09c:	74 09                	je     c001f0a7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f09e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f0a5:	eb 07                	jmp    c001f0ae <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f0a7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f0ae:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f0b5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f0b9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f0bc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f0bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0c2:	52                   	push   edx
c001f0c3:	50                   	push   eax
c001f0c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0c7:	e8 de fe ff ff       	call   c001efaa <IOAPIC::write(int, int)>
c001f0cc:	83 c4 0c             	add    esp,0xc
c001f0cf:	90                   	nop
c001f0d0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f0d3:	c9                   	leave  
c001f0d4:	c3                   	ret    
c001f0d5:	66 90                	xchg   ax,ax
c001f0d7:	90                   	nop

c001f0d8 <APICTimer::close(int, int, void*)>:
c001f0d8:	b8 00 00 00 00       	mov    eax,0x0
c001f0dd:	c3                   	ret    
c001f0de:	66 90                	xchg   ax,ax

c001f0e0 <apicTimerHandler(regs*, void*)>:
c001f0e0:	83 ec 0c             	sub    esp,0xc
c001f0e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f0e9:	b8 10 27 00 00       	mov    eax,0x2710
c001f0ee:	ba 00 00 00 00       	mov    edx,0x0
c001f0f3:	f7 f1                	div    ecx
c001f0f5:	83 ec 0c             	sub    esp,0xc
c001f0f8:	50                   	push   eax
c001f0f9:	e8 52 b6 fe ff       	call   c000a750 <timerHandler(unsigned int)>
c001f0fe:	83 c4 10             	add    esp,0x10
c001f101:	90                   	nop
c001f102:	83 c4 0c             	add    esp,0xc
c001f105:	c3                   	ret    
c001f106:	66 90                	xchg   ax,ax

c001f108 <APICTimer::open(int, int, void*)>:
c001f108:	83 ec 0c             	sub    esp,0xc
c001f10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f111:	83 c0 24             	add    eax,0x24
c001f114:	8b 00                	mov    eax,DWORD PTR [eax]
c001f116:	83 ec 08             	sub    esp,0x8
c001f119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f11d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f121:	ff d0                	call   eax
c001f123:	83 c4 10             	add    esp,0x10
c001f126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f12e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f138:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f13c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f142:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f146:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f14c:	83 ec 0c             	sub    esp,0xc
c001f14f:	51                   	push   ecx
c001f150:	6a 01                	push   0x1
c001f152:	68 e0 f0 01 c0       	push   0xc001f0e0
c001f157:	52                   	push   edx
c001f158:	50                   	push   eax
c001f159:	e8 94 9e fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f15e:	83 c4 20             	add    esp,0x20
c001f161:	89 c2                	mov    edx,eax
c001f163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f167:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f16d:	b8 00 00 00 00       	mov    eax,0x0
c001f172:	83 c4 0c             	add    esp,0xc
c001f175:	c3                   	ret    
c001f176:	66 90                	xchg   ax,ax

c001f178 <APICTimer::write(int)>:
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	83 ec 0c             	sub    esp,0xc
c001f17e:	68 c4 39 02 c0       	push   0xc00239c4
c001f183:	e8 8e fa fe ff       	call   c000ec16 <KePanic(char const*)>
c001f188:	83 c4 10             	add    esp,0x10
c001f18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f18f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f193:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f199:	90                   	nop
c001f19a:	83 c4 0c             	add    esp,0xc
c001f19d:	c3                   	ret    
c001f19e:	66 90                	xchg   ax,ax

c001f1a0 <APICTimer::APICTimer()>:
c001f1a0:	83 ec 0c             	sub    esp,0xc
c001f1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a7:	83 ec 08             	sub    esp,0x8
c001f1aa:	68 d4 39 02 c0       	push   0xc00239d4
c001f1af:	50                   	push   eax
c001f1b0:	e8 cf b4 fe ff       	call   c000a684 <Timer::Timer(char const*)>
c001f1b5:	83 c4 10             	add    esp,0x10
c001f1b8:	ba e8 39 02 c0       	mov    edx,0xc00239e8
c001f1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c1:	89 10                	mov    DWORD PTR [eax],edx
c001f1c3:	90                   	nop
c001f1c4:	83 c4 0c             	add    esp,0xc
c001f1c7:	c3                   	ret    

c001f1c8 <PIT::write(int)>:
c001f1c8:	83 ec 10             	sub    esp,0x10
c001f1cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f1d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f1d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f1dd:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f1e2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f1e7:	89 c2                	mov    edx,eax
c001f1e9:	c1 fa 1f             	sar    edx,0x1f
c001f1ec:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f1f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f1f4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f1fb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f200:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f204:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f209:	ee                   	out    dx,al
c001f20a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f20e:	0f b6 c0             	movzx  eax,al
c001f211:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f218:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f21c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f220:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f225:	ee                   	out    dx,al
c001f226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f22a:	c1 f8 08             	sar    eax,0x8
c001f22d:	0f b6 c0             	movzx  eax,al
c001f230:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f237:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f23b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f23f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f244:	ee                   	out    dx,al
c001f245:	90                   	nop
c001f246:	83 c4 10             	add    esp,0x10
c001f249:	c3                   	ret    
c001f24a:	66 90                	xchg   ax,ax

c001f24c <pitHandler(regs*, void*)>:
c001f24c:	83 ec 0c             	sub    esp,0xc
c001f24f:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f255:	b8 10 27 00 00       	mov    eax,0x2710
c001f25a:	89 c2                	mov    edx,eax
c001f25c:	c1 fa 1f             	sar    edx,0x1f
c001f25f:	f7 f9                	idiv   ecx
c001f261:	83 ec 0c             	sub    esp,0xc
c001f264:	50                   	push   eax
c001f265:	e8 e6 b4 fe ff       	call   c000a750 <timerHandler(unsigned int)>
c001f26a:	83 c4 10             	add    esp,0x10
c001f26d:	90                   	nop
c001f26e:	83 c4 0c             	add    esp,0xc
c001f271:	c3                   	ret    
c001f272:	66 90                	xchg   ax,ax

c001f274 <PIT::open(int, int, void*)>:
c001f274:	83 ec 0c             	sub    esp,0xc
c001f277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f27b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f27d:	83 c0 24             	add    eax,0x24
c001f280:	8b 00                	mov    eax,DWORD PTR [eax]
c001f282:	83 ec 08             	sub    esp,0x8
c001f285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f28d:	ff d0                	call   eax
c001f28f:	83 c4 10             	add    esp,0x10
c001f292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f296:	83 ec 0c             	sub    esp,0xc
c001f299:	6a 00                	push   0x0
c001f29b:	6a 01                	push   0x1
c001f29d:	68 4c f2 01 c0       	push   0xc001f24c
c001f2a2:	6a 00                	push   0x0
c001f2a4:	50                   	push   eax
c001f2a5:	e8 48 9d fe ff       	call   c0008ff2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f2aa:	83 c4 20             	add    esp,0x20
c001f2ad:	89 c2                	mov    edx,eax
c001f2af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f2b9:	b8 00 00 00 00       	mov    eax,0x0
c001f2be:	83 c4 0c             	add    esp,0xc
c001f2c1:	c3                   	ret    
c001f2c2:	66 90                	xchg   ax,ax

c001f2c4 <PIT::close(int, int, void*)>:
c001f2c4:	83 ec 0c             	sub    esp,0xc
c001f2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2cb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f2d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d9:	6a 01                	push   0x1
c001f2db:	68 4c f2 01 c0       	push   0xc001f24c
c001f2e0:	6a 00                	push   0x0
c001f2e2:	50                   	push   eax
c001f2e3:	e8 40 9d fe ff       	call   c0009028 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f2e8:	83 c4 10             	add    esp,0x10
c001f2eb:	b8 00 00 00 00       	mov    eax,0x0
c001f2f0:	83 c4 0c             	add    esp,0xc
c001f2f3:	c3                   	ret    

c001f2f4 <PIT::PIT()>:
c001f2f4:	83 ec 0c             	sub    esp,0xc
c001f2f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2fb:	83 ec 08             	sub    esp,0x8
c001f2fe:	68 10 3a 02 c0       	push   0xc0023a10
c001f303:	50                   	push   eax
c001f304:	e8 7b b3 fe ff       	call   c000a684 <Timer::Timer(char const*)>
c001f309:	83 c4 10             	add    esp,0x10
c001f30c:	ba 38 3a 02 c0       	mov    edx,0xc0023a38
c001f311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f315:	89 10                	mov    DWORD PTR [eax],edx
c001f317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f31b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f321:	0f b6 d0             	movzx  edx,al
c001f324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f328:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f333:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f339:	0f b6 d0             	movzx  edx,al
c001f33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f340:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f349:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f34f:	8d 50 01             	lea    edx,[eax+0x1]
c001f352:	88 d1                	mov    cl,dl
c001f354:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f358:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f35e:	0f b6 d0             	movzx  edx,al
c001f361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f365:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f369:	83 e1 3f             	and    ecx,0x3f
c001f36c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f370:	90                   	nop
c001f371:	83 c4 0c             	add    esp,0xc
c001f374:	c3                   	ret    
c001f375:	66 90                	xchg   ax,ax
c001f377:	66 90                	xchg   ax,ax
c001f379:	66 90                	xchg   ax,ax
c001f37b:	66 90                	xchg   ax,ax
c001f37d:	66 90                	xchg   ax,ax
c001f37f:	90                   	nop

c001f380 <avxDetect>:
c001f380:	b8 01 00 00 00       	mov    eax,0x1
c001f385:	0f a2                	cpuid  
c001f387:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f38d:	74 15                	je     c001f3a4 <avxDetect.noAVX>
c001f38f:	b8 01 00 00 00       	mov    eax,0x1
c001f394:	0f a2                	cpuid  
c001f396:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f39c:	74 06                	je     c001f3a4 <avxDetect.noAVX>
c001f39e:	b8 01 00 00 00       	mov    eax,0x1
c001f3a3:	c3                   	ret    

c001f3a4 <avxDetect.noAVX>:
c001f3a4:	b8 00 00 00 00       	mov    eax,0x0
c001f3a9:	c3                   	ret    

c001f3aa <avxSave>:
c001f3aa:	53                   	push   ebx
c001f3ab:	52                   	push   edx
c001f3ac:	31 c0                	xor    eax,eax
c001f3ae:	48                   	dec    eax
c001f3af:	89 c2                	mov    edx,eax
c001f3b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3b5:	0f ae 23             	xsave  [ebx]
c001f3b8:	5a                   	pop    edx
c001f3b9:	5b                   	pop    ebx
c001f3ba:	c3                   	ret    

c001f3bb <avxLoad>:
c001f3bb:	53                   	push   ebx
c001f3bc:	52                   	push   edx
c001f3bd:	31 c0                	xor    eax,eax
c001f3bf:	48                   	dec    eax
c001f3c0:	89 c2                	mov    edx,eax
c001f3c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3c6:	0f ae 2b             	xrstor [ebx]
c001f3c9:	5a                   	pop    edx
c001f3ca:	5b                   	pop    ebx
c001f3cb:	c3                   	ret    

c001f3cc <avxInit>:
c001f3cc:	e8 47 03 00 00       	call   c001f718 <sseInit>
c001f3d1:	50                   	push   eax
c001f3d2:	51                   	push   ecx
c001f3d3:	0f 20 e0             	mov    eax,cr4
c001f3d6:	0d 00 00 04 00       	or     eax,0x40000
c001f3db:	0f 22 e0             	mov    cr4,eax
c001f3de:	31 c9                	xor    ecx,ecx
c001f3e0:	0f 01 d0             	xgetbv 
c001f3e3:	0d 07 00 00 00       	or     eax,0x7
c001f3e8:	0f 01 d1             	xsetbv 
c001f3eb:	59                   	pop    ecx
c001f3ec:	58                   	pop    eax
c001f3ed:	c3                   	ret    

c001f3ee <avxClose>:
c001f3ee:	c3                   	ret    
c001f3ef:	90                   	nop

c001f3f0 <isr0>:
c001f3f0:	fa                   	cli    
c001f3f1:	68 00 00 00 00       	push   0x0
c001f3f6:	68 00 00 00 00       	push   0x0
c001f3fb:	e9 56 01 00 00       	jmp    c001f556 <int_common_stub>

c001f400 <isr1>:
c001f400:	fa                   	cli    
c001f401:	6a 00                	push   0x0
c001f403:	6a 01                	push   0x1
c001f405:	e9 4c 01 00 00       	jmp    c001f556 <int_common_stub>

c001f40a <isr2>:
c001f40a:	fa                   	cli    
c001f40b:	6a 00                	push   0x0
c001f40d:	6a 02                	push   0x2
c001f40f:	e9 42 01 00 00       	jmp    c001f556 <int_common_stub>

c001f414 <isr3>:
c001f414:	fa                   	cli    
c001f415:	6a 00                	push   0x0
c001f417:	6a 03                	push   0x3
c001f419:	e9 38 01 00 00       	jmp    c001f556 <int_common_stub>

c001f41e <isr4>:
c001f41e:	fa                   	cli    
c001f41f:	6a 00                	push   0x0
c001f421:	6a 04                	push   0x4
c001f423:	e9 2e 01 00 00       	jmp    c001f556 <int_common_stub>

c001f428 <isr5>:
c001f428:	fa                   	cli    
c001f429:	6a 00                	push   0x0
c001f42b:	6a 05                	push   0x5
c001f42d:	e9 24 01 00 00       	jmp    c001f556 <int_common_stub>

c001f432 <isr6>:
c001f432:	fa                   	cli    
c001f433:	6a 00                	push   0x0
c001f435:	6a 06                	push   0x6
c001f437:	e9 1a 01 00 00       	jmp    c001f556 <int_common_stub>

c001f43c <isr7>:
c001f43c:	fa                   	cli    
c001f43d:	6a 00                	push   0x0
c001f43f:	6a 07                	push   0x7
c001f441:	e9 10 01 00 00       	jmp    c001f556 <int_common_stub>

c001f446 <isr8>:
c001f446:	fa                   	cli    
c001f447:	6a 08                	push   0x8
c001f449:	e9 08 01 00 00       	jmp    c001f556 <int_common_stub>

c001f44e <isr9>:
c001f44e:	fa                   	cli    
c001f44f:	6a 00                	push   0x0
c001f451:	6a 09                	push   0x9
c001f453:	e9 fe 00 00 00       	jmp    c001f556 <int_common_stub>

c001f458 <isr10>:
c001f458:	fa                   	cli    
c001f459:	6a 0a                	push   0xa
c001f45b:	e9 f6 00 00 00       	jmp    c001f556 <int_common_stub>

c001f460 <isr11>:
c001f460:	fa                   	cli    
c001f461:	6a 0b                	push   0xb
c001f463:	e9 ee 00 00 00       	jmp    c001f556 <int_common_stub>

c001f468 <isr12>:
c001f468:	fa                   	cli    
c001f469:	6a 0c                	push   0xc
c001f46b:	e9 e6 00 00 00       	jmp    c001f556 <int_common_stub>

c001f470 <isr13>:
c001f470:	fa                   	cli    
c001f471:	6a 0d                	push   0xd
c001f473:	53                   	push   ebx
c001f474:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f478:	81 fb 46 f6 01 c0    	cmp    ebx,0xc001f646
c001f47e:	5b                   	pop    ebx
c001f47f:	0f 84 c3 01 00 00    	je     c001f648 <finishSignal2>
c001f485:	e9 cc 00 00 00       	jmp    c001f556 <int_common_stub>

c001f48a <isr14>:
c001f48a:	fa                   	cli    
c001f48b:	6a 0e                	push   0xe
c001f48d:	e9 c4 00 00 00       	jmp    c001f556 <int_common_stub>

c001f492 <isr15>:
c001f492:	fa                   	cli    
c001f493:	6a 00                	push   0x0
c001f495:	6a 0f                	push   0xf
c001f497:	e9 ba 00 00 00       	jmp    c001f556 <int_common_stub>

c001f49c <isr16>:
c001f49c:	fa                   	cli    
c001f49d:	6a 00                	push   0x0
c001f49f:	6a 10                	push   0x10
c001f4a1:	e9 b0 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4a6 <isr17>:
c001f4a6:	fa                   	cli    
c001f4a7:	6a 00                	push   0x0
c001f4a9:	6a 11                	push   0x11
c001f4ab:	e9 a6 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4b0 <isr18>:
c001f4b0:	fa                   	cli    
c001f4b1:	6a 00                	push   0x0
c001f4b3:	6a 12                	push   0x12
c001f4b5:	e9 9c 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4ba <irq3>:
c001f4ba:	fa                   	cli    
c001f4bb:	6a 00                	push   0x0
c001f4bd:	6a 23                	push   0x23
c001f4bf:	e9 92 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4c4 <irq4>:
c001f4c4:	fa                   	cli    
c001f4c5:	6a 00                	push   0x0
c001f4c7:	6a 24                	push   0x24
c001f4c9:	e9 88 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4ce <irq5>:
c001f4ce:	fa                   	cli    
c001f4cf:	6a 00                	push   0x0
c001f4d1:	6a 25                	push   0x25
c001f4d3:	e9 7e 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4d8 <irq6>:
c001f4d8:	fa                   	cli    
c001f4d9:	6a 00                	push   0x0
c001f4db:	6a 26                	push   0x26
c001f4dd:	e9 74 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4e2 <irq7>:
c001f4e2:	fa                   	cli    
c001f4e3:	6a 00                	push   0x0
c001f4e5:	6a 27                	push   0x27
c001f4e7:	e9 6a 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4ec <irq8>:
c001f4ec:	fa                   	cli    
c001f4ed:	6a 00                	push   0x0
c001f4ef:	6a 28                	push   0x28
c001f4f1:	e9 60 00 00 00       	jmp    c001f556 <int_common_stub>

c001f4f6 <irq9>:
c001f4f6:	fa                   	cli    
c001f4f7:	6a 00                	push   0x0
c001f4f9:	6a 29                	push   0x29
c001f4fb:	e9 56 00 00 00       	jmp    c001f556 <int_common_stub>

c001f500 <irq10>:
c001f500:	fa                   	cli    
c001f501:	6a 00                	push   0x0
c001f503:	6a 2a                	push   0x2a
c001f505:	e9 4c 00 00 00       	jmp    c001f556 <int_common_stub>

c001f50a <irq11>:
c001f50a:	fa                   	cli    
c001f50b:	6a 00                	push   0x0
c001f50d:	6a 2b                	push   0x2b
c001f50f:	e9 42 00 00 00       	jmp    c001f556 <int_common_stub>

c001f514 <irq12>:
c001f514:	fa                   	cli    
c001f515:	6a 00                	push   0x0
c001f517:	6a 2c                	push   0x2c
c001f519:	e9 38 00 00 00       	jmp    c001f556 <int_common_stub>

c001f51e <irq13>:
c001f51e:	fa                   	cli    
c001f51f:	6a 00                	push   0x0
c001f521:	6a 2d                	push   0x2d
c001f523:	e9 2e 00 00 00       	jmp    c001f556 <int_common_stub>

c001f528 <irq14>:
c001f528:	fa                   	cli    
c001f529:	6a 00                	push   0x0
c001f52b:	6a 2e                	push   0x2e
c001f52d:	e9 24 00 00 00       	jmp    c001f556 <int_common_stub>

c001f532 <irq15>:
c001f532:	fa                   	cli    
c001f533:	6a 00                	push   0x0
c001f535:	6a 2f                	push   0x2f
c001f537:	e9 1a 00 00 00       	jmp    c001f556 <int_common_stub>

c001f53c <irq1>:
c001f53c:	fa                   	cli    
c001f53d:	6a 00                	push   0x0
c001f53f:	6a 21                	push   0x21
c001f541:	eb 13                	jmp    c001f556 <int_common_stub>

c001f543 <irq2>:
c001f543:	fa                   	cli    
c001f544:	6a 00                	push   0x0
c001f546:	6a 22                	push   0x22
c001f548:	eb 0c                	jmp    c001f556 <int_common_stub>

c001f54a <isr96>:
c001f54a:	6a 00                	push   0x0
c001f54c:	6a 60                	push   0x60
c001f54e:	fb                   	sti    
c001f54f:	eb 37                	jmp    c001f588 <syscall_common_stub>

c001f551 <irq0>:
c001f551:	fa                   	cli    
c001f552:	6a 00                	push   0x0
c001f554:	6a 20                	push   0x20

c001f556 <int_common_stub>:
c001f556:	60                   	pusha  
c001f557:	1e                   	push   ds
c001f558:	06                   	push   es
c001f559:	0f a0                	push   fs
c001f55b:	0f a8                	push   gs
c001f55d:	66 b8 10 00          	mov    ax,0x10
c001f561:	66 8e d8             	mov    ds,ax
c001f564:	66 8e c0             	mov    es,ax
c001f567:	66 8e e0             	mov    fs,ax
c001f56a:	66 8e e8             	mov    gs,ax
c001f56d:	54                   	push   esp
c001f56e:	fc                   	cld    
c001f56f:	e8 d4 e7 fe ff       	call   c000dd48 <int_handler>
c001f574:	81 c4 04 00 00 00    	add    esp,0x4
c001f57a:	0f a9                	pop    gs
c001f57c:	0f a1                	pop    fs
c001f57e:	07                   	pop    es
c001f57f:	1f                   	pop    ds
c001f580:	61                   	popa   
c001f581:	81 c4 08 00 00 00    	add    esp,0x8
c001f587:	cf                   	iret   

c001f588 <syscall_common_stub>:
c001f588:	60                   	pusha  
c001f589:	1e                   	push   ds
c001f58a:	06                   	push   es
c001f58b:	0f a0                	push   fs
c001f58d:	0f a8                	push   gs
c001f58f:	66 b8 10 00          	mov    ax,0x10
c001f593:	66 8e d8             	mov    ds,ax
c001f596:	66 8e c0             	mov    es,ax
c001f599:	66 8e e0             	mov    fs,ax
c001f59c:	66 8e e8             	mov    gs,ax
c001f59f:	54                   	push   esp
c001f5a0:	fc                   	cld    
c001f5a1:	e8 a2 e7 fe ff       	call   c000dd48 <int_handler>
c001f5a6:	81 c4 04 00 00 00    	add    esp,0x4
c001f5ac:	0f a9                	pop    gs
c001f5ae:	0f a1                	pop    fs
c001f5b0:	07                   	pop    es
c001f5b1:	1f                   	pop    ds
c001f5b2:	e8 f5 08 ff ff       	call   c000feac <KiCheckSignalZ>
c001f5b7:	3d 00 00 00 00       	cmp    eax,0x0
c001f5bc:	0f 84 c0 00 00 00    	je     c001f682 <skipSignals>
c001f5c2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f5c7:	61                   	popa   
c001f5c8:	53                   	push   ebx
c001f5c9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f5cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f5d2:	5b                   	pop    ebx
c001f5d3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f5d8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f5db:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f5de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f5e1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f5e4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f5e7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f5ea:	81 c4 08 00 00 00    	add    esp,0x8
c001f5f0:	5e                   	pop    esi
c001f5f1:	5b                   	pop    ebx
c001f5f2:	59                   	pop    ecx
c001f5f3:	5a                   	pop    edx
c001f5f4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f5f7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f5fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f5fd:	52                   	push   edx
c001f5fe:	51                   	push   ecx
c001f5ff:	53                   	push   ebx
c001f600:	56                   	push   esi
c001f601:	81 ec 08 00 00 00    	sub    esp,0x8
c001f607:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f60a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f60d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f610:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f613:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f616:	60                   	pusha  
c001f617:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f61d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f620:	89 e3                	mov    ebx,esp
c001f622:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f625:	52                   	push   edx
c001f626:	68 46 f6 01 c0       	push   0xc001f646
c001f62b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f62e:	89 dc                	mov    esp,ebx
c001f630:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f633:	68 23 00 00 00       	push   0x23
c001f638:	51                   	push   ecx
c001f639:	68 02 02 00 00       	push   0x202
c001f63e:	68 1b 00 00 00       	push   0x1b
c001f643:	ff 36                	push   DWORD PTR [esi]
c001f645:	cf                   	iret   

c001f646 <finishSignal>:
c001f646:	cd 0f                	int    0xf

c001f648 <finishSignal2>:
c001f648:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f64e:	e8 d6 08 ff ff       	call   c000ff29 <KiFinishSignalZ>
c001f653:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f659:	68 23 00 00 00       	push   0x23
c001f65e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f661:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f664:	68 1b 00 00 00       	push   0x1b
c001f669:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f66c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f66f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f672:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f675:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f678:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f67b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f67e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f681:	cf                   	iret   

c001f682 <skipSignals>:
c001f682:	61                   	popa   
c001f683:	81 c4 08 00 00 00    	add    esp,0x8
c001f689:	cf                   	iret   
c001f68a:	90                   	nop
c001f68b:	90                   	nop

c001f68c <irq16>:
c001f68c:	fa                   	cli    
c001f68d:	6a 00                	push   0x0
c001f68f:	6a 30                	push   0x30
c001f691:	e9 c0 fe ff ff       	jmp    c001f556 <int_common_stub>

c001f696 <irq17>:
c001f696:	fa                   	cli    
c001f697:	6a 00                	push   0x0
c001f699:	6a 31                	push   0x31
c001f69b:	e9 b6 fe ff ff       	jmp    c001f556 <int_common_stub>

c001f6a0 <irq18>:
c001f6a0:	fa                   	cli    
c001f6a1:	6a 00                	push   0x0
c001f6a3:	6a 32                	push   0x32
c001f6a5:	e9 ac fe ff ff       	jmp    c001f556 <int_common_stub>

c001f6aa <irq19>:
c001f6aa:	fa                   	cli    
c001f6ab:	6a 00                	push   0x0
c001f6ad:	6a 33                	push   0x33
c001f6af:	e9 a2 fe ff ff       	jmp    c001f556 <int_common_stub>

c001f6b4 <irq20>:
c001f6b4:	fa                   	cli    
c001f6b5:	6a 00                	push   0x0
c001f6b7:	6a 34                	push   0x34
c001f6b9:	e9 98 fe ff ff       	jmp    c001f556 <int_common_stub>

c001f6be <irq21>:
c001f6be:	fa                   	cli    
c001f6bf:	6a 00                	push   0x0
c001f6c1:	6a 35                	push   0x35
c001f6c3:	e9 8e fe ff ff       	jmp    c001f556 <int_common_stub>

c001f6c8 <irq22>:
c001f6c8:	fa                   	cli    
c001f6c9:	6a 00                	push   0x0
c001f6cb:	6a 36                	push   0x36
c001f6cd:	e9 84 fe ff ff       	jmp    c001f556 <int_common_stub>

c001f6d2 <irq23>:
c001f6d2:	fa                   	cli    
c001f6d3:	6a 00                	push   0x0
c001f6d5:	6a 37                	push   0x37
c001f6d7:	e9 7a fe ff ff       	jmp    c001f556 <int_common_stub>
c001f6dc:	66 90                	xchg   ax,ax
c001f6de:	66 90                	xchg   ax,ax

c001f6e0 <i386GetRDRAND>:
c001f6e0:	b9 64 00 00 00       	mov    ecx,0x64

c001f6e5 <retry>:
c001f6e5:	0f c7 f0             	rdrand eax
c001f6e8:	72 05                	jb     c001f6ef <retry.done>
c001f6ea:	e2 f9                	loop   c001f6e5 <retry>

c001f6ec <retry.fail>:
c001f6ec:	31 c0                	xor    eax,eax
c001f6ee:	c3                   	ret    

c001f6ef <retry.done>:
c001f6ef:	c3                   	ret    

c001f6f0 <sseDetect>:
c001f6f0:	b8 01 00 00 00       	mov    eax,0x1
c001f6f5:	0f a2                	cpuid  
c001f6f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f6fd:	74 06                	je     c001f705 <sseDetect.noSSE>
c001f6ff:	b8 01 00 00 00       	mov    eax,0x1
c001f704:	c3                   	ret    

c001f705 <sseDetect.noSSE>:
c001f705:	31 c0                	xor    eax,eax
c001f707:	c3                   	ret    

c001f708 <sseSave>:
c001f708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70c:	0f ae 00             	fxsave [eax]
c001f70f:	c3                   	ret    

c001f710 <sseLoad>:
c001f710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f714:	0f ae 08             	fxrstor [eax]
c001f717:	c3                   	ret    

c001f718 <sseInit>:
c001f718:	e8 48 00 00 00       	call   c001f765 <x87Init>
c001f71d:	0f 20 e0             	mov    eax,cr4
c001f720:	66 0d 00 06          	or     ax,0x600
c001f724:	0f 22 e0             	mov    cr4,eax
c001f727:	c3                   	ret    

c001f728 <sseClose>:
c001f728:	c3                   	ret    
c001f729:	66 90                	xchg   ax,ax
c001f72b:	66 90                	xchg   ax,ax
c001f72d:	66 90                	xchg   ax,ax
c001f72f:	90                   	nop

c001f730 <value_37F>:
c001f730:	7f 03                	jg     c001f735 <value_37A+0x1>

c001f732 <value_37E>:
c001f732:	7e 03                	jle    c001f737 <x87Detect+0x1>

c001f734 <value_37A>:
c001f734:	7a 03                	jp     c001f739 <x87Detect+0x3>

c001f736 <x87Detect>:
c001f736:	53                   	push   ebx
c001f737:	51                   	push   ecx
c001f738:	52                   	push   edx
c001f739:	b8 01 00 00 00       	mov    eax,0x1
c001f73e:	0f a2                	cpuid  
c001f740:	f7 c2 01 00 00 00    	test   edx,0x1
c001f746:	74 06                	je     c001f74e <x87Detect.nox87>
c001f748:	b8 01 00 00 00       	mov    eax,0x1
c001f74d:	c3                   	ret    

c001f74e <x87Detect.nox87>:
c001f74e:	b8 00 00 00 00       	mov    eax,0x0
c001f753:	5a                   	pop    edx
c001f754:	59                   	pop    ecx
c001f755:	5b                   	pop    ebx
c001f756:	c3                   	ret    

c001f757 <x87Save>:
c001f757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f75b:	dd 30                	fnsave [eax]
c001f75d:	c3                   	ret    

c001f75e <x87Load>:
c001f75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f762:	dd 20                	frstor [eax]
c001f764:	c3                   	ret    

c001f765 <x87Init>:
c001f765:	0f 20 c0             	mov    eax,cr0
c001f768:	66 25 fb ff          	and    ax,0xfffb
c001f76c:	66 0d 22 00          	or     ax,0x22
c001f770:	0f 22 c0             	mov    cr0,eax
c001f773:	db e3                	fninit 
c001f775:	0f 06                	clts   
c001f777:	d9 2d 34 f7 01 c0    	fldcw  WORD PTR ds:0xc001f734
c001f77d:	c3                   	ret    

c001f77e <x87Close>:
c001f77e:	c3                   	ret    
c001f77f:	90                   	nop

c001f780 <__do_global_ctors_aux>:
c001f780:	a1 34 07 02 c0       	mov    eax,ds:0xc0020734
c001f785:	83 f8 ff             	cmp    eax,0xffffffff
c001f788:	74 1a                	je     c001f7a4 <__do_global_ctors_aux+0x24>
c001f78a:	55                   	push   ebp
c001f78b:	89 e5                	mov    ebp,esp
c001f78d:	53                   	push   ebx
c001f78e:	52                   	push   edx
c001f78f:	bb 34 07 02 c0       	mov    ebx,0xc0020734
c001f794:	ff d0                	call   eax
c001f796:	83 eb 04             	sub    ebx,0x4
c001f799:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f79b:	83 f8 ff             	cmp    eax,0xffffffff
c001f79e:	75 f4                	jne    c001f794 <__do_global_ctors_aux+0x14>
c001f7a0:	58                   	pop    eax
c001f7a1:	5b                   	pop    ebx
c001f7a2:	5d                   	pop    ebp
c001f7a3:	c3                   	ret    
c001f7a4:	c3                   	ret    
c001f7a5:	66 90                	xchg   ax,ax
c001f7a7:	90                   	nop

c001f7a8 <__divdi3>:
c001f7a8:	55                   	push   ebp
c001f7a9:	57                   	push   edi
c001f7aa:	56                   	push   esi
c001f7ab:	53                   	push   ebx
c001f7ac:	83 ec 1c             	sub    esp,0x1c
c001f7af:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f7b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f7ba:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f7be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7c2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7c6:	85 db                	test   ebx,ebx
c001f7c8:	0f 88 8e 00 00 00    	js     c001f85c <__divdi3+0xb4>
c001f7ce:	89 dd                	mov    ebp,ebx
c001f7d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f7d8:	89 d3                	mov    ebx,edx
c001f7da:	85 d2                	test   edx,edx
c001f7dc:	79 0d                	jns    c001f7eb <__divdi3+0x43>
c001f7de:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f7e2:	f7 d8                	neg    eax
c001f7e4:	83 d2 00             	adc    edx,0x0
c001f7e7:	f7 da                	neg    edx
c001f7e9:	89 d3                	mov    ebx,edx
c001f7eb:	89 c7                	mov    edi,eax
c001f7ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f7f0:	85 db                	test   ebx,ebx
c001f7f2:	75 48                	jne    c001f83c <__divdi3+0x94>
c001f7f4:	39 ef                	cmp    edi,ebp
c001f7f6:	76 24                	jbe    c001f81c <__divdi3+0x74>
c001f7f8:	89 ea                	mov    edx,ebp
c001f7fa:	f7 f7                	div    edi
c001f7fc:	89 c1                	mov    ecx,eax
c001f7fe:	31 f6                	xor    esi,esi
c001f800:	89 c8                	mov    eax,ecx
c001f802:	89 f2                	mov    edx,esi
c001f804:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f808:	85 c9                	test   ecx,ecx
c001f80a:	74 07                	je     c001f813 <__divdi3+0x6b>
c001f80c:	f7 d8                	neg    eax
c001f80e:	83 d2 00             	adc    edx,0x0
c001f811:	f7 da                	neg    edx
c001f813:	83 c4 1c             	add    esp,0x1c
c001f816:	5b                   	pop    ebx
c001f817:	5e                   	pop    esi
c001f818:	5f                   	pop    edi
c001f819:	5d                   	pop    ebp
c001f81a:	c3                   	ret    
c001f81b:	90                   	nop
c001f81c:	85 ff                	test   edi,edi
c001f81e:	75 0b                	jne    c001f82b <__divdi3+0x83>
c001f820:	b8 01 00 00 00       	mov    eax,0x1
c001f825:	31 d2                	xor    edx,edx
c001f827:	f7 f3                	div    ebx
c001f829:	89 c7                	mov    edi,eax
c001f82b:	31 d2                	xor    edx,edx
c001f82d:	89 e8                	mov    eax,ebp
c001f82f:	f7 f7                	div    edi
c001f831:	89 c6                	mov    esi,eax
c001f833:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f836:	f7 f7                	div    edi
c001f838:	89 c1                	mov    ecx,eax
c001f83a:	eb c4                	jmp    c001f800 <__divdi3+0x58>
c001f83c:	39 eb                	cmp    ebx,ebp
c001f83e:	77 3c                	ja     c001f87c <__divdi3+0xd4>
c001f840:	0f bd f3             	bsr    esi,ebx
c001f843:	83 f6 1f             	xor    esi,0x1f
c001f846:	75 40                	jne    c001f888 <__divdi3+0xe0>
c001f848:	39 eb                	cmp    ebx,ebp
c001f84a:	72 09                	jb     c001f855 <__divdi3+0xad>
c001f84c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f84f:	0f 87 97 00 00 00    	ja     c001f8ec <__divdi3+0x144>
c001f855:	b9 01 00 00 00       	mov    ecx,0x1
c001f85a:	eb a4                	jmp    c001f800 <__divdi3+0x58>
c001f85c:	f7 d9                	neg    ecx
c001f85e:	83 d3 00             	adc    ebx,0x0
c001f861:	f7 db                	neg    ebx
c001f863:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f866:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f86a:	89 dd                	mov    ebp,ebx
c001f86c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f874:	e9 5f ff ff ff       	jmp    c001f7d8 <__divdi3+0x30>
c001f879:	8d 76 00             	lea    esi,[esi+0x0]
c001f87c:	31 f6                	xor    esi,esi
c001f87e:	31 c9                	xor    ecx,ecx
c001f880:	e9 7b ff ff ff       	jmp    c001f800 <__divdi3+0x58>
c001f885:	8d 76 00             	lea    esi,[esi+0x0]
c001f888:	b8 20 00 00 00       	mov    eax,0x20
c001f88d:	29 f0                	sub    eax,esi
c001f88f:	89 f1                	mov    ecx,esi
c001f891:	d3 e3                	shl    ebx,cl
c001f893:	89 fa                	mov    edx,edi
c001f895:	88 c1                	mov    cl,al
c001f897:	d3 ea                	shr    edx,cl
c001f899:	09 da                	or     edx,ebx
c001f89b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f89f:	89 f1                	mov    ecx,esi
c001f8a1:	d3 e7                	shl    edi,cl
c001f8a3:	89 eb                	mov    ebx,ebp
c001f8a5:	88 c1                	mov    cl,al
c001f8a7:	d3 eb                	shr    ebx,cl
c001f8a9:	89 f1                	mov    ecx,esi
c001f8ab:	d3 e5                	shl    ebp,cl
c001f8ad:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f8b0:	88 c1                	mov    cl,al
c001f8b2:	d3 ea                	shr    edx,cl
c001f8b4:	09 d5                	or     ebp,edx
c001f8b6:	89 e8                	mov    eax,ebp
c001f8b8:	89 da                	mov    edx,ebx
c001f8ba:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f8be:	89 d3                	mov    ebx,edx
c001f8c0:	89 c5                	mov    ebp,eax
c001f8c2:	f7 e7                	mul    edi
c001f8c4:	39 d3                	cmp    ebx,edx
c001f8c6:	72 18                	jb     c001f8e0 <__divdi3+0x138>
c001f8c8:	74 0a                	je     c001f8d4 <__divdi3+0x12c>
c001f8ca:	89 e9                	mov    ecx,ebp
c001f8cc:	31 f6                	xor    esi,esi
c001f8ce:	e9 2d ff ff ff       	jmp    c001f800 <__divdi3+0x58>
c001f8d3:	90                   	nop
c001f8d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f8d7:	89 f1                	mov    ecx,esi
c001f8d9:	d3 e7                	shl    edi,cl
c001f8db:	39 c7                	cmp    edi,eax
c001f8dd:	73 eb                	jae    c001f8ca <__divdi3+0x122>
c001f8df:	90                   	nop
c001f8e0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f8e3:	31 f6                	xor    esi,esi
c001f8e5:	e9 16 ff ff ff       	jmp    c001f800 <__divdi3+0x58>
c001f8ea:	66 90                	xchg   ax,ax
c001f8ec:	31 c9                	xor    ecx,ecx
c001f8ee:	e9 0d ff ff ff       	jmp    c001f800 <__divdi3+0x58>
c001f8f3:	90                   	nop

c001f8f4 <__moddi3>:
c001f8f4:	55                   	push   ebp
c001f8f5:	57                   	push   edi
c001f8f6:	56                   	push   esi
c001f8f7:	53                   	push   ebx
c001f8f8:	83 ec 2c             	sub    esp,0x2c
c001f8fb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f8ff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f903:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f907:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f90b:	85 db                	test   ebx,ebx
c001f90d:	0f 88 85 00 00 00    	js     c001f998 <__moddi3+0xa4>
c001f913:	89 de                	mov    esi,ebx
c001f915:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f91d:	89 d7                	mov    edi,edx
c001f91f:	85 d2                	test   edx,edx
c001f921:	79 09                	jns    c001f92c <__moddi3+0x38>
c001f923:	f7 d8                	neg    eax
c001f925:	83 d2 00             	adc    edx,0x0
c001f928:	f7 da                	neg    edx
c001f92a:	89 d7                	mov    edi,edx
c001f92c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f930:	89 cd                	mov    ebp,ecx
c001f932:	85 ff                	test   edi,edi
c001f934:	75 52                	jne    c001f988 <__moddi3+0x94>
c001f936:	89 c3                	mov    ebx,eax
c001f938:	39 f0                	cmp    eax,esi
c001f93a:	76 24                	jbe    c001f960 <__moddi3+0x6c>
c001f93c:	89 c8                	mov    eax,ecx
c001f93e:	89 f2                	mov    edx,esi
c001f940:	f7 f3                	div    ebx
c001f942:	89 d6                	mov    esi,edx
c001f944:	89 f0                	mov    eax,esi
c001f946:	31 d2                	xor    edx,edx
c001f948:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f94c:	85 c9                	test   ecx,ecx
c001f94e:	74 07                	je     c001f957 <__moddi3+0x63>
c001f950:	f7 d8                	neg    eax
c001f952:	83 d2 00             	adc    edx,0x0
c001f955:	f7 da                	neg    edx
c001f957:	83 c4 2c             	add    esp,0x2c
c001f95a:	5b                   	pop    ebx
c001f95b:	5e                   	pop    esi
c001f95c:	5f                   	pop    edi
c001f95d:	5d                   	pop    ebp
c001f95e:	c3                   	ret    
c001f95f:	90                   	nop
c001f960:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f964:	85 db                	test   ebx,ebx
c001f966:	75 0d                	jne    c001f975 <__moddi3+0x81>
c001f968:	b8 01 00 00 00       	mov    eax,0x1
c001f96d:	31 d2                	xor    edx,edx
c001f96f:	f7 f7                	div    edi
c001f971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f975:	89 f0                	mov    eax,esi
c001f977:	31 d2                	xor    edx,edx
c001f979:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f97d:	f7 f7                	div    edi
c001f97f:	89 e8                	mov    eax,ebp
c001f981:	f7 f7                	div    edi
c001f983:	89 d6                	mov    esi,edx
c001f985:	eb bd                	jmp    c001f944 <__moddi3+0x50>
c001f987:	90                   	nop
c001f988:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f98c:	39 f7                	cmp    edi,esi
c001f98e:	76 20                	jbe    c001f9b0 <__moddi3+0xbc>
c001f990:	89 c8                	mov    eax,ecx
c001f992:	89 f2                	mov    edx,esi
c001f994:	eb b2                	jmp    c001f948 <__moddi3+0x54>
c001f996:	66 90                	xchg   ax,ax
c001f998:	f7 d9                	neg    ecx
c001f99a:	83 d3 00             	adc    ebx,0x0
c001f99d:	f7 db                	neg    ebx
c001f99f:	89 de                	mov    esi,ebx
c001f9a1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f9a9:	e9 6f ff ff ff       	jmp    c001f91d <__moddi3+0x29>
c001f9ae:	66 90                	xchg   ax,ax
c001f9b0:	0f bd c7             	bsr    eax,edi
c001f9b3:	83 f0 1f             	xor    eax,0x1f
c001f9b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f9ba:	75 24                	jne    c001f9e0 <__moddi3+0xec>
c001f9bc:	39 f7                	cmp    edi,esi
c001f9be:	72 06                	jb     c001f9c6 <__moddi3+0xd2>
c001f9c0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f9c4:	77 0c                	ja     c001f9d2 <__moddi3+0xde>
c001f9c6:	89 e9                	mov    ecx,ebp
c001f9c8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f9cc:	19 fe                	sbb    esi,edi
c001f9ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f9d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f9d6:	89 f2                	mov    edx,esi
c001f9d8:	e9 6b ff ff ff       	jmp    c001f948 <__moddi3+0x54>
c001f9dd:	8d 76 00             	lea    esi,[esi+0x0]
c001f9e0:	b8 20 00 00 00       	mov    eax,0x20
c001f9e5:	89 c2                	mov    edx,eax
c001f9e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f9eb:	29 da                	sub    edx,ebx
c001f9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f9f1:	88 d9                	mov    cl,bl
c001f9f3:	d3 e7                	shl    edi,cl
c001f9f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9f9:	88 d1                	mov    cl,dl
c001f9fb:	d3 e8                	shr    eax,cl
c001f9fd:	09 c7                	or     edi,eax
c001f9ff:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fa03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa07:	89 d8                	mov    eax,ebx
c001fa09:	88 d9                	mov    cl,bl
c001fa0b:	d3 e7                	shl    edi,cl
c001fa0d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fa11:	89 f3                	mov    ebx,esi
c001fa13:	88 d1                	mov    cl,dl
c001fa15:	d3 eb                	shr    ebx,cl
c001fa17:	89 c7                	mov    edi,eax
c001fa19:	88 c1                	mov    cl,al
c001fa1b:	d3 e6                	shl    esi,cl
c001fa1d:	89 e8                	mov    eax,ebp
c001fa1f:	88 d1                	mov    cl,dl
c001fa21:	d3 e8                	shr    eax,cl
c001fa23:	09 f0                	or     eax,esi
c001fa25:	89 f9                	mov    ecx,edi
c001fa27:	d3 e5                	shl    ebp,cl
c001fa29:	89 da                	mov    edx,ebx
c001fa2b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001fa2f:	89 d3                	mov    ebx,edx
c001fa31:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa35:	89 c6                	mov    esi,eax
c001fa37:	89 d1                	mov    ecx,edx
c001fa39:	39 d3                	cmp    ebx,edx
c001fa3b:	72 27                	jb     c001fa64 <__moddi3+0x170>
c001fa3d:	74 21                	je     c001fa60 <__moddi3+0x16c>
c001fa3f:	29 f5                	sub    ebp,esi
c001fa41:	19 cb                	sbb    ebx,ecx
c001fa43:	89 de                	mov    esi,ebx
c001fa45:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fa49:	d3 e6                	shl    esi,cl
c001fa4b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa4f:	89 f9                	mov    ecx,edi
c001fa51:	d3 ed                	shr    ebp,cl
c001fa53:	09 ee                	or     esi,ebp
c001fa55:	89 f0                	mov    eax,esi
c001fa57:	d3 eb                	shr    ebx,cl
c001fa59:	89 da                	mov    edx,ebx
c001fa5b:	e9 e8 fe ff ff       	jmp    c001f948 <__moddi3+0x54>
c001fa60:	39 c5                	cmp    ebp,eax
c001fa62:	73 db                	jae    c001fa3f <__moddi3+0x14b>
c001fa64:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa68:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fa6c:	89 d1                	mov    ecx,edx
c001fa6e:	89 c6                	mov    esi,eax
c001fa70:	eb cd                	jmp    c001fa3f <__moddi3+0x14b>
c001fa72:	66 90                	xchg   ax,ax

c001fa74 <__udivdi3>:
c001fa74:	55                   	push   ebp
c001fa75:	57                   	push   edi
c001fa76:	56                   	push   esi
c001fa77:	53                   	push   ebx
c001fa78:	83 ec 1c             	sub    esp,0x1c
c001fa7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fa7f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fa83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fa87:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001fa8b:	85 d2                	test   edx,edx
c001fa8d:	75 41                	jne    c001fad0 <__udivdi3+0x5c>
c001fa8f:	39 f7                	cmp    edi,esi
c001fa91:	76 15                	jbe    c001faa8 <__udivdi3+0x34>
c001fa93:	89 e8                	mov    eax,ebp
c001fa95:	89 f2                	mov    edx,esi
c001fa97:	f7 f7                	div    edi
c001fa99:	31 db                	xor    ebx,ebx
c001fa9b:	89 da                	mov    edx,ebx
c001fa9d:	83 c4 1c             	add    esp,0x1c
c001faa0:	5b                   	pop    ebx
c001faa1:	5e                   	pop    esi
c001faa2:	5f                   	pop    edi
c001faa3:	5d                   	pop    ebp
c001faa4:	c3                   	ret    
c001faa5:	8d 76 00             	lea    esi,[esi+0x0]
c001faa8:	89 f9                	mov    ecx,edi
c001faaa:	85 ff                	test   edi,edi
c001faac:	75 0b                	jne    c001fab9 <__udivdi3+0x45>
c001faae:	b8 01 00 00 00       	mov    eax,0x1
c001fab3:	31 d2                	xor    edx,edx
c001fab5:	f7 f7                	div    edi
c001fab7:	89 c1                	mov    ecx,eax
c001fab9:	31 d2                	xor    edx,edx
c001fabb:	89 f0                	mov    eax,esi
c001fabd:	f7 f1                	div    ecx
c001fabf:	89 c3                	mov    ebx,eax
c001fac1:	89 e8                	mov    eax,ebp
c001fac3:	f7 f1                	div    ecx
c001fac5:	89 da                	mov    edx,ebx
c001fac7:	83 c4 1c             	add    esp,0x1c
c001faca:	5b                   	pop    ebx
c001facb:	5e                   	pop    esi
c001facc:	5f                   	pop    edi
c001facd:	5d                   	pop    ebp
c001face:	c3                   	ret    
c001facf:	90                   	nop
c001fad0:	39 f2                	cmp    edx,esi
c001fad2:	77 1c                	ja     c001faf0 <__udivdi3+0x7c>
c001fad4:	0f bd da             	bsr    ebx,edx
c001fad7:	83 f3 1f             	xor    ebx,0x1f
c001fada:	75 24                	jne    c001fb00 <__udivdi3+0x8c>
c001fadc:	39 f2                	cmp    edx,esi
c001fade:	72 08                	jb     c001fae8 <__udivdi3+0x74>
c001fae0:	39 ef                	cmp    edi,ebp
c001fae2:	0f 87 84 00 00 00    	ja     c001fb6c <__udivdi3+0xf8>
c001fae8:	b8 01 00 00 00       	mov    eax,0x1
c001faed:	eb ac                	jmp    c001fa9b <__udivdi3+0x27>
c001faef:	90                   	nop
c001faf0:	31 db                	xor    ebx,ebx
c001faf2:	31 c0                	xor    eax,eax
c001faf4:	89 da                	mov    edx,ebx
c001faf6:	83 c4 1c             	add    esp,0x1c
c001faf9:	5b                   	pop    ebx
c001fafa:	5e                   	pop    esi
c001fafb:	5f                   	pop    edi
c001fafc:	5d                   	pop    ebp
c001fafd:	c3                   	ret    
c001fafe:	66 90                	xchg   ax,ax
c001fb00:	b8 20 00 00 00       	mov    eax,0x20
c001fb05:	29 d8                	sub    eax,ebx
c001fb07:	88 d9                	mov    cl,bl
c001fb09:	d3 e2                	shl    edx,cl
c001fb0b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb0f:	89 fa                	mov    edx,edi
c001fb11:	88 c1                	mov    cl,al
c001fb13:	d3 ea                	shr    edx,cl
c001fb15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb19:	09 d1                	or     ecx,edx
c001fb1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fb1f:	88 d9                	mov    cl,bl
c001fb21:	d3 e7                	shl    edi,cl
c001fb23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fb27:	89 f7                	mov    edi,esi
c001fb29:	88 c1                	mov    cl,al
c001fb2b:	d3 ef                	shr    edi,cl
c001fb2d:	88 d9                	mov    cl,bl
c001fb2f:	d3 e6                	shl    esi,cl
c001fb31:	89 ea                	mov    edx,ebp
c001fb33:	88 c1                	mov    cl,al
c001fb35:	d3 ea                	shr    edx,cl
c001fb37:	09 d6                	or     esi,edx
c001fb39:	89 f0                	mov    eax,esi
c001fb3b:	89 fa                	mov    edx,edi
c001fb3d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fb41:	89 d7                	mov    edi,edx
c001fb43:	89 c6                	mov    esi,eax
c001fb45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fb49:	39 d7                	cmp    edi,edx
c001fb4b:	72 13                	jb     c001fb60 <__udivdi3+0xec>
c001fb4d:	74 09                	je     c001fb58 <__udivdi3+0xe4>
c001fb4f:	89 f0                	mov    eax,esi
c001fb51:	31 db                	xor    ebx,ebx
c001fb53:	e9 43 ff ff ff       	jmp    c001fa9b <__udivdi3+0x27>
c001fb58:	88 d9                	mov    cl,bl
c001fb5a:	d3 e5                	shl    ebp,cl
c001fb5c:	39 c5                	cmp    ebp,eax
c001fb5e:	73 ef                	jae    c001fb4f <__udivdi3+0xdb>
c001fb60:	8d 46 ff             	lea    eax,[esi-0x1]
c001fb63:	31 db                	xor    ebx,ebx
c001fb65:	e9 31 ff ff ff       	jmp    c001fa9b <__udivdi3+0x27>
c001fb6a:	66 90                	xchg   ax,ax
c001fb6c:	31 c0                	xor    eax,eax
c001fb6e:	e9 28 ff ff ff       	jmp    c001fa9b <__udivdi3+0x27>
c001fb73:	90                   	nop

c001fb74 <__umoddi3>:
c001fb74:	55                   	push   ebp
c001fb75:	57                   	push   edi
c001fb76:	56                   	push   esi
c001fb77:	53                   	push   ebx
c001fb78:	83 ec 1c             	sub    esp,0x1c
c001fb7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fb7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fb83:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fb87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fb8b:	89 da                	mov    edx,ebx
c001fb8d:	85 c0                	test   eax,eax
c001fb8f:	75 37                	jne    c001fbc8 <__umoddi3+0x54>
c001fb91:	39 df                	cmp    edi,ebx
c001fb93:	76 13                	jbe    c001fba8 <__umoddi3+0x34>
c001fb95:	89 f0                	mov    eax,esi
c001fb97:	f7 f7                	div    edi
c001fb99:	89 d0                	mov    eax,edx
c001fb9b:	31 d2                	xor    edx,edx
c001fb9d:	83 c4 1c             	add    esp,0x1c
c001fba0:	5b                   	pop    ebx
c001fba1:	5e                   	pop    esi
c001fba2:	5f                   	pop    edi
c001fba3:	5d                   	pop    ebp
c001fba4:	c3                   	ret    
c001fba5:	8d 76 00             	lea    esi,[esi+0x0]
c001fba8:	89 fd                	mov    ebp,edi
c001fbaa:	85 ff                	test   edi,edi
c001fbac:	75 0b                	jne    c001fbb9 <__umoddi3+0x45>
c001fbae:	b8 01 00 00 00       	mov    eax,0x1
c001fbb3:	31 d2                	xor    edx,edx
c001fbb5:	f7 f7                	div    edi
c001fbb7:	89 c5                	mov    ebp,eax
c001fbb9:	89 d8                	mov    eax,ebx
c001fbbb:	31 d2                	xor    edx,edx
c001fbbd:	f7 f5                	div    ebp
c001fbbf:	89 f0                	mov    eax,esi
c001fbc1:	f7 f5                	div    ebp
c001fbc3:	89 d0                	mov    eax,edx
c001fbc5:	eb d4                	jmp    c001fb9b <__umoddi3+0x27>
c001fbc7:	90                   	nop
c001fbc8:	89 f1                	mov    ecx,esi
c001fbca:	39 d8                	cmp    eax,ebx
c001fbcc:	76 0a                	jbe    c001fbd8 <__umoddi3+0x64>
c001fbce:	89 f0                	mov    eax,esi
c001fbd0:	83 c4 1c             	add    esp,0x1c
c001fbd3:	5b                   	pop    ebx
c001fbd4:	5e                   	pop    esi
c001fbd5:	5f                   	pop    edi
c001fbd6:	5d                   	pop    ebp
c001fbd7:	c3                   	ret    
c001fbd8:	0f bd e8             	bsr    ebp,eax
c001fbdb:	83 f5 1f             	xor    ebp,0x1f
c001fbde:	75 1c                	jne    c001fbfc <__umoddi3+0x88>
c001fbe0:	39 d8                	cmp    eax,ebx
c001fbe2:	72 04                	jb     c001fbe8 <__umoddi3+0x74>
c001fbe4:	39 f7                	cmp    edi,esi
c001fbe6:	77 08                	ja     c001fbf0 <__umoddi3+0x7c>
c001fbe8:	89 da                	mov    edx,ebx
c001fbea:	29 fe                	sub    esi,edi
c001fbec:	19 c2                	sbb    edx,eax
c001fbee:	89 f1                	mov    ecx,esi
c001fbf0:	89 c8                	mov    eax,ecx
c001fbf2:	83 c4 1c             	add    esp,0x1c
c001fbf5:	5b                   	pop    ebx
c001fbf6:	5e                   	pop    esi
c001fbf7:	5f                   	pop    edi
c001fbf8:	5d                   	pop    ebp
c001fbf9:	c3                   	ret    
c001fbfa:	66 90                	xchg   ax,ax
c001fbfc:	ba 20 00 00 00       	mov    edx,0x20
c001fc01:	29 ea                	sub    edx,ebp
c001fc03:	89 e9                	mov    ecx,ebp
c001fc05:	d3 e0                	shl    eax,cl
c001fc07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc0b:	89 f8                	mov    eax,edi
c001fc0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fc11:	88 d1                	mov    cl,dl
c001fc13:	d3 e8                	shr    eax,cl
c001fc15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc19:	09 c1                	or     ecx,eax
c001fc1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fc1f:	89 e9                	mov    ecx,ebp
c001fc21:	d3 e7                	shl    edi,cl
c001fc23:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fc27:	89 d8                	mov    eax,ebx
c001fc29:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc2d:	88 d1                	mov    cl,dl
c001fc2f:	d3 e8                	shr    eax,cl
c001fc31:	89 c7                	mov    edi,eax
c001fc33:	89 e9                	mov    ecx,ebp
c001fc35:	d3 e3                	shl    ebx,cl
c001fc37:	89 f0                	mov    eax,esi
c001fc39:	88 d1                	mov    cl,dl
c001fc3b:	d3 e8                	shr    eax,cl
c001fc3d:	09 d8                	or     eax,ebx
c001fc3f:	89 e9                	mov    ecx,ebp
c001fc41:	d3 e6                	shl    esi,cl
c001fc43:	89 f3                	mov    ebx,esi
c001fc45:	89 fa                	mov    edx,edi
c001fc47:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fc4b:	89 d1                	mov    ecx,edx
c001fc4d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fc51:	89 c6                	mov    esi,eax
c001fc53:	89 d7                	mov    edi,edx
c001fc55:	39 d1                	cmp    ecx,edx
c001fc57:	72 27                	jb     c001fc80 <__umoddi3+0x10c>
c001fc59:	74 21                	je     c001fc7c <__umoddi3+0x108>
c001fc5b:	89 ca                	mov    edx,ecx
c001fc5d:	29 f3                	sub    ebx,esi
c001fc5f:	19 fa                	sbb    edx,edi
c001fc61:	89 d0                	mov    eax,edx
c001fc63:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fc67:	d3 e0                	shl    eax,cl
c001fc69:	89 e9                	mov    ecx,ebp
c001fc6b:	d3 eb                	shr    ebx,cl
c001fc6d:	09 d8                	or     eax,ebx
c001fc6f:	d3 ea                	shr    edx,cl
c001fc71:	83 c4 1c             	add    esp,0x1c
c001fc74:	5b                   	pop    ebx
c001fc75:	5e                   	pop    esi
c001fc76:	5f                   	pop    edi
c001fc77:	5d                   	pop    ebp
c001fc78:	c3                   	ret    
c001fc79:	8d 76 00             	lea    esi,[esi+0x0]
c001fc7c:	39 c3                	cmp    ebx,eax
c001fc7e:	73 db                	jae    c001fc5b <__umoddi3+0xe7>
c001fc80:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fc84:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fc88:	89 d7                	mov    edi,edx
c001fc8a:	89 c6                	mov    esi,eax
c001fc8c:	eb cd                	jmp    c001fc5b <__umoddi3+0xe7>

Disassembly of section .init:

c001fc8e <_init>:
c001fc8e:	55                   	push   ebp
c001fc8f:	89 e5                	mov    ebp,esp
c001fc91:	e8 5e 04 fe ff       	call   c00000f4 <frame_dummy>
c001fc96:	e8 e5 fa ff ff       	call   c001f780 <__do_global_ctors_aux>
c001fc9b:	5d                   	pop    ebp
c001fc9c:	c3                   	ret    

Disassembly of section .fini:

c001fc9d <_fini>:
c001fc9d:	55                   	push   ebp
c001fc9e:	89 e5                	mov    ebp,esp
c001fca0:	e8 df 03 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fca5:	5d                   	pop    ebp
c001fca6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fca8 <DriverlessDevice::~DriverlessDevice()>:
c001fca8:	ba 40 16 02 c0       	mov    edx,0xc0021640
c001fcad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb1:	89 10                	mov    DWORD PTR [eax],edx
c001fcb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb7:	50                   	push   eax
c001fcb8:	e8 8b 92 fe ff       	call   c0008f48 <Device::~Device()>
c001fcbd:	83 c4 04             	add    esp,0x4
c001fcc0:	90                   	nop
c001fcc1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fcc2 <DriverlessDevice::~DriverlessDevice()>:
c001fcc2:	83 ec 0c             	sub    esp,0xc
c001fcc5:	83 ec 0c             	sub    esp,0xc
c001fcc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fccc:	e8 d7 ff ff ff       	call   c001fca8 <DriverlessDevice::~DriverlessDevice()>
c001fcd1:	83 c4 10             	add    esp,0x10
c001fcd4:	83 ec 08             	sub    esp,0x8
c001fcd7:	68 58 01 00 00       	push   0x158
c001fcdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce0:	e8 76 c9 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c001fce5:	83 c4 10             	add    esp,0x10
c001fce8:	83 c4 0c             	add    esp,0xc
c001fceb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fcec <LinkedList<Device>::addElement(Device*)>:
c001fcec:	83 ec 0c             	sub    esp,0xc
c001fcef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcf4:	75 10                	jne    c001fd06 <LinkedList<Device>::addElement(Device*)+0x1a>
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	68 d4 15 02 c0       	push   0xc00215d4
c001fcfe:	e8 13 ef fe ff       	call   c000ec16 <KePanic(char const*)>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0a:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd0c:	85 c0                	test   eax,eax
c001fd0e:	74 3a                	je     c001fd4a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd17:	85 c0                	test   eax,eax
c001fd19:	74 2f                	je     c001fd4a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd26:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd3e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd48:	eb 68                	jmp    c001fdb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd50:	85 c0                	test   eax,eax
c001fd52:	75 4e                	jne    c001fda2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd5b:	85 c0                	test   eax,eax
c001fd5d:	75 43                	jne    c001fda2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd67:	89 10                	mov    DWORD PTR [eax],edx
c001fd69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd7b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd8c:	85 c0                	test   eax,eax
c001fd8e:	74 22                	je     c001fdb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd90:	83 ec 0c             	sub    esp,0xc
c001fd93:	68 f6 15 02 c0       	push   0xc00215f6
c001fd98:	e8 79 ee fe ff       	call   c000ec16 <KePanic(char const*)>
c001fd9d:	83 c4 10             	add    esp,0x10
c001fda0:	eb 10                	jmp    c001fdb2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fda2:	83 ec 0c             	sub    esp,0xc
c001fda5:	68 00 16 02 c0       	push   0xc0021600
c001fdaa:	e8 67 ee fe ff       	call   c000ec16 <KePanic(char const*)>
c001fdaf:	83 c4 10             	add    esp,0x10
c001fdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdb6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdb9:	8d 50 01             	lea    edx,[eax+0x1]
c001fdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdc0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fdc3:	90                   	nop
c001fdc4:	83 c4 0c             	add    esp,0xc
c001fdc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fdc8 <LinkedList<Device>::LinkedList()>:
c001fdc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fddd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fde1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe08:	90                   	nop
c001fe09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fe0c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fe0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe12:	85 c0                	test   eax,eax
c001fe14:	75 0e                	jne    c001fe24 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe1d:	85 c0                	test   eax,eax
c001fe1f:	75 03                	jne    c001fe24 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe21:	b0 01                	mov    al,0x1
c001fe23:	c3                   	ret    
c001fe24:	b0 00                	mov    al,0x0
c001fe26:	90                   	nop
c001fe27:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe28 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe2e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe30 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe30:	83 ec 0c             	sub    esp,0xc
c001fe33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe37:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe39:	85 c0                	test   eax,eax
c001fe3b:	75 17                	jne    c001fe54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe3d:	83 ec 0c             	sub    esp,0xc
c001fe40:	68 70 18 02 c0       	push   0xc0021870
c001fe45:	e8 cc ed fe ff       	call   c000ec16 <KePanic(char const*)>
c001fe4a:	83 c4 10             	add    esp,0x10
c001fe4d:	e9 96 00 00 00       	jmp    c001fee8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe52:	66 90                	xchg   ax,ax
c001fe54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe5e:	85 c0                	test   eax,eax
c001fe60:	0f 95 c0             	setne  al
c001fe63:	0f b6 c0             	movzx  eax,al
c001fe66:	85 c0                	test   eax,eax
c001fe68:	74 12                	je     c001fe7c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe6a:	83 ec 0c             	sub    esp,0xc
c001fe6d:	68 bb 18 02 c0       	push   0xc00218bb
c001fe72:	e8 9f ed fe ff       	call   c000ec16 <KePanic(char const*)>
c001fe77:	83 c4 10             	add    esp,0x10
c001fe7a:	66 90                	xchg   ax,ax
c001fe7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe80:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe82:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe85:	85 c0                	test   eax,eax
c001fe87:	0f 94 c0             	sete   al
c001fe8a:	0f b6 c0             	movzx  eax,al
c001fe8d:	85 c0                	test   eax,eax
c001fe8f:	74 33                	je     c001fec4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fe91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fead:	83 f8 01             	cmp    eax,0x1
c001feb0:	74 22                	je     c001fed4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001feb2:	83 ec 0c             	sub    esp,0xc
c001feb5:	68 94 18 02 c0       	push   0xc0021894
c001feba:	e8 57 ed fe ff       	call   c000ec16 <KePanic(char const*)>
c001febf:	83 c4 10             	add    esp,0x10
c001fec2:	eb 10                	jmp    c001fed4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec8:	8b 00                	mov    eax,DWORD PTR [eax]
c001feca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed1:	89 10                	mov    DWORD PTR [eax],edx
c001fed3:	90                   	nop
c001fed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fedb:	8d 50 ff             	lea    edx,[eax-0x1]
c001fede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fee5:	8d 76 00             	lea    esi,[esi+0x0]
c001fee8:	83 c4 0c             	add    esp,0xc
c001feeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001feec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001feec:	83 ec 0c             	sub    esp,0xc
c001feef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fef4:	75 12                	jne    c001ff08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fef6:	83 ec 0c             	sub    esp,0xc
c001fef9:	68 d4 15 02 c0       	push   0xc00215d4
c001fefe:	e8 13 ed fe ff       	call   c000ec16 <KePanic(char const*)>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	66 90                	xchg   ax,ax
c001ff08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff0e:	85 c0                	test   eax,eax
c001ff10:	74 36                	je     c001ff48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff19:	85 c0                	test   eax,eax
c001ff1b:	74 2b                	je     c001ff48 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff28:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff44:	eb 6a                	jmp    c001ffb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff46:	66 90                	xchg   ax,ax
c001ff48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff4e:	85 c0                	test   eax,eax
c001ff50:	75 4e                	jne    c001ffa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff59:	85 c0                	test   eax,eax
c001ff5b:	75 43                	jne    c001ffa0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff61:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff65:	89 10                	mov    DWORD PTR [eax],edx
c001ff67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff79:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff87:	85 c0                	test   eax,eax
c001ff89:	74 25                	je     c001ffb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff8b:	83 ec 0c             	sub    esp,0xc
c001ff8e:	68 f6 15 02 c0       	push   0xc00215f6
c001ff93:	e8 7e ec fe ff       	call   c000ec16 <KePanic(char const*)>
c001ff98:	83 c4 10             	add    esp,0x10
c001ff9b:	eb 13                	jmp    c001ffb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff9d:	8d 76 00             	lea    esi,[esi+0x0]
c001ffa0:	83 ec 0c             	sub    esp,0xc
c001ffa3:	68 00 16 02 c0       	push   0xc0021600
c001ffa8:	e8 69 ec fe ff       	call   c000ec16 <KePanic(char const*)>
c001ffad:	83 c4 10             	add    esp,0x10
c001ffb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffb7:	8d 50 01             	lea    edx,[eax+0x1]
c001ffba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffbe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffc1:	90                   	nop
c001ffc2:	83 c4 0c             	add    esp,0xc
c001ffc5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ffc8 <ACPI::~ACPI()>:
c001ffc8:	83 ec 0c             	sub    esp,0xc
c001ffcb:	ba 0c 1c 02 c0       	mov    edx,0xc0021c0c
c001ffd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd4:	89 10                	mov    DWORD PTR [eax],edx
c001ffd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	50                   	push   eax
c001ffde:	e8 65 8f fe ff       	call   c0008f48 <Device::~Device()>
c001ffe3:	83 c4 10             	add    esp,0x10
c001ffe6:	90                   	nop
c001ffe7:	83 c4 0c             	add    esp,0xc
c001ffea:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ffec <ACPI::~ACPI()>:
c001ffec:	83 ec 0c             	sub    esp,0xc
c001ffef:	83 ec 0c             	sub    esp,0xc
c001fff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fff6:	e8 cd ff ff ff       	call   c001ffc8 <ACPI::~ACPI()>
c001fffb:	83 c4 10             	add    esp,0x10
c001fffe:	83 ec 08             	sub    esp,0x8
c0020001:	68 64 12 00 00       	push   0x1264
c0020006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002000a:	e8 4c c6 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	83 c4 0c             	add    esp,0xc
c0020015:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020018 <LinkedList<Device>::~LinkedList()>:
c0020018:	90                   	nop
c0020019:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002001c <LinkedList<Device>::isEmpty()>:
c002001c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020020:	8b 00                	mov    eax,DWORD PTR [eax]
c0020022:	85 c0                	test   eax,eax
c0020024:	75 0e                	jne    c0020034 <LinkedList<Device>::isEmpty()+0x18>
c0020026:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002002a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002002d:	85 c0                	test   eax,eax
c002002f:	75 03                	jne    c0020034 <LinkedList<Device>::isEmpty()+0x18>
c0020031:	b0 01                	mov    al,0x1
c0020033:	c3                   	ret    
c0020034:	b0 00                	mov    al,0x0
c0020036:	90                   	nop
c0020037:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020038 <LinkedList<Device>::getFirstElement()>:
c0020038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003c:	8b 00                	mov    eax,DWORD PTR [eax]
c002003e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020040 <LinkedList<Device>::removeFirst()>:
c0020040:	83 ec 0c             	sub    esp,0xc
c0020043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020047:	8b 00                	mov    eax,DWORD PTR [eax]
c0020049:	85 c0                	test   eax,eax
c002004b:	75 17                	jne    c0020064 <LinkedList<Device>::removeFirst()+0x24>
c002004d:	83 ec 0c             	sub    esp,0xc
c0020050:	68 70 18 02 c0       	push   0xc0021870
c0020055:	e8 bc eb fe ff       	call   c000ec16 <KePanic(char const*)>
c002005a:	83 c4 10             	add    esp,0x10
c002005d:	e9 92 00 00 00       	jmp    c00200f4 <LinkedList<Device>::removeFirst()+0xb4>
c0020062:	66 90                	xchg   ax,ax
c0020064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020068:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002006b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020071:	85 c0                	test   eax,eax
c0020073:	74 13                	je     c0020088 <LinkedList<Device>::removeFirst()+0x48>
c0020075:	83 ec 0c             	sub    esp,0xc
c0020078:	68 bb 18 02 c0       	push   0xc00218bb
c002007d:	e8 94 eb fe ff       	call   c000ec16 <KePanic(char const*)>
c0020082:	83 c4 10             	add    esp,0x10
c0020085:	8d 76 00             	lea    esi,[esi+0x0]
c0020088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008c:	8b 00                	mov    eax,DWORD PTR [eax]
c002008e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020094:	85 c0                	test   eax,eax
c0020096:	75 34                	jne    c00200cc <LinkedList<Device>::removeFirst()+0x8c>
c0020098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002009c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200b4:	83 f8 01             	cmp    eax,0x1
c00200b7:	74 27                	je     c00200e0 <LinkedList<Device>::removeFirst()+0xa0>
c00200b9:	83 ec 0c             	sub    esp,0xc
c00200bc:	68 94 18 02 c0       	push   0xc0021894
c00200c1:	e8 50 eb fe ff       	call   c000ec16 <KePanic(char const*)>
c00200c6:	83 c4 10             	add    esp,0x10
c00200c9:	eb 15                	jmp    c00200e0 <LinkedList<Device>::removeFirst()+0xa0>
c00200cb:	90                   	nop
c00200cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200d2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00200d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200dc:	89 10                	mov    DWORD PTR [eax],edx
c00200de:	66 90                	xchg   ax,ax
c00200e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200e7:	8d 50 ff             	lea    edx,[eax-0x1]
c00200ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00200f1:	8d 76 00             	lea    esi,[esi+0x0]
c00200f4:	83 c4 0c             	add    esp,0xc
c00200f7:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00200f8 <Computer::~Computer()>:
c00200f8:	83 ec 0c             	sub    esp,0xc
c00200fb:	ba ac 1e 02 c0       	mov    edx,0xc0021eac
c0020100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020104:	89 10                	mov    DWORD PTR [eax],edx
c0020106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010a:	83 ec 0c             	sub    esp,0xc
c002010d:	50                   	push   eax
c002010e:	e8 35 8e fe ff       	call   c0008f48 <Device::~Device()>
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	90                   	nop
c0020117:	83 c4 0c             	add    esp,0xc
c002011a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002011c <Computer::~Computer()>:
c002011c:	83 ec 0c             	sub    esp,0xc
c002011f:	83 ec 0c             	sub    esp,0xc
c0020122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020126:	e8 cd ff ff ff       	call   c00200f8 <Computer::~Computer()>
c002012b:	83 c4 10             	add    esp,0x10
c002012e:	83 ec 08             	sub    esp,0x8
c0020131:	68 6c 01 00 00       	push   0x16c
c0020136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002013a:	e8 1c c5 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002013f:	83 c4 10             	add    esp,0x10
c0020142:	83 c4 0c             	add    esp,0xc
c0020145:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020146 <idleCommon()>:
c0020146:	83 ec 0c             	sub    esp,0xc
c0020149:	fa                   	cli    
c002014a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0020150:	e8 5b 52 ff ff       	call   c00153b0 <schedule()>
c0020155:	f0 ff 0d b0 c6 02 c0 	lock dec DWORD PTR ds:0xc002c6b0
c002015c:	83 3d b0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6b0,0x0
c0020163:	75 01                	jne    c0020166 <idleCommon()+0x20>
c0020165:	fb                   	sti    
c0020166:	83 c4 0c             	add    esp,0xc
c0020169:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002016a <LinkedList<UnixFile>::~LinkedList()>:
c002016a:	90                   	nop
c002016b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002016c <LinkedList<UnixFile>::LinkedList()>:
c002016c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020170:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002017a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020185:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002018c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020190:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002019a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201ac:	90                   	nop
c00201ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00201ae <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00201ae:	83 ec 0c             	sub    esp,0xc
c00201b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201b6:	75 10                	jne    c00201c8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	68 d4 15 02 c0       	push   0xc00215d4
c00201c0:	e8 51 ea fe ff       	call   c000ec16 <KePanic(char const*)>
c00201c5:	83 c4 10             	add    esp,0x10
c00201c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00201ce:	85 c0                	test   eax,eax
c00201d0:	74 34                	je     c0020206 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00201d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201d9:	85 c0                	test   eax,eax
c00201db:	74 29                	je     c0020206 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00201dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201e8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00201eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00201f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00201f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020204:	eb 65                	jmp    c002026b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002020a:	8b 00                	mov    eax,DWORD PTR [eax]
c002020c:	85 c0                	test   eax,eax
c002020e:	75 4b                	jne    c002025b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020214:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020217:	85 c0                	test   eax,eax
c0020219:	75 40                	jne    c002025b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002021b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020223:	89 10                	mov    DWORD PTR [eax],edx
c0020225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020229:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002022d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020237:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002023e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020242:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020245:	85 c0                	test   eax,eax
c0020247:	74 22                	je     c002026b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020249:	83 ec 0c             	sub    esp,0xc
c002024c:	68 f6 15 02 c0       	push   0xc00215f6
c0020251:	e8 c0 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020256:	83 c4 10             	add    esp,0x10
c0020259:	eb 10                	jmp    c002026b <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002025b:	83 ec 0c             	sub    esp,0xc
c002025e:	68 00 16 02 c0       	push   0xc0021600
c0020263:	e8 ae e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020268:	83 c4 10             	add    esp,0x10
c002026b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020272:	8d 50 01             	lea    edx,[eax+0x1]
c0020275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020279:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002027c:	90                   	nop
c002027d:	83 c4 0c             	add    esp,0xc
c0020280:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0020282 <LinkedList<UnixFile>::getFirstElement()>:
c0020282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020286:	8b 00                	mov    eax,DWORD PTR [eax]
c0020288:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002028a <LinkedList<UnixFile>::removeFirst()>:
c002028a:	83 ec 0c             	sub    esp,0xc
c002028d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020291:	8b 00                	mov    eax,DWORD PTR [eax]
c0020293:	85 c0                	test   eax,eax
c0020295:	75 12                	jne    c00202a9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0020297:	83 ec 0c             	sub    esp,0xc
c002029a:	68 70 18 02 c0       	push   0xc0021870
c002029f:	e8 72 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c00202a4:	83 c4 10             	add    esp,0x10
c00202a7:	eb 7e                	jmp    c0020327 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00202a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202b3:	85 c0                	test   eax,eax
c00202b5:	74 10                	je     c00202c7 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00202b7:	83 ec 0c             	sub    esp,0xc
c00202ba:	68 bb 18 02 c0       	push   0xc00218bb
c00202bf:	e8 52 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c00202c4:	83 c4 10             	add    esp,0x10
c00202c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00202cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202d0:	85 c0                	test   eax,eax
c00202d2:	75 33                	jne    c0020307 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00202d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00202de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00202e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202f0:	83 f8 01             	cmp    eax,0x1
c00202f3:	74 21                	je     c0020316 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00202f5:	83 ec 0c             	sub    esp,0xc
c00202f8:	68 94 18 02 c0       	push   0xc0021894
c00202fd:	e8 14 e9 fe ff       	call   c000ec16 <KePanic(char const*)>
c0020302:	83 c4 10             	add    esp,0x10
c0020305:	eb 0f                	jmp    c0020316 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030b:	8b 00                	mov    eax,DWORD PTR [eax]
c002030d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0020310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020314:	89 10                	mov    DWORD PTR [eax],edx
c0020316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002031a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002031d:	8d 50 ff             	lea    edx,[eax-0x1]
c0020320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020324:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020327:	83 c4 0c             	add    esp,0xc
c002032a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002032c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002032c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020330:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020333:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020334 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020334:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020338:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002033b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002033c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002033c:	90                   	nop
c002033d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020340 <ThreadControlBlock::ThreadControlBlock()>:
c0020340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020344:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002034b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002034f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002035a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020365:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002036c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020370:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020377:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002037b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002037f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020383:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0020387:	90                   	nop
c0020388:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002038c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002038c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020390:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002039a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203cc:	90                   	nop
c00203cd:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00203ce <CPU::~CPU()>:
c00203ce:	83 ec 0c             	sub    esp,0xc
c00203d1:	ba e8 2f 02 c0       	mov    edx,0xc0022fe8
c00203d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203da:	89 10                	mov    DWORD PTR [eax],edx
c00203dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203e0:	83 ec 0c             	sub    esp,0xc
c00203e3:	50                   	push   eax
c00203e4:	e8 5f 8b fe ff       	call   c0008f48 <Device::~Device()>
c00203e9:	83 c4 10             	add    esp,0x10
c00203ec:	90                   	nop
c00203ed:	83 c4 0c             	add    esp,0xc
c00203f0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00203f2 <CPU::~CPU()>:
c00203f2:	83 ec 0c             	sub    esp,0xc
c00203f5:	83 ec 0c             	sub    esp,0xc
c00203f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203fc:	e8 cd ff ff ff       	call   c00203ce <CPU::~CPU()>
c0020401:	83 c4 10             	add    esp,0x10
c0020404:	83 ec 08             	sub    esp,0x8
c0020407:	68 78 11 00 00       	push   0x1178
c002040c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020410:	e8 46 c2 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020415:	83 c4 10             	add    esp,0x10
c0020418:	83 c4 0c             	add    esp,0xc
c002041b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002041c <PCI::~PCI()>:
c002041c:	83 ec 0c             	sub    esp,0xc
c002041f:	ba 4c 35 02 c0       	mov    edx,0xc002354c
c0020424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020428:	89 10                	mov    DWORD PTR [eax],edx
c002042a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002042e:	83 ec 0c             	sub    esp,0xc
c0020431:	50                   	push   eax
c0020432:	e8 e9 84 fe ff       	call   c0008920 <Bus::~Bus()>
c0020437:	83 c4 10             	add    esp,0x10
c002043a:	90                   	nop
c002043b:	83 c4 0c             	add    esp,0xc
c002043e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020440 <PCI::~PCI()>:
c0020440:	83 ec 0c             	sub    esp,0xc
c0020443:	83 ec 0c             	sub    esp,0xc
c0020446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002044a:	e8 cd ff ff ff       	call   c002041c <PCI::~PCI()>
c002044f:	83 c4 10             	add    esp,0x10
c0020452:	83 ec 08             	sub    esp,0x8
c0020455:	68 5c 01 00 00       	push   0x15c
c002045a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002045e:	e8 f8 c1 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020463:	83 c4 10             	add    esp,0x10
c0020466:	83 c4 0c             	add    esp,0xc
c0020469:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002046a <IDE::~IDE()>:
c002046a:	83 ec 0c             	sub    esp,0xc
c002046d:	ba 84 36 02 c0       	mov    edx,0xc0023684
c0020472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020476:	89 10                	mov    DWORD PTR [eax],edx
c0020478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002047c:	83 ec 0c             	sub    esp,0xc
c002047f:	50                   	push   eax
c0020480:	e8 53 8f fe ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c0020485:	83 c4 10             	add    esp,0x10
c0020488:	90                   	nop
c0020489:	83 c4 0c             	add    esp,0xc
c002048c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002048e <IDE::~IDE()>:
c002048e:	83 ec 0c             	sub    esp,0xc
c0020491:	83 ec 0c             	sub    esp,0xc
c0020494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020498:	e8 cd ff ff ff       	call   c002046a <IDE::~IDE()>
c002049d:	83 c4 10             	add    esp,0x10
c00204a0:	83 ec 08             	sub    esp,0x8
c00204a3:	68 70 02 00 00       	push   0x270
c00204a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ac:	e8 aa c1 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00204b1:	83 c4 10             	add    esp,0x10
c00204b4:	83 c4 0c             	add    esp,0xc
c00204b7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00204b8 <SATABus::~SATABus()>:
c00204b8:	83 ec 0c             	sub    esp,0xc
c00204bb:	ba d4 36 02 c0       	mov    edx,0xc00236d4
c00204c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c4:	89 10                	mov    DWORD PTR [eax],edx
c00204c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ca:	83 ec 0c             	sub    esp,0xc
c00204cd:	50                   	push   eax
c00204ce:	e8 05 8f fe ff       	call   c00093d8 <HardDiskController::~HardDiskController()>
c00204d3:	83 c4 10             	add    esp,0x10
c00204d6:	90                   	nop
c00204d7:	83 c4 0c             	add    esp,0xc
c00204da:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00204dc <SATABus::~SATABus()>:
c00204dc:	83 ec 0c             	sub    esp,0xc
c00204df:	83 ec 0c             	sub    esp,0xc
c00204e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e6:	e8 cd ff ff ff       	call   c00204b8 <SATABus::~SATABus()>
c00204eb:	83 c4 10             	add    esp,0x10
c00204ee:	83 ec 08             	sub    esp,0x8
c00204f1:	68 64 01 00 00       	push   0x164
c00204f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204fa:	e8 5c c1 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00204ff:	83 c4 10             	add    esp,0x10
c0020502:	83 c4 0c             	add    esp,0xc
c0020505:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020506 <ATA::~ATA()>:
c0020506:	83 ec 0c             	sub    esp,0xc
c0020509:	ba 14 37 02 c0       	mov    edx,0xc0023714
c002050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020512:	89 10                	mov    DWORD PTR [eax],edx
c0020514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020518:	83 ec 0c             	sub    esp,0xc
c002051b:	50                   	push   eax
c002051c:	e8 99 8f fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c0020521:	83 c4 10             	add    esp,0x10
c0020524:	90                   	nop
c0020525:	83 c4 0c             	add    esp,0xc
c0020528:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002052a <ATA::~ATA()>:
c002052a:	83 ec 0c             	sub    esp,0xc
c002052d:	83 ec 0c             	sub    esp,0xc
c0020530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020534:	e8 cd ff ff ff       	call   c0020506 <ATA::~ATA()>
c0020539:	83 c4 10             	add    esp,0x10
c002053c:	83 ec 08             	sub    esp,0x8
c002053f:	68 7c 01 00 00       	push   0x17c
c0020544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020548:	e8 0e c1 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002054d:	83 c4 10             	add    esp,0x10
c0020550:	83 c4 0c             	add    esp,0xc
c0020553:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020554 <ATAPI::~ATAPI()>:
c0020554:	83 ec 0c             	sub    esp,0xc
c0020557:	ba 5c 37 02 c0       	mov    edx,0xc002375c
c002055c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020560:	89 10                	mov    DWORD PTR [eax],edx
c0020562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020566:	83 ec 0c             	sub    esp,0xc
c0020569:	50                   	push   eax
c002056a:	e8 4b 8f fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c002056f:	83 c4 10             	add    esp,0x10
c0020572:	90                   	nop
c0020573:	83 c4 0c             	add    esp,0xc
c0020576:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020578 <ATAPI::~ATAPI()>:
c0020578:	83 ec 0c             	sub    esp,0xc
c002057b:	83 ec 0c             	sub    esp,0xc
c002057e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020582:	e8 cd ff ff ff       	call   c0020554 <ATAPI::~ATAPI()>
c0020587:	83 c4 10             	add    esp,0x10
c002058a:	83 ec 08             	sub    esp,0x8
c002058d:	68 84 01 00 00       	push   0x184
c0020592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020596:	e8 c0 c0 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c002059b:	83 c4 10             	add    esp,0x10
c002059e:	83 c4 0c             	add    esp,0xc
c00205a1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00205a2 <SATA::~SATA()>:
c00205a2:	83 ec 0c             	sub    esp,0xc
c00205a5:	ba 1c 38 02 c0       	mov    edx,0xc002381c
c00205aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ae:	89 10                	mov    DWORD PTR [eax],edx
c00205b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b4:	83 ec 0c             	sub    esp,0xc
c00205b7:	50                   	push   eax
c00205b8:	e8 fd 8e fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c00205bd:	83 c4 10             	add    esp,0x10
c00205c0:	90                   	nop
c00205c1:	83 c4 0c             	add    esp,0xc
c00205c4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00205c6 <SATA::~SATA()>:
c00205c6:	83 ec 0c             	sub    esp,0xc
c00205c9:	83 ec 0c             	sub    esp,0xc
c00205cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205d0:	e8 cd ff ff ff       	call   c00205a2 <SATA::~SATA()>
c00205d5:	83 c4 10             	add    esp,0x10
c00205d8:	83 ec 08             	sub    esp,0x8
c00205db:	68 7c 01 00 00       	push   0x17c
c00205e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e4:	e8 72 c0 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00205e9:	83 c4 10             	add    esp,0x10
c00205ec:	83 c4 0c             	add    esp,0xc
c00205ef:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00205f0 <SATAPI::~SATAPI()>:
c00205f0:	83 ec 0c             	sub    esp,0xc
c00205f3:	ba 40 39 02 c0       	mov    edx,0xc0023940
c00205f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205fc:	89 10                	mov    DWORD PTR [eax],edx
c00205fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020602:	83 ec 0c             	sub    esp,0xc
c0020605:	50                   	push   eax
c0020606:	e8 af 8e fe ff       	call   c00094ba <PhysicalDisk::~PhysicalDisk()>
c002060b:	83 c4 10             	add    esp,0x10
c002060e:	90                   	nop
c002060f:	83 c4 0c             	add    esp,0xc
c0020612:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020614 <SATAPI::~SATAPI()>:
c0020614:	83 ec 0c             	sub    esp,0xc
c0020617:	83 ec 0c             	sub    esp,0xc
c002061a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002061e:	e8 cd ff ff ff       	call   c00205f0 <SATAPI::~SATAPI()>
c0020623:	83 c4 10             	add    esp,0x10
c0020626:	83 ec 08             	sub    esp,0x8
c0020629:	68 84 01 00 00       	push   0x184
c002062e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020632:	e8 24 c0 fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020637:	83 c4 10             	add    esp,0x10
c002063a:	83 c4 0c             	add    esp,0xc
c002063d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002063e <IOAPIC::~IOAPIC()>:
c002063e:	83 ec 0c             	sub    esp,0xc
c0020641:	ba a0 39 02 c0       	mov    edx,0xc00239a0
c0020646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064a:	89 10                	mov    DWORD PTR [eax],edx
c002064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020650:	83 ec 0c             	sub    esp,0xc
c0020653:	50                   	push   eax
c0020654:	e8 ef 88 fe ff       	call   c0008f48 <Device::~Device()>
c0020659:	83 c4 10             	add    esp,0x10
c002065c:	90                   	nop
c002065d:	83 c4 0c             	add    esp,0xc
c0020660:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020662 <IOAPIC::~IOAPIC()>:
c0020662:	83 ec 0c             	sub    esp,0xc
c0020665:	83 ec 0c             	sub    esp,0xc
c0020668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002066c:	e8 cd ff ff ff       	call   c002063e <IOAPIC::~IOAPIC()>
c0020671:	83 c4 10             	add    esp,0x10
c0020674:	83 ec 08             	sub    esp,0x8
c0020677:	68 68 01 00 00       	push   0x168
c002067c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020680:	e8 d6 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020685:	83 c4 10             	add    esp,0x10
c0020688:	83 c4 0c             	add    esp,0xc
c002068b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002068c <APICTimer::~APICTimer()>:
c002068c:	83 ec 0c             	sub    esp,0xc
c002068f:	ba e8 39 02 c0       	mov    edx,0xc00239e8
c0020694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020698:	89 10                	mov    DWORD PTR [eax],edx
c002069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002069e:	83 ec 0c             	sub    esp,0xc
c00206a1:	50                   	push   eax
c00206a2:	e8 15 a0 fe ff       	call   c000a6bc <Timer::~Timer()>
c00206a7:	83 c4 10             	add    esp,0x10
c00206aa:	90                   	nop
c00206ab:	83 c4 0c             	add    esp,0xc
c00206ae:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00206b0 <APICTimer::~APICTimer()>:
c00206b0:	83 ec 0c             	sub    esp,0xc
c00206b3:	83 ec 0c             	sub    esp,0xc
c00206b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ba:	e8 cd ff ff ff       	call   c002068c <APICTimer::~APICTimer()>
c00206bf:	83 c4 10             	add    esp,0x10
c00206c2:	83 ec 08             	sub    esp,0x8
c00206c5:	68 60 01 00 00       	push   0x160
c00206ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ce:	e8 88 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c00206d3:	83 c4 10             	add    esp,0x10
c00206d6:	83 c4 0c             	add    esp,0xc
c00206d9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00206dc <PIT::~PIT()>:
c00206dc:	83 ec 0c             	sub    esp,0xc
c00206df:	ba 38 3a 02 c0       	mov    edx,0xc0023a38
c00206e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206e8:	89 10                	mov    DWORD PTR [eax],edx
c00206ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206ee:	83 ec 0c             	sub    esp,0xc
c00206f1:	50                   	push   eax
c00206f2:	e8 c5 9f fe ff       	call   c000a6bc <Timer::~Timer()>
c00206f7:	83 c4 10             	add    esp,0x10
c00206fa:	90                   	nop
c00206fb:	83 c4 0c             	add    esp,0xc
c00206fe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020700 <PIT::~PIT()>:
c0020700:	83 ec 0c             	sub    esp,0xc
c0020703:	83 ec 0c             	sub    esp,0xc
c0020706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002070a:	e8 cd ff ff ff       	call   c00206dc <PIT::~PIT()>
c002070f:	83 c4 10             	add    esp,0x10
c0020712:	83 ec 08             	sub    esp,0x8
c0020715:	68 5c 01 00 00       	push   0x15c
c002071a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002071e:	e8 38 bf fe ff       	call   c000c65b <operator delete(void*, unsigned long)>
c0020723:	83 c4 10             	add    esp,0x10
c0020726:	83 c4 0c             	add    esp,0xc
c0020729:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 1b 22 02 c0       	mov    esi,0xc002221b
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 37 22 02 c0       	mov    esi,0xc0022237
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
